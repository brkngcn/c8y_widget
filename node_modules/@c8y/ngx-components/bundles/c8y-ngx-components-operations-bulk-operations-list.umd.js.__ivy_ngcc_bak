(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('@c8y/ngx-components'), require('@c8y/ngx-components/operations/status-filter'), require('@c8y/ngx-components/operations/bulk-operation-scheduler'), require('@c8y/ngx-components/operations/bulk-operation-list-item'), require('@c8y/ngx-components/operations/bulk-operations-service'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('ngx-bootstrap/modal')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/bulk-operations-list', ['exports', '@angular/core', '@angular/router', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', '@c8y/ngx-components', '@c8y/ngx-components/operations/status-filter', '@c8y/ngx-components/operations/bulk-operation-scheduler', '@c8y/ngx-components/operations/bulk-operation-list-item', '@c8y/ngx-components/operations/bulk-operations-service', 'lodash-es', 'rxjs', 'rxjs/operators', 'ngx-bootstrap/modal'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations["bulk-operations-list"] = {}), global.ng.core, global.ng.router, global.popover, global.tooltip, global.c8y["ngx-components"], global.c8y["ngx-components"].operations["status-filter"], global.c8y["ngx-components"].operations["bulk-operation-scheduler"], global.c8y["ngx-components"].operations["bulk-operation-list-item"], global.c8y["ngx-components"].operations["bulk-operations-service"], global.lodashEs, global.rxjs, global.rxjs.operators, global.modal));
})(this, (function (exports, core, router, popover, tooltip, ngxComponents, statusFilter, bulkOperationScheduler, bulkOperationListItem, bulkOperationsService, lodashEs, rxjs, operators, modal) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var BulkOperationsModalComponent = /** @class */ (function () {
        function BulkOperationsModalComponent(bsModalRef, resolver) {
            this.bsModalRef = bsModalRef;
            this.resolver = resolver;
            this.showComponent = false;
        }
        BulkOperationsModalComponent.prototype.cancel = function () {
            this.bsModalRef.hide();
        };
        BulkOperationsModalComponent.prototype.createComponent = function (item) {
            if (item && item.component) {
                this.showComponent = true;
                var factory = this.resolver.resolveComponentFactory(item.component);
                this.container.createComponent(factory);
            }
        };
        return BulkOperationsModalComponent;
    }());
    BulkOperationsModalComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-bulk-operations-modal',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4 translate>Add bulk operation</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body text-center\" [hidden]=\"showComponent\">\n      <h4 translate>Select one of the available options</h4>\n      <p c8y-guide-docs>\n        <small translate ngNonBindable>\n          Check the\n          <a c8y-guide-href=\"users-guide/device-management/#bulk-operation-wizard\"\n            >User guide`KEEP_ORIGINAL`</a\n          >\n          for more details.</small\n        >\n      </p>\n    </div>\n\n    <c8y-bulk-operation-type-list\n      (onCustomType)=\"createComponent($event)\"\n    ></c8y-bulk-operation-type-list>\n    <template #container></template>\n  </div>\n  <div class=\"modal-footer\" [hidden]=\"showComponent\">\n    <button\n      (click)=\"cancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    BulkOperationsModalComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: core.ComponentFactoryResolver }
    ]; };
    BulkOperationsModalComponent.propDecorators = {
        container: [{ type: core.ViewChild, args: ['container', { static: false, read: core.ViewContainerRef },] }]
    };

    var BulkOperationModalsService = /** @class */ (function () {
        function BulkOperationModalsService(bsModalService) {
            this.bsModalService = bsModalService;
        }
        BulkOperationModalsService.prototype.showNewBulkOperationModal = function () {
            this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {
                backdrop: 'static',
                class: 'modal-sm'
            });
        };
        BulkOperationModalsService.prototype.hideNewBulkOperationModal = function () {
            if (this.bsModalRef) {
                this.bsModalRef.hide();
            }
        };
        return BulkOperationModalsService;
    }());
    BulkOperationModalsService.decorators = [
        { type: core.Injectable }
    ];
    BulkOperationModalsService.ctorParameters = function () { return [
        { type: modal.BsModalService }
    ]; };

    var BulkOperationsListComponent = /** @class */ (function () {
        function BulkOperationsListComponent(realtime, bulkOperationsService, bulkOperationModalsService) {
            var _this = this;
            this.realtime = realtime;
            this.bulkOperationsService = bulkOperationsService;
            this.bulkOperationModalsService = bulkOperationModalsService;
            this.bulkTypes = [];
            this.selectedTypeFilters = this.getTypeFilters();
            this.bulkOperationStatusOptions = bulkOperationListItem.BULK_OPERATION_STATUS_OPTIONS;
            this.refreshLoading = false;
            this.statusFilter$ = new rxjs.BehaviorSubject(null);
            this.typeFilter$ = new rxjs.BehaviorSubject(null);
            this.timeFilter$ = new rxjs.BehaviorSubject(null);
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.bulkOperations$ = rxjs.combineLatest(this.statusFilter$, this.timeFilter$, this.typeFilter$, this.reload$).pipe(operators.tap(function () {
                _this.refreshLoading = true;
            }), operators.switchMap(function (_c) {
                var _d = __read(_c, 2), statusFilters = _d[0], timeFilters = _d[1];
                return _this.filter(statusFilters, timeFilters);
            }), operators.withLatestFrom(this.typeFilter$), operators.map(function (_c) {
                var _d = __read(_c, 2), result = _d[0], typeFilter = _d[1];
                _this.filterPipe = rxjs.pipe(operators.map(function (data) { return _this.filterByType(data, typeFilter); }));
                return Object.assign(Object.assign({}, result), { data: _this.filterByType(result.data, typeFilter) });
            }), operators.tap(function () {
                _this.refreshLoading = false;
            }), operators.shareReplay(1));
            this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());
        }
        BulkOperationsListComponent.prototype.ngOnInit = function () {
            this.bulkTypes = this.bulkOperationsService.getBulkTypes();
        };
        BulkOperationsListComponent.prototype.filterByType = function (bulkOperations, typeFilter) {
            var flattenedFragments = this.flattenFilterFragments(typeFilter);
            if (
            // return data unfiltered if no filters selected...
            !flattenedFragments.length ||
                // ...or when all filters are selected
                this.allFilterFragments.every(function (fragment) { return flattenedFragments.includes(fragment); })) {
                return bulkOperations;
            }
            var filteredData = bulkOperations.filter(function (item) {
                return Object.keys(item.operationPrototype).some(function (key) { return flattenedFragments.includes(key); });
            });
            return filteredData;
        };
        BulkOperationsListComponent.prototype.resetFilter = function () {
            this.statusFilter$.next(null);
            this.timeFilter$.next(null);
            this.typeFilter$.next(null);
            this.datePicker.clearFilter();
            this.selectedTypeFilters = this.getTypeFilters();
            this.statusFilter.reset();
        };
        BulkOperationsListComponent.prototype.isFilterApplied = function () {
            var _a, _b;
            return (!!((_a = this.statusFilter$.getValue()) === null || _a === void 0 ? void 0 : _a.length) ||
                !!((_b = this.typeFilter$.getValue()) === null || _b === void 0 ? void 0 : _b.length) ||
                !!this.timeFilter$.getValue());
        };
        BulkOperationsListComponent.prototype.filter = function (statusFilters, timeFilter) {
            var status = statusFilters && statusFilters.length > 0
                ? {
                    generalStatus: lodashEs.flatten(statusFilters.map(function (statusFilter) { return statusFilter.generalStatuses; }))
                }
                : {};
            var time = timeFilter
                ? Object.assign(Object.assign({}, (timeFilter.dateFrom && {
                    dateFrom: timeFilter.dateFrom.toISOString()
                })), (timeFilter.dateTo && {
                    dateTo: timeFilter.dateTo.toISOString()
                })) : {};
            return this.getBulkOperations(Object.assign(Object.assign({}, status), time));
        };
        BulkOperationsListComponent.prototype.getBulkOperations = function (filter) {
            return this.bulkOperationsService.getBulkOperations(filter);
        };
        BulkOperationsListComponent.prototype.getTypeFilters = function () {
            return this.bulkOperationsService.getBulkTypes();
        };
        BulkOperationsListComponent.prototype.addBulkOperation = function () {
            this.bulkOperationModalsService.showNewBulkOperationModal();
        };
        BulkOperationsListComponent.prototype.openFailedOperation = function (failedParentId) {
            this.listItems.forEach(function (item) {
                if (item.bulkOperation.id === failedParentId) {
                    item.listItem.collapsed = false;
                    item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            });
        };
        BulkOperationsListComponent.prototype.compareOperations = function (operationA, operationB) {
            return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();
        };
        BulkOperationsListComponent.prototype.flattenFilterFragments = function (filters) {
            return (filters || []).reduce(function (flattened, current) { return flattened.concat(current.fragments); }, []);
        };
        return BulkOperationsListComponent;
    }());
    BulkOperationsListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-bulk-operations',
                    template: "<c8y-title> {{ 'Device control' | translate }}</c8y-title>\n<c8y-action-bar-item *ngIf=\"bulkTypes?.length\" itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <label translate class=\"hidden-sm\">Type</label>\n  <c8y-select\n    style=\"width: 180px\"\n    [items]=\"bulkTypes\"\n    [selected]=\"selectedTypeFilters\"\n    [disableApplyOnNoSelection]=\"true\"\n    (onChange)=\"selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)\"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"bulkOperationStatusOptions\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-date-picker (onDateSelected)=\"timeFilter$.next($event)\"></c8y-date-picker>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"bulkTypes?.length\"\n    class=\"btn btn-link d-flex a-i-center\"\n    (click)=\"addBulkOperation()\"\n    title=\"{{ 'Add bulk operation' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i>\n    <span class=\"text-truncate\">\n      {{ 'Add bulk operation' | translate }}\n    </span>\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link d-flex a-i-center\"\n    title=\"{{ 'Reload' | translate }}\"\n    (click)=\"reload$.next()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': refreshLoading }\" class=\"m-r-4\"></i>\n    <span class=\"text-truncate\">\n      {{ 'Reload' | translate }}\n    </span>\n  </button>\n</c8y-action-bar-item>\n\n<!-- Empty state -->\n<c8y-ui-empty-state\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()\"\n  icon=\"c8y-energy\"\n  [title]=\"'No items to display' | translate\"\n  [subtitle]=\"'Bulk operations will be displayed here' | translate\"\n>\n  <button\n    type=\"button\"\n    *ngIf=\"bulkTypes?.length\"\n    title=\"{{ 'Add bulk operation' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"addBulkOperation()\"\n    translate\n  >\n    Add bulk operation\n  </button>\n</c8y-ui-empty-state>\n\n<!-- No results empty state -->\n<c8y-ui-empty-state\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()\"\n  icon=\"search\"\n  [title]=\"'No results to display.' | translate\"\n  [subtitle]=\"'Adjust or reset the filter.' | translate\"\n>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"resetFilter()\"\n    translate\n  >\n    Reset filter\n  </button>\n</c8y-ui-empty-state>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (bulkOperations$ | async)?.data.length < 10 }\"\n>\n  <div\n    class=\"page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item\"\n    *ngIf=\"(bulkOperations$ | async)?.data.length\"\n  >\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"p-l-32 p-r-40\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-57\">\n          <div class=\"col-5\">\n            {{ 'Operation' | translate }}\n          </div>\n          <div class=\"flex-grow\">\n            {{ 'Progress' | translate }}\n          </div>\n          <div class=\"col-4\">\n            {{ 'Status' | translate }}\n          </div>\n        </div>\n      </div>\n      <div class=\"c8y-list__item__actions\"></div>\n    </div>\n  </div>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let bulkOperation of bulkOperations$ | async;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto'\n    \"\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      (reload)=\"reload$.next()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      class=\"d-contents\"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n",
                    providers: [ngxComponents.OperationBulkRealtimeService]
                },] }
    ];
    BulkOperationsListComponent.ctorParameters = function () { return [
        { type: ngxComponents.OperationBulkRealtimeService },
        { type: bulkOperationsService.BulkOperationsService },
        { type: BulkOperationModalsService }
    ]; };
    BulkOperationsListComponent.propDecorators = {
        listItems: [{ type: core.ViewChildren, args: [bulkOperationListItem.BulkOperationListItemComponent,] }],
        statusFilter: [{ type: core.ViewChild, args: ['statusFilter', { static: true },] }],
        datePicker: [{ type: core.ViewChild, args: [ngxComponents.DatePickerComponent, { static: true },] }]
    };

    var BulkOperationTypeListComponent = /** @class */ (function () {
        function BulkOperationTypeListComponent(router, bulkOperationsService, bulkOperationModalsService) {
            this.router = router;
            this.bulkOperationsService = bulkOperationsService;
            this.bulkOperationModalsService = bulkOperationModalsService;
            this.onCustomType = new core.EventEmitter();
            this.bulkList = [];
        }
        BulkOperationTypeListComponent.prototype.ngOnInit = function () {
            this.bulkList = this.bulkOperationsService.getBulkTypes();
        };
        BulkOperationTypeListComponent.prototype.handleClick = function (item) {
            if (item.path) {
                this.bulkOperationModalsService.hideNewBulkOperationModal();
                this.router.navigateByUrl(item.path);
            }
            else if (item.component) {
                this.onCustomType.emit(item);
            }
        };
        return BulkOperationTypeListComponent;
    }());
    BulkOperationTypeListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-bulk-operation-type-list',
                    template: "<div class=\"list-group list-group-links\">\n  <button\n    *ngFor=\"let item of bulkList\"\n    type=\"button\"\n    class=\"list-group-item flex-row\"\n    (click)=\"handleClick(item)\"\n  >\n    <div *ngIf=\"item.c8yIcon; else icon\" class=\"list-item-icon\">\n      <i [c8yIcon]=\"item.c8yIcon\"></i>\n    </div>\n    <ng-template #icon>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"cogs\"></i>\n      </div>\n    </ng-template>\n    <div title=\"{{ item.name | translate }}\" class=\"list-item-body text-truncate\">\n      {{ item.name | translate }}\n    </div>\n  </button>\n</div>\n"
                },] }
    ];
    BulkOperationTypeListComponent.ctorParameters = function () { return [
        { type: router.Router },
        { type: bulkOperationsService.BulkOperationsService },
        { type: BulkOperationModalsService }
    ]; };
    BulkOperationTypeListComponent.propDecorators = {
        onCustomType: [{ type: core.Output }]
    };

    var bulkOperationListRoutes = [
        {
            path: 'devicecontrol/bulk',
            component: BulkOperationsListComponent
        }
    ];
    /**
     * This module allows for displaying the list of bulk operations and their details.
     */
    var BulkOperationsListModule = /** @class */ (function () {
        function BulkOperationsListModule() {
        }
        return BulkOperationsListModule;
    }());
    BulkOperationsListModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        ngxComponents.CoreModule,
                        popover.PopoverModule,
                        tooltip.TooltipModule,
                        statusFilter.StatusFilterModule,
                        bulkOperationScheduler.BulkOperationSchedulerModule,
                        bulkOperationListItem.BulkOperationListItemModule,
                        router.RouterModule.forChild(bulkOperationListRoutes)
                    ],
                    providers: [BulkOperationModalsService],
                    declarations: [
                        BulkOperationsListComponent,
                        BulkOperationTypeListComponent,
                        BulkOperationsModalComponent
                    ],
                    entryComponents: [
                        BulkOperationsListComponent,
                        BulkOperationTypeListComponent,
                        BulkOperationsModalComponent
                    ],
                    exports: [
                        BulkOperationsListComponent,
                        BulkOperationTypeListComponent,
                        BulkOperationsModalComponent
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BulkOperationModalsService = BulkOperationModalsService;
    exports.BulkOperationTypeListComponent = BulkOperationTypeListComponent;
    exports.BulkOperationsListComponent = BulkOperationsListComponent;
    exports.BulkOperationsListModule = BulkOperationsListModule;
    exports.BulkOperationsModalComponent = BulkOperationsModalComponent;
    exports.bulkOperationListRoutes = bulkOperationListRoutes;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-operations-bulk-operations-list.umd.js.map
