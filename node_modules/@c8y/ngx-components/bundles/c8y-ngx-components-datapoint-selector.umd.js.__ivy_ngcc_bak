(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/drag-drop'), require('@angular/core'), require('@c8y/ngx-components'), require('@c8y/ngx-components/assets-navigator'), require('ngx-bootstrap/collapse'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/modal'), require('ngx-bootstrap/popover'), require('@angular/forms'), require('rxjs/operators'), require('@c8y/ngx-components/context-dashboard'), require('rxjs'), require('@c8y/client'), require('lodash-es'), require('@c8y/client'), require('@c8y/client')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/datapoint-selector', ['exports', '@angular/cdk/drag-drop', '@angular/core', '@c8y/ngx-components', '@c8y/ngx-components/assets-navigator', 'ngx-bootstrap/collapse', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/modal', 'ngx-bootstrap/popover', '@angular/forms', 'rxjs/operators', '@c8y/ngx-components/context-dashboard', 'rxjs', '@c8y/client', 'lodash-es', '@c8y/client', '@c8y/client'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["datapoint-selector"] = {}), global.ng.cdk.dragDrop, global.ng.core, global.c8y["ngx-components"], global.c8y["ngx-components"]["assets-navigator"], global.collapse, global.dropdown, global.i1$2, global.popover, global.ng.forms, global.rxjs.operators, global.c8y["ngx-components"]["context-dashboard"], global.rxjs, global.client, global.lodashEs, global.i1$1, global.i3));
})(this, (function (exports, dragDrop, i0, i2, assetsNavigator, collapse, dropdown, i1$2, popover, i1, operators, contextDashboard, rxjs, client, lodashEs, i1$1, i3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AXIS_TYPES = [
        { val: undefined, text: i2.gettext('Auto') },
        { val: 'left', text: i2.gettext('Left') },
        { val: 'right', text: i2.gettext('Right') }
    ];
    var CHART_LINE_TYPES = [
        { val: 'line', text: i2.gettext('Line') },
        { val: 'points', text: i2.gettext('Points') },
        { val: 'linePoints', text: i2.gettext('Line and points') },
        { val: 'bars', text: i2.gettext('Bars') },
        { val: 'step-before', text: i2.gettext('Step before') },
        { val: 'step-after', text: i2.gettext('Step after') }
    ];
    var CHART_RENDER_TYPES = [
        { val: 'min', text: i2.gettext('Minimum') },
        { val: 'max', text: i2.gettext('Maximum') },
        { val: 'area', text: i2.gettext('Minimum and maximum') }
    ];

    var DatapointAttributesFormValidationService = /** @class */ (function () {
        function DatapointAttributesFormValidationService(formBuilder) {
            this.formBuilder = formBuilder;
        }
        DatapointAttributesFormValidationService.prototype.getDefaultFormGroup = function (fieldsToRemove) {
            var e_1, _b;
            if (fieldsToRemove === void 0) { fieldsToRemove = []; }
            var formFields = {
                __active: [true, []],
                __target: this.getTargetFormGroup(),
                __template: [undefined, []],
                color: ['', this.getColorValidators()],
                label: ['', this.getLabelValidators()],
                description: ['', this.getDescriptionValidators()],
                fragment: ['', this.getFragmentValidators()],
                series: ['', this.getSeriesValidators()],
                range: this.getMinMaxFormGroup(),
                unit: [undefined, this.getUnitValidators()],
                target: [undefined, this.getTargetValidators()],
                redRange: this.getMinMaxFormGroup(),
                yellowRange: this.getMinMaxFormGroup(),
                chart: this.getChartFormGroup()
            };
            if (fieldsToRemove.length) {
                try {
                    for (var fieldsToRemove_1 = __values(fieldsToRemove), fieldsToRemove_1_1 = fieldsToRemove_1.next(); !fieldsToRemove_1_1.done; fieldsToRemove_1_1 = fieldsToRemove_1.next()) {
                        var field = fieldsToRemove_1_1.value;
                        delete formFields[field];
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (fieldsToRemove_1_1 && !fieldsToRemove_1_1.done && (_b = fieldsToRemove_1.return)) _b.call(fieldsToRemove_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return this.formBuilder.group(formFields, {
                validators: this.getOverallValidators()
            });
        };
        DatapointAttributesFormValidationService.prototype.convertToBackendFormat = function (formDataStructure) {
            if (!formDataStructure) {
                return {};
            }
            var __active = formDataStructure.__active, __target = formDataStructure.__target, __template = formDataStructure.__template, color = formDataStructure.color, label = formDataStructure.label, description = formDataStructure.description, fragment = formDataStructure.fragment, series = formDataStructure.series, range = formDataStructure.range, unit = formDataStructure.unit, target = formDataStructure.target, redRange = formDataStructure.redRange, yellowRange = formDataStructure.yellowRange, chart = formDataStructure.chart;
            var obj = {
                __active: __active,
                __target: __target,
                __template: __template,
                color: color,
                label: label,
                description: description,
                fragment: fragment,
                series: series,
                min: range === null || range === void 0 ? void 0 : range.min,
                max: range === null || range === void 0 ? void 0 : range.max,
                unit: unit,
                target: target,
                redRangeMin: redRange === null || redRange === void 0 ? void 0 : redRange.min,
                redRangeMax: redRange === null || redRange === void 0 ? void 0 : redRange.max,
                yellowRangeMin: yellowRange === null || yellowRange === void 0 ? void 0 : yellowRange.min,
                yellowRangeMax: yellowRange === null || yellowRange === void 0 ? void 0 : yellowRange.max,
                renderType: chart === null || chart === void 0 ? void 0 : chart.renderType,
                lineType: chart === null || chart === void 0 ? void 0 : chart.lineType,
                yAxisType: chart === null || chart === void 0 ? void 0 : chart.yAxisType
            };
            return obj;
        };
        DatapointAttributesFormValidationService.prototype.convertToFormGroupFormat = function (backendDataStructure) {
            if (!backendDataStructure) {
                return {};
            }
            var __active = backendDataStructure.__active, __target = backendDataStructure.__target, __template = backendDataStructure.__template, color = backendDataStructure.color, label = backendDataStructure.label, description = backendDataStructure.description, fragment = backendDataStructure.fragment, series = backendDataStructure.series, min = backendDataStructure.min, max = backendDataStructure.max, unit = backendDataStructure.unit, target = backendDataStructure.target, redRangeMin = backendDataStructure.redRangeMin, redRangeMax = backendDataStructure.redRangeMax, yellowRangeMin = backendDataStructure.yellowRangeMin, yellowRangeMax = backendDataStructure.yellowRangeMax, renderType = backendDataStructure.renderType, lineType = backendDataStructure.lineType, yAxisType = backendDataStructure.yAxisType;
            var obj = {
                __active: __active,
                __target: __target,
                __template: __template,
                color: color,
                label: label,
                description: description,
                fragment: fragment,
                series: series,
                range: {
                    min: this.convertStringToNumber(min),
                    max: this.convertStringToNumber(max)
                },
                unit: unit,
                target: this.convertStringToNumber(target),
                redRange: {
                    min: this.convertStringToNumber(redRangeMin),
                    max: this.convertStringToNumber(redRangeMax)
                },
                yellowRange: {
                    min: this.convertStringToNumber(yellowRangeMin),
                    max: this.convertStringToNumber(yellowRangeMax)
                },
                chart: renderType || lineType || yAxisType ? { renderType: renderType, lineType: lineType, yAxisType: yAxisType } : undefined
            };
            return obj;
        };
        DatapointAttributesFormValidationService.prototype.getColorValidators = function () {
            return [i1.Validators.required, i1.Validators.minLength(4)];
        };
        DatapointAttributesFormValidationService.prototype.getLabelValidators = function () {
            return [i1.Validators.required, i1.Validators.minLength(1), i1.Validators.maxLength(120)];
        };
        DatapointAttributesFormValidationService.prototype.getDescriptionValidators = function () {
            return [];
        };
        DatapointAttributesFormValidationService.prototype.getFragmentValidators = function () {
            return [
                i1.Validators.required,
                i1.Validators.minLength(1),
                i1.Validators.maxLength(120),
                i1.Validators.pattern(/^[^.]*$/)
            ];
        };
        DatapointAttributesFormValidationService.prototype.getSeriesValidators = function () {
            return [
                i1.Validators.required,
                i1.Validators.minLength(1),
                i1.Validators.maxLength(120),
                i1.Validators.pattern(/^[^.]*$/)
            ];
        };
        DatapointAttributesFormValidationService.prototype.getMinMaxValidators = function () {
            return [i2.C8yValidators.minMaxValidator(), i2.C8yValidators.requireBothMinAndMax()];
        };
        DatapointAttributesFormValidationService.prototype.getUnitValidators = function () {
            return [];
        };
        DatapointAttributesFormValidationService.prototype.getTargetValidators = function () {
            return [];
        };
        DatapointAttributesFormValidationService.prototype.getOverallValidators = function () {
            return [
                i2.C8yValidators.withinScale('redRange.min'),
                i2.C8yValidators.withinScale('redRange.max'),
                i2.C8yValidators.withinScale('yellowRange.min'),
                i2.C8yValidators.withinScale('yellowRange.max'),
                i2.C8yValidators.withinScale('target')
            ];
        };
        DatapointAttributesFormValidationService.prototype.getMinMaxFormGroup = function () {
            return this.formBuilder.group({ min: [undefined, []], max: [undefined, []] }, { validators: this.getMinMaxValidators() });
        };
        DatapointAttributesFormValidationService.prototype.getChartFormGroup = function () {
            return this.formBuilder.group({
                renderType: [CHART_RENDER_TYPES[0].val, []],
                lineType: [CHART_LINE_TYPES[0].val, []],
                yAxisType: [AXIS_TYPES[0].val, []]
            });
        };
        DatapointAttributesFormValidationService.prototype.getTargetFormGroup = function () {
            return this.formBuilder.group({
                id: [undefined, []],
                name: [undefined, []]
            });
        };
        DatapointAttributesFormValidationService.prototype.convertStringToNumber = function (possibleString) {
            if (typeof possibleString === 'string') {
                try {
                    return Number.parseFloat(possibleString);
                }
                catch (_a) {
                    return undefined;
                }
            }
            else {
                return possibleString;
            }
        };
        return DatapointAttributesFormValidationService;
    }());
    DatapointAttributesFormValidationService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DatapointAttributesFormValidationService_Factory() { return new DatapointAttributesFormValidationService(i0__namespace.ɵɵinject(i1__namespace.FormBuilder)); }, token: DatapointAttributesFormValidationService, providedIn: "root" });
    DatapointAttributesFormValidationService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    DatapointAttributesFormValidationService.ctorParameters = function () { return [
        { type: i1.FormBuilder }
    ]; };

    var DatapointAttributesFormComponent = /** @class */ (function () {
        function DatapointAttributesFormComponent(formValidations) {
            this.formValidations = formValidations;
            this.showTarget = true;
            this.showRange = true;
            this.showYellowRange = true;
            this.showRedRange = true;
            this.showChart = true;
            this.showFormIfTemplateWasSelected = false;
            this.rawValue = {};
            this.CHART_RENDER_TYPES = CHART_RENDER_TYPES;
            this.CHART_LINE_TYPES = CHART_LINE_TYPES;
            this.AXIS_TYPES = AXIS_TYPES;
            this.customValidationErrorMessages = {};
            this.formGroup = this.formValidations.getDefaultFormGroup();
            this.setSubForms();
        }
        DatapointAttributesFormComponent.prototype.validate = function (control) {
            var _a;
            return ((_a = this.formGroup) === null || _a === void 0 ? void 0 : _a.valid) ? null : { formInvalid: {} };
        };
        DatapointAttributesFormComponent.prototype.writeValue = function (obj) {
            this.rawValue = obj || {};
            if (obj) {
                this.formGroup.patchValue(this.formValidations.convertToFormGroupFormat(obj), {
                    emitEvent: false
                });
            }
        };
        DatapointAttributesFormComponent.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.formGroup.valueChanges
                .pipe(operators.map(this.formValidations.convertToBackendFormat), operators.map(function (formValue) { return Object.assign(_this.rawValue, formValue); }))
                .subscribe(fn);
        };
        DatapointAttributesFormComponent.prototype.registerOnTouched = function (fn) {
            this.formGroup.valueChanges.pipe(operators.take(1)).subscribe(fn);
        };
        DatapointAttributesFormComponent.prototype.setDisabledState = function (isDisabled) {
            isDisabled ? this.formGroup.disable() : this.formGroup.enable();
        };
        DatapointAttributesFormComponent.prototype.setSubForms = function () {
            if (!this.formGroup) {
                this.range = this.yellowRange = this.redRange = this.chart = undefined;
                return;
            }
            this.range = this.formGroup.get('range');
            this.yellowRange = this.formGroup.get('yellowRange');
            this.redRange = this.formGroup.get('redRange');
            this.chart = this.formGroup.get('chart');
        };
        return DatapointAttributesFormComponent;
    }());
    DatapointAttributesFormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-datapoint-attributes-form',
                    template: "<div [formGroup]=\"formGroup\" *ngIf=\"!rawValue?.__template || showFormIfTemplateWasSelected\">\n  <fieldset class=\"c8y-fieldset\" *ngIf=\"formGroup.controls?.label || formGroup.controls?.unit || formGroup.controls?.target\">\n    <legend translate>Details</legend>\n    <div class=\"row\">\n      <div class=\"col-md-6\" *ngIf=\"formGroup.controls?.label\">\n        <c8y-form-group>\n          <label translate>Label</label>\n          <input\n            class=\"form-control\"\n            name=\"label\"\n            formControlName=\"label\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'Temperature' }\"\n          />\n          <c8y-messages [show]=\"formGroup.controls.label.touched && formGroup.controls.label.errors\">\n            <c8y-message\n              *ngFor=\"let item of customValidationErrorMessages['label'] | keyvalue\"\n              [name]=\"item.key\"\n              [text]=\"item.value\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n\n      <div class=\"col-md-6\" *ngIf=\"formGroup.controls?.unit\">\n        <c8y-form-group>\n          <label translate>Unit</label>\n          <input\n            class=\"form-control\"\n            name=\"unit\"\n            formControlName=\"unit\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: '\u00BAC' }\"\n          />\n          <c8y-messages [show]=\"formGroup.controls.unit.touched && formGroup.controls.unit.errors\">\n            <c8y-message\n              *ngFor=\"let item of customValidationErrorMessages['unit'] | keyvalue\"\n              [name]=\"item.key\"\n              [text]=\"item.value\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n\n      <div class=\"col-md-6\" *ngIf=\"formGroup.controls?.target && showTarget\">\n        <c8y-form-group\n          [ngClass]=\"{\n            'has-error':\n              (range?.touched || formGroup.controls.target.touched) &&\n              formGroup.controls?.target?.errors\n          }\"\n        >\n          <label translate>Target</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"target\"\n            formControlName=\"target\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 25 }\"\n          />\n          <c8y-messages\n            [show]=\"\n              (range?.touched || formGroup.controls.target.touched) &&\n              formGroup.controls.target.errors\n            \"\n          >\n            <c8y-message\n              *ngFor=\"let item of customValidationErrorMessages['target'] | keyvalue\"\n              [name]=\"item.key\"\n              [text]=\"item.value\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n    </div>\n  </fieldset>\n  <fieldset class=\"c8y-fieldset\" *ngIf=\"range && showRange\">\n    <legend translate>Range</legend>\n    <div class=\"row\" formGroupName=\"range\">\n      <div class=\"col-md-6\">\n        <c8y-form-group [ngClass]=\"{ 'has-error': range?.touched && range?.controls?.min?.errors }\">\n          <label translate>Min</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"min\"\n            formControlName=\"min\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 0 }\"\n          />\n          <c8y-messages [show]=\"range?.touched && range.controls?.min?.errors\"> </c8y-messages>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-md-6\">\n        <c8y-form-group [ngClass]=\"{ 'has-error': range?.touched && range?.controls?.max?.errors }\">\n          <label translate>Max</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"max\"\n            formControlName=\"max\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 100 }\"\n          />\n          <c8y-messages [show]=\"range?.touched && range.controls?.max?.errors\">\n            <c8y-message\n              *ngFor=\"let item of customValidationErrorMessages['max'] | keyvalue\"\n              [name]=\"item.key\"\n              [text]=\"item.value\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n    </div>\n  </fieldset>\n\n  <fieldset class=\"c8y-fieldset\" formGroupName=\"yellowRange\" *ngIf=\"yellowRange && showYellowRange\">\n    <legend translate>Yellow range</legend>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <c8y-form-group\n          [ngClass]=\"{\n            'has-error':\n              (range?.touched || yellowRange?.touched) && yellowRange?.controls?.min?.errors\n          }\"\n        >\n          <label translate>Min</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"min\"\n            formControlName=\"min\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 50 }\"\n          />\n          <c8y-messages\n            [show]=\"(range?.touched || yellowRange?.touched) && yellowRange.controls?.min?.errors\"\n          >\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n\n      <div class=\"col-md-6\">\n        <c8y-form-group\n          [ngClass]=\"{\n            'has-error':\n              (range?.touched || yellowRange?.touched) && yellowRange?.controls?.max?.errors\n          }\"\n        >\n          <label translate>Max</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"max\"\n            formControlName=\"max\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 75 }\"\n          />\n          <c8y-messages\n            [show]=\"(range?.touched || yellowRange?.touched) && yellowRange.controls?.max?.errors\"\n          >\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n    </div>\n  </fieldset>\n\n  <fieldset class=\"c8y-fieldset\" formGroupName=\"redRange\" *ngIf=\"redRange && showRedRange\">\n    <legend translate>Red range</legend>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <c8y-form-group\n          [ngClass]=\"{\n            'has-error': (range?.touched || redRange?.touched) && redRange?.controls?.min?.errors\n          }\"\n        >\n          <label translate>Min</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"min\"\n            formControlName=\"min\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 75 }\"\n          />\n          <c8y-messages\n            [show]=\"(range?.touched || redRange?.touched) && redRange.controls?.min?.errors\"\n          >\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n\n      <div class=\"col-md-6\">\n        <c8y-form-group\n          [ngClass]=\"{\n            'has-error': (range?.touched || redRange?.touched) && redRange?.controls?.max?.errors\n          }\"\n        >\n          <label translate>Max</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"max\"\n            formControlName=\"max\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 100 }\"\n          />\n          <c8y-messages\n            [show]=\"(range?.touched || redRange?.touched) && redRange.controls?.max?.errors\"\n          >\n          </c8y-messages>\n        </c8y-form-group>\n      </div>\n    </div>\n  </fieldset>\n\n  <fieldset class=\"c8y-fieldset\" *ngIf=\"chart && showChart\" formGroupName=\"chart\">\n    <legend translate>Chart</legend>\n    <div class=\"tight-grid\">\n      <div class=\"col-xs-6 col-sm-4\">\n        <c8y-form-group>\n          <label for=\"display\">\n            {{ 'Display' | translate }}\n            <button\n              class=\"btn-clean text-info\"\n              popover=\"{{ 'Value displayed when data is aggregated' | translate }}\"\n              [placement]=\"'right'\"\n              [triggers]=\"'focus'\"\n              [container]=\"'body'\"\n            >\n              <i c8yIcon=\"question-circle-o\"></i>\n            </button>\n          </label>\n          <div class=\"c8y-select-wrapper\">\n            <select class=\"form-control\" formControlName=\"renderType\">\n              <option *ngFor=\"let type of CHART_RENDER_TYPES\" [ngValue]=\"type.val\">\n                {{ type.text | translate }}\n              </option>\n            </select>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-xs-6 col-sm-4\">\n        <c8y-form-group>\n          <label for=\"chartType\" translate>Chart type</label>\n          <div class=\"c8y-select-wrapper\">\n            <select class=\"form-control\" formControlName=\"lineType\">\n              <option *ngFor=\"let type of CHART_LINE_TYPES\" [ngValue]=\"type.val\">\n                {{ type.text | translate }}\n              </option>\n            </select>\n            <span></span>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-xs-6 col-sm-4\">\n        <c8y-form-group>\n          <label for=\"yAxis\" translate>Y Axis</label>\n          <div class=\"c8y-select-wrapper\">\n            <select class=\"form-control\" formControlName=\"yAxisType\">\n              <option *ngFor=\"let type of AXIS_TYPES\" [ngValue]=\"type.val\">\n                {{ type.text | translate }}\n              </option>\n            </select>\n            <span></span>\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n  </fieldset>\n</div>\n",
                    providers: [
                        {
                            provide: i1.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return DatapointAttributesFormComponent; }),
                            multi: true
                        },
                        {
                            provide: i1.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return DatapointAttributesFormComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    DatapointAttributesFormComponent.ctorParameters = function () { return [
        { type: DatapointAttributesFormValidationService }
    ]; };
    DatapointAttributesFormComponent.propDecorators = {
        showTarget: [{ type: i0.Input }],
        showRange: [{ type: i0.Input }],
        showYellowRange: [{ type: i0.Input }],
        showRedRange: [{ type: i0.Input }],
        showChart: [{ type: i0.Input }],
        showFormIfTemplateWasSelected: [{ type: i0.Input }]
    };

    var DATAPOINT_LIBRARY_FRAGMENT = 'c8y_Kpi';

    var DatapointLibraryService = /** @class */ (function () {
        function DatapointLibraryService(inventory, appState, measurements, color) {
            var _this = this;
            this.inventory = inventory;
            this.appState = appState;
            this.measurements = measurements;
            this.color = color;
            this.appState.currentUser.pipe(operators.filter(function (user) { return !user; })).subscribe(function () {
                _this.cache = undefined;
            });
        }
        DatapointLibraryService.prototype.getAllDatapointLibraryEntriesCached = function (forceCacheRenew) {
            if (forceCacheRenew === void 0) { forceCacheRenew = false; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    if (forceCacheRenew) {
                        this.cache = undefined;
                    }
                    if (!this.cache) {
                        this.cache = this.getAllDatapointLibraryEntries();
                    }
                    return [2 /*return*/, this.cache];
                });
            });
        };
        DatapointLibraryService.prototype.getFirstDatapointLibraryPage = function () {
            return __awaiter(this, void 0, void 0, function () {
                var filterObj;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            filterObj = {
                                currentPage: 1,
                                pageSize: 50,
                                fragmentType: DATAPOINT_LIBRARY_FRAGMENT,
                                withTotalPages: true
                            };
                            return [4 /*yield*/, this.inventory.list(filterObj)];
                        case 1: return [2 /*return*/, (_b.sent())];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.getAllDatapointLibraryItemsCached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.cache) {
                                this.cache = this.getAllDatapointLibraryEntries();
                            }
                            return [4 /*yield*/, this.cache];
                        case 1:
                            res = _b.sent();
                            return [2 /*return*/, res.map(function (tmp) { return tmp[DATAPOINT_LIBRARY_FRAGMENT]; })];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.updateDatapoints = function (datapoints, skipUpdatingTarget) {
            if (skipUpdatingTarget === void 0) { skipUpdatingTarget = false; }
            return __awaiter(this, void 0, void 0, function () {
                var currentTargetsPromise, _b, currentTemplates, currentTargets, currentTemplateVersions, _loop_1, datapoints_1, datapoints_1_1, datapoint;
                var e_1, _c;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (!Array.isArray(datapoints)) {
                                return [2 /*return*/, datapoints];
                            }
                            currentTargetsPromise = !skipUpdatingTarget ? this.getCurrentVersionOfTargetsFromDatapoints(datapoints) : Promise.resolve([]);
                            return [4 /*yield*/, Promise.all([
                                    this.getCurrentTemplatesFromDatapoints(datapoints),
                                    currentTargetsPromise
                                ])];
                        case 1:
                            _b = __read.apply(void 0, [_d.sent(), 2]), currentTemplates = _b[0], currentTargets = _b[1];
                            currentTemplateVersions = currentTemplates
                                .map(function (tmp) { return _this.mapDatapointLibraryEntry(tmp); })
                                .filter(function (tmp) { return !!tmp; });
                            _loop_1 = function (datapoint) {
                                var fragment = datapoint.fragment, series = datapoint.series, __active = datapoint.__active, __target = datapoint.__target, color = datapoint.color, label = datapoint.label, __template = datapoint.__template;
                                var foundCurrentTemplateVersion = currentTemplateVersions.find(function (tmp) { return tmp.__template === datapoint.__template; });
                                if (foundCurrentTemplateVersion) {
                                    Object.assign(datapoint, foundCurrentTemplateVersion);
                                    Object.assign(datapoint, {
                                        fragment: fragment,
                                        series: series,
                                        __active: __active,
                                        __target: __target,
                                        color: color,
                                        label: label,
                                        __template: __template
                                    });
                                }
                                var foundCurrentTarget = currentTargets.find(function (target) { return target.id === (__target === null || __target === void 0 ? void 0 : __target.id); });
                                if (foundCurrentTarget) {
                                    var id = foundCurrentTarget.id, name = foundCurrentTarget.name;
                                    datapoint.__target = { id: id, name: name };
                                }
                            };
                            try {
                                for (datapoints_1 = __values(datapoints), datapoints_1_1 = datapoints_1.next(); !datapoints_1_1.done; datapoints_1_1 = datapoints_1.next()) {
                                    datapoint = datapoints_1_1.value;
                                    _loop_1(datapoint);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (datapoints_1_1 && !datapoints_1_1.done && (_c = datapoints_1.return)) _c.call(datapoints_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            return [2 /*return*/, datapoints];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.getDatapointsOfAsset = function (parentReference, ignoreDatapointTemplates) {
            return __awaiter(this, void 0, void 0, function () {
                var _b, kpiResponse, details, kpis, sortedDetails;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                (ignoreDatapointTemplates
                                    ? Promise.resolve(null)
                                    : this.inventory.assetKPIsList(parentReference, { pageSize: i2.MAX_PAGE_SIZE })),
                                this.inventory.getMeasurementsAndSeries(parentReference)
                            ])];
                        case 1:
                            _b = __read.apply(void 0, [_c.sent(), 2]), kpiResponse = _b[0], details = _b[1];
                            kpis = kpiResponse && kpiResponse.data ? kpiResponse.data : [];
                            sortedDetails = lodashEs.sortBy(details, ['fragment', 'series']);
                            return [4 /*yield*/, this.combineFragmentSeriesTuplesWithDetails(sortedDetails, parentReference, kpis)];
                        case 2: return [2 /*return*/, _c.sent()];
                    }
                });
            });
        };
        /**
         * Requests the last measurement with the given fragment and series to extract it's unit.
         * If the source attribute is provided, it will check the last measurement for this specific source.
         * @returns found unit or an empty string instead
         */
        DatapointLibraryService.prototype.guessUnitOfDatapoint = function (fragment, series, source) {
            return __awaiter(this, void 0, void 0, function () {
                var measurementfilter, lastMeasurements, measurement, pathToUnit, unit, _a_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            measurementfilter = {
                                valueFragmentSeries: series,
                                valueFragmentType: fragment,
                                pageSize: 1,
                                revert: true,
                                dateFrom: '1970-01-01'
                            };
                            if (source === null || source === void 0 ? void 0 : source.id) {
                                measurementfilter.source = source === null || source === void 0 ? void 0 : source.id;
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.measurements.list(measurementfilter)];
                        case 2:
                            lastMeasurements = (_b.sent()).data;
                            measurement = lastMeasurements[0];
                            if (measurement) {
                                pathToUnit = fragment + "." + series + ".unit";
                                unit = lodashEs.get(measurement, pathToUnit);
                                if ((unit === null || unit === void 0 ? void 0 : unit.length) && typeof unit === 'string') {
                                    return [2 /*return*/, unit];
                                }
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            _a_1 = _b.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, ''];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.combineFragmentSeriesTuplesWithDetails = function (tuples, target, kpis) {
            return __awaiter(this, void 0, void 0, function () {
                var datapoints;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            datapoints = tuples.map(function (tuple) {
                                var _a;
                                var foundDatapointLibraryEntry = kpis.find(function (kpi) { return kpi[DATAPOINT_LIBRARY_FRAGMENT] &&
                                    kpi[DATAPOINT_LIBRARY_FRAGMENT].fragment === tuple.fragment &&
                                    kpi[DATAPOINT_LIBRARY_FRAGMENT].series === tuple.series; });
                                var datapoint = _this.mapDatapointLibraryEntry(foundDatapointLibraryEntry) || tuple;
                                if (!datapoint.label) {
                                    datapoint.label = datapoint.fragment + " \u2192 " + datapoint.series;
                                }
                                if (!((_a = datapoint.unit) === null || _a === void 0 ? void 0 : _a.length)) {
                                    datapoint.unit = '';
                                }
                                datapoint.__target = target;
                                return datapoint;
                            });
                            return [4 /*yield*/, this.assignColorToDatapoints(datapoints)];
                        case 1:
                            _b.sent();
                            return [2 /*return*/, datapoints];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.assignColorToDatapoints = function (datapoints) {
            return __awaiter(this, void 0, void 0, function () {
                var datapointsWithoutColor;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            datapointsWithoutColor = datapoints.filter(function (datapoint) { return !datapoint.color; });
                            return [4 /*yield*/, Promise.all(datapointsWithoutColor.map(function (datapoint) { return _this.color.generateColorForDatapoint(datapoint.fragment, datapoint.series).then(function (color) { return (datapoint.color = color); }); }))];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.getAllDatapointLibraryEntries = function () {
            return __awaiter(this, void 0, void 0, function () {
                var entries, filterObj, res;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            entries = new Array();
                            filterObj = {
                                currentPage: 1,
                                pageSize: i2.MAX_PAGE_SIZE,
                                fragmentType: DATAPOINT_LIBRARY_FRAGMENT
                            };
                            return [4 /*yield*/, this.inventory.list(filterObj)];
                        case 1:
                            res = _b.sent();
                            _b.label = 2;
                        case 2:
                            if (!res.data.length) return [3 /*break*/, 4];
                            entries.push.apply(entries, __spreadArray([], __read(res.data)));
                            if (res.data.length < res.paging.pageSize) {
                                return [3 /*break*/, 4];
                            }
                            return [4 /*yield*/, res.paging.next()];
                        case 3:
                            res = _b.sent();
                            return [3 /*break*/, 2];
                        case 4: return [2 /*return*/, entries];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.mapDatapointLibraryEntry = function (entry) {
            if (!entry || !entry[DATAPOINT_LIBRARY_FRAGMENT]) {
                return null;
            }
            var datapoint = entry[DATAPOINT_LIBRARY_FRAGMENT];
            datapoint.__template = entry.id;
            return datapoint;
        };
        DatapointLibraryService.prototype.getCurrentTemplatesFromDatapoints = function (datapoints) {
            return __awaiter(this, void 0, void 0, function () {
                var datapointsWithTemplateId, usedTemplateIds;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            datapointsWithTemplateId = datapoints.filter(function (dp) { return !!dp.__template; });
                            usedTemplateIds = datapointsWithTemplateId.map(function (dp) { return dp.__template; });
                            return [4 /*yield*/, this.getMOsByIds(usedTemplateIds)];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.getCurrentVersionOfTargetsFromDatapoints = function (datapoints) {
            return __awaiter(this, void 0, void 0, function () {
                var datapointsWithTarget, usedTargetIds;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            datapointsWithTarget = datapoints.filter(function (dp) { var _a; return !!((_a = dp.__target) === null || _a === void 0 ? void 0 : _a.id); });
                            usedTargetIds = datapointsWithTarget.map(function (dp) { return dp.__target.id; });
                            return [4 /*yield*/, this.getMOsByIds(usedTargetIds)];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        DatapointLibraryService.prototype.getMOsByIds = function (ids) {
            return __awaiter(this, void 0, void 0, function () {
                var uniqManagedObjectIds, managedObjects, _a_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            uniqManagedObjectIds = lodashEs.uniq(ids);
                            if (!uniqManagedObjectIds.length) {
                                return [2 /*return*/, []];
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.inventory.list({
                                    ids: uniqManagedObjectIds.join(),
                                    pageSize: i2.MAX_PAGE_SIZE
                                })];
                        case 2:
                            managedObjects = (_b.sent()).data;
                            return [2 /*return*/, managedObjects];
                        case 3:
                            _a_2 = _b.sent();
                            // Fail silently in case we are not able to talk to the inventory API.
                            // Should only be reached in case of an server side error.
                            // instead of failing, pretend like we didn't receive any items.
                            console.warn("Failed to get the current version of the following managedObjects: " + uniqManagedObjectIds.join() + ".");
                            return [2 /*return*/, []];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return DatapointLibraryService;
    }());
    DatapointLibraryService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DatapointLibraryService_Factory() { return new DatapointLibraryService(i0__namespace.ɵɵinject(i1__namespace$1.InventoryService), i0__namespace.ɵɵinject(i2__namespace.AppStateService), i0__namespace.ɵɵinject(i3__namespace.MeasurementService), i0__namespace.ɵɵinject(i2__namespace.ColorService)); }, token: DatapointLibraryService, providedIn: "root" });
    DatapointLibraryService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    DatapointLibraryService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: i2.AppStateService },
        { type: client.MeasurementService },
        { type: i2.ColorService }
    ]; };

    var DatapointSelectorModalComponent = /** @class */ (function () {
        function DatapointSelectorModalComponent(bsModal, elementRef) {
            var _this = this;
            this.bsModal = bsModal;
            this.elementRef = elementRef;
            this.allowChangingContext = true;
            this.allowSearch = true;
            this.allowDatapointsFromMultipleAssets = true;
            this.selectedDatapoints = new Array();
            this.title = i2.gettext('Data point selector');
            this.saveButtonLabel = i2.gettext('Add data points');
            this.guessDatapointUnit = true;
            this.defaultActiveState = true;
            this.assetSelectorConfig = {};
            this.result = new Promise(function (resolve, reject) {
                _this.save = resolve;
                _this.cancel = reject;
            });
        }
        DatapointSelectorModalComponent.prototype.ngOnInit = function () {
            this.applyWorkaroundForAngularJSModalsThatMightBeOpenedInParallel();
        };
        DatapointSelectorModalComponent.prototype.saveChanges = function () {
            this.bsModal.hide();
            this.save(this.selectedDatapoints);
        };
        DatapointSelectorModalComponent.prototype.close = function () {
            this.bsModal.hide();
            this.cancel();
        };
        /**
         * changes the z-index of the modal, to make sure this modal is on top.
         * required as angularJS modals are placing them selves on top via adjusting z-index.
         * while angular modals use the order within the dom for this..
         */
        DatapointSelectorModalComponent.prototype.applyWorkaroundForAngularJSModalsThatMightBeOpenedInParallel = function () {
            var modalContainer = lodashEs.get(this.elementRef, 'nativeElement.parentElement.parentElement.parentElement');
            modalContainer.style.zIndex = '1060';
        };
        return DatapointSelectorModalComponent;
    }());
    DatapointSelectorModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-datapoint-selector-modal',
                    template: "<div class=\"modal-header separator\">\n  <h4 class=\"text-medium\">{{ title | translate }}</h4>\n</div>\n<div class=\"modal-inner-scroll modal-inner-scroll--fixed\">\n  <c8y-datapoint-selector\n    [contextAsset]=\"contextAsset\"\n    [guessDatapointUnit]=\"guessDatapointUnit\"\n    [allowDatapointsFromMultipleAssets]=\"allowDatapointsFromMultipleAssets\"\n    [allowChangingContext]=\"allowChangingContext\"\n    [defaultActiveState]=\"defaultActiveState\"\n    [allowSearch]=\"allowSearch\"\n    [(ngModel)]=\"selectedDatapoints\"\n  ></c8y-datapoint-selector>\n</div>\n<div class=\"modal-footer\">\n  <button\n    type=\"button\"\n    [title]=\"'Cancel' | translate\"\n    class=\"btn btn-default\"\n    (click)=\"close()\"\n    translate\n  >\n    Cancel\n  </button>\n  <button\n    [title]=\"saveButtonLabel | translate\"\n    class=\"btn btn-primary\"\n    [disabled]=\"!this.selectedDatapoints?.length\"\n    (click)=\"saveChanges()\"\n  >\n    {{ saveButtonLabel | translate }}\n  </button>\n</div>\n"
                },] }
    ];
    DatapointSelectorModalComponent.ctorParameters = function () { return [
        { type: i1$2.BsModalRef },
        { type: i0.ElementRef }
    ]; };

    var DatapointSelectorService = /** @class */ (function () {
        function DatapointSelectorService(modal) {
            this.modal = modal;
        }
        DatapointSelectorService.prototype.selectDataPoints = function (initialState) {
            if (initialState === void 0) { initialState = {}; }
            var modal = this.modal.show(DatapointSelectorModalComponent, {
                ignoreBackdropClick: true,
                keyboard: false,
                initialState: initialState,
                class: 'modal-lg'
            });
            var content = modal.content;
            return content.result;
        };
        return DatapointSelectorService;
    }());
    DatapointSelectorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DatapointSelectorService_Factory() { return new DatapointSelectorService(i0__namespace.ɵɵinject(i1__namespace$2.BsModalService)); }, token: DatapointSelectorService, providedIn: "root" });
    DatapointSelectorService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    DatapointSelectorService.ctorParameters = function () { return [
        { type: i1$2.BsModalService }
    ]; };

    var DatapointSelectionListComponent = /** @class */ (function () {
        function DatapointSelectionListComponent(datapointSelector, datapointLibrary, formBuilder, widgetComponent) {
            var _this = this;
            this.datapointSelector = datapointSelector;
            this.datapointLibrary = datapointLibrary;
            this.formBuilder = formBuilder;
            this.widgetComponent = widgetComponent;
            this.actions = [];
            this.allowDragAndDrop = true;
            this.config = {};
            this.defaultFormOptions = {};
            this.minActiveCount = 1;
            this.resolveContext = true;
            this.maxActiveCountReached = false;
            this.usedValidators = {};
            this.formArray = this.formBuilder.array([]);
            this.isValid = this.formArray.statusChanges.pipe(operators.map(function (status) { return status === 'VALID'; }));
            this.datapointLibraryEntries = rxjs.from(this.datapointLibrary.getFirstDatapointLibraryPage()).pipe(operators.shareReplay());
            this.change = this.formArray.valueChanges.pipe(operators.map(function (res) { return _this.transformValue(res); }));
        }
        DatapointSelectionListComponent.prototype.ngOnChanges = function (changes) {
            if (!changes.maxActiveCount && !changes.minActiveCount) {
                return;
            }
            if (changes.maxActiveCount) {
                this.usedValidators.maxActiveCount = i2.C8yValidators.maxActiveCount(this.maxActiveCount);
            }
            if (changes.minActiveCount) {
                this.usedValidators.minActiveCount = i2.C8yValidators.minActiveCount(this.minActiveCount);
            }
            var validators = Object.values(this.usedValidators);
            this.formArray.setValidators(validators);
        };
        DatapointSelectionListComponent.prototype.registerOnTouched = function (fn) {
            this.formArray.valueChanges.pipe(operators.take(1)).subscribe(fn);
        };
        DatapointSelectionListComponent.prototype.validate = function (control) {
            return this.formArray.valid ? null : { formInvalid: {} };
        };
        DatapointSelectionListComponent.prototype.ngOnInit = function () {
            var _a;
            var context = (_a = this.widgetComponent) === null || _a === void 0 ? void 0 : _a.context;
            if ((context === null || context === void 0 ? void 0 : context.id) && this.resolveContext) {
                var name = context.name, id = context.id, c8y_IsDevice = context.c8y_IsDevice;
                this.config.contextAsset = { name: name, id: id, c8y_IsDevice: c8y_IsDevice };
            }
        };
        DatapointSelectionListComponent.prototype.writeValue = function (obj) {
            var _this = this;
            this.formArray.clear();
            if (obj === null || obj === void 0 ? void 0 : obj.length) {
                obj.forEach(function (val) {
                    var formgroup = _this.formBuilder.group({ details: [] });
                    formgroup.patchValue({ details: val });
                    _this.formArray.push(formgroup);
                });
            }
            this.calculateMaxActiveCount();
        };
        DatapointSelectionListComponent.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.formArray.valueChanges
                .pipe(operators.map(function (res) { return _this.transformValue(res); }), 
            // check maxActiveCount
            operators.tap(function (res) {
                _this.calculateMaxActiveCount();
            }))
                .subscribe(fn);
        };
        DatapointSelectionListComponent.prototype.add = function () {
            var _this = this;
            var _a, _b, _c;
            var allowChangingContext = !((_a = this.widgetComponent) === null || _a === void 0 ? void 0 : _a.isDeviceTypeDashboard) && ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowChangingContext) !== false;
            this.datapointSelector
                .selectDataPoints(Object.assign(Object.assign({}, (this.config || {})), { selectedDatapoints: this.transformValue(this.formArray.value), defaultActiveState: true, allowChangingContext: allowChangingContext, allowSearch: !((_c = this.config) === null || _c === void 0 ? void 0 : _c.contextAsset) }))
                .then(function (result) {
                _this.writeValue(result);
            }, function (error) {
                // nothing to do, modal was closed
            });
        };
        DatapointSelectionListComponent.prototype.onItemRemoved = function (index) {
            this.formArray.removeAt(index);
        };
        DatapointSelectionListComponent.prototype.drop = function (event) {
            var currentSorting = this.formArray.value;
            dragDrop.moveItemInArray(currentSorting, event.previousIndex, event.currentIndex);
            this.formArray.setValue(currentSorting);
        };
        DatapointSelectionListComponent.prototype.transformValue = function (formArrayValue) {
            if (!formArrayValue) {
                return [];
            }
            return formArrayValue.map(function (tmp) { return Object.assign.apply(Object, __spreadArray([{}], __read(Object.values(tmp)))); });
        };
        DatapointSelectionListComponent.prototype.calculateMaxActiveCount = function () {
            if (this.maxActiveCount) {
                var currentlyActive = this.formArray.value.filter(function (tmp) { var _a; return (_a = tmp.details) === null || _a === void 0 ? void 0 : _a.__active; }).length;
                this.maxActiveCountReached = currentlyActive >= this.maxActiveCount;
            }
            this.maxActiveCountReached = false;
        };
        return DatapointSelectionListComponent;
    }());
    DatapointSelectionListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-datapoint-selection-list',
                    template: "<div class=\"card-header separator sticky-top bg-component\">\n  <span class=\"card-title h4\" translate>Data points</span>\n</div>\n\n<c8y-list-group\n  class=\"flex-grow ff-scroll-fix cdk-droplist\"\n  cdkDropList\n  (cdkDropListDropped)=\"drop($event)\"\n  [cdkDropListDisabled]=\"!allowDragAndDrop || formArray.controls?.length < 2\"\n>\n  <div\n    class=\"alert alert-info\"\n    role=\"alert\"\n    ngNonBindable\n    *ngIf=\"formArray.errors?.minActiveCount\"\n    translate\n    [translateParams]=\"formArray.errors?.minActiveCount\"\n  >\n    At least {{ minActive }} active data points must be selected.\n  </div>\n\n  <div\n    class=\"alert alert-info\"\n    role=\"alert\"\n    ngNonBindable\n    *ngIf=\"formArray.errors?.maxActiveCount\"\n    translate\n    [translateParams]=\"formArray.errors?.maxActiveCount\"\n  >\n    At maximum {{ maxActive }} active data points are allowed to be selected.\n  </div>\n\n  <ng-content select=\".alert\"></ng-content>\n\n  <div class=\"c8y-empty-state\" *ngIf=\"!formArray.controls?.length\">\n    <h1 class=\"c8y-icon c8y-icon-data-points c8y-icon-duocolor\"></h1>\n    <div>\n      <p>\n        <strong translate>No data points to display.</strong>\n      </p>\n      <small translate>Add your first data point.</small>\n    </div>\n  </div>\n  <div [formGroup]=\"dpForm\" *ngFor=\"let dpForm of formArray.controls; let index = index\">\n    <c8y-datapoint-selector-list-item\n      class=\"d-block\"\n      [defaultFormOptions]=\"defaultFormOptions\"\n      [activeToggleDisabled]=\"maxActiveCountReached\"\n      [showActiveToggle]=\"true\"\n      [showAddRemoveButton]=\"false\"\n      [showOptions]=\"true\"\n      [editable]=\"true\"\n      [colorPickerDisabled]=\"false\"\n      [actions]=\"actions\"\n      [optionToRemove]=\"true\"\n      [datapointLibraryEntries]=\"datapointLibraryEntries\"\n      [hasUnlinkTemplateOption]=\"true\"\n      formControlName=\"details\"\n      (removed)=\"onItemRemoved(index)\"\n      cdkDrag\n    >\n      <c8y-li-drag-handle cdkDragHandle>\n        <i c8yIcon=\"drag-reorder\"></i>\n      </c8y-li-drag-handle>\n    </c8y-datapoint-selector-list-item>\n  </div>\n</c8y-list-group>\n\n<div class=\"card-footer bg-component sticky-bottom separator\">\n  <button [title]=\"'Add data point' | translate\" class=\"btn btn-default btn-sm\" (click)=\"add()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    <span translate>Add data point</span>\n  </button>\n</div>\n",
                    providers: [
                        {
                            provide: i1.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return DatapointSelectionListComponent; })
                        },
                        {
                            provide: i1.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return DatapointSelectionListComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    DatapointSelectionListComponent.ctorParameters = function () { return [
        { type: DatapointSelectorService },
        { type: DatapointLibraryService },
        { type: i1.FormBuilder },
        { type: contextDashboard.WidgetConfigComponent, decorators: [{ type: i0.Optional }] }
    ]; };
    DatapointSelectionListComponent.propDecorators = {
        actions: [{ type: i0.Input }],
        allowDragAndDrop: [{ type: i0.Input }],
        config: [{ type: i0.Input }],
        defaultFormOptions: [{ type: i0.Input }],
        maxActiveCount: [{ type: i0.Input }],
        minActiveCount: [{ type: i0.Input }],
        resolveContext: [{ type: i0.Input }],
        isValid: [{ type: i0.Output }],
        change: [{ type: i0.Output }]
    };

    var DatapointSelectorListItemComponent = /** @class */ (function () {
        function DatapointSelectorListItemComponent(formBuilder) {
            this.formBuilder = formBuilder;
            this.defaultFormOptions = {};
            this.isSelected = false;
            this.isCollapsed = true;
            this.showAddRemoveButton = true;
            this.editable = true;
            this.showActiveToggle = false;
            this.activeToggleDisabled = false;
            this.showOptions = false;
            this.actions = [];
            this.optionToRemove = false;
            this.hasUnlinkTemplateOption = false;
            this.added = new i0.EventEmitter();
            this.removed = new i0.EventEmitter();
            this.colorPickerDisabled = true;
            this.disableTypeaheadIfSelected = false;
            this.pattern = '';
            this.formGroup = this.formBuilder.group({
                details: [],
                color: [],
                __active: [],
                __target: [],
                fragment: [],
                series: [],
                __template: []
            });
            this.isValid$ = this.formGroup.statusChanges.pipe(operators.map(function (status) { return status === 'VALID'; }), operators.startWith(this.formGroup.valid));
        }
        DatapointSelectorListItemComponent.prototype.validate = function (control) {
            var _a;
            return ((_a = this.formGroup) === null || _a === void 0 ? void 0 : _a.valid) ? null : { formInvalid: {} };
        };
        DatapointSelectorListItemComponent.prototype.writeValue = function (obj) {
            this.formGroup.patchValue(Object.assign(Object.assign({}, obj), { details: obj }));
        };
        DatapointSelectorListItemComponent.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.formGroup.valueChanges.pipe(operators.map(function (tmp) { return _this.transformFormValue(tmp); })).subscribe(fn);
        };
        DatapointSelectorListItemComponent.prototype.registerOnTouched = function (fn) {
            this.formGroup.valueChanges.pipe(operators.take(1)).subscribe(fn);
        };
        DatapointSelectorListItemComponent.prototype.setDisabledState = function (isDisabled) {
            isDisabled ? this.formGroup.disable() : this.formGroup.enable();
        };
        DatapointSelectorListItemComponent.prototype.collapse = function () {
            this.isCollapsed = !this.isCollapsed;
        };
        DatapointSelectorListItemComponent.prototype.addOrRemoveItem = function () {
            var value = this.transformFormValue(this.formGroup.value);
            if (this.isSelected) {
                this.removed.emit(value);
            }
            else {
                this.added.emit(value);
            }
        };
        DatapointSelectorListItemComponent.prototype.remove = function (dp) {
            this.removed.emit(this.transformFormValue(this.formGroup.value));
        };
        DatapointSelectorListItemComponent.prototype.setPipe = function (filterStr) {
            var _this = this;
            this.pattern = filterStr;
            this.filterPipe = rxjs.pipe(operators.map(function (data) {
                return _this.filterDatapointLabel(data, filterStr);
            }));
        };
        DatapointSelectorListItemComponent.prototype.unlinkDatapointTemplate = function () {
            var details = this.formGroup.value.details || {};
            this.resetUnusedProperties(details);
            this.formGroup.patchValue({ __template: undefined, details: details });
        };
        DatapointSelectorListItemComponent.prototype.dataPointTemplateSelected = function (template) {
            var e_1, _b;
            var attributesToAssign = [
                'color',
                'label',
                'min',
                'max',
                'yellowRangeMax',
                'yellowRangeMin',
                'redRangeMax',
                'redRangeMin',
                'target',
                'orientation',
                'unit'
            ];
            var _c = this.formGroup.value, fragment = _c.fragment, series = _c.series, __target = _c.__target, __active = _c.__active;
            var dataPoint = {
                fragment: fragment,
                series: series,
                __active: __active,
                __target: __target,
                __template: template.id
            };
            try {
                for (var attributesToAssign_1 = __values(attributesToAssign), attributesToAssign_1_1 = attributesToAssign_1.next(); !attributesToAssign_1_1.done; attributesToAssign_1_1 = attributesToAssign_1.next()) {
                    var attribute = attributesToAssign_1_1.value;
                    var value = template[DATAPOINT_LIBRARY_FRAGMENT][attribute];
                    dataPoint[attribute] = value;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (attributesToAssign_1_1 && !attributesToAssign_1_1.done && (_b = attributesToAssign_1.return)) _b.call(attributesToAssign_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.writeValue(dataPoint);
            this.setPipe('');
        };
        DatapointSelectorListItemComponent.prototype.resetUnusedProperties = function (details) {
            var _b = this.defaultFormOptions, showTarget = _b.showTarget, showYellowRange = _b.showYellowRange, showRedRange = _b.showRedRange;
            details.__template = undefined;
            if (!showTarget) {
                details.target = undefined;
            }
            if (!showYellowRange) {
                details.yellowRangeMin = undefined;
                details.yellowRangeMax = undefined;
            }
            if (!showRedRange) {
                details.redRangeMin = undefined;
                details.redRangeMax = undefined;
            }
        };
        DatapointSelectorListItemComponent.prototype.filterDatapointLabel = function (kpis, filterStr) {
            return kpis.filter(function (mo) { return mo[DATAPOINT_LIBRARY_FRAGMENT] &&
                mo[DATAPOINT_LIBRARY_FRAGMENT].label &&
                typeof mo[DATAPOINT_LIBRARY_FRAGMENT].label === 'string' &&
                mo[DATAPOINT_LIBRARY_FRAGMENT].label.toLowerCase().indexOf(filterStr.toLowerCase()) > -1; });
        };
        DatapointSelectorListItemComponent.prototype.transformFormValue = function (formValue) {
            var obj = Object.assign({}, formValue.details || {}, formValue);
            delete obj.details;
            return obj;
        };
        return DatapointSelectorListItemComponent;
    }());
    DatapointSelectorListItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-datapoint-selector-list-item',
                    template: "<c8y-li class=\"c8y-list__item__collapse--container-small\" [formGroup]=\"formGroup\" #li>\n  <c8y-li-drag-handle><ng-content select=\"c8y-li-drag-handle\"></ng-content></c8y-li-drag-handle>\n  <c8y-li-icon *ngIf=\"showAddRemoveButton\" class=\"a-s-center p-r-4\">\n    <button\n      *ngIf=\"isSelected\"\n      class=\"btn btn-clean text-primary\"\n      (click)=\"addOrRemoveItem()\"\n      [title]=\"'Remove' | translate\"\n    >\n      <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n    </button>\n    <button\n      *ngIf=\"!isSelected\"\n      class=\"btn btn-clean text-primary\"\n      (click)=\"addOrRemoveItem()\"\n      [title]=\"'Select' | translate\"\n    >\n      <i c8yIcon=\"plus-circle\" class=\"text-primary\"></i>\n    </button>\n  </c8y-li-icon>\n\n  <c8y-li-checkbox\n    *ngIf=\"showActiveToggle\"\n    [displayAsSwitch]=\"true\"\n    formControlName=\"__active\"\n    (click)=\"$event.stopPropagation()\"\n    class=\"a-s-center p-r-0\"\n  ></c8y-li-checkbox>\n\n  <div class=\"d-flex a-i-center p-l-4\">\n    <div class=\"c8y-list__item__colorpicker p-t-0 p-b-0 p-l-0\" [title]=\"'Change color' | translate\">\n      <div class=\"c8y-colorpicker\">\n        <input type=\"color\" formControlName=\"color\" (click)=\"$event.stopPropagation()\" />\n        <span [style.background-color]=\"formGroup.value.color\"></span>\n      </div>\n    </div>\n    <button\n      class=\"btn-clean data-point-label text-truncate\"\n      [title]=\"formGroup.value.details?.label\"\n      (click)=\"li.collapsed = !li.collapsed\"\n    >\n      <span class=\"text-truncate\">\n        <c8y-highlight\n          [text]=\"formGroup.value.details?.label\"\n          [pattern]=\"highlightText\"\n          [shouldTrimPattern]=\"true\"\n        ></c8y-highlight>\n      </span>\n      <small class=\"text-truncate text-muted icon-flex\" *ngIf=\"formGroup.value.__target\">\n        <i c8yIcon=\"exchange\"></i>\n        <span class=\"text-truncate\">{{ formGroup.value.__target.name }}</span>\n      </small>\n    </button>\n\n    <button\n      class=\"btn-clean m-l-auto\"\n      *ngIf=\"!(isValid$ | async)\"\n      [popover]=\"'Some entries are invalid. Check the input fields with red borders.' | translate\"\n      container=\"body\"\n      [outsideClick]=\"true\"\n    >\n      <i class=\"text-danger\" c8yIcon=\"warning\"></i>\n    </button>\n  </div>\n\n  <c8y-li-action\n    *ngIf=\"optionToRemove\"\n    [icon]=\"'minus-circle'\"\n    [label]=\"'Remove from list' | translate\"\n    (click)=\"remove(formGroup.value)\"\n  ></c8y-li-action>\n  <c8y-li-action\n    *ngFor=\"let action of actions\"\n    [icon]=\"action.icon\"\n    [label]=\"action.label\"\n    (click)=\"action.callback(formGroup.value)\"\n  ></c8y-li-action>\n  <c8y-li-collapse>\n    <div class=\"data-point-details\">\n      <ul class=\"list-unstyled small m-b-16\">\n        <li class=\"p-t-4 p-b-4 flex-row separator-top-bottom\">\n          <label class=\"small m-b-0 m-r-8 flex-item-v-start text-muted\" translate>Fragment</label>\n          <span class=\"flex-item-right\">\n            <c8y-highlight\n              [text]=\"formGroup.value.fragment\"\n              [pattern]=\"highlightText\"\n              [shouldTrimPattern]=\"true\"\n            ></c8y-highlight>\n          </span>\n        </li>\n        <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n          <label class=\"small m-b-0 m-r-8 flex-item-v-start text-muted\" translate>Series</label>\n          <span class=\"flex-item-right\">\n            <c8y-highlight\n              [text]=\"formGroup.value.series\"\n              [pattern]=\"highlightText\"\n              [shouldTrimPattern]=\"true\"\n            ></c8y-highlight>\n          </span>\n        </li>\n      </ul>\n      <div\n        class=\"form-group\"\n        *ngIf=\"datapointLibraryEntries && datapointLibraryEntries | async as libraryEntries\"\n      >\n        <label class=\"d-inline-block\" translate>Data point template</label>\n        <button\n          class=\"btn btn-clean\"\n          [popover]=\"datapointHintPopoverTemplate\"\n          (click)=\"$event.stopPropagation()\"\n          container=\"body\"\n          [outsideClick]=\"true\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"m-l-4 text-info\"></i>\n        </button>\n\n        <ng-template #datapointHintPopoverTemplate>\n          {{\n            'Using a data point template sets color, label, unit and ranges. Removing the template allows you to set the values manually.'\n              | translate\n          }}\n        </ng-template>\n        <div class=\"d-flex\">\n          <c8y-typeahead\n            [placeholder]=\"'No template' | translate\"\n            [ngModel]=\"formGroup.value.__template ? formGroup.value.details : undefined\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            (onSearch)=\"setPipe($event)\"\n            [displayProperty]=\"'label'\"\n            [hideNew]=\"true\"\n            *ngIf=\"datapointLibraryEntries\"\n            [disabled]=\"isSelected && disableTypeaheadIfSelected\"\n            class=\"flex-grow\"\n          >\n            <c8y-li\n              *c8yFor=\"\n                let item of datapointLibraryEntries;\n                loadMore: 'auto';\n                pipe: filterPipe;\n                notFound: notFoundTemplate\n              \"\n              class=\"p-l-8 p-r-8 c8y-list__item--link interact\"\n              (click)=\"dataPointTemplateSelected(item)\"\n              [active]=\"formGroup.value.__template === item.id\"\n            >\n              <c8y-highlight [text]=\"item.c8y_Kpi?.label\" [pattern]=\"pattern\"></c8y-highlight>\n              <c8y-li-icon icon=\"circle\" [style.color]=\"item.c8y_Kpi?.color\"></c8y-li-icon>\n            </c8y-li>\n            <ng-template #notFoundTemplate>\n              <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"pattern.length > 0\">\n                <span>No match found.</span>\n              </c8y-li>\n            </ng-template>\n          </c8y-typeahead>\n          <button\n            *ngIf=\"formGroup.value.__template\"\n            class=\"btn btn-info btn-xs btn-icon a-s-center m-l-8\"\n            [popover]=\"datapointOverviewPopoverTemplate\"\n            placement=\"left\"\n            container=\"body\"\n            [outsideClick]=\"true\"\n            [title]=\"'Info' | translate\"\n          >\n            <i c8yIcon=\"info\" class=\"text-info\"></i>\n          </button>\n          <button\n            *ngIf=\"formGroup.value.__template && hasUnlinkTemplateOption\"\n            class=\"btn btn-danger btn-xs btn-icon a-s-center m-l-8\"\n            (click)=\"unlinkDatapointTemplate()\"\n            [title]=\"'Unlink data point template' | translate\"\n          >\n            <i c8yIcon=\"unlink\"></i>\n          </button>\n        </div>\n      </div>\n      <ng-template #datapointOverviewPopoverTemplate>\n        <c8y-datapoint-template-popover\n          [datapoint]=\"formGroup.value.details\"\n        ></c8y-datapoint-template-popover>\n      </ng-template>\n      <c8y-datapoint-attributes-form\n        *ngIf=\"defaultFormOptions\"\n        [showTarget]=\"defaultFormOptions.showTarget\"\n        [showRange]=\"defaultFormOptions.showRange\"\n        [showYellowRange]=\"defaultFormOptions.showYellowRange\"\n        [showRedRange]=\"defaultFormOptions.showRedRange\"\n        [showChart]=\"defaultFormOptions.showChart\"\n        [showFormIfTemplateWasSelected]=\"defaultFormOptions.showFormIfTemplateWasSelected\"\n        formControlName=\"details\"\n      ></c8y-datapoint-attributes-form>\n    </div>\n  </c8y-li-collapse>\n</c8y-li>\n",
                    providers: [
                        {
                            provide: i1.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return DatapointSelectorListItemComponent; }),
                            multi: true
                        },
                        {
                            provide: i1.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return DatapointSelectorListItemComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    DatapointSelectorListItemComponent.ctorParameters = function () { return [
        { type: i1.FormBuilder }
    ]; };
    DatapointSelectorListItemComponent.propDecorators = {
        defaultFormOptions: [{ type: i0.Input }],
        isSelected: [{ type: i0.Input }],
        isCollapsed: [{ type: i0.Input }],
        showAddRemoveButton: [{ type: i0.Input }],
        editable: [{ type: i0.Input }],
        showActiveToggle: [{ type: i0.Input }],
        activeToggleDisabled: [{ type: i0.Input }],
        showOptions: [{ type: i0.Input }],
        datapointLibraryEntries: [{ type: i0.Input }],
        actions: [{ type: i0.Input }],
        optionToRemove: [{ type: i0.Input }],
        hasUnlinkTemplateOption: [{ type: i0.Input }],
        added: [{ type: i0.Output }],
        removed: [{ type: i0.Output }],
        colorPickerDisabled: [{ type: i0.Input }],
        disableTypeaheadIfSelected: [{ type: i0.Input }],
        highlightText: [{ type: i0.Input }],
        dragHandle: [{ type: i0.ContentChild, args: [i2.ListItemDragHandleComponent,] }]
    };

    var DatapointSelectorComponent = /** @class */ (function () {
        function DatapointSelectorComponent(datapointService) {
            this.datapointService = datapointService;
            this.allowChangingContext = true;
            this.allowDatapointsFromMultipleAssets = true;
            this.selectedDatapoints = new Array();
            this.defaultActiveState = true;
            this.ignoreDatapointTemplates = false;
            this.guessDatapointUnit = true;
            this.allowSearch = true;
            this.searchString = '';
            this.maxNumberOfDatapoints = 50;
            this.loadingDatapoints = false;
            this.assetSelection = new rxjs.BehaviorSubject(null);
            this.searchString$ = new rxjs.BehaviorSubject('');
            this.touched = false;
            this.setupObservables();
        }
        DatapointSelectorComponent.prototype.ngOnInit = function () {
            if (!this.ignoreDatapointTemplates) {
                this.datapointLibraryEntries = rxjs.from(this.datapointService.getFirstDatapointLibraryPage());
            }
            if (this.contextAsset) {
                this.selectionChanged(this.contextAsset);
            }
        };
        DatapointSelectorComponent.prototype.writeValue = function (obj) {
            this.selectedDatapoints = obj;
        };
        DatapointSelectorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        DatapointSelectorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        DatapointSelectorComponent.prototype.datapointAdded = function (dp) {
            this.markAsTouched();
            dp.__active = this.defaultActiveState;
            if (this.guessDatapointUnit && !dp.unit) {
                this.datapointService.guessUnitOfDatapoint(dp.fragment, dp.series, dp.__target).then(function (unit) {
                    dp.unit = unit;
                });
            }
            this.selectedDatapoints = __spreadArray(__spreadArray([], __read(this.selectedDatapoints)), [dp]);
            this.emitCurrentSelection();
        };
        DatapointSelectorComponent.prototype.datapointRemoved = function (dp) {
            this.markAsTouched();
            this.selectedDatapoints = this.selectedDatapoints.filter(function (tmp) {
                var _a, _b;
                return tmp.fragment !== dp.fragment ||
                    tmp.series !== dp.series ||
                    ((_a = tmp.__target) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = dp.__target) === null || _b === void 0 ? void 0 : _b.id);
            });
            this.emitCurrentSelection();
        };
        DatapointSelectorComponent.prototype.selectionChanged = function (evt) {
            if (Array.isArray(evt) && evt.length !== 0) {
                return this.selectAsset(evt[0]);
            }
            if (!Array.isArray(evt) && evt.items) {
                return this.selectionChanged(evt.items);
            }
            if (!Array.isArray(evt) && evt.id) {
                return this.selectAsset(evt);
            }
            // reset selection
            this.assetSelection.next(null);
        };
        DatapointSelectorComponent.prototype.trackByFn = function (_index, item) {
            var _a;
            return item.fragment + "-" + ((_a = item.__target) === null || _a === void 0 ? void 0 : _a.id) + "-" + item.series;
        };
        DatapointSelectorComponent.prototype.searchStringChanged = function (newValue) {
            if (newValue === void 0) { newValue = ''; }
            this.searchString$.next(newValue);
            this.searchString = newValue;
        };
        DatapointSelectorComponent.prototype.setupObservables = function () {
            var _this = this;
            this.datapoints$ = this.assetSelection.pipe(operators.tap(function () {
                _this.loadingDatapoints = true;
            }), operators.switchMap(function (asset) { return (asset === null || asset === void 0 ? void 0 : asset.id)
                ? _this.datapointService.getDatapointsOfAsset(asset, _this.ignoreDatapointTemplates)
                : []; }), operators.tap(function () { return (_this.loadingDatapoints = false); }), operators.shareReplay(1));
            this.searchStringChanges$ = this.searchString$.pipe(operators.distinctUntilChanged(), operators.debounceTime(500), operators.shareReplay(1));
            this.filteredDatapoints$ = rxjs.combineLatest([this.searchStringChanges$, this.datapoints$]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 2), searchString = _e[0], datapoints = _e[1];
                if (!searchString) {
                    return datapoints;
                }
                var lowerCaseSearchString = searchString.toLowerCase();
                return datapoints.filter(function (datapoint) { return _this.includesSearchString(datapoint, lowerCaseSearchString); });
            }), operators.map(function (filtered) { return filtered.slice(0, _this.maxNumberOfDatapoints); }));
        };
        DatapointSelectorComponent.prototype.selectAsset = function (asset) {
            this.assetSelection.next(asset);
            this.searchStringChanged();
            if (!this.allowDatapointsFromMultipleAssets) {
                this.clearSelection();
            }
        };
        DatapointSelectorComponent.prototype.clearSelection = function () {
            this.selectedDatapoints = [];
            this.emitCurrentSelection();
        };
        DatapointSelectorComponent.prototype.emitCurrentSelection = function () {
            this.onChange(this.selectedDatapoints);
        };
        DatapointSelectorComponent.prototype.markAsTouched = function () {
            if (!this.touched) {
                this.onTouched();
                this.touched = true;
            }
        };
        DatapointSelectorComponent.prototype.includesSearchString = function (datapoint, lowerCaseSearchString) {
            var _a, _b, _c;
            var label = (_a = datapoint.label) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (label && label.includes(lowerCaseSearchString)) {
                return true;
            }
            var fragment = (_b = datapoint.fragment) === null || _b === void 0 ? void 0 : _b.toLowerCase();
            if (fragment && fragment.includes(lowerCaseSearchString)) {
                return true;
            }
            var series = (_c = datapoint.series) === null || _c === void 0 ? void 0 : _c.toLowerCase();
            if (series && series.includes(lowerCaseSearchString)) {
                return true;
            }
            return false;
        };
        return DatapointSelectorComponent;
    }());
    DatapointSelectorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-datapoint-selector',
                    template: "<div class=\"d-grid grid__row--1 fit-h\" [ngClass]=\"allowChangingContext ? 'grid__col--3-6-3--md' : 'grid__col--8-4--md'\">\n  <div class=\"d-flex d-col p-relative bg-gray-white\" *ngIf=\"allowChangingContext\">\n    <c8y-asset-selector-miller\n      [(ngModel)]=\"contextAsset\"\n      [asset]=\"contextAsset\"\n      (onSelected)=\"selectionChanged($event)\"\n      [container]=\"''\"\n      [config]=\"{\n        view: 'miller',\n        groupsSelectable: true,\n        columnHeaders: true,\n        showChildDevices: true,\n        showUnassignedDevices: true,\n        singleColumn: true,\n        search: allowSearch\n      }\"\n      class=\"d-contents\"\n    ></c8y-asset-selector-miller>\n  </div>\n  <!-- center column -->\n  <div class=\"inner-scroll bg-component\">\n    <ng-template #noDeviceEmptyState>\n      <div class=\"p-16\">\n        <div class=\"c8y-empty-state text-left\">\n          <h1 class=\"c8y-icon c8y-icon-data-points c8y-icon-duocolor\"></h1>\n          <div>\n            <p>\n              <strong translate>No data points to display.</strong>\n            </p>\n            <small translate>Select an asset from the list.</small>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template #loadingData>\n      <div class=\"p-16 text-center\">\n        <c8y-loading></c8y-loading>\n      </div>\n    </ng-template>\n    <div *ngIf=\"assetSelection | async as asset; else noDeviceEmptyState\" class=\"bg-inherit\">\n      <div class=\"p-l-16 p-r-16 p-t-8 p-b-8 sticky-top bg-inherit separator-bottom\">\n        <p\n          class=\"text-medium text-truncate\"\n          [title]=\"'Available data points' | translate\"\n        >\n          {{ 'Available data points' | translate }}\n        </p>\n        <div *ngIf=\"!loadingDatapoints\" id=\"search\" class=\"input-group input-group-search m-t-4\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"Search\u2026\"\n            [ngModel]=\"searchString\"\n            (ngModelChange)=\"searchStringChanged($event)\"\n          />\n          <span class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"!searchString; else clearSearchString\"></i>\n            <ng-template #clearSearchString>\n                <i\n                  c8yIcon=\"times\"\n                  class=\"text-muted\"\n                  *ngIf=\"searchString\"\n                  (click)=\"searchString = ''\"\n                ></i>\n            </ng-template>\n          </span>\n        </div>\n      </div>\n      <ng-container *ngIf=\"filteredDatapoints$ | async as filteredDatapoints; else loadingData\">\n        <ng-container *ngIf=\"!loadingDatapoints; else loadingData\">\n          <ng-container *ngIf=\"datapoints$ | async as datapoints\">\n            <div class=\"p-16\" *ngIf=\"!filteredDatapoints.length\">\n              <c8y-ui-empty-state\n                [icon]=\"'c8y-data-points'\"\n                [title]=\"'No data points to display.' | translate\"\n                [subtitle]=\"datapoints.length ? ('Try another search term.' | translate) : ('Select an asset with data points from the list.' | translate)\"\n                [horizontal]=\"true\"\n              ></c8y-ui-empty-state>\n            </div>\n\n\n\n            <c8y-list-group>\n              <c8y-list-item *ngIf=\"datapoints.length > maxNumberOfDatapoints && filteredDatapoints.length >= maxNumberOfDatapoints\"\n                class=\"sticky-top\"\n                style=\"top: 72px\"\n                translate\n              >\n                <div class=\"alert alert-warning m-b-0\">\n                  {{ 'Due to the large number, only a subset of data points are displayed. Use search to narrow down the number of results.' | translate}}\n                </div>\n              </c8y-list-item>\n              <c8y-datapoint-selector-list-item\n                [ngModel]=\"dp\"\n                [isSelected]=\"selectedDatapoints | includesDatapoint: dp\"\n                [datapointLibraryEntries]=\"datapointLibraryEntries\"\n                [disableTypeaheadIfSelected]=\"true\"\n                (added)=\"datapointAdded($event)\"\n                (removed)=\"datapointRemoved($event)\"\n                [highlightText]=\"searchStringChanges$ | async\"\n                class=\"d-contents\"\n                *ngFor=\"let dp of filteredDatapoints; trackBy: trackByFn\"\n              ></c8y-datapoint-selector-list-item>\n            </c8y-list-group>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n  <!-- last column  -->\n  <div class=\"inner-scroll bg-gray-white\">\n    <p\n      class=\"text-medium m-b-4 p-l-16 p-r-16 p-t-8 p-b-8 separator-bottom sticky-top text-truncate\"\n      [title]=\"'Selected data points' | translate\"\n      translate\n    >\n      Selected data points\n    </p>\n    <div class=\"d-flex flex-wrap gap-8 p-l-16 p-r-16 p-b-16\">\n      <div class=\"c8y-datapoint-pill\" *ngFor=\"let selectedDp of selectedDatapoints\">\n        <button\n          [title]=\"'Remove' | translate\"\n          type=\"button\"\n          class=\"c8y-datapoint-pill__btn\"\n          (click)=\"datapointRemoved(selectedDp)\"\n        >\n          <i c8yIcon=\"remove\" class=\"icon-14\"></i>\n        </button>\n        <div\n          class=\"c8y-datapoint-pill__label\"\n          [title]=\"selectedDp | datapointLabel: { doNotUseLabel: true, includeDevice: true }\"\n        >\n          <i\n            c8yIcon=\"circle\"\n            class=\"m-r-4 icon-14\"\n            [style.color]=\"selectedDp.color\"\n          ></i>\n          <span class=\"text-truncate\">\n            <span class=\"text-truncate\">{{ selectedDp | datapointLabel }}</span>\n            <small class=\"text-muted text-10\" *ngIf=\"selectedDp?.__target?.name\">\n              {{ selectedDp?.__target?.name }}\n            </small>\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"p-16\" *ngIf=\"!selectedDatapoints || !selectedDatapoints.length\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 class=\"c8y-icon c8y-icon-data-points c8y-icon-duocolor\"></h1>\n        <p>\n          <strong translate>No data points selected.</strong>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    providers: [
                        {
                            provide: i1.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return DatapointSelectorComponent; })
                        }
                    ]
                },] }
    ];
    DatapointSelectorComponent.ctorParameters = function () { return [
        { type: DatapointLibraryService }
    ]; };
    DatapointSelectorComponent.propDecorators = {
        contextAsset: [{ type: i0.Input }],
        allowChangingContext: [{ type: i0.Input }],
        allowDatapointsFromMultipleAssets: [{ type: i0.Input }],
        defaultActiveState: [{ type: i0.Input }],
        ignoreDatapointTemplates: [{ type: i0.Input }],
        guessDatapointUnit: [{ type: i0.Input }],
        allowSearch: [{ type: i0.Input }]
    };

    var DatapointTemplatePopoverComponent = /** @class */ (function () {
        function DatapointTemplatePopoverComponent() {
            this.attributes = [
                {
                    label: i2.gettext('Fragment'),
                    key: 'fragment'
                },
                {
                    label: i2.gettext('Series'),
                    key: 'series'
                },
                {
                    label: i2.gettext('Unit'),
                    key: 'unit'
                },
                {
                    label: i2.gettext('Range'),
                    key: 'min'
                },
                {
                    label: i2.gettext('Target'),
                    key: 'target'
                },
                {
                    label: i2.gettext('Yellow range'),
                    labelColor: 'yellow',
                    key: 'yellowRangeMin'
                },
                {
                    label: i2.gettext('Red range'),
                    labelColor: 'red',
                    key: 'redRangeMin'
                }
            ];
        }
        return DatapointTemplatePopoverComponent;
    }());
    DatapointTemplatePopoverComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-datapoint-template-popover',
                    template: "<p class=\"text-medium\">\n  <i c8yIcon=\"circle\" [style.color]=\"datapoint.color\"></i>\n  {{ datapoint.label }}\n</p>\n<p>{{ datapoint.description }}</p>\n\n<ul class=\"list-unstyled small p-t-16\">\n  <ng-container *ngFor=\"let attribute of attributes; let i = index\">\n    <li\n      class=\"p-t-4 p-b-4 flex-row separator-bottom text-nowrap\"\n      *ngIf=\"datapoint[attribute.key] !== undefined\"\n    >\n      <label class=\"small m-b-0 m-r-8\">\n        <i *ngIf=\"attribute.labelColor\" c8yIcon=\"square\" [style.color]=\"attribute.labelColor\"></i>\n        {{ attribute.label | translate }}\n      </label>\n      <ng-container [ngSwitch]=\"attribute.key\">\n        <span *ngSwitchCase=\"'min'\" class=\"flex-item-right\">\n          {{ datapoint['min'] }} \u2014 {{ datapoint['max'] }}\n        </span>\n        <span *ngSwitchCase=\"'yellowRangeMin'\" class=\"flex-item-right\">\n          {{ datapoint['yellowRangeMin'] }} \u2014 {{ datapoint['yellowRangeMax'] }}\n        </span>\n        <span *ngSwitchCase=\"'redRangeMin'\" class=\"flex-item-right\">\n          {{ datapoint['redRangeMin'] }} \u2014 {{ datapoint['redRangeMax'] }}\n        </span>\n        <span *ngSwitchDefault class=\"flex-item-right\">\n          {{ datapoint[attribute.key] }}\n        </span>\n      </ng-container>\n    </li>\n  </ng-container>\n</ul>\n"
                },] }
    ];
    DatapointTemplatePopoverComponent.propDecorators = {
        datapoint: [{ type: i0.Input }],
        attributes: [{ type: i0.Input }]
    };

    var DatapointLabelPipe = /** @class */ (function () {
        function DatapointLabelPipe() {
        }
        DatapointLabelPipe.prototype.transform = function (datapoint, options) {
            if (options === void 0) { options = { includeDevice: false, doNotUseLabel: false }; }
            var _a, _b, _c, _d;
            var label = '';
            try {
                if (!(options === null || options === void 0 ? void 0 : options.doNotUseLabel) && datapoint.label) {
                    label = datapoint.label;
                }
                else {
                    label = datapoint.fragment + " \u2192 " + datapoint.series;
                }
                if ((options === null || options === void 0 ? void 0 : options.includeDevice) && (((_a = datapoint.__target) === null || _a === void 0 ? void 0 : _a.name) || ((_b = datapoint.__target) === null || _b === void 0 ? void 0 : _b.id))) {
                    label += " (" + (((_c = datapoint.__target) === null || _c === void 0 ? void 0 : _c.name) || ((_d = datapoint.__target) === null || _d === void 0 ? void 0 : _d.id)) + ")";
                }
            }
            catch (e) {
                // nothing to do
            }
            return label;
        };
        return DatapointLabelPipe;
    }());
    DatapointLabelPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'datapointLabel'
                },] }
    ];

    var FilterDatapointsPipe = /** @class */ (function () {
        function FilterDatapointsPipe() {
        }
        FilterDatapointsPipe.prototype.transform = function (datapoints, searchString) {
            var _this = this;
            if (!searchString || !datapoints || !Array.isArray(datapoints)) {
                return datapoints;
            }
            var lowerCaseSearchString = searchString.toLowerCase().trim();
            return datapoints.filter(function (datapoint) { return _this.includesSearchStringIgnoringCasing(datapoint, lowerCaseSearchString); });
        };
        FilterDatapointsPipe.prototype.includesSearchStringIgnoringCasing = function (datapoint, lowerCaseSearchString) {
            var _a, _b, _c;
            var label = (_a = datapoint.label) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (label && label.includes(lowerCaseSearchString)) {
                return true;
            }
            var fragment = (_b = datapoint.fragment) === null || _b === void 0 ? void 0 : _b.toLowerCase();
            if (fragment && fragment.includes(lowerCaseSearchString)) {
                return true;
            }
            var series = (_c = datapoint.series) === null || _c === void 0 ? void 0 : _c.toLowerCase();
            if (series && series.includes(lowerCaseSearchString)) {
                return true;
            }
            return false;
        };
        return FilterDatapointsPipe;
    }());
    FilterDatapointsPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'filterDatapoints'
                },] }
    ];

    var IncludesDatapointPipe = /** @class */ (function () {
        function IncludesDatapointPipe() {
        }
        IncludesDatapointPipe.prototype.transform = function (datapointList, datapoint) {
            if (!Array.isArray(datapointList) || !datapoint) {
                return false;
            }
            return datapointList.some(function (tmp) {
                var _a, _b;
                return tmp.fragment === datapoint.fragment &&
                    tmp.series === datapoint.series &&
                    ((_a = tmp.__target) === null || _a === void 0 ? void 0 : _a.id) === ((_b = datapoint.__target) === null || _b === void 0 ? void 0 : _b.id);
            });
        };
        return IncludesDatapointPipe;
    }());
    IncludesDatapointPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'includesDatapoint'
                },] }
    ];

    var DatapointSelectorModule = /** @class */ (function () {
        function DatapointSelectorModule() {
        }
        return DatapointSelectorModule;
    }());
    DatapointSelectorModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        assetsNavigator.AssetSelectorModule,
                        collapse.CollapseModule,
                        i2.CoreModule,
                        dropdown.BsDropdownModule,
                        i1$2.ModalModule,
                        popover.PopoverModule,
                        dragDrop.DragDropModule
                    ],
                    declarations: [
                        DatapointSelectorComponent,
                        DatapointSelectorModalComponent,
                        DatapointSelectorListItemComponent,
                        DatapointSelectionListComponent,
                        DatapointTemplatePopoverComponent,
                        IncludesDatapointPipe,
                        DatapointLabelPipe,
                        FilterDatapointsPipe,
                        DatapointAttributesFormComponent
                    ],
                    exports: [
                        DatapointSelectorComponent,
                        DatapointSelectorModalComponent,
                        DatapointSelectorListItemComponent,
                        DatapointSelectionListComponent,
                        DatapointTemplatePopoverComponent,
                        IncludesDatapointPipe,
                        DatapointLabelPipe,
                        DatapointAttributesFormComponent
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AXIS_TYPES = AXIS_TYPES;
    exports.CHART_LINE_TYPES = CHART_LINE_TYPES;
    exports.CHART_RENDER_TYPES = CHART_RENDER_TYPES;
    exports.DATAPOINT_LIBRARY_FRAGMENT = DATAPOINT_LIBRARY_FRAGMENT;
    exports.DatapointAttributesFormComponent = DatapointAttributesFormComponent;
    exports.DatapointAttributesFormValidationService = DatapointAttributesFormValidationService;
    exports.DatapointLibraryService = DatapointLibraryService;
    exports.DatapointSelectionListComponent = DatapointSelectionListComponent;
    exports.DatapointSelectorComponent = DatapointSelectorComponent;
    exports.DatapointSelectorListItemComponent = DatapointSelectorListItemComponent;
    exports.DatapointSelectorModalComponent = DatapointSelectorModalComponent;
    exports.DatapointSelectorModule = DatapointSelectorModule;
    exports.DatapointSelectorService = DatapointSelectorService;
    exports["ɵa"] = DatapointTemplatePopoverComponent;
    exports["ɵb"] = IncludesDatapointPipe;
    exports["ɵc"] = DatapointLabelPipe;
    exports["ɵd"] = FilterDatapointsPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-datapoint-selector.umd.js.map
