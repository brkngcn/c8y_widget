(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('@c8y/ngx-components'), require('@c8y/ngx-components/operations/operation-summary'), require('@c8y/ngx-components/operations/bulk-operation-scheduler'), require('@c8y/ngx-components/operations/operations-list-item-details'), require('@c8y/client'), require('lodash-es'), require('ngx-bootstrap/modal'), require('@c8y/ngx-components/operations/bulk-operations-service'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/bulk-operation-list-item', ['exports', '@angular/core', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', '@c8y/ngx-components', '@c8y/ngx-components/operations/operation-summary', '@c8y/ngx-components/operations/bulk-operation-scheduler', '@c8y/ngx-components/operations/operations-list-item-details', '@c8y/client', 'lodash-es', 'ngx-bootstrap/modal', '@c8y/ngx-components/operations/bulk-operations-service', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations["bulk-operation-list-item"] = {}), global.ng.core, global.popover, global.tooltip, global.c8y["ngx-components"], global.c8y["ngx-components"].operations["operation-summary"], global.c8y["ngx-components"].operations["bulk-operation-scheduler"], global.c8y["ngx-components"].operations["operations-list-item-details"], global.client, global.lodashEs, global.modal, global.c8y["ngx-components"].operations["bulk-operations-service"], global.rxjs));
})(this, (function (exports, core, popover, tooltip, ngxComponents, operationSummary, bulkOperationScheduler, operationsListItemDetails, client, lodashEs, modal, bulkOperationsService, rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var BulkOperationsRescheduleModalComponent = /** @class */ (function () {
        function BulkOperationsRescheduleModalComponent(bsModalRef, bulkOperationsService, alert) {
            this.bsModalRef = bsModalRef;
            this.bulkOperationsService = bulkOperationsService;
            this.alert = alert;
            this.closeSubject = new rxjs.Subject();
        }
        BulkOperationsRescheduleModalComponent.prototype.ngOnInit = function () {
            this.modalTitle = this.getTitle();
        };
        BulkOperationsRescheduleModalComponent.prototype.onDateAndDelaySelect = function ($event) {
            this.dateAndDelay = $event;
        };
        BulkOperationsRescheduleModalComponent.prototype.getTitle = function () {
            return this.isRetryOperation ? ngxComponents.gettext('Retry operation') : ngxComponents.gettext('Edit schedule');
        };
        BulkOperationsRescheduleModalComponent.prototype.onCancel = function () {
            this.bsModalRef.hide();
        };
        BulkOperationsRescheduleModalComponent.prototype.onSave = function () {
            return __awaiter(this, void 0, void 0, function () {
                var newBulkOperation, er_1, er_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();
                            this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;
                            if (!this.isRetryOperation) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.bulkOperationsService.createBulkOperation(this.bulkOperation)];
                        case 2:
                            newBulkOperation = _a.sent();
                            this.alert.success(ngxComponents.gettext('Successfully rescheduled for a retry.'));
                            return [3 /*break*/, 4];
                        case 3:
                            er_1 = _a.sent();
                            this.alert.addServerFailure(er_1);
                            return [3 /*break*/, 4];
                        case 4: return [3 /*break*/, 8];
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, this.bulkOperationsService.updateBulkOperation(this.bulkOperation)];
                        case 6:
                            newBulkOperation = _a.sent();
                            this.alert.success(ngxComponents.gettext('Successfully rescheduled.'));
                            return [3 /*break*/, 8];
                        case 7:
                            er_2 = _a.sent();
                            this.alert.addServerFailure(er_2);
                            return [3 /*break*/, 8];
                        case 8:
                            // send back to component from which modal was called
                            this.closeSubject.next(newBulkOperation.data);
                            this.bsModalRef.hide();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return BulkOperationsRescheduleModalComponent;
    }());
    BulkOperationsRescheduleModalComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-bulk-operations-reschedule-modal',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <div class=\"text-center\">\n        <c8y-operation-summary\n          [description]=\"bulkOperation.operationPrototype.description\"\n        ></c8y-operation-summary>\n      </div>\n      <div class=\"p-t-16 center-block\" style=\"max-width: 300px;\">\n        <c8y-operation-scheduler\n          [(ngModel)]=\"dateAndDelay\"\n          #scheduler=\"ngModel\"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"onCancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id=\"save-btn\"\n      (click)=\"onSave()\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      [disabled]=\"scheduler?.control?.errors\"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    BulkOperationsRescheduleModalComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: bulkOperationsService.BulkOperationsService },
        { type: ngxComponents.AlertService }
    ]; };

    var BULK_OPERATION_STATUS_LABELS = {
        SCHEDULED: ngxComponents.gettext('Scheduled'),
        EXECUTING: ngxComponents.gettext('Executing'),
        CANCELED: ngxComponents.gettext('Canceled'),
        FAILED: ngxComponents.gettext('Completed with failures'),
        SUCCESSFUL: ngxComponents.gettext('Completed successfully'),
        DELETED: ngxComponents.gettext('Deleted')
    };
    var BULK_OPERATION_STATUS_OPTIONS = {
        SCHEDULED: {
            label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,
            generalStatuses: [client.OperationBulkGeneralStatus.SCHEDULED],
            icon: 'calendar',
            styleClass: 'text-info'
        },
        EXECUTING: {
            label: BULK_OPERATION_STATUS_LABELS.EXECUTING,
            generalStatuses: [
                client.OperationBulkGeneralStatus.EXECUTING,
                client.OperationBulkGeneralStatus.EXECUTING_WITH_ERROR
            ],
            icon: 'refresh',
            styleClass: 'text-primary'
        },
        DELETED: {
            label: BULK_OPERATION_STATUS_LABELS.DELETED,
            generalStatuses: [client.OperationBulkGeneralStatus.DELETED],
            icon: 'delete-document',
            styleClass: 'text-muted'
        },
        CANCELED: {
            label: BULK_OPERATION_STATUS_LABELS.CANCELED,
            generalStatuses: [client.OperationBulkGeneralStatus.CANCELED],
            icon: 'ban',
            styleClass: 'text-primary'
        },
        FAILED: {
            label: BULK_OPERATION_STATUS_LABELS.FAILED,
            generalStatuses: [client.OperationBulkGeneralStatus.FAILED],
            icon: 'exclamation-triangle',
            styleClass: 'text-danger'
        },
        SUCCESSFUL: {
            label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,
            generalStatuses: [client.OperationBulkGeneralStatus.SUCCESSFUL],
            icon: 'check-circle',
            styleClass: 'text-success'
        }
    };

    var BulkOperationWrapperComponent = /** @class */ (function () {
        function BulkOperationWrapperComponent(bulkOperationsService, modalRef, modalService) {
            this.bulkOperationsService = bulkOperationsService;
            this.modalRef = modalRef;
            this.modalService = modalService;
        }
        // openDetails function needs to be defined in the both places (component and the service) to avoid circular dependency.
        BulkOperationWrapperComponent.prototype.openDetails = function (bulkOperationId) {
            return __awaiter(this, void 0, void 0, function () {
                var bulkOperation, initialState;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.bulkOperationsService.getBulkOperationById(bulkOperationId)];
                        case 1:
                            bulkOperation = (_a.sent()).data;
                            initialState = { bulkOperation: bulkOperation };
                            this.modalService.show(BulkOperationWrapperComponent, {
                                initialState: initialState,
                                class: 'modal-lg'
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        return BulkOperationWrapperComponent;
    }());
    BulkOperationWrapperComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-bulk-operations-wrapper',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header\">\n    <h3>{{ 'Bulk operation details' | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      [detailsCollapsed]=\"false\"\n      [readOnly]=\"true\"\n      (showFailedOperation)=\"openDetails($event)\"\n    ></c8y-bulk-operation-list-item>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Close' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    BulkOperationWrapperComponent.ctorParameters = function () { return [
        { type: bulkOperationsService.BulkOperationsService },
        { type: modal.BsModalRef },
        { type: modal.BsModalService }
    ]; };
    BulkOperationWrapperComponent.propDecorators = {
        bulkOperation: [{ type: core.Input }]
    };

    var BulkOperationListItemService = /** @class */ (function () {
        function BulkOperationListItemService(bulkOperationsService, modalService) {
            this.bulkOperationsService = bulkOperationsService;
            this.modalService = modalService;
        }
        BulkOperationListItemService.prototype.openDetails = function (bulkOperationId) {
            return __awaiter(this, void 0, void 0, function () {
                var bulkOperation, initialState;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.bulkOperationsService.getBulkOperationById(bulkOperationId)];
                        case 1:
                            bulkOperation = (_a.sent()).data;
                            initialState = { bulkOperation: bulkOperation };
                            this.modalService.show(BulkOperationWrapperComponent, {
                                initialState: initialState,
                                class: 'modal-lg'
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        return BulkOperationListItemService;
    }());
    BulkOperationListItemService.decorators = [
        { type: core.Injectable }
    ];
    BulkOperationListItemService.ctorParameters = function () { return [
        { type: bulkOperationsService.BulkOperationsService },
        { type: modal.BsModalService }
    ]; };

    var BulkOperationListItemComponent = /** @class */ (function () {
        function BulkOperationListItemComponent(bulkOperationListItemService, bulkOperationsService, modal, alert, bsModalService) {
            this.bulkOperationListItemService = bulkOperationListItemService;
            this.bulkOperationsService = bulkOperationsService;
            this.modal = modal;
            this.alert = alert;
            this.bsModalService = bsModalService;
            this.detailsCollapsed = true;
            this.readOnly = false;
            this.showFailedOperation = new core.EventEmitter();
            this.reload = new core.EventEmitter();
            this.refreshLoading = false;
            this.bulkOperationGeneralStatus = client.OperationBulkGeneralStatus;
            this.BULK_OPERATION_STATUS_OPTIONS = BULK_OPERATION_STATUS_OPTIONS;
            this.finishDatePopoverText = ngxComponents.gettext('Approximate date, estimated based on the bulk operation settings.');
            this.progressBarClass = 'progress';
            this.progressBarStatus = 0;
        }
        BulkOperationListItemComponent.prototype.ngOnInit = function () {
            this.finishDate = this.calculateFinishDateMs();
            this.setProgressBar();
        };
        BulkOperationListItemComponent.prototype.getOperationStatusOptions = function () {
            var _this = this;
            var statusOptions = lodashEs.values(BULK_OPERATION_STATUS_OPTIONS);
            return lodashEs.find(statusOptions, function (options) { return options.generalStatuses.includes(_this.bulkOperation.generalStatus); });
        };
        BulkOperationListItemComponent.prototype.ngOnChanges = function (changes) {
            if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
                this.setProgressBar();
            }
        };
        BulkOperationListItemComponent.prototype.calculateFinishDateMs = function () {
            var startDateMs = new Date(this.bulkOperation.startDate).getTime();
            var creationRampMs = this.bulkOperation.creationRamp * 1000;
            return startDateMs + creationRampMs * this.bulkOperation.progress.all;
        };
        BulkOperationListItemComponent.prototype.progressBarProgressFn = function () {
            return (((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /
                this.bulkOperation.progress.all) *
                100);
        };
        BulkOperationListItemComponent.prototype.setProgressBar = function () {
            var staticContentOfClass = 'progress-bar progress-striped active progress-bar';
            var progressBarState = {
                EXECUTING: {
                    progressBarClass: 'progress progress-striped active',
                    progressBarColor: staticContentOfClass + "-primary",
                    progressBarStatus: this.progressBarProgressFn()
                },
                EXECUTING_WITH_ERROR: {
                    progressBarClass: 'progress progress-striped active',
                    progressBarColor: staticContentOfClass + "-danger",
                    progressBarStatus: this.progressBarProgressFn()
                },
                FAILED: {
                    progressBarClass: 'progress',
                    progressBarColor: staticContentOfClass + "-danger",
                    progressBarStatus: 100
                },
                SUCCESSFUL: {
                    progressBarClass: 'progress',
                    progressBarColor: staticContentOfClass + "-success",
                    progressBarStatus: 100
                }
            };
            lodashEs.assign(this, progressBarState[this.bulkOperation.generalStatus]);
        };
        BulkOperationListItemComponent.prototype.editSchedule = function () {
            var rescheduledOperation = lodashEs.cloneDeep(this.bulkOperation);
            var initialState = {
                bulkOperation: rescheduledOperation
            };
            var modalOptions = { initialState: initialState, class: 'modal-sm', backdrop: 'static' };
            this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
        };
        BulkOperationListItemComponent.prototype.cancelBulkOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var er_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Cancel bulk operation'), ngxComponents.gettext('You are about to cancel the bulk operation. Do you want to proceed?'), ngxComponents.Status.DANGER)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id)];
                        case 2:
                            _a.sent();
                            this.reload.emit();
                            this.alert.success(ngxComponents.gettext('Operation canceled.'));
                            return [3 /*break*/, 4];
                        case 3:
                            er_1 = _a.sent();
                            this.alert.addServerFailure(er_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        BulkOperationListItemComponent.prototype.retryFailedOperation = function () {
            var _this = this;
            var clonedBulk = lodashEs.cloneDeep(this.bulkOperation);
            // change the id to failedparentId similar to the logic in deviceBulkControl.service.js
            delete clonedBulk.groupId;
            clonedBulk.failedParentId = this.bulkOperation.id;
            // show reschdedule modal:
            var initialState = {
                bulkOperation: clonedBulk,
                isRetryOperation: true
            };
            var modalOptions = { initialState: initialState, class: 'modal-sm', backdrop: 'static' };
            this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
            this.bsModalRef.content.closeSubject.subscribe(function () {
                _this.reload.emit();
            });
        };
        BulkOperationListItemComponent.prototype.setToSuccessful = function () {
            return __awaiter(this, void 0, void 0, function () {
                var er_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Set manually bulk operation to SUCCESSFUL'), ngxComponents.gettext('You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'), ngxComponents.Status.DANGER)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.bulkOperationsService.updateBulkOperation({
                                    id: this.bulkOperation.id,
                                    generalStatus: client.OperationBulkGeneralStatus.SUCCESSFUL
                                })];
                        case 2:
                            _a.sent();
                            this.reload.emit();
                            this.alert.success(ngxComponents.gettext('Operation status changed to SUCCESSFUL.'));
                            return [3 /*break*/, 4];
                        case 3:
                            er_2 = _a.sent();
                            this.alert.addServerFailure(er_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        BulkOperationListItemComponent.prototype.openFailedOperation = function (failedParentId) {
            this.showFailedOperation.emit(failedParentId);
        };
        BulkOperationListItemComponent.prototype.isStatusScheduled = function () {
            return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;
        };
        BulkOperationListItemComponent.prototype.isStatusExecutingOrExecutingWithError = function () {
            return (this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||
                this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR);
        };
        BulkOperationListItemComponent.prototype.allOperationsCreated = function () {
            return (this.bulkOperation.progress.all ===
                this.bulkOperation.progress.executing +
                    this.bulkOperation.progress.failed +
                    this.bulkOperation.progress.pending +
                    this.bulkOperation.progress.successful);
        };
        BulkOperationListItemComponent.prototype.isStatusCanceled = function () {
            return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;
        };
        BulkOperationListItemComponent.prototype.isStatusFailed = function () {
            return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;
        };
        return BulkOperationListItemComponent;
    }());
    BulkOperationListItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-bulk-operation-list-item',
                    template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !detailsCollapsed }\"\n  [collapsed]=\"detailsCollapsed\"\n  #listItem\n  id=\"{{ bulkOperation.id }}\"\n>\n  <c8y-li-icon>\n    <i\n      [c8yIcon]=\"getOperationStatusOptions().icon\"\n      [ngClass]=\"getOperationStatusOptions().styleClass\"\n      [tooltip]=\"getOperationStatusOptions().label | translate\"\n    ></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-58': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-5\">\n      <span\n        class=\"text-truncate\"\n        title=\"{{ bulkOperation.id }} - {{\n          bulkOperation.operationPrototype.description | translate\n        }}\"\n      >\n        <strong class=\"text-muted m-r-4\">{{ bulkOperation.id }}</strong>\n        {{ bulkOperation.operationPrototype.description | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\">\n      <div class=\"m-t-8 visible-xs\"></div>\n      <hr *ngIf=\"isStatusCanceled(); else statusNotCanceled\" class=\"m-t-16 m-b-0 visible-xs\" />\n      <ng-template #statusNotCanceled>\n        <div\n          [class]=\"progressBarClass\"\n          title=\"{{ progressBarStatus | c8yNumber: 'floor':'1.0-0' }}%\"\n        >\n          <div\n            [class]=\"progressBarColor\"\n            role=\"progressbar\"\n            aria-valuenow=\"0\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            [style.width.%]=\"progressBarStatus\"\n          >\n            <span *ngIf=\"progressBarStatus !== 0\"\n              >{{ progressBarStatus | c8yNumber: 'floor':'1.0-0' }}%</span\n            >\n          </div>\n        </div>\n      </ng-template>\n    </div>\n    <div class=\"col-4\">\n      <div class=\"p-t-8 visible-xs\"></div>\n      <small *ngIf=\"bulkOperation.progress.successful > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"check-circle\" class=\"text-success m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountSuccessful: bulkOperation.progress.successful }\"\n        >\n          {{ bulkOperationsCountSuccessful }} successful\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.failed > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"warning\" class=\"text-danger m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n        >\n          {{ bulkOperationsCountFailed }} failed\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.executing > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"refresh\" class=\"text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountExecuting: bulkOperation.progress.executing }\"\n        >\n          {{ bulkOperationsCountExecuting }} executing\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.pending > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"clock-o\" class=\"text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n        >\n          {{ bulkOperationsCountPending }} pending\n        </span>\n      </small>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <span class=\"text-label-small m-r-4\" translate>Start</span>\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>\n          {{ bulkOperation.startDate | c8yDate }}\n        </span>\n      </small>\n    </div>\n    <div class=\"m-r-16\" *ngIf=\"bulkOperationGeneralStatus.CANCELED !== bulkOperation.generalStatus\">\n      <span class=\"text-label-small m-r-4\" translate>Finish</span>\n\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>{{ finishDate | c8yDate }}</span>\n      </small>\n      <a\n        container=\"body\"\n        *ngIf=\"isStatusScheduled() || isStatusExecutingOrExecutingWithError()\"\n        class=\"btn-clean m-l-4\"\n        popover=\"{{ finishDatePopoverText | translate }}\"\n        placement=\"right\"\n        outsideClick=\"true\"\n      >\n        <i c8yIcon=\"question-circle-o text-primary\"></i>\n      </a>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!readOnly\">\n    <c8y-li-action\n      *ngIf=\"isStatusScheduled()\"\n      label=\"{{ 'Edit schedule' | translate }}\"\n      (click)=\"editSchedule()\"\n      icon=\"pencil\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"\n        isStatusScheduled() || (isStatusExecutingOrExecutingWithError() && !allOperationsCreated())\n      \"\n      label=\"{{ 'Cancel bulk operation' | translate }}\"\n      (click)=\"cancelBulkOperation()\"\n      icon=\"remove\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Retry failed operations' | translate }}\"\n      (click)=\"retryFailedOperation()\"\n      icon=\"repeat\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Set operation to SUCCESSFUL' | translate }}\"\n      (click)=\"setToSuccessful()\"\n      icon=\"check-circle\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <c8y-operation-details-tabs\n      *ngIf=\"!listItem.collapsed\"\n      [operation]=\"bulkOperation\"\n      [readOnly]=\"readOnly\"\n      (onRetryFailedOperations)=\"retryFailedOperation()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      [bulkOperationModalDetailsService]=\"bulkOperationListItemService\"\n    >\n    </c8y-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n"
                },] }
    ];
    BulkOperationListItemComponent.ctorParameters = function () { return [
        { type: BulkOperationListItemService },
        { type: bulkOperationsService.BulkOperationsService },
        { type: ngxComponents.ModalService },
        { type: ngxComponents.AlertService },
        { type: modal.BsModalService }
    ]; };
    BulkOperationListItemComponent.propDecorators = {
        bulkOperation: [{ type: core.Input }],
        detailsCollapsed: [{ type: core.Input }],
        readOnly: [{ type: core.Input }],
        showFailedOperation: [{ type: core.Output }],
        reload: [{ type: core.Output }],
        listItem: [{ type: core.ViewChild, args: ['listItem', { static: true },] }]
    };

    /**
     * This module allows for displaying the list item of a bulk operation with its details.
     */
    var BulkOperationListItemModule = /** @class */ (function () {
        function BulkOperationListItemModule() {
        }
        return BulkOperationListItemModule;
    }());
    BulkOperationListItemModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        ngxComponents.CoreModule,
                        popover.PopoverModule,
                        tooltip.TooltipModule,
                        operationSummary.OperationSummaryModule,
                        bulkOperationScheduler.BulkOperationSchedulerModule,
                        operationsListItemDetails.OperationsListItemDetailsModule
                    ],
                    providers: [BulkOperationListItemService],
                    declarations: [
                        BulkOperationListItemComponent,
                        BulkOperationsRescheduleModalComponent,
                        BulkOperationWrapperComponent
                    ],
                    entryComponents: [
                        BulkOperationListItemComponent,
                        BulkOperationsRescheduleModalComponent,
                        BulkOperationWrapperComponent
                    ],
                    exports: [
                        BulkOperationListItemComponent,
                        BulkOperationsRescheduleModalComponent,
                        BulkOperationWrapperComponent
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BULK_OPERATION_STATUS_LABELS = BULK_OPERATION_STATUS_LABELS;
    exports.BULK_OPERATION_STATUS_OPTIONS = BULK_OPERATION_STATUS_OPTIONS;
    exports.BulkOperationListItemComponent = BulkOperationListItemComponent;
    exports.BulkOperationListItemModule = BulkOperationListItemModule;
    exports.BulkOperationListItemService = BulkOperationListItemService;
    exports.BulkOperationWrapperComponent = BulkOperationWrapperComponent;
    exports.BulkOperationsRescheduleModalComponent = BulkOperationsRescheduleModalComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-operations-bulk-operation-list-item.umd.js.map
