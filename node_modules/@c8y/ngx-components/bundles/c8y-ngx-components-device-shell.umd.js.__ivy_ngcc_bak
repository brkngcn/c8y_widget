(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/modal'), require('@angular/upgrade/static'), require('@c8y/ngx-components'), require('@angular/router'), require('@c8y/client'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@c8y/ngx-components/operations/operations-timeline')) :
  typeof define === 'function' && define.amd ? define('@c8y/ngx-components/device-shell', ['exports', '@angular/core', 'ngx-bootstrap/modal', '@angular/upgrade/static', '@c8y/ngx-components', '@angular/router', '@c8y/client', 'lodash-es', 'rxjs', 'rxjs/operators', '@angular/common', '@c8y/ngx-components/operations/operations-timeline'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["device-shell"] = {}), global.ng.core, global.modal, global.ng.upgrade["static"], global.c8y["ngx-components"], global.ng.router, global.client, global.lodashEs, global.rxjs, global.rxjs.operators, global.ng.common, global.c8y["ngx-components"].operations["operations-timeline"]));
})(this, (function (exports, core, modal, _static, ngxComponents, router, client, lodashEs, rxjs, operators, common, operationsTimeline) { 'use strict';

  /* https://stackoverflow.com/a/65290658 */
  function rootScopeFactory($injector) {
      return $injector.get('$rootScope').$new();
  }
  var CommandTemplatesComponent = /** @class */ (function () {
      function CommandTemplatesComponent(modalRef) {
          this.modalRef = modalRef;
          this.onTemplateSelected = new core.EventEmitter();
      }
      return CommandTemplatesComponent;
  }());
  CommandTemplatesComponent.decorators = [
      { type: core.Component, args: [{
                  selector: 'c8y-command-templates',
                  template: "<c8y-command-templates-directive\n    (close)=\"modalRef.hide(); onTemplateSelected.next($event)\"\n    (dismiss)=\"modalRef.hide()\"\n  ></c8y-command-templates-directive>",
                  providers: [
                      {
                          deps: ['$injector'],
                          provide: '$scope',
                          useFactory: rootScopeFactory
                      }
                  ]
              },] }
  ];
  CommandTemplatesComponent.ctorParameters = function () { return [
      { type: modal.BsModalRef }
  ]; };

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */
  var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b)
              if (Object.prototype.hasOwnProperty.call(b, p))
                  d[p] = b[p]; };
      return extendStatics(d, b);
  };
  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign = function () {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p))
                      t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  function __rest(s, e) {
      var t = {};
      for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }
  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param(paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  }
  function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try {
              step(generator.next(value));
          }
          catch (e) {
              reject(e);
          } }
          function rejected(value) { try {
              step(generator["throw"](value));
          }
          catch (e) {
              reject(e);
          } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }
  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function () { if (t[0] & 1)
              throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f)
              throw new TypeError("Generator is already executing.");
          while (_)
              try {
                  if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                      return t;
                  if (y = 0, t)
                      op = [op[0] & 2, t.value];
                  switch (op[0]) {
                      case 0:
                      case 1:
                          t = op;
                          break;
                      case 4:
                          _.label++;
                          return { value: op[1], done: false };
                      case 5:
                          _.label++;
                          y = op[1];
                          op = [0];
                          continue;
                      case 7:
                          op = _.ops.pop();
                          _.trys.pop();
                          continue;
                      default:
                          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                              _ = 0;
                              continue;
                          }
                          if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                              _.label = op[1];
                              break;
                          }
                          if (op[0] === 6 && _.label < t[1]) {
                              _.label = t[1];
                              t = op;
                              break;
                          }
                          if (t && _.label < t[2]) {
                              _.label = t[2];
                              _.ops.push(op);
                              break;
                          }
                          if (t[2])
                              _.ops.pop();
                          _.trys.pop();
                          continue;
                  }
                  op = body.call(thisArg, _);
              }
              catch (e) {
                  op = [6, e];
                  y = 0;
              }
              finally {
                  f = t = 0;
              }
          if (op[0] & 5)
              throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
      }
  }
  var __createBinding = Object.create ? (function (o, m, k, k2) {
      if (k2 === undefined)
          k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
  }) : (function (o, m, k, k2) {
      if (k2 === undefined)
          k2 = k;
      o[k2] = m[k];
  });
  function __exportStar(m, o) {
      for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
  }
  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
          return m.call(o);
      if (o && typeof o.length === "number")
          return {
              next: function () {
                  if (o && i >= o.length)
                      o = void 0;
                  return { value: o && o[i++], done: !o };
              }
          };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
          return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
      }
      catch (error) {
          e = { error: error };
      }
      finally {
          try {
              if (r && !r.done && (m = i["return"]))
                  m.call(i);
          }
          finally {
              if (e)
                  throw e.error;
          }
      }
      return ar;
  }
  /** @deprecated */
  function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
      return ar;
  }
  /** @deprecated */
  function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }
  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                  if (!ar)
                      ar = Array.prototype.slice.call(from, 0, i);
                  ar[i] = from[i];
              }
          }
      return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n])
          i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try {
          step(g[n](v));
      }
      catch (e) {
          settle(q[0][3], e);
      } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]); }
  }
  function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
      function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
  }
  function __asyncValues(o) {
      if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
  }
  function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
      }
      else {
          cooked.raw = raw;
      }
      return cooked;
  }
  ;
  var __setModuleDefault = Object.create ? (function (o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
  }) : function (o, v) {
      o["default"] = v;
  };
  function __importStar(mod) {
      if (mod && mod.__esModule)
          return mod;
      var result = {};
      if (mod != null)
          for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                  __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
  }
  function __importDefault(mod) {
      return (mod && mod.__esModule) ? mod : { default: mod };
  }
  function __classPrivateFieldGet(receiver, state, kind, f) {
      if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state, value, kind, f) {
      if (kind === "m")
          throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
  }

  var CommandTemplates = /** @class */ (function (_super) {
      __extends(CommandTemplates, _super);
      function CommandTemplates(elementRef, injector) {
          return _super.call(this, 'c8yCommandTemplates', elementRef, injector) || this;
      }
      return CommandTemplates;
  }(_static.UpgradeComponent));
  CommandTemplates.decorators = [
      { type: core.Directive, args: [{
                  selector: 'c8y-command-templates-directive'
              },] }
  ];
  CommandTemplates.ctorParameters = function () { return [
      { type: core.ElementRef },
      { type: core.Injector }
  ]; };
  CommandTemplates.propDecorators = {
      close: [{ type: core.Output }],
      dismiss: [{ type: core.Output }]
  };

  var CommandTemplatesModule = /** @class */ (function () {
      function CommandTemplatesModule() {
      }
      return CommandTemplatesModule;
  }());
  CommandTemplatesModule.decorators = [
      { type: core.NgModule, args: [{
                  declarations: [CommandTemplates, CommandTemplatesComponent],
                  exports: [CommandTemplatesComponent]
              },] }
  ];

  var DeviceShellGuard = /** @class */ (function () {
      function DeviceShellGuard() {
          this.operation = 'c8y_Command';
      }
      DeviceShellGuard.prototype.canActivate = function (route) {
          var device = route.data.contextData || route.parent.data.contextData;
          var supportedOperations = (device && device.c8y_SupportedOperations) || [];
          return supportedOperations.indexOf(this.operation) >= 0;
      };
      return DeviceShellGuard;
  }());
  DeviceShellGuard.decorators = [
      { type: core.Injectable }
  ];

  exports.CommandDeliveryType = void 0;
  (function (CommandDeliveryType) {
      CommandDeliveryType["DEFAULT"] = "Default";
      CommandDeliveryType["SMS"] = "SMS";
  })(exports.CommandDeliveryType || (exports.CommandDeliveryType = {}));

  var DeviceShellService = /** @class */ (function () {
      function DeviceShellService(optionsService, operationService) {
          this.optionsService = optionsService;
          this.operationService = operationService;
      }
      DeviceShellService.prototype.getDeliveryTypes = function () {
          return [
              {
                  name: ngxComponents.gettext(exports.CommandDeliveryType.DEFAULT),
                  default: true
              },
              {
                  name: ngxComponents.gettext(exports.CommandDeliveryType.SMS)
              }
          ];
      };
      DeviceShellService.prototype.canSendCommandsViaSMS = function () {
          return this.optionsService.getSystemOption('messaging', 'provider', false);
      };
      DeviceShellService.prototype.createCommandOperation = function (deviceId, command, deliveryType) {
          var operation = {
              deviceId: deviceId,
              description: ngxComponents.gettext('Execute shell command') + (command.name ? ": " + command.name : ''),
              deliveryType: deliveryType === exports.CommandDeliveryType.SMS ? exports.CommandDeliveryType.SMS : undefined,
              c8y_Command: {
                  text: command.text
              }
          };
          return this.operationService.create(operation);
      };
      return DeviceShellService;
  }());
  DeviceShellService.decorators = [
      { type: core.Injectable }
  ];
  DeviceShellService.ctorParameters = function () { return [
      { type: ngxComponents.OptionsService },
      { type: client.OperationService }
  ]; };

  var DeviceShellSharedModule = /** @class */ (function () {
      function DeviceShellSharedModule() {
      }
      return DeviceShellSharedModule;
  }());
  DeviceShellSharedModule.decorators = [
      { type: core.NgModule, args: [{
                  providers: [DeviceShellService]
              },] }
  ];

  var DeviceShellComponent = /** @class */ (function () {
      function DeviceShellComponent(service, operationRealtime, moRealtime, operationService, route, modalService, alertService) {
          this.service = service;
          this.operationRealtime = operationRealtime;
          this.moRealtime = moRealtime;
          this.operationService = operationService;
          this.route = route;
          this.modalService = modalService;
          this.alertService = alertService;
          this.device = this.route.snapshot.parent.data.contextData;
          this.device$ = rxjs.of({});
          this.deliveryTypes = (this.service.getDeliveryTypes() || []).map(function (deliveryType) { return (Object.assign(Object.assign({}, deliveryType), { isSupportedByCommand: true })); });
          this.command = {};
          this.smsEnabled = false;
          this.sendingCommand$ = new rxjs.BehaviorSubject(false);
          this.filterPipe = rxjs.pipe(operators.map(function (operations) { return (operations || []).filter(function (operation) { return !!operation.c8y_Command; }); }));
          this.executeViaLabel = ngxComponents.gettext('Execute via ({{deliveryType}})');
          this.destroyed$ = new rxjs.Subject();
      }
      DeviceShellComponent.prototype.ngOnInit = function () {
          return __awaiter(this, void 0, void 0, function () {
              var _a, _b;
              var _this = this;
              return __generator(this, function (_c) {
                  switch (_c.label) {
                      case 0:
                          _a = this;
                          return [4 /*yield*/, this.service.canSendCommandsViaSMS()];
                      case 1:
                          _a.smsEnabled = _c.sent();
                          this.device$ = this.moRealtime.onUpdate$(this.device.id).pipe(operators.startWith(this.device));
                          _b = this;
                          return [4 /*yield*/, this.operationService.list({
                                  deviceId: this.device.id,
                                  fragmentType: 'c8y_Command',
                                  dateFrom: new Date(0).toISOString(),
                                  dateTo: new Date().toISOString(),
                                  pageSize: 50,
                                  withTotalPages: true,
                                  revert: true
                              })];
                      case 2:
                          _b.operations = _c.sent();
                          this.operationRealtime
                              .onCreate$(this.device.id)
                              .pipe(operators.takeUntil(this.destroyed$))
                              .subscribe(function () { return _this.alertService.success(ngxComponents.gettext('Command sent.')); });
                          this.operationRealtime
                              .onUpdate$(this.device.id)
                              .pipe(operators.filter(function (op) { return op.failureReason !== 'Operation cancelled by user.'; }), // avoid duplicate alerts
                          operators.takeUntil(this.destroyed$))
                              .subscribe(function () { return _this.alertService.success(ngxComponents.gettext('Command status updated.')); });
                          return [2 /*return*/];
                  }
              });
          });
      };
      DeviceShellComponent.prototype.getPredefinedCommand = function () {
          var _this = this;
          var modal = this.modalService.show(CommandTemplatesComponent);
          modal.content.onTemplateSelected.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (result) {
              _this.command = Object.assign({}, result.commandTemplate);
              _this.deliveryTypes = _this.deliveryTypes.map(function (deliveryType) { return (Object.assign(Object.assign({}, deliveryType), { isSupportedByCommand: lodashEs.isEmpty(_this.command.deliveryTypes) ||
                      lodashEs.includes(_this.command.deliveryTypes, deliveryType.name) })); });
          });
      };
      DeviceShellComponent.prototype.resetSupportedDeliveryTypes = function () {
          this.deliveryTypes = (this.service.getDeliveryTypes() || []).map(function (deliveryType) { return (Object.assign(Object.assign({}, deliveryType), { isSupportedByCommand: true })); });
      };
      DeviceShellComponent.prototype.execute = function (commandDeliveryType) {
          return __awaiter(this, void 0, void 0, function () {
              var useSMS;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          useSMS = commandDeliveryType === exports.CommandDeliveryType.SMS;
                          if (useSMS && !this.smsEnabled) {
                              this.alertService.warning(ngxComponents.gettext('SMS transport is not configured.'));
                              return [2 /*return*/];
                          }
                          this.sendingCommand$.next(true);
                          return [4 /*yield*/, this.service.createCommandOperation(this.device.id, this.command, commandDeliveryType)];
                      case 1:
                          _a.sent();
                          this.command.text = '';
                          this.resetSupportedDeliveryTypes();
                          this.sendingCommand$.next(false);
                          return [2 /*return*/];
                  }
              });
          });
      };
      DeviceShellComponent.prototype.ngOnDestroy = function () {
          this.destroyed$.next();
          this.destroyed$.complete();
      };
      return DeviceShellComponent;
  }());
  DeviceShellComponent.decorators = [
      { type: core.Component, args: [{
                  selector: 'c8y-device-shell',
                  template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"operationRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card content-fullpage d-grid grid__col--6-6--md\">\n  <div class=\"inner-scroll d-flex d-col bg-white\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <h4 class=\"card-title\">\n        {{ 'Command' | translate }}\n      </h4>\n    </div>\n\n    <div class=\"card-block d-flex d-col flex-grow large-padding\">\n      <div class=\"flex-row p-b-16\">\n        <button\n          class=\"btn btn-default btn-sm\"\n          type=\"button\"\n          (click)=\"getPredefinedCommand()\"\n          [title]=\"'Display a list of predefined commands' | translate\"\n        >\n          {{ 'Predefined commands' | translate }}\n        </button>\n\n        <div class=\"flex-item-right\">\n          <device-status [mo]=\"device$ | async\"></device-status>\n        </div>\n      </div>\n      <textarea\n        class=\"form-control inner-scroll flex-grow bg-gray-lighter\"\n        [(ngModel)]=\"command.text\"\n        (ngModelChange)=\"$event || resetSupportedDeliveryTypes()\"\n      >\n      </textarea>\n    </div>\n\n    <div class=\"card-footer large-padding separator\">\n      <ng-container *ngFor=\"let deliveryType of deliveryTypes\">\n        <button\n          class=\"btn btn-primary\"\n          type=\"button\"\n          *ngIf=\"deliveryType.isSupportedByCommand\"\n          [disabled]=\"!command?.text || (sendingCommand$ | async)\"\n          (click)=\"execute(deliveryType.name)\"\n        >\n          <span\n            [title]=\"\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            \"\n          >\n            {{\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            }}\n          </span>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"inner-scroll bg-gray-white\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <h4 class=\"card-title\">\n        {{ 'Operations' | translate }}\n      </h4>\n    </div>\n    <div class=\"card-block large-padding\">\n      <c8y-operations-timeline\n        [operations]=\"operations\"\n        [sourceId]=\"device.id\"\n        [filterPipe]=\"filterPipe\"\n        [bodyTemplate]=\"timelineItemBody\"\n        [footerTemplates]=\"[timelineItemFooter]\"\n        [propertiesToHide]=\"['c8y_Command']\"\n      ></c8y-operations-timeline>\n      <ng-template #timelineItemBody let-operation>\n        <small>{{ operation.c8y_Command?.text || operation.description }}</small>\n      </ng-template>\n      <ng-template #timelineItemFooter let-operation>\n        <div *ngIf=\"operation.c8y_Command?.text\">\n          <div class=\"legend form-block\" translate>Command</div>\n          <pre class=\"text-pre-normal\">\n              <code>{{operation.c8y_Command.text}}</code>\n          </pre>\n        </div>\n        <div *ngIf=\"operation.c8y_Command?.result\">\n          <div class=\"legend form-block\" translate>Response</div>\n          <pre class=\"text-pre-normal\">\n              <code>{{operation.c8y_Command.result}}</code>\n          </pre>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n",
                  providers: [ngxComponents.OperationRealtimeService, ngxComponents.ManagedObjectRealtimeService]
              },] }
  ];
  DeviceShellComponent.ctorParameters = function () { return [
      { type: DeviceShellService },
      { type: ngxComponents.OperationRealtimeService },
      { type: ngxComponents.ManagedObjectRealtimeService },
      { type: client.OperationService },
      { type: router.ActivatedRoute },
      { type: modal.BsModalService },
      { type: ngxComponents.AlertService }
  ]; };

  var ShellModule = /** @class */ (function () {
      function ShellModule() {
      }
      return ShellModule;
  }());
  ShellModule.decorators = [
      { type: core.NgModule, args: [{
                  imports: [
                      common.CommonModule,
                      ngxComponents.CoreModule,
                      operationsTimeline.OperationsTimelineModule,
                      CommandTemplatesModule,
                      DeviceShellSharedModule
                  ],
                  declarations: [DeviceShellComponent],
                  exports: [DeviceShellComponent]
              },] }
  ];

  var DEVICE_SHELL_ROUTE = {
      path: 'shell',
      context: ngxComponents.ViewContext.Device,
      component: DeviceShellComponent,
      label: ngxComponents.gettext('Shell'),
      icon: 'terminal',
      canActivate: [DeviceShellGuard]
  };
  var ɵ0 = DEVICE_SHELL_ROUTE;
  var DeviceShellModule = /** @class */ (function () {
      function DeviceShellModule() {
      }
      return DeviceShellModule;
  }());
  DeviceShellModule.decorators = [
      { type: core.NgModule, args: [{
                  imports: [ShellModule],
                  providers: [
                      DeviceShellGuard,
                      {
                          provide: ngxComponents.HOOK_ROUTE,
                          useValue: ɵ0,
                          multi: true
                      }
                  ]
              },] }
  ];

  /**
   * Generated bundle index. Do not edit.
   */

  exports.CommandTemplates = CommandTemplates;
  exports.CommandTemplatesComponent = CommandTemplatesComponent;
  exports.CommandTemplatesModule = CommandTemplatesModule;
  exports.DeviceShellComponent = DeviceShellComponent;
  exports.DeviceShellGuard = DeviceShellGuard;
  exports.DeviceShellModule = DeviceShellModule;
  exports.DeviceShellService = DeviceShellService;
  exports.DeviceShellSharedModule = DeviceShellSharedModule;
  exports.ShellModule = ShellModule;
  exports.rootScopeFactory = rootScopeFactory;
  exports["ɵ0"] = ɵ0;
  exports["ɵa"] = ShellModule;
  exports["ɵb"] = DeviceShellComponent;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-device-shell.umd.js.map
