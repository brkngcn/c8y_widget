(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/modal'), require('@c8y/ngx-components'), require('@angular/forms'), require('rxjs'), require('lodash-es'), require('@ngx-translate/core'), require('@c8y/client'), require('@c8y/client'), require('@c8y/client'), require('@c8y/client'), require('rxjs/operators'), require('@c8y/ngx-components/register-device')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/actility-device-registration', ['exports', '@angular/core', 'ngx-bootstrap/modal', '@c8y/ngx-components', '@angular/forms', 'rxjs', 'lodash-es', '@ngx-translate/core', '@c8y/client', '@c8y/client', '@c8y/client', '@c8y/client', 'rxjs/operators', '@c8y/ngx-components/register-device'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["actility-device-registration"] = {}), global.ng.core, global.modal, global.c8y["ngx-components"], global.ng.forms, global.rxjs, global.lodashEs, global.i3, global.client, global.i1, global.i2, global.i4, global.rxjs.operators, global.c8y["ngx-components"]["register-device"]));
})(this, (function (exports, i0, modal, i5, forms, rxjs, lodashEs, i3, client, i1, i2, i4, operators, registerDevice) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ErrorName;
    (function (ErrorName) {
        ErrorName["NoConnectivityPlansError"] = "NoConnectivityPlansError";
        ErrorName["NoFreeSlotsInConnectivityPlansError"] = "NoFreeSlotsInConnectivityPlansError";
        ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
        ErrorName["NoDeviceProfilesError"] = "NoDeviceProfilesError";
        ErrorName["DeviceProfilesFetchError"] = "DeviceProfilesFetchError";
        ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
        ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
        ErrorName["RegistrationError"] = "RegistrationError";
    })(ErrorName || (ErrorName = {}));
    var ActilityDeviceRegistrationService = /** @class */ (function () {
        function ActilityDeviceRegistrationService(inventoryService, client, translateService, applicationService, optionsService) {
            this.inventoryService = inventoryService;
            this.client = client;
            this.translateService = translateService;
            this.applicationService = applicationService;
            this.optionsService = optionsService;
            this.baseUrl = '/service/actility';
            this.registrationUrl = this.baseUrl + "/newDeviceRequest";
            this.connectivityPlansUrl = this.baseUrl + "/connectivityPlans";
            this.deviceProfilesUrl = this.baseUrl + "/deviceProfiles";
            this.headers = {
                'Content-Type': 'application/json'
            };
        }
        ActilityDeviceRegistrationService.prototype.getConnections = function () {
            return __awaiter(this, void 0, void 0, function () {
                var options, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'GET',
                                headers: this.headers
                            };
                            return [4 /*yield*/, this.client.fetch(this.baseUrl + "/lns-connection", options)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            if (!(res.status === 200)) return [3 /*break*/, 5];
                            if (!(data.length === 0)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.throwNoConnectivitySettingsError()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [3 /*break*/, 7];
                        case 5: return [4 /*yield*/, this.throwNoConnectivitySettingsError()];
                        case 6:
                            _a.sent();
                            _a.label = 7;
                        case 7: return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        /**
         * Gets connectivity plans from LoRa platform.
         * @param connectionName The name of connection for which connectivity plans will be retrieved
         * @returns The result list with connectivity plans, or throws an error with exception.
         */
        ActilityDeviceRegistrationService.prototype.getConnectivityPlans = function (connectionName) {
            return __awaiter(this, void 0, void 0, function () {
                var options, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'GET',
                                headers: this.headers,
                                params: {
                                    actilityConnectionName: connectionName
                                }
                            };
                            return [4 /*yield*/, this.client.fetch(this.connectivityPlansUrl, options)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            if (!(res.status === 200)) return [3 /*break*/, 3];
                            if (data.length === 0) {
                                this.throwNoConnectivityPlansError();
                            }
                            else {
                                if (!this.hasAvailableConnections(data)) {
                                    this.throwNoFreeSlotsInConnectivityPlansError();
                                }
                            }
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.throwNoConnectivitySettingsError()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5: return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        /**
         * Gets the device profiles from LoRa platform.
         * @param connectionName The name of connection for which device profiles will be retrieved
         * @returns The result list with device profiles, or throws an error with exception.
         */
        ActilityDeviceRegistrationService.prototype.getDeviceProfiles = function (connectionName) {
            return __awaiter(this, void 0, void 0, function () {
                var options, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'GET',
                                headers: this.headers,
                                params: {
                                    actilityConnectionName: connectionName
                                }
                            };
                            return [4 /*yield*/, this.client.fetch(this.deviceProfilesUrl, options)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            if (res.status === 200) {
                                if (data.length === 0) {
                                    this.throwNoDeviceProfilesError();
                                }
                            }
                            else {
                                this.throwDeviceProfilesFetchError();
                            }
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        /**
         * Gets the device protocols
         */
        ActilityDeviceRegistrationService.prototype.getDeviceProtocols = function () {
            return __awaiter(this, void 0, void 0, function () {
                var filters, query, _a, res, data;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            filters = {
                                pageSize: 20,
                                withTotalPages: true
                            };
                            query = {
                                __filter: {
                                    __and: [
                                        { __has: 'c8y_IsDeviceType' },
                                        {
                                            type: { __in: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'] }
                                        }
                                    ]
                                },
                                __orderby: [{ name: 1 }]
                            };
                            return [4 /*yield*/, this.inventoryService.listQuery(query, filters)];
                        case 1:
                            _a = _b.sent(), res = _a.res, data = _a.data;
                            if (res.status === 200) {
                                if (data.length === 0) {
                                    this.throwNoDeviceProtocolsError();
                                }
                            }
                            else {
                                this.throwDeviceProtocolsFetchError();
                            }
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        /**
         * Creates device registration
         */
        ActilityDeviceRegistrationService.prototype.register = function (registration) {
            return __awaiter(this, void 0, void 0, function () {
                var options, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'POST',
                                headers: this.headers,
                                body: JSON.stringify(registration)
                            };
                            return [4 /*yield*/, this.client.fetch(this.registrationUrl, options)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            if (res.status !== 201) {
                                this.throwRegistrationError(data);
                            }
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        /**
         * checks if used connections is less then granted connections
         */
        ActilityDeviceRegistrationService.prototype.hasAvailableConnections = function (connectivityPlans) {
            return lodashEs.some(connectivityPlans, function (plan) { return parseInt(plan.grantedConnections, 10) > parseInt(plan.usedConnections, 10); });
        };
        ActilityDeviceRegistrationService.prototype.throwNoConnectivitySettingsError = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            error = new Error();
                            error.name = ErrorName.NoConnectivitySettingsError;
                            return [4 /*yield*/, this.applicationService.isAvailable('administration')];
                        case 1:
                            if ((_a.sent()).data) {
                                error.message = this.translateService.instant(i5.gettext("Could not get connectivity plans from the LoRa platform. Verify the ThingPark credentials in the Administration app under <a href=\"{{ link }}\">Settings</a>."), {
                                    link: '/apps/administration/index.html#/connectivitySettings/actility_lora_provider_settings'
                                });
                            }
                            else {
                                error.message = i5.gettext('Could not get connectivity plans from the LoRa platform. Please contact the administrator.');
                            }
                            throw error;
                    }
                });
            });
        };
        ActilityDeviceRegistrationService.prototype.throwNoConnectivityPlansError = function () {
            var error = new Error();
            error.name = ErrorName.NoConnectivityPlansError;
            error.message = i5.gettext('No connectivity plans found. New connectivity plans must be created via the LoRa platform.');
            throw error;
        };
        ActilityDeviceRegistrationService.prototype.throwNoFreeSlotsInConnectivityPlansError = function () {
            var companyName = this.optionsService.get('companyName', 'Cumulocity IoT');
            var error = new Error();
            error.name = ErrorName.NoFreeSlotsInConnectivityPlansError;
            error.message = this.translateService.instant(i5.gettext("No connectivity plans with free slots available. Please contact ThingPark on the device quota limits for your connectivity plans or remove unused devices from ThingPark and retry registering the device in the {{companyName}} platform."), {
                companyName: companyName
            });
            throw error;
        };
        ActilityDeviceRegistrationService.prototype.throwDeviceProfilesFetchError = function () {
            var error = new Error();
            error.name = ErrorName.DeviceProfilesFetchError;
            error.message = i5.gettext('Could not load device profiles from the LoRa platform.');
            throw error;
        };
        ActilityDeviceRegistrationService.prototype.throwNoDeviceProfilesError = function () {
            var error = new Error();
            error.name = ErrorName.NoDeviceProfilesError;
            error.message = i5.gettext('No device profiles found. Create a new device profile via the LoRa platform.');
            throw error;
        };
        ActilityDeviceRegistrationService.prototype.throwDeviceProtocolsFetchError = function () {
            var error = new Error();
            error.name = ErrorName.DeviceProtocolsFetchError;
            error.message = i5.gettext('Could not load device protocols.');
            throw error;
        };
        ActilityDeviceRegistrationService.prototype.throwNoDeviceProtocolsError = function () {
            var error = new Error();
            error.name = ErrorName.NoDeviceProtocolsError;
            error.message = this.translateService.instant(i5.gettext("No device protocols configured. Create a LoRa device protocol in <a href=\"{{ link }}\">Device protocols</a>."), {
                link: '/apps/devicemanagement/#/deviceprotocols'
            });
            throw error;
        };
        ActilityDeviceRegistrationService.prototype.throwRegistrationError = function (data) {
            var error = new Error();
            error.name = ErrorName.RegistrationError;
            error.message = data.message;
            throw error;
        };
        return ActilityDeviceRegistrationService;
    }());
    ActilityDeviceRegistrationService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ActilityDeviceRegistrationService_Factory() { return new ActilityDeviceRegistrationService(i0__namespace.ɵɵinject(i1__namespace.InventoryService), i0__namespace.ɵɵinject(i2__namespace.FetchClient), i0__namespace.ɵɵinject(i3__namespace.TranslateService), i0__namespace.ɵɵinject(i4__namespace.ApplicationService), i0__namespace.ɵɵinject(i5__namespace.OptionsService)); }, token: ActilityDeviceRegistrationService, providedIn: "root" });
    ActilityDeviceRegistrationService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ActilityDeviceRegistrationService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: client.FetchClient },
        { type: i3.TranslateService },
        { type: client.ApplicationService },
        { type: i5.OptionsService }
    ]; };

    var ActilityDeviceRegistrationComponent = /** @class */ (function () {
        function ActilityDeviceRegistrationComponent(bsModalRef, registrationService) {
            var _this = this;
            this.bsModalRef = bsModalRef;
            this.registrationService = registrationService;
            this.registrationStepLabels = {
                next: i5.gettext('Register')
            };
            this.finalStepLabels = {
                custom: i5.gettext('Close')
            };
            this.state = 'loadPending';
            this.errors$ = new rxjs.BehaviorSubject([]);
            this.errorMessages$ = this.errors$.pipe(operators.map(function (errors) { return errors.map(function (error) { return error.message; }); }), operators.map(function (messages) { return lodashEs.uniq(messages); }));
            this.connections$ = this.getConnections$();
            this.deviceProtocols$ = this.getDeviceProtocols$();
            this.unsubscribe$ = new rxjs.Subject();
            this.load$ = this.connections$.pipe(operators.catchError(function (error) { return rxjs.of(error); }), operators.switchMap(function (connections) {
                if (connections instanceof Error &&
                    connections.name === ErrorName.NoConnectivitySettingsError) {
                    return rxjs.of([connections]);
                }
                return rxjs.forkJoin([
                    rxjs.of(connections),
                    _this.deviceProtocols$.pipe(operators.catchError(function (error) { return rxjs.of(error); }))
                ]);
            }), operators.map(function (results) { return results.filter(function (result) { return result instanceof Error; }); }), operators.switchMap(function (errors) { return (errors.length === 0 ? rxjs.of([]) : rxjs.throwError(errors)); }));
            this.form = new forms.FormGroup({});
            this.model = {};
            // Formly schema definition to render actility device registration form
            this.fields = [
                {
                    key: 'connection',
                    type: 'typeahead',
                    templateOptions: {
                        label: i5.gettext('Connection'),
                        required: true,
                        c8yForOptions: this.connections$,
                        displayProperty: 'name',
                        valueProperties: ['name']
                    }
                },
                {
                    key: 'deviceProfile',
                    type: 'typeahead',
                    templateOptions: {
                        label: i5.gettext('Device profile'),
                        required: true,
                        displayProperty: 'name',
                        placeholder: 'IWM-LR3',
                        valueProperties: ['id', 'name', 'typeMAC']
                    },
                    hooks: {
                        onInit: function (field) {
                            var connectionControl = field.form.get('connection');
                            connectionControl.valueChanges
                                .pipe(operators.takeUntil(_this.unsubscribe$), operators.mergeMap(function () { return _this.getDeviceProfiles$(_this.form.get('connection').value.name); }))
                                .subscribe(function (profiles) {
                                field.templateOptions.c8yForOptions = rxjs.of(profiles);
                                field.formControl.setValue(null);
                            }, function (error) {
                                field.form.controls.deviceProfile.setErrors({ deviceProfile: true });
                                field.validators.deviceProfile.message = error.message;
                            });
                        }
                    },
                    validators: {
                        deviceProfile: {
                            expression: function (control) {
                                return control.status === 'VALID';
                            },
                            message: function () { return ''; }
                        }
                    }
                },
                {
                    key: 'deviceType',
                    type: 'typeahead',
                    templateOptions: {
                        label: i5.gettext('Device protocol'),
                        required: true,
                        c8yForOptions: this.deviceProtocols$,
                        displayProperty: 'name',
                        valueProperties: ['id', 'name']
                    }
                },
                {
                    key: 'devEUI',
                    type: 'input',
                    templateOptions: {
                        placeholder: '0018A20000000004',
                        label: i5.gettext('Device EUI'),
                        required: true,
                        pattern: '^([a-fA-F0-9]{16})$'
                    },
                    validation: {
                        messages: {
                            pattern: i5.gettext('Must be a valid 16 digit hexadecimal number.')
                        }
                    }
                },
                {
                    key: 'applicationEUI',
                    type: 'input',
                    templateOptions: {
                        placeholder: '70B3D53260000003',
                        label: i5.gettext('Application EUI'),
                        required: true,
                        pattern: '^([a-fA-F0-9]{16})$'
                    },
                    validation: {
                        messages: {
                            pattern: i5.gettext('Must be a valid 16 digit hexadecimal number.')
                        }
                    }
                },
                {
                    key: 'applicationKey',
                    type: 'input',
                    templateOptions: {
                        label: i5.gettext('Application key'),
                        placeholder: '258DB54023EA74F0D55085F7351737D0',
                        required: true,
                        pattern: '^([a-fA-F0-9]{32})$'
                    },
                    validation: {
                        messages: {
                            pattern: i5.gettext('Must be a valid 32 digit hexadecimal number.')
                        }
                    }
                },
                {
                    key: 'connectivityPlan',
                    type: 'typeahead',
                    templateOptions: {
                        label: i5.gettext('Connectivity plan'),
                        description: i5.gettext('Only connectivity plans with free slots are displayed'),
                        required: true,
                        placeholder: 'Dev-ope testing CP',
                        displayProperty: 'name',
                        valueProperties: ['id', 'ref', 'name', 'grantedConnections', 'usedConnections']
                    },
                    hooks: {
                        onInit: function (field) {
                            var connectionControl = field.form.get('connection');
                            connectionControl.valueChanges
                                .pipe(operators.takeUntil(_this.unsubscribe$), operators.mergeMap(function () { return _this.getConnectivityPlans$(_this.form.get('connection').value.name); }))
                                .subscribe(function (profiles) {
                                field.templateOptions.c8yForOptions = rxjs.of(profiles);
                                field.formControl.setValue(null);
                            }, function (error) {
                                field.form.controls.connectivityPlan.setErrors({ connectivityPlan: true });
                                field.validators.connectivityPlan.message = error.message;
                            });
                        }
                    },
                    validators: {
                        connectivityPlan: {
                            expression: function (control) {
                                return control.status === 'VALID';
                            },
                            message: function () { return ''; }
                        }
                    }
                }
            ];
            this.load$.subscribe(function () {
                _this.state = 'loadSuccess';
            }, function (errors) {
                _this.state = 'loadError';
                _this.errors$.next(errors);
            });
        }
        ActilityDeviceRegistrationComponent.prototype.getConnectivityPlans$ = function (name) {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.registrationService.getConnectivityPlans(name)); }).pipe(operators.shareReplay(1));
        };
        ActilityDeviceRegistrationComponent.prototype.getDeviceProfiles$ = function (name) {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.registrationService.getDeviceProfiles(name)); }).pipe(operators.shareReplay(1));
        };
        ActilityDeviceRegistrationComponent.prototype.getDeviceProtocols$ = function () {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.registrationService.getDeviceProtocols()); }).pipe(operators.shareReplay(1));
        };
        ActilityDeviceRegistrationComponent.prototype.getConnections$ = function () {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.registrationService.getConnections()); }).pipe(operators.shareReplay(1));
        };
        ActilityDeviceRegistrationComponent.prototype.register = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var actilityDevice, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event.stepper.next();
                            this.state = 'registrationPending';
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            actilityDevice = this.getActilityDeviceToSend();
                            return [4 /*yield*/, this.registrationService.register(actilityDevice)];
                        case 2:
                            _a.sent();
                            this.state = 'registrationSuccess';
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _a.sent();
                            this.state = 'registrationError';
                            this.errors$.next([error_1]);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ActilityDeviceRegistrationComponent.prototype.getActilityDeviceToSend = function () {
            var actilityDevice = lodashEs.cloneDeep(this.model);
            actilityDevice.lnsConnectionName = this.model.connection.name;
            delete actilityDevice.connection;
            return actilityDevice;
        };
        ActilityDeviceRegistrationComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        return ActilityDeviceRegistrationComponent;
    }());
    ActilityDeviceRegistrationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-actility-registration',
                    template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Actility LoRa registration' | translate }}</h4>\n  </ng-container>\n\n  <ng-container *ngIf=\"state === 'loadPending'; else registrationForm\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </ng-container>\n\n  <!--Formly schema is rendered-->\n  <ng-template #registrationForm>\n    <c8y-stepper\n      [hideStepProgress]=\"true\"\n      linear\n      *ngIf=\"(errorMessages$ | async).length === 0; else errorMessagesPresent\"\n    >\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"p-b-16\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              sticky-top\n              separator-bottom\n              lead\n              text-center\n              bg-component\n            \"\n          >\n          {{ 'Register a single Actility device' | translate }}\n          </p>\n          <formly-form\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            class=\"formly-group-array-cols d-block p-l-24 p-r-24\"\n          ></formly-form>\n        </div>\n\n        <c8y-stepper-buttons\n          [labels]=\"registrationStepLabels\"\n          (onNext)=\"register($event)\"\n          (onCancel)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [pending]=\"state === 'registrationPending'\"\n          [disabled]=\"!form?.valid\"\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n      <cdk-step state=\"final\">\n        <!--success scenario-->\n        <div class=\"p-16 text-center\" *ngIf=\"state === 'registrationPending'\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <div class=\"m-24\">\n          <c8y-operation-result\n            *ngIf=\"state === 'registrationSuccess'\"\n            text=\"{{ 'Device registered' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead m-b-0\"\n          ></c8y-operation-result>\n        </div>\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          (onCustom)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ custom: true }\"\n          [labels]=\"finalStepLabels\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </c8y-stepper>\n  </ng-template>\n\n  <!--Failure scenario-->\n  <ng-template #errorMessagesPresent>\n    <div class=\"m-24\">\n      <c8y-operation-result\n        *ngIf=\"state === 'registrationError'\"\n        text=\"{{ 'Failed to register' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n      <div\n        *ngFor=\"let msg of errorMessages$ | async\"\n        class=\"m-b-8\"\n        [ngClass]=\"{\n          'text-center': state === 'registrationError',\n          'alert alert-danger': state === 'loadError'\n        }\"\n      >\n        <span [innerHTML]=\"msg | translate\"></span>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Close' | translate }}\"\n        (click)=\"bsModalRef.hide()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        translate\n      >\n        Close\n      </button>\n    </div>\n  </ng-template>\n</c8y-modal>"
                },] }
    ];
    ActilityDeviceRegistrationComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: ActilityDeviceRegistrationService }
    ]; };

    var ActilityDeviceRegistrationButtonComponent = /** @class */ (function () {
        function ActilityDeviceRegistrationButtonComponent(modalService) {
            this.modalService = modalService;
        }
        ActilityDeviceRegistrationButtonComponent.prototype.open = function () {
            this.modalService.show(ActilityDeviceRegistrationComponent, {
                class: 'modal-sm',
                ignoreBackdropClick: true
            });
        };
        return ActilityDeviceRegistrationButtonComponent;
    }());
    ActilityDeviceRegistrationButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-actility-registration-button',
                    template: "<button (click)=\"open()\">\n  <i c8yIcon=\"c8y-device-connect\"></i>\n  {{ 'Actility LoRa' | translate }}\n</button>\n"
                },] }
    ];
    ActilityDeviceRegistrationButtonComponent.ctorParameters = function () { return [
        { type: modal.BsModalService }
    ]; };

    var ActilityDeviceRegistrationFactory = /** @class */ (function () {
        function ActilityDeviceRegistrationFactory(tenantService) {
            this.tenantService = tenantService;
        }
        ActilityDeviceRegistrationFactory.prototype.get = function () {
            var actions = [];
            if (this.tenantService.isMicroserviceSubscribedInCurrentTenant('actility')) {
                actions.push({
                    template: ActilityDeviceRegistrationButtonComponent,
                    priority: 99,
                    category: 'single'
                });
            }
            return actions;
        };
        return ActilityDeviceRegistrationFactory;
    }());
    ActilityDeviceRegistrationFactory.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ActilityDeviceRegistrationFactory_Factory() { return new ActilityDeviceRegistrationFactory(i0__namespace.ɵɵinject(i5__namespace.TenantUiService)); }, token: ActilityDeviceRegistrationFactory, providedIn: "root" });
    ActilityDeviceRegistrationFactory.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ActilityDeviceRegistrationFactory.ctorParameters = function () { return [
        { type: i5.TenantUiService }
    ]; };

    var ActilityDeviceRegistrationModule = /** @class */ (function () {
        function ActilityDeviceRegistrationModule() {
        }
        return ActilityDeviceRegistrationModule;
    }());
    ActilityDeviceRegistrationModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i5.CoreModule, i5.CommonModule],
                    declarations: [ActilityDeviceRegistrationButtonComponent, ActilityDeviceRegistrationComponent],
                    providers: [
                        ActilityDeviceRegistrationService,
                        {
                            provide: registerDevice.HOOK_DEVICE_REGISTRATION,
                            useClass: ActilityDeviceRegistrationFactory,
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ActilityDeviceRegistrationButtonComponent = ActilityDeviceRegistrationButtonComponent;
    exports.ActilityDeviceRegistrationComponent = ActilityDeviceRegistrationComponent;
    exports.ActilityDeviceRegistrationFactory = ActilityDeviceRegistrationFactory;
    exports.ActilityDeviceRegistrationModule = ActilityDeviceRegistrationModule;
    exports["ɵa"] = ActilityDeviceRegistrationService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-actility-device-registration.umd.js.map
