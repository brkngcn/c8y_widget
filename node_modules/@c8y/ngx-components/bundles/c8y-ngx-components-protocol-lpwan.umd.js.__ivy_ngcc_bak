(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@c8y/client'), require('lodash-es'), require('@angular/router'), require('@c8y/client'), require('@ngx-translate/core'), require('ngx-bootstrap/modal'), require('file-saver'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/protocol-lpwan', ['exports', '@angular/core', '@c8y/ngx-components', '@c8y/client', 'lodash-es', '@angular/router', '@c8y/client', '@ngx-translate/core', 'ngx-bootstrap/modal', 'file-saver', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["protocol-lpwan"] = {}), global.ng.core, global.c8y["ngx-components"], global.client, global.lodashEs, global.ng.router, global.i1, global.core, global.modal, global.fileSaver, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, i2, client, lodashEs, router, i1, core, modal, fileSaver, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var NoConnectionsFoundComponent = /** @class */ (function () {
        function NoConnectionsFoundComponent() {
            this.onAction = new i0.EventEmitter();
            this.header = i2.gettext('Connections');
        }
        NoConnectionsFoundComponent.prototype.addConnection = function () {
            this.onAction.emit();
        };
        return NoConnectionsFoundComponent;
    }());
    NoConnectionsFoundComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'no-connections-found',
                    template: "<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header separator grid__col--fullspan\">\n    <h4>{{ header | translate}}</h4>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-gray-white flex-grow\">\n      <div class=\"card-block large-padding\">\n        <c8y-ui-empty-state\n          [icon]=\"'plug'\"\n          [title]=\"'No connections found.' | translate\"\n          [subtitle]=\"'Click below to add a new connection.' | translate\"\n          [horizontal]=\"true\"\n        ></c8y-ui-empty-state>\n      </div>\n    </div>\n\n    <div class=\"card-footer separator\">\n      <button\n        title=\"{{ 'Add connection' | translate }}\"\n        class=\"btn btn-primary\"\n        (click)=\"addConnection()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add connection' | translate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll split-view__detail\">\n    <div class=\"flex-grow\">\n      <div class=\"card-block large-padding\">\n        <c8y-ui-empty-state\n          [icon]=\"'more-details'\"\n          [title]=\"'No settings to display.' | translate\"\n          [subtitle]=\"'Add a connection.' | translate\"\n          [horizontal]=\"true\"\n        ></c8y-ui-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    NoConnectionsFoundComponent.propDecorators = {
        onAction: [{ type: i0.Output }],
        header: [{ type: i0.Input }]
    };

    var ConnectionType;
    (function (ConnectionType) {
        ConnectionType[ConnectionType["ACTILITY"] = 0] = "ACTILITY";
        ConnectionType[ConnectionType["SIGFOX"] = 1] = "SIGFOX";
    })(ConnectionType || (ConnectionType = {}));
    function isSigfoxConnection(connection) {
        return typeof connection.parentGroupId !== 'undefined';
    }
    function isActilityConnection(connection) {
        return typeof connection.profileId !== 'undefined';
    }

    var MultipleLnsConnectorService = /** @class */ (function () {
        function MultipleLnsConnectorService(client, appStateService, alertService) {
            this.client = client;
            this.appStateService = appStateService;
            this.alertService = alertService;
            this.headers = { 'Content-Type': 'application/json' };
        }
        MultipleLnsConnectorService.prototype.list = function (connectionType) {
            return __awaiter(this, void 0, void 0, function () {
                var url, options;
                return __generator(this, function (_a) {
                    url = this.getBaseUrlByType(connectionType) + "/lns-connection";
                    options = {
                        method: 'GET',
                        headers: this.headers
                    };
                    return [2 /*return*/, this.client.fetch(url, options)];
                });
            });
        };
        /**
         * Saves the connection.
         * @param connection The connection to be saved.
         * @param originalName The original name of the connection, required to perform an update.
         */
        MultipleLnsConnectorService.prototype.save = function (connection, originalName) {
            if (originalName === void 0) { originalName = null; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (originalName) {
                        return [2 /*return*/, this.update(connection, originalName)];
                    }
                    return [2 /*return*/, this.create(connection)];
                });
            });
        };
        MultipleLnsConnectorService.prototype.detail = function (connectionType, connectionName) {
            return __awaiter(this, void 0, void 0, function () {
                var name, url, options, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            name = connectionName.toLocaleLowerCase();
                            url = this.getBaseUrlByType(connectionType) + "/lns-connection/" + encodeURIComponent(String(name));
                            options = {
                                method: 'GET',
                                headers: this.headers
                            };
                            return [4 /*yield*/, this.client.fetch(url, options)];
                        case 1:
                            res = _a.sent();
                            if (!(res.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, res.json()];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3: return [2 /*return*/, null];
                    }
                });
            });
        };
        MultipleLnsConnectorService.prototype.exists = function (connectionType, connectionName) {
            return __awaiter(this, void 0, void 0, function () {
                var connection;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.detail(connectionType, connectionName)];
                        case 1:
                            connection = _a.sent();
                            return [2 /*return*/, connection !== null];
                    }
                });
            });
        };
        MultipleLnsConnectorService.prototype.create = function (connection) {
            return __awaiter(this, void 0, void 0, function () {
                var url, options;
                return __generator(this, function (_a) {
                    connection.name = connection.name.toLocaleLowerCase();
                    url = this.getBaseUrlByConnection(connection) + "/lns-connection";
                    options = {
                        method: 'POST',
                        headers: this.headers,
                        body: JSON.stringify(connection)
                    };
                    return [2 /*return*/, this.client.fetch(url, options)];
                });
            });
        };
        MultipleLnsConnectorService.prototype.update = function (connection, originalName) {
            return __awaiter(this, void 0, void 0, function () {
                var url, options;
                return __generator(this, function (_a) {
                    connection.name = connection.name.toLocaleLowerCase();
                    url = this.getBaseUrlByConnection(connection) + "/lns-connection/" + encodeURIComponent(String(originalName));
                    options = {
                        method: 'PUT',
                        headers: this.headers,
                        body: JSON.stringify(connection)
                    };
                    return [2 /*return*/, this.client.fetch(url, options)];
                });
            });
        };
        MultipleLnsConnectorService.prototype.getBaseUrlByConnection = function (connection) {
            return isSigfoxConnection(connection)
                ? 'service/sigfox-agent'
                : isActilityConnection(connection)
                    ? 'service/actility'
                    : '';
        };
        MultipleLnsConnectorService.prototype.getBaseUrlByType = function (connectionType) {
            return (connectionType === ConnectionType.SIGFOX)
                ? 'service/sigfox-agent'
                : (connectionType === ConnectionType.ACTILITY)
                    ? 'service/actility'
                    : '';
        };
        MultipleLnsConnectorService.prototype.delete = function (connection) {
            return __awaiter(this, void 0, void 0, function () {
                var url, options;
                return __generator(this, function (_a) {
                    url = this.getBaseUrlByConnection(connection) + "/lns-connection";
                    options = {
                        method: 'DELETE'
                    };
                    return [2 /*return*/, this.client.fetch(url + "/" + encodeURIComponent(String(connection.name)), options)];
                });
            });
        };
        MultipleLnsConnectorService.prototype.getApplication = function (name) {
            var references = this.appStateService.currentTenant.value.applications.references;
            return references.find(function (_a) {
                var application = _a.application;
                return application.name === name;
            }).application;
        };
        MultipleLnsConnectorService.prototype.download = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var options;
                return __generator(this, function (_a) {
                    try {
                        options = {
                            method: 'GET'
                        };
                        return [2 /*return*/, this.client.fetch(url, options)];
                    }
                    catch (e) {
                        this.alertService.addServerFailure(e);
                    }
                    return [2 /*return*/];
                });
            });
        };
        return MultipleLnsConnectorService;
    }());
    MultipleLnsConnectorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MultipleLnsConnectorService_Factory() { return new MultipleLnsConnectorService(i0__namespace.ɵɵinject(i1__namespace.FetchClient), i0__namespace.ɵɵinject(i2__namespace.AppStateService), i0__namespace.ɵɵinject(i2__namespace.AlertService)); }, token: MultipleLnsConnectorService, providedIn: "root" });
    MultipleLnsConnectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    MultipleLnsConnectorService.ctorParameters = function () { return [
        { type: client.FetchClient },
        { type: i2.AppStateService },
        { type: i2.AlertService }
    ]; };

    var ConnectionInfoWithDownloadCsvComponent = /** @class */ (function () {
        function ConnectionInfoWithDownloadCsvComponent(modal, connectorService) {
            this.modal = modal;
            this.connectorService = connectorService;
        }
        ConnectionInfoWithDownloadCsvComponent.prototype.dismiss = function () {
            this.modal.hide();
        };
        ConnectionInfoWithDownloadCsvComponent.prototype.download = function () {
            return __awaiter(this, void 0, void 0, function () {
                var url, res, streamData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            url = "/service/" + this.appData.contextPath + this.messageData.URL;
                            return [4 /*yield*/, this.connectorService.download(url)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.blob()];
                        case 2:
                            streamData = _a.sent();
                            fileSaver.saveAs(streamData, 'DeviceList.csv');
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ConnectionInfoWithDownloadCsvComponent;
    }());
    ConnectionInfoWithDownloadCsvComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'connection-info-with-download-csv',
                    template: "<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"c8y-prompt alert alert-danger\">\n      <h3 class=\"m-b-16\">\n        <i class=\"dlt-c8y-icon-exclamation-circle\"></i>\n        <span>{{ modalTitle | translate }}</span>\n      </h3>\n      <p class=\"text-break-word\">\n        {{ messageData.message | translate }}\n      </p>\n      \n      <span class=\"btn-default\" (click)=\"download()\">{{\n        'Click to download link with affected devices' | translate\n      }}</span>\n      <div class=\"alert-footer\">\n        <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"dismiss()\">\n          {{ 'Cancel' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    ConnectionInfoWithDownloadCsvComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: MultipleLnsConnectorService }
    ]; };
    ConnectionInfoWithDownloadCsvComponent.propDecorators = {
        messageData: [{ type: i0.Input }],
        appData: [{ type: i0.Input }],
        modalTitle: [{ type: i0.Input }]
    };

    var SigfoxMultipleLnsConnectorComponent = /** @class */ (function () {
        function SigfoxMultipleLnsConnectorComponent(connectorService, alertService, translateService, modalService, modal) {
            this.connectorService = connectorService;
            this.alertService = alertService;
            this.translateService = translateService;
            this.modalService = modalService;
            this.modal = modal;
            this.state = 'loadingConnection';
            this.connection = {};
            this.connections = Array();
            this.showPassword = false;
            this.cardHeader = i2.gettext('Sigfox connections');
        }
        SigfoxMultipleLnsConnectorComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadConnections()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.loadConnections = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res, data, _a, list;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.connectorService.list(ConnectionType.SIGFOX)];
                        case 1:
                            res = _b.sent();
                            if (!(res && res.status !== 200)) return [3 /*break*/, 5];
                            if (!res.json) return [3 /*break*/, 3];
                            return [4 /*yield*/, res.json()];
                        case 2:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = undefined;
                            _b.label = 4;
                        case 4:
                            data = _a;
                            this.alertService.addServerFailure({ data: data, res: res });
                            this.state = 'loadingError';
                            return [3 /*break*/, 8];
                        case 5: return [4 /*yield*/, res.json()];
                        case 6:
                            list = _b.sent();
                            this.connections = lodashEs.orderBy(list, ['name'], ['asc']);
                            return [4 /*yield*/, this.setModel()];
                        case 7:
                            _b.sent();
                            _b.label = 8;
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.setModel = function (connectionObj) {
            if (connectionObj === void 0) { connectionObj = null; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.resetEditedUnsavedConnection()];
                        case 1:
                            _a.sent();
                            this.connection = connectionObj
                                ? connectionObj
                                : this.state === 'savedSuccessfully'
                                    ? this.connection
                                    : lodashEs.head(this.connections);
                            this.state = 'updateConnection';
                            this.showPassword = false;
                            this.connectionBeingEdited = this.connection ? this.connection.name : undefined;
                            return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.resetEditedUnsavedConnection = function () {
            return __awaiter(this, void 0, void 0, function () {
                var originalConnectionIndex, isConnectionExist;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalConnectionIndex = (!this.connection) ? 0 : lodashEs.findIndex(this.connections, { name: this.connectionBeingEdited });
                            if (!(this.connectionBeingEdited && this.state === 'updateConnection')) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.connectorService.detail(ConnectionType.SIGFOX, this.connectionBeingEdited)];
                        case 1:
                            isConnectionExist = _a.sent();
                            this.connections[originalConnectionIndex] = isConnectionExist;
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.addConnection = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.resetEditedUnsavedConnection()];
                        case 1:
                            _a.sent();
                            this.connection = {};
                            this.connectionBeingEdited = '';
                            this.state = 'addConnections';
                            this.showPassword = true;
                            return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var checkForConnectionName, isConnectionExist, mesg;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkForConnectionName = (this.connectionBeingEdited && this.connectionBeingEdited !== '') ? this.connectionBeingEdited : this.connection.name;
                            return [4 /*yield*/, this.connectorService.exists(ConnectionType.SIGFOX, checkForConnectionName)];
                        case 1:
                            isConnectionExist = _a.sent();
                            if (this.state === 'addConnections' && isConnectionExist) {
                                mesg = this.translateService.instant(i2.gettext("Connection with name \"{{ name }}\" already exists."), { name: this.connection.name });
                                this.alertService.danger(mesg);
                            }
                            else {
                                this.saveConnection();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.deleteConnection = function (connection) {
            return __awaiter(this, void 0, void 0, function () {
                var mesg, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mesg = this.translateService.instant(i2.gettext("You are about to delete the connection \"{{ name }}\". Do you want to proceed?"), { name: connection.name });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.modal.confirm(i2.gettext('Delete connection'), mesg, i2.Status.DANGER, {
                                    ok: i2.gettext('Delete'),
                                    cancel: i2.gettext('Cancel')
                                })];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.delete(connection)];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            error_1 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.changePassword = function () {
            this.showPassword = !this.showPassword;
            if (this.connectorsForm.controls.password) {
                this.connectorsForm.controls.password.setValue(null);
            }
        };
        SigfoxMultipleLnsConnectorComponent.prototype.saveConnection = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res, data, _a, app, initialState, data, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.connectorService.save(this.connection, this.connectionBeingEdited)];
                        case 1:
                            res = _c.sent();
                            if (!(res && (res.status === 201 || res.status === 200))) return [3 /*break*/, 3];
                            this.state = 'savedSuccessfully';
                            this.alertService.success(i2.gettext('Connection saved.'));
                            return [4 /*yield*/, this.loadConnections()];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 11];
                        case 3:
                            if (!(res && res.status === 500)) return [3 /*break*/, 7];
                            if (!res.json) return [3 /*break*/, 5];
                            return [4 /*yield*/, res.json()];
                        case 4:
                            _a = _c.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            _a = undefined;
                            _c.label = 6;
                        case 6:
                            data = _a;
                            app = this.connectorService.getApplication('sigfox-agent');
                            initialState = {
                                messageData: data,
                                appData: app,
                                modalTitle: i2.gettext('Failed to update the connection')
                            };
                            this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState: initialState });
                            return [3 /*break*/, 11];
                        case 7:
                            if (!res.json) return [3 /*break*/, 9];
                            return [4 /*yield*/, res.json()];
                        case 8:
                            _b = _c.sent();
                            return [3 /*break*/, 10];
                        case 9:
                            _b = undefined;
                            _c.label = 10;
                        case 10:
                            data = _b;
                            this.alertService.addServerFailure({ data: data, res: res });
                            _c.label = 11;
                        case 11: return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxMultipleLnsConnectorComponent.prototype.delete = function (connection) {
            return __awaiter(this, void 0, void 0, function () {
                var response, data, _a, app, initialState, data, _b, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 12, , 13]);
                            return [4 /*yield*/, this.connectorService.delete(connection)];
                        case 1:
                            response = _c.sent();
                            if (!(response.ok && response.status === 204)) return [3 /*break*/, 3];
                            this.alertService.success(i2.gettext('Connection deleted.'));
                            return [4 /*yield*/, this.loadConnections()];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 11];
                        case 3:
                            if (!(response && response.status === 500)) return [3 /*break*/, 7];
                            if (!response.json) return [3 /*break*/, 5];
                            return [4 /*yield*/, response.json()];
                        case 4:
                            _a = _c.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            _a = undefined;
                            _c.label = 6;
                        case 6:
                            data = _a;
                            app = this.connectorService.getApplication('sigfox-agent');
                            initialState = {
                                messageData: data,
                                appData: app,
                                modalTitle: i2.gettext('Failed to delete the connection')
                            };
                            this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState: initialState });
                            return [3 /*break*/, 11];
                        case 7:
                            if (!response.json) return [3 /*break*/, 9];
                            return [4 /*yield*/, response.json()];
                        case 8:
                            _b = _c.sent();
                            return [3 /*break*/, 10];
                        case 9:
                            _b = undefined;
                            _c.label = 10;
                        case 10:
                            data = _b;
                            this.alertService.addServerFailure({ data: data, response: response });
                            _c.label = 11;
                        case 11: return [3 /*break*/, 13];
                        case 12:
                            error_2 = _c.sent();
                            return [3 /*break*/, 13];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        return SigfoxMultipleLnsConnectorComponent;
    }());
    SigfoxMultipleLnsConnectorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'sigfox-multiple-lns-connector',
                    template: "<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <h4>{{ cardHeader | translate }}</h4>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connection.name\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        ng-class=\"{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            ng-click=\"vm.deselect()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Sigfox connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to detect...' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://backend.sigfox.com/api' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"parentGroupId\">\n                  {{ 'Parent group ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: '58c1793b9e93a15370f71caa' }\"\n                  id=\"parentGroupId\"\n                  name=\"parentGroupId\"\n                  [(ngModel)]=\"connection.parentGroupId\"\n                  required\n                  pattern=\"[a-z\\d]+\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid Parent group ID' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  [required]=\"state === 'addConnections'\"\n                />\n              </c8y-form-group>\n\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n          </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(connection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n          </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
                },] }
    ];
    SigfoxMultipleLnsConnectorComponent.ctorParameters = function () { return [
        { type: MultipleLnsConnectorService },
        { type: i2.AlertService },
        { type: core.TranslateService },
        { type: modal.BsModalService },
        { type: i2.ModalService }
    ]; };
    SigfoxMultipleLnsConnectorComponent.propDecorators = {
        connectorsForm: [{ type: i0.ViewChild, args: ['connectorsForm', { static: false },] }]
    };

    var ActilityMultipleLnsConnectorComponent = /** @class */ (function () {
        function ActilityMultipleLnsConnectorComponent(connectorService, alertService, translateService, modal, modalService) {
            this.connectorService = connectorService;
            this.alertService = alertService;
            this.translateService = translateService;
            this.modal = modal;
            this.modalService = modalService;
            this.state = 'loadingConnection';
            this.connection = {};
            this.connections = Array();
            this.showPassword = false;
            this.cardHeader = i2.gettext('Actility connections');
        }
        ActilityMultipleLnsConnectorComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadConnections()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.loadConnections = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res, data, _a, list;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.connectorService.list(ConnectionType.ACTILITY)];
                        case 1:
                            res = _b.sent();
                            if (!(res && res.status !== 200)) return [3 /*break*/, 5];
                            if (!res.json) return [3 /*break*/, 3];
                            return [4 /*yield*/, res.json()];
                        case 2:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = undefined;
                            _b.label = 4;
                        case 4:
                            data = _a;
                            this.alertService.addServerFailure({ data: data, res: res });
                            this.state = 'loadingError';
                            return [3 /*break*/, 8];
                        case 5: return [4 /*yield*/, res.json()];
                        case 6:
                            list = _b.sent();
                            this.connections = lodashEs.orderBy(list, ['name'], ['asc']);
                            return [4 /*yield*/, this.setModel()];
                        case 7:
                            _b.sent();
                            _b.label = 8;
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.setModel = function (connectionObj) {
            if (connectionObj === void 0) { connectionObj = null; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.resetEditedUnsavedConnection()];
                        case 1:
                            _a.sent();
                            this.connection = connectionObj
                                ? connectionObj
                                : this.state === 'savedSuccessfully'
                                    ? this.connection
                                    : lodashEs.head(this.connections);
                            this.state = 'updateConnection';
                            this.showPassword = false;
                            this.connectionBeingEdited = (this.connection) ? this.connection.name : undefined;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.setAdminAndCoreApiVersion = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.connection.adminApiVersion = 'latest';
                    this.connection.coreApiVersion = 'latest';
                    return [2 /*return*/];
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.resetEditedUnsavedConnection = function () {
            return __awaiter(this, void 0, void 0, function () {
                var originalConnectionIndex, isConnectionExist;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalConnectionIndex = (!this.connection) ? 0 : lodashEs.findIndex(this.connections, { name: this.connectionBeingEdited });
                            if (!(this.connectionBeingEdited && this.state === 'updateConnection')) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.connectorService.detail(ConnectionType.ACTILITY, this.connectionBeingEdited)];
                        case 1:
                            isConnectionExist = _a.sent();
                            this.connections[originalConnectionIndex] = isConnectionExist;
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.addConnection = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.resetEditedUnsavedConnection()];
                        case 1:
                            _a.sent();
                            this.connection = {};
                            this.connectionBeingEdited = '';
                            this.state = 'addConnections';
                            this.showPassword = true;
                            return [4 /*yield*/, this.setAdminAndCoreApiVersion()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var checkForConnectionName, isConnectionExist, mesg;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkForConnectionName = this.connectionBeingEdited !== '' ? this.connectionBeingEdited : this.connection.name;
                            return [4 /*yield*/, this.connectorService.exists(ConnectionType.ACTILITY, checkForConnectionName)];
                        case 1:
                            isConnectionExist = _a.sent();
                            if (this.state === 'addConnections' && isConnectionExist) {
                                mesg = this.translateService.instant(i2.gettext("Connection with name \"{{ name }}\" already exists."), { name: this.connection.name });
                                this.alertService.danger(mesg);
                            }
                            else {
                                this.saveConnection();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.deleteConnection = function (connection) {
            return __awaiter(this, void 0, void 0, function () {
                var mesg, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mesg = this.translateService.instant(i2.gettext("You are about to delete the connection \"{{ name }}\". Do you want to proceed?"), { name: connection.name });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.modal.confirm(i2.gettext('Delete connection'), mesg, i2.Status.DANGER, {
                                    ok: i2.gettext('Delete'),
                                    cancel: i2.gettext('Cancel')
                                })];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.delete(connection)];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            error_1 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.changePassword = function () {
            this.showPassword = !this.showPassword;
            if (this.connectorsForm.controls.password) {
                this.connectorsForm.controls.password.setValue(null);
            }
        };
        ActilityMultipleLnsConnectorComponent.prototype.saveConnection = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res, data, _a, app, initialState, data, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.connectorService.save(this.connection, this.connectionBeingEdited)];
                        case 1:
                            res = _c.sent();
                            if (!(res && (res.status === 201 || res.status === 200))) return [3 /*break*/, 3];
                            this.state = 'savedSuccessfully';
                            this.alertService.success(i2.gettext('Connection saved.'));
                            return [4 /*yield*/, this.loadConnections()];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 11];
                        case 3:
                            if (!(res && res.status === 500)) return [3 /*break*/, 7];
                            if (!res.json) return [3 /*break*/, 5];
                            return [4 /*yield*/, res.json()];
                        case 4:
                            _a = _c.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            _a = undefined;
                            _c.label = 6;
                        case 6:
                            data = _a;
                            app = this.connectorService.getApplication('sigfox-agent');
                            initialState = {
                                messageData: data,
                                appData: app,
                                modalTitle: i2.gettext('Failed to update the connection')
                            };
                            this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState: initialState });
                            return [3 /*break*/, 11];
                        case 7:
                            if (!res.json) return [3 /*break*/, 9];
                            return [4 /*yield*/, res.json()];
                        case 8:
                            _b = _c.sent();
                            return [3 /*break*/, 10];
                        case 9:
                            _b = undefined;
                            _c.label = 10;
                        case 10:
                            data = _b;
                            this.alertService.addServerFailure({ data: data, res: res });
                            _c.label = 11;
                        case 11: return [2 /*return*/];
                    }
                });
            });
        };
        ActilityMultipleLnsConnectorComponent.prototype.delete = function (connection) {
            return __awaiter(this, void 0, void 0, function () {
                var response, data, _a, app, initialState, data, _b, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 12, , 13]);
                            return [4 /*yield*/, this.connectorService.delete(connection)];
                        case 1:
                            response = _c.sent();
                            if (!(response.ok && response.status === 204)) return [3 /*break*/, 3];
                            this.alertService.success(i2.gettext('Connection deleted.'));
                            return [4 /*yield*/, this.loadConnections()];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 11];
                        case 3:
                            if (!(response && response.status === 500)) return [3 /*break*/, 7];
                            if (!response.json) return [3 /*break*/, 5];
                            return [4 /*yield*/, response.json()];
                        case 4:
                            _a = _c.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            _a = undefined;
                            _c.label = 6;
                        case 6:
                            data = _a;
                            app = this.connectorService.getApplication('sigfox-agent');
                            initialState = {
                                messageData: data,
                                appData: app,
                                modalTitle: i2.gettext('Failed to delete the connection')
                            };
                            this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState: initialState });
                            return [3 /*break*/, 11];
                        case 7:
                            if (!response.json) return [3 /*break*/, 9];
                            return [4 /*yield*/, response.json()];
                        case 8:
                            _b = _c.sent();
                            return [3 /*break*/, 10];
                        case 9:
                            _b = undefined;
                            _c.label = 10;
                        case 10:
                            data = _b;
                            this.alertService.addServerFailure({ data: data, response: response });
                            _c.label = 11;
                        case 11: return [3 /*break*/, 13];
                        case 12:
                            error_2 = _c.sent();
                            return [3 /*break*/, 13];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        return ActilityMultipleLnsConnectorComponent;
    }());
    ActilityMultipleLnsConnectorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'actility-multiple-lns-connector',
                    template: "<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <h4>{{ cardHeader | translate }}</h4>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connection.name\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        ng-class=\"{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            ng-click=\"vm.deselect()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Actility connection' | translate\"                  \n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to detect...' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://dx-api.thingpark.io' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"profileId\">\n                  {{ 'Profile ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'dev1-api' }\"\n                  id=\"profileId\"\n                  name=\"profileId\"\n                  [(ngModel)]=\"connection.profileId\"\n                  required\n                />\n              </c8y-form-group>\n              <!-- DM-1171 start-->\n              <c8y-form-group>\n                <label for=\"applicationServerId\">\n                  {{ 'Application server ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Application Server' | translate\"\n                  id=\"applicationServerId\"\n                  name=\"applicationServerId\"\n                  [(ngModel)]=\"connection.routeApplicationServerId\"\n                  [required]=\"connection.routeApplicationServerKey ? 'required' : null\"                  \n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"applicationServerKey\">\n                  {{ 'Application server key' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: '0011AEDF0011AEDF0011AEDF0011AEDF' }\"\n                  id=\"applicationServerKey\"\n                  name=\"applicationServerKey\"\n                  [(ngModel)]=\"connection.routeApplicationServerKey\"\n                  [required]=\"connection.routeApplicationServerId ? 'required' : null\"\n                  pattern=\"[A-Fa-f0-9]{32}\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid server key' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"adminApiVersion\">\n                  {{ 'Admin API version' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'v102' }\"\n                  id=\"adminApiVersion\"\n                  name=\"adminApiVersion\"\n                  [(ngModel)]=\"connection.adminApiVersion\"\n                  required\n                  pattern=\"^v\\d+$|latest\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid API version' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              \n              <c8y-form-group>\n                <label for=\"coreApiVersion\">\n                  {{ 'Core API version' | translate }}\n                </label>                \n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'v121' }\"\n                  id=\"coreApiVersion\"\n                  name=\"coreApiVersion\"\n                  [(ngModel)]=\"connection.coreApiVersion\"\n                  required\n                  pattern=\"^v\\d+$|latest\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid API version' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              <!-- DM-1171 end-->\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  [required]=\"state === 'addConnections'\"\n                />\n              </c8y-form-group>\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n            </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(connection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n            </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
                },] }
    ];
    ActilityMultipleLnsConnectorComponent.ctorParameters = function () { return [
        { type: MultipleLnsConnectorService },
        { type: i2.AlertService },
        { type: core.TranslateService },
        { type: i2.ModalService },
        { type: modal.BsModalService }
    ]; };
    ActilityMultipleLnsConnectorComponent.propDecorators = {
        connectorsForm: [{ type: i0.ViewChild, args: ['connectorsForm', { static: false },] }]
    };

    var settingsRoutes = [
        {
            path: 'connectivitySettings/multiple_lns_connectors_sigfox',
            component: SigfoxMultipleLnsConnectorComponent
        },
        {
            path: 'connectivitySettings/multiple_lns_connectors_actility',
            component: ActilityMultipleLnsConnectorComponent
        }
    ];
    var MultipleLnsConnectorsModule = /** @class */ (function () {
        function MultipleLnsConnectorsModule() {
        }
        return MultipleLnsConnectorsModule;
    }());
    MultipleLnsConnectorsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        SigfoxMultipleLnsConnectorComponent,
                        NoConnectionsFoundComponent,
                        ActilityMultipleLnsConnectorComponent,
                        ConnectionInfoWithDownloadCsvComponent
                    ],
                    imports: [
                        i2.CoreModule,
                        i2.CommonModule,
                        i2.FormsModule,
                        router.RouterModule.forChild(settingsRoutes)
                    ],
                    providers: [
                        MultipleLnsConnectorService
                    ]
                },] }
    ];

    var LpwanSetDeviceProtocolService = /** @class */ (function () {
        function LpwanSetDeviceProtocolService(inventoryService, client, identityService, lnsService) {
            this.inventoryService = inventoryService;
            this.client = client;
            this.identityService = identityService;
            this.lnsService = lnsService;
            this.supportedDevicesCfgs = [
                {
                    name: 'lora',
                    match: function (device) { return lodashEs.get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora'; },
                    protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],
                    externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],
                    connectionType: ConnectionType.ACTILITY
                },
                {
                    name: 'sigfox',
                    match: function (device) { return lodashEs.get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox'; },
                    protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],
                    externalIdTypes: ['com.sigfox.deviceId'],
                    connectionType: ConnectionType.SIGFOX
                }
            ];
            this.header = { 'Content-Type': 'application/json' };
        }
        LpwanSetDeviceProtocolService.prototype.refreshCache = function (device) {
            return __awaiter(this, void 0, void 0, function () {
                var externalId, url, options;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getExternalId(device)];
                        case 1:
                            externalId = _a.sent();
                            if (externalId) {
                                url = this.getMicroserviceUrl(device) + "/refreshCache/" + externalId;
                                options = {
                                    method: 'POST',
                                    headers: this.header,
                                    body: JSON.stringify({})
                                };
                                return [2 /*return*/, this.client.fetch(url, options)];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        LpwanSetDeviceProtocolService.prototype.getMicroserviceUrl = function (device) {
            var serviceProvider = device.c8y_LpwanDevice.serviceProvider;
            var serviceName = serviceProvider.toLowerCase();
            if (serviceProvider === 'Sigfox') {
                serviceName = 'sigfox-agent';
            }
            return "/service/" + serviceName;
        };
        LpwanSetDeviceProtocolService.prototype.isSupportedDevice = function (device) {
            return this.supportedDevicesCfgs.some(function (_a) {
                var match = _a.match;
                return match(device);
            });
        };
        LpwanSetDeviceProtocolService.prototype.getCurrentProtocol = function (device) {
            return __awaiter(this, void 0, void 0, function () {
                var lpwanDevice, protocolId, externalId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lpwanDevice = device.c8y_LpwanDevice;
                            if (!lpwanDevice.typeExternalId) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.identityService.detail(lpwanDevice.typeExternalId)];
                        case 1:
                            externalId = (_a.sent()).data;
                            protocolId = externalId.managedObject.id;
                            _a.label = 2;
                        case 2:
                            if (!protocolId && lpwanDevice.type) {
                                protocolId = lpwanDevice.type.split('/')[2];
                            }
                            if (!protocolId) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, this.inventoryService.detail(protocolId)];
                        case 3: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            });
        };
        LpwanSetDeviceProtocolService.prototype.applyProtocol = function (device, selectedProtocol) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, protocolExternalId, externalId, type;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.identityService.list(selectedProtocol.id)];
                        case 1:
                            _a = __read.apply(void 0, [(_b.sent()).data, 1]), protocolExternalId = _a[0];
                            externalId = protocolExternalId.externalId, type = protocolExternalId.type;
                            device.c8y_LpwanDevice.typeExternalId = { externalId: externalId, type: type };
                            device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
                            device.type = selectedProtocol.name;
                            return [2 /*return*/, this.inventoryService.update(device)];
                    }
                });
            });
        };
        LpwanSetDeviceProtocolService.prototype.getAvailableProtocols = function (device) {
            return __awaiter(this, void 0, void 0, function () {
                var query;
                return __generator(this, function (_a) {
                    query = {
                        __filter: {
                            type: { __in: this.getProtocolTypesMatchingDevice(device) }
                        },
                        __orderby: [{ name: 1 }]
                    };
                    return [2 /*return*/, this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 })];
                });
            });
        };
        LpwanSetDeviceProtocolService.prototype.getAvailableConnections = function (device) {
            return __awaiter(this, void 0, void 0, function () {
                var list, matchingCfg, response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            matchingCfg = this.supportedDevicesCfgs.find(function (_a) {
                                var match = _a.match;
                                return match(device);
                            });
                            return [4 /*yield*/, this.lnsService.list(matchingCfg.connectionType)];
                        case 1:
                            response = _a.sent();
                            if (!(response && response.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, response.json()];
                        case 2:
                            list = _a.sent();
                            list = lodashEs.orderBy(list, ['name'], ['asc']);
                            return [2 /*return*/, { res: response, data: list }];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        LpwanSetDeviceProtocolService.prototype.getProtocolTypesMatchingDevice = function (device) {
            var matchingCfg = this.supportedDevicesCfgs.find(function (_a) {
                var match = _a.match;
                return match(device);
            });
            return matchingCfg ? matchingCfg.protocolTypes : [];
        };
        LpwanSetDeviceProtocolService.prototype.getExternalId = function (device) {
            return __awaiter(this, void 0, void 0, function () {
                var matchingCfg, externalIds, externalId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            matchingCfg = this.supportedDevicesCfgs.find(function (_a) {
                                var match = _a.match;
                                return match(device);
                            });
                            return [4 /*yield*/, this.identityService.list(device.id)];
                        case 1:
                            externalIds = (_a.sent()).data;
                            externalId = externalIds.find(function (_a) {
                                var type = _a.type;
                                return matchingCfg.externalIdTypes.includes(type);
                            });
                            return [2 /*return*/, externalId ? externalId.externalId : null];
                    }
                });
            });
        };
        return LpwanSetDeviceProtocolService;
    }());
    LpwanSetDeviceProtocolService.decorators = [
        { type: i0.Injectable }
    ];
    LpwanSetDeviceProtocolService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: client.FetchClient },
        { type: client.IdentityService },
        { type: MultipleLnsConnectorService }
    ]; };

    var LpwanAssignDeviceProtocolComponent = /** @class */ (function () {
        function LpwanAssignDeviceProtocolComponent(lpwanService, alertService, router, inventoryService) {
            this.lpwanService = lpwanService;
            this.alertService = alertService;
            this.router = router;
            this.inventoryService = inventoryService;
            this.filterProtocols = rxjs.pipe();
            this.pattern = '';
        }
        LpwanAssignDeviceProtocolComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.reload()];
                        case 1:
                            _a.sent();
                            this.setPipe('');
                            return [2 /*return*/];
                    }
                });
            });
        };
        LpwanAssignDeviceProtocolComponent.prototype.setPipe = function (filterStr) {
            var _this = this;
            this.pattern = filterStr;
            this.filterProtocols = rxjs.pipe(operators.map(function (protocols) { return protocols.filter(function (protocol) { return (!_this.currentProtocol || _this.currentProtocol.id !== protocol.id) &&
                (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1); }); }));
        };
        LpwanAssignDeviceProtocolComponent.prototype.reload = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, ex_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.loading = true;
                            this.newProtocol = null;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 5, 6, 7]);
                            return [4 /*yield*/, this.loadDevice()];
                        case 2:
                            _c.sent();
                            _a = this;
                            return [4 /*yield*/, this.lpwanService.getAvailableProtocols(this.device)];
                        case 3:
                            _a.availableProtocols = _c.sent();
                            _b = this;
                            return [4 /*yield*/, this.lpwanService.getCurrentProtocol(this.device)];
                        case 4:
                            _b.currentProtocol = _c.sent();
                            return [3 /*break*/, 7];
                        case 5:
                            ex_1 = _c.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 7];
                        case 6:
                            this.loading = false;
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        LpwanAssignDeviceProtocolComponent.prototype.loadDevice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var deviceId, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            deviceId = this.router.routerState.snapshot.url.match(/\d+/)[0];
                            return [4 /*yield*/, this.inventoryService.detail(deviceId)];
                        case 1:
                            data = (_a.sent()).data;
                            this.device = data;
                            return [2 /*return*/];
                    }
                });
            });
        };
        LpwanAssignDeviceProtocolComponent.prototype.apply = function (selectedProtocol) {
            return __awaiter(this, void 0, void 0, function () {
                var moUpdated, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.lpwanService.applyProtocol(this.device, selectedProtocol)];
                        case 1:
                            moUpdated = (_a.sent())
                                .res.status === 200;
                            return [4 /*yield*/, this.reload()];
                        case 2:
                            _a.sent();
                            this.alertService.success(i2.gettext('Device protocol set.'));
                            this.lpwanSetDeviceProtocolForm.reset('dirty');
                            if (moUpdated) {
                                this.refreshCache();
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            ex_2 = _a.sent();
                            this.alertService.danger(i2.gettext('Could not set device protocol.'));
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        LpwanAssignDeviceProtocolComponent.prototype.refreshCache = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.lpwanService.refreshCache(this.device)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_3 = _a.sent();
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return LpwanAssignDeviceProtocolComponent;
    }());
    LpwanAssignDeviceProtocolComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'set-device-protocol',
                    template: "<form #lpwanSetDeviceProtocolForm=\"ngForm\">\n  <div class=\"row\">\n    <div class=\"col-md-9\">\n      <div class=\"card card--fullpage\">\n        <div class=\"card-header separator\">\n          <h4 class=\"card-title\">\n            {{ 'LPWAN configuration' | translate }}\n          </h4>\n        </div>\n\n        <div class=\"card-block p-t-24 p-b-8 overflow-visible\">\n          <div *ngIf=\"loading\">\n            <c8y-loading></c8y-loading>\n          </div>\n\n          <div *ngIf=\"!loading\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label translate>Current device protocol</label>\n                <p class=\"form-control-static\" *ngIf=\"!currentProtocol\">\n                  {{ device.type }}\n                </p>\n                <p\n                  class=\"form-control-static text-truncate\"\n                  *ngIf=\"currentProtocol\"\n                  [title]=\"currentProtocol.name\"\n                >\n                  {{ currentProtocol.name }}\n                </p>\n              </div>\n              <c8y-form-group>\n                <c8y-typeahead\n                  [(ngModel)]=\"newProtocol\"\n                  placeholder=\"{{ 'Select new device protocol' | translate }}\"\n                  (onSearch)=\"setPipe($event)\"\n                  name=\"newProtocol\"\n                  [allowFreeEntries]=\"false\"\n                >\n                  <c8y-li\n                    *c8yFor=\"\n                      let protocol of availableProtocols;\n                      loadMore: 'hidden';\n                      pipe: filterProtocols\n                    \"\n                    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                    (click)=\"newProtocol = protocol; setPipe('')\"\n                  >\n                    <c8y-highlight [text]=\"protocol.name\" [pattern]=\"pattern\"></c8y-highlight>\n                  </c8y-li>\n                </c8y-typeahead>\n                <c8y-messages>\n                  <c8y-message\n                    name=\"notExisting\"\n                    [text]=\"'Select one of the protocols.' | translate\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n            <set-lns-connections\n              *ngIf=\"device.c8y_LpwanDevice.serviceProvider != 'Loriot'\"\n              [device]=\"device\"\n            ></set-lns-connections>\n          </div>\n        </div>\n\n        <div class=\"card-footer separator\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            class=\"btn btn-primary\"\n            (click)=\"apply(newProtocol)\"\n            [disabled]=\"!newProtocol\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n\u200C\n"
                },] }
    ];
    LpwanAssignDeviceProtocolComponent.ctorParameters = function () { return [
        { type: LpwanSetDeviceProtocolService },
        { type: i2.AlertService },
        { type: router.Router },
        { type: client.InventoryService }
    ]; };
    LpwanAssignDeviceProtocolComponent.propDecorators = {
        lpwanSetDeviceProtocolForm: [{ type: i0.ViewChild, args: ['lpwanSetDeviceProtocolForm', { static: false },] }]
    };

    var LpwanAgentGuard = /** @class */ (function () {
        function LpwanAgentGuard(lpwanService) {
            this.lpwanService = lpwanService;
        }
        LpwanAgentGuard.prototype.canActivate = function (route) {
            var device = route.data.contextData || route.parent.data.contextData;
            return this.lpwanService.isSupportedDevice(device);
        };
        return LpwanAgentGuard;
    }());
    LpwanAgentGuard.decorators = [
        { type: i0.Injectable }
    ];
    LpwanAgentGuard.ctorParameters = function () { return [
        { type: LpwanSetDeviceProtocolService }
    ]; };

    var LpwanAssignLnsConnectionsComponent = /** @class */ (function () {
        function LpwanAssignLnsConnectionsComponent(lpwanService, alertService) {
            var _this = this;
            this.lpwanService = lpwanService;
            this.alertService = alertService;
            this.buttons = [
                { label: i2.gettext('Cancel'), action: function () { return Promise.reject(); } },
                { label: i2.gettext('Re-register'), action: function () { return _this.deviceReregister(); }, status: 'default' }
            ];
            this.reRegisterMsg = i2.gettext('To change provider connection, you need to re-register device first.');
            this.filterConnection = rxjs.pipe();
            this.pattern = '';
        }
        LpwanAssignLnsConnectionsComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.reload()];
                        case 1:
                            _a.sent();
                            this.setConnectionPipe('');
                            return [2 /*return*/];
                    }
                });
            });
        };
        LpwanAssignLnsConnectionsComponent.prototype.setConnectionPipe = function (filterStr) {
            var _this = this;
            this.pattern = filterStr;
            this.filterConnection = rxjs.pipe(operators.map(function (connections) { return connections.filter(function (connection) { return (!_this.currentConnection || _this.currentConnection.name !== connection.name) &&
                (!filterStr || connection.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1); }); }));
        };
        LpwanAssignLnsConnectionsComponent.prototype.reload = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.loading = true;
                            this.newConnection = null;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            _a = this;
                            return [4 /*yield*/, this.lpwanService.getAvailableConnections(this.device)];
                        case 2:
                            _a.availableConnections = _b.sent();
                            this.currentConnection = lodashEs.find(this.availableConnections.data, {
                                name: this.device.c8y_LpwanDevice.lnsConnectionName
                            });
                            return [3 /*break*/, 5];
                        case 3:
                            ex_1 = _b.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 5];
                        case 4:
                            this.loading = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        LpwanAssignLnsConnectionsComponent.prototype.togglePopover = function (popoverCfrm) {
            popoverCfrm.show();
            this.setConnectionPipe('');
        };
        LpwanAssignLnsConnectionsComponent.prototype.deviceReregister = function () {
            return new Promise(function (resolve, reject) {
                window.location.href = "#/deviceregistration";
                resolve(true);
            });
        };
        return LpwanAssignLnsConnectionsComponent;
    }());
    LpwanAssignLnsConnectionsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'set-lns-connections',
                    template: "<div class=\"col-md-6\">\n  <div class=\"form-group\">\n    <label translate>Current connection</label>\n    <p class=\"form-control-static\" *ngIf=\"!currentConnection\">\n      {{ 'Connection is not set. Select connection for this device' | translate }}\n    </p>\n    <p class=\"form-control-static  text-truncate\" *ngIf=\"currentConnection\" title=\"{{ currentConnection.name }}\">\n      {{ currentConnection.name }}\n    </p>\n  </div>\n\n  <c8y-form-group>\n    <c8y-popover-confirm\n      outsideClick=\"true\"\n      containerClass=\"lns-connection-popover\"\n      [message]=\"reRegisterMsg\"\n      [buttons]=\"buttons\"\n      [placement]=\"'bottom'\"\n    ></c8y-popover-confirm>\n    <c8y-typeahead\n      *ngIf=\"!loading\"\n      [(ngModel)]=\"newConnection\"\n      placeholder=\"{{ 'Select new connection' | translate }}\"\n      name=\"newConnection\"\n      (onSearch)=\"setConnectionPipe($event)\"\n      [allowFreeEntries]=\"false\"\n    >\n      <c8y-li\n        *c8yFor=\"let connection of availableConnections; loadMore: 'hidden'; pipe: filterConnection\"\n        class=\"p-l-8 p-r-8 c8y-list__item--link\"\n        (click)=\"togglePopover(popoverConfirm)\"\n      >\n        <c8y-highlight [text]=\"connection.name\" [pattern]=\"pattern\"></c8y-highlight>\n      </c8y-li>\n    </c8y-typeahead>\n    <c8y-messages\n      ><c8y-message\n        name=\"notExisting\"\n        [text]=\"'Select one of the connections.' | translate\"\n      ></c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n</div>\n"
                },] }
    ];
    LpwanAssignLnsConnectionsComponent.ctorParameters = function () { return [
        { type: LpwanSetDeviceProtocolService },
        { type: i2.AlertService }
    ]; };
    LpwanAssignLnsConnectionsComponent.propDecorators = {
        device: [{ type: i0.Input }],
        popoverConfirm: [{ type: i0.ViewChild, args: [i2.PopoverConfirmComponent, { static: true },] }]
    };

    var routes = [
        {
            context: i2.ViewContext.Device,
            path: 'assign-protocol',
            component: LpwanAssignDeviceProtocolComponent,
            label: i2.gettext('LPWAN'),
            icon: 'c8y-device-protocols',
            canActivate: [LpwanAgentGuard]
        }
    ];
    var ɵ0 = routes;
    var LpwanProtocolModule = /** @class */ (function () {
        function LpwanProtocolModule() {
        }
        return LpwanProtocolModule;
    }());
    LpwanProtocolModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        LpwanAssignDeviceProtocolComponent,
                        LpwanAssignLnsConnectionsComponent
                    ],
                    imports: [
                        i2.CoreModule,
                        i2.FormsModule
                    ],
                    entryComponents: [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent],
                    providers: [
                        LpwanAgentGuard,
                        LpwanSetDeviceProtocolService,
                        {
                            provide: i2.HOOK_ROUTE,
                            useValue: ɵ0,
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LpwanAssignDeviceProtocolComponent = LpwanAssignDeviceProtocolComponent;
    exports.LpwanProtocolModule = LpwanProtocolModule;
    exports.MultipleLnsConnectorsModule = MultipleLnsConnectorsModule;
    exports["ɵ0"] = ɵ0;
    exports["ɵa"] = LpwanSetDeviceProtocolService;
    exports["ɵb"] = MultipleLnsConnectorService;
    exports["ɵc"] = LpwanAssignLnsConnectionsComponent;
    exports["ɵd"] = LpwanAgentGuard;
    exports["ɵe"] = SigfoxMultipleLnsConnectorComponent;
    exports["ɵf"] = MultipleLnsConnectorService;
    exports["ɵg"] = NoConnectionsFoundComponent;
    exports["ɵh"] = ActilityMultipleLnsConnectorComponent;
    exports["ɵi"] = ConnectionInfoWithDownloadCsvComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-protocol-lpwan.umd.js.map
