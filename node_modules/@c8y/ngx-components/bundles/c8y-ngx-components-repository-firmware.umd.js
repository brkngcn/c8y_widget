(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@c8y/client'), require('@c8y/ngx-components'), require('@c8y/ngx-components/repository/shared'), require('lodash-es'), require('ngx-bootstrap/modal'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@c8y/ngx-components/operations/operation-details'), require('@ngx-translate/core'), require('ngx-bootstrap/popover')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/repository/firmware', ['exports', '@angular/core', '@angular/router', '@c8y/client', '@c8y/ngx-components', '@c8y/ngx-components/repository/shared', 'lodash-es', 'ngx-bootstrap/modal', 'rxjs', 'rxjs/operators', '@angular/common', '@c8y/ngx-components/operations/operation-details', '@ngx-translate/core', 'ngx-bootstrap/popover'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].repository = global.c8y["ngx-components"].repository || {}, global.c8y["ngx-components"].repository.firmware = {}), global.ng.core, global.ng.router, global.client, global.c8y["ngx-components"], global.c8y["ngx-components"].repository.shared, global.lodashEs, global.modal, global.rxjs, global.rxjs.operators, global.ng.common, global.c8y["ngx-components"].operations["operation-details"], global.core$1, global.popover));
})(this, (function (exports, core, router, client, ngxComponents, shared, lodashEs, modal, rxjs, operators, common, operationDetails, core$1, popover) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var FirmwareDeviceTabComponent = /** @class */ (function () {
        function FirmwareDeviceTabComponent(route, repository, inventory, bsModal) {
            var _this = this;
            this.route = route;
            this.repository = repository;
            this.inventory = inventory;
            this.bsModal = bsModal;
            this.isEmpty = lodashEs.isEmpty;
            this.reloading = false;
            this.device$ = new rxjs.BehaviorSubject(this.route.parent.snapshot.data.contextData);
            this.deviceFirmwareFragment$ = this.device$.pipe(operators.map(function (device) { return device.c8y_Firmware; }));
            this.firmwareBinary$ = this.deviceFirmwareFragment$.pipe(operators.filter(function (deviceFirmwareFragment) { return !lodashEs.isEmpty(deviceFirmwareFragment); }), operators.switchMap(function (deviceFirmwareFragment) { return rxjs.from(_this.repository.getRepositoryBinaryMoByVersion(deviceFirmwareFragment, shared.RepositoryType.FIRMWARE)); }), operators.shareReplay(1));
            this.repositoryEntry$ = this.firmwareBinary$.pipe(operators.switchMap(function (mo) { return _this.repository.getRepositoryEntryMO$(mo); }), operators.shareReplay(1));
            this.patches$ = rxjs.combineLatest(this.firmwareBinary$, this.repositoryEntry$).pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 2), firmwareBinary = _b[0], repositoryEntry = _b[1];
                if (repositoryEntry && firmwareBinary) {
                    var version = _this.repository.getBaseVersionFromMO(firmwareBinary);
                    return rxjs.from(_this.repository.listPatchVersions(repositoryEntry, version)).pipe(operators.map(function (_a) {
                        var data = _a.data;
                        return data;
                    }));
                }
                else {
                    return rxjs.of([]);
                }
            }), operators.shareReplay(1));
            this.supportsFirmwareOperations$ = this.device$.pipe(operators.map(function (device) { return lodashEs.get(device, 'c8y_SupportedOperations', []).indexOf('c8y_Firmware') > -1; }));
            this.changesOperation$ = new rxjs.BehaviorSubject(null);
            this.changesInProgress$ = this.changesOperation$.pipe(operators.map(function (operation) { return _this.isInProgress(operation); }));
        }
        FirmwareDeviceTabComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: 
                        // TODO check route snapshot, why is not refreshing device.
                        // Scenario: missing deviceFirmwareFragment => install new version => switch tabs.
                        // Expected: device should be set.
                        return [4 /*yield*/, this.loadDevice()];
                        case 1:
                            // TODO check route snapshot, why is not refreshing device.
                            // Scenario: missing deviceFirmwareFragment => install new version => switch tabs.
                            // Expected: device should be set.
                            _a.sent();
                            return [4 /*yield*/, this.loadOperation()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        FirmwareDeviceTabComponent.prototype.installFirmware = function () {
            var _this = this;
            var initialState = {
                repositoryEntriesWithVersions$: rxjs.of([]),
                repositoryEntriesWithVersionsFn$: function (modal) { return _this.getRepositoryEntriesWithVersions$(modal.content.searchTerm); },
                repositoryType: shared.RepositoryType.FIRMWARE,
                title: ngxComponents.gettext('Install firmware'),
                subTitle: ngxComponents.gettext('Available firmwares matching the device type'),
                icon: 'c8y-firmware',
                mode: ngxComponents.ModalSelectionMode.SINGLE,
                labels: { ok: ngxComponents.gettext('Install') },
                disableSelected: false
            };
            this.deviceFirmwareFragment$
                .pipe(operators.take(1), operators.switchMap(function (deviceFirmwareFragment) {
                if (deviceFirmwareFragment) {
                    var name = deviceFirmwareFragment.name, version = deviceFirmwareFragment.version;
                    var selected = [{ name: name, version: version }];
                    lodashEs.assign(initialState, { selected: selected });
                }
                var modal = _this.bsModal.show(shared.RepositorySelectModalComponent, {
                    ignoreBackdropClick: true,
                    initialState: initialState
                });
                if (initialState.repositoryEntriesWithVersionsFn$) {
                    modal.content.repositoryEntriesWithVersions$ =
                        initialState.repositoryEntriesWithVersionsFn$(modal);
                }
                modal.content.load.next();
                return modal.content.resultEmitter;
            }))
                .subscribe(function (_a) {
                var _b = __read(_a, 1), selectedFirmware = _b[0];
                _this.handleOperation(selectedFirmware);
            });
        };
        FirmwareDeviceTabComponent.prototype.getRepositoryEntriesWithVersions$ = function (searchTerm$) {
            var _this = this;
            return searchTerm$.pipe(operators.distinctUntilChanged(), operators.switchMap(function (searchTerm) { return _this.repository.listRepositoryEntries(shared.RepositoryType.FIRMWARE, {
                query: _this.repository.getDeviceTypeQuery(shared.RepositoryType.FIRMWARE, _this.device$.value),
                partialName: searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.name,
                params: { pageSize: 100 }
            }); }), operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.map(function (mos) { return _this.getAndAssignRepositoryBinaries(mos); }), operators.shareReplay(1));
        };
        FirmwareDeviceTabComponent.prototype.getAndAssignRepositoryBinaries = function (mos) {
            var _this = this;
            mos.forEach(function (mo) {
                mo.versions = _this.repository.listBaseVersions(mo);
            });
            return mos;
        };
        FirmwareDeviceTabComponent.prototype.addPatch = function () {
            var _this = this;
            var initialState = {
                repositoryType: shared.RepositoryType.FIRMWARE,
                repositoryEntriesWithVersions$: this.getRepositoryEntryWithPatches$(),
                title: ngxComponents.gettext('Install firmware'),
                subTitle: ngxComponents.gettext('Available firmwares matching the device type'),
                icon: 'c8y-firmware',
                mode: ngxComponents.ModalSelectionMode.SINGLE,
                labels: { ok: ngxComponents.gettext('Install') },
                disableSelected: false
            };
            this.deviceFirmwareFragment$
                .pipe(operators.take(1), operators.switchMap(function (deviceFirmwareFragment) {
                if (deviceFirmwareFragment) {
                    var name = deviceFirmwareFragment.name, version = deviceFirmwareFragment.version;
                    var selected = [{ name: name, version: version }];
                    lodashEs.assign(initialState, { selected: selected });
                }
                var modal = _this.bsModal.show(shared.RepositorySelectModalComponent, {
                    ignoreBackdropClick: true,
                    initialState: initialState
                });
                modal.content.load.next();
                return modal.content.resultEmitter;
            }))
                .subscribe(function (_a) {
                var _b = __read(_a, 1), selectedOption = _b[0];
                _this.handleOperation(selectedOption);
            });
        };
        FirmwareDeviceTabComponent.prototype.getRepositoryEntryWithPatches$ = function () {
            return rxjs.combineLatest(this.repositoryEntry$, this.patches$).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), repositoryEntry = _b[0], patches = _b[1];
                return [Object.assign(Object.assign({}, repositoryEntry), { versions: patches })];
            }));
        };
        FirmwareDeviceTabComponent.prototype.loadDevice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var deviceId, device;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.reloading = true;
                            deviceId = this.device$.value.id;
                            return [4 /*yield*/, this.inventory.detail(deviceId, { withChildren: false })];
                        case 1:
                            device = (_a.sent()).data;
                            this.device$.next(device);
                            this.reloading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        FirmwareDeviceTabComponent.prototype.handleOperation = function (selectedFirmware) {
            return __awaiter(this, void 0, void 0, function () {
                var operation;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repository.createFirmwareUpdateOperation(this.device$.value, selectedFirmware)];
                        case 1:
                            operation = _a.sent();
                            this.trackOperation(operation);
                            return [2 /*return*/];
                    }
                });
            });
        };
        FirmwareDeviceTabComponent.prototype.loadOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var deviceId, operation;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            deviceId = this.device$.value.id;
                            return [4 /*yield*/, this.repository.getLastFirmwareUpdateOperation(deviceId)];
                        case 1:
                            operation = _a.sent();
                            this.trackOperation(operation);
                            return [2 /*return*/];
                    }
                });
            });
        };
        FirmwareDeviceTabComponent.prototype.trackOperation = function (operation) {
            var _this = this;
            this.changesOperation$.next(operation);
            if (this.isInProgress(operation)) {
                this.repository.observeOperation(operation).subscribe(function (operationUpdate) {
                    _this.changesOperation$.next(operationUpdate);
                    if (operationUpdate.status === client.OperationStatus.SUCCESSFUL) {
                        _this.loadDevice();
                    }
                }, function (operationUpdate) {
                    _this.changesOperation$.next(operationUpdate);
                });
            }
        };
        FirmwareDeviceTabComponent.prototype.isInProgress = function (operation) {
            return (operation && [client.OperationStatus.PENDING, client.OperationStatus.EXECUTING].includes(operation.status));
        };
        return FirmwareDeviceTabComponent;
    }());
    FirmwareDeviceTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-firmware-device-tab',
                    template: "<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Current firmware</h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <fieldset *ngIf=\"changesOperation$ | async\" class=\"card-block bg-gray-white\">\n          <c8y-operation-details [operation]=\"changesOperation$ | async\"></c8y-operation-details>\n        </fieldset>\n        <div class=\"card-block p-t-0 p-b-0\">\n          <!-- EMPTY STATE -->\n          <ng-container *ngIf=\"isEmpty(deviceFirmwareFragment$ | async); else firmwareBlock\">\n            <div class=\"c8y-empty-state text-center\">\n              <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n              <p>\n                <strong translate>No firmware installed.</strong> <br />\n                <small translate>Click below to install firmware into this device.</small>\n              </p>\n            </div>\n          </ng-container>\n\n          <!-- FIRMWARE -->\n          <ng-template #firmwareBlock>\n            <c8y-list-group class=\"no-border-last\">\n              <c8y-li>\n                <c8y-li-icon>\n                  <i c8yIcon=\"c8y-firmware\"></i>\n                </c8y-li-icon>\n\n                <c8y-li-body *ngIf=\"deviceFirmwareFragment$ | async as deviceFirmwareFragment\">\n                  <!-- Firmware title -->\n                  <p class=\"m-b-16 text-medium\">\n                    {{ deviceFirmwareFragment.name }}\n                  </p>\n                  <!-- Firmware description -->\n                  <div *ngIf=\"repositoryEntry$ | async as repositoryEntry\">\n                    <p class=\"text-label-small\" translate>Description</p>\n                    <p>\n                      {{ repositoryEntry.description }}\n                    </p>\n                  </div>\n\n                  <!-- BASE/PATCH VERSION -->\n                  <div class=\"m-b-16\">\n                    <p class=\"text-label-small\" translate>Version</p>\n                    <p *ngIf=\"deviceFirmwareFragment.version; else versionNotSpecified\">\n                      {{ deviceFirmwareFragment.version }}\n                    </p>\n                    <ng-template #versionNotSpecified>\n                      <p>\n                        <em class=\"text-muted\"> ({{ 'not specified`version`' | translate }}) </em>\n                      </p>\n                    </ng-template>\n                  </div>\n\n                  <!-- ADD PATCH -->\n                  <button\n                    *ngIf=\"\n                      (supportsFirmwareOperations$ | async) && (this.patches$ | async)?.length > 0\n                    \"\n                    (click)=\"addPatch()\"\n                    class=\"btn btn-xs btn-primary\"\n                    [disabled]=\"changesInProgress$ | async\"\n                    title=\"{{ 'Patches available' | translate }}\"\n                  >\n                    {{ 'Patches available' | translate }}\n                  </button>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </ng-template>\n        </div>\n      </div>\n      <div *ngIf=\"supportsFirmwareOperations$ | async\" class=\"card-footer separator-top\">\n        <!-- INSTALL FIRMWARE -->\n        <button\n          *ngIf=\"isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          title=\"{{ 'Install firmware' | translate }}\"\n        >\n          {{ 'Install firmware' | translate }}\n        </button>\n\n        <!-- REPLACE FIRMWARE -->\n        <button\n          *ngIf=\"!isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          [disabled]=\"changesInProgress$ | async\"\n          title=\"{{ 'Replace firmware' | translate }}\"\n        >\n          {{ 'Replace firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    FirmwareDeviceTabComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: shared.RepositoryService },
        { type: client.InventoryService },
        { type: modal.BsModalService }
    ]; };

    var FIRMWARE_FRAGMENT = 'c8y_Firmware';
    var SUPPORTED_OPERATIONS_FRAGMENT = 'c8y_SupportedOperations';
    var FirmwareDeviceTabGuard = /** @class */ (function () {
        function FirmwareDeviceTabGuard() {
        }
        FirmwareDeviceTabGuard.prototype.canActivate = function (route) {
            var contextData = lodashEs.get(route, 'data.contextData') || lodashEs.get(route, 'parent.data.contextData');
            var supportedOperations = lodashEs.get(contextData, SUPPORTED_OPERATIONS_FRAGMENT);
            return ((!!supportedOperations ? lodashEs.indexOf(supportedOperations, FIRMWARE_FRAGMENT) >= 0 : false) ||
                lodashEs.has(contextData, 'c8y_Firmware'));
        };
        return FirmwareDeviceTabGuard;
    }());
    FirmwareDeviceTabGuard.decorators = [
        { type: core.Injectable }
    ];

    var FirmwareRepositoryDeviceTabModule = /** @class */ (function () {
        function FirmwareRepositoryDeviceTabModule() {
        }
        FirmwareRepositoryDeviceTabModule.forRoot = function () {
            return {
                ngModule: FirmwareRepositoryDeviceTabModule,
                providers: [
                    FirmwareDeviceTabGuard,
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: [
                            {
                                context: ngxComponents.ViewContext.Device,
                                path: 'firmware',
                                component: FirmwareDeviceTabComponent,
                                label: ngxComponents.gettext('Firmware'),
                                icon: 'c8y-firmware',
                                priority: 500,
                                canActivate: [FirmwareDeviceTabGuard]
                            }
                        ],
                        multi: true
                    }
                ]
            };
        };
        return FirmwareRepositoryDeviceTabModule;
    }());
    FirmwareRepositoryDeviceTabModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, ngxComponents.CoreModule, shared.SharedRepositoryModule, operationDetails.OperationDetailsModule],
                    declarations: [FirmwareDeviceTabComponent],
                    entryComponents: [FirmwareDeviceTabComponent]
                },] }
    ];

    var AddFirmwarePatchModalComponent = /** @class */ (function () {
        function AddFirmwarePatchModalComponent(modal, repository, alert) {
            var _this = this;
            this.modal = modal;
            this.repository = repository;
            this.alert = alert;
            this.saved = new core.EventEmitter();
            this.textForFirmwareUrlPopover = ngxComponents.gettext("Path for binaries can vary depending on device agent implementation, for example:\n    /firmware/binaries/firmware1.bin\n    https://firmware/binary/123\n    ftp://firmware/binary/123.tar.gz\n  ");
            this.model = {
                selected: undefined,
                dependency: null,
                patchVersion: undefined,
                binary: {
                    file: undefined,
                    url: undefined
                }
            };
            this.firmwareInput$ = new rxjs.BehaviorSubject('');
            this.firmwares$ = this.firmwareInput$.pipe(operators.debounceTime(300), operators.distinctUntilChanged(), operators.switchMap(function (searchStr) { return rxjs.from(_this.repository.listRepositoryEntries(shared.RepositoryType.FIRMWARE, {
                partialName: searchStr,
                skipLegacy: true
            })); }), operators.shareReplay(1));
            this.firmwareSelected$ = new rxjs.BehaviorSubject(null);
            this.patchDependencyInput$ = new rxjs.BehaviorSubject('');
            this.saving = false;
            this.firmwarePreselected = false;
            this.baseVersions$ = rxjs.merge(this.firmwareInput$.pipe(operators.tap(function () {
                _this.model.dependency = null;
                if (_this.form) {
                    _this.form.form.get('patchDependency').reset();
                }
            }), operators.switchMap(function () { return rxjs.of(null); })), this.firmwareSelected$).pipe(operators.switchMap(function (selectedFirmware) { return selectedFirmware ? _this.repository.listBaseVersions(selectedFirmware) : rxjs.of(null); }), operators.shareReplay(1));
            this.baseVersionsFilterPipe = rxjs.pipe(operators.switchMap(function (data) { return _this.patchDependencyInput$.pipe(operators.map(function (partialVersion) { return data.filter(function (mo) {
                var version = mo.c8y_Firmware.version.toLowerCase();
                return (partialVersion.length === 0 || version.indexOf(partialVersion.toLowerCase()) > -1);
            }); })); }));
        }
        AddFirmwarePatchModalComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.setInitialState();
                    return [2 /*return*/];
                });
            });
        };
        AddFirmwarePatchModalComponent.prototype.setInitialState = function () {
            if (this.model.selected) {
                this.firmwarePreselected = true;
                this.firmwareSelected$.next(this.model.selected);
            }
        };
        AddFirmwarePatchModalComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.saving = true;
                    this.repository
                        .create(this.model, shared.RepositoryType.FIRMWARE)
                        .then(function (savedFirmware) {
                        _this.successMsg();
                        _this.saving = false;
                        _this.saved.next(savedFirmware);
                        _this.cancel();
                    })
                        .catch(function (e) {
                        _this.saving = false;
                        _this.saved.error(e);
                        _this.cancel();
                    });
                    return [2 /*return*/];
                });
            });
        };
        AddFirmwarePatchModalComponent.prototype.successMsg = function () {
            var msg = ngxComponents.gettext('Firmware patch added.');
            this.alert.success(msg);
        };
        AddFirmwarePatchModalComponent.prototype.cancel = function () {
            this.modal.hide();
            this.saved.complete();
        };
        AddFirmwarePatchModalComponent.prototype.onFile = function (dropped) {
            if (!lodashEs.isUndefined(dropped.url)) {
                this.model.binary = {
                    url: dropped.url
                };
                return;
            }
            else if (dropped.droppedFiles) {
                this.model.binary = {
                    file: dropped.droppedFiles[0].file
                };
                return;
            }
            else {
                this.model.binary = {
                    file: undefined,
                    url: undefined
                };
            }
        };
        return AddFirmwarePatchModalComponent;
    }());
    AddFirmwarePatchModalComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-firmware-patch-modal.component',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-firmware'\"></i>\n    <h4 translate>\n      Add firmware patch\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\">\n    <p class=\"lead m-0\" translate>\n      Select a firmware version\n    </p>\n  </div>\n\n  <form\n    class=\"d-contents\"\n    autocomplete=\"off\"\n    #firmwarePatchForm=\"ngForm\"\n    (ngSubmit)=\"firmwarePatchForm.form.valid && save()\">\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"firmwarePreselected\">\n          <c8y-form-group>\n            <label for=\"firmwareName\" translate>Firmware</label>\n            <c8y-typeahead\n              [ngModel]=\"model.selected\"\n              name=\"firmwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"firmwareInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"let firmware of firmwares$ | async; loadMore: 'auto'\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"model.selected = firmware; firmwareSelected$.next(firmware)\"\n                [active]=\"model.selected === firmware\"\n              >\n                <c8y-highlight\n                  [text]=\"firmware.name || '--'\"\n                  [pattern]=\"firmwareInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"'Select one of the existing firmwares.' | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"patchDependency\" class=\"m-r-8\" translate>Version</label>\n          <c8y-typeahead\n            [ngModel]=\"model.dependency\"\n            name=\"patchDependency\"\n            placeholder=\"{{ 'Select or enter' | translate }}\"\n            (onSearch)=\"patchDependencyInput$.next($event)\"\n            [displayProperty]=\"'c8y_Firmware.version'\"\n            [allowFreeEntries]=\"false\"\n            [disabled]=\"\n              (baseVersions$ | async) === null || (baseVersions$ | async)?.data.length === 0\n            \"\n            [required]=\"true\"\n          >\n            <c8y-li\n              *c8yFor=\"\n                let baseVersion of baseVersions$;\n                loadMore: 'auto';\n                pipe: baseVersionsFilterPipe\n              \"\n              class=\"p-l-8 p-r-8 c8y-list__item--link\"\n              (click)=\"model.dependency = baseVersion\"\n              [active]=\"model.dependency === baseVersion\"\n            >\n              <c8y-highlight\n                [text]=\"baseVersion.c8y_Firmware.version || '--'\"\n                [pattern]=\"patchDependencyInput$ | async\"\n              ></c8y-highlight>\n            </c8y-li>\n          </c8y-typeahead>\n          <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing versions.' | translate\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label for=\"patchVersion\" translate>Patch</label>\n          <input\n            id=\"patchVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"patchVersion\"\n            [(ngModel)]=\"model.patchVersion\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            required\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block m-t-40\" translate>Patch file</div>\n          <c8y-file-picker [maxAllowedFiles]=\"1\" (onFilesPicked)=\"onFile($event)\" [fileUrlPopover]=\"textForFirmwareUrlPopover\">\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n      <button\n        title=\"{{ 'Add firmware patch' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !firmwarePatchForm.form.valid ||\n          firmwarePatchForm.form.pristine ||\n          (!model.binary?.url && !model.binary?.file) ||\n          saving\n        \"\n        translate\n      >\n        Add firmware patch\n      </button>\n    </div>\n  </form>\n</div>\n"
                },] }
    ];
    AddFirmwarePatchModalComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: shared.RepositoryService },
        { type: ngxComponents.AlertService }
    ]; };
    AddFirmwarePatchModalComponent.propDecorators = {
        saved: [{ type: core.Output }],
        dropdown: [{ type: core.ViewChild, args: ['dropdown', { static: false },] }],
        form: [{ type: core.ViewChild, args: ['firmwarePatchForm', { static: false },] }]
    };

    var AddFirmwareModalComponent = /** @class */ (function () {
        function AddFirmwareModalComponent(modal, repositoryService, alert) {
            this.modal = modal;
            this.repositoryService = repositoryService;
            this.alert = alert;
            this.saved = new core.EventEmitter();
            this.onInput = new rxjs.BehaviorSubject('');
            this.model = {
                selected: undefined,
                version: undefined,
                description: undefined,
                deviceType: undefined,
                binary: {
                    file: undefined,
                    url: undefined
                }
            };
            this.saving = false;
            this.firmwarePreselected = false;
            this.textForFirmwareUrlPopover = ngxComponents.gettext("Path for binaries can vary depending on device agent implementation, for example:\n    /firmware/binaries/firmware1.bin\n    https://firmware/binary/123\n    ftp://firmware/binary/123.tar.gz\n  ");
        }
        AddFirmwareModalComponent.prototype.ngOnInit = function () {
            this.setInitialState();
            this.loadFirmwares();
        };
        AddFirmwareModalComponent.prototype.setInitialState = function () {
            if (this.model.selected) {
                this.firmwarePreselected = true;
            }
        };
        AddFirmwareModalComponent.prototype.loadFirmwares = function () {
            var _this = this;
            this.inputSubscription$ = this.onInput
                .pipe(operators.tap(function () {
                if (!_this.firmwarePreselected) {
                    _this.model.description = null;
                    if (_this.form) {
                        _this.form.form.get('description').reset();
                    }
                }
            }), operators.debounceTime(300), operators.distinctUntilChanged(), operators.switchMap(function (searchStr) { return _this.getFirmwareResult(searchStr); }))
                .subscribe(function (result) {
                _this.firmwaresResult = result;
            });
        };
        AddFirmwareModalComponent.prototype.getFirmwareResult = function (searchStr) {
            return rxjs.from(this.repositoryService.listRepositoryEntries(shared.RepositoryType.FIRMWARE, {
                partialName: searchStr,
                skipLegacy: true
            }));
        };
        AddFirmwareModalComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.saving = true;
                    this.repositoryService
                        .create(this.model, shared.RepositoryType.FIRMWARE)
                        .then(function (savedFirmware) {
                        _this.successMsg();
                        _this.saving = false;
                        _this.saved.next(savedFirmware);
                        _this.cancel();
                    })
                        .catch(function (e) {
                        _this.saving = false;
                        _this.saved.error(e);
                        _this.cancel();
                    });
                    return [2 /*return*/];
                });
            });
        };
        AddFirmwareModalComponent.prototype.successMsg = function () {
            var msg = ngxComponents.gettext('Firmware added.');
            this.alert.success(msg);
        };
        AddFirmwareModalComponent.prototype.cancel = function () {
            this.modal.hide();
            this.saved.complete();
        };
        AddFirmwareModalComponent.prototype.ngOnDestroy = function () {
            this.inputSubscription$.unsubscribe();
        };
        AddFirmwareModalComponent.prototype.onFile = function (dropped) {
            if (!lodashEs.isUndefined(dropped.url)) {
                this.model.binary = {
                    url: dropped.url
                };
                return;
            }
            else if (dropped.droppedFiles) {
                this.model.binary = {
                    file: dropped.droppedFiles[0].file
                };
                return;
            }
            else {
                this.model.binary = {
                    file: undefined,
                    url: undefined
                };
            }
        };
        AddFirmwareModalComponent.prototype.onFirmwareSelect = function (firmware) {
            lodashEs.assign(this.model, {
                selected: firmware,
                description: firmware.description,
                deviceType: lodashEs.get(firmware, 'c8y_Filter.type')
            });
        };
        return AddFirmwareModalComponent;
    }());
    AddFirmwareModalComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-firmware-software-modal',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-firmware'\"></i>\n    <h4 translate>\n      Add firmware\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\" *ngIf=\"!firmwarePreselected\">\n    <p class=\"lead m-0\" translate>\n      Select or create new firmware\n    </p>\n  </div>\n  <form\n    class=\"d-contents\"\n    autocomplete=\"off\"\n    #firmwareForm=\"ngForm\"\n    (ngSubmit)=\"firmwareForm.form.valid && save()\"\n  >\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"firmwarePreselected\">\n          <c8y-form-group>\n            <label for=\"firmwareName\" translate>Firmware</label>\n            <c8y-typeahead\n              [(ngModel)]=\"model.selected\"\n              name=\"firmwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"onInput.next($event)\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"\n                  let firmware of firmwaresResult;\n                  loadMore: 'auto';\n                  notFound: notFoundTemplate\n                \"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"onFirmwareSelect(firmware)\"\n                [active]=\"model.selected === firmware\"\n              >\n                <c8y-highlight\n                  [text]=\"firmware.name || '--'\"\n                  [pattern]=\"onInput | async\"\n                ></c8y-highlight>\n              </c8y-li>\n              <ng-template #notFoundTemplate>\n                <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"(onInput | async)?.length > 0\">\n                  <span translate>No match found.</span>\n                  <button\n                    title=\"{{ 'Add new`firmware`' | translate }}\"\n                    type=\"button\"\n                    class=\"btn btn-primary btn-xs m-l-8\"\n                    translate\n                  >\n                    Add new`firmware`\n                  </button>\n                </c8y-li>\n              </ng-template>\n            </c8y-typeahead>\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label for=\"firmwareDescription\" translate>Description</label>\n            <input\n              id=\"firmwareDescription\"\n              class=\"form-control\"\n              autocomplete=\"off\"\n              name=\"description\"\n              [(ngModel)]=\"model.description\"\n              placeholder=\"{{ 'e.g. Firmware for hardware revision b' | translate }}\"\n              [disabled]=\"model.selected?.id\"\n              [required]=\"true\"\n            />\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label class=\"control-label\" for=\"firmwareDeviceTypeFilter\">\n              {{ 'Device type filter' | translate }}\n              <button\n                class=\"btn btn-clean text-primary\"\n                popover=\"{{\n                  'If the filter is set, the firmware will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.'\n                    | translate\n                }}\"\n                triggers=\"focus\"\n                container=\"body\"\n                placement=\"right\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\"></i>\n              </button>\n            </label>\n            <input\n              id=\"firmwareDeviceTypeFilter\"\n              class=\"form-control\"\n              name=\"firmwareDeviceTypeFilter\"\n              [(ngModel)]=\"model.deviceType\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n              [disabled]=\"model.selected?.id\"\n            />\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"firmwareVersion\" translate>Version</label>\n          <input\n            id=\"firmwareVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"version\"\n            [(ngModel)]=\"model.version\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            [required]=\"true\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block m-t-40\" translate>Firmware file</div>\n          <c8y-file-picker [maxAllowedFiles]=\"1\" (onFilesPicked)=\"onFile($event)\" [fileUrlPopover]=\"textForFirmwareUrlPopover\">\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n\n      <button\n        title=\"{{ 'Add firmware' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !firmwareForm.form.valid ||\n          firmwareForm.form.pristine ||\n          saving ||\n          (!model.binary?.url && !model.binary?.file)\n        \"\n        translate\n      >\n        Add firmware\n      </button>\n    </div>\n  </form>\n</div>\n"
                },] }
    ];
    AddFirmwareModalComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: shared.RepositoryService },
        { type: ngxComponents.AlertService }
    ]; };
    AddFirmwareModalComponent.propDecorators = {
        form: [{ type: core.ViewChild, args: ['firmwareForm', { static: false },] }],
        saved: [{ type: core.Output }]
    };

    var FirmwareDetailsComponent = /** @class */ (function () {
        function FirmwareDetailsComponent(activatedRoute, inventoryService, repositoryService, alertService, translateService, modalService, bsModalService) {
            var _this = this;
            this.activatedRoute = activatedRoute;
            this.inventoryService = inventoryService;
            this.repositoryService = repositoryService;
            this.alertService = alertService;
            this.translateService = translateService;
            this.modalService = modalService;
            this.bsModalService = bsModalService;
            this.reload$ = new rxjs.Subject();
            this.reloading$ = new rxjs.BehaviorSubject(false);
            this.updateFirmware$ = new rxjs.Subject();
            this.firmwareUpdated$ = new rxjs.Subject();
            this.baseVersionsUpdated$ = new rxjs.Subject();
            this.patchVersionsUpdated$ = new rxjs.Subject();
            this.firmware$ = rxjs.merge(this.activatedRoute.params.pipe(operators.map(function (params) { return params.id; }), operators.switchMap(function (id) { return rxjs.defer(function () { return _this.inventoryService.detail(id).then(function (result) { return result.data; }); }); })), this.reload$.pipe(operators.tap(function () { return _this.reloading$.next(true); }), operators.switchMap(function () { return _this.activatedRoute.params; }), operators.map(function (params) { return params.id; }), operators.switchMap(function (id) { return rxjs.defer(function () { return _this.inventoryService.detail(id).then(function (result) { return result.data; }); }); }), operators.tap(function () { return _this.reloading$.next(false); })), this.firmwareUpdated$).pipe(operators.shareReplay(1));
            this.baseVersions$ = rxjs.merge(this.firmware$.pipe(operators.distinctUntilKeyChanged('id')), this.baseVersionsUpdated$, this.patchVersionsUpdated$, this.reload$).pipe(operators.switchMap(function () { return _this.firmware$; }), operators.switchMap(function (firmware) { return _this.repositoryService.listBaseVersions(firmware); }), operators.shareReplay(1));
            this.isLegacy$ = this.firmware$.pipe(operators.map(function (firmware) { return _this.repositoryService.isLegacyEntry(firmware); }), operators.shareReplay(1));
            this.canAddPatchVersions$ = rxjs.combineLatest(this.isLegacy$, this.baseVersions$.pipe(operators.map(function (_a) {
                var data = _a.data;
                return data.length > 0;
            }))).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), isLegacy = _b[0], hasBaseVersions = _b[1];
                return !isLegacy && hasBaseVersions;
            }));
            this.expanded = {};
            this.destroy$ = new rxjs.Subject();
        }
        FirmwareDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.updateFirmware$
                .pipe(operators.withLatestFrom(this.firmware$), operators.switchMap(function (_a) {
                var _b = __read(_a, 2), firmwarePartial = _b[0], firmware = _b[1];
                return _this.inventoryService.update(Object.assign({ id: firmware.id }, firmwarePartial));
            }), operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.tap(function (firmware) { return _this.firmwareUpdated$.next(firmware); }), operators.tap(function () { return _this.alertService.success(ngxComponents.gettext('Saved.')); }), operators.takeUntil(this.destroy$))
                .subscribe();
        };
        FirmwareDetailsComponent.prototype.getPatchVersionsCount$ = function (baseVersion) {
            var _this = this;
            return rxjs.merge(this.firmware$.pipe(operators.distinctUntilKeyChanged('id')), this.baseVersionsUpdated$, this.patchVersionsUpdated$, this.reload$).pipe(operators.switchMap(function () { return _this.firmware$; }), operators.switchMap(function (firmware) { return _this.repositoryService.getPatchVersionsCount$(firmware, baseVersion); }), operators.shareReplay(1));
        };
        FirmwareDetailsComponent.prototype.getBinaryName$ = function (binaryUrl) {
            return this.repositoryService.getBinaryName$(binaryUrl);
        };
        FirmwareDetailsComponent.prototype.getPatchVersions$ = function (baseVersion) {
            var _this = this;
            return rxjs.merge(this.firmware$.pipe(operators.distinctUntilKeyChanged('id')), this.patchVersionsUpdated$, this.reload$).pipe(operators.switchMap(function () { return _this.firmware$; }), operators.switchMap(function (firmware) { return _this.repositoryService.listPatchVersions(firmware, baseVersion); }), operators.shareReplay(1));
        };
        FirmwareDetailsComponent.prototype.addBaseVersion = function () {
            var _this = this;
            this.firmware$
                .pipe(operators.take(1), operators.switchMap(function (firmware) {
                var initialState = {
                    model: {
                        selected: firmware,
                        description: firmware.description
                    }
                };
                var config = {
                    class: 'modal-sm',
                    ignoreBackdropClick: true,
                    initialState: initialState
                };
                var modalRef = _this.bsModalService.show(AddFirmwareModalComponent, config);
                return modalRef.content.saved;
            }))
                .subscribe(function () { return _this.baseVersionsUpdated$.next(); });
        };
        FirmwareDetailsComponent.prototype.addPatchVersion = function () {
            var _this = this;
            this.firmware$
                .pipe(operators.take(1), operators.switchMap(function (firmware) {
                var initialState = {
                    model: {
                        selected: firmware
                    }
                };
                var config = {
                    class: 'modal-sm',
                    ignoreBackdropClick: true,
                    initialState: initialState
                };
                var modalRef = _this.bsModalService.show(AddFirmwarePatchModalComponent, config);
                return modalRef.content.saved;
            }))
                .subscribe(function () { return _this.patchVersionsUpdated$.next(); });
        };
        FirmwareDetailsComponent.prototype.deleteBaseVersion = function (baseVersion) {
            return __awaiter(this, void 0, void 0, function () {
                var title, body, labels, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            title = ngxComponents.gettext('Delete firmware');
                            body = "\n        " + this.translateService.instant(ngxComponents.gettext('You are about to delete firmware {{ version }} with all its patches.'), { version: baseVersion.c8y_Firmware.version }) + "\n        " + this.translateService.instant(ngxComponents.gettext('This operation is irreversible.')) + "\n        " + this.translateService.instant(ngxComponents.gettext('Do you want to proceed?')) + "\n      ";
                            labels = {
                                ok: ngxComponents.gettext('Delete')
                            };
                            return [4 /*yield*/, this.modalService.confirm(title, body, ngxComponents.Status.DANGER, labels)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.repositoryService.delete(baseVersion)];
                        case 2:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Firmware deleted.'));
                            this.baseVersionsUpdated$.next();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            // only if not cancel from modal
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        FirmwareDetailsComponent.prototype.deletePatchVersion = function (patchVersion) {
            return __awaiter(this, void 0, void 0, function () {
                var title, body, labels, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            title = ngxComponents.gettext('Delete firmware patch');
                            body = "\n        " + this.translateService.instant(ngxComponents.gettext('You are about to delete firmware patch {{ version }}.'), { version: patchVersion.c8y_Firmware.version }) + "\n        " + this.translateService.instant(ngxComponents.gettext('This operation is irreversible.')) + "\n        " + this.translateService.instant(ngxComponents.gettext('Do you want to proceed?')) + "\n      ";
                            labels = {
                                ok: ngxComponents.gettext('Delete')
                            };
                            return [4 /*yield*/, this.modalService.confirm(title, body, ngxComponents.Status.DANGER, labels)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.repositoryService.delete(patchVersion)];
                        case 2:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Firmware patch deleted.'));
                            this.patchVersionsUpdated$.next();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_2 = _a.sent();
                            // only if not cancel from modal
                            if (ex_2) {
                                this.alertService.addServerFailure(ex_2);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        FirmwareDetailsComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next(true);
            this.destroy$.unsubscribe();
        };
        return FirmwareDetailsComponent;
    }());
    FirmwareDetailsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-firmware-details',
                    template: "<c8y-title>\n  {{ (firmware$ | async)?.name }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    path=\"#/firmware\"\n    label=\"{{ 'Firmware repository' | translate }}\"\n    icon=\"c8y-firmware\"\n  >\n  </c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"!(isLegacy$ | async)\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add firmware' | translate }}\"\n    (click)=\"addBaseVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"canAddPatchVersions$ | async\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add firmware patch' | translate }}\"\n    (click)=\"addPatchVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware patch' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>\n          Name, description and device type filter\n        </h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Name' | translate }}\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #nameInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(firmware$ | async)?.name\"\n                  #nameModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g. My firmware' | translate }}\"\n                  data-cy=\"firmware-details--name-input\"\n                  [ngStyle]=\"{ 'width.ch': (firmware$ | async)?.name?.length || 31 }\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    data-cy=\"firmware-details--name-save-btn\"\n                    (click)=\"updateFirmware$.next({ name: nameInput.value }); nameModel.reset()\"\n                    [disabled]=\"nameInput.value.length == 0\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Description' | translate }}\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #descriptionInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(firmware$ | async)?.description\"\n                  #descriptionModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g. Firmware for hardware revision b' | translate }}\"\n                  data-cy=\"firmware-details--description-input\"\n                  [ngStyle]=\"{ 'width.ch': (firmware$ | async)?.description?.length || 31 }\"\n\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    data-cy=\"firmware-details--description-save-btn\"\n                    (click)=\" updateFirmware$.next({ description: descriptionInput.value }); descriptionModel.reset() \"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type filter' | translate }}\n\n                <button\n                 class=\"btn-clean\"\n                  popover=\"{{ 'If the filter is set, the firmware will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.' | translate }}\"\n                  [outsideClick]=\"true\"\n                  container=\"body\"\n                >\n                  <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #deviceTypeInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(firmware$ | async)?.c8y_Filter?.type\"\n                  #deviceTypeModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  data-cy=\"firmware-details--device-type-filter-input\"\n                  [ngStyle]=\"{ 'width.ch': (firmware$ | async)?.type?.length || 31 }\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    data-cy=\"firmware-details--device-type-filter-save-btn\"\n                    (click)=\" updateFirmware$.next({ c8y_Filter: { type: deviceTypeInput.value } }); deviceTypeModel.reset()\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>\n          Versions and patches\n        </h4>\n      </div>\n\n      <div class=\"card-block p-t-0 p-b-24\">\n        <div *ngIf=\"(baseVersions$ | async)?.data.length === 0\">\n          <div class=\"c8y-empty-state text-center\">\n            <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n            <h3 translate>No versions to display.</h3>\n            <p translate>Add a new version by clicking below.</p>\n            <p>\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Add firmware' | translate }}\"\n                (click)=\"addBaseVersion()\"\n              >\n                {{ 'Add firmware' | translate }}\n              </button>\n            </p>\n          </div>\n        </div>\n\n        <c8y-list-group\n          [ngClass]=\"{ 'dd-low': (baseVersions$ | async)?.data.length < 10 }\"\n          *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n        >\n          <c8y-li\n            *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\"\n            [emptyActions]=\"!(getPatchVersions$(baseVersion) | async)?.data.length\"\n            [collapsed]=\"!expanded[baseVersion.id]\"\n            (collapsedChange)=\"expanded[baseVersion.id] = !$event\"\n          >\n            <c8y-li-icon>\n              <i c8yIcon=\"c8y-firmware\"></i>\n            </c8y-li-icon>\n\n            <c8y-li-body class=\"content-flex-50\">\n              <div class=\"col-4\">\n                <p class=\"text-truncate-wrap\" title=\"{{ baseVersion.c8y_Firmware.version }}\">\n                  {{ baseVersion.c8y_Firmware.version }}\n                </p>\n              </div>\n              <div class=\"col-5\">\n                <p class=\"text-truncate-wrap\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    File\n                  </span>\n                  <span title=\"{{ getBinaryName$(baseVersion.c8y_Firmware.url) | async }}\">\n                    <c8y-file-download url=\"{{ baseVersion.c8y_Firmware.url }}\"></c8y-file-download>\n                  </span>\n                </p>\n              </div>\n              <div class=\"col-2 flex-row a-i-start\">\n                <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning flex-item-right-sm\">\n                  {{ 'Legacy' | translate }}\n                </span>\n\n                <span *ngIf=\"!(isLegacy$ | async)\">\n                  <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n                    <span class=\"label label-info\">\n                      <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n                    </span>\n                  </span>\n                  <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n                    <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n                      <ng-template ngPluralCase=\"=0\">\n                        <span class=\"label label-default flex-item-right-sm\">\n                          <span translate>No patches</span>\n                        </span>\n                      </ng-template>\n                      <ng-template ngPluralCase=\"=1\">\n                        <span class=\"label label-info\">\n                          <span translate>1 patch</span>\n                        </span>\n                      </ng-template>\n                      <ng-template ngPluralCase=\"other\">\n                        <span class=\"label label-info\">\n                          <span\n                            ngNonBindable\n                            translate\n                            [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                          >\n                            {{ count }} patches\n                          </span>\n                        </span>\n                      </ng-template>\n                    </span>\n                  </span>\n                </span>\n              </div>\n              <div class=\"fit-h-20 visible-xs\" *ngIf=\"!(isLegacy$ | async)\">\n                <button\n                  class=\"btn btn-danger btn-xs m-t-8 \"\n                  (click)=\"deleteBaseVersion(baseVersion)\"\n                  title=\"{{ 'Delete' | translate }}\"\n                >\n                  <i c8yIcon=\"minus-circle\"></i>\n                  {{ 'Delete' | translate }}\n                </button>\n              </div>\n              <div *ngIf=\"!(isLegacy$ | async)\" class=\"flex-item-right fit-h-20 p-r-8 hidden-xs\">\n                <button\n                  class=\"btn btn-dot text-danger showOnHover\"\n                  (click)=\"deleteBaseVersion(baseVersion)\"\n                  title=\"{{ 'Delete' | translate }}\"\n                >\n                  <i c8yIcon=\"minus-circle\"></i>\n                </button>\n              </div>\n            </c8y-li-body>\n            <c8y-li-collapse *ngIf=\"(getPatchVersions$(baseVersion) | async)?.data.length\">\n              <c8y-list-group class=\"separator-top\">\n                <c8y-li\n                  *c8yFor=\" let patchVersion of getPatchVersions$(baseVersion) | async; let i = index; loadMore: 'auto' \"\n                >\n                  <c8y-li-icon>\n                    <i c8yIcon=\"c8y-firmware\"></i>\n                  </c8y-li-icon>\n                  <c8y-li-body class=\"content-flex-50\">\n                    <div class=\"col-4\">\n                      {{ patchVersion.c8y_Firmware.version }}\n                    </div>\n                    <div class=\"col-5\">\n                      <div class=\"text-truncate\">\n                        <span class=\"text-label-small m-r-8\" translate>\n                          File\n                        </span>\n                        <c8y-file-download\n                          url=\"{{ patchVersion.c8y_Firmware.url }}\"\n                        ></c8y-file-download>\n                      </div>\n                    </div>\n                    <div class=\"visible-xs m-t-8\">\n                      <button\n                        class=\"btn btn-danger btn-xs\"\n                        (click)=\"deletePatchVersion(patchVersion)\"\n                        title=\"{{ 'Delete' | translate }}\"\n                      >\n                        <i c8yIcon=\"minus-circle\"></i>\n                        {{ 'Delete' | translate }}\n                      </button>\n                    </div>\n                    <div class=\"flex-item-right p-r-8 hidden-xs fit-h-20\">\n                      <button\n                        class=\"btn btn-dot text-danger showOnHover\"\n                        (click)=\"deletePatchVersion(patchVersion)\"\n                        title=\"{{ 'Delete' | translate }}\"\n                      >\n                        <i c8yIcon=\"minus-circle\"></i>\n                      </button>\n                    </div>\n                  </c8y-li-body>\n                </c8y-li>\n              </c8y-list-group>\n            </c8y-li-collapse>\n          </c8y-li>\n        </c8y-list-group>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    FirmwareDetailsComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: client.InventoryService },
        { type: shared.RepositoryService },
        { type: ngxComponents.AlertService },
        { type: core$1.TranslateService },
        { type: ngxComponents.ModalService },
        { type: modal.BsModalService }
    ]; };
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], FirmwareDetailsComponent.prototype, "getPatchVersionsCount$", null);
    __decorate([
        ngxComponents.memoize()
    ], FirmwareDetailsComponent.prototype, "getBinaryName$", null);
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], FirmwareDetailsComponent.prototype, "getPatchVersions$", null);

    var FirmwareListComponent = /** @class */ (function () {
        function FirmwareListComponent(repositoryService, modalService, bsModalService, translateService, alertService, router, activatedRoute) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.modalService = modalService;
            this.bsModalService = bsModalService;
            this.translateService = translateService;
            this.alertService = alertService;
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.textFilter$ = new rxjs.BehaviorSubject('');
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.reloading = false;
            this.firmwares$ = rxjs.combineLatest(this.textFilter$.pipe(operators.debounceTime(400), operators.distinctUntilChanged()), this.reload$).pipe(operators.tap(function () {
                _this.reloading = true;
            }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), text = _b[0];
                return _this.getFirmwares(text);
            }), operators.tap(function () {
                _this.reloading = false;
            }), operators.shareReplay(1));
            this.canAddFirmwarePatch$ = rxjs.from(this.repositoryService.listRepositoryEntries(shared.RepositoryType.FIRMWARE, { skipLegacy: true })).pipe(operators.map(function (_a) {
                var data = _a.data;
                return data.length > 0;
            }));
            this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
            this.DEVICE_TYPE_NOT_AVAILABLE = ngxComponents.gettext('No device type available');
        }
        FirmwareListComponent.prototype.getFirmwares = function (partialText) {
            var properties = ['name', 'description', 'c8y_Filter.type'];
            var partialTextFilter = { partialText: partialText, properties: properties };
            return this.repositoryService.listRepositoryEntries(shared.RepositoryType.FIRMWARE, {
                partialTextFilter: partialTextFilter
            });
        };
        FirmwareListComponent.prototype.addFirmware = function () {
            var _this = this;
            var config = { class: 'modal-sm', ignoreBackdropClick: true };
            var modalRef = this.bsModalService.show(AddFirmwareModalComponent, config);
            modalRef.content.saved.subscribe(function (savedFirmware) { return _this.editFirmware(savedFirmware); });
        };
        FirmwareListComponent.prototype.addFirmwarePatch = function () {
            var _this = this;
            var config = { class: 'modal-sm', ignoreBackdropClick: true };
            var modalRef = this.bsModalService.show(AddFirmwarePatchModalComponent, config);
            modalRef.content.saved.subscribe(function (savedFirmware) { return _this.editFirmware(savedFirmware); });
        };
        FirmwareListComponent.prototype.editFirmware = function (firmware) {
            this.router.navigate([firmware.id], { relativeTo: this.activatedRoute });
        };
        FirmwareListComponent.prototype.deleteFirmware = function (firmware) {
            return __awaiter(this, void 0, void 0, function () {
                var title, body, labels, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            title = ngxComponents.gettext('Delete firmware');
                            body = "\n        " + this.translateService.instant(ngxComponents.gettext('You are about to delete firmware "{{ name }}" with all its versions and patches.'), { name: firmware.name }) + "\n        " + this.translateService.instant(ngxComponents.gettext('This operation is irreversible.')) + "\n        " + this.translateService.instant(ngxComponents.gettext('Do you want to proceed?')) + "\n      ";
                            labels = {
                                ok: ngxComponents.gettext('Delete')
                            };
                            return [4 /*yield*/, this.modalService.confirm(title, body, ngxComponents.Status.DANGER, labels)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.repositoryService.delete(firmware)];
                        case 2:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Firmware deleted.'));
                            this.reload$.next();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            // only if not cancel from modal
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        FirmwareListComponent.prototype.getBaseVersionsCount$ = function (firmware) {
            var _this = this;
            return this.firmwares$.pipe(operators.switchMap(function () { return _this.repositoryService.getBaseVersionsCount$(firmware); }), operators.shareReplay(1));
        };
        FirmwareListComponent.prototype.getDeviceTypeTitle = function (firmware) {
            return lodashEs.get(firmware, 'c8y_Filter.type', this.translateService.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
        };
        return FirmwareListComponent;
    }());
    FirmwareListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-firmware-list',
                    template: "<c8y-title>\n  {{ 'Firmware repository' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      class=\"form-control\"\n      type=\"search\"\n      title=\"{{ 'Filter firmware\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n        px-event=\"Clear filtering firmware\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Add firmware' | translate }}\" (click)=\"addFirmware()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    *ngIf=\"canAddFirmwarePatch$ | async\"\n    title=\"{{ 'Add firmware patch' | translate }}\"\n    (click)=\"addFirmwarePatch()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware patch' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#firmware-repo\"></c8y-help>\n\n<!-- empty state-->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(firmwares$ | async)?.data.length === 0 && (textFilter$ | async)?.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-firmware\"></h1>\n  <h3 translate>No firmwares to display.</h3>\n  <p translate>Add a new firmware by clicking below.</p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add firmware' | translate }}\"\n      (click)=\"addFirmware()\"\n    >\n      {{ 'Add firmware' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- no results empty state -->\n<div\n  class=\"c8y-empty-state\"\n  *ngIf=\"(firmwares$ | async)?.data.length === 0 && (textFilter$ | async)?.length > 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"search\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Refine your search terms or check your spelling.</p>\n</div>\n\n<c8y-list-group\n  class=\"m-b-24\"\n  *ngIf=\"(firmwares$ | async)?.data.length > 0\"\n  [ngClass]=\"{ 'dd-low': (firmwares$ | async)?.data.length < 10 }\"\n>\n  <c8y-li [emptyActions]=\"true\" class=\"page-sticky-header hidden-xs\">\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <div class=\"col-3\">\n        {{ 'Firmware' | translate }}\n      </div>\n      <div class=\"col-4\">\n        {{ 'Description' | translate }}\n      </div>\n      <div class=\"col-3\">\n        {{ 'Device type' | translate }}\n      </div>\n      <div class=\"col-2\">\n        {{ 'Versions' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n\n  <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon icon=\"c8y-firmware\"></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <button class=\"btn-clean col-3\" (click)=\"editFirmware(firmware)\">\n        <span class=\"text-truncate\" title=\"{{ firmware.name }}\">\n          <c8y-highlight\n            [text]=\"firmware.name || '-'\"\n            elementClass=\"text-info\"\n            [pattern]=\"textFilter$ | async\"\n          ></c8y-highlight>\n        </span>\n      </button>\n      <div class=\"col-4\">\n        <p class=\"text-truncate\" title=\"{{ firmware.description }}\">\n          <span class=\"text-label-small m-r-4 visible-xs-inline\">\n            {{ 'Description' | translate }}\n          </span>\n          <span *ngIf=\"firmware.description; else emptyDescription\">\n            <c8y-highlight\n              [text]=\"firmware.description || '-'\"\n              elementClass=\"text-info\"\n              [pattern]=\"textFilter$ | async\"\n            ></c8y-highlight>\n          </span>\n        </p>\n        <ng-template #emptyDescription>\n          <small class=\"text-muted\">\n            <em>{{ 'No description' | translate }}</em>\n          </small>\n        </ng-template>\n      </div>\n      <div class=\"col-3\">\n        <div class=\"text-truncate\">\n          <span class=\"text-label-small m-r-4 visible-xs-inline\" translate> Device type </span>\n          <span\n            *ngIf=\"firmware.c8y_Filter?.type; else emptyText\"\n            title=\"{{ firmware.c8y_Filter?.type }}\"\n          >\n            <c8y-highlight\n              [text]=\"firmware.c8y_Filter?.type || '-'\"\n              elementClass=\"text-info\"\n              [pattern]=\"textFilter$ | async\"\n            ></c8y-highlight>\n          </span>\n          <ng-template #emptyText>\n            <small class=\"text-muted\">\n              <em>{{ 'Undefined' | translate }}</em>\n            </small>\n          </ng-template>\n        </div>\n      </div>\n      <div class=\"col-2\">\n        <span class=\"label label-warning flex-item-right-sm\" *ngIf=\"isLegacy(firmware)\">\n          <span translate> Legacy </span>\n        </span>\n\n        <span *ngIf=\"!isLegacy(firmware)\">\n          <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n            <span class=\"label label-info flex-item-right-sm\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n          <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n            <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default flex-item-right-sm\">\n                  <span translate> No versions </span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info flex-item-right-sm\">\n                  <span translate> 1 version </span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info flex-item-right-sm\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getBaseVersionsCount$(firmware) | async }\"\n                  >\n                    {{ count }} versions\n                  </span>\n                </span>\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-action (click)=\"editFirmware(firmware)\" icon=\"pencil\">\n      {{ 'Edit' | translate }}\n    </c8y-li-action>\n\n    <c8y-li-action (click)=\"deleteFirmware(firmware)\" icon=\"trash\">\n      {{ 'Delete' | translate }}\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"
                },] }
    ];
    FirmwareListComponent.ctorParameters = function () { return [
        { type: shared.RepositoryService },
        { type: ngxComponents.ModalService },
        { type: modal.BsModalService },
        { type: core$1.TranslateService },
        { type: ngxComponents.AlertService },
        { type: router.Router },
        { type: router.ActivatedRoute }
    ]; };
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], FirmwareListComponent.prototype, "getBaseVersionsCount$", null);

    var FirmwareRepositoryNavigationFactory = /** @class */ (function () {
        function FirmwareRepositoryNavigationFactory() {
            this.node = new ngxComponents.NavigatorNode({
                label: ngxComponents.gettext('Firmware repository'),
                path: 'firmware',
                icon: 'c8y-firmware',
                parent: ngxComponents.gettext('Management'),
                priority: 1000
            });
        }
        FirmwareRepositoryNavigationFactory.prototype.get = function () {
            return this.node;
        };
        return FirmwareRepositoryNavigationFactory;
    }());
    FirmwareRepositoryNavigationFactory.decorators = [
        { type: core.Injectable }
    ];
    FirmwareRepositoryNavigationFactory.ctorParameters = function () { return []; };

    var FirmwareRepositoryListModule = /** @class */ (function () {
        function FirmwareRepositoryListModule() {
        }
        FirmwareRepositoryListModule.forRoot = function () {
            return {
                ngModule: FirmwareRepositoryListModule,
                providers: [
                    {
                        provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                        useClass: FirmwareRepositoryNavigationFactory,
                        multi: true
                    },
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: [
                            {
                                path: 'firmware',
                                component: FirmwareListComponent
                            },
                            {
                                path: 'firmware/:id',
                                component: FirmwareDetailsComponent
                            }
                        ],
                        multi: true
                    }
                ]
            };
        };
        return FirmwareRepositoryListModule;
    }());
    FirmwareRepositoryListModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ngxComponents.CoreModule,
                        ngxComponents.FormsModule,
                        popover.PopoverModule,
                        shared.SharedRepositoryModule
                    ],
                    declarations: [
                        FirmwareListComponent,
                        FirmwareDetailsComponent,
                        AddFirmwareModalComponent,
                        AddFirmwarePatchModalComponent,
                    ],
                    entryComponents: [
                        FirmwareListComponent,
                        FirmwareDetailsComponent,
                        AddFirmwareModalComponent,
                        AddFirmwarePatchModalComponent,
                    ]
                },] }
    ];

    var FirmwareRepositoryModule = /** @class */ (function () {
        function FirmwareRepositoryModule() {
        }
        return FirmwareRepositoryModule;
    }());
    FirmwareRepositoryModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        FirmwareRepositoryListModule.forRoot(),
                        FirmwareRepositoryDeviceTabModule.forRoot()
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AddFirmwareModalComponent = AddFirmwareModalComponent;
    exports.AddFirmwarePatchModalComponent = AddFirmwarePatchModalComponent;
    exports.FirmwareDetailsComponent = FirmwareDetailsComponent;
    exports.FirmwareDeviceTabComponent = FirmwareDeviceTabComponent;
    exports.FirmwareDeviceTabGuard = FirmwareDeviceTabGuard;
    exports.FirmwareListComponent = FirmwareListComponent;
    exports.FirmwareRepositoryDeviceTabModule = FirmwareRepositoryDeviceTabModule;
    exports.FirmwareRepositoryListModule = FirmwareRepositoryListModule;
    exports.FirmwareRepositoryModule = FirmwareRepositoryModule;
    exports["ɵa"] = FirmwareRepositoryListModule;
    exports["ɵb"] = FirmwareListComponent;
    exports["ɵc"] = FirmwareDetailsComponent;
    exports["ɵd"] = AddFirmwareModalComponent;
    exports["ɵe"] = AddFirmwarePatchModalComponent;
    exports["ɵf"] = FirmwareRepositoryNavigationFactory;
    exports["ɵg"] = FirmwareRepositoryDeviceTabModule;
    exports["ɵh"] = FirmwareDeviceTabComponent;
    exports["ɵi"] = FirmwareDeviceTabGuard;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-repository-firmware.umd.js.map
