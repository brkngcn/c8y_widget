(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@c8y/ngx-components/repository/shared'), require('@ngx-translate/core'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('@c8y/ngx-components/operations/bulk-operation-stepper'), require('@c8y/ngx-components/operations/bulk-operations-service'), require('@c8y/ngx-components/operations/stepper-frames')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/stepper-bulk-type-software', ['exports', '@angular/core', '@c8y/ngx-components', '@c8y/ngx-components/repository/shared', '@ngx-translate/core', 'lodash-es', 'rxjs', 'rxjs/operators', '@angular/forms', '@c8y/ngx-components/operations/bulk-operation-stepper', '@c8y/ngx-components/operations/bulk-operations-service', '@c8y/ngx-components/operations/stepper-frames'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations["stepper-bulk-type-software"] = {}), global.ng.core, global.c8y["ngx-components"], global.c8y["ngx-components"].repository.shared, global.core$1, global.lodashEs, global.rxjs, global.rxjs.operators, global.ng.forms, global.c8y["ngx-components"].operations["bulk-operation-stepper"], global.c8y["ngx-components"].operations["bulk-operations-service"], global.c8y["ngx-components"].operations["stepper-frames"]));
})(this, (function (exports, core, ngxComponents, shared, core$1, lodashEs, rxjs, operators, forms, bulkOperationStepper, bulkOperationsService, stepperFrames) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var SelectSoftwareStepComponent = /** @class */ (function () {
        function SelectSoftwareStepComponent(repositoryService, translate) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.translate = translate;
            this.software = new core.EventEmitter();
            this.textFilter$ = new rxjs.BehaviorSubject('');
            this.deviceType$ = new rxjs.BehaviorSubject('');
            this.softwareTypeFilter$ = new rxjs.BehaviorSubject('');
            this.deviceTypes = [];
            this.selectedDeviceType = { name: '' };
            this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
            this.software$ = rxjs.combineLatest(this.textFilter$, this.deviceType$, this.softwareTypeFilter$).pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 3), name = _b[0], deviceType = _b[1], softwareType = _b[2];
                return _this.getSoftware(name, deviceType, softwareType);
            }), operators.shareReplay(1));
            this.NO_DEVICE_TYPE_AVAILABLE = ngxComponents.gettext('No device type available');
            this.loadDeviceTypes();
        }
        SelectSoftwareStepComponent.prototype.getBaseVersionsCount$ = function (software) {
            return this.repositoryService.getBaseVersionsCount$(software).pipe(operators.shareReplay(1));
        };
        SelectSoftwareStepComponent.prototype.getVersions = function (software) {
            return this.repositoryService.listAllVersions(software);
        };
        SelectSoftwareStepComponent.prototype.getDeviceTypeTitle = function (software) {
            return lodashEs.get(software, 'c8y_Filter.type', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));
        };
        SelectSoftwareStepComponent.prototype.loadDeviceTypes = function () {
            var _this = this;
            this.deviceTypeSubscription = this.deviceType$
                .pipe(operators.debounceTime(300), operators.distinctUntilChanged(), operators.switchMap(function (searchStr) {
                var query = { 'c8y_Filter.type': "*" + searchStr + "*" };
                return rxjs.from(_this.repositoryService.listRepositoryEntries(shared.RepositoryType.SOFTWARE, { query: query }));
            }))
                .subscribe(function (result) {
                var data = result.data;
                _this.deviceTypes = lodashEs.uniqWith(data.map(function (val) { return ({ name: val.c8y_Filter.type }); }), lodashEs.isEqual);
            });
        };
        SelectSoftwareStepComponent.prototype.ngOnDestroy = function () {
            this.deviceTypeSubscription.unsubscribe();
        };
        SelectSoftwareStepComponent.prototype.resetSelection = function () {
            this.radioButtons.map(function (radio) { return radio.reset(); });
        };
        SelectSoftwareStepComponent.prototype.selectSoftware = function (_a) {
            var option = _a.option, software = _a.software;
            software.selectedId = option.id;
            option.action = 'install';
            this.emitSoftware({ option: option, software: software });
        };
        SelectSoftwareStepComponent.prototype.emitSoftware = function (_a) {
            var option = _a.option, software = _a.software;
            var emitData = Object.assign({}, { software: software }, { version: option }, { action: option.action });
            this.software.emit(emitData);
        };
        SelectSoftwareStepComponent.prototype.getSoftware = function (name, deviceType, softwareType) {
            var query = name ? { name: "*" + name + "*" } : {};
            if (deviceType) {
                query.__or = [{ 'c8y_Filter.type': deviceType }, { __not: { __has: "c8y_Filter.type" } }];
            }
            if (softwareType) {
                query.__or = { softwareType: softwareType };
            }
            return this.repositoryService.listRepositoryEntries(shared.RepositoryType.SOFTWARE, { query: query });
        };
        return SelectSoftwareStepComponent;
    }());
    SelectSoftwareStepComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-select-software-step',
                    template: "<c8y-select-step-frame\n  [header]=\"'Select software' | translate\"\n  [noResults]=\"\n    ((textFilter$ | async)?.length ||\n      (deviceType$ | async)?.length ||\n      (softwareTypeFilter$ | async)?.length) &&\n    (software$ | async)?.data.length === 0\n  \"\n>\n  <div filters class=\"row\">\n    <div class=\"col-md-4 m-b-xs-8 m-b-sm-8\">\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          title=\"{{ 'Filter software\u2026' | translate }}\"\n          placeholder=\"{{ 'Filter software\u2026' | translate }}\"\n          [ngModel]=\"textFilter$ | async\"\n          (ngModelChange)=\"textFilter$.next($event)\"\n        />\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n          <i\n            c8yIcon=\"times\"\n            class=\"text-muted\"\n            *ngIf=\"(textFilter$ | async).length > 0\"\n            (click)=\"textFilter$.next('')\"\n          ></i>\n        </span>\n      </div>\n    </div>\n    <div class=\"col-md-4 m-b-xs-8 m-b-sm-8\">\n      <c8y-form-group class=\"m-0\">\n        <c8y-typeahead\n          name=\"deviceType\"\n          [(ngModel)]=\"selectedDeviceType\"\n          placeholder=\"{{ 'Type to filter device types\u2026' | translate }}\"\n          (onSearch)=\"deviceType$.next($event)\"\n          [allowFreeEntries]=\"false\"\n        >\n          <c8y-li\n            class=\"p-l-8 p-r-8 c8y-list__item--link\"\n            (click)=\"selectedDeviceType = { name: '' }; deviceType$.next('')\"\n            [active]=\"!selectedDeviceType?.name\"\n          >\n            <span>{{ 'All device types' | translate }}</span>\n          </c8y-li>\n          <c8y-li\n            *ngFor=\"let deviceType of deviceTypes\"\n            class=\"p-l-8 p-r-8 c8y-list__item--link\"\n            (click)=\"selectedDeviceType = deviceType; deviceType$.next(deviceType.name)\"\n            [active]=\"selectedDeviceType === deviceType\"\n          >\n            <c8y-highlight [text]=\"deviceType.name\" [pattern]=\"deviceType$ | async\"></c8y-highlight>\n          </c8y-li>\n        </c8y-typeahead>\n        <c8y-messages>\n          <c8y-message\n            name=\"notExisting\"\n            [text]=\"'Select one of the existing device types.' | translate\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n    <div class=\"col-md-4\">\n      <c8y-form-group class=\"m-0\">\n        <c8y-software-type\n          [required]=\"false\"\n          [emitResultsOnly]=\"true\"\n          [showBtnInNotFoundMessage]=\"false\"\n          [allowFreeEntries]=\"false\"\n          [placeholder]=\"'Type to filter software types\u2026' | translate\"\n          [showClearSelectionOption]=\"true\"\n          (onSelectSoftware)=\"softwareTypeFilter$.next($event?.softwareType)\"\n        ></c8y-software-type>\n        <c8y-messages>\n          <c8y-message\n            name=\"notExisting\"\n            [text]=\"'Select one of the existing device types.' | translate\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n  </div>\n  <c8y-li header class=\"hidden-sm hidden-xs m-r-8 m-l-8\">\n    <c8y-li-icon><i class=\"p-l-24\"></i></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-40 p-r-32\">\n      <div class=\"col-5\">\n        <span class=\"text-truncate\" title=\" {{ 'Name' | translate }} \">\n          {{ 'Name' | translate }}\n        </span>\n      </div>\n      <div class=\"col-2\">\n        <span class=\"text-truncate\" title=\"{{ 'Device type' | translate }}\">\n          {{ 'Device type' | translate }}\n        </span>\n      </div>\n      <div class=\"col-3\">\n        <span class=\"text-truncate\" title=\"{{ 'Software type' | translate }}\">\n          {{ 'Software type' | translate }}\n        </span>\n      </div>\n      <div class=\"col-2\">\n        <span class=\"text-truncate\" title=\"{{ 'Versions' | translate }}\">\n          {{ 'Versions' | translate }}\n        </span>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-list-group list [ngClass]=\"{ 'dd-low': (software$ | async)?.data.length < 10 }\">\n    <c8y-li *c8yFor=\"let software of software$ | async; loadMore: 'auto'\">\n      <c8y-li-icon>\n        <i c8yIcon=\"c8y-tools\"></i>\n      </c8y-li-icon>\n      <c8y-li-body class=\"content-flex-40\">\n        <div class=\"col-5 m-b-xs-8\">\n          <div class=\"text-truncate\" title=\"{{ software.name }}\">\n            <c8y-highlight [text]=\"software.name\" [pattern]=\"textFilter$ | async\"></c8y-highlight>\n          </div>\n        </div>\n        <div class=\"col-2 m-b-xs-8\">\n          <div\n            class=\"text-truncate\"\n            title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(software) }}\"\n          >\n            <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n              Device type\n            </span>\n            <span *ngIf=\"software.c8y_Filter?.type; else noType\">\n              {{ software.c8y_Filter?.type }}\n            </span>\n            <ng-template #noType>\n              <small>\n                <em class=\"text-muted\" translate>Undefined`device type`</em>\n              </small>\n            </ng-template>\n          </div>\n        </div>\n        <div class=\"col-3 m-b-xs-8\">\n          <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n            Software type\n          </span>\n          <span *ngIf=\"software.softwareType; else emptyText\" class=\"label label-info\">\n            {{ software.softwareType }}\n          </span>\n          <ng-template #emptyText>\n            <small class=\"text-muted\">\n              <em translate>Undefined`software type`</em>\n            </small>\n          </ng-template>\n        </div>\n        <div class=\"col-2\">\n          <span *ngIf=\"isLegacy(software)\" class=\"label label-warning flex-item-right-sm\">\n            <span translate>Legacy</span>\n          </span>\n          <span *ngIf=\"!isLegacy(software)\">\n            <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n              <span class=\"label label-info\">\n                <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n              </span>\n            </span>\n            <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n              <span [ngPlural]=\"getBaseVersionsCount$(software) | async\">\n                <ng-template ngPluralCase=\"=1\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    version\n                  </span>\n                  <span class=\"badge badge-info flex-item-right-sm\"> 1 </span>\n                </ng-template>\n                <ng-template ngPluralCase=\"other\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    versions\n                  </span>\n                  <span class=\"badge badge-info flex-item-right-sm\">\n                    {{ getBaseVersionsCount$(software) | async }}\n                  </span>\n                </ng-template>\n              </span>\n            </span>\n          </span>\n        </div>\n      </c8y-li-body>\n      <c8y-li-collapse>\n        <c8y-list-group>\n          <c8y-li *c8yFor=\"let option of getVersions(software) | async\">\n            <c8y-li-radio\n              [name]=\"software.id\"\n              (onSelect)=\"selectSoftware({ option: option, software: software })\"\n            ></c8y-li-radio>\n            <c8y-li-body class=\"content-flex-40 p-r-16\">\n              <div class=\"col-4\">\n                {{ option.c8y_Software.version }}\n              </div>\n              <div class=\"col-5\">\n                <div class=\"text-truncate\" title=\"{{ option.c8y_Software.url }}\">\n                  <span class=\"text-label-small m-r-4\" translate> File </span>\n                  <span>{{ option.c8y_Software.url }}</span>\n                </div>\n              </div>\n              <div class=\"col-3 d-flex\" *ngIf=\"option.id === software.selectedId\">\n                <div class=\"c8y-select-wrapper d-inline-block m-l-auto\" style=\"margin: -4px 0\">\n                  <select\n                    id=\"action\"\n                    class=\"form-control input-sm\"\n                    [(ngModel)]=\"option.action\"\n                    (change)=\"emitSoftware({ option: option, software: software })\"\n                  >\n                    <option [ngValue]=\"'install'\">\n                      {{ 'Install/update`software`' | translate }}\n                    </option>\n                    <option [ngValue]=\"'delete'\">{{ 'Remove`software`' | translate }}</option>\n                  </select>\n                  <span></span>\n                </div>\n              </div>\n            </c8y-li-body>\n          </c8y-li>\n        </c8y-list-group>\n      </c8y-li-collapse>\n    </c8y-li>\n  </c8y-list-group>\n</c8y-select-step-frame>\n"
                },] }
    ];
    SelectSoftwareStepComponent.ctorParameters = function () { return [
        { type: shared.RepositoryService },
        { type: core$1.TranslateService }
    ]; };
    SelectSoftwareStepComponent.propDecorators = {
        software: [{ type: core.Output }],
        radioButtons: [{ type: core.ViewChildren, args: [ngxComponents.ListItemRadioComponent,] }]
    };
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], SelectSoftwareStepComponent.prototype, "getBaseVersionsCount$", null);
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], SelectSoftwareStepComponent.prototype, "getVersions", null);

    var ConfirmSoftwareSelectionStepComponent = /** @class */ (function () {
        function ConfirmSoftwareSelectionStepComponent() {
        }
        ConfirmSoftwareSelectionStepComponent.prototype.ngOnChanges = function (changes) {
            if (changes.selectedItems) {
                var deviceTypes = this.deviceTypes;
                this.title =
                    deviceTypes && deviceTypes.length
                        ? deviceTypes.join(', ')
                        : ngxComponents.gettext('Undefined`device type`');
            }
        };
        Object.defineProperty(ConfirmSoftwareSelectionStepComponent.prototype, "selectedToInstall", {
            get: function () {
                return this.selectedItems.filter(function (software) { return software.action === 'install'; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConfirmSoftwareSelectionStepComponent.prototype, "selectedToDelete", {
            get: function () {
                return this.selectedItems.filter(function (software) { return software.action === 'delete'; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConfirmSoftwareSelectionStepComponent.prototype, "deviceTypes", {
            get: function () {
                return lodashEs.uniq(this.selectedItems
                    .filter(function (val) { return lodashEs.has(val, ['software', 'c8y_Filter', 'type']); })
                    .map(function (val) { return val.software.c8y_Filter.type; })
                    .filter(function (val) { return !!val; }));
            },
            enumerable: false,
            configurable: true
        });
        return ConfirmSoftwareSelectionStepComponent;
    }());
    ConfirmSoftwareSelectionStepComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-confirm-software-selection-step',
                    template: "<c8y-preview-selection-frame [header]=\"'Confirm selection' | translate\">\n  <ng-container *previewBlock=\"'Device type' | translate\">\n    <ng-container *ngIf=\"deviceTypes.length > 0; else noType\">\n      <span *ngFor=\"let deviceType of deviceTypes; let last = last\"\n        >{{ deviceType }}{{ last ? '' : ', ' }}</span\n      >\n    </ng-container>\n    <ng-template #noType>\n      <em class=\"text-muted\" translate>Undefined`device type`</em>\n    </ng-template>\n  </ng-container>\n  <c8y-list-group\n    *previewBlock=\"'Installations/updates`software`' | translate; if: !!selectedToInstall.length\"\n  >\n    <c8y-li *ngFor=\"let selectedItem of selectedToInstall\">\n      <c8y-li-icon>\n        <i c8yIcon=\"c8y-tools\"></i>\n      </c8y-li-icon>\n      <c8y-li-body class=\"content-flex-10\">\n        <div class=\"col-6 text-truncate\" title=\"{{ selectedItem.software.name }}\">\n          {{ selectedItem.software.name }}\n        </div>\n        <div class=\"col-6 text-right\" *ngIf=\"!!selectedItem?.version?.c8y_Software?.version\">\n          <span class=\"text-label-small m-r-4\" translate> Version </span>\n          <span>\n            {{ selectedItem.version.c8y_Software.version }}\n          </span>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n  <c8y-list-group *previewBlock=\"'Removals`software`' | translate; if: !!selectedToDelete.length\">\n    <c8y-li *ngFor=\"let selectedItem of selectedToDelete\">\n      <c8y-li-icon>\n        <i c8yIcon=\"c8y-tools\"></i>\n      </c8y-li-icon>\n      <c8y-li-body class=\"content-flex-10\">\n        <div class=\"col-6\">\n          {{ selectedItem.software.name }}\n        </div>\n        <div class=\"col-6 text-right\">\n          <span class=\"text-label-small m-r-8\" translate> Version </span>\n          <span>\n            {{ selectedItem.version.c8y_Software.version }}\n          </span>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</c8y-preview-selection-frame>\n"
                },] }
    ];
    ConfirmSoftwareSelectionStepComponent.propDecorators = {
        selectedItems: [{ type: core.Input }]
    };

    var StepperBulkTypeSoftwareComponent = /** @class */ (function (_super) {
        __extends(StepperBulkTypeSoftwareComponent, _super);
        function StepperBulkTypeSoftwareComponent(modal, translate) {
            var _this = _super.call(this) || this;
            _this.modal = modal;
            _this.translate = translate;
            _this.descriptionTemplateSingle = ngxComponents.gettext('Update software to: {{ name }} (version {{ version }})');
            _this.descriptionTemplateOneOther = ngxComponents.gettext('Update software to: {{ name }} (version {{ version }}) and one other');
            _this.descriptionTemplateMultiple = ngxComponents.gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
            _this.selectedSoftware = [];
            return _this;
        }
        StepperBulkTypeSoftwareComponent.prototype.onSoftwareSelected = function (selectedItem) {
            this.selectedSoftware = this.selectedSoftware.filter(function (item) { return item.software.id !== selectedItem.software.id; });
            this.selectedSoftware.push(selectedItem);
        };
        StepperBulkTypeSoftwareComponent.prototype.confirmSoftwareSelection = function ($event) {
            return __awaiter(this, void 0, void 0, function () {
                var deviceTypes, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            deviceTypes = this.getUniqueDeviceTypes();
                            this.deviceTypes = deviceTypes;
                            if (!(deviceTypes.length > 1)) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Selected software for various device types'), ngxComponents.gettext('Operation may fail due to unsupported software. Do you want to proceed?'), ngxComponents.Status.WARNING, { ok: ngxComponents.gettext('Confirm'), cancel: ngxComponents.gettext('Cancel') })];
                        case 2:
                            _a.sent();
                            $event.stepper.next();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            this.selectedSoftware = [];
                            this.selectSoftware.resetSelection();
                            return [3 /*break*/, 4];
                        case 4: return [3 /*break*/, 6];
                        case 5:
                            $event.stepper.next();
                            _a.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        StepperBulkTypeSoftwareComponent.prototype.retrieveOperationPrototype = function () {
            var softwareList = this.selectedSoftware.map(function (item) { return ({
                name: item.software.name,
                version: item.version.c8y_Software.version,
                url: item.version.c8y_Software.url,
                action: item.action
            }); });
            var interpolationParams = {
                name: softwareList[0].name,
                version: softwareList[0].version,
                count: softwareList.length - 1
            };
            var description;
            switch (softwareList.length) {
                case 1:
                    description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                    break;
                case 2:
                    description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                    break;
                default:
                    description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
            }
            return {
                name: ngxComponents.gettext('Software update'),
                prototype: {
                    description: description,
                    c8y_SoftwareUpdate: softwareList
                }
            };
        };
        StepperBulkTypeSoftwareComponent.prototype.getUniqueDeviceTypes = function () {
            return lodashEs.uniq(this.selectedSoftware
                .map(function (item) { return item.software.c8y_Filter && item.software.c8y_Filter.type; })
                .filter(function (type) { return !!type; }));
        };
        return StepperBulkTypeSoftwareComponent;
    }(bulkOperationStepper.BaseStepperComponent));
    StepperBulkTypeSoftwareComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-stepper-bulk-type-software',
                    template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select software' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)\"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
                },] }
    ];
    StepperBulkTypeSoftwareComponent.ctorParameters = function () { return [
        { type: ngxComponents.ModalService },
        { type: core$1.TranslateService }
    ]; };
    StepperBulkTypeSoftwareComponent.propDecorators = {
        selectSoftware: [{ type: core.ViewChild, args: [SelectSoftwareStepComponent, { static: false },] }]
    };

    var ɵ0 = {
        type: bulkOperationsService.BulkOperationType.SOFTWARE,
        c8yIcon: 'c8y-tools',
        name: ngxComponents.gettext('Software update'),
        path: bulkOperationsService.baseUrl + "software",
        component: StepperBulkTypeSoftwareComponent,
        fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],
        selected: false
    };
    /** Module for the 'Software update' operation type stepper */
    var StepperBulkTypeSoftwareModule = /** @class */ (function () {
        function StepperBulkTypeSoftwareModule() {
        }
        return StepperBulkTypeSoftwareModule;
    }());
    StepperBulkTypeSoftwareModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        StepperBulkTypeSoftwareComponent,
                        ConfirmSoftwareSelectionStepComponent,
                        SelectSoftwareStepComponent
                    ],
                    imports: [
                        ngxComponents.CoreModule,
                        ngxComponents.FormsModule,
                        forms.ReactiveFormsModule,
                        bulkOperationStepper.BulkOperationStepperModule,
                        shared.SharedRepositoryModule,
                        stepperFrames.StepperFramesModule
                    ],
                    providers: [
                        {
                            provide: bulkOperationsService.HOOK_LIST_BULK_TYPE,
                            useValue: ɵ0,
                            multi: true
                        }
                    ],
                    entryComponents: [StepperBulkTypeSoftwareComponent],
                    exports: [StepperBulkTypeSoftwareComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ConfirmSoftwareSelectionStepComponent = ConfirmSoftwareSelectionStepComponent;
    exports.SelectSoftwareStepComponent = SelectSoftwareStepComponent;
    exports.StepperBulkTypeSoftwareComponent = StepperBulkTypeSoftwareComponent;
    exports.StepperBulkTypeSoftwareModule = StepperBulkTypeSoftwareModule;
    exports["ɵ0"] = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-software.umd.js.map
