(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/modal'), require('@c8y/ngx-components'), require('@angular/forms'), require('rxjs'), require('@c8y/client'), require('@ngx-translate/core'), require('@c8y/client'), require('@c8y/client'), require('@c8y/client'), require('@c8y/client'), require('rxjs/operators'), require('lodash-es'), require('@c8y/ngx-components/register-device')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/sigfox-device-registration', ['exports', '@angular/core', 'ngx-bootstrap/modal', '@c8y/ngx-components', '@angular/forms', 'rxjs', '@c8y/client', '@ngx-translate/core', '@c8y/client', '@c8y/client', '@c8y/client', '@c8y/client', 'rxjs/operators', 'lodash-es', '@c8y/ngx-components/register-device'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["sigfox-device-registration"] = {}), global.ng.core, global.modal, global.c8y["ngx-components"], global.ng.forms, global.rxjs, global.client, global.i4, global.i1, global.i2, global.i3, global.i5, global.rxjs.operators, global.lodashEs, global.c8y["ngx-components"]["register-device"]));
})(this, (function (exports, i0, modal, ngxComponents, forms, rxjs, client, i4, i1, i2, i3, i5, operators, lodashEs, registerDevice) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ErrorName;
    (function (ErrorName) {
        ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
        ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
        ErrorName["ContractError"] = "ContractError";
        ErrorName["NoContractsError"] = "NoContractsError";
        ErrorName["RegistrationError"] = "RegistrationError";
        ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
    })(ErrorName || (ErrorName = {}));
    var SigfoxProviderService = /** @class */ (function () {
        function SigfoxProviderService(client, inventoryService, tenantOptions, translateService, applicationService) {
            this.client = client;
            this.inventoryService = inventoryService;
            this.tenantOptions = tenantOptions;
            this.translateService = translateService;
            this.applicationService = applicationService;
            this.baseUrl = '/service/sigfox-agent/';
            this.registrationUrl = this.baseUrl + "newDeviceRequest";
            this.contractsUrl = this.baseUrl + "contract";
            this.header = { 'Content-Type': 'application/json' };
        }
        SigfoxProviderService.prototype.getConnections = function () {
            return __awaiter(this, void 0, void 0, function () {
                var options, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'GET',
                                headers: this.header
                            };
                            return [4 /*yield*/, this.client.fetch(this.baseUrl + "lns-connection", options)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            if (!(res.status === 200)) return [3 /*break*/, 5];
                            if (!(data.length === 0)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.throwNoConnectivitySettingsError()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [3 /*break*/, 7];
                        case 5: return [4 /*yield*/, this.throwNoConnectivitySettingsError()];
                        case 6:
                            _a.sent();
                            _a.label = 7;
                        case 7: return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        /**
         * Gets contracts from Sigfox platform.
         * @param connectionName The name of connection for which contracts will be retrieved
         * @returns The result list with contract, or throws an error with exception.
         */
        SigfoxProviderService.prototype.getContracts = function (connectionName) {
            return __awaiter(this, void 0, void 0, function () {
                var options, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'GET',
                                headers: this.header,
                                params: {
                                    sigfoxConnectionName: connectionName
                                }
                            };
                            return [4 /*yield*/, this.client.fetch(this.contractsUrl, options)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            if (res.status === 200) {
                                if (data.length === 0) {
                                    this.throwNoContractsError();
                                }
                            }
                            else {
                                this.throwContractError(data);
                            }
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        SigfoxProviderService.prototype.createDevice = function (device) {
            return __awaiter(this, void 0, void 0, function () {
                var options, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'POST',
                                headers: this.header,
                                body: JSON.stringify(device)
                            };
                            return [4 /*yield*/, this.client.fetch(this.registrationUrl, options)];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            if (res.status !== 201) {
                                this.throwRegistrationError(data);
                            }
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        SigfoxProviderService.prototype.getAvailableProtocols = function (filter) {
            if (filter === void 0) { filter = { withTotalPages: true }; }
            return __awaiter(this, void 0, void 0, function () {
                var query, _a, res, data;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            query = {
                                __filter: {
                                    __and: [
                                        { __has: 'c8y_IsDeviceType' },
                                        {
                                            type: { __in: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'] }
                                        }
                                    ]
                                },
                                __orderby: [{ name: 1 }]
                            };
                            return [4 /*yield*/, this.inventoryService.listQuery(query, filter)];
                        case 1:
                            _a = _b.sent(), res = _a.res, data = _a.data;
                            if (res.status === 200) {
                                if (data.length === 0) {
                                    this.throwNoDeviceProtocolsError();
                                }
                            }
                            else {
                                this.throwDeviceProtocolsFetchError();
                            }
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        SigfoxProviderService.prototype.hasConnectivitySettings = function () {
            return __awaiter(this, void 0, void 0, function () {
                var option, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            option = {
                                category: 'sigfox-agent',
                                key: 'provider.token'
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 5]);
                            return [4 /*yield*/, this.tenantOptions.detail(option)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            e_1 = _a.sent();
                            return [4 /*yield*/, this.throwNoConnectivitySettingsError()];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxProviderService.prototype.throwNoConnectivitySettingsError = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error, hasAdminRight;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            error = new Error();
                            error.name = ErrorName.NoConnectivitySettingsError;
                            return [4 /*yield*/, this.applicationService.isAvailable('administration')];
                        case 1:
                            hasAdminRight = (_a.sent()).data;
                            if (hasAdminRight) {
                                error.message = this.translateService.instant(ngxComponents.gettext("Connectivity settings are not configured. Configure them in the Administration app under <a href=\"{{ link }}\">Settings</a>."), {
                                    link: '/apps/administration/index.html#/connectivitySettings/sigfox_provider_settings'
                                });
                            }
                            else {
                                error.message = ngxComponents.gettext('Connectivity settings are not configured. Contact the administrator.');
                            }
                            throw error;
                    }
                });
            });
        };
        SigfoxProviderService.prototype.throwRegistrationError = function (data) {
            var error = new Error();
            error.name = ErrorName.RegistrationError;
            error.message = data.message;
            throw error;
        };
        SigfoxProviderService.prototype.throwDeviceProtocolsFetchError = function () {
            var error = new Error();
            error.name = ErrorName.DeviceProtocolsFetchError;
            error.message = ngxComponents.gettext('Could not load device protocols.');
            throw error;
        };
        SigfoxProviderService.prototype.throwNoDeviceProtocolsError = function () {
            var error = new Error();
            error.name = ErrorName.NoDeviceProtocolsError;
            error.message = this.translateService.instant(ngxComponents.gettext("No device protocols configured. Create a Sigfox device protocol in <a href=\"{{ link }}\">Device protocols</a>."), {
                link: '/apps/devicemanagement/#/deviceprotocols'
            });
            throw error;
        };
        SigfoxProviderService.prototype.throwContractError = function (data) {
            var error = new Error();
            error.name = ErrorName.ContractError;
            error.message = data.message;
            throw error;
        };
        SigfoxProviderService.prototype.throwNoContractsError = function () {
            var error = new Error();
            error.name = ErrorName.NoContractsError;
            error.message = ngxComponents.gettext('No contracts found. New contracts must be created via the Sigfox platform.');
            throw error;
        };
        return SigfoxProviderService;
    }());
    SigfoxProviderService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function SigfoxProviderService_Factory() { return new SigfoxProviderService(i0__namespace.ɵɵinject(i1__namespace.FetchClient), i0__namespace.ɵɵinject(i2__namespace.InventoryService), i0__namespace.ɵɵinject(i3__namespace.TenantOptionsService), i0__namespace.ɵɵinject(i4__namespace.TranslateService), i0__namespace.ɵɵinject(i5__namespace.ApplicationService)); }, token: SigfoxProviderService, providedIn: "root" });
    SigfoxProviderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    SigfoxProviderService.ctorParameters = function () { return [
        { type: client.FetchClient },
        { type: client.InventoryService },
        { type: client.TenantOptionsService },
        { type: i4.TranslateService },
        { type: client.ApplicationService }
    ]; };

    var SigfoxDeviceRegistrationComponent = /** @class */ (function () {
        function SigfoxDeviceRegistrationComponent(bsModalRef, sigfoxService, translateService) {
            var _this = this;
            this.bsModalRef = bsModalRef;
            this.sigfoxService = sigfoxService;
            this.translateService = translateService;
            this.PAGING = {
                withTotalPages: true,
                pageSize: 10
            };
            this.form = new forms.FormGroup({});
            this.model = {};
            this.protocols$ = this.getProtocols$();
            this.connections$ = this.getConnections$();
            this.unsubscribe$ = new rxjs.Subject();
            this.load$ = this.connections$.pipe(operators.catchError(function (error) { return rxjs.of(error); }), operators.switchMap(function (connections) {
                if (connections instanceof Error && connections.name === ErrorName.NoConnectivitySettingsError) {
                    return rxjs.of([connections]);
                }
                return rxjs.forkJoin([
                    rxjs.of(connections),
                    _this.protocols$.pipe(operators.catchError(function (error) { return rxjs.of(error); }))
                ]);
            }), operators.map(function (results) {
                return results.filter(function (result) {
                    return result instanceof Error;
                });
            }), operators.switchMap(function (errors) {
                return errors.length === 0 ? rxjs.of([]) : rxjs.throwError(errors);
            }));
            this.fields = [
                {
                    key: 'id',
                    type: 'string',
                    templateOptions: {
                        placeholder: 'FED987',
                        label: ngxComponents.gettext('ID'),
                        required: true,
                        pattern: '(0x){0,1}[0-9A-F]+(h){0,1}'
                    },
                    validation: {
                        messages: {
                            pattern: ngxComponents.gettext('Must be a valid hexadecimal number.')
                        }
                    }
                },
                {
                    key: 'pac',
                    type: 'string',
                    templateOptions: {
                        placeholder: 'FEDCBA9876543210',
                        label: ngxComponents.gettext('PAC'),
                        required: true,
                        pattern: '^([a-fA-F0-9]{16})$'
                    },
                    validation: {
                        messages: {
                            pattern: ngxComponents.gettext('Must be a valid 16 digit hexadecimal number.')
                        }
                    }
                },
                {
                    key: 'connection',
                    type: 'typeahead',
                    templateOptions: {
                        label: ngxComponents.gettext('Connection'),
                        required: true,
                        c8yForOptions: this.connections$,
                        displayProperty: 'name',
                        valueProperties: ['name']
                    }
                },
                {
                    key: 'contract',
                    type: 'typeahead',
                    templateOptions: {
                        label: ngxComponents.gettext('Contract'),
                        required: true,
                        placeholder: 'Free contract_25',
                        displayProperty: 'name',
                        valueProperties: ['id'],
                        description: ngxComponents.gettext('Only active contracts with free slots are displayed.')
                    },
                    hooks: {
                        onInit: function (field) {
                            var connectionControl = field.form.get('connection');
                            connectionControl.valueChanges
                                .pipe(operators.takeUntil(_this.unsubscribe$), operators.mergeMap(function () { return _this.getContracts$(_this.form.get('connection').value.name); }))
                                .subscribe(function (profiles) {
                                field.templateOptions.c8yForOptions = rxjs.of(profiles);
                                field.formControl.setValue(null);
                            }, function (error) {
                                field.form.controls.contract.setErrors({ contract: true });
                                field.validators.contract.message = error.message;
                            });
                        }
                    },
                    validators: {
                        contract: {
                            expression: function (control) {
                                return control.status === 'VALID';
                            },
                            message: function () { return ''; },
                        },
                    }
                },
                {
                    key: 'deviceType',
                    type: 'typeahead',
                    templateOptions: {
                        label: ngxComponents.gettext('Device protocol'),
                        required: true,
                        c8yForOptions: this.protocols$,
                        displayProperty: 'name',
                        valueProperties: ['id', 'name']
                    }
                },
                {
                    key: 'productCertificate',
                    type: 'string',
                    templateOptions: {
                        placeholder: 'P_001F_EDCB_01',
                        label: ngxComponents.gettext('Product certificate key'),
                        pattern: 'P_[0-9A-F]{4}_[0-9A-F]{4}_[0-9A-F]{2}',
                        description: ngxComponents.gettext('If no product certificate key is specified, the device is considered a prototype.')
                    },
                    validation: {
                        messages: {
                            pattern: function (error, field) { return _this.translateService.instant(ngxComponents.gettext('Must be a valid product certificate key, for example, {{ example }}'), { example: 'P_001F_EDCB_01' }); }
                        }
                    }
                }
            ];
            this.registrationStepLabels = {
                next: ngxComponents.gettext('Register')
            };
            this.finalStepLabels = {
                back: ngxComponents.gettext('Close')
            };
            this.state = 'loadPending';
            this.errors$ = new rxjs.BehaviorSubject([]);
            this.errorMessages$ = this.errors$.pipe(operators.map(function (errors) { return errors.map(function (error) { return error.message; }); }), operators.map(function (messages) { return lodashEs.uniq(messages); }));
            this.load$.subscribe(function () {
                _this.state = 'loadSuccess';
            }, function (errors) {
                _this.state = 'loadError';
                _this.errors$.next(errors);
            });
        }
        SigfoxDeviceRegistrationComponent.prototype.create = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var sigfoxDevice, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.state = 'registrationPending';
                            sigfoxDevice = this.getSigfoxDeviceToSend();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.sigfoxService.createDevice(sigfoxDevice)];
                        case 2:
                            _a.sent();
                            this.state = 'registrationSuccess';
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _a.sent();
                            this.state = 'registrationError';
                            this.errors$.next([error_1]);
                            return [3 /*break*/, 4];
                        case 4:
                            event.stepper.next();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SigfoxDeviceRegistrationComponent.prototype.getSigfoxDeviceToSend = function () {
            var sigfoxDevice = lodashEs.cloneDeep(this.model);
            sigfoxDevice.lnsConnectionName = this.model.connection.name;
            sigfoxDevice.contractId = this.model.contract.id;
            sigfoxDevice.prototype = !sigfoxDevice.productCertificate;
            delete sigfoxDevice.contract;
            delete sigfoxDevice.connection;
            return sigfoxDevice;
        };
        SigfoxDeviceRegistrationComponent.prototype.getContracts$ = function (name) {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.sigfoxService.getContracts(name)); }).pipe(operators.shareReplay(1));
        };
        SigfoxDeviceRegistrationComponent.prototype.getProtocols$ = function () {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.sigfoxService.getAvailableProtocols()); }).pipe(operators.shareReplay(1));
        };
        SigfoxDeviceRegistrationComponent.prototype.getConnections$ = function () {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.sigfoxService.getConnections()); }).pipe(operators.shareReplay(1));
        };
        SigfoxDeviceRegistrationComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        return SigfoxDeviceRegistrationComponent;
    }());
    SigfoxDeviceRegistrationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-sigfox-device-registration',
                    template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Sigfox registration' | translate }}</h4>\n  </ng-container>\n  <ng-container *ngIf=\"state === 'loadPending'; else registrationForm\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </ng-container>\n\n  <!--Formly schema is rendered-->\n  <ng-template #registrationForm>\n    <c8y-stepper\n      [hideStepProgress]=\"true\"\n      linear\n      *ngIf=\"(errorMessages$ | async).length === 0; else errorMessagesPresent\"\n    >\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"p-b-16\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              sticky-top\n              separator-bottom\n              text-16 text-medium\n              text-center\n              bg-component\n            \"\n          >\n          {{ 'Register a single Sigfox device' | translate }}\n          </p>\n          <formly-form\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            class=\"d-block p-l-24 p-r-24 p-t-16\"\n          ></formly-form>\n        </div>\n        <c8y-stepper-buttons\n          [labels]=\"registrationStepLabels\"\n          (onNext)=\"create($event)\"\n          (onCancel)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [pending]=\"state === 'registrationPending'\"\n          [disabled]=\"!form.valid\"\n          class=\"modal-footer d-block sticky-bottom separator-top bg-white\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n      <cdk-step state=\"final\">\n        <!--success scenario-->\n        <div class=\"p-16 text-center\" *ngIf=\"state === 'registrationPending'\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <div class=\"m-24\">\n          <c8y-operation-result\n            *ngIf=\"state === 'registrationSuccess'\"\n            text=\"{{ 'Device registered' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead m-b-0\"\n          ></c8y-operation-result>\n        </div>\n\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          (onCustom)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ custom: true }\"\n          [labels]=\"finalStepLabels\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </c8y-stepper>\n  </ng-template>\n\n  <!--Failure scenario-->\n  <ng-template #errorMessagesPresent>\n    <div class=\"m-24\">\n      <c8y-operation-result\n        *ngIf=\"state === 'registrationError'\"\n        text=\"{{ 'Failed to register' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n      <div\n        *ngFor=\"let msg of errorMessages$ | async\"\n        class=\"m-b-8\"\n        [ngClass]=\"{\n          'text-center': state === 'registrationError',\n          'alert alert-danger': state === 'loadError'\n        }\"\n      >\n        <span [innerHTML]=\"msg | translate\"></span>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Close' | translate }}\"\n        (click)=\"bsModalRef.hide()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        translate\n      >\n        Close\n      </button>\n    </div>\n  </ng-template>\n</c8y-modal>"
                },] }
    ];
    SigfoxDeviceRegistrationComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: SigfoxProviderService },
        { type: i4.TranslateService }
    ]; };

    var SigfoxDeviceRegistrationButtonComponent = /** @class */ (function () {
        function SigfoxDeviceRegistrationButtonComponent(modalService) {
            this.modalService = modalService;
        }
        SigfoxDeviceRegistrationButtonComponent.prototype.open = function () {
            this.modalService.show(SigfoxDeviceRegistrationComponent, {
                class: 'modal-sm',
                ignoreBackdropClick: true
            });
        };
        return SigfoxDeviceRegistrationButtonComponent;
    }());
    SigfoxDeviceRegistrationButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-sigfox-registration',
                    template: "<button (click)=\"open()\"><i c8yIcon=\"c8y-device-connect\"></i> {{ 'Sigfox' | translate }} </button>"
                },] }
    ];
    SigfoxDeviceRegistrationButtonComponent.ctorParameters = function () { return [
        { type: modal.BsModalService }
    ]; };

    var SigfoxDeviceRegistrationFactory = /** @class */ (function () {
        function SigfoxDeviceRegistrationFactory(tenantService) {
            this.tenantService = tenantService;
        }
        SigfoxDeviceRegistrationFactory.prototype.get = function () {
            var items = [];
            if (this.tenantService.isMicroserviceSubscribedInCurrentTenant('sigfox-agent')) {
                items.push({
                    template: SigfoxDeviceRegistrationButtonComponent,
                    priority: 98,
                    category: 'single'
                });
            }
            return items;
        };
        return SigfoxDeviceRegistrationFactory;
    }());
    SigfoxDeviceRegistrationFactory.decorators = [
        { type: i0.Injectable }
    ];
    SigfoxDeviceRegistrationFactory.ctorParameters = function () { return [
        { type: ngxComponents.TenantUiService }
    ]; };

    var SigfoxDeviceRegistrationModule = /** @class */ (function () {
        function SigfoxDeviceRegistrationModule() {
        }
        return SigfoxDeviceRegistrationModule;
    }());
    SigfoxDeviceRegistrationModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [ngxComponents.CoreModule, ngxComponents.CommonModule],
                    declarations: [SigfoxDeviceRegistrationButtonComponent, SigfoxDeviceRegistrationComponent],
                    providers: [
                        {
                            provide: registerDevice.HOOK_DEVICE_REGISTRATION,
                            useClass: SigfoxDeviceRegistrationFactory,
                            multi: true
                        },
                        SigfoxProviderService
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.SigfoxDeviceRegistrationButtonComponent = SigfoxDeviceRegistrationButtonComponent;
    exports.SigfoxDeviceRegistrationComponent = SigfoxDeviceRegistrationComponent;
    exports.SigfoxDeviceRegistrationFactory = SigfoxDeviceRegistrationFactory;
    exports.SigfoxDeviceRegistrationModule = SigfoxDeviceRegistrationModule;
    exports["ɵa"] = SigfoxProviderService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-sigfox-device-registration.umd.js.map
