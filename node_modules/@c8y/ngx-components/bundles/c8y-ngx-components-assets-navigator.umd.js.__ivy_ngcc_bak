(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@c8y/ngx-components'), require('lodash-es'), require('rxjs'), require('@angular/core'), require('@c8y/client'), require('@c8y/ngx-components/api'), require('rxjs/operators'), require('@c8y/client'), require('@c8y/client'), require('ngx-bootstrap/collapse'), require('ngx-bootstrap/dropdown'), require('@ngx-translate/core'), require('@angular/forms'), require('lodash')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/assets-navigator', ['exports', '@c8y/ngx-components', 'lodash-es', 'rxjs', '@angular/core', '@c8y/client', '@c8y/ngx-components/api', 'rxjs/operators', '@c8y/client', '@c8y/client', 'ngx-bootstrap/collapse', 'ngx-bootstrap/dropdown', '@ngx-translate/core', '@angular/forms', 'lodash'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["assets-navigator"] = {}), global.c8y["ngx-components"], global.lodashEs, global.rxjs, global.ng.core, global.client, global.c8y["ngx-components"].api, global.rxjs.operators, global.i1, global.i4, global.collapse, global.dropdown, global.core, global.ng.forms, global.lodash));
})(this, (function (exports, i3, lodashEs, rxjs, i0, client, i2, operators, i1, i4, collapse, dropdown, core, forms, lodash) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.Action = void 0;
    (function (Action) {
        Action[Action["FETCH"] = 0] = "FETCH";
        Action[Action["NEXT"] = 1] = "NEXT";
        Action[Action["REFRESH"] = 2] = "REFRESH";
        Action[Action["LOADING_DONE"] = 3] = "LOADING_DONE";
    })(exports.Action || (exports.Action = {}));

    exports.GroupFragment = void 0;
    (function (GroupFragment) {
        GroupFragment["groupType"] = "c8y_DeviceGroup";
        GroupFragment["subGroupType"] = "c8y_DeviceSubgroup";
        GroupFragment["groupFragmentType"] = "c8y_IsDeviceGroup";
        GroupFragment["dataBrokerSourceFragment"] = "c8y_BrokerSource";
        GroupFragment["dynamicGroupType"] = "c8y_DynamicGroup";
        GroupFragment["dynamicGroupFragment"] = "c8y_IsDynamicGroup";
        GroupFragment["dynamicGroupColumnConfig"] = "c8y_UIDeviceFilterConfig";
        GroupFragment["dynamicGroupQueryString"] = "c8y_DeviceQueryString";
    })(exports.GroupFragment || (exports.GroupFragment = {}));

    var LoadMoreNode = /** @class */ (function (_super) {
        __extends(LoadMoreNode, _super);
        function LoadMoreNode() {
            var _this = _super.call(this) || this;
            _this.label = i3.gettext('Load more');
            _this.icon = 'plus';
            _this.droppable = true;
            _this.priority = -Infinity;
            return _this;
        }
        LoadMoreNode.prototype.toString = function () {
            return LoadMoreNode.NAME;
        };
        LoadMoreNode.prototype.isGroup = function () {
            return false;
        };
        return LoadMoreNode;
    }(i3.NavigatorNode));
    LoadMoreNode.NAME = 'LoadMoreNode';

    var AssetNode = /** @class */ (function (_super_1) {
        __extends(AssetNode, _super_1);
        function AssetNode(service, config) {
            if (config === void 0) { config = {}; }
            var _this = this;
            var _a, _b, _c, _d, _e;
            _this = _super_1.call(this, config) || this;
            _this.service = service;
            _this.config = config;
            _this.hideDevices = false;
            _this.filterQuery$ = new rxjs.BehaviorSubject('');
            _this.showChildDevices = false;
            /**
             * Asset node children (subentries).
             */
            _this.children = [];
            _this.root = _this.root || false;
            _this.hideDevices = (_a = config.hideDevices) !== null && _a !== void 0 ? _a : _this.hideDevices;
            _this.mo = _this.mo || {};
            _this.path = _this.getPath();
            _this.draggable = !((_c = (_b = _this.service) === null || _b === void 0 ? void 0 : _b.moduleConfig) === null || _c === void 0 ? void 0 : _c.disableDragAndDrop) && !_this.root;
            _this.droppable =
                !((_e = (_d = _this.service) === null || _d === void 0 ? void 0 : _d.moduleConfig) === null || _e === void 0 ? void 0 : _e.disableDragAndDrop) && !_this.isDeviceOrProbablyChildDevice;
            _this.routerLinkExact = _this.root;
            _this.updateIcon(false);
            _this.onUpdateSubscription = _this.service
                .onUpdate(_this)
                .subscribe(function (_f) {
                var data = _f.data, method = _f.method;
                return _this.refresh(data, method);
            });
            _this.setLabel();
            _this.iconComponent = _this.isDeviceOrProbablyChildDevice ? i3.DeviceStatusComponent : undefined;
            return _this;
        }
        Object.defineProperty(AssetNode.prototype, "hasChildren", {
            get: function () {
                return this.root || this.service.isGroup(this.mo);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AssetNode.prototype, "isDevice", {
            get: function () {
                return !!this.mo.c8y_IsDevice;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AssetNode.prototype, "isDeviceOrProbablyChildDevice", {
            get: function () {
                return this.isDevice || this.isNeitherDeviceOrGroup;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AssetNode.prototype, "isNeitherDeviceOrGroup", {
            get: function () {
                return (!this.service.isGroup(this.mo) &&
                    !this.service.isDynamicGroup(this.mo) &&
                    !this.isDevice &&
                    !this.root);
            },
            enumerable: false,
            configurable: true
        });
        AssetNode.prototype.getPath = function () {
            if (this.config.path) {
                return this.config.path;
            }
            return this.root
                ? 'group'
                : this.isDeviceOrProbablyChildDevice
                    ? "device/" + this.mo.id
                    : "group/" + this.mo.id;
        };
        AssetNode.prototype.openOnStart = function (url) {
            var urlRegex = /^\/group\//;
            if (this.root) {
                if (this.service.moduleConfig.openOnStart || urlRegex.test(url)) {
                    return true;
                }
            }
            var matches = url.match(/\/(group)\/(\d+)/);
            var isMatch = false;
            if (matches) {
                var id_1 = matches[2];
                isMatch = []
                    .concat(lodashEs.get(this.mo, 'childAssets.references', []))
                    .some(function (_f) {
                    var managedObject = _f.managedObject;
                    return managedObject.id === id_1;
                });
                return isMatch;
            }
            return false;
        };
        AssetNode.prototype.refresh = function (mo, method) {
            if (mo === void 0) { mo = {}; }
            if (method === void 0) { method = 'GET'; }
            if (mo.id === this.mo.id) {
                this.mo = mo;
                this.setLabel();
            }
            else if (method === 'DELETE') {
                this.parents.forEach(function (node) { return node.refresh(); });
                return;
            }
            if (this.events) {
                this.events.next(exports.Action.REFRESH);
            }
        };
        AssetNode.prototype.setLabel = function () {
            this.label = this.config.label || (this.root && i3.gettext('Groups')) || this.mo.name || '--';
        };
        AssetNode.prototype.click = function (options) {
            if (options === void 0) { options = {}; }
            if (this.isDeviceOrProbablyChildDevice && !this.showChildDevices) {
                this.service.preferBreadcrumb(this.parents);
                return;
            }
            this.hookEvents();
            this.updateIcon(options.open);
            if (options.open) {
                this.events.next(exports.Action.FETCH);
            }
        };
        AssetNode.prototype.sort = function () {
            this.children.sort(function (a, b) {
                if (a.priority > b.priority) {
                    return -1;
                }
                else if (a.priority < b.priority) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        };
        AssetNode.prototype.addManagedObject = function (mo) {
            var childAdditions = this.mo.childAdditions;
            if (!this.isChildAddition(childAdditions, mo)) {
                this.add(this.service.createChildNode(mo, { hideDevices: this.hideDevices }));
            }
        };
        AssetNode.prototype.isChildAddition = function (childAdditions, mo) {
            return (childAdditions && childAdditions.references.some(function (_f) {
                var id = _f.managedObject.id;
                return id === mo.id;
            }));
        };
        AssetNode.prototype.destroy = function () {
            this.onUpdateSubscription.unsubscribe();
        };
        Object.defineProperty(AssetNode.prototype, "canDrop", {
            get: function () {
                var _this = this;
                var nodeToMove = this.service.draggedData;
                if (nodeToMove) {
                    var shouldGetChildOfItsOwn = !!nodeToMove.find(function (child) { return child === _this; });
                    var isAlreadyChild = this.children.some(function (child) { return child.mo && child.mo.id === nodeToMove.mo.id; });
                    var preventMove = this === nodeToMove || shouldGetChildOfItsOwn || isAlreadyChild;
                    return this.droppable && !preventMove && this.service.canDropNode(this.root);
                }
                return this.droppable;
            },
            enumerable: false,
            configurable: true
        });
        AssetNode.prototype.dragStart = function ($event) {
            _super_1.prototype.dragStart.call(this, $event);
            this.service.draggedData = this;
            this.service.rootNode.droppable = !this.isDeviceOrProbablyChildDevice;
        };
        AssetNode.prototype.dragEnd = function ($event) {
            _super_1.prototype.dragEnd.call(this, $event);
        };
        AssetNode.prototype.drop = function ($event) {
            var _super = Object.create(null, {
                drop: { get: function () { return _super_1.prototype.drop; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                var nodeToMove;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            nodeToMove = this.service.draggedData;
                            // TODO remove when asset type node can be used on the root level.
                            if (this.root && this.isAsset(nodeToMove)) {
                                this.service.alert.info(i3.gettext('Asset type node cannot become root node.'));
                                this.draggedHover = false;
                                this.service.draggedData = undefined;
                                return [2 /*return*/];
                            }
                            _super.drop.call(this, $event);
                            if (!this.canDrop) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.moveNode(nodeToMove)];
                        case 1:
                            _f.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            this.draggedHover = false;
                            this.service.draggedData = undefined;
                            _f.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AssetNode.prototype.hookEvents = function () {
            var _this = this;
            if (!this.events) {
                this.events = new rxjs.Subject();
                this.events.subscribe(function (evt) {
                    if (!_this.loading) {
                        _this.handleEvent(evt);
                    }
                });
            }
        };
        AssetNode.prototype.toString = function () {
            return AssetNode.NAME;
        };
        /**
         * Checks if the current node has child devices.
         */
        AssetNode.prototype.hasChildDevices = function () {
            return this.mo && this.mo.c8y_IsDevice && this.mo.childDevices.references.length > 0;
        };
        AssetNode.prototype.fetch = function () {
            return this.root
                ? this.service.getRootNodes()
                : this.service.getGroupItems(this.mo.id, this.hideDevices
                    ? {
                        query: "$filter=(has(" + exports.GroupFragment.groupFragmentType + "))$orderby=name"
                    }
                    : {});
        };
        AssetNode.prototype.countChildren = function () {
            return this.children.length;
        };
        AssetNode.prototype.handleEvent = function (evt) {
            return __awaiter(this, void 0, void 0, function () {
                var _f, _g;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            if (!(!this.countChildren() && evt === exports.Action.FETCH)) return [3 /*break*/, 2];
                            this.loading = true;
                            _f = this.addNodes;
                            return [4 /*yield*/, this.fetch()];
                        case 1:
                            _f.apply(this, [_h.sent()]);
                            this.loading = false;
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(evt === exports.Action.NEXT)) return [3 /*break*/, 4];
                            this.loadMoreNode.loading = true;
                            _g = this.addNodes;
                            return [4 /*yield*/, this.paging.next()];
                        case 3:
                            _g.apply(this, [_h.sent()]);
                            this.loadMoreNode.loading = false;
                            return [3 /*break*/, 5];
                        case 4:
                            if (evt === exports.Action.REFRESH) {
                                this.loading = false;
                                this.paging = undefined;
                                this.loadMoreNode = undefined;
                                this.empty();
                                this.events.next(exports.Action.FETCH);
                            }
                            _h.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        AssetNode.prototype.addNodes = function (res) {
            var _this = this;
            if (res.paging) {
                var _f = (this.paging = res.paging), currentPage = _f.currentPage, nextPage = _f.nextPage, pageSize = _f.pageSize;
                if (currentPage === 1) {
                    this.empty();
                }
                var itemsCount = res.data.length;
                var moreItemsAvailable = !!nextPage && itemsCount === pageSize;
                this.toggleLoadMore(moreItemsAvailable);
            }
            (res.data || res).map(function (mo) {
                return _this.addManagedObject(mo);
            });
            this.events.next(exports.Action.LOADING_DONE);
        };
        AssetNode.prototype.toggleLoadMore = function (show) {
            var _this = this;
            if (!this.loadMoreNode && show) {
                this.loadMoreNode = new LoadMoreNode();
                this.add(this.loadMoreNode);
                this.loadMoreNode.click = lodashEs.debounce(function () { return _this.events.next(exports.Action.NEXT); }, 300, {
                    leading: true,
                    trailing: false
                });
            }
            if (this.loadMoreNode) {
                this.loadMoreNode.hidden = !show;
            }
        };
        AssetNode.prototype.moveNode = function (nodeToMove) {
            return __awaiter(this, void 0, void 0, function () {
                var isCopy, ex_1;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            _f.trys.push([0, 6, 7, 8]);
                            return [4 /*yield*/, this.showDropConfirm(nodeToMove)];
                        case 1:
                            isCopy = _f.sent();
                            return [4 /*yield*/, this.verifyNodeAccess(nodeToMove)];
                        case 2:
                            _f.sent();
                            return [4 /*yield*/, this.addMovedNode(nodeToMove)];
                        case 3:
                            _f.sent();
                            if (!!isCopy) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.removeMovedNode(nodeToMove)];
                        case 4:
                            _f.sent();
                            _f.label = 5;
                        case 5:
                            this.expand();
                            return [3 /*break*/, 8];
                        case 6:
                            ex_1 = _f.sent();
                            if (ex_1) {
                                this.service.alert.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 8];
                        case 7:
                            this.draggedHover = false;
                            this.service.draggedData = undefined;
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        AssetNode.prototype.showDropConfirm = function (nodeToMove) {
            return __awaiter(this, void 0, void 0, function () {
                var buttons;
                return __generator(this, function (_f) {
                    this.confirm.title = i3.gettext('Move');
                    this.confirm.message = i3.gettext('Do you want to move the group?');
                    buttons = [
                        {
                            label: i3.gettext('Cancel'),
                            action: function () { return Promise.reject(); }
                        },
                        {
                            label: i3.gettext('Move'),
                            status: 'default',
                            action: function () { return Promise.resolve(false); }
                        }
                    ];
                    if (nodeToMove.isDeviceOrProbablyChildDevice) {
                        this.confirm.title = i3.gettext('Move or add');
                        this.confirm.message = i3.gettext('Do you want to move or add the device?');
                        buttons.push({
                            label: i3.gettext('Add'),
                            status: 'primary',
                            action: function () { return Promise.resolve(true); }
                        });
                    }
                    return [2 /*return*/, this.confirm.show(buttons)];
                });
            });
        };
        AssetNode.prototype.verifyNodeAccess = function (nodeToMove) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_f) {
                    return [2 /*return*/, this.service.inventory.update({ id: nodeToMove.mo.id })];
                });
            });
        };
        AssetNode.prototype.addMovedNode = function (nodeToMove) {
            return __awaiter(this, void 0, void 0, function () {
                var mo;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            if (!(this.root && !this.isAsset(nodeToMove))) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.service.inventory.update({
                                    id: nodeToMove.mo.id,
                                    type: exports.GroupFragment.groupType
                                })];
                        case 1:
                            mo = (_f.sent()).data;
                            this.addManagedObject(mo);
                            return [2 /*return*/];
                        case 2: return [4 /*yield*/, this.service.inventory.childAssetsAdd(nodeToMove.mo, this.mo)];
                        case 3:
                            mo = (_f.sent()).data;
                            this.addManagedObject(mo);
                            return [2 /*return*/];
                    }
                });
            });
        };
        AssetNode.prototype.isAsset = function (nodeToMove) {
            var _a;
            // TODO use isAsset check when https://github.softwareag.com/IOTA/cumulocity-ui/pull/690 is merged.
            // Do not override asset type!
            return (_a = nodeToMove.mo) === null || _a === void 0 ? void 0 : _a.c8y_IsAsset;
        };
        AssetNode.prototype.removeMovedNode = function (nodeToMove) {
            return __awaiter(this, void 0, void 0, function () {
                var _f, _g, parent, e_1_1;
                var e_1, _h;
                return __generator(this, function (_j) {
                    switch (_j.label) {
                        case 0:
                            _j.trys.push([0, 8, 9, 10]);
                            _f = __values(nodeToMove.parents), _g = _f.next();
                            _j.label = 1;
                        case 1:
                            if (!!_g.done) return [3 /*break*/, 7];
                            parent = _g.value;
                            if (parent.mo && parent.mo.type === exports.GroupFragment.dynamicGroupType) {
                                return [3 /*break*/, 7]; // smart groups don't need to be changed
                            }
                            if (!(parent.root && !this.isAsset(nodeToMove))) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.service.inventory.update({
                                    id: nodeToMove.mo.id,
                                    type: exports.GroupFragment.subGroupType
                                })];
                        case 2:
                            _j.sent();
                            _j.label = 3;
                        case 3:
                            if (!!parent.root) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.service.inventory.childAssetsRemove(nodeToMove.mo, parent.mo)];
                        case 4:
                            _j.sent();
                            _j.label = 5;
                        case 5:
                            parent.remove(nodeToMove);
                            _j.label = 6;
                        case 6:
                            _g = _f.next();
                            return [3 /*break*/, 1];
                        case 7: return [3 /*break*/, 10];
                        case 8:
                            e_1_1 = _j.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 10];
                        case 9:
                            try {
                                if (_g && !_g.done && (_h = _f.return)) _h.call(_f);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 10: return [2 /*return*/];
                    }
                });
            });
        };
        AssetNode.prototype.updateIcon = function (open) {
            this.icon = this.service.icon(
            // if it's root we are going to pass a fake mo to get the same icon as groups
            this.root ? { c8y_IsDeviceGroup: {} } : this.mo, open);
        };
        return AssetNode;
    }(i3.NavigatorNode));
    AssetNode.NAME = 'AssetNode';

    var DynamicGroupNode = /** @class */ (function (_super) {
        __extends(DynamicGroupNode, _super);
        function DynamicGroupNode(service, config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, service, config) || this;
            _this.service = service;
            _this.draggable = false;
            _this.droppable = false;
            return _this;
        }
        Object.defineProperty(DynamicGroupNode.prototype, "hasChildren", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DynamicGroupNode.prototype, "query", {
            get: function () {
                return this.mo.c8y_DeviceQueryString;
            },
            enumerable: false,
            configurable: true
        });
        DynamicGroupNode.prototype.fetch = function () {
            return this.service.getDynamicGroupItems(this.query);
        };
        return DynamicGroupNode;
    }(AssetNode));

    var ASSET_NAVIGATOR_CONFIG = new i0.InjectionToken('AssetNodeConfig');

    var MO_TYPES = [
        'asset',
        'dynamicGroup',
        'brokerSource',
        'brokerSourceInactive',
        'group',
        'other'
    ];
    var DeviceGroupService = /** @class */ (function () {
        function DeviceGroupService(assetTypesService) {
            this.assetTypesService = assetTypesService;
            this.icons = {
                brokerSourceInactive: {
                    icon: 'c8y-group-remote-inactive',
                    iconOpen: 'c8y-group-remote-inactive'
                },
                brokerSource: {
                    icon: 'c8y-group-remote',
                    iconOpen: 'c8y-group-remote-open'
                },
                group: {
                    icon: 'c8y-group',
                    iconOpen: 'c8y-group-open'
                },
                dynamicGroup: {
                    icon: 'c8y-group-smart',
                    iconOpen: 'c8y-group-smart-open'
                },
                other: {
                    icon: 'exchange',
                    iconClass: 'statusUnknown'
                }
            };
            this.dataBrokerSourceFragmentInactive = "_" + exports.GroupFragment.dataBrokerSourceFragment;
        }
        /**
         * Finds an icon based on the contents of a managed object.
         * It takes into account factors such as type, and specific fragemnts.
         * @param mo Managed object to be checked.
         * @param open Determines whether the method should return an alternative icon showing the open state.
         * @returns Returns an icon.
         */
        DeviceGroupService.prototype.icon = function (mo, open) {
            if (open === void 0) { open = false; }
            var icon;
            var genericMoType = this.determineMoType(mo);
            if (genericMoType === 'asset') {
                icon = this.getAssetCustomIcon(mo.type, open);
                return icon;
            }
            var typeIcons = this.getDefaultIcon(genericMoType);
            return (open && typeIcons.iconOpen) || typeIcons.icon;
        };
        /**
         * Checks whether a given managed object is a group.
         * @param mo Managed object to be checked.
         * @returns Returns true if the managed object is a group.
         */
        DeviceGroupService.prototype.isGroup = function (mo) {
            return !!mo[exports.GroupFragment.groupFragmentType] || mo.type === exports.GroupFragment.groupType;
        };
        /**
         * Checks whether a given managed object is a dynamic group.
         * @param mo Managed object to be checked.
         * @returns Returns true if the managed object is a dynamic group.
         */
        DeviceGroupService.prototype.isDynamicGroup = function (mo) {
            return !!mo[exports.GroupFragment.dynamicGroupFragment] || mo.type === exports.GroupFragment.dynamicGroupType;
        };
        /**
         * Checks whether a given managed object is a data broker.
         * @param mo Managed object to be checked.
         * @returns Returns true if the managed object is a data broker.
         */
        DeviceGroupService.prototype.isDataBroker = function (mo) {
            return (!!mo[exports.GroupFragment.dataBrokerSourceFragment] || !!mo[this.dataBrokerSourceFragmentInactive]);
        };
        /**
         * Checks whether a given managed object is a data broker active.
         * @param mo Managed object to be checked.
         * @returns Returns true if the managed object is a data broker active.
         */
        DeviceGroupService.prototype.isDataBrokerActive = function (mo) {
            return (!!mo[exports.GroupFragment.dataBrokerSourceFragment] && !mo[this.dataBrokerSourceFragmentInactive]);
        };
        /**
         * Checks whether a given managed object is an asset.
         * @param mo Managed object to be checked.
         * @returns Returns true if the managed object is an asset.
         */
        DeviceGroupService.prototype.isAsset = function (mo) {
            return !!mo.c8y_IsAsset;
        };
        /**
         * Checks whether the object belongs to any type of group.
         * Types of groups: group, dynamic group, data broker, data broker active.
         * @param mo Managed object to be checked.
         * @returns Returns true if the managed object belongs to the group category.
         */
        DeviceGroupService.prototype.isAnyGroup = function (mo) {
            return (this.isGroup(mo) ||
                this.isDynamicGroup(mo) ||
                this.isDataBroker(mo) ||
                this.isDataBrokerActive(mo));
        };
        /**
         * Checks whether a given managed object is a device.
         * @param mo Managed object to be checked.
         * @returns Returns true if the managed object is a device.
         */
        DeviceGroupService.prototype.isDevice = function (mo) {
            return !!mo.c8y_IsDevice;
        };
        DeviceGroupService.prototype.getAssetCustomIcon = function (moType, open) {
            if (open === void 0) { open = false; }
            return this.assetTypesService.getIcon(moType, open);
        };
        DeviceGroupService.prototype.getDefaultIcon = function (moType) {
            return this.icons[moType];
        };
        DeviceGroupService.prototype.determineMoType = function (mo) {
            if (this.isAsset(mo)) {
                return 'asset';
            }
            if (this.isDynamicGroup(mo)) {
                return 'dynamicGroup';
            }
            if (this.isDataBrokerActive(mo)) {
                return 'brokerSource';
            }
            if (this.isDataBroker(mo)) {
                return 'brokerSourceInactive';
            }
            if (this.isGroup(mo)) {
                return 'group';
            }
            return 'other';
        };
        return DeviceGroupService;
    }());
    DeviceGroupService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DeviceGroupService_Factory() { return new DeviceGroupService(i0__namespace.ɵɵinject(i3__namespace.AssetTypesService)); }, token: DeviceGroupService, providedIn: "root" });
    DeviceGroupService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    DeviceGroupService.ctorParameters = function () { return [
        { type: i3.AssetTypesService }
    ]; };

    var AssetNodeService = /** @class */ (function () {
        function AssetNodeService(inventory, apiService, modal, alert, breadcrumbService, user, appState, optionsService, moduleConfig, deviceGroupService) {
            this.inventory = inventory;
            this.apiService = apiService;
            this.modal = modal;
            this.alert = alert;
            this.breadcrumbService = breadcrumbService;
            this.user = user;
            this.appState = appState;
            this.optionsService = optionsService;
            this.moduleConfig = moduleConfig;
            this.deviceGroupService = deviceGroupService;
            this.firstUrl = true;
            this.PAGE_SIZE = 20;
            this.moduleConfig = Object.assign({ rootNodePriority: 2000 }, (moduleConfig || {}));
            this.queriesUtil = new client.QueriesUtil();
        }
        AssetNodeService.prototype.icon = function (mo, open) {
            return this.deviceGroupService.icon(mo, open);
        };
        AssetNodeService.prototype.isGroup = function (mo) {
            return this.deviceGroupService.isGroup(mo);
        };
        AssetNodeService.prototype.isDynamicGroup = function (mo) {
            return this.deviceGroupService.isDynamicGroup(mo);
        };
        AssetNodeService.prototype.isDataBroker = function (mo) {
            return this.deviceGroupService.isDataBroker(mo);
        };
        AssetNodeService.prototype.isDataBrokerActive = function (mo) {
            return this.deviceGroupService.isDataBrokerActive(mo);
        };
        AssetNodeService.prototype.isAsset = function (mo) {
            return this.deviceGroupService.isAsset(mo);
        };
        AssetNodeService.prototype.isAnyGroup = function (mo) {
            return this.deviceGroupService.isAnyGroup(mo);
        };
        AssetNodeService.prototype.isDevice = function (mo) {
            return this.deviceGroupService.isDevice(mo);
        };
        AssetNodeService.prototype.createRootNode = function (config) {
            if (config === void 0) { config = {}; }
            this.rootNode = this.createAssetNode(Object.assign(Object.assign({ root: true }, config), { priority: this.moduleConfig.rootNodePriority, featureId: 'groups' }));
            return this.rootNode;
        };
        AssetNodeService.prototype.createDynamicGroupNode = function (config) {
            return new DynamicGroupNode(this, config);
        };
        AssetNodeService.prototype.createAssetNode = function (config) {
            return new AssetNode(this, config);
        };
        AssetNodeService.prototype.createChildNode = function (managedObject, config) {
            var type = managedObject.type;
            config.mo = managedObject;
            if (type === exports.GroupFragment.dynamicGroupType) {
                return this.createDynamicGroupNode(config);
            }
            return this.createAssetNode(config);
        };
        AssetNodeService.prototype.getRootNodes = function (customFilter) {
            var defaultFilter = {
                pageSize: this.PAGE_SIZE,
                withChildren: false,
                onlyRoots: !this.optionsService.disableOnlyRootsQuery,
                query: this.queriesUtil.buildQuery(this.navRootQueryFilter())
            };
            var groupFilter = Object.assign(Object.assign({}, defaultFilter), customFilter);
            // due to BE performance limitations we do not allow filtering and sorting for a user without inventory roles
            if (!this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_READ')) {
                delete groupFilter.query;
                Object.assign(groupFilter, {
                    fragmentType: exports.GroupFragment.groupFragmentType,
                    onlyRoots: true
                });
            }
            return this.inventory.list(this.createFilter(groupFilter));
        };
        AssetNodeService.prototype.getAllInventories = function (customFilter) {
            var defaultFilter = {
                pageSize: this.PAGE_SIZE,
                withChildren: false
            };
            var groupFilter = Object.assign(Object.assign({}, defaultFilter), customFilter);
            return this.inventory.list(this.createFilter(groupFilter));
        };
        AssetNodeService.prototype.getGroupItems = function (moId, extraFilter, withChildren, filterQuery) {
            if (extraFilter === void 0) { extraFilter = {}; }
            if (withChildren === void 0) { withChildren = false; }
            if (filterQuery === void 0) { filterQuery = ''; }
            var queryFilter = {
                withChildren: withChildren,
                pageSize: this.PAGE_SIZE,
                query: this.groupQueryFilter(moId, filterQuery)
            };
            return this.inventory.childAssetsList(moId, Object.assign(Object.assign({}, queryFilter), extraFilter));
        };
        AssetNodeService.prototype.getUnassignedDevices = function (withChildren, filterQuery) {
            if (withChildren === void 0) { withChildren = false; }
            if (filterQuery === void 0) { filterQuery = ''; }
            var queryFilter = {
                fragmentType: 'c8y_IsDevice',
                onlyRoots: true,
                withChildren: withChildren,
                pageSize: this.PAGE_SIZE,
                q: this.getUnassignedDevicesQueryStr(filterQuery)
            };
            return this.inventory.list(this.createFilter(queryFilter));
        };
        AssetNodeService.prototype.getDynamicGroupItems = function (groupQuery, filterObj) {
            if (filterObj === void 0) { filterObj = {}; }
            var query = filterObj.query, queryParams = __rest(filterObj, ["query"]);
            var orderByQuery = query;
            var queryFilter = Object.assign({ q: this.buildCombinedQuery(groupQuery, orderByQuery) }, queryParams);
            return this.inventory.list(this.createFilter(queryFilter));
        };
        AssetNodeService.prototype.getDeviceChildren = function (moId, extraFilter, filterQuery, withChildren) {
            if (extraFilter === void 0) { extraFilter = {}; }
            if (filterQuery === void 0) { filterQuery = ''; }
            if (withChildren === void 0) { withChildren = false; }
            var queryFilter = {
                withChildren: withChildren,
                pageSize: this.PAGE_SIZE,
                query: this.groupQueryFilter(moId, filterQuery)
            };
            return this.inventory.childDevicesList(moId, Object.assign(Object.assign({}, queryFilter), extraFilter));
        };
        AssetNodeService.prototype.getUnassignedDevicesQueryStr = function (filterQuery) {
            var hasGroupId = filterQuery.includes('bygroupid');
            // Fetch all unassigned devices.
            var defaultQueryStr = '$orderby=name';
            // filterQuery is a custom query to fetch unassigned devices filtered by name.
            return hasGroupId || !filterQuery ? defaultQueryStr : filterQuery;
        };
        AssetNodeService.prototype.groupQueryFilter = function (moId, filterQuery) {
            if (!filterQuery) {
                return "$filter=(bygroupid(" + moId + "))$orderby=name";
            }
            return filterQuery;
        };
        AssetNodeService.prototype.navRootQueryFilter = function () {
            var navRootFilter = this.rootQueryFilter();
            navRootFilter.__orderby = [{ name: 1 }];
            return navRootFilter;
        };
        AssetNodeService.prototype.rootQueryFilter = function () {
            var moduleConfig = this.moduleConfig;
            var rootFilter = this.optionsService.disableOnlyRootsQuery
                ? {
                    __filter: {
                        type: exports.GroupFragment.groupType
                    },
                    __orderby: []
                }
                : {
                    __filter: {
                        __has: exports.GroupFragment.groupFragmentType
                    },
                    __orderby: []
                };
            if (moduleConfig.smartGroups) {
                var queryFilter = {
                    __filter: {
                        __and: [
                            {
                                type: exports.GroupFragment.dynamicGroupType
                            },
                            {
                                __has: exports.GroupFragment.dynamicGroupFragment
                            },
                            { __not: { __has: exports.GroupFragment.dynamicGroupFragment + ".invisible" } }
                        ]
                    }
                };
                this.queriesUtil.addOrFilter(rootFilter, queryFilter);
            }
            return rootFilter;
        };
        AssetNodeService.prototype.onUpdate = function (_a) {
            var _this = this;
            var mo = _a.mo, root = _a.root;
            if (mo.id) {
                return this.apiService
                    .hookResponse(function (_a) {
                    var url = _a.url, method = _a.method;
                    return ['PUT', 'DELETE', 'POST'].includes(method) &&
                        RegExp("((inventory/managedObjects)|(service/smartgroup/smartgroups))/" + mo.id).test(url);
                })
                    .pipe(operators.filter(function () { return !_this.draggedData; }), operators.mergeMap(this.apiService.resolveData), operators.filter(function (response) { return !response.data.c8y_Dashboard; }));
            }
            else if (root) {
                return this.apiService
                    .hookResponse(function (_a) {
                    var url = _a.url, method = _a.method;
                    return RegExp('((inventory/managedObjects)|(service/smartgroup/smartgroups))/?$').test(url) &&
                        method === 'POST';
                })
                    .pipe(operators.mergeMap(this.apiService.resolveData), operators.filter(function (response) { return _this.isNewManagedObjectRoot(response); }));
            }
            else {
                return rxjs.empty();
            }
        };
        AssetNodeService.prototype.isNewManagedObjectRoot = function (response) {
            if (response === void 0) { response = {}; }
            var data = response.data;
            var isRootAsset = false;
            if (typeof data === 'object') {
                isRootAsset = !!data[exports.GroupFragment.groupFragmentType];
                if (!isRootAsset && this.moduleConfig.smartGroups) {
                    isRootAsset = !!data[exports.GroupFragment.dynamicGroupFragment];
                }
            }
            return isRootAsset;
        };
        /**
         * Check if it is possible to drop a node after dragging.
         * @param dropOnRoot Is the drop performed on the root node
         */
        AssetNodeService.prototype.canDropNode = function (dropOnRoot) {
            return (!dropOnRoot || this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_ADMIN'));
        };
        /**
         * There could be multiple breadcrumbs for devices,
         * so we set a preferred one on click on a device.
         * @param parents The parent nodes of the device to select the prefered one.
         */
        AssetNodeService.prototype.preferBreadcrumb = function (parents) {
            if (parents.length === 1) {
                this.breadcrumbService.selectPreferredByPath(parents[0].path);
            }
        };
        AssetNodeService.prototype.createFilter = function (extraParams) {
            if (extraParams === void 0) { extraParams = {}; }
            var params = {
                currentPage: 1,
                withTotalPages: true,
                pageSize: 10
            };
            return Object.assign(Object.assign({}, params), extraParams);
        };
        AssetNodeService.prototype.buildCombinedQuery = function (query, orderByQuery) {
            var combinedQuery;
            if (query && orderByQuery) {
                var filterQuery = this.queriesUtil.buildQuery({
                    __useFilterQueryString: query
                });
                combinedQuery = filterQuery + " " + orderByQuery;
            }
            else {
                combinedQuery = query || orderByQuery || '';
            }
            return combinedQuery;
        };
        return AssetNodeService;
    }());
    AssetNodeService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AssetNodeService_Factory() { return new AssetNodeService(i0__namespace.ɵɵinject(i1__namespace.InventoryService), i0__namespace.ɵɵinject(i2__namespace.ApiService), i0__namespace.ɵɵinject(i3__namespace.ModalService), i0__namespace.ɵɵinject(i3__namespace.AlertService), i0__namespace.ɵɵinject(i3__namespace.BreadcrumbService), i0__namespace.ɵɵinject(i4__namespace.UserService), i0__namespace.ɵɵinject(i3__namespace.AppStateService), i0__namespace.ɵɵinject(i3__namespace.OptionsService), i0__namespace.ɵɵinject(ASSET_NAVIGATOR_CONFIG, 8), i0__namespace.ɵɵinject(DeviceGroupService)); }, token: AssetNodeService, providedIn: "root" });
    AssetNodeService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    AssetNodeService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: i2.ApiService },
        { type: i3.ModalService },
        { type: i3.AlertService },
        { type: i3.BreadcrumbService },
        { type: client.UserService },
        { type: i3.AppStateService },
        { type: i3.OptionsService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] },
        { type: DeviceGroupService }
    ]; };

    var AssetNodeFactory = /** @class */ (function () {
        function AssetNodeFactory(service, moduleConfig) {
            this.service = service;
            this.moduleConfig = moduleConfig;
        }
        AssetNodeFactory.prototype.get = function () {
            var _a;
            var rootNavigatorNode = (_a = lodashEs.get(this.moduleConfig, 'rootNavigatorNode')) !== null && _a !== void 0 ? _a : true;
            var rootNode = this.service.rootNode;
            if (rootNavigatorNode === false) {
                return;
            }
            if (!rootNode) {
                rootNode = this.service.createRootNode(rootNavigatorNode === true ? {} : rootNavigatorNode);
            }
            return rootNode;
        };
        return AssetNodeFactory;
    }());
    AssetNodeFactory.decorators = [
        { type: i0.Injectable }
    ];
    AssetNodeFactory.ctorParameters = function () { return [
        { type: AssetNodeService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
    ]; };

    var GroupNode = /** @class */ (function (_super) {
        __extends(GroupNode, _super);
        /**
         * Creates a new node which shows only groups.
         *
         * @param service The service to use.
         * @param config  The default configuration of the node.
         * @param groupsOnly Set this true, if only groups should be shown.
         * @param selectable Set this true, if it is selectable.
         */
        function GroupNode(service, config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, service, config) || this;
            _this.service = service;
            /**
             * Set this true, if only groups should be shown.
             */
            _this.groupsOnly = false;
            /**
             * Set this true, if it groups are also selectable.
             */
            _this.groupsSelectable = false;
            /**
             * Devices with children can be selected to show their child devices.
             */
            _this.showChildDevices = false;
            /**
             * Group node children (subentries).
             */
            _this.children = [];
            _this.groupsOnly = config.groupsOnly || false;
            _this.groupsSelectable = config.groupsSelectable || false;
            _this.showChildDevices = config.showChildDevices || false;
            return _this;
        }
        /**
         * Adds the MO as a child node.
         * @param mo ManagedObject
         */
        GroupNode.prototype.addManagedObject = function (mo) {
            var childAdditions = this.mo.childAdditions;
            if (!this.isChildAddition(childAdditions, mo)) {
                this.add(this.service.createChildNode({
                    mo: mo,
                    groupsOnly: this.groupsOnly,
                    groupsSelectable: this.groupsSelectable,
                    showChildDevices: this.showChildDevices
                }));
            }
        };
        /**
         * Counts the number of children for the current node (with the exception of the UnassignedDevicesNode).
         */
        GroupNode.prototype.countChildren = function () {
            return this.children.filter(function (value) { return value.toString() !== 'UnassignedDevicesNode'; }).length;
        };
        /**
         * Removes all child nodes except the UnassignedDevicesNode.
         */
        GroupNode.prototype.empty = function () {
            this.children = this.children.filter(function (value) { return value.toString() === 'UnassignedDevicesNode'; });
        };
        GroupNode.prototype.fetch = function () {
            var isRoot = this.root;
            var isDevice = this.mo.c8y_IsDevice;
            return isRoot
                ? this.service.getRootNodes()
                : isDevice
                    ? this.service.getDeviceChildren(this.mo.id, {}, this.filterQuery$.value, this.showChildDevices)
                    : this.service.getGroupItems(this.mo.id, this.groupsOnly
                        ? {
                            query: "$filter=(has(" + exports.GroupFragment.groupFragmentType + "))"
                        }
                        : {}, this.showChildDevices, this.filterQuery$.value);
        };
        GroupNode.prototype.toString = function () {
            return GroupNode.NAME;
        };
        GroupNode.prototype.isGroup = function () {
            return this.mo && this.service.isGroup(this.mo);
        };
        return GroupNode;
    }(AssetNode));
    GroupNode.NAME = 'GroupNode';

    var GroupNodeService = /** @class */ (function (_super) {
        __extends(GroupNodeService, _super);
        function GroupNodeService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.PAGE_SIZE = 5;
            return _this;
        }
        GroupNodeService.prototype.createGroupNode = function (config) {
            return new GroupNode(this, config);
        };
        GroupNodeService.prototype.createChildNode = function (config) {
            return this.createGroupNode(config);
        };
        return GroupNodeService;
    }(AssetNodeService));
    GroupNodeService.decorators = [
        { type: i0.Injectable }
    ];

    var AssetSelectorService = /** @class */ (function (_super) {
        __extends(AssetSelectorService, _super);
        function AssetSelectorService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Simplifies the object model based on the selected mode.
         * @param obj The selected asset.
         * @param mode The mode which will decide what type of model will be returned.
         */
        AssetSelectorService.prototype.normalizeValue = function (obj, modelMode) {
            return this.simplifyModel(this.normalizeModelValue(obj), modelMode);
        };
        AssetSelectorService.prototype.simplifyModel = function (model, mode) {
            var mapModel = function (modelObj) {
                var id = modelObj.id, name = modelObj.name, c8y_DeviceQueryString = modelObj.c8y_DeviceQueryString;
                return Object.assign({ id: id, name: name }, (c8y_DeviceQueryString ? { c8y_DeviceQueryString: c8y_DeviceQueryString } : {}));
            };
            if (mode === 'full') {
                return model;
            }
            if (!lodash.isArray(model)) {
                return mapModel(model);
            }
            return model.map(mapModel);
        };
        AssetSelectorService.prototype.normalizeModelValue = function (value) {
            if (lodash.isNumber(value) || lodash.isString(value)) {
                return [{ id: value }];
            }
            if (lodash.isArray(value)) {
                return value;
            }
            if (lodash.isObject(value)) {
                return [value];
            }
            return [];
        };
        return AssetSelectorService;
    }(AssetNodeService));
    AssetSelectorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AssetSelectorService_Factory() { return new AssetSelectorService(i0__namespace.ɵɵinject(i1__namespace.InventoryService), i0__namespace.ɵɵinject(i2__namespace.ApiService), i0__namespace.ɵɵinject(i3__namespace.ModalService), i0__namespace.ɵɵinject(i3__namespace.AlertService), i0__namespace.ɵɵinject(i3__namespace.BreadcrumbService), i0__namespace.ɵɵinject(i4__namespace.UserService), i0__namespace.ɵɵinject(i3__namespace.AppStateService), i0__namespace.ɵɵinject(i3__namespace.OptionsService), i0__namespace.ɵɵinject(ASSET_NAVIGATOR_CONFIG, 8), i0__namespace.ɵɵinject(DeviceGroupService)); }, token: AssetSelectorService, providedIn: "root" });
    AssetSelectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var CONFIG_OPTIONS_DEFAULT = {
        label: i3.gettext('Asset selection'),
        multi: false,
        showFilter: false,
        columnHeaders: false,
        singleColumn: false,
        modelMode: 'simple',
        groupsOnly: false,
        groupsSelectable: false,
        search: false,
        showUnassignedDevices: false,
        view: 'tree',
        showChildDevices: false
    };

    var UnassignedDevicesNode = /** @class */ (function (_super) {
        __extends(UnassignedDevicesNode, _super);
        function UnassignedDevicesNode(service, config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, service, config) || this;
            _this.service = service;
            _this.label = i3.gettext('Unassigned devices');
            _this.icon = 'delete-folder';
            _this.groupsSelectable = false;
            _this.groupsOnly = false;
            _this.showChildDevices = false;
            _this.mo = {};
            _this.priority = Infinity;
            _this.showChildDevices = config.showChildDevices || false;
            return _this;
        }
        UnassignedDevicesNode.prototype.click = function (options) {
            if (options === void 0) { options = {}; }
            this.hookEvents();
            if (options.open) {
                this.events.next(exports.Action.FETCH);
            }
        };
        UnassignedDevicesNode.prototype.addManagedObject = function (mo) {
            this.add(this.service.createChildNode({ mo: mo, showChildDevices: this.showChildDevices }));
        };
        UnassignedDevicesNode.prototype.fetch = function () {
            return this.service.getUnassignedDevices(this.showChildDevices, this.filterQuery$.value);
        };
        UnassignedDevicesNode.prototype.isGroup = function () {
            return true;
        };
        UnassignedDevicesNode.prototype.toString = function () {
            return UnassignedDevicesNode.NAME;
        };
        return UnassignedDevicesNode;
    }(GroupNode));
    UnassignedDevicesNode.NAME = 'UnassignedDevicesNode';

    var AssetSelectorBase = /** @class */ (function () {
        function AssetSelectorBase(groupNodeService, inventory, assetSelectorService) {
            this.groupNodeService = groupNodeService;
            this.inventory = inventory;
            this.assetSelectorService = assetSelectorService;
            /**
             * Config object containing all options for the asset selector.
             */
            this.config = {};
            /**
             * The loading state of the current node.
             */
            this.isLoading = false;
            /**
             * Emit the selected asset or assets.
             */
            this.onSelected = new i0.EventEmitter();
        }
        /**
         * @ignore
         */
        AssetSelectorBase.prototype.validate = function (control) {
            if (this.config.required && (!control.value || control.value.length === 0)) {
                return { required: true };
            }
            return null;
        };
        /**
         * @ignore
         */
        AssetSelectorBase.prototype.writeValue = function (obj) {
            this.selected = this.assetSelectorService.normalizeValue(obj, this.config.modelMode);
        };
        /**
         * @ignore
         */
        AssetSelectorBase.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * @ignore
         */
        AssetSelectorBase.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * @ignore
         */
        AssetSelectorBase.prototype.doBlur = function () {
            if (this.onTouched) {
                this.onTouched();
            }
        };
        /**
         * Deselects all expect the given one.
         * @param selectedMo The selected asset (optional, if empty -> just deselect all).
         */
        AssetSelectorBase.prototype.deselectAll = function (selectedMo) {
            this.selected = [];
            if (selectedMo) {
                this.selected = [this.assetSelectorService.simplifyModel(selectedMo, this.config.modelMode)];
            }
            this.emitChange(this.selected, selectedMo, !!selectedMo);
            this.doBlur();
        };
        /**
         * Adds an managed object to the selected array and emits the change.
         * @param selectedMo The selected asset.
         */
        AssetSelectorBase.prototype.select = function (selectedMo) {
            if (!this.config.multi) {
                this.selected = [];
            }
            var index = this.getIndexOfSelected(this.selected, selectedMo);
            if (index === -1) {
                this.selected.push(this.assetSelectorService.simplifyModel(selectedMo, this.config.modelMode));
            }
            this.emitChange(this.selected, selectedMo, true);
            this.doBlur();
        };
        /**
         * Removes a managed object from the selected array and emits the change.
         * @param selectedMo The selected asset.
         */
        AssetSelectorBase.prototype.deselect = function (selectedMo) {
            var index = this.getIndexOfSelected(this.selected, selectedMo);
            if (index > -1) {
                this.selected.splice(index, 1);
            }
            this.emitChange(this.selected, selectedMo, false);
            this.doBlur();
        };
        /**
         * Returns the index of the currently selected item.
         * @param selected All selected items
         * @param selectedMo The new selected item-
         * @returns An index, or -1 if not found.
         */
        AssetSelectorBase.prototype.getIndexOfSelected = function (selected, selectedMo) {
            return selected.findIndex(function (mo) { return mo.id === selectedMo.id; });
        };
        AssetSelectorBase.prototype.emitChange = function (selected, item, isSelected) {
            var changes = this.config.multi ? selected : selected[0];
            if (this.onChange) {
                this.onChange(changes);
            }
            this.onSelected.emit({ items: changes, change: { item: item, isSelected: isSelected } });
        };
        AssetSelectorBase.prototype.createDefaultRootNode = function () {
            return this.groupNodeService.createGroupNode({
                root: true,
                groupsSelectable: this.config.groupsSelectable,
                groupsOnly: this.config.groupsOnly,
                showChildDevices: this.config.showChildDevices
            });
        };
        AssetSelectorBase.prototype.createManagedObjectRootNode = function (asset) {
            return __awaiter(this, void 0, void 0, function () {
                var mo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (asset.id) {
                                return [2 /*return*/, this.groupNodeService.createGroupNode({
                                        mo: asset,
                                        groupsSelectable: this.config.groupsSelectable,
                                        groupsOnly: this.config.groupsOnly,
                                        showChildDevices: this.config.showChildDevices
                                    })];
                            }
                            return [4 /*yield*/, this.inventory.detail(asset)];
                        case 1:
                            mo = (_a.sent()).data;
                            return [2 /*return*/, this.groupNodeService.createGroupNode({
                                    mo: mo,
                                    groupsSelectable: this.config.groupsSelectable,
                                    groupsOnly: this.config.groupsOnly,
                                    showChildDevices: this.config.showChildDevices
                                })];
                    }
                });
            });
        };
        return AssetSelectorBase;
    }());

    /**
     * Displays a hierarchical tree selector for assets.
     */
    var AssetSelectorComponent = /** @class */ (function (_super) {
        __extends(AssetSelectorComponent, _super);
        /**
         * @ignore only DI
         */
        function AssetSelectorComponent(groupNodeService, inventory, assetSelectorService, cd) {
            var _this = _super.call(this, groupNodeService, inventory, assetSelectorService) || this;
            _this.groupNodeService = groupNodeService;
            _this.inventory = inventory;
            _this.assetSelectorService = assetSelectorService;
            _this.cd = cd;
            /**
             * Config object containing all options for the asset selector.
             */
            _this.config = {};
            /**
             * Used only for miller-view, displays the column level for the current node.
             * E.g if the index is one, this will be second column.
             */
            _this.index = 0;
            /**
             * The asset to use as root.
             */
            _this.asset = undefined;
            /**
             * The selected device.
             */
            _this.selectedDevice = undefined;
            /**
             * An array of predefined nodes.
             */
            _this.selected = [];
            /**
             * All currently selected assets.
             */
            _this.selectedItems = [];
            _this.container = 'body';
            /**
             * Emits if one item was selected (all currently selected nodes).
             */
            _this.onSelected = new i0.EventEmitter();
            /**
             * Used only for miller view. Emit the selected node and use it as a 'rootNode' for the new column.
             */
            _this.onRowSelected = new i0.EventEmitter();
            /**
             * Emits the current loading state of the node.
             */
            _this.onLoad = new i0.EventEmitter();
            /**
             * The current filter applied.
             */
            _this.filterText = '';
            /**
             * Displays the global search at all times if the miller view is used
             * on root group level.
             */
            _this.root = false;
            /**
             * @ignore
             */
            _this.unsubscribe$ = new rxjs.Subject();
            return _this;
        }
        /**
         * Checks when a node was selected, if a new column needs to be added.
         * @param node The node that was clicked.
         * @param index The current index of this node.
         * @returns True if the click was handled and a new column was added.
         */
        AssetSelectorComponent.prototype.handleNextMillerViewColumn = function (node, index) {
            var nodeCopy = Object.create(node);
            var isSameAsRoot = this.rootNode === node;
            var isUnassignedDevicesNode = node.toString() === UnassignedDevicesNode.NAME;
            var isNewColumnNeeded = !isSameAsRoot && (node.isGroup() || isUnassignedDevicesNode || node.hasChildDevices());
            if (isNewColumnNeeded) {
                this.onRowSelected.emit({ nodeCopy: nodeCopy, index: index });
                return false;
            }
            return true;
        };
        /**
         * @ignore
         */
        AssetSelectorComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var shouldResetNameFilter, isOnlyAssetNodeDefined, _b, isAnyNodeDefined;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (this.index === 0) {
                                this.config = Object.assign(Object.assign({}, CONFIG_OPTIONS_DEFAULT), this.config);
                            }
                            shouldResetNameFilter = this.rootNode && this.rootNode.mo && this.config.view === 'miller';
                            if (shouldResetNameFilter) {
                                this.applyFilter('');
                            }
                            isOnlyAssetNodeDefined = this.asset;
                            if (!isOnlyAssetNodeDefined) return [3 /*break*/, 2];
                            _b = this;
                            return [4 /*yield*/, this.createManagedObjectRootNode(this.asset)];
                        case 1:
                            _b.rootNode = _c.sent();
                            _c.label = 2;
                        case 2:
                            isAnyNodeDefined = !this.rootNode && (!this.asset || Object.keys(this.asset).length === 0);
                            if (isAnyNodeDefined) {
                                this.rootNode = this.createDefaultRootNode();
                            }
                            if (this.config.showUnassignedDevices &&
                                (!this.asset || Object.keys(this.asset).length === 0) &&
                                this.rootNode.root) {
                                this.rootNode.add(new UnassignedDevicesNode(this.groupNodeService, {
                                    showChildDevices: this.config.showChildDevices
                                }));
                            }
                            this.root = this.rootNode.root;
                            return [2 /*return*/];
                    }
                });
            });
        };
        AssetSelectorComponent.prototype.ngOnChanges = function (changes) {
            return __awaiter(this, void 0, void 0, function () {
                var _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(changes.asset &&
                                changes.asset.currentValue &&
                                Object.keys(changes.asset.currentValue).length !== 0)) return [3 /*break*/, 2];
                            _b = this;
                            return [4 /*yield*/, this.createManagedObjectRootNode(changes.asset.currentValue)];
                        case 1:
                            _b.rootNode = _c.sent();
                            _c.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Changes the current root to one level back.
         */
        AssetSelectorComponent.prototype.back = function () {
            var index = this.index - 1;
            var nodeCopy = Object.create(this.rootNode.parents[0]);
            this.onRowSelected.emit({ nodeCopy: nodeCopy, index: index });
        };
        /**
         * Clears the current filter.
         */
        AssetSelectorComponent.prototype.clearFilters = function () {
            this.filterText = '';
            this.applyFilter('');
        };
        AssetSelectorComponent.prototype.clearSelectedDevices = function () {
            this.selectedDevice = undefined;
            this.applyFilter('');
        };
        AssetSelectorComponent.prototype.isGroupSelected = function () {
            var _this = this;
            if (this.selectedItems.some(function (selectedNode) { var _a; return selectedNode.id === ((_a = _this.rootNode.mo) === null || _a === void 0 ? void 0 : _a.id); })) {
                return true;
            }
            return false;
        };
        AssetSelectorComponent.prototype.groupNameFilter = function (nameFilter, moId, showUnassignedDevices) {
            if (nameFilter) {
                var filterByName = showUnassignedDevices
                    ? {
                        __filter: {
                            name: nameFilter
                        },
                        __orderby: [{ name: 1 }]
                    }
                    : {
                        __filter: {
                            name: nameFilter,
                            __bygroupid: moId
                        }
                    };
                return this.assetSelectorService.queriesUtil.buildQuery(filterByName);
            }
            var defaultFilter = {
                __filter: {
                    __bygroupid: moId
                },
                __orderby: [{ name: 1 }]
            };
            return this.assetSelectorService.queriesUtil.buildQuery(defaultFilter);
        };
        /**
         * Applies a filter.
         * @param filter The filter to apply.
         */
        AssetSelectorComponent.prototype.applyFilter = function (filter) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    this.rootNode.filterQuery$.next(this.groupNameFilter(filter, this.rootNode.mo.id, this.isUnassignedDevicesNode() ? true : false));
                    this.rootNode.refresh();
                    this.onLoad.emit({
                        loading: true,
                        filterText: this.filterText,
                        index: this.index,
                        selectedDevice: this.selectedDevice
                    });
                    this.cd.detectChanges();
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Check if the UnassignedDevice node is the rootNode.
         */
        AssetSelectorComponent.prototype.isUnassignedDevicesNode = function () {
            return this.rootNode.toString() === UnassignedDevicesNode.NAME;
        };
        /**
         * Called when the user resets the search result.
         */
        AssetSelectorComponent.prototype.onSearchResultReset = function (term) {
            if (term) {
                this.deselectAll();
                this.rootNode = this.createDefaultRootNode();
                if (this.config.showUnassignedDevices) {
                    this.rootNode.add(new UnassignedDevicesNode(this.groupNodeService, {
                        showChildDevices: this.config.showChildDevices
                    }));
                }
                if (this.config.view === 'miller') {
                    this.onRowSelected.emit({ root: true });
                }
                this.rootNode.click({ open: true });
                if (this.config.view === 'tree') {
                    this.rootNode.open = true;
                }
            }
        };
        /**
         * Called if the user clicks on a search result.
         */
        AssetSelectorComponent.prototype.onSearchResultClick = function (mo) {
            return __awaiter(this, void 0, void 0, function () {
                var canSelectNode, _b, nodeCopy;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            canSelectNode = this.config.groupsSelectable || !this.groupNodeService.isGroup(mo);
                            _b = this;
                            return [4 /*yield*/, this.createManagedObjectRootNode(mo)];
                        case 1:
                            _b.rootNode = _c.sent();
                            this.rootNode.click({ open: true });
                            if (this.config.view === 'miller') {
                                nodeCopy = Object.create(this.rootNode);
                                this.onRowSelected.emit({
                                    nodeCopy: nodeCopy,
                                    index: 0,
                                    selectedDevices: this.selectedDevice,
                                    root: true
                                });
                            }
                            this.deselectAll();
                            if (canSelectNode) {
                                this.select(this.rootNode.mo);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        return AssetSelectorComponent;
    }(AssetSelectorBase));
    AssetSelectorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-asset-selector',
                    template: "<div\n  class=\"p-b-8 bg-inherit\"\n  [ngClass]=\"{ 'p-l-16 p-absolute p-r-16': config.view === 'miller' }\"\n  style=\"left: 0; right: 4px\"\n  [ngStyle]=\"{ 'z-index': config.singleColumn ? '30' : '20' }\"\n  *ngIf=\"!selectedDevice && index === 0 && (config.search || config.singleColumn)\"\n>\n  <p class=\"text-medium m-b-4 p-t-8\">\n    {{ config.label | translate }}\n  </p>\n  <c8y-search-input\n    *ngIf=\"config.search && root\"\n    (onClick)=\"onSearchResultClick($event)\"\n    (reset)=\"onSearchResultReset($event)\"\n    [mode]=\"'select'\"\n    [container]=\"container\"\n  ></c8y-search-input>\n</div>\n\n<div *ngIf=\"selectedDevice\" class=\"p-r-16\">\n  <div class=\"d-flex p-b-4\">\n    <p *ngIf=\"selectedDevice; else multiAssets\" class=\"text-medium p-t-8 m-r-8\">\n      {{ 'Selected asset' | translate }}\n    </p>\n    <ng-template #multiAssets>\n      <p class=\"text-medium m-r-8\">{{ 'Selected assets' | translate }}</p>\n    </ng-template>\n    <button\n      class=\"btn btn-default btn-xs a-s-center m-t-4 m-l-auto\"\n      (click)=\"clearSelectedDevices()\"\n      title=\"{{ 'Edit' | translate }}\"\n    >\n      {{ 'Change' | translate }}\n    </button>\n  </div>\n  <div class=\"d-flex\">\n    <i [c8yIcon]=\"'check-circle'\" class=\"text-success p-l-0 p-r-8\"></i>\n    <i\n      c8yIcon=\"{{ selectedDevice.type === 'c8y_DeviceGroup' ? 'c8y-group' : 'exchange' }}\"\n      class=\"m-r-4 icon-20\"\n    ></i>\n    <span>{{ selectedDevice.name }}</span>\n  </div>\n</div>\n\n<!-- miller columns header -->\n<div\n  *ngIf=\"\n    config.view === 'miller' &&\n    ((config.showFilter && !rootNode.root) || config.columnHeaders || config.singleColumn) &&\n    !selectedDevice\n  \"\n  class=\"miller-column__header sticky-top bg-inherit separator-top-bottom\"\n  [ngClass]=\"{ 'm-t-72 ': config.search, 'm-t-32': !config.search && config.singleColumn }\"\n  [ngStyle]=\"{ top: config.search && !config.singleColumn ? '72px' : '0' }\"\n>\n  <p\n    class=\"text-12 text-muted text-truncate m-b-4\"\n    *ngIf=\"config.singleColumn && index !== 0\"\n    title=\"{{ rootNode.breadcrumb || rootNode.label | translate }}\"\n  >\n    <i c8yIcon=\"home\" class=\"m-r-4\"></i>\n    {{ rootNode.breadcrumb || rootNode.label | translate }}\n  </p>\n  <div *ngIf=\"config.columnHeaders || config.singleColumn\" class=\"d-flex a-i-center p-b-4\">\n    <button\n      class=\"btn btn-default btn-xs m-r-8 p-t-0 p-b-0 p-l-4 p-r-4 l-h-1\"\n      *ngIf=\"config.singleColumn && !rootNode.root && index !== 0\"\n      title=\"{{ 'Back' | translate }}\"\n      (click)=\"back()\"\n    >\n      <i c8yIcon=\"angle-left\"></i>\n    </button>\n    <label\n      *ngIf=\"!rootNode.root && index === 0 && (config.groupsSelectable || !rootNode.isGroup())\"\n      class=\"c8y-radio checkbox-inline m-r-8\"\n    >\n      <input\n        type=\"radio\"\n        (change)=\"select(rootNode.mo)\"\n        [checked]=\"isGroupSelected()\"\n        title=\"{{ 'Select group' | translate }}\"\n      /><span></span>\n    </label>\n\n    <p\n      class=\"text-truncate\"\n      title=\"{{ rootNode.label | translate }}\"\n      *ngIf=\"config.columnHeaders\"\n      [ngClass]=\"{\n        'text-label-small': !config.singleColumn,\n        'text-medium': config.singleColumn\n      }\"\n    >\n      <i\n        *ngIf=\"config.singleColumn || (!rootNode.root && index === 0)\"\n        c8yIcon=\"c8y-group-open\"\n        class=\"icon-20 c8y-icon-duocolor m-r-4\"\n      ></i>\n      {{ rootNode.label | translate }}\n    </p>\n  </div>\n\n  <div *ngIf=\"!rootNode.root && config.showFilter\" [ngClass]=\"{ 'p-t-4': config.columnHeaders }\">\n    <div class=\"input-group input-group-sm input-group-search\">\n      <input\n        [(ngModel)]=\"filterText\"\n        placeholder=\"{{ 'Filter this column\u2026' | translate }}\"\n        class=\"form-control\"\n        (keyup.enter)=\"applyFilter('*' + filterText + '*')\"\n      />\n      <span class=\"input-group-btn\">\n        <button\n          title=\"{{ 'Apply filter' | translate }}\"\n          class=\"btn btn-clean p-r-8 p-l-4\"\n          (click)=\"applyFilter('*' + filterText + '*')\"\n        >\n          <i c8yIcon=\"filter\"></i>\n        </button>\n        <button\n          title=\" {{ 'Clear filters' | translate }}\"\n          class=\"btn btn-clean p-r-8 p-l-4\"\n          (click)=\"clearFilters()\"\n          *ngIf=\"filterText.length\"\n        >\n          <i c8yIcon=\"times\"></i>\n        </button>\n      </span>\n    </div>\n  </div>\n</div>\n\n<c8y-asset-selector-node\n  *ngIf=\"rootNode && !selectedDevice\"\n  [node]=\"rootNode\"\n  [preselected]=\"selected\"\n  [multi]=\"config.multi\"\n  [view]=\"config.view\"\n  [index]=\"index\"\n  [selectedItems]=\"selectedItems\"\n  [active]=\"active\"\n  class=\"d-block bg-inherit p-relative\"\n  [ngClass]=\"{ 'collapse show': !rootNode.root && !rootNode.hidden && config.view !== 'miller' }\"\n  style=\"z-index: 9\"\n></c8y-asset-selector-node>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return AssetSelectorComponent; })
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return AssetSelectorComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    AssetSelectorComponent.ctorParameters = function () { return [
        { type: GroupNodeService },
        { type: client.InventoryService },
        { type: AssetSelectorService },
        { type: i0.ChangeDetectorRef }
    ]; };
    AssetSelectorComponent.propDecorators = {
        config: [{ type: i0.Input }],
        active: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        asset: [{ type: i0.Input }],
        selectedDevice: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        rootNode: [{ type: i0.Input }],
        selectedItems: [{ type: i0.Input }],
        container: [{ type: i0.Input }],
        onSelected: [{ type: i0.Output }],
        onRowSelected: [{ type: i0.Output }],
        onLoad: [{ type: i0.Output }]
    };

    var AssetSelectorNodeComponent = /** @class */ (function () {
        /**
         * @ignore only di
         */
        function AssetSelectorNodeComponent(translateService, cd, parentAssetSelector) {
            this.translateService = translateService;
            this.cd = cd;
            this.parentAssetSelector = parentAssetSelector;
            /**
             * All preselected items.
             */
            this.preselected = [];
            /**
             * Should the path be shown.
             */
            this.showPath = false;
            /**
             * Can the user select multiple assets.
             */
            this.multi = false;
            /**
             * The current path to the node.
             */
            this.view = 'tree';
            /**
             * All currently selected assets.
             */
            this.selectedItems = [];
            /**
             * @ignore
             */
            this.level = 0;
            /**
             * @ignore
             */
            this.unsubscribe$ = new rxjs.Subject();
            /** sets the `btn-pending` class in the load more button */
            this.isLoading = false;
        }
        Object.defineProperty(AssetSelectorNodeComponent.prototype, "expandTitle", {
            /**
             * @ignore
             */
            get: function () {
                return !this.node.open ? i3.gettext('Expand') : i3.gettext('Collapse');
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @ignore
         */
        AssetSelectorNodeComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_b) {
                    this.breadcrumb = this.node.label;
                    this.setupBreadcrumbsAndLevel(this.node);
                    if (this.node instanceof GroupNode) {
                        this.node.hookEvents();
                    }
                    // open on startup
                    if (this.node.root) {
                        this.click();
                    }
                    // used for loading and to trigger change detection when the node is no longer loading.
                    if (this.node.events) {
                        this.node.events
                            .pipe(operators.takeUntil(this.unsubscribe$), operators.filter(function (a) { return a === exports.Action.LOADING_DONE; }))
                            .subscribe(function () {
                            _this.parentAssetSelector.onLoad.emit({
                                loading: false,
                                filterText: _this.parentAssetSelector.filterText
                            });
                            _this.cd.markForCheck();
                        });
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Opens a node.
         */
        AssetSelectorNodeComponent.prototype.click = function () {
            this.node.open = !this.node.open;
            this.node.click({ open: this.node.open });
        };
        AssetSelectorNodeComponent.prototype.setupBreadcrumbsAndLevel = function (node) {
            if (node.parents && node.parents.length) {
                var parent = node.parents[0];
                this.breadcrumb =
                    this.translateService.instant(parent.label) +
                        ' > ' +
                        this.translateService.instant(this.breadcrumb);
                this.level++;
                this.setupBreadcrumbsAndLevel(parent);
            }
        };
        /**
         * Selects the node and emits a change on the parent component.
         * @param node The node to select.
         */
        AssetSelectorNodeComponent.prototype.selected = function (node) {
            if (node.mo) {
                this.updateSelection(node.mo);
                return;
            }
            this.click();
        };
        /**
         * Handles clicks on a item in Miller View.
         * @param node The node that was clicked.
         */
        AssetSelectorNodeComponent.prototype.millerViewClick = function (node) {
            node.breadcrumb = this.breadcrumb;
            var shouldHandleDefault = this.parentAssetSelector.handleNextMillerViewColumn(node, this.index);
            if (shouldHandleDefault) {
                this.selected(node);
            }
        };
        /**
         * @ignore
         */
        AssetSelectorNodeComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next(true);
            this.unsubscribe$.complete();
        };
        AssetSelectorNodeComponent.prototype.isSelected = function () {
            if (!this.node.mo) {
                return false;
            }
            return this.parentAssetSelector.getIndexOfSelected(this.preselected, this.node.mo) > -1;
        };
        AssetSelectorNodeComponent.prototype.isActive = function () {
            var _a;
            if (this.active && this.node.mo) {
                return ((_a = this.active.mo) === null || _a === void 0 ? void 0 : _a.id) === this.node.mo.id;
            }
            return false;
        };
        AssetSelectorNodeComponent.prototype.isGroupSelected = function () {
            var _this = this;
            if (this.selectedItems.some(function (selectedNode) { var _a; return selectedNode.id === ((_a = _this.node.mo) === null || _a === void 0 ? void 0 : _a.id); })) {
                return true;
            }
            return false;
        };
        AssetSelectorNodeComponent.prototype.updateSelection = function (selectedMo) {
            if (!this.multi) {
                this.parentAssetSelector.deselectAll(selectedMo);
                return;
            }
            if (this.isSelected()) {
                this.parentAssetSelector.deselect(selectedMo);
                return;
            }
            this.parentAssetSelector.select(selectedMo);
        };
        return AssetSelectorNodeComponent;
    }());
    AssetSelectorNodeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-asset-selector-node',
                    template: "<!-- Hierarchy tree -->\n<div\n  *ngIf=\"view === 'tree'\"\n  class=\"c8y-asset-selector__item\"\n  [attr.role]=\"view === 'tree' ? 'tree' : 'list'\"\n  [ngClass]=\"{\n    'c8y-asset-selector__item--more': node?.icon === 'plus',\n    'c8y-asset-selector__item--start': level === 0\n  }\"\n  [ngStyle]=\"{\n    'margin-left': level > 1 ? 16 + 'px' : '0'\n  }\"\n>\n  <div\n    *ngIf=\"node && !node.root && !node.hidden\"\n    class=\"c8y-asset-selector__node\"\n    [attr.role]=\"view === 'tree' ? 'treeitem' : 'listitem'\"\n    [ngClass]=\"{ 'c8y-asset-selector__node--open': node?.open }\"\n    title=\"{{ breadcrumb | translate }}\"\n  >\n    <div class=\"d-flex a-i-center p-t-4 p-b-4 m-r-8\" *ngIf=\"node.toString() !== 'LoadMoreNode'\">\n      <label [ngClass]=\"{ 'c8y-checkbox': multi, 'c8y-radio': !multi }\">\n        <input\n          [attr.aria-label]=\"node.label | translate\"\n          [type]=\"multi ? 'checkbox' : 'radio'\"\n          (change)=\"selected(node)\"\n          [checked]=\"isSelected()\"\n          [disabled]=\"!node.groupsSelectable && node.isGroup()\"\n        />\n        <span></span>\n      </label>\n    </div>\n\n    <!-- group button -->\n    <button\n      *ngIf=\"node.isGroup() || node.hasChildDevices()\"\n      class=\"c8y-asset-selector__btn text-truncate\"\n      (click)=\"click()\"\n      [attr.aria-expanded]=\"!node.open\"\n    >\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon === 'c8y-group-smart'\"\n        [title]=\"'Smart group' | translate\"\n        class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n      ></i>\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon !== 'c8y-group-smart'\"\n        [title]=\"'Group' | translate\"\n        class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n      ></i>\n      <span title=\"{{ breadcrumb }}\">\n        {{ node.label | translate }}\n        <!-- use just for search results to display the path -->\n        <p *ngIf=\"showPath\" class=\"text-truncate\">\n          <small class=\"text-muted\" title=\"{{ breadcrumb }}\">\n            <em>{{ breadcrumb }}</em>\n          </small>\n        </p>\n        <!-- up to here -->\n      </span>\n    </button>\n    <!-- not a group button -->\n    <button\n      *ngIf=\"!node.isGroup() && !node.hasChildDevices()\"\n      class=\"flex-grow\"\n      [ngClass]=\"{\n        'btn btn-default btn-sm m-b-8 d-flex j-c-center': node.icon === 'plus',\n        'c8y-asset-selector__btn text-truncate': node.icon != 'plus'\n      }\"\n      (click)=\"selected(node)\"\n      type=\"button\"\n      title=\"{{ breadcrumb }}\"\n    >\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon === 'c8y-group-smart'\"\n        [title]=\"'Smart group' | translate\"\n        class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n      ></i>\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon !== 'c8y-group-smart'\"\n        [title]=\"'Group' | translate\"\n        [ngClass]=\"{ 'c8y-icon-duocolor text-16 ': node.icon != 'plus' }\"\n        class=\"c8y-icon m-r-4\"\n      ></i>\n      <span title=\"{{ breadcrumb }}\">\n        {{ node.label | translate }}\n        <!-- use just for search results to display the path -->\n        <p *ngIf=\"showPath\" class=\"text-truncate text-muted small\">\n          <em>{{ breadcrumb }}</em>\n        </p>\n        <!-- up to here -->\n      </span>\n    </button>\n    <!-- expand button (only for groups) -->\n    <div *ngIf=\"node.isGroup() || node.hasChildDevices()\">\n      <button\n        [title]=\"expandTitle\"\n        class=\"collapse-btn btn\"\n        (click)=\"click()\"\n        [attr.aria-expanded]=\"node.open\"\n      >\n        <i c8yIcon=\"angle-down\"></i>\n      </button>\n    </div>\n  </div>\n  <div\n    *ngIf=\"node.countChildren()\"\n    class=\"collapse\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n    [attr.role]=\"'group'\"\n  >\n    <c8y-asset-selector-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      [preselected]=\"preselected || []\"\n      [multi]=\"multi\"\n      [active]=\"active\"\n      [attr.role]=\"view === 'tree' ? 'treeitem' : 'listitem'\"\n    ></c8y-asset-selector-node>\n  </div>\n</div>\n\n<!-- Miller columns -->\n<div *ngIf=\"view === 'miller'\">\n  <div\n    *ngIf=\"node && !node.root && !node.hidden && node !== parentAssetSelector.rootNode\"\n    class=\"miller-column__item bg-inherit\"\n    [ngClass]=\"{\n      active: isActive(),\n      'miller-column__item--more': node.toString() === 'LoadMoreNode'\n    }\"\n    title=\"{{ breadcrumb | translate }}\"\n  >\n    <div\n      class=\"m-l-4 m-r-4 miller-column__item__checkbox\"\n      *ngIf=\"node.toString() !== 'LoadMoreNode'\"\n    >\n      <label [ngClass]=\"{ 'c8y-radio': !multi, 'c8y-checkbox': multi }\">\n        <input\n          [attr.aria-label]=\"node.label | translate\"\n          [type]=\"multi ? 'checkbox' : 'radio'\"\n          (change)=\"selected(node)\"\n          [checked]=\"isGroupSelected()\"\n          [disabled]=\"!node.groupsSelectable && node.isGroup()\"\n        />\n        <span></span>\n      </label>\n    </div>\n\n    <button\n      [ngClass]=\"{\n        'btn btn-default btn-sm d-flex flex-grow j-c-center m-l-16 m-r-16 m-b-8':\n          node.toString() === 'LoadMoreNode',\n        'miller-column__item__btn': node.toString() !== 'LoadMoreNode',\n        'btn-pending': node.loading && node.toString() === 'LoadMoreNode'\n      }\"\n      title=\"{{ breadcrumb | translate }}\"\n      (click)=\"millerViewClick(node)\"\n      type=\"button\"\n    >\n      <i\n        [c8yIcon]=\"node.icon\"\n        class=\"c8y-icon m-r-4\"\n        [ngClass]=\"{ 'c8y-icon-duocolor text-16': node.toString() !== 'LoadMoreNode' }\"\n      ></i>\n      <div class=\"text-left text-truncate\">\n        <p title=\"{{ node.label | translate }}\" class=\"text-truncate\">\n          {{ node.label | translate }}\n        </p>\n        <!-- use just for search results to display the path -->\n        <small *ngIf=\"showPath\" class=\"text-muted text-truncate\" title=\"{{ breadcrumb }}\">\n          <em>{{ breadcrumb }}</em>\n        </small>\n        <!-- up to here -->\n      </div>\n      <span *ngIf=\"node.isGroup() || node.hasChildDevices()\" class=\"p-l-4 m-l-auto\">\n        <i c8yIcon=\"angle-right\"></i>\n      </span>\n    </button>\n  </div>\n\n  <div *ngIf=\"node\" [ngClass]=\"{ hidden: node !== parentAssetSelector.rootNode }\" role=\"list\">\n    <c8y-asset-selector-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      [preselected]=\"preselected || []\"\n      [multi]=\"multi\"\n      [view]=\"view\"\n      [index]=\"index\"\n      [selectedItems]=\"selectedItems\"\n      [active]=\"active\"\n      role=\"listitem\"\n    ></c8y-asset-selector-node>\n  </div>\n</div>\n"
                },] }
    ];
    AssetSelectorNodeComponent.ctorParameters = function () { return [
        { type: core.TranslateService },
        { type: i0.ChangeDetectorRef },
        { type: AssetSelectorComponent }
    ]; };
    AssetSelectorNodeComponent.propDecorators = {
        node: [{ type: i0.Input }],
        preselected: [{ type: i0.Input }],
        showPath: [{ type: i0.Input }],
        multi: [{ type: i0.Input }],
        view: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        active: [{ type: i0.Input }],
        selectedItems: [{ type: i0.Input }]
    };

    var MillerViewComponent = /** @class */ (function (_super) {
        __extends(MillerViewComponent, _super);
        function MillerViewComponent(groupNodeService, inventory, assetSelectorService, cd) {
            var _this = _super.call(this, groupNodeService, inventory, assetSelectorService) || this;
            _this.groupNodeService = groupNodeService;
            _this.inventory = inventory;
            _this.assetSelectorService = assetSelectorService;
            _this.cd = cd;
            /**
             * Config object containing all options for the asset selector.
             */
            _this.config = {};
            /**
             * The asset to use as root.
             */
            _this.asset = undefined;
            /**
             * The selected devices.
             */
            _this.selectedDevice = undefined;
            /**
             * Emits if the selection changes
             */
            _this.onSelected = new i0.EventEmitter();
            /**
             * The column array will contain all currently selected nodes
             *  which will form the miller view columns (only one per level).
             */
            _this.columns = [];
            /**
             * The current filter applied. Used for the empty state text in the view.
             */
            _this.filterText = '';
            _this.container = 'body';
            _this.configOptionsDefault = {
                view: 'miller',
                singleColumn: false
            };
            return _this;
        }
        /**
         * @ignore
         */
        MillerViewComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var isAnyNodeDefined, isOnlyAssetNodeDefined, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.config = Object.assign(Object.assign({}, this.configOptionsDefault), this.config);
                            isAnyNodeDefined = !this.rootNode && (!this.asset || Object.keys(this.asset).length === 0);
                            if (isAnyNodeDefined) {
                                this.rootNode = this.createDefaultRootNode();
                            }
                            isOnlyAssetNodeDefined = this.asset && Object.keys(this.asset).length !== 0;
                            if (!isOnlyAssetNodeDefined) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.createManagedObjectRootNode(this.asset)];
                        case 1:
                            _a.rootNode = _b.sent();
                            this.rootNode.click();
                            _b.label = 2;
                        case 2:
                            this.columns.push(this.rootNode);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @ignore
         */
        MillerViewComponent.prototype.ngOnChanges = function (changes) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(changes.asset && changes.asset.currentValue && !this.asset)) return [3 /*break*/, 2];
                            this.columns = [];
                            _b = (_a = this.columns).push;
                            return [4 /*yield*/, this.createManagedObjectRootNode(changes.asset.currentValue)];
                        case 1:
                            _b.apply(_a, [_c.sent()]);
                            _c.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Create a new column with the selected node as root.
         */
        MillerViewComponent.prototype.addNewColumn = function (node) {
            var _this = this;
            var level = node.index;
            this.selectedDevice = node.selectedDevices || undefined;
            if (node.root) {
                window.requestAnimationFrame(function () { return (_this.millerViewWrapper.nativeElement.scrollLeft = 0); });
                this.columns.length = 1;
            }
            var isLevelLowerThanColumnNumber = level < this.columns.length - 1;
            var goBack = false;
            if (isLevelLowerThanColumnNumber) {
                this.columns.length = level + 1;
                goBack = true;
            }
            if (!node.root && !(this.config.singleColumn && goBack)) {
                this.columns.push(node.nodeCopy);
                window.requestAnimationFrame(function () { return (_this.millerViewWrapper.nativeElement.scrollLeft = 99999); });
            }
        };
        /**
         * Change the loading state of the asset selector.
         */
        MillerViewComponent.prototype.onLoad = function (event) {
            this.isLoading = event.loading;
            this.filterText = event.filterText;
            this.columnIndex = event.index;
            this.selectedDevice = event.selectedDevice;
            this.cd.detectChanges();
        };
        /**
         * Add the selected node to the selected array.
         */
        MillerViewComponent.prototype.onSelectionChange = function (event) {
            if (!this.config.multi) {
                this.deselectAll(event.change.item);
                return;
            }
            if (event.change.isSelected) {
                this.select(event.change.item);
                return;
            }
            this.deselect(event.change.item);
        };
        return MillerViewComponent;
    }(AssetSelectorBase));
    MillerViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-asset-selector-miller',
                    template: "<div\n  #millerViewWrapper\n  class=\"miller-view-wrapper\"\n  [ngClass]=\"{ 'single-column': config.singleColumn }\"\n>\n  <div *ngFor=\"let column of columns; index as i\" class=\"miller-column bg-inherit\">\n    <c8y-asset-selector\n      [config]=\"config\"\n      [index]=\"i\"\n      [active]=\"columns[i + 1]\"\n      [rootNode]=\"column\"\n      [selectedItems]=\"selected || []\"\n      [selectedDevice]=\"selectedDevice\"\n      (onSelected)=\"onSelectionChange($event)\"\n      (onRowSelected)=\"addNewColumn($event)\"\n      (onLoad)=\"onLoad($event)\"\n      [container]=\"container\"\n      class=\"bg-inherit\"\n    >\n    </c8y-asset-selector>\n\n    <div class=\"p-relative p-b-64\" *ngIf=\"isLoading && columnIndex === i && !selectedDevice\">\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <div *ngIf=\"!column.children.length && !isLoading\" class=\"p-l-8 p-r-8\">\n      <c8y-ui-empty-state\n        *ngIf=\"!filterText; else noSearchResults\"\n        [icon]=\"'folder-open'\"\n        [title]=\"'No results to display.' | translate\"\n        [subtitle]=\"'The selected asset has no children.' | translate\"\n        [horizontal]=\"true\"\n      ></c8y-ui-empty-state>\n      <ng-template #noSearchResults>\n        <c8y-ui-empty-state\n          [icon]=\"'folder-open'\"\n          [title]=\"'No results to display for the current filter.' | translate\"\n          [subtitle]=\"'There are no assets matching the filter.' | translate\"\n          [horizontal]=\"true\"\n        ></c8y-ui-empty-state>\n      </ng-template>\n    </div>\n  </div>\n</div>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return MillerViewComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    MillerViewComponent.ctorParameters = function () { return [
        { type: GroupNodeService },
        { type: client.InventoryService },
        { type: AssetSelectorService },
        { type: i0.ChangeDetectorRef }
    ]; };
    MillerViewComponent.propDecorators = {
        config: [{ type: i0.Input }],
        asset: [{ type: i0.Input }],
        selectedDevice: [{ type: i0.Input }],
        rootNode: [{ type: i0.Input }],
        onSelected: [{ type: i0.Output }],
        millerViewWrapper: [{ type: i0.ViewChild, args: ['millerViewWrapper',] }],
        container: [{ type: i0.Input }]
    };

    var AssetSelectorModule = /** @class */ (function () {
        function AssetSelectorModule() {
        }
        return AssetSelectorModule;
    }());
    AssetSelectorModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i3.CoreModule, i3.CommonModule, collapse.CollapseModule, dropdown.BsDropdownModule, i3.SearchModule, forms.FormsModule],
                    exports: [AssetSelectorNodeComponent, AssetSelectorComponent, MillerViewComponent],
                    providers: [GroupNodeService, AssetSelectorService],
                    declarations: [AssetSelectorNodeComponent, AssetSelectorComponent, MillerViewComponent]
                },] }
    ];

    var AssetsNavigatorModule = /** @class */ (function () {
        function AssetsNavigatorModule() {
        }
        AssetsNavigatorModule.config = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: AssetsNavigatorModule,
                providers: [
                    {
                        provide: ASSET_NAVIGATOR_CONFIG,
                        useValue: config
                    }
                ]
            };
        };
        return AssetsNavigatorModule;
    }());
    AssetsNavigatorModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [i3.ModalModule, AssetSelectorModule, i3.DeviceStatusModule],
                    providers: [
                        i3.ModalService,
                        AssetNodeService,
                        {
                            provide: i3.HOOK_NAVIGATOR_NODES,
                            useClass: AssetNodeFactory,
                            multi: true
                        }
                    ],
                    entryComponents: [i3.DeviceStatusComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ASSET_NAVIGATOR_CONFIG = ASSET_NAVIGATOR_CONFIG;
    exports.AssetNode = AssetNode;
    exports.AssetNodeFactory = AssetNodeFactory;
    exports.AssetNodeService = AssetNodeService;
    exports.AssetSelectorComponent = AssetSelectorComponent;
    exports.AssetSelectorModule = AssetSelectorModule;
    exports.AssetSelectorNodeComponent = AssetSelectorNodeComponent;
    exports.AssetsNavigatorModule = AssetsNavigatorModule;
    exports.CONFIG_OPTIONS_DEFAULT = CONFIG_OPTIONS_DEFAULT;
    exports.DeviceGroupService = DeviceGroupService;
    exports.DynamicGroupNode = DynamicGroupNode;
    exports.GroupNode = GroupNode;
    exports.GroupNodeService = GroupNodeService;
    exports.LoadMoreNode = LoadMoreNode;
    exports.MO_TYPES = MO_TYPES;
    exports.MillerViewComponent = MillerViewComponent;
    exports["ɵa"] = AssetSelectorBase;
    exports["ɵb"] = AssetSelectorService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-assets-navigator.umd.js.map
