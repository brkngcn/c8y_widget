(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@c8y/ngx-components'),require('@ngx-formly/core'),require('@ngx-translate/core'),require('@c8y/ngx-components/assets-navigator'),require('@angular/common'),require('@c8y/client'),require('@angular/router'),exports, require('@c8y/ngx-components'), require('@angular/core'), require('lodash-es'), require('@angular/forms'), require('@ngx-translate/core'), require('rxjs'), require('rxjs/operators'), require('@c8y/client'), require('@c8y/client'), require('@c8y/client'), require('@angular/router'), require('@c8y/ngx-components/assets-navigator')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/device-grid', ['@angular/core','@c8y/ngx-components','@ngx-formly/core','@ngx-translate/core','@c8y/ngx-components/assets-navigator','@angular/common','@c8y/client','@angular/router','exports', '@c8y/ngx-components', '@angular/core', 'lodash-es', '@angular/forms', '@ngx-translate/core', 'rxjs', 'rxjs/operators', '@c8y/client', '@c8y/client', '@c8y/client', '@angular/router', '@c8y/ngx-components/assets-navigator'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.c8y.ngxComponents,global.ngxFormly.core,global.ngxTranslate.core,global.c8y.ngxComponents.assetsNavigator,global.ng.common,global.c8y.client,global.ng.router,(global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["device-grid"] = {}), global.c8y["ngx-components"], global.ng.core, global.lodashEs, global.ng.forms, global.i1, global.rxjs, global.rxjs.operators, global.client, global.i1$1, global.i2, global.ng.router, global.c8y["ngx-components"]["assets-navigator"]));
})(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,exports, i4, i0, lodashEs, forms, i1, rxjs, operators, client, i1$1, i2, router, assetsNavigator) { 
var _c0 = ["assetSelector"];
var _c1 = function (a0) { return { selected: a0, groupsOnly: true, multi: true, groupsSelectable: true }; };
function AlarmsCellRendererComponent_small_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "i", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx_r0.context.item.c8y_ActiveAlarmsStatus.critical, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "warning");
} }
function AlarmsCellRendererComponent_small_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "i", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx_r1.context.item.c8y_ActiveAlarmsStatus.major, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "exclamation-circle");
} }
function AlarmsCellRendererComponent_small_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "i", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx_r2.context.item.c8y_ActiveAlarmsStatus.minor, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "exclamation-circle");
} }
function AlarmsCellRendererComponent_small_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "i", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx_r3.context.item.c8y_ActiveAlarmsStatus.warning, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "circle");
} }
function DeviceGridComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-column", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var column_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", column_r1.name);
} }
'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var BaseFilteringFormRendererComponent = /** @class */ (function () {
        function BaseFilteringFormRendererComponent(context, jsonschema) {
            this.context = context;
            this.jsonschema = jsonschema;
        }
        BaseFilteringFormRendererComponent.prototype.onEnterKeyDown = function (event) {
            event.stopPropagation();
            this.applyFilter();
        };
        BaseFilteringFormRendererComponent.prototype.onEscapeKeyDown = function (event) {
            event.stopPropagation();
            this.resetFilter();
        };
        BaseFilteringFormRendererComponent.prototype.ngOnInit = function () {
            var column = this.context.property;
            if (column.filteringConfig.fields) {
                this.fields = lodashEs.cloneDeep(column.filteringConfig.fields);
            }
            else if (!column.filteringConfig.fields && column.filteringConfig.schema) {
                this.schema = lodashEs.cloneDeep(column.filteringConfig.schema);
                this.fields = [this.jsonschema.toFieldConfig(this.schema)];
            }
            else {
                throw new Error("Neither fields nor schema configuration provided for Formly.");
            }
            this.form = column.filteringConfig.formGroup || new forms.FormGroup({});
            this.model = column.externalFilterQuery || column.filteringConfig.model || {};
            this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
        };
        BaseFilteringFormRendererComponent.prototype.applyFilter = function () {
            this.context.applyFilter({
                externalFilterQuery: this.form.value
            });
        };
        BaseFilteringFormRendererComponent.prototype.resetFilter = function () {
            this.context.resetFilter();
        };
BaseFilteringFormRendererComponent.ɵfac = function BaseFilteringFormRendererComponent_Factory(t) { return new (t || BaseFilteringFormRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FilteringFormRendererContext), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.C8yJSONSchema)); };
BaseFilteringFormRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BaseFilteringFormRendererComponent, selectors: [["ng-component"]], hostBindings: function BaseFilteringFormRendererComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.enter", function BaseFilteringFormRendererComponent_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKeyDown($event); })("keydown.escape", function BaseFilteringFormRendererComponent_keydown_escape_HostBindingHandler($event) { return ctx.onEscapeKeyDown($event); });
    } }, decls: 8, vars: 10, consts: [[3, "form", "fields", "model"], [1, "data-grid__dropdown__footer", "d-flex", "separator-top"], ["translate", "", 1, "btn", "btn-default", "btn-sm", "m-r-8", "flex-grow", 3, "title", "click"], ["translate", "", 1, "btn", "btn-primary", "btn-sm", "flex-grow", 3, "disabled", "title", "click"]], template: function BaseFilteringFormRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "formly-form", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵlistener("click", function BaseFilteringFormRendererComponent_Template_button_click_2_listener() { return ctx.resetFilter(); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtext(4, " Reset ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 3);
        ɵngcc0.ɵɵlistener("click", function BaseFilteringFormRendererComponent_Template_button_click_5_listener() { return ctx.applyFilter(); });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵtext(7, " Apply ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("form", ctx.form)("fields", ctx.fields)("model", ctx.model);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 6, "Reset"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 8, "Apply"));
        ɵngcc0.ɵɵproperty("disabled", ctx.form.pristine && ctx.form.untouched || ctx.form.invalid);
    } }, directives: [ɵngcc2.FormlyForm, ɵngcc1.C8yTranslateDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseFilteringFormRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "<formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\"></formly-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"(form.pristine && form.untouched) || form.invalid\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.FilteringFormRendererContext }, { type: ɵngcc1.C8yJSONSchema }]; }, { onEnterKeyDown: [{
            type: i0.HostListener,
            args: ['keydown.enter', ['$event']]
        }], onEscapeKeyDown: [{
            type: i0.HostListener,
            args: ['keydown.escape', ['$event']]
        }] }); })();
        return BaseFilteringFormRendererComponent;
    }());
    BaseFilteringFormRendererComponent.ctorParameters = function () { return [
        { type: i4.FilteringFormRendererContext },
        { type: i4.C8yJSONSchema }
    ]; };
    BaseFilteringFormRendererComponent.propDecorators = {
        onEnterKeyDown: [{ type: i0.HostListener, args: ['keydown.enter', ['$event'],] }],
        onEscapeKeyDown: [{ type: i0.HostListener, args: ['keydown.escape', ['$event'],] }]
    };

    var BaseDeviceGridColumn = /** @class */ (function () {
        function BaseDeviceGridColumn(config) {
            if (config === void 0) { config = {}; }
            this.filteringFormRendererComponent = BaseFilteringFormRendererComponent;
            Object.assign(this, config);
        }
        /**
         * Gets a label template to be used in the schema-form's `type: 'template'` form item.
         * @param label The label to be displayed.
         * @param options Additional options:
         *   - `showWildcardTooltip`: `boolean` - appends a tooltip explaining wildcard usage
         * @returns The string with the template.
         */
        BaseDeviceGridColumn.prototype.getLabelTemplate = function (label, options) {
            if (options === void 0) { options = {}; }
            var wildcardTooltip = "\n      <i\n        class=\"text-info\"\n        c8y-icon=\"info-circle\"\n        title=\"{{ 'Use * as a wildcard character' | translate }}\"\n      ></i>\n    ";
            return "\n      <label>\n        <span>\n          {{ '" + label + "' | translate }}\n        </span>\n        " + (options.showWildcardTooltip ? wildcardTooltip : '') + "\n      </label>\n    ";
        };
        return BaseDeviceGridColumn;
    }());

    var CustomDeviceGridColumn = /** @class */ (function (_super) {
        __extends(CustomDeviceGridColumn, _super);
        function CustomDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            var self = _this;
            _this.name = _this.name || 'custom';
            _this.header = _this.header || i4.gettext('Custom');
            _this.filterable = true;
            _this.filteringConfig = {
                fields: __spreadArray([
                    {
                        key: 'exists',
                        type: 'switch',
                        defaultValue: false,
                        templateOptions: {
                            label: i4.gettext('Only rows where value is defined')
                        }
                    }
                ], __read(i4.getBasicInputArrayFormFieldConfig({
                    key: 'equals',
                    label: i4.gettext('Only rows where value equals to'),
                    addText: i4.gettext('Add next`value`'),
                    tooltip: i4.gettext('Use * as a wildcard character'),
                    placeholder: '10300',
                    optional: true
                }))),
                getFilter: function (model) {
                    var filter = {};
                    if (model.exists) {
                        filter.__has = self.path;
                    }
                    if (model.equals) {
                        filter[self.path] = { __in: model.equals };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return CustomDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var RegistrationDateCellRendererComponent = /** @class */ (function () {
        function RegistrationDateCellRendererComponent(context) {
            this.context = context;
        }
RegistrationDateCellRendererComponent.ɵfac = function RegistrationDateCellRendererComponent_Factory(t) { return new (t || RegistrationDateCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext)); };
RegistrationDateCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RegistrationDateCellRendererComponent, selectors: [["ng-component"]], decls: 2, vars: 3, template: function RegistrationDateCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtext(0);
        ɵngcc0.ɵɵpipe(1, "c8yDate");
    } if (rf & 2) {
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.context.value), " ");
    } }, pipes: [ɵngcc1.DatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegistrationDateCellRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "\n    {{ context.value | c8yDate }}\n  "
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }]; }, null); })();
        return RegistrationDateCellRendererComponent;
    }());
    RegistrationDateCellRendererComponent.ctorParameters = function () { return [
        { type: i4.CellRendererContext }
    ]; };

    var RegistrationDateDeviceGridColumn = /** @class */ (function (_super) {
        __extends(RegistrationDateDeviceGridColumn, _super);
        function RegistrationDateDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            var self = _this;
            _this.path = 'creationTime';
            _this.name = 'registrationDate';
            _this.header = i4.gettext('Registration date');
            _this.cellRendererComponent = RegistrationDateCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                fields: [
                    {
                        type: 'object',
                        key: 'registrationDate',
                        fieldGroup: [
                            {
                                type: 'date-time',
                                key: 'after',
                                templateOptions: {
                                    label: i4.gettext('Show items registered after')
                                },
                                expressionProperties: {
                                    'templateOptions.maxDate': function (model) { return model === null || model === void 0 ? void 0 : model.before; }
                                }
                            },
                            {
                                type: 'date-time',
                                key: 'before',
                                templateOptions: {
                                    label: i4.gettext('And before`date`')
                                },
                                expressionProperties: {
                                    'templateOptions.minDate': function (model) { return model === null || model === void 0 ? void 0 : model.after; }
                                }
                            }
                        ]
                    }
                ],
                formGroup: new forms.FormGroup({}),
                getFilter: function (model) {
                    var _a, _b;
                    var filter = {};
                    var dates = model && model.registrationDate;
                    if (dates && (dates.after || dates.before)) {
                        filter.__and = [];
                        if (dates.after) {
                            var after = self.formatDate(dates.after);
                            filter.__and.push({
                                __or: (_a = {},
                                    _a[self.path] = { __gt: after },
                                    _a[self.path + ".date"] = { __gt: after },
                                    _a)
                            });
                        }
                        if (dates.before) {
                            var before = self.formatDate(dates.before);
                            filter.__and.push({
                                __or: (_b = {},
                                    _b[self.path] = { __lt: before },
                                    _b[self.path + ".date"] = { __lt: before },
                                    _b)
                            });
                        }
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path + ".date" }, { path: _this.path }]
            };
            return _this;
        }
        RegistrationDateDeviceGridColumn.prototype.formatDate = function (dateToFormat) {
            return new Date(dateToFormat).toISOString();
        };
        return RegistrationDateDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var StatusCellRendererComponent = /** @class */ (function () {
        function StatusCellRendererComponent(context) {
            this.context = context;
        }
StatusCellRendererComponent.ɵfac = function StatusCellRendererComponent_Factory(t) { return new (t || StatusCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext)); };
StatusCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StatusCellRendererComponent, selectors: [["ng-component"]], decls: 1, vars: 1, consts: [[3, "mo"]], template: function StatusCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "device-status", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("mo", ctx.context.item);
    } }, directives: [ɵngcc1.DeviceStatusComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StatusCellRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "\n    <device-status [mo]=\"context.item\"></device-status>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }]; }, null); })();
        return StatusCellRendererComponent;
    }());
    StatusCellRendererComponent.ctorParameters = function () { return [
        { type: i4.CellRendererContext }
    ]; };

    var StatusDeviceGridColumn = /** @class */ (function (_super) {
        __extends(StatusDeviceGridColumn, _super);
        function StatusDeviceGridColumn() {
            var _j, _k, _l, _m, _o, _p, _q;
            var _this = _super.call(this) || this;
            var responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';
            var responseIntervalLessThanOrEqualTo0 = (_j = {}, _j[responseIntervalPath] = { __le: 0 }, _j);
            var responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };
            var availabilityStatusPath = 'c8y_Availability.status';
            var availabilityStatusAvailable = (_k = {}, _k[availabilityStatusPath] = i4.SendStatus.AVAILABLE, _k);
            var availabilityStatusUnavailable = (_l = {}, _l[availabilityStatusPath] = i4.SendStatus.UNAVAILABLE, _l);
            var availabilityStatusMaintenance = (_m = {}, _m[availabilityStatusPath] = i4.SendStatus.MAINTENANCE, _m);
            var availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };
            var connectionStatusPath = 'c8y_Connection.status';
            var connectionStatusConnected = (_o = {}, _o[connectionStatusPath] = i4.PushStatus.CONNECTED, _o);
            var connectionStatusDisconnected = (_p = {}, _p[connectionStatusPath] = i4.PushStatus.DISCONNECTED, _p);
            var connectionStatusMaintenance = (_q = {}, _q[connectionStatusPath] = i4.PushStatus.MAINTENANCE, _q);
            var deviceUnderMaintenance = {
                __or: [
                    responseIntervalLessThanOrEqualTo0,
                    availabilityStatusMaintenance,
                    connectionStatusMaintenance
                ]
            };
            var deviceNotUnderMaintenance = {
                // using __and of __nots because backend does not support __not with __ors
                __and: [
                    { __not: responseIntervalLessThanOrEqualTo0 },
                    { __not: availabilityStatusMaintenance },
                    { __not: connectionStatusMaintenance }
                ]
            };
            _this.name = 'status';
            _this.header = i4.gettext('Status');
            _this.dataType = "icon" /* Icon */;
            _this.cellRendererComponent = StatusCellRendererComponent;
            _this.resizable = false;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        sendStatus: {
                            title: i4.gettext('Show devices with send status'),
                            type: 'object',
                            properties: {
                                sendOnline: {
                                    type: 'switch',
                                    title: i4.gettext('Online')
                                },
                                sendOffline: {
                                    type: 'switch',
                                    title: i4.gettext('Offline')
                                },
                                sendUnknown: {
                                    type: 'switch',
                                    title: i4.gettext('Unknown')
                                },
                                sendNotMonitored: {
                                    type: 'switch',
                                    title: i4.gettext('Not monitored')
                                },
                            }
                        },
                        pushStatus: {
                            title: i4.gettext('Show devices with push status'),
                            type: 'object',
                            properties: {
                                pushOnline: {
                                    type: 'switch',
                                    title: i4.gettext('Online')
                                },
                                pushOffline: {
                                    type: 'switch',
                                    title: i4.gettext('Offline')
                                },
                                pushNotMonitored: {
                                    type: 'switch',
                                    title: i4.gettext('Not monitored')
                                },
                            }
                        },
                        maintenanceStatus: {
                            title: i4.gettext('Show devices with maintenance status'),
                            type: 'object',
                            properties: {
                                maintenance: {
                                    type: 'switch',
                                    title: i4.gettext('Device is under maintenance')
                                }
                            }
                        }
                    }
                },
                formGroup: new forms.FormGroup({}),
                getFilter: function (model) {
                    var _a, _b, _c, _d, _e, _f, _g, _h;
                    var filter = {};
                    var ors = [];
                    if ((_a = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _a === void 0 ? void 0 : _a.sendOnline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]
                        });
                    }
                    if ((_b = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _b === void 0 ? void 0 : _b.sendOffline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]
                        });
                    }
                    if ((_c = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _c === void 0 ? void 0 : _c.sendUnknown) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]
                        });
                    }
                    if (((_d = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _d === void 0 ? void 0 : _d.sendNotMonitored) || ((_e = model === null || model === void 0 ? void 0 : model.pushStatus) === null || _e === void 0 ? void 0 : _e.pushNotMonitored)) {
                        ors.push(responseIntervalNotDefined);
                    }
                    if ((_f = model === null || model === void 0 ? void 0 : model.pushStatus) === null || _f === void 0 ? void 0 : _f.pushOnline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, connectionStatusConnected]
                        });
                    }
                    if ((_g = model === null || model === void 0 ? void 0 : model.pushStatus) === null || _g === void 0 ? void 0 : _g.pushOffline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]
                        });
                    }
                    if ((_h = model === null || model === void 0 ? void 0 : model.maintenanceStatus) === null || _h === void 0 ? void 0 : _h.maintenance) {
                        ors.push(deviceUnderMaintenance);
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: availabilityStatusPath }]
            };
            return _this;
        }
        return StatusDeviceGridColumn;
    }(BaseDeviceGridColumn));

    /**
     * Service contains logic extracted from the device-grid service to avoid circular dependency MTM-40239.
     */
    var ColumnUtilService = /** @class */ (function () {
        function ColumnUtilService(translateService) {
            this.translateService = translateService;
        }
        ColumnUtilService.prototype.getAlarmsHref = function (device) {
            return this.getHref(device) + "/alarms";
        };
        ColumnUtilService.prototype.getHref = function (groupOrDevice, prefix) {
            if (prefix === void 0) { prefix = '#/'; }
            if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
                return prefix + "group/" + groupOrDevice.id;
            }
            return prefix + "device/" + groupOrDevice.id;
        };
        ColumnUtilService.prototype.getParentsNames = function (device, featuredParentId) {
            var assetParentsReferences = device.assetParents.references;
            var assetParents = lodashEs.map(assetParentsReferences, 'managedObject');
            var sortedByName = lodashEs.sortBy(assetParents, ['name']);
            var featuredItems = lodashEs.remove(sortedByName, { id: featuredParentId });
            var items = featuredItems.concat(sortedByName);
            var names = lodashEs.map(items, 'name');
            return names.join(', ');
        };
        ColumnUtilService.prototype.getModel = function (device) {
            var hardware = this.getHardware(device);
            return hardware && hardware.model;
        };
        ColumnUtilService.prototype.getProperName = function (device) {
            var id = device.id, name = device.name;
            return name ? name : this.translateService.instant('Device {{id}}', { id: id });
        };
        ColumnUtilService.prototype.getSerialNumber = function (device) {
            var hardware = this.getHardware(device);
            var serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
            return hardware && hardware[serialPropertyName];
        };
        ColumnUtilService.prototype.getHardware = function (device) {
            var hardwarePropertyName = this.isVendme(device)
                ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
                : 'c8y_Hardware';
            return device && device[hardwarePropertyName];
        };
        ColumnUtilService.prototype.isVendme = function (device) {
            return device.type === 'com_nsn_startups_vendme_VendingMachine';
        };
ColumnUtilService.ɵfac = function ColumnUtilService_Factory(t) { return new (t || ColumnUtilService)(ɵngcc0.ɵɵinject(ɵngcc3.TranslateService)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColumnUtilService, [{
        type: i0.Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc3.TranslateService }]; }, null); })();
        return ColumnUtilService;
    }());
    ColumnUtilService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ColumnUtilService_Factory() { return new ColumnUtilService(i0__namespace.ɵɵinject(i1__namespace.TranslateService)); }, token: ColumnUtilService, providedIn: "root" });
    ColumnUtilService.ctorParameters = function () { return [
        { type: i1.TranslateService }
    ]; };

    var GroupCellRendererComponent = /** @class */ (function () {
        function GroupCellRendererComponent(context, columnUtilService) {
            this.context = context;
            this.columnUtilService = columnUtilService;
        }
GroupCellRendererComponent.ɵfac = function GroupCellRendererComponent_Factory(t) { return new (t || GroupCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(ColumnUtilService)); };
GroupCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GroupCellRendererComponent, selectors: [["ng-component"]], decls: 2, vars: 2, consts: [[1, "text-truncate", 3, "title"]], template: function GroupCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.columnUtilService.getParentsNames(ctx.context.item, ctx.context.property.externalFilterQuery == null ? null : ctx.context.property.externalFilterQuery.deviceGroupId));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.columnUtilService.getParentsNames(ctx.context.item, ctx.context.property.externalFilterQuery == null ? null : ctx.context.property.externalFilterQuery.deviceGroupId), "\n");
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GroupCellRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "<span\n  title=\"{{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\"\n  class=\"text-truncate\"\n>\n  {{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\n</span>\n"
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: ColumnUtilService }]; }, null); })();
        return GroupCellRendererComponent;
    }());
    GroupCellRendererComponent.ctorParameters = function () { return [
        { type: i4.CellRendererContext },
        { type: ColumnUtilService }
    ]; };

    var GroupFilteringFormRendererComponent = /** @class */ (function () {
        function GroupFilteringFormRendererComponent(context) {
            this.context = context;
            this.preselected = [];
        }
        GroupFilteringFormRendererComponent.prototype.onEnterKeyDown = function (event) {
            event.stopPropagation();
            this.applyFilter();
        };
        GroupFilteringFormRendererComponent.prototype.onEscapeKeyDown = function (event) {
            event.stopPropagation();
            this.resetFilter();
        };
        GroupFilteringFormRendererComponent.prototype.ngOnInit = function () {
            var column = this.context.property;
            this.model = lodashEs.cloneDeep(column.externalFilterQuery || {});
            this.preselected = this.model.selectedNodes || [];
        };
        GroupFilteringFormRendererComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                try {
                    _this.assetSelector.nativeElement.querySelector('input').focus();
                }
                catch (ex) {
                    // intended empty
                }
            }, 250);
        };
        GroupFilteringFormRendererComponent.prototype.applyFilter = function () {
            this.context.applyFilter({
                externalFilterQuery: this.model
            });
        };
        GroupFilteringFormRendererComponent.prototype.resetFilter = function () {
            this.context.resetFilter();
        };
        GroupFilteringFormRendererComponent.prototype.selectionChanged = function (nodes) {
            this.model.selectedNodes = nodes.items;
        };
GroupFilteringFormRendererComponent.ɵfac = function GroupFilteringFormRendererComponent_Factory(t) { return new (t || GroupFilteringFormRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FilteringFormRendererContext)); };
GroupFilteringFormRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GroupFilteringFormRendererComponent, selectors: [["ng-component"]], viewQuery: function GroupFilteringFormRendererComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5, i0.ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.assetSelector = _t.first);
    } }, hostBindings: function GroupFilteringFormRendererComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.enter", function GroupFilteringFormRendererComponent_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKeyDown($event); })("keydown.escape", function GroupFilteringFormRendererComponent_keydown_escape_HostBindingHandler($event) { return ctx.onEscapeKeyDown($event); });
    } }, decls: 9, vars: 9, consts: [[3, "config", "onSelected"], ["assetSelector", ""], [1, "data-grid__dropdown__footer", "d-flex", "separator-top"], ["translate", "", 1, "btn", "btn-default", "btn-sm", "m-r-8", "flex-grow", 3, "title", "click"], ["translate", "", 1, "btn", "btn-primary", "btn-sm", "flex-grow", 3, "title", "click"]], template: function GroupFilteringFormRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-asset-selector", 0, 1);
        ɵngcc0.ɵɵlistener("onSelected", function GroupFilteringFormRendererComponent_Template_c8y_asset_selector_onSelected_0_listener($event) { return ctx.selectionChanged($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵlistener("click", function GroupFilteringFormRendererComponent_Template_button_click_3_listener() { return ctx.resetFilter(); });
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtext(5, " Reset ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "button", 4);
        ɵngcc0.ɵɵlistener("click", function GroupFilteringFormRendererComponent_Template_button_click_6_listener() { return ctx.applyFilter(); });
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵtext(8, " Apply ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("config", ɵngcc0.ɵɵpureFunction1(7, _c1, ctx.preselected));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 3, "Reset"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 5, "Apply"));
    } }, directives: [ɵngcc4.AssetSelectorComponent, ɵngcc1.C8yTranslateDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GroupFilteringFormRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "<c8y-asset-selector\n  #assetSelector\n  [config]=\"{ selected: preselected, groupsOnly: true, multi: true, groupsSelectable: true }\"\n  (onSelected)=\"selectionChanged($event)\"\n></c8y-asset-selector>\n\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.FilteringFormRendererContext }]; }, { onEnterKeyDown: [{
            type: i0.HostListener,
            args: ['keydown.enter', ['$event']]
        }], onEscapeKeyDown: [{
            type: i0.HostListener,
            args: ['keydown.escape', ['$event']]
        }], assetSelector: [{
            type: i0.ViewChild,
            args: ['assetSelector', { static: false, read: i0.ElementRef }]
        }] }); })();
        return GroupFilteringFormRendererComponent;
    }());
    GroupFilteringFormRendererComponent.ctorParameters = function () { return [
        { type: i4.FilteringFormRendererContext }
    ]; };
    GroupFilteringFormRendererComponent.propDecorators = {
        assetSelector: [{ type: i0.ViewChild, args: ['assetSelector', { static: false, read: i0.ElementRef },] }],
        onEnterKeyDown: [{ type: i0.HostListener, args: ['keydown.enter', ['$event'],] }],
        onEscapeKeyDown: [{ type: i0.HostListener, args: ['keydown.escape', ['$event'],] }]
    };

    var GroupDeviceGridColumn = /** @class */ (function (_super) {
        __extends(GroupDeviceGridColumn, _super);
        function GroupDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'group';
            _this.header = i4.gettext('Group');
            _this.cellRendererComponent = GroupCellRendererComponent;
            _this.filteringFormRendererComponent = GroupFilteringFormRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                getFilter: function (model) {
                    var filter = {};
                    if (model.selectedNodes) {
                        filter.__or = model.selectedNodes.map(function (mo) {
                            if (mo.c8y_DeviceQueryString) {
                                return { __useFilterQueryString: mo.c8y_DeviceQueryString };
                            }
                            return { __bygroupid: mo.id };
                        });
                    }
                    return filter;
                }
            };
            _this.sortable = false;
            return _this;
        }
        return GroupDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var NameCellRendererComponent = /** @class */ (function () {
        function NameCellRendererComponent(context, columnUtilService) {
            this.context = context;
            this.columnUtilService = columnUtilService;
        }
NameCellRendererComponent.ɵfac = function NameCellRendererComponent_Factory(t) { return new (t || NameCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(ColumnUtilService)); };
NameCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NameCellRendererComponent, selectors: [["ng-component"]], decls: 2, vars: 3, consts: [[1, "interact", 3, "href", "title"]], template: function NameCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "a", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.columnUtilService.getProperName(ctx.context.item));
        ɵngcc0.ɵɵproperty("href", ctx.columnUtilService.getHref(ctx.context.item), ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.columnUtilService.getProperName(ctx.context.item), " ");
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NameCellRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "\n    <a\n      [href]=\"columnUtilService.getHref(context.item)\"\n      title=\"{{ columnUtilService.getProperName(context.item) }}\"\n      class=\"interact\"\n    >\n      {{ columnUtilService.getProperName(context.item) }}\n    </a>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: ColumnUtilService }]; }, null); })();
        return NameCellRendererComponent;
    }());
    NameCellRendererComponent.ctorParameters = function () { return [
        { type: i4.CellRendererContext },
        { type: ColumnUtilService }
    ]; };

    var SystemIdDeviceGridColumn = /** @class */ (function (_super) {
        __extends(SystemIdDeviceGridColumn, _super);
        function SystemIdDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            var self = _this;
            _this.path = 'id';
            _this.name = 'systemId';
            _this.header = i4.gettext('System ID');
            _this.filterable = true;
            _this.filteringConfig = {
                fields: i4.getBasicInputArrayFormFieldConfig({
                    key: 'ids',
                    label: i4.gettext('Show items with system ID'),
                    addText: i4.gettext('Add next`id`'),
                    tooltip: i4.gettext('Use * as a wildcard character'),
                    placeholder: '10300'
                }),
                getFilter: function (model) {
                    var filter = {};
                    if (model.ids.length) {
                        filter[self.path] = { __in: model.ids };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return SystemIdDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var ModelCellRendererComponent = /** @class */ (function () {
        function ModelCellRendererComponent(context, columnUtilService) {
            this.context = context;
            this.columnUtilService = columnUtilService;
        }
ModelCellRendererComponent.ɵfac = function ModelCellRendererComponent_Factory(t) { return new (t || ModelCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(ColumnUtilService)); };
ModelCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ModelCellRendererComponent, selectors: [["ng-component"]], decls: 1, vars: 1, template: function ModelCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtext(0);
    } if (rf & 2) {
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.columnUtilService.getModel(ctx.context.item), " ");
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModelCellRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "\n    {{ columnUtilService.getModel(context.item) }}\n  "
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: ColumnUtilService }]; }, null); })();
        return ModelCellRendererComponent;
    }());
    ModelCellRendererComponent.ctorParameters = function () { return [
        { type: i4.CellRendererContext },
        { type: ColumnUtilService }
    ]; };

    var TypeDeviceGridColumn = /** @class */ (function (_super) {
        __extends(TypeDeviceGridColumn, _super);
        function TypeDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'type';
            _this.path = 'type';
            _this.header = i4.gettext('Type');
            _this.filterable = true;
            _this.filteringConfig = {
                fields: i4.getBasicInputArrayFormFieldConfig({
                    key: 'types',
                    label: i4.gettext('Show devices with type'),
                    addText: i4.gettext('Add next`type`'),
                    tooltip: i4.gettext('Use * as a wildcard character'),
                    placeholder: i4.gettext('MyType`DEVICE_TYPE`')
                }),
                getFilter: function (model) {
                    var filter = {};
                    if (model.types.length) {
                        filter.type = { __in: model.types };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = { pathSortingConfigs: [{ path: 'type' }] };
            return _this;
        }
        return TypeDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var ImeiDeviceGridColumn = /** @class */ (function (_super) {
        __extends(ImeiDeviceGridColumn, _super);
        function ImeiDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            var self = _this;
            _this.path = 'c8y_Mobile.imei';
            _this.name = 'imei';
            _this.header = i4.gettext('IMEI');
            _this.filterable = true;
            _this.filteringConfig = {
                fields: i4.getBasicInputArrayFormFieldConfig({
                    key: 'imeis',
                    label: i4.gettext('Show items with IMEI'),
                    addText: i4.gettext('Add next`IMEI`'),
                    tooltip: i4.gettext('Use * as a wildcard character'),
                    placeholder: '46543432321'
                }),
                getFilter: function (model) {
                    var filter = {};
                    if (model.imeis.length) {
                        filter[self.path] = { __in: model.imeis };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return ImeiDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var NameDeviceGridColumn = /** @class */ (function (_super) {
        __extends(NameDeviceGridColumn, _super);
        function NameDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'name';
            _this.path = 'name';
            _this.header = i4.gettext('Name');
            _this.cellCSSClassName = "data-record-header" /* Header */;
            _this.cellRendererComponent = NameCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                fields: i4.getBasicInputArrayFormFieldConfig({
                    key: 'names',
                    label: i4.gettext('Show items with name'),
                    addText: i4.gettext('Add next`name`'),
                    tooltip: i4.gettext('Use * as a wildcard character'),
                    placeholder: i4.gettext('My device`DEVICE_NAME`')
                }),
                getFilter: function (model) {
                    var filter = {};
                    if (model.names.length) {
                        filter.name = { __in: model.names };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return NameDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var ModelDeviceGridColumn = /** @class */ (function (_super) {
        __extends(ModelDeviceGridColumn, _super);
        function ModelDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            var hardwareModelPath = 'c8y_Hardware.model';
            var vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';
            _this.name = 'model';
            _this.header = i4.gettext('Model');
            _this.cellRendererComponent = ModelCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                fields: i4.getBasicInputArrayFormFieldConfig({
                    key: 'models',
                    label: i4.gettext('Show items with model'),
                    addText: i4.gettext('Add next`model`'),
                    tooltip: i4.gettext('Use * as a wildcard character'),
                    placeholder: 'NTC-220'
                }),
                getFilter: function (model) {
                    var _a;
                    var filter = {};
                    if (model.models.length) {
                        filter.__or = (_a = {},
                            _a[hardwareModelPath] = { __in: model.models },
                            _a[vendingModelPath] = { __in: model.models },
                            _a);
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]
            };
            return _this;
        }
        return ModelDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var AlarmsCellRendererComponent = /** @class */ (function () {
        function AlarmsCellRendererComponent(context, columnUtilService) {
            this.context = context;
            this.columnUtilService = columnUtilService;
        }
AlarmsCellRendererComponent.ɵfac = function AlarmsCellRendererComponent_Factory(t) { return new (t || AlarmsCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(ColumnUtilService)); };
AlarmsCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AlarmsCellRendererComponent, selectors: [["ng-component"]], decls: 5, vars: 5, consts: [[1, "listLink", 3, "href"], ["class", "status critical text-nowrap", 4, "ngIf"], ["class", "status major text-nowrap", 4, "ngIf"], ["class", "status minor text-nowrap", 4, "ngIf"], ["class", "status warning text-nowrap", 4, "ngIf"], [1, "status", "critical", "text-nowrap"], [3, "c8yIcon"], [1, "status", "major", "text-nowrap"], [1, "status", "minor", "text-nowrap"], [1, "status", "warning", "text-nowrap"]], template: function AlarmsCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "a", 0);
        ɵngcc0.ɵɵtemplate(1, AlarmsCellRendererComponent_small_1_Template, 3, 2, "small", 1);
        ɵngcc0.ɵɵtemplate(2, AlarmsCellRendererComponent_small_2_Template, 3, 2, "small", 2);
        ɵngcc0.ɵɵtemplate(3, AlarmsCellRendererComponent_small_3_Template, 3, 2, "small", 3);
        ɵngcc0.ɵɵtemplate(4, AlarmsCellRendererComponent_small_4_Template, 3, 2, "small", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("href", ctx.columnUtilService.getAlarmsHref(ctx.context.item), ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx.context.item.c8y_ActiveAlarmsStatus.critical);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx.context.item.c8y_ActiveAlarmsStatus.major);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx.context.item.c8y_ActiveAlarmsStatus.minor);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.context.item.c8y_ActiveAlarmsStatus == null ? null : ctx.context.item.c8y_ActiveAlarmsStatus.warning);
    } }, directives: [ɵngcc5.NgIf, ɵngcc1.IconDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlarmsCellRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "<a class=\"listLink\" [href]=\"columnUtilService.getAlarmsHref(context.item)\">\n  <small class=\"status critical text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.critical\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.critical }}\n    <i [c8yIcon]=\"'warning'\"></i>\n  </small>\n  <small class=\"status major text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.major\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.major }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small class=\"status minor text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.minor\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.minor }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small class=\"status warning text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.warning\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.warning }}\n    <i [c8yIcon]=\"'circle'\"></i>\n  </small>\n</a>\n"
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: ColumnUtilService }]; }, null); })();
        return AlarmsCellRendererComponent;
    }());
    AlarmsCellRendererComponent.ctorParameters = function () { return [
        { type: i4.CellRendererContext },
        { type: ColumnUtilService }
    ]; };

    var AlarmsDeviceGridColumn = /** @class */ (function (_super) {
        __extends(AlarmsDeviceGridColumn, _super);
        function AlarmsDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'alarms';
            _this.header = i4.gettext('Alarms');
            _this.cellRendererComponent = AlarmsCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        alarm: {
                            type: 'object',
                            title: i4.gettext('Show items'),
                            properties: {
                                critical: {
                                    type: 'switch',
                                    title: i4.gettext('With active critical alarms')
                                },
                                major: {
                                    type: 'switch',
                                    title: i4.gettext('With active major alarms')
                                },
                                minor: {
                                    type: 'switch',
                                    title: i4.gettext('With active minor alarms')
                                },
                                warning: {
                                    type: 'switch',
                                    title: i4.gettext('With active warnings')
                                },
                                none: {
                                    type: 'switch',
                                    title: i4.gettext('With no active alarms or warnings')
                                }
                            }
                        },
                    }
                },
                getFilter: function (model) {
                    var filter = {};
                    var ors = [];
                    if (model.alarm.critical) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                    }
                    if (model.alarm.major) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                    }
                    if (model.alarm.minor) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                    }
                    if (model.alarm.warning) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                    }
                    if (model.alarm.none) {
                        ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                        ors.push({
                            __and: lodashEs.map(['critical', 'major', 'minor', 'warning'], function (sev) {
                                var zero = {};
                                var has = { __not: { __has: undefined } };
                                var key = "c8y_ActiveAlarmsStatus." + sev;
                                zero[key] = 0;
                                has.__not.__has = key;
                                return { __or: [zero, has] };
                            })
                        });
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [
                    { path: 'c8y_ActiveAlarmsStatus.critical' },
                    { path: 'c8y_ActiveAlarmsStatus.major' },
                    { path: 'c8y_ActiveAlarmsStatus.minor' },
                    { path: 'c8y_ActiveAlarmsStatus.warning' }
                ]
            };
            return _this;
        }
        return AlarmsDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var SerialNumberCellRendererComponent = /** @class */ (function () {
        function SerialNumberCellRendererComponent(context, columnUtilService) {
            this.context = context;
            this.columnUtilService = columnUtilService;
        }
SerialNumberCellRendererComponent.ɵfac = function SerialNumberCellRendererComponent_Factory(t) { return new (t || SerialNumberCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(ColumnUtilService)); };
SerialNumberCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SerialNumberCellRendererComponent, selectors: [["ng-component"]], decls: 1, vars: 1, template: function SerialNumberCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtext(0);
    } if (rf & 2) {
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.columnUtilService.getSerialNumber(ctx.context.item), " ");
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SerialNumberCellRendererComponent, [{
        type: i0.Component,
        args: [{
                template: "\n    {{ columnUtilService.getSerialNumber(context.item) }}\n  "
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: ColumnUtilService }]; }, null); })();
        return SerialNumberCellRendererComponent;
    }());
    SerialNumberCellRendererComponent.ctorParameters = function () { return [
        { type: i4.CellRendererContext },
        { type: ColumnUtilService }
    ]; };

    var SerialNumberDeviceGridColumn = /** @class */ (function (_super) {
        __extends(SerialNumberDeviceGridColumn, _super);
        function SerialNumberDeviceGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            var hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
            var vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
            _this.name = 'serialNumber';
            _this.header = i4.gettext('Serial number');
            _this.cellRendererComponent = SerialNumberCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                fields: i4.getBasicInputArrayFormFieldConfig({
                    key: 'serialNumbers',
                    label: i4.gettext('Show items with serial number'),
                    addText: i4.gettext('Add next`serial number`'),
                    tooltip: i4.gettext('Use * as a wildcard character'),
                    placeholder: '54321-123'
                }),
                getFilter: function (model) {
                    var _a;
                    var filter = {};
                    if (model.serialNumbers.length) {
                        filter.__or = (_a = {},
                            _a[hardwareSerialNumberPath] = { __in: model.serialNumbers },
                            _a[vendingSerialNumberPath] = { __in: model.serialNumbers },
                            _a);
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
            };
            return _this;
        }
        return SerialNumberDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var DecoratorService = /** @class */ (function () {
        function DecoratorService(service) {
            DecoratorService.mapperService = service;
        }
        DecoratorService.getMapperService = function () {
            if (!DecoratorService.mapperService) {
                throw new Error('DecoratorService not initialized');
            }
            return DecoratorService.mapperService;
        };
DecoratorService.ɵfac = function DecoratorService_Factory(t) { return new (t || DecoratorService)(ɵngcc0.ɵɵinject(DeviceGridConfigMapperService)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DecoratorService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: DeviceGridConfigMapperService }]; }, null); })();
        return DecoratorService;
    }());
    DecoratorService.mapperService = undefined;
    DecoratorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DecoratorService_Factory() { return new DecoratorService(i0__namespace.ɵɵinject(DeviceGridConfigMapperService)); }, token: DecoratorService, providedIn: "root" });
    DecoratorService.ctorParameters = function () { return [
        { type: DeviceGridConfigMapperService }
    ]; };

    function mapLegacyGridConfiguration() {
        return function (target, key, descriptor) {
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var mapperService = DecoratorService.getMapperService();
                return mapperService.getMappedGridConfig(args[0]);
            };
            return descriptor;
        };
    }

    var DeviceGridService = /** @class */ (function () {
        function DeviceGridService(inventoryService, userService, translateService, alertService, modal, columnUtilService, userPreferencesService, gainsightService) {
            this.inventoryService = inventoryService;
            this.userService = userService;
            this.translateService = translateService;
            this.alertService = alertService;
            this.modal = modal;
            this.columnUtilService = columnUtilService;
            this.userPreferencesService = userPreferencesService;
            this.gainsightService = gainsightService;
            this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'device-grid-config';
            this.DEFAULT_PAGE_SIZE = 20;
            this.queriesUtil = new client.QueriesUtil();
        }
        DeviceGridService.prototype.getDefaultColumns = function () {
            var defaultColumns = [
                new StatusDeviceGridColumn(),
                new NameDeviceGridColumn(),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn(),
                new GroupDeviceGridColumn(),
                new RegistrationDateDeviceGridColumn(),
                new SystemIdDeviceGridColumn(),
                new ImeiDeviceGridColumn(),
                new AlarmsDeviceGridColumn()
            ];
            return defaultColumns;
        };
        DeviceGridService.prototype.getChildDeviceGridColumns = function () {
            var childDeviceGridColumn = [
                new StatusDeviceGridColumn(),
                new NameDeviceGridColumn(),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn(),
                new RegistrationDateDeviceGridColumn(),
                new SystemIdDeviceGridColumn(),
                new ImeiDeviceGridColumn(),
                new AlarmsDeviceGridColumn()
            ];
            return childDeviceGridColumn;
        };
        DeviceGridService.prototype.getDefaultPagination = function () {
            return {
                pageSize: 10,
                currentPage: 1
            };
        };
        DeviceGridService.prototype.getInfiniteScrollPagination = function () {
            return {
                pageSize: 50,
                currentPage: 1
            };
        };
        DeviceGridService.prototype.getDefaultActionControls = function () {
            var _this = this;
            return [
                {
                    type: "DELETE" /* Delete */,
                    callback: function (item) { return _this.delete(item); }
                }
            ];
        };
        DeviceGridService.prototype.getDefaultBulkActionControls = function () {
            return [];
        };
        DeviceGridService.prototype.getDefaultHeaderActionControls = function () {
            return [];
        };
        DeviceGridService.prototype.getProperName = function (device) {
            return this.columnUtilService.getProperName(device);
        };
        DeviceGridService.prototype.getModel = function (device) {
            return this.columnUtilService.getModel(device);
        };
        DeviceGridService.prototype.getSerialNumber = function (device) {
            return this.columnUtilService.getSerialNumber(device);
        };
        DeviceGridService.prototype.getParentsNames = function (device, featuredParentId) {
            return this.columnUtilService.getParentsNames(device, featuredParentId);
        };
        DeviceGridService.prototype.getHref = function (groupOrDevice, prefix) {
            if (prefix === void 0) { prefix = '#/'; }
            return this.columnUtilService.getHref(groupOrDevice, prefix);
        };
        DeviceGridService.prototype.getAlarmsHref = function (device) {
            return this.columnUtilService.getAlarmsHref(device);
        };
        /**
         * @deprecated Use getUserConfiguredColumns$(Column[] | Observable<Column[]>, string) instead.
         */
        DeviceGridService.prototype.getUserConfiguredColumns = function (columns, storageKey) {
            return this.applyConfigToColumns(this.getConfig2(storageKey), columns, storageKey);
        };
        DeviceGridService.prototype.getUserConfiguredColumns$ = function (columns, storageKey) {
            var _this = this;
            return this.getConfig$(storageKey).pipe(operators.withLatestFrom(rxjs.isObservable(columns) ? columns : rxjs.of(columns)), operators.map(function (_g) {
                var _h = __read(_g, 2), config = _h[0], cols = _h[1];
                return _this.applyConfigToColumns(config, cols, storageKey);
            }), operators.take(1), operators.share());
        };
        DeviceGridService.prototype.delete = function (device) {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter(this, void 0, void 0, function () {
                var deviceWithChildren, hasChildDevices_1, hasChildAdditions_1, hasChildAssets_1, showDeleteChildren, modalResult, ex_1;
                var _this = this;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            _g.trys.push([0, 5, , 6]);
                            return [4 /*yield*/, this.inventoryService.detail(device, { withChildren: true })];
                        case 1: return [4 /*yield*/, (_g.sent()).data];
                        case 2:
                            deviceWithChildren = _g.sent();
                            hasChildDevices_1 = ((_b = (_a = deviceWithChildren.childDevices) === null || _a === void 0 ? void 0 : _a.references) === null || _b === void 0 ? void 0 : _b.length) > 0;
                            hasChildAdditions_1 = ((_d = (_c = deviceWithChildren.childAdditions) === null || _c === void 0 ? void 0 : _c.references) === null || _d === void 0 ? void 0 : _d.length) > 0;
                            hasChildAssets_1 = ((_f = (_e = deviceWithChildren.childAssets) === null || _e === void 0 ? void 0 : _e.references) === null || _f === void 0 ? void 0 : _f.length) > 0;
                            showDeleteChildren = function () { return hasChildAdditions_1 || hasChildDevices_1 || hasChildAssets_1; };
                            return [4 /*yield*/, this.modal.confirm(i4.gettext('Delete device'), this.translateService.instant(i4.gettext("You are about to delete device \"{{ name }}\". Do you want to proceed?"), device), i4.Status.DANGER, { ok: i4.gettext('Delete'), cancel: i4.gettext('Cancel') }, {
                                    cascade: {
                                        text: i4.gettext('Also delete child hierarchy of this device.'),
                                        checked: showDeleteChildren(),
                                        showIf: showDeleteChildren,
                                        disabledByKey: 'withDeviceUser'
                                    },
                                    withDeviceUser: {
                                        text: this.translateService.instant(i4.gettext('Also delete associated device owner "{{ owner }}".'), device),
                                        checked: false,
                                        showIf: function () {
                                            var isRootDevice = device.c8y_IsDevice;
                                            var hasDeviceUserAsOwner = device.owner &&
                                                _this.userService.isDeviceUser({ id: device.owner });
                                            return Boolean(isRootDevice && hasDeviceUserAsOwner);
                                        },
                                        disabledByKey: 'cascade'
                                    }
                                })];
                        case 3:
                            modalResult = _g.sent();
                            return [4 /*yield*/, this.inventoryService.delete(device, modalResult.confirmOptions)];
                        case 4:
                            _g.sent();
                            this.alertService.success(i4.gettext('Device deleted.'));
                            if (this.gainsightService) {
                                this.gainsightService.triggerEvent('deviceGrid:EntryDeleted');
                            }
                            return [2 /*return*/, Promise.resolve()];
                        case 5:
                            ex_1 = _g.sent();
                            // only if not cancel from modal
                            if (this.gainsightService && !ex_1) {
                                this.gainsightService.triggerEvent('deviceGrid:EntryDeletionCancelled');
                            }
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [2 /*return*/, Promise.reject()];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceGridService.prototype.getData = function (columns, pagination, query, withChildren) {
            if (query === void 0) { query = {}; }
            if (withChildren === void 0) { withChildren = false; }
            return __awaiter(this, void 0, void 0, function () {
                var filters;
                return __generator(this, function (_g) {
                    filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query)), { withGroups: true, withChildren: withChildren });
                    return [2 /*return*/, this.inventoryService.list(filters)];
                });
            });
        };
        DeviceGridService.prototype.getChildDeviceData = function (columns, pagination, query, withChildren, id) {
            if (query === void 0) { query = {}; }
            if (withChildren === void 0) { withChildren = false; }
            return __awaiter(this, void 0, void 0, function () {
                var childDeviceFilters, filters;
                return __generator(this, function (_g) {
                    childDeviceFilters = true;
                    filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query, childDeviceFilters)), { withGroups: true, withChildren: withChildren });
                    return [2 /*return*/, this.inventoryService.childDevicesList(id, filters)];
                });
            });
        };
        DeviceGridService.prototype.getCount = function (columns, pagination, query) {
            if (query === void 0) { query = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var filters;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query)), { pageSize: 1, currentPage: 1 });
                            return [4 /*yield*/, this.inventoryService.list(filters)];
                        case 1: return [2 /*return*/, (_g.sent()).paging.totalPages];
                    }
                });
            });
        };
        DeviceGridService.prototype.getCountChildDevices = function (columns, pagination, query, id) {
            if (query === void 0) { query = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var childDeviceFilters, filters;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            childDeviceFilters = true;
                            filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query, childDeviceFilters)), { pageSize: 1, currentPage: 1 });
                            return [4 /*yield*/, this.inventoryService.childDevicesList(id, filters)];
                        case 1: return [2 /*return*/, (_g.sent()).paging.totalPages];
                    }
                });
            });
        };
        DeviceGridService.prototype.getTotalChildDevices = function (query, id) {
            if (query === void 0) { query = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var filters;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            filters = {
                                q: this.queriesUtil.buildQuery(query),
                                pageSize: 1,
                                withTotalPages: true
                            };
                            return [4 /*yield*/, this.inventoryService.childDevicesList(id, filters)];
                        case 1: return [2 /*return*/, (_g.sent()).paging.totalPages];
                    }
                });
            });
        };
        DeviceGridService.prototype.getTotal = function (query) {
            if (query === void 0) { query = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var filters;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            filters = {
                                q: this.queriesUtil.buildQuery(query),
                                pageSize: 1,
                                withTotalPages: true
                            };
                            return [4 /*yield*/, this.inventoryService.list(filters)];
                        case 1: return [2 /*return*/, (_g.sent()).paging.totalPages];
                    }
                });
            });
        };
        DeviceGridService.prototype.getDeviceQueryString = function (columns, query) {
            var fullQuery = this.getQueryObj(columns);
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, query);
            return this.queriesUtil.buildQuery(fullQuery);
        };
        DeviceGridService.prototype.getQueryObj = function (columns, defaultFilter) {
            var _this = this;
            if (defaultFilter === void 0) { defaultFilter = {}; }
            return lodashEs.transform(columns, function (query, column) { return _this.extendQueryByColumn(query, column); }, Object.assign({ __filter: {}, __orderby: [] }, defaultFilter));
        };
        /**
         * @deprecated Use getConfig$(key: string): Observable<GridConfig> instead.
         */
        DeviceGridService.prototype.getConfig = function (key) {
            if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
            return this.getConfig2(key);
        };
        /**
         * @deprecated Use saveConfig$(config: GridConfig, key: string): Promise<GridConfig> instead.
         */
        DeviceGridService.prototype.saveConfig = function (config, key) {
            if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
            localStorage.setItem(key, JSON.stringify(config));
        };
        DeviceGridService.prototype.clearConfig = function (key) {
            if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
            localStorage.removeItem(key);
        };
        DeviceGridService.prototype.getConfig$ = function (key) {
            var _this = this;
            if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
            return this.userPreferencesService.get(key).pipe(operators.map(function (config) { return config || {
                columns: [],
                pagination: { pageSize: _this.DEFAULT_PAGE_SIZE, currentPage: 1 }
            }; }));
        };
        DeviceGridService.prototype.saveConfig$ = function (config, key) {
            if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
            return rxjs.from(this.userPreferencesService.set(key, config));
        };
        DeviceGridService.prototype.applyConfigToColumns = function (config, columns, storageKey) {
            if (config.columns.length > 0) {
                var reOrderedColumns_1 = [];
                var noConfigColumns = [];
                try {
                    var customColumns = config.columns
                        .filter(function (col) { return col.custom; })
                        .map(function (col) { return new CustomDeviceGridColumn(col); });
                    var allColumns_1 = __spreadArray(__spreadArray([], __read(columns)), __read(customColumns));
                    noConfigColumns = allColumns_1.filter(function (col) { return !config.columns.some(function (configCol) { return col.name === configCol.name; }); });
                    config.columns.forEach(function (_g) {
                        var visible = _g.visible, name = _g.name, sortOrder = _g.sortOrder, filter = _g.filter;
                        var columnToReorder = allColumns_1.find(function (col) { return col.name === name; });
                        if (columnToReorder) {
                            columnToReorder.visible = visible;
                            columnToReorder.sortOrder = sortOrder;
                            columnToReorder.externalFilterQuery = filter === null || filter === void 0 ? void 0 : filter.externalFilterQuery;
                            reOrderedColumns_1.push(columnToReorder);
                        }
                    });
                }
                catch (ex) {
                    this.clearConfig(storageKey);
                }
                return __spreadArray(__spreadArray([], __read(reOrderedColumns_1)), __read(noConfigColumns));
            }
            return columns;
        };
        // TODO: REMOVE ME
        // Added because usage of getConfig breaks JSdoc deprecations, otherwise compodoc build fails
        DeviceGridService.prototype.getConfig2 = function (key) {
            if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
            var config = JSON.parse(localStorage.getItem(key));
            if (config === null) {
                return { columns: [], pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 } };
            }
            return config;
        };
        DeviceGridService.prototype.getHardware = function (device) {
            var hardwarePropertyName = this.isVendme(device)
                ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
                : 'c8y_Hardware';
            return device && device[hardwarePropertyName];
        };
        DeviceGridService.prototype.isVendme = function (device) {
            return device.type === 'com_nsn_startups_vendme_VendingMachine';
        };
        DeviceGridService.prototype.getDevicesFilters = function (columns, pagination, query, childDeviceFilters) {
            return Object.assign(Object.assign({}, (childDeviceFilters
                ? { query: this.getDeviceQueryString(columns, query) }
                : { q: this.getDeviceQueryString(columns, query) })), { pageSize: pagination.pageSize, currentPage: pagination.currentPage, withChildren: false, withTotalPages: true });
        };
        DeviceGridService.prototype.extendQueryByColumn = function (query, column) {
            if (column.filterable && column.externalFilterQuery) {
                var getFilter = column.filteringConfig.getFilter || lodashEs.identity;
                var queryObj = getFilter(column.externalFilterQuery);
                if (queryObj.__or) {
                    query.__filter.__and = query.__filter.__and || [];
                    query.__filter.__and.push(queryObj);
                }
                else if (queryObj.__and && lodashEs.get(query, '__filter.__and')) {
                    queryObj.__and.map(function (obj) { return query.__filter.__and.push(obj); });
                }
                else {
                    lodashEs.assign(query.__filter, queryObj);
                }
            }
            if (column.sortable && column.sortOrder) {
                var cs_1 = {};
                lodashEs.forEach(column.sortingConfig.pathSortingConfigs, function (pathSortingConfig) {
                    cs_1[pathSortingConfig.path] =
                        (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
                });
                query.__orderby.push(cs_1);
            }
            return query;
        };
DeviceGridService.ɵfac = function DeviceGridService_Factory(t) { return new (t || DeviceGridService)(ɵngcc0.ɵɵinject(ɵngcc6.InventoryService), ɵngcc0.ɵɵinject(ɵngcc6.UserService), ɵngcc0.ɵɵinject(ɵngcc3.TranslateService), ɵngcc0.ɵɵinject(ɵngcc1.AlertService), ɵngcc0.ɵɵinject(ɵngcc1.ModalService), ɵngcc0.ɵɵinject(ColumnUtilService), ɵngcc0.ɵɵinject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵinject(ɵngcc1.GainsightService, 8)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.InventoryService }, { type: ɵngcc6.UserService }, { type: ɵngcc3.TranslateService }, { type: ɵngcc1.AlertService }, { type: ɵngcc1.ModalService }, { type: ColumnUtilService }, { type: ɵngcc1.UserPreferencesService }, { type: ɵngcc1.GainsightService, decorators: [{
                type: i0.Optional
            }] }]; }, null); })();
        return DeviceGridService;
    }());
    DeviceGridService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DeviceGridService_Factory() { return new DeviceGridService(i0__namespace.ɵɵinject(i1__namespace$1.InventoryService), i0__namespace.ɵɵinject(i2__namespace.UserService), i0__namespace.ɵɵinject(i1__namespace.TranslateService), i0__namespace.ɵɵinject(i4__namespace.AlertService), i0__namespace.ɵɵinject(i4__namespace.ModalService), i0__namespace.ɵɵinject(ColumnUtilService), i0__namespace.ɵɵinject(i4__namespace.UserPreferencesService), i0__namespace.ɵɵinject(i4__namespace.GainsightService, 8)); }, token: DeviceGridService, providedIn: "root" });
    DeviceGridService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: client.UserService },
        { type: i1.TranslateService },
        { type: i4.AlertService },
        { type: i4.ModalService },
        { type: ColumnUtilService },
        { type: i4.UserPreferencesService },
        { type: i4.GainsightService, decorators: [{ type: i0.Optional }] }
    ]; };
    __decorate([
        mapLegacyGridConfiguration()
    ], DeviceGridService.prototype, "getConfig$", null);

    var DeviceGridConfigMapperService = /** @class */ (function () {
        function DeviceGridConfigMapperService(userPreferencesService, deviceGridService) {
            this.userPreferencesService = userPreferencesService;
            this.deviceGridService = deviceGridService;
        }
        DeviceGridConfigMapperService.prototype.getMappedGridConfig = function (key) {
            var _this = this;
            key = key || this.deviceGridService.GRID_CONFIG_DEFAULT_STORAGE_KEY;
            var legacyAllDevicesGridKey = 'all-devices-columns-meta_';
            var legacyAllDevicesGridFilterKey = 'all-devices-columns-config';
            return rxjs.combineLatest([
                this.userPreferencesService.get(legacyAllDevicesGridKey),
                this.userPreferencesService.get(legacyAllDevicesGridFilterKey)
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), legacyConfig = _b[0], legacyFilterConfig = _b[1];
                return _this.mapLegacyToDeviceGridConfig(legacyConfig, legacyFilterConfig);
            }), operators.concatMap(function (mappedLegacyConfig) {
                if (mappedLegacyConfig) {
                    return Promise.all([
                        _this.userPreferencesService.set(legacyAllDevicesGridKey, null),
                        _this.userPreferencesService.set(legacyAllDevicesGridFilterKey, null)
                    ]).then(function () { return mappedLegacyConfig; });
                }
                else {
                    return rxjs.of(null);
                }
            }), operators.concatMap(function (mappedLegacyConfig) { return mappedLegacyConfig
                ? _this.userPreferencesService.set(key, mappedLegacyConfig).then(function () { return mappedLegacyConfig; })
                : _this.userPreferencesService.get(key); }), operators.map(function (config) { return config || {
                columns: [],
                pagination: {
                    pageSize: _this.deviceGridService.DEFAULT_PAGE_SIZE,
                    currentPage: 1
                }
            }; }));
        };
        DeviceGridConfigMapperService.prototype.mapLegacyToDeviceGridConfig = function (legacyConfig, legacyFilterConfig) {
            if (Array.isArray(legacyConfig) || !lodashEs.isEmpty(legacyFilterConfig)) {
                return {
                    columns: this.getConfigColumns(legacyConfig, legacyFilterConfig),
                    pagination: {
                        pageSize: this.deviceGridService.DEFAULT_PAGE_SIZE,
                        currentPage: 1
                    }
                };
            }
        };
        DeviceGridConfigMapperService.prototype.getConfigColumns = function (legacyConfig, legacyFilterConfig) {
            var legacyFilterConfigArray = legacyFilterConfig
                ? Object.keys(legacyFilterConfig).map(function (key) { return ({
                    key: key,
                    filter: {
                        externalFilterQuery: legacyFilterConfig[key].filtering
                    },
                    sorting: legacyFilterConfig[key].sorting
                }); })
                : [];
            var config = this.mergeLegacyConfigs(legacyConfig ||
                this.deviceGridService.getDefaultColumns().map(function (column) { return ({ key: column.name }); }), legacyFilterConfigArray);
            return config
                .filter(function (column) { return column.key !== 'removalColumn'; })
                .map(this.mapLegacyColumnConfig.bind(this));
        };
        DeviceGridConfigMapperService.prototype.mergeLegacyConfigs = function (columnConfig, filterConfig) {
            return columnConfig.map(function (column) { return (Object.assign(Object.assign({}, filterConfig.find(function (item) { return item.key === column.key; })), column)); });
        };
        DeviceGridConfigMapperService.prototype.mapLegacyColumnConfig = function (legacy) {
            var active = legacy.active, key = legacy.key, custom = legacy.custom, headerName = legacy.headerName, fragmentPath = legacy.fragmentPath, filter = legacy.filter, sorting = legacy.sorting;
            var sortOrder = sorting ? this.migrateSortOrder(sorting) : '';
            return lodashEs.omitBy({
                visible: active !== null && active !== void 0 ? active : true,
                name: DeviceGridConfigMapperService.deviceGridLegacyKeyToName[key] || key,
                sortOrder: sortOrder,
                custom: custom,
                header: custom ? headerName : null,
                path: fragmentPath,
                filter: filter
            }, lodashEs.isNil);
        };
        DeviceGridConfigMapperService.prototype.migrateSortOrder = function (sorting) {
            switch (sorting.order) {
                case 0:
                    return '';
                case -1:
                    return 'desc';
                case 1:
                    return 'asc';
            }
        };
DeviceGridConfigMapperService.ɵfac = function DeviceGridConfigMapperService_Factory(t) { return new (t || DeviceGridConfigMapperService)(ɵngcc0.ɵɵinject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵinject(DeviceGridService)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridConfigMapperService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.UserPreferencesService }, { type: DeviceGridService }]; }, null); })();
        return DeviceGridConfigMapperService;
    }());
    DeviceGridConfigMapperService.deviceGridLegacyKeyToName = {
        status: 'status',
        name: 'name',
        model: 'model',
        serialNumber: 'serialNumber',
        group: 'group',
        registrationDate: 'registrationDate',
        systemId: 'systemId',
        imei: 'imei',
        alarms: 'alarms'
    };
    DeviceGridConfigMapperService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DeviceGridConfigMapperService_Factory() { return new DeviceGridConfigMapperService(i0__namespace.ɵɵinject(i4__namespace.UserPreferencesService), i0__namespace.ɵɵinject(DeviceGridService)); }, token: DeviceGridConfigMapperService, providedIn: "root" });
    DeviceGridConfigMapperService.ctorParameters = function () { return [
        { type: i4.UserPreferencesService },
        { type: DeviceGridService }
    ]; };

    var DeviceGridComponent = /** @class */ (function () {
        function DeviceGridComponent(deviceGridService) {
            this.deviceGridService = deviceGridService;
            /** Takes an event emitter. When an event is emitted, the grid will be reloaded. */
            this.refresh = new i0.EventEmitter();
            /** The title for the data grid, it's displayed in the grid's header. */
            this.title = i4.gettext('Devices');
            /** The label for load more button. */
            this.loadMoreItemsLabel = i4.gettext('Load more devices');
            /** The label for loading indicator. */
            this.loadingItemsLabel = i4.gettext('Loading devices…');
            /** Determines whether items can be selected by clicking a checkbox in the first column. */
            this.selectable = false;
            /** Sets the base query which is appended to the request for data. */
            this.baseQuery = {};
            this.childDeviceGrid = false;
            /** Sets the withChildren query which is appended to the request. */
            this.withChildren = false;
            /** Emits an event when columns configuration changes. */
            this.onColumnsChange = new i0.EventEmitter();
            this.onFilterChange = new i0.EventEmitter();
            this.onDeviceQueryStringChange = new i0.EventEmitter();
            /** Emits an event when items selection changes. The array contains ids of selected items. */
            this.itemsSelect = new i0.EventEmitter();
            this.configureColumnsEnabled = true;
            this.actionControls = [];
            this.columns$ = rxjs.of(this.deviceGridService.getDefaultColumns());
            this.appliedFilters = [];
            this.pagination = this.deviceGridService.getDefaultPagination();
            this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
            this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
            /**
             * Manages the requests to the DeviceGridService.saveConfig$() method:
             * 0 - Semaphore is in initial state, request can be executed;
             * 1 - Semaphore is blocked, further requests need to wait for lock to get released;
             * 2 - Semaphore is "green", requests can be done;
             */
            this.saveGridConfigSemaphore$ = new rxjs.BehaviorSubject(0);
            this.destroyed$ = new rxjs.Subject();
            this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        }
        Object.defineProperty(DeviceGridComponent.prototype, "_pagination", {
            /** Pagination settings, e.g. allows for setting current page or page size. If not given, defaults to standard settings. */
            set: function (value) {
                if (value) {
                    this.pagination = value;
                }
                else {
                    this.pagination = this.deviceGridService.getDefaultPagination();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceGridComponent.prototype, "_infiniteScroll", {
            /** Sets load more mode. */
            set: function (infiniteScroll) {
                this.infiniteScroll = infiniteScroll;
                if (infiniteScroll) {
                    this.pagination = this.deviceGridService.getInfiniteScrollPagination();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceGridComponent.prototype, "_actionControls", {
            /** Sets action controls (actions available for individual items). If not given, it defaults to standard actions. */
            set: function (value) {
                if (value) {
                    this.actionControls = value;
                }
                else {
                    this.actionControls = this.deviceGridService.getDefaultActionControls();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceGridComponent.prototype, "_bulkActionControls", {
            /** Sets bulk action controls (actions available for items selected by user). If not given, it defaults to standard bulk actions. */
            set: function (value) {
                if (value) {
                    this.bulkActionControls = value;
                }
                else {
                    this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceGridComponent.prototype, "_headerActionControls", {
            /** Sets header action controls (actions available from the grid header). If not given, it defaults to empty list of actions. */
            set: function (value) {
                if (value) {
                    this.headerActionControls = value;
                }
                else {
                    this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
                }
            },
            enumerable: false,
            configurable: true
        });
        DeviceGridComponent.prototype.ngOnInit = function () {
            this.setActionControls();
            if (this.columnsConfig && !this.columnsConfigKey) {
                this.columns$ = rxjs.of(this.columnsConfig);
                this.configureColumnsEnabled = false;
                console.warn('Device grid expects columnsConfigKey to be set if setting customized columns list. Without it the changes to the grid wll not be saved anywhere.');
            }
            else {
                this.columns$ = this.deviceGridService.getUserConfiguredColumns$(this.columnsConfig ? this.columnsConfig : this.deviceGridService.getDefaultColumns(), this.columnsConfigKey);
            }
        };
        DeviceGridComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        DeviceGridComponent.prototype.trackByName = function (_index, column) {
            return column.name;
        };
        DeviceGridComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
            return __awaiter(this, void 0, void 0, function () {
                var serverSideDataResult, filteredSize, size, _b, res, data, paging, _c, res, data, paging;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (!this.childDeviceGrid) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.deviceGridService.getChildDeviceData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren, this.parentDeviceId)];
                        case 1:
                            _b = _d.sent(), res = _b.res, data = _b.data, paging = _b.paging;
                            return [4 /*yield*/, this.deviceGridService.getCountChildDevices(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.parentDeviceId)];
                        case 2:
                            filteredSize = _d.sent();
                            return [4 /*yield*/, this.deviceGridService.getTotalChildDevices(this.baseQuery, this.parentDeviceId)];
                        case 3:
                            size = _d.sent();
                            serverSideDataResult = {
                                res: res,
                                data: data,
                                paging: paging,
                                filteredSize: filteredSize,
                                size: size
                            };
                            return [3 /*break*/, 8];
                        case 4: return [4 /*yield*/, this.deviceGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren)];
                        case 5:
                            _c = _d.sent(), res = _c.res, data = _c.data, paging = _c.paging;
                            return [4 /*yield*/, this.deviceGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery)];
                        case 6:
                            filteredSize = _d.sent();
                            return [4 /*yield*/, this.deviceGridService.getTotal(this.baseQuery)];
                        case 7:
                            size = _d.sent();
                            serverSideDataResult = {
                                res: res,
                                data: data,
                                paging: paging,
                                filteredSize: filteredSize,
                                size: size
                            };
                            _d.label = 8;
                        case 8:
                            this.onColumnsChange.emit(dataSourceModifier.columns);
                            this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns, this.baseQuery));
                            if (this.dataCallback) {
                                serverSideDataResult = this.dataCallback(serverSideDataResult);
                            }
                            return [2 /*return*/, serverSideDataResult];
                    }
                });
            });
        };
        DeviceGridComponent.prototype.filterChange = function (_b) {
            var columnName = _b.columnName, filteringModifier = _b.filteringModifier;
            var index = this.appliedFilters.findIndex(function (el) { return el.columnName === columnName; });
            if (index > -1) {
                this.appliedFilters[index].filteringModifier = filteringModifier;
            }
            else {
                this.appliedFilters.push({ columnName: columnName, filteringModifier: filteringModifier });
            }
            this.onFilterChange.emit(this.appliedFilters);
            this.updateFilterConfig(columnName, filteringModifier);
        };
        DeviceGridComponent.prototype.updateFilterConfig = function (columnName, filteringModifier) {
            var _this = this;
            // Here I needed to take the current columns because if there isn't any stored config
            // and custom columns are provided through parent element we need to use them.
            rxjs.combineLatest([this.deviceGridService.getConfig$(this.columnsConfigKey), this.columns$])
                .pipe(operators.tap(function (_b) {
                var _c = __read(_b, 2), config = _c[0], columns = _c[1];
                var _a;
                var columnsConfig = (((_a = config === null || config === void 0 ? void 0 : config.columns) === null || _a === void 0 ? void 0 : _a.length) > 0 ? config.columns : columns).map(function (_b) {
                    var name = _b.name, visible = _b.visible, sortOrder = _b.sortOrder, filter = _b.filter, custom = _b.custom, header = _b.header, path = _b.path;
                    return ({
                        name: name,
                        visible: visible !== null && visible !== void 0 ? visible : true,
                        sortOrder: sortOrder,
                        custom: custom,
                        header: header,
                        path: path,
                        filter: columnName && columnName !== name ? filter : filteringModifier
                    });
                });
                if (!columnsConfig.filter) {
                    delete columnsConfig.filter;
                }
                _this.configChange({ columns: columnsConfig, pagination: config.pagination });
            }), operators.take(1), operators.takeUntil(this.destroyed$))
                .subscribe();
        };
        DeviceGridComponent.prototype.setActionControls = function () {
            return __awaiter(this, void 0, void 0, function () {
                var deleteAction;
                var _this = this;
                return __generator(this, function (_b) {
                    deleteAction = {
                        type: "DELETE" /* Delete */,
                        callback: function (device) { return _this.onDeleteDevice(device); }
                    };
                    this.actionControls.push(deleteAction);
                    return [2 /*return*/];
                });
            });
        };
        DeviceGridComponent.prototype.onDeleteDevice = function (device) {
            var _this = this;
            this.deviceGridService
                .delete(device)
                .then(function () { return _this.refresh.emit(); })
                .catch(function () { return ({}); });
        };
        DeviceGridComponent.prototype.updateFiltering = function (columnNames, action) {
            var type = action.type;
            if (type === i4.FilteringActionType.ResetFilter) {
                this.dataGrid.clearFilters();
            }
            else {
                this.dataGrid.updateFiltering(columnNames, action);
            }
        };
        DeviceGridComponent.prototype.configChange = function (config) {
            var _this = this;
            /* Semaphore ensures that the first request to DeviceGridService.saveConfig$() is completed
             * before the next requests are sent out. This prevents multiple configuration objects to be
             * created in Inventory in case a config does not yet exist.
             */
            this.saveGridConfigSemaphore$
                .pipe(operators.filter(function (semaphore) { return semaphore !== 1; }), operators.tap(function () {
                if (_this.saveGridConfigSemaphore$.value < 1) {
                    _this.saveGridConfigSemaphore$.next(_this.saveGridConfigSemaphore$.value + 1);
                }
            }), operators.concatMap(function () { return _this.deviceGridService.saveConfig$(config, _this.columnsConfigKey); }), operators.tap(function () {
                if (_this.saveGridConfigSemaphore$.value < 2) {
                    _this.saveGridConfigSemaphore$.next(_this.saveGridConfigSemaphore$.value + 1);
                }
            }), operators.take(1), operators.takeUntil(this.destroyed$))
                .subscribe();
        };
        DeviceGridComponent.prototype.addCustomColumn = function (columnConfig) {
            var _this = this;
            this.deviceGridService
                .getConfig$(this.columnsConfigKey)
                .pipe(operators.tap(function (config) { return (config.columns = __spreadArray(__spreadArray([], __read((config.columns.length === 0 ? _this.getDefalultConfigColumns() : config.columns))), [
                columnConfig
            ])); }), operators.concatMap(function (config) { return _this.deviceGridService.saveConfig$(config, _this.columnsConfigKey); }), operators.switchMap(function () { return _this.deviceGridService.getUserConfiguredColumns$(_this.columns$, _this.columnsConfigKey); }), 
            // Let data-grid re-render with new columns;
            // Columns are set in a separate step in the pipe to avoid flickering
            // in the grid in the time where get config request is executing
            operators.tap(function (columns) { return (_this.columns$ = rxjs.of(columns)); }), operators.take(1), operators.takeUntil(this.destroyed$))
                .subscribe();
        };
        DeviceGridComponent.prototype.removeCustomColumn = function (columnToRemove) {
            var _this = this;
            this.deviceGridService
                .getConfig$(this.columnsConfigKey)
                .pipe(operators.first(), operators.tap(function (config) { return (config.columns = config.columns.filter(function (column) { return column.name !== columnToRemove.name; })); }), operators.concatMap(function (config) { return _this.deviceGridService.saveConfig$(config, _this.columnsConfigKey); }), operators.switchMap(function () { return _this.deviceGridService.getUserConfiguredColumns$(_this.columns$.pipe(operators.map(function (columns) { return columns.filter(function (column) { return column.name !== columnToRemove.name; }); })), _this.columnsConfigKey); }), 
            // Let data-grid re-render with new columns;
            // Columns are set in a separate step in the pipe to avoid flickering
            // in the grid in the time where get config request is executing
            operators.tap(function (columns) { return (_this.columns$ = rxjs.of(columns)); }), operators.take(1), operators.takeUntil(this.destroyed$))
                .subscribe();
        };
        DeviceGridComponent.prototype.getDefalultConfigColumns = function () {
            return this.deviceGridService
                .getDefaultColumns()
                .map(function (column) { return ({ name: column.name, visible: true }); });
        };
DeviceGridComponent.ɵfac = function DeviceGridComponent_Factory(t) { return new (t || DeviceGridComponent)(ɵngcc0.ɵɵdirectiveInject(DeviceGridService)); };
DeviceGridComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceGridComponent, selectors: [["c8y-device-grid"]], viewQuery: function DeviceGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(i4.DataGridComponent, 7);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataGrid = _t.first);
    } }, inputs: { refresh: "refresh", title: "title", loadMoreItemsLabel: "loadMoreItemsLabel", loadingItemsLabel: "loadingItemsLabel", selectable: "selectable", baseQuery: "baseQuery", childDeviceGrid: "childDeviceGrid", withChildren: "withChildren", _pagination: ["pagination", "_pagination"], _infiniteScroll: ["infiniteScroll", "_infiniteScroll"], _actionControls: ["actionControls", "_actionControls"], _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], _headerActionControls: ["headerActionControls", "_headerActionControls"], dataCallback: "dataCallback", columnsConfigKey: "columnsConfigKey", columnsConfig: ["columns", "columnsConfig"], parentDeviceId: "parentDeviceId" }, outputs: { onColumnsChange: "onColumnsChange", onFilterChange: "onFilterChange", onDeviceQueryStringChange: "onDeviceQueryStringChange", itemsSelect: "itemsSelect" }, decls: 7, vars: 27, consts: [[3, "title", "loadMoreItemsLabel", "loadingItemsLabel", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "bulkActionControls", "serverSideDataCallback", "refresh", "headerActionControls", "configureColumnsEnabled", "itemsSelect", "onConfigChange", "onAddCustomColumn", "onRemoveCustomColumn", "onFilter"], [3, "icon", "title", "subtitle", "horizontal"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "name"]], template: function DeviceGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-data-grid", 0);
        ɵngcc0.ɵɵlistener("itemsSelect", function DeviceGridComponent_Template_c8y_data_grid_itemsSelect_0_listener($event) { return ctx.itemsSelect.emit($event); })("onConfigChange", function DeviceGridComponent_Template_c8y_data_grid_onConfigChange_0_listener($event) { return ctx.configChange($event); })("onAddCustomColumn", function DeviceGridComponent_Template_c8y_data_grid_onAddCustomColumn_0_listener($event) { return ctx.addCustomColumn($event); })("onRemoveCustomColumn", function DeviceGridComponent_Template_c8y_data_grid_onRemoveCustomColumn_0_listener($event) { return ctx.removeCustomColumn($event); })("onFilter", function DeviceGridComponent_Template_c8y_data_grid_onFilter_0_listener($event) { return ctx.filterChange($event); });
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelement(2, "c8y-ui-empty-state", 1);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, DeviceGridComponent_ng_container_5_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("loadMoreItemsLabel", ctx.loadMoreItemsLabel)("loadingItemsLabel", ctx.loadingItemsLabel)("columns", ɵngcc0.ɵɵpipeBind1(1, 19, ctx.columns$))("pagination", ctx.pagination)("infiniteScroll", ctx.infiniteScroll)("actionControls", ctx.actionControls)("selectable", ctx.selectable)("bulkActionControls", ctx.bulkActionControls)("serverSideDataCallback", ctx.serverSideDataCallback)("refresh", ctx.refresh)("headerActionControls", ctx.headerActionControls)("configureColumnsEnabled", ctx.configureColumnsEnabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "search")("title", ɵngcc0.ɵɵpipeBind1(3, 21, "No matching devices."))("subtitle", ɵngcc0.ɵɵpipeBind1(4, 23, "Refine your search terms"))("horizontal", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(6, 25, ctx.columns$))("ngForTrackBy", ctx.trackByName);
    } }, directives: [ɵngcc1.DataGridComponent, ɵngcc1.EmptyStateComponent, ɵngcc5.NgForOf, ɵngcc1.ColumnDirective], pipes: [ɵngcc5.AsyncPipe, ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-device-grid',
                template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns$ | async\"\n  [pagination]=\"pagination\"\n  [infiniteScroll]=\"infiniteScroll\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  (onConfigChange)=\"configChange($event)\"\n  (onAddCustomColumn)=\"addCustomColumn($event)\"\n  (onRemoveCustomColumn)=\"removeCustomColumn($event)\"\n  (onFilter)=\"filterChange($event)\"\n  [refresh]=\"refresh\"\n  [headerActionControls]=\"headerActionControls\"\n  [configureColumnsEnabled]=\"configureColumnsEnabled\"\n>\n  <c8y-ui-empty-state\n    [icon]=\"'search'\"\n    [title]=\"'No matching devices.' | translate\"\n    [subtitle]=\"'Refine your search terms' | translate\"\n    [horizontal]=\"true\"\n  >\n  </c8y-ui-empty-state>\n\n  <ng-container *ngFor=\"let column of columns$ | async; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
            }]
    }], function () { return [{ type: DeviceGridService }]; }, { refresh: [{
            type: i0.Input
        }], title: [{
            type: i0.Input
        }], loadMoreItemsLabel: [{
            type: i0.Input
        }], loadingItemsLabel: [{
            type: i0.Input
        }], selectable: [{
            type: i0.Input
        }], baseQuery: [{
            type: i0.Input
        }], childDeviceGrid: [{
            type: i0.Input
        }], withChildren: [{
            type: i0.Input
        }], onColumnsChange: [{
            type: i0.Output
        }], onFilterChange: [{
            type: i0.Output
        }], onDeviceQueryStringChange: [{
            type: i0.Output
        }], itemsSelect: [{
            type: i0.Output
        }], _pagination: [{
            type: i0.Input,
            args: ['pagination']
        }], _infiniteScroll: [{
            type: i0.Input,
            args: ['infiniteScroll']
        }], _actionControls: [{
            type: i0.Input,
            args: ['actionControls']
        }], _bulkActionControls: [{
            type: i0.Input,
            args: ['bulkActionControls']
        }], _headerActionControls: [{
            type: i0.Input,
            args: ['headerActionControls']
        }], dataCallback: [{
            type: i0.Input
        }], columnsConfigKey: [{
            type: i0.Input
        }], columnsConfig: [{
            type: i0.Input,
            args: ['columns']
        }], parentDeviceId: [{
            type: i0.Input
        }], dataGrid: [{
            type: i0.ViewChild,
            args: [i4.DataGridComponent, { static: true }]
        }] }); })();
        return DeviceGridComponent;
    }());
    DeviceGridComponent.ctorParameters = function () { return [
        { type: DeviceGridService }
    ]; };
    DeviceGridComponent.propDecorators = {
        dataCallback: [{ type: i0.Input }],
        refresh: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        loadMoreItemsLabel: [{ type: i0.Input }],
        loadingItemsLabel: [{ type: i0.Input }],
        columnsConfigKey: [{ type: i0.Input }],
        columnsConfig: [{ type: i0.Input, args: ['columns',] }],
        _pagination: [{ type: i0.Input, args: ['pagination',] }],
        _infiniteScroll: [{ type: i0.Input, args: ['infiniteScroll',] }],
        _actionControls: [{ type: i0.Input, args: ['actionControls',] }],
        selectable: [{ type: i0.Input }],
        baseQuery: [{ type: i0.Input }],
        _bulkActionControls: [{ type: i0.Input, args: ['bulkActionControls',] }],
        _headerActionControls: [{ type: i0.Input, args: ['headerActionControls',] }],
        childDeviceGrid: [{ type: i0.Input }],
        parentDeviceId: [{ type: i0.Input }],
        withChildren: [{ type: i0.Input }],
        onColumnsChange: [{ type: i0.Output }],
        onFilterChange: [{ type: i0.Output }],
        onDeviceQueryStringChange: [{ type: i0.Output }],
        itemsSelect: [{ type: i0.Output }],
        dataGrid: [{ type: i0.ViewChild, args: [i4.DataGridComponent, { static: true },] }]
    };

    var DeviceGridModule = /** @class */ (function () {
        function DeviceGridModule(service) {
            this.service = service;
        }
DeviceGridModule.ɵfac = function DeviceGridModule_Factory(t) { return new (t || DeviceGridModule)(ɵngcc0.ɵɵinject(DecoratorService)); };
DeviceGridModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceGridModule });
DeviceGridModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            i4.CommonModule,
            i4.FormsModule,
            i4.DeviceStatusModule,
            i4.DataGridModule,
            assetsNavigator.AssetSelectorModule,
            i4.DynamicFormsModule,
            router.RouterModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    i4.CommonModule,
                    i4.FormsModule,
                    i4.DeviceStatusModule,
                    i4.DataGridModule,
                    assetsNavigator.AssetSelectorModule,
                    i4.DynamicFormsModule,
                    router.RouterModule
                ],
                declarations: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                exports: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                entryComponents: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ]
            }]
    }], function () { return [{ type: DecoratorService }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceGridModule, { declarations: [DeviceGridComponent, BaseFilteringFormRendererComponent, GroupFilteringFormRendererComponent, StatusCellRendererComponent, NameCellRendererComponent, ModelCellRendererComponent, SerialNumberCellRendererComponent, GroupCellRendererComponent, RegistrationDateCellRendererComponent, AlarmsCellRendererComponent], imports: [ɵngcc1.CommonModule, ɵngcc1.FormsModule, ɵngcc1.DeviceStatusModule, ɵngcc1.DataGridModule, ɵngcc4.AssetSelectorModule, ɵngcc1.DynamicFormsModule, ɵngcc7.RouterModule], exports: [DeviceGridComponent, BaseFilteringFormRendererComponent, GroupFilteringFormRendererComponent, StatusCellRendererComponent, NameCellRendererComponent, ModelCellRendererComponent, SerialNumberCellRendererComponent, GroupCellRendererComponent, RegistrationDateCellRendererComponent, AlarmsCellRendererComponent] }); })();
        return DeviceGridModule;
    }());
    DeviceGridModule.ctorParameters = function () { return [
        { type: DecoratorService }
    ]; };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AlarmsCellRendererComponent = AlarmsCellRendererComponent;
    exports.AlarmsDeviceGridColumn = AlarmsDeviceGridColumn;
    exports.BaseDeviceGridColumn = BaseDeviceGridColumn;
    exports.BaseFilteringFormRendererComponent = BaseFilteringFormRendererComponent;
    exports.ColumnUtilService = ColumnUtilService;
    exports.CustomDeviceGridColumn = CustomDeviceGridColumn;
    exports.DeviceGridComponent = DeviceGridComponent;
    exports.DeviceGridConfigMapperService = DeviceGridConfigMapperService;
    exports.DeviceGridModule = DeviceGridModule;
    exports.DeviceGridService = DeviceGridService;
    exports.GroupCellRendererComponent = GroupCellRendererComponent;
    exports.GroupDeviceGridColumn = GroupDeviceGridColumn;
    exports.GroupFilteringFormRendererComponent = GroupFilteringFormRendererComponent;
    exports.ImeiDeviceGridColumn = ImeiDeviceGridColumn;
    exports.ModelCellRendererComponent = ModelCellRendererComponent;
    exports.ModelDeviceGridColumn = ModelDeviceGridColumn;
    exports.NameCellRendererComponent = NameCellRendererComponent;
    exports.NameDeviceGridColumn = NameDeviceGridColumn;
    exports.RegistrationDateCellRendererComponent = RegistrationDateCellRendererComponent;
    exports.RegistrationDateDeviceGridColumn = RegistrationDateDeviceGridColumn;
    exports.SerialNumberCellRendererComponent = SerialNumberCellRendererComponent;
    exports.SerialNumberDeviceGridColumn = SerialNumberDeviceGridColumn;
    exports.StatusCellRendererComponent = StatusCellRendererComponent;
    exports.StatusDeviceGridColumn = StatusDeviceGridColumn;
    exports.SystemIdDeviceGridColumn = SystemIdDeviceGridColumn;
    exports.TypeDeviceGridColumn = TypeDeviceGridColumn;
    exports.mapLegacyGridConfiguration = mapLegacyGridConfiguration;
    exports["ɵa"] = ColumnUtilService;
    exports["ɵb"] = BaseFilteringFormRendererComponent;
    exports["ɵc"] = GroupFilteringFormRendererComponent;
    exports["ɵd"] = StatusCellRendererComponent;
    exports["ɵe"] = NameCellRendererComponent;
    exports["ɵf"] = ModelCellRendererComponent;
    exports["ɵg"] = SerialNumberCellRendererComponent;
    exports["ɵh"] = GroupCellRendererComponent;
    exports["ɵi"] = RegistrationDateCellRendererComponent;
    exports["ɵj"] = AlarmsCellRendererComponent;
    exports["ɵk"] = DecoratorService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=c8y-ngx-components-device-grid.umd.js.map