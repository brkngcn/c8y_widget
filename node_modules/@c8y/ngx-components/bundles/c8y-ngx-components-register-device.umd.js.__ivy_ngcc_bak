(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/modal'), require('@c8y/ngx-components'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@c8y/client'), require('@angular/router'), require('lodash-es'), require('@c8y/client'), require('@ngx-translate/core'), require('@angular/cdk/stepper'), require('file-saver'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/popover')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/register-device', ['exports', '@angular/core', 'ngx-bootstrap/modal', '@c8y/ngx-components', '@angular/forms', 'rxjs', 'rxjs/operators', '@c8y/client', '@angular/router', 'lodash-es', '@c8y/client', '@ngx-translate/core', '@angular/cdk/stepper', 'file-saver', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/popover'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["register-device"] = {}), global.ng.core, global.modal, global.c8y["ngx-components"], global.ng.forms, global.rxjs, global.rxjs.operators, global.client, global.ng.router, global.lodashEs, global.i2, global.core, global.ng.cdk.stepper, global.fileSaver, global.dropdown, global.popover));
})(this, (function (exports, i0, modal, i3, forms, rxjs, operators, client, i1, lodashEs, i2, core, stepper, fileSaver, dropdown, popover) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var RegisterDeviceService = /** @class */ (function () {
        function RegisterDeviceService(router, deviceRegService, alertService) {
            this.router = router;
            this.deviceRegService = deviceRegService;
            this.alertService = alertService;
            this._loading = new rxjs.Subject();
            this._limit = new rxjs.BehaviorSubject({ isReached: false });
            this._deviceRegistrationRequests = new rxjs.BehaviorSubject({ data: [] });
            this.deviceRegistrationRequests$ = this._deviceRegistrationRequests.asObservable();
            this.loading$ = this._loading.asObservable();
            this.limit$ = this._limit.asObservable();
            this.deviceRegUrl = '/deviceregistration';
            this.endSubscriptions = new rxjs.Subject();
        }
        RegisterDeviceService.prototype.isDeviceRegistration = function () {
            return lodashEs.get(this.router, 'url') === this.deviceRegUrl;
        };
        RegisterDeviceService.prototype.internalListUpdate = function (deviceRequests, pagingObject) {
            var _a = this._deviceRegistrationRequests.getValue(), paging = _a.paging, data = _a.data;
            if (pagingObject) {
                paging = pagingObject;
            }
            data = __spreadArray(__spreadArray([], __read(data)), __read(deviceRequests));
            this._deviceRegistrationRequests.next({ data: data, paging: paging });
        };
        RegisterDeviceService.prototype.onDeviceBootstrap = function (bsData) {
            var id = bsData.id, status = bsData.status;
            this._deviceRegistrationRequests.next({
                data: this.updateStatusById(id, status)
            });
        };
        RegisterDeviceService.prototype.list = function (pageSize) {
            var _this = this;
            if (pageSize === void 0) { pageSize = 100; }
            this._loading.next(true);
            this._deviceRegistrationRequests.next({ data: [], paging: undefined });
            rxjs.from(this.deviceRegService.list({ pageSize: pageSize, withTotalPages: true }))
                .pipe(operators.takeUntil(this.endSubscriptions), operators.finalize(function () { return _this.limit(); }))
                .subscribe(function (res) {
                var data = res.data, paging = res.paging;
                _this.internalListUpdate(data, paging);
                _this._loading.next(false);
            }, function (err) {
                _this._loading.next(false);
                _this.alertService.addServerFailure(err);
            });
        };
        RegisterDeviceService.prototype.createMultiple = function (newDeviceRequests) {
            var _this = this;
            if (newDeviceRequests && newDeviceRequests.length > 0) {
                this._loading.next(true);
                var newRequests$ = newDeviceRequests.map(function (element) {
                    return rxjs.from(_this.deviceRegService.create(element)
                        .catch(function (err) { return ({ res: err.res, data: Object.assign(Object.assign({}, err.data), { id: element.id }) }); }));
                });
                var groupedRequests_1 = {
                    success: [],
                    failed: []
                };
                return rxjs.forkJoin(newRequests$)
                    .pipe(operators.mergeMap(function (resp) { return resp.map(function (el) {
                    el.res.ok ? groupedRequests_1.success.push(el.data) : groupedRequests_1.failed.push(el.data);
                    return groupedRequests_1;
                }); }), operators.takeLast(1), operators.finalize(function () {
                    _this.internalListUpdate(groupedRequests_1.success);
                    _this._loading.next(false);
                }));
            }
        };
        RegisterDeviceService.prototype.remove = function (id) {
            var _this = this;
            this._loading.next(true);
            rxjs.from(this.deviceRegService.delete(id))
                .pipe(operators.takeUntil(this.endSubscriptions))
                .subscribe(function (res) {
                _this._deviceRegistrationRequests.next({ data: _this.removeDeviceRegistrationRequestById(id) });
                _this._loading.next(false);
                _this.alertService.success(i3.gettext('Device registration cancelled.'));
            }, function (err) {
                _this._loading.next(false);
                _this.alertService.addServerFailure(err);
            });
        };
        RegisterDeviceService.prototype.accept = function (request) {
            var _this = this;
            this._loading.next(true);
            var payload = lodashEs.pick(request, ['id', 'securityToken']);
            rxjs.from(this.deviceRegService.accept(payload))
                .pipe(operators.takeUntil(this.endSubscriptions))
                .subscribe(function (res) {
                _this._deviceRegistrationRequests.next({ data: _this.updateStatusById(payload.id, client.DeviceRegistrationStatus.ACCEPTED) });
                _this.limit();
                _this._loading.next(false);
                _this.alertService.success(i3.gettext('Device registration accepted.'));
            }, function (err) {
                _this._loading.next(false);
                _this.alertService.addServerFailure(err);
            });
        };
        RegisterDeviceService.prototype.acceptAll = function () {
            var _this = this;
            var acceptedDeviceRequests = [];
            var failedDeviceRequests = [];
            this._loading.next(true);
            rxjs.from(this.deviceRegService.acceptAll())
                .pipe(operators.takeUntil(this.endSubscriptions), operators.map(function (_a) {
                var data = _a.data;
                data.map(function (deviceRegistrationRequest) {
                    if (deviceRegistrationRequest.successful) {
                        acceptedDeviceRequests.push(deviceRegistrationRequest);
                        _this.updateStatusById(deviceRegistrationRequest.id, client.DeviceRegistrationStatus.ACCEPTED);
                    }
                    else {
                        failedDeviceRequests.push(deviceRegistrationRequest);
                    }
                });
                return data;
            }), operators.finalize(function () {
                // update rendered list with successful accepted device registrations
                // see: this.updateStatusById(...)
                _this.internalListUpdate([]);
                _this.limit();
                _this._loading.next(false);
                if (failedDeviceRequests.length > 0) {
                    _this.alertService.warning(i3.gettext('Could not accept all pending registration requests.'), JSON.stringify({
                        failedDeviceRequests: failedDeviceRequests,
                        acceptedDeviceRequests: acceptedDeviceRequests
                    }, undefined, 2));
                }
                else {
                    _this.alertService.success(i3.gettext('Accepted all pending registration requests.'));
                }
            })).subscribe(function (res) {
                // empty by design
            }, function (err) {
                _this._loading.next(false);
                _this.alertService.addServerFailure(err);
            });
        };
        RegisterDeviceService.prototype.limit = function () {
            var _this = this;
            rxjs.from(this.deviceRegService.limit())
                .pipe(operators.takeUntil(this.endSubscriptions))
                .subscribe(function (res) { return _this._limit.next(res.data); }, function (err) { return _this.alertService.addServerFailure(err); });
        };
        RegisterDeviceService.prototype.getRequestByStatus = function (status) {
            return this._deviceRegistrationRequests.getValue().data.filter(function (req) { return req.status === status; });
        };
        RegisterDeviceService.prototype.ngOnDestroy = function () {
            this.endSubscriptions.next();
            this.endSubscriptions.complete();
        };
        RegisterDeviceService.prototype.updateStatusById = function (id, status) {
            var items = this._deviceRegistrationRequests.getValue().data;
            var matchingElementIndex = items.findIndex(function (element) { return element.id === id; });
            if (matchingElementIndex >= 0) {
                items[matchingElementIndex].status = status;
            }
            return items;
        };
        RegisterDeviceService.prototype.removeDeviceRegistrationRequestById = function (id) {
            var items = this._deviceRegistrationRequests.getValue().data;
            var matchingElementIndex = items.findIndex(function (element) { return element.id === id; });
            if (matchingElementIndex >= 0) {
                items.splice(matchingElementIndex, 1);
            }
            this._loading.next(false);
            return items;
        };
        return RegisterDeviceService;
    }());
    RegisterDeviceService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RegisterDeviceService_Factory() { return new RegisterDeviceService(i0__namespace.ɵɵinject(i1__namespace.Router), i0__namespace.ɵɵinject(i2__namespace.DeviceRegistrationService), i0__namespace.ɵɵinject(i3__namespace.AlertService)); }, token: RegisterDeviceService, providedIn: "root" });
    RegisterDeviceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    RegisterDeviceService.ctorParameters = function () { return [
        { type: i1.Router },
        { type: client.DeviceRegistrationService },
        { type: i3.AlertService }
    ]; };

    var GeneralDeviceRegistrationComponent = /** @class */ (function () {
        function GeneralDeviceRegistrationComponent(tenantUIService, tenantService, registerDeviceService, inventoryService, cd, bsModalRef) {
            var _this = this;
            this.tenantUIService = tenantUIService;
            this.tenantService = tenantService;
            this.registerDeviceService = registerDeviceService;
            this.inventoryService = inventoryService;
            this.cd = cd;
            this.bsModalRef = bsModalRef;
            this.MANAGEMENT = 'management';
            this.FILTER = {
                withTotalPages: true,
                pageSize: 25
            };
            this.form = new forms.FormGroup({});
            this.model = {
                devicesToCreate: [{}]
            };
            this.options = {
                formState: {
                    canLoadTenants: true,
                }
            };
            this.success = [];
            this.failed = [];
            this.fields = [
                {
                    type: 'array',
                    key: 'devicesToCreate',
                    templateOptions: {
                        addText: i3.gettext('Add device'),
                        addTextDataCy: 'add-device'
                    },
                    fieldArray: {
                        fieldGroup: [{
                                key: 'id',
                                type: 'string',
                                focus: true,
                                templateOptions: {
                                    placeholder: '0123ab32fcd',
                                    label: i3.gettext('Device ID'),
                                    required: true
                                },
                                validators: {
                                    unique: {
                                        expression: function (control) {
                                            var found = control.root.get('devicesToCreate').value.filter(function (el) { return el.id === control.value; });
                                            return found.length === 0;
                                        },
                                        message: function () { return i3.gettext('Device ID duplicates are not allowed'); },
                                    },
                                },
                            },
                            {
                                key: 'tenant',
                                type: 'typeahead',
                                hideExpression: function (model, formState, field) {
                                    if (!(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants)) {
                                        field.formControl.setValue(null);
                                    }
                                    return !(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) || false;
                                },
                                defaultValue: { id: this.MANAGEMENT },
                                templateOptions: {
                                    label: i3.gettext('Add to tenant'),
                                    required: true,
                                    c8yForOptions: this.canLoadTenants$().pipe(operators.filter(function (canLoad) { return canLoad; }), operators.switchMap(function () { return _this.getTenants$(); })),
                                    container: 'body',
                                    displayProperty: 'id',
                                    valueProperties: ['id']
                                },
                                hooks: {
                                    onInit: function (field) { return _this.canLoadTenants$().pipe(operators.tap(function (canLoad) {
                                        _this.options.formState.canLoadTenants = canLoad;
                                        _this.cd.detectChanges();
                                    })); }
                                }
                            },
                            {
                                key: 'group',
                                type: 'typeahead',
                                expressionProperties: {
                                    'templateOptions.disabled': function (model, formState, field) {
                                        var _a, _b, _c;
                                        if (formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) {
                                            if (((_a = model === null || model === void 0 ? void 0 : model.tenant) === null || _a === void 0 ? void 0 : _a.id) !== _this.MANAGEMENT) {
                                                field.formControl.setValue(null);
                                            }
                                            return !(((_b = model === null || model === void 0 ? void 0 : model.tenant) === null || _b === void 0 ? void 0 : _b.id) === _this.MANAGEMENT);
                                        }
                                        (_c = field === null || field === void 0 ? void 0 : field.templateOptions) === null || _c === void 0 ? true : delete _c.description;
                                        return false;
                                    }
                                },
                                templateOptions: {
                                    disabled: false,
                                    label: i3.gettext('Add to group'),
                                    description: i3.gettext('You can add device to specific group for management tenant only.'),
                                    container: 'body',
                                    displayProperty: 'name',
                                    valueProperties: ['id'],
                                    c8yForOptions: this.getGroups$()
                                },
                                hooks: {
                                    onInit: function (field) { return _this.canLoadTenants$().pipe(operators.tap(function (canLoad) {
                                        _this.options.formState.canLoadTenants = canLoad;
                                        _this.cd.detectChanges();
                                    })); }
                                }
                            }]
                    }
                }
            ];
            this.destroy$ = new rxjs.Subject();
            this.lastCreatedDevices = [];
            this.isLoading$ = this.registerDeviceService.loading$;
        }
        GeneralDeviceRegistrationComponent.prototype.ngAfterViewInit = function () {
            this.cd.detectChanges();
        };
        GeneralDeviceRegistrationComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        GeneralDeviceRegistrationComponent.prototype.create = function (eventObject) {
            var _this = this;
            var _a, _b;
            if (((_b = (_a = this.model) === null || _a === void 0 ? void 0 : _a.devicesToCreate) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                this.lastCreatedDevices = __spreadArray([], __read(this.model.devicesToCreate));
                var dataToSend = this.model.devicesToCreate.map(function (el) {
                    var id = el.id, tenant = el.tenant, group = el.group;
                    var data = { id: id };
                    if (tenant === null || tenant === void 0 ? void 0 : tenant.id) {
                        data = Object.assign(Object.assign({}, data), { tenantId: tenant.id });
                    }
                    if (group === null || group === void 0 ? void 0 : group.id) {
                        data = Object.assign(Object.assign({}, data), { groupId: group.id });
                    }
                    return data;
                });
                this.registerDeviceService.createMultiple(dataToSend)
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function (requests) {
                    _this.success = requests.success;
                    _this.failed = requests.failed;
                    if (eventObject) {
                        eventObject.stepper.next();
                    }
                });
            }
        };
        GeneralDeviceRegistrationComponent.prototype.fixErrors = function (event, failedRequests) {
            if (failedRequests && failedRequests.length > 0) {
                this.options.resetModel({ devicesToCreate: __spreadArray([], __read(this.lastCreatedDevices.filter(function (el) { return failedRequests.map(function (data) { return data.id; }).includes(el.id); }))) });
                this.cd.detectChanges();
            }
            event === null || event === void 0 ? void 0 : event.stepper.previous();
        };
        GeneralDeviceRegistrationComponent.prototype.canLoadTenants$ = function () {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.tenantUIService.isManagementTenant()); }).pipe(operators.shareReplay(1));
        };
        GeneralDeviceRegistrationComponent.prototype.getTenants$ = function () {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.tenantService.list(_this.FILTER)); }).pipe(operators.shareReplay(1));
        };
        GeneralDeviceRegistrationComponent.prototype.getGroups$ = function () {
            var _this = this;
            return rxjs.defer(function () { return rxjs.from(_this.inventoryService.listQuery({ __filter: { __has: 'c8y_IsDeviceGroup' }, __orderby: [{ name: 1 }] }, Object.assign({}, _this.FILTER))); }).pipe(operators.shareReplay(1));
        };
        return GeneralDeviceRegistrationComponent;
    }());
    GeneralDeviceRegistrationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-general-device-registration',
                    template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Register devices' | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear>\n    <cdk-step [stepControl]=\"form\">\n      <div class=\"p-b-16\">\n        <p\n          class=\"\n            p-l-24 p-r-24 p-t-16 p-b-16\n            m-b-0\n            sticky-top\n            separator-bottom\n            text-medium text-16 text-center\n            bg-component\n          \"\n          translate\n        >\n          Register a general device\n        </p>\n        <formly-form\n          [form]=\"form\"\n          [fields]=\"fields\"\n          [model]=\"model\"\n          [options]=\"options\"\n          class=\"formly-group-array-cols d-block p-24 min-height-fit\"\n        ></formly-form>\n      </div>\n      <c8y-stepper-buttons\n        (onNext)=\"create($event)\"\n        (onCancel)=\"bsModalRef.hide()\"\n        [showButtons]=\"{ cancel: true, next: true }\"\n        [disabled]=\"!form?.valid\"\n        [pending]=\"isLoading$ | async\"\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step state=\"final\">\n      <div class=\"p-24 min-height-fit\">\n        <c8y-operation-result\n          *ngIf=\"success.length === 1 && failed.length === 0\"\n          text=\"{{ 'Device registered' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"success\"\n          class=\"lead\"\n        ></c8y-operation-result>\n        <c8y-operation-result\n          *ngIf=\"success.length === 0 && failed.length === 1\"\n          text=\"{{ 'Failed to register device' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"error\"\n          class=\"lead\"\n        ></c8y-operation-result>\n\n        <ng-container *ngIf=\"success.length > 1 || failed.length > 1\">\n          <c8y-operation-result\n            *ngIf=\"failed.length === 0\"\n            [text]=\"\n              '{{ successfulDevicesCount }} devices registered'\n                | translate: { successfulDevicesCount: success.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngIf=\"success.length === 0\"\n            [text]=\"\n              '{{ failedDevicesCount }} devices failed to register'\n                | translate: { failedDevicesCount: failed.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </ng-container>\n\n        <div *ngIf=\"success.length > 0 && failed.length > 0\" class=\"p-l-24 p-r-24 text-center\">\n          <c8y-operation-result\n            text=\"{{ 'Several devices failed to register' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <p\n            ngNonBindable\n            translate\n            [translateParams]=\"{ count: failed.length, total: failed.length + success.length }\"\n            class=\"p-b-16 text-danger\"\n          >\n            Registration failed for {{ count }} devices out of {{ total }}.\n          </p>\n        </div>\n\n        <div class=\"m-b-8 p-l-24 p-r-24\" *ngIf=\"success.length > 0\" translate>\n          Turn on the registered device(s) and wait for connection(s) to be established. Once a\n          device is connected, its status will change to \"Pending acceptance\". You will need to\n          approve it by clicking on the \"Accept\" button.\n        </div>\n\n        <c8y-list-group class=\"separator-top m-t-16\">\n          <c8y-li *ngFor=\"let fail of failed\">\n            <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n            <p>{{ fail?.id }}</p>\n            <small>{{ fail?.message | translate }}</small>\n            <c8y-li-collapse>\n              <pre><code>{{ fail?.details | json }}</code></pre>\n            </c8y-li-collapse>\n          </c8y-li>\n\n          <c8y-li *ngFor=\"let s of success\">\n            <c8y-li-icon class=\"text-success\" [icon]=\"'check-circle'\"></c8y-li-icon>\n            {{ s?.id }}\n          </c8y-li>\n        </c8y-list-group>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        (onCustom)=\"bsModalRef.hide()\"\n        (onBack)=\"fixErrors($event, failed)\"\n        [showButtons]=\"{ back: failed.length > 0, custom: true }\"\n        [labels]=\"{ back: 'Fix errors', custom: 'Close' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    GeneralDeviceRegistrationComponent.ctorParameters = function () { return [
        { type: i3.TenantUiService },
        { type: client.TenantService },
        { type: RegisterDeviceService },
        { type: client.InventoryService },
        { type: i0.ChangeDetectorRef },
        { type: modal.BsModalRef }
    ]; };
    __decorate([
        i3.memoize()
    ], GeneralDeviceRegistrationComponent.prototype, "canLoadTenants$", null);
    __decorate([
        i3.memoize()
    ], GeneralDeviceRegistrationComponent.prototype, "getTenants$", null);
    __decorate([
        i3.memoize()
    ], GeneralDeviceRegistrationComponent.prototype, "getGroups$", null);

    var GeneralDeviceRegistrationButtonComponent = /** @class */ (function () {
        function GeneralDeviceRegistrationButtonComponent(modalService) {
            this.modalService = modalService;
        }
        GeneralDeviceRegistrationButtonComponent.prototype.open = function () {
            this.modalService.show(GeneralDeviceRegistrationComponent, {
                class: 'modal-sm',
                ignoreBackdropClick: true
            });
        };
        return GeneralDeviceRegistrationButtonComponent;
    }());
    GeneralDeviceRegistrationButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-general-device-registration-button',
                    template: "<button (click)=\"open()\"><i c8yIcon=\"c8y-device-connect\"></i> {{ 'General' | translate }} </button>\n"
                },] }
    ];
    GeneralDeviceRegistrationButtonComponent.ctorParameters = function () { return [
        { type: modal.BsModalService }
    ]; };

    var DeviceRegistrationViewComponent = /** @class */ (function () {
        function DeviceRegistrationViewComponent(registerDeviceService, bootstrapRealtimeService, tenantUiService, modalService, translateService, optionsService) {
            var _a;
            this.registerDeviceService = registerDeviceService;
            this.bootstrapRealtimeService = bootstrapRealtimeService;
            this.tenantUiService = tenantUiService;
            this.modalService = modalService;
            this.translateService = translateService;
            this.optionsService = optionsService;
            this.requireSecurityToken = false;
            this.isManagementTenant = false;
            this.isLoading = false;
            this.gridOrList = 'interact-grid';
            this.status = client.DeviceRegistrationStatus;
            this.statusProps = (_a = {},
                _a[client.DeviceRegistrationStatus.WAITING_FOR_CONNECTION] = {
                    label: i3.gettext('Waiting for connection'),
                    icon: 'unlink',
                    cls: 'text-danger'
                },
                _a[client.DeviceRegistrationStatus.PENDING_ACCEPTANCE] = {
                    label: i3.gettext('Pending acceptance'),
                    icon: 'circle',
                    cls: 'text-info'
                },
                _a[client.DeviceRegistrationStatus.ACCEPTED] = {
                    label: i3.gettext('Accepted'),
                    icon: 'check-circle',
                    cls: 'text-success'
                },
                _a[client.DeviceRegistrationStatus.BLOCKED] = {
                    label: i3.gettext('Blocked'),
                    icon: 'remove',
                    cls: 'text-danger'
                },
                _a);
            this.unsubscribe$ = new rxjs.Subject();
            this._securityTokenPolicy = new rxjs.BehaviorSubject(client.DeviceRegistrationSecurityMode.OPTIONAL);
        }
        DeviceRegistrationViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loadAll();
            this.setIsManagementTenant();
            this.setRequireSecurityToken();
            this.deviceRequests$ = this.registerDeviceService.deviceRegistrationRequests$.pipe(operators.map(function (req) { return ({
                data: lodashEs.sortBy(req.data, [
                    function (_a) {
                        var status = _a.status;
                        return (status === client.DeviceRegistrationStatus.PENDING_ACCEPTANCE ? 0 : 1);
                    },
                    '-creationTime'
                ]),
                paging: req.paging
            }); }));
            this.limit$ = this.registerDeviceService.limit$;
            this.limitReachedInfo$ = this.limit$.pipe(operators.filter(function (deviceRegistrationLimit) { return deviceRegistrationLimit.isReached; }), operators.switchMap(function (_a) {
                var limit = _a.limit;
                return _this.translateService.stream(i3.gettext('You reached the limit of {{ maxDevices }} devices. No more devices can be registered.'), { maxDevices: limit });
            }));
            this.registerDeviceService.loading$
                .pipe(operators.takeUntil(this.unsubscribe$))
                .subscribe(function (value) { return (_this.isLoading = value); });
            this.bootstrapRealtimeService
                .onUpdate$()
                .pipe(operators.takeUntil(this.unsubscribe$))
                .subscribe(function (bootstrap) {
                _this.registerDeviceService.onDeviceBootstrap(bootstrap);
            });
        };
        DeviceRegistrationViewComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        DeviceRegistrationViewComponent.prototype.updateList = function (data) {
            this.registerDeviceService.internalListUpdate(data);
        };
        DeviceRegistrationViewComponent.prototype.delete = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var confirmed;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.modalService.confirm(i3.gettext('Cancel device registration'), this.translateService.instant(i3.gettext('You are about to cancel device registration for ID "{{id}}". Do you want to proceed?'), { id: id }), i3.Status.DANGER, {
                                ok: i3.gettext('Cancel registration'),
                                cancel: i3.gettext('Close')
                            })];
                        case 1:
                            confirmed = _a.sent();
                            if (confirmed) {
                                this.registerDeviceService.remove(id);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceRegistrationViewComponent.prototype.accept = function (request) {
            this.registerDeviceService.accept(request);
        };
        DeviceRegistrationViewComponent.prototype.acceptAll = function () {
            this.registerDeviceService.acceptAll();
        };
        DeviceRegistrationViewComponent.prototype.canAcceptAll = function () {
            var pendingRequests = this.registerDeviceService.getRequestByStatus(client.DeviceRegistrationStatus.PENDING_ACCEPTANCE);
            return !(pendingRequests.length > 0 && !this.requireSecurityToken);
        };
        DeviceRegistrationViewComponent.prototype.loadAll = function () {
            this.registerDeviceService.list();
        };
        DeviceRegistrationViewComponent.prototype.displayMode = function (listClass) {
            this.gridOrList = listClass;
        };
        DeviceRegistrationViewComponent.prototype.setRequireSecurityToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var mode;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.optionsService.getTenantOption('device-registration', 'security-token.policy', client.DeviceRegistrationSecurityMode.OPTIONAL)];
                        case 1:
                            mode = _a.sent();
                            this._securityTokenPolicy.next(mode);
                            this.requireSecurityToken = mode === client.DeviceRegistrationSecurityMode.REQUIRED;
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceRegistrationViewComponent.prototype.setIsManagementTenant = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.tenantUiService.isManagementTenant()];
                        case 1:
                            _a.isManagementTenant = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceRegistrationViewComponent.prototype.shouldShowSecurityTokenInput = function (data) {
            return (data &&
                data.status === client.DeviceRegistrationStatus.PENDING_ACCEPTANCE &&
                this.showTokenInputBasedOnSecurityMode());
        };
        DeviceRegistrationViewComponent.prototype.showTokenInputBasedOnSecurityMode = function () {
            return this._securityTokenPolicy.getValue() !== client.DeviceRegistrationSecurityMode.IGNORED;
        };
        return DeviceRegistrationViewComponent;
    }());
    DeviceRegistrationViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-device-registration-view',
                    template: "<ng-container *ngIf=\"deviceRequests$ | async as deviceRequestList\">\n  <c8y-title>\n    {{ 'Device registration' | translate }}\n    <small *ngIf=\"deviceRequestList.data.length === 1\">1 {{ 'new device' | translate }}</small>\n    <small *ngIf=\"deviceRequestList.data.length > 1\">\n      {{ deviceRequestList.data.length }} {{ 'new devices' | translate }}\n    </small>\n  </c8y-title>\n\n  <c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n    <c8y-list-display-switch (onListClassChange)=\"displayMode($event)\"></c8y-list-display-switch>\n  </c8y-action-bar-item>\n\n  <ng-container *ngIf=\"limit$ | async as limitStatus\">\n    <c8y-action-bar-item [placement]=\"'right'\" [priority]=\"10\">\n      <button\n        *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\"\n        class=\"btn btn-link\"\n        title=\"{{ 'Accept all' | translate }}\"\n        (click)=\"acceptAll()\"\n        [disabled]=\"canAcceptAll() || limitStatus?.isReached\"\n      >\n        <i [c8yIcon]=\"'check'\"></i>\n        {{ 'Accept all' | translate }}\n      </button>\n    </c8y-action-bar-item>\n\n    <c8y-action-bar-item [placement]=\"'right'\" [priority]=\"9\">\n      <button\n        class=\"btn btn-link\"\n        title=\"{{ 'Reload' | translate }}\"\n        (click)=\"loadAll()\"\n        [disabled]=\"isLoading\"\n      >\n        <i [c8yIcon]=\"'refresh'\" [ngClass]=\"{ 'icon-spin': isLoading }\"></i>\n        {{ 'Reload' | translate }}\n      </button>\n    </c8y-action-bar-item>\n\n    <c8y-action-bar-item [placement]=\"'right'\" *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\">\n      <c8y-register-device-dropdown></c8y-register-device-dropdown>\n    </c8y-action-bar-item>\n\n    <c8y-help src=\"/users-guide/device-management/#connecting-devices\"></c8y-help>\n\n    <ng-container *ngIf=\"deviceRequestList.data.length > 0; else noData\">\n      <div class=\"card-group\" [ngClass]=\"gridOrList\">\n        <!-- START interact-list sticky header START -->\n        <div *ngIf=\"gridOrList === 'interact-list'\" class=\"page-sticky-header hidden-xs\">\n          <div class=\"flex-row\">\n            <div class=\"card-header p-l-40\">\n              <p translate>Device</p>\n            </div>\n            <div class=\"card-block card-column-30 p-l-0 m-l-8\">\n              <p translate>Status</p>\n            </div>\n            <div class=\"card-block card-column-40 p-0\" *ngIf=\"showTokenInputBasedOnSecurityMode()\">\n              <p translate>Security token</p>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{\n                  'Security token is required if the connected device uses it.' | translate\n                }}\"\n                placement=\"right\"\n                container=\"body\"\n                triggers=\"click focus\"\n                [outsideClick]=\"true\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </div>\n            <div class=\"card-footer card-column-40\">\n              <div class=\"d-contents\" *ngIf=\"isManagementTenant; else noManagement\">\n                <div class=\"card-column-50\">\n                  {{ 'Created' | translate }}\n                </div>\n                <div class=\"card-column-30\">\n                  {{ 'By`user`' | translate }}\n                </div>\n                <div class=\"card-column-20\">\n                  {{ 'Tenant ID' | translate }}\n                </div>\n              </div>\n              <ng-template #noManagement>\n                <div class=\"d-contents\">\n                  <div class=\"card-column-50\">\n                    {{ 'Created' | translate }}\n                  </div>\n                  <div class=\"card-column-50\">\n                    {{ 'By`user`' | translate }}\n                  </div>\n                </div>\n              </ng-template>\n            </div>\n            <div class=\"card-actions-group\" style=\"min-width: 176px\">\n              <div class=\"btn btn-xs invisible\">\n                <!--EMPTY by design-->\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- END interact-list sticky header END -->\n\n        <div *ngIf=\"limitStatus?.isReached\" class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n          <p class=\"alert alert-warning center-block\" role=\"alert\">\n            <strong>\n              {{ limitReachedInfo$ | async }}\n            </strong>\n            <br />\n            <span translate>Please contact your platform administrator.</span>\n          </p>\n        </div>\n\n        <ng-container *ngFor=\"let singleRequest of deviceRequestList.data\">\n          <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n            <div class=\"card\">\n              <div class=\"card-header separator\">\n                <div class=\"card-icon\">\n                  <i\n                    [c8yIcon]=\"statusProps[singleRequest.status].icon\"\n                    [class]=\"statusProps[singleRequest.status].cls\"\n                  ></i>\n                </div>\n                <p class=\"card-title text-truncate\">{{ singleRequest.id }}</p>\n              </div>\n\n              <div class=\"card-block text-center card-column-30\">\n                <span class=\"text-label-small\" translate>Status</span>\n                <p>\n                  <i\n                    *ngIf=\"singleRequest.status === status.WAITING_FOR_CONNECTION\"\n                    c8yIcon=\"refresh\"\n                    class=\"icon-spin text-primary\"\n                  ></i>\n                  {{ statusProps[singleRequest.status].label | translate }}\n                </p>\n              </div>\n\n              <ng-container *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\">\n                <div\n                  class=\"card-block text-center card-column-40 p-t-0 p-b-0\"\n                  *ngIf=\"showTokenInputBasedOnSecurityMode()\"\n                >\n                  <ng-container *ngIf=\"shouldShowSecurityTokenInput(singleRequest)\">\n                    <span *ngIf=\"gridOrList !== 'interact-list'\" class=\"text-label-small\" translate>\n                      Security token\n                    </span>\n                    <input\n                      [(ngModel)]=\"singleRequest.securityToken\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'A1e3gh5ds' }\"\n                      [required]=\"requireSecurityToken\"\n                    />\n                  </ng-container>\n                </div>\n\n                <div class=\"card-actions-group flex-item-v-center\" style=\"min-width: 176px\">\n                  <button\n                    class=\"btn btn-danger btn-xs\"\n                    title=\"{{ 'Remove' | translate }}\"\n                    (click)=\"delete(singleRequest.id)\"\n                    [disabled]=\"isLoading\"\n                  >\n                    {{ 'Remove' | translate }}\n                  </button>\n                  <button\n                    class=\"btn btn-primary btn-xs\"\n                    title=\"{{ 'Accept' | translate }}\"\n                    (click)=\"accept(singleRequest)\"\n                    *ngIf=\"singleRequest.status === status.PENDING_ACCEPTANCE\"\n                    [disabled]=\"\n                      isLoading ||\n                      limitStatus?.isReached ||\n                      (!singleRequest.securityToken && requireSecurityToken)\n                    \"\n                  >\n                    {{ 'Accept' | translate }}\n                  </button>\n                </div>\n              </ng-container>\n\n              <div class=\"card-footer separator text-center card-column-40\">\n                <small *ngIf=\"isManagementTenant; else noManagement\" class=\"d-contents\">\n                  <div class=\"d-contents\" *ngIf=\"singleRequest.creationTime && singleRequest.owner\">\n                    <span class=\"text-label-small\" translate>Created on`date`</span>\n                    <span class=\"card-column-50\">\n                      {{ singleRequest.creationTime | c8yDate }}\n                    </span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>by`user`</span>\n                    <span class=\"card-column-30\">{{ singleRequest.owner }}</span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>in`tenant`</span>\n                    <span class=\"card-column-20\">{{ singleRequest.tenantId }}</span>\n                  </div>\n                  <div\n                    class=\"d-contents\"\n                    *ngIf=\"!singleRequest.creationTime || !singleRequest.owner\"\n                  >\n                    <div class=\"card-column-50\"></div>\n                    <div class=\"card-column-30\"></div>\n                    <span class=\"text-label-small\" translate>Created in`tenant`</span>\n                    <div class=\"card-column-20\">\n                      <span>\n                        {{ singleRequest.tenantId }}\n                      </span>\n                    </div>\n                  </div>\n                </small>\n                <ng-template #noManagement>\n                  <small class=\"d-contents\">\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>Created on`date`</span>\n                    <span class=\"card-column-50\">\n                      {{ singleRequest.creationTime | c8yDate }}\n                    </span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>by`user`</span>\n                    <span class=\"card-column-50\">{{ singleRequest.owner }}</span>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <c8y-load-more\n        [paging]=\"deviceRequestList.paging\"\n        [hidden]=\"true\"\n        (onLoad)=\"updateList($event)\"\n      ></c8y-load-more>\n    </ng-container>\n\n    <ng-template #noData>\n      <div class=\"c8y-empty-state m-t-40 text-center\">\n        <h1 class=\"c8y-icon c8y-icon-device-connect c8y-icon-duocolor\"></h1>\n        <ng-container *ngIf=\"limitStatus?.isReached; else limitNotReached\">\n          <h3>\n            {{ limitReachedInfo$ | async }}\n          </h3>\n          <p translate>Please contact your platform administrator.</p>\n        </ng-container>\n        <ng-template #limitNotReached>\n          <h3 translate>No pending registrations to display.</h3>\n          <p *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\" translate>\n            Use the \"Register device\" dropdown in the top right corner.\n          </p>\n        </ng-template>\n      </div>\n    </ng-template>\n  </ng-container>\n</ng-container>\n"
                },] }
    ];
    DeviceRegistrationViewComponent.ctorParameters = function () { return [
        { type: RegisterDeviceService },
        { type: i3.DeviceBootstrapRealtimeService },
        { type: i3.TenantUiService },
        { type: i3.ModalService },
        { type: core.TranslateService },
        { type: i3.OptionsService }
    ]; };

    var RegisterDeviceNavigationFactory = /** @class */ (function () {
        function RegisterDeviceNavigationFactory(permissions) {
            this.permissions = permissions;
        }
        RegisterDeviceNavigationFactory.prototype.get = function () {
            var userHasPermission = this.permissions.hasAnyRole([
                'ROLE_DEVICE_CONTROL_ADMIN',
                'ROLE_DEVICE_CONTROL_READ'
            ]);
            var nav = [];
            if (userHasPermission) {
                nav.push(new i3.NavigatorNode({
                    label: i3.gettext('Registration'),
                    icon: 'c8y-device-connect',
                    path: '/deviceregistration',
                    parent: i3.gettext('Devices'),
                    preventDuplicates: true,
                    priority: 3000
                }));
            }
            return nav;
        };
        return RegisterDeviceNavigationFactory;
    }());
    RegisterDeviceNavigationFactory.decorators = [
        { type: i0.Injectable }
    ];
    RegisterDeviceNavigationFactory.ctorParameters = function () { return [
        { type: i3.Permissions }
    ]; };

    var BaseExtensibleDeviceRegistrationService = /** @class */ (function () {
        function BaseExtensibleDeviceRegistrationService(applicationService, stateService) {
            this.applicationService = applicationService;
            this.stateService = stateService;
        }
        BaseExtensibleDeviceRegistrationService.prototype.getMetadataUrl = function (contextPath) {
            return this.getServiceBaseUrl(contextPath) + "/metadata";
        };
        BaseExtensibleDeviceRegistrationService.prototype.getServiceBaseUrl = function (contextPath) {
            if (!contextPath || contextPath.length === 0) {
                throw new Error(i3.gettext('The URL of the microservice is misconfigured. A context path is missing.'));
            }
            return "/service/" + contextPath + "/deviceRegistration";
        };
        BaseExtensibleDeviceRegistrationService.prototype.getDeviceRegistrationProviders = function (bulk) {
            return __awaiter(this, void 0, void 0, function () {
                var providers, microservices;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            providers = [];
                            return [4 /*yield*/, this.listMicroservicesByUser()];
                        case 1:
                            microservices = _d.sent();
                            if (microservices && microservices.length > 0) {
                                providers = this.getProvidersFromManifestExtensions(microservices, bulk).concat(this.getProvidersFromExtensions(microservices, bulk));
                            }
                            return [2 /*return*/, providers];
                    }
                });
            });
        };
        BaseExtensibleDeviceRegistrationService.prototype.listMicroservicesByUser = function () {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, this.applicationService.listByUser((_c = (_b = (_a = this.stateService) === null || _a === void 0 ? void 0 : _a.currentUser) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.userName, {
                                dropOverwrittenApps: true,
                                noPaging: true,
                                pageSize: 100,
                                withTotalPages: true
                            })];
                        case 1:
                            data = (_d.sent()).data;
                            return [2 /*return*/, data === null || data === void 0 ? void 0 : data.filter(function (_d) {
                                    var type = _d.type;
                                    return type === client.ApplicationType.MICROSERVICE;
                                })];
                    }
                });
            });
        };
        BaseExtensibleDeviceRegistrationService.prototype.getProvidersFromManifestExtensions = function (applications, bulk) {
            var _this = this;
            return lodashEs.flatMap(applications, function (application) {
                var _a, _b;
                return (_b = (_a = application === null || application === void 0 ? void 0 : application.manifest) === null || _a === void 0 ? void 0 : _a.extensions) === null || _b === void 0 ? void 0 : _b.map(function (extension) {
                    return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
                });
            }).filter(function (provider) { return _this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk); });
        };
        BaseExtensibleDeviceRegistrationService.prototype.getProvidersFromExtensions = function (applications, bulk) {
            var _this = this;
            return lodashEs.flatMap(applications, function (application) {
                var _a;
                return (_a = application.extensions) === null || _a === void 0 ? void 0 : _a.map(function (extension) {
                    return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
                });
            }).filter(function (provider) { return _this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk); });
        };
        BaseExtensibleDeviceRegistrationService.prototype.appSupportingExtensibleDeviceRegistrationForm = function (extension, bulk) {
            if (bulk) {
                return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleBulkDeviceRegistration';
            }
            else {
                return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleDeviceRegistration';
            }
        };
        return BaseExtensibleDeviceRegistrationService;
    }());

    var ExtensibleDeviceRegistrationService = /** @class */ (function (_super) {
        __extends(ExtensibleDeviceRegistrationService, _super);
        function ExtensibleDeviceRegistrationService(applicationService, stateService, client) {
            var _this = _super.call(this, applicationService, stateService) || this;
            _this.applicationService = applicationService;
            _this.stateService = stateService;
            _this.client = client;
            return _this;
        }
        ExtensibleDeviceRegistrationService.prototype.getSchema = function (contextPath) {
            return __awaiter(this, void 0, void 0, function () {
                var response, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.client.fetch(this.getMetadataUrl(contextPath), { params: { lang: this.stateService.state.lang } })];
                        case 1:
                            response = _a.sent();
                            return [4 /*yield*/, response.json()];
                        case 2:
                            data = _a.sent();
                            if (!data || !data.c8y_DeviceRegistration) {
                                throw new Error(i3.gettext('The response of the microservice is incomplete. The device registration information is missing.'));
                            }
                            return [2 /*return*/, data.c8y_DeviceRegistration];
                    }
                });
            });
        };
        ExtensibleDeviceRegistrationService.prototype.getDeviceRegistrationProviders = function () {
            return _super.prototype.getDeviceRegistrationProviders.call(this, false);
        };
        ExtensibleDeviceRegistrationService.prototype.registerDevice = function (contextPath, model) {
            return __awaiter(this, void 0, void 0, function () {
                var method, body, headers, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            method = 'POST';
                            body = JSON.stringify(model);
                            headers = { 'content-type': 'application/json', accept: 'application/json' };
                            return [4 /*yield*/, this.client.fetch(this.getServiceBaseUrl(contextPath), { method: method, body: body, headers: headers })];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        return ExtensibleDeviceRegistrationService;
    }(BaseExtensibleDeviceRegistrationService));
    ExtensibleDeviceRegistrationService.decorators = [
        { type: i0.Injectable }
    ];
    ExtensibleDeviceRegistrationService.ctorParameters = function () { return [
        { type: client.ApplicationService },
        { type: i3.AppStateService },
        { type: client.FetchClient }
    ]; };

    var ExtensibleDeviceRegistrationModalComponent = /** @class */ (function () {
        function ExtensibleDeviceRegistrationModalComponent(bsModalRef, jsonschema, registrationService) {
            this.bsModalRef = bsModalRef;
            this.jsonschema = jsonschema;
            this.registrationService = registrationService;
            this.labels = [];
        }
        ExtensibleDeviceRegistrationModalComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, title, pages;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.registrationService.getSchema(this.contextPath)
                                .catch(function (error) {
                                _this.loadingErrorMessage = (error === null || error === void 0 ? void 0 : error.message) || i3.gettext('Cannot fetch a form definition from the microservice.');
                                return {
                                    title: i3.gettext('Error')
                                };
                            })];
                        case 1:
                            _a = _b.sent(), title = _a.title, pages = _a.pages;
                            this.title = title;
                            this.pages = pages === null || pages === void 0 ? void 0 : pages.map(function (step) {
                                _this.labels.push(step.title);
                                return [_this.jsonschema.toFieldConfig(step)];
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ExtensibleDeviceRegistrationModalComponent;
    }());
    ExtensibleDeviceRegistrationModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'extensible-device-registration-modal',
                    template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span class=\"c8y-icon c8y-icon-device-connect\"></span>\n    <h4>{{ title | translate }}</h4>\n  </ng-container>\n  <ng-container *ngIf=\"pages as steps; else loadingOrError\">\n    <c8y-extensible-device-registration-stepper\n      [steps]=\"steps\"\n      [labels]=\"labels\"\n      [contextPath]=\"contextPath\"\n    ></c8y-extensible-device-registration-stepper>\n  </ng-container>\n  <ng-template #loadingOrError>\n    <ng-container *ngIf=\"loadingErrorMessage; else loading\">\n      <c8y-operation-result\n        text=\"{{ loadingErrorMessage | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead text-regular\"\n      ></c8y-operation-result>\n      <div class=\"modal-footer\">\n        <button\n          title=\"{{ 'Close' | translate }}\"\n          (click)=\"bsModalRef.hide()\"\n          type=\"button\"\n          class=\"btn btn-default\"\n          translate\n        >\n          Close\n        </button>\n      </div>\n    </ng-container>\n    <ng-template #loading>\n      <div class=\"modal-header modal-header-info text-center\">\n        <c8y-progress-bar\n          [message]=\"'Loading the registration form definition\u2026' | translate\"\n          class=\"text-center\"\n        ></c8y-progress-bar>\n      </div>\n    </ng-template>\n  </ng-template>\n</c8y-modal>\n"
                },] }
    ];
    ExtensibleDeviceRegistrationModalComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: i3.C8yJSONSchema },
        { type: ExtensibleDeviceRegistrationService }
    ]; };

    var ExtensibleDeviceRegistrationButtonComponent = /** @class */ (function () {
        function ExtensibleDeviceRegistrationButtonComponent(deviceRegistrationService, modalService) {
            this.deviceRegistrationService = deviceRegistrationService;
            this.modalService = modalService;
        }
        ExtensibleDeviceRegistrationButtonComponent.prototype.ngOnInit = function () {
            this.providersMetaData = this.deviceRegistrationService.getDeviceRegistrationProviders();
        };
        ExtensibleDeviceRegistrationButtonComponent.prototype.click = function (providerMetaData) {
            var name = providerMetaData.name, contextPath = providerMetaData.contextPath;
            this.modalService.show(ExtensibleDeviceRegistrationModalComponent, {
                initialState: { name: name, contextPath: contextPath },
                class: 'modal-sm',
                ignoreBackdropClick: true
            });
        };
        return ExtensibleDeviceRegistrationButtonComponent;
    }());
    ExtensibleDeviceRegistrationButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'extensible-device-registration-provider',
                    template: "<div *ngFor=\"let provider of providersMetaData | async\">\n  <button title=\"{{ provider.name | translate }}\" type=\"button\" (click)=\"click(provider)\">\n    <i c8yIcon=\"c8y-device-connect\"></i>\n    {{ provider.name | translate }}\n  </button>\n</div>\n"
                },] }
    ];
    ExtensibleDeviceRegistrationButtonComponent.ctorParameters = function () { return [
        { type: ExtensibleDeviceRegistrationService },
        { type: modal.BsModalService }
    ]; };

    var ExtensibleDeviceRegistrationStepperComponent = /** @class */ (function () {
        function ExtensibleDeviceRegistrationStepperComponent(customProviderService, registerDeviceService, bsModalRef) {
            this.customProviderService = customProviderService;
            this.registerDeviceService = registerDeviceService;
            this.bsModalRef = bsModalRef;
            this.pendingStatus = false;
            this.forms = [];
            this.model = {};
            this.SERVER_ERROR = i3.gettext('Cannot register your device.');
            this.SUCCESSFUL_REGISTRATION = i3.gettext('Your device was successfully registered.');
            this.NO_CONNECTION = i3.gettext('Unable to reach the microservice.');
        }
        ExtensibleDeviceRegistrationStepperComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.steps.forEach(function (step) { return _this.forms.push(new forms.FormGroup({})); });
        };
        ExtensibleDeviceRegistrationStepperComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, res, data;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.pendingStatus = true;
                            this.errorMessage = null;
                            return [4 /*yield*/, this.customProviderService.registerDevice(this.contextPath, this.model)
                                    .catch(function (err) {
                                    return {
                                        res: undefined,
                                        data: undefined
                                    };
                                })
                                    .finally(function () {
                                    _this.pendingStatus = false;
                                    _this.stepper.next();
                                })];
                        case 1:
                            _a = _b.sent(), res = _a.res, data = _a.data;
                            if (res && data) {
                                if (res.status >= 400 && res.status < 500) {
                                    this.handleError(data.message || this.SERVER_ERROR);
                                }
                                else if (res.status >= 500) {
                                    this.handleError(this.SERVER_ERROR);
                                }
                                else {
                                    this.message = this.SUCCESSFUL_REGISTRATION;
                                }
                            }
                            else {
                                this.handleError(this.NO_CONNECTION);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ExtensibleDeviceRegistrationStepperComponent.prototype.close = function () {
            this.bsModalRef.hide();
        };
        ExtensibleDeviceRegistrationStepperComponent.prototype.complete = function () {
            this.registerDeviceService.list();
            this.bsModalRef.hide();
        };
        ExtensibleDeviceRegistrationStepperComponent.prototype.goToFirstStep = function () {
            this.stepper.selectedIndex = 0;
        };
        ExtensibleDeviceRegistrationStepperComponent.prototype.isRegistrationStep = function () {
            return this.stepper.selectedIndex === this.steps.length - 1;
        };
        ExtensibleDeviceRegistrationStepperComponent.prototype.finalStepStatus = function () {
            if (this.stepper.selectedIndex === this.steps.length) {
                if (this.errorMessage) {
                    return stepper.STEP_STATE.ERROR;
                }
                else {
                    return stepper.STEP_STATE.DONE;
                }
            }
            else {
                return stepper.STEP_STATE.NUMBER;
            }
        };
        ExtensibleDeviceRegistrationStepperComponent.prototype.handleError = function (message) {
            this.errorMessage = message;
        };
        return ExtensibleDeviceRegistrationStepperComponent;
    }());
    ExtensibleDeviceRegistrationStepperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-extensible-device-registration-stepper',
                    template: "<c8y-stepper\n  [disableProgressButtons]=\"true\"\n  [disableDefaultIcons]=\"{ edit: true, done: false }\"\n  [customClasses]=\"['m-40', 'm-t-16', 'm-b-16']\"\n  linear\n>\n  <cdk-step *ngFor=\"let step of steps; let i = index\" [stepControl]=\"forms[i]\" [label]=\"labels[i]\">\n    <c8y-form-group class=\"form-group p-24 p-b-0 p-t-16\">\n      <formly-form [form]=\"forms[i]\" [fields]=\"step\" [model]=\"model\"></formly-form>\n    </c8y-form-group>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: true, next: true }\"\n      [labels]=\"{ next: 'Register' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"save()\"\n      [pending]=\"pendingStatus\"\n      [disabled]=\"forms[i].invalid\"\n    ></c8y-stepper-buttons>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"!isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: i !== 0, next: true }\"\n      [disabled]=\"forms[i].invalid\"\n      (onCancel)=\"close()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n  <cdk-step [state]=\"finalStepStatus()\" label=\"{{ 'Summary' | translate }}\">\n    <c8y-operation-result\n      *ngIf=\"!errorMessage; else errorInfo\"\n      text=\"{{ message | translate }}\"\n      [size]=\"84\"\n      [vertical]=\"true\"\n      type=\"success\"\n      class=\"lead\"\n    ></c8y-operation-result>\n    <ng-template #errorInfo>\n      <c8y-operation-result\n        text=\"{{ errorMessage | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </ng-template>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      [showButtons]=\"{ cancel: errorMessage, back: errorMessage, next: !errorMessage }\"\n      [labels]=\"{ back: 'Fix issue', next: 'Close' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"complete()\"\n      (onBack)=\"goToFirstStep()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n</c8y-stepper>\n"
                },] }
    ];
    ExtensibleDeviceRegistrationStepperComponent.ctorParameters = function () { return [
        { type: ExtensibleDeviceRegistrationService },
        { type: RegisterDeviceService },
        { type: modal.BsModalRef }
    ]; };
    ExtensibleDeviceRegistrationStepperComponent.propDecorators = {
        stepper: [{ type: i0.ViewChild, args: [i3.C8yStepper, { static: true },] }],
        contextPath: [{ type: i0.Input }],
        labels: [{ type: i0.Input }],
        steps: [{ type: i0.Input }]
    };

    var BulkExtensibleDeviceRegistrationService = /** @class */ (function (_super) {
        __extends(BulkExtensibleDeviceRegistrationService, _super);
        function BulkExtensibleDeviceRegistrationService(applicationService, stateService, client) {
            var _this = _super.call(this, applicationService, stateService) || this;
            _this.applicationService = applicationService;
            _this.stateService = stateService;
            _this.client = client;
            return _this;
        }
        BulkExtensibleDeviceRegistrationService.prototype.getDeviceRegistrationProviders = function () {
            return _super.prototype.getDeviceRegistrationProviders.call(this, true);
        };
        BulkExtensibleDeviceRegistrationService.prototype.getBulkDescription = function (contextPath) {
            return __awaiter(this, void 0, void 0, function () {
                var res, c8y_DeviceRegistration;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.client.fetch(this.getMetadataUrl(contextPath), {
                                params: { lang: this.stateService.state.lang }
                            })];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            c8y_DeviceRegistration = (_a.sent()).c8y_DeviceRegistration;
                            if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {
                                throw new Error(i3.gettext('The response of the microservice is incomplete. The bulk registration information is missing.'));
                            }
                            return [2 /*return*/, c8y_DeviceRegistration.bulk];
                    }
                });
            });
        };
        BulkExtensibleDeviceRegistrationService.prototype.upload = function (csv, contextPath) {
            return __awaiter(this, void 0, void 0, function () {
                var method, body, res, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            method = 'POST';
                            body = this.createBinaryRequestBody(csv);
                            return [4 /*yield*/, this.client.fetch(this.getBulkUrl(contextPath), { method: method, body: body })];
                        case 1:
                            res = _a.sent();
                            return [4 /*yield*/, res.json()];
                        case 2:
                            data = _a.sent();
                            return [2 /*return*/, { res: res, data: data }];
                    }
                });
            });
        };
        BulkExtensibleDeviceRegistrationService.prototype.getBulkUrl = function (contextPath) {
            return this.getServiceBaseUrl(contextPath) + "/bulk";
        };
        BulkExtensibleDeviceRegistrationService.prototype.createBinaryRequestBody = function (file) {
            var body = new FormData();
            body.append('file', file, file.name);
            return body;
        };
        return BulkExtensibleDeviceRegistrationService;
    }(BaseExtensibleDeviceRegistrationService));
    BulkExtensibleDeviceRegistrationService.decorators = [
        { type: i0.Injectable }
    ];
    BulkExtensibleDeviceRegistrationService.ctorParameters = function () { return [
        { type: client.ApplicationService },
        { type: i3.AppStateService },
        { type: client.FetchClient }
    ]; };

    var bulkSchema$1 = {
        $schema: 'https://json-schema.org/draft/2019-09/schema',
        type: 'object',
        properties: {
            csvBulkFile: {
                type: 'string',
                title: i3.gettext('CSV file upload'),
                description: i3.gettext('You can use file upload component to let users send files. This input accepts only a single CSV file.'),
                contentEncoding: 'base64',
                contentMediaType: 'csv'
            }
        },
        required: ['csvBulkFile'],
        additionalProperties: false
    };
    var ExtensibleBulkDeviceRegistrationModalComponent = /** @class */ (function () {
        function ExtensibleBulkDeviceRegistrationModalComponent(jsonschema, bulkExtensibleDeviceRegistrationService, registerDeviceService, bsModalRef) {
            this.jsonschema = jsonschema;
            this.bulkExtensibleDeviceRegistrationService = bulkExtensibleDeviceRegistrationService;
            this.registerDeviceService = registerDeviceService;
            this.bsModalRef = bsModalRef;
            this.loadingError = false;
            this.pending = false;
            this.form = new forms.FormGroup({});
            this.model = {};
        }
        ExtensibleBulkDeviceRegistrationModalComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _c, title, exampleFileUrls;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, this.bulkExtensibleDeviceRegistrationService
                                .getBulkDescription(this.contextPath)
                                .catch(function (error) {
                                _this.message = error.message;
                                _this.loadingError = true;
                                return {
                                    title: i3.gettext('Error'),
                                    exampleFileUrls: []
                                };
                            })];
                        case 1:
                            _c = _d.sent(), title = _c.title, exampleFileUrls = _c.exampleFileUrls;
                            this.title = title;
                            this.template = [this.jsonschema.toFieldConfig(bulkSchema$1)];
                            this.examples = exampleFileUrls;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ExtensibleBulkDeviceRegistrationModalComponent.prototype.upload = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _c, res, data;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.pending = true;
                            return [4 /*yield*/, this.bulkExtensibleDeviceRegistrationService
                                    .upload(this.getFile(this.model), this.contextPath)
                                    .catch(function (err) {
                                    return {
                                        res: undefined,
                                        data: undefined
                                    };
                                })
                                    .finally(function () {
                                    _this.pending = false;
                                    _this.stepper.next();
                                })];
                        case 1:
                            _c = _d.sent(), res = _c.res, data = _c.data;
                            this.result = data;
                            this.success = (res === null || res === void 0 ? void 0 : res.status) < 400;
                            if (this.success) {
                                this.message = i3.gettext('Device registration created.');
                                this.model = {};
                            }
                            if (res) {
                                if (res.status >= 400 && res.status < 500) {
                                    this.message = i3.gettext('Device registration failed.');
                                }
                                else if (res.status >= 500) {
                                    this.message = i3.gettext('Error occurred while processing the uploaded file.');
                                }
                            }
                            else {
                                this.message = i3.gettext('No internet connection. Unable to reach the microservice.');
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ExtensibleBulkDeviceRegistrationModalComponent.prototype.getFile = function (model) {
            var _a, _b;
            var csvBulkFile = (_a = model) === null || _a === void 0 ? void 0 : _a.csvBulkFile;
            return csvBulkFile ? (_b = csvBulkFile[0]) === null || _b === void 0 ? void 0 : _b.file : undefined;
        };
        ExtensibleBulkDeviceRegistrationModalComponent.prototype.complete = function () {
            this.registerDeviceService.list();
            this.bsModalRef.hide();
        };
        ExtensibleBulkDeviceRegistrationModalComponent.prototype.cancel = function () {
            this.bsModalRef.hide();
        };
        return ExtensibleBulkDeviceRegistrationModalComponent;
    }());
    ExtensibleBulkDeviceRegistrationModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'extensible-device-registration-modal-component',
                    template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span class=\"c8y-icon c8y-icon-device-connect\"></span>\n    <h4>{{ title | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear class=\"p-t-16\">\n    <ng-container *ngIf=\"!loadingError\">\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"sticky-top bg-component separator-bottom\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              separator-bottom\n              text-16 text-medium text-center\n              bg-component\n            \"\n            translate\n          >\n            Register devices in bulk\n          </p>\n          <c8y-form-group class=\"p-24 p-t-16 p-b-8 m-b-0\">\n            <formly-form [form]=\"form\" [fields]=\"template\" [model]=\"model\"></formly-form>\n          </c8y-form-group>\n        </div>\n        <div\n          *ngFor=\"let example of examples\"\n          class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\"\n        >\n          <p class=\"m-b-8 text-medium\">\n            {{ example.title | translate }}\n          </p>\n          <p class=\"small m-b-8\">{{ example.description | translate }}</p>\n          <a\n            title=\"{{ 'Download template' | translate }}\"\n            class=\"btn btn-default btn-sm\"\n            target=\"_self\"\n            [href]=\"example.url\"\n            download=\"{{ 'Example bulk registration - template.csv' | translate }}\"\n          >\n            <i c8yIcon=\"download\"></i>\n            <span translate>Download template</span>\n          </a>\n        </div>\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [disabled]=\"form.invalid\"\n          [pending]=\"pending\"\n          (onCancel)=\"cancel()\"\n          (onNext)=\"upload()\"\n          [labels]=\"{ next: 'Upload' }\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </ng-container>\n    <cdk-step state=\"final\">\n      <div class=\"p-24\">\n        <div *ngIf=\"success; else fail\">\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-list-group class=\"separator-top m-t-16\">\n            <c8y-li>\n              <c8y-li-icon class=\"text-success\" [icon]=\"'check-circle'\"></c8y-li-icon>\n              <p translate>File successfully uploaded.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <ng-template #fail>\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-list-group *ngIf=\"result\" class=\"separator-top m-t-16\">\n            <c8y-li>\n              <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n              <p translate>Bulk operation failed.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </c8y-list-group>\n        </ng-template>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ next: true }\"\n        (onNext)=\"complete()\"\n        [labels]=\"{ next: success ? 'Complete' : 'Cancel' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n"
                },] }
    ];
    ExtensibleBulkDeviceRegistrationModalComponent.ctorParameters = function () { return [
        { type: i3.C8yJSONSchema },
        { type: BulkExtensibleDeviceRegistrationService },
        { type: RegisterDeviceService },
        { type: modal.BsModalRef }
    ]; };
    ExtensibleBulkDeviceRegistrationModalComponent.propDecorators = {
        stepper: [{ type: i0.ViewChild, args: [i3.C8yStepper, { static: true },] }]
    };

    var bulkSchema = {
        $schema: 'https://json-schema.org/draft/2019-09/schema',
        type: 'object',
        properties: {
            csvBulkFile: {
                type: 'string',
                title: i3.gettext('CSV file upload'),
                description: i3.gettext('You can use file upload component to let users send files. This input accepts only a single CSV file.'),
                contentEncoding: 'base64',
                contentMediaType: 'csv'
            }
        },
        required: ['csvBulkFile'],
        additionalProperties: false
    };
    var simpleCsvHeaders = ['ID', 'PATH'];
    var fullCsvHeaders = [
        'ID',
        'CREDENTIALS',
        'TYPE',
        'NAME',
        'ICCID',
        'IDTYPE',
        'PATH',
        'SHELL',
        'AUTH_TYPE'
    ];
    var BulkDeviceRegistrationModalComponent = /** @class */ (function () {
        function BulkDeviceRegistrationModalComponent(router, jsonschema, deviceRegistrationService, registerDeviceService, bsModalRef) {
            this.router = router;
            this.jsonschema = jsonschema;
            this.deviceRegistrationService = deviceRegistrationService;
            this.registerDeviceService = registerDeviceService;
            this.bsModalRef = bsModalRef;
            this.form = new forms.FormGroup({});
            this.model = {};
        }
        BulkDeviceRegistrationModalComponent.prototype.ngOnInit = function () {
            this.template = [this.jsonschema.toFieldConfig(bulkSchema)];
        };
        BulkDeviceRegistrationModalComponent.prototype.upload = function () {
            var _this = this;
            this.pending = true;
            var file = this.getFile(this.model);
            this.deviceRegistrationService
                .create(file)
                .then(function (_c) {
                var res = _c.res, data = _c.data;
                if (res.status < 400) {
                    _this.result = data;
                    _this.success = data.numberOfFailed === 0 && data.numberOfSuccessful === data.numberOfAll;
                    _this.message = _this.success
                        ? i3.gettext('Device registration created.')
                        : (_this.message = i3.gettext('Device registration failed.'));
                }
                else {
                    _this.failedResult = data;
                    _this.message = i3.gettext('Device registration failed.');
                }
                _this.model = {};
                _this.pending = false;
                _this.stepper.next();
            })
                .catch(function (reason) {
                _this.message = i3.gettext('Error occurred while processing the uploaded file.');
                _this.pending = false;
                _this.stepper.next();
            });
        };
        BulkDeviceRegistrationModalComponent.prototype.downloadSimple = function () {
            return this.download(simpleCsvHeaders, i3.gettext('Simple bulk registration - template.csv'));
        };
        BulkDeviceRegistrationModalComponent.prototype.downloadFull = function () {
            return this.download(fullCsvHeaders, i3.gettext('Full bulk registration - template.csv'));
        };
        BulkDeviceRegistrationModalComponent.prototype.download = function (headers, fileName) {
            var headerRaw = headers.map(function (header) { return "\"" + header + "\""; }).join(';');
            var binaryFile = new Blob([headerRaw], { type: 'text/csv' });
            fileSaver.saveAs(binaryFile, fileName);
        };
        BulkDeviceRegistrationModalComponent.prototype.complete = function () {
            this.registerDeviceService.list();
            this.bsModalRef.hide();
        };
        BulkDeviceRegistrationModalComponent.prototype.cancel = function () {
            this.bsModalRef.hide();
        };
        BulkDeviceRegistrationModalComponent.prototype.getFile = function (model) {
            var _a, _b;
            var csvBulkFile = (_a = model) === null || _a === void 0 ? void 0 : _a.csvBulkFile;
            return csvBulkFile ? (_b = csvBulkFile[0]) === null || _b === void 0 ? void 0 : _b.file : undefined;
        };
        return BulkDeviceRegistrationModalComponent;
    }());
    BulkDeviceRegistrationModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'bulk-device-registration',
                    template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span c8yIcon=\"upload\"></span>\n    <h4>{{ 'Bulk device registration' | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear>\n    <cdk-step [stepControl]=\"form\">\n      <div class=\"sticky-top bg-component separator-bottom\">\n        <p\n          class=\"\n            p-l-24 p-r-24 p-t-16 p-b-16\n            m-b-0\n            sticky-top\n            separator-bottom\n            text-16 text-medium text-center\n            bg-component\n          \"\n          translate\n        >\n          Register general devices in bulk\n        </p>\n        <c8y-form-group class=\"p-24 p-t-16 p-b-8 m-b-0\">\n          <formly-form [form]=\"form\" [fields]=\"template\" [model]=\"model\"></formly-form>\n        </c8y-form-group>\n      </div>\n      <div class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\">\n        <div>\n          <p class=\"m-b-8 text-medium\" translate>Simple registration</p>\n          <p class=\"small m-b-8\" translate>\n            Creates all registration requests at once, then each one needs to go through regular\n            acceptance process.\n          </p>\n        </div>\n        <a\n          title=\"{{ 'Download template' | translate }}\"\n          class=\"btn btn-default btn-sm\"\n          target=\"_self\"\n          (click)=\"downloadSimple()\"\n        >\n          <i c8yIcon=\"download\"></i>\n          <span translate>Download template</span>\n        </a>\n      </div>\n      <div class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\">\n        <div>\n          <p class=\"m-b-8 text-medium\" translate>Full registration</p>\n          <p class=\"small m-b-8\" translate>\n            Creates all device credentials and devices using provided list of property values.\n            Devices can start communicating with the platform immediately.\n          </p>\n        </div>\n        <a\n          title=\"{{ 'Download template' | translate }}\"\n          class=\"btn btn-default btn-sm\"\n          target=\"_self\"\n          (click)=\"downloadFull()\"\n        >\n          <i c8yIcon=\"download\"></i>\n          <span translate>Download template</span>\n        </a>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ cancel: true, next: true }\"\n        [disabled]=\"form.invalid\"\n        [pending]=\"pending\"\n        (onCancel)=\"cancel()\"\n        (onNext)=\"upload()\"\n        [labels]=\"{ next: 'Upload' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step state=\"final\">\n      <div class=\"m-24\">\n        <div *ngIf=\"success; else warning\">\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </div>\n        <ng-template #warning>\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </ng-template>\n        <c8y-list-group class=\"separator-top m-t-16\">\n          <ng-container *ngIf=\"result; else failedResponse\">\n            <c8y-li *ngIf=\"success; else fail\">\n              <c8y-li-icon class=\"text-success\" icon=\"check-circle\"></c8y-li-icon>\n              <p>All devices processed successfully.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n            <ng-template #fail>\n              <c8y-li>\n                <c8y-li-icon class=\"text-danger\" icon=\"ban\"></c8y-li-icon>\n                <p\n                  ngNonBindable\n                  [translateParams]=\"{ count: result?.numberOfFailed, total: result?.numberOfAll }\"\n                  translate\n                >\n                  Failed to process {{ count }} out of {{ total }}.\n                </p>\n                <c8y-li-collapse>\n                  <pre><code>{{ result | json }}</code></pre>\n                </c8y-li-collapse>\n              </c8y-li>\n            </ng-template>\n          </ng-container>\n          <ng-template #failedResponse>\n            <c8y-li>\n              <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n              <small>{{ failedResult?.message | translate }}</small>\n              <c8y-li-collapse>\n                <pre><code>{{ failedResult | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </ng-template>\n        </c8y-list-group>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ next: true }\"\n        (onNext)=\"complete()\"\n        [labels]=\"{ next: success ? 'Close' : 'Cancel' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n"
                },] }
    ];
    BulkDeviceRegistrationModalComponent.ctorParameters = function () { return [
        { type: i1.Router },
        { type: i3.C8yJSONSchema },
        { type: client.DeviceRegistrationBulkService },
        { type: RegisterDeviceService },
        { type: modal.BsModalRef }
    ]; };
    BulkDeviceRegistrationModalComponent.propDecorators = {
        stepper: [{ type: i0.ViewChild, args: [i3.C8yStepper, { static: true },] }]
    };

    var ExtensibleBulkDeviceRegistrationButtonComponent = /** @class */ (function () {
        function ExtensibleBulkDeviceRegistrationButtonComponent(bulkExtensibleDeviceRegistrationService, modalService) {
            this.bulkExtensibleDeviceRegistrationService = bulkExtensibleDeviceRegistrationService;
            this.modalService = modalService;
        }
        ExtensibleBulkDeviceRegistrationButtonComponent.prototype.ngOnInit = function () {
            this.bulkProvidersMetaData = this.bulkExtensibleDeviceRegistrationService.getDeviceRegistrationProviders();
        };
        ExtensibleBulkDeviceRegistrationButtonComponent.prototype.click = function (contextPath) {
            this.modalService.show(ExtensibleBulkDeviceRegistrationModalComponent, {
                initialState: { contextPath: contextPath },
                class: 'modal-sm',
                ignoreBackdropClick: true
            });
        };
        return ExtensibleBulkDeviceRegistrationButtonComponent;
    }());
    ExtensibleBulkDeviceRegistrationButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'extensible-device-registration-component',
                    template: "<div *ngFor=\"let provider of bulkProvidersMetaData | async\">\n  <button\n    title=\"{{ provider.name | translate }}\"\n    type=\"button\"\n    (click)=\"click(provider.contextPath)\"\n  >\n    <i c8yIcon=\"upload\"></i>\n    {{ provider.name | translate }}\n  </button>\n</div>\n"
                },] }
    ];
    ExtensibleBulkDeviceRegistrationButtonComponent.ctorParameters = function () { return [
        { type: BulkExtensibleDeviceRegistrationService },
        { type: modal.BsModalService }
    ]; };

    var BulkDeviceRegistrationButtonComponent = /** @class */ (function () {
        function BulkDeviceRegistrationButtonComponent(modalService) {
            this.modalService = modalService;
        }
        BulkDeviceRegistrationButtonComponent.prototype.click = function () {
            this.modalService.show(BulkDeviceRegistrationModalComponent, {
                class: 'modal-sm',
                ignoreBackdropClick: true
            });
        };
        return BulkDeviceRegistrationButtonComponent;
    }());
    BulkDeviceRegistrationButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'extensible-device-registration-component',
                    template: "<button (click)=\"click()\"><i c8yIcon=\"upload\"></i>{{ 'General' | translate }}</button>\n"
                },] }
    ];
    BulkDeviceRegistrationButtonComponent.ctorParameters = function () { return [
        { type: modal.BsModalService }
    ]; };

    var HOOK_DEVICE_REGISTRATION = new i0.InjectionToken('RegisterDevicesFactory');
    var RegisterDeviceExtensionService = /** @class */ (function () {
        function RegisterDeviceExtensionService(injector, router) {
            var _this = this;
            this.injector = injector;
            this.factories = [];
            this.refreshTrigger = new rxjs.Subject();
            this.items$ = i3.fromTriggerOnce(router, [this.refreshTrigger], [function () { return _this.injector.get(HOOK_DEVICE_REGISTRATION, []); }, function () { return _this.factories; }, this]).pipe(operators.startWith([]), operators.shareReplay(1));
        }
        RegisterDeviceExtensionService.prototype.refresh = function () {
            this.refreshTrigger.next();
        };
        return RegisterDeviceExtensionService;
    }());
    RegisterDeviceExtensionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RegisterDeviceExtensionService_Factory() { return new RegisterDeviceExtensionService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: RegisterDeviceExtensionService, providedIn: "root" });
    RegisterDeviceExtensionService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    RegisterDeviceExtensionService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    var RegisterDeviceDropdownComponent = /** @class */ (function () {
        function RegisterDeviceDropdownComponent(registerDeviceExtensionService, registerDeviceService) {
            this.registerDeviceExtensionService = registerDeviceExtensionService;
            this.registerDeviceService = registerDeviceService;
            this.single$ = this.registerDeviceExtensionService.items$.pipe(operators.map(function (items) { return items.filter(function (item) { return item.category === 'single'; }).sort(function (a, b) { return b.priority - a.priority; }); }));
            this.bulk$ = this.registerDeviceExtensionService.items$.pipe(operators.map(function (items) { return items.filter(function (item) { return item.category === 'bulk'; }).sort(function (a, b) { return b.priority - a.priority; }); }));
            this.limit$ = this.registerDeviceService.limit$.pipe(operators.map(function (limit) { return limit.isReached; }));
        }
        return RegisterDeviceDropdownComponent;
    }());
    RegisterDeviceDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-register-device-dropdown',
                    template: "<div class=\"dropdown\" dropdown>\n  <button\n    *ngIf=\"!(limit$ | async); else disable\"\n    title=\"{{ 'Register device' | translate }}\"\n    class=\"dropdown-toggle c8y-dropdown d-flex\"\n    dropdownToggle\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <span class=\"text-truncate\" translate>Register device</span>\n    <i [c8yIcon]=\"'caret-down'\"></i>\n  </button>\n  <ng-template #disable>\n    <button\n      title=\"{{ 'Device registration disabled' | translate }}\"\n      class=\"btn btn-clean d-flex p-l-8\"\n      disabled\n    >\n      <span class=\"text-truncate\" translate>Register device</span>\n      <i [c8yIcon]=\"'caret-down'\"></i>\n    </button>\n  </ng-template>\n\n  <!-- dropdown for normal screen sizes -->\n  <ul class=\"dropdown-menu dropdown-menu-right hidden-xs\" *dropdownMenu>\n    <ng-container *ngTemplateOutlet=\"dropdown\"></ng-container>\n  </ul>\n\n  <!-- fake dropdown for mobile screen sizes. *dropdownMenu is missing by design! -->\n  <ul class=\"dropdown-menu dropdown-menu visible-xs\">\n    <ng-container *ngTemplateOutlet=\"dropdown\"></ng-container>\n  </ul>\n\n  <ng-template #dropdown>\n    <ng-container *ngIf=\"single$ | async as single\">\n      <li class=\"dropdown-header\" *ngIf=\"single.length > 0\" translate>Single registration</li>\n      <li *ngFor=\"let item of single\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </li>\n    </ng-container>\n    <ng-container *ngIf=\"bulk$ | async as bulk\">\n      <li class=\"dropdown-header\" *ngIf=\"bulk.length > 0\" translate>Bulk registration</li>\n      <li *ngFor=\"let item of bulk\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </li>\n    </ng-container>\n  </ng-template>\n</div>\n"
                },] }
    ];
    RegisterDeviceDropdownComponent.ctorParameters = function () { return [
        { type: RegisterDeviceExtensionService },
        { type: RegisterDeviceService }
    ]; };

    var DeviceRegistrationFactory = /** @class */ (function () {
        function DeviceRegistrationFactory() {
        }
        DeviceRegistrationFactory.prototype.get = function () {
            return [{
                    template: GeneralDeviceRegistrationButtonComponent,
                    priority: 100,
                    category: 'single'
                }, {
                    template: ExtensibleDeviceRegistrationButtonComponent,
                    priority: 50,
                    category: 'single'
                }, {
                    template: ExtensibleBulkDeviceRegistrationButtonComponent,
                    priority: 50,
                    category: 'bulk'
                }, {
                    template: BulkDeviceRegistrationButtonComponent,
                    priority: 100,
                    category: 'bulk'
                }];
        };
        return DeviceRegistrationFactory;
    }());
    DeviceRegistrationFactory.decorators = [
        { type: i0.Injectable }
    ];

    var routes = [
        {
            path: 'deviceregistration',
            component: DeviceRegistrationViewComponent,
        }
    ];
    var RegisterDeviceModule = /** @class */ (function () {
        function RegisterDeviceModule() {
        }
        return RegisterDeviceModule;
    }());
    RegisterDeviceModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [dropdown.BsDropdownModule, popover.PopoverModule, i3.CommonModule, i3.CoreModule, i3.StepperModule, i3.DynamicFormsModule, i1.RouterModule.forChild(routes)],
                    declarations: [
                        DeviceRegistrationViewComponent,
                        GeneralDeviceRegistrationComponent,
                        GeneralDeviceRegistrationButtonComponent,
                        BulkDeviceRegistrationModalComponent,
                        BulkDeviceRegistrationButtonComponent,
                        ExtensibleDeviceRegistrationButtonComponent,
                        ExtensibleDeviceRegistrationModalComponent,
                        ExtensibleDeviceRegistrationStepperComponent,
                        ExtensibleBulkDeviceRegistrationModalComponent,
                        ExtensibleBulkDeviceRegistrationButtonComponent,
                        RegisterDeviceDropdownComponent
                    ],
                    providers: [{
                            provide: HOOK_DEVICE_REGISTRATION,
                            useClass: DeviceRegistrationFactory,
                            multi: true
                        },
                        {
                            provide: i3.HOOK_NAVIGATOR_NODES,
                            useClass: RegisterDeviceNavigationFactory,
                            multi: true
                        },
                        i3.DeviceBootstrapRealtimeService,
                        RegisterDeviceService,
                        ExtensibleDeviceRegistrationService,
                        BulkExtensibleDeviceRegistrationService,
                    ],
                    entryComponents: [
                        GeneralDeviceRegistrationComponent,
                        ExtensibleBulkDeviceRegistrationButtonComponent,
                        BulkDeviceRegistrationModalComponent,
                        ExtensibleDeviceRegistrationModalComponent,
                        RegisterDeviceDropdownComponent
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DeviceRegistrationFactory = DeviceRegistrationFactory;
    exports.GeneralDeviceRegistrationButtonComponent = GeneralDeviceRegistrationButtonComponent;
    exports.GeneralDeviceRegistrationComponent = GeneralDeviceRegistrationComponent;
    exports.HOOK_DEVICE_REGISTRATION = HOOK_DEVICE_REGISTRATION;
    exports.RegisterDeviceExtensionService = RegisterDeviceExtensionService;
    exports.RegisterDeviceModule = RegisterDeviceModule;
    exports.RegisterDeviceService = RegisterDeviceService;
    exports["ɵa"] = DeviceRegistrationViewComponent;
    exports["ɵb"] = BulkDeviceRegistrationModalComponent;
    exports["ɵc"] = BulkDeviceRegistrationButtonComponent;
    exports["ɵd"] = ExtensibleDeviceRegistrationButtonComponent;
    exports["ɵe"] = ExtensibleDeviceRegistrationService;
    exports["ɵf"] = BaseExtensibleDeviceRegistrationService;
    exports["ɵg"] = ExtensibleDeviceRegistrationModalComponent;
    exports["ɵh"] = ExtensibleDeviceRegistrationStepperComponent;
    exports["ɵi"] = ExtensibleBulkDeviceRegistrationModalComponent;
    exports["ɵj"] = BulkExtensibleDeviceRegistrationService;
    exports["ɵk"] = ExtensibleBulkDeviceRegistrationButtonComponent;
    exports["ɵl"] = RegisterDeviceDropdownComponent;
    exports["ɵm"] = RegisterDeviceNavigationFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-register-device.umd.js.map
