(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('rxjs'), require('rxjs/operators'), require('lodash-es'), require('ngx-bootstrap/collapse'), require('ngx-bootstrap/dropdown'), require('@angular/cdk/scrolling'), require('@angular/common'), require('@c8y/ngx-components/api'), require('ngx-bootstrap/tooltip'), require('@angular/common/http'), require('@ngx-translate/core'), require('@c8y/client'), require('ngx-bootstrap/datepicker'), require('ngx-bootstrap/chronos'), require('file-saver'), require('@c8y/client'), require('@c8y/client'), require('@angular/cdk/coercion'), require('lodash'), require('ngx-bootstrap/modal'), require('@angular/forms'), require('ngx-bootstrap/popover'), require('@c8y/client'), require('libphonenumber-js/max'), require('angularx-qrcode'), require('@angular/cdk/stepper'), require('@angular/cdk/bidi'), require('@ngx-formly/core'), require('@ngx-formly/core/select'), require('@ngx-formly/core/json-schema'), require('@angular/cdk/drag-drop'), require('@angular/platform-browser'), require('@angular/cdk/table'), require('ngx-bootstrap/pagination'), require('@c8y/client')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components', ['exports', '@angular/core', '@angular/router', 'rxjs', 'rxjs/operators', 'lodash-es', 'ngx-bootstrap/collapse', 'ngx-bootstrap/dropdown', '@angular/cdk/scrolling', '@angular/common', '@c8y/ngx-components/api', 'ngx-bootstrap/tooltip', '@angular/common/http', '@ngx-translate/core', '@c8y/client', 'ngx-bootstrap/datepicker', 'ngx-bootstrap/chronos', 'file-saver', '@c8y/client', '@c8y/client', '@angular/cdk/coercion', 'lodash', 'ngx-bootstrap/modal', '@angular/forms', 'ngx-bootstrap/popover', '@c8y/client', 'libphonenumber-js/max', 'angularx-qrcode', '@angular/cdk/stepper', '@angular/cdk/bidi', '@ngx-formly/core', '@ngx-formly/core/select', '@ngx-formly/core/json-schema', '@angular/cdk/drag-drop', '@angular/platform-browser', '@angular/cdk/table', 'ngx-bootstrap/pagination', '@c8y/client'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = {}), global.ng.core, global.ng.router, global.rxjs, global.rxjs.operators, global.lodashEs, global.collapse, global.dropdown, global.ng.cdk.scrolling, global.ng.common, global.c8y["ngx-components"].api, global.tooltip, global.ng.common.http, global.i2, global.client, global.i4$1, global.chronos, global.fileSaver, global.i1$1, global.i2$1, global.ng.cdk.coercion, global.lodash, global.i1$2, global.ng.forms, global.popover, global.i1$3, global.max, global.angularxQrcode, global.ng.cdk.stepper, global.ng.cdk.bidi, global.core, global.select, global.jsonSchema, global.ng.cdk.dragDrop, global.ng.platformBrowser, global.ng.cdk.table, global.pagination, global.i1$4));
})(this, (function (exports, i0, i1, rxjs, operators, lodashEs, collapse, dropdown, scrolling, common, i4, tooltip, http, i2, client, i4$1, chronos, fileSaver, i1$1, i2$1, coercion, lodash, i1$2, forms, popover, i1$3, max, angularxQrcode, stepper, bidi, core, select, jsonSchema, dragDrop, platformBrowser, table, pagination, i1$4) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4$1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    function fromTrigger(router, refresh, factories) {
        return rxjs.merge.apply(void 0, __spreadArray([router.events.pipe(operators.filter(function (evt) { return evt instanceof i1.NavigationEnd; }))], __read(lodashEs.castArray(refresh)))).pipe(operators.startWith(1), operators.switchMap(function () { return fromFactories(factories, router); }));
    }
    function fromTriggerOnce(router, refresh, factories) {
        return rxjs.merge.apply(void 0, __spreadArray([], __read(lodashEs.castArray(refresh)))).pipe(operators.startWith(1), operators.switchMap(function () { return fromFactories(factories, router); }));
    }
    function fromFactories(factories, router, withFirstEmpty) {
        if (withFirstEmpty === void 0) { withFirstEmpty = true; }
        return !Array.isArray(factories) || factories.length < 1
            ? rxjs.of([])
            : rxjs.defer(function () {
                var factoryObservables = resolveInjectedFactories(factories).map(function (f) {
                    return toObservableOfArrays(Array.isArray(f) ? f : f && lodashEs.isFunction(f.get) ? f.get(getActivatedRoute(router)) : [f], withFirstEmpty);
                });
                return rxjs.combineLatest.apply(void 0, __spreadArray([], __read(factoryObservables)));
            }).pipe(operators.map(function (results) { return sortByPriority([].concat.apply([], __spreadArray([], __read(results)))); }));
    }
    function resolveInjectedFactories(factories) {
        return lodashEs.flatten(factories.map(function (f) { return (lodashEs.isFunction(f) ? f() : [f]); }));
    }
    function stateToFactory(componentsState) {
        var components$ = componentsState.pipe(operators.map(function (componentSet) { return __spreadArray([], __read(componentSet)); }));
        return { get: function () { return components$; } };
    }
    function sortByPriority(items) {
        return lodashEs.sortBy(items, 'priority');
    }
    function toObservableOfArrays(factoryResult, withFirstEmpty) {
        var observable;
        if (!factoryResult) {
            return rxjs.of([]);
        }
        else {
            observable = toObservable(factoryResult);
            if (withFirstEmpty) {
                var withEmptyFirst = observable.pipe(operators.startWith([]));
                observable = rxjs.race(observable, withEmptyFirst);
            }
        }
        return observable.pipe(operators.map(function (result) { return (Array.isArray(result) ? result : [result]).filter(function (item) { return !!item; }); }));
    }
    function isPromise(obj) {
        return !!obj && typeof obj.then === 'function';
    }
    /**
     * Converts any value provided to an Observable that emits this value once and then completes.
     * A convienience method to represent all the data as Observables rather than
     * a mixture of Observables and other types.
     *
     * @param value The value the resulting Observable will emit.
     */
    function toObservable(value) {
        if (rxjs.isObservable(value)) {
            return value;
        }
        if (isPromise(value)) {
            return rxjs.from(value);
        }
        return rxjs.of(value);
    }
    /**
     * Helper function to get the activated route in
     * a service (as ActivatedRoute injection only
     * works in components). Works as long as we only use
     * a tree and no child is active at the same time.
     *
     * @param router The current router
     */
    function getActivatedRoute(router) {
        if (router && router.routerState && router.routerState.root) {
            var route = router.routerState.root;
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }
    }

    /**
     * A abstract state which should be included in each state.
     * @abstract
     */
    var StateService = /** @class */ (function () {
        function StateService() {
        }
        /**
         * Maps to a property and just returns that property.
         * @param mappedProperty The property to map to.
         */
        StateService.prototype.map = function (mappedProperty) {
            return this.state$.pipe(operators.map(mappedProperty), operators.distinctUntilChanged());
        };
        /**
         * Emits a new state.
         */
        StateService.prototype.emitNewState = function () {
            this.state$.next(this.state);
        };
        return StateService;
    }());

    /**
     * A hook to add ActionBarItems using the multi provider extension concept.
     *
     * @example
     * ```typescript
     * providers: [
     *   {
     *     provide: HOOK_ACTION_BAR,
     *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
     *     multi: true
     *   }
     * ]
     * ```
     *
     */
    var HOOK_ACTION_BAR = new i0.InjectionToken('ActionBarFactory');
    /**
     * A service which defines action-bar items via the multi provider concept.
     *
     * @example
     * ```typescript
     * // preferred way, multi provider concept:
     * providers: [
     *   {
     *     provide: HOOK_ACTION_BAR,
     *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
     *     multi: true
     *   }
     * ]
     *
     * // use services:
     * this.actionBarService.add({ template: SomeComponent, priority: 10, placement: 'left' });
     * ```
     */
    var ActionBarService = /** @class */ (function (_super) {
        __extends(ActionBarService, _super);
        /**
         * @ignore
         */
        function ActionBarService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.factories = [];
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_ACTION_BAR, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (items) { return sortByPriority(items); }), operators.shareReplay(1));
            return _this;
        }
        Object.defineProperty(ActionBarService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Refreshes the current store.
         */
        ActionBarService.prototype.refresh = function () {
            this.refreshTrigger.next();
        };
        /**
         * Adds a new item to the action bar in the header and emits a state change.
         * @param item The item to add.
         */
        ActionBarService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an action bar item from the header and emits a state change.
         * @param item The item to remove.
         */
        ActionBarService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        return ActionBarService;
    }(StateService));
    ActionBarService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ActionBarService_Factory() { return new ActionBarService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: ActionBarService, providedIn: "root" });
    ActionBarService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ActionBarService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    /**
     * A <c8y-action-bar-item> can be added with content projection.
     * It allows to show items in three positions (left, right
     * or more).
     *
     * @example
     * ```html
     * <c8y-action-bar-item [placement]="'right'">
     *   <button class="btn btn-link" (click)="addRandom()"><i c8yIcon="plus-circle"></i> Add random</button>
     * </c8y-action-bar-item>
     * ```
     */
    var ActionBarItemComponent = /** @class */ (function () {
        /**
         * @ignore
         */
        function ActionBarItemComponent(actionBarService) {
            this.actionBarService = actionBarService;
            /**
             * Where the item should be shown. Use "more" to place
             * it in a dropdown on the right.
             */
            this.placement = 'left';
            /**
             * Priority for sorting the list. Higher priority means
             * an earlier position in the list.
             */
            this.priority = 0;
            /**
             * Adds additional classes to the item.
             */
            this.itemClass = '';
        }
        /**
         * @ignore
         */
        ActionBarItemComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () { return _this.actionBarService.add(_this); });
        };
        /**
         * @ignore
         */
        ActionBarItemComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.actionBarService.remove(this);
        };
        return ActionBarItemComponent;
    }());
    ActionBarItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-action-bar-item',
                    template: "<ng-template #template>\n  <li class=\"{{itemClass}}\">\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
                },] }
    ];
    ActionBarItemComponent.ctorParameters = function () { return [
        { type: ActionBarService }
    ]; };
    ActionBarItemComponent.propDecorators = {
        placement: [{ type: i0.Input }],
        priority: [{ type: i0.Input }],
        itemClass: [{ type: i0.Input }],
        template: [{ type: i0.ViewChild, args: ['template', { static: false },] }]
    };

    /*
     * -----------------------------WARNING---------------------------------
     * This file has an *exact* copy in packages/cli/src/webpack/.
     * Any changes to this file must be reflected there, too.
     */
    var ApplicationOptions = /** @class */ (function () {
        function ApplicationOptions() {
        }
        return ApplicationOptions;
    }());

    var HOOK_OPTIONS = new i0.InjectionToken('App options');
    /**
     * A service that allows to set or get application options
     * which configure the default behavior of the UI.
     */
    var OptionsService = /** @class */ (function (_super) {
        __extends(OptionsService, _super);
        function OptionsService(options, systemOptionsService, tenantOptionService) {
            var _this = _super.call(this) || this;
            _this.systemOptionsService = systemOptionsService;
            _this.tenantOptionService = tenantOptionService;
            _this.setupOptions(options);
            return _this;
        }
        /**
         * Returns an application option used to configure the UI.
         * @param optionKey The application options key.
         * @param defaultValue A value to return if non is set.
         * @param attemptParse Indicates whether the value should be parsed with JSON.parse.
         */
        OptionsService.prototype.get = function (optionKey, defaultValue, attemptParse) {
            var value = this[optionKey];
            if (typeof value === 'undefined') {
                value = this[lodashEs.camelCase(optionKey)];
            }
            if (attemptParse) {
                return this.parseOptionRawValue(value, defaultValue);
            }
            return typeof value !== 'undefined' ? value : defaultValue;
        };
        /**
         * Sets an application option.
         * @param key The key to set.
         * @param value The value to set.
         */
        OptionsService.prototype.set = function (key, value) {
            this[lodashEs.camelCase(key)] = value;
        };
        /**
         * Gets support url from tenant options.
         * If response returns '404 not found' it gets the support url from application options.
         * If the support link within application options is not provided the UI will use the system options.
         * Is the support link explicitly set to false it will be hidden.
         *
         * @returns Returns support url or false.
         */
        OptionsService.prototype.getSupportUrl = function () {
            return __awaiter(this, void 0, void 0, function () {
                var url, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getTenantOption('configuration', 'system.support.url')];
                        case 1:
                            url = _c.sent();
                            if (lodashEs.isUndefined(url)) {
                                url = this.supportUrl;
                            }
                            _a = this;
                            if (!lodashEs.isUndefined(url)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getSystemOption('support', 'url')];
                        case 2:
                            _b = (_c.sent()) || false;
                            return [3 /*break*/, 4];
                        case 3:
                            _b = url;
                            _c.label = 4;
                        case 4:
                            _a.supportUrl = _b;
                            return [2 /*return*/, this.supportUrl];
                    }
                });
            });
        };
        /**
         * Returns if the tenant allows to show the activate-support user menu entry.
         * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.
         */
        OptionsService.prototype.getActivateSupportUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                var option;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getSystemOption('support-user', 'enabled', true)];
                        case 1:
                            option = _a.sent();
                            return [2 /*return*/, !option];
                    }
                });
            });
        };
        /**
         * Gets a value from the system service and parses it.
         *
         * @param category The category for this option.
         * @param key The key for that option.
         * @param defaultValue The default if the option was not found.
         */
        OptionsService.prototype.getSystemOption = function (category, key, defaultValue) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getOptionFromService(category, key, this.systemOptionsService, defaultValue)];
                });
            });
        };
        /**
         * Gets a value from the tenant service and parses it.
         *
         * @param category The category for this option.
         * @param key The key for that option.
         * @param defaultValue The default if the option was not found.
         */
        OptionsService.prototype.getTenantOption = function (category, key, defaultValue) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getOptionFromService(category, key, this.tenantOptionService, defaultValue)];
                });
            });
        };
        OptionsService.prototype.setupOptions = function (options) {
            var _this = this;
            if (options) {
                if (!Array.isArray(options)) {
                    options = [options];
                }
                options.forEach(function (optionMap) {
                    if (optionMap) {
                        Object.keys(optionMap).forEach(function (key) {
                            _this[lodashEs.camelCase(key)] = optionMap[key];
                        });
                    }
                });
            }
        };
        OptionsService.prototype.getOptionFromService = function (category, key, service, defaultValue) {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, service.detail({ category: category, key: key })];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, this.parseOptionRawValue(data.value, defaultValue)];
                        case 2:
                            ex_1 = _a.sent();
                            return [2 /*return*/, defaultValue];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        OptionsService.prototype.parseOptionRawValue = function (rawValue, defaultValue) {
            var value;
            try {
                value = JSON.parse(rawValue);
            }
            catch (e) {
                value = lodashEs.isUndefined(rawValue) ? defaultValue : rawValue;
            }
            return value;
        };
        return OptionsService;
    }(ApplicationOptions));
    OptionsService.decorators = [
        { type: i0.Injectable }
    ];
    OptionsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [HOOK_OPTIONS,] }] },
        { type: i4.SystemOptionsService },
        { type: i4.TenantOptionsService }
    ]; };

    /**
     * Decorator to throttle functions call.
     * @param wait throttle time.
     * @param options set triggers, eg on trailing edge or falling edge,
     * see lodash documentation for details
     */
    function throttle(wait, options) {
        return function (target, fnName, descriptor) {
            var fn = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var throttledFnName = "_" + fnName + "Throttled";
                if (!this[throttledFnName]) {
                    this[throttledFnName] = lodashEs.throttle(fn, wait, options);
                }
                return this[throttledFnName].apply(this, args);
            };
        };
    }

    var AppStateService = /** @class */ (function (_super) {
        __extends(AppStateService, _super);
        function AppStateService(applicationService, apiService, options, fetchClient, tenantLoginOptionsService) {
            var _this = _super.call(this) || this;
            _this.applicationService = applicationService;
            _this.apiService = apiService;
            _this.options = options;
            _this.fetchClient = fetchClient;
            _this.tenantLoginOptionsService = tenantLoginOptionsService;
            _this.state$ = new rxjs.BehaviorSubject({
                app: {
                    name: _this.options.name,
                    contextPath: _this.getCurrentContextPath() || _this.options.contextPath
                },
                supportUrl: _this.options.supportUrl,
                lang: _this.options.get('defaultLanguage', 'en'),
                langs: _this.getLangs(),
                langsDetail: _this.options.languages,
                loginOptions: _this.options.loginOptions,
                activateSupportUserAvailable: undefined,
                versions: {
                    backend: undefined,
                    ui: _this.options.versions || { ngx: undefined }
                },
                hidePowered: _this.options.hidePowered,
                isLoading: false,
                showRightDrawer: _this.options.rightDrawer,
                loginExtraLink: _this.options.get('login_extra_link'),
                newsletter: _this.options.newsletter
            });
            _this.currentSupportUserName = new rxjs.BehaviorSubject(null);
            _this.currentUser = new rxjs.BehaviorSubject(null);
            _this.currentTenant = new rxjs.BehaviorSubject(null);
            _this.currentApplication = new rxjs.BehaviorSubject(null);
            _this.currentApplicationConfig = new rxjs.BehaviorSubject(null);
            _this.apiService.calls
                .pipe(operators.filter(function (_a) {
                var url = _a.url;
                return !/notification\/realtime/.test(url);
            }), operators.map(function (_a) {
                var phase = _a.phase;
                return (phase === 'start' ? 1 : -1);
            }), operators.scan(function (count, item) { return count + item; }, 0), operators.map(function (count) { return count > 0; }), operators.distinctUntilChanged())
                .subscribe(function (isLoading) { return (_this.state.isLoading = isLoading); });
            _this.assignApplicationKeyToDefaultHeaders();
            return _this;
        }
        AppStateService.prototype.assignApplicationKeyToDefaultHeaders = function () {
            if (!i0.isDevMode()) {
                this.fetchClient.defaultHeaders = Object.assign(Object.assign({}, (this.fetchClient.defaultHeaders || {})), { 'X-Cumulocity-Application-Key': this.options.key });
            }
        };
        Object.defineProperty(AppStateService.prototype, "state", {
            /**
             * Returns the current state.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        AppStateService.prototype.getLangs = function () {
            var languages = this.options.languages;
            return languages ? lodashEs.keys(languages).filter(function (k) { return languages[k]; }) : [];
        };
        Object.defineProperty(AppStateService.prototype, "uiVersion", {
            /**
             * Returns the correct UI version. In hybrid mode for angular and ngx.
             */
            get: function () {
                var version = this.state.versions.ui;
                return version.ngx || version.ng1;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Loads the app manifest. If no access -> throw an error to verify app access.
         */
        AppStateService.prototype.loadManifest = function () {
            return __awaiter(this, void 0, void 0, function () {
                var application, data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4 /*yield*/, this.applicationService.detail(this.state.app.contextPath + "/manifest")];
                        case 1:
                            application = (_a.sent()).data.application;
                            this.state.app.manifest = application;
                            this.state.app.id = application.id;
                            return [4 /*yield*/, this.applicationService.detail(application.id)];
                        case 2:
                            data = (_a.sent()).data;
                            this.currentApplication.next(data);
                            this.currentApplicationConfig.next(data.config);
                            return [4 /*yield*/, this.loadDefaultOptions()];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_1 = _a.sent();
                            throw ex_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Dynamic options are stored on the API in a specific config: {} object. They can
         * be used to configure the app dynamically.
         *
         * Note: To avoids conflicts with the default Config, it is recommended
         * to use a certain namespace.
         */
        AppStateService.prototype.updateApplicationConfig = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                var currentApp, currentConfig, newConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.detail(this.state.app.id)];
                        case 1:
                            currentApp = (_a.sent()).data;
                            currentConfig = (currentApp === null || currentApp === void 0 ? void 0 : currentApp.config) || {};
                            newConfig = Object.assign(Object.assign({}, currentConfig), config);
                            this.currentApplicationConfig.next(newConfig);
                            return [2 /*return*/, this.applicationService.update({
                                    id: this.state.app.id,
                                    config: newConfig
                                })];
                    }
                });
            });
        };
        /**
         * When this function called, it refreshes the values of loginOptions stored within ui state object.
         * Function is throttled to execute the refresh once in a time specified by params of @throttled decorator,
         * it should be called on leading edge of the timeout.
         */
        AppStateService.prototype.refreshLoginOptions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var loginOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.tenantLoginOptionsService.listForCurrentTenant()];
                        case 1:
                            loginOptions = (_a.sent()).data;
                            this.state$.next(Object.assign(Object.assign({}, this.state), { loginOptions: loginOptions }));
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Checks current users application list and matches it against given application name.
         * Returns true if application is in the list.
         * @param name application name
         */
        AppStateService.prototype.isApplicationAvailable = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.listByUser(undefined, { pageSize: 100 })];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data.some(function (app) { return app.name === name; })];
                    }
                });
            });
        };
        /**
         * Sets current user (including support user).
         * @param userInfo Info about current user and support user to be set.
         */
        AppStateService.prototype.setUser = function (userInfo) {
            this.currentSupportUserName.next(userInfo.supportUserName || null);
            this.currentUser.next(userInfo.user);
        };
        /**
         * Verifies if the current application is owned by the current tenant.
         * @param app The application to verify.
         * @returns true if it belongs to the current tenant.
         */
        AppStateService.prototype.isOwnerOfApplication = function (app) {
            if (!app) {
                app = this.currentApplication.value;
            }
            var currentTenant = this.currentTenant.value;
            var appOwner = lodashEs.get(app, 'owner.tenant.id');
            return currentTenant.name === appOwner;
        };
        AppStateService.prototype.getCurrentContextPath = function () {
            var match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
            return match && match[2];
        };
        AppStateService.prototype.loadDefaultOptions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _a = this.state;
                            return [4 /*yield*/, this.options.getSupportUrl()];
                        case 1:
                            _a.supportUrl = _d.sent();
                            _b = this.state;
                            return [4 /*yield*/, this.options.getActivateSupportUser()];
                        case 2:
                            _b.activateSupportUserAvailable = _d.sent();
                            _c = this.state.versions;
                            return [4 /*yield*/, this.options.getSystemOption('system', 'version')];
                        case 3:
                            _c.backend = _d.sent();
                            try {
                                this.showIncompatibleVersionsError();
                            }
                            catch (ex) {
                                // ignore this
                            }
                            this.emitNewState();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AppStateService.prototype.showIncompatibleVersionsError = function () {
            var uiVersion = this.state.versions.ui.ngx;
            var backendVersion = this.state.versions.backend;
            var uiVersionArray = uiVersion
                .replace(/[^\d.]/g, '')
                .split('.')
                .map(Number);
            var beVersionArray = backendVersion
                .replace(/[^\d.]/g, '')
                .split('.')
                .map(Number);
            var multiplier = Math.pow(10, Math.ceil(Math.log10(Math.max.apply(Math, __spreadArray(__spreadArray([], __read(uiVersionArray)), __read(beVersionArray))) + 1)));
            var sumReducer = function (acc, cur) { return acc + cur; };
            var calculateVersionMapper = function (curr, idx) { return curr * (multiplier / Math.pow(10, idx)); };
            var uiVersionNumber = uiVersionArray.map(calculateVersionMapper).reduce(sumReducer);
            var beVersionNumber = beVersionArray.map(calculateVersionMapper).reduce(sumReducer);
            var showError = uiVersionNumber > beVersionNumber;
            if (showError) {
                var errorContent = "You are running version " + uiVersion + " of the UI and version " + backendVersion + " of backend!";
                console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
            }
        };
        return AppStateService;
    }(StateService));
    AppStateService.decorators = [
        { type: i0.Injectable }
    ];
    AppStateService.ctorParameters = function () { return [
        { type: client.ApplicationService },
        { type: i4.ApiService },
        { type: OptionsService },
        { type: client.FetchClient },
        { type: client.TenantLoginOptionsService }
    ]; };
    __decorate([
        throttle(600, { trailing: false })
    ], AppStateService.prototype, "refreshLoginOptions", null);

    var LANGUAGES = new i0.InjectionToken('Languages');

    var LOCALE_PATH = new i0.InjectionToken('Locale path');

    var HOOK_PATTERN_MESSAGES = new i0.InjectionToken('Pattern Messages');

    /**
     * A service to translate messages by using regexp patterns.
     */
    var PatternMessagesService = /** @class */ (function () {
        function PatternMessagesService(patterns) {
            var _this = this;
            this.patterns = {};
            this.pipes = {
                absoluteDate: function (date) { return common.formatDate(date, 'medium', _this.translateService.currentLang); },
                translate: function (key) { return _this.translateService.instant(key); }
            };
            lodashEs.each(patterns, function (pattern) {
                Object.assign(_this.patterns, pattern);
            });
        }
        PatternMessagesService.prototype.translate = function (message) {
            var translation = this.translateWithPatterns(message);
            return (translation !== message) ? translation : '';
        };
        PatternMessagesService.prototype.translateWithPatterns = function (message, patterns) {
            var _this = this;
            if (patterns === void 0) { patterns = this.patterns; }
            var translatedMessage = message;
            lodashEs.each(patterns, function (patternCfg, pattern) {
                var globalRegExp = new RegExp(pattern, 'g');
                var globalMatch;
                if (!globalRegExp.test(translatedMessage)) {
                    return;
                }
                globalRegExp.test(''); // reset the regexp
                globalMatch = globalRegExp.exec(translatedMessage);
                var _loop_1 = function () {
                    var _a = __read(globalMatch, 1), localMatch = _a[0];
                    var placeholderValues = lodashEs.mapValues(patternCfg.placeholders, function (placeholder) {
                        var expr = placeholder.capture || placeholder;
                        var replacement = localMatch.replace(new RegExp(pattern, 'g'), expr);
                        if (placeholder.translate) {
                            replacement = _this.translateWithPatterns(replacement, placeholder.translate);
                        }
                        return replacement;
                    });
                    translatedMessage = translatedMessage.replace(localMatch, _this.translateWithParams(patternCfg, placeholderValues));
                    globalMatch = globalRegExp.exec(translatedMessage);
                };
                while (globalMatch !== null) {
                    _loop_1();
                }
            });
            return translatedMessage;
        };
        PatternMessagesService.prototype.translateWithParams = function (patternCfg, params) {
            if (params === void 0) { params = {}; }
            var _a = this.translateService, defaultLang = _a.defaultLang, currentLang = _a.currentLang, compiler = _a.compiler;
            var translations = this.translateService.store.translations[currentLang];
            var defaultTranslations = this.translateService.store.translations[defaultLang];
            var originalKey = patternCfg.gettext;
            var originalValue = originalKey;
            if (translations) {
                if (translations[originalKey]) {
                    originalValue = translations[originalKey];
                }
                else if (defaultTranslations) {
                    if (defaultTranslations[originalKey]) {
                        originalValue = defaultTranslations[originalKey];
                    }
                }
            }
            var key = originalKey;
            var value = originalValue;
            var interpolateParams = Object.assign(Object.assign({}, params), { noPatternMessages: true });
            var match;
            var pipeRegex = RegExp('{{\\s*([^\\s]+)\\s*\\|\\s*([^\\s]+)\\s*}}', 'g');
            // tslint:disable-next-line:no-conditional-assignment
            while ((match = pipeRegex.exec(originalKey)) !== null) {
                var _b = __read(match, 3), placeholder = _b[0], paramName = _b[1], pipeName = _b[2];
                if (this.pipes[pipeName]) {
                    key = key.replace(placeholder, "{{" + paramName + "}}");
                    value = value.replace(placeholder, "{{" + paramName + "}}");
                    interpolateParams[paramName] = this.pipes[pipeName](params[paramName]);
                }
            }
            if (translations) {
                translations[key] = compiler.compile(value, currentLang);
            }
            return this.translateService.instant(key, interpolateParams);
        };
        return PatternMessagesService;
    }());
    PatternMessagesService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PatternMessagesService_Factory() { return new PatternMessagesService(i0__namespace.ɵɵinject(HOOK_PATTERN_MESSAGES)); }, token: PatternMessagesService, providedIn: "root" });
    PatternMessagesService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PatternMessagesService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [HOOK_PATTERN_MESSAGES,] }] }
    ]; };

    var MissingTranslationCustomHandler = /** @class */ (function () {
        function MissingTranslationCustomHandler(parser, patternMessagesService) {
            this.parser = parser;
            this.patternMessagesService = patternMessagesService;
            this.cache = {};
        }
        MissingTranslationCustomHandler.prototype.handle = function (params) {
            var messageKey = params.key, interpolateParams = params.interpolateParams, translateService = params.translateService;
            this.translateService = translateService;
            var translation = this.getFromCache(messageKey, interpolateParams);
            if (!translation) {
                var patternMessageTranslation = this.getPatternMessageTranslation(messageKey, interpolateParams);
                if (patternMessageTranslation) {
                    translation = patternMessageTranslation;
                }
                else {
                    translation = this.parser.interpolate(messageKey, interpolateParams);
                }
                this.addToCache(messageKey, interpolateParams, translation);
            }
            return translation;
        };
        MissingTranslationCustomHandler.prototype.getFromCache = function (messageKey, interpolateParams) {
            var currentLang = this.translateService.currentLang;
            var currentCache = this.cache[currentLang] || {};
            var cacheKey = this.getCacheKey(messageKey, interpolateParams);
            return currentCache[cacheKey];
        };
        MissingTranslationCustomHandler.prototype.addToCache = function (messageKey, interpolateParams, translation) {
            var currentLang = this.translateService.currentLang;
            var currentCache = this.cache[currentLang] = this.cache[currentLang] || {};
            var cacheKey = this.getCacheKey(messageKey, interpolateParams);
            currentCache[cacheKey] = translation;
        };
        MissingTranslationCustomHandler.prototype.getCacheKey = function (messageKey, interpolateParams) {
            return interpolateParams ? messageKey + " " + JSON.stringify(interpolateParams) : messageKey;
        };
        MissingTranslationCustomHandler.prototype.getPatternMessageTranslation = function (messageKey, interpolateParams) {
            var shouldTryPatternMessages = !interpolateParams || !(interpolateParams.noPatternMessages);
            if (shouldTryPatternMessages) {
                if (!this.patternMessagesService.translateService) {
                    this.patternMessagesService.translateService = this.translateService;
                }
                return this.patternMessagesService.translate(messageKey);
            }
            return undefined;
        };
        return MissingTranslationCustomHandler;
    }());
    MissingTranslationCustomHandler.decorators = [
        { type: i0.Injectable }
    ];
    MissingTranslationCustomHandler.ctorParameters = function () { return [
        { type: i2.TranslateParser },
        { type: PatternMessagesService }
    ]; };

    // Just for translation annotation
    // Note: Own file because of conflicts if put in barrel directly.
    var _ = function (str) { return str; };
    function gettext(str) {
        return str;
    }

    /* tslint:disable:max-line-length */
    var bulkOperationAuditLogTextPlaceholders = {
        updatesList: {
            capture: '$1',
            translate: {
                "status='(.+?)'": {
                    gettext: gettext('status: "{{ status | translate }}"'),
                    placeholders: {
                        status: '$1'
                    }
                },
                "generalStatus='(.+?)'": {
                    gettext: gettext('general status: "{{ generalStatus | translate }}"'),
                    placeholders: {
                        generalStatus: '$1'
                    }
                },
                "progress='(.+?)'": {
                    gettext: gettext('progress: "{{ progress }}"'),
                    placeholders: {
                        progress: '$1'
                    }
                },
                'note=(.+?)': {
                    gettext: gettext('note: "{{ note }}"'),
                    placeholders: {
                        note: '$1'
                    }
                }
            }
        }
    };
    var MESSAGES = {
        '^Access is denied$': {
            gettext: gettext('Access denied.')
        },
        '^Alarm created$': {
            gettext: gettext('Alarm created')
        },
        '^Alarm updated$': {
            gettext: gettext('Alarm updated')
        },
        '^API is not available with the new domain$': {
            gettext: gettext('Could not activate custom domain. DNS setup is incorrect.')
        },
        '^Application with given name already exist$': {
            gettext: gettext('Application with given name already exists.')
        },
        '^Application with id (.+?) is already assigned to the tenant (.+?)$': {
            gettext: gettext('This application is already assigned to tenant "{{tenant}}".'),
            placeholders: {
                tenant: '$2'
            }
        },
        '^Apply software changes: (.+?)\\.?$': {
            gettext: gettext('Apply software changes: {{ softwareChanges }}'),
            placeholders: {
                softwareChanges: {
                    capture: '$1',
                    translate: {
                        'install "(.+?)" \\(version: (.+?)\\)': {
                            gettext: gettext('install "{{ softwareName }}" (version: {{ softwareVersion }})'),
                            placeholders: {
                                softwareName: '$1',
                                softwareVersion: '$2'
                            }
                        },
                        'install "([^"]+)"(?! \\(version: .+?\\))': {
                            gettext: gettext('install "{{ softwareName }}"'),
                            placeholders: {
                                softwareName: '$1'
                            }
                        },
                        'delete "(.+?)" \\(version: (.+?)\\)': {
                            gettext: gettext('delete "{{ softwareName }}" (version: {{ softwareVersion }})'),
                            placeholders: {
                                softwareName: '$1',
                                softwareVersion: '$2'
                            }
                        },
                        'delete "([^"]+)"(?! \\(version: .+?\\))': {
                            gettext: gettext('delete "{{ softwareName }}"'),
                            placeholders: {
                                softwareName: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^Assign device profile (.+?) to device (.+?)$': {
            gettext: gettext('Assign device profile {{profileName}} to device {{deviceName}}'),
            placeholders: {
                profileName: '$1',
                deviceName: '$2'
            }
        },
        '^(.+)pplication for tenant (.+) with properties \\( (.+?) \\) already exists$': {
            gettext: gettext('Application for tenant "{{tenant}}" with the following values ({{valuesList}}) already exists.'),
            placeholders: {
                tenant: '$2',
                valuesList: '$3'
            }
        },
        '^Authentication failed! : User account is locked$': {
            gettext: gettext('Authentication failed due to: user account is locked.')
        },
        '^Availability monitoring record$': {
            gettext: gettext('Availability monitoring record')
        },
        '^Can not activate a certificate which is either expired or not yet valid$': {
            gettext: gettext('Cannot activate a certificate which is either expired or not yet valid.')
        },
        '^Cannot add certificate - certificate with (.+?) fingerprint already exists. : Certificate with (.+?) fingerprint already exists.': {
            gettext: gettext('Could not add certificate. Certificate with {{fingerprint}} fingerprint already exists.'),
            placeholders: {
                fingerprint: '$1'
            }
        },
        '^Cannot change password. : Provided token does not exist.$': {
            gettext: gettext('Cannot change password: provided token is invalid.')
        },
        '^Cannot deploy module (.*)$': {
            gettext: gettext('Cannot deploy module due to error: "{{ errorMessage | translate }}".'),
            placeholders: {
                errorMessage: '$1'
            }
        },
        "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) \\[([\\S\\s]+?)\\]$": {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}.'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                incorrectExpression: '$4',
                line: '$5',
                column: '$6'
            }
        },
        "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}} near reserved keyword "{{keyword}}".'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                incorrectExpression: '$4',
                line: '$5',
                column: '$6',
                keyword: '$7'
            }
        },
        "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+), please check the where clause \\[([\\S\\s]+?)\\]$": {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}, check "where" clause.'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                incorrectExpression: '$4',
                line: '$5',
                column: '$6'
            }
        },
        "^Cannot deploy module (.+?)! : Deployment failed in module '(.+?)' in expression '(.+?)' : Exception compiling script '(.+?)' of dialect '(.+?)': missing (.+?) before statement \\((.+?)\\) \\[([\\S\\s]+?)\\]$": {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": exception compiling script "{{scriptName}}" of dialect "{{scriptDialect}}": missing "{{missingSyntax}}" before statement "{{affectedStatement}}".'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                scriptName: '$4',
                scriptDialect: '$5',
                missingSyntax: '$6',
                affectedStatement: '$7'
            }
        },
        "^Cannot execute bulk operation on empty group. Group with id='(\\d+?)' doesn't have child assets.$": {
            gettext: gettext('Could not execute bulk operation on an empty group. Group with ID "{{groupId}}" has no child assets.'),
            placeholders: {
                groupId: '$1'
            }
        },
        "^Cannot execute bulk operation on empty group. DynamicGroup with id='(\\d+?)' doesn't have child assets$": {
            gettext: gettext('Could not execute bulk operation on an empty group. Smart group with ID "{{groupId}}" has no child assets.'),
            placeholders: {
                groupId: '$1'
            }
        },
        '^Cannot parse X509 certificate. : Could not parse certificate: (.+?)$': {
            gettext: gettext('Could not parse X.509 certificate: {{ failureReason | translate }}.'),
            placeholders: {
                failureReason: '$1'
            }
        },
        '^Cannot reschedule bulk operation. All its operations are successful$': {
            gettext: gettext('Cannot reschedule bulk operation. All its operations are already successful.')
        },
        '^Cannot reset user password : Cannot find user with such email.$': {
            gettext: gettext('Cannot reset password for user with such email: email not found.')
        },
        '^Cannot update/delete application binary via this endpoint$': {
            gettext: gettext('Cannot update/delete application binary via this endpoint')
        },
        "^Can't delete user because it is used by another managed object$": {
            gettext: gettext('Cannot delete device with associated device owner because this owner is still assigned to other device(s). Try to remove only the device.')
        },
        '^Cep module created$': {
            gettext: gettext('CEP module created')
        },
        '^Cep module updated$': {
            gettext: gettext('CEP module updated')
        },
        '^Cep module deleted$': {
            gettext: gettext('CEP module deleted')
        },
        '^Cep module "(.+?)" created$': {
            gettext: gettext('CEP module "{{name}}" created'),
            placeholders: {
                name: '$1'
            }
        },
        '^Cep module "(.+?)" updated$': {
            gettext: gettext('CEP module "{{name}}" updated'),
            placeholders: {
                name: '$1'
            }
        },
        '^Cep module "(.+?)" deleted$': {
            gettext: gettext('CEP module "{{name}}" deleted'),
            placeholders: {
                name: '$1'
            }
        },
        '^Command state is invalid: (.+)$': {
            gettext: gettext('Command state is invalid: {{violations}}'),
            placeholders: {
                violations: {
                    capture: '$1',
                    translate: {
                        '(\\w+?) - may not be null': {
                            gettext: gettext('"{{field}}" must not be null'),
                            placeholders: {
                                field: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^Could not connect to endpoint (.+)\\. Could not verify `(.+)` host key with fingerprint `(.+)` for `(.+)` on port (.+)\\. If you expected that key, please remove the previous one from configuration to allow for connection\\.$': {
            gettext: gettext('Could not connect to endpoint "{{endpointName}}". Could not verify {{keyType}} host key with fingerprint {{fingerprint}} for host {{host}} on port {{port}}. If you expected this key, please remove the previous one from configuration to allow for connection.'),
            placeholders: {
                endpointName: '$1',
                keyType: '$2',
                fingerprint: '$3',
                host: '$4',
                port: '$5'
            }
        },
        '^Could not login to ssh server on endpoint "(.+)"\\. Provided credential for user "(.+)" is incorrect\\.$': {
            gettext: gettext('Could not access SSH server on endpoint "{{endpointName}}". Provided credentials for user "{{userName}}" are incorrect.'),
            placeholders: {
                endpointName: '$1',
                userName: '$2'
            }
        },
        '^Could not save object remoteAccessUpdate: (.+)$': {
            gettext: '{{errorMessages}}',
            placeholders: {
                errorMessages: {
                    capture: '$1',
                    translate: {
                        'Could not recognize host-key format': {
                            gettext: gettext('Could not recognize "Host key" format')
                        },
                        'Could not recognize key-pair format': {
                            gettext: gettext('Could not recognize the format of "Public key" or "Private key"')
                        }
                    }
                }
            }
        },
        '^Could not update user. : Error persisting user (.+?)!$': {
            gettext: gettext('Could not update user "{{username}}".'),
            placeholders: {
                username: '$1'
            }
        },
        '^Create bulk operation$': {
            gettext: gettext('Create bulk operation')
        },
        '^Create bulk operation: (.+)$': {
            gettext: gettext('Create bulk operation: {{updatesList}}'),
            placeholders: bulkOperationAuditLogTextPlaceholders
        },
        '^Creation ramp must be greater than (\\d+?)$': {
            gettext: gettext('Bulk operation delay must be greater than {{minSeconds}} seconds.'),
            placeholders: {
                minSeconds: '$1'
            }
        },
        '^Created container$': {
            gettext: gettext('Container created.')
        },
        '^Created pod: (.+)$': {
            gettext: gettext('Pod "{{imageName}}" created.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Creating device on LoRa platform failed$': {
            gettext: gettext('Could not create the device in the LoRa platform.')
        },
        '^CSV file contained empty dataset$': {
            gettext: gettext('No entries found in uploaded CSV file.')
        },
        '^Cycle detected for route (.+?)!$': {
            gettext: gettext('Cycle detected for route {{route}}.'),
            placeholders: {
                route: '$1'
            }
        },
        '^Data broker processing is currently overloaded and may stop forwarding your data\\. Please contact support\\.$': {
            gettext: gettext('Data broker processing is currently overloaded and may stop forwarding your data. Please contact support.')
        },
        '^Data broker processing is not able to connect do destination tenant, thus data forwarding is not working\\. Please contact support\\.$': {
            gettext: gettext('Data broker processing is not able to connect to destination tenant, thus data forwarding is not working. Please contact support.')
        },
        // DataHub global roles' names:
        '^DATAHUB_ADMINISTRATOR$': {
            gettext: gettext('DataHub Administrator')
        },
        '^DATAHUB_MANAGER$': {
            gettext: gettext('DataHub Manager')
        },
        '^DATAHUB_READER$': {
            gettext: gettext('DataHub Reader')
        },
        '^Delete bulk operation$': {
            gettext: gettext('Delete bulk operation')
        },
        '^Delete bulk operation: (.+)$': {
            gettext: gettext('Delete bulk operation: {{updatesList}}'),
            placeholders: bulkOperationAuditLogTextPlaceholders
        },
        "^Device id '(.+?)' contains '(.+?)' character which is not permitted.$": {
            gettext: gettext('ID "{{deviceId}}" contains invalid character: "{{invalidCharacter}}".'),
            placeholders: {
                deviceId: '$1',
                invalidCharacter: '$2'
            }
        },
        "^Device name: '(.+?)', alarm text: '(.+?)'$": {
            gettext: gettext('Device name: "{{deviceName}}", alarm text: "{{alarmText | translate}}"'),
            placeholders: {
                deviceName: '$1',
                alarmText: '$2'
            }
        },
        '^Device (.+?) already registered to a tenant.$': {
            gettext: gettext('Device {{ devEUI }} is already registered in your tenant or in another tenant in the platform.'),
            placeholders: {
                devEUI: '$1'
            }
        },
        '^Display name$': {
            gettext: gettext('Login alias')
        },
        '^Domain name in uploaded certificate differs from the one in use$': {
            gettext: gettext('Domain name in uploaded certificate differs from the one in use. Please deactivate the custom domain before uploading new certificate.')
        },
        '^Domain name is already in use by another tenant!$': {
            gettext: gettext('Domain name is already used by another tenant.')
        },
        '^Duplicated connector for instanceUrl (.+?)!$': {
            gettext: gettext('Target URL {{targetUrl}} already used by another connector.'),
            placeholders: {
                targetUrl: '$1'
            }
        },
        '^Duplicated connector for name (.+?)!$': {
            gettext: gettext('Connector name "{{name}}" already used by another connector.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Entry is outside of the target dir: (.+)$': {
            gettext: gettext('File entry outside of the target directory: "{{path}}".'),
            placeholders: {
                path: '$1'
            }
        },
        '^Error during password validation. : Password must have at least (\\d+?) characters and no more than (\\d+?) and must contain only Latin1 characters.$': {
            gettext: gettext('Password is invalid. It must have at least {{minCharactersCount}} and no more than {{maxCharactersCount}} characters.'),
            placeholders: {
                minCharactersCount: '$1',
                maxCharactersCount: '$2'
            }
        },
        '^Error during password validation. : Your password has been used already. Choose another.$': {
            gettext: gettext('This password has already been used earlier. Use a different one.')
        },
        "^Error in statement (.+?):(.+?)! : Incorrect syntax near '(.+?)' near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
            gettext: gettext('Error in statement {{moduleName}}:{{statementNumber}}. Incorrect syntax near expression "{{expression}}" near reserved keyword "{{keyword}}".'),
            placeholders: {
                moduleName: '$1',
                statementNumber: '$2',
                expression: '$3',
                keyword: '$4'
            }
        },
        '^External id not found; external id = ID \\[type=(.+?), value=(.+?)\\]$': {
            gettext: gettext('External ID not found for type "{{type}}" and value "{{value}}".'),
            placeholders: {
                type: '$1',
                value: '$2'
            }
        },
        '^Error occurred when trying to find an Application for id ID (.+) : Could not find application by ID (\\d+)$': {
            gettext: gettext('Could not find application by ID {{applicationId}}.'),
            placeholders: {
                applicationId: '$2'
            }
        },
        '^Http status code: 404\n{error="options/Not Found",message="Unable to find option by given key: sigfox-agent/provider.token",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"}': {
            gettext: gettext('Unable to find option by given key: sigfox-agent/provider.token')
        },
        '^Failed to delete application.  : Cannot remove application assigned to other tenants.$': {
            gettext: gettext('Could not delete application assigned to other tenants.')
        },
        '^Failed to extract certificate from PKCS12$': {
            gettext: gettext('Failed to extract certificate from PKCS12.')
        },
        '^Failed to update domain at the platform$': {
            gettext: gettext('Failed to update domain at the platform.')
        },
        "^Finding device data from database failed : No managedObject for id '(.+?)'!$": {
            gettext: gettext('Could not find managed object with ID "{{deviceId}}".'),
            placeholders: {
                deviceId: '$1'
            }
        },
        '^Following mandatory fields should be included: (.+?)$': {
            gettext: gettext('Following mandatory fields should be included: {{fields}}'),
            placeholders: {
                fields: '$1'
            }
        },
        '^Global Role updated$': {
            gettext: gettext('Global role updated')
        },
        '^Global Role (.+?) updated$': {
            gettext: gettext('Global role "{{name}}" updated'),
            placeholders: {
                name: '$1'
            }
        },
        '^Global Role (.+?) updated: (.+)$': {
            gettext: gettext('Global role "{{name}}" updated: {{updatesList}}'),
            placeholders: {
                name: '$1',
                updatesList: {
                    capture: '$2',
                    translate: {
                        'applications \\[([^\\]]+?)\\] added': {
                            gettext: gettext('applications {{list}} added'),
                            placeholders: {
                                list: '$1'
                            }
                        },
                        'applications \\[([^\\]]+?)\\] removed': {
                            gettext: gettext('applications {{list}} removed'),
                            placeholders: {
                                list: '$1'
                            }
                        },
                        'roles \\[([^\\]]+?)\\] added': {
                            gettext: gettext('roles {{list}} added'),
                            placeholders: {
                                list: '$1'
                            }
                        },
                        'roles \\[([^\\]]+?)\\] removed': {
                            gettext: gettext('roles {{list}} removed'),
                            placeholders: {
                                list: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^Global Roles$': {
            gettext: gettext('Global roles')
        },
        '^Operation updated: (.+)$': {
            gettext: gettext('Operation updated: {{updatesList}}'),
            placeholders: {
                updatesList: {
                    capture: '$1',
                    translate: {
                        "status='(.+?)'": {
                            gettext: gettext('status: "{{ status | translate }}"'),
                            placeholders: {
                                status: '$1'
                            }
                        },
                        "description='(.+?)'": {
                            gettext: gettext('description: "{{ description | translate }}"'),
                            placeholders: {
                                description: '$1'
                            }
                        },
                        "device name='(.+?)'": {
                            gettext: gettext('device name: "{{ deviceName }}"'),
                            placeholders: {
                                deviceName: '$1'
                            }
                        },
                        "failure reason='(.+?)'": {
                            gettext: gettext('failure reason: "{{ failureReason | translate }}"'),
                            placeholders: {
                                failureReason: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^ID \\[type=(.+?), value=(.+?)\\] was already bound to different Global ID.$': {
            gettext: gettext('External ID "{{value}}" of the type "{{type}}" already exists.'),
            placeholders: {
                type: '$1',
                value: '$2'
            }
        },
        '^Invalid credentials! : Bad credentials$': {
            gettext: gettext('Invalid credentials.')
        },
        '^Invalid credentials! : No phone number provided$': {
            gettext: gettext('Log into the management tenant first and enter your phone number.')
        },
        '^Inventory Role removed$': {
            gettext: gettext('Inventory role removed')
        },
        '^Inventory Role (.+?) removed': {
            gettext: gettext('Inventory role "{{name}}" deleted.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Inventory Role updated$': {
            gettext: gettext('Inventory role updated')
        },
        '^Inventory Role (.+?) updated': {
            gettext: gettext('Inventory role "{{name}}" updated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^I/O error: Connection refused; nested exception is Connection refused : Connection refused': {
            gettext: gettext('Connection refused')
        },
        '^I/O error: Read timed out; nested exception is Read timed out : Read timed out': {
            gettext: gettext('Read timed out')
        },
        '^Log file requested$': {
            gettext: gettext('Log file requested.')
        },
        '^Managed object deleted$': {
            gettext: gettext('Managed object deleted')
        },
        '^Managed object "(.+?)" deleted$': {
            gettext: gettext('Managed object "{{name}}" deleted'),
            placeholders: {
                name: '$1'
            }
        },
        '^Maximum file size exceeded$': {
            gettext: gettext('Maximum file size exceeded.')
        },
        "^Message with ID (.+?) doesn't exist in smart rest template (.+?)$": {
            gettext: gettext('Message with ID "{{messageId}}" doesn\'t exist in SmartREST template with ID "{{templateId}}"'),
            placeholders: {
                messageId: '$1',
                templateId: '$2'
            }
        },
        '^name of Application cannot start with \'(.+)\' prefix.$': {
            gettext: gettext('Application name must not start with "{{ prefix }}".'),
            placeholders: {
                prefix: '$1'
            }
        },
        '^NewDeviceRequest for id = (.+?) already exists.$': {
            gettext: gettext('Device registration request with ID {{id}} already exists.'),
            placeholders: {
                id: '$1'
            }
        },
        '^NewDeviceRequest for device id (.+?) is in state BLOCKED, not PENDING_ACCEPTANCE.$': {
            gettext: gettext('Device registration request with ID "{{deviceId}}" is in state "Blocked", not "Pending acceptance". Remove this registration request and start over.'),
            placeholders: {
                deviceId: '$1'
            }
        },
        '^No communication with device since (.+?)$': {
            gettext: gettext('No communication with device since {{timestamp | absoluteDate}}.'),
            placeholders: {
                timestamp: '$1'
            }
        },
        '^No data received from device within required interval.$': {
            gettext: gettext('No data received from device within required interval.')
        },
        '^No LoRa provider settings are found. Please configure the connectivity settings.$': {
            gettext: gettext('No LoRa provider settings are found. Please configure the connectivity settings.')
        },
        '^Not within any context!$': {
            gettext: gettext('A problem occurred with microservice subscription.')
        },
        '^Maximum age cannot be bigger than 10 years.$': {
            gettext: gettext('Maximum age cannot be bigger than 10 years.')
        },
        '^Microservice application name incorrect. Please use only lower-case letters, digits and dashes. Maximum length is (\\d+) characters.$': {
            gettext: gettext('Microservice application name is incorrect: only lower case letters, digits and dashes allowed. Maximum length: {{maxLength}}.'),
            placeholders: {
                maxLength: '$1'
            }
        },
        '^Microservice not available.*$': {
            gettext: gettext('Microservice is not available.')
        },
        '^Operation created$': {
            gettext: gettext('Operation created.')
        },
        '^Operation updated$': {
            gettext: gettext('Operation updated.')
        },
        "^Operation created: status='(.+?)'.": {
            gettext: gettext('Operation created: status: "{{ status | translate }}".'),
            placeholders: {
                status: '$1'
            }
        },
        '^Option created$': {
            gettext: gettext('Option created.')
        },
        '^Option "(.+?)" created$': {
            gettext: gettext('Option "{{option}}" created.'),
            placeholders: {
                option: '$1'
            }
        },
        '^Option deleted$': {
            gettext: gettext('Option deleted.')
        },
        '^Option "(.+?)" deleted$': {
            gettext: gettext('Option "{{option}}" deleted.'),
            placeholders: {
                option: '$1'
            }
        },
        '^Owner field error. : Cannot introduce cyclic dependency.': {
            gettext: gettext('Could not introduce cyclic ownership dependency.')
        },
        '^Password change is temporary blocked.$': {
            gettext: gettext('Password change is temporarily blocked.')
        },
        '^Password cipher does not match': {
            gettext: gettext('Password cipher does not match.')
        },
        '^Platform application cannot be added to, nor removed from any tenant.$': {
            gettext: gettext('Platform application cannot be added to, nor removed from any tenant.')
        },
        '^Private key must be provided in KEY_PAIR credentials$': {
            gettext: gettext('Private key must be provided when "Public/private keys" option is selected.')
        },
        '^Private key cipher does not match': {
            gettext: gettext('Private key cipher does not match')
        },
        '^Protocol "(.+?)" does not support "(.+?)" credentials type$': {
            gettext: gettext('Protocol "{{protocol}}" does not support "{{credentialsType}}" credentials type.'),
            placeholders: {
                protocol: '$1',
                credentialsType: '$2'
            }
        },
        '^Provided security key does not match key stored for device (.+?).$': {
            gettext: gettext('Provided security token does not match the security token stored for this device "{{deviceId}}".'),
            placeholders: {
                deviceId: '$1'
            }
        },
        '^Provided security key does not match key stored for device (.+?).Reached maximum number of failed attempts while trying to register this device. Request will now be blocked and has to be removed manually to restart the process.$': {
            gettext: gettext('The provided security token does not match the token stored for device "{{deviceId}}". You have reached the maximum number of failed attempts while trying to register this device. The request will now be blocked and must be removed manually to restart the process.'),
            placeholders: {
                deviceId: '$1'
            }
        },
        '^pulling image "(.+)"$': {
            gettext: gettext('Pulling image: "{{imageName}}".'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Real-time event processing is currently overloaded and may stop processing your events\\. Please contact support\\.$': {
            gettext: gettext('Real-time event processing is currently overloaded and may stop processing your events. Please contact support.')
        },
        '^Resource ID \\[type=com_cumulocity_model_idtype_GId, value=(.+?)\\] for this request not found.$': {
            gettext: gettext('Could not find the resource with ID "{{id}}".'),
            placeholders: {
                id: '$1'
            }
        },
        '^Retrieve configuration snapshot from device (.+?)': {
            gettext: gettext('Retrieve configuration snapshot from device {{deviceName}}'),
            placeholders: {
                deviceName: '$1'
            }
        },
        '^Retrieve (.+?) configuration snapshot from device (.+?)': {
            gettext: gettext('Retrieve {{configurationType}} configuration snapshot from device {{deviceName}}'),
            placeholders: {
                configurationType: '$1',
                deviceName: '$2'
            }
        },
        '^Scaled up replica set (.+) to (\\d+)$': {
            gettext: gettext('Replica set "{{replicaSetName}}" scaled up to "{{scaleNumber}}".'),
            placeholders: {
                replicaSetName: '$1',
                scaleNumber: '$2'
            }
        },
        '^Send configuration snapshot (.+?) of configuration type (.+?) to device (.+?)': {
            gettext: gettext('Send configuration snapshot {{snapshotName}} of configuration type {{configurationType}} to device {{deviceName}}'),
            placeholders: {
                snapshotName: '$1',
                configurationType: '$2',
                deviceName: '$3'
            }
        },
        '^Send configuration snapshot (.+?) to device (.+?)': {
            gettext: gettext('Send configuration snapshot {{snapshotName}} to device {{deviceName}}'),
            placeholders: {
                snapshotName: '$1',
                deviceName: '$2'
            }
        },
        '^Simulator state is invalid: (.+)$': {
            gettext: gettext('Simulator state is invalid: {{violations}}'),
            placeholders: {
                violations: {
                    capture: '$1',
                    translate: {
                        '(\\w+?) - may not be null': {
                            gettext: gettext('"{{field}}" should not be null'),
                            placeholders: {
                                field: '$1'
                            }
                        },
                        '(\\w+?) - must be less than or equal to (\\d+)': {
                            gettext: gettext('"{{field}}" must be less than or equal to {{maxValue}}'),
                            placeholders: {
                                field: '$1',
                                maxValue: '$2'
                            }
                        },
                        '(\\w+?) - should not contain null values': {
                            gettext: gettext('"{{field}}" should not contain null values'),
                            placeholders: {
                                field: '$1'
                            }
                        }
                    }
                }
            }
        },
        "^Smart rest template (.+?) doesn't exist$": {
            gettext: gettext('SmartREST template with id "{{templateId}}" doesn\'t exist.'),
            placeholders: {
                templateId: '$1'
            }
        },
        '^Smart rule created$': {
            gettext: gettext('Smart rule created.')
        },
        '^Smart rule updated$': {
            gettext: gettext('Smart rule updated.')
        },
        '^Smart rule enabled$': {
            gettext: gettext('Smart rule activated.')
        },
        '^Smart rule disabled$': {
            gettext: gettext('Smart rule deactivated.')
        },
        '^Smart rule deleted$': {
            gettext: gettext('Smart rule deleted.')
        },
        '^Smart rule "(.+?)" created$': {
            gettext: gettext('Smart rule "{{name}}" created.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" updated$': {
            gettext: gettext('Smart rule "{{name}}" updated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" enabled$': {
            gettext: gettext('Smart rule "{{name}}" activated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" disabled$': {
            gettext: gettext('Smart rule "{{name}}" deactivated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" deleted$': {
            gettext: gettext('Smart rule "{{name}}" deleted.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Started container$': {
            gettext: gettext('Container started.')
        },
        '^Successfully assigned (.+) to (.+)$': {
            gettext: gettext('"{{imageName}}" assigned to "{{address}}".'),
            placeholders: {
                imageName: '$1',
                address: '$2'
            }
        },
        '^Successfully pulled image "(.+)"$': {
            gettext: gettext('Image "{{imageName}}" pulled.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Tenant creation failed. : Tenant with given id already exists.$': {
            gettext: gettext('Could not create a tenant. Tenant with given domain/URL already exists.')
        },
        '^Tenant id cannot be a reserved sql keyword "(.+?)".$': {
            gettext: gettext('Could not use a reserved SQL keyword "{{tenantId}}" as a domain name.'),
            placeholders: {
                tenantId: '$1'
            }
        },
        '^Tenant "(.+?)" activated$': {
            gettext: gettext('Tenant "{{tenant}}" activated.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant (.+?) has sub-tenants, please remove them first!$': {
            gettext: gettext('Could not remove tenant "{{tenant}}". Remove its subtenants first.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant activated$': {
            gettext: gettext('Tenant activated.')
        },
        '^Tenant "(.+?)" created$': {
            gettext: gettext('Tenant "{{tenant}}" created.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant created$': {
            gettext: gettext('Tenant created.')
        },
        '^Tenant "(.+?)" deleted$': {
            gettext: gettext('Tenant "{{tenant}}" deleted.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant deleted$': {
            gettext: gettext('Tenant deleted.')
        },
        '^Tenant "(.+?)" suspended$': {
            gettext: gettext('Tenant "{{tenant}}" suspended.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant suspended$': {
            gettext: gettext('Tenant suspended')
        },
        '^Tenant "(.+?)" updated: (.+?)$': {
            gettext: gettext('Tenant "{{tenant}}" updated: {{properties}}.'),
            placeholders: {
                tenant: '$1',
                properties: '$2'
            }
        },
        '^Tenant updated$': {
            gettext: gettext('Tenant updated.')
        },
        '^Too Many Requests$': {
            gettext: gettext('Too many requests. Try again later.')
        },
        "^User alias equals username '(.+)'$": {
            gettext: gettext('Username and login alias must be different.')
        },
        '^User created$': {
            gettext: gettext('User created')
        },
        '^User (.+?) created$': {
            gettext: gettext('User "{{name}}" created'),
            placeholders: {
                name: '$1'
            }
        },
        '^User deleted$': {
            gettext: gettext('User deleted')
        },
        '^User (.+?) deleted$': {
            gettext: gettext('User "{{name}}" deleted'),
            placeholders: {
                name: '$1'
            }
        },
        '^User logout$': {
            gettext: gettext('User logout')
        },
        '^(.+?) user logout$': {
            gettext: gettext('"{{name}}" user logout'),
            placeholders: {
                name: '$1'
            }
        },
        '^(.+?) user logged in to the platform with OAuth internal login mode$': {
            gettext: gettext('"{{name}}" user logged in to the platform with OAI-Secure login mode'),
            placeholders: {
                name: '$1'
            }
        },
        '^(.+?) user login with OAuth internal mode failed$': {
            gettext: gettext('"{{name}}" user login with OAI-Secure mode failed'),
            placeholders: {
                name: '$1'
            }
        },
        '^User updated$': {
            gettext: gettext('User updated')
        },
        '^User (.+?) updated: (.+)$': {
            gettext: gettext('User "{{name}}" updated: {{updatesList}}'),
            placeholders: {
                name: '$1',
                updatesList: {
                    capture: '$2',
                    translate: {
                        "delegatedBy='(.+?)'": {
                            gettext: gettext('delegated by: "{{delegate}}"'),
                            placeholders: {
                                delegate: '$1'
                            }
                        },
                        "owner='(.+?)'": {
                            gettext: gettext('owner: "{{owner}}"'),
                            placeholders: {
                                owner: '$1'
                            }
                        },
                        'inventory assignment \\[(.+?)\\] added': {
                            gettext: gettext('inventory assignment [{{inventoryAssignment}}] added'),
                            placeholders: {
                                inventoryAssignment: '$1'
                            }
                        },
                        'inventory assignment \\[(.+?)\\] removed': {
                            gettext: gettext('inventory assignment [{{inventoryAssignment}}] removed'),
                            placeholders: {
                                inventoryAssignment: '$1'
                            }
                        },
                        'applications \\[(.+?)\\] added$': {
                            gettext: gettext('applications [{{applicationsList}}] added'),
                            placeholders: {
                                applicationsList: '$1'
                            }
                        },
                        'applications \\[(.+?)\\] removed$': {
                            gettext: gettext('applications [{{applicationsList}}] removed'),
                            placeholders: {
                                applicationsList: '$1'
                            }
                        },
                        'global roles \\[(.+?)\\] added$': {
                            gettext: gettext('global roles [{{globalRolesList}}] added'),
                            placeholders: {
                                globalRolesList: '$1'
                            }
                        },
                        'global roles \\[(.+?)\\] removed$': {
                            gettext: gettext('global roles [{{globalRolesList}}] removed'),
                            placeholders: {
                                globalRolesList: '$1'
                            }
                        }
                    }
                }
            }
        },
        "^User with username '(.+?)' already exists! : Duplicated: (.+?)$": {
            gettext: gettext('User "{{username}}" already exists.'),
            placeholders: {
                username: '$1'
            }
        },
        "^User with username or alias '(.+)' already exists! : Duplicated: (.+)$": {
            gettext: gettext('User with username or login alias "{{usernameOrAlias}}" already exists.'),
            placeholders: {
                usernameOrAlias: '$1'
            }
        },
        "^User with email '(.+?)' already exists! : Duplicated: (.+?)$": {
            gettext: gettext('User with email "{{email}}" already exists.'),
            placeholders: {
                email: '$1'
            }
        },
        '^unable to find option with given key (.+?) : Could not find entity Option by ID (.+?)!$': {
            gettext: gettext('Unable to get tenant option: "{{option}}".'),
            placeholders: {
                option: '$2'
            }
        },
        '^unable to find option with given key (.+?) : There is no system property for key (.+?)$': {
            gettext: gettext('Unable to get system option: "{{option}}".'),
            placeholders: {
                option: '$2'
            }
        },
        '^Write failed with error code 16733 and error message \'trying to index text where term list is too big, max is 4mb _id: "(.+?)"\'$': {
            gettext: gettext('The uploaded image cannot be bigger than 4 MB. Please upload a smaller one.')
        },
        '^Write failed with error code 17280 and error message \'WiredTigerIndex::insert: key too large to index, failing (.+?) { : "(.+?)" }\'$': {
            gettext: gettext('The selected name is too long. Please try a shorter one.')
        },
        '^You have reached devices limit. No more devices can be registered.$': {
            gettext: gettext('You reached devices limit. No more devices can be registered.')
        },
        '^(.+) succeeded for volume "(.+)"': {
            gettext: gettext('Operation "{{operation}}" succeeded for volume "{{volume}}".'),
            placeholders: {
                operation: '$1',
                volume: '$2'
            }
        },
        "^Exception on tenant (.+) in statement '(.+)': Invocation exception when invoking method '(.+)' of class '(.+)' passing parameters \\[(.+)\\] for statement '(.+)': (.+) : (.+)$": {
            gettext: gettext('Exception on tenant {{tenantId}} in statement "{{moduleName}}": Invocation exception when invoking method "{{methodName}}" of class "{{classPath}}" passing parameters [{{parameters}}] for statement "{{statement}}": {{exceptionType}} : {{exceptionMessage}}.'),
            placeholders: {
                tenantId: '$1',
                moduleName: '$2',
                methodName: '$3',
                classPath: '$4',
                parameters: '$5',
                statement: '$6',
                exceptionType: '$7',
                exceptionMessage: '$8'
            }
        },
        '^No nodes are available that match all of the predicates: (.+).$': {
            gettext: gettext('No nodes are available that match all of the predicates: [{{predicates}}].'),
            placeholders: {
                predicates: '$1'
            }
        },
        '^Readiness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
            gettext: gettext('Readiness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
            placeholders: {
                requestMethod: '$1',
                uri: '$2',
                protocol: '$3'
            }
        },
        '^Liveness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
            gettext: gettext('Liveness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
            placeholders: {
                requestMethod: '$1',
                uri: '$2',
                protocol: '$3'
            }
        },
        '^Error syncing pod$': {
            gettext: gettext('Pod synchronization error.')
        },
        '^Failed create pod sandbox.$': {
            gettext: gettext('Pod sandbox creation failed.')
        },
        '^Exception on tenant (.+) in statement \'(.+)\': Http status code: (\\d+) \\{error="alarm/Unprocessable Entity",message="(.+)",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"\\}$': {
            gettext: gettext('Exception on tenant {{tenantId}} in statement "{{statement}}": HTTP status code: {{httpStatusCode}} : {{message | translate}}'),
            placeholders: {
                tenantId: '$1',
                statement: '$2',
                httpStatusCode: '$3',
                message: '$4'
            }
        },
        "^User '(.+)' is managed by a remote identity management service defined by an administrator, direct update is forbidden$": {
            gettext: gettext('User "{{userName}}" is managed by a remote identity management service defined by an administrator, direct update is forbidden.'),
            placeholders: {
                userName: '$1'
            }
        },
        '^Added new child device to "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Added new child device to "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
            placeholders: {
                parentDeviceName: '$1',
                parentDeviceId: '$2'
            }
        },
        '^Updated child device of "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Updated child device of "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
            placeholders: {
                parentDeviceName: '$1',
                parentDeviceId: '$2'
            }
        },
        '^Added child device "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Added child device "{{name}}" (ID: {{id}}).'),
            placeholders: {
                name: '$1',
                id: '$2'
            }
        },
        '^Removed child device "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Removed child device "{{name}}" (ID: {{id}}).'),
            placeholders: {
                name: '$1',
                id: '$2'
            }
        },
        '^Change value of "(.+)" to (.+) (.+).$': {
            gettext: gettext('Change value of "{{name}}" to {{value}}{{unit}}.'),
            placeholders: {
                name: '$1',
                value: '$2',
                unit: '$3'
            }
        },
        '^Change value of "(.+)" to (.+).$': {
            gettext: gettext('Change value of "{{name}}" to {{value}}.'),
            placeholders: {
                name: '$1',
                value: '$2'
            }
        },
        '^Change status of "(.+)" to "(.+)".$': {
            gettext: gettext('Change status of "{{name}}" to "{{label}}".'),
            placeholders: {
                name: '$1',
                label: '$2'
            }
        },
        '^Send message "(.+)".$': {
            gettext: gettext('Send message "{{str}}".'),
            placeholders: {
                str: '$1'
            }
        },
        '^Close relay (.+).$': {
            gettext: gettext('Close relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Open relay (.+).$': {
            gettext: gettext('Open relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Change trace status to (.+).$': {
            gettext: gettext('Change trace status to {{state | translate}}.'),
            placeholders: {
                state: '$1'
            }
        },
        '^Change relay status to (.+).$': {
            gettext: gettext('Change relay status to {{status | translate}}.'),
            placeholders: {
                status: '$1'
            }
        },
        '^Closing relay (.+).$': {
            gettext: gettext('Closing relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Opening relay (.+).$': {
            gettext: gettext('Opening relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Update bulk operation$': {
            gettext: gettext('Update bulk operation')
        },
        '^Update bulk operation: (.+)$': {
            gettext: gettext('Update bulk operation: {{updatesList}}'),
            placeholders: bulkOperationAuditLogTextPlaceholders
        },
        '^Update firmware to: "?(.+?)"? \\(version: (.+)\\)\\.?$': {
            gettext: gettext('Update firmware to: "{{ name }}" (version: {{ version }})'),
            placeholders: {
                name: '$1',
                version: '$2'
            }
        },
        '^Update firmware to: "?(.+?)"?\\.?$': {
            gettext: gettext('Update firmware to: "{{ name }}"'),
            placeholders: {
                name: '$1'
            }
        },
        '^Update configuration to (.+).$': {
            gettext: gettext('Update configuration to: {{ name }}.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Apply device profile: (.+).?$': {
            gettext: gettext('Apply device profile: {{ name }}'),
            placeholders: {
                name: '$1'
            }
        },
        '^Execute generic command: (.+).?$': {
            gettext: gettext('Execute generic command: {{command}}'),
            placeholders: {
                command: '$1'
            }
        },
        '^Failed to refresh application. : Cannot refresh non local-hosted application.$': {
            gettext: gettext('Could not reactivate the application as it is not hosted locally.')
        },
        '^Failed to refresh application. : Cannot refresh application without active version id.$': {
            gettext: gettext('Could not reactivate the application as it has no active version.')
        },
        // TODO: remove if we decide not to translate such messages:
        // '^Killing container with id (.+):Need to kill Pod$': {
        //   gettext: gettext('Killing container with ID "{{containerId}}". Need to kill Pod.'),
        //   placeholders: {
        //     containerId: '$1'
        //   }
        // },
        '^Scaled down replica set (.+) to (\\d+)$': {
            gettext: gettext('Replica set "{{replicaSetName}}" scaled down to "{{scaleNumber}}".'),
            placeholders: {
                replicaSetName: '$1',
                scaleNumber: '$2'
            }
        },
        '^Deleted pod: (.+)$': {
            gettext: gettext('Pod "{{imageName}}" deleted.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Container image "(.+)" already present on machine$': {
            gettext: gettext('Container image "{{imageName}}" already exists.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Error updating tenant! Cannot insert second configuration for Password code grant internal/Bad Request$': {
            gettext: gettext('This login mode was already set by another administrator. Refresh the page to update the data.')
        },
        '^Authentication with id: (.+?) configuration updated.$': {
            gettext: gettext('Authentication configuration with id "{{id}}" updated.'),
            placeholders: {
                id: '$1'
            }
        },
        '^Authentication configuration with id: (.+?) added.$': {
            gettext: gettext('Authentication configuration with id "{{id}}" added.'),
            placeholders: {
                id: '$1'
            }
        },
        '^Configuration type: basic.$': {
            gettext: gettext('Configuration type: Basic Auth.')
        },
        '^Configuration type: oauth2_internal.$': {
            gettext: gettext('Configuration type: OAI-Secure.')
        },
        '^Configuration type: oauth2.$': {
            gettext: gettext('Configuration type: Single sign-on.')
        },
        '^Application activated$': {
            gettext: gettext('Application activated')
        },
        '^Hosted application \"(.+?)\" activated: activeVersionId \\[(.+?)\\] added$': {
            gettext: gettext('Hosted application "{{appName}}" activated: activeVersionId "{{activeVersionId}}" added'),
            placeholders: {
                appName: '$1',
                activeVersionId: '$2'
            }
        },
        '^Application deleted$': {
            gettext: gettext('Application deleted')
        },
        '^Hosted application \"(.+?)\" deleted for tenant \"(.+?)\"$': {
            gettext: gettext('Hosted application "{{appName}}" deleted from tenant "{{tenant}}"'),
            placeholders: {
                appName: '$1',
                tenant: '$2'
            }
        },
        // LWM2M strings (move to submodule when it's migrated from ng1)
        '^LWM2M device type$': {
            gettext: gettext('LWM2M device type')
        },
        '^LWM2M server URI$': {
            gettext: gettext('LWM2M server URI')
        },
        '^coaps://<LWM2M-server-domain>:<coaps-port>$': {
            gettext: gettext('coaps://<LWM2M-server-domain>:<coaps-port>')
        },
        '^CREATE$': {
            gettext: gettext('CREATE')
        },
        '^DELETE$': {
            gettext: gettext('DELETE')
        },
        '^Endpoint client ID$': {
            gettext: gettext('Endpoint client ID')
        },
        '^Server public key$': {
            gettext: gettext('Server public key')
        },
        '^Generate bootstrap server config$': {
            gettext: gettext('Generate bootstrap server config')
        },
        '^LWM2M bootstrap short server ID$': {
            gettext: gettext('LWM2M bootstrap short server ID')
        },
        '^LWM2M short server ID$': {
            gettext: gettext('LWM2M short server ID')
        },
        '^Registration lifetime$': {
            gettext: gettext('Registration lifetime')
        },
        '^in seconds$': {
            gettext: gettext('in seconds')
        },
        '^Security instance offset$': {
            gettext: gettext('Security instance offset')
        },
        '^Default minimum period$': {
            gettext: gettext('Default minimum period')
        },
        '^Default maximum period$': {
            gettext: gettext('Default maximum period')
        },
        '^Binding mode$': {
            gettext: gettext('Binding mode')
        },
        '^applicable for LWM2M 1\\.0$': {
            gettext: gettext('applicable for LWM2M 1.0')
        },
        '^Awake time registration parameter$': {
            gettext: gettext('Awake time registration parameter')
        },
        '^in milliseconds, 0 means device is always online$': {
            gettext: gettext('in milliseconds, 0 means device is always online')
        },
        '^Use common timestamp resources 5518 and 6050 or object specific timestamp for object 6 reported by the device if available$': {
            gettext: gettext('Use common timestamp resources 5518 and 6050 or object specific timestamp for object 6 reported by the device if available')
        },
        '^Notification storing when disabled or offline$': {
            gettext: gettext('Notification storing when disabled or offline')
        },
        '^Disable timeout$': {
            gettext: gettext('Disable timeout')
        },
        '^LWM2M request timeout$': {
            gettext: gettext('LWM2M request timeout')
        },
        '^in milliseconds$': {
            gettext: gettext('in milliseconds')
        },
        '^Binary delivery encoding$': {
            gettext: gettext('Binary delivery encoding')
        },
        '^Firmware update delivery method$': {
            gettext: gettext('Firmware update delivery method')
        },
        '^Firmware update supported device protocol$': {
            gettext: gettext('Firmware update supported device protocol')
        },
        '^Firmware update reset mechanism$': {
            gettext: gettext('Firmware update reset mechanism')
        },
        '^Firmware update URL$': {
            gettext: gettext('Firmware update URL')
        },
        '^Failed to find operation data in the internal memory store\\. Try again!$': {
            gettext: gettext('Failed to find operation data in the internal memory store. Try again!')
        },
        '^Security mode$': {
            gettext: gettext('Security mode')
        },
        '^Bootstrap PSK ID$': {
            gettext: gettext('Bootstrap PSK ID')
        },
        '^Bootstrap pre-shared key$': {
            gettext: gettext('Bootstrap pre-shared key')
        },
        '^LWM2M PSK ID$': {
            gettext: gettext('LWM2M PSK ID')
        },
        '^LWM2M pre-shared key$': {
            gettext: gettext('LWM2M pre-shared key')
        },
        '^LWM2M bulk device upload operation$': {
            gettext: gettext('LWM2M bulk device upload operation')
        },
        '^This operation is only triggered by the agent when user uploads a CSV file with all required information to register new LWM2M devices\\. The source of the operation is the LWM2M device connector\\. Users are not able to trigger this operation using the shell command\\.$': {
            gettext: gettext('This operation is only triggered by the agent when user uploads a CSV file with all required information to register new LWM2M devices. The source of the operation is the LWM2M device connector. Users are not able to trigger this operation using the shell command.')
        },
        '^Write$': {
            gettext: gettext('Write')
        },
        '^Execute$': {
            gettext: gettext('Execute')
        },
        '^Execute with parameters$': {
            gettext: gettext('Execute with parameters')
        },
        '^Delete Instance$': {
            gettext: gettext('Delete instance')
        },
        '^Create Instance$': {
            gettext: gettext('Create instance')
        },
        '^Read Object$': {
            gettext: gettext('Read object')
        },
        '^Read Instance$': {
            gettext: gettext('Read instance')
        },
        '^LWM2M bulk device removal operation$': {
            gettext: gettext('LWM2M bulk device removal operation')
        },
        '^This operation is only triggered by the agent when user uploads a CSV file with a list of endpoint IDs to delete from C8Y\\.The source of the operation is the LWM2M device connector\\. Users are not able to trigger this operation using the shell command\\.$': {
            gettext: gettext('This operation is only triggered by the agent when user uploads a CSV file with a list of endpoint IDs to delete from the platform. The source of the operation is the LWM2M device connector. Users are not able to trigger this operation using the shell command.')
        },
        '^Could not find device$': {
            gettext: gettext('Could not find device')
        },
        '^Exception occurred while removing device (.+?)$': {
            gettext: gettext('Exception occurred while removing device: {{ exceptionMessage }}'),
            placeholders: {
                exceptionMessage: '$1'
            }
        },
        '^This command can be used to migrate LWM2M devices which are created in a non-standard way\\. It can take comma-separated device managed object IDs as parameters\\. If the IDs are specified then the migration will be done only for those devices\\. If the command is sent without any parameters then the agent will look up for possible Lwm2m devices that are not created in a standard way and try to migrate them\\. Usage: migrateLwm2mDevices 1122,3344 or migrateLwm2mDevices$': {
            gettext: gettext('This command can be used to migrate LWM2M devices which are created in a non-standard way. It can take comma-separated device managed object IDs as parameters. If the IDs are specified then the migration will be done only for those devices. If the command is sent without any parameters then the agent will look up for possible LWM2M devices that are not created in a standard way and try to migrate them. Usage: migrateLwm2mDevices 1122,3344 or migrateLwm2mDevices')
        },
        '^Unable to migrate devices$': {
            gettext: gettext('Unable to migrate devices')
        },
        '^Error while processing report$': {
            gettext: gettext('Error while processing report')
        },
        '^Expected 1 endpointId argument$': {
            gettext: gettext('Expected 1 endpointId argument')
        },
        '^LWM2M device registration$': {
            gettext: gettext('LWM2M device registration')
        },
        '^The required and optional properties to register and setup LWM2M Devices$': {
            gettext: gettext('The required and optional properties to register and setup LWM2M devices')
        },
        '^Bootstrap$': {
            gettext: gettext('Bootstrap')
        },
        '^Advanced$': {
            gettext: gettext('Advanced')
        },
        '^Bulk LWM2M device registration$': {
            gettext: gettext('Bulk LWM2M device registration')
        },
        '^This command returns a list of shell commands with description that can be created for the Lwm2m device connector\\.$': {
            gettext: gettext('This command returns a list of shell commands with description that can be created for the LWM2M device connector.')
        },
        '^The following operations are supported:': {
            gettext: gettext('The following operations are supported:')
        },
        '^PSK template$': {
            gettext: gettext('PSK template')
        },
        '^A bulk registration CSV template showing all mandatory fields$': {
            gettext: gettext('A bulk registration CSV template showing all mandatory fields')
        },
        '^Mandatory fields template$': {
            gettext: gettext('Mandatory fields template')
        },
        '^General template$': {
            gettext: gettext('General template')
        },
        '^A bulk registration CSV template for NO_SEC devices with all optional fields$': {
            gettext: gettext('A bulk registration CSV template for NO_SEC devices with all optional fields')
        },
        '^A general bulk registration CSV template showing all possible fields$': {
            gettext: gettext('A general bulk registration CSV template showing all possible fields')
        },
        '^A bulk registration CSV template for PSK devices with all optional fields$': {
            gettext: gettext('A bulk registration CSV template for PSK devices with all optional fields')
        },
        '^NO_SEC template$': {
            gettext: gettext('NO_SEC template')
        }
    };

    /**
     * A service to provide unmodified, cached translations for angular.
     */
    var CachedLocaleDictionaryService = /** @class */ (function () {
        function CachedLocaleDictionaryService() {
            this.cachedDictionary = {};
        }
        return CachedLocaleDictionaryService;
    }());
    CachedLocaleDictionaryService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function CachedLocaleDictionaryService_Factory() { return new CachedLocaleDictionaryService(); }, token: CachedLocaleDictionaryService, providedIn: "root" });
    CachedLocaleDictionaryService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var TranslateCustomLoader = /** @class */ (function () {
        function TranslateCustomLoader(http, optionsService, cachedLocaleDictionaryService, path, languages) {
            if (path === void 0) { path = null; }
            if (languages === void 0) { languages = null; }
            this.http = http;
            this.optionsService = optionsService;
            this.cachedLocaleDictionaryService = cachedLocaleDictionaryService;
            this.path = path;
            this.languages = languages;
        }
        TranslateCustomLoader.prototype.getTranslation = function (lang) {
            var _this = this;
            var path = this.path || '';
            var url = "" + path + lang + ".json";
            if (this.languages && this.languages[lang] && this.languages[lang].url) {
                url = this.languages[lang].url;
            }
            return this.http.get(url).pipe(operators.map(function (d) {
                if (_this.optionsService.langsDetails && _this.optionsService.langsDetails[lang]) {
                    return Object.assign(Object.assign({}, d[lang]), _this.optionsService.langsDetails[lang]);
                }
                return d[lang];
            }), operators.tap(function (dictionary) {
                _this.cachedLocaleDictionaryService.cachedDictionary[lang] = dictionary;
            }), operators.map(function (dictionary) { return _this.getDictionaryWithTrimmedKeys(dictionary); }), operators.catchError(function () { return rxjs.of({}); }));
        };
        /**
         * We want to have translation keys unified, so they don't contain unnecessary spaces and line breaks.
         * This way we can dynamically build keys from HTML, and match them to extracted string, that might be HTML as well.
         */
        TranslateCustomLoader.prototype.getDictionaryWithTrimmedKeys = function (dictionary) {
            return lodashEs.mapKeys(dictionary, function (value, key) { return trimTranslationKey(key); });
        };
        return TranslateCustomLoader;
    }());
    TranslateCustomLoader.decorators = [
        { type: i0.Injectable }
    ];
    TranslateCustomLoader.ctorParameters = function () { return [
        { type: http.HttpClient },
        { type: OptionsService },
        { type: CachedLocaleDictionaryService },
        { type: String, decorators: [{ type: i0.Inject, args: [LOCALE_PATH,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [LANGUAGES,] }] }
    ]; };
    function trimTranslationKey(key) {
        return key.replace(/(\r\n|\n|\r)/gm, '').replace(/\s{2,}/g, ' ').trim();
    }

    var TranslateParserCustom = /** @class */ (function (_super) {
        __extends(TranslateParserCustom, _super);
        function TranslateParserCustom() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TranslateParserCustom.prototype.getValue = function (target, key) {
            var trimmedKey = trimTranslationKey(key);
            var translated = lodashEs.get(target, [trimmedKey]);
            if (!translated) {
                var keys = key.split('.');
                if (keys.length > 1) {
                    translated = lodashEs.get(target, key);
                }
            }
            return translated;
        };
        return TranslateParserCustom;
    }(i2.TranslateDefaultParser));
    TranslateParserCustom.decorators = [
        { type: i0.Injectable }
    ];

    var C8yTranslateDirective = /** @class */ (function (_super) {
        __extends(C8yTranslateDirective, _super);
        function C8yTranslateDirective(translateService, element, _ref) {
            var _this = _super.call(this, translateService, element, _ref) || this;
            /**
             * Used to trigger events when html is replaced by directive.
             */
            _this.htmlUpdateEvent = new i0.EventEmitter();
            return _this;
        }
        Object.defineProperty(C8yTranslateDirective.prototype, "_elementRef", {
            /**
             * Used to get private element property from TranslateDirective, so it doesn't throw tsErrors
             */
            get: function () {
                return this.element;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(C8yTranslateDirective.prototype, "_translateService", {
            /**
             * Used to get private translateService property from TranslateDirective, so it doesn't throw tsErrors
             */
            get: function () {
                return this.translateService;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Overridden method from original directive.
         * For simple text nodes, it just invokes the base method.
         * For complex nodes, it builds translation key from whole inner HTML
         * and replaces it with its translation.
         * This prevents splitting HTML into pieces and attempting to translate each one separately
         * which doesn't work, because we extract strings in whole.
         */
        C8yTranslateDirective.prototype.checkNodes = function (forceUpdate, translations) {
            if (forceUpdate === void 0) { forceUpdate = false; }
            if (!this.htmlMode && (this.isElementSimpleTextType() || this.isElementInnerHtmlEmpty())) {
                /**
                 * If element does not contain complex html, then fallBack to default logic.
                 */
                _super.prototype.checkNodes.call(this, forceUpdate, translations);
            }
            else {
                this.htmlMode = true;
                if (this.isLookupKeyMissing()) {
                    this._elementRef.nativeElement.lookupKey = this.getLookupKey();
                }
                if (this.lookupKeyExist()) {
                    var newTranslation = this.getNewTranslation();
                    if (!this.lastTranslation || this.lastTranslation !== newTranslation) {
                        this.lastTranslation = newTranslation;
                        this.updateHtmlContent();
                        this.htmlUpdateEvent.emit();
                    }
                }
            }
        };
        C8yTranslateDirective.prototype.ngOnDestroy = function () {
            this.htmlUpdateEvent.complete();
            _super.prototype.ngOnDestroy.call(this);
        };
        /**
         * Builds lookup key from innerHTML, removes comments (that might be added by Angular) and trims it.
         */
        C8yTranslateDirective.prototype.getLookupKey = function () {
            return this._elementRef.nativeElement.innerHTML.replace(/<!--.*?-->/gs, '').trim();
        };
        C8yTranslateDirective.prototype.isElementSimpleTextType = function () {
            return this._elementRef.nativeElement.childNodes.length === 1 && this._elementRef.nativeElement.childNodes[0].nodeType === 3;
        };
        C8yTranslateDirective.prototype.isElementInnerHtmlEmpty = function () {
            return !this._elementRef.nativeElement.innerHTML;
        };
        C8yTranslateDirective.prototype.isLookupKeyMissing = function () {
            return !this._elementRef.nativeElement.lookupKey;
        };
        C8yTranslateDirective.prototype.lookupKeyExist = function () {
            return this._elementRef.nativeElement.lookupKey;
        };
        C8yTranslateDirective.prototype.getNewTranslation = function () {
            return this._translateService.instant(this._elementRef.nativeElement.lookupKey, this.currentParams || {});
        };
        C8yTranslateDirective.prototype.updateHtmlContent = function () {
            this._elementRef.nativeElement.innerHTML = this.lastTranslation;
        };
        return C8yTranslateDirective;
    }(i2.TranslateDirective));
    C8yTranslateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[translate],[ngx-translate]'
                },] }
    ];
    C8yTranslateDirective.ctorParameters = function () { return [
        { type: i2.TranslateService },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };

    /**
     * Provides copy of original pipe for C8yTranslateModule
     */
    var C8yTranslatePipe = /** @class */ (function (_super) {
        __extends(C8yTranslatePipe, _super);
        function C8yTranslatePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return C8yTranslatePipe;
    }(i2.TranslatePipe));
    C8yTranslatePipe.decorators = [
        { type: i0.Injectable },
        { type: i0.Pipe, args: [{
                    name: 'translate',
                    pure: false // required to update the value when the promise is resolved
                },] }
    ];

    /**
     * Module must be redeclared, as Components cant be declared by two modules.
     */
    var C8yTranslateModule = /** @class */ (function (_super) {
        __extends(C8yTranslateModule, _super);
        function C8yTranslateModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return C8yTranslateModule;
    }(i2.TranslateModule));
    C8yTranslateModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [C8yTranslatePipe, C8yTranslateDirective],
                    exports: [C8yTranslatePipe, C8yTranslateDirective]
                },] }
    ];

    var angularLocalesLanguageMap = { en: 'en-GB', 'en-EN': 'en-GB' };
    // AoT requires an exported function for factories
    function translateLoaderFactory(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages) {
        return new TranslateCustomLoader(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages);
    }
    function localePathFactory(options) {
        return options.localePath;
    }
    function languagesFactory(options) {
        return options.languages;
    }
    function localeId(appStateService) {
        return {
            get lang() {
                return getAngularLocalesLanguageString(appStateService.state.lang || 'en');
            },
            toLowerCase: function () {
                return this.lang.toLowerCase();
            },
            toString: function () {
                return this.lang;
            }
        };
    }
    function getAngularLocalesLanguageString(language) {
        return angularLocalesLanguageMap[language] || language;
    }
    /**
     * The angular module definition for i18n (translation).
     * @exports I18nModule
     */
    var I18nModule$1 = /** @class */ (function () {
        function I18nModule() {
        }
        I18nModule.providers = function () {
            return [
                { provide: i0.LOCALE_ID, useFactory: localeId, deps: [AppStateService] },
                { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true },
                { provide: LOCALE_PATH, useFactory: localePathFactory, deps: [OptionsService] },
                { provide: LANGUAGES, useFactory: languagesFactory, deps: [OptionsService] },
                // Extracted from projects/ngx-translate/core/src/public_api.ts
                {
                    provide: i2.TranslateLoader,
                    useFactory: translateLoaderFactory,
                    deps: [http.HttpClient, OptionsService, CachedLocaleDictionaryService, LOCALE_PATH, LANGUAGES]
                },
                { provide: i2.TranslateCompiler, useClass: i2.TranslateFakeCompiler },
                { provide: i2.TranslateParser, useClass: TranslateParserCustom },
                { provide: i2.MissingTranslationHandler, useClass: MissingTranslationCustomHandler },
                i2.TranslateStore,
                i2.TranslateService,
                { provide: i2.USE_STORE, useValue: undefined },
                { provide: i2.USE_DEFAULT_LANG, useValue: undefined },
                { provide: i2.USE_EXTEND, useValue: false },
                { provide: i2.DEFAULT_LANGUAGE, useValue: undefined }
            ];
        };
        I18nModule.forRoot = function () {
            return {
                ngModule: I18nModule,
                providers: I18nModule.providers()
            };
        };
        return I18nModule;
    }());
    I18nModule$1.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [C8yTranslateModule],
                    imports: [http.HttpClientModule, i4$1.BsDatepickerModule]
                },] }
    ];

    function parse(moduleSrc) {
        var src = moduleSrc.split(/\n/)
            .map(function (l) { return l.trim(); })
            .filter(Boolean)
            .filter(function (l) { return !l.match(/^\/?\*/) && !l.match(/^\/\//); })
            .join('\n');
        var fn = new Function("var exports = {};\nvar module = { exports: exports };\n" + src + "\nreturn exports;");
        return fn();
    }

    var cache = new Map();
    /**
     * @ignore
     */
    function loadLocale(moduleLang) {
        return new Promise(function (resolve, reject) {
            if (cache.has(moduleLang)) {
                resolve(cache.get(moduleLang));
            }
            else {
                fetch("assets/locales/angular/" + moduleLang + ".js")
                    .then(function (res) { return res.text(); })
                    .then(function (src) {
                    var module = parse(src);
                    cache.set(moduleLang, module);
                    resolve(module);
                })
                    .catch(reject);
            }
        });
    }

    /**
     * A service to manage the language of the application.
     */
    var TranslateService = /** @class */ (function () {
        function TranslateService(ngxTranslate, ui, options, bsLocaleService) {
            var _this = this;
            this.ngxTranslate = ngxTranslate;
            this.ui = ui;
            this.options = options;
            this.bsLocaleService = bsLocaleService;
            this.langsDetail = this.options.get('languages', {});
            this.langs = lodashEs.keys(this.langsDetail).filter(function (k) { return _this.langsDetail[k]; });
            this.DEFAULT_SEPARATOR = '_';
            var queryStringLang = this.queryStringLang();
            if (queryStringLang) {
                this.saveInLocalStorage(queryStringLang);
            }
        }
        TranslateService.defaultLang = function () {
            return window.localStorage.getItem(TranslateService.SAVE_LANGUAGE_KEY);
        };
        /**
         * Switches to given language.
         * @param lang The language as two-letter code.
         */
        TranslateService.prototype.switchToLanguage = function (lang) {
            return __awaiter(this, void 0, void 0, function () {
                var moduleLang, e_1, lessSpecificModuleLang;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            moduleLang = lang.replace('_', '-');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 7]);
                            return [4 /*yield*/, this.loadLocales(moduleLang)];
                        case 2:
                            _a.sent();
                            this.setBsLocale(moduleLang);
                            return [3 /*break*/, 7];
                        case 3:
                            e_1 = _a.sent();
                            lessSpecificModuleLang = moduleLang.split('-').shift();
                            if (!(lessSpecificModuleLang !== moduleLang)) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.loadLocales(lessSpecificModuleLang)];
                        case 4:
                            _a.sent();
                            this.setBsLocale(lessSpecificModuleLang);
                            return [3 /*break*/, 6];
                        case 5: throw e_1;
                        case 6: return [3 /*break*/, 7];
                        case 7:
                            this.setLanguage(lang);
                            return [2 /*return*/];
                    }
                });
            });
        };
        TranslateService.prototype.loadLocales = function (moduleLang) {
            return __awaiter(this, void 0, void 0, function () {
                var module;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, loadLocale(getAngularLocalesLanguageString(moduleLang))];
                        case 1:
                            module = _a.sent();
                            common.registerLocaleData(module.default);
                            return [2 /*return*/];
                    }
                });
            });
        };
        TranslateService.prototype.setLanguage = function (lang) {
            var _this = this;
            this.ngxTranslate.setDefaultLang(this.options.get('defaultLanguage', 'en'));
            this.ngxTranslate.use(lang).subscribe(function () {
                _this.ui.state$.next(Object.assign(Object.assign({}, _this.ui.state), { lang: lang }));
            });
        };
        /**
         * Finds the first supported language
         */
        TranslateService.prototype.firstSupportedLanguage = function () {
            var _this = this;
            var languages = [this.queryStringLang(), this.localStorageLang()]
                .concat([this.options.get('defaultLanguage')])
                .concat(this.browserLangs())
                .concat(['en'])
                .filter(Boolean)
                .map(function (lang) { return lang.toLowerCase(); });
            var preferredLanguage = languages.find(function (lang) { return _this.getSupported(lang); });
            return this.getSupported(preferredLanguage);
        };
        /**
         * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
         * @param lang The iso language code.
         */
        TranslateService.prototype.convertToLanguageCodePO = function (lang) {
            var sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
            var _a = __read(lang.split(sep), 2), langMain = _a[0], langSpecific = _a[1];
            var langLast = langSpecific ? "" + this.DEFAULT_SEPARATOR + langSpecific : '';
            return "" + langMain + langLast;
        };
        /**
         * Returns the language in the native language.
         * @param lang The language two-letter code.
         * @return The native name.
         */
        TranslateService.prototype.getNativeLanguage = function (lang) {
            var langData = (this.langsDetail || {})[lang] || {};
            return langData.nativeName || lang;
        };
        TranslateService.prototype.saveInLocalStorage = function (lang) {
            window.localStorage.setItem(TranslateService.SAVE_LANGUAGE_KEY, lang);
        };
        TranslateService.prototype.getSupported = function (lang) {
            var _this = this;
            var exact = this.langs.find(function (l) { return l.toLowerCase() === lang; });
            if (exact) {
                return exact;
            }
            return this.langs.find(function (l) { return _this.getLessSpecific(l.toLowerCase()) === _this.getLessSpecific(lang) || l.startsWith(lang); });
        };
        /**
         * Gets the language from the query parameter.
         * @return The language two-letter code.
         */
        TranslateService.prototype.queryStringLang = function () {
            return this.getQueryParameter('lang');
        };
        TranslateService.prototype.getLessSpecific = function (lang) {
            return lodashEs.isString(lang)
                ? lang.replace('-', this.DEFAULT_SEPARATOR).split(this.DEFAULT_SEPARATOR)[0]
                : '';
        };
        /**
         * Gets the language from local storage.
         * @return The language two-letter code.
         */
        TranslateService.prototype.localStorageLang = function () {
            return window.localStorage.getItem(TranslateService.SAVE_LANGUAGE_KEY);
        };
        /**
         * Determines which language is set in the browser.
         * @return The languages the browser supports as string array.
         */
        TranslateService.prototype.browserLangs = function () {
            var navigator = window.navigator;
            var browserLanguagePropertyKeys = [
                'languages',
                'language',
                'browserLanguage',
                'systemLanguage',
                'userLanguage'
            ];
            return browserLanguagePropertyKeys.reduce(function (languages, property) {
                var propertyLanguages = navigator[property];
                if (typeof propertyLanguages === 'string') {
                    languages.push(propertyLanguages);
                }
                else if (Array.isArray(propertyLanguages)) {
                    languages = languages.concat(propertyLanguages);
                }
                return languages;
            }, []);
        };
        TranslateService.prototype.getQueryParameter = function (queryKey) {
            // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
            var query = window.location.search.substring(1);
            var result;
            query.split('&').find(function (pair) {
                var _a = __read(pair.split('='), 2), key = _a[0], value = _a[1];
                if (key === queryKey) {
                    result = value;
                }
                return result;
            });
            return result;
        };
        TranslateService.prototype.setBsLocale = function (lang) {
            switch (lang) {
                case ('de'): {
                    chronos.defineLocale(lang, chronos.deLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('en'): {
                    // 'en-gb' is created because overwriting default 'en' breaks date-picker somehow
                    chronos.defineLocale('en-gb', chronos.enGbLocale);
                    this.bsLocaleService.use('en-gb');
                    break;
                }
                case ('es'): {
                    chronos.defineLocale(lang, chronos.esLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('fr'): {
                    chronos.defineLocale(lang, chronos.frLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('ja'): {
                    chronos.defineLocale(lang, chronos.jaLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('ko'): {
                    chronos.defineLocale(lang, chronos.koLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('nl'): {
                    chronos.defineLocale(lang, chronos.nlLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('pl'): {
                    chronos.defineLocale(lang, chronos.plLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('pt'): {
                    chronos.defineLocale(lang, chronos.ptBrLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('ru'): {
                    chronos.defineLocale(lang, chronos.ruLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                case ('zh'): {
                    chronos.defineLocale(lang, chronos.zhCnLocale);
                    this.bsLocaleService.use(lang);
                    break;
                }
                default: {
                    chronos.defineLocale('en-gb', chronos.enGbLocale);
                    this.bsLocaleService.use('en-gb');
                }
            }
        };
        return TranslateService;
    }());
    TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
    TranslateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(i0__namespace.ɵɵinject(i2__namespace.TranslateService), i0__namespace.ɵɵinject(AppStateService), i0__namespace.ɵɵinject(OptionsService), i0__namespace.ɵɵinject(i4__namespace.BsLocaleService, 8)); }, token: TranslateService, providedIn: "root" });
    TranslateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    TranslateService.ctorParameters = function () { return [
        { type: i2.TranslateService },
        { type: AppStateService },
        { type: OptionsService },
        { type: i4$1.BsLocaleService, decorators: [{ type: i0.Optional }] }
    ]; };

    /*
     * Converts the file size to a readable format.
     * Usage:
     *
     * ```html
     *  {{ myData | bytes }} <!-- e.g. 100.1 MB -->
     *
     * ```
     * Default precision is set to 1 decimal place.
     * To change the precision, pass an additional argument to pipe.

     * ```html
     * {{ myData | bytes: 5 }} <!-- e.g. 100.12345 MB -->
     * ```
     *
     */
    var BytesPipe = /** @class */ (function () {
        function BytesPipe() {
        }
        BytesPipe.bytes = function (bytes, precision) {
            if (lodashEs.isNaN(bytes) || !lodashEs.isFinite(bytes)) {
                return '-';
            }
            if (bytes === 0) {
                return 0;
            }
            var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];
            var num = Math.floor(Math.log(bytes) / Math.log(1000));
            // eslint-disable-next-line no-mixed-operators
            var result = (bytes / Math.pow(1000, Math.floor(num))).toFixed(precision);
            return result + " " + units[num];
        };
        BytesPipe.prototype.transform = function (value, precision) {
            if (precision === void 0) { precision = 1; }
            return BytesPipe.bytes(value, precision);
        };
        return BytesPipe;
    }());
    BytesPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'bytes' },] }
    ];

    /**
     * The range of times supported by ECMAScript Date objects in milliseconds.
     * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1
     */
    var ES_MAX_TIME_MILLISECONDS = 8640000000000000;
    /**
     * Formats a date value according to locale rules. If no other format specified it defaults to `medium`
     * used as standard date/time format.
     *
     * Extends Angular's DatePipe in a way so that date values exceeding the range supported by ECMAScript
     * are displayed as earliest/latest supported point in time printed in the desired format pre- or postfixed
     * by the word `before` or `after`, respectively.
     * In all other cases the pipe behaves as the standard [DatePipe]{@link https://angular.io/api/common/DatePipe}.
     *
     * ```html
     * <span class="highlight">{{ deadline | c8yDate }}</span> <!-- e.g. 7 May 2020, 17:45:19 (en-GB) or 07.05.2020, 17:45:19 (de) -->
     * <span>{{ lastUpdated | c8yDate: 'a h:MM:ss' }}</span> <!-- e.g. pm 5:45:19 -->
     * <span>{{ 8640000000000000 + 1 | c8yDate }}</span> <!-- e.g. after 13 Sep 275760, 03:00:00 --> ```
     */
    var DatePipe = /** @class */ (function (_super) {
        __extends(DatePipe, _super);
        function DatePipe(locale, translateService) {
            var _this = _super.call(this, locale) || this;
            _this.translateService = translateService;
            return _this;
        }
        DatePipe.prototype.transform = function (value, format, timezone, locale) {
            if (format === void 0) { format = 'medium'; }
            var valueInBounds = value;
            var valueBefore = false;
            var valueBeyond = false;
            if (typeof value === 'number' && !isNaN(value)) {
                valueInBounds = Math.min(value, ES_MAX_TIME_MILLISECONDS);
                valueInBounds = Math.max(valueInBounds, -ES_MAX_TIME_MILLISECONDS);
                valueBefore = value < -ES_MAX_TIME_MILLISECONDS;
                valueBeyond = value > ES_MAX_TIME_MILLISECONDS;
            }
            var result = _super.prototype.transform.call(this, valueInBounds, format, timezone, locale);
            if (valueBefore) {
                result = this.translateService.instant(gettext("before {{date}}"), { date: result });
            }
            else if (valueBeyond) {
                result = this.translateService.instant(gettext("after {{date}}"), { date: result });
            }
            return result;
        };
        return DatePipe;
    }(common.DatePipe));
    DatePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'c8yDate' },] }
    ];
    DatePipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] },
        { type: i2.TranslateService }
    ]; };

    /**
     * A directive to determine if a dropdown should open to the top or as usual to the bottom.
     * This directive has a direct dependency to the bootstrap dropdown (!)
     *
     * Preconditions:
     *  - Bootstrap dropdown is used
     *  - Bootstrap dropdown is not used with container="body"
     *  - Bootstrap dropdown is used like it is intended and documented for e.g.
     * ```html
     * <div dropdown class="dropdown">
     *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
     *  <ul class="dropdown-menu" *dropdownMenu>
     *    <!-- Content here -->
     *  </ul>
     * </div>
     * ```
     *
     * Example:
     * ```html
     * <div dropdown c8yBsDropdownDirection class="dropdown">
     *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
     *  <ul class="dropdown-menu" *dropdownMenu>
     *    <!-- Content here -->
     *  </ul>
     * </div>
     * ```
     * You make use of the bootstrap dropdown as usual and additionally add the direction directive to it.
     */
    var DropdownDirectionDirective = /** @class */ (function () {
        function DropdownDirectionDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.MARGIN_BOTTOM = 10;
            this.VISIBILITY = 'visibility';
            this.DROPUP = 'dropup';
        }
        DropdownDirectionDirective.prototype.onClick = function () {
            var open = this.elementRef.nativeElement.classList.contains('open');
            if (open) {
                var menu_1;
                var toggle_1;
                lodashEs.forEach(this.elementRef.nativeElement.children, function (element) {
                    if (element.classList.contains('dropdown-menu')) {
                        menu_1 = element;
                    }
                    if (element.classList.contains('dropdown-toggle')) {
                        toggle_1 = element;
                    }
                });
                if (menu_1 && toggle_1) {
                    this.renderer.setStyle(menu_1, this.VISIBILITY, 'hidden');
                    this.shouldDropup(menu_1, toggle_1);
                    this.renderer.removeStyle(menu_1, this.VISIBILITY);
                }
            }
        };
        DropdownDirectionDirective.prototype.shouldDropup = function (container, position) {
            var containerHeight = container.getBoundingClientRect().height;
            var containerDropPosition = position.getBoundingClientRect().bottom;
            var layoutViewport = window.innerHeight;
            var sum = containerHeight + containerDropPosition + this.MARGIN_BOTTOM;
            if (sum >= layoutViewport) {
                this.renderer.addClass(this.elementRef.nativeElement, this.DROPUP);
            }
            else if (this.elementRef.nativeElement.classList.contains(this.DROPUP)) {
                this.renderer.removeClass(this.elementRef.nativeElement, this.DROPUP);
            }
        };
        return DropdownDirectionDirective;
    }());
    DropdownDirectionDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[dropdown][c8yBsDropdownDirection],[dropdown][c8yDropdownDirection]' },] }
    ];
    DropdownDirectionDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    DropdownDirectionDirective.propDecorators = {
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    /**
     * A component to show generic empty state.
     * Title and subtitle should be used with translate pipe to mark strings for translation.
     * Component can be displayed vertically (default) or horizontally.
     * Additional markup elements can be placed inside the tag.
     *
     * Example:
     * ```html
     * <c8y-ui-empty-state
     *   [icon]="'c8y-icon'"
     *   [title]="'Place your title here' | translate"
     *   [subtitle]="'Place your subtitle here' | translate"
     *   [horizontal]="true"
     * >
     *   (...)
     * </c8y-ui-empty-state>
     * ```
     */
    var EmptyStateComponent = /** @class */ (function () {
        function EmptyStateComponent() {
        }
        return EmptyStateComponent;
    }());
    EmptyStateComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-ui-empty-state',
                    template: "<div class=\"c8y-empty-state\" [ngClass]=\"{ 'c8y-empty-state--horizontal': horizontal }\">\n  <i [c8yIcon]=\"icon\" class=\"c8y-icon-duocolor\"></i>\n\n  <ng-container *ngIf=\"!horizontal\">\n    <div>\n      <h3 class=\"text-medium p-b-4\">{{ title | translate }}</h3>\n      <p *ngIf=\"subtitle\">{{ subtitle | translate }}</p>\n      <div class=\"p-t-16\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"horizontal\">\n    <div>\n      <p>\n        <strong>{{ title | translate }}</strong>\n      </p>\n      <p *ngIf=\"subtitle\" class=\"small\">{{ subtitle | translate }}</p>\n      <div class=\"small m-t-8\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template #content>\n    <ng-content></ng-content>\n  </ng-template>\n</div>\n"
                },] }
    ];
    EmptyStateComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        subtitle: [{ type: i0.Input }],
        horizontal: [{ type: i0.Input }]
    };

    exports.GENERIC_FILE_TYPE = void 0;
    (function (GENERIC_FILE_TYPE) {
        GENERIC_FILE_TYPE["ARCHIVE"] = "archive";
        GENERIC_FILE_TYPE["AUDIO"] = "audio";
        GENERIC_FILE_TYPE["CODE"] = "code";
        GENERIC_FILE_TYPE["EXCEL"] = "excel";
        GENERIC_FILE_TYPE["IMAGE"] = "image";
        GENERIC_FILE_TYPE["PDF"] = "pdf";
        GENERIC_FILE_TYPE["POWERPOINT"] = "powerpoint";
        GENERIC_FILE_TYPE["TEXT"] = "text";
        GENERIC_FILE_TYPE["VIDEO"] = "video";
        GENERIC_FILE_TYPE["WORD"] = "word";
        GENERIC_FILE_TYPE["EPL"] = "epl";
    })(exports.GENERIC_FILE_TYPE || (exports.GENERIC_FILE_TYPE = {}));
    var FilesService = /** @class */ (function () {
        function FilesService(systemOptionsService, inventoryBinaryService) {
            var _b;
            this.systemOptionsService = systemOptionsService;
            this.inventoryBinaryService = inventoryBinaryService;
            this.DEFAULT_BYTES_LIMIT = 52428800;
            this.FILENAME_MAX_LENGTH = 128;
            this.fileTypeExtensionsMap = (_b = {},
                _b[exports.GENERIC_FILE_TYPE.ARCHIVE] = {
                    exts: ['7z', 'apk', 'cab', 'gz', 'iso', 'jar', 'rar', 'tar', 'zip']
                },
                _b[exports.GENERIC_FILE_TYPE.AUDIO] = {
                    exts: ['3gp', 'aiff', 'aac', 'amr', 'm4a', 'm4p', 'mp3', 'oga', 'ogg', 'raw', 'wav', 'wma']
                },
                _b[exports.GENERIC_FILE_TYPE.CODE] = {
                    exts: ['aspx', 'exe', 'htm', 'html', 'jad', 'js', 'json', 'jsp', 'php', 'xml']
                },
                _b[exports.GENERIC_FILE_TYPE.EXCEL] = {
                    exts: ['xls', 'xlsx']
                },
                _b[exports.GENERIC_FILE_TYPE.IMAGE] = {
                    exts: ['bmp', 'gif', 'jpeg', 'jpg', 'png', 'tiff', 'svg', 'ico']
                },
                _b[exports.GENERIC_FILE_TYPE.PDF] = {
                    exts: ['pdf']
                },
                _b[exports.GENERIC_FILE_TYPE.POWERPOINT] = {
                    exts: ['ppt', 'pptx']
                },
                _b[exports.GENERIC_FILE_TYPE.TEXT] = {
                    exts: ['txt']
                },
                _b[exports.GENERIC_FILE_TYPE.VIDEO] = {
                    exts: ['asf', 'avi', 'flv', 'mov', 'mp4', 'ogv', 'qt', 'rm', 'rmvb', 'wmv', '3gp']
                },
                _b[exports.GENERIC_FILE_TYPE.WORD] = {
                    exts: ['doc', 'docx']
                },
                _b[exports.GENERIC_FILE_TYPE.EPL] = {
                    exts: ['mon']
                },
                _b);
            this.fileSizeLimitCfg = {
                systemOption: {
                    category: 'files',
                    key: 'max.size'
                },
                defaultBytesLimit: this.DEFAULT_BYTES_LIMIT,
                actualBytesLimit: undefined
            };
        }
        /**
         * Checks if files have valid size.
         * @param files Files to check.
         * @returns Returns true if each file has the correct size.
         */
        FilesService.prototype.haveValidSizes = function (files) {
            return __awaiter(this, void 0, void 0, function () {
                var limit;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.loadBytesSizeLimit()];
                        case 1:
                            limit = _b.sent();
                            return [2 /*return*/, lodashEs.every(files, function (f) {
                                    return _this.size(f) <= limit;
                                })];
                    }
                });
            });
        };
        /**
         * Checks the system file size limit, if not available returns the default value.
         * Default limit: [DEFAULT_BYTES_LIMIT]{@link DEFAULT_BYTES_LIMIT}
         * @returns Returns promise with the limit value.
         */
        FilesService.prototype.loadBytesSizeLimit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var bytesLimit, systemOption, actualBytesLimit, parsedActualBytesLimit, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            bytesLimit = this.DEFAULT_BYTES_LIMIT;
                            if (this.fileSizeLimitCfg.actualBytesLimit) {
                                return [2 /*return*/, this.fileSizeLimitCfg.actualBytesLimit];
                            }
                            systemOption = this.fileSizeLimitCfg.systemOption;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.systemOptionsService.detail(systemOption)];
                        case 2:
                            actualBytesLimit = (_b.sent()).data.value;
                            if (!actualBytesLimit) {
                                return [2 /*return*/, bytesLimit];
                            }
                            parsedActualBytesLimit = parseInt(actualBytesLimit, 10);
                            if (lodashEs.isNaN(parsedActualBytesLimit)) {
                                return [2 /*return*/, bytesLimit];
                            }
                            this.fileSizeLimitCfg.actualBytesLimit = parsedActualBytesLimit;
                            bytesLimit = parsedActualBytesLimit;
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _b.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, bytesLimit];
                    }
                });
            });
        };
        /**
         * Checks the size of the file
         * @param file File to check.
         * @returns Returns size of the file in bytes.
         */
        FilesService.prototype.size = function (file) {
            var fileLength = lodashEs.get(file, 'length') || lodashEs.get(file, 'size');
            var attachments = lodashEs.get(file, '_attachments');
            var attachmentsObj = lodashEs.get(attachments, lodashEs.first(lodashEs.keys(attachments)));
            return lodashEs.isUndefined(fileLength) ? lodashEs.get(attachmentsObj, 'length') : fileLength;
        };
        /**
         * Checks whether files have allowed extensions.
         * If the accept parameter is not specified, all extensions are accepted.
         * @param files Files to check.
         * @param accept String of comma separated file extensions and generic types ([GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}), e.g. .zip,.7z,excel.
         * @returns  Returns true if each file has allowed extension.
         */
        FilesService.prototype.haveValidExtensions = function (files, accept) {
            var _this = this;
            if (!accept) {
                return true;
            }
            var filesArray = files.item
                ? Array.from(files)
                : Array.isArray(files)
                    ? files
                    : [files];
            var filesExts = filesArray.map(function (file) { var _a; return (_a = _this.getFileExtension(file)) === null || _a === void 0 ? void 0 : _a.toLowerCase(); });
            var allowedExts = this.extractFileExtensions(accept);
            return filesExts.every(function (ext) { return allowedExts.includes(ext); });
        };
        /**
         * Checks if each file has a valid filename length.
         * @param files Files to check.
         * @returns Returns true if each file has a valid filename length.
         */
        FilesService.prototype.checkMaxLength = function (files) {
            var _this = this;
            return lodashEs.every(files, function (f) {
                return _this.FILENAME_MAX_LENGTH > f.name.length;
            });
        };
        /**
         * Extracts the file extension.
         * @param file File from which the extension should be extracted.
         * @returns Returns the file extension or undefined if the file has no extension.
         */
        FilesService.prototype.getFileExtension = function (file) {
            var fileNameAndFileExt = file.name.split('.');
            if (fileNameAndFileExt.length === 1) {
                // no file ext
                return undefined;
            }
            return fileNameAndFileExt.pop();
        };
        /**
         * List of file extensions.
         * @returns Returns list of file extensions.
         */
        FilesService.prototype.getFileExtensions = function () {
            return lodashEs.uniq(lodashEs.flatten(lodashEs.map(this.fileTypeExtensionsMap, function (_b) {
                var exts = _b.exts;
                return exts;
            })));
        };
        /**
         * The list of generic file types.
         * @returns Returns the list of generic file types.
         */
        FilesService.prototype.getGenericFileTypes = function () {
            return Object.keys(this.fileTypeExtensionsMap);
        };
        /**
         * @ignore
         */
        FilesService.prototype.mapGenericFileTypesToExtensions = function (genericFileTypes) {
            var _this = this;
            if (genericFileTypes === void 0) { genericFileTypes = []; }
            var fileExts = genericFileTypes.map(function (gT) {
                var exts = _this.fileTypeExtensionsMap[gT].exts;
                return exts;
            });
            return lodashEs.uniq(lodashEs.flatten(fileExts));
        };
        /**
         * Extracts a list of file extensions from a string.
         * Can accept generic file types check: [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}.
         *
         * @param str String from which the file extensions are extracted (comma separated values).
         * Accepted string format:
         * * ".zip,.iso",
         * * "zip,ISO",
         * * "archive".
         * Important: generic types cannot contain a dot. All values with a dot are treated as a normal extension.
         * @returns Returns a list of the file extensions.
         */
        FilesService.prototype.extractFileExtensions = function (str) {
            var _this = this;
            if (!str) {
                return [];
            }
            var types = str.split(',').map(function (t) { return t.toLowerCase().trim(); });
            var genericTypes = types.filter(function (t) { return _this.isGenericType(t); });
            var defaultFileExts = types.filter(function (t) { return !_this.isGenericType(t); });
            var allTypes = __spreadArray(__spreadArray([], __read(this.mapGenericFileTypesToExtensions(genericTypes))), __read(defaultFileExts)).map(function (t) { return t.replace('.', ''); });
            return lodashEs.uniq(allTypes);
        };
        /**
         * Converts a file to a base64 image string.
         *
         * @param file The file to convert to base 64.
         * @returns The image string in base64 format.
         */
        FilesService.prototype.toBase64 = function (file) {
            return new Promise(function (resolve, reject) {
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function () { return resolve(reader.result); };
                reader.onerror = function (error) { return reject(error); };
            });
        };
        /**
         * Allows to get a File representation of an managed object binary. Can be used
         * to convert this file toBase64 to show it to the end-user.
         * @param binary The binary managed object
         * @returns The file representation.
         */
        FilesService.prototype.getFile = function (binary) {
            return __awaiter(this, void 0, void 0, function () {
                var res, arrayBuffer;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.inventoryBinaryService.download(binary.id)];
                        case 1:
                            res = _b.sent();
                            return [4 /*yield*/, res.arrayBuffer()];
                        case 2:
                            arrayBuffer = _b.sent();
                            return [2 /*return*/, new File([arrayBuffer], binary.name, { type: binary.contentType })];
                    }
                });
            });
        };
        /**
         * Allows to download a file (opens the browser download prompt).
         * @param binary The binary managed object.
         */
        FilesService.prototype.download = function (binary) {
            return __awaiter(this, void 0, void 0, function () {
                var file;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getFile(binary)];
                        case 1:
                            file = _b.sent();
                            fileSaver.saveAs(file);
                            return [2 /*return*/];
                    }
                });
            });
        };
        FilesService.prototype.isGenericType = function (type) {
            return Object.values(exports.GENERIC_FILE_TYPE).includes(type);
        };
        return FilesService;
    }());
    FilesService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function FilesService_Factory() { return new FilesService(i0__namespace.ɵɵinject(i1__namespace$1.SystemOptionsService), i0__namespace.ɵɵinject(i2__namespace$1.InventoryBinaryService)); }, token: FilesService, providedIn: "root" });
    FilesService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    FilesService.ctorParameters = function () { return [
        { type: client.SystemOptionsService },
        { type: client.InventoryBinaryService }
    ]; };

    var LoadMoreComponent = /** @class */ (function () {
        function LoadMoreComponent(element, cdRef) {
            this.element = element;
            this.cdRef = cdRef;
            this.useIntersection = true;
            this.hidden = false;
            this.class = 'c8y-list__item p-0';
            this.maxIterations = 10;
            this.hideNoMoreDataHint = false;
            this.onLoad = new i0.EventEmitter();
            this.isLoading = false;
            this.counter = 0;
            this.hasNoMoreData = false;
            this.LOAD_SAME_PAGE_THRESHOLD = 50;
            this.destroyed = false;
        }
        Object.defineProperty(LoadMoreComponent.prototype, "hostClass", {
            get: function () {
                return this.hidden || (!this.hasMore && !this.hasNoMoreData) ? '' : this.class;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadMoreComponent.prototype, "hasMore", {
            get: function () {
                return (this.paging && (this.paging.totalPages > this.paging.currentPage || !!this.paging.nextPage));
            },
            enumerable: false,
            configurable: true
        });
        LoadMoreComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.destroyed = false;
            if (this.useIntersection && 'IntersectionObserver' in window) {
                this.intersectionObserver = new IntersectionObserver(function (event) { return _this.buttonInView(event[0]); }, {
                    root: this.container ? this.container.nativeElement : null
                });
                this.intersectionObserver.observe(this.element.nativeElement);
            }
            this.hasNoMoreData = this.shouldShowNoMoreDataHint();
        };
        LoadMoreComponent.prototype.ngOnDestroy = function () {
            this.destroyed = true;
            if (this.intersectionObserver) {
                this.intersectionObserver.disconnect();
                this.intersectionObserver.unobserve(this.element.nativeElement);
                clearTimeout(this.loadUntilIntersected);
            }
        };
        LoadMoreComponent.prototype.loadMore = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.destroyed) return [3 /*break*/, 4];
                            this.isLoading = true;
                            this.cdRef.detectChanges();
                            if (event) {
                                event.stopPropagation();
                            }
                            if (!this.hasMore) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.paging.next()];
                        case 1:
                            result = _a.sent();
                            this.paging = result.paging;
                            this.onLoad.emit(result.data);
                            this.intersectionLoading();
                            this.hasNoMoreData = this.shouldShowNoMoreDataHint();
                            return [3 /*break*/, 3];
                        case 2:
                            this.counter = 0;
                            this.isLoading = false;
                            _a.label = 3;
                        case 3:
                            this.cdRef.detectChanges();
                            _a.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        LoadMoreComponent.prototype.intersectionLoading = function () {
            var _this = this;
            if (this.useIntersection && this.hasMore && this.loadUntilIntersected !== null) {
                this.loadUntilIntersected = setTimeout(function () { return _this.loadMore(); }, this.getLoadingThreshold());
                this.useIntersection = this.shouldSwitchMode();
            }
            else {
                this.isLoading = false;
                this.loadUntilIntersected = undefined;
                this.cdRef.detectChanges();
            }
        };
        LoadMoreComponent.prototype.getLoadingThreshold = function () {
            return this.LOAD_SAME_PAGE_THRESHOLD * this.counter++;
        };
        LoadMoreComponent.prototype.shouldShowNoMoreDataHint = function () {
            return (this.counter !== 0 || this.noMoreDataHint) && !this.hasMore && !this.hidden;
        };
        LoadMoreComponent.prototype.shouldSwitchMode = function () {
            return this.counter < this.maxIterations || this.hidden;
        };
        LoadMoreComponent.prototype.buttonInView = function (event) {
            if (event.isIntersecting) {
                this.loadMore();
            }
            else if (this.loadUntilIntersected) {
                clearTimeout(this.loadUntilIntersected);
                this.loadUntilIntersected = null;
                this.isLoading = false;
                this.cdRef.detectChanges();
            }
            else {
                // avoiding a race condition when timeout is faster
                // cleared then set
                this.loadUntilIntersected = null;
            }
        };
        return LoadMoreComponent;
    }());
    LoadMoreComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-load-more',
                    template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  (click)=\"loadMore($event)\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  *ngIf=\"hasMore && !(loadingTemplate && isLoading)\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  title=\"{{ 'Load more' | translate }}\"\n>\n  <ng-container *ngIf=\"!isLoading\">\n    <span *ngIf=\"loadNextLabel; else loadPage\" [innerHTML]=\"loadNextLabel | translate\"></span>\n    <ng-template #loadPage>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Load page {{ pageNo }}</span\n      >\n    </ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"isLoading\">\n    <span *ngIf=\"loadingLabel; else loading\" [innerHTML]=\"loadingLabel | translate\"></span>\n    <ng-template #loading>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Page {{ pageNo }} is loading\u2026\n      </span>\n    </ng-template>\n  </ng-container>\n</button>\n\n<ng-container *ngIf=\"hasNoMoreData && !hideNoMoreDataHint && !isLoading\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center last-record\" title=\"{{ 'Last record' | translate }}\">\n    <i [c8yIcon]=\"'circle'\"></i>\n  </div>\n</ng-template>\n\n<ng-container *ngIf=\"loadingTemplate && isLoading\">\n  <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n</ng-container>\n"
                },] }
    ];
    LoadMoreComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    LoadMoreComponent.propDecorators = {
        paging: [{ type: i0.Input }],
        useIntersection: [{ type: i0.Input }],
        hidden: [{ type: i0.Input }],
        container: [{ type: i0.Input }],
        class: [{ type: i0.Input }],
        maxIterations: [{ type: i0.Input }],
        noMoreDataHint: [{ type: i0.Input }],
        loadingTemplate: [{ type: i0.Input }],
        hideNoMoreDataHint: [{ type: i0.Input }],
        loadNextLabel: [{ type: i0.Input }],
        loadingLabel: [{ type: i0.Input }],
        onLoad: [{ type: i0.Output }],
        hostClass: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var VirtualScrollerWrapperComponent = /** @class */ (function () {
        function VirtualScrollerWrapperComponent() {
            this.filterPipe = rxjs.pipe(operators.tap());
            this.trackByFn = function (i, item) {
                return item.id;
            };
        }
        VirtualScrollerWrapperComponent.prototype.apply = function () {
            var _this = this;
            this.items$ = rxjs.of(this.items).pipe(function (src) { return _this.filterPipe(src); }, operators.map(function (item) { return item; }));
        };
        return VirtualScrollerWrapperComponent;
    }());
    VirtualScrollerWrapperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-virtual-scroller-wrapper',
                    template: "<ng-container *ngIf=\"items$ |async as items\" [ngSwitch]=\"strategy\">\n    <ng-container *ngSwitchCase=\"'window'\">\n      <cdk-virtual-scroll-viewport windowVirtualScrollStrategy [itemSizePx]=\"itemHeight\">\n        <div *cdkVirtualFor=\"let item of items; index as i; trackBy: trackByFn\">\n          <ng-container *ngTemplateOutlet=\"template; context: {$implicit: item, index: i}\"></ng-container>\n        </div>\n      </cdk-virtual-scroll-viewport>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'fixed'\">\n      <cdk-virtual-scroll-viewport [itemSize]=\"itemHeight\" [style.height]=\"containerHeight + 'px'\">\n        <div *cdkVirtualFor=\"let item of items; index as i; trackBy: trackByFn\" >\n          <ng-container *ngTemplateOutlet=\"template; context: {$implicit: item, index: i}\"></ng-container>\n        </div>\n      </cdk-virtual-scroll-viewport>\n    </ng-container>\n</ng-container>\n"
                },] }
    ];
    VirtualScrollerWrapperComponent.propDecorators = {
        items: [{ type: i0.Input }],
        itemHeight: [{ type: i0.Input }],
        containerHeight: [{ type: i0.Input }],
        template: [{ type: i0.Input }],
        filterPipe: [{ type: i0.Input }],
        strategy: [{ type: i0.Input }],
        trackByFn: [{ type: i0.Input }]
    };

    /**
     * A directive to iterate over IResultList<T> data from @c8y/client.
     * Depending on the [c8yForLoadMore] a load more button is:
     *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
     *          change with maxIterations settings).
     *  - show: Shows a load more button for the user to decide
     *  - none: Doesn't perform any load more action.
     *  - hidden: Loads more data automatically but with no visible button for the user.
     *
     * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
     * filter the data displayed currently as well as the data loaded by subsequent requests.
     *
     * Example:
     * ```html
     * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
     *  {{ i + 1 }}. {{device.name}}
     * </div>
     * ```
     * The above example will list all entities that are applied to `devices`:
     * ```typescript
     * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
     * ```
     * It will display the first 10 items, if there is more space left on the screen, and there are more
     * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
     * it will stop and switch to `show` mode.
     *
     * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
     * request done by the load more component:
     * ```typescript
     * this.filterPipe = pipe(
     *    map((data: []) => {
     *     return data.filter(
     *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
     *    );
     *  })
     * );
     * ```
     * The pipe must be an rxjs pipe and can take any operator.
     *
     * Example with realtime support and items count output (e.g. for handling empty state and header):
     *
     * ```html
     * <c8y-list-group>
     *   <div class="c8y-empty-state" *ngIf="count === 0">
     *     (...)
     *   </div>
     *
     *   <div class="page-sticky-header hidden-xs c8y-list__item c8y-list--timeline" *ngIf="count > 0">
     *     (...)
     *   </div>
     *
     *   <ng-template
     *     c8yFor
     *     let-operation
     *     [c8yForOf]="items$"
     *     [c8yForPipe]="filterPipe"
     *     [c8yForRealtime]="realtime"
     *     [c8yForRealtimeOptions]="realtimeOptions"
     *     (c8yForCount)="count = $event"
     *   >
     *     <c8y-li-timeline>
     *       (...)
     *     </c8y-li-timeline>
     *   </ng-template>
     * </c8y-list-group>
     * ```
     *
     * ```typescript
     * @Component({
     *   (...)
     * })
     * export class ExampleComponent {
     *   @Input() deviceId: IIdentified;
     *   items$ = this.operationService.list({
     *     deviceId: this.deviceId,
     *     fragmentType: 'c8y_MyOperation',
     *     dateFrom: new Date(0).toISOString(),
     *     dateTo: new Date(Date.now()).toISOString(),
     *     revert: true,
     *     withTotalPages: true
     *   });
     *   filterPipe = pipe(map((ops: IOperation[]) => ops.filter(op => op.c8y_MyOperation)));
     *   realtimeOptions: ForOfRealtimeOptions = {
     *     entityOrId: this.deviceId,
     *     removeOnUpdate: true,
     *     insertOnUpdate: true
     *   } as ForOfRealtimeOptions;
     *   count: number;
     *
     *   constructor(
     *     private operationService: OperationService,
     *     public realtime: OperationRealtimeService
     *   ) {}
     * }
     * ```
     */
    var ForOfDirective = /** @class */ (function () {
        function ForOfDirective(tpl, vcr, componentFactoryResolver, cdRef) {
            var _this = this;
            this.tpl = tpl;
            this.vcr = vcr;
            this.componentFactoryResolver = componentFactoryResolver;
            this.cdRef = cdRef;
            this.cachedData = [];
            this.loadMoreMode = 'auto';
            this.dataPipe = rxjs.pipe(operators.tap());
            this.itemDataPipe = rxjs.pipe(operators.map(function (item) { return [item]; }), function (src) { return _this.dataPipe(src); }, operators.map(function (_a) {
                var _b = __read(_a, 1), item = _b[0];
                return item;
            }));
            this.maxIterations = 10;
            this.realtimeOptions = {};
            this.unsubscribe$ = new rxjs.Subject();
            /**
             * Enable virtual scroll rendering method.
             */
            this.c8yForEnableVirtualScroll = false;
            /**
             * Sets mode of virtual scroller instance.
             * window is used for case when whole viewport is scrolled.
             * fixed can be used on inner-scroll containers.
             */
            this.c8yForVirtualScrollStrategy = 'window';
            /**
             * The number of items currently loaded in the list.
             */
            this.c8yForCount = new i0.EventEmitter();
            this.count = 0;
        }
        Object.defineProperty(ForOfDirective.prototype, "shouldUseLoadMoreButton", {
            get: function () {
                return (this.loadMoreMode === 'auto' || this.loadMoreMode === 'show' || this.loadMoreMode === 'hidden');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "hasMoreData", {
            get: function () {
                return this.loadMore && this.loadMore.hasMore;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "length", {
            get: function () {
                return this.cachedData.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForOf", {
            /**
             * The data setter. Must be a response from @c8y/data or an observable.
             * You can pass an observable with null to explicitly clear the list.
             */
            set: function (fetchData) {
                var _this = this;
                if (fetchData) {
                    this.obs$ = (rxjs.isObservable(fetchData) ? fetchData : rxjs.of(fetchData)).pipe(operators.map(function (result) {
                        if (result === null) {
                            _this.paging = null;
                            return [];
                        }
                        var paging = result.paging, data = result.data;
                        _this.paging = paging;
                        return data;
                    }));
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForLoadMore", {
            /**
             * The mode setter:
             *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
             *          change with maxIterations settings).
             *  - show: Shows a load more button for the user to decide
             *  - none: Doesn't perform any load more action.
             *  - hidden: Loads more data automatically but with no visible button for the user.
             */
            set: function (type) {
                this.loadMoreMode = type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForPipe", {
            /**
             * The pipe setter to attach any rxjs pipe to the current and more loaded data.
             */
            set: function (dataPipe) {
                if (dataPipe) {
                    this.dataPipe = dataPipe;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForNotFound", {
            /**
             * A template to use if no data is found at all (e.g. if you apply a filter pipe).
             */
            set: function (notFoundTemplate) {
                this.notFoundTemplate = notFoundTemplate;
                if (this.loadMore) {
                    this.loadMore.noMoreDataHint = notFoundTemplate;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForMaxIterations", {
            /**
             * The maximum numbers of iterations to call data from the api.
             */
            set: function (maxIterations) {
                this.maxIterations = maxIterations;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForLoadingTemplate", {
            /**
             * A custom loading component.
             */
            set: function (loadingTemplate) {
                this.loadingTemplate = loadingTemplate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForLoadNextLabel", {
            /**
             * Load next text label.
             */
            set: function (loadNextLabel) {
                this.loadNextLabel = loadNextLabel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForRealtime", {
            /**
             * A RealtimeService instance.
             */
            set: function (source) {
                this.realtime = source;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForRealtimeOptions", {
            /**
             * Realtime options.
             */
            set: function (realtimeOptions) {
                this.realtimeOptions = realtimeOptions;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForComparator", {
            /**
             * A comparator function for comparing list items. Used to determine
             * the position at which a new element should be added to the list.
             */
            set: function (comparator) {
                this.comparator = comparator;
            },
            enumerable: false,
            configurable: true
        });
        ForOfDirective.prototype.ngOnInit = function () {
            this.handleRealtime();
        };
        ForOfDirective.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (this.obs$ && (changes.c8yForPipe || changes.c8yForOf)) {
                this.unsubscribePaging();
                if (this.virtualScrollInstance) {
                    this.virtualScrollInstance.filterPipe = this.dataPipe;
                    window.scrollTo({ top: 0 });
                }
                // only re-rendering  on filtering if all data is already loaded
                // from the backend
                var reRender_1 = !this.hasMoreData && !!changes.c8yForPipe && !changes.c8yForOf;
                if (reRender_1) {
                    this.obs$ = rxjs.of(this.cachedData);
                }
                this.pagingSub = this.obs$
                    .pipe(operators.tap(function (data) {
                    if (!reRender_1) {
                        _this.cachedData = data;
                    }
                }))
                    .pipe(function (src) { return _this.dataPipe(src); })
                    .subscribe(function (data) {
                    _this.updateCount(data.length);
                    _this.render(data, reRender_1);
                });
            }
        };
        ForOfDirective.prototype.ngOnDestroy = function () {
            this.unsubscribePaging();
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        ForOfDirective.prototype.handleRealtime = function () {
            if (this.realtime) {
                this.handleRealtimeCreate();
                this.handleRealtimeUpdate();
                this.handleRealtimeDelete();
            }
        };
        /**
         * On create notification:
         * - if item passes data pipe, then insert it.
         * @private
         */
        ForOfDirective.prototype.handleRealtimeCreate = function () {
            var _this = this;
            var entityOrId = this.realtimeOptions.entityOrId;
            this.realtime
                .onCreate$(entityOrId)
                .pipe(function (item$) { return _this.itemDataPipe(item$); }, operators.filter(function (item) { return item; }), operators.takeUntil(this.unsubscribe$))
                .subscribe(function (item) { return _this.insert(item); });
        };
        /**
         * On update notification:
         * - if item is displayed and passes data pipe, then update it,
         * - if item is displayed and doesn't pass data pipe, then remove it (if `removeOnUpdate` is true),
         * - if item is not displayed and passes data pipe, then insert it (if `insertOnUpdate` is true),
         * - if item is not displayed and doesn't pass data pipe, then ignore it.
         * @private
         */
        ForOfDirective.prototype.handleRealtimeUpdate = function () {
            var _this = this;
            var entityOrId = this.realtimeOptions.entityOrId;
            this.realtime
                .onUpdate$(entityOrId)
                .pipe(function (item$) { return rxjs.combineLatest([
                item$,
                item$.pipe(function (src) { return _this.itemDataPipe(src); }, operators.map(function (item) { return item !== undefined; }))
            ]); }, operators.takeUntil(this.unsubscribe$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), item = _b[0], passesDataPipe = _b[1];
                var _c = _this.realtimeOptions, insertOnUpdate = _c.insertOnUpdate, removeOnUpdate = _c.removeOnUpdate;
                var displayed = _this.isDisplayed(coercion.coerceNumberProperty(item.id));
                if (displayed) {
                    if (passesDataPipe) {
                        _this.update(item);
                    }
                    else if (removeOnUpdate) {
                        _this.remove(coercion.coerceNumberProperty(item.id));
                    }
                }
                else if (passesDataPipe && insertOnUpdate) {
                    _this.insert(item);
                }
            });
        };
        /**
         * On delete notification:
         * - remove item from the list (if not there, it will be just ignored).
         * @private
         */
        ForOfDirective.prototype.handleRealtimeDelete = function () {
            var _this = this;
            var entityOrId = this.realtimeOptions.entityOrId;
            this.realtime
                .onDelete$(entityOrId)
                .pipe(operators.takeUntil(this.unsubscribe$))
                .subscribe(function (id) { return _this.remove(coercion.coerceNumberProperty(id)); });
        };
        ForOfDirective.prototype.render = function (data, reRender) {
            var _this = this;
            if (reRender === void 0) { reRender = false; }
            if (this.c8yForEnableVirtualScroll) {
                if (!this.virtualScrollInstance) {
                    this.virtualScrollInstance = this.createVirtualScrollWrapperComponent();
                    if (this.shouldUseLoadMoreButton) {
                        this.loadMore = this.createLoadMoreButtonComponent(false);
                    }
                }
                this.setVirtualScrollContents(data);
                return;
            }
            this.vcr.clear();
            data.forEach(function (item, index) {
                var context = {
                    $implicit: item,
                    index: index,
                    length: _this.length,
                    hasMore: _this.hasMoreData,
                    loadMoreComponent: _this.loadMore
                };
                _this.vcr.createEmbeddedView(_this.tpl, context);
            });
            if (this.shouldUseLoadMoreButton) {
                this.loadMore = this.createLoadMoreButtonComponent(reRender);
            }
        };
        ForOfDirective.prototype.append = function (data) {
            var _this = this;
            if (this.c8yForEnableVirtualScroll) {
                this.appendVirtualScrollContent(data);
                return;
            }
            data.forEach(function (item) {
                var index = _this.shouldUseLoadMoreButton ? _this.vcr.length - 1 : _this.vcr.length;
                var context = {
                    $implicit: item,
                    index: index,
                    length: _this.length,
                    hasMore: _this.hasMoreData,
                    loadMoreComponent: _this.loadMore
                };
                _this.vcr.createEmbeddedView(_this.tpl, context, index);
            });
        };
        ForOfDirective.prototype.loadMoreData = function (data) {
            if (data.length > 0) {
                this.updateCount(data.length);
                this.append(data);
            }
            this.cdRef.detectChanges();
        };
        ForOfDirective.prototype.createLoadMoreButtonComponent = function (reRender) {
            var _this = this;
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(LoadMoreComponent);
            var componentRef = this.vcr.createComponent(componentFactory);
            var instance = componentRef.instance;
            instance.paging = this.paging;
            instance.useIntersection = this.loadMoreMode === 'auto' || this.loadMoreMode === 'hidden';
            instance.hidden = this.loadMoreMode === 'hidden';
            instance.maxIterations = this.maxIterations;
            instance.noMoreDataHint = this.notFoundTemplate;
            instance.loadingTemplate = this.loadingTemplate;
            instance.loadNextLabel = this.loadNextLabel;
            this.pagingSub = instance.onLoad
                .pipe(operators.map(function (data) { return _this.checkForDuplicates(data); }), operators.tap(function (data) {
                _this.cachedData = _this.cachedData.concat(data);
            }))
                .pipe(function (src) { return _this.dataPipe(src); })
                .subscribe(function (data) { return _this.loadMoreData(data); });
            if (reRender) {
                lodashEs.assign(instance, this.loadMore);
            }
            return instance;
        };
        ForOfDirective.prototype.createVirtualScrollWrapperComponent = function () {
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(VirtualScrollerWrapperComponent);
            var componentRef = this.vcr.createComponent(componentFactory);
            var instance = componentRef.instance;
            instance.items = this.cachedData;
            instance.itemHeight = this.c8yForVirtualScrollElementSize;
            instance.template = this.tpl;
            instance.strategy = this.c8yForVirtualScrollStrategy;
            instance.containerHeight = this.c8yForVirtualScrollContainerHeight;
            return instance;
        };
        ForOfDirective.prototype.insert = function (item) {
            var index = 0;
            if (this.comparator && this.cachedData.length) {
                var comparisionResult = void 0;
                do {
                    var view = this.vcr.get(index);
                    var itemB = lodashEs.get(view, 'context.$implicit');
                    comparisionResult = item && itemB ? this.comparator(item, itemB) : 0;
                    if (comparisionResult <= 0) {
                        index++;
                    }
                } while (comparisionResult <= 0 && index < this.cachedData.length);
            }
            // Do not append elements after the last one currently loaded,
            // as it may belong further down there on the list and will
            // be eventually loaded with one of the next pages.
            if (index < this.cachedData.length || this.cachedData.length === 0) {
                var context = {
                    $implicit: item,
                    index: index,
                    length: this.length,
                    hasMore: this.hasMoreData
                };
                this.cachedData.splice(index, 0, item);
                var viewRef = this.tpl.createEmbeddedView(context);
                this.vcr.insert(viewRef, index);
                this.updateCount(1);
            }
        };
        ForOfDirective.prototype.update = function (updatedItem) {
            this.forMatchingEmbeddedViewRef(function (item) { return item && updatedItem && item.id === updatedItem.id; }, function (view) {
                view.context.$implicit = updatedItem;
                view.markForCheck();
            });
        };
        ForOfDirective.prototype.remove = function (idToRemove) {
            if (this.isDisplayed(idToRemove)) {
                this.updateCount(-1);
            }
            this.forMatchingEmbeddedViewRef(function (item) { return item && coercion.coerceNumberProperty(item.id, NaN) === idToRemove; }, function (view) { return view.destroy(); });
        };
        ForOfDirective.prototype.updateCount = function (countChange) {
            this.count += countChange;
            this.c8yForCount.emit(this.count);
        };
        ForOfDirective.prototype.isDisplayed = function (idToCheck) {
            var displayed = false;
            this.forMatchingEmbeddedViewRef(function (item) { return item && coercion.coerceNumberProperty(item.id, NaN) === idToCheck; }, function () { displayed = true; });
            return displayed;
        };
        ForOfDirective.prototype.forMatchingEmbeddedViewRef = function (filterFn, callbackFn) {
            for (var i = 0; i < this.vcr.length; i++) {
                var view = this.vcr.get(i);
                var item = lodashEs.get(view, 'context.$implicit');
                if (filterFn(item)) {
                    callbackFn(view);
                }
            }
        };
        ForOfDirective.prototype.checkForDuplicates = function (data) {
            var _this = this;
            return this.realtime
                ? data.filter(function (item) { return !_this.cachedData.some(function (cached) { return cached.id === item.id; }); })
                : data;
        };
        ForOfDirective.prototype.unsubscribePaging = function () {
            if (this.pagingSub) {
                this.pagingSub.unsubscribe();
            }
        };
        ForOfDirective.prototype.setVirtualScrollContents = function (items) {
            if (this.c8yForEnableVirtualScroll && this.virtualScrollInstance) {
                this.virtualScrollInstance.items = items;
                this.virtualScrollInstance.apply();
            }
        };
        ForOfDirective.prototype.appendVirtualScrollContent = function (items) {
            if (this.c8yForEnableVirtualScroll && this.virtualScrollInstance) {
                this.virtualScrollInstance.items = this.virtualScrollInstance.items.concat(items);
                this.virtualScrollInstance.apply();
            }
        };
        return ForOfDirective;
    }());
    ForOfDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yFor]'
                },] }
    ];
    ForOfDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: i0.ComponentFactoryResolver },
        { type: i0.ChangeDetectorRef }
    ]; };
    ForOfDirective.propDecorators = {
        c8yForOf: [{ type: i0.Input }],
        c8yForLoadMore: [{ type: i0.Input }],
        c8yForPipe: [{ type: i0.Input }],
        c8yForNotFound: [{ type: i0.Input }],
        c8yForMaxIterations: [{ type: i0.Input }],
        c8yForLoadingTemplate: [{ type: i0.Input }],
        c8yForLoadNextLabel: [{ type: i0.Input }],
        c8yForRealtime: [{ type: i0.Input }],
        c8yForRealtimeOptions: [{ type: i0.Input }],
        c8yForComparator: [{ type: i0.Input }],
        c8yForEnableVirtualScroll: [{ type: i0.Input }],
        c8yForVirtualScrollElementSize: [{ type: i0.Input }],
        c8yForVirtualScrollStrategy: [{ type: i0.Input }],
        c8yForVirtualScrollContainerHeight: [{ type: i0.Input }],
        c8yForCount: [{ type: i0.Output }]
    };

    /*
     * Humanize an application name and translates it.
     * Usage:
     *   appNameOrApp | humanizeAppName | async
    */
    var HumanizeAppNamePipe = /** @class */ (function () {
        function HumanizeAppNamePipe(translateService) {
            this.translateService = translateService;
            this.internalApps = {
                administration: 'Administration',
                cockpit: 'Cockpit',
                devicemanagement: 'Device management'
            };
        }
        HumanizeAppNamePipe.prototype.transform = function (appNameOrApp) {
            if (appNameOrApp === void 0) { appNameOrApp = 'Cumulocity'; }
            var appName = this.getAppName(appNameOrApp);
            var text;
            if (this.isPublicApp(appNameOrApp)) {
                text = gettext('{{ appName | translate }} (public)');
            }
            else {
                text = appName;
            }
            return this.translateService.stream(text, { appName: appName });
        };
        HumanizeAppNamePipe.prototype.getAppName = function (appNameOrApp) {
            var appName = this.getFirstDefined([
                lodash.get(appNameOrApp, 'name'),
                lodash.get(appNameOrApp, 'contextPath'),
                appNameOrApp
            ]) || '';
            return this.internalApps[appName] || this.humanize(appName);
        };
        HumanizeAppNamePipe.prototype.getFirstDefined = function (values) {
            return lodash.find(values, lodash.negate(lodash.isUndefined));
        };
        HumanizeAppNamePipe.prototype.isPublicApp = function (appNameOrApp) {
            return Boolean(lodash.get(appNameOrApp, 'public'));
        };
        HumanizeAppNamePipe.prototype.humanize = function (str) {
            if (str === void 0) { str = ''; }
            var result = str.replace(/_/g, ' ').split('');
            result[0] = (result[0] || '').toUpperCase();
            return result.join('');
        };
        return HumanizeAppNamePipe;
    }());
    HumanizeAppNamePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'humanizeAppName' },] }
    ];
    HumanizeAppNamePipe.ctorParameters = function () { return [
        { type: i2.TranslateService }
    ]; };

    /*
     * Humanize any string
     * Usage:
     *   'something' | humanize
    */
    var HumanizePipe = /** @class */ (function () {
        function HumanizePipe() {
        }
        HumanizePipe.humanize = function (str) {
            if (str === void 0) { str = ''; }
            str = str
                .replace(/\./g, ' ')
                .replace(/c8y[\s,_]*/gi, '')
                .replace(/_/g, ' ')
                .replace(/([A-Z][a-z])/g, ' $1')
                .replace(/^\$\.?/, '')
                .replace(/^\s*/, '')
                .replace(/\s*$/, '')
                .replace(/\s+/g, ' ');
            return lodashEs.upperFirst(str);
        };
        HumanizePipe.prototype.transform = function (str) {
            return HumanizePipe.humanize(str);
        };
        return HumanizePipe;
    }());
    HumanizePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'humanize' },] }
    ];

    /**
     * Allows to set a icon. Switches between c8y default icons
     * and font awesome icons
     * @example <i [c8yIcon]="'clock'">
     */
    var IconDirective = /** @class */ (function () {
        function IconDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.c8yMatch = /^c8y-/;
            this.klasses = [];
            this.currentClasses = '';
        }
        Object.defineProperty(IconDirective.prototype, "c8yIcon", {
            set: function (icon) {
                this.updateIcon(icon);
            },
            enumerable: false,
            configurable: true
        });
        IconDirective.prototype.isC8y = function (icon) {
            return this.c8yMatch.test(icon);
        };
        IconDirective.prototype.getClasses = function (icon) {
            if (icon === void 0) { icon = ''; }
            var classes = '';
            if (icon) {
                var _icon = icon.trim();
                var isC8y = this.isC8y(_icon);
                var iconClass = isC8y ? _icon.replace(this.c8yMatch, 'c8y-icon-') : "dlt-c8y-icon-" + _icon;
                classes = (isC8y ? 'c8y-icon' : '') + " " + iconClass;
            }
            return classes;
        };
        IconDirective.prototype.updateIcon = function (icon) {
            var _this = this;
            var newClasses = this.getClasses(icon);
            if (newClasses !== this.currentClasses) {
                this.currentClasses.split(/\s/).filter(function (c) { return c; }).forEach(function (klass) {
                    _this.renderer.removeClass(_this.el.nativeElement, klass);
                });
                newClasses.split(/\s/).filter(function (c) { return c; }).forEach(function (klass) {
                    _this.renderer.addClass(_this.el.nativeElement, klass);
                });
                this.currentClasses = newClasses;
            }
        };
        return IconDirective;
    }());
    IconDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yIcon]',
                },] }
    ];
    IconDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    IconDirective.propDecorators = {
        c8yIcon: [{ type: i0.Input }]
    };
    var ICONS = [
        'home',
        'th',
        'bar-chart-o',
        'tasks',
        'tachometer',
        'bell',
        'puzzle-piece',
        'map-marker',
        'location-arrow',
        'globe',
        'power-off',
        'desktop',
        'laptop',
        'mobile',
        'signal',
        'qrcode',
        'file',
        'file-text',
        'folder',
        'folder-open',
        'archive',
        'ssd',
        'book',
        'bookmark',
        'tag',
        'flag',
        'search',
        'heart',
        'star',
        'bolt',
        'cog',
        'cogs',
        'wrench',
        'ban',
        'user',
        'users',
        'sign-in',
        'sign-out',
        'upload',
        'download',
        'cloud-upload',
        'cloud-download',
        'cloud',
        'hourglass',
        'refresh',
        'repeat',
        'undo',
        'lock',
        'unlock',
        'info',
        'question-circle',
        'exclamation-circle',
        'bug',
        'calendar',
        'random',
        'asterisk',
        'key',
        'link',
        'chain-broken',
        'external-link',
        'picture-o',
        'comment',
        'bullhorn',
        'phone',
        'lightbulb-o',
        'flask',
        'cloud-network',
        'exchange',
        'code-fork',
        'keyboard-o',
        'terminal',
        'code',
        'clipboard',
        'pencil',
        'envelope',
        'inbox',
        'reply',
        'share',
        'thumbs-up',
        'thumbs-down',
        'check',
        'plus',
        'expand',
        'compress',
        'arrows',
        'arrow-up',
        'arrow-down',
        'arrow-left',
        'arrow-right',
        'th-list',
        'bars',
        'table',
        'columns',
        'filter',
        'sort',
        'sort-up',
        'sort-down',
        'ellipsis-h',
        'ellipsis-v',
        'rss'
    ];

    /**
     * Decorator to memoize function results.
     * @param resolver Cache key resolver function, used by memoize from lodash.
     */
    function memoize(resolver) {
        return function (target, fnName, descriptor) {
            var fn = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var memoizedFnName = "_" + fnName + "Memoized";
                if (!this[memoizedFnName]) {
                    this[memoizedFnName] = lodashEs.memoize(fn, resolver);
                }
                return this[memoizedFnName].apply(this, args);
            };
        };
    }

    var Permissions = /** @class */ (function () {
        function Permissions(appState, inventory, user) {
            this.appState = appState;
            this.inventory = inventory;
            this.user = user;
        }
        /**
         * Checks if the current user has write permissions for the given mo.
         * (either through global role, individual device permissions or via inventory roles).
         *
         * @param {array} roleIds Array of roles which the current user should have.
         * @param {IManagedObject | IIdentified} mo The managed object for which we are checking whether the user has access.
         */
        Permissions.prototype.canEdit = function (roleIds, mo) {
            return this.checkIfCanEdit(roleIds, mo);
        };
        Permissions.prototype.hasRole = function (roleId) {
            var currentUser = this.appState.currentUser.value;
            if (!currentUser) {
                throw new Error('Roles can only be requested if the user is logged in.');
            }
            return this.user.hasRole(currentUser, roleId);
        };
        Permissions.prototype.hasAllRoles = function (roleIds) {
            var currentUser = this.appState.currentUser.value;
            if (!currentUser) {
                throw new Error('Roles can only be requested if the user is logged in.');
            }
            return this.user.hasAllRoles(currentUser, roleIds);
        };
        Permissions.prototype.hasAnyRole = function (roleIds) {
            var currentUser = this.appState.currentUser.value;
            if (!currentUser) {
                throw new Error('Roles can only be requested if the user is logged in.');
            }
            return this.user.hasAnyRole(currentUser, roleIds);
        };
        Permissions.prototype.checkIfOwner = function (mo) {
            return __awaiter(this, void 0, void 0, function () {
                var currentUserName, _a, data, res;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.appState.currentUser.value.userName];
                        case 1:
                            currentUserName = _b.sent();
                            return [4 /*yield*/, this.inventory.detail(mo.id)];
                        case 2:
                            _a = _b.sent(), data = _a.data, res = _a.res;
                            return [2 /*return*/, currentUserName === data.owner];
                    }
                });
            });
        };
        Permissions.prototype.checkWithRequest = function (mo) {
            var moName = mo.name;
            var moId = mo.id;
            var partialUpdateObject = {
                id: moId,
                name: moName
            };
            return this.inventory
                .update(partialUpdateObject)
                .then(function (success) {
                return true;
            })
                .catch(function (err) {
                return false;
            });
        };
        Permissions.prototype.checkIfCanEdit = function (roleIds, mo) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.hasAnyRole(roleIds)];
                        case 1:
                            if (!_a.sent()) return [3 /*break*/, 2];
                            return [2 /*return*/, true];
                        case 2: return [4 /*yield*/, this.checkIfOwner(mo)];
                        case 3:
                            if (!_a.sent()) return [3 /*break*/, 4];
                            return [2 /*return*/, true];
                        case 4: return [4 /*yield*/, this.checkWithRequest(mo)];
                        case 5:
                            if (_a.sent()) {
                                return [2 /*return*/, true];
                            }
                            _a.label = 6;
                        case 6: return [2 /*return*/, false];
                    }
                });
            });
        };
        return Permissions;
    }());
    Permissions.decorators = [
        { type: i0.Injectable }
    ];
    Permissions.ctorParameters = function () { return [
        { type: AppStateService },
        { type: client.InventoryService },
        { type: client.UserService }
    ]; };
    __decorate([
        memoize(lodashEs.property('id'))
    ], Permissions.prototype, "checkIfOwner", null);
    __decorate([
        memoize(lodashEs.property('id'))
    ], Permissions.prototype, "checkWithRequest", null);

    /**
     * A structural directive that conditionally includes a template only if the user has
     * all or any of the roles passed as an input. By default the directive checks all roles:
     *
     * ```
     * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']" (click)="delete()" title="Delete">
     *   Delete
     * </button>
     * ```
     *
     * To check if the user has any of the required roles to view the element you need to use the `allowAny` input:
     *
     * ```
     * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny: true" (click)="delete()" title="Delete">
     *   Delete
     * </button>
     * ```
     *
     * or use the shorter version
     *
     * ```
     * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny" (click)="delete()" title="Delete">
     *   Delete
     * </button>
     * ```
     */
    var IfAllowedDirective = /** @class */ (function () {
        function IfAllowedDirective(template, container, permissions) {
            this.template = template;
            this.container = container;
            this.permissions = permissions;
            this.allowAny = false;
        }
        Object.defineProperty(IfAllowedDirective.prototype, "c8yIfAllowed", {
            /**
             * One or many roles required for the element to be rendered
             */
            set: function (roleIds) {
                this.rolesIds = Array.isArray(roleIds) ? roleIds : !!roleIds ? [roleIds] : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IfAllowedDirective.prototype, "c8yIfAllowedAllowAny", {
            /**
             * Switches to the mode where at least one of the provided roles is sufficient for the element to be rendered
             */
            set: function (allowAny) {
                this.allowAny = allowAny === null || allowAny;
            },
            enumerable: false,
            configurable: true
        });
        IfAllowedDirective.prototype.ngOnInit = function () {
            if (!this.rolesIds ||
                !this.rolesIds.length ||
                (this.allowAny
                    ? this.permissions.hasAnyRole(this.rolesIds)
                    : this.permissions.hasAllRoles(this.rolesIds))) {
                this.container.createEmbeddedView(this.template);
            }
        };
        return IfAllowedDirective;
    }());
    IfAllowedDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yIfAllowed]'
                },] }
    ];
    IfAllowedDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: Permissions }
    ]; };
    IfAllowedDirective.propDecorators = {
        c8yIfAllowed: [{ type: i0.Input }],
        c8yIfAllowedAllowAny: [{ type: i0.Input }]
    };

    var LoadingComponent = /** @class */ (function () {
        function LoadingComponent() {
        }
        return LoadingComponent;
    }());
    LoadingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-loading',
                    template: "\n    <div class=\"p-24 p-relative d-inline-block\" >\n      <div class=\"spinner\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n  "
                },] }
    ];

    /*
     * Implementation of pure "Mapping" pipe based on
     * https://codeburst.io/angular-bad-practices-eab0e594ce92#389b
     */
    var MapFunctionPipe = /** @class */ (function () {
        function MapFunctionPipe() {
        }
        /*
         * This will be a universal pipe for array mappings. You may add more
         * type checkings and runtime checkings to make sure it works correctly everywhere.
         */
        MapFunctionPipe.prototype.transform = function (value, mappingFunction, thisArg) {
            return mappingFunction.apply(thisArg || this, Array.isArray(value) ? value : [value]);
        };
        return MapFunctionPipe;
    }());
    MapFunctionPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'map'
                },] }
    ];

    var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
    /**
     * Formats a value according to digit options and locale rules.
     * Extends the behavior of Angular's <code>number</code> pipe by
     * providing an option to define if a truncated value should be
     * rounded up or down (with the <code>number</code> pipe the
     * value will be rounded using the "to-nearest" method).
     *
     * ```html
     * <span>{{ 3.45612 | c8yNumber: 'ceil':'1.1-3' }}</span> <!-- 3.457 -->
     * <span>{{ 3.46 | c8yNumber: 'ceil':'1.3-3' }}</span> <!-- 3.460 -->
     * <span>{{ 3.45685 | c8yNumber: 'floor':'1.1-3' }}</span> <!-- 3.456 -->```
     */
    var NumberPipe = /** @class */ (function (_super) {
        __extends(NumberPipe, _super);
        function NumberPipe(locale) {
            return _super.call(this, locale) || this;
        }
        /**
         * @param value The value to be formatted.
         * @param round When the value needs to be truncated defines if it will be rounded up (='ceil') or down (='floor')
         * @param digitsInfo Sets digit and decimal representation.
         * @param locale Specifies what locale format rules to use.
         */
        NumberPipe.prototype.transform = function (value, round, digitsInfo, locale) {
            if (round) {
                var maxFractionPart = 0;
                if (digitsInfo) {
                    var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
                    if (parts === null) {
                        throw new Error(digitsInfo + " is not a valid digit info");
                    }
                    maxFractionPart = Number.parseInt(parts[5], 10);
                }
                var multiplicator = Math.pow(10, maxFractionPart);
                value = strToNumber(value);
                value = Math[round](value * multiplicator) / multiplicator;
            }
            return _super.prototype.transform.call(this, value, digitsInfo, locale);
        };
        return NumberPipe;
    }(common.DecimalPipe));
    NumberPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'c8yNumber' },] }
    ];
    NumberPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };
    /**
     * Transforms a string into a number (if needed).
     */
    function strToNumber(value) {
        // Convert strings to numbers
        if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
            return Number(value);
        }
        if (typeof value !== 'number') {
            throw new Error(value + " is not a number");
        }
        return value;
    }

    var OperationResultComponent = /** @class */ (function () {
        function OperationResultComponent() {
        }
        return OperationResultComponent;
    }());
    OperationResultComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-operation-result',
                    template: "<style>\n  .stroke-anim {\n    animation: stroke-anim 0.75s ease-in-out 0s 1 forwards;\n  }\n  .check-anim {\n    animation: check-anim 0.35s ease-in-out 0.5s 1 forwards;\n  }\n  .symbol-anim {\n    animation: symbol-anim 0.35s ease-in-out 0.5s 1 forwards;\n  }\n\n  @keyframes stroke-anim {\n    0% {\n      stroke-dashoffset: 60;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  @keyframes check-anim {\n    0% {\n      stroke-dashoffset: 28;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n  @keyframes symbol-anim {\n    0% {\n      stroke-dashoffset: 7;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  .delay-05 {\n    animation-delay: 0.5s;\n  }\n</style>\n<div class=\"d-flex a-i-center p-24 m-24 p-b-0\" [ngClass]=\"{ 'd-col j-c-center': vertical }\">\n  <svg *ngIf=\"type === 'success'\" viewBox=\"0 0 24 24\" [ngStyle]=\"{ 'max-width.px': size || 64 }\">\n    <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n      <polyline\n        stroke=\"var(--input-validation-success, #008800)\"\n        stroke-width=\"2\"\n        stroke-linejoin=\"round\"\n        points=\"7.8678862 11.508 11.9656988 15.984 20.2137797 7.44836856\"\n        class=\"check-anim\"\n        stroke-dasharray=\"28\"\n        stroke-dashoffset=\"28\"\n      ></polyline>\n      <path\n        d=\"M18.3656773,3.02795925 C16.5689809,1.75089408 14.3721808,1 12,1 C5.92486775,1 1,5.92486775 1,12 C1,18.0751322 5.92486775,23 12,23 C18.0751322,23 23,18.0751322 23,12\"\n        id=\"Path\"\n        class=\"stroke-anim\"\n        stroke=\"var(--input-validation-success, #008800)\"\n        stroke-width=\"2\"\n        stroke-dasharray=\"60\"\n        stroke-dashoffset=\"60\"\n      ></path>\n    </g>\n  </svg>\n\n  <svg *ngIf=\"type === 'error'\" viewBox=\"0 0 24 24\" [ngStyle]=\"{ 'max-width.px': size || 64 }\">\n    <g id=\"Artboard-Copy-3\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n      <line\n        x1=\"12\"\n        y1=\"13.5356315\"\n        x2=\"12\"\n        y2=\"7\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-error, #E0000E)\"\n        class=\"symbol-anim\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n      ></line>\n      <line\n        x1=\"12\"\n        y1=\"17.7678157\"\n        x2=\"12\"\n        y2=\"17.2321843\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-error, #E0000E)\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n        class=\"symbol-anim\"\n      ></line>\n      <circle\n        id=\"Oval\"\n        stroke=\"var(--input-validation-error, #E0000E)\"\n        stroke-width=\"2\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"11\"\n        class=\"stroke-anim\"\n        stroke-dasharray=\"70\"\n        stroke-dashoffset=\"70\"\n        stroke-linejoin=\"round\"\n      ></circle>\n    </g>\n  </svg>\n\n  <svg *ngIf=\"type === 'warning'\" viewBox=\"0 0 24 24\" [ngStyle]=\"{ 'max-width.px': size || 64 }\">\n    <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n      <line\n        x1=\"12\"\n        y1=\"13.5356315\"\n        x2=\"12\"\n        y2=\"7\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-warning, #FF801F)\"\n        class=\"symbol-anim\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n      ></line>\n      <line\n        x1=\"12\"\n        y1=\"17.7678157\"\n        x2=\"12\"\n        y2=\"17.2321843\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-warning, #FF801F)\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n        class=\"symbol-anim\"\n      ></line>\n\n      <g\n        fill-rule=\"nonzero\"\n        stroke=\"var(--input-validation-warning, #FF801F)\"\n        stroke-width=\"2\"\n        class=\"stroke-anim\"\n        stroke-dashoffset=\"1000\"\n        stroke-dasharray=\"90\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <path d=\"M12,1 L23,21 L1,21 L12,1 Z\" id=\"Path\"></path>\n      </g>\n    </g>\n  </svg>\n  <p *ngIf=\"text\" class=\"text-center text-medium animated fadeIn delay-05 m-8\">\n    {{ text }}\n  </p>\n</div>\n"
                },] }
    ];
    OperationResultComponent.propDecorators = {
        text: [{ type: i0.Input }],
        vertical: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        type: [{ type: i0.Input }]
    };

    /**
     * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
     * @example
     * <div *c8yOutlet="template"></div>
     * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
     * <div *c8yOutlet="nodes"></div>
     *
     *
     * note: If template is instance of HTMLElement (for example, node compiled by angularJS) then there can be
     * only single instance rendered, as only one instance of HTMLElement can exist in DOM.
     * If there is need for displaying same element multiple times, please make sure to inject into
     * this element createCopy function, which should return another instance of given element.
     *
     */
    var OutletDirective = /** @class */ (function () {
        function OutletDirective(viewContainer, resolver, renderer, el) {
            this.viewContainer = viewContainer;
            this.resolver = resolver;
            this.renderer = renderer;
            this.el = el;
            this.properties = {};
        }
        Object.defineProperty(OutletDirective.prototype, "c8yOutlet", {
            /**
             * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
             * @example
             * <div *c8yOutlet="template"></div>
             * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
             * <div *c8yOutlet="nodes"></div>
             */
            set: function (template) {
                if (!template) {
                    return;
                }
                if (this._element instanceof Element) {
                    this.renderer.removeChild(this._element.parentElement, this._element);
                }
                this.viewContainer.clear();
                // case TemplateRef -> <div *c8yOutlet="template"></div>
                if (template instanceof i0.TemplateRef) {
                    this.viewContainer.createEmbeddedView(template);
                    // case DOM Element -> <div *c8yOutlet="nodes"></div>
                }
                else if (template instanceof Element) {
                    var parent = this.renderer.parentNode(this.el.nativeElement);
                    this.destroy();
                    /**
                     * Because compiled element can be used only once, we need to create copy of it
                     * in order to display it in multiple locations.
                     * For example standard "More" menu, and its RWD version.
                     */
                    if (template.createCopy) {
                        this._element = template.createCopy();
                    }
                    else {
                        this._element = template;
                    }
                    this.renderer.insertBefore(parent, this._element, this.el.nativeElement);
                    // case Component -> <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
                }
                else {
                    var factory = this.resolver.resolveComponentFactory(template);
                    var component = this.viewContainer.createComponent(factory);
                    lodashEs.assign(component.instance, this.properties);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OutletDirective.prototype, "c8yOutletProperties", {
            set: function (value) {
                this.properties = value;
            },
            enumerable: false,
            configurable: true
        });
        OutletDirective.prototype.ngOnDestroy = function () {
            this.destroy();
        };
        OutletDirective.prototype.destroy = function () {
            if (this._element) {
                var _parent = this.renderer.parentNode(this._element);
                this.renderer.removeChild(_parent, this._element);
            }
        };
        return OutletDirective;
    }());
    OutletDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yOutlet]',
                },] }
    ];
    OutletDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.ComponentFactoryResolver },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    OutletDirective.propDecorators = {
        c8yOutlet: [{ type: i0.Input }],
        c8yOutletProperties: [{ type: i0.Input }]
    };

    var ProgressBarComponent = /** @class */ (function () {
        function ProgressBarComponent() {
            this.message = gettext('Loading…');
            this.progress = null;
        }
        return ProgressBarComponent;
    }());
    ProgressBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-progress-bar',
                    template: "<div class=\"bg-inherit\">\n  <div class=\"progress progress-striped active\" *ngIf=\"progress !== null\">\n    <div\n    class=\"progress-bar\"\n    role=\"progressbar\"\n    [attr.aria-valuenow]=\"progress\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    [style.width]=\"progress + '%'\"\n    ></div>\n  </div>\n  <div class=\"spinner-snake\" *ngIf=\"progress === null\"></div>\n  <p *ngIf=\"message\">\n    {{ message | translate }}\n  </p>\n</div>\n"
                },] }
    ];
    ProgressBarComponent.propDecorators = {
        message: [{ type: i0.Input }],
        progress: [{ type: i0.Input }]
    };

    var ShortenUserNamePipe = /** @class */ (function () {
        function ShortenUserNamePipe() {
        }
        ShortenUserNamePipe.prototype.transform = function (_a) {
            var _b = _a.firstName, firstName = _b === void 0 ? '' : _b, _c = _a.lastName, lastName = _c === void 0 ? '' : _c, _d = _a.userName, userName = _d === void 0 ? '' : _d;
            var parsedFirstName = firstName.trim().split(/\s+/).shift().substr(0, 1);
            var parsedLastName = lastName.trim().split(/\s+/).pop();
            if (!parsedLastName) {
                parsedFirstName = firstName.split(/\s+/).shift();
            }
            else {
                parsedFirstName = parsedFirstName ? parsedFirstName + ". " : '';
            }
            return parsedFirstName || parsedLastName ? parsedFirstName + parsedLastName : userName;
        };
        return ShortenUserNamePipe;
    }());
    ShortenUserNamePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'shortenUserName' },] }
    ];

    var ShowIfFilterPipe = /** @class */ (function () {
        function ShowIfFilterPipe() {
        }
        ShowIfFilterPipe.prototype.transform = function (value) {
            var observableShowIfMap = lodashEs.mapValues(value, function (val) {
                if (typeof val.showIf === 'boolean') {
                    return rxjs.of(val.showIf);
                }
                else if (typeof val.showIf === 'function') {
                    return toObservable(val.showIf());
                }
                else {
                    return rxjs.of(true);
                }
            });
            return rxjs.combineLatest(lodashEs.entries(observableShowIfMap).map(function (_a) {
                var _b = __read(_a, 2), key = _b[0], val = _b[1];
                return val.pipe(operators.map(function (showIf) { return ({ key: key, showIf: showIf }); }));
            })).pipe(operators.map(function (allShowIfs) {
                allShowIfs.forEach(function (showIf) { return (value[showIf.key].showIf = showIf.showIf); });
                return lodashEs.omitBy(value, function (v) { return !v.showIf; });
            }));
        };
        return ShowIfFilterPipe;
    }());
    ShowIfFilterPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'showIfFilter' },] }
    ];

    /** The helper UI service for tenant related methods built upon client services. */
    var TenantUiService = /** @class */ (function () {
        function TenantUiService(userService, appStateService, applicationService) {
            this.userService = userService;
            this.appStateService = appStateService;
            this.applicationService = applicationService;
            this.MANAGEMENT = 'management';
            this.ROLE_TENANT_MANAGEMENT_READ = 'ROLE_TENANT_MANAGEMENT_READ';
        }
        Object.defineProperty(TenantUiService.prototype, "currentTenant", {
            /**
             * Returns current tenant
             */
            get: function () {
                return this.appStateService.currentTenant.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Checks whether current tenant is the management tenant.
         * @returns True if current tenant is the management tenant.
         */
        TenantUiService.prototype.isManagementTenant = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentTenant;
                return __generator(this, function (_a) {
                    currentTenant = this.appStateService.currentTenant.value;
                    return [2 /*return*/, this.isManagement(currentTenant)];
                });
            });
        };
        /**
         * Checks whether current tenant is an enterprise tenant.
         * An enterprise tenant is a tenant which has subscribed:
         * - `branding` microservice or `feature-branding` feature app,
         * - `sslmanagement` microservice,
         * - `feature-user-hierarchy` feature app,
         * - `feature-broker` feature app.
         *
         * See https://cumulocity.com/guides/users-guide/enterprise-edition/ for details about such tenants.
         *
         * @returns True, if current tenant is an enterprise tenant.
         */
        TenantUiService.prototype.isEnterpriseTenant = function () {
            return __awaiter(this, void 0, void 0, function () {
                var hasBranding, _a, hasSslManagement, hasUserHierarchy, hasDataBroker;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.hasApp({ name: 'branding' })];
                        case 1:
                            _a = (_b.sent());
                            if (_a) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.hasApp({ name: 'feature-branding' })];
                        case 2:
                            _a = (_b.sent());
                            _b.label = 3;
                        case 3:
                            hasBranding = _a;
                            return [4 /*yield*/, this.hasApp({ name: 'sslmanagement' })];
                        case 4:
                            hasSslManagement = _b.sent();
                            return [4 /*yield*/, this.hasApp({ name: 'feature-user-hierarchy' })];
                        case 5:
                            hasUserHierarchy = _b.sent();
                            return [4 /*yield*/, this.hasApp({ name: 'feature-broker' })];
                        case 6:
                            hasDataBroker = _b.sent();
                            return [2 /*return*/, hasBranding && hasSslManagement && hasUserHierarchy && hasDataBroker];
                    }
                });
            });
        };
        /**
         * Checks whether the current user has read access to tenants, i.e.:
         * - the current tenant can create subtenants or it's the management tenant,
         * - the current user has ROLE_TENANT_MANAGEMENT_READ role.
         * @returns True, if the current user has read access to tenants.
         */
        TenantUiService.prototype.canReadTenants = function () {
            var currentTenant = this.appStateService.currentTenant.value;
            var currentUser = this.appStateService.currentUser.value;
            return ((this.isManagement(currentTenant) || currentTenant.allowCreateTenants) &&
                this.userService.hasRole(currentUser, this.ROLE_TENANT_MANAGEMENT_READ));
        };
        /**
         * Returns tenant login option which is preferred.
         *
         * @param All available tenant's login options.
         *
         * @returns Returns ITenantLoginOption.
         *
         * **Example**
         * ```typescript
         *
         *    (() => {
         *      const preferredLoginOption = tenantLoginOptionsService.getPreferredLoginOption(loginOptions);
         *   })();
         * ```
         */
        TenantUiService.prototype.getPreferredLoginOption = function (loginOptions) {
            var defaultFallback = { type: client.TenantLoginOptionType.BASIC, userManagementSource: client.UserManagementSource.INTERNAL };
            if (!loginOptions) {
                return defaultFallback;
            }
            else {
                var visibleLoginOptions = loginOptions.filter(this.isVisibleOnLoginPage);
                return visibleLoginOptions.find(this.isOauthInternal)
                    || visibleLoginOptions.find(this.isBasic)
                    || visibleLoginOptions.find(this.isOauth2)
                    || defaultFallback;
            }
        };
        /**
         * Returns Oauth2 login option if it can be used by UI.
         *
         * @param All available tenant's login options.
         *
         * @returns Returns ITenantLoginOption.
         *
         * **Example**
         * ```typescript
         *
         *    (() => {
         *      const oauth2 = tenantLoginOptionsService.getOauth2Option(loginOptions);
         *   })();
         * ```
         */
        TenantUiService.prototype.getOauth2Option = function (loginOptions) {
            var _this = this;
            return loginOptions.find(function (loginOption) { return _this.isVisibleOnLoginPage(loginOption) && _this.isOauth2(loginOption); });
        };
        /**
         * Callback which checks if login option is visible on login page.
         *
         * **Example**
         * ```typescript
         *
         *    (() => {
         *      const loginOptionsVisibleOnLoginPage = loginOptions.filter(tenantLoginOptionsService.isVisibleOnLoginPage);
         *   })();
         * ```
         */
        TenantUiService.prototype.isVisibleOnLoginPage = function (loginOption) {
            return loginOption.visibleOnLoginPage;
        };
        /**
         * Callback which checks if login option type is 'OAUTH2_INTERNAL'.
         *
         * **Example**
         * ```typescript
         *
         *    (() => {
         *      const oauth2InternalLoginOptions = loginOptions.filter(tenantLoginOptionsService.isOauthInternal);
         *   })();
         * ```
         */
        TenantUiService.prototype.isOauthInternal = function (loginOption) {
            return loginOption.type === client.TenantLoginOptionType.OAUTH2_INTERNAL;
        };
        /**
         * Callback which checks if login option type is 'BASIC'.
         *
         * **Example**
         * ```typescript
         *
         *    (() => {
         *      const basicLoginOptions = loginOptions.filter(tenantLoginOptionsService.isBasic);
         *   })();
         * ```
         */
        TenantUiService.prototype.isBasic = function (loginOption) {
            return loginOption.type === client.TenantLoginOptionType.BASIC;
        };
        /**
         * Callback which checks if login option type is 'OAUTH2' and grantType is 'AUTHORIZATION_CODE'.
         *
         * **Example**
         * ```typescript
         *
         *    (() => {
         *      const oauth2LoginOptions = loginOptions.filter(tenantLoginOptionsService.OAUTH2);
         *   })();
         * ```
         */
        TenantUiService.prototype.isOauth2 = function (loginOption) {
            return loginOption.type === client.TenantLoginOptionType.OAUTH2 && loginOption.grantType === client.GrantType.AUTHORIZATION_CODE;
        };
        /**
         * Checks if application of type MICROSERVICE is subscribed to the current tenant.
         * It checks the application references of the currentTenant from the application state.
         * No additional request.
         * @param identifier application name or contextPath
         */
        TenantUiService.prototype.isMicroserviceSubscribedInCurrentTenant = function (identifier) {
            if ((identifier === null || identifier === void 0 ? void 0 : identifier.length) > 0) {
                var microservices = this.getSubscribedMicroservicesInCurrentTenant();
                return microservices.some(function (_a) {
                    var name = _a.name, contextPath = _a.contextPath;
                    return [name, contextPath].includes(identifier);
                });
            }
            return false;
        };
        /**
         * Gets all application of type MICROSERVICE subscribed to the current tenant.
         * It checks the application references of the currentTenant from the application state.
         * No additional request.
         */
        TenantUiService.prototype.getSubscribedMicroservicesInCurrentTenant = function () {
            var references = lodashEs.get(this.appStateService.currentTenant, 'value.applications.references', []);
            return references.map(function (appRef) { return appRef.application; }).filter(function (app) { return app.type === client.ApplicationType.MICROSERVICE; });
        };
        TenantUiService.prototype.hasApp = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.isAvailable(app)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            });
        };
        TenantUiService.prototype.isManagement = function (currentTenant) {
            return currentTenant.name === this.MANAGEMENT;
        };
        return TenantUiService;
    }());
    TenantUiService.decorators = [
        { type: i0.Injectable }
    ];
    TenantUiService.ctorParameters = function () { return [
        { type: client.UserService },
        { type: AppStateService },
        { type: client.ApplicationService }
    ]; };

    var TextareaAutoresizeDirective = /** @class */ (function () {
        function TextareaAutoresizeDirective(elementRef) {
            var _this = this;
            this.elementRef = elementRef;
            this.focused = false;
            this.resizeObserver = new window.ResizeObserver(function () { return !_this.focused && _this.resize(); });
        }
        TextareaAutoresizeDirective.prototype.onInput = function () {
            this.resize();
        };
        TextareaAutoresizeDirective.prototype.onFocus = function () {
            this.focused = true;
        };
        TextareaAutoresizeDirective.prototype.onBlur = function () {
            this.focused = false;
        };
        TextareaAutoresizeDirective.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            this.resizeObserver.observe((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement);
            setTimeout(function () { return _this.resize(); });
        };
        TextareaAutoresizeDirective.prototype.ngOnDestroy = function () {
            var _a;
            this.resizeObserver.unobserve((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement);
        };
        TextareaAutoresizeDirective.prototype.resize = function () {
            var _a;
            this.elementRef.nativeElement.style.height = '32px';
            this.elementRef.nativeElement.style.height = ((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollHeight) + 'px';
        };
        return TextareaAutoresizeDirective;
    }());
    TextareaAutoresizeDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8y-textarea-autoresize]'
                },] }
    ];
    TextareaAutoresizeDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    TextareaAutoresizeDirective.propDecorators = {
        onInput: [{ type: i0.HostListener, args: [':input',] }],
        onFocus: [{ type: i0.HostListener, args: [':focus',] }],
        onBlur: [{ type: i0.HostListener, args: [':blur',] }]
    };

    var UserPreferencesStorageLocal = /** @class */ (function () {
        function UserPreferencesStorageLocal() {
            this.LOCAL_STORAGE_KEY = 'userPreferences';
            this.store = {};
            try {
                var jsonStore = window.localStorage.getItem(this.LOCAL_STORAGE_KEY);
                if (jsonStore) {
                    this.store = JSON.parse(jsonStore) || {};
                }
            }
            catch (e) {
                // do nothing
            }
        }
        UserPreferencesStorageLocal.prototype.get = function (key) {
            return rxjs.of(this.store[key]);
        };
        UserPreferencesStorageLocal.prototype.set = function (key, value) {
            this.store[key] = value;
            return this.saveJsonStore();
        };
        UserPreferencesStorageLocal.prototype.saveJsonStore = function () {
            return window.localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(this.store));
        };
        return UserPreferencesStorageLocal;
    }());

    var UserPreferencesStorageInventory = /** @class */ (function () {
        function UserPreferencesStorageInventory(inventory) {
            this.inventory = inventory;
            this.TYPE = 'c8y_UserPreference';
        }
        UserPreferencesStorageInventory.prototype.get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventory.list({ fragmentType: key })];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data.length ? data[0][key] : undefined];
                    }
                });
            });
        };
        UserPreferencesStorageInventory.prototype.set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var data, updateMo, out;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.inventory.list({ fragmentType: key })];
                        case 1:
                            data = (_b.sent()).data;
                            updateMo = (_a = {}, _a[key] = value, _a.type = this.TYPE, _a);
                            if (data.length) {
                                updateMo.id = data[0].id;
                                out = this.inventory.update(updateMo);
                            }
                            else {
                                out = this.inventory.create(updateMo);
                            }
                            return [2 /*return*/, out];
                    }
                });
            });
        };
        return UserPreferencesStorageInventory;
    }());

    var UserPreferencesService = /** @class */ (function () {
        function UserPreferencesService(user, inventory, appState) {
            this.user = user;
            this.inventory = inventory;
            this.appState = appState;
            this.LOCAL_STORAGE_KEY = 'userPreferences';
            this.storage = {
                local: new UserPreferencesStorageLocal(),
                inventory: new UserPreferencesStorageInventory(this.inventory)
            };
            this.currentUser = this.appState.currentUser;
        }
        UserPreferencesService.prototype.get = function (key) {
            var _this = this;
            return this.currentUser.pipe(operators.first(), operators.switchMap(function (user) { return _this.getForUser(key, user); }));
        };
        UserPreferencesService.prototype.set = function (key, value) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.currentUser.pipe(operators.first()).subscribe(function (user) {
                    resolve(_this.setForUser(key, value, user));
                }, reject);
            });
        };
        UserPreferencesService.prototype.getForUser = function (key, user) {
            var rawKey = this.getRawKey(key, user);
            var storage = this.getStorage(user);
            return rxjs.from(storage.get(rawKey));
        };
        UserPreferencesService.prototype.setForUser = function (key, value, user) {
            var rawKey = this.getRawKey(key, user);
            var storage = this.getStorage(user);
            return Promise.resolve(storage.set(rawKey, value));
        };
        UserPreferencesService.prototype.getRawKey = function (key, user) {
            var username = user.userName.replace(/\./g, '__');
            return "" + key + username;
        };
        UserPreferencesService.prototype.getStorage = function (user) {
            return this.user.hasAllRoles(user, ['ROLE_INVENTORY_READ', 'ROLE_INVENTORY_ADMIN']) ?
                this.storage.inventory : this.storage.local;
        };
        return UserPreferencesService;
    }());
    UserPreferencesService.decorators = [
        { type: i0.Injectable }
    ];
    UserPreferencesService.ctorParameters = function () { return [
        { type: client.UserService },
        { type: client.InventoryService },
        { type: AppStateService }
    ]; };

    // This is an adapted version of the original FixedSizeVirtualScrollStrategy
    // https://github.com/angular/components/blob/master/src/cdk/scrolling/fixed-size-virtual-scroll.ts
    var VirtualScrollWindowStrategy = /** @class */ (function () {
        function VirtualScrollWindowStrategy(itemSizePx, offsetSizePx, minBufferPx, maxBufferPx) {
            this._viewport = null;
            this._scrolledIndexChange = new rxjs.Subject();
            this.destroy = new rxjs.Subject();
            this._itemSizePx = itemSizePx;
            this._offsetSizePx = offsetSizePx;
            this._minBufferPx = minBufferPx;
            this._maxBufferPx = maxBufferPx;
            this.scrolledIndexChange = this._scrolledIndexChange.pipe(operators.distinctUntilChanged());
            this.destroy$ = this.destroy.asObservable();
        }
        /**
         * Attaches this scroll strategy to a viewport.
         * @param viewport The viewport to attach this strategy to.
         */
        VirtualScrollWindowStrategy.prototype.attach = function (viewport) {
            var _this = this;
            this._viewport = viewport;
            this._updateTotalContentSize();
            this._updateRenderedRange();
            rxjs.fromEvent(window, 'scroll')
                .pipe(operators.takeUntil(this.destroy$), operators.debounceTime(10))
                .subscribe(function () {
                _this._updateRenderedRange();
            });
        };
        /** Detaches this scroll strategy from the currently attached viewport. */
        VirtualScrollWindowStrategy.prototype.detach = function () {
            this._scrolledIndexChange.complete();
            this._viewport = null;
            this.destroy.next();
            this.destroy.complete();
        };
        /**
         * Update the item size and buffer size.
         * @param itemSize The size of the items in the virtually scrolling list.
         * @param offsetSizePx The size of the offset (in pixels)..
         * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
         * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
         */
        VirtualScrollWindowStrategy.prototype.updateItemAndBufferSize = function (itemSize, offsetSizePx, minBufferPx, maxBufferPx) {
            this._itemSizePx = itemSize;
            this._offsetSizePx = offsetSizePx;
            this._minBufferPx = minBufferPx;
            this._maxBufferPx = maxBufferPx;
            this._updateTotalContentSize();
            this._updateRenderedRange();
        };
        /** @docs-private Implemented as part of VirtualScrollStrategy. */
        VirtualScrollWindowStrategy.prototype.onContentScrolled = function () {
            this._updateRenderedRange();
        };
        /** @docs-private Implemented as part of VirtualScrollStrategy. */
        VirtualScrollWindowStrategy.prototype.onDataLengthChanged = function () {
            this._updateTotalContentSize();
            this._updateRenderedRange();
        };
        /** @docs-private Implemented as part of VirtualScrollStrategy. */
        VirtualScrollWindowStrategy.prototype.onContentRendered = function () {
            /* no-op */
        };
        /** @docs-private Implemented as part of VirtualScrollStrategy. */
        VirtualScrollWindowStrategy.prototype.onRenderedOffsetChanged = function () {
            /* no-op */
        };
        /**
         * Scroll to the offset for the given index.
         * @param index The index of the element to scroll to.
         * @param behavior The ScrollBehavior to use when scrolling.
         */
        VirtualScrollWindowStrategy.prototype.scrollToIndex = function (index, behavior) {
            if (this._viewport) {
                this._viewport.scrollToOffset(index * this._itemSizePx, behavior);
            }
        };
        /** Update the viewport's total content size. */
        VirtualScrollWindowStrategy.prototype._updateTotalContentSize = function () {
            var _this = this;
            if (!this._viewport) {
                return;
            }
            this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSizePx + this._offsetSizePx);
            this._viewport._changeDetectorRef.detectChanges();
            setTimeout(function () {
                var _a;
                var children = _this._viewport.elementRef.nativeElement.children[0].children;
                if (children.length > 0) {
                    _this._itemSizePx = (_a = children[0]) === null || _a === void 0 ? void 0 : _a.clientHeight;
                    _this._viewport.setTotalContentSize(_this._viewport.getDataLength() * _this._itemSizePx + _this._offsetSizePx);
                }
            }, 100);
        };
        /** Update the viewport's rendered range. */
        VirtualScrollWindowStrategy.prototype._updateRenderedRange = function () {
            if (!this._viewport) {
                return;
            }
            // Use the window as a reference for viewPort size and offset
            var viewportSize = window.innerHeight;
            var scrollOffset = window.pageYOffset;
            var renderedRange = this._viewport.getRenderedRange();
            var newRange = { start: renderedRange.start, end: renderedRange.end };
            var dataLength = this._viewport.getDataLength();
            // Prevent NaN as result when dividing by zero.
            var firstVisibleIndex = this._itemSizePx > 0 ? scrollOffset / this._itemSizePx : 0;
            // If user scrolls to the bottom of the list and data changes to a smaller list
            if (newRange.end > dataLength) {
                // We have to recalculate the first visible index based on new data length and viewport size.
                var maxVisibleItems = Math.ceil(viewportSize / this._itemSizePx);
                var newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));
                // If first visible index changed we must update scroll offset to handle start/end buffers
                // Current range must also be adjusted to cover the new position (bottom of new list).
                if (firstVisibleIndex !== newVisibleIndex) {
                    firstVisibleIndex = newVisibleIndex;
                    scrollOffset = newVisibleIndex * this._itemSizePx;
                    newRange.start = Math.floor(firstVisibleIndex);
                }
                newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));
            }
            var startBuffer = scrollOffset - newRange.start * this._itemSizePx;
            if (startBuffer < this._minBufferPx && newRange.start !== 0) {
                var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSizePx);
                newRange.start = Math.max(0, newRange.start - expandStart);
                newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex +
                    (viewportSize + this._minBufferPx) / this._itemSizePx));
            }
            else {
                var endBuffer = newRange.end * this._itemSizePx - (scrollOffset + viewportSize);
                if (endBuffer < this._minBufferPx && newRange.end !== dataLength) {
                    var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSizePx);
                    if (expandEnd > 0) {
                        newRange.end = Math.min(dataLength, newRange.end + expandEnd);
                        newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSizePx));
                    }
                }
            }
            this._viewport.setRenderedRange(newRange);
            this._viewport.setRenderedContentOffset(this._itemSizePx * newRange.start);
            this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
        };
        return VirtualScrollWindowStrategy;
    }());

    /**
     * Provider factory for `VirtualScrollWindowStrategy` that simply extracts the already created
     * `VirtualScrollWindowStrategy` from the given directive.
     * @param windowDir The instance of `VirtualScrollWindowDirective` to extract the
     *     `VirtualScrollWindowStrategy` from.
     */
    function _virtualScrollWindowStrategyFactory(windowDir) {
        return windowDir._scrollStrategy;
    }
    // This is an adapted version of the original CdkFixedSizeVirtualScroll
    // https://github.com/angular/components/blob/master/src/cdk/scrolling/fixed-size-virtual-scroll.ts
    var VirtualScrollWindowDirective = /** @class */ (function () {
        function VirtualScrollWindowDirective() {
            this._itemSizePx = 20;
            this._minBufferPx = 100;
            this._maxBufferPx = 200;
            this._offsetSizePx = 0;
            /** The scroll strategy used by this directive. */
            this._scrollStrategy = new VirtualScrollWindowStrategy(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
        }
        Object.defineProperty(VirtualScrollWindowDirective.prototype, "itemSizePx", {
            /** The size of the items in the list (in pixels). */
            get: function () { return this._itemSizePx; },
            set: function (value) { this._itemSizePx = coercion.coerceNumberProperty(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VirtualScrollWindowDirective.prototype, "minBufferPx", {
            /**
             * The minimum amount of buffer rendered beyond the viewport (in pixels).
             * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
             */
            get: function () { return this._minBufferPx; },
            set: function (value) { this._minBufferPx = coercion.coerceNumberProperty(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VirtualScrollWindowDirective.prototype, "maxBufferPx", {
            /**
             * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
             */
            get: function () { return this._maxBufferPx; },
            set: function (value) { this._maxBufferPx = coercion.coerceNumberProperty(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VirtualScrollWindowDirective.prototype, "offsetSizePx", {
            /** The size of the offset (in pixels). */
            get: function () { return this._offsetSizePx; },
            set: function (value) { this._offsetSizePx = coercion.coerceNumberProperty(value); },
            enumerable: false,
            configurable: true
        });
        VirtualScrollWindowDirective.prototype.ngOnChanges = function () {
            this._scrollStrategy.updateItemAndBufferSize(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
        };
        return VirtualScrollWindowDirective;
    }());
    VirtualScrollWindowDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'cdk-virtual-scroll-viewport[windowVirtualScrollStrategy]',
                    providers: [{
                            provide: scrolling.VIRTUAL_SCROLL_STRATEGY,
                            useFactory: _virtualScrollWindowStrategyFactory,
                            deps: [i0.forwardRef(function () { return VirtualScrollWindowDirective; })]
                        }],
                },] }
    ];
    VirtualScrollWindowDirective.propDecorators = {
        itemSizePx: [{ type: i0.Input }],
        minBufferPx: [{ type: i0.Input }],
        maxBufferPx: [{ type: i0.Input }],
        offsetSizePx: [{ type: i0.Input }]
    };

    var ZipService = /** @class */ (function () {
        function ZipService() {
        }
        ZipService.prototype.getEntries = function (zipFile) {
            return new rxjs.Observable(function (subscriber) {
                var reader = new zip.BlobReader(zipFile);
                zip.createReader(reader, function (zipReader) {
                    zipReader.getEntries(function (entries) {
                        subscriber.next(entries);
                        subscriber.complete();
                    });
                }, function (message) {
                    subscriber.error({ message: message });
                });
            });
        };
        ZipService.prototype.getData = function (entry) {
            var data = new rxjs.Observable(function (subscriber) {
                var writer = new zip.BlobWriter();
                entry.getData(writer, function (blob) {
                    subscriber.next(blob);
                    subscriber.complete();
                });
            });
            return data;
        };
        ZipService.prototype.getJsonData = function (zipFile, fileEntryFilter) {
            var _this = this;
            return this.getEntries(zipFile).pipe(operators.map(function (entries) {
                var entryFile = entries.find(function (entry) { return entry.filename === fileEntryFilter.filename; });
                if (!entryFile) {
                    rxjs.throwError("File not found " + JSON.stringify(fileEntryFilter));
                }
                return entryFile;
            }), operators.concatMap(function (entry) { return _this.getData(entry); }), operators.switchMap(function (blob) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, blob.text()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            }); }); }), operators.map(function (text) { return JSON.parse(text); }));
        };
        return ZipService;
    }());

    function initializeServices(translateService, state, userPreferences) {
        var initialize = function () {
            var queryStringLanguage = translateService.queryStringLang();
            var firstLanguage = translateService.firstSupportedLanguage();
            /*
              The ?lang parameter will prevent the user preference language from being activated
            */
            if (queryStringLanguage && translateService.getSupported(queryStringLanguage)) {
                translateService.switchToLanguage(queryStringLanguage);
            }
            else {
                state.currentUser
                    .pipe(operators.map(function (user) { return user && user.userName; }), operators.filter(function (u) { return !!u; }), operators.distinctUntilChanged(), operators.switchMap(function () { return userPreferences.get('language'); }), operators.startWith(firstLanguage), operators.filter(function (lang) { return !!lang; }), operators.distinctUntilChanged())
                    .subscribe(function (lang) {
                    translateService.switchToLanguage(lang);
                });
            }
        };
        return initialize;
    }
    var ICON_LIST = new i0.InjectionToken('iconList');
    /**
     * Commonly used directives, data access and translation. This module is the shared
     * module across all core components. It should be imported by default.
     *
     * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
     * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
     * @exports I18nModule Translation module.
     * @exports NgCommonModule Angular common module.
     * @exports DataModule The data layer to allow DI with @c8y/client
     * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher)
     * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`
     * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`
     * @exports ForOfDirective A forOf directive like ngFor but with load-more function
     * @exports LoadMoreComponent A component to load more data from a certain data-source
     * @exports ProgressBarComponent Displays either defined or undefined progress.
     * @exports DropdownDirectionDirective Determines if a dropdown opens to the bottom or to the top.
     * @exports TextareaAutoresizeDirective resizes a textarea height as the user inputs.
     * @exports OperationResultComponent displays an animated svg for success and error operations.
     */
    var CommonModule = /** @class */ (function () {
        function CommonModule() {
        }
        CommonModule.providers = function () {
            return __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(i4.DataModule.providers())), [
                // TODO: maybe we can think of a way to remove this C8Y_APP global
                { provide: HOOK_OPTIONS, useValue: window.C8Y_APP || {}, multi: true },
                {
                    provide: i0.APP_INITIALIZER,
                    useFactory: initializeServices,
                    deps: [TranslateService, AppStateService, UserPreferencesService],
                    multi: true
                },
                { provide: ICON_LIST, useValue: ICONS, multi: false }
            ]), __read(I18nModule$1.providers())), [
                UserPreferencesService,
                OptionsService,
                AppStateService,
                Permissions,
                TenantUiService,
                HumanizePipe,
                HumanizeAppNamePipe,
                ShortenUserNamePipe,
                MapFunctionPipe,
                DatePipe,
                ZipService,
                FilesService,
                BytesPipe
            ]);
        };
        CommonModule.forRoot = function () {
            return {
                ngModule: CommonModule,
                providers: CommonModule.providers()
            };
        };
        return CommonModule;
    }());
    CommonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, I18nModule$1, tooltip.TooltipModule, scrolling.ScrollingModule],
                    exports: [
                        EmptyStateComponent,
                        IconDirective,
                        OutletDirective,
                        I18nModule$1,
                        common.CommonModule,
                        HumanizeAppNamePipe,
                        HumanizePipe,
                        IfAllowedDirective,
                        ShortenUserNamePipe,
                        ForOfDirective,
                        LoadMoreComponent,
                        MapFunctionPipe,
                        ProgressBarComponent,
                        DatePipe,
                        NumberPipe,
                        LoadingComponent,
                        DropdownDirectionDirective,
                        TextareaAutoresizeDirective,
                        OperationResultComponent,
                        VirtualScrollerWrapperComponent,
                        VirtualScrollWindowDirective,
                        BytesPipe,
                        ShowIfFilterPipe
                    ],
                    declarations: [
                        EmptyStateComponent,
                        IconDirective,
                        OutletDirective,
                        HumanizePipe,
                        HumanizeAppNamePipe,
                        IfAllowedDirective,
                        ShortenUserNamePipe,
                        ForOfDirective,
                        LoadMoreComponent,
                        MapFunctionPipe,
                        ProgressBarComponent,
                        DatePipe,
                        NumberPipe,
                        LoadingComponent,
                        DropdownDirectionDirective,
                        TextareaAutoresizeDirective,
                        OperationResultComponent,
                        VirtualScrollerWrapperComponent,
                        VirtualScrollWindowDirective,
                        BytesPipe,
                        ShowIfFilterPipe
                    ],
                    entryComponents: [LoadMoreComponent, LoadingComponent, VirtualScrollerWrapperComponent]
                },] }
    ];

    /**
     * This service is handling the cookie banner and cookie preferences related logic.
     */
    var CookieBannerService = /** @class */ (function () {
        function CookieBannerService(options) {
            this.options = options;
            this.STORAGE_KEY = 'acceptCookieNotice';
            this.COOKIE_BANNER = 'cookieBanner';
            this.PREVIEW_COOKIE_BANNER = 'previewCookieBanner';
            this.IS_PREVIEW = 'preview';
            this.COOKIE_PREFERENCES_CONFIG = 'cookiePreferences';
            this.isCookieBannerShowed$ = new rxjs.Subject();
            this.cookieDescriptions = {
                required: gettext("These cookies are required to enable core site functionality. They perform a task or operation without which a site's functionality would not be possible."),
                functional: gettext('These cookies are used to track site usage and to process my personal data to measure and improve usability and performance. We will neither forward this data to any third party nor use this data for direct marketing purposes. I recognize that I can opt in and out of these cookies at any time.'),
                marketing: gettext('These cookies are used to target advertising to a user.')
            };
        }
        /**
         * Returns Cookie preferences configuration.
         * @returns {object} Return an object with cookie preferences configuration defined in application options.
         */
        CookieBannerService.prototype.getCookiePreferencesConfig = function () {
            return this.options.get(this.COOKIE_PREFERENCES_CONFIG);
        };
        /**
         * Returns Cookie banner configuration.
         * @returns {object} Return an object with cookie banner configuration defined in application options.
         */
        CookieBannerService.prototype.getCookieBannerSettings = function () {
            var cookieSettings;
            if (this.isPreviewMode()) {
                cookieSettings = this.options.get(this.PREVIEW_COOKIE_BANNER);
                if (cookieSettings) {
                    return cookieSettings;
                }
            }
            cookieSettings = this.options.get(this.COOKIE_BANNER) || {};
            return cookieSettings;
        };
        /**
         * Converts the cookie preferences to boolean. Sets the cookie preferences configuration in local storage.
         * @param {object} cookiePreferences Object with cookie preferences configuration
         */
        CookieBannerService.prototype.setCookies = function (cookiePreferences) {
            var cookiesToSet = Object.assign({}, cookiePreferences);
            Object.entries(cookiesToSet).forEach(function (_a) {
                var _b = __read(_a, 2), cookieName = _b[0], cookieValue = _b[1];
                cookiesToSet[cookieName] = typeof cookieValue === 'string' ? true : cookieValue;
            });
            localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cookiesToSet));
        };
        /**
         * Verifies that cookie banner should be shown.
         * @returns {boolean} Returns if the cookie banner should be shown.
         */
        CookieBannerService.prototype.shouldShowCookieBanner = function () {
            var settings = this.getCookieBannerSettings();
            var shouldShowDefault = !!settings.cookieBannerText && !this.getUserCookiePreferences();
            if (this.isPreviewMode()) {
                return !(settings && settings.cookieBannerDisabled);
            }
            return shouldShowDefault;
        };
        /**
         * Gets the cookie preferences configuration from local storage.
         * @returns {object} Object with cookie preferences configuration.
         */
        CookieBannerService.prototype.getUserCookiePreferences = function () {
            return JSON.parse(localStorage.getItem(this.STORAGE_KEY));
        };
        /**
         * Verifies that cookie preferences configuration is defined.
         * @returns {boolean} Returns if the cookie preferences configuration is defined.
         */
        CookieBannerService.prototype.isConfigCookiePreferencesDefined = function () {
            return !!this.getCookiePreferencesConfig();
        };
        /**
         * Verifies that functional cookies are enabled.
         * @returns {boolean} True when functional cookies are enabled.
         */
        CookieBannerService.prototype.isFunctionalCookieEnabled = function () {
            var functional = (this.getUserCookiePreferences() || {}).functional;
            return functional === true;
        };
        /**
         * Description of cookies.
         * @param {'required' | 'functional' | 'marketing'} cookieType Takes one of the following options: 'required', 'functional', 'marketing'.
         * @returns {string} The default cookie description, if not explicitly defined in application options.
         */
        CookieBannerService.prototype.getCookieDescription = function (cookieType) {
            var cookieBannerConfigSettings = this.getCookiePreferencesConfig();
            return typeof cookieBannerConfigSettings[cookieType] === 'string'
                ? cookieBannerConfigSettings[cookieType]
                : this.cookieDescriptions[cookieType];
        };
        /**
         * Transforms cookie preferences configuration object to an array of cookie preferences objects. Each object in returned array contains cookie 'name', 'value' and 'isReadonly' property.
         * @param {object} cookiePreferences.
         * @returns {Array} Array shows if the cookie is Readonly.
         */
        CookieBannerService.prototype.transformCookiePreferencesToList = function (cookiePreferences) {
            return Object.entries(cookiePreferences).map(function (_a) {
                var _b = __read(_a, 2), name = _b[0], value = _b[1];
                var isReadonly = name === 'required';
                return { name: name, value: value, isReadonly: isReadonly };
            });
        };
        /**
         * Transforms an array of cookie preferences objects to cookie preferences configuration object.
         * @param {Array} cookiePreferencesList Array of cookie preferences.
         * @returns {object} An object with cookie preferences configuration.
         */
        CookieBannerService.prototype.transformCookiePreferencesListToCookiePreferences = function (cookiePreferencesList) {
            return cookiePreferencesList.reduce(function (cookiePref, cookie) {
                var key = cookie.name;
                cookiePref[key] = cookie.value;
                return cookiePref;
            }, {});
        };
        CookieBannerService.prototype.isPreviewMode = function () {
            // params from url are automatically resolved during bootstrap as string options, see: packages/cli/src/app-bootstrap/options.ts
            return this.options.get(this.IS_PREVIEW, false, true);
        };
        return CookieBannerService;
    }());
    CookieBannerService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function CookieBannerService_Factory() { return new CookieBannerService(i0__namespace.ɵɵinject(OptionsService)); }, token: CookieBannerService, providedIn: "root" });
    CookieBannerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    CookieBannerService.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };

    /**
     * A service to manage the Gainsight integration. It allows to load the
     * tag and
     */
    var GainsightService = /** @class */ (function () {
        function GainsightService(appState, options, cookieBannerService, userPreferencesService, translateService) {
            this.appState = appState;
            this.options = options;
            this.cookieBannerService = cookieBannerService;
            this.userPreferencesService = userPreferencesService;
            this.translateService = translateService;
            /**
             * A subject that emits the tag function as soon as a new tag is set.
             */
            this.tagFunction$ = new rxjs.BehaviorSubject(null);
            this.USER_PREFERENCES_KEY = 'gainsightEnabled';
            this.GAINSIGHT_URL = 'web-sdk.aptrinsic.com/api/aptrinsic.js?a=';
            this.GAINSIGHT_GLOBAL_SCOPE = 'aptrinsic';
            this.SCRIPT_EXECUTION_WAIT_TIME = 500;
            this.OPTIONS_KEY_CATEGORY = 'gainsight';
            this.OPTIONS_KEY_NAME = 'api.key';
            this.isScriptLoaded = false;
        }
        GainsightService.prototype.isGainsightDisabledInUserPreferences = function () {
            return __awaiter(this, void 0, void 0, function () {
                var userGainsightPref;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.userPreferencesService
                                .get(this.USER_PREFERENCES_KEY)
                                .toPromise()];
                        case 1:
                            userGainsightPref = _a.sent();
                            return [2 /*return*/, userGainsightPref === false];
                    }
                });
            });
        };
        GainsightService.prototype.setFunctionalCookie = function (value) {
            var cookies = this.cookieBannerService.getUserCookiePreferences();
            if (cookies) {
                Object.keys(cookies).forEach(function (cookieName) {
                    if (cookieName === 'functional') {
                        cookies[cookieName] = value;
                        return;
                    }
                });
                localStorage.setItem('acceptCookieNotice', JSON.stringify(cookies));
            }
        };
        GainsightService.prototype.getGainsightKey = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = this;
                            _b = this.options.gainsightKey;
                            if (_b) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.options.getSystemOption(this.OPTIONS_KEY_CATEGORY, this.OPTIONS_KEY_NAME)];
                        case 1:
                            _b = (_c.sent());
                            _c.label = 2;
                        case 2:
                            _a.gainsightKey = _b;
                            return [2 /*return*/, this.gainsightKey];
                    }
                });
            });
        };
        Object.defineProperty(GainsightService.prototype, "tagFunction", {
            /**
             * Returns the tag global function which can be used to identify user
             * or add special events.
             */
            get: function () {
                return window[this.GAINSIGHT_GLOBAL_SCOPE];
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Load the script tag and calls the identify function to start the tracking.
         * @param currentTenant The current tenant.
         * @param identify If set to false, only the tag is loaded.
         */
        GainsightService.prototype.loadTag = function (currentTenant, identify) {
            if (identify === void 0) { identify = true; }
            return __awaiter(this, void 0, void 0, function () {
                var scriptTag, key;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            scriptTag = document.createElement('script');
                            return [4 /*yield*/, this.getGainsightKey()];
                        case 1:
                            key = _a.sent();
                            if (key && !this.isScriptLoaded) {
                                this.loadScriptTag(scriptTag, key);
                                rxjs.combineLatest(this.appState.currentUser, rxjs.fromEvent(scriptTag, 'load'), this.appState.state$.pipe(operators.filter(function (_a) {
                                    var versions = _a.versions;
                                    return versions.backend;
                                }), operators.map(function (_a) {
                                    var versions = _a.versions;
                                    return versions;
                                }), operators.take(1)))
                                    .pipe(operators.delay(this.SCRIPT_EXECUTION_WAIT_TIME), operators.filter(function (_a) {
                                    var _b = __read(_a, 2), user = _b[0], scriptEvent = _b[1];
                                    return !!(scriptEvent && user);
                                }))
                                    .subscribe(function (_a) {
                                    var _b = __read(_a, 3), user = _b[0], scriptEvent = _b[1], versions = _b[2];
                                    var instanceId = _this.getInstanceIdFromUrl();
                                    if (identify) {
                                        _this.identify(user, currentTenant, instanceId, versions.ui.ngx, versions.backend);
                                    }
                                    _this.isScriptLoaded = true;
                                    _this.tagFunction$.next(_this.tagFunction);
                                });
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Identifies the user/account at Gainsight.
         * @param user The user which is given to Gainsight.
         * @param tenant The tenant which is given to Gainsight.
         * @param versionUI The UI version used.
         * @param versionBE The BE version used.
         */
        GainsightService.prototype.identify = function (user, tenant, instanceId, versionUI, versionBE) {
            var windowRef = window;
            var userId = user.id, email = user.email, userName = user.userName, firstName = user.firstName, lastName = user.lastName;
            var name = tenant.name, customProperties = tenant.customProperties, domainName = tenant.domainName;
            var externalReference = (customProperties || {}).externalReference;
            windowRef[this.GAINSIGHT_GLOBAL_SCOPE]('identify', {
                id: userId + "_" + name + "_" + instanceId,
                email: email,
                userName: userName,
                firstName: firstName,
                lastName: lastName,
                domainName: domainName,
                versionUI: versionUI,
                versionBE: versionBE,
                userLanguage: this.translateService.currentLang,
                instanceId: instanceId,
                externalReference: externalReference
            }, {
                id: name + "_" + instanceId,
                instanceId: instanceId
            });
        };
        GainsightService.prototype.triggerEvent = function (eventName, props) {
            if (this.tagFunction && eventName) {
                eventName = this.prepareEventName(eventName);
                this.tagFunction('track', eventName, props);
            }
        };
        GainsightService.prototype.translateToEnglish = function (textToTranslate) {
            var currentLang = this.translateService.currentLang;
            if (currentLang === 'en') {
                return textToTranslate;
            }
            if (currentLang && currentLang !== this.cachedLanguage) {
                this.cachedRevertedTranslations = undefined;
            }
            if (!this.cachedRevertedTranslations) {
                this.cachedLanguage = currentLang;
                this.cachedRevertedTranslations = this.getRevertedTranslations(currentLang);
            }
            return this.getEnTranslation(textToTranslate, this.cachedRevertedTranslations);
        };
        /**
         * Checks if the Gainsight's tag should be loaded.
         * The decision to load Gainsight will depend on custom properties and functional cookies.
         * @param customProperties Tenant's customProperties.
         */
        GainsightService.prototype.shouldLoadGainsightTag = function (customProperties) {
            return (this.cookieBannerService.isConfigCookiePreferencesDefined() &&
                this.cookieBannerService.isFunctionalCookieEnabled() &&
                !this.isGainsightDisabled(customProperties) &&
                !this.isCustomBranding());
        };
        GainsightService.prototype.canEditProductExperienceSettings = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentTenant, customProperties, gainsightKey, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            currentTenant = this.appState.currentTenant.value;
                            customProperties = currentTenant.customProperties;
                            _a = !!this.gainsightKey;
                            if (_a) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getGainsightKey()];
                        case 1:
                            _a = !!(_b.sent());
                            _b.label = 2;
                        case 2:
                            gainsightKey = _a;
                            return [2 /*return*/, (gainsightKey &&
                                    this.cookieBannerService.isConfigCookiePreferencesDefined() &&
                                    !this.isGainsightDisabled(customProperties) &&
                                    !!this.cookieBannerService.getUserCookiePreferences() &&
                                    !this.isCustomBranding())];
                    }
                });
            });
        };
        GainsightService.prototype.prepareEventName = function (baseEventName) {
            return baseEventName
                .split(':')
                .map(function (eventNamePart) { return lodashEs.camelCase(removeTranslationContext(eventNamePart)); })
                .join(':');
            function removeTranslationContext(eventNamePart) {
                return eventNamePart.replace(/`[\w\W]*`/g, '');
            }
        };
        GainsightService.prototype.isGainsightDisabled = function (customProperties) {
            var gainsightEnabled = customProperties && customProperties.gainsightEnabled;
            return gainsightEnabled === false;
        };
        GainsightService.prototype.isCustomBranding = function () {
            var brandingCssVars = this.options.get('brandingCssVars') || {};
            return !!brandingCssVars['brand-logo-img'];
        };
        GainsightService.prototype.loadScriptTag = function (scriptTag, key) {
            try {
                var windowRef_1 = window;
                var firstTag = document.getElementsByTagName('script')[0];
                var protocol = location.protocol;
                var gainsightGlobalScope_1 = this.GAINSIGHT_GLOBAL_SCOPE;
                scriptTag.src = protocol + "//" + this.GAINSIGHT_URL + key;
                (windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] =
                    windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] ||
                        // tslint:disable-next-line:only-arrow-functions
                        function () {
                            (windowRef_1[gainsightGlobalScope_1].q = windowRef_1[gainsightGlobalScope_1].q || []).push(arguments);
                        }),
                    (windowRef_1[gainsightGlobalScope_1].p = key);
                scriptTag.async = true;
                firstTag.parentNode.insertBefore(scriptTag, firstTag);
            }
            catch (ex) {
                console.warn('Failed to load Gainsight PX', ex);
            }
        };
        GainsightService.prototype.getInstanceIdFromUrl = function () {
            var hostName = location.hostname;
            return hostName.substring(hostName.indexOf('.') + 1);
        };
        /**
         * Reverses the translation object.
         *
         * **Example**
         * { Add widget: "Widget hinzufügen" }
         *
         * will be changed to:
         *
         * { Widget hinzufügen: "Add widget" }
         *
         * @param currentLang Language whose translated values are to be placed in the object key.
         * @returns Returns an inverted object where the keys have been swapped with the values.
         */
        GainsightService.prototype.getRevertedTranslations = function (currentLang) {
            var translations = this.translateService.store.translations[currentLang];
            var swappedKeysWithValues = {};
            Object.keys(translations).forEach(function (key) {
                swappedKeysWithValues[translations[key]] = key;
            });
            return swappedKeysWithValues;
        };
        /**Translates string back into English.
         * If the current application language is set to English, the string passed as an argument is returned.
         * @param textToTranslate string to translate.
         * @returns Returns the string translated into English.
         */
        GainsightService.prototype.getEnTranslation = function (textToTranslate, translations) {
            var enTranslation = translations[textToTranslate];
            if (!enTranslation) {
                return textToTranslate;
            }
            /** remove translation context */
            var regex = /\`(.*?)\`/;
            enTranslation = enTranslation.replace(regex, '');
            return enTranslation;
        };
        return GainsightService;
    }());
    GainsightService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function GainsightService_Factory() { return new GainsightService(i0__namespace.ɵɵinject(AppStateService), i0__namespace.ɵɵinject(OptionsService), i0__namespace.ɵɵinject(CookieBannerService), i0__namespace.ɵɵinject(UserPreferencesService), i0__namespace.ɵɵinject(i2__namespace.TranslateService)); }, token: GainsightService, providedIn: "root" });
    GainsightService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    GainsightService.ctorParameters = function () { return [
        { type: AppStateService },
        { type: OptionsService },
        { type: CookieBannerService },
        { type: UserPreferencesService },
        { type: i2.TranslateService }
    ]; };

    /**
     * This component is used as the outlet to show the action bars.
     * In a c8ycli app it is by default placed on the bootstrap component.
     */
    var ActionBarComponent = /** @class */ (function () {
        function ActionBarComponent(gainsightService) {
            this.gainsightService = gainsightService;
            /**
             * Identifies if the navigator is opened. If yes, the action-bar
             * needs to move to the right.
             */
            this.navigatorOpen = false;
            /**
             * Identifies if the current view has tabs. If yes, the action bar needs
             * to move down.
             */
            this.hasTabs = false;
            /**
             * Identifies if the tabs are aligned horizontally. If yes, the tabs don't
             * need to move to the left.
             */
            this.isTabsHorizontal = false;
            /**
             * Identifies if in a mobile view the toolbar is expanded or not.
             */
            this.isPageToolbarExpanded = false;
            /**
             * Adds the default `c8y-ui-action-bar` class.
             */
            this.uiActionBar = true;
            /**
             * The current items to display in the ActionBar.
             */
            this.items$ = rxjs.of([]);
            /**
             * Provides observable for right action items.
             */
            this.right$ = rxjs.of([]);
            /**
             * Provides observable for left action items.
             */
            this.left$ = rxjs.of([]);
            /**
             * Provides observable for more action items.
             */
            this.more$ = rxjs.of([]);
            /**
             * Returns true if no items are present and hides the action bar.
             */
            this.hidden$ = rxjs.of(true);
            /**
             * Binds hidden property to this component's native element
             */
            this.hidden = true;
            this.destroy$ = new rxjs.Subject();
        }
        ActionBarComponent.prototype.mouseDown = function (event) {
            if (event.getAttribute('id') === 'page-toolbar') {
                return;
            }
            var element = event.closest('[px-event]') || event.closest('[title]') || event.closest('[uib-tooltip]');
            if (!element) {
                return;
            }
            var eventName = element.getAttribute('px-event') || element.getAttribute('title') || element.getAttribute('uib-tooltip');
            var translatedEventName = this.gainsightService.translateToEnglish(eventName);
            this.gainsightService.triggerEvent("actionBarItem:" + translatedEventName, { url: element.baseURI });
        };
        ActionBarComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.right$ = this.items$.pipe(operators.map(function (items) { return lodashEs.filter(items, { placement: 'right' }); }), operators.map(function (items) { return lodashEs.sortBy(items, _this.byPriority); }));
            this.left$ = this.items$.pipe(operators.map(function (items) { return lodashEs.filter(items, { placement: 'left' }); }), operators.map(function (items) { return lodashEs.sortBy(items, _this.byPriority); }));
            this.more$ = this.items$.pipe(operators.map(function (items) { return lodashEs.filter(items, { placement: 'more' }); }), operators.map(function (items) { return lodashEs.sortBy(items, _this.byPriority); }));
            this.hidden$ = this.items$.pipe(operators.map(function (items) {
                return !(items && items.length);
            }));
            this.hidden$
                .pipe(operators.takeUntil(this.destroy$)).subscribe(function (hidden) {
                _this.hidden = hidden;
            });
        };
        ActionBarComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        ActionBarComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        return ActionBarComponent;
    }());
    ActionBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-action-bar',
                    template: "<div class=\"navbar-header\">\n  <p class=\"text-label-small p-l-16 p-t-8 p-b-8 visible-xs\">\n    <span class=\"text-primary\">{{ 'Action bar' | translate }}</span>\n  </p>\n</div>\n\n<div id=\"page-toolbar\" class=\"navbar-collapse\">\n  <ul class=\"nav navbar-nav navbar-left\">\n    <ng-container *ngFor=\"let item of left$ | async\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n  </ul>\n  <ul class=\"nav navbar-nav navbar-right\">\n    <ng-container *ngFor=\"let item of right$ | async\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n    <li class=\"no-remove more-wrapper\" *ngIf=\"(more$ | async).length > 0\">\n      <div class=\"dropdown\" dropdown>\n        <button\n          title=\"{{ 'More' | translate }}\u2026\"\n          class=\"dropdown-toggle c8y-dropdown d-flex\"\n          dropdownToggle\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          <span class=\"text-truncate\" translate>More\u2026</span>\n          <i [c8yIcon]=\"'caret-down'\"></i>\n        </button>\n        <ul class=\"dropdown-menu visible-xs\">\n          <ng-container *ngFor=\"let item of more$ | async\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n        <ul class=\"dropdown-menu dropdown-menu-right hidden-xs\" *dropdownMenu>\n          <ng-container *ngFor=\"let item of more$ | async\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n    </li>\n  </ul>\n</div>\n",
                    host: { class: 'c8y-ui-action-bar' }
                },] }
    ];
    ActionBarComponent.ctorParameters = function () { return [
        { type: GainsightService }
    ]; };
    ActionBarComponent.propDecorators = {
        navigatorOpen: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.navigator-open',] }],
        hasTabs: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.has-tabs',] }],
        isTabsHorizontal: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.horizontal-tabs',] }],
        uiActionBar: [{ type: i0.HostBinding, args: ['class.c8y-ui-action-bar',] }],
        items$: [{ type: i0.Input }],
        hidden: [{ type: i0.HostBinding }],
        mouseDown: [{ type: i0.HostListener, args: ['mousedown', ['$event.target'],] }]
    };

    /**
     * An action bar can be added with content projection or multi provider
     * extension. It allows to show them in three positions (left, right
     * or more). The actions placed here are always local actions to the
     * current route like "add device" or "lock dashboard".
     *
     * @example
     * ```html
     * <c8y-action-bar-item [placement]="'right'">
     *   <button class="btn btn-link" (click)="addRandom()"><i c8yIcon="plus-circle"></i> Add random</button>
     * </c8y-action-bar-item>
     * ```
     * @exports ActionBarComponent The outlet component
     * @exports ActionBarItemComponent The items to add with cp.
     */
    var ActionBarModule = /** @class */ (function () {
        function ActionBarModule() {
        }
        return ActionBarModule;
    }());
    ActionBarModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ActionBarComponent, ActionBarItemComponent],
                    imports: [dropdown.BsDropdownModule, CommonModule, collapse.CollapseModule, i1.RouterModule.forChild([])],
                    exports: [ActionBarComponent, ActionBarItemComponent]
                },] }
    ];

    /**
     * A hook to add an action using the multi-provider extension concept.
     */
    var HOOK_ACTION = new i0.InjectionToken('ActionFactory');
    /**
     * A service which defines global actions.
     */
    var ActionService = /** @class */ (function (_super) {
        __extends(ActionService, _super);
        function ActionService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.factories = [];
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_ACTION, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (items) { return sortByPriority(items); }), operators.shareReplay(1));
            return _this;
        }
        /**
         * Refresh the extension factories
         */
        ActionService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(ActionService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a new item to the actions in the header and emits a state change.
         * @param item The item to add.
         */
        ActionService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an action from the header and emits a state change.
         * @param item The item to remove.
         */
        ActionService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        return ActionService;
    }(StateService));
    ActionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ActionService_Factory() { return new ActionService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: ActionService, providedIn: "root" });
    ActionService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ActionService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    /**
     * This component is used as the outlet to show the action list.
     * In a c8ycli app it is by default placed on the header component near app-switcher.
     */
    var ActionOutletComponent = /** @class */ (function () {
        function ActionOutletComponent() {
            /**
             * Identifies if in a mobile view the toolbar is expanded or not.
             */
            this.isPageToolbarExpanded = false;
            /**
             * The current items to display in the action dropdown.
             */
            this.items = [];
        }
        Object.defineProperty(ActionOutletComponent.prototype, "hasItems", {
            /**
             * @ignore
             */
            get: function () {
                return !!this.items.length;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the items ordered by priority.
         */
        ActionOutletComponent.prototype.getByPriority = function () {
            return lodashEs.sortBy(this.items, this.byPriority);
        };
        /**
         * Invokes action after an action is clicked.
         */
        ActionOutletComponent.prototype.invoke = function (action) {
            if (action.action) {
                action.action.call();
            }
        };
        ActionOutletComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        return ActionOutletComponent;
    }());
    ActionOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-action-outlet',
                    template: "<div class=\"dropdown\" dropdown *ngIf=\"items && items.length > 0\">\n  <button\n    type=\"button\"\n    class=\"main-header-button dropdown-toggle c8y-dropdown\"\n    dropdownToggle\n    aria-haspopup=\"true\"\n    aria-expanded=\"true\"\n    title=\"{{'Actions' | translate}}\">\n    <i [c8yIcon]=\"'plus-circle'\" class=\"icon-2x\"></i>\n  </button>\n\n  <ul class=\"dropdown-menu cog-dropdown\" *dropdownMenu>\n    <ng-container *ngFor=\"let item of getByPriority()\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      <li *ngIf=\"item.label\">\n        <button title=\"{{ item.label | translate }}\" [attr.disabled]=\"item.disabled ? 'disabled' : null\" (click)=\"invoke(item)\">\n          <i *ngIf=\"item.icon\" [c8yIcon]=\"item.icon\"></i>{{item.label | translate}}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
                },] }
    ];
    ActionOutletComponent.propDecorators = {
        hasItems: [{ type: i0.HostBinding, args: ['class.main-header-item',] }],
        items: [{ type: i0.Input }]
    };

    /**
     * A <c8y-action> can be added with content projection.
     *
     * @example
     * ```html
     * <c8y-action>
     *   <button class="btn" (click)="myAction()">My action</button>
     * </c8y-action>
     * ```
     */
    var ActionComponent = /** @class */ (function () {
        function ActionComponent(actionService) {
            this.actionService = actionService;
            /**
             * Is this action disabled.
             */
            this.disabled = false;
            /**
             * The priority of this action (the higher the number, the higher the action will be displayed; optional)
             */
            this.priority = 0;
        }
        /**
         * After page view is initialized, component adds itself to global action list.
         */
        ActionComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () { return _this.actionService.add(_this); });
        };
        /**
         * Action is removed from global action list, if component is not used anymore.
         */
        ActionComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.actionService.remove(this);
        };
        return ActionComponent;
    }());
    ActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-action',
                    template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
                },] }
    ];
    ActionComponent.ctorParameters = function () { return [
        { type: ActionService }
    ]; };
    ActionComponent.propDecorators = {
        disabled: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        priority: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        template: [{ type: i0.ViewChild, args: ['template', { static: false },] }]
    };

    /**
     * The angular module definition for actions.
     * @exports ActionComponent
     * @exports ActionOutletComponent
     */
    var ActionModule = /** @class */ (function () {
        function ActionModule() {
        }
        return ActionModule;
    }());
    ActionModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ActionOutletComponent,
                        ActionComponent
                    ],
                    imports: [
                        CommonModule,
                        dropdown.BsDropdownModule,
                        i1.RouterModule.forChild([])
                    ],
                    exports: [
                        ActionOutletComponent,
                        ActionComponent
                    ]
                },] }
    ];

    /**
     * A service which allows to display alerts.
     */
    var AlertService = /** @class */ (function (_super) {
        __extends(AlertService, _super);
        function AlertService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            /**
             * @ignore
             */
            _this.state$ = new rxjs.BehaviorSubject([]);
            _this.MAX_ALERTS = 3;
            _this.ALERT_TIMEOUT = 3000;
            return _this;
        }
        Object.defineProperty(AlertService.prototype, "state", {
            /**
             * Returns all alerts.
             * @readonly
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a new alert to the current state.
         */
        AlertService.prototype.add = function (alert) {
            this.addAlert(alert);
        };
        /**
         * Adds a alert by text.
         */
        AlertService.prototype.addByText = function (type, txt, detailedData) {
            this.addAlert({ text: txt, type: type, detailedData: detailedData });
        };
        /**
         * Returns all alerts.
         * @deprecated Use alertService.alerts instead.
         */
        AlertService.prototype.list = function () {
            return this.state;
        };
        /**
         * Remove an alert from the current state.
         */
        AlertService.prototype.remove = function (alert) {
            var _this = this;
            this.changeAlerts(this.state.filter(function (item) { return !_this.areSame(alert, item); }));
        };
        /**
         * Updates matching alert with provided values.
         */
        AlertService.prototype.update = function (alert, fieldsToUpdate) {
            var _this = this;
            this.changeAlerts(this.state.map(function (item) {
                if (_this.areSame(alert, item)) {
                    Object.assign(item, fieldsToUpdate);
                }
                return item;
            }));
        };
        /**
         * Removes last danger alert.
         * It can be used e.g. in the case of a failed request which triggered an alert, to hide it from user.
         *
         * ```js
         *  try {
         *    // something that might throw a danger server msg
         *  } catch (ex) {
         *   this.alertService.removeLastDanger();
         *  }
         * ```
         */
        AlertService.prototype.removeLastDanger = function () {
            var firstDangerAlert = this.state.reverse().find(function (_a) {
                var type = _a.type;
                return type === 'danger';
            });
            this.changeAlerts(this.state.filter(function (alert) { return alert !== firstDangerAlert; }));
        };
        /**
         * Shorthand for a save successful alert.
         * @param savedObject The object which was saved.
         * @return A function that can be executed to show the msg.
         */
        AlertService.prototype.saveSuccess = function (savedObject) {
            var _this = this;
            return function () {
                var text = savedObject + " saved successfully";
                _this.addByText('success', text);
            };
        };
        /**
         * Shorthand for a create successful alert.
         * @param createdObject The object which was created.
         * @return A function that can be executed to show the msg.
         */
        AlertService.prototype.createSuccess = function (createdObject) {
            var _this = this;
            return function () {
                var text = createdObject + " created successfully";
                _this.addByText('success', text);
            };
        };
        /**
         * Clears all alerts.
         */
        AlertService.prototype.clearAll = function () {
            this.changeAlerts([]);
        };
        /**
         * A shorthand to display a simple success message.
         * @param text The success text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.success = function (text, detailedData) {
            this.addByText('success', text, detailedData);
        };
        /**
         * A shorthand to display a simple danger message.
         * @param text The danger text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.danger = function (text, detailedData) {
            this.addByText('danger', text, detailedData);
        };
        /**
         * A shorthand to display a simple info message.
         * @param text The info text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.info = function (text, detailedData) {
            this.addByText('info', text, detailedData);
        };
        /**
         * A shorthand to display a simple warning message.
         * @param text The warning text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.warning = function (text, detailedData) {
            this.addByText('warning', text, detailedData);
        };
        /**
         * Creates alert from standard api errors.
         * Should be used for errors generated by @c8y/client services.
         * @param {IResult}  error The error from server.
         * @param {alertType} type The type of alert.
         */
        AlertService.prototype.addServerFailure = function (error, type) {
            if (type === void 0) { type = 'danger'; }
            var data = error.data, res = error.res;
            var text = (data === null || data === void 0 ? void 0 : data.message) || null;
            var detailedData;
            if (data) {
                if (typeof data === 'object') {
                    detailedData = data.exceptionMessage;
                }
                else if (typeof data === 'string') {
                    detailedData = data;
                }
            }
            var hasRelevantMessage = !!(text || detailedData);
            if (!text) {
                text = gettext('A server error occurred.');
            }
            if (res && !hasRelevantMessage) {
                detailedData = {
                    status: res.status,
                    statusText: res.statusText,
                    url: res.url
                };
            }
            this.addAlert({
                type: type,
                text: text,
                detailedData: detailedData
            });
        };
        /**
         * Compares two alert objects. Alerts are same if text, type, detailed data and callbacks are same.
         * Callbacks are same if they refer to the same function.
         */
        AlertService.prototype.areSame = function (alert1, alert2) {
            return (alert1.text === alert2.text &&
                alert1.type === alert2.type &&
                lodashEs.isEqual(alert1.detailedData, alert2.detailedData) &&
                alert1.onClose === alert2.onClose &&
                alert1.onDetail === alert2.onDetail);
        };
        AlertService.prototype.changeAlerts = function (newAlerts) {
            this.state$.next(newAlerts);
        };
        AlertService.prototype.addAlert = function (alert) {
            var _this = this;
            if (!alert.text && !alert.type) {
                throw new Error('Cannot add empty alert');
            }
            var alertAlreadyAdded = this.state.find(function (item) { return _this.areSame(alert, item); });
            if (alertAlreadyAdded) {
                return;
            }
            this.changeAlerts(__spreadArray(__spreadArray([], __read(this.state)), [alert]));
            this.hideAutomaticallyIfNeeded(alert);
            this.removeOldestIfMax();
        };
        AlertService.prototype.hideAutomaticallyIfNeeded = function (alert) {
            var _this = this;
            var isSuccess = alert.type === 'success';
            var noDetails = !alert.detailedData;
            var alertTimeout = isSuccess && noDetails ? this.ALERT_TIMEOUT : 0;
            if (typeof alert.timeout !== 'undefined') {
                alertTimeout = alert.timeout;
            }
            if (alertTimeout) {
                setTimeout(function () { return _this.remove(alert); }, alertTimeout);
            }
        };
        AlertService.prototype.removeOldestIfMax = function () {
            if (this.state.length > this.MAX_ALERTS) {
                var _a = __read(this.state), firstRemoved = _a.slice(1);
                this.changeAlerts(firstRemoved);
            }
        };
        return AlertService;
    }(StateService));
    AlertService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AlertService_Factory() { return new AlertService(); }, token: AlertService, providedIn: "root" });
    AlertService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    /**
     * The content of `c8y-alert-details` component will be displayed as alert's details.
     * This component must be placed inside `c8y-alert` component.
     */
    var AlertDetailsComponent = /** @class */ (function () {
        function AlertDetailsComponent() {
        }
        return AlertDetailsComponent;
    }());
    AlertDetailsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-alert-details',
                    template: "<ng-content></ng-content>"
                },] }
    ];

    /**
     * Alert component allows creating alert with complex view.
     */
    var AlertComponent = /** @class */ (function () {
        /**
         * @ignore
         */
        function AlertComponent(alertService) {
            this.alertService = alertService;
        }
        /**
         * AlertComponent adds new alert to collection stored in alertService after view init.
         */
        AlertComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (!this.containDetailsComponent) {
                this.detailedData = null;
            }
            this.viewInitTimeout = setTimeout(function () { return _this.alertService.add(_this); });
        };
        /**
         * AlertComponent removes alert from collection stored in alertService on destroy component.
         */
        AlertComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.alertService.remove(this);
        };
        return AlertComponent;
    }());
    AlertComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-alert',
                    template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>"
                },] }
    ];
    AlertComponent.ctorParameters = function () { return [
        { type: AlertService }
    ]; };
    AlertComponent.propDecorators = {
        type: [{ type: i0.Input }],
        onDetail: [{ type: i0.Input }],
        onClose: [{ type: i0.Input }],
        detailedData: [{ type: i0.ViewChild, args: ['detailedData', { static: false },] }],
        text: [{ type: i0.ViewChild, args: ['text', { static: false },] }],
        containDetailsComponent: [{ type: i0.ContentChild, args: [AlertDetailsComponent, { static: false },] }]
    };

    /**
     * Alert outlet component shows all added alerts. It is used in the application's `c8y-bootstrap` component.
     *
     * For applications which don’t use `c8y-bootstrap` component but want to display alerts via AlertService, a c8y-alert-outlet component needs to be added explicitly in the template.
     *
     * ## Example:
     * ```html
     *  <div class="alerts">
     *    <c8y-alert-outlet></c8y-alert-outlet>
     *  </div>
     * ```
     */
    var AlertOutletComponent = /** @class */ (function () {
        /**
         * @ignore
         */
        function AlertOutletComponent(position, alertService) {
            this.position = position;
            this.alertService = alertService;
            /**
             * Currently displayed details of an alert. Only one alert’s details can be displayed at a time.”
             */
            this.detailDisplayedAlert = {};
            /**
             * @ignore
             */
            this.isStatic = false;
            this.isStatic = this.position === 'static';
        }
        Object.defineProperty(AlertOutletComponent.prototype, "alerts", {
            /**
             * The array of current alerts.
             */
            get: function () {
                return this.alertService.state$;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns a CSS class for an alert depending on its type to style the corresponding alert component.
         */
        AlertOutletComponent.prototype.getClass = function (alert) {
            var classes = [];
            if (alert.type !== 'danger') {
                classes.push('interact');
            }
            classes.push("alert-" + alert.type);
            return classes.join(' ');
        };
        /**
         * Executes alert’s onClose method, if provided, and closes the alert.
         * @param alert The alert which will be closed.
         */
        AlertOutletComponent.prototype.close = function (alert) {
            if (alert.onClose) {
                alert.onClose();
            }
            this.alertService.remove(alert);
        };
        /**
         * Expands details part of particular alert, and collapses details for another alerts.
         * @param alert The alert which details should be expanded.
         */
        AlertOutletComponent.prototype.showDetails = function (alert) {
            if (alert.onDetail) {
                return alert.onDetail();
            }
            this.detailDisplayedAlert = Object.assign({}, alert);
            this.detailDisplayedAlert.mode = 'raw';
            this.setDetailsContent(alert);
        };
        /**
         * Returns true if alert has extra detailedData or defines custom onDetail method.
         */
        AlertOutletComponent.prototype.hasDetails = function (alert) {
            return (alert.detailedData || alert.onDetail);
        };
        /**
         * Collapses alert's details.
         */
        AlertOutletComponent.prototype.closeDetails = function () {
            this.detailDisplayedAlert = {};
        };
        /**
         * Returns true if details part of alert is expanded.
         */
        AlertOutletComponent.prototype.isDetailsShow = function (alert) {
            return this.alertService.areSame(alert, this.detailDisplayedAlert);
        };
        /**
         * @ignore
         */
        AlertOutletComponent.prototype.isTemplateRef = function (value) {
            return value instanceof i0.TemplateRef;
        };
        /**
         * @ignore
         */
        AlertOutletComponent.prototype.template = function (content) {
            return this.isTemplateRef(content) ? content : undefined;
        };
        AlertOutletComponent.prototype.setDetailsContent = function (alert) {
            if (this.isTemplateRef(alert.detailedData) || typeof alert.detailedData === 'string') {
                this.detailDisplayedAlert.contents = alert.detailedData;
            }
            else {
                this.detailDisplayedAlert.contents = JSON.stringify(alert.detailedData, null, 2);
            }
        };
        return AlertOutletComponent;
    }());
    AlertOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-alert-outlet',
                    template: "<div\n  class=\"alert animated fadeInRightBig m-t-16\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [textContent]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i c8yIcon=\"chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i c8yIcon=\"chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [textContent]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    AlertOutletComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Attribute, args: ['position',] }] },
        { type: AlertService }
    ]; };
    AlertOutletComponent.propDecorators = {
        isStatic: [{ type: i0.HostBinding, args: ['class.static',] }]
    };

    /**
     * The content of `c8y-alert-text` component will be displayed as alert's text.
     * This component must be placed inside `c8y-alert` component.
     */
    var AlertTextComponent = /** @class */ (function () {
        function AlertTextComponent() {
        }
        return AlertTextComponent;
    }());
    AlertTextComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-alert-text',
                    template: "<ng-content></ng-content>"
                },] }
    ];

    /**
     * Alert module is used for displaying status messages to the user e.g. danger, success, warning and info alerts.
     */
    var AlertModule = /** @class */ (function () {
        function AlertModule() {
        }
        return AlertModule;
    }());
    AlertModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        AlertOutletComponent,
                        AlertComponent,
                        AlertDetailsComponent,
                        AlertTextComponent
                    ],
                    declarations: [
                        AlertOutletComponent,
                        AlertComponent,
                        AlertDetailsComponent,
                        AlertTextComponent
                    ]
                },] }
    ];

    /**
     * Base navigator node. Represents a single entry in the navigator menu.
     * Is considered to be the basic building block of the navigator.
     */
    var NavigatorNode = /** @class */ (function () {
        /**
         * @ignore
         */
        function NavigatorNode(data) {
            /**
             * Navigator node children (subentries).
             */
            this.children = [];
            /**
             * Navigator node parent nodes.
             */
            this.parents = [];
            /**
             * Indicates whether the navigator node should be active based on matching the node path and the URL path.
             * To match the URL exactly, set this option to true.
             *
             * routerLinkExact set to true:
             * When the URL path is set to /a/b/c and the node path to /a/b then the node will not be set active.
             *
             * routerLinkExact set to false:
             * When the URL path is set to /a/b/c and the node path to /a/b then the node will be set active.
             */
            this.routerLinkExact = true;
            /**
             * Indicates that the navigator node is expanded/collapsed.
             */
            this.open = false;
            /**
             * Indicates that the navigator node is visible/hidden.
             */
            this.hidden = false;
            /**
             * Indicates that the navigator node is draggable.
             */
            this.draggable = false;
            /**
             * Indicates that the navigator node is droppable.
             */
            this.droppable = false;
            /**
             * Indicates that the navigator node is dragged.
             */
            this.dragged = false;
            /**
             * Indicates that currently something is dragged over the node.
             */
            this.draggedHover = false;
            /**
             * Confirmation popover displayed at the end of the process of moving the navigator menu item.
             */
            this.confirm = undefined;
            this._priority = 0;
            this.update(data);
        }
        Object.defineProperty(NavigatorNode.prototype, "hasChildren", {
            /**
             * Returns information whether a navigator node has children.
             * @readonly
             */
            get: function () {
                return this.children.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorNode.prototype, "id", {
            /**
             * Returns the ID of the navigator node.
             * @readonly
             */
            get: function () {
                return 'navigator_node_' + lodashEs.snakeCase(this.label);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorNode.prototype, "priority", {
            /**
             * Returns the priority value of the navigator node.
             * @readonly
             */
            get: function () {
                if (this._priority) {
                    return this._priority;
                }
                else {
                    var childrenPriorities = this.children.map(function (_a) {
                        var priority = _a.priority;
                        return priority || 0;
                    });
                    if (childrenPriorities.length) {
                        return childrenPriorities.length ? Math.max.apply(Math, __spreadArray([], __read(childrenPriorities))) : 0;
                    }
                    return 0;
                }
            },
            /**
             * Sets the priority value of the navigator node.
             *
             * @param {number} priority Priority value.
             */
            set: function (priority) {
                this._priority = priority;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @ignore
         */
        NavigatorNode.prototype.openOnStart = function (url) {
            return false;
        };
        /**
         * Adds a child navigator node to the node.
         *
         * @param {NavigatorNode} node Child node.
         */
        NavigatorNode.prototype.add = function (node) {
            if (node === this) {
                throw new Error('Adding node to itself');
            }
            if (this.children.indexOf(node) === -1) {
                this.children.push(node);
            }
            if (node.parents.indexOf(this) === -1) {
                node.parents.push(this);
            }
            this.updateChildren();
        };
        /**
         * Removes the child navigator node from the node.
         *
         * @param {NavigatorNode} node Child node.
         */
        NavigatorNode.prototype.remove = function (node) {
            var ix = this.children.indexOf(node);
            var pix = node.parents.indexOf(this);
            if (ix > -1) {
                this.children.splice(ix, 1);
            }
            if (pix > -1) {
                node.parents.splice(pix, 1);
            }
            this.updateChildren();
        };
        /**
         * Updates the navigator node.
         *
         * @param {NavigatorNodeData} data Data to be updated.
         */
        NavigatorNode.prototype.update = function (data) {
            if (data) {
                Object.assign(this, data);
                if (data.hidden !== undefined) {
                    this.parents.forEach(function (p) {
                        p.updateHidden();
                    });
                }
            }
        };
        /**
         * Returns a child navigator node based on the predicate.
         *
         * @param {string|object} predicate Filter criteria.
         * @param {string} findBy NavigatorNode field name to compare.
         *
         * @example
         * ```ts
         * // The function will compare the labels to the string and return a matching result.
         * // The capitalization of the characters does not matter (case insensitive).
         * const predicate = 'group1';
         * const childNode = parentNode.find(predicate);
         *
         * // Check: [lodash matches](https://lodash.com/docs/4.17.15#matches)
         * const predicate = { label: 'group2' };
         * const childNode = parentNode.find(predicate);
         * ```
         */
        NavigatorNode.prototype.find = function (predicate, findBy) {
            if (findBy === void 0) { findBy = 'label'; }
            if (typeof predicate === 'string') {
                if (findBy === 'label') {
                    var compareLabel_1 = predicate.toLocaleLowerCase();
                    predicate = function (_a) {
                        var label = _a.label;
                        return compareLabel_1 === label.toLowerCase();
                    };
                }
                else {
                    var compareId_1 = predicate;
                    predicate = function (_a) {
                        var featureId = _a.featureId;
                        return compareId_1 === featureId;
                    };
                }
            }
            if (typeof predicate === 'object') {
                predicate = lodashEs.matches(predicate);
            }
            if (typeof predicate !== 'function') {
                throw new Error('Invalid search predicate');
            }
            return this.children.reduce(function (found, child) { return found || child.find(predicate); }, this.children.find(predicate));
        };
        /**
         * Removes children nodes.
         */
        NavigatorNode.prototype.empty = function () {
            this.children.length = 0;
        };
        /**
         * @ignore
         */
        NavigatorNode.prototype.click = function (options) {
            if (options === void 0) { options = {}; }
            // do nothing
        };
        /**
         * This event is fired when an element is dropped on a valid drop target.
         * @param $event DOM event.
         */
        NavigatorNode.prototype.drop = function ($event) {
            $event.stopPropagation();
            clearTimeout(this.expandDragTimeout);
        };
        /**
         * This event is fired when the user starts dragging an element.
         * @param $event DOM event.
         */
        NavigatorNode.prototype.dragStart = function ($event) {
            $event.stopPropagation();
            // we can't pass a object to setData, so we do it via service
            // set data is still needed, to make the drag&drop work
            $event.dataTransfer.setData('node', 'node');
            this.dragged = true;
        };
        /**
         * This event is fired when a drag operation has ended.
         * @param $event DOM event.
         */
        NavigatorNode.prototype.dragEnd = function ($event) {
            $event.stopPropagation();
            this.dragged = false;
        };
        Object.defineProperty(NavigatorNode.prototype, "canDrop", {
            /**
             * Returns information whether the navigator node is droppable.
             * @readonly
             */
            get: function () {
                return this.droppable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorNode.prototype, "canNavigate", {
            /**
             * Returns information whether navigation is possible.
             * @readonly
             */
            get: function () {
                return typeof this.path !== 'undefined';
            },
            enumerable: false,
            configurable: true
        });
        /**
         * This event is fired when a dragged element enters a valid drop target.
         * @param $event DOM event.
         */
        NavigatorNode.prototype.dragEnter = function ($event) {
            var _this = this;
            $event.preventDefault();
            $event.stopPropagation();
            this.draggedHover = true;
            if (!this.open) {
                this.expandDragTimeout = setTimeout(function () { return _this.expand(); }, 1000);
            }
        };
        /**
         * This event is fired when a dragged element leaves a valid drop target.
         * @param $event DOM event.
         */
        NavigatorNode.prototype.dragLeave = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            this.draggedHover = false;
            clearTimeout(this.expandDragTimeout);
        };
        /**
         * Expands the navigator node if it is collapsed.
         */
        NavigatorNode.prototype.expand = function () {
            if (!this.open) {
                this.open = true;
                this.click({ open: true, expander: true });
            }
        };
        /**
         * Performs a callback function recursively on each of the navigator node's children down the hierarchy.
         * @param {function} callback Function to be called.
         *
         * @example
         * ```ts
         * const expandChild = (childNode) => childNode.expand();
         * parentNode.traverse(expandChild);
         * ```
         */
        NavigatorNode.prototype.traverse = function (callback) {
            if (this.children) {
                this.children.forEach(function (child) {
                    callback(child);
                    child.traverse(callback);
                });
            }
        };
        /**
         * @ignore
         */
        NavigatorNode.prototype.destroy = function () {
            // nothing todo here
        };
        /**
         * Counts the amount of children nodes.
         */
        NavigatorNode.prototype.countChildren = function () {
            return this.children.length;
        };
        /**
         * Identifies itself.
         */
        NavigatorNode.prototype.toString = function () {
            return NavigatorNode.NAME;
        };
        NavigatorNode.prototype.hasChildDevices = function () {
            return false;
        };
        /**
         * Updates the navigator node by sorting its children and also checking their visibility.
         */
        NavigatorNode.prototype.updateChildren = function () {
            this.sort();
            this.updateHidden();
        };
        /**
         * Sorts the children of the navigator node, by priority and name (ASC).
         * The higher the priority, the higher the position in the hierarchy.
         * For the same priority values, the alphabetical order will take precedence.
         */
        NavigatorNode.prototype.sort = function () {
            this.children.sort(function (a, b) {
                if (a.priority > b.priority) {
                    return -1;
                }
                else if (a.priority < b.priority) {
                    return 1;
                }
                else if ((a.label || '').toLowerCase() < (b.label || '').toLowerCase()) {
                    return -1;
                }
                else if ((a.label || '').toLowerCase() > (b.label || '').toLowerCase()) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        };
        /**
         * Checks if the navigator node should be hidden based on the visibility of its child nodes.
         */
        NavigatorNode.prototype.updateHidden = function () {
            if (typeof this.path === 'undefined') {
                this.hidden = !this.children.some(function (_a) {
                    var hidden = _a.hidden;
                    return !hidden;
                });
            }
        };
        return NavigatorNode;
    }());
    NavigatorNode.NAME = 'NavigatorNode';

    /**
     * Root navigator node. Top node in the hierarchy.
     * The root node is used as an anchor point for the rest of the nodes.
     */
    var NavigatorNodeRoot = /** @class */ (function (_super) {
        __extends(NavigatorNodeRoot, _super);
        function NavigatorNodeRoot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Adds top nodes to the navigator tree structure. These nodes are the direct children of the root node.
         * In the case of the cockpit application, such a node is, for example, the "Home" menu entry.
         *
         * @example
         * ```ts
         * const nodeData: NavigatorNodeData = { label: 'Home' } ;
         * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
         *
         * // Based on the node data, a new node will be created and assigned to root.
         * root.addRoot(nodeData);
         *
         * const parentNode: NavigatorNode =  new NavigatorNode({ label: 'Configuration'...});
         * const nodeData: NavigatorNodeData = { label: 'Exports', parent: parentNode } ;
         * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
         *
         * // Based on the node data, parent node will be directly assigned to the root node, and newly created child node
         * // will be added to the parent node.
         * root.add(nodeData);
         *
         * ```
         *
         * @param {Partial<NavigatorNodeData>} nodeData Data on the basis of which a new node is created.
         */
        NavigatorNodeRoot.prototype.addRoot = function (nodeData) {
            var duplicate;
            if (nodeData.preventDuplicates) {
                duplicate = this.find(function (_a) {
                    var path = _a.path, parents = _a.parents, label = _a.label;
                    return (path === nodeData.path &&
                        label === nodeData.label &&
                        parents.some(function (p) { return p.label === nodeData.parent; }));
                });
                if (duplicate && !duplicate.hidden) {
                    duplicate.routerLinkExact = false;
                    return duplicate;
                }
            }
            var parent = nodeData.parent;
            var node = this.createNode(nodeData);
            var localParent;
            if (parent) {
                if (typeof parent === 'object') {
                    localParent = this.find(parent.label);
                    if (localParent) {
                        localParent.update(parent);
                    }
                }
                else if (typeof parent === 'string' || typeof parent === 'function') {
                    localParent = this.find(parent);
                }
                if (!localParent) {
                    localParent = this.createNode(parent);
                    if (!this.find(function (n) { return localParent === n; })) {
                        this.add(localParent);
                    }
                }
            }
            (localParent || this).add(node);
            return node;
        };
        /**
         * Creates a new navigator node.
         * @param nodeData The data that serves as the basis for creating a new node.
         */
        NavigatorNodeRoot.prototype.createNode = function (nodeData) {
            if (nodeData instanceof NavigatorNode) {
                return nodeData;
            }
            if (typeof nodeData === 'string') {
                return new NavigatorNode({ label: nodeData });
            }
            if (typeof nodeData === 'object') {
                return new NavigatorNode(Object.assign(Object.assign({}, nodeData), { parent: undefined }));
            }
            throw new Error('Wrong type of node data');
        };
        return NavigatorNodeRoot;
    }(NavigatorNode));

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_NAVIGATOR_NODES = new i0.InjectionToken('NavigatorNodesFactory');
    /**
     * A service which defines the navigator.
     */
    var NavigatorService = /** @class */ (function (_super) {
        __extends(NavigatorService, _super);
        function NavigatorService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.router = router;
            /**
             * Refresh the extension factories subject.
             * @readonly
             */
            _this.refreshTrigger = new rxjs.Subject();
            /**
             * @ignore
             */
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            /**
             * Indicates whether the menu entry associated with the given URL should be expanded.
             */
            _this.firstUrl = true;
            /**
             * Additional factories that can be added by plugins.
             */
            _this.factories = [];
            var rootNode = new NavigatorNodeRoot();
            _this.items$ = fromTriggerOnce(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_NAVIGATOR_NODES, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (nodes) {
                var noParent = nodes.filter(function (node) { return !node.parent; });
                var withParent = nodes.filter(function (node) { return node.parent; });
                // Based on the sortedNodes array, the nodes are sequentially created.
                // Nodes sorting is done in two steps to have the top-level nodes first.
                // This way, by the time we are adding a child node, the parent node is already present.
                var sortedNodes = sortByPriority(noParent).concat(sortByPriority(withParent));
                rootNode.empty();
                sortedNodes.forEach(function (node) { return rootNode.addRoot(node); });
                return rootNode.children;
            }), operators.shareReplay(1));
            return _this;
        }
        /**
         * Checks whenever a navigator entry associated with the given URL should be expanded.
         * @param {NavigatorNode} node Navigator node.
         */
        NavigatorService.prototype.openOnFirstUrl = function (node) {
            if (this.firstUrl && !!node.path) {
                return (this.router.isActive(node.path, node.routerLinkExact) || node.openOnStart(this.router.url));
            }
            return false;
        };
        Object.defineProperty(NavigatorService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Refresh the extension factories.
         */
        NavigatorService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        /**
         * Adds a new node to the navigator.
         * @param {NavigatorNode} node Navigator node to add.
         */
        NavigatorService.prototype.add = function (node) {
            this.state.add(node);
            this.emitNewState();
        };
        /**
         * Removes a node from the navigator.
         * @param {NavigatorNode} node Navigator node to remove.
         */
        NavigatorService.prototype.remove = function (node) {
            this.state.delete(node);
            this.emitNewState();
        };
        return NavigatorService;
    }(StateService));
    NavigatorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function NavigatorService_Factory() { return new NavigatorService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: NavigatorService, providedIn: "root" });
    NavigatorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    NavigatorService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    var ColorService = /** @class */ (function () {
        function ColorService() {
        }
        ColorService.prototype.generateColor = function (data) {
            return __awaiter(this, void 0, void 0, function () {
                var hashedString;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sha256(data)];
                        case 1:
                            hashedString = _a.sent();
                            return [2 /*return*/, this.stringToColor(hashedString)];
                    }
                });
            });
        };
        ColorService.prototype.generateColorForDatapoint = function (fragment, series) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.generateColor(JSON.stringify({ fragment: fragment, series: series }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        ColorService.prototype.sha256 = function (message) {
            return __awaiter(this, void 0, void 0, function () {
                var msgBuffer, hashBuffer, hashArray, hashHex;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            msgBuffer = new TextEncoder().encode(message);
                            return [4 /*yield*/, crypto.subtle.digest('SHA-256', msgBuffer)];
                        case 1:
                            hashBuffer = _a.sent();
                            hashArray = Array.from(new Uint8Array(hashBuffer));
                            hashHex = hashArray.map(function (b) { return b.toString(16).padStart(2, '0'); }).join('');
                            return [2 /*return*/, hashHex];
                    }
                });
            });
        };
        ColorService.prototype.stringToColor = function (str) {
            var hash = 0;
            for (var i = 0; i < str.length; i++) {
                // tslint:disable-next-line: no-bitwise
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            var color = '#';
            for (var i = 0; i < 3; i++) {
                // tslint:disable-next-line: no-bitwise
                var value = (hash >> (i * 8)) & 0xff;
                color += value.toString(16).padStart(2, '0').substring(-2);
            }
            return color;
        };
        return ColorService;
    }());
    ColorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ColorService_Factory() { return new ColorService(); }, token: ColorService, providedIn: "root" });
    ColorService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    /**
     * The maximum pageSize used in API queries to c8y.
     */
    var MAX_PAGE_SIZE = 2000;

    function retryWithDelay(delayTime, count) {
        if (count === void 0) { count = 1; }
        return function (input) { return input.pipe(operators.retryWhen(function (errors) { return errors.pipe(operators.scan(function (acc, error) { return ({ count: acc.count + 1, error: error }); }, {
            count: 0,
            error: undefined,
        }), operators.tap(function (current) {
            if (current.count > count) {
                throw current.error;
            }
        }), operators.delay(delayTime)); })); };
    }

    var _a$2, _b$1, _c, _d, _e;
    exports.Status = void 0;
    (function (Status) {
        Status["SUCCESS"] = "success";
        Status["WARNING"] = "warning";
        Status["DANGER"] = "danger";
        Status["INFO"] = "info";
    })(exports.Status || (exports.Status = {}));
    var statusIcons = (_a$2 = {},
        _a$2[exports.Status.SUCCESS] = 'check-circle',
        _a$2[exports.Status.WARNING] = 'exclamation-triangle',
        _a$2[exports.Status.DANGER] = 'exclamation-circle',
        _a$2[exports.Status.INFO] = 'info-circle',
        _a$2);
    var statusClasses = (_b$1 = {},
        _b$1[exports.Status.SUCCESS] = "text-" + exports.Status.SUCCESS,
        _b$1[exports.Status.WARNING] = "text-" + exports.Status.WARNING,
        _b$1[exports.Status.DANGER] = "text-" + exports.Status.DANGER,
        _b$1[exports.Status.INFO] = "text-" + exports.Status.INFO,
        _b$1);
    var statusAlert = (_c = {},
        _c[exports.Status.SUCCESS] = "alert-" + exports.Status.SUCCESS,
        _c[exports.Status.WARNING] = "alert-" + exports.Status.WARNING,
        _c[exports.Status.DANGER] = "alert-" + exports.Status.DANGER,
        _c[exports.Status.INFO] = "alert-" + exports.Status.INFO,
        _c);
    var operationStatusIcons = (_d = {},
        _d[client.OperationStatus.PENDING] = 'clock-o',
        _d[client.OperationStatus.EXECUTING] = 'refresh',
        _d[client.OperationStatus.SUCCESSFUL] = 'check-circle',
        _d[client.OperationStatus.FAILED] = 'exclamation-circle',
        _d);
    var operationStatusClasses = (_e = {},
        _e[client.OperationStatus.PENDING] = 'text-info',
        _e[client.OperationStatus.EXECUTING] = 'text-info',
        _e[client.OperationStatus.SUCCESSFUL] = 'text-success',
        _e[client.OperationStatus.FAILED] = 'text-danger',
        _e);

    /**
     * A service which defines header functions.
     */
    var HeaderService = /** @class */ (function (_super) {
        __extends(HeaderService, _super);
        function HeaderService(navigatorService, options, humanizeAppName) {
            var _this = _super.call(this) || this;
            _this.navigatorService = navigatorService;
            _this.options = options;
            _this.humanizeAppName = humanizeAppName;
            _this.headerOpen = false;
            _this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES = 1000;
            _this.hasItemsInNavigator$ = _this.navigatorService.items$.pipe(operators.delay(_this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES), operators.map(function (_a) {
                var length = _a.length;
                return !!length;
            }), operators.distinctUntilChanged());
            _this.state$ = new rxjs.BehaviorSubject({
                title: undefined,
                nav: {
                    open: false
                }
            });
            _this.title = undefined;
            _this.header$ = _this.map(function (header) { return header; });
            _this.navigatorOpen$ = _this.map(function (_a) {
                var nav = _a.nav;
                return nav.open;
            }).pipe(operators.combineLatest(_this.hasItemsInNavigator$), operators.map(function (_a) {
                var _b = __read(_a, 2), open = _b[0], hasItems = _b[1];
                return open && hasItems;
            }));
            var titleReference = document.querySelector('title');
            var isGlobalTitleValid = (!!options.globalTitle && typeof options.globalTitle === 'string' && options.globalTitle.length > 0);
            _this.title = {
                elementRef: titleReference,
                titleSuffix: isGlobalTitleValid ? options.globalTitle + " - " + options.name : options.name
            };
            _this.humanizeAppName.transform(options.name)
                .subscribe(function (nameTranslated) {
                _this.title.titleSuffix = isGlobalTitleValid ? options.globalTitle + " - " + nameTranslated : nameTranslated;
            });
            return _this;
        }
        Object.defineProperty(HeaderService.prototype, "state", {
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HeaderService.prototype, "navigatorHiddenOnStartup", {
            get: function () {
                return this.options.hideNavigator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HeaderService.prototype, "largeWidth", {
            get: function () {
                return document.documentElement.clientWidth > 1200;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HeaderService.prototype, "shouldToggle", {
            get: function () {
                return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Toggles the main header menu in mobile view.
         */
        HeaderService.prototype.toggle = function () {
            this.headerOpen = !this.headerOpen;
        };
        /**
         * Toggles the navigator open status.
         */
        HeaderService.prototype.toggleNavigator = function () {
            this.state.nav.open = !this.state.nav.open;
            this.emitNewState();
        };
        /**
         * Force to close the navigator.
         */
        HeaderService.prototype.closeNavigator = function () {
            this.state.nav.open = false;
            this.emitNewState();
        };
        /**
         * Configures navigation options.
         * @param config Object with the properties:
         * - open: Boolean
         */
        HeaderService.prototype.configNavigator = function (config) {
            if (config === void 0) { config = {}; }
            this.state.nav = Object.assign(this.state.nav, config);
            this.emitNewState();
        };
        /**
         * Change the application title.
         * @param newTitle The new title of the application.
         */
        HeaderService.prototype.changeTitle = function (newTitle, pageTitleUpdate) {
            if (pageTitleUpdate === void 0) { pageTitleUpdate = true; }
            this.state.title = newTitle;
            this.state.pageTitleUpdate = pageTitleUpdate;
            this.emitNewState();
        };
        /**
         * Change the page title.
         * @param newTitle The new title of the page.
         */
        HeaderService.prototype.changePageTitle = function (newTitle) {
            this.title.elementRef.innerText = newTitle
                ? newTitle + " / " + this.title.titleSuffix
                : "" + this.title.titleSuffix;
        };
        /**
         * This methods checks if the navigator toggles on startup
         * or if an item is added to the navigator node.
         * Delay of 300ms is intended for animation purpose.
         */
        HeaderService.prototype.verifyIfNavOpen = function () {
            var _this = this;
            this.hasItemsInNavigator$
                .pipe(operators.debounceTime(300))
                .subscribe(function (hasItems) { return hasItems && _this.shouldToggle && _this.toggleNavigator(); });
        };
        HeaderService.prototype.shouldShowBreadcrumbs = function () {
            return this.options.breadcrumbs;
        };
        return HeaderService;
    }(StateService));
    HeaderService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function HeaderService_Factory() { return new HeaderService(i0__namespace.ɵɵinject(NavigatorService), i0__namespace.ɵɵinject(OptionsService), i0__namespace.ɵɵinject(HumanizeAppNamePipe)); }, token: HeaderService, providedIn: "root" });
    HeaderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    HeaderService.ctorParameters = function () { return [
        { type: NavigatorService },
        { type: OptionsService },
        { type: HumanizeAppNamePipe }
    ]; };

    var HOOK_BREADCRUMB = new i0.InjectionToken('BreadcrumbFactory');
    var BreadcrumbService = /** @class */ (function (_super) {
        __extends(BreadcrumbService, _super);
        function BreadcrumbService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.factories = [];
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_BREADCRUMB, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (breadcrumbs) { return _this.sortByPreferredPath(breadcrumbs); }), operators.shareReplay(1));
            return _this;
        }
        Object.defineProperty(BreadcrumbService.prototype, "state", {
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a new item to the action bar in the header.
         * @param item The item to add.
         */
        BreadcrumbService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an action bar item from the header.
         * @param item The item to remove.
         */
        BreadcrumbService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        /**
         * Refresh the extension factories
         */
        BreadcrumbService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        /**
         * Sets the crumb that contains that path to the top.
         * @param path The path to prefer.
         */
        BreadcrumbService.prototype.selectPreferredByPath = function (path) {
            this.preferredPath = path;
            this.refresh();
        };
        BreadcrumbService.prototype.sortByPreferredPath = function (breadcrumbs) {
            var _this = this;
            if (this.preferredPath) {
                return breadcrumbs.sort(function (bc) { return bc.items.find(function (item) { return !!item.path.match(_this.preferredPath); }) ? -1 : 1; });
            }
            return breadcrumbs;
        };
        return BreadcrumbService;
    }(StateService));
    BreadcrumbService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: BreadcrumbService, providedIn: "root" });
    BreadcrumbService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    BreadcrumbService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    var HOOK_DOCS = new i0.InjectionToken('Hook docs');

    var documentationItems = [
        {
            icon: 'c8y-c8y-data',
            label: gettext('Concepts guide`KEEP_ORIGINAL`'),
            url: '/concepts/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-user',
            label: gettext('User guide`KEEP_ORIGINAL`'),
            url: '/users-guide/getting-started',
            type: 'doc'
        },
        {
            icon: 'c8y-device-management',
            label: gettext('Device integration tutorial`KEEP_ORIGINAL`'),
            url: '/device-tutorials/tutorials-introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-book',
            label: gettext('Cumulocity IoT Edge`KEEP_ORIGINAL`'),
            url: '/edge/overview',
            type: 'doc'
        },
        {
            icon: 'c8y-tools',
            label: gettext('Microservice SDK guide`KEEP_ORIGINAL`'),
            url: '/microservice-sdk/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-tools',
            label: gettext('Device SDK guide`KEEP_ORIGINAL`'),
            url: '/device-sdk/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-smart-rest',
            label: gettext('Web SDK guide`KEEP_ORIGINAL`'),
            url: '/web/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-data-explorer',
            label: gettext('Streaming analytics guide`KEEP_ORIGINAL`'),
            url: '/apama/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-bookmark',
            label: gettext('Reference guide`KEEP_ORIGINAL`'),
            url: '/reference/rest-implementation',
            type: 'doc'
        },
        {
            icon: 'gavel',
            label: gettext('Legal notices'),
            url: 'https://documentation.softwareag.com/legal/',
            type: 'doc'
        }
    ];

    var DocsService = /** @class */ (function () {
        function DocsService(options, app, injector, router) {
            var _this = this;
            this.options = options;
            this.app = app;
            this.injector = injector;
            /**
             * Additional factories that can be added by plugins.
             */
            this.factories = [];
            /**
             * Refresh the extension factories subject.
             * @readonly
             */
            this.refreshTrigger = new rxjs.Subject();
            /**
             * Default documentation URL.
             */
            this.DEFAULT_DOCS_BASE_URL = 'https://www.cumulocity.com/guides/{{ version }}';
            var supportUrlRefreshTrigger = this.app.map(function (_a) {
                var supportUrl = _a.supportUrl;
                return supportUrl;
            });
            this.items$ = fromTriggerOnce(router, [supportUrlRefreshTrigger, this.refreshTrigger], [function () { return _this.injector.get(HOOK_DOCS, []); }, function () { return _this.factories; }, this]).pipe(operators.startWith([]), operators.shareReplay(1));
        }
        DocsService.prototype.getBaseUrl = function (uiVersion) {
            var docsBaseUrl = this.options.get('docsBaseUrl', this.DEFAULT_DOCS_BASE_URL);
            return this.getUrlWithDocsVersion(docsBaseUrl, uiVersion);
        };
        /**
         * Takes a URL and replaces all `{{ version }}` placeholders with the relevant docs version
         * (the version is derived from the app state or from the provided parameter).
         * @param url Any URL that contains `{{ version }}` placeholders.
         * @param uiVersion A version string or object, defaults to the app state version.
         * @returns The URL with replaced `{{ version }}` placeholders.
         */
        DocsService.prototype.getUrlWithDocsVersion = function (url, uiVersion) {
            if (uiVersion === void 0) { uiVersion = this.app.uiVersion; }
            var version = typeof uiVersion === 'string' ? uiVersion : lodashEs.get(uiVersion, 'ngx');
            var docsVersion = '';
            if (!(lodashEs.isUndefined(version) || version === '')) {
                docsVersion = this.getDocsVersionForUiVersion(version);
            }
            return url.replace(/{{\s*version\s*}}/g, docsVersion).replace(/\/+$/g, '');
        };
        Object.defineProperty(DocsService.prototype, "templateStr", {
            get: function () {
                return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
            },
            enumerable: false,
            configurable: true
        });
        DocsService.prototype.getUserGuideLink = function (link) {
            if (/^https?:/.test(link)) {
                return link;
            }
            if (this.getBaseUrl === null) {
                return null;
            }
            return this.getLink(this.templateStr, link);
        };
        DocsService.prototype.list = function () {
            return this.items$
                .pipe(operators.filter(function (i) { return !!i.length; }), operators.first())
                .toPromise();
        };
        DocsService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        DocsService.prototype.get = function () {
            var _this = this;
            // use the function as a factory
            var _a = this.options.get('docs', {}), links = _a.links, noDefault = _a.noDefault, _b = _a.excludeDefault, excludeDefault = _b === void 0 ? [] : _b;
            var supportUrl = this.app.state.supportUrl;
            var staticLinks = noDefault
                ? []
                : documentationItems
                    .map(function (item) { return (Object.assign(Object.assign({}, item), { url: _this.getUserGuideLink(item.url) })); })
                    .filter(function (_a) {
                    var url = _a.url;
                    return !excludeDefault.some(function (e) { return new RegExp(e).test(url); });
                });
            if (links) {
                // backwards compatibility
                links.map(function (lnk) {
                    if (lodashEs.isUndefined(lnk.type)) {
                        lnk.type = 'doc';
                        return lnk;
                    }
                });
                staticLinks = staticLinks.concat(links);
            }
            if (supportUrl) {
                staticLinks.push({
                    icon: 'comments',
                    label: gettext('Forum support'),
                    url: supportUrl,
                    type: 'doc'
                });
            }
            return staticLinks;
        };
        DocsService.prototype.getLink = function (templateStr, partialLink) {
            if (!templateStr) {
                return undefined;
            }
            return templateStr
                .replace(/\${docsBaseUrl}/, this.getBaseUrl())
                .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
        };
        DocsService.prototype.prefixWithSlash = function (partialLink) {
            if (partialLink === void 0) { partialLink = ''; }
            var shouldPrefix = !(partialLink && /^\//.test(partialLink));
            var prefix = shouldPrefix ? '/' : '';
            return "" + prefix + partialLink;
        };
        /**
         * Returns the most relevant version of documentation for the given version of UI.
         * For maintenance versions, it's the first version in the line, e.g. 1017.0.123 -> 10.17.0.
         * For develop versions, it's the next minor one, e.g. 1017.123.0-SNAPSHOT -> 10.18.0.
         *
         * @param uiVersion The version of UI.
         * @private
         */
        DocsService.prototype.getDocsVersionForUiVersion = function (uiVersion) {
            var _a = __read(uiVersion.split('.'), 2), majorMinorStr = _a[0], patchStr = _a[1];
            var patchNumber = parseInt(patchStr, 10);
            var takeNextMinor = patchNumber > 0;
            var majorNumber = Math.floor(parseInt(majorMinorStr, 10) / 100);
            var minorNumber = parseInt(majorMinorStr, 10) - majorNumber * 100 + (takeNextMinor ? 1 : 0);
            return majorNumber + "." + minorNumber + ".0";
        };
        return DocsService;
    }());
    DocsService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(i0__namespace.ɵɵinject(OptionsService), i0__namespace.ɵɵinject(AppStateService), i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: DocsService, providedIn: "root" });
    DocsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    DocsService.ctorParameters = function () { return [
        { type: OptionsService },
        { type: AppStateService },
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    /**
     * Time the hook waits until it emits an undefined value.
     * Used for not defined widgets -> by default after 5s we
     * show an error that the widget could not be loaded.
     */
    var RESOLVING_COMPONENT_WAIT_TIME = new i0.InjectionToken('RESOLVING_COMPONENT_WAIT_TIME');
    /**
     * A hook to add dynamic components to the UI (e.g. widgets).
     */
    var HOOK_COMPONENTS = new i0.InjectionToken('Hook Dynamic Component');

    var DynamicComponentService = /** @class */ (function (_super) {
        __extends(DynamicComponentService, _super);
        function DynamicComponentService(injector, router, waitTimeout) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            /**
             * Additional factories that can be added by plugins.
             */
            _this.factories = [];
            _this.items$ = fromTriggerOnce(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_COMPONENTS, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.takeUntil(rxjs.timer(waitTimeout)), operators.shareReplay(1));
            return _this;
        }
        DynamicComponentService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(DynamicComponentService.prototype, "state", {
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns a component by it's id as an observable.
         * @param id The id of the component.
         */
        DynamicComponentService.prototype.getById = function (id) {
            return this.items$
                .pipe(operators.mergeMap(function (cmps) { return cmps; }), operators.filter(function (cmp) { return cmp.id === id; }), operators.take(1))
                .toPromise();
        };
        DynamicComponentService.prototype.add = function (component) {
            this.state.add(component);
            this.emitNewState();
        };
        DynamicComponentService.prototype.remove = function (component) {
            this.state.delete(component);
            this.emitNewState();
        };
        return DynamicComponentService;
    }(StateService));
    DynamicComponentService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router), i0__namespace.ɵɵinject(RESOLVING_COMPONENT_WAIT_TIME)); }, token: DynamicComponentService, providedIn: "root" });
    DynamicComponentService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    DynamicComponentService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router },
        { type: Number, decorators: [{ type: i0.Inject, args: [RESOLVING_COMPONENT_WAIT_TIME,] }] }
    ]; };

    exports.ViewContext = void 0;
    (function (ViewContext) {
        ViewContext["Device"] = "device/:id";
        ViewContext["Group"] = "group/:id";
        ViewContext["User"] = "users/:id";
        ViewContext["Application"] = "ecosystem/application/:id";
        ViewContext["Microservice"] = "microservices/:id";
        ViewContext["SubscribedApplications"] = "subscribedApplications/:id";
        ViewContext["Tenant"] = "tenants/:id";
        ViewContext["Report"] = "reports/:id";
        ViewContext["Service"] = "service/:id";
        ViewContext["DatapointLibrary"] = "datapointlibrary/:id";
    })(exports.ViewContext || (exports.ViewContext = {}));

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_TABS = new i0.InjectionToken('TabsFactory');
    /**
     * A service which defines the used tabs.
     */
    var TabsService = /** @class */ (function (_super) {
        __extends(TabsService, _super);
        function TabsService(injector, router, translateService, options) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = translateService;
            _this.options = options;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            /**
             * Additional factories that can be added by plugins.
             */
            _this.factories = [];
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_TABS, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (tabs) { return _this.prepareTabs(tabs); }), operators.shareReplay(1), operators.distinctUntilChanged());
            _this.orientation$ = _this.items$.pipe(operators.map(function (tabs) {
                var firstTabWithDefinedOrientation = tabs.find(function (tab) { return tab.orientation; });
                if (firstTabWithDefinedOrientation) {
                    return firstTabWithDefinedOrientation.orientation;
                }
                return _this.options.tabsHorizontal ? 'horizontal' : 'vertical';
            }), operators.distinctUntilChanged());
            return _this;
        }
        TabsService.prototype.prepareTabs = function (tabs) {
            return this.sortTabs(tabs
                .map(function (tab) { return (Object.assign(Object.assign({}, tab), { template: tab.template instanceof i0.ViewContainerRef ? tab.template : undefined })); })
                .filter(function (tab, index, self) { return index === self.findIndex(function (t) { return t.path === tab.path; }); }));
        };
        TabsService.prototype.sortTabs = function (tabs) {
            var _this = this;
            return tabs.sort(function (a, b) {
                var priorityOrder = (b.priority || 0) - (a.priority || 0);
                var aTranslatedLabel = _this.translateService.instant(a.label);
                var bTranslatedLabel = _this.translateService.instant(b.label);
                var translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
                return priorityOrder || translatedLabelOrder;
            });
        };
        /**
         * Refresh the extension factories
         */
        TabsService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(TabsService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a new item to tabs and emits state change
         * @param item The item to add.
         */
        TabsService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes a tab and emits a state change.
         * @param item The item to remove.
         */
        TabsService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        Object.defineProperty(TabsService.prototype, "firstTab$", {
            get: function () {
                return this.items$.pipe(operators.map(function (tabs) { return tabs[0]; }), operators.filter(Boolean), operators.first());
            },
            enumerable: false,
            configurable: true
        });
        return TabsService;
    }(StateService));
    TabsService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function TabsService_Factory() { return new TabsService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router), i0__namespace.ɵɵinject(i2__namespace.TranslateService), i0__namespace.ɵɵinject(OptionsService)); }, token: TabsService, providedIn: "root" });
    TabsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    TabsService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router },
        { type: i2.TranslateService },
        { type: OptionsService }
    ]; };

    var RouterTabsResolver = /** @class */ (function () {
        function RouterTabsResolver(injector, router) {
            this.injector = injector;
            this.router = router;
        }
        Object.defineProperty(RouterTabsResolver.prototype, "routerStateSnapshot", {
            get: function () {
                return this.router.routerState.snapshot;
            },
            enumerable: false,
            configurable: true
        });
        RouterTabsResolver.prototype.resolve = function (route) {
            var _this = this;
            var latestChildren = this.router.config.find(function (r) { return route.routeConfig.path === r.path; }).children;
            return rxjs.from(latestChildren || []).pipe(operators.mergeMap(function (child) { return rxjs.from(_this.getGuards(child)).pipe(operators.map(function (guard) { return guard.canActivate(route, _this.routerStateSnapshot); }), operators.mergeMap(function (result) {
                if (rxjs.isObservable(result)) {
                    return result;
                }
                if (result && typeof result.then === 'function') {
                    return rxjs.from(result);
                }
                return rxjs.of(result);
            }), operators.tap(function (result) {
                if (Array.isArray(result)) {
                    child.tabs = result;
                }
            }), operators.every(function (result) { return !!result; }), operators.filter(function (result) { return result; }), operators.mergeMap(function () { return (Array.isArray(child.tabs) ? rxjs.from(child.tabs) : rxjs.of(child)); }), operators.map(function (result) { return result.label || result.path
                ? {
                    label: result.label,
                    icon: result.icon,
                    path: decodeURIComponent(route.url.join('/')) + "/" + result.path,
                    priority: result.priority,
                    hide: result.hide,
                    featureId: result.featureId
                }
                : undefined; })); }), operators.filter(function (tabs) { return !!tabs; }), operators.toArray());
        };
        RouterTabsResolver.prototype.getGuards = function (child) {
            var _this = this;
            var guards = (child.canActivate || []).map(function (guard) {
                return _this.injector.get(guard);
            });
            if (child.data && child.data.showIf) {
                guards.push({ canActivate: child.data.showIf });
            }
            return guards;
        };
        return RouterTabsResolver;
    }());
    RouterTabsResolver.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RouterTabsResolver_Factory() { return new RouterTabsResolver(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: RouterTabsResolver, providedIn: "root" });
    RouterTabsResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    RouterTabsResolver.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    var ViewContextServices = /** @class */ (function () {
        function ViewContextServices() {
        }
        ViewContextServices.contextToService = function (context) {
            return ViewContextServices.services.get(context);
        };
        return ViewContextServices;
    }());
    ViewContextServices.services = new Map([
        [exports.ViewContext.Device, client.InventoryService],
        [exports.ViewContext.Group, client.InventoryService],
        [exports.ViewContext.User, client.UserService],
        [exports.ViewContext.Application, client.ApplicationService],
        [exports.ViewContext.Microservice, client.ApplicationService],
        [exports.ViewContext.SubscribedApplications, client.ApplicationService],
        [exports.ViewContext.Tenant, client.TenantService],
        [exports.ViewContext.Report, client.InventoryService],
        [exports.ViewContext.Service, client.InventoryService],
        [exports.ViewContext.DatapointLibrary, client.InventoryService]
    ]);

    var ContextRouteService = /** @class */ (function () {
        function ContextRouteService(tabsResolver, tabsService, router, apiService, injector) {
            this.tabsResolver = tabsResolver;
            this.tabsService = tabsService;
            this.router = router;
            this.apiService = apiService;
            this.injector = injector;
            this.lastAddedTabs = [];
            this.refreshTrigger = new rxjs.Subject();
        }
        /**
         * Resolves the current context data. If no context was found, null is returned.
         *
         * @param activatedRoute The current activated route.
         */
        ContextRouteService.prototype.getContextData = function (activatedRoute) {
            var data = !activatedRoute.snapshot.parent || activatedRoute.snapshot.data.context
                ? activatedRoute.snapshot.data
                : activatedRoute.parent.snapshot.data;
            if (data.context) {
                return data;
            }
            return null;
        };
        ContextRouteService.prototype.init = function (route) {
            var _this = this;
            this.routerSubscription = this.router.events
                .pipe(operators.filter(function (e) { return e instanceof i1.NavigationEnd; }))
                .subscribe(function () { return _this.redirectToFirstTab(); });
            this.dataSubscription = route.data
                .pipe(operators.merge(this.updatedContext(route), this.refreshTrigger), operators.switchMap(function () { return _this.tabsResolver.resolve(route.snapshot); }))
                .subscribe(function (tabs) { return _this.updateTabs(tabs); });
        };
        ContextRouteService.prototype.destroy = function () {
            var _this = this;
            this.dataSubscription.unsubscribe();
            this.routerSubscription.unsubscribe();
            this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
        };
        ContextRouteService.prototype.refreshContext = function () {
            this.refreshTrigger.next();
        };
        /**
         * Sets a new contextData in the ActivatedRoute.
         * @param activatedRoute The current activated route.
         * @param contextData New contextData.
         */
        ContextRouteService.prototype.setContext = function (activatedRoute, contextData) {
            var data = !activatedRoute.snapshot.parent || activatedRoute.snapshot.data.context
                ? activatedRoute.snapshot.data
                : activatedRoute.parent.snapshot.data;
            if (!data) {
                return;
            }
            data.contextData = Object.assign({}, contextData);
        };
        ContextRouteService.prototype.updatedContext = function (route) {
            var data = route.snapshot.data;
            var serviceInstance = ViewContextServices.contextToService(data.context);
            if (serviceInstance) {
                var service = this.injector.get(serviceInstance);
                var detailsUrlRegex = service.getDetailUrl(data.contextData).replace(/\d+/g, '?\\d*');
                var contextRegex_1 = new RegExp(detailsUrlRegex, 'i');
                var childrenRegex_1 = new RegExp(detailsUrlRegex + "/child", 'i');
                var filterResponse = function (_a) {
                    var url = _a.url, method = _a.method;
                    var contextChanged = contextRegex_1.test(url) && ['POST', 'PUT'].includes(method);
                    var childrenAffected = childrenRegex_1.test(url) && ['POST', 'DELETE'].includes(method);
                    return contextChanged || childrenAffected;
                };
                return this.apiService.hookResponse(filterResponse);
            }
            return rxjs.NEVER;
        };
        ContextRouteService.prototype.updateTabs = function (tabs) {
            var _this = this;
            if (tabs === void 0) { tabs = []; }
            this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
            this.lastAddedTabs = tabs;
            tabs.forEach(function (t) { return _this.tabsService.add(t); });
            this.redirectToFirstTab();
        };
        ContextRouteService.prototype.redirectToFirstTab = function () {
            var _this = this;
            if (this.needsRedirect()) {
                this.tabsService.firstTab$.subscribe(function (tab) {
                    if (tab && tab.path) {
                        _this.router.navigateByUrl(tab.path, { replaceUrl: true });
                    }
                });
            }
        };
        ContextRouteService.prototype.needsRedirect = function () {
            var tree = this.router.parseUrl(this.router.url);
            var groups = tree.root.children[i1.PRIMARY_OUTLET];
            var context = this.getMatchingContextRoute(this.router.url);
            if (!context) {
                return groups.segments.length === 2;
            }
            else {
                return context.split('/').length === groups.segments.length;
            }
        };
        ContextRouteService.prototype.getMatchingContextRoute = function (url) {
            var viewContexts = Object.values(exports.ViewContext);
            var urlWithoutId = url.replace(/\d(.*)/g, '');
            var id = viewContexts.findIndex(function (context) { return "/" + context.replace(':id', '') === urlWithoutId; });
            return viewContexts[id];
        };
        return ContextRouteService;
    }());
    ContextRouteService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ContextRouteService_Factory() { return new ContextRouteService(i0__namespace.ɵɵinject(RouterTabsResolver), i0__namespace.ɵɵinject(TabsService), i0__namespace.ɵɵinject(i1__namespace.Router), i0__namespace.ɵɵinject(i4__namespace$1.ApiService), i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: ContextRouteService, providedIn: "root" });
    ContextRouteService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ContextRouteService.ctorParameters = function () { return [
        { type: RouterTabsResolver },
        { type: TabsService },
        { type: i1.Router },
        { type: i4.ApiService },
        { type: i0.Injector }
    ]; };

    /**
     * A hook to use for Multi Provider extension.
     * @deprecated: Use HOOK_ROUTE
     */
    var HOOK_ONCE_ROUTE = new i0.InjectionToken('RouteFactory');
    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_ROUTE = new i0.InjectionToken('HookRoute');
    /**
     * A service which defines routes
     */
    var RouterService = /** @class */ (function () {
        function RouterService(injector, router, contextRouteService) {
            var _this = this;
            this.injector = injector;
            this.router = router;
            this.contextRouteService = contextRouteService;
            this.refreshTrigger = new rxjs.Subject();
            this.state = new Map();
            this.factories = [];
            this.refreshTrigger
                .pipe(operators.startWith(1), operators.switchMap(function () { return fromFactories([
                function () { return _this.injector.get(HOOK_ROUTE, []); },
                function () { return _this.getComponentsViaDeprecatedHook(); },
                function () { return _this.factories; }
            ], router, false); }))
                .subscribe(function (routes) {
                var toAddRoutes = routes.filter(function (route) {
                    var path = "" + (route.context || '') + route.path;
                    var isAlreadyAdded = _this.state.has(path);
                    if (!isAlreadyAdded) {
                        _this.state.set(path, route);
                    }
                    return !isAlreadyAdded;
                });
                _this.addRoute(toAddRoutes);
            });
        }
        /**
         * Refresh the current context
         */
        RouterService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
            this.contextRouteService.refreshContext();
        };
        /**
         * Add a new route to the router configuration or a context.
         * @param route The route to add
         */
        RouterService.prototype.addRoute = function (route) {
            this.addRoutes(Array.isArray(route) ? route : [route]);
        };
        /**
         * Determines if the given MO is an group or an device and returns
         * the correct href to link correctly to that MO.
         * @param groupOrDevice The MO of a group or the device.
         * @param prefix How should the link be prefixed.
         */
        RouterService.prototype.getHref = function (groupOrDevice, prefix) {
            if (prefix === void 0) { prefix = '#/'; }
            if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
                return "" + prefix + exports.ViewContext.Group.replace(':id', groupOrDevice.id);
            }
            return "" + prefix + exports.ViewContext.Device.replace(':id', groupOrDevice.id);
        };
        RouterService.prototype.getComponentsViaDeprecatedHook = function () {
            var componentsViaDeprecatedHook = this.injector.get(HOOK_ONCE_ROUTE, []);
            if (componentsViaDeprecatedHook &&
                componentsViaDeprecatedHook.length &&
                __MODE__ !== 'production') {
                console.warn('HOOK_ONCE_ROUTE is now deprecated. Use HOOK_ROUTE instead.');
            }
            return componentsViaDeprecatedHook;
        };
        RouterService.prototype.addRoutes = function (routes) {
            var _this = this;
            var emptyRoute = this.router.config.find(function (r) { return r.path === '**'; });
            this.router.resetConfig(__spreadArray(__spreadArray(__spreadArray([], __read(this.router.config.filter(function (r) { return r.path !== '**'; }))), __read(routes.map(function (r) { return _this.convertRoute(_this.router.config, r); }))), [
                emptyRoute
            ]).filter(Boolean));
        };
        RouterService.prototype.convertRoute = function (initialConfig, route) {
            if (route.context) {
                initialConfig.forEach(function (r) {
                    if (r.data && r.data.context === route.context) {
                        r.children = __spreadArray([route], __read((r.children || [])));
                    }
                });
                return;
            }
            return route;
        };
        return RouterService;
    }());
    RouterService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router), i0__namespace.ɵɵinject(ContextRouteService)); }, token: RouterService, providedIn: "root" });
    RouterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    RouterService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router },
        { type: ContextRouteService }
    ]; };

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_SEARCH = new i0.InjectionToken('SearchFactory');
    /**
     * A service which defines the search function.
     */
    var SearchService = /** @class */ (function (_super) {
        __extends(SearchService, _super);
        function SearchService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            /**
             * Additional factories that can be added by plugins.
             */
            _this.factories = [];
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_SEARCH, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (items) { return sortByPriority(items); }), operators.shareReplay(1));
            return _this;
        }
        /**
         * Refresh the extension factories
         */
        SearchService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(SearchService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a new item to the search in the header.
         * @param item The item to add.
         */
        SearchService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an search from the header.
         * @param item The item to remove.
         */
        SearchService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        return SearchService;
    }(StateService));
    SearchService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function SearchService_Factory() { return new SearchService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: SearchService, providedIn: "root" });
    SearchService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    SearchService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    /**
     * A generic component that is intended to serve as the building block of more wizards.
     *
     * **Example**
     * ```html
     * <button
     *    title="Add application"
     *    class="btn btn-primary"
     *    (click)="addApplication()"
     *  >
     *    Add application
     *  </button>
     * ```
     *
     * ```ts
     * import { Component } from '@angular/core';
     * import { WizardConfig, WizardService, Wizard } from '@c8y/ngx-components';
     * import { ModalOptions } from 'ngx-bootstrap/modal';
     *
     * @Component({
     *  selector: 'c8y-add-application-wizard',
     *  templateUrl: './templatePath'
     * })
     * export class AddApplicationWizardComponent {
     *   constructor(private wizardService: WizardService) {}
     *
     *   addApplication() {
     *     const wizardConfig: WizardConfig = {
     *       headerText: 'Add Application',
     *       headerIcon: 'c8y-icon-modules',
     *       bodyHeaderText: 'Select methods',
     *       bodyHeaderIcon: 'c8y-icon-modules'
     *     };
     *
     *     const initialState: Wizard = {
     *       wizardConfig,
     *       id: 'uploadApplication'
     *     };
     *
     *     const modalOptions: ModalOptions = { initialState };
     *
     *     this.wizardService.show(modalOptions);
     *   }
     * }
     * ```
     */
    var WizardComponent = /** @class */ (function () {
        function WizardComponent(wizardService, bsModalRef) {
            var _this = this;
            this.wizardService = wizardService;
            this.bsModalRef = bsModalRef;
            /**
             * A configuration object that allows you to set header values, both text and icon.
             */
            this.wizardConfig = {};
            /**
             * A state that will be assigned to the actual component contained by the wizard.
             */
            this.componentInitialState = {};
            /**
             * The event that is emitted when the wizard is closed.
             */
            this.onClose = new i0.EventEmitter();
            /**
             * The event that is emitted when the wizard is reseted.
             */
            this.onReset = new i0.EventEmitter();
            /**
             * The event that is emitted when the wizard entry is clicked.
             */
            this.onSelect = new i0.EventEmitter();
            this.headerTemplate$ = this.wizardService.headerTemplate$.pipe(operators.filter(function (header) { return header.wizardId === _this.id; }));
            this.bodyTemplate$ = this.wizardService.bodyTemplate$.pipe(operators.filter(function (body) { return body.wizardId === _this.id; }));
            this.footerTemplate$ = this.wizardService.footerTemplate$.pipe(operators.filter(function (footer) { return footer.wizardId === _this.id; }));
        }
        WizardComponent.prototype.ngOnInit = function () {
            this.emitTemplates();
        };
        /**
         * Resets the wizard.
         * @param result Custom result object which will be emitted via onReset output.
         */
        WizardComponent.prototype.reset = function (result) {
            this.onReset.emit(result);
            this.emitTemplates();
        };
        /**
         * Closes the wizard.
         * @param result Custom result object which will be emitted via onClose output.
         */
        WizardComponent.prototype.close = function (result) {
            this.onClose.emit(result);
            this.onClose.complete();
            this.bsModalRef.hide();
        };
        WizardComponent.prototype.emitTemplates = function () {
            var _this = this;
            setTimeout(function () {
                _this.wizardService.headerTemplate$.next({ template: _this.header, wizardId: _this.id });
                _this.wizardService.bodyTemplate$.next({ template: _this.body, wizardId: _this.id });
                _this.wizardService.footerTemplate$.next({ template: _this.footer, wizardId: _this.id });
            });
        };
        return WizardComponent;
    }());
    WizardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-wizard',
                    template: "<div class=\"viewport-modal animated fadeIn\">\n  <ng-template *ngTemplateOutlet=\"(headerTemplate$ | async)?.template\"></ng-template>\n\n  <ng-template #headerRef>\n    <div class=\"modal-header dialog-header animated fadeIn\">\n      <h1 [c8yIcon]=\"wizardConfig.headerIcon\"></h1>\n      <h4>{{ wizardConfig.headerText | translate }}</h4>\n    </div>\n  </ng-template>\n\n  <ng-template *ngTemplateOutlet=\"(bodyTemplate$ | async)?.template\"></ng-template>\n\n  <ng-template #bodyRef>\n    <div class=\"p-16 p-t-8 text-center\" *ngIf=\"wizardConfig.bodyHeaderText\">\n      <div class=\"c8y-wizard-nav\">\n        <i [c8yIcon]=\"wizardConfig.bodyHeaderIcon\"></i>\n        <span>{{ wizardConfig.bodyHeaderText | translate }}</span>\n      </div>\n    </div>\n  </ng-template>\n  <c8y-wizard-outlet [initialState]=\"componentInitialState\" (onSelect)=\"onSelect.emit($event)\"></c8y-wizard-outlet>\n\n  <ng-template *ngTemplateOutlet=\"(footerTemplate$ | async)?.template\"></ng-template>\n  <ng-template #footerRef>\n    <div class=\"modal-footer animated fadeIn\">\n      <button\n        (click)=\"close()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Cancel' | translate }}\"\n      >\n        <span translate>Cancel</span>\n      </button>\n    </div>\n  </ng-template>\n</div>\n"
                },] }
    ];
    WizardComponent.ctorParameters = function () { return [
        { type: WizardService },
        { type: i1$2.BsModalRef }
    ]; };
    WizardComponent.propDecorators = {
        header: [{ type: i0.ViewChild, args: ['headerRef', { static: true },] }],
        body: [{ type: i0.ViewChild, args: ['bodyRef', { static: true },] }],
        footer: [{ type: i0.ViewChild, args: ['footerRef', { static: true },] }],
        id: [{ type: i0.Input }],
        wizardConfig: [{ type: i0.Input }],
        onClose: [{ type: i0.Output }],
        onReset: [{ type: i0.Output }],
        onSelect: [{ type: i0.Output }]
    };

    /**
     * A hook to add wizard entries.
     */
    var HOOK_WIZARD = new i0.InjectionToken('Generic wizard');

    var WizardService = /** @class */ (function (_super) {
        __extends(WizardService, _super);
        function WizardService(bsModalService, injector, router) {
            var _this = _super.call(this) || this;
            _this.bsModalService = bsModalService;
            _this.injector = injector;
            _this.router = router;
            /** Wizard header subject. It emits header template. */
            _this.headerTemplate$ = new rxjs.Subject();
            /** Wizard body subject. It emits body template. */
            _this.bodyTemplate$ = new rxjs.Subject();
            /** Wizard footer subject. It emits footer template. */
            _this.footerTemplate$ = new rxjs.Subject();
            /**
             * @ignore
             */
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            /** Refresh the extension factories subject. */
            _this.refreshTrigger = new rxjs.Subject();
            /** Additional factories that can be added by plugins. */
            _this.factories = [];
            _this.items$ = fromTrigger(_this.router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_WIZARD, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (entries) { return _this.getUniqueListBy(entries, 'name', 'wizardId'); }), operators.shareReplay(1));
            return _this;
        }
        Object.defineProperty(WizardService.prototype, "state", {
            /**
             * Returns the current state.
             * @returns The current set of entries.
             * @readonly
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Refresh the extension factories.
         */
        WizardService.prototype.refresh = function () {
            this.refreshTrigger.next();
        };
        /**
         * Adds a new entry in the wizard.
         * @param entry Wizard entry to add.
         */
        WizardService.prototype.add = function (entry) {
            this.state.add(entry);
            this.emitNewState();
        };
        /**
         * Removes entry from the wizard.
         * @param entry Wizard entry to remove.
         */
        WizardService.prototype.remove = function (entry) {
            this.state.delete(entry);
            this.emitNewState();
        };
        /**
         * List of wizard entries matching the given id.
         * @param id
         * @returns observable with list of wizard entries.
         */
        WizardService.prototype.getEntriesListById = function (id) {
            return this.items$.pipe(operators.map(function (entries) { return entries.filter(function (entry) { return entry.wizardId === id; }); }));
        };
        /**
         * Shows a wizard modal.
         * @param modalOptions Modal options.
         * @returns a reference to the modal.
         */
        WizardService.prototype.show = function (modalOptions) {
            if (modalOptions === void 0) { modalOptions = {}; }
            var options = Object.assign({ class: 'modal-sm', backdrop: 'static' }, modalOptions);
            return this.bsModalService.show(WizardComponent, options);
        };
        WizardService.prototype.getUniqueListBy = function (entries) {
            var _this = this;
            var keys = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                keys[_i - 1] = arguments[_i];
            }
            return __spreadArray([], __read(new Map(entries.map(function (item) { return [_this.getUniqIdentifierForKeys(item, keys), item]; })).values()));
        };
        WizardService.prototype.getUniqIdentifierForKeys = function (entry, keys) {
            return keys.map(function (key) { return entry[key]; }).join('_');
        };
        return WizardService;
    }(StateService));
    WizardService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function WizardService_Factory() { return new WizardService(i0__namespace.ɵɵinject(i1__namespace$2.BsModalService), i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: WizardService, providedIn: "root" });
    WizardService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    WizardService.ctorParameters = function () { return [
        { type: i1$2.BsModalService },
        { type: i0.Injector },
        { type: i1.Router }
    ]; };

    var PluginsResolveService = /** @class */ (function () {
        function PluginsResolveService(tabs, navigator, action, actionBar, breadcrumb, dynamicComponent, search, c8yRouter, docs, wizard, compiler, injector) {
            this.tabs = tabs;
            this.navigator = navigator;
            this.action = action;
            this.actionBar = actionBar;
            this.breadcrumb = breadcrumb;
            this.dynamicComponent = dynamicComponent;
            this.search = search;
            this.c8yRouter = c8yRouter;
            this.docs = docs;
            this.wizard = wizard;
            this.compiler = compiler;
            this.injector = injector;
            this.allHooks = [
                { token: HOOK_ACTION, service: this.action, values: [] },
                { token: HOOK_ACTION_BAR, service: this.actionBar, values: [] },
                { token: HOOK_NAVIGATOR_NODES, service: this.navigator, values: [] },
                { token: HOOK_BREADCRUMB, service: this.breadcrumb, values: [] },
                { token: HOOK_COMPONENTS, service: this.dynamicComponent, values: [] },
                { token: HOOK_ONCE_ROUTE, service: this.c8yRouter, values: [] },
                { token: HOOK_ROUTE, service: this.c8yRouter, values: [] },
                { token: HOOK_SEARCH, service: this.search, values: [] },
                { token: HOOK_TABS, service: this.tabs, values: [] },
                { token: HOOK_DOCS, service: this.docs, values: [] },
                { token: HOOK_WIZARD, service: this.wizard, values: [] }
            ];
        }
        /**
         * Loads plugins by resolving the remote NgModules and injecting it. Also attaching
         * the hooks onto the root injector.
         * @param remoteModules The remote plugins to load as factory name mapping array.
         */
        PluginsResolveService.prototype.resolveRemotePlugins = function (remoteModules) {
            return __awaiter(this, void 0, void 0, function () {
                var remoteNgModules, _loop_1, this_1, remoteNgModules_1, remoteNgModules_1_1, remoteNgModule, e_1_1;
                var e_1, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            remoteNgModules = remoteModules
                                .filter(function (_a) {
                                var factory = _a.factory;
                                return factory;
                            })
                                .map(function (_a) {
                                var name = _a.name, factory = _a.factory;
                                return factory[name];
                            });
                            _loop_1 = function (remoteNgModule) {
                                var factory, moduleRef;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            factory = void 0;
                                            if (!(remoteNgModule instanceof i0.NgModuleFactory)) return [3 /*break*/, 1];
                                            // AOT
                                            factory = remoteNgModule;
                                            return [3 /*break*/, 3];
                                        case 1: return [4 /*yield*/, this_1.compiler.compileModuleAsync(remoteNgModule)];
                                        case 2:
                                            // JIT
                                            factory = _c.sent();
                                            _c.label = 3;
                                        case 3:
                                            moduleRef = factory.create(this_1.injector);
                                            this_1.allHooks.forEach(function (hook) {
                                                hook.values = __spreadArray(__spreadArray([], __read(hook.values)), __read(moduleRef.injector.get(hook.token, [], i0.InjectFlags.Self)));
                                            });
                                            return [2 /*return*/];
                                    }
                                });
                            };
                            this_1 = this;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, 7, 8]);
                            remoteNgModules_1 = __values(remoteNgModules), remoteNgModules_1_1 = remoteNgModules_1.next();
                            _b.label = 2;
                        case 2:
                            if (!!remoteNgModules_1_1.done) return [3 /*break*/, 5];
                            remoteNgModule = remoteNgModules_1_1.value;
                            return [5 /*yield**/, _loop_1(remoteNgModule)];
                        case 3:
                            _b.sent();
                            _b.label = 4;
                        case 4:
                            remoteNgModules_1_1 = remoteNgModules_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _b.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (remoteNgModules_1_1 && !remoteNgModules_1_1.done && (_a = remoteNgModules_1.return)) _a.call(remoteNgModules_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8:
                            this.allHooks.forEach(function (hook) {
                                if (hook.values.length) {
                                    hook.service.factories = __spreadArray(__spreadArray([], __read(hook.service.factories)), __read(hook.values));
                                    hook.service.refresh();
                                }
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        return PluginsResolveService;
    }());
    PluginsResolveService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PluginsResolveService_Factory() { return new PluginsResolveService(i0__namespace.ɵɵinject(TabsService), i0__namespace.ɵɵinject(NavigatorService), i0__namespace.ɵɵinject(ActionService), i0__namespace.ɵɵinject(ActionBarService), i0__namespace.ɵɵinject(BreadcrumbService), i0__namespace.ɵɵinject(DynamicComponentService), i0__namespace.ɵɵinject(SearchService), i0__namespace.ɵɵinject(RouterService), i0__namespace.ɵɵinject(DocsService), i0__namespace.ɵɵinject(WizardService), i0__namespace.ɵɵinject(i0__namespace.Compiler), i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: PluginsResolveService, providedIn: "root" });
    PluginsResolveService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PluginsResolveService.ctorParameters = function () { return [
        { type: TabsService },
        { type: NavigatorService },
        { type: ActionService },
        { type: ActionBarService },
        { type: BreadcrumbService },
        { type: DynamicComponentService },
        { type: SearchService },
        { type: RouterService },
        { type: DocsService },
        { type: WizardService },
        { type: i0.Compiler },
        { type: i0.Injector }
    ]; };

    /**
     * The state determines the current status of the wizard:
     * START: First view, showing application properties
     * WIZARD: Custom wizard to change configurations.
     * FINALIZING: Status between saving and finishing the setup.
     * RELOADING: Status between finishing and reloading the app.
     */
    exports.SetupState = void 0;
    (function (SetupState) {
        SetupState[SetupState["START"] = 0] = "START";
        SetupState[SetupState["WIZARD"] = 1] = "WIZARD";
        SetupState[SetupState["FINALIZING"] = 2] = "FINALIZING";
        SetupState[SetupState["RELOADING"] = 3] = "RELOADING";
    })(exports.SetupState || (exports.SetupState = {}));
    var NEEDED_ROLE_FOR_SETUP = 'ROLE_APPLICATION_MANAGEMENT_ADMIN';
    var SETUP_FINISHED_STEP_ID = 'c8ySetupFinished';

    /**
     * Default steppers used in the platform. Use this too hook into
     * certain steps.
     *
     * *Example:*
     * ```ts
     * providers: [{
     *   provide: HOOK_STEPPER,
     *   useValue: {
     *      id: Steppers.SETUP,
     *      label: 'Register devices',
     *      component: YourRegisterDeviceForm,
     *      priority: -1000
     *   },
     *   multi: true
     * }]
     * ```
     */
    exports.Steppers = void 0;
    (function (Steppers) {
        /**
         * Use this stepperId to hook a component into the application
         * setup step.
         */
        Steppers["SETUP"] = "setup";
    })(exports.Steppers || (exports.Steppers = {}));

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_STEPPER = new i0.InjectionToken('HookStepper');
    /**
     * A service which defines the steps in a stepper component.
     * A stepper hook needs an certain outlet which has an matching id
     * to display the steps.
     */
    var StepperService = /** @class */ (function (_super) {
        __extends(StepperService, _super);
        function StepperService(injector, router, translateService) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = translateService;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.factories = [];
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_STEPPER, []); },
                function () { return _this.factories; },
                stateToFactory(_this.state$)
            ]).pipe(operators.shareReplay(1), operators.distinctUntilChanged());
            return _this;
        }
        StepperService.prototype.sortSteps = function (steps) {
            var _this = this;
            return steps.sort(function (a, b) {
                var priorityOrder = (b.priority || 0) - (a.priority || 0);
                var aTranslatedLabel = _this.translateService.instant(a.label);
                var bTranslatedLabel = _this.translateService.instant(b.label);
                var translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
                return priorityOrder || translatedLabelOrder;
            });
        };
        /**
         * Refresh the extension factories
         */
        StepperService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(StepperService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a new item to tabs and emits state change
         * @param item The item to add.
         */
        StepperService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes a step and emits a state change.
         * @param item The item to remove.
         */
        StepperService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        /**
         * Returns the component by it's asssigned stepper id as an observable.
         * @param id The id of the stepper to hook into.
         */
        StepperService.prototype.getById$ = function (id) {
            return this.items$.pipe(operators.filter(function (steps) { return steps.length > 0; }), operators.map(function (steps) { return steps.filter(function (cmp) { return cmp.stepperId === id; }); }), operators.take(1));
        };
        return StepperService;
    }(StateService));
    StepperService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function StepperService_Factory() { return new StepperService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(i1__namespace.Router), i0__namespace.ɵɵinject(i2__namespace.TranslateService)); }, token: StepperService, providedIn: "root" });
    StepperService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    StepperService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Router },
        { type: i2.TranslateService }
    ]; };

    var BootstrapComponent = /** @class */ (function () {
        function BootstrapComponent(tabs, ui, navigator, actionBar, headerService, options, pluginsResolve, stepperService, permissions) {
            var _this = this;
            this.tabs = tabs;
            this.ui = ui;
            this.navigator = navigator;
            this.actionBar = actionBar;
            this.headerService = headerService;
            this.options = options;
            this.pluginsResolve = pluginsResolve;
            this.stepperService = stepperService;
            this.permissions = permissions;
            this.showPoweredBy = true;
            this.noAppsMargin$ = this.headerService.map(function (_a) {
                var nav = _a.nav;
                return !nav.open && nav.hiddenOnStartup;
            });
            this.tabsOrientation = this.options.tabsHorizontal ? 'horizontal' : 'vertical';
            this.ui
                .map(function (_a) {
                var lang = _a.lang;
                return lang;
            })
                .pipe(operators.distinctUntilChanged())
                .subscribe(function () {
                _this.actionBar.refresh();
            });
            this.showPoweredBy = !this.options.get('hidePowered');
            this.isSetupNeeded$ = this.ui.currentApplication.pipe(operators.map(function (app) { return _this.ui.isOwnerOfApplication(app); }), operators.switchMap(function (isOwner) {
                if (!isOwner) {
                    return rxjs.of([]);
                }
                return _this.stepperService.getById$(exports.Steppers.SETUP);
            }), operators.map(function (steps) { return _this.getNotCompletedSetupSteps(steps); }), operators.map(function (notCompletedSetupSteps) { return _this.options.forceSetup || _this.options.isSetup && _this.needsSetup(notCompletedSetupSteps); }));
        }
        BootstrapComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var remoteModules;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            remoteModules = window.C8Y_APP.remoteModules;
                            if (!remoteModules.length) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.pluginsResolve.resolveRemotePlugins(remoteModules)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        BootstrapComponent.prototype.needsSetup = function (notCompletedSetupSteps) {
            notCompletedSetupSteps = this.excludeSetupFinishStep(notCompletedSetupSteps);
            if (this.hasPermission()) {
                return notCompletedSetupSteps.length > 0;
            }
            // Show setup screen as there are required steps but the user
            // has no permission. The Setup screen will show an error to
            // the user.
            return this.hasRequiredSteps(notCompletedSetupSteps);
        };
        BootstrapComponent.prototype.excludeSetupFinishStep = function (notCompletedSetupSteps) {
            return notCompletedSetupSteps.filter(function (_a) {
                var setupId = _a.setupId;
                return setupId !== SETUP_FINISHED_STEP_ID;
            });
        };
        BootstrapComponent.prototype.hasRequiredSteps = function (notCompletedSetupSteps) {
            return notCompletedSetupSteps.some(function (step) { return step.required; });
        };
        BootstrapComponent.prototype.hasPermission = function () {
            return this.permissions.hasRole(NEEDED_ROLE_FOR_SETUP);
        };
        BootstrapComponent.prototype.getNotCompletedSetupSteps = function (steps) {
            var _this = this;
            if (!this.ui.currentApplicationConfig.value) {
                return steps;
            }
            return steps.filter(function (step) { return step.setupId && !(_this.ui.currentApplicationConfig.value.setup || []).includes(step.setupId); });
        };
        return BootstrapComponent;
    }());
    BootstrapComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-bootstrap',
                    template: "<c8y-login *ngIf=\"!(ui.currentUser | async)\"></c8y-login>\n\n<div\n  *ngIf=\"(ui.currentUser | async) && !(isSetupNeeded$ | async)\"\n  [class.head-open]=\"headerService.headerOpen\"\n>\n  <c8y-header-bar #header></c8y-header-bar>\n  <c8y-navigator-outlet\n    [nodes]=\"navigator.items$ | async\"\n    [open]=\"headerService.navigatorOpen$ | async\"\n  >\n    <header class=\"title navigator-slot-top\">\n      <div class=\"tenant-brand\"></div>\n      <c8y-app-icon\n        [name]=\"(ui.state$ | async).app.name\"\n        [contextPath]=\"(ui.state$ | async).app.contextPath\"\n      ></c8y-app-icon>\n      <span>{{ (ui.state$ | async).app | humanizeAppName | async }}</span>\n    </header>\n    <div class=\"powered-by navigator-slot-bottom\" *ngIf=\"showPoweredBy\">\n      <p translate>powered by Cumulocity</p>\n    </div>\n  </c8y-navigator-outlet>\n\n  <div class=\"alerts\">\n    <c8y-alert-outlet></c8y-alert-outlet>\n  </div>\n  <c8y-tabs-outlet\n    #tabsComponent\n    [tabs]=\"tabs.items$ | async\"\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [orientation]=\"tabs.orientation$ | async\"\n  >\n  </c8y-tabs-outlet>\n  <c8y-action-bar\n    #actionBarComponent\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [hasTabs]=\"tabsComponent.hasTabs\"\n    [isTabsHorizontal]=\"tabsComponent?.isHorizontal\"\n    [items$]=\"actionBar.items$\"\n  >\n  </c8y-action-bar>\n\n  <div\n    class=\"mcontainer\"\n    [ngClass]=\"{\n      open: headerService.navigatorOpen$ | async,\n      'no-apps-margin': noAppsMargin$ | async,\n      'horizontal-tabs': tabsComponent.isHorizontal,\n      'vertical-tabs': !tabsComponent.isHorizontal,\n      'has-tabs': tabsComponent.hasTabs,\n      'has-action-bar': !actionBarComponent?.hidden\n    }\"\n  >\n    <div class=\"container-fluid\">\n      <router-outlet></router-outlet>\n      <ng-content select=\"#c8y-legacy-view\"></ng-content>\n      <!-- legacy ng-view, will not be migrated atm -->\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"(ui.currentUser | async) && (isSetupNeeded$ | async)\">\n  <c8y-header-bar [simple]=\"true\"></c8y-header-bar>\n  <div class=\"mcontainer\">\n    <div class=\"container-fluid\">\n      <c8y-setup></c8y-setup>\n    </div>\n  </div>\n</div>\n\n<c8y-cookie-banner></c8y-cookie-banner>\n"
                },] }
    ];
    BootstrapComponent.ctorParameters = function () { return [
        { type: TabsService },
        { type: AppStateService },
        { type: NavigatorService },
        { type: ActionBarService },
        { type: HeaderService },
        { type: OptionsService },
        { type: PluginsResolveService },
        { type: StepperService },
        { type: Permissions }
    ]; };

    var BreadcrumbItemComponent = /** @class */ (function () {
        function BreadcrumbItemComponent() {
        }
        return BreadcrumbItemComponent;
    }());
    BreadcrumbItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-breadcrumb-item',
                    template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
                },] }
    ];
    BreadcrumbItemComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        translate: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        path: [{ type: i0.Input }],
        template: [{ type: i0.ViewChild, args: ['template', { static: false },] }]
    };

    var BreadcrumbOutletComponent = /** @class */ (function () {
        function BreadcrumbOutletComponent() {
            this.showAll = false;
            this.breadcrumbs = [];
        }
        /**
         * For upgrade only. Old angularjs routes start with hash, new ones not.
         */
        BreadcrumbOutletComponent.prototype.normalizePath = function (path) {
            return path === null || path === void 0 ? void 0 : path.replace(/^#\/?/, '');
        };
        return BreadcrumbOutletComponent;
    }());
    BreadcrumbOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-breadcrumb-outlet',
                    template: "<div\n  class=\"breadcrumbs-container\"\n  [ngClass]=\"{\n    multiple: breadcrumbs.length > 1,\n    open: showAll\n  }\"\n  *ngIf=\"breadcrumbs && breadcrumbs.length > 0\"\n>\n  <button\n    *ngIf=\"breadcrumbs.length > 1\"\n    class=\"btn-show-all-breadcrumbs pull-left\"\n    (click)=\"showAll = !showAll\"\n  >\n    <i\n      *ngIf=\"!showAll\"\n      [c8yIcon]=\"'caret-right'\"\n      tooltip=\"{{ 'Show all breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n    <i\n      *ngIf=\"showAll\"\n      [c8yIcon]=\"'caret-down'\"\n      tooltip=\"{{ 'Collapse breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n  </button>\n\n  <ul class=\"breadcrumbs text-muted\" *ngFor=\"let breadcrumb of breadcrumbs; let first = first\">\n    <ng-container *ngIf=\"first || showAll\">\n      <li class=\"text-muted\" *ngFor=\"let item of breadcrumb.items; let firstItem = first\">\n        <span *ngIf=\"!firstItem\"> > </span>\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n        <ng-container *ngIf=\"item.label && item.path\">\n          <a\n            [routerLink]=\"normalizePath(item.path)\"\n            class=\"word-break\"\n            title=\"{{ item.label | translate }}\"\n          >\n            <i [c8yIcon]=\"item.icon\" *ngIf=\"firstItem\" class=\"m-r-4\"></i>\n            <span>{{ item.label | translate }}</span>\n          </a>\n        </ng-container>\n        <ng-container *ngIf=\"item.label && !item.path\">\n          <i [c8yIcon]=\"item.icon\" *ngIf=\"firstItem\" class=\"m-r-4\"></i>\n          <span>{{ item.label | translate }}</span>\n        </ng-container>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
                },] }
    ];
    BreadcrumbOutletComponent.propDecorators = {
        breadcrumbs: [{ type: i0.Input }]
    };

    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent(breadcrumbService) {
            this.breadcrumbService = breadcrumbService;
        }
        BreadcrumbComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.items = this.contentChildItems.toArray();
            this.viewInitTimeout = setTimeout(function () { return _this.breadcrumbService.add(_this); });
        };
        BreadcrumbComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.breadcrumbService.remove(this);
        };
        return BreadcrumbComponent;
    }());
    BreadcrumbComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-breadcrumb',
                    template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>"
                },] }
    ];
    BreadcrumbComponent.ctorParameters = function () { return [
        { type: BreadcrumbService }
    ]; };
    BreadcrumbComponent.propDecorators = {
        contentChildItems: [{ type: i0.ContentChildren, args: [BreadcrumbItemComponent,] }]
    };

    /**
     * The angular module definition for breadcrumbs.
     * @exports BreadcrumbComponent
     * @exports BreadcrumbItemComponent
     * @exports BreadcrumbOutletComponent
     */
    var BreadcrumbModule = /** @class */ (function () {
        function BreadcrumbModule() {
        }
        return BreadcrumbModule;
    }());
    BreadcrumbModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        BreadcrumbComponent,
                        BreadcrumbItemComponent,
                        BreadcrumbOutletComponent
                    ],
                    imports: [
                        i1.RouterModule.forChild([]),
                        CommonModule,
                        tooltip.TooltipModule.forRoot()
                    ],
                    exports: [
                        BreadcrumbComponent,
                        BreadcrumbItemComponent,
                        BreadcrumbOutletComponent
                    ]
                },] }
    ];

    /**
     * Navigator node icon component.
     */
    var NavigatorIconComponent = /** @class */ (function () {
        function NavigatorIconComponent() {
        }
        Object.defineProperty(NavigatorIconComponent.prototype, "icon", {
            /**
             * Returns the navigator node icon.
             * If the icon is not defined, it returns the default icon (cog).
             */
            get: function () {
                var DEFAULT_ICON = 'cog';
                return this.node.icon || DEFAULT_ICON;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorIconComponent.prototype, "iconClass", {
            /**
             * Returns the navigator icon CSS class.
             */
            get: function () {
                return "dlt-c8y-icon-" + this.icon;
            },
            enumerable: false,
            configurable: true
        });
        return NavigatorIconComponent;
    }());
    NavigatorIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-navigator-icon',
                    template: "<i class=\"icon\" [c8yIcon]=\"icon\"></i>"
                },] }
    ];
    NavigatorIconComponent.propDecorators = {
        node: [{ type: i0.Input }]
    };

    /**
     * A component to show a popover right next to the
     * user action. Add this component where the confirm modal
     * should be shown and toggle isOpen to display it. You
     * can use `await isShow()` to wait for a result on the
     * click action.
     */
    var PopoverConfirmComponent = /** @class */ (function () {
        function PopoverConfirmComponent() {
            this.buttons = [{ label: gettext('cancel'), action: function () { return Promise.reject(); } }];
            this.isOpen = false;
            this.containerClass = '';
            this.placement = 'right';
            this.outsideClick = false;
        }
        /**
         * Show the popover. Wait until an action is performed on it.
         */
        PopoverConfirmComponent.prototype.show = function (buttons) {
            return __awaiter(this, void 0, void 0, function () {
                var result, ex_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.buttons = buttons || this.buttons;
                            this.isOpen = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            return [4 /*yield*/, new Promise(function (resolve, reject) {
                                    return _this.click = function (action) { return action().then(resolve).catch(reject); };
                                })];
                        case 2:
                            result = _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            ex_1 = _a.sent();
                            throw (ex_1);
                        case 4:
                            this.isOpen = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/, result];
                    }
                });
            });
        };
        PopoverConfirmComponent.prototype.buttonStatus = function (status) {
            if (status) {
                return "btn-" + status;
            }
            return 'btn-link btn-clean';
        };
        PopoverConfirmComponent.prototype.handleOutsideClick = function () {
            this.click(function () { return Promise.reject(); });
        };
        return PopoverConfirmComponent;
    }());
    PopoverConfirmComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-popover-confirm',
                    template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"m-b-8\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        class=\"btn btn-sm m-r-16\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n"
                },] }
    ];
    PopoverConfirmComponent.propDecorators = {
        popover: [{ type: i0.ViewChild, args: [popover.PopoverDirective, { static: false },] }],
        buttons: [{ type: i0.Input }],
        message: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        isOpen: [{ type: i0.Input }],
        containerClass: [{ type: i0.Input }],
        placement: [{ type: i0.Input }],
        outsideClick: [{ type: i0.Input }]
    };

    // tslint:disable-next-line:max-line-length
    /**
     * Navigator node renderer.
     */
    var NavigatorNodeComponent = /** @class */ (function () {
        function NavigatorNodeComponent(componentFactoryResolver, navigator) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.navigator = navigator;
            /**
             * Event emitter responsible for broadcasting one of the following events: "icon", "expander" or "link" as string value.
             *
             * The type of event depends on where you click on the navigator node:
             * * clicking the icon will broadcast the event "icon",
             * * clicking the expander will broadcast the event "expander",
             * * clicking the label will broadcast the event "link".
             */
            this.nodeClick = new i0.EventEmitter();
        }
        /**
         * @ignore
         */
        NavigatorNodeComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.childrenNodes.forEach(function (n) { return (n.parentNode = _this); });
            this.viewInitTimeout = setTimeout(function () {
                _this.updateIcon();
                _this.openOnFirstUrl();
                _this.expandParentIfActive();
                _this.node.confirm = _this.confirm;
            });
        };
        /**
         * Expands the navigator node when the URL matches the path provided in the node.
         */
        NavigatorNodeComponent.prototype.openOnFirstUrl = function () {
            if (this.navigator.openOnFirstUrl(this.node) && !this.node.open) {
                this.expandCollapse(true);
            }
        };
        Object.defineProperty(NavigatorNodeComponent.prototype, "expandTitle", {
            /**
             * Returns the expander title.
             */
            get: function () {
                return !this.node.open ? 'Expand' : 'Collapse';
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Click event handler.
         *
         * @param {string} from Source of the click event.
         * @param event DOM event.
         */
        NavigatorNodeComponent.prototype.click = function (from, $event) {
            if (from === void 0) { from = 'link'; }
            var open;
            switch (from) {
                case "expander" /* EXPANDER */:
                    if ($event) {
                        $event.preventDefault();
                        $event.stopPropagation();
                    }
                    open = !this.node.open;
                    break;
                case "icon" /* ICON */:
                case "link" /* LINK */:
                    open = this.routerLinkActive && this.routerLinkActive.isActive ? true : !this.node.open;
                    break;
            }
            this.handleExpandCollapse(open, from, $event);
            this.nodeClick.emit(from);
        };
        /**
         * Expands or collapses the navigator node and its children recursively.
         *
         * @param {boolean} open Open or close the node.
         * @param {boolean} recursive Open or close the children.
         * @param {ClickOptions} forNode Click options.
         */
        NavigatorNodeComponent.prototype.expandCollapse = function (open, recursive, forNode) {
            if (forNode === void 0) { forNode = {}; }
            this.node.open = open;
            if (recursive) {
                this.childrenNodes.forEach(function (n) { return n.expandCollapse(open, recursive); });
            }
            forNode.open = open;
            this.node.click(forNode);
        };
        /**
         * @ignore
         */
        NavigatorNodeComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            if (this.node) {
                this.node.destroy();
            }
        };
        NavigatorNodeComponent.prototype.handleExpandCollapse = function (open, from, $event) {
            var _a;
            if (open === this.node.open ||
                (this.node.path && !open && from !== "expander" /* EXPANDER */)) {
                return;
            }
            this.expandCollapse(open, false, (_a = {}, _a[from] = true, _a.$event = $event, _a));
        };
        NavigatorNodeComponent.prototype.expandParentIfActive = function () {
            if (this.routerLinkActive && this.routerLinkActive.isActive && this.parentNode) {
                this.parentNode.expandCollapse(true);
            }
        };
        NavigatorNodeComponent.prototype.updateIcon = function () {
            if (this.node.iconTemplate) {
                this.updateIconTemplate();
            }
            else {
                this.updateIconComponent();
            }
        };
        NavigatorNodeComponent.prototype.updateIconComponent = function () {
            var componentType = NavigatorIconComponent;
            if (this.node && this.node.iconComponent) {
                componentType = this.node.iconComponent;
            }
            this.iconSlot.clear();
            var iconComponentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            var componentRef = this.iconSlot.createComponent(iconComponentFactory);
            componentRef.instance.node = this.node;
        };
        NavigatorNodeComponent.prototype.updateIconTemplate = function () {
            this.iconSlot.clear();
            this.iconSlot.createEmbeddedView(this.node.iconTemplate);
        };
        return NavigatorNodeComponent;
    }());
    NavigatorNodeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-navigator-node',
                    template: "<div\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged, disabled: node.loading }\"\n>\n  <ng-container>\n    <a\n      class=\"link\"\n      draggable=\"false\"\n      (dragover)=\"node.canDrop && $event.preventDefault()\"\n      (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n      (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n      title=\"{{node.label | translate}}\"\n      [attr.id]=\"isRoot ? node.id : undefined\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{exact:node.routerLinkExact}\"\n      (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n      [ngClass]=\"{'root-link':isRoot, open: node.open && node.hasChildren, parent: node.hasChildren, 'dragged-hover': node.draggedHover && !node.dragged}\"\n    >\n      <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n    </a>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    >\n    </c8y-navigator-node>\n  </div>\n</div>\n\n<ng-template #inner>\n  <!-- loader -->\n  <i\n    class=\"icon-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    *ngIf=\"node.loading && !isRoot\"\n  >\n  </i>\n\n  <!-- icon -->\n  <div>\n    <ng-container #icon></ng-container>\n  </div>\n\n  <!--title  -->\n  <span>{{node.label | translate}}</span>\n\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    title=\"{{expandTitle}}\"\n  >\n  </i>\n\n  <c8y-popover-confirm\n    outsideClick=\"true\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n"
                },] }
    ];
    NavigatorNodeComponent.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: NavigatorService }
    ]; };
    NavigatorNodeComponent.propDecorators = {
        iconSlot: [{ type: i0.ViewChild, args: ['icon', { read: i0.ViewContainerRef, static: false },] }],
        node: [{ type: i0.Input }],
        isRoot: [{ type: i0.Input }],
        routerLinkActive: [{ type: i0.ViewChild, args: [i1.RouterLinkActive, { static: false },] }],
        childrenNodes: [{ type: i0.ViewChildren, args: [NavigatorNodeComponent,] }],
        nodeClick: [{ type: i0.Output }],
        confirm: [{ type: i0.ViewChild, args: [PopoverConfirmComponent, { static: false },] }]
    };

    /**
     * The component shows all nodes that have been added to the navigator.
     * In addition, it allows you to add a header and a footer to the navigator.
     *
     * ## Example:
     * ```html
     * <c8y-navigator-outlet [nodes]="navigatorService.items$ | async" [open]="isOpen">
     *   <header class="navigator-slot-top"></header>
     *   <footer class="navigator-slot-bottom"></footer>
     * </c8y-navigator-outlet>
     * ```
     */
    var NavigatorOutletComponent = /** @class */ (function () {
        function NavigatorOutletComponent(headerService) {
            this.headerService = headerService;
            /**
             * Determines whether the navigator menu should be open/closed.
             */
            this.open = true;
            /**
             * Determines whether the navigator pane should be rendered.
             */
            this.isShown$ = new rxjs.BehaviorSubject(false);
        }
        /**
         * @ignore
         */
        NavigatorOutletComponent.prototype.ngOnChanges = function () {
            this.isShown$.next(this.nodes && this.nodes.length > 0);
        };
        /**
         * Closes the navigator menu after clicking an item in the menu, in case of insufficient screen width.
         */
        NavigatorOutletComponent.prototype.collapseNavigator = function (from) {
            if (from === 'link' && !this.headerService.largeWidth) {
                this.headerService.closeNavigator();
            }
        };
        /**
         * @ignore
         */
        NavigatorOutletComponent.prototype.trackByPathOrLabel = function (index, node) {
            return node.path ? node.path : node.label;
        };
        return NavigatorOutletComponent;
    }());
    NavigatorOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-navigator-outlet, c8y-ui-navigator',
                    template: "<nav class=\"navigator\" *ngIf=\"isShown$ | async\" [ngClass]=\"{ open: open }\">\n  <ng-content select=\".navigator-slot-top\"></ng-content>\n  <ul class=\"navigatorContent\">\n    <c8y-navigator-node (nodeClick)=\"collapseNavigator($event)\" [node]=\"node\" *ngFor=\"let node of nodes trackBy trackByPathOrLabel\" [isRoot]=\"true\"></c8y-navigator-node>\n  </ul>\n  <ng-content select=\".navigator-slot-bottom\"></ng-content>\n</nav>\n"
                },] }
    ];
    NavigatorOutletComponent.ctorParameters = function () { return [
        { type: HeaderService }
    ]; };
    NavigatorOutletComponent.propDecorators = {
        nodes: [{ type: i0.Input }],
        open: [{ type: i0.Input }]
    };

    var ConfirmModalComponent = /** @class */ (function () {
        function ConfirmModalComponent(modal) {
            var _this = this;
            this.modal = modal;
            this.status = exports.Status.INFO;
            this._labels = {
                ok: 'OK',
                cancel: 'Cancel'
            };
            this.result = new Promise(function (resolve, reject) {
                _this.dismiss = function () {
                    reject();
                    _this.modal.hide();
                };
                _this.close = function () {
                    resolve(lodashEs.isEmpty(_this.confirmOptions)
                        ? true
                        : {
                            confirmed: true,
                            confirmOptions: lodashEs.mapValues(_this.confirmOptions, function (option) { return option.checked; })
                        });
                    _this.modal.hide();
                };
            });
        }
        Object.defineProperty(ConfirmModalComponent.prototype, "labels", {
            get: function () {
                return this._labels;
            },
            set: function (labels) {
                var _a = labels || {}, _b = _a.ok, ok = _b === void 0 ? 'OK' : _b, _c = _a.cancel, cancel = _c === void 0 ? 'Cancel' : _c;
                this._labels = { ok: ok, cancel: cancel };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConfirmModalComponent.prototype, "classIcon", {
            get: function () {
                return "dlt-c8y-icon-" + statusIcons[this.status];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConfirmModalComponent.prototype, "classAlert", {
            get: function () {
                return statusAlert[this.status];
            },
            enumerable: false,
            configurable: true
        });
        ConfirmModalComponent.prototype.ngOnDestroy = function () {
            this.dismiss();
        };
        return ConfirmModalComponent;
    }());
    ConfirmModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-confirm-modal',
                    template: "<div class=\"c8y-prompt alert\" [ngClass]=\"[classAlert]\">\n  <h3 class=\"m-b-16 d-flex a-i-center\" *ngIf=\"title\">\n    <i class=\"dlt-c8y-icon\" [ngClass]=\"[classIcon]\"></i>\n    <span *ngIf=\"title\">{{ title | translate }}</span>\n  </h3>\n  <p class=\"text-break-word m-b-16\">{{ body | translate }}</p>\n  <div\n    class=\"c8y-checkbox plain m-b-8\"\n    *ngFor=\"let co of confirmOptions | showIfFilter | async | keyvalue\"\n  >\n    <label [title]=\"co.value.text | translate\" class=\"c8y-checkbox\">\n      <input\n        type=\"checkbox\"\n        [checked]=\"co.value.checked\"\n        (change)=\"co.value.checked = !co.value.checked\"\n        [disabled]=\"confirmOptions[co.value.disabledByKey]?.checked\"\n      />\n      <span></span>\n      <span class=\"text-muted\">{{ co.value.text | translate }}</span>\n    </label>\n  </div>\n  <ng-content></ng-content>\n  <div class=\"alert-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      *ngIf=\"labels.cancel !== null\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      (click)=\"close()\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    ConfirmModalComponent.ctorParameters = function () { return [
        { type: i1$2.BsModalRef }
    ]; };
    ConfirmModalComponent.propDecorators = {
        title: [{ type: i0.Input }],
        body: [{ type: i0.Input }],
        confirmOptions: [{ type: i0.Input }],
        status: [{ type: i0.Input }],
        labels: [{ type: i0.Input }]
    };

    /**
     * C8y modal component.
     * ## Example:
     *
     * Creating custom modal:
     * ```typescript
     *  import { Component } from "@angular/core";
     *  import { Subject } from 'rxjs';
     *
     * @Component({
     *  selector: "my-modal",
     *  template: `
     *    <c8y-modal title="CustomTitle"
     *      (onClose)="onClose($event)"
     *      (onDismiss)="onDismiss($event)"
     *      [labels]="labels"
     *      [disabled]="true" <- will disable ok button
     *      >
     *        <span>I am body of modal</span>
     *        <span>For simple string use body="string"</span>
     *    </c8y-modal>`
     * })
     *
     * export class MyModalComponent {
     *
     *  closeSubject: Subject<boolean> = new Subject();
     *  labels : ModalLabels = {ok: "customOK", cancel: "customCancel"};
     *
     *  onDismiss(event){
     *    this.closeSubject.next(false);
     *  }
     *
     *  onClose(event) {
     *    this.closeSubject.next(true);
     *  }
     * }
     * ```
     * Showing modal:
     * ```typescript
     * import { BsModalService } from "ngx-bootstrap/modal";
     *
     * constructor(
     *  public bsModalService: BsModalService,
     * ) {}
     *
     * showModal() {
     *  const modalRef = this.bsModalService.show(MyModalComponent);
     *  modalRef.content.closeSubject.subscribe(result => {
     *    console.log('results:', result);
     *  });
     * }
     * ```
     */
    var ModalComponent = /** @class */ (function () {
        function ModalComponent(modal) {
            this.modal = modal;
            this.onDismiss = new i0.EventEmitter();
            this.onClose = new i0.EventEmitter();
            this.disabled = false;
            this.customFooter = false;
            this.headerClasses = '';
            this._labels = { ok: gettext('OK'), cancel: gettext('Cancel') };
        }
        Object.defineProperty(ModalComponent.prototype, "labels", {
            get: function () { return this._labels; },
            set: function (_a) {
                var ok = _a.ok, cancel = _a.cancel;
                this._labels = { ok: ok, cancel: cancel };
            },
            enumerable: false,
            configurable: true
        });
        ModalComponent.prototype._dismiss = function () {
            var _this = this;
            var fn = this.dismiss;
            if (!fn && this.modal) {
                fn = function () { return _this.modal.hide(); };
            }
            if (fn) {
                fn();
            }
            this.onDismiss.emit(true);
        };
        ModalComponent.prototype._close = function () {
            var _this = this;
            var fn = this.close;
            if (!fn && this.modal) {
                fn = function () { return _this.modal.hide(); };
            }
            if (fn) {
                fn();
            }
            this.onClose.emit(true);
        };
        ModalComponent.prototype.onEnterKeyDown = function (event) {
            var hasOnlyOneButton = lodash.isEmpty(this.labels.ok) !== lodash.isEmpty(this.labels.cancel);
            var isCancelClickable = !this.customFooter && this.labels.cancel;
            var isOkClickable = !this.customFooter && !this.disabled && this.labels.ok;
            if (hasOnlyOneButton && isCancelClickable) {
                this._dismiss();
            }
            if (hasOnlyOneButton && isOkClickable) {
                this._close();
            }
        };
        return ModalComponent;
    }());
    ModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-modal',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header {{ headerClasses }}\" [ngClass]=\"{ separator: title }\">\n    <ng-content select=\"[c8y-modal-title]\"></ng-content>\n    <h3 [hidden]=\"!title\">\n      {{ title | translate }}\n    </h3>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div [ngClass]=\"{ 'modal-body': !customFooter, 'd-contents': customFooter }\">\n      <p *ngIf=\"title\" class=\"text-center text-break-word\">\n        {{ body }}\n      </p>\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <div class=\"modal-footer\" *ngIf=\"!customFooter\">\n    <ng-content select=\"[c8y-modal-footer]\"></ng-content>\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      *ngIf=\"labels.cancel\"\n      class=\"btn btn-default\"\n      (click)=\"_dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      *ngIf=\"labels.ok\"\n      class=\"btn btn-primary\"\n      (click)=\"_close()\"\n      [disabled]=\"disabled\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    ModalComponent.ctorParameters = function () { return [
        { type: i1$2.BsModalRef, decorators: [{ type: i0.Optional }] }
    ]; };
    ModalComponent.propDecorators = {
        onDismiss: [{ type: i0.Output }],
        onClose: [{ type: i0.Output }],
        disabled: [{ type: i0.Input }],
        close: [{ type: i0.Input }],
        dismiss: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        body: [{ type: i0.Input }],
        customFooter: [{ type: i0.Input }],
        headerClasses: [{ type: i0.Input }],
        labels: [{ type: i0.Input }],
        onEnterKeyDown: [{ type: i0.HostListener, args: ['document:keydown.enter', ['$event'],] }]
    };

    /**
     * Service to show a modal.
     */
    var ModalService = /** @class */ (function () {
        function ModalService(modalService) {
            this.modalService = modalService;
        }
        /**
         * Shows a quick confirm message modal.
         * @param title The title of that modal.
         * @param body The text body to display.
         * @param status The status.
         * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
         * @param confirmOptions Selection options to display as checkbox list.
         */
        ModalService.prototype.confirm = function (title, body, status, labels, confirmOptions) {
            if (status === void 0) { status = exports.Status.INFO; }
            if (labels === void 0) { labels = {}; }
            if (confirmOptions === void 0) { confirmOptions = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var modalLabels, modalRef;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            modalLabels = {
                                ok: labels.ok || gettext('Confirm'),
                                cancel: labels.cancel || gettext('Cancel')
                            };
                            modalRef = this.modalService.show(ConfirmModalComponent, {
                                initialState: { title: title, body: body, labels: modalLabels, status: status, confirmOptions: confirmOptions },
                                ignoreBackdropClick: true
                            });
                            return [4 /*yield*/, modalRef.content.result];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Shows a quick acknowledge message modal.
         * @param title The title of that modal.
         * @param body The text body to display.
         * @param status The status.
         * @param acknowledgeLabel The label to use.
         */
        ModalService.prototype.acknowledge = function (title, body, status, acknowledgeLabel) {
            if (status === void 0) { status = exports.Status.INFO; }
            if (acknowledgeLabel === void 0) { acknowledgeLabel = gettext('Confirm'); }
            return __awaiter(this, void 0, void 0, function () {
                var labels, modalRef;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            labels = { ok: acknowledgeLabel, cancel: null };
                            modalRef = this.modalService.show(ConfirmModalComponent, {
                                initialState: { title: title, body: body, labels: labels, status: status },
                                ignoreBackdropClick: true
                            });
                            return [4 /*yield*/, modalRef.content.result];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Shows a quick logout confirmation modal.
         * @param body The text body to display. Default: 'You will be logged out to apply your changes. Do you want to proceed?'
         * @param status The status.
         * @param labels The labels to use. Default: { ok: 'Confirm and log out', cancel: 'Cancel' }
         */
        ModalService.prototype.confirmLogout = function (body, status, labels) {
            if (status === void 0) { status = exports.Status.WARNING; }
            if (labels === void 0) { labels = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var modalLabels, modalBody;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            modalLabels = {
                                ok: labels.ok || gettext('Confirm and log out'),
                                cancel: labels.cancel || gettext('Cancel')
                            };
                            modalBody = body || gettext('You must log out to apply your changes. Do you want to proceed?');
                            return [4 /*yield*/, this.confirm(gettext('Logout required'), modalBody, status, modalLabels)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        return ModalService;
    }());
    ModalService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0__namespace.ɵɵinject(i1__namespace$2.BsModalService)); }, token: ModalService, providedIn: "root" });
    ModalService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ModalService.ctorParameters = function () { return [
        { type: i1$2.BsModalService }
    ]; };

    /**
     * The angular module definition for modal.
     * @exports ConfirmModalComponent
     * @exports ModalComponent
     * @exports PopoverConfirmComponent
     */
    var ModalModule = /** @class */ (function () {
        function ModalModule() {
        }
        return ModalModule;
    }());
    ModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1$2.ModalModule.forRoot(),
                        CommonModule,
                        popover.PopoverModule.forRoot()
                    ],
                    exports: [
                        ConfirmModalComponent,
                        ModalComponent,
                        PopoverConfirmComponent
                    ],
                    declarations: [
                        ConfirmModalComponent,
                        ModalComponent,
                        PopoverConfirmComponent
                    ],
                    providers: [
                        ModalService
                    ],
                    entryComponents: [
                        ConfirmModalComponent
                    ]
                },] }
    ];

    /**
     * The angular module definition for the navigator.
     * @exports NavigatorOutletComponent
     * @exports NavigatorNodeComponent
     */
    var NavigatorModule = /** @class */ (function () {
        function NavigatorModule() {
        }
        return NavigatorModule;
    }());
    NavigatorModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        NavigatorOutletComponent,
                        NavigatorNodeComponent,
                        NavigatorIconComponent
                    ],
                    imports: [
                        i1.RouterModule,
                        collapse.CollapseModule.forRoot(),
                        CommonModule,
                        ModalModule
                    ],
                    exports: [
                        NavigatorOutletComponent,
                        NavigatorNodeComponent
                    ],
                    entryComponents: [
                        NavigatorIconComponent
                    ]
                },] }
    ];

    var ProductExperienceDirective = /** @class */ (function () {
        function ProductExperienceDirective(gainsightService) {
            this.gainsightService = gainsightService;
        }
        ProductExperienceDirective.prototype.onClick = function () {
            if (this.actionName) {
                this.gainsightService.triggerEvent(this.actionName, this.actionData);
            }
        };
        return ProductExperienceDirective;
    }());
    ProductExperienceDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yProductExperience]'
                },] }
    ];
    ProductExperienceDirective.ctorParameters = function () { return [
        { type: GainsightService }
    ]; };
    ProductExperienceDirective.propDecorators = {
        actionName: [{ type: i0.Input }],
        actionData: [{ type: i0.Input }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    /**
     * This module enables an tenant to activate the product experience
     * software [Gainsight](https://www.gainsight.com/product-experience/) to help
     * and track user actions. Gainsight is only activated, if the tenant custom
     * property `gainsightEnabled` is set to true.
     */
    var ProductExperienceModule = /** @class */ (function () {
        function ProductExperienceModule(appState, gainsightService, cookieBannerService) {
            var _this = this;
            this.appState = appState;
            this.gainsightService = gainsightService;
            this.cookieBannerService = cookieBannerService;
            rxjs.combineLatest([
                this.appState.currentTenant.pipe(operators.filter(Boolean)),
                this.cookieBannerService.isCookieBannerShowed$
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), currentTenant = _b[0], isCookieBannerShowed = _b[1];
                return __awaiter(_this, void 0, void 0, function () {
                    var customProperties, name, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (isCookieBannerShowed) {
                                    return [2 /*return*/];
                                }
                                customProperties = currentTenant.customProperties, name = currentTenant.name;
                                _a = this.gainsightService.shouldLoadGainsightTag(customProperties);
                                if (!_a) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.gainsightService.isGainsightDisabledInUserPreferences()];
                            case 1:
                                _a = !(_b.sent());
                                _b.label = 2;
                            case 2:
                                if (_a) {
                                    this.gainsightService.loadTag(currentTenant);
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            });
        }
        return ProductExperienceModule;
    }());
    ProductExperienceModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ProductExperienceDirective],
                    exports: [ProductExperienceDirective],
                    providers: [GainsightService]
                },] }
    ];
    ProductExperienceModule.ctorParameters = function () { return [
        { type: AppStateService },
        { type: GainsightService },
        { type: CookieBannerService }
    ]; };

    var SearchOutletComponent = /** @class */ (function () {
        function SearchOutletComponent(alertService) {
            this.alertService = alertService;
            this.search = [];
        }
        SearchOutletComponent.prototype.getByPriority = function () {
            return lodash.sortBy(this.search, this.byPriority);
        };
        SearchOutletComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        return SearchOutletComponent;
    }());
    SearchOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-search-outlet',
                    template: "<ng-container *ngFor=\"let item of getByPriority()\">\n  <ng-container *c8yOutlet=\"item.template\"></ng-container>\n</ng-container>\n"
                },] }
    ];
    SearchOutletComponent.ctorParameters = function () { return [
        { type: AlertService }
    ]; };
    SearchOutletComponent.propDecorators = {
        search: [{ type: i0.Input }]
    };

    var SearchComponent = /** @class */ (function () {
        function SearchComponent(searchService) {
            this.searchService = searchService;
            this.icon = 'search';
            this.priority = 0;
            this.search = new i0.EventEmitter();
            this.term = '';
        }
        SearchComponent.prototype.onSearch = function () {
            this.search.emit(this);
        };
        SearchComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.template = undefined;
            this.viewInitTimeout = setTimeout(function () { return _this.searchService.add(_this); });
        };
        SearchComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.searchService.remove(this);
        };
        return SearchComponent;
    }());
    SearchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-search',
                    template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
                },] }
    ];
    SearchComponent.ctorParameters = function () { return [
        { type: SearchService }
    ]; };
    SearchComponent.propDecorators = {
        name: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        priority: [{ type: i0.Input }],
        template: [{ type: i0.ViewChild, args: ['template', { static: false },] }],
        search: [{ type: i0.Output }],
        term: [{ type: i0.Input }]
    };

    var HighlightComponent = /** @class */ (function () {
        function HighlightComponent() {
            this.pattern = '';
            this.text = '';
            this.elementClass = 'text-info';
            this.shouldTrimPattern = false;
            this.highlightedText = '';
        }
        HighlightComponent.prototype.ngOnChanges = function () {
            var _a;
            var textNoHtml = lodashEs.escape(this.text || '');
            var patternEventuallyTrimmed = this.shouldTrimPattern
                ? (_a = this.pattern) === null || _a === void 0 ? void 0 : _a.trim()
                : this.pattern;
            var patternNoHtml = lodashEs.escape(patternEventuallyTrimmed || '');
            var patternForRegex = lodashEs.escapeRegExp(patternNoHtml).replace(/\\\*/g, '.*');
            this.highlightedText = textNoHtml.replace(new RegExp(patternForRegex, 'i'), "<strong class=\"" + this.elementClass + "\">$&</strong>");
        };
        return HighlightComponent;
    }());
    HighlightComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-highlight',
                    template: '<span [innerHTML]="highlightedText"></span>'
                },] }
    ];
    HighlightComponent.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['text', { read: i0.ElementRef, static: true },] }],
        pattern: [{ type: i0.Input }],
        text: [{ type: i0.Input }],
        elementClass: [{ type: i0.Input }],
        shouldTrimPattern: [{ type: i0.Input }]
    };

    var SearchResultEmptyComponent = /** @class */ (function () {
        function SearchResultEmptyComponent() {
            this.NO_RESULT_FOUND = gettext('No results found.');
            this.msg = this.NO_RESULT_FOUND;
        }
        Object.defineProperty(SearchResultEmptyComponent.prototype, "_message", {
            set: function (msg) {
                if (msg && msg.length > 0) {
                    this.msg = msg;
                }
                else {
                    this.msg = this.NO_RESULT_FOUND;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchResultEmptyComponent.prototype, "message", {
            get: function () {
                return this.msg;
            },
            enumerable: false,
            configurable: true
        });
        return SearchResultEmptyComponent;
    }());
    SearchResultEmptyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-search-result-empty',
                    template: "<div class=\"no-results\">\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div class=\"p-t-8\">\n      <p><strong>{{ message | translate }}</strong></p>\n      <small translate>Refine your search terms.</small>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    SearchResultEmptyComponent.propDecorators = {
        _message: [{ type: i0.Input, args: ['message',] }]
    };

    /**
     * Actions are functions that can be executed on the
     * current list item. They are displayed next to the
     * item and can be grouped in a dropdown.
     *
     * @example
     * ```html
     * <c8y-li>
     *   <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
     *     Delete
     *   </c8y-li-action>
     *   <c8y-li-action (click)="(false)" icon="rocket">
     *     Launch to space
     *   </c8y-li-action>
     * </c8y-li>
     * ```
     */
    var ListItemActionComponent = /** @class */ (function () {
        function ListItemActionComponent() {
            /**
             * An EventEmitter to determine what to do if the
             * action is triggered.
             */
            this.click = new i0.EventEmitter();
        }
        return ListItemActionComponent;
    }());
    ListItemActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-action, c8y-li-action',
                    template: "<ng-template #template>\n  <li>\n    <button title=\"{{ label | translate }}\" (click)=\"click.emit($event)\">\n      <i [c8yIcon]=\"icon\" *ngIf=\"icon\"></i>&nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n"
                },] }
    ];
    ListItemActionComponent.propDecorators = {
        template: [{ type: i0.ViewChild, args: ['template', { static: false },] }],
        label: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        click: [{ type: i0.Output }]
    };

    /**
     * Display collapsed content on a list item. Can be
     * used for more detailed information. Use it with
     * content projection.
     *
     * @example
     * ```html
     * <c8y-li>
     *   <c8y-collapsed>
     *     <strong>I am only visible if extended</strong>
     *   </c8y-collapsed>
     * </c8y-li>
     * ```
     */
    var ListItemCollapseComponent = /** @class */ (function () {
        function ListItemCollapseComponent() {
            /**
             * The way how to toggle collapse state.
             * button (default) - additional button for toggle collapse state
             * row - toggling collapse state by clicking to entire row.
             */
            this.collapseWay = 'button';
        }
        return ListItemCollapseComponent;
    }());
    ListItemCollapseComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-collapse, c8y-li-collapse',
                    template: "<ng-content></ng-content>\n"
                },] }
    ];
    ListItemCollapseComponent.propDecorators = {
        collapseWay: [{ type: i0.Input }]
    };

    /**
     * The footer can be used with either content projection
     * or a simple string as an input.
     *
     * @example
     * ```html
     * <c8y-li>
     *   Content
     *   <c8y-li-footer>I am a footer</c8y-li-footer>
     * </c8y-li>
     * ```
     */
    var ListItemFooterComponent = /** @class */ (function () {
        function ListItemFooterComponent() {
        }
        return ListItemFooterComponent;
    }());
    ListItemFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-footer, c8y-li-footer',
                    template: "<span *ngIf=\"footer\">{{footer}}</span>\n<ng-content></ng-content>\n"
                },] }
    ];
    ListItemFooterComponent.propDecorators = {
        footer: [{ type: i0.Input }]
    };

    /**
     * A list item is a representation of an item inside a list and
     * can be used to compose different styles in a list (mainly in a
     * <c8y-group-list>-component but also in others like the
     * <c8y-typeahead>-component):
     *  - a list with a footer
     *  - a list with one or multiple actions
     *  - an icon
     *  - a checkbox or radio input
     *
     * The item can be composed via content projection. The following
     * example shows a radio list with an icon, two actions
     * and a footer:
     * ```html
     * <c8y-list-group>
     *   <c8y-li
     *     *c8yFor="
     *       let device of devices;
     *       let i = index;
     *     "
     *   >
     *     <c8y-li-radio (onSelect)="updateSelected($event, device)"></c8y-li-radio>
     *     <c8y-li-icon [icon]="'rocket'"></c8y-li-icon>
     *     {{ i + 1 }}. {{ device.name || '-' }}
     *     <c8y-li-footer>
     *       Device id: <a [routerLink]="['/device', device.id]">{{ device.id }}</a>
     *     </c8y-li-footer>
     *     <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
     *       Delete
     *     </c8y-li-action>
     *     <c8y-li-action (click)="(false)" icon="rocket">
     *       Launch to space
     *     </c8y-li-action>
     *   </c8y-li>
     * </c8y-list-group>
     * ```
     */
    var ListItemComponent = /** @class */ (function () {
        /**
         * @ignore
         */
        function ListItemComponent(element) {
            this.element = element;
            /**
             * If set to true, the class "active" is added which
             * indicates that the current row is active.
             */
            this.active = false;
            /**
             * If set to true, the class "c8y-list__item--empty-actions" is added which adds
             * additional padding to compensate for the "actions" column in other list items.
             */
            this.emptyActions = false;
            /**
             * Indicates if the current list item is collapsed. You can trigger the collapsing from
             * any element event by toggling this value.
             *
             * @example
             * ```html
             * <c8y-li #li (click)="li.collapsed = !li.collapsed">
             *  Toggle
             *  <c8y-li-collapse>
             *    I can be toggled by clicking on the row.
             *  </c8y-li-collapse
             * </c8y-li>
             * ``
             */
            this.collapsed = true;
            /**
             * Indicates if the current list item is selectable.
             */
            this.selectable = true;
            /**
             * An event emitter which is triggered when the user collapses the content
             * via the chevron on the right.
             */
            this.collapsedChange = new i0.EventEmitter();
            /**
             * @ignore
             */
            this.showFooter = false;
            /**
             * @ignore
             */
            this.showActions = false;
            /**
             * @ignore
             */
            this.showCollapse = false;
            /**
             * @ignore
             */
            this.dropdownUp = false;
            this.pulse$ = new rxjs.Subject();
            this.destroy$ = new rxjs.Subject();
            this.ACTION_ITEM_HEIGHT = 40;
        }
        /**
         * @ignore
         */
        ListItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.pulse$
                .pipe(operators.filter(function (apply) { return !!apply; }), operators.tap(function () { return _this.element.nativeElement.classList.remove('c8y-list--pulse'); }), operators.delay(100), operators.tap(function () { return _this.element.nativeElement.classList.add('c8y-list--pulse'); }), operators.takeUntil(this.destroy$))
                .subscribe();
        };
        /**
         * @ignore
         */
        ListItemComponent.prototype.ngAfterContentChecked = function () {
            this.actions = this.itemActions.toArray();
            this.showFooter = this.itemFooter != null;
            this.showActions = this.itemActions.length > 0;
            this.showCollapse = this.itemCollapse != null;
        };
        /**
         * @ignore
         */
        ListItemComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * A helper function which helps to determine if the dropdown
         * should toggle up.
         */
        ListItemComponent.prototype.showDropdownUp = function () {
            var listItemRect = this.element.nativeElement.getBoundingClientRect();
            var dropdownTop = listItemRect.top;
            var dropdownHeightWithToggle = (1 + this.itemActions.length) * this.ACTION_ITEM_HEIGHT;
            var availableHeight = window.innerHeight;
            var dropdownDownFits = dropdownTop + dropdownHeightWithToggle <= availableHeight;
            this.dropdownUp = !dropdownDownFits;
        };
        /**
         * Toggles the collapse state and emits this state as
         * collapsedChange output as boolean.
         * @param $event Pass optional an event to stop propagation.
         */
        ListItemComponent.prototype.toggleCollapsed = function ($event) {
            if ($event) {
                $event.stopPropagation();
            }
            this.collapsed = !this.collapsed;
            this.collapsedChange.emit(this.collapsed);
        };
        /**
         * Highlights the list-item. This method should be used to show the
         * user that something within this item was changed.
         */
        ListItemComponent.prototype.pulse = function () {
            this.pulse$.next(true);
        };
        return ListItemComponent;
    }());
    ListItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item, c8y-li',
                    template: "<div [ngClass]=\"{ 'expanded': !collapsed, interact: (itemCollapse && itemCollapse.collapseWay === 'row')}\">\n  <div class=\"c8y-list__item__block\">\n    <ng-content select=\"c8y-list-item-drag-handle, c8y-li-drag-handle\"></ng-content>\n    <ng-content select=\"c8y-list-item-radio, c8y-li-radio\"></ng-content>\n    <ng-content select=\"c8y-list-item-checkbox, c8y-li-checkbox\"></ng-content>\n\n    <ng-content select=\"c8y-list-item-icon, c8y-li-icon\"></ng-content>\n\n    <div class=\"c8y-list__item__body text-truncate-wrap\" (click)=\"(itemCollapse && itemCollapse.collapseWay === 'row') && toggleCollapsed()\">\n      <ng-content select=\"c8y-list-item-body, c8y-li-body\"></ng-content>\n      <ng-content></ng-content>\n      <div class=\"c8y-list__item__footer\" *ngIf=\"showFooter\">\n        <ng-content select=\"c8y-list-item-footer, c8y-li-footer\"></ng-content>\n      </div>\n    </div>\n\n    <div class=\"c8y-list__item__actions\" *ngIf=\"(showCollapse && (itemCollapse && itemCollapse.collapseWay === 'button')) || showActions\">\n      <button\n        class=\"collapse-btn\"\n        title=\"{{ 'Expand' | translate }}\"\n        type=\"button\"\n        (click)=\"toggleCollapsed($event)\"\n        [attr.aria-expanded]=\"!collapsed\"\n        *ngIf=\"showCollapse && itemCollapse.collapseWay === 'button'\"\n      >\n        <i [c8yIcon]=\"'chevron-down'\"></i>\n      </button>\n      <div\n        class=\"dropdown\"\n        dropdown\n        [dropup]=\"dropdownUp\"\n        *ngIf=\"showActions\"\n        (onShown)=\"showDropdownUp()\"\n      >\n        <button\n          class=\"dropdown-toggle c8y-dropdown\"\n          dropdownToggle\n          title=\"{{ 'Actions' | translate }}\"\n          type=\"button\"\n          aria-haspopup=\"true\"\n        >\n          <i [c8yIcon]=\"'ellipsis-v'\"></i>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n          <ng-content select=\"c8y-list-item-action, c8y-li-action\"></ng-content>\n          <ng-container *ngFor=\"let action of actions\">\n            <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n\n      <ng-content select=\"c8y-list-item-action, c8y-li-action\" *ngIf=\"showActions\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"showCollapse\" [collapse]=\"collapsed\" [isAnimated]=\"true\">\n    <div class=\"c8y-list__item__collapse--container\">\n      <ng-content select=\"c8y-list-item-collapse, c8y-li-collapse\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    host: {
                        class: 'c8y-list__item'
                    }
                },] }
    ];
    ListItemComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ListItemComponent.propDecorators = {
        active: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.active',] }],
        emptyActions: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.c8y-list__item--empty-actions',] }],
        collapsed: [{ type: i0.Input }],
        selectable: [{ type: i0.Input }],
        collapsedChange: [{ type: i0.Output }],
        itemFooter: [{ type: i0.ContentChild, args: [ListItemFooterComponent, { static: false },] }],
        itemActions: [{ type: i0.ContentChildren, args: [ListItemActionComponent,] }],
        itemCollapse: [{ type: i0.ContentChild, args: [ListItemCollapseComponent, { static: false },] }]
    };

    var TypeaheadComponent = /** @class */ (function () {
        function TypeaheadComponent() {
            this.required = false;
            this.disabled = false;
            this.allowFreeEntries = true;
            this.displayProperty = 'name';
            this.icon = 'caret-down';
            this.name = this.displayProperty;
            this.autoClose = true;
            this.hideNew = false;
            this.container = '';
            this.selected = {
                id: null
            };
            this.onSearch = new i0.EventEmitter();
            this.onIconClick = new i0.EventEmitter();
            this.KEYCODE_UP = 38;
            this.KEYCODE_DOWN = 40;
            this.KEYCODE_TAB = 9;
            this.KEYCODE_ENTER = 13;
            this.KEYCODE_ESC = 27;
        }
        TypeaheadComponent.prototype.writeValue = function (value) {
            this.selected = value;
            if (value && this.searchControl) {
                this.searchControl.nativeElement.value = lodashEs.get(value, this.displayProperty, '');
            }
        };
        TypeaheadComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        TypeaheadComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        TypeaheadComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        TypeaheadComponent.prototype.doBlur = function () {
            if (this.onTouched) {
                this.onTouched();
            }
        };
        TypeaheadComponent.prototype.getDisplayProperty = function () {
            return lodashEs.get(this.selected, this.displayProperty, '');
        };
        TypeaheadComponent.prototype.onShown = function () {
            this.searchControl.nativeElement.focus();
        };
        /**
         * Resets the input field - clear value and clean field to be pristine and untouched.
         */
        TypeaheadComponent.prototype.reset = function () {
            this.searchControlModel.reset();
        };
        TypeaheadComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        TypeaheadComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.subscription = rxjs.fromEvent(this.searchControl.nativeElement, 'keydown')
                .pipe(operators.map(function (e) { return _this.handleKeyboard(e); }), operators.filter(function (e) { return e; }), operators.debounceTime(200), operators.map(function (e) { return e.target.value; }), operators.distinctUntilChanged())
                .subscribe(function (value) {
                _this.selected = {
                    id: null
                };
                lodashEs.set(_this.selected, _this.displayProperty, value || '');
                if (typeof _this.onChange === 'function') {
                    _this.onChange(_this.selected);
                }
                _this.onSearch.emit(value);
            });
        };
        TypeaheadComponent.prototype.handleKeyboard = function (event) {
            var keyCode = event.keyCode;
            if ([this.KEYCODE_ENTER, this.KEYCODE_DOWN, this.KEYCODE_TAB, this.KEYCODE_UP].includes(keyCode)) {
                var items = this.list.toArray();
                var index = lodashEs.findIndex(items, function (item) { return item.active; });
                if (keyCode === this.KEYCODE_ENTER || keyCode === this.KEYCODE_TAB) {
                    if (index > -1) {
                        event.preventDefault();
                        items[index].element.nativeElement.click();
                    }
                    this.dropdown.hide();
                    this.searchControl.nativeElement.blur();
                }
                else {
                    this.dropdown.show();
                    var upOrDown = keyCode === this.KEYCODE_DOWN ? 1 : -1;
                    if (index > -1) {
                        items[index].active = false;
                    }
                    this.selectNextItemOnKeyboardMove(items, index, upOrDown);
                }
                return;
            }
            else if (keyCode === this.KEYCODE_ESC && this.autoClose) {
                event.stopPropagation();
                this.dropdown.hide();
                this.searchControl.nativeElement.blur();
                return;
            }
            else {
                this.dropdown.show();
            }
            return event;
        };
        TypeaheadComponent.prototype.validate = function (ctrl) {
            if (this.required && !lodashEs.get(ctrl.value, this.displayProperty, '')) {
                return { required: true };
            }
            if (!this.allowFreeEntries && this.selected && this.selected.id === null && ctrl.value[this.displayProperty]) {
                return { notExisting: true };
            }
            return null;
        };
        TypeaheadComponent.prototype.selectNextItemOnKeyboardMove = function (items, index, upOrDown) {
            if (items[index + upOrDown]) {
                if (!items[index + upOrDown].selectable) {
                    this.selectNextItemOnKeyboardMove(items, index + upOrDown, upOrDown);
                    return;
                }
                items[index + upOrDown].active = true;
            }
        };
        return TypeaheadComponent;
    }());
    TypeaheadComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-typeahead',
                    template: "<div\n  class=\"c8y-search-dropdown dropdown fit-w\"\n  dropdown\n  [container]=\"container\"\n  placement=\"bottom left\"\n  #dropdown=\"bs-dropdown\"\n  [autoClose]=\"true\"\n  (onShown)=\"onShown()\"\n  [isDisabled]=\"disabled\"\n>\n  <div class=\"input-group input-group-dropdown\" dropdownToggle>\n    <input\n      #searchControl\n      #searchControlModel=\"ngModel\"\n      type=\"text\"\n      class=\"form-control text-truncate\"\n      [ngClass]=\"{'p-r-80': !hideNew &&\n      (selected\n        ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n        : false), \n        'p-r-40': hideNew || getDisplayProperty()?.length === 0\n        }\"\n      [required]=\"required\"\n      [ngModel]=\"selected ? getDisplayProperty() : ''\"\n      [placeholder]=\"placeholder | translate\"\n      (blur)=\"doBlur()\"\n      [name]=\"name\"\n      [maxlength]=\"maxlength\"\n      [disabled]=\"disabled\"\n      title=\"{{ placeholder | translate }}\"\n    />\n    <span\n      class=\"label label-info p-absolute\"\n      style=\"top: 10px; right: 40px; z-index: 10\"\n      translate\n      *ngIf=\"\n        !hideNew &&\n        (selected\n          ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n          : false)\n      \"\n    >\n      New\n    </span>\n\n    <span class=\"input-group-btn\">\n      <button\n        type=\"button\"\n        class=\"btn btn-clean\"\n        title=\"{{ 'Search' | translate }}\"\n        [disabled]=\"disabled\"\n        (click)=\"onIconClick.emit({ icon, $event });\"\n      >\n        <i [c8yIcon]=\"icon\" class=\"text-primary\"></i>\n      </button>\n    </span>\n  </div>\n\n  <c8y-list-group\n    class=\"dropdown-menu dropdown-menu--modal\"\n    *dropdownMenu\n    [style.width]=\"container === 'body' ? searchControl.clientWidth + 'px' : undefined\"\n  >\n    <ng-content select=\"div, c8y-li, c8y-list-item, button, a\"></ng-content>\n  </c8y-list-group>\n</div>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return TypeaheadComponent; })
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return TypeaheadComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    TypeaheadComponent.propDecorators = {
        searchControl: [{ type: i0.ViewChild, args: ['searchControl', { static: false },] }],
        searchControlModel: [{ type: i0.ViewChild, args: ['searchControlModel', { static: false },] }],
        dropdown: [{ type: i0.ViewChild, args: ['dropdown', { static: false },] }],
        list: [{ type: i0.ContentChildren, args: [ListItemComponent,] }],
        required: [{ type: i0.Input }],
        maxlength: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        allowFreeEntries: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        displayProperty: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        autoClose: [{ type: i0.Input }],
        hideNew: [{ type: i0.Input }],
        container: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        onSearch: [{ type: i0.Output }],
        onIconClick: [{ type: i0.Output }]
    };

    var InventorySearchService = /** @class */ (function () {
        function InventorySearchService(inventoryService) {
            this.inventoryService = inventoryService;
            this.FRAGMENTS_FOR_NO_DEVICE = [
                'c8y_Dashboard',
                'c8y_Report',
                'c8y_Kpi',
                'c8y_ExportConfiguration',
                'c8y_IsBinary',
                'c8y_NoDevice',
                'c8y_IsDeviceGroup',
                'c8y_Group',
                'com_cumulocity_model_smartrest_SmartRestTemplate',
                'com_cumulocity_model_devicesimulator_SensorTemplate',
                '_attachments',
                'c8y_IsDeviceType',
                'c8y_objectmapping_ObjectMapping',
                'c8y_IsAssetType'
            ];
            this.TYPES_FOR_NO_DEVICE = [
                'c8y_ConfigurationDump',
                'c8y_Firmware',
                'c8y_SmartRule',
                'c8y_Software',
                'impact_object_mapping',
                'c8y_UserPreference',
                'c8y_TenantPolicy',
                'c8y_PrivateSmartRule',
                'c8y_SmartRest2Template',
                'c8y_JsonSchema',
                'c8y_DeviceShellTemplate',
                'c8y_DemoStatus',
                'c8y_DataBroker',
                'c8y_Application_',
                'brandingVariables',
                'c8y_DeviceSimulator',
                'c8y_CertificateMetadata',
                'lwm2m_post_registration',
                'c8y_microservice_manifest_'
            ];
            this.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
            this.DEFAULT_PAGE_SIZE = 50;
        }
        /**
         * Returns the full-text search results.
         *
         * @param term The search term.
         * @param pagination The currently used pagination.
         */
        InventorySearchService.prototype.search = function (term, pagination) {
            if (pagination === void 0) { pagination = { currentPage: 1, pageSize: this.DEFAULT_PAGE_SIZE }; }
            return this.inventoryService.list({
                text: term,
                withTotalPages: true,
                pageSize: pagination.pageSize,
                withChildren: false,
                currentPage: pagination.currentPage || 1
            });
        };
        /**
         * Will return only valid assets (groups and devices) and filter out
         * none useful inventories (e.g. c8y_JsonSchema).
         * @param data All managed objects that should be filtered.
         */
        InventorySearchService.prototype.filterOnlyAssets = function (data) {
            var _this = this;
            return data.filter(function (mo) { return mo.c8y_IsDeviceGroup || _this.isAnyDevice(mo); });
        };
        InventorySearchService.prototype.isAnyDevice = function (mo) {
            var isDevice = this.isRootDevice(mo) || !this.hasFragmentOrTypeFromBlacklist(mo);
            return isDevice;
        };
        InventorySearchService.prototype.hasFragmentOrTypeFromBlacklist = function (mo) {
            return this.hasTypeFromBlacklist(mo) || this.hasFragmentFromBlacklist(mo);
        };
        InventorySearchService.prototype.hasTypeFromBlacklist = function (mo) {
            var moType = lodashEs.get(mo, 'type', '');
            return lodashEs.some(this.TYPES_FOR_NO_DEVICE, function (type) { return moType.includes(type); });
        };
        InventorySearchService.prototype.hasFragmentFromBlacklist = function (mo) {
            return lodashEs.find(this.FRAGMENTS_FOR_NO_DEVICE, function (f) { return !lodashEs.isUndefined(mo[f]); });
        };
        InventorySearchService.prototype.isRootDevice = function (mo) {
            return !!mo[this.DEVICE_FRAGMENT_TYPE];
        };
        return InventorySearchService;
    }());
    InventorySearchService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function InventorySearchService_Factory() { return new InventorySearchService(i0__namespace.ɵɵinject(i1__namespace$3.InventoryService)); }, token: InventorySearchService, providedIn: "root" });
    InventorySearchService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    InventorySearchService.ctorParameters = function () { return [
        { type: client.InventoryService }
    ]; };

    /**
     * AssetTypesService is being used to manage a cache of all existing asset types.
     * This service is injected in the AssetOverviewNavigationFactory class, which will trigger
     * the initialization of the cache as the contstructor is called.
     */
    var AssetTypesService = /** @class */ (function () {
        function AssetTypesService(inventory, apiService, appStateService) {
            var _this = this;
            this.inventory = inventory;
            this.apiService = apiService;
            this.appStateService = appStateService;
            this.ASSET_TYPE_GROUP_QUERY = {
                __filter: {
                    __and: [{ __has: 'c8y_IsAssetType' }, { name: 'group' }]
                }
            };
            this.assetTypesCache = {};
            this.DEFAULT_GROUP_ICON = 'c8y-group';
            this.DEFAULT_GROUP_ICON_OPEN = 'c8y-group-open';
            this.appStateService.currentUser
                .pipe(operators.map(function (user) { return user === null || user === void 0 ? void 0 : user.id; }), operators.distinctUntilChanged(), operators.switchMap(function (userId) {
                if (userId) {
                    _this.initAssetTypesCache();
                    return _this.subscribeForAssetTypeUpdates();
                }
                else {
                    _this.assetTypesCache = {};
                    return rxjs.NEVER;
                }
            }))
                .subscribe();
        }
        /**
         * Queries available asset types and adds every asset type to the local cache.
         * @returns void.
         */
        AssetTypesService.prototype.initAssetTypesCache = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.inventory.list({
                                fragmentType: 'c8y_IsAssetType',
                                withChildren: false,
                                pageSize: 2000
                            })];
                        case 1:
                            data = (_c.sent()).data;
                            data.forEach(function (assetType) { return _this.addAssetType(assetType); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Returns an asset type from the cache based on the unique name property.
         * @param name Name of the asset type.
         * @returns IManagedObject which represents the asset type.
         */
        AssetTypesService.prototype.getAssetTypeByName = function (name) {
            if (!this.assetTypesCache.hasOwnProperty(name)) {
                return undefined;
            }
            return this.assetTypesCache[name];
        };
        /**
         * Returns an asset type from the cache based on the id.
         * @param assetTypeId Id of the asset type.
         * @returns IManagedObject which represents the asset type.
         */
        AssetTypesService.prototype.getAssetTypeById = function (assetTypeId) {
            if (!assetTypeId) {
                return;
            }
            return Object.values(this.assetTypesCache).find(function (assetType) { return assetType.id === assetTypeId; });
        };
        /**
         * Extracts an icon from an asset type.
         * @param type Type of the asset type.
         * @param open Determines whether the method should return an alternative icon showing the open state.
         * Defaults to false.
         * @returns Returns an icon for a given asset type.
         */
        AssetTypesService.prototype.getIcon = function (type, open) {
            if (open === void 0) { open = false; }
            var _a, _b;
            var assetType = this.getAssetTypeByName(type);
            var icon = ((_b = (_a = assetType === null || assetType === void 0 ? void 0 : assetType.c8y_IsAssetType) === null || _a === void 0 ? void 0 : _a.icon) === null || _b === void 0 ? void 0 : _b.name) || this.getDefaultGroupIcon(open);
            return icon;
        };
        AssetTypesService.prototype.getDefaultGroupIcon = function (open) {
            if (open === void 0) { open = false; }
            return open ? this.DEFAULT_GROUP_ICON_OPEN : this.DEFAULT_GROUP_ICON;
        };
        /**
         * Checks if the default asset type 'group' already exists and if it doesn't it will be created.
         * @returns void.
         */
        AssetTypesService.prototype.createAssetTypeGroupIfNotExists = function () {
            return __awaiter(this, void 0, void 0, function () {
                var managedObjects;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.inventory.listQuery(this.ASSET_TYPE_GROUP_QUERY)];
                        case 1:
                            managedObjects = (_c.sent()).data;
                            if (managedObjects.length > 0) {
                                return [2 /*return*/];
                            }
                            // if default group asset type doesn't exit create it
                            return [4 /*yield*/, this.createDefaultAssetTypeGroup()];
                        case 2:
                            // if default group asset type doesn't exit create it
                            _c.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * create the default asset type group in the Inventory.
         */
        AssetTypesService.prototype.createDefaultAssetTypeGroup = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.inventory.create({
                                label: 'Group',
                                name: 'group',
                                description: 'Default group asset type',
                                c8y_IsAssetType: {
                                    icon: 'folder',
                                    propertyIds: [],
                                    allowedAssetTypeIds: [],
                                    isNoneChildAssetsAllowed: 'false'
                                }
                            })];
                        case 1:
                            _c.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Add an asset type to the local cache.
         * @param assetType Asset type which should be added to the cache.
         * @returns void.
         */
        AssetTypesService.prototype.addAssetType = function (assetType) {
            if (!assetType) {
                console.error('Asset type must not be null');
                return;
            }
            this.assetTypesCache[assetType.name] = assetType;
        };
        /**
         * Delete an asset type from the local cache based on the given asset type id.
         * @param assetTypeId Id of the asset type which should be deleted.
         * @returns void.
         */
        AssetTypesService.prototype.deleteAssetType = function (assetTypeId) {
            if (!assetTypeId) {
                console.error('Asset type ID must not be null');
                return;
            }
            var assetType = this.getAssetTypeById(assetTypeId);
            if (assetType) {
                delete this.assetTypesCache[assetType.name];
            }
        };
        /**
         * Update an asset type in the local cache.
         * @param assetType Asset type which should be updated in the cache.
         * @returns void.
         */
        AssetTypesService.prototype.updateAssetType = function (assetType) {
            if (!assetType) {
                console.error('Asset type must not be null');
                return;
            }
            var cachedAssetType = this.getAssetTypeById(assetType.id);
            if (cachedAssetType) {
                this.assetTypesCache[cachedAssetType.name] = Object.assign(cachedAssetType, assetType);
            }
        };
        /**
         * Subscribes to api PUT, POST and DELETE requests interceptor to update local asset types cache.
         * If a new asset type has been created it will be added to the local cache. If an asset
         * type has been deleted it will be removed from the local cache.
         */
        AssetTypesService.prototype.subscribeForAssetTypeUpdates = function () {
            var _this = this;
            return this.apiService
                .hookResponse(function (c) { return _this.checkIfInventoryMoApiCall(c); })
                .pipe(operators.tap(function (call) {
                var _a;
                if (!call && !call.method) {
                    return;
                }
                var bodyToParse = (_a = call.options) === null || _a === void 0 ? void 0 : _a.body;
                if (bodyToParse) {
                    try {
                        var mo = JSON.parse(bodyToParse);
                        if (call.method === 'DELETE') {
                            _this.deleteAssetType(mo.id);
                            return;
                        }
                        if (!mo.hasOwnProperty('c8y_IsAssetType')) {
                            return;
                        }
                        if (call.method === 'PUT') {
                            _this.updateAssetType(mo);
                            return;
                        }
                        _this.addAssetType(mo);
                    }
                    catch (error) {
                        // do nothing
                    }
                }
            }));
        };
        /**
         * Managed objects inventory api filter, allowing only PUT, POST and DELETE methods.
         * @param call Api call to filter.
         * @returns Returns true if api call meets the required criteria.
         */
        AssetTypesService.prototype.checkIfInventoryMoApiCall = function (call) {
            if (!call) {
                return false;
            }
            var hasRequiredMethod = call.method === 'POST' || call.method === 'DELETE' || call.method === 'PUT';
            var hasRequiredUrl = call.url.includes('managedObjects');
            return hasRequiredMethod && hasRequiredUrl;
        };
        return AssetTypesService;
    }());
    AssetTypesService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AssetTypesService_Factory() { return new AssetTypesService(i0__namespace.ɵɵinject(i1__namespace$3.InventoryService), i0__namespace.ɵɵinject(i4__namespace$1.ApiService), i0__namespace.ɵɵinject(AppStateService)); }, token: AssetTypesService, providedIn: "root" });
    AssetTypesService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    AssetTypesService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: i4.ApiService },
        { type: AppStateService }
    ]; };

    var SearchInputComponent = /** @class */ (function () {
        function SearchInputComponent(router, inventory, searchService, assetTypesService) {
            var _this = this;
            this.router = router;
            this.inventory = inventory;
            this.searchService = searchService;
            this.assetTypesService = assetTypesService;
            this.mode = 'search';
            this.container = '';
            this.filter = new i0.EventEmitter();
            this.search = new i0.EventEmitter();
            this.reset = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
            this.term = '';
            this.filterPipe = rxjs.pipe(operators.map(function (data) {
                return _this.searchService.filterOnlyAssets(data);
            }));
            this.recentSearchResults = [];
            this.isLoading = false;
            this.noMatch = false;
            this.RECENT_SEARCH_STORAGE_KEY = 'recent_search_view';
            this.MAX_RECENT_SEARCH_RESULTS = 5;
            this.DEFAULT_FILTER = {
                withTotalPages: true,
                pageSize: 5,
                withChildren: false
            };
            this.KEYCODE_ENTER = 'Enter';
            this.KEYCODE_ESC = 'Escape';
        }
        SearchInputComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var recentSearchIds, data;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            recentSearchIds = JSON.parse(localStorage.getItem(this.RECENT_SEARCH_STORAGE_KEY));
                            if (!(recentSearchIds && recentSearchIds.length > 0)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.inventory.list({ ids: recentSearchIds.join(',') })];
                        case 1:
                            data = (_a.sent()).data;
                            this.recentSearchResults = data;
                            this.recentlyRegisteredResults$ = rxjs.defer(function () { return _this.inventory.list(Object.assign({ q: '$orderby=creationTime desc' }, _this.DEFAULT_FILTER)); });
                            _a.label = 2;
                        case 2:
                            if (this.mode === 'select') {
                                requestAnimationFrame(function () {
                                    _this.subscribeOnSearch();
                                });
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        SearchInputComponent.prototype.onKeydownHandler = function (event) {
            if (event.key === this.KEYCODE_ESC) {
                this.hideDropdown();
            }
        };
        SearchInputComponent.prototype.getIcon = function (mo) {
            return this.assetTypesService.getIcon(mo.type) || 'c8y-group-open';
        };
        SearchInputComponent.prototype.onOpenChange = function (isOpen) {
            var _this = this;
            if (isOpen) {
                // needs to request an animation frame as
                // otherwise the typeahead is undefined
                requestAnimationFrame(function () {
                    _this.subscribeOnSearch();
                    _this.typeahead.dropdown.show();
                    _this.typeahead.searchControl.nativeElement.focus();
                });
            }
        };
        SearchInputComponent.prototype.open = function (event, mo, term) {
            event.stopPropagation();
            var isAlreadyRecent = this.recentSearchResults.find(function (_a) {
                var id = _a.id;
                return id === mo.id;
            });
            if (!isAlreadyRecent) {
                this.recentSearchResults.unshift(mo);
                this.recentSearchResults = this.recentSearchResults.slice(0, this.MAX_RECENT_SEARCH_RESULTS);
            }
            var recentSearchIds = this.recentSearchResults.map(function (_a) {
                var id = _a.id;
                return id;
            });
            localStorage.setItem(this.RECENT_SEARCH_STORAGE_KEY, JSON.stringify(recentSearchIds));
            if (term) {
                this.selected = mo;
                this.term = term;
            }
            this.onClick.emit(mo);
            this.hideDropdown();
        };
        SearchInputComponent.prototype.onReset = function (status) {
            status.$event.stopPropagation();
            this.reset.emit(this.term);
            this.typeahead.onSearch.emit('');
            this.selected = undefined;
            this.typeahead.searchControl.nativeElement.focus();
        };
        SearchInputComponent.prototype.keyDown = function (event) {
            if (event.key === this.KEYCODE_ENTER) {
                // enter hit can be faster then typeahead debounce,
                // therefore we take the term from the DOM element
                // itself:
                var searchTerm = event.target.value;
                this.onSearch(searchTerm);
            }
        };
        SearchInputComponent.prototype.onSearch = function (search) {
            this.search.emit(search);
            this.hideDropdown();
        };
        SearchInputComponent.prototype.onFilter = function (search) {
            this.filter.emit(search);
            this.hideDropdown();
        };
        SearchInputComponent.prototype.onOpenAssetTable = function () {
            this.router.navigateByUrl('/assetsearch');
            this.hideDropdown();
        };
        SearchInputComponent.prototype.hideDropdown = function () {
            if (this.dropdown) {
                this.dropdown.hide();
                return;
            }
            if (this.typeahead && this.typeahead.dropdown) {
                this.typeahead.dropdown.hide();
                return;
            }
        };
        SearchInputComponent.prototype.subscribeOnSearch = function () {
            var _this = this;
            if (!this.results$) {
                this.results$ = this.typeahead.onSearch.pipe(operators.tap(function (term) { return _this.onTypingStarted(term); }), operators.switchMap(function (term) { return _this.mergeRequest(term); }));
            }
        };
        SearchInputComponent.prototype.navigate = function (commands, extras) {
            var _this = this;
            this.router
                .navigateByUrl('/', { skipLocationChange: true })
                .then(function () { return _this.router.navigate(commands, extras); });
        };
        SearchInputComponent.prototype.mergeRequest = function (term) {
            var _this = this;
            return rxjs.merge(rxjs.of({ data: [] }), this.queryInventoryService(term).pipe(operators.tap(function (_a) {
                var data = _a.data, paging = _a.paging;
                return _this.onLoadingDone(data, paging);
            })));
        };
        SearchInputComponent.prototype.queryInventoryService = function (term) {
            var _this = this;
            if (term) {
                return rxjs.defer(function () { return _this.searchService.search(term); });
            }
            return rxjs.empty();
        };
        SearchInputComponent.prototype.onLoadingDone = function (data, paging) {
            this.isLoading = false;
            this.noMatch =
                paging && paging.nextPage === null && this.searchService.filterOnlyAssets(data).length === 0;
        };
        SearchInputComponent.prototype.onTypingStarted = function (term) {
            this.noMatch = false;
            this.term = term;
            this.isLoading = term.length > 0;
        };
        return SearchInputComponent;
    }());
    SearchInputComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-search-input',
                    template: "<div\n  class=\"dropdown\"\n  dropdown\n  #dropdown=\"bs-dropdown\"\n  [insideClick]=\"true\"\n  (isOpenChange)=\"onOpenChange($event)\"\n  *ngIf=\"mode === 'search'\"\n>\n  <button\n    class=\"main-header-button dropdown-toggle c8y-dropdown\"\n    dropdownToggle\n    type=\"button\"\n    [title]=\"'Search' | translate\"\n    aria-controls=\"searchDropdown\"\n  >\n    <i c8yIcon=\"search\" class=\"icon-2x\"></i>\n  </button>\n\n  <div\n    id=\"searchDropdown\"\n    *dropdownMenu\n    class=\"search-header-menu dropdown-menu dropdown-menu-center\"\n  >\n    <ng-container *ngTemplateOutlet=\"form\"></ng-container>\n  </div>\n</div>\n\n<div class=\"search-header-inline\" *ngIf=\"mode === 'select'\">\n  <ng-container *ngTemplateOutlet=\"form\"></ng-container>\n</div>\n\n<ng-template #form>\n  <form [ngClass]=\"{ 'c8y-search-form': mode === 'search' }\" novalidate #searchForm=\"ngForm\">\n    <c8y-typeahead\n      [(ngModel)]=\"selected\"\n      placeholder=\"{{ 'Search for groups or assets\u2026' | translate }}\"\n      (keydown)=\"keyDown($event)\"\n      (onIconClick)=\"onReset($event)\"\n      [icon]=\"term ? 'times' : 'search'\"\n      [allowFreeEntries]=\"false\"\n      [container]=\"container\"\n      name=\"selected\"\n    >\n      <!-- filter buttons -->\n      <c8y-li *ngIf=\"term.length !== 0\" class=\"p-l-16 p-r-16\">\n        <div class=\"flex-row\" *ngIf=\"mode === 'search'\">\n          <p class=\"m-r-4 text-muted\">\n            <em translate>Searching by exact match. Click for other search options:</em>\n          </p>\n          <div class=\"btn-group btn-group-sm\">\n            <button\n              class=\"btn btn-default\"\n              title=\"{{ 'Starts with' | translate }}\"\n              (click)=\"onFilter(term + '*')\"\n            >\n              {{ 'Starts with' | translate }}\n            </button>\n            <button\n              class=\"btn btn-default\"\n              title=\"{{ 'Contains' | translate }}\"\n              (click)=\"onFilter('*' + term + '*')\"\n            >\n              {{ 'Contains' | translate }}\n            </button>\n            <button\n              class=\"btn btn-default\"\n              title=\"{{ 'Ends with' | translate }}\"\n              (click)=\"onFilter('*' + term)\"\n            >\n              {{ 'Ends with' | translate }}\n            </button>\n          </div>\n        </div>\n      </c8y-li>\n\n      <!-- Recent search -->\n      <c8y-li\n        *ngIf=\"term.length === 0 && recentSearchResults.length > 0\"\n        [selectable]=\"false\"\n        class=\"p-l-24 p-r-24\"\n      >\n        <div class=\"legend form-block\">\n          <span translate>Recent search views</span>\n        </div>\n      </c8y-li>\n      <c8y-li\n        *ngFor=\"let result of term.length === 0 ? recentSearchResults : []\"\n        class=\"c8y-list__item--link m-l-16 m-r-16\"\n        (click)=\"open($event, result, result.name)\"\n      >\n        <c8y-li-icon>\n          <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n          <i\n            [c8yIcon]=\"getIcon(result)\"\n            class=\"c8y-icon-duocolor\"\n            *ngIf=\"result.c8y_IsDeviceGroup\"\n          ></i>\n        </c8y-li-icon>\n        {{ result.name || '--' }}\n      </c8y-li>\n\n      <!-- Recently registered devices -->\n      <c8y-li\n        *ngIf=\"term.length === 0 && (recentlyRegisteredResults$ | async)?.data?.length > 0\"\n        class=\"p-l-24 p-r-24\"\n        [selectable]=\"false\"\n      >\n        <div class=\"legend form-block\">\n          <span translate>Recently registered devices</span>\n        </div>\n      </c8y-li>\n      <c8y-li\n        *c8yFor=\"\n          let result of term.length === 0 ? recentlyRegisteredResults$ : { data: [] };\n          loadMore: 'none';\n          pipe: filterPipe\n        \"\n        class=\"c8y-list__item--link m-l-16 m-r-16\"\n        (click)=\"open($event, result, result.name)\"\n      >\n        <c8y-li-icon>\n          <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n          <i\n          [c8yIcon]=\"getIcon(result)\"\n            class=\"c8y-icon-duocolor\"\n            *ngIf=\"result.c8y_IsDeviceGroup\"\n          ></i>\n        </c8y-li-icon>\n        {{ result.name || '--' }}\n      </c8y-li>\n\n      <!-- Search results -->\n      <c8y-li *ngIf=\"term.length !== 0\" class=\"p-l-24 p-r-24\" [selectable]=\"false\">\n        <div class=\"legend form-block\">\n          <span translate>Search results</span>\n        </div>\n      </c8y-li>\n      <c8y-li\n        *c8yFor=\"\n          let result of results$;\n          loadMore: 'auto';\n          pipe: filterPipe;\n          notFound: notFoundTemplate;\n          loadingTemplate: loading;\n          loadNextLabel: 'Find more\u2026'\n        \"\n        class=\"c8y-list__item--link  m-l-16 m-r-16\"\n        (click)=\"open($event, result, result.name)\"\n        [title]=\"result.name\"\n      >\n        <c8y-li-icon>\n          <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n          <i\n            [c8yIcon]=\"getIcon(result)\"\n            class=\"c8y-icon-duocolor\"\n            *ngIf=\"result.c8y_IsDeviceGroup\"\n          ></i>\n        </c8y-li-icon>\n        {{ result.name || '--' }}\n      </c8y-li>\n\n      <!-- No search results found entry -->\n      <ng-template #notFoundTemplate>\n        <c8y-li *ngIf=\"noMatch\" class=\"p-16 c8y-empty-state\" [selectable]=\"false\">\n          <c8y-li-icon [icon]=\"'search'\"></c8y-li-icon>\n          <p><strong translate>No match found.</strong></p>\n          <small translate *ngIf=\"mode === 'search'\">\n            Try to filter or open the asset grid to show all devices and groups.\n          </small>\n          <small translate *ngIf=\"mode === 'select'\">\n            Try to rephrase your search word.\n          </small>\n        </c8y-li>\n      </ng-template>\n\n      <!-- loading bar first entries -->\n      <c8y-li *ngIf=\"isLoading\" class=\"p-t-32 p-b-0\" style=\"position: relative;\">\n        <div class=\"spinner\" style=\"right:0;\">\n          <div class=\"rect1\"></div>\n          <div class=\"rect2\"></div>\n          <div class=\"rect3\"></div>\n          <div class=\"rect4\"></div>\n          <div class=\"rect5\"></div>\n        </div>\n      </c8y-li>\n\n      <!-- loading bar for loading more entries (inventory roles) -->\n      <ng-template #loading>\n        <c8y-li class=\"text-center p-t-32 p-b-0\" style=\"position:relative;\">\n          <div class=\"spinner\" style=\"right:0;\">\n            <div class=\"rect1\"></div>\n            <div class=\"rect2\"></div>\n            <div class=\"rect3\"></div>\n            <div class=\"rect4\"></div>\n            <div class=\"rect5\"></div>\n          </div>\n        </c8y-li>\n      </ng-template>\n\n      <!-- more filter possibilities -->\n      <c8y-li\n        class=\"m-t-24 bg-gray-lighter p-t-16 p-b-16 p-l-24 p-r-24\"\n        [selectable]=\"false\"\n        *ngIf=\"mode === 'search'\"\n      >\n        <div class=\"flex-row\">\n          <i c8yIcon=\"info-circle\" class=\"text-info m-r-4\"></i>\n          <p translate class=\"m-r-8\">Need more filter possibilities?</p>\n          <button\n            type=\"button\"\n            class=\"m-l-auto btn btn-default btn-sm\"\n            translate\n            (mousedown)=\"onOpenAssetTable()\"\n          >\n            Go to the asset data table\n          </button>\n        </div>\n      </c8y-li>\n    </c8y-typeahead>\n  </form>\n</ng-template>\n"
                },] }
    ];
    SearchInputComponent.ctorParameters = function () { return [
        { type: i1.Router },
        { type: client.InventoryService },
        { type: InventorySearchService },
        { type: AssetTypesService }
    ]; };
    SearchInputComponent.propDecorators = {
        mode: [{ type: i0.Input }],
        container: [{ type: i0.Input }],
        filter: [{ type: i0.Output }],
        search: [{ type: i0.Output }],
        reset: [{ type: i0.Output }],
        onClick: [{ type: i0.Output }],
        typeahead: [{ type: i0.ViewChild, args: [TypeaheadComponent, { static: false },] }],
        dropdown: [{ type: i0.ViewChild, args: ['dropdown', { static: false },] }],
        onKeydownHandler: [{ type: i0.HostListener, args: ['document:keydown', ['$event'],] }]
    };
    __decorate([
        memoize(lodashEs.property('id'))
    ], SearchInputComponent.prototype, "getIcon", null);

    var SelectComponent = /** @class */ (function () {
        function SelectComponent() {
            this.placeholder = gettext('Select item');
            this.applyLabel = gettext('Apply');
            this.disableApplyOnNoSelection = false;
            this.onChange = new i0.EventEmitter();
            this.textFilter = '';
            this.labelText = '';
            this.isOpen = false;
            this.filteredItems = [];
            this.searchFilter = null;
            this.sizeToShowFilter = 5;
            this.labelsForSelectAll = {
                all: gettext('All'),
                allFiltered: gettext('All filtered')
            };
            this.showAllLabel = false;
            this.itemsSelected = new Set();
            this.stopClicks = false;
        }
        SelectComponent.prototype.preventClick = function (evt) {
            if (this.stopClicks) {
                evt.stopPropagation();
            }
            this.stopClicks = this.isOpen;
        };
        SelectComponent.prototype.isOpenChange = function (isOpen) {
            this.isOpen = isOpen;
            if (isOpen) {
                this.updateSelected();
                this.searchFilter = null;
            }
            else {
                this.stopClicks = false;
            }
        };
        SelectComponent.prototype.outterSelected = function (item) {
            var selected = this.selected;
            var isSelected = function () { return false; };
            if (typeof selected === 'function') {
                isSelected = selected;
            }
            else if (Array.isArray(selected)) {
                isSelected = function (i) { return selected.indexOf(i) > -1; };
            }
            return isSelected(item);
        };
        SelectComponent.prototype.isSelected = function (item) {
            return this.itemsSelected.has(item);
        };
        SelectComponent.prototype.isAllItemsSelected = function () {
            return this.itemsSelected.size === this.items.length;
        };
        SelectComponent.prototype.isAllFilteredSelected = function () {
            return this.itemsSelected.size === this.filteredItems.length;
        };
        SelectComponent.prototype.isNoItemSelected = function () {
            return !this.itemsSelected.size;
        };
        SelectComponent.prototype.applyChanges = function () {
            var selected = Array.from(this.itemsSelected.values());
            this.onChange.emit(selected);
            this.dropdown.hide();
        };
        SelectComponent.prototype.selectAll = function (checked) {
            var _this = this;
            this.filteredItems.forEach(function (item) { return _this.onChangeItem(checked, item); });
        };
        SelectComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.updateItems) {
                this.updateItems.subscribe(function () {
                    _this.updateSelected();
                    _this.updateLabel();
                    _this.showAllLabel = _this.isAllItemsSelected();
                });
            }
        };
        SelectComponent.prototype.onChangeItem = function (checked, item) {
            if (checked) {
                this.itemsSelected.add(item);
            }
            else {
                this.itemsSelected.delete(item);
            }
        };
        SelectComponent.prototype.updateFiltered = function (term) {
            if (term) {
                var search_1 = new RegExp(term, 'i');
                this.filteredItems = this.items.filter(function (_a) {
                    var name = _a.name;
                    return search_1.test(name);
                });
            }
            else {
                this.filteredItems = this.items;
            }
        };
        SelectComponent.prototype.getSelectAllToggleStatus = function () {
            var label = this.getLabel();
            var checked = this.isAllSelected();
            var indeterminate = !checked && this.itemsSelected.size > 0;
            return { label: label, checked: checked, indeterminate: indeterminate };
        };
        SelectComponent.prototype.ngOnChanges = function (changes) {
            if (this.isOpen) {
                return;
            }
            if (changes.items || changes.selected || changes.applyLabel) {
                this.updateSelected();
                this.updateLabel();
                this.showAllLabel = this.isAllItemsSelected();
            }
        };
        SelectComponent.prototype.ngOnDestroy = function () {
            if (this.updateItems && !this.updateItems.closed) {
                this.updateItems.unsubscribe();
            }
        };
        SelectComponent.prototype.updateLabel = function () {
            var _this = this;
            var outterSelected = this.items.filter(function (i) { return _this.outterSelected(i); });
            if (typeof this.selectedLabel === 'string') {
                this.labelText = this.selectedLabel;
            }
            else if (typeof this.selectedLabel === 'function') {
                this.labelText = this.selectedLabel(outterSelected);
            }
            else {
                this.labelText = outterSelected.map(function (_a) {
                    var name = _a.name;
                    return name;
                }).join(', ');
            }
        };
        SelectComponent.prototype.updateSelected = function () {
            var _this = this;
            var _a = this, itemsSelected = _a.itemsSelected, items = _a.items;
            itemsSelected.clear();
            items.forEach(function (item) {
                if (_this.outterSelected(item)) {
                    itemsSelected.add(item);
                }
            });
            this.filteredItems = items;
        };
        SelectComponent.prototype.isAllSelected = function () {
            if (this.getLabel() === this.labelsForSelectAll.allFiltered) {
                return this.isAllFilteredSelected();
            }
            else {
                return this.isAllItemsSelected();
            }
        };
        SelectComponent.prototype.getLabel = function () {
            return this.searchFilter ? this.labelsForSelectAll.allFiltered : this.labelsForSelectAll.all;
        };
        return SelectComponent;
    }());
    SelectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-select',
                    template: "<div\n  class=\"c8y-child-assets-selector dropdown fit-w\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n  c8yDropdownDirection\n  px-event=\"Select type\"\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">\n      <ng-container *ngIf=\"showAllLabel\">{{ 'All' | translate }}</ng-container>\n      <ng-container *ngIf=\"!showAllLabel\">{{ labelText | translate }}</ng-container>\n    </span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">\n      {{ placeholder | translate }}\n    </span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <ng-content select=\"c8y-li\"></ng-content>\n    <ng-container *ngIf=\"liChildren.length === 0\">\n      <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n        <div class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Filter' | translate }}\u2026\"\n            (keyup)=\"updateFiltered($event.target.value)\"\n            [(ngModel)]=\"searchFilter\"\n          />\n          <span class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"!textFilter\"></i>\n            <i c8yIcon=\"times\" class=\"text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n          </span>\n        </div>\n      </li>\n\n      <li class=\"multiselect-item\">\n        <label\n          [title]=\"getSelectAllToggleStatus().label | translate\"\n          class=\"c8y-checkbox input-sm\"\n          ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"getSelectAllToggleStatus().checked\"\n            (change)=\"selectAll($event.target.checked)\"\n            [indeterminate]=\"getSelectAllToggleStatus().indeterminate\"\n            class=\"m-t-0\"\n          />\n          <span></span>\n          <span class=\"label-text\">\n            {{ getSelectAllToggleStatus().label | translate }}\n          </span>\n        </label>\n      </li>\n\n      <li class=\"multiselect-item-container\">\n        <ul class=\"list-unstyled\">\n          <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n            <label title=\"{{ item.name | translate }}\" class=\"c8y-checkbox input-sm text-truncate\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isSelected(item)\"\n                (change)=\"onChangeItem($event.target.checked, item)\"\n                class=\"m-t-0\"\n              />\n              <span></span>\n              <span class=\"label-text\">\n                {{ item.name | translate }}\n              </span>\n            </label>\n          </li>\n        </ul>\n      </li>\n      <li class=\"divider\"></li>\n      <li class=\"bg-white\">\n        <button\n          title=\"{{ applyLabel | translate }}\"\n          class=\"btn btn-primary btn-block\"\n          [disabled]=\"disableApplyOnNoSelection && isNoItemSelected()\"\n          (click)=\"applyChanges()\"\n        >\n          {{ applyLabel | translate }}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
                },] }
    ];
    SelectComponent.propDecorators = {
        placeholder: [{ type: i0.Input }],
        selectedLabel: [{ type: i0.Input }],
        applyLabel: [{ type: i0.Input }],
        items: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        updateItems: [{ type: i0.Input }],
        disableApplyOnNoSelection: [{ type: i0.Input }],
        onChange: [{ type: i0.Output }],
        dropdown: [{ type: i0.ViewChild, args: [dropdown.BsDropdownDirective, { static: false },] }],
        liChildren: [{ type: i0.ContentChildren, args: [ListItemComponent,] }],
        preventClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    /**
     * Allows to display a timeline. Should be used with
     * content projection.
     *
     * @example
     * ```html
     * <c8y-list-group>
     *   <c8y-li-timeline>
     *     24.April 2020
     *     <c8y-li>
     *       Hello
     *     </c8y-li>
     *   </c8y-li-timeline>
     * </c8y-list-group>
     * ```
     */
    var ListItemTimelineComponent = /** @class */ (function () {
        function ListItemTimelineComponent() {
        }
        Object.defineProperty(ListItemTimelineComponent.prototype, "expanded", {
            get: function () {
                var _a;
                return !((_a = this.listItemComponent) === null || _a === void 0 ? void 0 : _a.collapsed);
            },
            enumerable: false,
            configurable: true
        });
        return ListItemTimelineComponent;
    }());
    ListItemTimelineComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-timeline, c8y-li-timeline',
                    template: "<small class=\"c8y-list--timeline__item__date\">\n  <ng-content></ng-content>\n</small>\n<ng-content select=\"c8y-li, c8y-list-item\"></ng-content>\n",
                    host: {
                        class: 'c8y-list--timeline__item'
                    }
                },] }
    ];
    ListItemTimelineComponent.propDecorators = {
        listItemComponent: [{ type: i0.ContentChild, args: [ListItemComponent, { static: false },] }],
        expanded: [{ type: i0.HostBinding, args: ['class.expanded',] }]
    };

    /**
     * List groups are flexible and powerful components for displaying
     * both simple lists of elements and complex ones with custom content.
     *
     * @example
     * ```html
     * <c8y-list-group>
     *   <c8y-li>
     *     Plain <strong>Text</strong>
     *   </c8y-li>
     *   <c8y-li>
     *     <c8y-li-icon [icon]="'rocket'"></c8y-li-icon>
     *     Icon
     *   </c8y-li>
     *   <c8y-li>
     *     <c8y-li-radio></c8y-li-radio>
     *     Radio
     *   </c8y-li>
     *   <c8y-li>
     *     <c8y-li-checkbox></c8y-li-checkbox>
     *     Checkbox
     *   </c8y-li>
     *   <c8y-li>
     *     Content
     *     <c8y-li-footer>
     *       Footer
     *     </c8y-li-footer>
     *   </c8y-li>
     *   <c8y-li>
     *     Content
     *     <c8y-li-action icon="rocket">
     *       Launch
     *     </c8y-li-action>
     *   </c8y-li>
     *   <c8y-li>
     *     Content
     *     <c8y-li-collapse>
     *       Collapsed content
     *     </c8y-li-collapse>
     *   </c8y-li>
     * </c8y-list-group>
     * ```
     */
    var ListGroupComponent = /** @class */ (function () {
        function ListGroupComponent() {
            /**
             * @ignore
             */
            this.timeline = false;
        }
        /**
         * @ignore
         */
        ListGroupComponent.prototype.ngAfterContentChecked = function () {
            this.timeline = !!this.timelineComponent;
        };
        return ListGroupComponent;
    }());
    ListGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-group',
                    template: "<ng-content></ng-content>\n\n",
                    host: {
                        class: 'c8y-list__group'
                    }
                },] }
    ];
    ListGroupComponent.propDecorators = {
        timeline: [{ type: i0.HostBinding, args: ['class.c8y-list--timeline',] }],
        timelineComponent: [{ type: i0.ContentChild, args: [ListItemTimelineComponent, { static: false },] }]
    };

    /**
     * An icon to display on a list item. Use it with content projection.
     *
     * @example
     * ```html
     * <c8y-li>
     *   <c8y-li-icon="rocket"></c8y-li-icon>
     * </c8y-li>
     * ```
     */
    var ListItemIconComponent = /** @class */ (function () {
        function ListItemIconComponent() {
        }
        return ListItemIconComponent;
    }());
    ListItemIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-icon, c8y-li-icon',
                    template: "<i [c8yIcon]=\"icon\" [ngClass]=\"status\" *ngIf=\"icon\"></i>\n<ng-content></ng-content>",
                    host: {
                        class: 'c8y-list__item__icon'
                    }
                },] }
    ];
    ListItemIconComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        status: [{ type: i0.Input }]
    };

    /**
     * The li-body component can be used to define the body.
     * Usually it doesn't need to be used, as it is the default
     * content projected to a <c8y-li>.
     */
    var ListItemBodyComponent = /** @class */ (function () {
        function ListItemBodyComponent() {
        }
        return ListItemBodyComponent;
    }());
    ListItemBodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-body, c8y-li-body',
                    template: "<span *ngIf=\"body\">{{body}}</span>\n<ng-content></ng-content>\n"
                },] }
    ];
    ListItemBodyComponent.propDecorators = {
        body: [{ type: i0.Input }]
    };

    /**
     * A component to display checkboxes in a c8y-li. Use it with content projection. It
     * can be used standalone or with an ngModel.
     *
     * @example
     * ```html
     * <c8y-li>
     *   <c8y-li-checkbox></c8y-li-checkbox>
     * </c8y-li>
     * ```
     */
    var ListItemCheckboxComponent = /** @class */ (function (_super) {
        __extends(ListItemCheckboxComponent, _super);
        function ListItemCheckboxComponent(renderer, elementRef) {
            var _this = _super.call(this, renderer, elementRef) || this;
            _this.renderer = renderer;
            _this.elementRef = elementRef;
            /**
             * Indicates if the checkbox is selected.
             */
            _this.selected = false;
            /**
             * Indicates if the checkbox is disabled.
             */
            _this.disabled = false;
            /**
             * An event emitted as soon as the checkbox is selected.
             */
            _this.onSelect = new i0.EventEmitter();
            _this.displayAsSwitch = false;
            return _this;
        }
        /**
         * @ignore
         */
        ListItemCheckboxComponent.prototype.ngOnChanges = function (changes) {
            if (changes.selected && !changes.selected.firstChange) {
                this.onSelect.emit(changes.selected.currentValue);
            }
        };
        /**
         * Selects the checkbox.
         * @param value The value to pass.
         */
        ListItemCheckboxComponent.prototype.select = function (value) {
            this.onSelect.emit(value);
            this.onChange(value);
            this.selected = value;
        };
        // default implementation (https://github.com/angular/angular/blob/main/packages/forms/src/directives/checkbox_value_accessor.ts#L54) not sufficient.
        // get overruled by our binding on checked..
        ListItemCheckboxComponent.prototype.writeValue = function (value) {
            this.selected = value;
        };
        ListItemCheckboxComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        return ListItemCheckboxComponent;
    }(forms.CheckboxControlValueAccessor));
    ListItemCheckboxComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-checkbox, c8y-li-checkbox',
                    template: "<label [ngClass]=\"displayAsSwitch ? 'c8y-switch c8y-switch--inline' : 'c8y-checkbox'\">\n  <input\n    type=\"checkbox\"\n    class=\"form-control\"\n    [disabled]=\"disabled\"\n    [checked]=\"selected\"\n    (change)=\"select($event.target.checked); (false)\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                    host: {
                        class: 'c8y-list__item__check'
                    },
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ListItemCheckboxComponent; })
                        }
                    ]
                },] }
    ];
    ListItemCheckboxComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    ListItemCheckboxComponent.propDecorators = {
        selected: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        onSelect: [{ type: i0.Output }],
        displayAsSwitch: [{ type: i0.Input }]
    };

    /**
     * A component to display a radio button in a c8y-li. Use it with content projection. It
     * can be used standalone or with an ngModel.
     *
     * @example
     * ```html
     * <c8y-li>
     *   <c8y-li-radio></c8y-li-radio>
     * </c8y-li>
     * ```
     */
    var ListItemRadioComponent = /** @class */ (function () {
        function ListItemRadioComponent() {
            /**
             * Indicates if the radio is selected.
             */
            this.selected = false;
            /**
             * The name of the radio (use different names for different radio groups).
             */
            this.name = 'list_item_radio';
            /**
             * Indicates if the radio is disabled.
             */
            this.disabled = false;
            /**
             * An event emitted as soon as the radio is selected.
             */
            this.onSelect = new i0.EventEmitter();
        }
        /**
         * Resets the native radio element.
         */
        ListItemRadioComponent.prototype.reset = function () {
            this.radio.nativeElement.checked = false;
        };
        /**
         * @ignore
         */
        ListItemRadioComponent.prototype.ngOnChanges = function (changes) {
            if (changes.selected && !changes.selected.firstChange) {
                this.onSelect.emit(changes.selected.currentValue);
            }
        };
        /**
         * Triggered when the radio is changed.
         * @param checked Should it be checked or not?
         */
        ListItemRadioComponent.prototype.change = function (checked) {
            this.onSelect.emit(checked);
            this.model = this.value;
            if (this.onChange) {
                this.onChange(this.model);
            }
            if (this.onTouched) {
                this.onTouched();
            }
        };
        /**
         * Registers an onChange event.
         */
        ListItemRadioComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * Registers an onTouch event.
         */
        ListItemRadioComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * @ignore
         */
        ListItemRadioComponent.prototype.writeValue = function (value) {
            this.model = value;
        };
        return ListItemRadioComponent;
    }());
    ListItemRadioComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-radio, c8y-li-radio',
                    template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                    host: {
                        class: 'c8y-list__item__radio'
                    },
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ListItemRadioComponent; })
                        }
                    ]
                },] }
    ];
    ListItemRadioComponent.propDecorators = {
        radio: [{ type: i0.ViewChild, args: ['radio', { static: true },] }],
        selected: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        onSelect: [{ type: i0.Output }],
        value: [{ type: i0.Input }]
    };

    var ListItemDragHandleComponent = /** @class */ (function () {
        function ListItemDragHandleComponent() {
        }
        return ListItemDragHandleComponent;
    }());
    ListItemDragHandleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-item-drag-handle, c8y-li-drag-handle',
                    template: "<ng-content></ng-content>"
                },] }
    ];

    /**
     * The list-group module allows you to compose different styles
     * of lists used in Cumulocity IoT. They can consist of plain
     * text, actions, icons and more.
     *
     * @example
     * ```html
     * <c8y-list-group>
     *   <c8y-li>Item 1<c8y-li>
     *   <c8y-li>Item 2<c8y-li>
     * </c8y-list-group>
     * ```
     */
    var ListGroupModule = /** @class */ (function () {
        function ListGroupModule() {
        }
        return ListGroupModule;
    }());
    ListGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CommonModule, collapse.CollapseModule.forRoot(), dropdown.BsDropdownModule],
                    declarations: [
                        ListGroupComponent,
                        ListItemComponent,
                        ListItemIconComponent,
                        ListItemBodyComponent,
                        ListItemFooterComponent,
                        ListItemActionComponent,
                        ListItemCollapseComponent,
                        ListItemCheckboxComponent,
                        ListItemRadioComponent,
                        ListItemTimelineComponent,
                        ListItemDragHandleComponent
                    ],
                    exports: [
                        ListGroupComponent,
                        ListItemComponent,
                        ListItemIconComponent,
                        ListItemBodyComponent,
                        ListItemFooterComponent,
                        ListItemActionComponent,
                        ListItemCollapseComponent,
                        ListItemCheckboxComponent,
                        ListItemRadioComponent,
                        ListItemTimelineComponent,
                        ListItemDragHandleComponent
                    ]
                },] }
    ];

    var _a$1;
    exports.DatapointLibraryValidationErrors = void 0;
    (function (DatapointLibraryValidationErrors) {
        DatapointLibraryValidationErrors["IS_REQUIRED"] = "required";
        DatapointLibraryValidationErrors["PATTERN"] = "pattern";
        DatapointLibraryValidationErrors["SHOULD_CONTAIN_NUMBER"] = "number";
        DatapointLibraryValidationErrors["SHOULD_BE_DEFINED"] = "should-be-defined";
        DatapointLibraryValidationErrors["GREATER_THAN_SCALE_MAX"] = "greater-than-scale-max";
        DatapointLibraryValidationErrors["LESS_THAN_SCALE_MIN"] = "less-than-scale-min";
        DatapointLibraryValidationErrors["GREATER_THAN_RANGE_MAX"] = "greater-than-range-max";
        DatapointLibraryValidationErrors["LESS_THAN_RANGE_MIN"] = "less-than-range-min";
        DatapointLibraryValidationErrors["MIN_ACTIVE_COUNT"] = "minActiveCount";
        DatapointLibraryValidationErrors["MAX_ACTIVE_COUNT"] = "maxActiveCount";
    })(exports.DatapointLibraryValidationErrors || (exports.DatapointLibraryValidationErrors = {}));
    // @dynamic
    var ValidationPattern = /** @class */ (function () {
        function ValidationPattern() {
        }
        ValidationPattern.get = function (key) {
            var pattern = this.rules[key];
            return pattern;
        };
        return ValidationPattern;
    }());
    ValidationPattern.messages = (_a$1 = {
            deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
            domain: gettext('Only lowercase letters, digits and hyphens allowed in the first part of the URI. ' +
                'Must start with a letter; hyphens only allowed in the middle. Must be a valid URI.'),
            email: gettext('Invalid email address.'),
            emails: gettext('Invalid email addresses.'),
            internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
            loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
            max: gettext('Max value: {{ max }}'),
            min: gettext('Min value: {{ min }}'),
            minLength: gettext('Should have at least {{ minLength }} characters'),
            minlength: gettext('Should have at least {{ requiredLength }} characters'),
            maxLength: gettext('Should have at most {{ maxLength }} characters'),
            maxlength: gettext('Should have at most {{ requiredLength }} characters'),
            pattern: gettext('Does not match pattern {{ requiredPattern }}'),
            opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
            password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
            passwordConfirm: gettext('Passwords do not match.'),
            passwordStrength: gettext('Password not good enough, password must be stronger (green).'),
            phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
            required: gettext('This field is required.'),
            tenantId: gettext('May contain lowercase letters, digits, and hyphens. ' +
                'Must start with a letter; hyphens only allowed in the middle; minimum 2 characters.'),
            urlSegment: gettext('Slash, single or double dots and white space not allowed.'),
            user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
            noDots: gettext('Dots not allowed.')
        },
        _a$1[exports.DatapointLibraryValidationErrors.SHOULD_CONTAIN_NUMBER] = gettext('This field must contain a number.'),
        _a$1[exports.DatapointLibraryValidationErrors.SHOULD_BE_DEFINED] = gettext('Value must be defined.'),
        _a$1[exports.DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX] = gettext('Value must be less than scale maximum.'),
        _a$1[exports.DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN] = gettext('Value must be greater than scale minimum.'),
        _a$1[exports.DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX] = gettext('Value must be less than respective maximum.'),
        _a$1[exports.DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN] = gettext('Value must be greater than respective minimum.'),
        _a$1);
    ValidationPattern.rules = {
        deviceId: {
            pattern: /^[^\s/]*$/
        },
        domain: {
            pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+\.{1}.+$/
        },
        groupName: {
            maxLength: 254
        },
        hostname: {
            pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
        },
        ip: {
            pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        },
        opcuaBrowsePath: {
            pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
        },
        password: {
            pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
        },
        phoneNumber: {
            pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
        },
        tenantId: {
            pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+$/
        },
        user: {
            pattern: /^[^\\/\s$:+]*$/
        },
        urlSegment: {
            pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
        },
        loginAlias: {
            pattern: /^[^\\/$:+]*$/
        },
        noDots: {
            pattern: /^[^.]*$/
        }
    };

    var DefaultValidationDirective = /** @class */ (function () {
        function DefaultValidationDirective() {
            this.c8yDefaultValidation = '';
        }
        DefaultValidationDirective.prototype.validate = function (control) {
            var _a;
            if (!control.value) {
                return null;
            }
            var validation = ValidationPattern.get(this.c8yDefaultValidation);
            if (!validation) {
                throw new Error("Pattern " + this.c8yDefaultValidation + " not found.");
            }
            var valid = true;
            if (validation.pattern) {
                valid = validation.pattern.test(control.value);
            }
            if (validation.maxLength) {
                valid = control.value.length < validation.maxLength;
            }
            if (validation.minLength) {
                valid = control.value.length >= validation.minLength;
            }
            return valid ? null : (_a = {}, _a[this.c8yDefaultValidation] = true, _a);
        };
        return DefaultValidationDirective;
    }());
    DefaultValidationDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yDefaultValidation]',
                    providers: [{ provide: forms.NG_VALIDATORS, useExisting: DefaultValidationDirective, multi: true }]
                },] }
    ];
    DefaultValidationDirective.propDecorators = {
        c8yDefaultValidation: [{ type: i0.Input }]
    };

    /**
     * A directive that adds the `emails` validator to controls marked with the
     * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
     *
     * **Example**
     *
     * ```html
     * <input type="text" name="emails" ngModel emails>
     * <input type="text" name="emails" ngModel emails="true">
     * <input type="text" name="emails" ngModel [emails]="true">
     * ```
     */
    var EmailsValidatorDirective = /** @class */ (function () {
        function EmailsValidatorDirective() {
            this._enabled = false;
            this.separator = ',';
        }
        Object.defineProperty(EmailsValidatorDirective.prototype, "emails", {
            /**
             * Tracks changes to the emails attribute bound to this directive.
             */
            set: function (value) {
                this._enabled = value === '' || value === true || value === 'true';
                if (this._onChange) {
                    this._onChange();
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Method that validates whether email addresses are valid.
         * Returns the validation result if enabled, otherwise null.
         */
        EmailsValidatorDirective.prototype.validate = function (control) {
            if (!this._enabled) {
                return null;
            }
            var value = control.value || '';
            var emails = value.split(this.separator).map(function (email) { return email.trim(); });
            var invalid = emails.some(function (email) { return forms.Validators.email(new forms.FormControl(email)); });
            return invalid ? { emails: true } : null;
        };
        /**
         * Registers a callback function to call when the validator inputs change.
         */
        EmailsValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
            this._onChange = fn;
        };
        return EmailsValidatorDirective;
    }());
    EmailsValidatorDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[emails][formControlName],[emails][formControl],[emails][ngModel]',
                    providers: [{ provide: forms.NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }]
                },] }
    ];
    EmailsValidatorDirective.propDecorators = {
        emails: [{ type: i0.Input }]
    };

    var FilterInputComponent = /** @class */ (function () {
        function FilterInputComponent() {
            this.onSearch = new i0.EventEmitter();
            this.filterChange$ = new rxjs.Subject();
            this.filterTerm = '';
            this.CARRIAGE_RETURN_KEY = 13;
            this.CARRIAGE_RETURN_CODE = 'Enter';
        }
        FilterInputComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.reset();
            this.filterChange$
                .pipe(operators.debounce(function (event) { return event.code === _this.CARRIAGE_RETURN_CODE || event.keyCode === _this.CARRIAGE_RETURN_KEY
                ? rxjs.timer(10)
                : rxjs.timer(300); }), operators.map(function (e) { return e.target.value; }), operators.distinctUntilChanged())
                .subscribe(function (filterTerm) {
                _this.filterTerm = filterTerm;
                _this.onSearch.emit(filterTerm);
            });
        };
        FilterInputComponent.prototype.reset = function () {
            this.filterTerm = '';
            this.onSearch.emit('');
        };
        FilterInputComponent.prototype.ngOnDestroy = function () {
            this.filterChange$.complete();
        };
        return FilterInputComponent;
    }());
    FilterInputComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-filter',
                    template: "<div class=\"input-group input-group-search\">\n  <input\n    class=\"form-control\"\n    placeholder=\"{{ 'Filter\u2026' | translate }}\"\n    type=\"text\"\n    [value]=\"filterTerm\"\n    (keyup)=\"filterChange$.next($event)\"\n    px-event=\"Filter\u2026\"\n  />\n  <span class=\"input-group-btn\">\n    <button class=\"btn btn-clean\" px-event=\"Clear filtering\" (click)=\"reset()\">\n      <i [c8yIcon]=\"filterTerm.length === 0 ? 'search' : 'close'\"></i>\n    </button>\n  </span>\n</div>\n"
                },] }
    ];
    FilterInputComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        onSearch: [{ type: i0.Output }]
    };

    var MessageDirective = /** @class */ (function () {
        function MessageDirective() {
        }
        return MessageDirective;
    }());
    MessageDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'c8y-message',
                },] }
    ];
    MessageDirective.propDecorators = {
        name: [{ type: i0.Input }],
        text: [{ type: i0.Input }]
    };

    var MessagesComponent = /** @class */ (function () {
        function MessagesComponent(translateService) {
            this.translateService = translateService;
            this.show = {};
            this.defaults = ValidationPattern.messages;
            this.messages = [];
            this.messageMap = {};
        }
        MessagesComponent.prototype.ngAfterContentInit = function () {
            this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce(function (messages, directive) {
                messages[directive.name] = directive.text;
                return messages;
            }, {}));
        };
        MessagesComponent.prototype.changVisibility = function (show) {
            this.show = show;
            this.ngOnChanges();
        };
        MessagesComponent.prototype.ngOnChanges = function () {
            var _this = this;
            if (this.show) {
                this.messages = Object.keys(this.show)
                    .map(function (key) { return _this.toMessage(key, _this.show[key]); })
                    // if an null message is returned, it will not be displayed
                    .filter(function (message) { return message !== null; });
            }
            else {
                this.messages = [];
            }
        };
        MessagesComponent.prototype.toMessage = function (key, value) {
            var message = this.messageMap[key];
            if ((!message || message === ValidationPattern.messages.pattern) && key === 'pattern' && typeof (value === null || value === void 0 ? void 0 : value.requiredPattern) === 'string') {
                var pattern_1 = value.requiredPattern.replace(/^\//, '').replace(/\/$/, '');
                var foundPattern = Object.keys(ValidationPattern.rules).find(function (tmp) { var _a; return ((_a = ValidationPattern.rules[tmp].pattern) === null || _a === void 0 ? void 0 : _a.source) === pattern_1; });
                if (foundPattern) {
                    key = foundPattern;
                    message = this.messageMap[key];
                }
            }
            if (!message) {
                return null;
            }
            return this.translateService.instant(message, value);
        };
        return MessagesComponent;
    }());
    MessagesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-messages',
                    template: "<small class=\"form-control-feedback-message\">\n  <div class=\"d-block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
                },] }
    ];
    MessagesComponent.ctorParameters = function () { return [
        { type: i2.TranslateService }
    ]; };
    MessagesComponent.propDecorators = {
        show: [{ type: i0.Input }],
        defaults: [{ type: i0.Input }],
        customMessages: [{ type: i0.ContentChildren, args: [MessageDirective,] }]
    };

    /**
     * A form group helps to validate an input of a form element.
     *
     * ## Example:
     *
     * ```html
     *  <c8y-form-group [hasWarning]="user.email.length === 0">
     *   <label translate for="userEmail">Email</label>
     *   <input
     *     id="userEmail"
     *     class="form-control"
     *     type="email"
     *     name="email"
     *     [maxlength]="254"
     *     autocomplete="off"
     *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
     *     [(ngModel)]="user.email"
     *     email
     *     required
     *   >
     *   <c8y-messages>
     *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
     *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
     *   </c8y-messages>
     *  </c8y-form-group>
     * ```
     *
     * @param status The current status could be error, warning or success.
     * @param hasError Set this to true to display a error.
     * @param hasWarning Set this to true to display a warning.
     * @param hasSuccess Set this to true to display a success.
     * @param novalidation Set this to true to disable automatic validation by this component.
     */
    var FormGroupComponent = /** @class */ (function () {
        function FormGroupComponent() {
            this.hasError = false;
            this.hasWarning = false;
            this.hasSuccess = false;
            this.novalidation = false;
            this.destroyed$ = new rxjs.Subject();
            this.VALIDATION_DEBOUNCE_MS = 1000;
        }
        Object.defineProperty(FormGroupComponent.prototype, "error", {
            get: function () {
                return this.status === 'error' || this.hasError;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormGroupComponent.prototype, "warning", {
            get: function () {
                return this.status === 'warning' || this.hasWarning;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormGroupComponent.prototype, "success", {
            get: function () {
                return this.status === 'success' || this.hasSuccess;
            },
            enumerable: false,
            configurable: true
        });
        FormGroupComponent.prototype.ngAfterContentInit = function () {
            this.initNgModel();
            this.initFormControl();
        };
        FormGroupComponent.prototype.initNgModel = function () {
            var _this = this;
            if (this.model) {
                this.model.valueAccessor.registerOnTouched(function () {
                    if (_this.model.control && !_this.model.control.dirty) {
                        _this.model.control.markAsDirty();
                        _this.model.control.updateValueAndValidity({ onlySelf: true });
                    }
                });
                this.subscribeForChanges(this.model);
            }
        };
        FormGroupComponent.prototype.initFormControl = function () {
            if (this.formControlName) {
                this.subscribeForChanges(this.formControlName.control);
            }
        };
        FormGroupComponent.prototype.subscribeForChanges = function (control) {
            var _this = this;
            rxjs.merge(control.valueChanges, control.statusChanges)
                .pipe(operators.filter(function () { return control.dirty && !_this.novalidation; }), operators.debounce(function () { return (_this.hasError ? rxjs.timer(10) : rxjs.timer(_this.VALIDATION_DEBOUNCE_MS)); }), operators.takeUntil(this.destroyed$))
                .subscribe(function () { return _this.update(control); });
        };
        FormGroupComponent.prototype.update = function (control) {
            this.hasError = control.status === 'INVALID';
            if (this.customErrorMessage) {
                this.customErrorMessage.changVisibility(control.errors);
            }
            else {
                this.errors = control.errors;
            }
        };
        FormGroupComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return FormGroupComponent;
    }());
    FormGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-form-group',
                    template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
                    host: {
                        class: 'form-group'
                    }
                },] }
    ];
    FormGroupComponent.propDecorators = {
        hasError: [{ type: i0.Input }],
        hasWarning: [{ type: i0.Input }],
        hasSuccess: [{ type: i0.Input }],
        novalidation: [{ type: i0.Input }],
        status: [{ type: i0.Input }],
        error: [{ type: i0.HostBinding, args: ['class.has-error',] }],
        warning: [{ type: i0.HostBinding, args: ['class.has-warning',] }],
        success: [{ type: i0.HostBinding, args: ['class.has-success',] }],
        customErrorMessage: [{ type: i0.ContentChild, args: [MessagesComponent, { static: false },] }],
        model: [{ type: i0.ContentChild, args: [forms.NgModel, { static: true },] }],
        formControlName: [{ type: i0.ContentChild, args: [forms.FormControlName, { static: true },] }]
    };

    var InputGroupListComponent = /** @class */ (function () {
        function InputGroupListComponent() {
            this.plus = true;
            this.minus = true;
            this.onRemove = new i0.EventEmitter();
            this.onAdd = new i0.EventEmitter();
        }
        InputGroupListComponent.prototype.add = function () {
            this.onAdd.emit(this.index);
        };
        InputGroupListComponent.prototype.remove = function () {
            this.onRemove.emit(this.index);
        };
        return InputGroupListComponent;
    }());
    InputGroupListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-input-group-list',
                    template: "<ng-container>\n  <div class=\"input-group\">\n    <ng-content></ng-content>\n    <div class=\"input-group-btn\">\n      <button\n        *ngIf=\"minus\"\n        title=\"{{ 'Remove' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"remove()\"\n      >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n      </button>\n      <button\n        *ngIf=\"plus\"\n        title=\"{{ 'Add' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"add()\"\n      >\n        <i c8yIcon=\"plus-circle\"></i>\n      </button>\n    </div>\n  </div>\n</ng-container>\n"
                },] }
    ];
    InputGroupListComponent.propDecorators = {
        plus: [{ type: i0.Input }],
        minus: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        onRemove: [{ type: i0.Output }],
        onAdd: [{ type: i0.Output }]
    };

    var InputGroupListContainerDirective = /** @class */ (function () {
        function InputGroupListContainerDirective() {
        }
        InputGroupListContainerDirective.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.listProjections.map(function (element) {
                if (element !== _this.listProjections.last) {
                    setTimeout(function () {
                        element.plus = false;
                    });
                }
            });
            this.listProjections.changes.subscribe(function (elements) {
                if (elements.length === 1) {
                    setTimeout(function () {
                        elements.first.plus = true;
                        elements.first.minus = false;
                    });
                    return;
                }
                elements.map(function (element) {
                    setTimeout(function () {
                        element.minus = true;
                    });
                    if (element !== elements.last) {
                        setTimeout(function () {
                            element.plus = false;
                        });
                    }
                    if (element === elements.last) {
                        setTimeout(function () {
                            element.plus = true;
                        });
                    }
                });
            });
        };
        return InputGroupListContainerDirective;
    }());
    InputGroupListContainerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yInputGroupListContainer]'
                },] }
    ];
    InputGroupListContainerDirective.propDecorators = {
        listProjections: [{ type: i0.ContentChildren, args: [InputGroupListComponent,] }]
    };

    var IpRangeInputListComponent = /** @class */ (function () {
        function IpRangeInputListComponent() {
        }
        Object.defineProperty(IpRangeInputListComponent.prototype, "data", {
            get: function () {
                return this.ipRangeList;
            },
            set: function (list) {
                this.ipRangeList = list;
                if (this.ipRangeList.length === 0) {
                    this.add();
                }
            },
            enumerable: false,
            configurable: true
        });
        IpRangeInputListComponent.prototype.add = function () {
            this.ipRangeList.push({ ip: '', cidr: undefined });
        };
        IpRangeInputListComponent.prototype.remove = function (index) {
            this.ipRangeList.splice(index, 1);
        };
        return IpRangeInputListComponent;
    }());
    IpRangeInputListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-ip-range-input-list',
                    template: "<c8y-form-group class=\"m-t-8 m-b-8\">\n  <ul c8yInputGroupListContainer class=\"list-unstyled\">\n    <li class=\"m-b-8\" *ngFor=\"let item of data; let i = index\">\n      <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n        <input\n          type=\"text\"\n          name=\"ipAddress\"\n          class=\"form-control m-r-4\"\n          placeholder=\"{{ 'IP range start, e.g.' | translate }} 192.168.0.1\"\n          style=\"flex-grow: 2\"\n          [(ngModel)]=\"item.ip\"\n          [required]=\"true\"\n          #ipAddress\n        />\n        <input\n          type=\"number\"\n          name=\"cidr\"\n          [min]=\"0\"\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 20\"\n          [(ngModel)]=\"item.cidr\"\n          [required]=\"true\"\n          #cidr\n        />\n      </c8y-input-group-list>\n    </li>\n  </ul>\n</c8y-form-group>\n"
                },] }
    ];
    IpRangeInputListComponent.propDecorators = {
        data: [{ type: i0.Input }]
    };

    var JsonValidationPrettifierDirective = /** @class */ (function () {
        function JsonValidationPrettifierDirective(ngCtrl) {
            this.invalidJSON = new i0.EventEmitter();
            this.message = gettext('Must be a valid JSON object.');
            this.debounceTimeInMs = 1000;
            this.abstractCtrl = ngCtrl.control;
        }
        JsonValidationPrettifierDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.abstractCtrl.valueChanges
                .pipe(operators.tap(function () { return _this.clearValidationMessage(); }), operators.debounceTime(this.debounceTimeInMs), operators.distinctUntilChanged())
                .subscribe(function (value) {
                _this.validateInputAndPrettify(value);
            });
        };
        JsonValidationPrettifierDirective.prototype.ngOnDestroy = function () {
            if (this.subscription && !this.subscription.closed) {
                this.subscription.unsubscribe();
            }
        };
        JsonValidationPrettifierDirective.prototype.validateInputAndPrettify = function (value) {
            if (value) {
                try {
                    var validJsonObject = JSON.parse(value);
                    var pretty = JSON.stringify(validJsonObject, undefined, 2);
                    this.abstractCtrl.setValue(pretty);
                }
                catch (ex) {
                    this.setErrorAndValidationMessage();
                }
            }
        };
        JsonValidationPrettifierDirective.prototype.setErrorAndValidationMessage = function () {
            this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
            this.invalidJSON.emit(this.message);
        };
        JsonValidationPrettifierDirective.prototype.clearValidationMessage = function () {
            this.invalidJSON.emit(undefined);
        };
        return JsonValidationPrettifierDirective;
    }());
    JsonValidationPrettifierDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'textarea[prettyValidJson]'
                },] }
    ];
    JsonValidationPrettifierDirective.ctorParameters = function () { return [
        { type: forms.NgControl }
    ]; };
    JsonValidationPrettifierDirective.propDecorators = {
        invalidJSON: [{ type: i0.Output }]
    };

    var MaxValidationDirective = /** @class */ (function () {
        function MaxValidationDirective() {
            this.max = '';
        }
        MaxValidationDirective.prototype.validate = function (control) {
            var parsedMax = typeof this.max === 'number' ? this.max : parseFloat(this.max);
            if (lodashEs.isUndefined(control.value) || !lodashEs.isFinite(parsedMax)) {
                return null;
            }
            var valid = !(control.value > parsedMax);
            return valid ? null : { max: { max: parsedMax, actual: control.value } };
        };
        return MaxValidationDirective;
    }());
    MaxValidationDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[max]',
                    providers: [{ provide: forms.NG_VALIDATORS, useExisting: MaxValidationDirective, multi: true }]
                },] }
    ];
    MaxValidationDirective.propDecorators = {
        max: [{ type: i0.Input }]
    };

    var MinValidationDirective = /** @class */ (function () {
        function MinValidationDirective() {
            this.min = '';
        }
        MinValidationDirective.prototype.validate = function (control) {
            var parsedMin = typeof this.min === 'number' ? this.min : parseFloat(this.min);
            if (lodashEs.isUndefined(control.value) || !lodashEs.isFinite(parsedMin)) {
                return null;
            }
            var valid = (control.value !== null) ? !(control.value < parsedMin) : true;
            return valid ? null : { min: { min: parsedMin, actual: control.value } };
        };
        return MinValidationDirective;
    }());
    MinValidationDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[min]',
                    providers: [{ provide: forms.NG_VALIDATORS, useExisting: MinValidationDirective, multi: true }]
                },] }
    ];
    MinValidationDirective.propDecorators = {
        min: [{ type: i0.Input }]
    };

    var PhoneValidationDirective = /** @class */ (function () {
        function PhoneValidationDirective() {
        }
        PhoneValidationDirective.prototype.validate = function (control) {
            var valid = this.validateInternationalPhoneNumber(control);
            return valid ? null : { internationalPhoneNumber: true };
        };
        PhoneValidationDirective.prototype.validateInternationalPhoneNumber = function (control) {
            var numberValid;
            try {
                var phoneNumber = max.parsePhoneNumberFromString(control.value);
                numberValid = phoneNumber.isValid();
                if (numberValid && control.value !== phoneNumber.format('E.164')) {
                    control.setValue(phoneNumber.format('E.164'), {
                        emitEvent: false,
                        emitModelToViewChange: false
                    });
                }
            }
            catch (e) {
                numberValid = !control.value;
            }
            return numberValid;
        };
        return PhoneValidationDirective;
    }());
    PhoneValidationDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8yPhoneValidation]',
                    providers: [{ provide: forms.NG_VALIDATORS, useExisting: PhoneValidationDirective, multi: true }]
                },] }
    ];

    var RangeDirective = /** @class */ (function () {
        function RangeDirective(elementRef) {
            this.elementRef = elementRef;
        }
        return RangeDirective;
    }());
    RangeDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'input[type="range"]',
                },] }
    ];
    RangeDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };

    /**
     * An component which renders a range slider in Cumulocity layout. You need
     * to wrap the default range input in this component.
     *
     * Example:
     * ```
     * <c8y-range>
     *   <input id="range" type="range" min="0" max="100000" value="0" step="1">
     * </c8y-range>
     * ```
     */
    var RangeComponent = /** @class */ (function () {
        function RangeComponent() {
            var _this = this;
            this.changeEventListener = function () { return _this.setValue(); };
        }
        RangeComponent.prototype.ngAfterContentInit = function () {
            this.setValue();
            this.range.elementRef.nativeElement.addEventListener('input', this.changeEventListener);
        };
        RangeComponent.prototype.ngOnDestroy = function () {
            this.range.elementRef.nativeElement.removeEventListener('input', this.changeEventListener);
        };
        RangeComponent.prototype.setValue = function () {
            var range = this.range.elementRef.nativeElement;
            var newValue = Number(((range.value - range.min) * 100) / (range.max - range.min));
            var newPosition = 12 - newValue * 0.24;
            this.value = range.value;
            this.left = "calc(" + newValue + "% + (" + newPosition + "px))";
        };
        return RangeComponent;
    }());
    RangeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-range',
                    template: "<div class=\"range-wrap\" style=\"--track-width: {{left}}\">\n  <div class=\"range-value\" [style.left]=\"left\">\n    <span *ngIf=\"!rangeValue\">{{ value }}</span>\n    <ng-container *ngTemplateOutlet=\"rangeValue\"></ng-container>\n  </div>\n  <ng-content></ng-content>\n</div>\n"
                },] }
    ];
    RangeComponent.propDecorators = {
        range: [{ type: i0.ContentChild, args: [RangeDirective, { static: true },] }],
        rangeValue: [{ type: i0.ContentChild, args: ['c8yRangeValue', { static: true },] }]
    };

    var RequiredInputPlaceholderDirective = /** @class */ (function () {
        function RequiredInputPlaceholderDirective(el, renderer, translationService, ngControl) {
            this.el = el;
            this.renderer = renderer;
            this.translationService = translationService;
            this.ngControl = ngControl;
            this.shouldSkipRequiredHint = false;
            this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
        }
        RequiredInputPlaceholderDirective.prototype.ngAfterViewChecked = function () {
            var _a, _b, _c, _d, _e, _f, _g;
            if (((_b = (_a = this.el) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.required) !== undefined || ((_c = this.ngControl) === null || _c === void 0 ? void 0 : _c.control)) {
                var isRequired = ((_e = (_d = this.el) === null || _d === void 0 ? void 0 : _d.nativeElement) === null || _e === void 0 ? void 0 : _e.required) ||
                    ((_g = (_f = this.ngControl) === null || _f === void 0 ? void 0 : _f.control) === null || _g === void 0 ? void 0 : _g.hasValidator(forms.Validators.required));
                var willSetRequiredHint = isRequired && !this.shouldSkipRequiredHint;
                var placeholder = this.el.nativeElement.placeholder;
                if (this.placeholder !== placeholder || this.req !== willSetRequiredHint) {
                    this.updatePlaceholder(this.getTextForPlaceholder(placeholder, willSetRequiredHint));
                }
            }
        };
        RequiredInputPlaceholderDirective.prototype.getTextForPlaceholder = function (placeholder, required) {
            if (placeholder === void 0) { placeholder = ''; }
            if (required === void 0) { required = false; }
            this.req = required;
            var requiredText = "(" + this.translationService.instant(gettext('required')) + ")";
            var requiredTextIndex = placeholder.lastIndexOf(requiredText);
            if (requiredTextIndex > 0) {
                placeholder = placeholder.slice(0, requiredTextIndex - 1);
            }
            if (requiredTextIndex === 0) {
                placeholder = '';
            }
            if (!required) {
                return placeholder;
            }
            return placeholder.trim() ? placeholder + " " + requiredText : requiredText;
        };
        RequiredInputPlaceholderDirective.prototype.updatePlaceholder = function (placeholder) {
            this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
            this.placeholder = placeholder;
        };
        return RequiredInputPlaceholderDirective;
    }());
    RequiredInputPlaceholderDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'input[required], input[formControlName]'
                },] }
    ];
    RequiredInputPlaceholderDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i2.TranslateService },
        { type: forms.NgControl, decorators: [{ type: i0.Optional }] }
    ]; };

    var TextAreaRowHeightDirective = /** @class */ (function () {
        function TextAreaRowHeightDirective(elem, renderer) {
            this.elem = elem;
            this.renderer = renderer;
            this.rows = 1;
            this.minHeightPerRow = 20;
        }
        TextAreaRowHeightDirective.prototype.ngAfterViewInit = function () {
            var convertedValue = Number(this.heightPerRow);
            if (this.heightPerRow && convertedValue && convertedValue > this.minHeightPerRow) {
                this.setHeight(this.rows * convertedValue + "px");
            }
            else {
                this.setHeight(this.rows * this.minHeightPerRow + "px");
            }
        };
        TextAreaRowHeightDirective.prototype.setHeight = function (value) {
            this.renderer.setStyle(this.elem.nativeElement, 'height', value);
        };
        return TextAreaRowHeightDirective;
    }());
    TextAreaRowHeightDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'textarea[heightPerRow]'
                },] }
    ];
    TextAreaRowHeightDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    TextAreaRowHeightDirective.propDecorators = {
        rows: [{ type: i0.Input }, { type: i0.HostBinding, args: ['rows',] }],
        heightPerRow: [{ type: i0.Input, args: ['heightPerRow',] }]
    };

    var UniqueInCollectionByPathValidationDirective = /** @class */ (function () {
        function UniqueInCollectionByPathValidationDirective() {
        }
        UniqueInCollectionByPathValidationDirective.prototype.validate = function (control) {
            var _this = this;
            var match = lodashEs.find(this.collection, function (element) { return lodashEs.isEqualWith(lodashEs.get(element, _this.path), control.value, _this.comparator); });
            return !!match && !!control.value
                ? { uniqueByPath: { key: this.path, value: lodashEs.get(match, this.path) } }
                : null;
        };
        return UniqueInCollectionByPathValidationDirective;
    }());
    UniqueInCollectionByPathValidationDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[uniqueByPath]',
                    providers: [
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: UniqueInCollectionByPathValidationDirective,
                            multi: true
                        }
                    ]
                },] }
    ];
    UniqueInCollectionByPathValidationDirective.propDecorators = {
        collection: [{ type: i0.Input }],
        path: [{ type: i0.Input }],
        comparator: [{ type: i0.Input }]
    };

    /**
     * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
     * @exports PhoneValidationDirective Allows to validate international phone numbers.
     * @exports NewsletterDirective Allows to subscribe to the newsletter.
     * @exports DefaultValidationDirective Allows to validate some predefined patterns.
     * @exports MessageDirective A directive that allows to define messages.
     * @exports MessagesComponent Allows to display error messages.
     * @exports RangeComponent A component that allows to display a styled range slider.
     */
    var FormsModule = /** @class */ (function () {
        function FormsModule() {
        }
        return FormsModule;
    }());
    FormsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CommonModule, forms.FormsModule, forms.ReactiveFormsModule, popover.PopoverModule],
                    exports: [
                        PhoneValidationDirective,
                        DefaultValidationDirective,
                        MinValidationDirective,
                        MaxValidationDirective,
                        forms.FormsModule,
                        FormGroupComponent,
                        MessageDirective,
                        MessagesComponent,
                        InputGroupListComponent,
                        InputGroupListContainerDirective,
                        JsonValidationPrettifierDirective,
                        TextAreaRowHeightDirective,
                        RequiredInputPlaceholderDirective,
                        IpRangeInputListComponent,
                        FilterInputComponent,
                        EmailsValidatorDirective,
                        RangeDirective,
                        RangeComponent,
                        UniqueInCollectionByPathValidationDirective
                    ],
                    declarations: [
                        PhoneValidationDirective,
                        DefaultValidationDirective,
                        MinValidationDirective,
                        MaxValidationDirective,
                        FormGroupComponent,
                        MessageDirective,
                        MessagesComponent,
                        InputGroupListComponent,
                        InputGroupListContainerDirective,
                        JsonValidationPrettifierDirective,
                        TextAreaRowHeightDirective,
                        RequiredInputPlaceholderDirective,
                        IpRangeInputListComponent,
                        FilterInputComponent,
                        EmailsValidatorDirective,
                        RangeDirective,
                        RangeComponent,
                        UniqueInCollectionByPathValidationDirective
                    ]
                },] }
    ];

    /**
     * The angular module definition for a select.
     * @exports SelectComponent
     */
    var SelectModule = /** @class */ (function () {
        function SelectModule() {
        }
        return SelectModule;
    }());
    SelectModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        dropdown.BsDropdownModule.forRoot(),
                        CommonModule,
                        ListGroupModule,
                        FormsModule
                    ],
                    exports: [
                        SelectComponent,
                        TypeaheadComponent
                    ],
                    declarations: [
                        SelectComponent,
                        TypeaheadComponent
                    ]
                },] }
    ];

    var _a, _b;
    // TODO remove  when c8y-icon will works
    exports.SendStatus = void 0;
    (function (SendStatus) {
        SendStatus["AVAILABLE"] = "AVAILABLE";
        SendStatus["UNAVAILABLE"] = "UNAVAILABLE";
        SendStatus["UNKNOWN"] = "UNKNOWN";
        SendStatus["MAINTENANCE"] = "MAINTENANCE";
        SendStatus["NOT_MONITORED"] = "NOT_MONITORED";
    })(exports.SendStatus || (exports.SendStatus = {}));
    exports.PushStatus = void 0;
    (function (PushStatus) {
        PushStatus["CONNECTED"] = "CONNECTED";
        PushStatus["DISCONNECTED"] = "DISCONNECTED";
        PushStatus["UNKNOWN"] = "UNKNOWN";
        PushStatus["MAINTENANCE"] = "MAINTENANCE";
    })(exports.PushStatus || (exports.PushStatus = {}));
    exports.SendStatusLabels = void 0;
    (function (SendStatusLabels) {
        SendStatusLabels[SendStatusLabels["AVAILABLE"] = gettext('Send connection: online')] = "AVAILABLE";
        SendStatusLabels[SendStatusLabels["NOT_MONITORED"] = gettext('Send connection: not monitored')] = "NOT_MONITORED";
        SendStatusLabels[SendStatusLabels["UNAVAILABLE"] = gettext('Send connection: offline')] = "UNAVAILABLE";
        SendStatusLabels[SendStatusLabels["UNKNOWN"] = gettext('Send connection status unknown')] = "UNKNOWN";
        SendStatusLabels[SendStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
    })(exports.SendStatusLabels || (exports.SendStatusLabels = {}));
    exports.PushStatusLabels = void 0;
    (function (PushStatusLabels) {
        PushStatusLabels[PushStatusLabels["CONNECTED"] = gettext('Push connection: active')] = "CONNECTED";
        PushStatusLabels[PushStatusLabels["DISCONNECTED"] = gettext('Push connection: inactive')] = "DISCONNECTED";
        PushStatusLabels[PushStatusLabels["UNKNOWN"] = gettext('Push connection: inactive')] = "UNKNOWN";
        PushStatusLabels[PushStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
    })(exports.PushStatusLabels || (exports.PushStatusLabels = {}));
    var deviceAvailabilityIconMap = {
        sendData: (_a = {},
            _a[exports.SendStatus.AVAILABLE] = {
                icon: 'long-arrow-right',
                class: 'statusOk'
            },
            _a[exports.SendStatus.UNAVAILABLE] = {
                icon: 'long-arrow-right',
                class: 'statusNok'
            },
            _a[exports.SendStatus.UNKNOWN] = {
                icon: 'long-arrow-right',
                class: 'statusUnknown'
            },
            _a[exports.SendStatus.NOT_MONITORED] = {
                icon: 'long-arrow-right',
                class: 'statusUnknown'
            },
            _a),
        push: (_b = {},
            _b[exports.PushStatus.CONNECTED] = {
                icon: 'long-arrow-left',
                class: 'statusOk'
            },
            _b[exports.PushStatus.DISCONNECTED] = {
                icon: 'long-arrow-left',
                class: 'statusUnknown'
            },
            _b[exports.PushStatus.UNKNOWN] = {
                icon: 'long-arrow-left',
                class: 'statusUnknown'
            },
            _b[exports.PushStatus.MAINTENANCE] = {
                icon: 'wrench',
                class: 'statusAlert'
            },
            _b),
        device: {
            MAINTENANCE: {
                icon: 'wrench',
                class: 'statusAlert'
            }
        }
    };
    var ɵ0$4 = function (lastMessage, translateService) {
        var date = common.formatDate(new Date(lastMessage), 'medium', translateService.currentLang || TranslateService.defaultLang());
        return translateService.instant(gettext('Device last request:\n{{date}}'), { date: date });
    };
    var tooltips = {
        sendStatusConnected: ɵ0$4,
        sendStatusDisconnected: gettext('Connection not monitored'),
        pushStatusConnected: gettext('Connection to device established'),
        pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
        maintenance: gettext('Device is under maintenance')
    };

    var DeviceStatusComponent = /** @class */ (function () {
        function DeviceStatusComponent(translateService) {
            this.translateService = translateService;
        }
        Object.defineProperty(DeviceStatusComponent.prototype, "node", {
            set: function (value) {
                this._mo = value.mo || value;
            },
            enumerable: false,
            configurable: true
        });
        DeviceStatusComponent.prototype.get = function () {
            return this._mo;
        };
        DeviceStatusComponent.prototype.ngOnChanges = function () {
            this.setStatusProperites();
        };
        DeviceStatusComponent.prototype.ngAfterContentInit = function () {
            this.setStatusProperites();
        };
        DeviceStatusComponent.prototype.setStatusProperites = function () {
            this.requiredAvailability = lodashEs.get(this._mo, 'c8y_RequiredAvailability');
            this.availabilityStatus = lodashEs.get(this._mo, 'c8y_Availability.status');
            this.pushStatus = lodashEs.get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
            this.sendStatus =
                this.availabilityStatus || (this.requiredAvailability ? 'UNKNOWN' : 'NOT_MONITORED');
        };
        DeviceStatusComponent.prototype.status = function () {
            var statuses;
            if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
                statuses = this.getMaintenanceStatus();
            }
            else {
                statuses = this.getSendPushStatus();
            }
            return statuses;
        };
        DeviceStatusComponent.prototype.getMaintenanceStatus = function () {
            return {
                sendStatus: false,
                pushStatus: false,
                maintenanceStatus: {
                    icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                    class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                    tooltip: tooltips.maintenance
                }
            };
        };
        DeviceStatusComponent.prototype.getSendPushStatus = function () {
            return {
                sendStatus: {
                    icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                    class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                    status: this.sendStatus,
                    label: exports.SendStatusLabels[this.sendStatus],
                    tooltip: this.getSendStatusTooltip(this._mo)
                },
                pushStatus: {
                    icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                    class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                    status: this.pushStatus,
                    label: exports.PushStatusLabels[this.pushStatus],
                    tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
                },
                maintenanceStatus: false
            };
        };
        DeviceStatusComponent.prototype.getSendStatusTooltip = function (device) {
            var availability = device && device.c8y_Availability;
            var lastMessage = availability && availability.lastMessage;
            if (lastMessage) {
                return tooltips.sendStatusConnected(lastMessage, this.translateService);
            }
            return tooltips.sendStatusDisconnected;
        };
        DeviceStatusComponent.prototype.getPushStatusTooltip = function (isActive) {
            return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
        };
        return DeviceStatusComponent;
    }());
    DeviceStatusComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'device-status',
                    template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    title=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
                },] }
    ];
    DeviceStatusComponent.ctorParameters = function () { return [
        { type: i2.TranslateService }
    ]; };
    DeviceStatusComponent.propDecorators = {
        node: [{ type: i0.Input, args: ['mo',] }]
    };

    /**
     * The angular module definition for a device-status.
     * @exports DeviceStatusComponent
     */
    var DeviceStatusModule = /** @class */ (function () {
        function DeviceStatusModule() {
        }
        return DeviceStatusModule;
    }());
    DeviceStatusModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        CommonModule,
                        tooltip.TooltipModule
                    ],
                    exports: [
                        DeviceStatusComponent
                    ],
                    declarations: [
                        DeviceStatusComponent
                    ]
                },] }
    ];

    /**
     * The angular module definition for the search.
     * @exports SearchComponent
     * @exports SearchOutletComponent
     * @exports HighlightComponent A component to highlight search results.
     */
    var SearchModule = /** @class */ (function () {
        function SearchModule() {
        }
        return SearchModule;
    }());
    SearchModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        SearchOutletComponent,
                        SearchComponent,
                        HighlightComponent,
                        SearchResultEmptyComponent,
                        SearchInputComponent
                    ],
                    imports: [
                        forms.FormsModule,
                        dropdown.BsDropdownModule,
                        CommonModule,
                        SelectModule,
                        ListGroupModule,
                        DeviceStatusModule,
                        i1.RouterModule.forChild([])
                    ],
                    exports: [
                        SearchOutletComponent,
                        SearchComponent,
                        HighlightComponent,
                        SearchResultEmptyComponent,
                        SearchInputComponent
                    ],
                    entryComponents: [SearchInputComponent]
                },] }
    ];

    var UserMenuService = /** @class */ (function (_super) {
        __extends(UserMenuService, _super);
        function UserMenuService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.state$ = new rxjs.BehaviorSubject({
                userMenuItems: new Set()
            });
            return _this;
        }
        Object.defineProperty(UserMenuService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a new item to the search in the header.
         * @param item The item to add.
         */
        UserMenuService.prototype.add = function (item) {
            this.state.userMenuItems.add(item);
            this.emitNewState();
        };
        /**
         * Removes an search from the header.
         * @param item The item to remove.
         */
        UserMenuService.prototype.remove = function (item) {
            this.state.userMenuItems.delete(item);
            this.emitNewState();
        };
        return UserMenuService;
    }(StateService));
    UserMenuService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function UserMenuService_Factory() { return new UserMenuService(); }, token: UserMenuService, providedIn: "root" });
    UserMenuService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var UserMenuItemComponent = /** @class */ (function () {
        function UserMenuItemComponent(userService) {
            this.userService = userService;
            this.priority = 0;
            this.click = new i0.EventEmitter();
        }
        UserMenuItemComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () { return _this.userService.add(_this); });
        };
        UserMenuItemComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.userService.remove(this);
        };
        UserMenuItemComponent.prototype.onClick = function () {
            this.click.emit(this);
        };
        return UserMenuItemComponent;
    }());
    UserMenuItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-user-menu-item',
                    template: "<ng-template #template>\n  <li (click)=\"onClick()\">\n    <a class=\"interact\" [attr.href]=\"link\" [attr.target]=\"target\">\n      <i [c8yIcon]=\"icon\"></i>\n      {{ label | translate }}\n      <ng-content></ng-content>\n    </a>\n  </li>\n</ng-template>\n"
                },] }
    ];
    UserMenuItemComponent.ctorParameters = function () { return [
        { type: UserMenuService }
    ]; };
    UserMenuItemComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        link: [{ type: i0.Input }],
        target: [{ type: i0.Input }],
        priority: [{ type: i0.Input }],
        template: [{ type: i0.ViewChild, args: ['template', { static: false },] }],
        click: [{ type: i0.Output }]
    };

    /**
     * Service to manage the login.
     */
    var LoginService = /** @class */ (function () {
        function LoginService(injector, client, basicAuth, cookieAuth, ui, user, tenant, realtime, alert, api, tenantUiService, tenantLoginOptionsService, translateService, location) {
            this.injector = injector;
            this.client = client;
            this.basicAuth = basicAuth;
            this.cookieAuth = cookieAuth;
            this.ui = ui;
            this.user = user;
            this.tenant = tenant;
            this.realtime = realtime;
            this.alert = alert;
            this.api = api;
            this.tenantUiService = tenantUiService;
            this.tenantLoginOptionsService = tenantLoginOptionsService;
            this.translateService = translateService;
            this.location = location;
            this.rememberMe = false;
            this.TOKEN_KEY = '_tcy8';
            this.TFATOKEN_KEY = 'TFAToken';
            this.isFirstLogin = true;
            this.GREEN_MIN_LENGTH_DEFAULT = 8;
            // tslint:disable:max-line-length
            this.ERROR_MESSAGES = {
                minlength: gettext('Password must have at least 8 characters and no more than 32.'),
                password_missmatch: gettext('Password confirmation does not match.'),
                maxlength: gettext('Password must have at least 8 characters and no more than 32.'),
                password_strength: gettext('Your password is not strong enough. Please include numbers, lower and upper case characters'),
                remote_error: gettext('Server error occurred.'),
                email: gettext('Invalid email address.'),
                password_change: gettext('Your password is expired. Please set a new password.'),
                password_reset_token_expired: gettext('Password reset link expired. Please enter your email address to receive a new one.'),
                tfa_pin_invalid: gettext('The code you entered is invalid. Please try again.'),
                pattern_phonenumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
                pattern_newPassword: this.translateService.instant(gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: {{ symbols }}'), { symbols: '`~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/' }),
                international_number_required: gettext('International phone number required, in the format +49 9 876 543 210.'),
                phone_number_error: gettext('Could not update phone number.'),
                pinAlreadySent: gettext('The verification code was already sent. For a new verification code, please click on the link above.'),
                passwordConfirm: gettext('Password confirmation does not match.'),
                tfaExpired: gettext('Two-factor authentication token expired.')
            };
            // tslint:enable:max-line-length
            this.SUCCESS_MESSAGES = {
                password_changed: gettext('Password changed. You can now log in using new password.'),
                password_reset_requested: gettext('Password reset request has been sent. Please check your email.'),
                resend_sms: gettext('Verification code SMS resent.'),
                send_sms: gettext('Verification code SMS sent.')
            };
            this.passwordStrengthSetting = {
                enforcePasswordStrength: false,
                greenMinLength: this.GREEN_MIN_LENGTH_DEFAULT,
                passwordStrengthValidity: false
            };
            this.localhostRegExp = new RegExp('localhost');
            this.localhostIpRegExp = new RegExp('127.0.0.1');
            this.showTenantRegExp = new RegExp('showTenant');
            this.autoLogout();
            this.initLoginOptions();
        }
        /**
         * Returns the current tenant.
         * @return The tenant name.
         */
        LoginService.prototype.getTenant = function () {
            return this.client.tenant;
        };
        LoginService.prototype.initLoginOptions = function () {
            var loginOptions = this.ui.state.loginOptions || [];
            this.loginMode = this.tenantUiService.getPreferredLoginOption(loginOptions);
            this.oauthOptions =
                this.tenantUiService.getOauth2Option(loginOptions) || {};
        };
        LoginService.prototype.redirectToOauth = function () {
            var initRequest = this.oauthOptions.initRequest;
            var fullPath = (this.location ? this.location._platformLocation : window).location
                .href;
            var redirectUrl = encodeURIComponent(fullPath);
            var originUriParam = (initRequest.includes('?') ? '&' : '?') + "originUri=" + redirectUrl;
            window.location.href = "" + initRequest + originUriParam;
        };
        LoginService.prototype.autoLogout = function () {
            var _this = this;
            var errorPattern = /invalid\scredentials.*pin.*generate/i;
            var isTfaExpired = function (data) { return data && typeof data.message === 'string' && errorPattern.test(data.message); };
            this.ui.currentUser
                .pipe(operators.switchMap(function (u) { return u ? _this.api.hookResponse(function (_a) {
                var response = _a.response;
                return response.status === 401;
            }) : rxjs.EMPTY; }))
                .subscribe(function (apiCall) { return __awaiter(_this, void 0, void 0, function () {
                var response, willLogout, data;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            response = apiCall.response;
                            willLogout = false;
                            if (!isTfaExpired(response.data)) return [3 /*break*/, 1];
                            willLogout = true;
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(typeof response.json === 'function')) return [3 /*break*/, 3];
                            return [4 /*yield*/, response.clone().json()];
                        case 2:
                            data = _a.sent();
                            if (isTfaExpired(data)) {
                                willLogout = true;
                            }
                            _a.label = 3;
                        case 3:
                            if (willLogout) {
                                this.logout(false);
                                setTimeout(function () { return _this.alert.danger(_this.ERROR_MESSAGES.tfaExpired); }, 500);
                            }
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Gets the minimal number of characters that a password should have to be considered a “green” strong one.
         * @return The min length for password or default value.
         */
        LoginService.prototype.getGreenMinLength = function () {
            return __awaiter(this, void 0, void 0, function () {
                var greenMinLength;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getBasicAuthLoginOption()];
                        case 1:
                            greenMinLength = ((_a.sent()) || { greenMinLength: null }).greenMinLength;
                            this.passwordStrengthSetting.greenMinLength = greenMinLength || this.GREEN_MIN_LENGTH_DEFAULT;
                            return [2 /*return*/, this.passwordStrengthSetting.greenMinLength];
                    }
                });
            });
        };
        /**
         * Checks if password strength is enforced for system
         * by retrieving value of `enforceStrength` property from loginOptions response
         * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
         * If false, it takes value from memory,
         * if true, it refresh the app state value and then retrives data.
         * @return boolean value, true if enforced, false otherwise.
         */
        LoginService.prototype.getEnforcePasswordStrength = function (refresh) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getBasicAuthLoginOption(refresh).then(function (loginOption) {
                            var enforcePasswordStrength = lodashEs.get(loginOption, 'enforceStrength');
                            if (lodashEs.isString(enforcePasswordStrength)) {
                                _this.passwordStrengthSetting.enforcePasswordStrength =
                                    enforcePasswordStrength === 'true' ? true : false;
                            }
                            else {
                                _this.passwordStrengthSetting.enforcePasswordStrength = !!enforcePasswordStrength;
                            }
                            return _this.passwordStrengthSetting.enforcePasswordStrength;
                        })];
                });
            });
        };
        /**
         * Checks if password strength is enforced for particular tenant
         * by retrieving value of `strengthValidity` property from loginOptions response
         * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
         * If false, it takes value from memory,
         * if true, it refresh the app state value and then retrives data.
         * @return boolean value, true if enforced, false otherwise.
         */
        LoginService.prototype.getPasswordStrengthValidity = function (refresh) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getBasicAuthLoginOption(refresh).then(function (loginOption) {
                            var strengthValidity = lodashEs.get(loginOption, 'strengthValidity');
                            if (lodashEs.isString(strengthValidity)) {
                                _this.passwordStrengthSetting.passwordStrengthValidity =
                                    strengthValidity === 'true' ? true : false;
                            }
                            else {
                                _this.passwordStrengthSetting.passwordStrengthValidity = !!strengthValidity;
                            }
                            return _this.passwordStrengthSetting.passwordStrengthValidity;
                        })];
                });
            });
        };
        /**
         * Function determines if enforced strength checks should be enabled for current tenant
         * based on properties retrieved from loginOptions
         * @param options object containing specific options:
         *    - {refresh: true} - refreshes values of app state and returns fresh values as result of call
         * @return boolean value, true if strength is enforced for tenant, false otherwise.
         */
        LoginService.prototype.getPasswordStrengthEnforced = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var refresh;
                return __generator(this, function (_a) {
                    refresh = options && options.refresh;
                    return [2 /*return*/, Promise.all([
                            this.getEnforcePasswordStrength(refresh),
                            this.getPasswordStrengthValidity(refresh)
                        ]).then(function (values) {
                            var _a = __read(values, 2), enforcePasswordStrength = _a[0], passwordStrengthValidity = _a[1];
                            return enforcePasswordStrength || passwordStrengthValidity;
                        })];
                });
            });
        };
        /**
         * Clears all backend errors.
         */
        LoginService.prototype.cleanMessages = function () {
            this.alert.clearAll();
        };
        /**
         * Adds a new success message
         * @param successKey The key of the success message as used in SUCCESS_MESSAGES
         */
        LoginService.prototype.addSuccessMessage = function (successKey) {
            var successMessage = this.SUCCESS_MESSAGES[successKey];
            if (successMessage) {
                this.alert.add({
                    text: successMessage,
                    type: 'success',
                    timeout: 0
                });
            }
        };
        /**
         * Returns the current strategy. Defaults to cookie, if a token
         * is found in local or session storage we switch to basic auth.
         * @returns The current auth strategy.
         */
        LoginService.prototype.getAuthStrategy = function () {
            var authStrategy = this.cookieAuth;
            var token = this.getStoredToken();
            var tfa = this.getStoredTfaToken();
            if (token) {
                authStrategy = this.basicAuth;
                this.setCredentials({ token: token, tfa: tfa }, this.basicAuth);
            }
            return authStrategy;
        };
        /**
         * Forces the use of basic auth as strategy with this credentials.
         * @param credentials The credentials to use.
         */
        LoginService.prototype.useBasicAuth = function (credentials) {
            this.setCredentials(credentials, this.basicAuth);
            return this.basicAuth;
        };
        /**
         * Tries to login a user with the given credentials.
         * If successful, the current tenant and user is set. If not an error
         * is thrown. It also verifies if the user is allowed to open the
         * current app.
         * @param auth The authentication strategy used.
         * @param credentials The credentials to try to login.
         */
        LoginService.prototype.login = function (auth, credentials) {
            if (auth === void 0) { auth = this.getAuthStrategy(); }
            return __awaiter(this, void 0, void 0, function () {
                var tenantRes, tenant, userRes, user, supportUserName, token;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.client.setAuth(auth);
                            return [4 /*yield*/, this.tenant.current()];
                        case 1:
                            tenantRes = _a.sent();
                            tenant = tenantRes.data;
                            if (credentials) {
                                credentials.tenant = tenant.name;
                            }
                            return [4 /*yield*/, this.shouldRedirectDomain(credentials)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.switchLoginMode(credentials)];
                        case 3:
                            if (_a.sent()) {
                                auth = this.cookieAuth;
                            }
                            return [4 /*yield*/, this.user.current()];
                        case 4:
                            userRes = _a.sent();
                            user = userRes.data;
                            return [4 /*yield*/, this.verifyAppAccess()];
                        case 5:
                            _a.sent();
                            supportUserName = this.getSupportUserName(credentials);
                            token = this.setCredentials({
                                tenant: tenant.name,
                                user: (supportUserName ? supportUserName + "$" : '') + user.userName
                            }, auth);
                            if (token) {
                                this.storeBasicAuthToken(token);
                            }
                            return [4 /*yield*/, this.authFulfilled(tenant, user, supportUserName)];
                        case 6:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Saves tenant, user and support user info to the app state.
         * @param tenant The current tenant object.
         * @param user The current user object.
         * @param supportUserName The current support user name.
         */
        LoginService.prototype.authFulfilled = function (tenant, user, supportUserName) {
            return __awaiter(this, void 0, void 0, function () {
                var data, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!tenant) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.tenant.current()];
                        case 1:
                            data = (_a.sent()).data;
                            tenant = data;
                            this.client.tenant = tenant.name;
                            _a.label = 2;
                        case 2:
                            if (!!user) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.user.current()];
                        case 3:
                            data = (_a.sent()).data;
                            user = data;
                            _a.label = 4;
                        case 4:
                            if (!supportUserName) {
                                supportUserName = null;
                            }
                            this.ui.setUser({ user: user, supportUserName: supportUserName });
                            this.ui.currentTenant.next(tenant);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Switch the login mode to CookieAuth if the
         * user has configured to use it in loginOptions.
         * @param credentials The credentials for that login
         */
        LoginService.prototype.switchLoginMode = function (credentials) {
            return __awaiter(this, void 0, void 0, function () {
                var isPasswordGrantLogin, res, data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.isPasswordGrantLogin(credentials)];
                        case 1:
                            isPasswordGrantLogin = _a.sent();
                            if (!(isPasswordGrantLogin && credentials)) return [3 /*break*/, 7];
                            return [4 /*yield*/, this.generateOauthToken(credentials)];
                        case 2:
                            res = _a.sent();
                            if (!!res.ok) return [3 /*break*/, 6];
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, res.json()];
                        case 4:
                            data = _a.sent();
                            throw { res: res, data: data };
                        case 5:
                            ex_1 = _a.sent();
                            throw ex_1;
                        case 6:
                            this.client.setAuth(this.cookieAuth);
                            this.cleanLocalStorage();
                            this.basicAuth.logout();
                            _a.label = 7;
                        case 7: return [2 /*return*/, isPasswordGrantLogin];
                    }
                });
            });
        };
        LoginService.prototype.generateOauthToken = function (credentials) {
            return __awaiter(this, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.isPasswordGrantLogin(credentials)];
                        case 1:
                            if (!((_a.sent()) && credentials)) return [3 /*break*/, 3];
                            params = new URLSearchParams({
                                grant_type: 'PASSWORD',
                                username: credentials.user,
                                password: credentials.password,
                                tfa_code: credentials.tfa
                            });
                            return [4 /*yield*/, new client.FetchClient().fetch(this.getUrlForOauth(credentials), {
                                    method: 'POST',
                                    body: params.toString(),
                                    headers: {
                                        'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
                                    }
                                })];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        LoginService.prototype.isPasswordGrantLogin = function (credentials) {
            return __awaiter(this, void 0, void 0, function () {
                var loginMode, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            loginMode = this.loginMode;
                            if (!this.isSupportUser(credentials)) return [3 /*break*/, 3];
                            if (!!this.managementLoginMode) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.getManagementLoginMode()];
                        case 1:
                            _a.managementLoginMode = _b.sent();
                            _b.label = 2;
                        case 2:
                            loginMode = this.managementLoginMode;
                            _b.label = 3;
                        case 3: return [2 /*return*/, this.tenantUiService.isOauthInternal(loginMode)];
                    }
                });
            });
        };
        /**
         * Verifies if the provided credentials use a support user to log in or not.
         * @param credentials Credentials to check.
         * @returns {boolean} Returns true if user is a support user.
         */
        LoginService.prototype.isSupportUser = function (credentials) {
            return credentials && credentials.user.includes('$');
        };
        /**
         * Verifies if the tenant input field should be shown
         * or not.
         * @returns If true, show the tenant input.
         */
        LoginService.prototype.showTenant = function () {
            return !this.ui.state.loginOptions || this.isLocal() || this.isShowTenant();
        };
        /**
         * Verifies if the tenant setup should be shown
         * or not.
         * @returns If true, show the tenant input.
         */
        LoginService.prototype.showTenantSetup = function () {
            return !this.ui.state.loginOptions && !this.isLocal();
        };
        /**
         * Logs the user out
         * @param reload If set to false, the page will not reload
         */
        LoginService.prototype.logout = function (reload) {
            if (reload === void 0) { reload = true; }
            return __awaiter(this, void 0, void 0, function () {
                var resData, _a, basicRes, cookieRes, ex_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            resData = null;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, 5, 6]);
                            return [4 /*yield*/, this.reset()];
                        case 2:
                            _a = __read.apply(void 0, [_b.sent(), 2]), basicRes = _a[0], cookieRes = _a[1];
                            return [4 /*yield*/, cookieRes.json()];
                        case 3:
                            resData = _b.sent();
                            return [3 /*break*/, 6];
                        case 4:
                            ex_2 = _b.sent();
                            this.alert.removeLastDanger();
                            return [3 /*break*/, 6];
                        case 5:
                            if (resData && resData.url) {
                                this.redirect(resData.url);
                            }
                            else if (reload) {
                                this.location.replaceState({}, '', '', '');
                                window.location.reload();
                            }
                            return [7 /*endfinally*/];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Resets the stored auth-data
         */
        LoginService.prototype.reset = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.cleanLocalStorage();
                    this.cleanSessionStorage();
                    this.realtime.disconnect();
                    this.ui.currentUser.next(null);
                    return [2 /*return*/, Promise.all([this.basicAuth.logout(), this.cookieAuth.logout()])];
                });
            });
        };
        /**
         * Saves the TFA token to local or session storage.
         * @param tfaToken The tfa token to save.
         * @param storage The storage to use (local or session).
         */
        LoginService.prototype.saveTFAToken = function (tfaToken, storage) {
            storage.setItem(this.TFATOKEN_KEY, tfaToken);
        };
        /**
         * Request the manifest -> on 401 user has no access to that application
         * and we throw the error up to the login form.
         */
        LoginService.prototype.verifyAppAccess = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.ui.loadManifest()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_3 = _a.sent();
                            if (!(ex_3.res && ex_3.res.status === 404 && this.isLocal())) {
                                throw ex_3;
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        LoginService.prototype.redirectToDomain = function (domain) {
            var originUrl = new URL(window.location.href);
            var redirectUrl = originUrl.href.replace(originUrl.hostname, domain);
            window.location.href = redirectUrl;
        };
        /**
         * Sets the tenant to the client and updates the credentials on the
         * auth strategy.
         * @param credentials The name of the tenant.
         * @param authStrategy The authentication strategy used.
         * @return Returns the token if basic auth, otherwise undefined.
         */
        LoginService.prototype.setCredentials = function (credentials, authStrategy) {
            if (credentials.tenant) {
                this.client.tenant = credentials.tenant;
            }
            // Check if a token is already set (case for support user login)
            // if yes -> we just need to update the user, and reuse the token
            // of the support user.
            // Therefore we need to pass user and tenant, to get
            // just the stored token and nothing else (see BasicAuth.ts:31).
            var token = this.basicAuth.updateCredentials({
                tenant: credentials.tenant,
                user: credentials.user
            });
            var newCredentials = Object.assign({ token: token }, credentials);
            return authStrategy.updateCredentials(newCredentials);
        };
        /**
         * Verifies if the current user is a developer or not.
         * Running on localhost means development mode.
         */
        LoginService.prototype.isLocal = function () {
            var hostname = window.location.hostname;
            return this.localhostIpRegExp.test(hostname) || this.localhostRegExp.test(hostname);
        };
        /**
         * Save the token to local or session storage.
         * @param token The token to save.
         * @param storage The storage to use (local or session).
         */
        LoginService.prototype.saveToken = function (token, storage) {
            storage.setItem(this.TOKEN_KEY, token);
        };
        LoginService.prototype.storeBasicAuthToken = function (token) {
            this.saveToken(token, sessionStorage);
            if (this.rememberMe) {
                this.saveToken(token, localStorage);
            }
        };
        LoginService.prototype.cleanLocalStorage = function () {
            localStorage.removeItem(this.TOKEN_KEY);
            localStorage.removeItem(this.TFATOKEN_KEY);
        };
        LoginService.prototype.cleanSessionStorage = function () {
            sessionStorage.removeItem(this.TOKEN_KEY);
            sessionStorage.removeItem(this.TFATOKEN_KEY);
        };
        LoginService.prototype.isShowTenant = function () {
            return this.showTenantRegExp.test(window.location.href);
        };
        LoginService.prototype.redirect = function (url) {
            window.location.href = url;
        };
        LoginService.prototype.getBasicAuthLoginOption = function (refresh) {
            return __awaiter(this, void 0, void 0, function () {
                var loginOptions, basicAuthLoginOption;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!refresh) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.ui.refreshLoginOptions()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            loginOptions = this.ui.state.loginOptions || [];
                            basicAuthLoginOption = loginOptions.find(function (_a) {
                                var type = _a.type;
                                return type === 'BASIC';
                            });
                            return [2 /*return*/, Promise.resolve(basicAuthLoginOption)];
                    }
                });
            });
        };
        /**
         * Gets support user name from credentials.
         * @param credentials Credentials object (defaults to the stored one).
         * @returns Support user name.
         */
        LoginService.prototype.getSupportUserName = function (credentials) {
            if (credentials === void 0) { credentials = this.getStoredCredentials(); }
            if (!credentials) {
                return null;
            }
            var supportUserName = credentials.user.match(/^(.+\/)?((.+)\$)?(.+)?$/)[3];
            return supportUserName;
        };
        /**
         * Gets credentials object from the stored token.
         * @returns Credentials object.
         */
        LoginService.prototype.getStoredCredentials = function () {
            var token = this.getStoredToken();
            if (!token) {
                return null;
            }
            return this.decodeToken(token);
        };
        /**
         * Gets stored token from local storage or session storage.
         * @returns Stored token.
         */
        LoginService.prototype.getStoredToken = function () {
            return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);
        };
        /**
         * Gets stored TFA token from local storage or session storage.
         * @returns Stored TFA token.
         */
        LoginService.prototype.getStoredTfaToken = function () {
            return localStorage.getItem(this.TFATOKEN_KEY) || sessionStorage.getItem(this.TFATOKEN_KEY);
        };
        /**
         * Decodes token to credentials object.
         * @param token Token to decode.
         * @returns Credentials object.
         */
        LoginService.prototype.decodeToken = function (token) {
            var decoded = decodeURIComponent(escape(window.atob(token)));
            var split = decoded.match(/(([^/]*)\/)?([^/:]+):(.+)/);
            return {
                tenant: split[2],
                user: split[3],
                password: split[4]
            };
        };
        LoginService.prototype.getUrlForOauth = function (credentials) {
            if (lodashEs.isEmpty(credentials.tenant) && this.loginMode.initRequest) {
                var urlParams = new URLSearchParams(this.loginMode.initRequest.split('?').pop());
                credentials.tenant = urlParams.get('tenant_id');
            }
            return !lodashEs.isEmpty(credentials.tenant)
                ? "tenant/oauth?tenant_id=" + credentials.tenant
                : "tenant/oauth";
        };
        LoginService.prototype.getManagementLoginMode = function () {
            return __awaiter(this, void 0, void 0, function () {
                var managementLoginOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.tenantLoginOptionsService.listForManagement()];
                        case 1:
                            managementLoginOptions = (_a.sent()).data;
                            return [2 /*return*/, this.tenantUiService.getPreferredLoginOption(managementLoginOptions)];
                    }
                });
            });
        };
        LoginService.prototype.shouldRedirectDomain = function (credentials) {
            return __awaiter(this, void 0, void 0, function () {
                var isPasswordGrantLogin, title, body, modalService;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.isPasswordGrantLogin(credentials)];
                        case 1:
                            isPasswordGrantLogin = _a.sent();
                            if (!(this.isSupportUser(credentials) &&
                                isPasswordGrantLogin &&
                                this.managementLoginMode.loginRedirectDomain !== window.location.hostname &&
                                !this.isLocal())) return [3 /*break*/, 3];
                            title = gettext('Redirect required');
                            body = gettext('Redirect to correct domain is required to log in as support user.');
                            modalService = this.injector.get(ModalService);
                            return [4 /*yield*/, modalService.acknowledge(title, body, exports.Status.INFO, gettext('Redirect'))];
                        case 2:
                            _a.sent();
                            this.redirectToDomain(this.managementLoginMode.loginRedirectDomain);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return LoginService;
    }());
    LoginService.decorators = [
        { type: i0.Injectable }
    ];
    LoginService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: client.FetchClient },
        { type: client.BasicAuth },
        { type: client.CookieAuth },
        { type: AppStateService },
        { type: client.UserService },
        { type: client.TenantService },
        { type: client.Realtime },
        { type: AlertService },
        { type: i4.ApiService },
        { type: TenantUiService },
        { type: client.TenantLoginOptionsService },
        { type: i2.TranslateService },
        { type: common.LocationStrategy, decorators: [{ type: i0.Optional }] }
    ]; };

    var PasswordConfirmModalComponent = /** @class */ (function () {
        function PasswordConfirmModalComponent(user, ui, client, alert, loginService) {
            this.user = user;
            this.ui = ui;
            this.client = client;
            this.alert = alert;
            this.loginService = loginService;
            this.passwordConfirmedEmitter = new i0.EventEmitter();
            this.loading = false;
        }
        PasswordConfirmModalComponent.prototype.passwordConfirm = function () {
            return __awaiter(this, void 0, void 0, function () {
                var supportUserName, userId, credentials, strategy, newClient, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.password) return [3 /*break*/, 5];
                            supportUserName = this.ui.currentSupportUserName.value;
                            userId = this.ui.currentUser.value.id;
                            credentials = {
                                password: this.password,
                                user: "" + (supportUserName ? supportUserName + "$" : '') + userId,
                                tenant: this.client.tenant
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            this.loading = true;
                            strategy = lodashEs.clone(this.loginService.useBasicAuth({}));
                            delete credentials.tfa;
                            strategy.updateCredentials(credentials);
                            newClient = this.createNewClient(strategy, this.client.baseUrl);
                            return [4 /*yield*/, newClient.user.current()];
                        case 2:
                            _a.sent();
                            this.emitSuccessAndClose();
                            return [3 /*break*/, 5];
                        case 3:
                            e_1 = _a.sent();
                            if (e_1.res && e_1.res.status === 401 && e_1.data && /pin|totp/i.test(e_1.data.message)) {
                                this.emitSuccessAndClose();
                            }
                            else {
                                this.alert.danger(gettext("Provided password doesn't match your current one."));
                            }
                            return [3 /*break*/, 5];
                        case 4:
                            this.loading = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        PasswordConfirmModalComponent.prototype.cancel = function () {
            this.passwordConfirmedEmitter.emit(false);
            this.modal._dismiss();
        };
        PasswordConfirmModalComponent.prototype.createNewClient = function (strategy, baseUrl) {
            return new client.Client(strategy, baseUrl);
        };
        PasswordConfirmModalComponent.prototype.emitSuccessAndClose = function () {
            this.passwordConfirmedEmitter.emit(true);
            this.modal._dismiss();
        };
        return PasswordConfirmModalComponent;
    }());
    PasswordConfirmModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-password-confirm-modal',
                    template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm your current password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <div class=\"d-block p-24 p-b-0\">\r\n      <c8y-form-group [hasWarning]=\"true\">\r\n        <label translate for=\"currentPassword\">Enter your password</label>\r\n        <input\r\n          id=\"currentPassword\"\r\n          [(ngModel)]=\"password\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          class=\"form-control\"\r\n          placeholder=\"{{ 'Enter your password' | translate }}\"\r\n          required\r\n        />\r\n        <c8y-messages>\r\n          <c8y-message translate>\r\n            Enter the password of the user that you are currently logged in with.\r\n          </c8y-message>\r\n        </c8y-messages>\r\n      </c8y-form-group>\r\n    </div>\r\n    <div class=\"modal-footer separator-top bg-white sticky-bottom\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Confirm' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
                },] }
    ];
    PasswordConfirmModalComponent.ctorParameters = function () { return [
        { type: client.UserService },
        { type: AppStateService },
        { type: client.FetchClient },
        { type: AlertService },
        { type: LoginService }
    ]; };
    PasswordConfirmModalComponent.propDecorators = {
        passwordConfirmedEmitter: [{ type: i0.Output }],
        modal: [{ type: i0.ViewChild, args: ['modal', { static: false },] }]
    };

    var CurrentPasswordModalComponent = /** @class */ (function () {
        function CurrentPasswordModalComponent(modal) {
            this.modal = modal;
            this.currentPasswordEmitter = new i0.EventEmitter();
        }
        CurrentPasswordModalComponent.prototype.passwordConfirm = function () {
            this.currentPasswordEmitter.emit(this.password);
            this.modal.hide();
        };
        CurrentPasswordModalComponent.prototype.cancel = function () {
            this.currentPasswordEmitter.emit(null);
            this.modal.hide();
        };
        return CurrentPasswordModalComponent;
    }());
    CurrentPasswordModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-current-password-modal',
                    template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm your current password' | translate\" #modal>\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\n    <div class=\"d-block p-24\">\n      <c8y-form-group [hasWarning]=\"true\">\n        <label translate for=\"currentPassword\">Enter your password</label>\n        <input\n          id=\"currentPassword\"\n          [(ngModel)]=\"password\"\n          type=\"password\"\n          name=\"password\"\n          class=\"form-control\"\n          required\n        />\n        <c8y-messages>\n          <c8y-message translate>\n            The password of the user that you are currently logged in with.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n    <div class=\"modal-footer separator-top bg-white sticky-bottom\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        translate\n      >\n        Cancel\n      </button>\n      <button\n        title=\"{{ 'Confirm' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [disabled]=\"!confirmForm.form.valid\"\n        translate\n      >\n        Confirm\n      </button>\n    </div>\n  </form>\n</c8y-modal>\n"
                },] }
    ];
    CurrentPasswordModalComponent.ctorParameters = function () { return [
        { type: i1$2.BsModalRef }
    ]; };
    CurrentPasswordModalComponent.propDecorators = {
        currentPasswordEmitter: [{ type: i0.Output }]
    };

    var PasswordService = /** @class */ (function () {
        function PasswordService(modalService) {
            this.modalService = modalService;
            this.DEFAULT_PASSWORD_MIN_LENGTH = 8;
            this.GREEN = {
                colorName: 'green',
                color: 'rgb(0, 128, 0)',
                description: gettext('strong'),
                passwordStrength: client.PasswordStrength.GREEN
            };
            this.YELLOW = {
                colorName: 'yellow',
                color: 'rgb(255, 204, 51)',
                description: gettext('medium'),
                passwordStrength: client.PasswordStrength.YELLOW
            };
            this.RED = {
                colorName: 'red',
                color: 'rgb(170, 0, 51)',
                description: gettext('weak'),
                passwordStrength: client.PasswordStrength.RED
            };
        }
        PasswordService.prototype.confirmPassword = function () {
            var modalInstance = this.modalService.show(PasswordConfirmModalComponent);
            var passwordConfirmedEmitter = modalInstance.content.passwordConfirmedEmitter;
            return passwordConfirmedEmitter.pipe(operators.take(1));
        };
        /**
         * Returns an observable with the password provided by user:
         * - `string` when user provided a value
         * - `null` when user cancelled the modal
         */
        PasswordService.prototype.currentPassword = function () {
            var modalInstance = this.modalService.show(CurrentPasswordModalComponent, { class: 'modal-sm' });
            var currentPasswordEmitter = modalInstance.content.currentPasswordEmitter;
            return currentPasswordEmitter.pipe(operators.take(1));
        };
        PasswordService.prototype.hasLowerCase = function (password) {
            return (password.search(/[a-z]/) !== -1);
        };
        PasswordService.prototype.hasUpperCase = function (password) {
            return (password.search(/[A-Z]/) !== -1);
        };
        PasswordService.prototype.hasNumbers = function (password) {
            return (password.search(/[0-9]/) !== -1);
        };
        PasswordService.prototype.hasSpecialChars = function (password) {
            return (password.search(/[^0-9a-zA-Z]+/) !== -1);
        };
        PasswordService.prototype.getStrengthColor = function (password) {
            var passwordStrength = lodashEs.filter([
                this.hasLowerCase(password),
                this.hasUpperCase(password),
                this.hasNumbers(password),
                this.hasSpecialChars(password)
            ]).length;
            if (passwordStrength > 3) {
                return this.GREEN;
            }
            else if (passwordStrength >= 3) {
                return this.YELLOW;
            }
            else {
                return this.RED;
            }
        };
        PasswordService.prototype.getDefaultPasswordMinLength = function () {
            return this.DEFAULT_PASSWORD_MIN_LENGTH;
        };
        return PasswordService;
    }());
    PasswordService.decorators = [
        { type: i0.Injectable }
    ];
    PasswordService.ctorParameters = function () { return [
        { type: i1$2.BsModalService }
    ]; };

    var UserEditModalComponent = /** @class */ (function () {
        function UserEditModalComponent(modal, user, ui, auth, client, alert, translate, userPreferences, modalService, c8yModalService, gainsightService, cookieBannerService, loginService, passwordService) {
            var _this = this;
            this.modal = modal;
            this.user = user;
            this.ui = ui;
            this.auth = auth;
            this.client = client;
            this.alert = alert;
            this.translate = translate;
            this.userPreferences = userPreferences;
            this.modalService = modalService;
            this.c8yModalService = c8yModalService;
            this.gainsightService = gainsightService;
            this.cookieBannerService = cookieBannerService;
            this.loginService = loginService;
            this.passwordService = passwordService;
            this.loading = false;
            this.showProductUsageSetting = false;
            this.lang = this.ui.state.lang;
            this.modalService.onHide.pipe(operators.take(1)).subscribe(function (reason) {
                if (reason !== null && _this.changedLang !== undefined) {
                    _this.translate.switchToLanguage(_this.lang);
                }
            });
        }
        UserEditModalComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.updateUserInAppState();
                            _a = this;
                            return [4 /*yield*/, this.gainsightService.canEditProductExperienceSettings()];
                        case 1:
                            _a.showProductUsageSetting = _c.sent();
                            if (!this.showProductUsageSetting) return [3 /*break*/, 3];
                            _b = this;
                            return [4 /*yield*/, this.gainsightService.isGainsightDisabledInUserPreferences()];
                        case 2:
                            _b.currentUsageTrackingState =
                                !(_c.sent()) &&
                                    this.cookieBannerService.isFunctionalCookieEnabled();
                            _c.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        UserEditModalComponent.prototype.onDismiss = function () {
            if (this.changedLang !== undefined) {
                this.translate.switchToLanguage(this.lang);
            }
            this.modal.hide();
        };
        UserEditModalComponent.prototype.onLanguage = function (lang) {
            this.changedLang = lang;
            this.translate.switchToLanguage(this.changedLang);
        };
        UserEditModalComponent.prototype.onProductExperience = function (option) {
            this.usageTrackingState = option;
        };
        UserEditModalComponent.prototype.updateAndClose = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var reloadRequired, passwordChanged, usesBasic, isExternalUser, currentPassword, _a, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.loading = true;
                            reloadRequired = false;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 16, 17, 18]);
                            passwordChanged = Boolean(user.password);
                            usesBasic = this.loginService.loginMode.type === client.TenantLoginOptionType.BASIC;
                            isExternalUser = user.customProperties.userOrigin === 'OAUTH2';
                            if (!(!isExternalUser && passwordChanged)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.passwordService.currentPassword().toPromise()];
                        case 2:
                            currentPassword = _b.sent();
                            if (!currentPassword) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.user.changeCurrentUserPassword(user.password, currentPassword)];
                        case 3:
                            _b.sent();
                            if (usesBasic) {
                                this.updateCredentials(user.password);
                            }
                            _b.label = 4;
                        case 4:
                            if (!(this.changedLang && this.changedLang !== this.lang)) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.persistLanguage(this.changedLang)];
                        case 5:
                            reloadRequired = _b.sent();
                            _b.label = 6;
                        case 6:
                            if (!(this.currentUsageTrackingState !== this.usageTrackingState)) return [3 /*break*/, 12];
                            return [4 /*yield*/, this.userPreferences.set(this.gainsightService.USER_PREFERENCES_KEY, this.usageTrackingState)];
                        case 7:
                            _b.sent();
                            this.gainsightService.setFunctionalCookie(this.usageTrackingState);
                            if (!this.usageTrackingState) return [3 /*break*/, 9];
                            return [4 /*yield*/, this.gainsightService.loadTag(this.client.tenant)];
                        case 8:
                            _a = _b.sent();
                            return [3 /*break*/, 11];
                        case 9: return [4 /*yield*/, this.gainsightTrackingAppReload()];
                        case 10:
                            _a = _b.sent();
                            _b.label = 11;
                        case 11:
                            _a;
                            _b.label = 12;
                        case 12:
                            if (!(user.customProperties.userOrigin !== 'OAUTH2')) return [3 /*break*/, 15];
                            return [4 /*yield*/, this.user.updateCurrent(lodashEs.omit(user, 'password'))];
                        case 13:
                            _b.sent();
                            return [4 /*yield*/, this.updateUserInAppState()];
                        case 14:
                            _b.sent();
                            _b.label = 15;
                        case 15:
                            this.modal.hide();
                            this.alert.success(gettext('User saved.'));
                            return [3 /*break*/, 18];
                        case 16:
                            e_1 = _b.sent();
                            if (e_1) {
                                this.alert.addServerFailure(e_1);
                            }
                            return [3 /*break*/, 18];
                        case 17:
                            this.loading = false;
                            if (reloadRequired) {
                                location.reload();
                            }
                            return [7 /*endfinally*/];
                        case 18: return [2 /*return*/];
                    }
                });
            });
        };
        UserEditModalComponent.prototype.persistLanguage = function (lang) {
            return __awaiter(this, void 0, void 0, function () {
                var shouldReload, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 5]);
                            return [4 /*yield*/, this.c8yModalService.confirm(gettext('Reload recommended'), gettext('To change the language in the entire application, we recommend you to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), exports.Status.WARNING, {
                                    ok: gettext('Reload now'),
                                    cancel: gettext('Reload later')
                                })];
                        case 1:
                            _a.sent();
                            this.translate.saveInLocalStorage(lang);
                            return [4 /*yield*/, this.userPreferences.set('language', lang)];
                        case 2:
                            _a.sent();
                            this.lang = lang;
                            shouldReload = true;
                            return [3 /*break*/, 5];
                        case 3:
                            ex_1 = _a.sent();
                            this.translate.saveInLocalStorage(lang);
                            return [4 /*yield*/, this.userPreferences.set('language', lang)];
                        case 4:
                            _a.sent();
                            this.lang = lang;
                            shouldReload = false;
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/, shouldReload];
                    }
                });
            });
        };
        UserEditModalComponent.prototype.gainsightTrackingAppReload = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.c8yModalService.confirm(gettext('Reload required'), gettext('To change the tracking option in the entire application, you need to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), exports.Status.WARNING, {
                                    ok: gettext('Reload now'),
                                    cancel: gettext('Reload later')
                                })];
                        case 1:
                            _a.sent();
                            location.reload();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        UserEditModalComponent.prototype.updateUserInAppState = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentUserResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.user.current()];
                        case 1:
                            currentUserResult = _a.sent();
                            this.ui.currentUser.next(currentUserResult.data);
                            return [2 /*return*/];
                    }
                });
            });
        };
        UserEditModalComponent.prototype.updateCredentials = function (password) {
            var newCredentials = {
                password: password,
                user: this.ui.currentUser.value.id,
                tenant: this.client.tenant
            };
            this.auth.updateCredentials(newCredentials);
        };
        return UserEditModalComponent;
    }());
    UserEditModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-user-edit-modal',
                    template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Edit user' | translate\" (onDismiss)=\"onDismiss()\">\n  <c8y-user-edit\n    [lang]=\"lang\"\n    [user]=\"ui.currentUser | async\"\n    [loading]=\"loading\"\n    [isUsageTrackingEnabled]=\"currentUsageTrackingState\"\n    [showProductUsageSetting]=\"showProductUsageSetting\"\n    (onLanguage)=\"onLanguage($event)\"\n    (onProductExperience)=\"onProductExperience($event)\"\n    (onUser)=\"updateAndClose($event)\"\n    (onCancel)=\"onDismiss()\"\n  >\n  </c8y-user-edit>\n</c8y-modal>\n"
                },] }
    ];
    UserEditModalComponent.ctorParameters = function () { return [
        { type: i1$2.BsModalRef },
        { type: client.UserService },
        { type: AppStateService },
        { type: client.BasicAuth },
        { type: client.FetchClient },
        { type: AlertService },
        { type: TranslateService },
        { type: UserPreferencesService },
        { type: i1$2.BsModalService },
        { type: ModalService },
        { type: GainsightService },
        { type: CookieBannerService },
        { type: LoginService },
        { type: PasswordService }
    ]; };

    var UserTotpSetupComponent = /** @class */ (function () {
        function UserTotpSetupComponent(user, modalService, modal, loginService) {
            this.user = user;
            this.modalService = modalService;
            this.modal = modal;
            this.loginService = loginService;
        }
        UserTotpSetupComponent.prototype.totpSetupVerified = function (token) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.user.activateTotp()];
                        case 1:
                            _a.sent();
                            this.modal.hide();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, this.modalService.acknowledge(gettext('Logout required'), gettext('You must log out in order to apply your changes'), exports.Status.WARNING, gettext('Log out'))];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.logout()];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        UserTotpSetupComponent.prototype.close = function () {
            this.modal.hide();
        };
        return UserTotpSetupComponent;
    }());
    UserTotpSetupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-user-totp-setup',
                    template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Set up two-factor authentication' | translate\">\n  <c8y-totp-setup></c8y-totp-setup>\n  <c8y-totp-challenge (onSuccess)=\"totpSetupVerified($event)\" (totpUnconfirmedEmitter)=\"close()\"></c8y-totp-challenge>\n</c8y-modal>\n"
                },] }
    ];
    UserTotpSetupComponent.ctorParameters = function () { return [
        { type: client.UserService },
        { type: ModalService },
        { type: i1$2.BsModalRef },
        { type: LoginService }
    ]; };

    var UserEditComponent = /** @class */ (function () {
        function UserEditComponent(state, translate, bsModalService, alert, userService, tenantLoginOptionsService, tenantService, userPreferencesService) {
            this.state = state;
            this.translate = translate;
            this.bsModalService = bsModalService;
            this.alert = alert;
            this.userService = userService;
            this.tenantLoginOptionsService = tenantLoginOptionsService;
            this.tenantService = tenantService;
            this.userPreferencesService = userPreferencesService;
            this.loading = false;
            this.showProductUsageSetting = false;
            this.isUsageTrackingEnabled = true;
            this.onUser = new i0.EventEmitter();
            this.onLanguage = new i0.EventEmitter();
            this.onProductExperience = new i0.EventEmitter();
            this.onCancel = new i0.EventEmitter();
            this.userHasActiveTotp = false;
            this.userCanSetupTotp = false;
            this.isPhoneRequired = false;
        }
        Object.defineProperty(UserEditComponent.prototype, "user", {
            get: function () {
                return this._user;
            },
            set: function (u) {
                if (u) {
                    this._user = lodashEs.clone(u);
                    this.userIsExternal = u.customProperties.userOrigin === 'OAUTH2';
                    this.isPhoneRequired = this.isPhoneRequired && u.twoFactorAuthenticationEnabled;
                }
            },
            enumerable: false,
            configurable: true
        });
        UserEditComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentTenant, _a, enabledOnSystemLevel, enabledOnTenantLevel;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.tenantService.current()];
                        case 1:
                            currentTenant = (_b.sent()).data;
                            return [4 /*yield*/, this.tenantService.getTfaSettings(currentTenant)];
                        case 2:
                            _a = _b.sent(), enabledOnSystemLevel = _a.enabledOnSystemLevel, enabledOnTenantLevel = _a.enabledOnTenantLevel;
                            this.isTfaEnabled = enabledOnSystemLevel || enabledOnTenantLevel;
                            return [4 /*yield*/, this.initializeTotpSettings()];
                        case 3:
                            _b.sent();
                            if (this.user.twoFactorAuthenticationEnabled && !this.userCanSetupTotp) {
                                this.isPhoneRequired = true;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(UserEditComponent.prototype, "langs", {
            get: function () {
                return this.state.state.langs;
            },
            enumerable: false,
            configurable: true
        });
        UserEditComponent.prototype.setupTotp = function () {
            this.bsModalService.show(UserTotpSetupComponent, { class: 'modal-sm' });
            this.cancel(); // to close the user edit modal and prevent console errors on logout
        };
        UserEditComponent.prototype.cancel = function () {
            this.onCancel.emit();
        };
        UserEditComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.loading) {
                        return [2 /*return*/];
                    }
                    if (this.showProductUsageSetting) {
                        this.onProductExperience.emit(this.isUsageTrackingEnabled);
                        this.userPreferencesService.set('gainsightEnabled', this.isUsageTrackingEnabled);
                    }
                    this.onUser.emit(this._user);
                    return [2 /*return*/];
                });
            });
        };
        UserEditComponent.prototype.onNewPasswordChanged = function (newPassword) {
            this._user.password = newPassword.password;
        };
        UserEditComponent.prototype.initializeTotpSettings = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, totpActivity, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 4, , 5]);
                            _a = this;
                            return [4 /*yield*/, this.canUserSetupTotp()];
                        case 1:
                            _a.userCanSetupTotp = _b.sent();
                            if (!this.userCanSetupTotp) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.userService.getActivityTotp()];
                        case 2:
                            totpActivity = (_b.sent()).data;
                            this.userHasActiveTotp = totpActivity.isActive;
                            _b.label = 3;
                        case 3: return [3 /*break*/, 5];
                        case 4:
                            ex_1 = _b.sent();
                            this.alert.removeLastDanger();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        UserEditComponent.prototype.canUserSetupTotp = function () {
            return __awaiter(this, void 0, void 0, function () {
                var loginOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.tenantLoginOptionsService.listForCurrentTenant()];
                        case 1:
                            loginOptions = (_a.sent()).data;
                            return [2 /*return*/, loginOptions.some(function (_a) {
                                    var _b = _a.tfaStrategy, tfaStrategy = _b === void 0 ? '' : _b;
                                    return tfaStrategy.toLowerCase() === 'totp';
                                })];
                    }
                });
            });
        };
        return UserEditComponent;
    }());
    UserEditComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-user-edit',
                    template: "<form #userForm=\"ngForm\" (ngSubmit)=\"userForm.form.valid && save()\">\n  <div class=\"d-block p-24 p-b-0\">\n    <div class=\"alert alert-warning\" role=\"alert\" *ngIf=\"userIsExternal\" translate>\n      Some of the user settings are not editable here because they are managed via your\n      authorization server.\n    </div>\n    <c8y-form-group>\n      <label translate for=\"userName\">Username (for example, email)</label>\n      <input\n        id=\"userName\"\n        class=\"form-control\"\n        [(ngModel)]=\"user.userName\"\n        name=\"userName\"\n        autocomplete=\"off\"\n        required\n        maxlength=\"254\"\n        placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n        [disabled]=\"user.id\"\n        c8yDefaultValidation=\"user\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate for=\"displayName\">Login alias</label>\n      <input\n        id=\"displayName\"\n        class=\"form-control\"\n        [(ngModel)]=\"user.displayName\"\n        name=\"displayName\"\n        autocomplete=\"off\"\n        maxlength=\"254\"\n        placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n        [disabled]=\"userIsExternal\"\n        c8yDefaultValidation=\"loginAlias\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group [hasWarning]=\"!user.email\">\n      <label translate for=\"userEmail\">Email</label>\n      <input\n        id=\"userEmail\"\n        class=\"form-control\"\n        type=\"email\"\n        name=\"email\"\n        [maxlength]=\"254\"\n        autocomplete=\"off\"\n        placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n        [(ngModel)]=\"user.email\"\n        email\n        [required]=\"true\"\n        [disabled]=\"userIsExternal\"\n      />\n    </c8y-form-group>\n\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label translate for=\"userFirstName\">First name</label>\n          <input\n            id=\"userFirstName\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            maxlength=\"50\"\n            name=\"firstName\"\n            [(ngModel)]=\"user.firstName\"\n            [disabled]=\"userIsExternal\"\n          />\n        </c8y-form-group>\n      </div>\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label translate for=\"userLastName\">Last name</label>\n          <input\n            id=\"userLastName\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            maxlength=\"50\"\n            name=\"lastName\"\n            [(ngModel)]=\"user.lastName\"\n            [disabled]=\"userIsExternal\"\n          />\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <c8y-form-group>\n      <label translate for=\"userTelephone\">Telephone</label>\n      <input\n        id=\"userTelephone\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"phone\"\n        maxlength=\"254\"\n        [(ngModel)]=\"user.phone\"\n        placeholder=\"{{ 'e.g. +49 9 876 543 210`LOCALIZE`' | translate }}\"\n        c8yPhoneValidation\n        c8yDefaultValidation=\"phoneNumber\"\n        [required]=\"isPhoneRequired\"\n        [disabled]=\"userIsExternal\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate for=\"userLang\">Language</label>\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"userLang\"\n          class=\"form-control\"\n          #selectLang\n          name=\"lang\"\n          [(ngModel)]=\"lang\"\n          (change)=\"onLanguage.emit(selectLang.value)\"\n        >\n          <option *ngFor=\"let lang of langs\" [value]=\"lang\">\n            {{ translate.getNativeLanguage(lang) }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </c8y-form-group>\n\n    <c8y-form-group class=\"p-t-8 p-b-8 separator-top\" *ngIf=\"showProductUsageSetting\">\n      <strong translate>Product experience</strong>\n      <label class=\"c8y-switch\" for=\"productUsageTracking\">\n        <input\n          id=\"productUsageTracking\"\n          name=\"productUsageTracking\"\n          type=\"checkbox\"\n          [(ngModel)]=\"isUsageTrackingEnabled\"\n        />\n        <span></span>\n        {{ 'Enable anonymous tracking to enhance the product experience' | translate }}\n      </label>\n    </c8y-form-group>\n\n    <div class=\"form-group\" *ngIf=\"!userIsExternal\">\n      <label class=\"control-label\">{{ 'Login options' | translate }}</label>\n      <c8y-new-password (password)=\"onNewPasswordChanged($event)\"></c8y-new-password>\n      <button\n        title=\"{{ 'Set up two-factor authentication' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"setupTotp()\"\n        *ngIf=\"userCanSetupTotp && !userHasActiveTotp && isTfaEnabled\"\n      >\n        {{ 'Set up two-factor authentication' | translate }}\n      </button>\n    </div>\n\n    <c8y-form-group *ngIf=\"!!(state.state$ | async).newsletter\">\n      <label translate>Newsletter</label>\n      <label\n        title=\"{{ 'Send me information about outages, maintenance or updates.' | translate }}\"\n        class=\"c8y-checkbox\"\n      >\n        <input\n          type=\"checkbox\"\n          name=\"newsletter\"\n          [(ngModel)]=\"user.newsletter\"\n          [disabled]=\"userIsExternal\"\n        />\n        <span></span>\n        <span>\n          {{ 'Send me information about outages, maintenance or updates.' | translate }}\n        </span>\n      </label>\n    </c8y-form-group>\n  </div>\n  <div class=\"modal-footer separator-top bg-white sticky-bottom\">\n    <button\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      [disabled]=\"!userForm.form.valid || userForm.form.pristine || loading\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n"
                },] }
    ];
    UserEditComponent.ctorParameters = function () { return [
        { type: AppStateService },
        { type: TranslateService },
        { type: i1$2.BsModalService },
        { type: AlertService },
        { type: client.UserService },
        { type: client.TenantLoginOptionsService },
        { type: client.TenantService },
        { type: UserPreferencesService }
    ]; };
    UserEditComponent.propDecorators = {
        lang: [{ type: i0.Input }],
        loading: [{ type: i0.Input }],
        user: [{ type: i0.Input }],
        showProductUsageSetting: [{ type: i0.Input }],
        isUsageTrackingEnabled: [{ type: i0.Input }],
        onUser: [{ type: i0.Output }],
        onLanguage: [{ type: i0.Output }],
        onProductExperience: [{ type: i0.Output }],
        onCancel: [{ type: i0.Output }]
    };

    var UserMenuOutletComponent = /** @class */ (function () {
        function UserMenuOutletComponent(ui, bsModalService, modalService, loginService, translateService, tenantService, alertService, user, optionsService) {
            this.ui = ui;
            this.bsModalService = bsModalService;
            this.modalService = modalService;
            this.loginService = loginService;
            this.translateService = translateService;
            this.tenantService = tenantService;
            this.alertService = alertService;
            this.user = user;
            this.optionsService = optionsService;
        }
        UserMenuOutletComponent.prototype.copyIt = function (text) {
            var handler = {
                handleEvent: function (e) {
                    e.clipboardData.setData('text/plain', text);
                    e.preventDefault();
                }
            };
            document.addEventListener('copy', handler);
            var copied;
            try {
                copied = document.execCommand('copy');
            }
            catch (e) {
                copied = false;
            }
            if (copied) {
                this.alertService.addByText('success', gettext('Copied to clipboard.'));
            }
            else {
                this.alertService.addByText('danger', gettext('Could not copy to clipboard.'));
            }
            document.removeEventListener('copy', handler);
        };
        UserMenuOutletComponent.prototype.editUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.bsModalService.show(UserEditModalComponent);
                    return [2 /*return*/];
                });
            });
        };
        UserMenuOutletComponent.prototype.logout = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loginService.logout()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.activateSupportAccess = function () {
            return __awaiter(this, void 0, void 0, function () {
                var title, companyName, textWithCompany, textWithoutCompany, finalQuestion, body, labels, successMsg, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            title = gettext('Activate support user access');
                            companyName = this.optionsService.get('companyName', 'Cumulocity');
                            textWithCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to allow a support user from {{companyName}} to access your tenant to help you with your issue.');
                            textWithoutCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to allow a support user to access your tenant to help you with your issue.');
                            finalQuestion = gettext('Do you want to proceed?');
                            body = [
                                this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                                    companyName: companyName
                                }),
                                this.translateService.instant(finalQuestion)
                            ].join(' ');
                            labels = {
                                ok: gettext('Activate access'),
                                cancel: gettext('Cancel')
                            };
                            successMsg = gettext('Support user access activated.');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, this.modalService.confirm(title, body, exports.Status.DANGER, labels)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.tenantService.enableSupportUser()];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.refreshCurrentUser()];
                        case 4:
                            _a.sent();
                            this.alertService.success(successMsg);
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.deactivateSupportAccess = function () {
            return __awaiter(this, void 0, void 0, function () {
                var title, companyName, textWithCompany, textWithoutCompany, currentUser, isTenantAdmin, tenantAdminNote, finalQuestion, body, labels, successMsg, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            title = gettext('Deactivate support user access');
                            companyName = this.optionsService.get('companyName', 'Cumulocity');
                            textWithCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to block a support user from {{companyName}} from accessing your tenant to help you with your issue.');
                            textWithoutCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to block a support user from accessing your tenant to help you with your issue.');
                            return [4 /*yield*/, this.user.current()];
                        case 1:
                            currentUser = (_a.sent()).data;
                            return [4 /*yield*/, this.user.hasRole(currentUser, 'ROLE_TENANT_ADMIN')];
                        case 2:
                            isTenantAdmin = _a.sent();
                            tenantAdminNote = gettext(
                            // tslint:disable-next-line:max-line-length
                            'Deactivating support access as tenant admin will disable all other support requests on your tenant.');
                            finalQuestion = gettext('Do you want to proceed?');
                            body = [
                                this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                                    companyName: companyName
                                }),
                                isTenantAdmin ? this.translateService.instant(tenantAdminNote) : '',
                                this.translateService.instant(finalQuestion)
                            ]
                                .filter(Boolean)
                                .join(' ');
                            labels = {
                                ok: gettext('Deactivate access'),
                                cancel: gettext('Cancel')
                            };
                            successMsg = gettext('Support user access deactivated.');
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 7, , 8]);
                            return [4 /*yield*/, this.modalService.confirm(title, body, exports.Status.DANGER, labels)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, this.tenantService.disableSupportUser()];
                        case 5:
                            _a.sent();
                            return [4 /*yield*/, this.refreshCurrentUser()];
                        case 6:
                            _a.sent();
                            this.alertService.success(successMsg);
                            return [3 /*break*/, 8];
                        case 7:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 8];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.getSortedItems = function () {
            return lodashEs.sortBy(Array.from(this.items), this.byPriority);
        };
        UserMenuOutletComponent.prototype.refreshCurrentUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentUserResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.user.current()];
                        case 1:
                            currentUserResult = _a.sent();
                            this.ui.currentUser.next(currentUserResult.data);
                            return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        return UserMenuOutletComponent;
    }());
    UserMenuOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-user-menu-outlet',
                    template: "<div\n  dropdown\n  class=\"dropdown\"\n>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle text-nowrap\"\n    dropdownToggle\n  >\n    <span\n      class=\"d-inline-block hidden-xs text-truncate m-r-8\"\n      style=\"vertical-align: text-bottom; max-width: 104px;\"\n      title=\"{{ui.currentUser | async | shortenUserName}}\"\n    >\n      {{ui.currentUser | async | shortenUserName}}\n    </span>\n    <i\n      [c8yIcon]=\"'c8y-user'\"\n      class=\"icon-2x\"\n    ></i>\n  </button>\n  <ul\n    *dropdownMenu\n    class=\"dropdown-menu dropdown-menu-right\"\n    style=\"max-width: 240px;\"\n  >\n    <ng-container *ngFor=\"let item of getSortedItems()\">\n      <ng-container *ngIf=\"item.template\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!item.template\">\n        <li (click)=\"item.click()\">\n          <a class=\"interact\" [attr.href]=\"item.link\" [attr.target]=\"item.target\">\n            <i [c8yIcon]=\"item.icon\"></i>\n            {{item.label | translate}}\n          </a>\n        </li>\n      </ng-container>\n    </ng-container>\n    <li\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n      role=\"separator\"\n      class=\"divider\"\n    ></li>\n    <li\n      class=\"dropdown-header bg-gray-white text-pre-normal\"\n      style=\"margin-top: -1px;\"\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n    >\n      <div class=\"flex-row\">\n        <i\n          [c8yIcon]=\"'info-circle'\"\n          class=\"text-info flex-item-v-start text-14\"\n          style=\"margin: 1px 6px 0 -3px;\"\n        ></i>\n        <span class=\"text-muted text-truncate\">\n          {{'Tenant ID' | translate}}: <strong>\n            <span class=\"text-primary interact\" (click)=\"$event.stopPropagation(); copyIt(ui.currentTenant.value.name)\">\n              {{ui.currentTenant.value.name}}&nbsp;\n              <i [c8yIcon]=\"'clipboard'\"></i>\n            </span>\n            </strong><br>\n          {{'Backend' | translate}}: <strong>{{(ui.state$ | async).versions.backend}}</strong><br>\n          {{'UI' | translate }}: <strong>{{ui.uiVersion}}</strong>\n        </span>\n      </div>\n    </li>\n  </ul>\n</div>\n\n<!-- the default items -->\n<c8y-user-menu-item\n  [icon]=\"'user-menu-male'\"\n  [label]=\"'User settings' | translate\"\n  [priority]=\"20\"\n  (click)=\"editUser()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  [icon]=\"'sign-out'\"\n  [label]=\"'Logout' | translate\"\n  (click)=\"logout()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"!(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'c8y-c8y-support'\"\n  [label]=\"'Activate support' | translate\"\n  (click)=\"activateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'c8y-c8y-support'\"\n  [label]=\"'Deactivate support' | translate\"\n  (click)=\"deactivateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.state$ | async).supportUrl\"\n  [icon]=\"'question-circle'\"\n  [link]=\"(ui.state$ | async).supportUrl\"\n  [target]=\"'_blank'\"\n  [label]=\"'Request support' | translate\"\n></c8y-user-menu-item>\n"
                },] }
    ];
    UserMenuOutletComponent.ctorParameters = function () { return [
        { type: AppStateService },
        { type: i1$2.BsModalService },
        { type: ModalService },
        { type: LoginService },
        { type: i2.TranslateService },
        { type: client.TenantService },
        { type: AlertService },
        { type: client.UserService },
        { type: OptionsService }
    ]; };
    UserMenuOutletComponent.propDecorators = {
        items: [{ type: i0.Input }]
    };

    var PasswordCheckListComponent = /** @class */ (function () {
        function PasswordCheckListComponent(loginService, passwordStrengthChecker, passwordService) {
            var _this = this;
            this.loginService = loginService;
            this.passwordStrengthChecker = passwordStrengthChecker;
            this.passwordService = passwordService;
            this.minGreenLength = 0;
            this.checklist = [
                {
                    label: gettext('Include lowercase characters (for example, abcdef)'),
                    check: this.passwordStrengthChecker.hasLowerCase,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Include uppercase characters (for example, ABCDEF)'),
                    check: this.passwordStrengthChecker.hasUpperCase,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Include numbers (for example, 123456)'),
                    check: this.passwordStrengthChecker.hasNumbers,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Include symbols (for example, !@#$%^)'),
                    check: this.passwordStrengthChecker.hasSpecialChars,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Must have at least {{length}} characters'),
                    check: function (password) { return password.length >= _this.minGreenLength; },
                    icon: '',
                    contextualColor: ''
                }
            ];
        }
        Object.defineProperty(PasswordCheckListComponent.prototype, "password", {
            set: function (password) {
                if (typeof password === 'string') {
                    this.onPasswordChange(password);
                }
            },
            enumerable: false,
            configurable: true
        });
        PasswordCheckListComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.loginService.getGreenMinLength()];
                        case 1:
                            _a.minGreenLength = _b.sent();
                            if (!this.minGreenLength) {
                                this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(PasswordCheckListComponent.prototype, "translateParams", {
            get: function () {
                return {
                    length: this.minGreenLength
                };
            },
            enumerable: false,
            configurable: true
        });
        PasswordCheckListComponent.prototype.onPasswordChange = function (password) {
            this.checklist = lodashEs.map(this.checklist, function (requirement) {
                var checked = requirement.check(password);
                lodashEs.assign(requirement, {
                    icon: checked ? 'check-circle' : '',
                    contextualColor: checked ? '' : 'text-muted'
                });
                return requirement;
            });
        };
        return PasswordCheckListComponent;
    }());
    PasswordCheckListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-password-check-list',
                    template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n"
                },] }
    ];
    PasswordCheckListComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: PasswordService },
        { type: PasswordService }
    ]; };
    PasswordCheckListComponent.propDecorators = {
        password: [{ type: i0.Input, args: ['password',] }]
    };

    var PasswordConfirm = /** @class */ (function () {
        function PasswordConfirm(passwordConfirm) {
            this.passwordConfirm = passwordConfirm;
        }
        PasswordConfirm.prototype.validate = function (abControl) {
            var value = abControl.value;
            var controlToCompareWith = abControl.root.get(this.passwordConfirm);
            if (controlToCompareWith && value !== controlToCompareWith.value) {
                return { passwordConfirm: true };
            }
            return null;
        };
        return PasswordConfirm;
    }());
    PasswordConfirm.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[passwordConfirm]',
                    providers: [
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: PasswordConfirm,
                            multi: true
                        }
                    ]
                },] }
    ];
    PasswordConfirm.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Attribute, args: ['passwordConfirm',] }] }
    ]; };

    var PasswordStrengthCheckerService = /** @class */ (function () {
        function PasswordStrengthCheckerService() {
            this.GREEN = {
                colorName: 'green',
                color: 'rgb(0, 128, 0)',
                description: gettext('strong'),
                passwordStrength: client.PasswordStrength.GREEN
            };
            this.YELLOW = {
                colorName: 'yellow',
                color: 'rgb(255, 204, 51)',
                description: gettext('medium'),
                passwordStrength: client.PasswordStrength.YELLOW
            };
            this.RED = {
                colorName: 'red',
                color: 'rgb(170, 0, 51)',
                description: gettext('weak'),
                passwordStrength: client.PasswordStrength.RED
            };
        }
        PasswordStrengthCheckerService.prototype.hasLowerCase = function (password) {
            return (password.search(/[a-z]/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.hasUpperCase = function (password) {
            return (password.search(/[A-Z]/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.hasNumbers = function (password) {
            return (password.search(/[0-9]/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.hasSpecialChars = function (password) {
            return (password.search(/[^0-9a-zA-Z]+/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.getStrengthColor = function (password) {
            var passwordStrength = lodashEs.filter([
                this.hasLowerCase(password),
                this.hasUpperCase(password),
                this.hasNumbers(password),
                this.hasSpecialChars(password)
            ]).length;
            if (passwordStrength > 3) {
                return this.GREEN;
            }
            else if (passwordStrength >= 3) {
                return this.YELLOW;
            }
            else {
                return this.RED;
            }
        };
        return PasswordStrengthCheckerService;
    }());
    PasswordStrengthCheckerService.decorators = [
        { type: i0.Injectable }
    ];

    var PasswordStrengthComponent = /** @class */ (function () {
        function PasswordStrengthComponent(passwordStrengthCheckerService) {
            this.passwordStrengthCheckerService = passwordStrengthCheckerService;
            this.strength = new i0.EventEmitter();
            this.password = '';
        }
        Object.defineProperty(PasswordStrengthComponent.prototype, "password", {
            set: function (password) {
                if (typeof password === 'string') {
                    this.model = this.passwordStrengthCheckerService.getStrengthColor(password);
                    this.strength.emit(this.model);
                }
            },
            enumerable: false,
            configurable: true
        });
        return PasswordStrengthComponent;
    }());
    PasswordStrengthComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-password-strength',
                    template: "<div class=\"password-strength password-{{ model.colorName }}\">\r\n  <label class=\"password-strength-label small\" translate>\r\n    Password strength\r\n  </label>\r\n  <div>\r\n    <div class=\"password-bar\"></div>\r\n  </div>\r\n  <span class=\"small\">\r\n    {{ model.description | translate }}\r\n  </span>\r\n</div>\r\n"
                },] }
    ];
    PasswordStrengthComponent.ctorParameters = function () { return [
        { type: PasswordService }
    ]; };
    PasswordStrengthComponent.propDecorators = {
        password: [{ type: i0.Input, args: ['password',] }],
        strength: [{ type: i0.Output }]
    };

    var NewPasswordComponent = /** @class */ (function () {
        function NewPasswordComponent(loginService) {
            this.loginService = loginService;
            this.password = new i0.EventEmitter();
            this.model = {};
            this.changePassword = false;
            this.passwordEnforced = false;
        }
        NewPasswordComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loadPasswordStrengthSettings();
            this.loginService.getGreenMinLength().then(function (value) {
                _this.minlength = value;
            });
        };
        NewPasswordComponent.prototype.newPasswordChanged = function () {
            this.password.emit({
                password: this.model.newPassword,
                passwordStrength: this.model.strength
            });
        };
        NewPasswordComponent.prototype.loadPasswordStrengthSettings = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.loginService.getPasswordStrengthEnforced({ refresh: true })];
                        case 1:
                            _a.passwordEnforced = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        NewPasswordComponent.prototype.showPasswordStrength = function () {
            return this.model.newPassword && this.model.newPassword.length >= this.minlength;
        };
        NewPasswordComponent.prototype.toggleChangePassword = function () {
            this.changePassword = !this.changePassword;
            if (!this.changePassword) {
                this.password.emit({});
                this.model = {};
            }
        };
        return NewPasswordComponent;
    }());
    NewPasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-new-password',
                    template: "<div class=\"form-group\">\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n    <ng-container *ngIf=\"!changePassword\">\n      {{ 'Change password' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"changePassword\">\n      {{ 'Cancel password change' | translate }}\n    </ng-container>\n  </button>\n</div>\n\n<div *ngIf=\"changePassword\" class=\"row content-flex-50\">\n  <div class=\"col-7\">\n    <c8y-form-group>\n      <label for=\"newPassword\" translate>Password</label>\n      <input\n        id=\"newPassword\"\n        name=\"newPassword\"\n        type=\"password\"\n        #newPassword=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPassword\"\n        (change)=\"newPasswordChanged()\"\n        (input)=\"newPasswordConfirm.control.updateValueAndValidity()\"\n        required\n        c8yDefaultValidation=\"password\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label for=\"newConfirmPassword\" translate>Confirm password</label>\n      <input\n        id=\"newConfirmPassword\"\n        name=\"newPasswordConfirm\"\n        type=\"password\"\n        #newPasswordConfirm=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPasswordConfirm\"\n        required\n        passwordConfirm=\"newPassword\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n  </div>\n  <div class=\"col-5\">\n    <c8y-password-strength\n      [password]=\"model.newPassword\"\n      (strength)=\"model.strength = $event\"\n    ></c8y-password-strength>\n\n    <c8y-password-check-list\n      class=\"m-t-32\"\n      [password]=\"model.newPassword\"\n      [hidden]=\"!passwordEnforced\"\n    ></c8y-password-check-list>\n  </div>\n</div>\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] }
    ];
    NewPasswordComponent.ctorParameters = function () { return [
        { type: LoginService }
    ]; };
    NewPasswordComponent.propDecorators = {
        password: [{ type: i0.Output }]
    };

    var TotpChallengeComponent = /** @class */ (function () {
        function TotpChallengeComponent(loginService, users, alert) {
            this.loginService = loginService;
            this.users = users;
            this.alert = alert;
            /**
             * Calls the verify endpoint if set to true (default true)
             */
            this.verify = true;
            /**
             * Emits the token on success.
             */
            this.onSuccess = new i0.EventEmitter();
            /**
             * Emits if set up two-factor authentication is canceled.
             */
            this.totpUnconfirmedEmitter = new i0.EventEmitter();
            this.loading = false;
            this.hasError = false;
            this.model = {
                token: ''
            };
        }
        TotpChallengeComponent.prototype.verifyCode = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            this.loading = true;
                            this.hasError = false;
                            if (!this.verify) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.users.verifyTotpCode(this.model.token)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.onSuccess.emit(this.model.token);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            this.hasError = true;
                            this.alert.removeLastDanger();
                            this.loading = false;
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        TotpChallengeComponent.prototype.cancel = function () {
            this.totpUnconfirmedEmitter.emit();
        };
        return TotpChallengeComponent;
    }());
    TotpChallengeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-totp-challenge',
                    template: "<form #totpForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"verifyCode()\" novalidate>\n  <div class=\"d-block p-24 p-b-0\">\n    <c8y-form-group\n      [hasError]=\"hasError\"\n      [novalidation]=\"true\"\n      [ngClass]=\"hasError ? 'p-b-24' : ''\"\n    >\n      <h1 class=\"label p-0\"><label translate for=\"totpToken\">Verification code</label></h1>\n\n      <input\n        id=\"totpToken\"\n        [(ngModel)]=\"model.token\"\n        name=\"totpToken\"\n        type=\"text\"\n        autofocus\n        autocapitalize=\"off\"\n        autocorrect=\"off\"\n        autocomplete=\"off\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g.' | translate }} 624327\"\n        required\n      />\n\n      <c8y-messages>\n        <c8y-message *ngIf=\"hasError\" translate>\n          Invalid verification code. In case of key loss, please contact your platform\n          administrator.\n        </c8y-message>\n      </c8y-messages>\n      <p id=\"helpinput\" *ngIf=\"!hasError\" class=\"help-block\" translate>\n        In case of key loss, please contact your platform administrator.\n      </p>\n    </c8y-form-group>\n  </div>\n  <div class=\"modal-footer separator-top bg-level-0 sticky-bottom p-b-0\">\n    <button\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      *ngIf=\"!loading\"\n      title=\"{{ 'Verify' | translate }}\"\n      [disabled]=\"!totpForm.form.valid\"\n      type=\"submit\"\n      class=\"btn btn-primary form-group\"\n    >\n      {{ 'Verify' | translate }}\n    </button>\n\n    <button\n      *ngIf=\"loading\"\n      title=\"{{ 'Verifying\u2026' | translate }}\"\n      type=\"submit\"\n      class=\"btn btn-primary btn-pending\"\n    >\n      {{ 'Verifying\u2026' | translate }}\n    </button>\n  </div>\n</form>\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] }
    ];
    TotpChallengeComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: client.UserService },
        { type: AlertService }
    ]; };
    TotpChallengeComponent.propDecorators = {
        verify: [{ type: i0.Input }],
        onSuccess: [{ type: i0.Output }],
        totpUnconfirmedEmitter: [{ type: i0.Output }],
        loading: [{ type: i0.Input }],
        hasError: [{ type: i0.Input }],
        modal: [{ type: i0.ViewChild, args: ['modal', { static: false },] }]
    };

    var SmsChallengeComponent = /** @class */ (function () {
        function SmsChallengeComponent(loginService, users, alert) {
            this.loginService = loginService;
            this.users = users;
            this.alert = alert;
            this.onCancel = new i0.EventEmitter();
            this.model = {
                smsToken: ''
            };
            this.isLoading = false;
            this.resendTfa = '0';
        }
        SmsChallengeComponent.prototype.verifyTFACode = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isLoading = true;
                            return [4 /*yield*/, this.usesOAuthInternal()];
                        case 1:
                            if (!_a.sent()) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.verifyCodeWithOauth()];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.verifyCodeWithBasicAuth()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.resendTFASms = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            this.isLoading = true;
                            return [4 /*yield*/, this.users.verifyTFACode(this.resendTfa)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            e_1 = _a.sent();
                            if (e_1.res.status === 403) {
                                this.loginService.cleanMessages();
                                this.loginService.addSuccessMessage('resend_sms');
                            }
                            else {
                                this.alert.addServerFailure(e_1);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.usesOAuthInternal = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.loginService.isPasswordGrantLogin(this.credentials)];
                });
            });
        };
        SmsChallengeComponent.prototype.verifyCodeWithOauth = function () {
            return __awaiter(this, void 0, void 0, function () {
                var credentials, e_2, resStatus;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            credentials = this.credentials;
                            return [4 /*yield*/, this.loginService.switchLoginMode(Object.assign(Object.assign({}, credentials), { tfa: this.model.smsToken }))];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.verifyAppAccess()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.authFulfilled()];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            e_2 = _a.sent();
                            resStatus = e_2.res && e_2.res.status;
                            if (resStatus === 401) {
                                // it is assumed that the user and password are correct so it must be the tfa code
                                this.alert.danger(gettext('Invalid code'));
                            }
                            else {
                                this.alert.addServerFailure(e_2);
                            }
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.verifyCodeWithBasicAuth = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res, tfaToken, e_3, resStatus;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.users.verifyTFACode(this.model.smsToken)];
                        case 1:
                            res = (_a.sent()).res;
                            tfaToken = res.headers.get('tfatoken');
                            this.credentials.tfa = tfaToken;
                            return [4 /*yield*/, this.loginWithTFA(tfaToken)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_3 = _a.sent();
                            resStatus = e_3.res && e_3.res.status;
                            // BE returns 403 in case of invalid tfa code
                            if (resStatus === 403) {
                                this.alert.danger(gettext('Invalid code'));
                            }
                            else {
                                this.alert.addServerFailure(e_3);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.loginWithTFA = function (tfaToken) {
            return __awaiter(this, void 0, void 0, function () {
                var e_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.loginService.login(this.loginService.useBasicAuth({ tfa: tfaToken }), this.credentials)];
                        case 1:
                            _a.sent();
                            this.loginService.saveTFAToken(tfaToken, sessionStorage);
                            if (this.loginService.rememberMe) {
                                this.loginService.saveTFAToken(tfaToken, localStorage);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            e_4 = _a.sent();
                            this.alert.addServerFailure(e_4);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return SmsChallengeComponent;
    }());
    SmsChallengeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-sms-challenge',
                    template: "<form #twoFactorForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Two-factor authentication\n  </div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autofocus\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} 624327\"\n      required\n    />\n    <p *ngIf=\"!twoFactorForm.form.valid || isLoading \" class=\"help-block\" translate>\n      Insert the code received via SMS.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Verify\n  </button>\n\n  <div class=\"d-flex m-t-8\">\n    <a\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"small pointer m-r-auto\"\n      (click)=\"resendTFASms()\"\n      translate\n    >\n      Send new code\n    </a>\n    <a\n      title=\"{{ 'Log in' | translate }}\"\n      class=\"small pointer m-l-auto\"\n      (click)=\"onCancel.emit()\"\n      translate\n    >\n      Log in\n    </a>\n  </div>\n</form>\n"
                },] }
    ];
    SmsChallengeComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: client.UserService },
        { type: AlertService }
    ]; };
    SmsChallengeComponent.propDecorators = {
        credentials: [{ type: i0.Input }],
        onCancel: [{ type: i0.Output }]
    };

    var TotpSetupComponent = /** @class */ (function () {
        function TotpSetupComponent(user, alert) {
            this.user = user;
            this.alert = alert;
        }
        Object.defineProperty(TotpSetupComponent.prototype, "qrCodeImage", {
            get: function () {
                return this.totpSecret ? this.totpSecret.secretQrUrl : '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TotpSetupComponent.prototype, "secret", {
            get: function () {
                return this.totpSecret ? this.totpSecret.rawSecret : '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TotpSetupComponent.prototype, "qrData", {
            get: function () {
                // TODO: waiting for BE:, now we need extract it from secretQrUrl
                // https://cumulocity.atlassian.net/browse/MTM-36387
                // return this.totpSecret ? this.totpSecret.qrData : '';
                var otpAuth = this.qrCodeImage.split('chl=')[1];
                if (!otpAuth) {
                    this.alert.danger(gettext('Failed to generate a QR code.'));
                    return '';
                }
                return decodeURIComponent(otpAuth);
            },
            enumerable: false,
            configurable: true
        });
        TotpSetupComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.user.generateTotpSecret()];
                        case 1:
                            data = (_a.sent()).data;
                            this.totpSecret = data;
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            this.alert.addServerFailure(ex_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return TotpSetupComponent;
    }());
    TotpSetupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-totp-setup',
                    template: "<div class=\"text-center\">\n  <p class=\"m-24 m-t-16 m-b-0\" translate>\n    Scan this QR code with your smartphone using the Google Authenticator app.\n  </p>\n\n  <qrcode *ngIf=\"totpSecret\" [width]=\"180\" [qrdata]=\"qrData\" [errorCorrectionLevel]=\"'M'\"></qrcode>\n  <p class=\"text-center text-muted\">\n    {{ secret }}\n  </p>\n</div>\n"
                },] }
    ];
    TotpSetupComponent.ctorParameters = function () { return [
        { type: client.UserService },
        { type: AlertService }
    ]; };

    exports.LoginViews = void 0;
    (function (LoginViews) {
        LoginViews[LoginViews["None"] = 0] = "None";
        LoginViews[LoginViews["Credentials"] = 1] = "Credentials";
        LoginViews[LoginViews["RecoverPassword"] = 2] = "RecoverPassword";
        LoginViews[LoginViews["SmsChallenge"] = 3] = "SmsChallenge";
        LoginViews[LoginViews["ChangePassword"] = 4] = "ChangePassword";
        LoginViews[LoginViews["TotpChallenge"] = 5] = "TotpChallenge";
        LoginViews[LoginViews["TotpSetup"] = 6] = "TotpSetup";
        LoginViews[LoginViews["ProvidePhoneNumber"] = 7] = "ProvidePhoneNumber";
        LoginViews[LoginViews["TenantIdSetup"] = 8] = "TenantIdSetup";
    })(exports.LoginViews || (exports.LoginViews = {}));

    var ProvidePhoneNumberComponent = /** @class */ (function () {
        function ProvidePhoneNumberComponent(loginService, alert, userService) {
            this.loginService = loginService;
            this.alert = alert;
            this.userService = userService;
            this.onCancel = new i0.EventEmitter();
            this.onChangeView = new i0.EventEmitter();
            this.requestInProgress = false;
            this.sendTfa = '0';
        }
        ProvidePhoneNumberComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, 4, 5]);
                            this.requestInProgress = true;
                            return [4 /*yield*/, this.userService.savePhoneNumber(this.phoneNumber)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.sendTFASms()];
                        case 2:
                            _a.sent();
                            this.onChangeView.emit({
                                view: exports.LoginViews.SmsChallenge,
                                credentials: this.credentials
                            });
                            return [3 /*break*/, 5];
                        case 3:
                            e_1 = _a.sent();
                            this.alert.addServerFailure(e_1);
                            return [3 /*break*/, 5];
                        case 4:
                            this.requestInProgress = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ProvidePhoneNumberComponent.prototype.sendTFASms = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.userService.verifyTFACode(this.sendTfa)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_2 = _a.sent();
                            if (e_2.res.status === 403) {
                                this.loginService.cleanMessages();
                                this.loginService.addSuccessMessage('send_sms');
                            }
                            else {
                                throw e_2;
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return ProvidePhoneNumberComponent;
    }());
    ProvidePhoneNumberComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-provide-phone-number',
                    template: "<form #twoFactorForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"save()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Two-factor authentication\n  </div>\n\n  <c8y-form-group [ngClass]=\"requestInProgress || twoFactorForm.invalid ? 'p-b-8' : ''\">\n    <label translate>Provide your phone number</label>\n\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"phoneNumber\"\n      #contactPhone=\"ngModel\"\n      type=\"text\"\n      name=\"phone\"\n      autocomplete=\"off\"\n      placeholder=\"{{ 'e.g. +49 9 876 543 210`LOCALIZE`' | translate }}\"\n      c8yPhoneValidation\n      c8yDefaultValidation=\"phoneNumber\"\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Save and continue' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"requestInProgress || twoFactorForm.invalid\"\n  >\n    {{ 'Save and continue' | translate }}\n  </button>\n\n  <div class=\"d-flex m-t-8\">\n    <a\n      title=\"{{ 'Login' | translate }}\"\n      class=\"small pointer m-l-auto\"\n      href=\"#\"\n      (click)=\"onCancel.emit()\"\n    >\n      {{ 'Login' | translate }}\n    </a>\n  </div>\n</form>\n"
                },] }
    ];
    ProvidePhoneNumberComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: AlertService },
        { type: client.UserService }
    ]; };
    ProvidePhoneNumberComponent.propDecorators = {
        credentials: [{ type: i0.Input }],
        onCancel: [{ type: i0.Output }],
        onChangeView: [{ type: i0.Output }]
    };

    /**
     * The angular module definition for new password.
     * @exports PasswordStrengthComponent
     * @exports PasswordCheckListComponent
     * @exports PasswordConfirm
     * @exports NewPasswordComponent
     * @exports PasswordConfirmModalComponent
     */
    var AuthenticationModule = /** @class */ (function () {
        function AuthenticationModule() {
        }
        return AuthenticationModule;
    }());
    AuthenticationModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        TotpChallengeComponent,
                        PasswordConfirm,
                        PasswordStrengthComponent,
                        PasswordCheckListComponent,
                        NewPasswordComponent,
                        PasswordConfirmModalComponent,
                        CurrentPasswordModalComponent,
                        SmsChallengeComponent,
                        TotpSetupComponent,
                        ProvidePhoneNumberComponent
                    ],
                    imports: [FormsModule, tooltip.TooltipModule, CommonModule, ModalModule, angularxQrcode.QRCodeModule],
                    exports: [
                        TotpChallengeComponent,
                        PasswordStrengthComponent,
                        PasswordCheckListComponent,
                        PasswordConfirm,
                        NewPasswordComponent,
                        PasswordConfirmModalComponent,
                        CurrentPasswordModalComponent,
                        SmsChallengeComponent,
                        TotpSetupComponent,
                        ProvidePhoneNumberComponent
                    ],
                    entryComponents: [PasswordConfirmModalComponent],
                    providers: [PasswordStrengthCheckerService, PasswordService]
                },] }
    ];

    var UserTotpRevokeComponent = /** @class */ (function () {
        function UserTotpRevokeComponent(users, alert) {
            this.users = users;
            this.alert = alert;
            this.revokeEmitter = new i0.EventEmitter();
        }
        UserTotpRevokeComponent.prototype.revoke = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.users.totpRevokeSecret(this.user)];
                        case 1:
                            _a.sent();
                            this.alert.success(gettext('User TOTP secret revoked.'));
                            this.revokeEmitter.next();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            this.alert.addServerFailure(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return UserTotpRevokeComponent;
    }());
    UserTotpRevokeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-user-totp-revoke',
                    template: "<button\n  type=\"button\"\n  class=\"btn btn-default\"\n  [popover]=\"confirm\"\n  [popoverTitle]=\"'Revoke TOTP secret' | translate\"\n  #popover=\"bs-popover\"\n  placement=\"bottom\"\n  \n\n>\n  <i c8yIcon=\"key\"></i> {{ 'Revoke TOTP secret' | translate }}\n</button>\n\n<ng-template #confirm>\n  <p class=\"m-b-16\" translate>\n    This action will revoke the user's stored TOTP secret which will require a new setup.\n  </p>\n  <button\n    title=\"{{ 'Cancel' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    (click)=\"popover.hide()\"\n    translate\n  >\n    Cancel\n  </button>\n    <button\n    title=\"{{ 'Revoke' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-danger\"\n    (click)=\"revoke(); popover.hide()\"\n    translate\n  >\n    Revoke\n  </button>\n</ng-template>\n"
                },] }
    ];
    UserTotpRevokeComponent.ctorParameters = function () { return [
        { type: client.UserService },
        { type: AlertService }
    ]; };
    UserTotpRevokeComponent.propDecorators = {
        user: [{ type: i0.Input }],
        revokeEmitter: [{ type: i0.Output, args: ['revoke',] }]
    };

    /**
     * The angular module definition for the user menu.
     * @exports UserMenuComponent
     * @exports UserMenuItemComponent
     * @exports UserEditComponent
     * @exports UserEditModalComponent
     */
    var UserModule = /** @class */ (function () {
        function UserModule() {
        }
        return UserModule;
    }());
    UserModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        UserMenuOutletComponent,
                        UserEditComponent,
                        UserEditModalComponent,
                        UserMenuItemComponent,
                        UserTotpSetupComponent,
                        UserTotpRevokeComponent,
                    ],
                    imports: [
                        FormsModule,
                        CommonModule,
                        ModalModule,
                        dropdown.BsDropdownModule,
                        AuthenticationModule,
                        AlertModule,
                        i1.RouterModule,
                        tooltip.TooltipModule.forRoot(),
                        popover.PopoverModule
                    ],
                    exports: [
                        UserMenuOutletComponent,
                        UserMenuItemComponent,
                        UserEditComponent,
                        UserEditModalComponent,
                        UserTotpSetupComponent,
                        UserTotpRevokeComponent
                    ],
                    entryComponents: [
                        UserEditModalComponent,
                        UserTotpSetupComponent,
                        UserTotpRevokeComponent
                    ]
                },] }
    ];

    var AppIconComponent = /** @class */ (function () {
        function AppIconComponent(options) {
            this.options = options;
            this.name = '';
            this.model = {
                appIcon: '',
                showIcon: true,
                iconClass: ['c8y-icon'],
                appNameAbbr: '',
                iconStyle: {}
            };
            this.c8yAppIconsList = {
                analyticsbuilder: 'analytics-builder',
                'analytics-builder': 'analytics-builder',
                cockpit: 'cockpit',
                devicemanagement: 'device-management',
                administration: 'administration',
                apamaepl: 'apama-epl'
            };
            this.white = false;
            this.defaultIconStyle = {
                'background-repeat': 'no-repeat',
                'background-size': 'contain',
                height: '36px',
                width: '36px'
            };
        }
        AppIconComponent.prototype.ngOnInit = function () {
            this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
            var iconUrl = this.iconUrlFromAppDefinition();
            if (iconUrl) {
                this.model.iconStyle = lodashEs.assign(this.defaultIconStyle, {
                    'background-image': iconUrl
                });
            }
            this.model.showIcon = !!this.model.appIcon || !lodashEs.isEmpty(this.model.iconStyle);
            this.model.iconClass = [
                'c8y-icon',
                this.mapFontAwesomeToDelightIcons(this.model.appIcon),
                this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
            ].filter(function (c) { return !!c; });
            this.model.appNameAbbr = this.name.substr(0, 2);
        };
        AppIconComponent.prototype.findStaticIcon = function () {
            var contextPath = this.contextPath || this.name;
            var appContextPathNormalized = lodashEs.find(lodashEs.keys(this.c8yAppIconsList), function (cp) {
                return contextPath.indexOf(cp) > -1;
            });
            var appIcon = this.c8yAppIconsList[appContextPathNormalized];
            return appIcon ? "c8y-icon-" + appIcon : undefined;
        };
        AppIconComponent.prototype.iconFromAppDefinition = function () {
            var app = this.app || this.options;
            var iconClassProperty = ['icon', 'class'];
            var iconClass = lodashEs.get(app, __spreadArray(['manifest'], __read(iconClassProperty))) || lodashEs.get(app, iconClassProperty);
            return iconClass;
        };
        AppIconComponent.prototype.iconUrlFromAppDefinition = function () {
            var app = this.app || this.options;
            var iconUrlProperty = ['icon', 'url'];
            var iconUrl = lodashEs.get(app, __spreadArray(['manifest'], __read(iconUrlProperty))) || lodashEs.get(app, iconUrlProperty);
            return iconUrl;
        };
        AppIconComponent.prototype.mapFontAwesomeToDelightIcons = function (iconClasses) {
            if (!iconClasses) {
                return;
            }
            var regex = /fa-/gi;
            return iconClasses.replace(regex, 'dlt-c8y-icon-');
        };
        return AppIconComponent;
    }());
    AppIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-app-icon',
                    template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
                    host: { class: 'c8y-app-icon' }
                },] }
    ];
    AppIconComponent.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    AppIconComponent.propDecorators = {
        contextPath: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        app: [{ type: i0.Input }]
    };

    var AppSwitcherComponent = /** @class */ (function () {
        function AppSwitcherComponent(ui, applications) {
            var _this = this;
            this.ui = ui;
            this.applications = applications;
            var _a = this.ui, currentUser = _a.currentUser, currentTenant = _a.currentTenant;
            rxjs.combineLatest(currentUser, currentTenant)
                .pipe(operators.first())
                .subscribe(function (_a) {
                var _b = __read(_a, 2), user = _b[0], tenant = _b[1];
                _this.tenant = tenant;
                _this.listAppsForUser(user);
            });
        }
        Object.defineProperty(AppSwitcherComponent.prototype, "hideCloudApps", {
            get: function () {
                return false; // this should be configurable from outside
            },
            enumerable: false,
            configurable: true
        });
        AppSwitcherComponent.prototype.isActive = function (app) {
            return app.contextPath === this.ui.state.app.contextPath;
        };
        AppSwitcherComponent.prototype.getHref = function (app) {
            return this.applications.getHref(app);
        };
        AppSwitcherComponent.prototype.listAppsForUser = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!user) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.applications.listByUser(user, { pageSize: 1000 })];
                        case 1:
                            data = (_a.sent()).data;
                            this.apps = this.orderApps(this.filterApps(data));
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        AppSwitcherComponent.prototype.filterApps = function (apps) {
            apps = this.filterVisible(apps);
            apps = this.filterCloud(apps);
            apps = this.filterDuplicates(apps);
            return apps;
        };
        AppSwitcherComponent.prototype.filterVisible = function (apps) {
            var visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
            return apps.filter(function (app) { return lodashEs.includes(visibleApplicationTypes, app.type) &&
                !app.noAppSwitcher &&
                !lodashEs.get(app, 'manifest.noAppSwitcher'); });
        };
        AppSwitcherComponent.prototype.filterCloud = function (apps) {
            var hideCloudApps = this.hideCloudApps;
            var filterFn = function (app) { return !!app.cloud; };
            if (!hideCloudApps) {
                this.oneCloudApps = this.orderApps(apps.filter(filterFn));
            }
            return apps.filter(function (app) { return !filterFn(app); });
        };
        AppSwitcherComponent.prototype.filterDuplicates = function (apps) {
            var _this = this;
            // Filter out apps that have duplicate contextpaths and are not own owned but the current tenant;
            var filterFn = function (app) { return !apps.some(function (otherApp) { return app !== otherApp &&
                (app.contextPath && app.contextPath === otherApp.contextPath) &&
                app.owner.tenant.id !== _this.tenant.name; }); };
            return apps.filter(filterFn);
        };
        AppSwitcherComponent.prototype.orderApps = function (apps) {
            return lodashEs.orderBy(apps, function (_a) {
                var name = _a.name;
                return name.toLowerCase();
            });
        };
        return AppSwitcherComponent;
    }());
    AppSwitcherComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-app-switcher',
                    template: "<div class=\"app-switcher-dropdown\" dropdown>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    id=\"appSwitcherDropdown\"\n    dropdownToggle\n    title=\"{{ 'Application switcher' | translate }}\"\n  >\n    <i c8yIcon=\"th\" class=\"icon-2x\"></i>\n  </button>\n  <div\n    *dropdownMenu\n    class=\"app-switcher-dropdown-menu dropdown-menu\"\n    aria-labelledby=\"appSwitcherDropdown\"\n  >\n    <div class=\"app-switcher-sagcloud\" *ngIf=\"oneCloudApps && oneCloudApps.length > 0\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        *ngFor=\"let app of oneCloudApps\"\n        [href]=\"getHref(app)\"\n        c8yProductExperience\n        [actionName]=\"'appSwitched'\"\n        [actionData]=\"{ applicationName: app && app.name }\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n    <div class=\"app-switcher\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        [ngClass]=\"isActive(app) ? 'active' : ''\"\n        *ngFor=\"let app of apps\"\n        [href]=\"getHref(app)\"\n        c8yProductExperience\n        [actionName]=\"'appSwitched'\"\n        [actionData]=\"{ applicationName: app && app.name }\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    AppSwitcherComponent.ctorParameters = function () { return [
        { type: AppStateService },
        { type: client.ApplicationService }
    ]; };

    var HeaderBarComponent = /** @class */ (function () {
        function HeaderBarComponent(headerService, actionService, breadcrumbService, searchService, appState, userMenuService, docs) {
            this.headerService = headerService;
            this.actionService = actionService;
            this.breadcrumbService = breadcrumbService;
            this.searchService = searchService;
            this.appState = appState;
            this.userMenuService = userMenuService;
            this.docs = docs;
            this.canToggle$ = this.headerService.hasItemsInNavigator$;
            this.appState$ = this.appState.state$;
            this.drawerOpen = false;
            this.headerOpen = false;
            /**
             * Can be set to show an header bar with only
             * title, app-switcher and user-menu
             */
            this.simple = false;
        }
        HeaderBarComponent.prototype.ngAfterViewInit = function () {
            this.headerService.verifyIfNavOpen();
        };
        return HeaderBarComponent;
    }());
    HeaderBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-header-bar',
                    template: "<div\n  class=\"app-main-header\"\n  [ngClass]=\"{\n    open: (headerService.navigatorOpen$ | async) && !simple,\n    drawerOpen: drawerOpen\n  }\"\n>\n  <div class=\"header-bar\">\n    <button\n      *ngIf=\"(canToggle$ | async) && !simple\"\n      type=\"button\"\n      class=\"navigator-toggle main-header-button\"\n      title=\"{{ 'Toggle navigator' | translate }}\"\n      (click)=\"headerService.toggleNavigator()\"\n    >\n      <i [c8yIcon]=\"'outdent'\" *ngIf=\"!(headerService.navigatorOpen$ | async)\"></i>\n      <i [c8yIcon]=\"'dedent-right'\" *ngIf=\"headerService.navigatorOpen$ | async\"></i>\n    </button>\n    <div class=\"app-view\">\n      <c8y-app-icon\n        [name]=\"(appState$ | async).app.name\"\n        [contextPath]=\"(appState$ | async).app.contextPath\"\n      ></c8y-app-icon>\n\n      <span class=\"page-header\">\n        <c8y-title-outlet></c8y-title-outlet>\n        <c8y-breadcrumb-outlet\n          *ngIf=\"!simple\"\n          [breadcrumbs]=\"breadcrumbService.items$ | async\"\n          class=\"app-breadcrumbs\"\n        ></c8y-breadcrumb-outlet>\n      </span>\n    </div>\n    <c8y-search-outlet\n      *ngIf=\"!simple\"\n      title=\"{{ 'Search' | translate }}\"\n      [search]=\"searchService.items$ | async\"\n      class=\"main-header-item\"\n    ></c8y-search-outlet>\n    <c8y-action-outlet\n      *ngIf=\"!simple\"\n      title=\"{{ 'Add' | translate }}\"\n      [items]=\"actionService.items$ | async\"\n    ></c8y-action-outlet>\n    <c8y-app-switcher\n      title=\"{{ 'Application switcher' | translate }}\"\n      class=\"main-header-item\"\n    ></c8y-app-switcher>\n    <c8y-user-menu-outlet\n      [items]=\"(userMenuService.state$ | async).userMenuItems\"\n      class=\"main-header-item\"\n    ></c8y-user-menu-outlet>\n\n    <button\n      title=\"{{ 'Toggle side drawer' | translate }}\"\n      class=\"drawer-toggle main-header-button\"\n      *ngIf=\"(appState$ | async).showRightDrawer && !simple\"\n      (click)=\"drawerOpen = !drawerOpen\"\n    >\n      <i [c8yIcon]=\"'indent'\" *ngIf=\"drawerOpen\"></i>\n      <i [c8yIcon]=\"'dedent'\" *ngIf=\"!drawerOpen\"></i>\n    </button>\n  </div>\n  <div class=\"head-toggler\">\n    <button title=\"{{ 'Toggle' | translate }}\" type=\"button\" (click)=\"headerService.toggle()\">\n      <i [c8yIcon]=\"'angle-right'\"></i>\n    </button>\n  </div>\n  <c8y-right-drawer\n    *ngIf=\"(appState$ | async).showRightDrawer\"\n    [app]=\"(appState$ | async).app\"\n    [quickLinks]=\"docs.items$ | async\"\n    [helpAndSupport]=\"docs.items$ | async\"\n  >\n  </c8y-right-drawer>\n  <div class=\"loading-bar\" [ngClass]=\"{ active: (appState$ | async).isLoading }\"></div>\n</div>\n"
                },] }
    ];
    HeaderBarComponent.ctorParameters = function () { return [
        { type: HeaderService },
        { type: ActionService },
        { type: BreadcrumbService },
        { type: SearchService },
        { type: AppStateService },
        { type: UserMenuService },
        { type: DocsService }
    ]; };
    HeaderBarComponent.propDecorators = {
        simple: [{ type: i0.Input }]
    };

    var RightDrawerComponent = /** @class */ (function () {
        function RightDrawerComponent() {
            this.quickLinks = [];
            this.helpAndSupport = [];
        }
        Object.defineProperty(RightDrawerComponent.prototype, "_quickLinks", {
            set: function (data) {
                if (data) {
                    this.quickLinks = data.filter(function (d) { return d.type === 'quicklink'; });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RightDrawerComponent.prototype, "_helpAndSupport", {
            set: function (data) {
                if (data) {
                    this.helpAndSupport = data.filter(function (d) { return d.type === 'doc'; });
                }
            },
            enumerable: false,
            configurable: true
        });
        return RightDrawerComponent;
    }());
    RightDrawerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-right-drawer',
                    template: "<div class=\"c8y-right-drawer\">\n  <div class=\"summary\">\n    <h4 class=\"text-light\">\n      {{ 'Welcome to' | translate }} {{ app | humanizeAppName | async }}\n    </h4>\n  </div>\n\n  <div *ngIf=\"quickLinks.length\">\n    <div class=\"legend form-block\" translate>Quick links</div>\n    <div class=\"quick-links-drawer\">\n      <ng-container *ngFor=\"let quickLink of quickLinks\">\n        <a\n          class=\"quick-link\"\n          [href]=\"quickLink.url || '#'\"\n          (click)=\"quickLink.click && $event.preventDefault(); quickLink.click && quickLink.click();\"\n          c8yProductExperience\n          [actionName]=\"'quickLinkRightDrawer:' + quickLink.label\"\n          [actionData]=\"\"\n        >\n          <h2 *ngIf=\"quickLink.icon\"><i class=\"{{ quickLink.icon }}\"></i></h2>\n          <img\n            *ngIf=\"quickLink.iconSrc\"\n            [src]=\"quickLink.iconSrc\"\n            style=\"max-width:50px;\"\n            class=\"img-responsive center-block\"\n            onerror=\"this.style.display = 'none'\">\n          {{ quickLink.label | translate }}\n        </a>\n      </ng-container>\n    </div>\n  </div>\n\n  <div *ngIf=\"helpAndSupport.length\">\n    <div class=\"legend form-block m-t-24\" translate>Help &amp; support</div>\n    <div class=\"help-support\" *ngFor=\"let link of helpAndSupport\">\n      <a\n        class=\"help-and-support-link text-truncate\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        [href]=\"link.url\"\n        c8yProductExperience\n        [actionName]=\"'quickLinkRightDrawer:' + link.label\"\n        [actionData]=\"\"\n      >\n        <i [c8yIcon]=\"link.icon\"></i>\n        <span title=\"{{ link.label | translate }}\" class=\"d-inline\">\n          {{ link.label | translate }}\n        </span>\n      </a>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    RightDrawerComponent.propDecorators = {
        _quickLinks: [{ type: i0.Input, args: ['quickLinks',] }],
        _helpAndSupport: [{ type: i0.Input, args: ['helpAndSupport',] }],
        app: [{ type: i0.Input }]
    };

    var TitleOutletComponent = /** @class */ (function () {
        function TitleOutletComponent(headerService, element, zone) {
            var _this = this;
            this.headerService = headerService;
            this.element = element;
            this.zone = zone;
            this.title = undefined;
            this.pageTitleUpdate = true;
            var title$ = this.headerService.map(function (state) { return state.title; });
            title$.subscribe(function (title) { return (_this.title = title); });
            var pageTitleUpdate$ = this.headerService.map(function (state) { return state.pageTitleUpdate; });
            pageTitleUpdate$.subscribe(function (pageTitleUpdate) { return (_this.pageTitleUpdate = pageTitleUpdate); });
            this.zone.runOutsideAngular(function () {
                _this.headerService.state$.pipe(operators.debounceTime(100), operators.filter(function (state) { return state.pageTitleUpdate; }), operators.debounceTime(100), operators.map(function () { return _this.element.nativeElement.querySelector('h1'); }), operators.filter(function (el) { return el !== null; }), operators.map(function (el) { return el.innerText; }), operators.filter(Boolean))
                    .subscribe(function (title) { return headerService.changePageTitle(title); });
            });
        }
        return TitleOutletComponent;
    }());
    TitleOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-title-outlet',
                    template: "<div class=\"c8y-ui-title\">\n  <div class=\"title\" *c8yOutlet=\"title\"></div>\n</div>\n"
                },] }
    ];
    TitleOutletComponent.ctorParameters = function () { return [
        { type: HeaderService },
        { type: i0.ElementRef },
        { type: i0.NgZone }
    ]; };

    var TitleComponent = /** @class */ (function () {
        function TitleComponent(headerService) {
            this.headerService = headerService;
            this.pageTitleUpdate = true;
        }
        TitleComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () { return _this.headerService.changeTitle(_this.template, _this.pageTitleUpdate); });
        };
        TitleComponent.prototype.ngOnDestroy = function () {
            if (this.headerService.state.title === this.template) {
                clearTimeout(this.viewInitTimeout);
                this.headerService.changeTitle();
            }
        };
        return TitleComponent;
    }());
    TitleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-title',
                    template: "<ng-template #template>\n  <h1 class=\"text-truncate\">\n    <ng-content></ng-content>\n  </h1>\n</ng-template>\n\n"
                },] }
    ];
    TitleComponent.ctorParameters = function () { return [
        { type: HeaderService }
    ]; };
    TitleComponent.propDecorators = {
        pageTitleUpdate: [{ type: i0.Input }],
        template: [{ type: i0.ViewChild, args: ['template', { static: true },] }]
    };

    /**
     * The angular module definition for the header of the application.
     * @exports HeaderBarComponent
     * @exports TitleComponent
     * @exports TitleOutletComponent
     * @exports AppIconComponent
     * @exports AppSwitcherComponent
     */
    var HeaderModule = /** @class */ (function () {
        function HeaderModule() {
        }
        return HeaderModule;
    }());
    HeaderModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        TitleComponent,
                        HeaderBarComponent,
                        TitleOutletComponent,
                        AppIconComponent,
                        AppSwitcherComponent,
                        RightDrawerComponent
                    ],
                    imports: [
                        dropdown.BsDropdownModule,
                        UserModule,
                        SearchModule,
                        CommonModule,
                        ActionModule,
                        BreadcrumbModule,
                        NavigatorModule,
                        ProductExperienceModule
                    ],
                    exports: [
                        HeaderBarComponent,
                        TitleComponent,
                        TitleOutletComponent,
                        AppIconComponent,
                        AppSwitcherComponent,
                        RightDrawerComponent
                    ]
                },] }
    ];

    var ChangePasswordComponent = /** @class */ (function () {
        function ChangePasswordComponent(loginService, users, passwordStrengthCheckerService, options, alert) {
            this.loginService = loginService;
            this.users = users;
            this.passwordStrengthCheckerService = passwordStrengthCheckerService;
            this.options = options;
            this.alert = alert;
            this.onChangeView = new i0.EventEmitter();
            this.passwordPattern = /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/;
            this.isLoading = false;
            this.model = {
                tenantId: '',
                email: '',
                newPassword: '',
                newPasswordConfirm: ''
            };
            this.emailReadOnly = false;
            this.passwordStrengthEnforced = false;
            this.TOKEN_PARAM = 'token';
            this.EMAIL_PARAM = 'email';
        }
        ChangePasswordComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.model.tenantId = this.loginService.getTenant();
                            this.model.email = this.options.get(this.EMAIL_PARAM, '');
                            this.emailReadOnly = !!this.model.email;
                            _a = this;
                            return [4 /*yield*/, this.loginService.getPasswordStrengthEnforced()];
                        case 1:
                            _a.passwordStrengthEnforced = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ChangePasswordComponent.prototype.changePassword = function () {
            return __awaiter(this, void 0, void 0, function () {
                var passwordStrengthColor, resetPassword, res, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            passwordStrengthColor = this.passwordStrengthCheckerService.getStrengthColor(this.model.newPassword);
                            resetPassword = {
                                token: this.credentials.token,
                                email: this.model.email,
                                newPassword: this.model.newPassword,
                                passwordStrength: passwordStrengthColor.passwordStrength
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            this.isLoading = true;
                            return [4 /*yield*/, this.users.resetPassword(resetPassword, this.model.tenantId)];
                        case 2:
                            res = (_a.sent()).res;
                            if (res.status === 200) {
                                this.loginService.addSuccessMessage('password_changed');
                                this.credentials.token = undefined;
                                this.options.set(this.TOKEN_PARAM, undefined);
                                if (this.loginService.showTenantSetup()) {
                                    this.onChangeView.emit({ view: exports.LoginViews.TenantIdSetup });
                                }
                                else {
                                    this.onChangeView.emit({ view: exports.LoginViews.Credentials });
                                }
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            e_1 = _a.sent();
                            this.alert.addServerFailure(e_1);
                            return [3 /*break*/, 5];
                        case 4:
                            this.loginService.reset();
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return ChangePasswordComponent;
    }());
    ChangePasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-change-password',
                    template: "<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"changePassword()\"\n  #changePasswordForm=\"ngForm\"\n  novalidate\n>\n\n  <div\n    class=\"legend form-block center\"\n    translate\n  >\n    Change password\n  </div>\n\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n      [readonly]=\"emailReadOnly\"\n    />\n  </c8y-form-group>\n\n  <div class=\"row content-flex-50\">\n    <div class=\"col-7\">\n      <c8y-form-group>\n        <label translate>New password</label>\n        <input\n          [(ngModel)]=\"model.newPassword\"\n          #newPassword=\"ngModel\"\n          type=\"password\"\n          name=\"newPassword\"\n          class=\"form-control\"\n          placeholder=\"{{ 'New password' | translate }}\"\n          [pattern]=\"passwordPattern\"\n          autocomplete=\"new-password\"\n          [passwordStrengthEnforced]='passwordStrengthEnforced'\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"pattern\"\n            [text]=\"loginService.ERROR_MESSAGES.pattern_newPassword\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label translate>Confirm password</label>\n        <input\n          [(ngModel)]=\"model.newPasswordConfirm\"\n          #newPasswordConfirm=\"ngModel\"\n          type=\"password\"\n          name=\"newPasswordConfirm\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Confirm password' | translate }}\"\n          passwordConfirm=\"newPassword\"\n          autocomplete=\"new-password\"\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"passwordConfirm\"\n            [text]=\"loginService.ERROR_MESSAGES.passwordConfirm\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n    <div class=\"col-5\">\n      <c8y-password-strength\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword\"\n      ></c8y-password-strength>\n      <c8y-password-check-list\n        class=\"m-t-32\"\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword || !passwordStrengthEnforced\"\n      ></c8y-password-check-list>\n    </div>\n  </div>\n\n  <button\n    title=\"{{ 'Set password' | translate }}\"\n    [disabled]=\"!changePasswordForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Set password\n  </button>\n</form>\n"
                },] }
    ];
    ChangePasswordComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: client.UserService },
        { type: PasswordService },
        { type: OptionsService },
        { type: AlertService }
    ]; };
    ChangePasswordComponent.propDecorators = {
        credentials: [{ type: i0.Input }],
        onChangeView: [{ type: i0.Output }]
    };

    var CredentialsFromQueryParamsService = /** @class */ (function () {
        function CredentialsFromQueryParamsService() {
            this.queryParamsToHandle = ['tenant', 'user'];
        }
        /**
         * Retrieves any subset of credentials provided via queryParams
         * @return ICredentials found in queryParams.
         */
        CredentialsFromQueryParamsService.prototype.getCredentialsFromQueryParams = function () {
            var _this = this;
            var credentials = {};
            try {
                var params_1 = new URLSearchParams(window.location.search);
                this.queryParamsToHandle.forEach(function (param) {
                    var value = _this.getParameterFromQueryParams(params_1, param);
                    if (value) {
                        credentials[param] = value;
                    }
                });
            }
            catch (e) {
                // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
            }
            return credentials;
        };
        /**
         * Removes credentials from the queryParameters if any are present.
         * In case some credentials were present, this method will cause a page reload.
         * @return boolean if credentials were found.
         */
        CredentialsFromQueryParamsService.prototype.removeCredentialsFromQueryParams = function () {
            var _this = this;
            try {
                var params_2 = new URLSearchParams(window.location.search);
                var hasRemovedAtLeastOneParam = this.queryParamsToHandle.map(function (param) { return _this.removeParameterFromQueryParameters(params_2, param); }).reduceRight(function (prev, curr) { return prev || curr; }, false);
                if (hasRemovedAtLeastOneParam) {
                    window.location.search = params_2.toString();
                    return true;
                }
            }
            catch (e) {
                // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
            }
            return false;
        };
        /**
         * Looks for the specified key in the provided URLSearchParams.
         * If the specified key was found, it will be removed.
         * @return boolean if key was found.
         */
        CredentialsFromQueryParamsService.prototype.removeParameterFromQueryParameters = function (params, key) {
            var keyAsString = "" + key;
            if (!params.has(keyAsString)) {
                return false;
            }
            params.delete(keyAsString);
            return true;
        };
        /**
         * Looks for the specified key in the provided URLSearchParams.
         * If the specified key was found, it's value will be returned.
         * Otherwise null will be returned.
         * @return string/null.
         */
        CredentialsFromQueryParamsService.prototype.getParameterFromQueryParams = function (params, key) {
            var keyAsString = "" + key;
            if (!params.has(keyAsString)) {
                return null;
            }
            var value = params.get(keyAsString);
            if (!value) {
                return null;
            }
            return value;
        };
        return CredentialsFromQueryParamsService;
    }());
    CredentialsFromQueryParamsService.decorators = [
        { type: i0.Injectable }
    ];

    var CredentialsComponent = /** @class */ (function () {
        function CredentialsComponent(loginService, alert, ui, credentialsFromQueryParamsService) {
            this.loginService = loginService;
            this.alert = alert;
            this.ui = ui;
            this.credentialsFromQueryParamsService = credentialsFromQueryParamsService;
            this.onChangeView = new i0.EventEmitter();
            this.loginViewParams = {
                disableTenant: false,
                showTenant: false
            };
            this.LOGIN_VIEWS = exports.LoginViews;
            this.model = {};
            this.isLoading = false;
            this.showLoginForm = false;
            this.showBasicAuth = false;
            this.oauthOptions = {};
            this.showTenant = false;
            this.PASSWORD_RESET_HEADER_NAME = 'passwordresettoken';
            this.NO_PHONE_HEADER_NAME = 'NoPhoneHeader';
        }
        CredentialsComponent.prototype.ngOnInit = function () {
            var _a = this.loginService, oauthOptions = _a.oauthOptions, loginMode = _a.loginMode;
            this.model.tenant = this.loginService.getTenant();
            this.showLoginForm =
                typeof loginMode.visibleOnLoginPage === 'undefined' || loginMode.visibleOnLoginPage;
            this.showBasicAuth = loginMode.type === 'BASIC';
            this.oauthOptions = oauthOptions;
            var credentialsFromQueryParams = this.credentialsFromQueryParamsService.getCredentialsFromQueryParams();
            Object.assign(this.model, credentialsFromQueryParams);
            this.showTenant = this.loginViewParams.showTenant || this.loginService.showTenant();
        };
        CredentialsComponent.prototype.redirectToOauth = function () {
            this.loginService.redirectToOauth();
        };
        /**
         * Allows to login into the application using basic auth.
         * If successful logged in the client is set in shared/cumulocity.service.ts
         */
        CredentialsComponent.prototype.login = function () {
            return __awaiter(this, void 0, void 0, function () {
                var basicAuth, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            this.isLoading = true;
                            basicAuth = this.loginService.useBasicAuth(this.model);
                            return [4 /*yield*/, this.loginService.login(basicAuth, this.model)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            e_1 = _a.sent();
                            if (e_1.res && e_1.res.headers && e_1.res.headers.get(this.PASSWORD_RESET_HEADER_NAME)) {
                                this.handlePasswordReset(e_1.res);
                            }
                            else if (e_1.res && e_1.res.status === 401 && /pin/i.test(e_1.data.message)) {
                                this.handleSmsChallenge(e_1.data.message);
                            }
                            else if (e_1.res && e_1.res.status === 401 && /TOTP/i.test(e_1.data.message)) {
                                this.handleTotpChallenge(e_1.data.message);
                            }
                            else if (e_1.res &&
                                e_1.res.headers &&
                                e_1.res.headers.get(this.NO_PHONE_HEADER_NAME) &&
                                !this.loginService.isSupportUser(this.model)) {
                                this.handleNoPhoneNumberProvided();
                            }
                            else {
                                this.loginService.generateOauthToken(this.model);
                                this.loginService.reset();
                                this.alert.addServerFailure(e_1);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        CredentialsComponent.prototype.handlePasswordReset = function (e) {
            this.alert.removeLastDanger();
            this.model.token = e.headers.get(this.PASSWORD_RESET_HEADER_NAME);
            this.onChangeView.emit({ view: exports.LoginViews.ChangePassword, credentials: this.model });
        };
        CredentialsComponent.prototype.handleTotpChallenge = function (message) {
            if (/TOTP setup required/i.test(message)) {
                this.onChangeView.emit({ view: exports.LoginViews.TotpSetup, credentials: this.model });
            }
            else {
                this.onChangeView.emit({ view: exports.LoginViews.TotpChallenge, credentials: this.model });
            }
        };
        CredentialsComponent.prototype.handleSmsChallenge = function (message) {
            if (/pin has already been generated/i.test(message)) {
                this.alert.warning(gettext('The verification code was already sent. For a new verification code, please click on the link above.'));
            }
            this.alert.removeLastDanger();
            this.onChangeView.emit({ view: exports.LoginViews.SmsChallenge, credentials: this.model });
        };
        CredentialsComponent.prototype.handleNoPhoneNumberProvided = function () {
            this.onChangeView.emit({ view: exports.LoginViews.ProvidePhoneNumber, credentials: this.model });
            this.alert.warning(gettext('Two-factor authentication has been turned on for this account. Provide your phone number above to save it in your user profile and start receiving verification codes via SMS.'));
        };
        return CredentialsComponent;
    }());
    CredentialsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-credentials',
                    template: "<div id=\"oauth\" *ngIf=\"oauthOptions.initRequest && oauthOptions.visibleOnLoginPage\">\n  <button\n    title=\"{{ oauthOptions.buttonName | translate }}\"\n    (click)=\"redirectToOauth()\"\n    class=\"btn btn-block btn-lg form-group\"\n  >\n    <i [c8yIcon]=\"'sign-in'\" class=\"pull-left\"></i>\n    {{ oauthOptions.buttonName | translate }}\n  </button>\n</div>\n\n<form class=\"loginForm\" (ngSubmit)=\"login()\" #loginForm=\"ngForm\" *ngIf=\"showLoginForm\" novalidate>\n  <h1>\n    <span\n      class=\"legend form-block center\"\n      *ngIf=\"!(oauthOptions.initRequest && oauthOptions.visibleOnLoginPage); else orLegend\"\n      translate\n    >\n      Login\n    </span>\n  </h1>\n  <ng-template #orLegend>\n    <div class=\"legend form-block center\" translate>or</div>\n  </ng-template>\n\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"showTenant\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      [readonly]=\"loginViewParams.disableTenant\"\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"user\" translate>Username</label>\n    <input\n      [(ngModel)]=\"model.user\"\n      #user=\"ngModel\"\n      type=\"text\"\n      name=\"user\"\n      id=\"user\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. joe or joe.doe@example.com`LOCALIZE`' | translate }}\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"password\" translate>Password</label>\n    <input\n      [(ngModel)]=\"model.password\"\n      #password=\"ngModel\"\n      type=\"password\"\n      name=\"password\"\n      id=\"password\"\n      class=\"form-control\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <div class=\"form-group\" *ngIf=\"showBasicAuth\">\n    <label title=\"{{ 'Remember me' | translate }}\" class=\"c8y-checkbox\">\n      <input type=\"checkbox\" name=\"remember\" [(ngModel)]=\"loginService.rememberMe\" />\n      <span></span>\n      <span>{{ 'Remember me' | translate }}</span>\n    </label>\n  </div>\n  <button\n    title=\"{{ 'Log in' | translate }}\"\n    [disabled]=\"!loginForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Log in' | translate }}\n  </button>\n  <div class=\"text-center m-t-8\">\n    <button\n      title=\"{{ 'Forgot password?' | translate }}\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.RecoverPassword })\"\n    >\n      {{ 'Forgot password?' | translate }}\n    </button>\n  </div>\n  <div class=\"text-center m-t-8\" *ngIf=\"!!(ui.state$ | async).loginExtraLink\">\n    <a\n      role=\"button\"\n      title=\"{{ (ui.state$ | async).loginExtraLink.label }}\"\n      [href]=\"(ui.state$ | async).loginExtraLink.url\"\n      class=\"btn btn-link btn-sm\"\n    >\n      {{ (ui.state$ | async).loginExtraLink.label }}\n    </a>\n  </div>\n</form>\n"
                },] }
    ];
    CredentialsComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: AlertService },
        { type: AppStateService },
        { type: CredentialsFromQueryParamsService }
    ]; };
    CredentialsComponent.propDecorators = {
        onChangeView: [{ type: i0.Output }],
        loginViewParams: [{ type: i0.Input }]
    };

    var LoginComponent = /** @class */ (function () {
        /**
         * Just DI.
         */
        function LoginComponent(loginService, options, alert, credentialsFromQueryParamsService) {
            this.loginService = loginService;
            this.options = options;
            this.alert = alert;
            this.credentialsFromQueryParamsService = credentialsFromQueryParamsService;
            this.currentView = exports.LoginViews.None;
            this.LOGIN_VIEWS = exports.LoginViews;
            this.disabled = false;
            this.credentials = {};
            this.loginViewParams = {};
            this.displayAlerts = false;
            this.TOKEN_PARAM = 'token';
        }
        LoginComponent.prototype.ngOnInit = function () {
            var token = this.getResetPasswordToken();
            if (this.loginService.isFirstLogin) {
                if (!token) {
                    this.loginAutomatically();
                }
                else {
                    this.credentials.token = token;
                    this.reset();
                }
            }
            this.loginService.isFirstLogin = false;
        };
        LoginComponent.prototype.ngOnDestroy = function () {
            // make sure that we do not have any queryParameters related to credentials after logging in or even if we were already logged in.
            this.credentialsFromQueryParamsService.removeCredentialsFromQueryParams();
        };
        LoginComponent.prototype.handleLoginTemplate = function (event) {
            this.currentView = event.view;
            this.credentials = event.credentials || {};
            this.loginViewParams = event.loginViewParams || {};
        };
        LoginComponent.prototype.onkeyup = function (event) {
            if (event.key !== 'Enter') {
                this.loginService.cleanMessages();
            }
        };
        LoginComponent.prototype.reset = function () {
            this.loginService.reset();
            this.setView();
            this.loginService.cleanMessages();
        };
        LoginComponent.prototype.loginAutomatically = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1, preferredLoginOptionType;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.loginService.login()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            preferredLoginOptionType = this.loginService.loginMode.type;
                            if (preferredLoginOptionType === client.TenantLoginOptionType.OAUTH2) {
                                this.loginService.redirectToOauth();
                            }
                            else {
                                this.reset();
                                if (preferredLoginOptionType === client.TenantLoginOptionType.OAUTH2_INTERNAL && window.location.protocol !== 'https:') {
                                    this.alert.danger(gettext('Current login mode only supports HTTPS.'));
                                }
                                else if (e_1.res && e_1.res.status === 403) {
                                    this.alert.addServerFailure(e_1);
                                }
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        LoginComponent.prototype.setView = function () {
            if (this.credentials && this.credentials.token) {
                this.handleLoginTemplate({ view: exports.LoginViews.ChangePassword, credentials: this.credentials });
            }
            else if (this.loginService.showTenantSetup()) {
                this.handleLoginTemplate({ view: exports.LoginViews.TenantIdSetup });
            }
            else {
                this.handleLoginTemplate({ view: exports.LoginViews.Credentials });
            }
        };
        LoginComponent.prototype.getResetPasswordToken = function () {
            var token = this.options.get(this.TOKEN_PARAM);
            if (token) {
                this.options.set(this.TOKEN_PARAM, undefined); // only use once
            }
            return token;
        };
        return LoginComponent;
    }());
    LoginComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-login',
                    template: "<div\n  class=\"loading card fadeInUp animated shadow5\"\n  *ngIf=\"currentView !== LOGIN_VIEWS.None\"\n  [ngSwitch]=\"currentView\"\n>\n  <div class=\"card-block p-b-0\">\n    <img alt=\"\" class=\"mainlogo\">\n    <c8y-credentials\n      *ngSwitchCase=\"LOGIN_VIEWS.Credentials\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [loginViewParams]=\"loginViewParams\"\n    ></c8y-credentials>\n    <c8y-recover-password\n      *ngSwitchCase=\"LOGIN_VIEWS.RecoverPassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-recover-password>\n    <c8y-change-password\n      *ngSwitchCase=\"LOGIN_VIEWS.ChangePassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-change-password>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpChallenge\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpSetup\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-sms-challenge\n      *ngSwitchCase=\"LOGIN_VIEWS.SmsChallenge\"\n      (onCancel)=\"reset()\"\n      [credentials]=\"credentials\"\n    ></c8y-sms-challenge>\n\n    <c8y-provide-phone-number\n      *ngSwitchCase=\"LOGIN_VIEWS.ProvidePhoneNumber\"\n      (onCancel)=\"reset()\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-provide-phone-number>\n    <c8y-tenant-id-setup\n      *ngSwitchCase=\"LOGIN_VIEWS.TenantIdSetup\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-tenant-id-setup>\n\n    <c8y-alert-outlet position=\"static\"></c8y-alert-outlet>\n  </div>\n</div>\n"
                },] }
    ];
    LoginComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: OptionsService },
        { type: AlertService },
        { type: CredentialsFromQueryParamsService }
    ]; };
    LoginComponent.propDecorators = {
        name: [{ type: i0.Input }],
        onkeyup: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }]
    };

    var RecoverPasswordComponent = /** @class */ (function () {
        function RecoverPasswordComponent(users, loginService) {
            this.users = users;
            this.loginService = loginService;
            this.onChangeView = new i0.EventEmitter();
            this.LOGIN_VIEWS = exports.LoginViews;
            this.isLoading = false;
            this.model = {
                email: '',
                tenantId: ''
            };
        }
        RecoverPasswordComponent.prototype.ngOnInit = function () {
            this.model.tenantId = this.loginService.getTenant();
        };
        RecoverPasswordComponent.prototype.resetPassword = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, , 2, 3]);
                            this.isLoading = true;
                            return [4 /*yield*/, this.users.sendPasswordResetMail(this.model.email, this.model.tenantId)];
                        case 1:
                            res = (_a.sent()).res;
                            if (res.status === 200) {
                                this.loginService.addSuccessMessage('password_reset_requested');
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            this.loginService.reset();
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return RecoverPasswordComponent;
    }());
    RecoverPasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-recover-password',
                    template: "<form #resetForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n  <div class=\"legend form-block center\" translate>Forgot password?</div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Reset password' | translate }}\"\n    [disabled]=\"!resetForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Reset password\n  </button>\n  <div class=\"text-center m-t-8\">\n    <p>\n      <button\n        title=\"{{ 'Login' | translate }}\"\n        class=\"btn btn-link btn-sm\"\n        (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.Credentials })\"\n        translate\n      >\n        Login\n      </button>\n    </p>\n  </div>\n</form>\n"
                },] }
    ];
    RecoverPasswordComponent.ctorParameters = function () { return [
        { type: client.UserService },
        { type: LoginService }
    ]; };
    RecoverPasswordComponent.propDecorators = {
        onChangeView: [{ type: i0.Output }]
    };

    var TotpAuthComponent = /** @class */ (function () {
        function TotpAuthComponent(loginService, userService, alert) {
            this.loginService = loginService;
            this.userService = userService;
            this.alert = alert;
            this.onCancel = new i0.EventEmitter();
            this.LOGIN_VIEWS = exports.LoginViews;
            this.loading = false;
            this.hasError = false;
            this.isSetup = false;
        }
        /**
         * In case of a setup we need the user to be authorized
         * first.
         */
        TotpAuthComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.view === this.LOGIN_VIEWS.TotpSetup)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.loginService.switchLoginMode(this.credentials)];
                        case 1:
                            _a.sent();
                            this.isSetup = true;
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        TotpAuthComponent.prototype.onTotpSuccess = function (code) {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 6, 7, 8]);
                            this.loading = true;
                            this.hasError = false;
                            this.credentials.tfa = code;
                            if (!this.isSetup) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.userService.activateTotp()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, this.loginService.switchLoginMode(this.credentials)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.verifyAppAccess()];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.authFulfilled()];
                        case 5:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 6:
                            e_1 = _a.sent();
                            this.alert.removeLastDanger();
                            if (e_1.data && e_1.data.message === 'Access is denied') {
                                this.alert.addServerFailure(e_1);
                            }
                            if (e_1.data && e_1.data.message === 'Authentication failed! : User account is locked') {
                                this.alert.warning(gettext('Authentication failed due to: user account is locked.'));
                            }
                            else {
                                this.hasError = true;
                            }
                            return [3 /*break*/, 8];
                        case 7:
                            this.loading = false;
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        return TotpAuthComponent;
    }());
    TotpAuthComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-totp-auth',
                    template: "<div\n  class=\"legend form-block center\"\n  translate\n>\n  Two-factor authentication\n</div>\n\n<c8y-totp-setup *ngIf=\"isSetup\">\n</c8y-totp-setup>\n<c8y-totp-challenge\n  [loading]=\"loading\"\n  [hasError]=\"hasError\"\n  [verify]=\"view === LOGIN_VIEWS.TotpSetup\"\n  (onSuccess)=\"onTotpSuccess($event)\"\n  (totpUnconfirmedEmitter)=\"onCancel.emit()\"\n></c8y-totp-challenge>\n"
                },] }
    ];
    TotpAuthComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: client.UserService },
        { type: AlertService }
    ]; };
    TotpAuthComponent.propDecorators = {
        credentials: [{ type: i0.Input }],
        view: [{ type: i0.Input }],
        onCancel: [{ type: i0.Output }]
    };

    var StrengthValidatorService = /** @class */ (function () {
        function StrengthValidatorService(passwordService) {
            this.passwordService = passwordService;
        }
        StrengthValidatorService.prototype.isStrong = function (password) {
            return this.isPasswordGreen(this.passwordService.getStrengthColor(password).passwordStrength);
        };
        StrengthValidatorService.prototype.isPasswordGreen = function (strength) {
            return strength === client.PasswordStrength.GREEN;
        };
        return StrengthValidatorService;
    }());
    StrengthValidatorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function StrengthValidatorService_Factory() { return new StrengthValidatorService(i0__namespace.ɵɵinject(PasswordService)); }, token: StrengthValidatorService, providedIn: "root" });
    StrengthValidatorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    StrengthValidatorService.ctorParameters = function () { return [
        { type: PasswordService }
    ]; };

    var PasswordStrengthValidatorDirective = /** @class */ (function () {
        function PasswordStrengthValidatorDirective(passwordService) {
            this.passwordService = passwordService;
        }
        Object.defineProperty(PasswordStrengthValidatorDirective.prototype, "passwordStrengthEnforced", {
            set: function (value) {
                this.forced = value;
            },
            enumerable: false,
            configurable: true
        });
        PasswordStrengthValidatorDirective.prototype.validate = function (control) {
            var strengthFulfilled = this.passwordService.isStrong(control.value || '');
            var enforcementForcedAndNotFulfilled = this.forced && !strengthFulfilled;
            return enforcementForcedAndNotFulfilled ? { passwordStrength: true } : null;
        };
        return PasswordStrengthValidatorDirective;
    }());
    PasswordStrengthValidatorDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[passwordStrengthEnforced]',
                    providers: [{ provide: forms.NG_VALIDATORS, useExisting: PasswordStrengthValidatorDirective, multi: true }]
                },] }
    ];
    PasswordStrengthValidatorDirective.ctorParameters = function () { return [
        { type: StrengthValidatorService }
    ]; };
    PasswordStrengthValidatorDirective.propDecorators = {
        passwordStrengthEnforced: [{ type: i0.Input }]
    };

    /**
     * `TenantIdSetupComponent` is intended to be shown when tenant's id cannot be determined based on the current URL.
     * It asks the user to provide target tenant's id and then it fetches login options for this tenant.
     * In case of OAI-Secure login mode, login options will contain `domain` property set by backend.
     * The component will redirect user to this domain, preserving URL path and params.
     */
    var TenantIdSetupComponent = /** @class */ (function () {
        function TenantIdSetupComponent(client, ui, loginService, alert, translateService) {
            this.client = client;
            this.ui = ui;
            this.loginService = loginService;
            this.alert = alert;
            this.translateService = translateService;
            this.onChangeView = new i0.EventEmitter();
            this.LOGIN_VIEWS = exports.LoginViews;
            this.model = {
                tenant: ''
            };
        }
        /**
         * Sets up login mode for particular tenant. In case of OAI-Secure will redirect user to tenant domain.
         */
        TenantIdSetupComponent.prototype.setupLoginMode = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.client.tenant = this.model.tenant;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.ui.refreshLoginOptions()];
                        case 2:
                            _a.sent();
                            this.loginService.initLoginOptions();
                            this.redirectToCorrectDomain();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            if (e_1.res && e_1.res.status === 401) {
                                this.alert.danger(this.translateService.instant(gettext('Could not find tenant with ID "{{ tenantId }}".'), { tenantId: this.model.tenant }));
                            }
                            else {
                                this.alert.addServerFailure(e_1);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Redirects to tenant domain when login mode contains domain.
         */
        TenantIdSetupComponent.prototype.redirectToCorrectDomain = function () {
            var loginRedirectDomain = this.loginService.loginMode.loginRedirectDomain;
            if (loginRedirectDomain) {
                var alreadyOnCorrectDomain = window.location.href.includes(loginRedirectDomain);
                if (!alreadyOnCorrectDomain) {
                    this.loginService.redirectToDomain(loginRedirectDomain);
                }
                else {
                    this.onChangeView.emit({
                        view: exports.LoginViews.Credentials,
                        loginViewParams: { showTenant: true, disableTenant: true }
                    });
                }
            }
            else {
                this.onChangeView.emit({ view: exports.LoginViews.Credentials });
            }
        };
        return TenantIdSetupComponent;
    }());
    TenantIdSetupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-tenant-id-setup',
                    template: "<form #tenantIdSetupForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"setupLoginMode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Tenant setup\n  </div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Apply' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"!tenantIdSetupForm.form.valid\"\n    translate\n  >\n    Apply\n  </button>\n</form>\n"
                },] }
    ];
    TenantIdSetupComponent.ctorParameters = function () { return [
        { type: client.FetchClient },
        { type: AppStateService },
        { type: LoginService },
        { type: AlertService },
        { type: i2.TranslateService }
    ]; };
    TenantIdSetupComponent.propDecorators = {
        onChangeView: [{ type: i0.Output }]
    };

    /**
     * The angular module definition for the login.
     * @exports LoginComponent
     */
    var LoginModule = /** @class */ (function () {
        function LoginModule() {
        }
        LoginModule.forRoot = function () {
            return {
                ngModule: LoginModule,
                providers: LoginModule.providers()
            };
        };
        LoginModule.providers = function () {
            return [LoginService, CredentialsFromQueryParamsService];
        };
        return LoginModule;
    }());
    LoginModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        LoginComponent,
                        RecoverPasswordComponent,
                        ChangePasswordComponent,
                        CredentialsComponent,
                        TotpAuthComponent,
                        PasswordStrengthValidatorDirective,
                        TenantIdSetupComponent
                    ],
                    imports: [
                        forms.FormsModule,
                        tooltip.TooltipModule,
                        CommonModule,
                        AuthenticationModule,
                        AlertModule,
                        FormsModule
                    ],
                    exports: [LoginComponent]
                },] }
    ];

    var PluginsService = /** @class */ (function () {
        function PluginsService(applicationService, appState) {
            this.applicationService = applicationService;
            this.appState = appState;
        }
        PluginsService.prototype.listPackages = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.list({ pageSize: 2000 })];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data.filter(function (app) { return app.exports || (app.manifest && app.manifest.exports); })];
                    }
                });
            });
        };
        PluginsService.prototype.listVersions = function (forPackage) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.binary(forPackage).listPlugins()];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data
                                    .map(function (plugin) { return (Object.assign(Object.assign({}, plugin.pluginPackage), { version: plugin.pluginName })); })
                                    .filter(function (plugin) { return plugin.exports; })];
                    }
                });
            });
        };
        PluginsService.prototype.listInstalled = function (forApp, flat) {
            if (flat === void 0) { flat = true; }
            return __awaiter(this, void 0, void 0, function () {
                var app, c8yJson, flatList, _loop_1, key;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getApplication(forApp)];
                        case 1:
                            app = _a.sent();
                            return [4 /*yield*/, this.getCumulocityJsonFile(app)];
                        case 2:
                            c8yJson = _a.sent();
                            if (flat) {
                                flatList = [];
                                _loop_1 = function (key) {
                                    if (c8yJson.imports.hasOwnProperty(key)) {
                                        flatList = __spreadArray(__spreadArray([], __read(flatList)), __read(c8yJson.imports[key].map(function (imp) { return /@/.test(key) ? key + "/" + imp : key + "@latest/" + imp; })));
                                    }
                                };
                                for (key in c8yJson.imports) {
                                    _loop_1(key);
                                }
                                return [2 /*return*/, flatList];
                            }
                            return [2 /*return*/, c8yJson.imports];
                    }
                });
            });
        };
        PluginsService.prototype.addByName = function (addTo, pluginName) {
            return __awaiter(this, void 0, void 0, function () {
                var name, contextPath, pkg;
                return __generator(this, function (_a) {
                    name = pluginName.split('//').pop();
                    contextPath = pluginName.split('//').shift();
                    pkg = {
                        contextPath: contextPath
                    };
                    return [2 /*return*/, this.add(addTo, pkg, name)];
                });
            });
        };
        PluginsService.prototype.removeByName = function (removeFrom, pluginName) {
            return __awaiter(this, void 0, void 0, function () {
                var name, contextPath, pkg;
                return __generator(this, function (_a) {
                    name = pluginName.split('/').pop();
                    contextPath = /@latest/.test(pluginName)
                        ? pluginName.split('@').shift()
                        : pluginName.split('/').shift();
                    pkg = {
                        contextPath: contextPath
                    };
                    return [2 /*return*/, this.remove(removeFrom, pkg, name)];
                });
            });
        };
        PluginsService.prototype.add = function (addToApp, fromPackage, name) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.addOrRemove(addToApp, fromPackage, name, true)];
                });
            });
        };
        PluginsService.prototype.remove = function (removeFromApp, fromPackage, name) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.addOrRemove(removeFromApp, fromPackage, name, false)];
                });
            });
        };
        PluginsService.prototype.updateRemotesInCumulocityJson = function (app, remotes) {
            return __awaiter(this, void 0, void 0, function () {
                var c8yJson;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getCumulocityJsonFile(app)];
                        case 1:
                            c8yJson = _a.sent();
                            return [2 /*return*/, this.applicationService.storeAppManifest(app, Object.assign(Object.assign({}, c8yJson), { remotes: remotes }))];
                    }
                });
            });
        };
        PluginsService.prototype.addOrRemove = function (addToApp, fromPackage, name, add) {
            if (add === void 0) { add = true; }
            return __awaiter(this, void 0, void 0, function () {
                var application, pkg, c8yJson, pkgImport;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getApplication(addToApp)];
                        case 1:
                            application = _a.sent();
                            return [4 /*yield*/, this.getApplication(fromPackage)];
                        case 2:
                            pkg = _a.sent();
                            return [4 /*yield*/, this.getCumulocityJsonFile(application)];
                        case 3:
                            c8yJson = _a.sent();
                            pkgImport = new Set(c8yJson.imports[pkg.contextPath]);
                            if (add) {
                                pkgImport.add(name);
                            }
                            else {
                                pkgImport.delete(name);
                            }
                            c8yJson.imports[pkg.contextPath] = Array.from(pkgImport);
                            return [4 /*yield*/, this.applicationService.storeAppManifest(application, c8yJson)];
                        case 4:
                            _a.sent();
                            return [2 /*return*/, c8yJson];
                    }
                });
            });
        };
        PluginsService.prototype.getCumulocityJsonFile = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var c8yJson;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.getAppManifest(app)];
                        case 1:
                            c8yJson = _a.sent();
                            if (!c8yJson.imports) {
                                c8yJson.imports = {};
                            }
                            return [2 /*return*/, c8yJson];
                    }
                });
            });
        };
        PluginsService.prototype.getApplication = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (typeof app !== 'number' && app.contextPath) {
                                return [2 /*return*/, app];
                            }
                            return [4 /*yield*/, this.applicationService.detail(app)];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        return PluginsService;
    }());
    PluginsService.decorators = [
        { type: i0.Injectable }
    ];
    PluginsService.ctorParameters = function () { return [
        { type: i4.ApplicationService },
        { type: AppStateService }
    ]; };

    var PluginsModule = /** @class */ (function () {
        function PluginsModule() {
        }
        return PluginsModule;
    }());
    PluginsModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [PluginsService, PluginsResolveService]
                },] }
    ];

    /**
     * Renders a list of properties of an object.
     *
     * @example
     * ```html
     * <c8y-properties-list
     *   icon="info"
     *   [properties]="properties"
     *   [data]="options"
     *   [emptyLabel]="'-'"
     *   [title]="'Application properties' | translate"
     * ></c8y-properties-list>
     * ```
     */
    var PropertiesListComponent = /** @class */ (function () {
        function PropertiesListComponent() {
            /**
             * A string array of groups that are shown. If noParse is set to false,
             * each complex key will form a group.
             */
            this.groups = [];
            /**
             * The component tries to parse the properties and resolve keys and types. You can
             * avoid this by setting this property to true.
             */
            this.noParse = false;
            this._data = {};
        }
        Object.defineProperty(PropertiesListComponent.prototype, "properties", {
            /**
             * @ignore
             */
            get: function () {
                if (this.noParse) {
                    return this._properties;
                }
                var propsWithGroups = __spreadArray(__spreadArray([], __read(this._properties)), __read(this.groups.map(function (group) { return ({
                    key: group,
                    label: group,
                    value: group,
                    type: 'group'
                }); }))).filter(function (item) { return !!item.value; });
                return lodashEs.sortBy(propsWithGroups, ['key']);
            },
            /**
             * The properties that this list should display.
             */
            set: function (items) {
                this._properties = this.parseProperties(items);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PropertiesListComponent.prototype, "data", {
            /**
             * An object where the properties keys are resolved from.
             */
            set: function (data) {
                this._data = data;
                this._properties = this.parseProperties(this._properties);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Checks if a certain property has an group associated.
         * @param item The property to verify.
         */
        PropertiesListComponent.prototype.hasGroup = function (item) {
            if (!item.key) {
                return false;
            }
            var keyPath = item.key.split('.');
            return keyPath.length > 1 && this.groups.includes(keyPath[0]);
        };
        /**
         * @ignore
         */
        PropertiesListComponent.prototype.ngOnInit = function () {
            this._properties = this.parseProperties(this._properties);
        };
        /**
         * Used in trackBy to avoid recalculation all the time.
         * @ignore
         */
        PropertiesListComponent.prototype.identity = function (index, item) {
            return item.value;
        };
        PropertiesListComponent.prototype.parseProperties = function (items) {
            var _this = this;
            if (items === void 0) { items = []; }
            return items.map(function (item) { return _this.parsePropertyItem(item); });
        };
        PropertiesListComponent.prototype.parsePropertyItem = function (item) {
            if (this.noParse) {
                return item;
            }
            item.value = this.resolveValueFromKey(item);
            item.value = item.transform && item.value ? item.transform(item.value) : item.value;
            item.type = this.resolveType(item);
            item.value = this.attachEmptyLabel(item);
            return item;
        };
        PropertiesListComponent.prototype.resolveValueFromKey = function (item) {
            if (item.key && this._data) {
                var keyPath = item.key.split('.');
                var rootGroup = keyPath[0];
                if (keyPath.length > 1 && !this.groups.includes(rootGroup)) {
                    this.groups.push(rootGroup);
                }
                return lodashEs.get(this._data, item.key);
            }
            return item.value;
        };
        PropertiesListComponent.prototype.resolveType = function (item) {
            return Array.isArray(item.value) ? 'array' : item.action && item.value ? 'link' : 'string';
        };
        PropertiesListComponent.prototype.attachEmptyLabel = function (item) {
            if (!item.value) {
                return this.emptyLabel;
            }
            return item.value;
        };
        return PropertiesListComponent;
    }());
    PropertiesListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-properties-list',
                    template: "<p class=\"m-b-8\">\n  <i *ngIf=\"icon\" [c8yIcon]=\"icon\" class=\"text-info m-r-8\"></i>\n  <span class=\"text-label-small\">{{ title | translate }}</span>\n</p>\n<ul class=\"list-unstyled small\">\n  <li\n    class=\"p-t-4 p-b-4 d-flex\"\n    *ngFor=\"let prop of properties; let i = index; trackBy: identity\"\n    [ngClass]=\"{ 'separator-top-bottom': i === 0, 'separator-bottom': i > 0 }\"\n  >\n    <div\n      [ngClass]=\"{\n        'm-l-16': hasGroup(prop),\n        legend: prop.type === 'group',\n        'form-block': prop.type === 'group',\n        'm-b-0': prop.type === 'group',\n        'm-t-4': prop.type === 'group'\n      }\"\n      class=\"small text-medium text-nowrap m-r-4\"\n    >\n      {{ prop.label | translate }}\n    </div>\n    <span [ngSwitch]=\"prop.type\" class=\"flex-item-right\">\n      <span *ngSwitchCase=\"'string'\" class=\"flex-item-right\">{{ prop.value }}</span>\n      <a\n        *ngSwitchCase=\"'link'\"\n        (click)=\"prop.action($event, prop)\"\n        class=\"flex-item-right pointer text-truncate m-l-4\"\n        >{{ prop.value }}</a\n      >\n      <span *ngSwitchCase=\"'array'\">\n        <span\n          class=\"label label-default m-l-4 text-truncate-wrap\"\n          *ngFor=\"let propTag of prop.value\"\n          (click)=\"prop.action && prop.action($event, propTag)\"\n          [ngClass]=\"{\n            pointer: prop.action\n          }\"\n          >{{ propTag }}</span\n        >\n      </span>\n    </span>\n  </li>\n</ul>\n"
                },] }
    ];
    PropertiesListComponent.propDecorators = {
        properties: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        groups: [{ type: i0.Input }],
        noParse: [{ type: i0.Input }],
        emptyLabel: [{ type: i0.Input }]
    };

    var PropertiesListModule = /** @class */ (function () {
        function PropertiesListModule() {
        }
        return PropertiesListModule;
    }());
    PropertiesListModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PropertiesListComponent],
                    imports: [CommonModule],
                    exports: [PropertiesListComponent],
                    providers: []
                },] }
    ];

    /**
     * Template to be used to override the icons inside the step header.
     */
    var C8yStepperIcon = /** @class */ (function () {
        function C8yStepperIcon(templateRef) {
            this.templateRef = templateRef;
        }
        return C8yStepperIcon;
    }());
    C8yStepperIcon.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'ng-template[c8yStepperIcon]'
                },] }
    ];
    C8yStepperIcon.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    C8yStepperIcon.propDecorators = {
        name: [{ type: i0.Input, args: ['c8yStepperIcon',] }]
    };

    /**
     * C8yStepper extends the CdkStepper. You can use cdk based functionality and inputs.
     * Additional to that you are able to modify the behavior and also the look and feel when
     * using the C8yStepper.
     *
     * The C8yStepper is used to present any step-based process to the user.
     * A stepper, C8yStepper and/or CdkStepper is the parent of cdk-steps.
     * Each cdk-step represents one step in the whole process that you want to provide to the user.
     *
     * The C8yStepper will create, based on the given cdk-steps, a kind of stepper-progress which looks like this:
     * (1)---(2)---(3)---(n)
     * The stepper will handle the state of each step and provides styles for active steps, done-steps or in edit-mode.
     * You are able to override icons for each step in the stepper-progress with a template. You are also able to activate
     * default-icons for states like 'edit' and 'done'.
     *
     * To force users through every provided step, set the stepper to 'linear'.
     * This will disable the possibility to move for example from step one to step three.
     *
     * Whenever it comes to validation try to use formGroups. It is possible to
     * assign a formGroup to a cdk-step input called [stepControl], which automatically respects the
     * validation-rules that you created for this formGroup. If fields are required but not filled or
     * any other validation, like a pattern, is not matched the formGroup will be invalid. In this case
     * stepping in a linear stepper to the next step gets impossible.
     *
     * If there is the need to execute asynchronous code you have at least two possibilities.
     * First: As you learned, a cdk-step works with formGroups and Validators, so you are able to use
     * asyncValidators as well.
     * Second: The C8yStepper provides an event-emitter onStepChange which is called whenever a step-button (1)--(2)--(n)
     * in the stepper-progress is clicked. The event of this emitter holds the index of the step as number. You can
     * use this EventEmitter to call for example a custom navigate-method which performs first any async-call and then moves
     * on to the given step.
     *
     * @example
     * ```
     * <c8y-stepper
     * (onStepChange)="navigate($event)"
     * [disableDefaultIcons]="{ edit: true, done: false }"
     * [customClasses]="['m-l-40', 'm-r-40', 'm-t-32']"
     * linear
     * >
     * <!-- override icons -->
     * <ng-template c8yStepperIcon="final">
     *   <span [c8yIcon]="'hand-peace-o'"></span>
     * </ng-template>
     *
     * <cdk-step [stepControl]="formGroupStepOne" label="Name of the hero">
     *   <div class="m-l-40 m-r-40 m-t-32">
     *     <h4 class="p-b-8" translate>What is the name of your hero?</h4>
     *     <c8y-form-group>
     *      <div [formGroup]="formGroupStepOne">
     *       <input
     *         class="form-control"
     *         type="text"
     *         formControlName="name"
     *         placeholder="Mister X"
     *         #nameRef
     *         required
     *       />
     *       <c8y-messages>
     *         <c8y-message *ngIf="!formGroupStepOne.untouched && !nameRef.value" translate
     *           >Enter the name of the Superhero</c8y-message
     *         >
     *       </c8y-messages>
     *      </div>
     *     </c8y-form-group>
     *   </div>
     *   <c8y-stepper-buttons></c8y-stepper-buttons>
     * </cdk-step>
     * <cdk-step>
     *  ...
     * </cdk-step state="final">
     * </c8y-stepper>
     * ```
     */
    var C8yStepper = /** @class */ (function (_super) {
        __extends(C8yStepper, _super);
        /**
         * @ignore
         */
        function C8yStepper(dir, changeDetectorRef, elementRef) {
            var _this = _super.call(this, dir, changeDetectorRef, elementRef, document) || this;
            _this.dir = dir;
            _this.changeDetectorRef = changeDetectorRef;
            _this.elementRef = elementRef;
            /**
             * Optional
             * Indicator if icons for edit and done state should be shown in step-header buttons
             */
            _this.disableDefaultIcons = { edit: true, done: true };
            /**
             * Optional
             * Possibility to hide the stepper progress completely.
             */
            _this.hideStepProgress = false;
            /**
             * Will emit the step index number whenever a step-header button was clicked
             * It listens to the stepIndex Subject.
             */
            _this.onStepChange = new i0.EventEmitter();
            /** Consumer-specified template-refs to be used to override the header icons. */
            _this._iconOverrides = {};
            _this._stepIndex = new rxjs.Subject();
            return _this;
        }
        /**
         * @ignore
         */
        C8yStepper.prototype.ngAfterContentInit = function () {
            var _this = this;
            _super.prototype.ngAfterContentInit.call(this);
            this._icons.forEach(function (_c) {
                var name = _c.name, templateRef = _c.templateRef;
                return (_this._iconOverrides[name] = templateRef);
            });
            this._stepIndexSubscription = this._stepIndex.subscribe(function (index) { return _this.onStepChange.emit(index); });
        };
        /**
         * @ignore
         */
        C8yStepper.prototype.ngOnDestroy = function () {
            if (this._stepIndexSubscription && !this._stepIndexSubscription.closed) {
                this._stepIndexSubscription.unsubscribe();
            }
        };
        /**
         * Manipulates the state based on the disabledDefaultIcons Input()
         * Changing edit or done to false will change the icons within step-header buttons
         * @param index step index
         * @param state step state, like 'done', 'edit', 'error'
         */
        C8yStepper.prototype.getIndicatorType = function (index, state) {
            var stepState = this._getIndicatorType(index, state);
            var _state = state;
            switch (stepState) {
                case stepper.STEP_STATE.EDIT:
                    if (!this.disableDefaultIcons.edit) {
                        _state = stepper.STEP_STATE.EDIT;
                    }
                    break;
                case stepper.STEP_STATE.DONE:
                    if (!this.disableDefaultIcons.done) {
                        _state = stepper.STEP_STATE.DONE;
                    }
                    else {
                        _state = '_done';
                    }
                    break;
            }
            return _state;
        };
        /**
         * Pushes the step index to the subject
         * @param index step index
         */
        C8yStepper.prototype.setIndex = function (index) {
            var _a, _b;
            var steps = this.steps.toArray();
            if (!((_b = (_a = steps[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.stepControl) === null || _b === void 0 ? void 0 : _b.invalid) || index < this.selectedIndex) {
                this.selectedIndex = index;
            }
        };
        return C8yStepper;
    }(stepper.CdkStepper));
    C8yStepper.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-stepper',
                    template: "<ul *ngIf=\"!hideStepProgress\" class=\"c8y-stepper\" [ngClass]=\"customClasses\">\n  <li *ngFor=\"let step of steps; let i = index\">\n    <c8y-stepper-progress\n      [iconOverrides]=\"_iconOverrides\"\n      [state]=\"getIndicatorType(i, step.state)\"\n      [index]=\"i\"\n      [selected]=\"selectedIndex === i\"\n      [disabled]=\"disableProgressButtons\"\n      (onStepClicked)=\"setIndex($event)\"\n      title=\"{{ step.label | translate }}\"\n      [ngClass]=\"{'active': selectedIndex === i}\"\n    >\n    </c8y-stepper-progress>\n    <div class=\"c8y-step__label\"  title=\"{{ step.label | translate }}\">\n      {{ step.label | translate }}\n    </div>\n  </li>\n</ul>\n<ng-container [ngTemplateOutlet]=\"selected.content\"></ng-container>\n",
                    providers: [{ provide: stepper.CdkStepper, useExisting: C8yStepper }]
                },] }
    ];
    C8yStepper.ctorParameters = function () { return [
        { type: bidi.Directionality },
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef }
    ]; };
    C8yStepper.propDecorators = {
        disableDefaultIcons: [{ type: i0.Input }],
        disableProgressButtons: [{ type: i0.Input }],
        customClasses: [{ type: i0.Input }],
        hideStepProgress: [{ type: i0.Input }],
        onStepChange: [{ type: i0.Output }],
        _icons: [{ type: i0.ContentChildren, args: [C8yStepperIcon, { descendants: true },] }]
    };

    var C8yStepperProgress = /** @class */ (function () {
        function C8yStepperProgress() {
            /** Emits the index: number of the step which was clicked */
            this.onStepClicked = new i0.EventEmitter();
        }
        /** Called on click and emits the step index */
        C8yStepperProgress.prototype.stepSelected = function () {
            this.onStepClicked.emit(this.index);
        };
        return C8yStepperProgress;
    }());
    C8yStepperProgress.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-stepper-progress',
                    template: "<button\n  type=\"button\"\n  class=\"c8y-step\"\n  [ngClass]=\"{\n    active: selected,\n    'step-done': state === 'done' || state === '_done',\n    'step-error': state === 'error',\n    'step-warning': state === 'warning'\n  }\"\n  [disabled]=\"disabled\"\n  [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\"\n  (click)=\"stepSelected()\"\n>\n  <ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides[state]\"></ng-container>\n  <ng-container *ngSwitchDefault [ngSwitch]=\"state\">\n    <span *ngSwitchCase=\"'edit'\">\n      <span [c8yIcon]=\"'edit'\"></span>\n    </span>\n    <span *ngSwitchCase=\"'done'\">\n      <span class=\"m-t-4\" [c8yIcon]=\"'check'\"></span>\n    </span>\n    <span *ngSwitchDefault> {{ index + 1 }} </span>\n  </ng-container>\n</button>\n"
                },] }
    ];
    C8yStepperProgress.propDecorators = {
        iconOverrides: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        state: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        onStepClicked: [{ type: i0.Output }]
    };

    /**
     * C8yStepperButtons provides a convenient way to have, according to
     * the C8yStepper and each cdk-step, buttons to navigate between steps or to cancel the whole
     * step-process. Buttons rendered with the help of this component will use the branding css.
     *
     * By default all steps with this component in use will render a next button, expect the last step.
     * The other way around, every step using this component will render a back button, expect the first step.
     * To get a cancel button rendered you need to handle the onCancel event.
     * For next and back button you don't need to handle the available events onNext and onBack because default behavior
     * is implemented. The default will just call, according to the button, the stepper.next() or stepper.previous()
     * methods and moves the stepper forth or back. Using the EventEmitter onNext and onBack will emit for you the following
     * object: {stepper: C8yStepper, step: CdkStep}. This is useful if you need to implement custom logic before moving
     * to the next step or sending data to a backend. In this case you need to tell the stepper to move forward or back
     * on your own.
     *
     * With the component input [labels] you can change the label of each button in each step. It takes an object like this:
     * {next?: string, back?: string, cancel?: string}
     *
     * The [pending] input is of type boolean and will enable css animation for the next button when true.
     *
     * If the cdk-step provides a stepControl the component will set the next button disabled when the formGroup
     * behind it is invalid. As long as the [pending] input is true the back and next button is also disabled.
     * This will prevent multiple clicks while running a request or stepping back while a request is ongoing.
     *
     * **Example**
     * ```
     * <c8y-stepper>
     *  <cdk-step>
     *    <!--
     *      your html code
     *          ...
     *          ...    -->
     *    <c8y-stepper-buttons
     *     (onNext)="save()"
     *     [labels]="{ next: 'Save' }"
     *     [pending]="pendingStatus"
     *     ></c8y-stepper-buttons>
     *  </cdk-step>
     * </c8y-stepper>
     *
     * // in your component:
     * async save() {
     *   this.pendingStatus = true;
     *   // your async request goes here ...
     *   // await something();
     *   this.pendingStatus = false;
     *   this.stepper.next();
     * }
     * ```
     */
    var C8yStepperButtons = /** @class */ (function () {
        function C8yStepperButtons(stepper, step) {
            this.stepper = stepper;
            this.step = step;
            /**
             * Optional
             * Indicates if a request is pending and sets the next button
             * to disabled when true
             */
            this.pending = false;
            /**
             * Disabled state of a button
             */
            this.disabled = false;
            /**
             * EventEmitter which emits when cancel button is clicked
             */
            this.onCancel = new i0.EventEmitter();
            /**
             * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when next button is clicked.
             */
            this.onNext = new i0.EventEmitter();
            /**
             * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when back button is clicked.
             */
            this.onBack = new i0.EventEmitter();
            /**
             * EventEmitter which emits when the optional custom button is clicked
             */
            this.onCustom = new i0.EventEmitter();
            /**
             * Indicator which button should be shown.
             * Based on the cdk-steps within the c8y-stepper
             * next and back buttons are rendered.
             */
            this.showBtns = {
                cancel: false,
                back: false,
                next: false,
                custom: false
            };
            /**
             * Flag that indicates that the default settings defined in the showBtns have been overwritten.
             */
            this.forceShowBtns = false;
        }
        Object.defineProperty(C8yStepperButtons.prototype, "showButtons", {
            /**
             * This option forces the display of the buttons passed by the input.
             * It will override the default settings and take precedence over the standard settings.
             * @param btns An object that contains options for displaying buttons.
             *
             * **Example**
             * ```html
             *
             * <c8y-stepper-buttons
             *   [labels]="{ custom: 'Custom btn', cancel: 'Cancel btn' }"
             *   [showButtons]="{ custom: true, cancel: true }"
             * ></c8y-stepper-buttons>
             *
             * ```
             */
            set: function (btns) {
                if (btns) {
                    this.showBtns = btns;
                    this.forceShowBtns = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @ignore
         */
        C8yStepperButtons.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (!this.forceShowBtns) {
                this.showBtns.cancel = this.onCancel.observers.length > 0;
                this.showBtns.custom = this.onCustom.observers.length > 0;
            }
            if (this.stepper && this.stepper._steps && this.step && !this.forceShowBtns) {
                this.showBtns.back = this.stepper._steps.first !== this.step;
                this.showBtns.next = this.stepper._steps.last !== this.step;
            }
            if (this.step && this.step.stepControl) {
                this.disabled = this.step.stepControl.invalid;
                this.statusChangeSubscription = this.step.stepControl.statusChanges.subscribe(function (status) {
                    _this.disabled = _this.step.stepControl.invalid;
                });
            }
        };
        /**
         * @ignore
         */
        C8yStepperButtons.prototype.ngOnChanges = function (changes) {
            /**
             * Disable save/next button while the status is pending
             * This will prevent multiple clicks and therefore multiple requests
             */
            if (changes && changes.pending) {
                this.disabled = changes.pending.currentValue;
            }
        };
        C8yStepperButtons.prototype.ngOnDestroy = function () {
            if (this.statusChangeSubscription && !this.statusChangeSubscription.closed) {
                this.statusChangeSubscription.unsubscribe();
            }
        };
        /**
         * Gets called when cancel button is clicked.
         * It will emit immediate.
         */
        C8yStepperButtons.prototype.cancel = function () {
            this.onCancel.emit();
        };
        /**
         * Gets called when next button is clicked. When onNext EventEmitter has an observer registered
         * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
         * Otherwise it will call stepper.next() as default.
         */
        C8yStepperButtons.prototype.next = function () {
            if (this.onNext.observers.length > 0) {
                this.onNext.emit({ stepper: this.stepper, step: this.step });
            }
            else {
                this.stepper.next();
            }
        };
        /**
         * Gets called when back button is clicked. When onBack EventEmitter has an observer registered
         * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
         * Otherwise it will call stepper.previous() as default.
         */
        C8yStepperButtons.prototype.back = function () {
            this.stepper.selected.completed = false;
            if (this.onBack.observers.length > 0) {
                this.onBack.emit({ stepper: this.stepper, step: this.step });
            }
            else {
                this.stepper.previous();
            }
        };
        /**
         * Gets called when the custom button is clicked.
         * It will emit immediately.
         */
        C8yStepperButtons.prototype.custom = function () {
            this.onCustom.emit();
        };
        return C8yStepperButtons;
    }());
    C8yStepperButtons.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-stepper-buttons',
                    template: "<div class=\"text-center\">\n  <button *ngIf=\"showBtns.cancel\" (click)=\"cancel()\" type=\"button\" class=\"btn btn-default\">\n    <span *ngIf=\"labels?.cancel; else cancelLabel\" title=\"{{ labels?.cancel | translate }}\">{{\n      labels?.cancel | translate\n    }}</span>\n    <ng-template #cancelLabel>\n      <span title=\"{{ 'Cancel' | translate }}\">{{ 'Cancel' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    *ngIf=\"showBtns.back\"\n    type=\"button\"\n    (click)=\"back()\"\n    class=\"btn btn-default\"\n    [disabled]=\"pending\"\n  >\n    <span *ngIf=\"labels?.back; else backLabel\" title=\"{{ labels?.back | translate }}\">{{\n      labels?.back | translate\n    }}</span>\n    <ng-template #backLabel>\n      <span title=\"{{ 'Back' | translate }}\">{{ 'Back' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    *ngIf=\"showBtns.custom\"\n    (click)=\"custom()\"\n    type=\"button\"\n    class=\"btn\"\n    [ngClass]=\"{\n      'btn-default': showBtns.next,\n      'btn-primary': !showBtns.next,\n      'btn-pending': pending\n    }\"\n    [disabled]=\"pending || disabled\"\n  >\n    <span *ngIf=\"labels?.custom; else customLabel\" title=\"{{ labels?.custom | translate }}\">{{\n      labels?.custom | translate\n    }}</span>\n    <ng-template #customLabel>\n      <span title=\"{{ 'Complete' | translate }}\">{{ 'Complete' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    (click)=\"next()\"\n    *ngIf=\"showBtns.next\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pending }\"\n    [disabled]=\"disabled\"\n  >\n    <span *ngIf=\"labels?.next; else nextLabel\" title=\"{{ labels?.next | translate }}\">{{\n      labels?.next | translate\n    }}</span>\n    <ng-template #nextLabel>\n      <span title=\"{{ 'Next' | translate }}\">{{ 'Next' | translate }}</span>\n    </ng-template>\n  </button>\n</div>\n"
                },] }
    ];
    C8yStepperButtons.ctorParameters = function () { return [
        { type: C8yStepper, decorators: [{ type: i0.Host }] },
        { type: stepper.CdkStep, decorators: [{ type: i0.Host }] }
    ]; };
    C8yStepperButtons.propDecorators = {
        labels: [{ type: i0.Input }],
        pending: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        onCancel: [{ type: i0.Output }],
        onNext: [{ type: i0.Output }],
        onBack: [{ type: i0.Output }],
        onCustom: [{ type: i0.Output }],
        showButtons: [{ type: i0.Input }]
    };

    var StepperOutletComponent = /** @class */ (function () {
        function StepperOutletComponent() {
            this.showDefaultButtons = true;
        }
        return StepperOutletComponent;
    }());
    StepperOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-stepper-outlet',
                    template: "<c8y-stepper \n  [customClasses]=\"['p-t-32', 'p-b-32', 'm-l-48', 'm-r-48']\" \n  class=\"d-flex d-col fit-h\"\n  [disableDefaultIcons]=\"{ edit: true, done: false }\"\n>\n  <cdk-step\n    *ngFor=\"let step of steps\"\n    [label]=\"step.label\"\n    [state]=\"step.state\"\n    [completed]=\"step.completed\"\n    [optional]=\"!step.required\"\n  >\n    <ng-container *ngComponentOutlet=\"step.component\"></ng-container>\n    <c8y-stepper-buttons *ngIf=\"showDefaultButtons\"></c8y-stepper-buttons>\n    <ng-template c8yStepperIcon=\"error\">\n      <span c8yIcon=\"error\"></span>\n    </ng-template>\n    <ng-template c8yStepperIcon=\"warning\">\n      <span c8yIcon=\"warning\"></span>\n    </ng-template>\n    <ng-template c8yStepperIcon=\"done\">\n      <span c8yIcon=\"check\"></span>\n    </ng-template>\n  </cdk-step>\n</c8y-stepper>\n"
                },] }
    ];
    StepperOutletComponent.propDecorators = {
        steps: [{ type: i0.Input }],
        showDefaultButtons: [{ type: i0.Input }]
    };

    var ɵ0$3 = { displayDefaultIndicatorType: false };
    /**
     * The angular module definition for c8y-stepper (Wizard).
     * @exports C8yStepper
     * @exports C8yStepperIcon
     * @exports C8yStepperButtons
     * @exports CdkStep
     */
    var StepperModule = /** @class */ (function () {
        function StepperModule() {
        }
        return StepperModule;
    }());
    StepperModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CommonModule, stepper.CdkStepperModule, tooltip.TooltipModule, forms.FormsModule],
                    declarations: [
                        C8yStepper,
                        C8yStepperIcon,
                        C8yStepperProgress,
                        C8yStepperButtons,
                        StepperOutletComponent
                    ],
                    exports: [C8yStepper, stepper.CdkStep, C8yStepperIcon, C8yStepperButtons, StepperOutletComponent],
                    providers: [
                        StepperService,
                        {
                            /**
                             * This enables additional states, like: edit, done and error
                             * These states are used to display custom icons, if needed.
                             * Any change in here will most probably result in not showing custom icons anymore
                             */
                            provide: stepper.STEPPER_GLOBAL_OPTIONS,
                            useValue: ɵ0$3
                        }
                    ]
                },] }
    ];

    /**
     * This component is the parent of each setup and can be injected
     * into setup steps to control them.
     */
    var SetupComponent = /** @class */ (function () {
        function SetupComponent(options, stepperService, appState, alert, permissions, bootstrapComponent) {
            this.options = options;
            this.stepperService = stepperService;
            this.appState = appState;
            this.alert = alert;
            this.permissions = permissions;
            this.bootstrapComponent = bootstrapComponent;
            /**
             * A subject which can be used to exchange data between
             * steps.
             */
            this.data$ = new rxjs.BehaviorSubject({});
            /**
             * The current state. SetupState.START shows an application overview
             * while SetupState.WIZARD shows the steps.
             */
            this.currentSetupState = exports.SetupState.START;
            /**
             * Emits when the setup is done. You can add certain operations before completing the setup that needed to be awaited. Return
             * true if everything is fine, otherwise false.
             * ```typescript
             * const asyncOperation = delay(2000);
             * this.setup.completed$ = this.setup.completed$.pipe(asyncOperation, map(() => true));
             * ``
             * Note: Remember that a step can be viewed multiple times. The step needs to ensure, to only add a completed operation ones.
             */
            this.completed$ = new rxjs.Observable().pipe(operators.startWith(true));
            /**
             * @ignore
             */
            this.stepperId = exports.Steppers.SETUP;
            /**
             * @ignore
             */
            this.setupState = exports.SetupState;
            /**
             * @ignore
             */
            this.properties = [];
            /**
             * @ignore
             */
            this.canSkip = false;
            /**
             * @ignore
             */
            this.hasRole = false;
            /**
             * @ignore
             */
            this.isOwner = true;
            this.RELOAD_APP_TIMEOUT = 2000;
        }
        /**
         * Mark a step as completed. If the step is required, this is needed to fulfill
         * the setup.
         * @param stepIndex The index of the step you want to mark as completed
         * @param isCompleted Defaults to true to mark it as completed but can be set to false to invalidate the step.
         */
        SetupComponent.prototype.stepCompleted = function (stepIndex, isCompleted) {
            if (isCompleted === void 0) { isCompleted = true; }
            var step = this.getByIndex(stepIndex);
            step.completed = isCompleted;
        };
        /**
         * Returns a step by it index position in the wizard.
         * @param stepIndex The step index that you want to receive.
         * @returns An indexed step definition.
         */
        SetupComponent.prototype.getByIndex = function (stepIndex) {
            return this.steps.find(function (_a) {
                var index = _a.index;
                return index === stepIndex;
            });
        };
        /**
         * @ignore
         */
        SetupComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, doneSetup_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.stepperService.getById$(this.stepperId).toPromise()];
                        case 1:
                            _a.steps = (_b.sent()).map(function (step, index) { return (Object.assign(Object.assign({}, step), { index: index, completed: false })); });
                            if (!this.options.forceSetup) {
                                doneSetup_1 = this.options.setup || [];
                                this.steps = this.steps.filter(function (step) { return doneSetup_1.indexOf(step.setupId) === -1; });
                            }
                            this.isOwner = this.appState.isOwnerOfApplication();
                            this.canSkip = !this.hasRequiredSteps(this.steps);
                            this.hasRole = this.permissions.hasRole(NEEDED_ROLE_FOR_SETUP);
                            this.properties = [
                                {
                                    label: gettext('Description'),
                                    key: 'description'
                                },
                                {
                                    label: gettext('Keywords'),
                                    key: 'keywords'
                                },
                                {
                                    label: gettext('Source'),
                                    key: 'repository'
                                },
                                {
                                    label: gettext('Version'),
                                    key: 'version'
                                },
                                {
                                    label: gettext('Author'),
                                    key: 'author'
                                },
                                {
                                    label: gettext('Required platform version'),
                                    key: 'requiredPlatformVersion'
                                }
                            ];
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Skips the current setup wizard
         */
        SetupComponent.prototype.skip = function () {
            this.bootstrapComponent.isSetupNeeded$ = rxjs.of(false);
        };
        /**
         * Starts the wizards (or finish the setup if no steps are found)
         */
        SetupComponent.prototype.start = function () {
            this.currentSetupState = exports.SetupState.WIZARD;
        };
        /**
         * Cancels the wizards and goes back to the start view.
         */
        SetupComponent.prototype.cancel = function () {
            this.currentSetupState = exports.SetupState.START;
        };
        /**
         * Finish the wizard and will start the application.
         */
        SetupComponent.prototype.finish = function () {
            var _this = this;
            this.currentSetupState = exports.SetupState.FINALIZING;
            this.completed$.subscribe(function (status) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (status) {
                        this.finalize();
                    }
                    else {
                        this.currentSetupState = exports.SetupState.WIZARD;
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        SetupComponent.prototype.finalize = function () {
            return __awaiter(this, void 0, void 0, function () {
                var doneSetup, currentConfig, ex_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            doneSetup = this.steps.filter(function (value) { return value.setupId; }).map(function (value) { return value.setupId; });
                            currentConfig = this.appState.currentApplicationConfig.value;
                            return [4 /*yield*/, this.appState.updateApplicationConfig({
                                    setup: lodashEs.uniq(__spreadArray(__spreadArray([], __read((currentConfig.setupDone || []))), __read(doneSetup)))
                                })];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            ex_1 = _a.sent();
                            this.alert.addServerFailure(ex_1);
                            this.currentSetupState = exports.SetupState.WIZARD;
                            return [3 /*break*/, 4];
                        case 3:
                            this.currentSetupState = exports.SetupState.RELOADING;
                            // To ensure proper setup, we reload the app when setup is ready.
                            setTimeout(function () { return _this.reloadApp(); }, this.RELOAD_APP_TIMEOUT);
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Verifies every step and checks if all required are completed.
         * Updates the icons to reflect the state of the steps (error, warning, done).
         * @returns Returns true if no error was found.
         */
        SetupComponent.prototype.verify = function () {
            var _this = this;
            this.steps.forEach(function (step, index) {
                if (_this.steps.length - 1 !== index) {
                    step.state = _this.getState(step);
                }
            });
            return !!this.steps.find(function (step) { return step.state !== 'error'; });
        };
        SetupComponent.prototype.reloadApp = function () {
            var removeUrlParams = location.href.split('?')[0];
            var removedHash = removeUrlParams.split('#')[0];
            location.href = removedHash;
        };
        SetupComponent.prototype.hasRequiredSteps = function (notCompletedSetupSteps) {
            return notCompletedSetupSteps.some(function (step) { return step.required; });
        };
        SetupComponent.prototype.getState = function (step) {
            if (!step.completed && step.required) {
                return 'error';
            }
            if (!step.completed && !step.required) {
                return 'warning';
            }
            return 'done';
        };
        return SetupComponent;
    }());
    SetupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-setup',
                    template: "<c8y-title>\n  {{ options.name | humanizeAppName | async }}\n</c8y-title>\n\n<div\n  class=\"card content-fullpage fadeInRightBig animated\"\n  *ngIf=\"currentSetupState !== setupState.START\"\n>\n  <c8y-stepper-outlet\n    [showDefaultButtons]=\"false\"\n    [steps]=\"steps\"\n    class=\"d-contents\"\n  ></c8y-stepper-outlet>\n</div>\n\n<div\n  class=\"card content-fullpage d-flex d-col fadeInUpBig animated\"\n  *ngIf=\"currentSetupState === setupState.START\"\n>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"card-block\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3 p-t-24\">\n          <svg class=\"p-t-32\" viewBox=\"0 0 360 190\" style=\"max-width: 450px; margin: auto\">\n            <g\n              id=\"ecosystem-welcome-illustration\"\n              stroke=\"none\"\n              stroke-width=\"1\"\n              fill=\"none\"\n              fill-rule=\"evenodd\"\n            >\n              <g id=\"medium-img\">\n                <g id=\"M---Nothing-found---illustration\" transform=\"translate(27.000000, 0.000000)\">\n                  <path\n                    d=\"M41.9882163,184.153177 C24.3512964,165.028818 14.796713,138.637202 18.0717117,113.128248 C21.3467105,87.6192947 38.0071399,63.7138452 61.8485298,52.9453596 C71.0829585,49.0513414 80.8096047,46.3893689 90.76767,45.0308169 C98.489456,43.8098001 118.605159,43.8098001 134.379236,43.8098001 C145.406066,43.8098001 181.235754,38.969866 207.015103,16.5355211 C213.745375,10.6511027 239.269332,-7.69357146 271.478495,5.11974949 C293.036399,13.6962892 308.780431,29.0693321 312.911736,38.3078689 C331.314825,79.4105311 320.017582,129.634042 291.233648,164.558065 C285.720232,171.251591 279.470694,177.592051 271.70384,181.608167 C268.726702,182.834918 265.624451,183.747258 262.449715,184.32971 L41.9882163,184.153177 Z\"\n                    id=\"Path\"\n                    fill=\"#CDE6F9\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"28.1633729\"\n                    cy=\"162.880435\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"65.7145367\"\n                    cy=\"65.6884059\"\n                    rx=\"4.02333899\"\n                    ry=\"3.35144928\"\n                  ></ellipse>\n                  <g\n                    id=\"Group\"\n                    opacity=\"0.8\"\n                    transform=\"translate(8.046677, 16.757247)\"\n                    fill=\"#7BCAEF\"\n                    fill-rule=\"nonzero\"\n                  >\n                    <path\n                      d=\"M12.8344513,8.04347826 L2.50788129,8.04347826 C1.90488763,8.22105727 1.25665804,7.99364432 0.892621563,7.47681021 C0.528585083,6.95997611 0.528585083,6.26707703 0.892621563,5.75024293 C1.25665804,5.23340882 1.90488763,5.00599587 2.50788129,5.18357488 L12.8344513,5.18357488 C13.437445,5.00599587 14.0856746,5.23340882 14.4497111,5.75024293 C14.8137476,6.26707703 14.8137476,6.95997611 14.4497111,7.47681021 C14.0856746,7.99364432 13.437445,8.22105727 12.8344513,8.04347826 Z\"\n                      id=\"Path\"\n                    ></path>\n                    <path\n                      d=\"M7.64166184,13.2866345 C6.82691795,13.2866345 6.16643754,12.6197478 6.16643754,11.7971014 L6.16643754,1.37037037 C6.35002101,0.734836286 6.92699763,0.297906603 7.58265287,0.297906603 C8.2383081,0.297906603 8.81528471,0.734836286 8.99888356,1.37037037 L8.99888356,11.7971014 C9.00133839,12.5753731 8.40999101,13.2243764 7.64166184,13.2866345 Z\"\n                      id=\"Path\"\n                    ></path>\n                  </g>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"2.68222598\"\n                    cy=\"90.4891305\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"257.493695\"\n                    cy=\"157.518116\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#14629F\"\n                    fill-rule=\"nonzero\"\n                    cx=\"299.738754\"\n                    cy=\"155.507247\"\n                    rx=\"2.01166949\"\n                    ry=\"2.01086957\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#96CAF3\"\n                    fill-rule=\"nonzero\"\n                    cx=\"260.175921\"\n                    cy=\"59.6557971\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    cx=\"329.913796\"\n                    cy=\"111.938406\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    stroke=\"#96CAF3\"\n                    cx=\"95.2190226\"\n                    cy=\"144.782609\"\n                    rx=\"4.02333899\"\n                    ry=\"3.35144928\"\n                  ></ellipse>\n                  <g\n                    id=\"Group\"\n                    opacity=\"0.6\"\n                    transform=\"translate(273.587050, 121.322464)\"\n                    fill=\"#14629F\"\n                    fill-rule=\"nonzero\"\n                  >\n                    <path\n                      d=\"M12.1263437,8.01368761 L1.79977363,8.01368761 C1.17034461,7.82832349 0.737612147,7.24575058 0.737612147,6.5837359 C0.737612147,5.92172124 1.17034461,5.33914833 1.79977363,5.15378421 L12.1263437,5.15378421 C12.7293374,4.97620521 13.3775669,5.20361817 13.7416034,5.72045226 C14.1056399,6.23728637 14.1056399,6.93018545 13.7416034,7.44701956 C13.3775669,7.96385365 12.7293374,8.19126661 12.1263437,8.01368761 L12.1263437,8.01368761 Z\"\n                      id=\"Path\"\n                    ></path>\n                    <path\n                      d=\"M6.94830642,13.2419485 C6.13356254,13.2419485 5.47308212,12.5750618 5.47308212,11.7524155 L5.47308212,1.32568438 C5.6566656,0.690150295 6.23364221,0.253220612 6.88929744,0.253220612 C7.54495269,0.253220612 8.1219293,0.690150295 8.30552815,1.32568438 L8.30552815,11.7524155 C8.30798297,12.5306871 7.71663558,13.1796904 6.94830642,13.2419485 Z\"\n                      id=\"Path\"\n                    ></path>\n                  </g>\n                  <rect\n                    id=\"Rectangle\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    x=\"107.28904\"\n                    y=\"128.025362\"\n                    width=\"109.971265\"\n                    height=\"48.2608695\"\n                  ></rect>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    points=\"205.744516 91.8297102 121.555988 91.8297102 107.28904 129.365942 217.260306 129.365942\"\n                  ></polygon>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    points=\"93.8779095 114.917472 103.478057 98.5326086 118.017943 121.471417 107.035845 128.025362\"\n                  ></polygon>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    points=\"209.213627 123.316736 216.813268 129.365942 232.012548 114.683402 221.373051 98.5326086\"\n                  ></polygon>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#96CAF3\"\n                    fill-rule=\"nonzero\"\n                    points=\"214.884986 105.235507 111.648803 105.235507 107.28904 129.365942 217.260306 129.365942\"\n                  ></polygon>\n                  <path\n                    d=\"M91.6761446,30.3423163 C92.3222173,30.3423163 92.8459628,30.8537275 92.8459628,31.4845853 C92.8459628,32.1154431 92.3222173,32.6268545 91.6761446,32.6268545 C91.0300718,32.6268545 90.5063264,32.1154431 90.5063264,31.4845853 C90.5289441,30.8631053 91.0396757,30.3644014 91.6761446,30.3423163 Z M91.8662401,24.6309708 C92.4940745,24.6065819 93.1037929,24.8394323 93.5480901,25.2732662 C93.9923872,25.7071004 94.2308535,26.30246 94.2058764,26.9155089 L94.2058764,27.5152002 L89.5266036,27.5152002 L89.5266036,26.9155089 C89.4960305,26.2895723 89.7404154,25.6806341 90.1983788,25.2416359 C90.6563421,24.8026375 91.2843716,24.5752894 91.924731,24.6166924 L91.8662401,24.6309708 Z M91.8662401,23.4744232 C90.9292048,23.466734 90.0282593,23.8268063 89.3656519,24.4738094 C88.7030445,25.1208125 88.3342881,26.0005407 88.3421627,26.9155089 L88.3421627,27.5152002 L87.1723446,27.5152002 L87.1723446,35.5253623 L96.5601355,35.5253623 L96.5601355,27.5009219 L95.3903173,27.5009219 L95.3903173,26.9012306 C95.3981063,25.9961621 95.037351,25.1251451 94.3874206,24.4798095 C93.7374901,23.8344738 92.8516283,23.4676871 91.924731,23.460145 L91.8662401,23.4744232 Z\"\n                    id=\"Shape\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                  <path\n                    d=\"M254.811469,24.8007247 L248.113249,12.7355072 L241.400339,24.8007247 L254.811469,24.8007247 Z M248.7155,22.7874058 L247.466929,22.7874058 L247.466929,21.6411367 L248.671434,21.6411367 L248.7155,22.7874058 Z M248.7155,20.5095632 L247.466929,20.5095632 L247.466929,17.5704117 L248.671434,17.5704117 L248.7155,20.5095632 Z\"\n                    id=\"Shape\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                  <line\n                    x1=\"201.166949\"\n                    y1=\"40.8876812\"\n                    x2=\"187.755818\"\n                    y2=\"60.9963769\"\n                    id=\"Path\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  ></line>\n                  <line\n                    x1=\"165.969438\"\n                    y1=\"31.5036231\"\n                    x2=\"165.285471\"\n                    y2=\"55.6340579\"\n                    id=\"Path\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  ></line>\n                  <line\n                    x1=\"130.08796\"\n                    y1=\"44.9094203\"\n                    x2=\"146.181316\"\n                    y2=\"63.6775362\"\n                    id=\"Path\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  ></line>\n                </g>\n                <polygon\n                  id=\"Fill-56\"\n                  fill=\"#A5D1FE\"\n                  fill-rule=\"nonzero\"\n                  points=\"0 185 335 185 335 175 0 175\"\n                ></polygon>\n              </g>\n            </g>\n          </svg>\n          <h1\n            class=\"p-t-16 p-b-16 text-center text-medium\"\n            ngNonBindable\n            translate\n            [translateParams]=\"{ appName: options.name | humanizeAppName | async }\"\n          >\n            Welcome to {{ appName }}\n          </h1>\n          <p class=\"lead text-normal\" translate *ngIf=\"hasRole\">\n            This application (or any plugin that you added recently) has pre-requirements that needs\n            to be configured first. This wizard will guide you through the steps that are necessary\n            to get your application up and running.\n          </p>\n          <div class=\"flex-grow\" *ngIf=\"properties.length > 0\">\n            <c8y-properties-list\n              icon=\"info\"\n              [properties]=\"properties\"\n              [data]=\"options\"\n              [title]=\"'Application properties' | translate\"\n            ></c8y-properties-list>\n          </div>\n          <div class=\"alert alert-danger m-32\" *ngIf=\"!hasRole\">\n            <strong translate>No permission</strong>\n            <div translate>\n              You don't have sufficient rights to setup this application. Please contact an\n              application administrator to setup the required steps.\n            </div>\n          </div>\n          <div class=\"alert alert-danger m-32\" *ngIf=\"!isOwner\">\n            <strong translate>Not the owner</strong>\n            <div translate>\n              The current application is not owned by this tenant. Please clone the application\n              before running the setup.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      class=\"btn\"\n      (click)=\"skip()\"\n      translate\n      *ngIf=\"canSkip\"\n      [title]=\"\n        'You can skip the setup now. It will be shown again as soon as you restart the application.'\n          | translate\n      \"\n    >\n      Skip\n    </button>\n\n    <button\n      class=\"btn btn-primary\"\n      (click)=\"start()\"\n      translate\n      [disabled]=\"!hasRole || !isOwner\"\n      [title]=\"'Start the setup wizard.' | translate\"\n    >\n      Start\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    SetupComponent.ctorParameters = function () { return [
        { type: OptionsService },
        { type: StepperService },
        { type: AppStateService },
        { type: AlertService },
        { type: Permissions },
        { type: BootstrapComponent }
    ]; };

    var SetupCompletedComponent = /** @class */ (function () {
        function SetupCompletedComponent(stepper, step, setup) {
            this.stepper = stepper;
            this.step = step;
            this.setup = setup;
            this.status = 'done';
            this.STEP_LABEL = gettext('Step');
            this.isVerified = false;
        }
        SetupCompletedComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.stepperSelectionChangeSubscription = this.stepper.selectionChange.subscribe(function (_a) {
                var selectedIndex = _a.selectedIndex;
                _this.verify(selectedIndex);
            });
        };
        SetupCompletedComponent.prototype.ngOnDestroy = function () {
            this.stepperSelectionChangeSubscription.unsubscribe();
        };
        SetupCompletedComponent.prototype.verify = function (selectedIndex) {
            var isLastStep = this.stepper.steps.length - 1 === selectedIndex;
            if (isLastStep || this.isVerified) {
                // set the last step to completed
                this.getOverallStatus();
                this.setup.verify();
                this.isVerified = true;
            }
        };
        SetupCompletedComponent.prototype.start = function () {
            this.setup.finish();
        };
        SetupCompletedComponent.prototype.back = function () {
            this.stepper.previous();
        };
        SetupCompletedComponent.prototype.gotoStep = function (index) {
            this.stepper.selectedIndex = index;
        };
        SetupCompletedComponent.prototype.getOverallStatus = function () {
            var validSteps = this.setup.steps.slice(0, this.setup.steps.length - 1);
            this.status = 'done';
            if (validSteps.find(function (step) { return !step.completed && step.required; })) {
                this.status = 'error';
            }
            else if (validSteps.find(function (step) { return !step.completed && !step.required; })) {
                this.status = 'warning';
            }
            this.step.state = this.status;
        };
        return SetupCompletedComponent;
    }());
    SetupCompletedComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-setup-completed',
                    template: "<div class=\"container-fluid flex-no-shrink fit-w\">\n  <div class=\"row separator-bottom\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3  p-t-24 p-l-16 p-r-16\">\n      <h3 translate class=\"text-medium l-h-base\">Summary</h3>\n      <p translate class=\"lead text-normal p-t-8 p-b-8\">\n        Please verify the setup result. If any step is not finished but required, you need to ensure\n        that you have finished the step.\n      </p>\n    </div>\n  </div>\n</div>\n<div class=\"inner-scroll flex-grow\">\n  <div class=\"container-fluid fit-w p-t-16\">\n    <div class=\"row\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n        <div class=\"text-center\" [ngSwitch]=\"status\">\n          <c8y-operation-result\n            *ngSwitchCase=\"'done'\"\n            text=\"{{ 'Setup completed' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"success\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngSwitchCase=\"'warning'\"\n            text=\"{{ 'Setup completed with warnings' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"warning\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngSwitchCase=\"'error'\"\n            text=\"{{ 'Setup not completed' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"error\"\n          ></c8y-operation-result>\n        </div>\n        <ul class=\"list-unstyled m-t-16 separator-top\">\n          <li\n            class=\"p-t-4 p-b-4 d-flex a-i-center separator-bottom text-nowrap l-h-1\"\n            *ngFor=\"let step of setup.steps.slice(0, setup.steps.length - 1)\"\n            (click)=\"gotoStep(step.index)\"\n            style=\"cursor: pointer\"\n          >\n            <span *ngIf=\"step.label\">\n              <span class=\"dot small m-r-4 l-h-1\"\n                [ngClass]=\"{ 'dot-success': step.completed, \n                            'dot-error' : !step.completed && step.required,\n                            'dot-warning' : !step.completed && !step.required }\"\n              >\n                {{step.index + 1}}\n              </span>\n              {{ step.label || (STEP_LABEL | translate) + ' ' }}\n            </span>\n            <span *ngIf=\"!step.label\">\n              <span translate>Step</span>{{ ' ' + (step.index + 1) }}\n            </span>\n            <span class=\"m-l-auto icon-20 l-h-1\">\n              <i\n                *ngIf=\"step.completed\"\n                [c8yIcon]=\"'success'\"\n                class=\"text-success\"\n                [title]=\"'Completed' | translate\"\n              ></i>\n              <i\n                *ngIf=\"!step.completed && step.required\"\n                [c8yIcon]=\"'error'\"\n                class=\"text-danger\"\n                [title]=\"\n                  'Not completed and required. Please go to the step and fulfil the setup.'\n                    | translate\n                \"\n              ></i>\n              <i\n                *ngIf=\"!step.completed && !step.required\"\n                [c8yIcon]=\"'warning'\"\n                class=\"text-warning\"\n                [title]=\"'This step was not completed but it is also not required.' | translate\"\n              ></i>\n            </span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"card-footer separator d-flex j-c-center\">\n  <button\n    translate\n    class=\"btn btn-default\"\n    type=\"button\"\n    (click)=\"back()\"\n    *ngIf=\"stepper.selectedIndex !== 0\"\n    [disabled]=\"\n      setup.currentSetupState === setup.setupState.FINALIZING ||\n      setup.currentSetupState === setup.setupState.RELOADING\n    \"\n  >\n    Back\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    type=\"button\"\n    (click)=\"start()\"\n    [disabled]=\"\n      status === 'error' ||\n      setup.currentSetupState === setup.setupState.FINALIZING ||\n      setup.currentSetupState === setup.setupState.RELOADING\n    \"\n    [ngClass]=\"{\n      'btn-pending':\n        setup.currentSetupState === setup.setupState.FINALIZING ||\n        setup.currentSetupState === setup.setupState.RELOADING\n    }\"\n  >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.WIZARD\" translate\n      >Save and reload</span\n    >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.FINALIZING\" translate\n      >Getting things ready\u2026</span\n    >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.RELOADING\" translate\n      >Done. Reloading the application.</span\n    >\n  </button>\n</div>\n",
                    host: { class: 'd-contents' }
                },] }
    ];
    SetupCompletedComponent.ctorParameters = function () { return [
        { type: C8yStepper },
        { type: stepper.CdkStep },
        { type: SetupComponent }
    ]; };

    var ɵ0$2 = {
        setupId: SETUP_FINISHED_STEP_ID,
        stepperId: exports.Steppers.SETUP,
        component: SetupCompletedComponent,
        label: gettext('Summary'),
        priority: Infinity
    };
    var SetupModule = /** @class */ (function () {
        function SetupModule() {
        }
        return SetupModule;
    }());
    SetupModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [SetupComponent, SetupCompletedComponent],
                    imports: [CommonModule, HeaderModule, StepperModule, PluginsModule, PropertiesListModule],
                    exports: [SetupComponent, SetupCompletedComponent],
                    entryComponents: [SetupCompletedComponent],
                    providers: [
                        {
                            provide: HOOK_STEPPER,
                            useValue: ɵ0$2,
                            multi: true
                        }
                    ]
                },] }
    ];

    var TabComponent = /** @class */ (function () {
        function TabComponent(tabs) {
            this.tabs = tabs;
            this.label = '';
        }
        TabComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            setTimeout(function () { return _this.tabs.add(_this); });
        };
        TabComponent.prototype.ngOnDestroy = function () {
            this.tabs.remove(this);
        };
        return TabComponent;
    }());
    TabComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-tab',
                    template: '<ng-template #tpl><ng-content></ng-content></ng-template>'
                },] }
    ];
    TabComponent.ctorParameters = function () { return [
        { type: TabsService }
    ]; };
    TabComponent.propDecorators = {
        template: [{ type: i0.ViewChild, args: ['tpl', { static: false },] }],
        path: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        priority: [{ type: i0.Input }],
        orientation: [{ type: i0.Input }]
    };

    var TabsOutletComponent = /** @class */ (function () {
        function TabsOutletComponent(router, renderer, el, header) {
            this.router = router;
            this.renderer = renderer;
            this.el = el;
            this.header = header;
            this.tabs = [];
            this.orientation = 'vertical';
            this.navigatorOpen = false;
            this.showLeft = false;
            this.showRight = false;
        }
        Object.defineProperty(TabsOutletComponent.prototype, "isNavigatorOpen", {
            get: function () {
                return this.navigatorOpen;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabsOutletComponent.prototype, "hasTabs", {
            get: function () {
                var visibleTabs = [];
                if (this.tabs) {
                    visibleTabs = this.tabs.filter(function (tab) { return tab.hide !== true; });
                }
                return visibleTabs.length > 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabsOutletComponent.prototype, "isHorizontal", {
            get: function () {
                return this.orientation === 'horizontal';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabsOutletComponent.prototype, "isVertical", {
            get: function () {
                return this.orientation !== 'horizontal';
            },
            enumerable: false,
            configurable: true
        });
        TabsOutletComponent.prototype.ngOnDestroy = function () {
            if (this.scrollSubscription) {
                this.scrollSubscription.unsubscribe();
            }
        };
        TabsOutletComponent.prototype.ngAfterContentInit = function () {
            if (this.orientation === 'horizontal') {
                this.scrollSubscribe();
            }
        };
        TabsOutletComponent.prototype.isActive = function (tab) {
            if (tab && tab.path) {
                return this.router.isActive(tab.path, false);
            }
            else {
                return false;
            }
        };
        TabsOutletComponent.prototype.navigateTo = function (path) {
            this.header.toggle();
            this.router.navigate([path]);
        };
        TabsOutletComponent.prototype.scroll = function (direction) {
            if (direction === void 0) { direction = 'right'; }
            var _a = this.getDimensions(), widthScroll = _a.widthScroll, width = _a.width, scrollLeft = _a.scrollLeft;
            var multiplier = direction === 'left' ? -1 : 1;
            var targetScroll = scrollLeft + width * multiplier;
            if (targetScroll < 0) {
                targetScroll = 0;
            }
            if (targetScroll > widthScroll - width) {
                targetScroll = widthScroll - width;
            }
            // TODO: we should animate this
            this.container.nativeElement.scrollLeft = targetScroll;
        };
        TabsOutletComponent.prototype.scrollSubscribe = function () {
            var _this = this;
            var unlisten;
            this.scrollSubscription = rxjs.merge(rxjs.fromEvent(this.container.nativeElement, 'scroll'), rxjs.fromEventPattern(function (handler) {
                unlisten = _this.renderer.listen('window', 'resize', handler);
            }, function () { return unlisten(); })).pipe(operators.debounceTime(250)).subscribe(function () { return _this.updateScroll(); });
        };
        TabsOutletComponent.prototype.updateScroll = function () {
            var _a = this.getDimensions(), widthScroll = _a.widthScroll, width = _a.width, scrollLeft = _a.scrollLeft;
            this.showLeft = !!scrollLeft;
            this.showRight = widthScroll > width + scrollLeft;
        };
        TabsOutletComponent.prototype.getDimensions = function () {
            var elTabs = this.tabsContainer.nativeElement;
            var el = this.container.nativeElement;
            var widthScroll = elTabs.scrollWidth;
            var width = el.clientWidth;
            var scrollLeft = el.scrollLeft;
            return { widthScroll: widthScroll, width: width, scrollLeft: scrollLeft };
        };
        return TabsOutletComponent;
    }());
    TabsOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-tabs-outlet,c8y-ui-tabs',
                    template: "<div #container class=\"tabContainer hidden-xs\">\n  <button class=\"tabs-slider tabs-slider-left\" #left *ngIf=\"showLeft\" (click)=\"scroll('left')\">\n    <i [c8yIcon]=\"'chevron-left'\"></i>\n  </button>\n  <button class=\"tabs-slider tabs-slider-right\" #right *ngIf=\"showRight\" (click)=\"scroll('right')\">\n    <i [c8yIcon]=\"'chevron-right'\"></i>\n  </button>\n  <ul class=\"nav nav-tabs nav-tabsc8y\" #tabsContainer>\n    <ng-container *ngFor=\"let tab of tabs\">\n      <li [ngClass]=\"{ active: rla?.isActive }\" *ngIf=\"!tab.component\">\n        <a\n          [routerLink]=\"tab.path\"\n          routerLinkActive\n          #rla=\"routerLinkActive\"\n          title=\"{{ tab?.label | translate }}\"\n        >\n          <i [c8yIcon]=\"tab?.icon\" *ngIf=\"!tab.template && tab?.icon\"></i>\n          <span class=\"txt\" *ngIf=\"!tab.template && !tab.component\">{{\n            tab?.label | translate\n          }}</span>\n        </a>\n        <ng-container *ngTemplateOutlet=\"tab.template\"></ng-container>\n      </li>\n      <ng-container *ngComponentOutlet=\"tab.component\"></ng-container>\n    </ng-container>\n  </ul>\n</div>\n\n<div class=\"visible-xs mobile-tabs\">\n  <ul class=\"list-unstyled d-flex m-b-0\">\n    <li class=\"c8y-select-wrapper flex-grow\">\n      <select (change)=\"navigateTo($event.target.value)\" #select>\n        <ng-container *ngFor=\"let tab of tabs\">\n          <option *ngIf=\"!tab.component\" [value]=\"tab.path\" [selected]=\"isActive(tab)\">\n            {{ tab?.label | translate }}\n          </option>\n        </ng-container>\n      </select>\n    </li>\n    <ng-container *ngFor=\"let tab of tabs\">\n      <ng-container *ngIf=\"tab.component\">\n        <ng-container *ngComponentOutlet=\"tab.component\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </ul>\n</div>\n"
                },] }
    ];
    TabsOutletComponent.ctorParameters = function () { return [
        { type: i1.Router },
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: HeaderService }
    ]; };
    TabsOutletComponent.propDecorators = {
        tabs: [{ type: i0.Input }],
        orientation: [{ type: i0.Input }],
        navigatorOpen: [{ type: i0.Input }],
        isNavigatorOpen: [{ type: i0.HostBinding, args: ['class.navigator-open',] }],
        hasTabs: [{ type: i0.HostBinding, args: ['class.page-tabs',] }],
        isHorizontal: [{ type: i0.HostBinding, args: ['class.page-tabs-horizontal',] }],
        isVertical: [{ type: i0.HostBinding, args: ['class.page-tabs-vertical',] }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ElementRef, static: true },] }],
        leftBtn: [{ type: i0.ViewChild, args: ['left', { read: i0.ElementRef, static: false },] }],
        rightBtn: [{ type: i0.ViewChild, args: ['right', { read: i0.ElementRef, static: false },] }],
        tabsContainer: [{ type: i0.ViewChild, args: ['tabsContainer', { read: i0.ElementRef, static: false },] }]
    };

    /**
     * Register this component on the parent route of a view with multiple tabs where the first tab
     * is displayed only conditionally.
     *
     * Given the following routes leading to a single view with multiple tabs:<br>
     * /yourpath/tab-a -> Tab A<br>
     * /yourpath/tab-b -> Tab B<br>
     * /yourpath/tab-c -> Tab C
     *
     * Your components will be registered like
     * ```typescript
     * export const routes: Route[] = [
     *   {
     *     path: 'yourpath/tab-a',
     *     component: TabAComponent
     *   },
     *   {
     *     path: 'yourpath/tab-b',
     *     component: TabBComponent
     *   },
     *   {
     *     path: 'yourpath/tab-c',
     *     component: TabCComponent
     *   }
     * ];
     * ```
     *
     * In the simple case where Tab A is the first tab on the view and it is always displayed, you can register
     * your view in the navigation with a similar navigator node:
     *
     * ```typescript
     * new NavigatorNode({
     *   label: gettext('My tabs'),
     *   path: 'yourpath/tab-a',
     *   icon: 'gears',
     *   parent: gettext('Some parent node'),
     *   priority: 100
     * })
     * ```
     *
     * This will navigate to the first tab's component and activate the first tab in the view.
     *
     * In case Tab A is displayed conditionally you cannot link it from a navigator node since it may not be available in some cases.
     * In this situation `ConditionalTabsOutletComponent` comes handy as it will forward users to the first available tab on your view:
     *
     * ```typescript
     * new NavigatorNode({
     *   label: gettext('My tabs'),
     *   path: 'yourpath', // note that here we use only the parent route
     *   icon: 'gears',
     *   parent: gettext('Some parent node'),
     *   priority: 100
     * })
     *
     * [...]
     *
     * export const routes: Route[] = [
     *   {
     *     path: 'yourpath',
     *     component: ConditionalTabsOutletComponent // we register ConditionalTabsOutletComponent for the parent path
     *   },
     *   {
     *     path: 'yourpath/tab-a',
     *     component: TabAComponent
     *   },
     *   {
     *     path: 'yourpath/tab-b',
     *     component: TabBComponent
     *   },
     *   {
     *     path: 'yourpath/tab-c',
     *     component: TabCComponent
     *   }
     * ];
     * ```
     */
    var ConditionalTabsOutletComponent = /** @class */ (function () {
        function ConditionalTabsOutletComponent(tabsService, router) {
            this.tabsService = tabsService;
            this.router = router;
            this.endSubscriptions$ = new rxjs.Subject();
        }
        ConditionalTabsOutletComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.tabsService.firstTab$.pipe(operators.takeUntil(this.endSubscriptions$)).subscribe(function (tab) {
                if (tab) {
                    _this.router.navigateByUrl(tab.path, { replaceUrl: true });
                }
            });
        };
        ConditionalTabsOutletComponent.prototype.ngOnDestroy = function () {
            this.endSubscriptions$.next();
            this.endSubscriptions$.complete();
        };
        return ConditionalTabsOutletComponent;
    }());
    ConditionalTabsOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-conditional-tabs-outlet',
                    template: "\n    <router-outlet></router-outlet>\n  "
                },] }
    ];
    ConditionalTabsOutletComponent.ctorParameters = function () { return [
        { type: TabsService },
        { type: i1.Router }
    ]; };

    var TabsModule = /** @class */ (function () {
        function TabsModule() {
        }
        return TabsModule;
    }());
    TabsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ConditionalTabsOutletComponent,
                        TabsOutletComponent,
                        TabComponent
                    ],
                    imports: [
                        CommonModule,
                        i1.RouterModule.forChild([]),
                        HeaderModule
                    ],
                    exports: [
                        ConditionalTabsOutletComponent,
                        TabsOutletComponent,
                        TabComponent
                    ]
                },] }
    ];

    var CookieBannerPreferencesModalComponent = /** @class */ (function () {
        function CookieBannerPreferencesModalComponent(cookieBannerService) {
            this.cookieBannerService = cookieBannerService;
            this.closeSubject = new rxjs.Subject();
            this.title = gettext('Cookie preferences');
            this.labels = { ok: gettext('Save settings'), cancel: gettext('Cancel') };
            this.status = exports.Status.INFO;
        }
        CookieBannerPreferencesModalComponent.prototype.ngOnInit = function () {
            this.configCookiePreferencesList = this.cookieBannerService.transformCookiePreferencesToList(this.configCookiePreferences);
        };
        CookieBannerPreferencesModalComponent.prototype.ngAfterViewInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.modalRef.result];
                        case 1:
                            _a.sent();
                            this.onClose();
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.onDismiss();
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        CookieBannerPreferencesModalComponent.prototype.onClose = function () {
            var cookiePref = this.cookieBannerService.transformCookiePreferencesListToCookiePreferences(this.configCookiePreferencesList);
            this.closeSubject.next(cookiePref);
            this.closeSubject.complete();
        };
        CookieBannerPreferencesModalComponent.prototype.onDismiss = function () {
            this.closeSubject.next(undefined);
            this.closeSubject.complete();
        };
        CookieBannerPreferencesModalComponent.prototype.getCookieDescription = function (cookieType) {
            return this.cookieBannerService.getCookieDescription(cookieType);
        };
        return CookieBannerPreferencesModalComponent;
    }());
    CookieBannerPreferencesModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cookie-banner-preferences-modal',
                    template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n\n  <div *ngFor=\"let item of configCookiePreferencesList\" class=\"row p-t-8 p-b-8 separator-top\">\n    <div class=\"col-xs-2\">\n      <div class=\"text-center\">\n        <label class=\"c8y-switch\">\n          <input\n            name=\"{{ item.name }}\"\n            type=\"checkbox\"\n            [(ngModel)]=\"item.value\"\n            [disabled]=\"item.isReadonly\"\n          />\n          <span></span>\n        </label>\n      </div>\n    </div>\n    <div class=\"col-xs-10\">\n      <h4 class=\"text-medium\">\n        {{ item.name | translate | humanize }}\n      </h4>\n      <p>\n        {{ getCookieDescription(item.name) | translate }}\n      </p>\n    </div>\n  </div>\n</c8y-confirm-modal>\n"
                },] }
    ];
    CookieBannerPreferencesModalComponent.ctorParameters = function () { return [
        { type: CookieBannerService }
    ]; };
    CookieBannerPreferencesModalComponent.propDecorators = {
        modalRef: [{ type: i0.ViewChild, args: ['modalRef', { static: false },] }]
    };

    var CookieBannerComponent = /** @class */ (function () {
        function CookieBannerComponent(bsModalService, cookieBannerService) {
            this.bsModalService = bsModalService;
            this.cookieBannerService = cookieBannerService;
            this.shouldDisable = false;
        }
        CookieBannerComponent.prototype.ngOnInit = function () {
            this.settings = this.cookieBannerService.getCookieBannerSettings();
            this.cookiePreferences = this.cookieBannerService.getCookiePreferencesConfig();
            this.shouldShowCookieBanner();
        };
        CookieBannerComponent.prototype.onConfigurePreferences = function () {
            var _this = this;
            this.disableButtons(true);
            var initialState = {
                configCookiePreferences: this.cookiePreferences
            };
            var modalRef = this.bsModalService.show(CookieBannerPreferencesModalComponent, {
                initialState: initialState
            });
            modalRef.content.closeSubject.subscribe(function (userCookiePreferences) {
                _this.disableButtons(false);
                if (userCookiePreferences) {
                    _this.cookieBannerService.setCookies(userCookiePreferences);
                    _this.setCookieBannerVisibility(false);
                }
            });
        };
        CookieBannerComponent.prototype.acceptCookies = function () {
            this.cookieBannerService.setCookies(this.cookiePreferences || { required: true });
            this.setCookieBannerVisibility(false);
        };
        CookieBannerComponent.prototype.rejectCookies = function () {
            this.cookieBannerService.setCookies({
                required: true,
                functional: false,
                marketing: false
            });
            this.setCookieBannerVisibility(false);
        };
        CookieBannerComponent.prototype.shouldShowCookieBanner = function () {
            this.setCookieBannerVisibility(this.cookieBannerService.shouldShowCookieBanner());
        };
        CookieBannerComponent.prototype.disableButtons = function (shouldDisable) {
            this.shouldDisable = shouldDisable;
        };
        CookieBannerComponent.prototype.setCookieBannerVisibility = function (shouldShow) {
            this.showBanner = shouldShow;
            this.cookieBannerService.isCookieBannerShowed$.next(shouldShow);
        };
        return CookieBannerComponent;
    }());
    CookieBannerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cookie-banner',
                    template: "<div class=\"c8y-cookie-banner\">\n  <div class=\"container\">\n    <div class=\"row p-t-16 p-b-16\" *ngIf=\"showBanner\">\n      <div class=\"col-md-2\" *ngIf=\"settings.cookieBannerTitle\">\n        <h3>{{ settings.cookieBannerTitle | translate }}</h3>\n        <div class=\"p-b-16 visible-sm visible-xs\"></div>\n      </div>\n      <div class=\"col-md-7\">\n        <div class=\"cookie-banner-content text-pre-line\">\n          {{ settings.cookieBannerText | translate }}\n          <a href=\"{{ settings.policyUrl }}\" target=\"_blank\" *ngIf=\"settings.policyUrl\" class=\"text-primary\">\n            {{ 'See also our Privacy Notice.' | translate }}\n          </a>\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <div class=\"row\">\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16 visible-sm visible-xs\"></div>\n            <button\n              class=\"btn btn-primary btn-block\"\n              (click)=\"acceptCookies()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Agree and proceed' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\" *ngIf=\"!!cookiePreferences\">\n            <div class=\"p-b-16\"></div>\n            <button\n              class=\"btn btn-primary btn-block\"\n              (click)=\"rejectCookies()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Reject all' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\" *ngIf=\"!!cookiePreferences\">\n            <div class=\"p-b-16\"></div>\n            <button\n              class=\"btn btn-default btn-block\"\n              (click)=\"onConfigurePreferences()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Configure preferences' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    CookieBannerComponent.ctorParameters = function () { return [
        { type: i1$2.BsModalService },
        { type: CookieBannerService }
    ]; };

    /**
     * The module which allows to bootstrap a custom application.
     * Use it as `bootstrap: []` component in your main app module
     * or as `<c8y-bootstrap>` in your main app.
     */
    var BootstrapModule = /** @class */ (function () {
        function BootstrapModule() {
        }
        return BootstrapModule;
    }());
    BootstrapModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [BootstrapComponent, CookieBannerComponent, CookieBannerPreferencesModalComponent],
                    imports: [
                        forms.FormsModule,
                        CommonModule,
                        HeaderModule,
                        LoginModule,
                        i1.RouterModule,
                        TabsModule,
                        ActionBarModule,
                        AlertModule,
                        NavigatorModule,
                        tooltip.TooltipModule,
                        ModalModule,
                        SetupModule
                    ],
                    exports: [BootstrapComponent],
                    entryComponents: [BootstrapComponent, CookieBannerPreferencesModalComponent],
                    providers: [CookieBannerService]
                },] }
    ];

    /**
     * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.
     *
     * ## Example:
     *
     * ```html
     *  <div>
     *    <c8y-drop-area
     *      (dropped)="uploadFile($event)"
     *      [icon]="'upload'"
     *      [accept]="'.zip,.7z,video'">
     *    </c8y-drop-area>
     *  </div>
     * ```
     */
    var DropAreaComponent = /** @class */ (function () {
        function DropAreaComponent(cd, filesService, translate, bytes) {
            this.cd = cd;
            this.filesService = filesService;
            this.translate = translate;
            this.bytes = bytes;
            this.title = gettext('Upload file');
            this.message = gettext('Drop file here');
            this.icon = 'plus-square';
            this.loadingMessage = gettext('Uploading…');
            this.forceHideList = false;
            /** Affects displaying both the drop zone and the list of dropped files. */
            this.alwaysShow = false;
            this.clickToOpen = true;
            this.loading = false;
            /**
             * Current progress of the upload as a percentage. If not given a spinner will be displayed.
             */
            this.progress = -1; // -1 = spinner
            this.dropped = new i0.EventEmitter();
            this.maxAllowedFiles = Infinity;
            this.isOver = false;
            this.errors = false;
            this.onChange = function (_) { return undefined; };
            this.onTouched = function () { return undefined; };
        }
        DropAreaComponent.prototype.onkeyup = function (event) {
            if (event.key === 'Enter') {
                this.picker.nativeElement.click();
            }
        };
        DropAreaComponent.prototype.ngOnInit = function () {
            this.acceptedExts = this.filesService.extractFileExtensions(this.accept).map(function (t) { return "." + t; });
            this.alwaysShow = this.alwaysShow || this.area.nativeElement.children.length === 0;
            if (this.files && this.isFilesAnObjectOrArray() && this.files.length > 0) {
                this.onFilesSelected(this.files);
            }
        };
        /**
         * Toggles the style of the drop zone element when a file is dragged over the component.
         */
        DropAreaComponent.prototype.toggle = function ($event) {
            this.zone.nativeElement.style.height = this.area.nativeElement.offsetHeight + 'px';
            this.onOver();
        };
        /**
         * Shows computer browser with files to drop into drop-area zone.
         */
        DropAreaComponent.prototype.showPicker = function ($event) {
            this.preventDefault($event);
            this.picker.nativeElement.value = '';
            this.picker.nativeElement.click();
        };
        /**
         * Triggered when file is on over drop area, but not dropped.
         */
        DropAreaComponent.prototype.onOver = function () {
            if (!this.isOver) {
                this.isOver = true;
                document.addEventListener('dragover', this.preventDefault);
                document.addEventListener('drop', this.preventDefault);
            }
        };
        /**
         * Triggered when file is dropped.
         */
        DropAreaComponent.prototype.onPick = function ($event) {
            this.errors = false;
            this.preventDefault($event);
            this.onFilesSelected($event.target.files);
        };
        /**
         * Handle file when it is dropped into drop-area.
         */
        DropAreaComponent.prototype.onDrop = function ($event) {
            this.preventDefault($event);
            this.onFilesSelected($event.dataTransfer.files);
            this.stopDragging();
        };
        /**
         * Checks condition what should be displayed: drop-area zone or list of dropped files.
         */
        DropAreaComponent.prototype.shouldShowFilesList = function () {
            return (this.isFilesAnObjectOrArray() &&
                !this.forceHideList &&
                this.alwaysShow &&
                !this.isFilesArrayEmpty() &&
                !this.hasEmptyFiles() &&
                !this.isTooManyFiles());
        };
        /**
         * Triggered when file is picked over web application.
         */
        DropAreaComponent.prototype.stopDragging = function () {
            document.removeEventListener('dragover', this.preventDefault);
            document.removeEventListener('drop', this.preventDefault);
            this.isOver = false;
        };
        /**
         * Delete files already dropped files.
         */
        DropAreaComponent.prototype.onDelete = function () {
            delete this.files;
            delete this.filesNameString;
            this.clearErrors();
            this.dropped.emit(null);
            this.onChange(null);
            this.cd.markForCheck();
        };
        DropAreaComponent.prototype.writeValue = function (value) {
            this.files = value;
            if (!value) {
                this.onDelete();
            }
            this.cd.detectChanges();
        };
        DropAreaComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        DropAreaComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        DropAreaComponent.prototype.onFilesSelected = function (files) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var hasValidNameLength, haveValidTypes, haveValidSizes, droppedFiles;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            hasValidNameLength = this.filesService.checkMaxLength(files);
                            if (!hasValidNameLength) {
                                this.onFileInvalidNameLength();
                                return [2 /*return*/];
                            }
                            haveValidTypes = this.filesService.haveValidExtensions(files, this.accept);
                            if (!haveValidTypes) {
                                this.onFileInvalidType();
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.filesService.haveValidSizes(files)];
                        case 1:
                            haveValidSizes = _c.sent();
                            if (!!haveValidSizes) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.onFileInvalidSize()];
                        case 2:
                            _c.sent();
                            return [2 /*return*/];
                        case 3:
                            this.files = files;
                            this.filesNameString = this.getFilesNamesAsString(files);
                            this.errors = false;
                            if (this.isTooManyFiles()) {
                                this.errors = true;
                                (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ tooManyFiles: true });
                                this.errorMessage = gettext('Too many files selected.');
                                return [2 /*return*/];
                            }
                            if (this.hasEmptyFiles()) {
                                this.errors = true;
                                (_b = this.formControl) === null || _b === void 0 ? void 0 : _b.setErrors({ emptyFiles: true });
                                this.errorMessage = gettext('File must not be empty, select another one.');
                                return [2 /*return*/];
                            }
                            droppedFiles = this.compose(files);
                            this.dropped.emit(droppedFiles);
                            this.onChange(droppedFiles);
                            this.cd.markForCheck();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DropAreaComponent.prototype.onFileInvalidNameLength = function () {
            var _a;
            this.errors = true;
            (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidNameLength: true });
            this.errorMessage = gettext('The filename is too long.');
        };
        DropAreaComponent.prototype.onFileInvalidType = function () {
            var _a;
            this.errors = true;
            (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidType: true });
            this.errorMessage = gettext('The selected file is not supported.');
        };
        DropAreaComponent.prototype.onFileInvalidSize = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var msg, limit, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            msg = gettext('The selected file is too large. The size limit is {{ limit }}.');
                            _d = (_c = this.bytes).transform;
                            return [4 /*yield*/, this.filesService.loadBytesSizeLimit()];
                        case 1:
                            limit = _d.apply(_c, [_e.sent()]);
                            this.errors = true;
                            (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidSize: true });
                            this.errorMessage = this.translate.instant(msg, { limit: limit });
                            return [2 /*return*/];
                    }
                });
            });
        };
        DropAreaComponent.prototype.getFilesNamesAsString = function (files) {
            return lodashEs.map(files, function (_c) {
                var name = _c.name;
                return name;
            }).join(', ');
        };
        DropAreaComponent.prototype.isFilesArrayEmpty = function () {
            return lodashEs.get(this, 'files.length', 0) === 0;
        };
        DropAreaComponent.prototype.isTooManyFiles = function () {
            return lodashEs.get(this, 'files.length', 0) > this.maxAllowedFiles;
        };
        DropAreaComponent.prototype.isFilesAnObjectOrArray = function () {
            return typeof this.files === 'object';
        };
        DropAreaComponent.prototype.hasEmptyFiles = function () {
            var result = true;
            if (!this.isFilesArrayEmpty()) {
                result = this.isAnyFileEmpty();
            }
            return result;
        };
        DropAreaComponent.prototype.isAnyFileEmpty = function () {
            return lodashEs.some(Array.from(this.files), ['size', 0]);
        };
        DropAreaComponent.prototype.clearErrors = function () {
            var _a;
            delete this.errorMessage;
            this.errors = false;
            (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors(null);
        };
        DropAreaComponent.prototype.preventDefault = function ($event) {
            if ($event) {
                $event.preventDefault();
            }
        };
        DropAreaComponent.prototype.compose = function (files) {
            var _this = this;
            return Array.from(files).map(function (file) { return ({
                file: file,
                readAsJson: function () { return __awaiter(_this, void 0, void 0, function () { var _c, _d; return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _d = (_c = JSON).parse;
                            return [4 /*yield*/, this.read(file, ReadAsType.TEXT)];
                        case 1: return [2 /*return*/, _d.apply(_c, [_e.sent()])];
                    }
                }); }); },
                readAsText: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_c) {
                    return [2 /*return*/, this.read(file, ReadAsType.TEXT)];
                }); }); },
                readAsArrayBuffer: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_c) {
                    return [2 /*return*/, this.read(file, ReadAsType.ARRAY_BUFFER)];
                }); }); },
                readAsBinaryString: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_c) {
                    return [2 /*return*/, this.read(file, ReadAsType.BINARY_STRING)];
                }); }); },
                readAsDataURL: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_c) {
                    return [2 /*return*/, this.read(file, ReadAsType.DATA_URL)];
                }); }); }
            }); });
        };
        DropAreaComponent.prototype.read = function (file, type) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_c) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var reader = new FileReader();
                            switch (type) {
                                case ReadAsType.TEXT: {
                                    reader.readAsText(file);
                                    break;
                                }
                                case ReadAsType.ARRAY_BUFFER: {
                                    reader.readAsArrayBuffer(file);
                                    break;
                                }
                                case ReadAsType.BINARY_STRING: {
                                    reader.readAsBinaryString(file);
                                    break;
                                }
                                case ReadAsType.DATA_URL: {
                                    reader.readAsDataURL(file);
                                    break;
                                }
                            }
                            reader.onload = function () { return _this.onLoad(reader, resolve, reject); };
                        })];
                });
            });
        };
        DropAreaComponent.prototype.onLoad = function (reader, resolve, reject) {
            if (reader.readyState !== 2) {
                return;
            }
            if (reader.error) {
                reject(reader.error);
            }
            resolve(reader.result);
        };
        return DropAreaComponent;
    }());
    DropAreaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-drop-area',
                    template: "<div\n  class=\"drop-zone\"\n  *ngIf=\"!shouldShowFilesList()\"\n  [ngClass]=\"{ 'has-errors': errors }\"\n  [style.pointerEvents]=\"loading ? 'none' : 'auto'\"\n  #zone\n  (dragleave)=\"stopDragging()\"\n  (drop)=\"onDrop($event)\"\n  (dragover)=\"onOver()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  (click)=\"showPicker($event)\"\n  tabindex=\"0\"\n>\n  <div class=\"file-placeholder\" [ngClass]=\"{ 'drag-over': isOver }\">\n    <div *ngIf=\"loading\" class=\"d-flex p-4 flex-center\">\n      <div\n        class=\"progress progress-striped active m-0\"\n        *ngIf=\"progress !== -1\"\n        style=\"min-width: 50%\"\n      >\n        <div\n          class=\"progress-bar\"\n          role=\"progressbar\"\n          aria-valuenow=\"0\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          [style.width]=\"progress + '%'\"\n        ></div>\n      </div>\n      <div class=\"spinner-snake\" *ngIf=\"progress === -1\"></div>\n      <p class=\"flex-item-middle m-r-8\">\n        {{ loadingMessage | translate }}\n      </p>\n    </div>\n\n    <div *ngIf=\"!loading\" class=\"hint-placeholder pointer\">\n      <i class=\"dlt-c8y-icon-{{ icon }}\"></i>\n      <p *ngIf=\"!errors\">\n        <b>{{ message | translate }}</b>\n        <br />\n        <span *ngIf=\"alwaysShow && clickToOpen\" translate\n          >or click to browse your file system.</span\n        >\n      </p>\n      <div *ngIf=\"errors\" class=\"has-errors\">\n        <p class=\"form-control-feedback-message\">\n          {{ errorMessage | translate }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"drop-zone\"\n  *ngIf=\"shouldShowFilesList()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  tabindex=\"0\"\n>\n  <div *ngIf=\"loading\" class=\"p-absolute p-4 fit-w fit-h d-flex d-col j-c-center a-i-center\">\n    <p class=\"m-b-8\">\n      <strong>\n        {{ loadingMessage | translate }}\n      </strong>\n    </p>\n    <div\n      class=\"progress progress-striped active m-0\"\n      *ngIf=\"progress !== -1\"\n      style=\"min-width: 80%\"\n    >\n      <div\n        class=\"progress-bar\"\n        role=\"progressbar\"\n        aria-valuenow=\"0\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </div>\n    <div class=\"spinner p-relative m-0\" *ngIf=\"progress === -1\">\n      <div class=\"rect1\"></div>\n      <div class=\"rect2\"></div>\n      <div class=\"rect3\"></div>\n      <div class=\"rect4\"></div>\n      <div class=\"rect5\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!loading\" class=\"file-placeholder p-4\">\n    <div class=\"flex-row p-4\">\n      <i c8yIcon=\"file-o\" class=\"m-r-8\"></i>\n      <span title=\"{{ filesNameString }}\" class=\"text-truncate\">\n        {{ filesNameString }}\n      </span>\n      <button title=\"{{ 'Remove' | translate }}\" class=\"btn btn-clean showOnHover flex-item-right\">\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n\n<input\n  #picker\n  *ngIf=\"clickToOpen\"\n  (change)=\"onPick($event)\"\n  (click)=\"picker.focus()\"\n  (blur)=\"onTouched()\"\n  [accept]=\"acceptedExts\"\n  [multiple]=\"maxAllowedFiles > 1\"\n  type=\"file\"\n  style=\"opacity: 0; filter: alpha(opacity = 0); height: 0px\"\n/>\n<div #area [hidden]=\"isOver || loading\" (dragover)=\"toggle($event)\">\n  <ng-content></ng-content>\n</div>\n",
                    providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: DropAreaComponent, multi: true }]
                },] }
    ];
    DropAreaComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: FilesService },
        { type: i2.TranslateService },
        { type: BytesPipe }
    ]; };
    DropAreaComponent.propDecorators = {
        formControl: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        message: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        loadingMessage: [{ type: i0.Input }],
        forceHideList: [{ type: i0.Input }],
        alwaysShow: [{ type: i0.Input }],
        clickToOpen: [{ type: i0.Input }],
        loading: [{ type: i0.Input }],
        progress: [{ type: i0.Input }],
        dropped: [{ type: i0.Output }],
        maxAllowedFiles: [{ type: i0.Input }],
        files: [{ type: i0.Input }],
        accept: [{ type: i0.Input }],
        area: [{ type: i0.ViewChild, args: ['area', { static: true },] }],
        zone: [{ type: i0.ViewChild, args: ['zone', { static: false },] }],
        picker: [{ type: i0.ViewChild, args: ['picker', { static: false },] }],
        onkeyup: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }]
    };
    var ReadAsType;
    (function (ReadAsType) {
        ReadAsType[ReadAsType["TEXT"] = 0] = "TEXT";
        ReadAsType[ReadAsType["DATA_URL"] = 1] = "DATA_URL";
        ReadAsType[ReadAsType["ARRAY_BUFFER"] = 2] = "ARRAY_BUFFER";
        ReadAsType[ReadAsType["BINARY_STRING"] = 3] = "BINARY_STRING";
    })(ReadAsType || (ReadAsType = {}));

    /**
     * The angular module definition for a drop-area.
     * @exports DropAreaComponent
     */
    var DropAreaModule = /** @class */ (function () {
        function DropAreaModule() {
        }
        return DropAreaModule;
    }());
    DropAreaModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CommonModule],
                    exports: [DropAreaComponent],
                    declarations: [DropAreaComponent]
                },] }
    ];

    /**
     * User can upload a binary directly or use an URL.
     *
     * ## Usage Example:
     *
     * ```html
     * <div>
     * <c8y-file-picker [maxAllowedFiles]="1" (onFilesPicked)="onFile($event)">
     * </c8y-file-picker>
     * </div>
     * ```
     */
    var FilePickerComponent = /** @class */ (function () {
        function FilePickerComponent() {
            this.onFilesPicked = new i0.EventEmitter();
            this.maxAllowedFiles = Infinity;
            this.uploadChoice = 'uploadBinary';
            this.config = { maxlength: 2048 };
        }
        /**
         * @ignore
         */
        FilePickerComponent.prototype.ngOnInit = function () {
            if (this.fileBinary) {
                this.droppedFiles = [this.fileBinary];
            }
        };
        /**
         * Triggered by dropped file in component and pass it into drop-area component.
         */
        FilePickerComponent.prototype.onFileDropped = function (droppedFiles) {
            this.onFilesPicked.emit({
                droppedFiles: droppedFiles
            });
        };
        /**
         * Triggered when user changes upload choice, from upload url to upload binary.
         */
        FilePickerComponent.prototype.clearInputFromUrl = function () {
            delete this.fileUrl;
            this.fileToSave = {
                url: undefined
            };
            this.onFilesPicked.emit(this.fileToSave);
        };
        /**
         * Triggered when user changes upload choice, to avoid cumulation of droppedFiles.
         */
        FilePickerComponent.prototype.clearSelectedFiles = function () {
            this.dropArea.onDelete();
            this.fileToSave = {
                droppedFiles: null
            };
            this.onFilesPicked.emit(this.fileToSave);
        };
        /**
         * Triggered when user puts binary's url to upload.
         */
        FilePickerComponent.prototype.onFileUrlChange = function (urlStr) {
            this.fileToSave = {
                url: urlStr
            };
            this.onFilesPicked.emit(this.fileToSave);
        };
        /**
         * Checks if there is popover to display.
         */
        FilePickerComponent.prototype.isPopoverUsed = function () {
            return !lodashEs.isEmpty(this.fileUrlPopover);
        };
        return FilePickerComponent;
    }());
    FilePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-file-picker',
                    template: "<div class=\"form-group\">\n  <label title=\"{{ 'Upload a binary' | translate }}\" class=\"c8y-radio radio-inline\">\n    <input\n      #radio\n      type=\"radio\"\n      value=\"uploadBinary\"\n      name=\"uploadChoice\"\n      [(ngModel)]=\"uploadChoice\"\n      (click)=\"clearInputFromUrl()\"\n    />\n    <span></span>\n    <span>{{ 'Upload a binary' | translate }}</span>\n  </label>\n  <label title=\"{{ 'Provide a file path' | translate }}\" class=\"c8y-radio radio-inline m-l-8\">\n    <input\n      #radio\n      type=\"radio\"\n      value=\"uploadUrl\"\n      name=\"uploadChoice\"\n      [(ngModel)]=\"uploadChoice\"\n      (click)=\"clearSelectedFiles()\"\n    />\n    <span></span>\n    <span>\n      {{ 'Provide a file path' | translate }}\n    </span>\n    <button\n      *ngIf=\"isPopoverUsed()\"\n      class=\"btn btn-clean text-primary m-l-4\"\n      type=\"button\"\n      popover=\"{{ fileUrlPopover | translate }}\"\n      triggers=\"focus\"\n      container=\"body\"\n      placement=\"top\"\n    >\n      <i [c8yIcon]=\"'question-circle-o'\"></i>\n    </button>\n  </label>\n</div>\n\n<div [hidden]=\"uploadChoice !== 'uploadBinary'\">\n  <c8y-form-group class=\"m-0\">\n    <c8y-drop-area\n      class=\"drop-area-sm\"\n      (dropped)=\"onFileDropped($event)\"\n      [title]=\"'Drop file or click to browse' | translate\"\n      [maxAllowedFiles]=\"maxAllowedFiles\"\n      [files]=\"droppedFiles\"\n    >\n    </c8y-drop-area>\n  </c8y-form-group>\n</div>\n\n<div [hidden]=\"uploadChoice !== 'uploadUrl'\">\n  <c8y-form-group class=\"m-0\">\n    <div class=\"m-b-4 p-b-8\">\n      <div class=\"input-group\">\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"globe\"></i>\n        </span>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          name=\"fileUrl\"\n          [(ngModel)]=\"fileUrl\"\n          (ngModelChange)=\"onFileUrlChange($event)\"\n          placeholder=\"{{ 'e.g.' | translate }} http://example.com/binary.zip\"\n          maxlength=\"{{ config.maxlength }}\"\n          required\n        />\n      </div>\n    </div>\n  </c8y-form-group>\n</div>\n"
                },] }
    ];
    FilePickerComponent.propDecorators = {
        dropArea: [{ type: i0.ViewChild, args: [DropAreaComponent, { static: true },] }],
        onFilesPicked: [{ type: i0.Output }],
        maxAllowedFiles: [{ type: i0.Input }],
        uploadChoice: [{ type: i0.Input }],
        fileUrl: [{ type: i0.Input }],
        fileBinary: [{ type: i0.Input }],
        config: [{ type: i0.Input }],
        fileUrlPopover: [{ type: i0.Input }]
    };

    /**
     * The angular module definition for a drop-area.
     * @exports FilePickerComponent
     */
    var FilePickerModule = /** @class */ (function () {
        function FilePickerModule() {
        }
        return FilePickerModule;
    }());
    FilePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        FormsModule,
                        common.CommonModule,
                        DropAreaModule,
                        forms.FormsModule,
                        CommonModule,
                        popover.PopoverModule
                    ],
                    exports: [FilePickerComponent],
                    declarations: [FilePickerComponent]
                },] }
    ];

    var DatePickerComponent = /** @class */ (function () {
        function DatePickerComponent() {
            this.onDateSelected = new i0.EventEmitter();
        }
        DatePickerComponent.prototype.ngOnInit = function () {
            this.fgDatePicker = new forms.FormGroup({
                dateFrom: new forms.FormControl(),
                dateTo: new forms.FormControl()
            });
        };
        DatePickerComponent.prototype.filter = function () {
            this.onDateSelected.emit(this.fgDatePicker.value);
            this.dateFrom = this.fgDatePicker.get('dateFrom').value;
            this.dateTo = this.fgDatePicker.get('dateTo').value;
        };
        DatePickerComponent.prototype.clearFilter = function () {
            this.fgDatePicker.setValue({
                dateFrom: null,
                dateTo: null
            });
            this.onDateSelected.emit(null);
            this.dateFrom = null;
            this.dateTo = null;
        };
        return DatePickerComponent;
    }());
    DatePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-date-picker',
                    template: "<div\n  dropdown\n  class=\"c8y-child-assets-selector\"\n  #datefilter=\"bs-dropdown\"\n  placement=\"bottom left\"\n  [autoClose]=\"false\"\n>\n  <button\n    id=\"date-range\"\n    dropdownToggle\n    title=\"{{ 'Date filter' | translate }}\"\n    type=\"button\"\n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    aria-controls=\"dropdown-date-range\"\n  >\n    <i c8yIcon=\"calendar-o\" class=\"m-r-4 text-primary\"></i>\n    <span class=\"text-truncate\">\n      <span *ngIf=\"dateFrom\">\n        <span class=\"text-label-small\">{{ 'From`date`' | translate }}</span>\n        {{ dateFrom | date }}\n      </span>\n      <span *ngIf=\"dateTo\">\n        <span class=\"text-label-small\">{{ 'To`date`' | translate }}</span>\n        {{ dateTo | date }}\n      </span>\n      <span *ngIf=\"!dateFrom && !dateTo\">\n        {{ 'Filter by date' | translate }}\n      </span>\n    </span>\n  </button>\n  <div\n    id=\"dropdown-date-range\"\n    *dropdownMenu\n    class=\"dropdown-menu\"\n    role=\"menu\"\n    aria-labelledby=\"date-range\"\n  >\n    <form [formGroup]=\"fgDatePicker\" class=\"dropdown-form\">\n      <span class=\"text-medium m-b-4\" translate>Date from</span>\n      <c8y-form-group class=\"datepicker d-block m-b-16\" style=\"max-height: 32px\">\n        <input\n          formControlName=\"dateFrom\"\n          class=\"form-control fit-w text-left\"\n          placeholder=\"{{ 'Date from' | translate }}\"\n          bsDatepicker\n          [maxDate]=\"dateTo\"\n          (bsValueChange)=\"dateFrom = $event\"\n          [bsConfig]=\"{ customTodayClass: 'today', returnFocusToInput: true }\"\n        />\n      </c8y-form-group>\n      <span class=\"text-medium m-b-4\" translate>Date to</span>\n      <c8y-form-group class=\"datepicker m-l-0 d-block\" style=\"max-height: 32px\">\n        <input\n          name=\"dateTo\"\n          formControlName=\"dateTo\"\n          class=\"form-control fit-w text-left\"\n          placeholder=\"{{ 'Date to' | translate }}\"\n          bsDatepicker\n          [minDate]=\"dateFrom\"\n          (bsValueChange)=\"dateTo = $event\"\n          [bsConfig]=\"{ customTodayClass: 'today', returnFocusToInput: true }\"\n        />\n      </c8y-form-group>\n      <div class=\"p-t-24\">\n        <button\n          title=\"{{ 'Clear selection' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default btn-sm\"\n          (click)=\"clearFilter(); datefilter.isOpen = !datefilter.isOpen\"\n        >\n          {{ 'Clear`selection`' | translate }}\n        </button>\n        <button\n          [disabled]=\"!fgDatePicker.get('dateFrom').value && !fgDatePicker.get('dateTo').value\"\n          title=\"{{ 'Apply selection' | translate }}\"\n          type=\"submit\"\n          class=\"btn btn-primary btn-sm\"\n          (click)=\"filter(); datefilter.isOpen = !datefilter.isOpen\"\n        >\n          {{ 'Apply`selection`' | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
                },] }
    ];
    DatePickerComponent.propDecorators = {
        onDateSelected: [{ type: i0.Output }]
    };

    // @dynamic
    var C8yValidators = /** @class */ (function () {
        function C8yValidators() {
        }
        C8yValidators.minMaxValidator = function () {
            var _this = this;
            return function (control) {
                var _a, _b;
                var min = control.get("min");
                var max = control.get("max");
                var minDefined = min && min.value !== undefined && min.value !== null;
                var maxDefined = max && max.value !== undefined && max.value !== null;
                // remove previous errors
                _this.removeErrors(min, [exports.DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]);
                _this.removeErrors(max, [exports.DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]);
                if (!minDefined || !maxDefined) {
                    return null;
                }
                // sets errors
                if (min.value >= max.value) {
                    var minError = (_a = {}, _a[exports.DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX] = true, _a);
                    var maxError = (_b = {}, _b[exports.DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN] = true, _b);
                    var errors = Object.assign({}, minError, maxError);
                    min.setErrors(Object.assign(minError, min.errors || {}));
                    max.setErrors(Object.assign(maxError, max.errors || {}));
                    return errors;
                }
                return null;
            };
        };
        C8yValidators.requireBothMinAndMax = function () {
            var _this = this;
            var errorAttribute = exports.DatapointLibraryValidationErrors.SHOULD_BE_DEFINED;
            return function (control) {
                var _a, _b;
                var min = control.get("min");
                var max = control.get("max");
                var minDefined = min && min.value !== undefined && min.value !== null;
                var maxDefined = max && max.value !== undefined && max.value !== null;
                var errors = {};
                if (minDefined && !maxDefined && max) {
                    // sets error
                    var error = (_a = {}, _a[errorAttribute] = true, _a);
                    max.setErrors(Object.assign({}, max.errors || {}, error));
                    Object.assign(errors, error);
                }
                else {
                    // remove previous error
                    _this.removeErrors(max, [errorAttribute]);
                }
                if (maxDefined && !minDefined && min) {
                    // sets error
                    var error = (_b = {}, _b[errorAttribute] = true, _b);
                    min.setErrors(Object.assign({}, min.errors || {}, error));
                    Object.assign(errors, error);
                }
                else {
                    // remove previous error
                    _this.removeErrors(min, [errorAttribute]);
                }
                return Object.keys(errors).length ? errors : null;
            };
        };
        C8yValidators.withinScale = function (field) {
            var _this = this;
            return function (control) {
                var _a, _b;
                if (!field) {
                    return null;
                }
                var min = control.get("range.min");
                var max = control.get("range.max");
                var fieldControl = control.get(field);
                var minDefined = min && min.value !== undefined && min.value !== null;
                var maxDefined = max && max.value !== undefined && max.value !== null;
                var fieldDefined = fieldControl && fieldControl.value !== undefined && fieldControl.value !== null;
                // remove previous errors
                _this.removeErrors(fieldControl, [
                    exports.DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX,
                    exports.DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN
                ]);
                if (!minDefined || !maxDefined || !fieldDefined) {
                    return null;
                }
                var errors = {};
                // sets errors
                if (fieldControl.value < min.value) {
                    var error = (_a = {}, _a[exports.DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN] = true, _a);
                    fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                    Object.assign(errors, error);
                }
                if (fieldControl.value > max.value) {
                    var error = (_b = {}, _b[exports.DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX] = true, _b);
                    fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                    Object.assign(errors, error);
                }
                return Object.keys(errors).length ? errors : null;
            };
        };
        C8yValidators.maxActiveCount = function (maxActive, activeAttribute) {
            if (activeAttribute === void 0) { activeAttribute = 'details.__active'; }
            return function (control) {
                var _a;
                if (!Number.isInteger(maxActive) || Number.isNaN(maxActive)) {
                    return null;
                }
                if (!(control instanceof forms.FormArray)) {
                    return null;
                }
                var formArray = control;
                var value = formArray.value;
                if (!Array.isArray(value)) {
                    return null;
                }
                var filteredActiveEntries = value.filter(function (tmp) { return tmp && !!lodashEs.get(tmp, activeAttribute); });
                if (filteredActiveEntries.length <= maxActive) {
                    return null;
                }
                return _a = {}, _a[exports.DatapointLibraryValidationErrors.MAX_ACTIVE_COUNT] = { maxActive: maxActive, actualLength: filteredActiveEntries.length }, _a;
            };
        };
        C8yValidators.minActiveCount = function (minActive, activeAttribute) {
            if (activeAttribute === void 0) { activeAttribute = 'details.__active'; }
            return function (control) {
                var _a;
                if (!Number.isInteger(minActive) || Number.isNaN(minActive)) {
                    return null;
                }
                if (!(control instanceof forms.FormArray)) {
                    return null;
                }
                var formArray = control;
                var value = formArray.value;
                if (!Array.isArray(value)) {
                    return null;
                }
                var filteredActiveEntries = value.filter(function (tmp) { return tmp && !!lodashEs.get(tmp, activeAttribute); });
                if (filteredActiveEntries.length >= minActive) {
                    return null;
                }
                return _a = {}, _a[exports.DatapointLibraryValidationErrors.MIN_ACTIVE_COUNT] = { minActive: minActive, actualLength: filteredActiveEntries.length }, _a;
            };
        };
        C8yValidators.removeErrors = function (control, errors) {
            var e_1, _a;
            if (!control || !control.errors) {
                return false;
            }
            var removedError = false;
            try {
                for (var errors_1 = __values(errors), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
                    var error = errors_1_1.value;
                    if (control.errors[error]) {
                        removedError = true;
                        delete control.errors[error];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (errors_1_1 && !errors_1_1.done && (_a = errors_1.return)) _a.call(errors_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (removedError) {
                control.setErrors(Object.keys(control.errors).length ? Object.assign({}, control.errors) : null);
            }
            return removedError;
        };
        return C8yValidators;
    }());

    /**
     * The angular module definition for a date picker - it allows you to pick either one date or a range of two.
     * @exports DatePickerComponent
     */
    var DatePickerModule = /** @class */ (function () {
        function DatePickerModule() {
        }
        return DatePickerModule;
    }());
    DatePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        FormsModule,
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        dropdown.BsDropdownModule.forRoot(),
                        i4$1.BsDatepickerModule.forRoot(),
                        CommonModule
                    ],
                    exports: [DatePickerComponent],
                    declarations: [DatePickerComponent]
                },] }
    ];

    var ContextRouteComponent = /** @class */ (function () {
        function ContextRouteComponent(route, contextRouteService) {
            this.route = route;
            this.contextRouteService = contextRouteService;
        }
        ContextRouteComponent.prototype.ngOnInit = function () {
            this.contextRouteService.init(this.route);
        };
        ContextRouteComponent.prototype.ngOnDestroy = function () {
            this.contextRouteService.destroy();
        };
        ContextRouteComponent.prototype.refreshTabs = function () {
            this.contextRouteService.refreshContext();
        };
        return ContextRouteComponent;
    }());
    ContextRouteComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-context-route',
                    template: "<router-outlet></router-outlet>\n"
                },] }
    ];
    ContextRouteComponent.ctorParameters = function () { return [
        { type: i1.ActivatedRoute },
        { type: ContextRouteService }
    ]; };

    var ContextRouteGuard = /** @class */ (function () {
        function ContextRouteGuard(injector) {
            this.injector = injector;
            this.caches = new Map();
        }
        ContextRouteGuard.prototype.canActivate = function (route) {
            var id = route.paramMap.get('id');
            var service = this.service(route);
            this.clearDetailCached(service, id);
            return this.detailCached(service, id).pipe(operators.tap(function (contextData) { return (route.data = Object.assign(Object.assign({}, route.data), { contextData: contextData })); }), operators.map(function () { return true; }), operators.catchError(function (ex) { return rxjs.of(false); }));
        };
        ContextRouteGuard.prototype.service = function (route) {
            var serviceInstance = ViewContextServices.contextToService(route.data.context);
            return this.injector.get(serviceInstance);
        };
        ContextRouteGuard.prototype.detailCached = function (service, id) {
            if (id === 'new') {
                return rxjs.of(undefined);
            }
            var cache = this.getCache(service);
            var cached = cache[id];
            if (!cached) {
                var params = service instanceof i4.InventoryService ? { withChildren: false } : undefined;
                cached = rxjs.from(service.detail(id, params)).pipe(operators.map(function (_a) {
                    var data = _a.data;
                    return data;
                }), operators.shareReplay(1));
                cache[id] = cached;
            }
            return cached;
        };
        ContextRouteGuard.prototype.clearDetailCached = function (service, id) {
            var cache = this.getCache(service);
            delete cache[id];
        };
        ContextRouteGuard.prototype.getCache = function (service) {
            var cache = this.caches.get(service);
            if (!cache) {
                cache = {};
                this.caches.set(service, cache);
            }
            return cache;
        };
        return ContextRouteGuard;
    }());
    ContextRouteGuard.decorators = [
        { type: i0.Injectable }
    ];
    ContextRouteGuard.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var EmptyComponent = /** @class */ (function () {
        function EmptyComponent() {
        }
        return EmptyComponent;
    }());
    EmptyComponent.decorators = [
        { type: i0.Component, args: [{ selector: 'empty', template: '' },] }
    ];

    var routes = [{
            path: 'users/new',
            component: EmptyComponent
        },
        {
            path: 'tenants/new',
            component: EmptyComponent
        }];
    // tslint:disable-next-line: forin
    for (var key in exports.ViewContext) {
        var context = exports.ViewContext[key];
        routes.push({
            path: context,
            component: ContextRouteComponent,
            canActivate: [ContextRouteGuard],
            data: { context: context, contextData: {} },
            resolve: {
                tabs: RouterTabsResolver,
            }
        });
    }
    var RouterModule = /** @class */ (function () {
        function RouterModule(routerService) {
            // Declared but never used is intended: to always have a instance of RouterService.
        }
        RouterModule.providers = function () {
            return [
                ContextRouteGuard,
                RouterTabsResolver,
                RouterService
            ];
        };
        RouterModule.forRoot = function () {
            return {
                ngModule: RouterModule,
                providers: RouterModule.providers()
            };
        };
        return RouterModule;
    }());
    RouterModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ContextRouteComponent, EmptyComponent],
                    imports: [
                        i1.RouterModule.forChild(routes),
                        HeaderModule,
                        CommonModule
                    ],
                    entryComponents: [ContextRouteComponent, EmptyComponent]
                },] }
    ];
    RouterModule.ctorParameters = function () { return [
        { type: RouterService }
    ]; };

    var GuideHrefDirective = /** @class */ (function () {
        function GuideHrefDirective(elementRef) {
            this.elementRef = elementRef;
            this.htmlAnchor = this.elementRef.nativeElement;
            if (!this.htmlAnchor.hasAttribute('target')) {
                this.htmlAnchor.setAttribute('target', '_blank');
            }
        }
        Object.defineProperty(GuideHrefDirective.prototype, "baseHref", {
            set: function (href) {
                this.htmlAnchor.href = href + "/" + this.c8yGuideHref;
            },
            enumerable: false,
            configurable: true
        });
        return GuideHrefDirective;
    }());
    GuideHrefDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[c8y-guide-href]'
                },] }
    ];
    GuideHrefDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    GuideHrefDirective.propDecorators = {
        c8yGuideHref: [{ type: i0.Input, args: ['c8y-guide-href',] }]
    };

    var GuideDocsComponent = /** @class */ (function () {
        function GuideDocsComponent(docs, el, renderer, translateDirective) {
            this.docs = docs;
            this.el = el;
            this.renderer = renderer;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.translateDirective = translateDirective;
        }
        Object.defineProperty(GuideDocsComponent.prototype, "translateDirective", {
            get: function () {
                return this._translateDirective;
            },
            set: function (value) {
                if (!value) {
                    return;
                }
                this._translateDirective = value;
            },
            enumerable: false,
            configurable: true
        });
        GuideDocsComponent.prototype.ngOnInit = function () {
            this.baseUrl = this.docs.getBaseUrl();
        };
        /**
         * After content is initialized we subscribe for translation events, then we are able to modify
         * anchor just as C8yGuideHrefDirective does.
         */
        GuideDocsComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.translateDirective) {
                this.translateDirective.htmlUpdateEvent
                    .pipe(operators.takeUntil(this.destroyed$))
                    .subscribe(function () {
                    _this.replaceAnchorAttributes();
                });
            }
            else {
                this.replaceAnchorAttributes();
            }
            this.links.forEach(function (guide) {
                guide.baseHref = _this.baseUrl;
            });
        };
        /**
         * Find and modify anchor elements
         */
        GuideDocsComponent.prototype.replaceAnchorAttributes = function () {
            var _this = this;
            var anchors = this.findGuideAnchors(this.el.nativeElement);
            anchors.forEach(function (a) {
                var guideHref = _this.baseUrl + "/" + a.getAttribute('c8y-guide-href');
                _this.renderer.setAttribute(a, 'href', guideHref);
                if (!a.hasAttribute('target')) {
                    _this.renderer.setAttribute(a, 'target', '_blank');
                }
            });
        };
        /**
         * Recursive function, returns array of Anchor elements inside HTMLElement.
         */
        GuideDocsComponent.prototype.findGuideAnchors = function (el) {
            var _this = this;
            var isAnchor = function () { return el.nodeName === 'A'; };
            var hasGuideHrefAttr = function () { return !!el.attributes.getNamedItem('c8y-guide-href'); };
            var hasChildren = function () { return el.childNodes && el.childNodes.length > 0; };
            var result = [];
            if (isAnchor() && hasGuideHrefAttr()) {
                result.push(el);
            }
            else if (hasChildren()) {
                el.childNodes.forEach(function (node) {
                    var searchResult = _this.findGuideAnchors(node);
                    if (searchResult) {
                        result = __spreadArray(__spreadArray([], __read(result)), __read(searchResult));
                    }
                });
            }
            return result;
        };
        GuideDocsComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return GuideDocsComponent;
    }());
    GuideDocsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[c8y-guide-docs]',
                    template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
                },] }
    ];
    GuideDocsComponent.ctorParameters = function () { return [
        { type: DocsService },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: C8yTranslateDirective, decorators: [{ type: i0.Optional }] }
    ]; };
    GuideDocsComponent.propDecorators = {
        links: [{ type: i0.ContentChildren, args: [GuideHrefDirective, { descendants: true },] }],
        translateDirective: [{ type: i0.ContentChild, args: [C8yTranslateDirective, { static: true },] }]
    };

    var DocsModule = /** @class */ (function () {
        function DocsModule() {
        }
        return DocsModule;
    }());
    DocsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        GuideHrefDirective,
                        GuideDocsComponent
                    ],
                    imports: [common.CommonModule],
                    exports: [
                        GuideHrefDirective,
                        GuideDocsComponent
                    ],
                    providers: [DocsService],
                },] }
    ];

    var ArrayTypeComponent = /** @class */ (function (_super) {
        __extends(ArrayTypeComponent, _super);
        function ArrayTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ArrayTypeComponent.prototype.add = function () {
            this.formControl.markAsTouched();
            _super.prototype.add.call(this);
        };
        ArrayTypeComponent.prototype.remove = function (i) {
            this.formControl.markAsTouched();
            _super.prototype.remove.call(this, i);
        };
        ArrayTypeComponent.prototype.ngOnInit = function () {
            if (this.to.required && !this.field.fieldGroup.length) {
                this.add();
            }
        };
        return ArrayTypeComponent;
    }(core.FieldArrayType));
    ArrayTypeComponent.CONFIG = {
        types: [{ name: 'array', component: ArrayTypeComponent }]
    };
    ArrayTypeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-array-type',
                    template: "<div role=\"group\" [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <div id=\"{{ id + '-fieldset' }}\" class=\"legend form-block\" *ngIf=\"to.label || to.description\">\n    {{ to.label | humanize }}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4 m-t-auto m-b-auto\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      [outsideClick]=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-primary\"></i>\n    </button>\n  </div>\n\n  <div\n    class=\"form-control-feedback-message has-error\"\n    role=\"alert\"\n    *ngIf=\"showError && formControl.errors\"\n  >\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n\n  <div *ngFor=\"let ifield of field.fieldGroup; let i = index\" class=\"input-group-array\">\n    <formly-field [field]=\"ifield\"></formly-field>\n    <div class=\"input-group-btn\" [ngClass]=\"{ 'm-t-24': i === 0 }\">\n      <button\n        type=\"button\"\n        class=\"btn btn-clean m-l-auto\"\n        title=\"{{ 'Delete' | translate }}\"\n        [disabled]=\"to.disabled || field.fieldGroup.length === 1\"\n        (click)=\"remove(i)\"\n      >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"p-t-8\">\n    <button\n      type=\"button\"\n      title=\"{{\n        (field.templateOptions?.addText | translate) || 'Add \\{\\{ label \\}\\}'\n          | translate: field?.fieldArray?.templateOptions\n      }}\"\n      class=\"btn btn-default\"\n      [disabled]=\"to.disabled\"\n      (click)=\"add()\"\n      [attr.data-cy]=\"field.templateOptions?.addTextDataCy || 'add-array-item'\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      <span\n        *ngIf=\"!field.templateOptions?.addText\"\n        ngNonBindable\n        translate\n        [translateParams]=\"field?.fieldArray?.templateOptions\"\n      >\n        Add {{ label }}\n      </span>\n      <span *ngIf=\"field.templateOptions?.addText\">\n        {{ field.templateOptions?.addText | translate }}\n      </span>\n    </button>\n  </div>\n</div>\n"
                },] }
    ];

    var FieldCheckbox = /** @class */ (function (_super) {
        __extends(FieldCheckbox, _super);
        function FieldCheckbox() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.defaultOptions = {
                templateOptions: {
                    indeterminate: true,
                    formCheck: 'custom' // 'custom' | 'custom-inline' | 'custom-switch' | 'stacked' | 'inline' | 'nolabel'
                }
            };
            return _this;
        }
        return FieldCheckbox;
    }(core.FieldType));
    FieldCheckbox.CONFIG = {
        types: [
            {
                name: 'checkbox',
                component: FieldCheckbox
            },
            {
                name: 'boolean',
                extends: 'checkbox'
            },
            {
                name: 'switch',
                extends: 'checkbox',
                defaultOptions: {
                    templateOptions: {
                        switchMode: true,
                        indeterminate: false,
                    }
                },
            }
        ]
    };
    FieldCheckbox.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-field-checkbox',
                    template: "  <label\n    [class.c8y-checkbox]=\"!to.switchMode\"\n    [class.c8y-switch]=\"to.switchMode\"\n    [class.has-error]=\"showError\">\n    <input\n      type=\"checkbox\"\n      [class.is-invalid]=\"showError\"\n      [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n      [class.position-static]=\"to.formCheck === 'nolabel'\"\n      [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n      [indeterminate]=\"to.indeterminate && formControl.value == null\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n    /><span></span><span> {{ to.label | humanize}} </span>\n    <span *ngIf=\"to.required && to.hideRequiredMarker !== true\"><em class=\"m-l-4\" translate>(required)</em></span>\n    <button\n      *ngIf=\"!!to.description\"\n      class=\"btn-clean m-l-4 flex-item-middle\"\n      [popover]=\"to.description\"\n      placement=\"auto\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-primary\"></i>\n  </button>\n  </label>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    var FieldDate = /** @class */ (function (_super) {
        __extends(FieldDate, _super);
        function FieldDate() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FieldDate;
    }(core.FieldType));
    FieldDate.CONFIG = {
        types: [
            {
                name: 'date',
                component: FieldDate
            }
        ]
    };
    FieldDate.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-field-date',
                    template: "<div class=\"form-group\"  [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <label id=\"{{ id + '-fieldset' }}\" *ngIf=\"to.label || to.description\">\n    {{ to.label | humanize}}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n    </button>\n  </label>\n  <div class=\"form-group datepicker\">\n    <input\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      class=\"form-control\"\n      placeholder=\"Date\"\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [placeholder]=\"'Select a date\u2026' | translate\"\n      placement=\"top\"\n      bsDatepicker\n      [required]=\"to.required\"\n    />\n  </div>\n</div>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    var FieldFile = /** @class */ (function (_super) {
        __extends(FieldFile, _super);
        function FieldFile() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.dropAreaInputs = [
                'title',
                'message',
                'icon',
                'loadingMessage',
                'alwaysShow',
                'clickToOpen',
                'loading',
                'progress',
                'maxAllowedFiles',
                'files',
                'accept'
            ];
            return _this;
        }
        FieldFile.prototype.ngOnInit = function () {
            var _this = this;
            var keys = Array.isArray(this.key) ? this.key : [this.key];
            var path = keys.join('.');
            this.dropArea.files = lodash.get(this.model, path);
            this.dropAreaInputs
                .filter(function (input) { return _this.to[input] !== undefined; })
                .forEach(function (input) { return (_this.dropArea[input] = _this.to[input]); });
        };
        return FieldFile;
    }(core.FieldType));
    FieldFile.CONFIG = {
        types: [
            {
                name: 'file',
                component: FieldFile
            }
        ]
    };
    FieldFile.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-field-file',
                    template: "<div class=\"form-group\" role=\"group\" [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <label id=\"{{ id + '-fieldset' }}\" *ngIf=\"to.label || to.description\">\n    {{ to.label | humanize }}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      [outsideClick]=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n    </button>\n  </label>\n\n  <c8y-drop-area #dropArea class=\"drop-area-sm\" [formControl]=\"formControl\"> </c8y-drop-area>\n</div>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    FieldFile.propDecorators = {
        dropArea: [{ type: i0.ViewChild, args: ['dropArea', { static: true },] }]
    };

    var WrapperFormField = /** @class */ (function (_super) {
        __extends(WrapperFormField, _super);
        function WrapperFormField() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.maxHelpBlockLength = 64;
            return _this;
        }
        WrapperFormField.prototype.ngOnInit = function () {
            this.showDescriptionAsPopup =
                this.field.type === 'radio' || this.field.type === 'typeahead' ||
                    (this.to.description && this.to.description.length > this.maxHelpBlockLength);
        };
        return WrapperFormField;
    }(core.FieldWrapper));
    WrapperFormField.CONFIG = {
        wrappers: [{ name: 'c8y-form-field', component: WrapperFormField }]
    };
    WrapperFormField.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-wrapper-form-field',
                    template: "<div class=\"form-group\" [class.has-error]=\"showError\">\n  <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n    {{ to.label | humanize }} <i\n      *ngIf=\"to.tooltip\"\n      class=\"text-info\"\n      c8yIcon=\"info-circle\"\n      title=\"{{ to.tooltip | translate }}\"\n    ></i>\n    <button\n      *ngIf=\"to.description && showDescriptionAsPopup\"\n      class=\"btn-clean m-l-4 flex-item-middle\"\n      [popover]=\"to.description | translate\"\n      placement=\"auto\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n    </button>\n  </label>\n\n  <ng-template #fieldComponent></ng-template>\n\n  <div *ngIf=\"showError\" class=\"c8y-messages\">\n    <formly-validation-message\n      class=\"form-control-feedback-message\"\n      [field]=\"field\"\n    ></formly-validation-message>\n  </div>\n\n  <div class=\"help-block\" *ngIf=\"!showError && to.description && !showDescriptionAsPopup\">\n    {{ to.description | translate }}\n  </div>\n</div>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    var FieldInput = /** @class */ (function (_super) {
        __extends(FieldInput, _super);
        function FieldInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FieldInput.prototype, "type", {
            get: function () {
                return this.to.type || 'text';
            },
            enumerable: false,
            configurable: true
        });
        return FieldInput;
    }(core.FieldType));
    FieldInput.CONFIG = {
        types: [
            {
                name: 'input',
                component: FieldInput,
                wrappers: ['c8y-form-field']
            },
            { name: 'string', extends: 'input' },
            { name: 'typeahead', extends: 'input' },
            {
                name: 'number',
                extends: 'input',
                defaultOptions: {
                    templateOptions: {
                        type: 'number'
                    }
                }
            },
            {
                name: 'integer',
                extends: 'input',
                defaultOptions: {
                    templateOptions: {
                        type: 'number'
                    }
                }
            }
        ]
    };
    FieldInput.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-field-input',
                    template: "<input\n  *ngIf=\"type !== 'number'; else numberTmp\"\n  [type]=\"type\"\n  [formControl]=\"formControl\"\n  class=\"form-control\"\n  [formlyAttributes]=\"field\"\n  [required]=\"to.required\"\n  [attr.autocomplete]=\"to.autocomplete ? to.autocomplete : null\"\n  [class.is-invalid]=\"showError\"\n/>\n<ng-template #numberTmp>\n  <input\n    type=\"number\"\n    [formControl]=\"formControl\"\n    class=\"form-control\"\n    [formlyAttributes]=\"field\"\n    [required]=\"to.required\"\n    [attr.autocomplete]=\"to.autocomplete ? to.autocomplete : null\"\n    [class.is-invalid]=\"showError\"\n  />\n</ng-template>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    var ObjectTypeComponent = /** @class */ (function (_super) {
        __extends(ObjectTypeComponent, _super);
        function ObjectTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ObjectTypeComponent;
    }(core.FieldType));
    ObjectTypeComponent.CONFIG = {
        types: [{ name: 'object', component: ObjectTypeComponent }]
    };
    ObjectTypeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-object-type',
                    template: "<div role=\"group\" [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <p *ngIf=\"to.label\" class=\"lead text-center m-b-16\" id=\"{{ id + '-fieldset' }}\">\n    {{ to.label | humanize }}\n  </p>\n  <p *ngIf=\"to.description\" class=\"m-b-8\">\n    {{ to.description }}\n  </p>\n  <div\n    class=\"form-control-feedback-message has-error\"\n    role=\"alert\"\n    *ngIf=\"showError && formControl.errors\"\n  >\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n  <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n</div>\n"
                },] }
    ];

    var FieldRadio = /** @class */ (function (_super) {
        __extends(FieldRadio, _super);
        function FieldRadio() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.defaultOptions = {
                templateOptions: {
                    options: [],
                    formCheck: 'custom' // 'custom' | 'custom-inline' | 'stacked' | 'inline'
                }
            };
            return _this;
        }
        return FieldRadio;
    }(core.FieldType));
    FieldRadio.CONFIG = {
        types: [
            {
                name: 'radio',
                component: FieldRadio,
                wrappers: ['c8y-form-field']
            }
        ]
    };
    FieldRadio.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-field-radio',
                    template: "<label\n  *ngFor=\"let option of to.options | formlySelectOptions: field | async; let i = index\"\n  [title]=\"option.label\"\n  class=\"c8y-radio\"\n>\n  <input\n    type=\"radio\"\n    [id]=\"id + '_' + i\"\n    [name]=\"field.name || id\"\n    [attr.value]=\"option.value\"\n    [value]=\"option.value\"\n    [formControl]=\"formControl\"\n    [formlyAttributes]=\"field\"\n    [attr.disabled]=\"option.disabled || formControl.disabled ? true : null\"\n  />\n  <span></span>\n  <span>{{ option.label | humanize }}</span>\n</label>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    var FieldDateTime = /** @class */ (function (_super) {
        __extends(FieldDateTime, _super);
        function FieldDateTime() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FieldDateTime;
    }(core.FieldType));
    FieldDateTime.CONFIG = {
        types: [
            {
                name: 'date-time',
                component: FieldDateTime,
                wrappers: ['c8y-form-field']
            }
        ]
    };
    FieldDateTime.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-field-date-time',
                    template: "<c8y-date-time-picker\n  [minDate]=\"to.minDate\"\n  [maxDate]=\"to.maxDate\"\n  [placeholder]=\"(to.placeholder | translate)\"\n  [formControl]=\"formControl\"\n></c8y-date-time-picker>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    var DateTimePickerComponent = /** @class */ (function () {
        function DateTimePickerComponent() {
            var _this = this;
            this.defaultPlaceholder = gettext('Select a date…');
            this.destroy$ = new rxjs.Subject();
            this.form = new forms.FormGroup({});
            this.form.addControl('date', new forms.FormControl(null));
            this.form.addControl('time', new forms.FormControl(null));
            this.form.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                _this.setDatetime(value);
                _this.previousValue = value;
            });
            this.form.statusChanges
                .pipe(operators.first())
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.onTouched();
            });
        }
        Object.defineProperty(DateTimePickerComponent.prototype, "_minDate", {
            set: function (value) {
                this.minDate = value ? new Date(value) : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimePickerComponent.prototype, "_maxDate", {
            set: function (value) {
                this.maxDate = value ? new Date(value) : undefined;
            },
            enumerable: false,
            configurable: true
        });
        DateTimePickerComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
         */
        DateTimePickerComponent.prototype.writeValue = function (value) {
            if (typeof value === 'string' && value.length) {
                this.date = new Date(value);
                this.form.setValue({
                    date: new Date(value),
                    time: {
                        hour: this.date.getHours(),
                        minute: this.date.getMinutes()
                    }
                }, { emitEvent: false });
            }
            else {
                this.form.setValue({ date: null, time: null }, { emitEvent: false });
            }
            this.previousValue = this.form.value;
        };
        DateTimePickerComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        DateTimePickerComponent.prototype.registerOnTouched = function (onTouched) {
            this.onTouched = onTouched;
        };
        DateTimePickerComponent.prototype.setDisabledState = function (disabled) {
            disabled ? this.form.disable() : this.form.enable();
        };
        DateTimePickerComponent.prototype.validate = function (control) {
            var _a, _b;
            if (((_a = this.date) === null || _a === void 0 ? void 0 : _a.getTime()) < new Date(this.minDate).getTime()) {
                return { dateBeforeRangeMin: true };
            }
            else if (((_b = this.date) === null || _b === void 0 ? void 0 : _b.getTime()) > new Date(this.maxDate).getTime()) {
                return { dateAfterRangeMax: true };
            }
            else if (this.form.invalid) {
                return { invalidDateTime: true };
            }
            else {
                return null;
            }
        };
        DateTimePickerComponent.prototype.previousDay = function () {
            this.date.setDate(this.date.getDate() - 1);
            this.setDatetime({ date: this.date, time: this.form.get('time').value });
        };
        DateTimePickerComponent.prototype.nextDay = function () {
            this.date.setDate(this.date.getDate() + 1);
            this.setDatetime({ date: this.date, time: this.form.get('time').value });
        };
        /**
         * If internal form changes its value, then combine date and time into one Date and pass its ISO string value to onChange method
         * @param dateTime
         * @private
         */
        DateTimePickerComponent.prototype.setDatetime = function (dateTime) {
            var _a, _b, _c;
            if (!dateTime.date && ((_a = this.previousValue) === null || _a === void 0 ? void 0 : _a.date)) {
                this.form.get('time').setValue({ hour: undefined, minute: undefined }, { emitEvent: false });
                this.onChange(null);
                return;
            }
            if (!dateTime.date) {
                dateTime.date = new Date();
                dateTime.date.setSeconds(0);
            }
            this.date = new Date(dateTime.date);
            if (typeof ((_b = dateTime.time) === null || _b === void 0 ? void 0 : _b.hour) === 'undefined' ||
                typeof ((_c = dateTime.time) === null || _c === void 0 ? void 0 : _c.minute) === 'undefined') {
                dateTime.time = { hour: 0, minute: 0 };
                this.form.get('time').setValue(dateTime.time, { emitEvent: false });
            }
            this.date.setHours(dateTime.time.hour, dateTime.time.minute);
            this.form.get('date').setValue(dateTime.date, { emitEvent: false });
            this.onChange(this.date.toISOString());
        };
        return DateTimePickerComponent;
    }());
    DateTimePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-date-time-picker',
                    template: "<div class=\"datetime-picker\">\n  <div class=\"form-group datepicker\">\n    <input\n      class=\"form-control\"\n      [placeholder]=\"placeholder || defaultPlaceholder | translate\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [formControl]=\"form.get('date')\"\n      (blur)=\"onTouched()\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n    />\n  </div>\n  <c8y-time-picker\n    [formControl]=\"form.get('time')\"\n    (dayBackward)=\"previousDay()\"\n    (dayForward)=\"nextDay()\"\n  ></c8y-time-picker>\n</div>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return DateTimePickerComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return DateTimePickerComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    DateTimePickerComponent.ctorParameters = function () { return []; };
    DateTimePickerComponent.propDecorators = {
        _minDate: [{ type: i0.Input, args: ['minDate',] }],
        _maxDate: [{ type: i0.Input, args: ['maxDate',] }],
        placeholder: [{ type: i0.Input }]
    };

    var TimePickerComponent = /** @class */ (function () {
        function TimePickerComponent(cdRef) {
            this.cdRef = cdRef;
            this.lastValidHours = '00';
            this.lastValidMinutes = '00';
            this.dayForward = new i0.EventEmitter();
            this.dayBackward = new i0.EventEmitter();
            this.disabled = false;
            this.date = new Date();
            this.touched = false;
            this.destroy$ = new rxjs.Subject();
            this.simulatedWheelUpEvent = { wheelDeltaY: 1, preventDefault: function () { return null; } };
            this.simulatedWheelDownEvent = { wheelDeltaY: -1, preventDefault: function () { return null; } };
        }
        TimePickerComponent.prototype.parseValue = function (target, lastValid, limit) {
            this.cdRef.detectChanges();
            if (this[target].length > 0 && !/^\d+$/.test(this[target])) {
                this[target] = this[lastValid];
                return;
            }
            if (this[target].length <= 1) {
                this[target] = this[target].padStart(2, '0');
            }
            if (this[target].length > 2 && this[target].startsWith('0')) {
                this[target] = this[target].slice(1, 3);
            }
            if (this[target].length > 2) {
                this[target] = this[lastValid];
                return;
            }
            if (Number(this[target]) > limit) {
                this[target] = limit;
            }
            this[lastValid] = this[target];
        };
        TimePickerComponent.prototype.initializeMinutes = function () {
            if (!this.hasValue(this.minutes)) {
                this.minutes = '00';
            }
        };
        TimePickerComponent.prototype.initializeHours = function () {
            if (!this.hasValue(this.hours)) {
                this.hours = '00';
            }
        };
        TimePickerComponent.prototype.handleHourScroll = function (ev) {
            // up
            ev.preventDefault();
            if (ev.wheelDeltaY > 0) {
                if (Number(this.hours) === 23) {
                    this.writeValue({ hour: 0, minute: Number(this.minutes) });
                    this.dayForward.emit();
                }
                else {
                    this.writeValue({ hour: Number(this.hours) + 1, minute: Number(this.minutes) });
                }
                this.emitValue();
            }
            // down
            if (ev.wheelDeltaY < 0) {
                if (Number(this.hours) === 0) {
                    this.writeValue({ hour: 23, minute: Number(this.minutes) });
                    this.dayBackward.emit();
                }
                else {
                    this.writeValue({ hour: Number(this.hours) - 1, minute: Number(this.minutes) });
                }
                this.emitValue();
            }
        };
        TimePickerComponent.prototype.handleMinuteScroll = function (ev) {
            // up
            ev.preventDefault();
            if (ev.wheelDeltaY > 0) {
                if (Number(this.minutes) === 59) {
                    this.writeValue({ hour: Number(this.hours), minute: 0 });
                    this.handleHourScroll(this.simulatedWheelUpEvent);
                }
                else {
                    this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) + 1 });
                }
            }
            // down
            if (ev.wheelDeltaY < 0) {
                if (Number(this.minutes) === 0) {
                    this.writeValue({ hour: Number(this.hours), minute: 59 });
                    this.handleHourScroll(this.simulatedWheelDownEvent);
                }
                else {
                    this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) - 1 });
                }
            }
            this.emitValue();
        };
        TimePickerComponent.prototype.emitValue = function () {
            if (this.hasValue(this.hours) && this.hasValue(this.minutes)) {
                this.onChange({
                    hour: Number(this.hours),
                    minute: Number(this.minutes)
                });
            }
        };
        TimePickerComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
         */
        TimePickerComponent.prototype.writeValue = function (value) {
            if (this.hasValue(value === null || value === void 0 ? void 0 : value.hour) && this.hasValue(value === null || value === void 0 ? void 0 : value.minute)) {
                this.hours = value.hour.toString();
                this.minutes = value.minute.toString();
                this.parseValue('hours', 'lastValidHours', 23);
                this.parseValue('minutes', 'lastValidMinutes', 59);
            }
            else {
                this.hours = undefined;
                this.minutes = undefined;
            }
        };
        TimePickerComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        TimePickerComponent.prototype.registerOnTouched = function (onTouched) {
            this.onTouched = onTouched;
        };
        TimePickerComponent.prototype.markAsTouched = function () {
            if (!this.touched) {
                this.onTouched();
                this.touched = true;
            }
        };
        TimePickerComponent.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        TimePickerComponent.prototype.hasValue = function (value) {
            return typeof value !== 'undefined';
        };
        return TimePickerComponent;
    }());
    TimePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-time-picker',
                    template: "<table>\n  <tbody>\n    <tr>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'HH`HOURS`' | translate\"\n          [(ngModel)]=\"hours\"\n          (input)=\"parseValue('hours', 'lastValidHours', 23); initializeMinutes()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleHourScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n      <td>&nbsp;:&nbsp;</td>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'MM`MINUTES`' | translate\"\n          [(ngModel)]=\"minutes\"\n          (input)=\"parseValue('minutes', 'lastValidMinutes', 59); initializeHours()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleMinuteScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return TimePickerComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    TimePickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    TimePickerComponent.propDecorators = {
        minDate: [{ type: i0.Input }],
        maxDate: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        dayForward: [{ type: i0.Output }],
        dayBackward: [{ type: i0.Output }]
    };

    /**
     * The angular module definition for a time picker - it provides FormControl that handles time.
     */
    var TimePickerModule = /** @class */ (function () {
        function TimePickerModule() {
        }
        return TimePickerModule;
    }());
    TimePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        FormsModule,
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i4$1.BsDatepickerModule.forRoot(),
                        CommonModule
                    ],
                    exports: [TimePickerComponent],
                    declarations: [TimePickerComponent]
                },] }
    ];

    /**
     * The angular module definition for a date-time picker - it provides FormControl that handles date and time.
     * @exports DateTimePickerComponent
     */
    var DateTimePickerModule = /** @class */ (function () {
        function DateTimePickerModule() {
        }
        return DateTimePickerModule;
    }());
    DateTimePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        FormsModule,
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i4$1.BsDatepickerModule.forRoot(),
                        CommonModule,
                        TimePickerModule,
                    ],
                    exports: [DateTimePickerComponent],
                    declarations: [DateTimePickerComponent]
                },] }
    ];

    var TypeaheadTypeComponent = /** @class */ (function (_super) {
        __extends(TypeaheadTypeComponent, _super);
        function TypeaheadTypeComponent(cdRef, translateService) {
            var _this = _super.call(this) || this;
            _this.cdRef = cdRef;
            _this.translateService = translateService;
            _this.match = false;
            _this.placeholder$ = rxjs.defer(function () { var _a; return rxjs.of((_a = _this.to) === null || _a === void 0 ? void 0 : _a.placeholder); }).pipe(operators.switchMap(function (placeholder) { return placeholder
                ? rxjs.of(placeholder)
                : _this.defaultPlaceholder$.pipe(operators.startWith(_this.translateService.instant(gettext('Start typing to search')))); }));
            _this.defaultPlaceholder$ = rxjs.defer(function () { var _a, _b, _c; return rxjs.isObservable((_a = _this.to) === null || _a === void 0 ? void 0 : _a.c8yForOptions) ? (_b = _this.to) === null || _b === void 0 ? void 0 : _b.c8yForOptions : rxjs.of((_c = _this.to) === null || _c === void 0 ? void 0 : _c.c8yForOptions); }).pipe(operators.map(function (_d) {
                var data = _d.data;
                return lodashEs.get(data[0], _this.labelProp || 'name');
            }), operators.map(function (example) {
                return !!example
                    ? _this.translateService.instant(gettext('Start typing to search, for example, {{ example }}'), { example: example })
                    : _this.translateService.instant(gettext('No items'));
            }));
            _this.excludeLabelProp = false;
            return _this;
        }
        TypeaheadTypeComponent.prototype.ngOnInit = function () {
            if (this.to) {
                if (this.to.excludeDisplayProperty) {
                    this.excludeLabelProp = this.to.excludeDisplayProperty;
                }
                if (this.to.displayProperty) {
                    this.setPipe('');
                    this.labelProp = this.to.displayProperty;
                    this.valueProps = this.to.valueProperties;
                }
                else {
                    console.error('To correctly use the typeahead select you need to specify displayProperty: string within templateOptions!');
                }
            }
        };
        TypeaheadTypeComponent.prototype.selectOption = function (opt) {
            var _d;
            if (this.valueProps && this.valueProps.length > 0) {
                var pickList = this.excludeLabelProp
                    ? this.valueProps
                    : __spreadArray(__spreadArray([], __read(this.valueProps)), [this.labelProp]);
                this.formControl.setValue(lodashEs.pick(opt, pickList));
                this.selected = (_d = {}, _d[this.labelProp] = opt[this.labelProp], _d);
            }
            else {
                this.formControl.setValue(opt);
            }
        };
        TypeaheadTypeComponent.prototype.setPipe = function (filterStr) {
            var _this = this;
            this.pattern = filterStr;
            this.filterPipe = rxjs.pipe(operators.map(function (data) {
                return data.filter(function (el) { return el[_this.labelProp] &&
                    el[_this.labelProp].toLowerCase().indexOf(filterStr.toLowerCase()) > -1; });
            }), operators.tap(function (data) {
                _this.match = data.length > 0;
                _this.cdRef.detectChanges();
            }));
        };
        return TypeaheadTypeComponent;
    }(core.FieldType));
    TypeaheadTypeComponent.CONFIG = {
        types: [{ name: 'typeahead', component: TypeaheadTypeComponent }]
    };
    TypeaheadTypeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-typeahead-type',
                    template: "<c8y-typeahead\n  [required]=\"to?.required || false\"\n  [placeholder]=\"placeholder$ | async\"\n  [displayProperty]=\"to?.displayProperty\"\n  [selected]=\"selected\"\n  [allowFreeEntries]=\"to?.allowFreeEntries || false\"\n  [container]=\"to?.container || ''\"\n  [disabled]=\"to?.disabled\"\n  (onSearch)=\"setPipe($event)\"\n  [formControl]=\"formControl\"\n  [class.is-invalid]=\"showError\"\n  [formlyAttributes]=\"field\">\n\n  <c8y-li *c8yFor=\"let opt of to?.c8yForOptions; loadMore: to?.loadMore || 'auto'; pipe: filterPipe; notFound: notFoundTemplate; loadingTemplate: loading;\"\n          (click)=\"selectOption(opt); setPipe('')\"\n          class=\"p-l-8 p-r-8 c8y-list__item--link\">\n    <c8y-highlight [text]=\"opt[labelProp]\" [pattern]=\"pattern\"></c8y-highlight>\n  </c8y-li>\n  <ng-template #notFoundTemplate>\n    <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"pattern.length > 0 && !match\">\n      <p><strong translate>No match found.</strong></p>\n    </c8y-li>\n  </ng-template>\n  <ng-template #loading>\n    <c8y-li class=\"text-center p-t-8 p-relative\">\n      <c8y-loading></c8y-loading>\n    </c8y-li>\n  </ng-template>\n</c8y-typeahead>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    TypeaheadTypeComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i2.TranslateService }
    ]; };

    var FIELD_TYPES = [
        FieldCheckbox,
        ArrayTypeComponent,
        WrapperFormField,
        FieldFile,
        FieldInput,
        FieldRadio,
        ObjectTypeComponent,
        FieldDate,
        FieldDateTime,
        TypeaheadTypeComponent
    ];
    function fieldTypeFactory() {
        // tslint:disable-next-line:no-string-literal
        return FIELD_TYPES.map(function (type) { return type['CONFIG']; }).reduce(function (formlyConfig, typeConfig) { return (Object.assign(Object.assign({}, formlyConfig), { types: __spreadArray(__spreadArray([], __read(formlyConfig.types)), __read((typeConfig.types || []))), wrappers: __spreadArray(__spreadArray([], __read(formlyConfig.wrappers)), __read((typeConfig.wrappers || []))) })); }, { types: [], wrappers: [] });
    }
    /**
     * This module declares field type components for dynamic forms that match C8Y styleguide.
     *
     * @dynamic
     */
    var DynamicFormsUIThemeModule = /** @class */ (function () {
        function DynamicFormsUIThemeModule() {
        }
        return DynamicFormsUIThemeModule;
    }());
    DynamicFormsUIThemeModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: __spreadArray([], __read(FIELD_TYPES)),
                    entryComponents: __spreadArray([], __read(FIELD_TYPES)),
                    imports: [
                        common.CommonModule,
                        CommonModule,
                        popover.PopoverModule,
                        forms.ReactiveFormsModule,
                        C8yTranslateModule,
                        DropAreaModule,
                        FormsModule,
                        core.FormlyModule,
                        select.FormlySelectModule,
                        DateTimePickerModule,
                        SelectModule,
                        ListGroupModule,
                        SearchModule,
                        i4$1.BsDatepickerModule
                    ],
                    providers: [
                        {
                            provide: core.FORMLY_CONFIG,
                            useFactory: fieldTypeFactory,
                            multi: true
                        }
                    ]
                },] }
    ];

    var TranslateExtension = /** @class */ (function () {
        function TranslateExtension(translate, parser) {
            this.translate = translate;
            this.parser = parser;
        }
        TranslateExtension.prototype.prePopulate = function (field) {
            var _this = this;
            var to = field.templateOptions || {};
            if (!to.label || to._translated) {
                return;
            }
            to._translated = true;
            field.expressionProperties = Object.assign(Object.assign({}, (field.expressionProperties || {})), { 'templateOptions.label': to.label ? this.translate.stream(to.label) : to.label, 'templateOptions.description': to.description
                    ? this.translate.stream(to.description)
                    : to.description, 'templateOptions.placeholder': to.placeholder
                    ? rxjs.combineLatest([
                        this.translate.stream(to.placeholder),
                        this.translate.stream(gettext('e.g. {{ example }}'))
                    ]).pipe(operators.map(function (_a) {
                        var _b = __read(_a, 2), placeholder = _b[0], expression = _b[1];
                        return _this.parser.interpolate(expression, { example: placeholder });
                    }))
                    : to.placeholder, 'templateOptions.options': (rxjs.isObservable(to.options) ? to.options : rxjs.of(to.options)).pipe(operators.map(function (options) { return (options || []).map(function (option) { return (Object.assign(Object.assign({}, option), { label: _this.translate.instant(option.label) })); }); })) });
        };
        return TranslateExtension;
    }());
    function registerTranslateExtension(translate, parser) {
        return {
            extensions: [
                {
                    name: 'translate',
                    extension: new TranslateExtension(translate, parser)
                }
            ]
        };
    }

    var ɵ0$1 = registerTranslateExtension;
    var I18nModule = /** @class */ (function () {
        function I18nModule() {
        }
        return I18nModule;
    }());
    I18nModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [core.FormlyModule, C8yTranslateModule],
                    providers: [
                        {
                            provide: core.FORMLY_CONFIG,
                            multi: true,
                            useFactory: ɵ0$1,
                            deps: [i2.TranslateService, i2.TranslateParser]
                        }
                    ]
                },] }
    ];

    var C8yJSONSchema = /** @class */ (function (_super) {
        __extends(C8yJSONSchema, _super);
        function C8yJSONSchema() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        C8yJSONSchema.prototype.toFieldConfig = function (schema, options) {
            var config = _super.prototype.toFieldConfig.call(this, schema, this.c8yOptions((options || {}).map));
            if (Array.isArray(config.fieldGroup)) {
                config.fieldGroup.forEach(function (field) {
                    if (field.type === 'array' && field.templateOptions.required) {
                        field.fieldArray.templateOptions.required = true;
                    }
                });
            }
            return config;
        };
        C8yJSONSchema.prototype.c8yOptions = function (map) {
            return {
                map: function (mappedField, mapSource) {
                    var result = mappedField;
                    /** `const` type is represented as hidden input */
                    if (mapSource.const) {
                        result = Object.assign(Object.assign({}, result), { defaultValue: mapSource.const, templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'hidden' }) });
                    }
                    /** `writeOnly` field represented as password input */
                    if (mapSource.writeOnly) {
                        result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'password', autocomplete: 'off' }) });
                    }
                    /** `examples` values used as placeholder */
                    if (mapSource.examples) {
                        result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { placeholder: mapSource.examples.join(', ') }) });
                    }
                    /** `enum` field represented as radio button group */
                    if (mapSource.enum) {
                        result = Object.assign(Object.assign({}, result), { type: 'radio' });
                    }
                    /** fields with `contentMediaType` or `contentEncoding` are represented as file inputs */
                    if (mapSource.contentMediaType || mapSource.contentEncoding) {
                        result = Object.assign(Object.assign({}, result), { type: 'file', templateOptions: Object.assign(Object.assign({}, result.templateOptions), { accept: mapSource.contentMediaType, maxAllowedFiles: 1, contentEncoding: mapSource.contentEncoding }) });
                    }
                    /** file extension validation for fields with `allowedFileTypes` */
                    if (mapSource.allowedFileTypes) {
                        result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), (mapSource.allowedFileTypes && {
                                accept: mapSource.allowedFileTypes.join(',')
                            })) });
                    }
                    /** Provides a way to use templateOptions in JSONSchema forms */
                    if (mapSource.templateOptions) {
                        result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, mapSource.templateOptions), result.templateOptions) });
                    }
                    return map ? map(result, mapSource) : result;
                }
            };
        };
        return C8yJSONSchema;
    }(jsonSchema.FormlyJsonschema));
    C8yJSONSchema.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function C8yJSONSchema_Factory() { return new C8yJSONSchema(); }, token: C8yJSONSchema, providedIn: "root" });
    C8yJSONSchema.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    function c8yValidationConfigFactory(translate) {
        return {
            validationMessages: [
                {
                    name: 'required',
                    message: function () {
                        return translate.stream(ValidationPattern.messages.required);
                    }
                },
                {
                    name: 'notExisting',
                    message: function () {
                        return translate.stream(gettext('No selection'));
                    }
                },
                {
                    name: 'pattern',
                    message: function (error, field) {
                        return translate.stream(ValidationPattern.messages.pattern, error);
                    }
                },
                {
                    name: 'minlength',
                    message: function (error, field) {
                        return translate.stream(ValidationPattern.messages.minLength, field.templateOptions);
                    }
                },
                {
                    name: 'min',
                    message: function (error, field) {
                        return translate.stream(ValidationPattern.messages.min, field.templateOptions);
                    }
                },
                {
                    name: 'max',
                    message: function (error, field) {
                        return translate.stream(ValidationPattern.messages.max, field.templateOptions);
                    }
                },
                {
                    name: 'invalidDateTime',
                    message: function () {
                        return translate.stream(gettext('This date is invalid.'));
                    }
                },
                {
                    name: 'dateBeforeRangeMin',
                    message: function () {
                        return translate.stream(gettext('This date is before the earliest allowed date.'));
                    }
                },
                {
                    name: 'dateAfterRangeMax',
                    message: function () {
                        return translate.stream(gettext('This date is after the latest allowed date.'));
                    }
                }
            ]
        };
    }

    var ɵ0 = c8yValidationConfigFactory;
    var ValidationModule = /** @class */ (function () {
        function ValidationModule() {
        }
        return ValidationModule;
    }());
    ValidationModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [C8yTranslateModule, core.FormlyModule],
                    providers: [
                        {
                            provide: core.FORMLY_CONFIG,
                            multi: true,
                            useFactory: ɵ0,
                            deps: [i2.TranslateService]
                        }
                    ]
                },] }
    ];

    var DynamicFormsModule = /** @class */ (function () {
        function DynamicFormsModule() {
        }
        return DynamicFormsModule;
    }());
    DynamicFormsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        I18nModule,
                        ValidationModule,
                        DynamicFormsUIThemeModule,
                        core.FormlyModule.forRoot()
                    ],
                    providers: [C8yJSONSchema],
                    exports: [core.FormlyModule, forms.ReactiveFormsModule]
                },] }
    ];

    /**
     *  Generates simple array formFieldConfig
     *   @returns FormlyFieldConfig[]
     */
    function getBasicInputArrayFormFieldConfig(config) {
        return [
            {
                key: config.key,
                type: 'array',
                defaultValue: [''],
                templateOptions: {
                    required: !config.optional,
                    addText: config.addText,
                },
                fieldArray: {
                    type: 'string',
                    templateOptions: {
                        required: !config.optional,
                        label: config.label,
                        tooltip: config.tooltip,
                        placeholder: config.placeholder
                    },
                },
            },
        ];
    }

    /**
     * C8y dynamic component.
     * ## Example:
     *
     * register component in HOOK in module:
     * ```typescript
     *  import { HOOK_COMPONENT } from '@c8y/ngx-components';
     *
     * @NgModule({
     *  ...,
     *  providers: [{
     *      provide: HOOK_COMPONENT,
     *      multi: true,
     *      useValue: [{
     *          id: 'test-component',
     *          label: 'My test component',
     *          description: 'this is test component',
     *          component: TestComponent
     *      }],
     *  ...
     *  }]
     *
     * ```
     * Showing dynamic component:
     * ```html
     * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
     * ```
     */
    var DynamicComponentComponent = /** @class */ (function () {
        /**
         * @ignore only DI
         */
        function DynamicComponentComponent(componentFactoryResolver, dynamicComponentService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.dynamicComponentService = dynamicComponentService;
            /**
             * DynamicComponents can have two modes, an edit (config) and an view (component) mode.
             * By default it is shown in the component mode.
             */
            this.mode = 'component';
            /**
             * Disable this to hide the error that is shown if the component was not found.
             */
            this.notFoundError = true;
            /**
             * @ignore
             */
            this.expandErrorDetails = false;
        }
        /**
         * Calls the dynamic component life cycle hook. Currently only
         * supporting onBeforeSave, a hook which is called before a config component
         * is saved.
         */
        DynamicComponentComponent.prototype.callLifeCycleHooks = function () {
            return this.callOnBeforeSaveHook();
        };
        /**
         * @ignore
         */
        DynamicComponentComponent.prototype.ngOnChanges = function () {
            return __awaiter(this, void 0, void 0, function () {
                var cmp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.dynamicComponentService.getById(this.componentId)];
                        case 1:
                            cmp = _a.sent();
                            this.loadComponent(cmp);
                            return [2 /*return*/];
                    }
                });
            });
        };
        DynamicComponentComponent.prototype.loadComponent = function (dynamicComponent) {
            try {
                this.error = undefined;
                var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.mode === 'component' ? dynamicComponent.component : dynamicComponent.configComponent);
                this.host.clear();
                this.componentRef = this.host.createComponent(componentFactory);
                this.componentRef.instance.config = this.config;
            }
            catch (ex) {
                this.error = ex;
            }
        };
        DynamicComponentComponent.prototype.callOnBeforeSaveHook = function () {
            if (!this.componentRef) {
                return rxjs.of(true);
            }
            var hook = this.componentRef.instance.onBeforeSave;
            if (hook) {
                var result = hook.call(this.componentRef.instance, this.config);
                if (lodashEs.isUndefined(result)) {
                    return rxjs.of(true);
                }
                return rxjs.isObservable(result) ? result : rxjs.of(result);
            }
            return rxjs.of(true);
        };
        return DynamicComponentComponent;
    }());
    DynamicComponentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-dynamic-component',
                    template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"notFoundError && error\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted m-t-8\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i c8yIcon=\"chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n"
                },] }
    ];
    DynamicComponentComponent.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: DynamicComponentService }
    ]; };
    DynamicComponentComponent.propDecorators = {
        componentId: [{ type: i0.Input }],
        config: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        notFoundError: [{ type: i0.Input }],
        host: [{ type: i0.ViewChild, args: ['host', { read: i0.ViewContainerRef, static: true },] }]
    };

    var DynamicComponentModule = /** @class */ (function () {
        function DynamicComponentModule() {
        }
        return DynamicComponentModule;
    }());
    DynamicComponentModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [DynamicComponentComponent],
                    imports: [common.CommonModule, collapse.CollapseModule, i1.RouterModule.forChild([]), I18nModule$1],
                    exports: [DynamicComponentComponent],
                    providers: [DynamicComponentService, { provide: RESOLVING_COMPONENT_WAIT_TIME, useValue: 5000 }]
                },] }
    ];

    var DashboardChildActionComponent = /** @class */ (function () {
        function DashboardChildActionComponent() {
        }
        return DashboardChildActionComponent;
    }());
    DashboardChildActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-dashboard-child-action',
                    template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>\n"
                },] }
    ];
    DashboardChildActionComponent.propDecorators = {
        template: [{ type: i0.ViewChild, args: ['template', { static: false },] }]
    };

    var DashboardChildTitleComponent = /** @class */ (function () {
        function DashboardChildTitleComponent() {
        }
        return DashboardChildTitleComponent;
    }());
    DashboardChildTitleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-dashboard-child-title',
                    template: "<div class=\"card-title\">\n  <ng-content></ng-content>\n</div>\n"
                },] }
    ];

    var DashboardChildChange = /** @class */ (function () {
        function DashboardChildChange(childToChange) {
            this.MIN_WIDTH = 2;
            this.MIN_HEIGHT = 1;
            this.PIXEL_SIZE_THRESHOLD = 10;
            this.diffX = 0;
            this.diffY = 0;
            this.dashboard = childToChange.dashboard;
            this.children = childToChange.dashboard.children
                ? childToChange.dashboard.children.filter(function (child) { return childToChange !== child; })
                : [];
            this.child = childToChange;
        }
        Object.defineProperty(DashboardChildChange.prototype, "resize$", {
            get: function () {
                var _this = this;
                return this.child.dragSource.moved.pipe(operators.map(function (move) { return _this.getPixelSize(move); }), operators.tap(function (resizeDimension) { return _this.setPixelSize(resizeDimension); }), operators.map(function (resizeDimension) { return _this.getDimensionSize(resizeDimension); }), operators.distinctUntilChanged(function (prev, next) { return prev.width === next.width && prev.height === next.height; }), operators.map(function (dimension) { return _this.setDimension(dimension); }), this.arrangePipe());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DashboardChildChange.prototype, "drag$", {
            get: function () {
                var _this = this;
                return this.child.dragSource.moved.pipe(operators.map(function (move) { return _this.getDimensionPosition(move); }), operators.filter(function (dimension) { return dimension.x >= 0 &&
                    dimension.x <= _this.dashboard.columns - _this.child.width &&
                    dimension.y >= 0; }), operators.distinctUntilChanged(function (prev, next) { return prev.x === next.x && prev.y === next.y; }), this.arrangePipe());
            },
            enumerable: false,
            configurable: true
        });
        DashboardChildChange.prototype.findFreeDimension = function () {
            var y = -1;
            var x = 0;
            var found = false;
            var _a = this.child, width = _a.width, height = _a.height;
            if (width > this.dashboard.columns) {
                throw new Error('The child does not fit on the current dashboard.');
            }
            do {
                x = 0;
                y++;
                while (x + width <= this.dashboard.columns) {
                    if (this.getCollided({ x: x, y: y, width: width, height: height }).length === 0) {
                        found = true;
                        break;
                    }
                    x++;
                }
            } while (!found);
            return { x: x, y: y, width: width, height: height };
        };
        DashboardChildChange.prototype.collapseUpAll = function () {
            return lodashEs.sortBy(__spreadArray([this.child], __read(this.children)), ['y']).forEach(function (w) {
                var ds = new DashboardChildChange(w);
                var newPosition = ds.collapseUp(w);
                ds.setDimension(newPosition);
            });
        };
        DashboardChildChange.prototype.arrangeAll = function (arrange) {
            var current = arrange.current, scan = arrange.scan, spacing = arrange.spacing, origin = arrange.origin;
            var collided = this.getCollided(current, lodashEs.sortBy(scan, ['y']));
            return collided.map(function (child) {
                var ds = new DashboardChildChange(child);
                ds.setDimension(Object.assign(Object.assign({}, child), { y: spacing }));
                return {
                    current: child,
                    scan: scan.filter(function (w) { return w !== child; }),
                    spacing: child.y + child.height,
                    origin: origin
                };
            });
        };
        DashboardChildChange.prototype.arrangePipe = function () {
            var _this = this;
            return rxjs.pipe(operators.map(function (dimension) { return ({
                current: dimension,
                scan: _this.children,
                spacing: dimension.y + dimension.height,
                origin: Object.assign({}, dimension)
            }); }), operators.expand(function (dimensions) { return _this.arrangeAll(dimensions); }), operators.map(function (_a) {
                var origin = _a.origin;
                return origin;
            }), operators.map(function (dimension) { return _this.setDimension(dimension, true); }), operators.tap(function () { return _this.collapseUpAll(); }));
        };
        DashboardChildChange.prototype.collapseUp = function (dimension) {
            var y = dimension.y;
            while (y > 0) {
                if (this.getCollided(Object.assign(Object.assign({}, dimension), { y: y - 1 })).length !== 0) {
                    break;
                }
                y--;
            }
            return Object.assign(Object.assign({}, dimension), { y: y });
        };
        DashboardChildChange.prototype.setDimension = function (dimension, notIfColliding) {
            if (notIfColliding === void 0) { notIfColliding = false; }
            if (notIfColliding && this.getCollided(dimension).length > 0) {
                return;
            }
            this.child.x = dimension.x;
            this.child.y = dimension.y;
            if (dimension.width >= this.MIN_WIDTH &&
                dimension.x + dimension.width <= this.dashboard.columns) {
                this.child.width = dimension.width;
            }
            else if (dimension.width < this.MIN_WIDTH) {
                dimension.width = this.MIN_WIDTH;
            }
            else {
                dimension.width = this.dashboard.columns - dimension.x;
            }
            if (dimension.height >= this.MIN_HEIGHT) {
                this.child.height = dimension.height;
            }
            else {
                dimension.height = this.MIN_WIDTH;
            }
            return dimension;
        };
        DashboardChildChange.prototype.setPixelSize = function (_a) {
            var width = _a.width, height = _a.height;
            if (width >= this.dashboard.columnSize * this.MIN_WIDTH - this.dashboard.gap) {
                this.child.pxWidth = width + this.PIXEL_SIZE_THRESHOLD;
            }
            if (height >= this.dashboard.rowSize * this.MIN_HEIGHT - this.dashboard.gap) {
                this.child.pxHeight = height + this.PIXEL_SIZE_THRESHOLD;
            }
        };
        DashboardChildChange.prototype.getPixelSize = function (moveEvent) {
            var draggedElement = this.child.element.nativeElement;
            if (!this.diffX) {
                var rect = draggedElement.getBoundingClientRect();
                this.diffX = rect.left;
                this.diffY = rect.top;
            }
            var _a = moveEvent.pointerPosition, x = _a.x, y = _a.y;
            var width = Math.round(x - this.diffX);
            var height = Math.round(y - this.diffY);
            return { width: width, height: height, pointer: { x: x, y: y } };
        };
        DashboardChildChange.prototype.getDimensionSize = function (resizePosition) {
            var _a = this.child, x = _a.x, y = _a.y;
            var ds = this.dashboard.dashboardRect;
            var column = this.dashboard.columnSize;
            var row = this.dashboard.rowSize + this.dashboard.gap;
            var width = Math.round((resizePosition.pointer.x - ds.left + this.dashboard.gap) / column) - x;
            var height = Math.round((resizePosition.pointer.y - ds.top + this.dashboard.gap) / row) - y;
            return { x: x, y: y, width: width, height: height };
        };
        DashboardChildChange.prototype.getDimensionPosition = function (moveEvent) {
            var draggedElement = moveEvent.source.element.nativeElement.nextElementSibling;
            if (!this.diffX) {
                var rect = draggedElement.getBoundingClientRect();
                this.diffX = moveEvent.pointerPosition.x - rect.left;
                this.diffY = moveEvent.pointerPosition.y - rect.top;
            }
            var left = moveEvent.pointerPosition.x - this.diffX;
            var top = moveEvent.pointerPosition.y - this.diffY;
            var _a = this.child, width = _a.width, height = _a.height;
            var ds = this.dashboard.dashboardRect;
            var column = this.dashboard.columnSize;
            var row = this.dashboard.rowSize + this.dashboard.gap / 2;
            var x = Math.round((left - ds.left) / column);
            var y = Math.round((top - ds.top) / row);
            return { x: x, y: y, width: width, height: height };
        };
        DashboardChildChange.prototype.doesCollide = function (a, b) {
            if (b.x === undefined) {
                return false;
            }
            return !(a.y + a.height - 1 < b.y ||
                a.y > b.y + b.height - 1 ||
                a.x + a.width - 1 < b.x ||
                a.x > b.x + b.width - 1);
        };
        DashboardChildChange.prototype.getCollided = function (currentDimension, dimensions) {
            var _this = this;
            if (dimensions === void 0) { dimensions = this.children; }
            var collided = dimensions.filter(function (dimension) { return _this.doesCollide(currentDimension, dimension); });
            return collided;
        };
        return DashboardChildChange;
    }());

    /**
     * Displays a CSS grid which is customizable by the customer. You can set
     * `c8y-dashboard-child`-components on it or position any element on it by
     * setting the grid CSS properties. On change (resize, or rearrange) the
     * component emits an change event.
     *
     * ## Example:
     *
     * ```html
     * <c8y-title>Hello from outlet</c8y-title>
     *
     * <c8y-action-bar-item [placement]="'right'">
     *   <button class="btn btn-link" (click)="addRandom()"><i c8yIcon="plus-circle"></i> Add random</button>
     * </c8y-action-bar-item>
     * <c8y-action-bar-item [placement]="'right'">
     *   <button class="btn btn-link" (click)="isFrozen = !isFrozen">
     *     <i [c8yIcon]="isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *   </button>
     * </c8y-action-bar-item>
     *
     * <c8y-dashboard (dashboardChange)="dashboardChange($event)">
     *   <c8y-dashboard-child
     *     [isFrozen]="isFrozen"
     *     title="dynamic"
     *     *ngFor="let widget of widgets"
     *     #current
     *   >
     *     x: {{ current.x }}<br />
     *     y: {{ current.y }}<br />
     *     width: {{ current.width }}<br />
     *     height: {{ current.height }}<br />
     *   </c8y-dashboard-child>
     *   <c8y-dashboard-child
     *     #cpWidget
     *     [isFrozen]="isFrozen"
     *     [x]="0"
     *     [y]="1"
     *     [width]="3"
     *     [height]="2"
     *     [data]="widget"
     *     [class]="'card card-dashboard panel-title-regular panel-content-branded panel-title-overlay'"
     *   >
     *     <c8y-dashboard-child-title>
     *       <span>World!</span>
     *     </c8y-dashboard-child-title>
     *     x: {{ cpWidget.x }}<br />
     *     y: {{ cpWidget.y }}<br />
     *     width: {{ cpWidget.width }}<br />
     *     height: {{ cpWidget.height }}<br />
     *   </c8y-dashboard-child>
     *   <c8y-dashboard-child
     *     #cpWidget2
     *     [isFrozen]="isFrozen"
     *     [x]="8"
     *     [y]="1"
     *     [width]="4"
     *     [height]="4"
     *     [class]="'card card-dashboard panel-content-dark'"
     *   >
     *     <c8y-dashboard-child-title>
     *       <span>Hello!</span>
     *     </c8y-dashboard-child-title>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="cpWidget2.isFrozen = !cpWidget2.isFrozen; (false)">
     *         <i [c8yIcon]="cpWidget2.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *       </a>
     *     </c8y-dashboard-child-action>
     *     x: {{ cpWidget2.x }}<br />
     *     y: {{ cpWidget2.y }}<br />
     *     width: {{ cpWidget2.width }}<br />
     *     height: {{ cpWidget2.height }}<br />
     *   </c8y-dashboard-child>
     *
     *   <c8y-dashboard-child
     *     #cpWidget3
     *     [isFrozen]="isFrozen"
     *     [x]="0"
     *     [y]="3"
     *     [width]="4"
     *     [height]="4"
     *     [class]="'card-dashboard panel-content-transparent'"
     *   >
     *     <c8y-dashboard-child-title *ngIf="showTitle">
     *       <span>Transparent!</span>
     *     </c8y-dashboard-child-title>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="showTitle = !showTitle; (false)">
     *         <i [c8yIcon]="'heading'"></i> Hide/show title
     *       </a>
     *     </c8y-dashboard-child-action>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
     *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *       </a>
     *     </c8y-dashboard-child-action>
     *     x: {{ cpWidget3.x }}<br />
     *     y: {{ cpWidget3.y }}<br />
     *     width: {{ cpWidget3.width }}<br />
     *     height: {{ cpWidget3.height }}<br />
     *   </c8y-dashboard-child>
     * </c8y-dashboard>
     * ```
     */
    var DashboardComponent = /** @class */ (function () {
        function DashboardComponent(element, sanitizer) {
            this.element = element;
            this.sanitizer = sanitizer;
            /**
             * All children in that dashboard.
             */
            this.children = [];
            /**
             * The amount of columns on that dashboard.
             */
            this.columns = 12;
            /**
             * The spacing between each children in pixel.
             */
            this.gap = 12;
            /**
             * The amount of rows to dusplay. Set to auto to
             * auto extend the rows.
             */
            this.rows = 'auto';
            /**
             * An event fired if the dashboard was changed.
             */
            this.dashboardChange = new i0.EventEmitter();
            this.lastRow = 1;
            this.DEFAULT_ROW_SIZE = 68;
        }
        Object.defineProperty(DashboardComponent.prototype, "columnSize", {
            /**
             * The current column size.
             */
            get: function () {
                return this.dashboardRect.width / this.columns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DashboardComponent.prototype, "rowSize", {
            /**
             * The current row size.
             */
            get: function () {
                return this.rows === 'auto' ? this.DEFAULT_ROW_SIZE : this.calculateRowSize();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DashboardComponent.prototype, "inlineStyle", {
            /**
             * Returns all positioning styles. Nasty workaround for that issue:
             * https://github.com/angular/angular/issues/9343
             */
            get: function () {
                return this.sanitizer.bypassSecurityTrustStyle("\n        -ms-grid-columns: (1fr)[" + this.columns + "];\n        grid-template-columns: repeat(" + this.columns + ", 1fr);\n        " + (this.rows !== 'auto' ? "grid-template-rows: repeat(" + this.rows + ", 1fr);" : '') + "\n        grid-auto-rows: " + (this.rowSize + this.gap) + "px;\n        -ms-grid-rows: (" + (this.rowSize + this.gap) + "px)[" + (this.rows === 'auto' ? this.lastRow : this.rows) + "];\n        margin: -" + this.gap + "px -" + this.gap + "px 0;\n      ");
            },
            enumerable: false,
            configurable: true
        });
        DashboardComponent.prototype.ngAfterContentInit = function () {
            this.onResize();
        };
        DashboardComponent.prototype.onResize = function () {
            this.updateRectSize();
        };
        /**
         * Updates the current rect size of the dashboard.
         */
        DashboardComponent.prototype.updateRectSize = function () {
            var ele = this.element.nativeElement;
            this.dashboardRect = ele.getBoundingClientRect();
        };
        DashboardComponent.prototype.emitChange = function (widget) {
            this.dashboardChange.emit({ source: widget, children: this.children });
        };
        DashboardComponent.prototype.calculateRowSize = function () {
            return this.dashboardRect.height / this.rows;
        };
        return DashboardComponent;
    }());
    DashboardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-dashboard',
                    template: "<ng-content></ng-content>\n",
                    host: {
                        class: 'c8y-grid-dashboard dashboard-grid'
                    },
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DashboardComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: platformBrowser.DomSanitizer }
    ]; };
    DashboardComponent.propDecorators = {
        columns: [{ type: i0.Input }],
        gap: [{ type: i0.Input }],
        rows: [{ type: i0.Input }],
        dashboardChange: [{ type: i0.Output }],
        inlineStyle: [{ type: i0.HostBinding, args: ['attr.style',] }],
        onResize: [{ type: i0.HostListener, args: ['window:resize',] }]
    };

    /**
     * A dashboard child allows to position elements
     * correctly on a grid. The user can then resize and
     * rearrange the elements, as long as they are not `frozen`.
     *
     * By setting `c8y-dashboard-child-actions` and
     * `c8y-dashboard-child-title` on the element you can add
     * custom actions or a custom title to the current child.
     *
     * By adding the correct branded classes, you can define
     * the look and feel of the child. By default it is displayed
     * as a card.
     *
     * Example:
     *
     * ```html
     *   <c8y-dashboard-child
     *     #cpWidget3
     *     [isFrozen]="isFrozen"
     *     [x]="0"
     *     [y]="3"
     *     [width]="4"
     *     [height]="4"
     *     [class]="'card-dashboard panel-content-transparent'"
     *   >
     *     <c8y-dashboard-child-title *ngIf="showTitle">
     *       <span>Transparent!</span>
     *     </c8y-dashboard-child-title>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="showTitle = !showTitle; (false)">
     *         <i [c8yIcon]="'heading'"></i> Hide/show title
     *       </a>
     *     </c8y-dashboard-child-action>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
     *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *       </a>
     *     </c8y-dashboard-child-action>
     *     x: {{ cpWidget3.x }}<br />
     *     y: {{ cpWidget3.y }}<br />
     *     width: {{ cpWidget3.width }}<br />
     *     height: {{ cpWidget3.height }}<br />
     *   </c8y-dashboard-child>
     * ```
     */
    var DashboardChildComponent = /** @class */ (function () {
        function DashboardChildComponent(dashboard, sanitizer, element) {
            this.dashboard = dashboard;
            this.sanitizer = sanitizer;
            this.element = element;
            this.actions = [];
            this.isResize = false;
            this.isDragging = false;
            this.klasses = {};
            this._pxWidth = '100%';
            this._pxHeight = '100%';
            /**
             * The width of the component in grid-columns.
             */
            this.width = 1;
            /**
             * The height of the component in grid-rows.
             */
            this.height = 1;
            /**
             * The margin of the child in pixel.
             */
            this.margin = 12;
            /**
             * If a dashboard is frozen, all children cannot be moved
             * or resized.
             */
            this.isFrozen = false;
            /**
             * The child content is initialized, as soon it is scrolled into viewport
             */
            this.useIntersection = false;
            /**
             * An event fired if a child change is started (dragging or resizing)
             */
            this.changeStart = new i0.EventEmitter();
            /**
             * An event fired if a child change is ended
             */
            this.changeEnd = new i0.EventEmitter();
            /**
             * All classes added to this child
             */
            this.class = {};
            /**
             * An indicator if the child is intersected (that mean visible for the user)
             */
            this.intersected = false;
        }
        Object.defineProperty(DashboardChildComponent.prototype, "pxWidth", {
            /**
             * Updates the pixel width of the child (used for resizing)
             */
            set: function (value) {
                this._pxWidth = value + "px";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DashboardChildComponent.prototype, "pxHeight", {
            /**
             * Updates the pixel height of the child (used for resizing)
             */
            set: function (value) {
                this._pxHeight = value + "px";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DashboardChildComponent.prototype, "inlineStyle", {
            /**
             * nasty workaround for that issue:
             * https://github.com/angular/angular/issues/9343
             */
            get: function () {
                return this.sanitizer.bypassSecurityTrustStyle("\n    grid-column-start: " + (this.x + 1) + ";\n    grid-row-start: " + (this.y + 1) + ";\n    grid-column-end: span " + this.width + ";\n    grid-row-end: span " + this.height + ";\n    display: block;\n    margin: " + (this.margin || 12) + "px;\n    order: " + this.getOrder() + ";\n    ");
            },
            enumerable: false,
            configurable: true
        });
        DashboardChildComponent.prototype.ngOnChanges = function () {
            this.klasses = Object.assign({ card: true, 'card-dashboard': true, disabled: this.isFrozen, 'on-resize': this.isResize }, this.class);
        };
        DashboardChildComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.x === undefined || this.y === undefined) {
                setTimeout(function () { return _this.setDynamicDimension(); });
            }
            if (this.useIntersection && 'IntersectionObserver' in window) {
                var intersectionObserver_1 = new IntersectionObserver(function (event) { return (_this.intersected = _this.childInView(event[0], intersectionObserver_1)); });
                intersectionObserver_1.observe(this.element.nativeElement);
            }
            else {
                this.intersected = true;
            }
        };
        DashboardChildComponent.prototype.ngAfterViewInit = function () {
            this.dashboard.children.push(this);
        };
        DashboardChildComponent.prototype.setDynamicDimension = function () {
            var ds = new DashboardChildChange(this);
            var _a = ds.findFreeDimension(), x = _a.x, y = _a.y;
            this.x = x;
            this.y = y;
            this.dashboard.emitChange(this);
        };
        DashboardChildComponent.prototype.resizeStarted = function ($event) {
            this.isResize = true;
            this.dashboard.updateRectSize();
            this.dragSource = $event.source;
            var positioning = new DashboardChildChange(this);
            this.changeSubscription = positioning.resize$.subscribe();
            this.changeStart.emit(this);
            this.ngOnChanges();
        };
        DashboardChildComponent.prototype.dragStarted = function ($event) {
            this.isDragging = true;
            this.dashboard.updateRectSize();
            this.dragSource = $event.source;
            var positioning = new DashboardChildChange(this);
            this.changeSubscription = positioning.drag$.subscribe();
            this.changeStart.emit(this);
        };
        DashboardChildComponent.prototype.reset = function ($event) {
            this.isResize = false;
            this.isDragging = false;
            this._pxWidth = '100%';
            this._pxHeight = '100%';
            this.ngOnChanges();
            if ($event) {
                $event.source.reset();
            }
            if (this.changeSubscription) {
                this.changeSubscription.unsubscribe();
                this.dashboard.emitChange(this);
                this.changeEnd.emit(this);
            }
        };
        DashboardChildComponent.prototype.ngOnDestroy = function () {
            if (this.changeSubscription) {
                this.changeSubscription.unsubscribe();
            }
            this.removeSelfFromDashboard();
        };
        DashboardChildComponent.prototype.removeSelfFromDashboard = function () {
            var i = this.dashboard.children.indexOf(this);
            if (i >= 0) {
                this.dashboard.children.splice(i, 1);
            }
        };
        DashboardChildComponent.prototype.getOrder = function () {
            return "" + Math.round((this.y + (this.x + 1) / 100) * 100);
        };
        DashboardChildComponent.prototype.childInView = function (event, observer) {
            if (event.isIntersecting) {
                observer.unobserve(event.target);
                return true;
            }
            return false;
        };
        return DashboardChildComponent;
    }());
    DashboardChildComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-dashboard-child',
                    template: "<div cdkDropList>\n  <div *ngIf=\"isResize\" class=\"card-placeholder\"></div>\n  <div\n    [ngClass]=\"klasses\"\n    cdkDrag\n    [ngStyle]=\"{ width: _pxWidth, height: _pxHeight }\"\n    (cdkDragStarted)=\"dragStarted($event)\"\n    (cdkDragEnded)=\"reset($event)\"\n    [cdkDragDisabled]=\"isFrozen\"\n  >\n    <div\n      class=\"card-header-actions card-header-grid\"\n      [ngClass]=\"{ 'drag-handle': !isFrozen, draggableCursor: !isFrozen }\"\n      cdkDragHandle\n    >\n      <ng-content select=\"c8y-dashboard-child-title\"></ng-content>\n      <div class=\"header-actions\" *ngIf=\"!isFrozen && actions.length > 0\">\n        <div class=\"optionsBtn dropdown\" dropdown container=\"body\" placement=\"bottom right\">\n          <a\n            title=\"{{ 'Settings' | translate }}\"\n            href=\"\"\n            class=\"btnIcon c8y-dropdown\"\n            (click)=\"(false)\"\n            dropdownToggle\n          >\n            <i [c8yIcon]=\"'cog'\"></i>\n          </a>\n          <ul\n            class=\"dropdown-menu dropdown-menu-right\"\n            style=\"right:-1px;\"\n            *dropdownMenu\n          >\n            <ng-container *ngFor=\"let action of actions\">\n              <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-inner-scroll\">\n      <ng-content></ng-content>\n    </div>\n    <div\n      *ngIf=\"!isFrozen && !isDragging\"\n      class=\"resize-handle hidden-xs\"\n      cdkDrag\n      [cdkDragDisabled]=\"isFrozen\"\n      (cdkDragStarted)=\"resizeStarted($event)\"\n      (cdkDragEnded)=\"reset($event)\"\n    ></div>\n    <div class=\"resize-icon hidden-xs\" *ngIf=\"!isFrozen && !isDragging\"></div>\n\n    <div *cdkDragPlaceholder class=\"card-placeholder\"></div>\n  </div>\n</div>\n",
                    host: {
                        class: 'dashboard-grid-child'
                    }
                },] }
    ];
    DashboardChildComponent.ctorParameters = function () { return [
        { type: DashboardComponent },
        { type: platformBrowser.DomSanitizer },
        { type: i0.ElementRef }
    ]; };
    DashboardChildComponent.propDecorators = {
        actions: [{ type: i0.ContentChildren, args: [DashboardChildActionComponent,] }],
        x: [{ type: i0.Input }],
        y: [{ type: i0.Input }],
        width: [{ type: i0.Input }],
        height: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        margin: [{ type: i0.Input }],
        isFrozen: [{ type: i0.Input }],
        useIntersection: [{ type: i0.Input }],
        changeStart: [{ type: i0.Output }],
        changeEnd: [{ type: i0.Output }],
        class: [{ type: i0.Input }],
        inlineStyle: [{ type: i0.HostBinding, args: ['attr.style',] }]
    };

    var WidgetsDashboardComponent = /** @class */ (function () {
        function WidgetsDashboardComponent() {
            this.contextDashboard = { updateTarget: true };
            this.settings = {
                isFrozen: false,
                isDisabled: false,
                widgetMargin: 12,
                translateWidgetTitle: false,
                defaultHeight: 4,
                defaultWidth: 4,
                allowFullscreen: false,
                canCopy: true,
                canDelete: true,
                isLoading: false
            };
            this.onAddWidget = new i0.EventEmitter();
            this.onEditWidget = new i0.EventEmitter();
            this.onDeleteWidget = new i0.EventEmitter();
            this.onChangeDashboard = new i0.EventEmitter();
            this.onEditDashboard = new i0.EventEmitter();
            this.onCopyDashboard = new i0.EventEmitter();
            this.onDeleteDashboard = new i0.EventEmitter();
            this.onFreeze = new i0.EventEmitter();
            this.onChangeStart = new i0.EventEmitter();
            this.onChangeEnd = new i0.EventEmitter();
        }
        Object.defineProperty(WidgetsDashboardComponent.prototype, "_settings", {
            set: function (settings) {
                this.settings = Object.assign(Object.assign({}, this.settings), settings);
            },
            enumerable: false,
            configurable: true
        });
        WidgetsDashboardComponent.prototype.toggleFullscreen = function () {
            var elem = document.body;
            var doc = document;
            if (!this.fullScreen()) {
                if (elem.requestFullscreen) {
                    elem.requestFullscreen();
                }
                else if (elem.msRequestFullscreen) {
                    elem.msRequestFullscreen();
                }
                else if (elem.mozRequestFullScreen) {
                    elem.mozRequestFullScreen();
                }
                else if (elem.webkitRequestFullscreen) {
                    elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
            }
            else if (doc.exitFullscreen) {
                doc.exitFullscreen();
            }
            else if (doc.msExitFullscreen) {
                doc.msExitFullscreen();
            }
            else if (doc.mozCancelFullScreen) {
                doc.mozCancelFullScreen();
            }
            else if (doc.webkitExitFullscreen) {
                doc.webkitExitFullscreen();
            }
        };
        WidgetsDashboardComponent.prototype.fullScreen = function () {
            var doc = document;
            return !!(doc.fullscreenElement ||
                doc.mozFullScreenElement ||
                doc.webkitFullscreenElement ||
                doc.msFullscreenElement);
        };
        return WidgetsDashboardComponent;
    }());
    WidgetsDashboardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-widgets-dashboard',
                    template: "<c8y-title *ngIf=\"!!settings.title\">\n  {{ settings.title | translate }}\n</c8y-title>\n\n<c8y-breadcrumb *ngIf=\"!!breadcrumb\">\n  <c8y-breadcrumb-item\n    [icon]=\"breadcrumb.icon\"\n    [label]=\"breadcrumb.label\"\n    [path]=\"breadcrumb.path\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onAddWidget.observers.length\">\n  <button\n    title=\"{{ 'Add widget' | translate }}\"\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onAddWidget.emit()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add widget' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onEditDashboard.observers.length\">\n  <button\n    title=\"{{ 'Edit' | translate }}\"\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onEditDashboard.emit()\"\n  >\n    <i c8yIcon=\"pencil\"></i>\n    {{ 'Edit' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"settings.allowFullscreen\">\n  <button title=\"{{ 'Full screen' | translate }}\" class=\"btn btn-link\" (click)=\"toggleFullscreen()\">\n    <i [c8yIcon]=\"fullScreen() ? 'compress' : 'expand'\"></i>\n    {{ 'Full screen' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"navbar-form\"\n  *ngIf=\"onFreeze.observers.length\"\n>\n  <button\n    title=\"{{ 'Lock/unlock this dashboard' | translate }}\"\n    class=\"btn btn-default\"\n    [ngClass]=\"{ active: settings.isFrozen }\"\n    (click)=\"onFreeze.emit(settings)\"\n    [disabled]=\"settings.isDisabled\"\n    uib-btn-checkbox\n  >\n    <i [c8yIcon]=\"settings.isFrozen ? 'lock' : 'unlock'\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'more'\" [priority]=\"-2000\" *ngIf=\"settings.canCopy\">\n  <button title=\"{{ 'Copy dashboard' | translate }}\" (click)=\"onCopyDashboard.emit()\">\n    <i c8yIcon=\"clone\"></i>\n    <span class=\"m-l-4\" translate>Copy dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'more'\"\n  [priority]=\"-3000\"\n  *ngIf=\"settings.canDelete && onDeleteDashboard.observers.length\"\n>\n  <button\n    title=\"{{ 'Delete dashboard' | translate }}\"\n    (click)=\"onDeleteDashboard.emit()\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n  >\n    <i c8yIcon=\"trash\"></i>\n    <span class=\"m-l-4\" translate>Delete dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<!-- empty state -->\n<div class=\"c8y-empty-state text-center\" *ngIf=\"!settings.isLoading && widgets?.length === 0\">\n  <h1 class=\"c8y-icon c8y-icon-device c8y-icon-duocolor\"></h1>\n  <h3 translate>No widgets to display.</h3>\n  <div *ngIf=\"!settings.isFrozen && onAddWidget.observers.length\">\n    <p translate>Add widgets to this dashboard.</p>\n    <div>\n      <button\n        title=\"{{ 'Add widget' | translate }}\"\n        [disabled]=\"settings.isFrozen || settings.isDisabled\"\n        (click)=\"onAddWidget.emit()\"\n        class=\"btn btn-primary\"\n        translate\n      >\n        Add widget\n      </button>\n    </div>\n    <p c8y-guide-docs>\n      <small translate ngNonBindable>\n        Find out more in the\n        <a c8y-guide-href=\"users-guide/cockpit/#dashboards\"> User guide`KEEP_ORIGINAL` </a>.\n      </small>\n    </p>\n  </div>\n</div>\n<!-- /.empty settings -->\n\n<div class=\"col-xs-12 text-center\" *ngIf=\"settings.isLoading\">\n  <div class=\"spinner p-relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n\n<c8y-dashboard\n  (dashboardChange)=\"onChangeDashboard.emit($event)\"\n  #dashboard\n  *ngIf=\"!settings.isLoading\"\n>\n  <c8y-dashboard-child\n    *ngFor=\"let widget of widgets\"\n    [x]=\"widget._x\"\n    [y]=\"widget._y\"\n    [width]=\"widget._width || settings.defaultWidth\"\n    [height]=\"widget._height || settings.defaultHeight\"\n    [margin]=\"settings.widgetMargin\"\n    [isFrozen]=\"settings.isFrozen || settings.isDisabled\"\n    [class]=\"widget.classes\"\n    [data]=\"widget\"\n    [useIntersection]=\"true\"\n    (changeStart)=\"onChangeStart.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    (changeEnd)=\"onChangeEnd.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    #child\n  >\n    <c8y-dashboard-child-title>\n      <span *ngIf=\"settings.translateWidgetTitle\">\n        {{ widget.title | translate }}\n      </span>\n      <span *ngIf=\"!settings.translateWidgetTitle\">\n        {{ widget.title }}\n      </span>\n    </c8y-dashboard-child-title>\n    <c8y-dashboard-child-action *ngIf=\"onEditWidget.observers.length\">\n      <button\n        title=\"{{ 'Edit widget' | translate }}\"\n        (click)=\"onEditWidget.emit({ widget: widget, source: child, dashboard: dashboard })\"\n      >\n        <i c8yIcon=\"pencil\"></i>\n        <span class=\"m-l-4\" translate>Edit</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dashboard-child-action *ngIf=\"onDeleteWidget.observers.length\">\n      <button\n        title=\"{{ 'Remove widget' | translate }}\"\n        (click)=\"onDeleteWidget.emit({ widget: widget, source: child, dashboard: dashboard })\"\n      >\n        <i c8yIcon=\"trash\"></i>\n        <span class=\"m-l-4\" translate>Remove</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dynamic-component\n      [componentId]=\"widget.componentId || widget.name\"\n      [config]=\"\n        widget.templateUrl || widget.widgetComponent\n          ? { child: widget, dashboard: contextDashboard, context: context }\n          : widget.config\n      \"\n      *ngIf=\"child.intersected\"\n    ></c8y-dynamic-component>\n  </c8y-dashboard-child>\n</c8y-dashboard>\n",
                    host: {
                        style: "\n      display: block;\n    ",
                        class: 'dashboard c8y-grid-dashboard'
                    }
                },] }
    ];
    WidgetsDashboardComponent.propDecorators = {
        widgets: [{ type: i0.Input }],
        context: [{ type: i0.Input }],
        contextDashboard: [{ type: i0.Input }],
        _settings: [{ type: i0.Input, args: ['settings',] }],
        breadcrumb: [{ type: i0.Input }],
        onAddWidget: [{ type: i0.Output }],
        onEditWidget: [{ type: i0.Output }],
        onDeleteWidget: [{ type: i0.Output }],
        onChangeDashboard: [{ type: i0.Output }],
        onEditDashboard: [{ type: i0.Output }],
        onCopyDashboard: [{ type: i0.Output }],
        onDeleteDashboard: [{ type: i0.Output }],
        onFreeze: [{ type: i0.Output }],
        onChangeStart: [{ type: i0.Output }],
        onChangeEnd: [{ type: i0.Output }]
    };

    var DashboardModule = /** @class */ (function () {
        function DashboardModule() {
        }
        return DashboardModule;
    }());
    DashboardModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        DashboardChildComponent,
                        DashboardComponent,
                        DashboardChildTitleComponent,
                        DashboardChildActionComponent,
                        WidgetsDashboardComponent
                    ],
                    imports: [
                        CommonModule,
                        ActionBarModule,
                        DynamicComponentModule,
                        dragDrop.DragDropModule,
                        dropdown.BsDropdownModule.forRoot(),
                        HeaderModule,
                        DocsModule,
                        BreadcrumbModule
                    ],
                    exports: [
                        DashboardComponent,
                        DashboardChildComponent,
                        DashboardChildTitleComponent,
                        DashboardChildActionComponent,
                        WidgetsDashboardComponent
                    ],
                },] }
    ];

    /**
     * Audit log component allows to show audits list. Component fetches audit records for the source object given as input.
     *
     * **Example**
     *
     * ```html
     *  <c8y-audit-log [source]="sourceId"></c8y-audit-log>
     * ```
     */
    var AuditLogComponent = /** @class */ (function () {
        /**
         * @ignore
         */
        function AuditLogComponent(audit) {
            this.audit = audit;
        }
        /**
         * After page view is initialized, component gets audit records from auditRecords endpoint.
         */
        AuditLogComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.source) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.audit.list({
                                    withTotalPages: true,
                                    source: this.source
                                })];
                        case 1:
                            _a.records = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        return AuditLogComponent;
    }());
    AuditLogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-audit-log',
                    template: "<div class=\"inner-scroll\">\n  <ul class=\"timeline-list list-condensed m-t-16\">\n    <li class=\"timeline-list-item flex-row\" *c8yFor=\"let record of records\">\n      <small class=\"timeline-item-date text-right\">\n        <span>{{ record.time | c8yDate }}</span>\n      </small>\n      <div class=\"timeline-item-content flex-row\">\n        <div class=\"list-item-body\">\n          <div class=\"row text-break-word\">\n            <div class=\"col-md-5\">\n              <span class=\"text-truncate\">{{ record.activity | translate }}</span>\n              <small class=\"text-muted\">{{ record.user }}</small>\n            </div>\n            <div class=\"col-md-7\">\n              <div class=\"small text-truncate-wrap\">{{ record.text | translate }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  </ul>\n</div>\n"
                },] }
    ];
    AuditLogComponent.ctorParameters = function () { return [
        { type: client.AuditService }
    ]; };
    AuditLogComponent.propDecorators = {
        source: [{ type: i0.Input }]
    };

    /** Audit module allows to show audits list. */
    var AuditLogModule = /** @class */ (function () {
        function AuditLogModule() {
        }
        return AuditLogModule;
    }());
    AuditLogModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [AuditLogComponent],
                    imports: [CommonModule],
                    exports: [AuditLogComponent]
                },] }
    ];

    /* tslint:disable:max-classes-per-file */
    var CellRendererContext = /** @class */ (function () {
        function CellRendererContext() {
        }
        return CellRendererContext;
    }());
    var CellRendererDefDirective = /** @class */ (function () {
        function CellRendererDefDirective(template) {
            this.template = template;
        }
        return CellRendererDefDirective;
    }());
    CellRendererDefDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[c8yCellRendererDef]' },] }
    ];
    CellRendererDefDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    var HeaderCellRendererDefDirective = /** @class */ (function () {
        function HeaderCellRendererDefDirective(template) {
            this.template = template;
        }
        return HeaderCellRendererDefDirective;
    }());
    HeaderCellRendererDefDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[c8yHeaderCellRendererDef]' },] }
    ];
    HeaderCellRendererDefDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    var CellRendererComponent = /** @class */ (function () {
        function CellRendererComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
        }
        Object.defineProperty(CellRendererComponent.prototype, "_spec", {
            set: function (spec) {
                this.spec = spec;
            },
            enumerable: false,
            configurable: true
        });
        CellRendererComponent.prototype.ngOnChanges = function () {
            if (!this.prevSpec) {
                this.prevSpec = this.spec;
            }
            var renderer = this.spec.renderer;
            if (renderer instanceof i0.TemplateRef) {
                this.rendererType = 'TEMPLATE';
            }
            else if (renderer instanceof i0.Type) {
                this.rendererType = 'COMPONENT';
                this.rendererInjector = i0.Injector.create({
                    providers: [{ provide: CellRendererContext, useValue: this.spec.context }],
                    parent: this.injector
                });
            }
        };
        CellRendererComponent.prototype.ngDoCheck = function () {
            if (!this.spec.context.value === this.prevSpec.context.value) {
                this.prevSpec = this.spec;
                this.cd.markForCheck();
            }
        };
        return CellRendererComponent;
    }());
    CellRendererComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cell-renderer',
                    template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <span title=\"{{ spec.context.value }}\">\n    {{ spec.context.value }}\n  </span>\n</ng-container>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    CellRendererComponent.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i0.ChangeDetectorRef }
    ]; };
    CellRendererComponent.propDecorators = {
        _spec: [{ type: i0.Input, args: ['spec',] }]
    };

    /* tslint:disable:max-classes-per-file */
    var FilteringFormRendererContext = /** @class */ (function () {
        function FilteringFormRendererContext() {
        }
        return FilteringFormRendererContext;
    }());
    var FilteringFormRendererDefDirective = /** @class */ (function () {
        function FilteringFormRendererDefDirective(template) {
            this.template = template;
        }
        return FilteringFormRendererDefDirective;
    }());
    FilteringFormRendererDefDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[c8yFilteringFormRendererDef]' },] }
    ];
    FilteringFormRendererDefDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    var ColumnDirective = /** @class */ (function () {
        function ColumnDirective() {
        }
        return ColumnDirective;
    }());
    ColumnDirective.decorators = [
        { type: i0.Directive, args: [{ selector: 'c8y-column' },] }
    ];
    ColumnDirective.propDecorators = {
        name: [{ type: i0.Input }],
        cellRendererDef: [{ type: i0.ContentChild, args: [CellRendererDefDirective, { static: false },] }],
        headerCellRendererDef: [{ type: i0.ContentChild, args: [HeaderCellRendererDefDirective, { static: false },] }],
        filteringFormRendererDef: [{ type: i0.ContentChild, args: [FilteringFormRendererDefDirective, { static: false },] }]
    };

    var FilteringFormRendererComponent = /** @class */ (function () {
        function FilteringFormRendererComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
            this.defaultRendererFilterText = '';
        }
        Object.defineProperty(FilteringFormRendererComponent.prototype, "_spec", {
            set: function (spec) {
                this.spec = spec;
            },
            enumerable: false,
            configurable: true
        });
        FilteringFormRendererComponent.prototype.ngOnChanges = function () {
            var _a = this.spec, renderer = _a.renderer, context = _a.context;
            if (renderer instanceof i0.TemplateRef) {
                this.rendererType = 'TEMPLATE';
            }
            else if (renderer instanceof i0.Type) {
                this.rendererType = 'COMPONENT';
                this.rendererInjector = i0.Injector.create({
                    providers: [{ provide: FilteringFormRendererContext, useValue: this.spec.context }],
                    parent: this.injector
                });
            }
            var filterPredicate = context.property.filterPredicate;
            if (typeof filterPredicate === 'string') {
                this.defaultRendererFilterText = filterPredicate;
            }
        };
        return FilteringFormRendererComponent;
    }());
    FilteringFormRendererComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-filtering-form-renderer',
                    template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <div class=\"form-group m-b-8 p-t-8\">\n    <label>{{ 'Filter text' | translate }}</label>\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"defaultRendererFilterText\"\n      (keyup.enter)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n      c8yProductExperience\n      [actionName]=\"'dataGrid:filteringForm:InputTextField'\"\n    />\n  </div>\n\n  <div class=\"data-grid__dropdown__footer d-flex separator-top\">\n    <button\n      title=\"{{ 'Reset' | translate }}\"\n      class=\"btn btn-default btn-sm flex-grow m-r-8\"\n      (click)=\"defaultRendererFilterText = ''; spec.context.resetFilter()\"\n    >\n      {{ 'Reset' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Apply' | translate }}\"\n      class=\"btn btn-primary btn-sm flex-grow\"\n      (click)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n    >\n      {{ 'Apply' | translate }}\n    </button>\n  </div>\n</ng-container>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    FilteringFormRendererComponent.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i0.ChangeDetectorRef }
    ]; };
    FilteringFormRendererComponent.propDecorators = {
        _spec: [{ type: i0.Input, args: ['spec',] }]
    };

    var ConfigureCustomColumnComponent = /** @class */ (function () {
        function ConfigureCustomColumnComponent(fb, modalRef) {
            this.fb = fb;
            this.modalRef = modalRef;
            this.SIMPLE_JSON_PATH_REGEX = /^[^.\s]+(\.\S+)*$/;
            this.onAddCustomColumn = new i0.EventEmitter();
            this.formGroup = this.fb.group({
                header: [''],
                path: [''],
                addAnother: [false]
            });
        }
        ConfigureCustomColumnComponent.prototype.comparator = function (val1, val2) {
            return lodashEs.camelCase(val1) === lodashEs.camelCase(val2);
        };
        ConfigureCustomColumnComponent.prototype.addColumn = function () {
            var _a = this.formGroup.value, header = _a.header, path = _a.path;
            this.onAddCustomColumn.emit({
                name: lodashEs.camelCase(header),
                header: header,
                path: path,
                custom: true,
                visible: true
            });
            if (this.formGroup.value.addAnother) {
                this.form.resetForm({ addAnother: true });
            }
            else {
                this.modalRef.hide();
            }
        };
        return ConfigureCustomColumnComponent;
    }());
    ConfigureCustomColumnComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-configure-custom-column',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3 translate>Configure custom column</h3>\n  </div>\n\n  <form class=\"d-contents\" #columnConfigForm=\"ngForm\" [formGroup]=\"formGroup\">\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <c8y-form-group>\n          <label for=\"header\" translate>Header</label>\n          <input\n            id=\"header\"\n            formControlName=\"header\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            [placeholder]=\"'e.g. Agent name' | translate\"\n            [required]=\"true\"\n            uniqueByPath\n            [collection]=\"columns\"\n            path=\"header\"\n            [comparator]=\"comparator\"\n          />\n          <c8y-messages>\n            <c8y-message\n              name=\"uniqueByPath\"\n              [text]=\"'Column\\'s header name must be unique' | translate\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n        <c8y-form-group>\n          <label for=\"fragmentPath\" translate>Fragment path</label>\n          <input\n            id=\"fragmentPath\"\n            formControlName=\"path\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'c8y_Agent.name' }\"\n            [required]=\"true\"\n            [pattern]=\"SIMPLE_JSON_PATH_REGEX\"\n          />\n          <c8y-messages>\n            <c8y-message\n              name=\"pattern\"\n              [text]=\"'Must be a valid JSON path' | translate\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n        <label class=\"c8y-switch\" [title]=\"'Add another column after saving this one' | translate\">\n          <input type=\"checkbox\" formControlName=\"addAnother\" class=\"form-control\" />\n          <span></span>\n          <span translate>Add another column after saving this one</span>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n        {{ 'Cancel' | translate }}\n      </button>\n      <button\n        title=\"{{ 'Save' | translate }}\"\n        class=\"btn btn-primary\"\n        [disabled]=\"columnConfigForm.form.pristine || !columnConfigForm.form.valid\"\n        (click)=\"addColumn()\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </form>\n</div>\n"
                },] }
    ];
    ConfigureCustomColumnComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i1$2.BsModalRef }
    ]; };
    ConfigureCustomColumnComponent.propDecorators = {
        form: [{ type: i0.ViewChild, args: ['columnConfigForm', { static: false },] }],
        onAddCustomColumn: [{ type: i0.Output }]
    };

    var minColumnGridTrackSize = 80;
    /** Maps column types to relative widths. */
    var ratiosByColumnTypes = {
        /** The width ration for icon column type. */
        icon: 1,
        /** The width ration for numeric column type. */
        numeric: 1,
        /** The width ration for short text column type. */
        'text-short': 1.67,
        /** The width ration for long text column type. */
        'text-long': 3.33
    };
    /** Filtering actions. */
    exports.FilteringActionType = void 0;
    (function (FilteringActionType) {
        /** Action invoked when filter settings are to be applied. */
        FilteringActionType["ApplyFilter"] = "APPLY_FILTER";
        /** Action invoked when filter settings are to be cleared. */
        FilteringActionType["ResetFilter"] = "RESET_FILTER";
    })(exports.FilteringActionType || (exports.FilteringActionType = {}));

    var GridDataSource = /** @class */ (function () {
        function GridDataSource() {
            this.loadingSubject = new rxjs.BehaviorSubject(true);
            this.dataSourceSubject = new rxjs.BehaviorSubject([]);
            this.dataStatsSubject = new rxjs.BehaviorSubject({
                size: 0,
                filteredSize: 0,
                currentPage: 0,
                currentPageSize: 0,
                firstPageSize: 0
            });
            this.dataSelectionSubject = new rxjs.BehaviorSubject({
                filteredDataIds: []
            });
            this.resultListSubject = new rxjs.Subject();
            this.loading$ = this.loadingSubject.asObservable();
            this.data$ = this.dataSourceSubject.asObservable();
            this.stats$ = this.dataStatsSubject.asObservable();
            this.selection$ = this.dataSelectionSubject.asObservable();
            this.resultList$ = this.resultListSubject.asObservable();
        }
        GridDataSource.prototype.connect = function (collectionViewer) {
            return this.data$;
        };
        GridDataSource.prototype.disconnect = function (collectionViewer) {
            this.loadingSubject.complete();
            this.dataSourceSubject.complete();
            this.dataStatsSubject.complete();
            this.dataSelectionSubject.complete();
        };
        GridDataSource.prototype.loadData = function (_b) {
            var _this = this;
            var rows = _b.rows, columns = _b.columns, pagination = _b.pagination, searchText = _b.searchText, serverSideDataCallback = _b.serverSideDataCallback, selectable = _b.selectable, selectionPrimaryKey = _b.selectionPrimaryKey, infiniteScroll = _b.infiniteScroll, _c = _b.reload, reload = _c === void 0 ? false : _c;
            var clientSideData$ = this.toObservable(rows).pipe(operators.map(function (initialData) {
                var filteredSize = 0;
                var filteredDataIds = [];
                var transformedData = lodashEs.flow(function (data) { return _this.doClientSideSearch({ data: data, columns: columns, searchText: searchText }); }, function (data) { return _this.doClientSideFiltering({ data: data, columns: columns }); }, function (data) { return _this.doClientSideSorting({ data: data, columns: columns }); }, function (data) {
                    filteredSize = data.length;
                    filteredDataIds = selectable
                        ? data.map(function (item) { return item[selectionPrimaryKey]; })
                        : filteredDataIds;
                    return data;
                }, function (data) { return _this.doClientSidePagination({ data: data, pagination: pagination }); })(initialData);
                _this.dataStatsSubject.next({
                    size: initialData.length,
                    filteredSize: filteredSize,
                    currentPage: pagination.currentPage,
                    currentPageSize: transformedData.length,
                    firstPageSize: pagination.pageSize
                });
                _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds });
                return transformedData;
            }));
            var serverSideData$ = rxjs.defer(function () { return _this.toObservable(serverSideDataCallback({
                columns: columns,
                searchText: searchText,
                pagination: pagination,
                selection: { enabled: selectable, primaryKey: selectionPrimaryKey }
            })); }).pipe(operators.map(function (result) {
                var data = result.data, paging = result.paging, size = result.size, filteredSize = result.filteredSize, filteredDataIds = result.filteredDataIds;
                _this.dataStatsSubject.next({
                    size: size,
                    filteredSize: filteredSize,
                    currentPage: paging.currentPage,
                    currentPageSize: data.length,
                    nextPage: paging.nextPage,
                    firstPageSize: paging.pageSize
                });
                _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds || [] });
                _this.resultListSubject.next(result);
                return data;
            }));
            var data$ = typeof serverSideDataCallback === 'function' ? serverSideData$ : clientSideData$;
            rxjs.of([])
                .pipe(operators.tap(function () { return _this.loadingSubject.next(true); }), operators.switchMap(function () { return data$; }), operators.catchError(function (err) {
                _this.dataStatsSubject.next({
                    size: 0,
                    filteredSize: 0,
                    currentPage: 0,
                    currentPageSize: 0,
                    firstPageSize: 0
                });
                _this.dataSelectionSubject.next({ filteredDataIds: [] });
                return rxjs.of([]);
            }), operators.finalize(function () { return _this.loadingSubject.next(false); }))
                .subscribe(function (result) {
                var data = infiniteScroll && !reload ? __spreadArray(__spreadArray([], __read(_this.dataSourceSubject.value)), __read(result)) : result;
                _this.dataSourceSubject.next(data);
            });
        };
        GridDataSource.prototype.resolveValue = function (x, path) {
            return lodashEs.get(x, path);
        };
        GridDataSource.prototype.resolveFunction = function (x) {
            return typeof x === 'function' ? x() : x;
        };
        GridDataSource.prototype.normalizeNil = function (x) {
            return lodashEs.isNil(x) ? '' : x;
        };
        GridDataSource.prototype.doClientSideFiltering = function (_b) {
            var _this = this;
            var data = _b.data, columns = _b.columns;
            return columns.reduce(function (result, column) {
                var filterPredicate = column.filterPredicate;
                if (typeof filterPredicate === 'string') {
                    return _this.doClientSideSearch({
                        data: result,
                        columns: [column],
                        searchText: filterPredicate
                    });
                }
                if (typeof filterPredicate === 'function') {
                    return result.filter(function (item) { return filterPredicate(item, column.path); });
                }
                return result;
            }, data);
        };
        GridDataSource.prototype.doClientSideSearch = function (_b) {
            var _this = this;
            var data = _b.data, columns = _b.columns, searchText = _b.searchText;
            var propPaths = columns.map(function (_b) {
                var path = _b.path;
                return path;
            }).filter(function (column) { return !lodashEs.isNil(column); });
            var regexSearch = this.createRegexSearch(searchText);
            return data.filter(function (item) {
                var itemWithResolvedValues = lodashEs.flow(function (x) { return propPaths.map(function (propPath) { return lodashEs.get(x, propPath); }); }, function (x) { return lodashEs.mapValues(x, _this.resolveFunction); }, function (x) { return lodashEs.omitBy(x, lodashEs.isNil); })(item);
                var cellValues = Object.values(itemWithResolvedValues);
                return cellValues.some(function (cellValue) { return regexSearch.test(cellValue.toString()); });
            });
        };
        GridDataSource.prototype.doClientSideSorting = function (_b) {
            var data = _b.data, columns = _b.columns;
            var actives = columns.filter(function (_b) {
                var sortOrder = _b.sortOrder;
                return !!sortOrder;
            });
            var sortingState = {
                iteratees: actives.map(function (_b) {
                    var path = _b.path;
                    return path;
                }).map(function (path) { return function (item) { var _a; return (_a = lodashEs.get(item, path)) !== null && _a !== void 0 ? _a : ''; }; }),
                orders: actives.map(function (_b) {
                    var sortOrder = _b.sortOrder;
                    return sortOrder;
                })
            };
            return lodashEs.orderBy(data, sortingState.iteratees, sortingState.orders);
        };
        GridDataSource.prototype.doClientSidePagination = function (_b) {
            var data = _b.data, pagination = _b.pagination;
            return pagination
                ? lodashEs.get(lodashEs.chunk(data, pagination.pageSize), pagination.currentPage - 1, [])
                : data;
        };
        GridDataSource.prototype.createRegexSearch = function (filterValue) {
            return RegExp(escapeRegExpPattern(filterValue), 'i');
        };
        GridDataSource.prototype.toObservable = function (x) {
            return rxjs.isObservable(x) ? x : x instanceof Promise ? rxjs.from(x) : rxjs.of(x);
        };
        return GridDataSource;
    }());
    /**
     *
     * @param string pattern Regex pattern.
     * @return string The escaped regex.
     * @see https://stackoverflow.com/a/3561711/2013891
     */
    function escapeRegExpPattern(pattern) {
        if (pattern === void 0) { pattern = ''; }
        return pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    var SortingOrder;
    (function (SortingOrder) {
        SortingOrder["ASC"] = "asc";
        SortingOrder["DESC"] = "desc";
    })(SortingOrder || (SortingOrder = {}));
    var DataGridComponent = /** @class */ (function () {
        function DataGridComponent(sanitizer, hostRef, cd, cfr, gainsightService, bsModalService, alertService) {
            var _this = this;
            this.sanitizer = sanitizer;
            this.hostRef = hostRef;
            this.cd = cd;
            this.cfr = cfr;
            this.gainsightService = gainsightService;
            this.bsModalService = bsModalService;
            this.alertService = alertService;
            /** The title for the data grid, it's displayed in the grid's header. */
            this.title = gettext('Items');
            /** The label for load more button. */
            this.loadMoreItemsLabel = gettext('Load more items');
            /** The label for loading indicator. */
            this.loadingItemsLabel = gettext('Loading items…');
            /** Determines whether text search input is shown in the grid's header. */
            this.showSearch = false;
            this.dataSource = new GridDataSource();
            this.filteringLabelsParams = {
                filteredItemsCount: 0,
                allItemsCount: 0
            };
            this.paginationLabelParams = {
                pageFirstItemIdx: 0,
                pageLastItemIdx: 0,
                itemsTotal: 0
            };
            this.possiblePageSizes = [10, 15, 20, 30, 50];
            this.minPossiblePageSize = Math.min.apply(Math, __spreadArray([], __read(this.possiblePageSizes)));
            this.selectable = false;
            this.selectionPrimaryKey = 'id';
            this.displayOptions = {
                striped: true,
                bordered: false,
                gridHeader: true,
                filter: true
            };
            /** Sets initial search text. */
            this.searchText = '';
            /** Determines if custom columns button will be enabled. */
            this.configureColumnsEnabled = true;
            /** Shows the warning for the sub-assets counter */
            this.showCounterWarning = false;
            /** Emits an event when mouse is over a row. */
            this.rowMouseOver = new i0.EventEmitter();
            /** Emits an event when mouse leaves a row. */
            this.rowMouseLeave = new i0.EventEmitter();
            /** Emits an event when a row is clicked. */
            this.rowClick = new i0.EventEmitter();
            /** Emits an event when grid's configuration is changed. */
            this.onConfigChange = new i0.EventEmitter();
            /** Emits an event before the filter is applied. */
            this.onBeforeFilter = new i0.EventEmitter();
            /** Emits an event before the search is performed. */
            this.onBeforeSearch = new i0.EventEmitter();
            /** Emits an event when a filter is applied in a column. */
            this.onFilter = new i0.EventEmitter();
            /** Emits an event when items selection changes. The array contains keys of selected items (key property is defined by `selectionPrimaryKey`). */
            this.itemsSelect = new i0.EventEmitter();
            /** Emits an event when reload button is clicked. */
            this.onReload = new i0.EventEmitter();
            /** Emits an event when a custom column is added */
            this.onAddCustomColumn = new i0.EventEmitter();
            /** Emits an event when a custom column is removed */
            this.onRemoveCustomColumn = new i0.EventEmitter();
            this.columnNames = [];
            this.styles = {
                tableCursor: 'auto',
                gridTemplateColumns: undefined,
                gridInfiniteScrollColumn: undefined
            };
            this.searchText$ = new i0.EventEmitter();
            this.filteringApplied = false;
            this.totalPagesCount$ = new rxjs.BehaviorSubject(Infinity);
            this.hidePagination$ = this.totalPagesCount$.pipe(operators.map(function (totalPagesCount) { return totalPagesCount <= 1; }), operators.delay(0) // prevents ExpressionChangedAfterItHasBeenCheckedError
            );
            this.selectedItemIds = [];
            this.currentPageSelectionState = {
                allSelected: false,
                allDeselected: true
            };
            this.builtInActionType = {
                Edit: "EDIT" /* Edit */,
                Delete: "DELETE" /* Delete */,
                Export: "EXPORT" /* Export */
            };
            this.confirmRemoveColumnButtons = [
                {
                    label: gettext('Cancel'),
                    action: function () { return Promise.resolve(false); }
                },
                {
                    label: gettext('Remove`column,verb`'),
                    status: 'danger',
                    action: function () { return Promise.resolve(true); }
                }
            ];
            this.resizeHandleMouseDown$ = new i0.EventEmitter();
            this.resizeHandleContainerMouseMove$ = new i0.EventEmitter();
            this.resizeHandleContainerMouseUp$ = new i0.EventEmitter();
            this.columnsInitialized = false;
            this.unsubscribe$ = new rxjs.Subject();
            this.SEARCH_DEBOUNCE_TIME = 500;
            /**
             * Event emitter, taking boolean values used for loading data grid data with debounce.
             * Default value is set to false. Set to true if data grid is using infinite scroll and page should be reloaded.
             * This is used to avoid having multiple this.loadData() function calls.
             */
            this.triggerLoadData = new i0.EventEmitter();
            this.triggerLoadData.pipe(operators.debounceTime(1), operators.takeUntil(this.unsubscribe$)).subscribe(function (reload) {
                _this.loadData(reload);
            });
        }
        Object.defineProperty(DataGridComponent.prototype, "_columns", {
            /** The list of columns to be displayed in the grid. */
            set: function (columns) {
                this.columns = columns || [];
                this.columnsInitialized = this.columnsInitialized || !!columns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_rows", {
            /** The list of rows to be displayed in the grid (used for client side data). */
            set: function (rows) {
                this.rows = rows || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_pagination", {
            /** Pagination settings, e.g. allows for setting current page or page size. */
            set: function (pagination) {
                this.pagination = pagination;
                var pageSize = lodashEs.get(this.pagination, 'pageSize');
                if (pageSize &&
                    !this.possiblePageSizes.find(function (possiblePageSize) { return possiblePageSize === pageSize; })) {
                    this.pagination = Object.assign(Object.assign({}, this.pagination), { pageSize: 10 });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_infiniteScroll", {
            /** Sets load more mode. */
            set: function (infiniteScroll) {
                this.infiniteScroll = infiniteScroll;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_serverSideDataCallback", {
            /**
             * Sets a callback function which will be invoked whenever data needs to be loaded from server.
             * The function should take [[DataSourceModifier]] and return [[ServerSideDataResult]].
             */
            set: function (serverSideDataCallback) {
                this.serverSideDataCallback = serverSideDataCallback;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_selectable", {
            /** Determines whether items can be selected by clicking a checkbox in the first column. */
            set: function (selectable) {
                this.selectable = selectable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_selectionPrimaryKey", {
            /** Determines which item's property will be used to distinguish selection status. */
            set: function (selectionPrimaryKey) {
                this.selectionPrimaryKey = selectionPrimaryKey;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_displayOptions", {
            /** Sets display options. */
            set: function (displayOptions) {
                this.displayOptions = Object.assign(Object.assign({}, this.displayOptions), displayOptions);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_actionControls", {
            /** Sets action controls (actions available for individual items). */
            set: function (actionControls) {
                this.actionControls = actionControls || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_bulkActionControls", {
            /** Sets bulk action controls (actions available for items selected by user). */
            set: function (bulkActionControls) {
                this.bulkActionControls = bulkActionControls || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_headerActionControls", {
            /** Sets header action controls (actions available from data grid header). */
            set: function (headerActionControls) {
                this.headerActionControls = headerActionControls || [];
            },
            enumerable: false,
            configurable: true
        });
        DataGridComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.searchText$
                .pipe(operators.takeUntil(this.unsubscribe$), operators.debounceTime(this.SEARCH_DEBOUNCE_TIME), operators.distinctUntilChanged(), operators.tap(function (searchText) {
                _this.searchText = searchText;
                _this.onBeforeSearch.emit(_this.searchText);
            }))
                .subscribe(function () {
                _this.reload();
            });
            if (this.selectable) {
                rxjs.combineLatest(this.dataSource.data$, this.itemsSelect.asObservable())
                    .pipe(operators.takeUntil(this.unsubscribe$))
                    .subscribe(function (_d) {
                    var _e = __read(_d, 1), data = _e[0];
                    var currentPageEmpty = data.length === 0;
                    _this.currentPageSelectionState = {
                        allSelected: currentPageEmpty ? false : data.every(function (item) { return _this.isItemSelected(item); }),
                        allDeselected: currentPageEmpty ? true : data.every(function (item) { return !_this.isItemSelected(item); })
                    };
                });
            }
            this.dataSource.stats$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (stats) {
                _this.createLoadMoreComponent(stats);
                _this.updateFilteringLabelsParams(stats);
                _this.updatePaginationLabelParams(stats);
            });
            if (this.refresh) {
                this.refresh.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () {
                    _this.cancel(false);
                    _this.reload();
                });
            }
        };
        DataGridComponent.prototype.ngOnChanges = function (event) {
            var _a, _b, _c;
            if (((!event._actionControls && !event.searchText) || ((_a = event._actionControls) === null || _a === void 0 ? void 0 : _a.firstChange)) &&
                this.columnsInitialized) {
                var reload = !!((_b = event._infiniteScroll) === null || _b === void 0 ? void 0 : _b.currentValue) && !((_c = event._infiniteScroll) === null || _c === void 0 ? void 0 : _c.firstChange);
                this.triggerLoadData.emit(reload);
            }
            this.updateColumns();
        };
        DataGridComponent.prototype.ngAfterViewInit = function () {
            this.updateGridColumnsSize();
            this.updateThEls();
            this.setupResizeHandle();
        };
        DataGridComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        DataGridComponent.prototype.openCustomColumnModal = function () {
            var _this = this;
            var modalRef = this.bsModalService.show(ConfigureCustomColumnComponent, {
                class: 'modal-sm',
                ignoreBackdropClick: true,
                initialState: {
                    columns: this.columns
                }
            });
            modalRef.content.onAddCustomColumn
                .pipe(operators.takeUntil(modalRef.onHidden))
                .subscribe(function (event) { return _this.onAddCustomColumn.emit(event); });
        };
        DataGridComponent.prototype.removeCustomColumn = function (poConfirm, column, ddConfigureColumns) {
            return __awaiter(this, void 0, void 0, function () {
                var remove, e_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            ddConfigureColumns.autoClose = false;
                            poConfirm.message = gettext('Do you want to remove this column?');
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, poConfirm.show(this.confirmRemoveColumnButtons)];
                        case 2:
                            remove = _d.sent();
                            if (remove) {
                                this.onRemoveCustomColumn.emit(column);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _d.sent();
                            this.alertService.addServerFailure(e_1);
                            return [3 /*break*/, 4];
                        case 4:
                            setTimeout(function () { return (ddConfigureColumns.autoClose = true); }, 0);
                            return [2 /*return*/];
                    }
                });
            });
        };
        DataGridComponent.prototype.trackByName = function (index, item) {
            return item.name;
        };
        DataGridComponent.prototype.resolveCellValue = function (row, path) {
            var _this = this;
            return lodashEs.flow([
                function (x) { return _this.dataSource.resolveValue(x, path); },
                this.dataSource.resolveFunction,
                this.dataSource.normalizeNil
            ])(row);
        };
        DataGridComponent.prototype.changeSortOrder = function (columnName) {
            var column = this.columns.find(function (_d) {
                var name = _d.name;
                return name === columnName;
            });
            this.gainsightService.triggerEvent('dataGrid:ChangeSortOrder', {
                column: columnName,
                sortOrderBeforeChange: getPresentSortOrder(column === null || column === void 0 ? void 0 : column.sortOrder)
            });
            if (column) {
                var sortOrder = column.sortOrder;
                if (!sortOrder) {
                    this.updateSorting([columnName], SortingOrder.ASC);
                }
                else if (sortOrder === SortingOrder.ASC) {
                    this.updateSorting([columnName], SortingOrder.DESC);
                }
                else {
                    this.updateSorting([columnName], '');
                }
            }
            function getPresentSortOrder(sortOrder) {
                switch (sortOrder) {
                    case SortingOrder.ASC:
                        return 'descending';
                    case SortingOrder.DESC:
                        return 'descending (Default)';
                    default:
                        return 'ascending';
                }
            }
        };
        DataGridComponent.prototype.updateSorting = function (columnNames, sortOrder) {
            this.columns = this.columns.map(function (column) {
                if (columnNames.includes(column.name)) {
                    return Object.assign(Object.assign({}, column), { sortOrder: sortOrder });
                }
                return column;
            });
            this.emitConfigChange();
            this.reload();
        };
        DataGridComponent.prototype.applyFilter = function (columnName, dropdown, filteringModifier) {
            this.gainsightService.triggerEvent('dataGrid:ApplyFilter', { column: columnName });
            this.onBeforeFilter.emit({ columnName: columnName, dropdown: dropdown, filteringModifier: filteringModifier });
            this.updateFiltering([columnName], {
                type: exports.FilteringActionType.ApplyFilter,
                payload: { filteringModifier: filteringModifier }
            });
            dropdown.hide();
            this.onFilter.emit({ columnName: columnName, dropdown: dropdown, filteringModifier: filteringModifier });
        };
        DataGridComponent.prototype.resetFilter = function (columnName, dropdown) {
            this.gainsightService.triggerEvent('dataGrid:ResetFilter', { column: columnName });
            this.updateFiltering([columnName], { type: exports.FilteringActionType.ResetFilter });
            dropdown.hide();
            this.onFilter.emit({ columnName: columnName });
        };
        DataGridComponent.prototype.clearFilters = function (reload) {
            if (reload === void 0) { reload = true; }
            this.gainsightService.triggerEvent('dataGrid:ClearFilters');
            this.updateFiltering(this.columns.map(function (_d) {
                var name = _d.name;
                return name;
            }), {
                type: exports.FilteringActionType.ResetFilter
            }, reload);
            this.onFilter.emit({});
        };
        DataGridComponent.prototype.updateFiltering = function (columnNames, action, reload) {
            if (reload === void 0) { reload = true; }
            this.columns = this.columns.map(function (column) {
                if (columnNames.includes(column.name)) {
                    return Object.assign(Object.assign({}, column), (action.type === exports.FilteringActionType.ApplyFilter
                        ? action.payload.filteringModifier
                        : { filterPredicate: undefined, externalFilterQuery: undefined }));
                }
                return column;
            });
            this.updateFilteringApplied();
            if (reload) {
                this.reload();
            }
        };
        DataGridComponent.prototype.updateFilteringApplied = function () {
            this.filteringApplied = this.columns.some(this.isColumnFilteringApplied);
        };
        DataGridComponent.prototype.isColumnFilteringApplied = function (column) {
            var filterable = column.filterable, filterPredicate = column.filterPredicate, externalFilterQuery = column.externalFilterQuery;
            return !!(filterable && (filterPredicate || externalFilterQuery));
        };
        DataGridComponent.prototype.updatePagination = function (_d) {
            var itemsPerPage = _d.itemsPerPage, page = _d.page;
            this.pagination = Object.assign(Object.assign({}, this.pagination), { pageSize: itemsPerPage, currentPage: page });
            this.loadData();
            this.emitConfigChange();
        };
        DataGridComponent.prototype.clickReload = function () {
            this.gainsightService.triggerEvent('dataGrid:Reload');
            this.searchText = '';
            this.reload();
            this.onReload.next();
        };
        DataGridComponent.prototype.reload = function () {
            this.pagination = Object.assign(Object.assign({}, this.pagination), { currentPage: 1 });
            this.recreateLoadMoreComponent = true;
            this.loadData(true);
            this.scrollToTop();
        };
        DataGridComponent.prototype.loadNextPage = function () {
            var _this = this;
            this.pagination = Object.assign(Object.assign({}, this.pagination), { currentPage: this.pagination.nextPage });
            this.loadData();
            return this.dataSource.resultList$
                .pipe(operators.take(1)) // in order for `toPromise` to work, the observable needs to complete
                .toPromise()
                .then(function (result) {
                return Object.assign(Object.assign({}, result), { paging: Object.assign(Object.assign({}, result.paging), { next: _this.loadNextPage.bind(_this) }) });
            });
        };
        DataGridComponent.prototype.getCellRendererSpec = function (_d) {
            var value = _d.value, row = _d.row, columnName = _d.columnName;
            return this._getCellRendererSpec({ type: 'CELL', value: value, row: row, columnName: columnName });
        };
        DataGridComponent.prototype.getHeaderCellRendererSpec = function (_d) {
            var value = _d.value, columnName = _d.columnName;
            return this._getCellRendererSpec({ type: 'HEADER', value: value, row: undefined, columnName: columnName });
        };
        DataGridComponent.prototype.getFilteringFormRendererSpec = function (_d) {
            var column = _d.column, dropdown = _d.dropdown;
            return {
                renderer: lodashEs.get(this.getColumnRenderer(column), 'filteringFormRendererDef.template') ||
                    column.filteringFormRendererComponent,
                context: {
                    property: column,
                    applyFilter: this.applyFilter.bind(this, column.name, dropdown),
                    resetFilter: this.resetFilter.bind(this, column.name, dropdown)
                }
            };
        };
        DataGridComponent.prototype.setAllItemsSelected = function (selected) {
            var _this = this;
            this.dataSource.selection$
                .pipe(operators.first())
                .subscribe(function (_d) {
                var filteredDataIds = _d.filteredDataIds;
                return _this.setItemsSelected(filteredDataIds, selected);
            });
        };
        DataGridComponent.prototype.setAllItemsInCurrentPageSelected = function (selected) {
            var _this = this;
            this.dataSource.data$.pipe(operators.first()).subscribe(function (data) { return _this.setItemsSelected(data, selected); });
        };
        DataGridComponent.prototype.setItemsSelected = function (items, selected) {
            var _this = this;
            var itemIds = items.map(function (item) { return typeof item === 'object' ? item[_this.selectionPrimaryKey] : item; });
            this.selectedItemIds = selected
                ? lodashEs.union(this.selectedItemIds, itemIds)
                : lodashEs.without.apply(void 0, __spreadArray([this.selectedItemIds], __read(itemIds)));
            this.gainsightService.triggerEvent('dataGrid:ItemCheckboxClicked', { itemSelected: selected });
            this.itemsSelect.emit(this.selectedItemIds);
        };
        DataGridComponent.prototype.cancel = function (triggerCustomEvent) {
            if (triggerCustomEvent === void 0) { triggerCustomEvent = true; }
            if (triggerCustomEvent) {
                this.gainsightService.triggerEvent('dataGrid:CancelSelection');
            }
            this.selectedItemIds = [];
            this.itemsSelect.emit(this.selectedItemIds);
        };
        DataGridComponent.prototype.isItemSelected = function (item) {
            return this.selectedItemIds.includes(item[this.selectionPrimaryKey]);
        };
        DataGridComponent.prototype.onColumnDrop = function (_d) {
            var previousIndex = _d.previousIndex, currentIndex = _d.currentIndex;
            var differentIndex = previousIndex !== currentIndex;
            if (differentIndex) {
                this.gainsightService.triggerEvent('dataGrid:ColumnPositionChanged', {
                    columnName: this.columnNames[previousIndex]
                });
                var column = this.columns.splice(previousIndex, 1);
                this.columns.splice(currentIndex, 0, column[0]);
                this.emitConfigChange();
            }
            this.updateColumnNames();
            this.updateGridColumnsSize();
        };
        DataGridComponent.prototype.updateGridColumnsSize = function () {
            this.styles = Object.assign(Object.assign({}, this.styles), { gridTemplateColumns: this.sanitizer.bypassSecurityTrustStyle(this.columns
                    .filter(function (column) { return column.visible; })
                    .map(function (_d) {
                    var gridTrackSize = _d.gridTrackSize;
                    return gridTrackSize;
                })
                    .join(' ')), gridInfiniteScrollColumn: this.sanitizer.bypassSecurityTrustStyle("1 / span " + this.columns.filter(function (column) { return column.visible; }).length) });
        };
        DataGridComponent.prototype.updateThEls = function () {
            var _this = this;
            setTimeout(function () {
                _this.thEls = _this.thRefs
                    ? _this.thRefs.toArray().map(function (_d) {
                        var nativeElement = _d.nativeElement;
                        return nativeElement;
                    })
                    : [];
            }, 0);
        };
        // To be removed when columns are transformed to observables.
        DataGridComponent.prototype.isDropDownPlacedRight = function (column) {
            return (lodashEs.indexOf(this.columns.filter(function (c) { return c.visible; }), column) >
                this.columns.filter(function (c) { return c.visible; }).length / 2);
        };
        DataGridComponent.prototype.emitConfigChange = function () {
            if (this.columnsInitialized) {
                var columns = this.columns.map(function (column) {
                    if (column.custom) {
                        var visible = column.visible, sortOrder = column.sortOrder, name = column.name, header = column.header, path = column.path;
                        return { visible: visible, sortOrder: sortOrder, name: name, header: header, path: path, custom: true };
                    }
                    else {
                        var visible = column.visible, sortOrder = column.sortOrder, name = column.name;
                        return { visible: visible, sortOrder: sortOrder, name: name };
                    }
                });
                this.onConfigChange.emit({ columns: columns, pagination: this.pagination });
            }
        };
        DataGridComponent.prototype.loadData = function (reload) {
            if (reload === void 0) { reload = false; }
            var _d = this, rows = _d.rows, columns = _d.columns, pagination = _d.pagination, searchText = _d.searchText, serverSideDataCallback = _d.serverSideDataCallback, selectable = _d.selectable, selectionPrimaryKey = _d.selectionPrimaryKey, infiniteScroll = _d.infiniteScroll;
            this.dataSource.loadData({
                rows: rows,
                columns: columns,
                pagination: pagination,
                searchText: searchText,
                serverSideDataCallback: serverSideDataCallback,
                selectable: selectable,
                selectionPrimaryKey: selectionPrimaryKey,
                infiniteScroll: infiniteScroll,
                reload: reload
            });
        };
        DataGridComponent.prototype.updateColumns = function () {
            var specialColumn = {
                sortable: false,
                positionFixed: true
            };
            var checkboxColumn = this.selectable
                ? Object.assign(Object.assign({}, specialColumn), { name: "checkbox" /* Checkbox */, gridTrackSize: '32px' }) : undefined;
            var actionsColumn = this.actionControls.length > 0
                ? Object.assign(Object.assign({}, specialColumn), { name: "actions" /* Actions */, gridTrackSize: this.actionControls.length > 2 ? '40px' : 'minmax(40px, auto)' }) : undefined;
            var columns = __spreadArray(__spreadArray([checkboxColumn], __read(this.columns)), [actionsColumn]).filter(Boolean)
                .map(this.withColumnDefaults);
            this.columns = lodashEs.uniqBy(columns, 'name');
            this.updateColumnNames();
            this.updateGridColumnsSize();
            this.updateThEls();
            this.updateFilteringApplied();
        };
        DataGridComponent.prototype.withColumnDefaults = function (column) {
            var dataType = column.dataType || "text-short" /* TextShort */;
            var headerCSSClassName = column.headerCSSClassName, cellCSSClassName = column.cellCSSClassName;
            return Object.assign(Object.assign({ visible: true, positionFixed: false, resizable: true, sortable: true, sortOrder: '', filterable: false }, column), { dataType: dataType, gridTrackSize: column.gridTrackSize ||
                    "minmax(" + minColumnGridTrackSize + "px, " + ratiosByColumnTypes[dataType] + "fr)", headerCSSClassName: (typeof headerCSSClassName === 'string'
                    ? headerCSSClassName.split(' ')
                    : headerCSSClassName) || [], cellCSSClassName: (typeof cellCSSClassName === 'string' ? cellCSSClassName.split(' ') : cellCSSClassName) ||
                    [] });
        };
        DataGridComponent.prototype.updateColumnNames = function () {
            this.columnNames = this.columns.map(function (_d) {
                var name = _d.name;
                return name;
            });
        };
        DataGridComponent.prototype.setupResizeHandle = function () {
            var _this = this;
            var resizeHandleDrag$ = this.resizeHandleMouseDown$.pipe(operators.takeUntil(this.unsubscribe$), operators.tap(function () { return _this.clearMouseHighlights(); }), operators.mergeMap(function (_d) {
                var event = _d.event, targetColumnName = _d.targetColumnName;
                _this.columns = _this.columns.map(function (column) {
                    if (column.name === targetColumnName) {
                        return Object.assign(Object.assign({}, column), { headerCSSClassName: lodashEs.union(column.headerCSSClassName, ['header--being-resized']) });
                    }
                    return column;
                });
                _this.headerBeingResized = {
                    columnName: targetColumnName,
                    el: event.target.parentNode
                };
                _this.styles = Object.assign(Object.assign({}, _this.styles), { tableCursor: 'col-resize' });
                return _this.resizeHandleContainerMouseMove$.pipe(operators.tap(function () { return _this.clearMouseHighlights(); }), operators.takeUntil(_this.resizeHandleContainerMouseUp$));
            }));
            resizeHandleDrag$.subscribe(function (event) {
                requestAnimationFrame(function () {
                    _this.columns = _this.columns.map(function (column, i) {
                        if (_this.headerBeingResized && column.name === _this.headerBeingResized.columnName) {
                            var scrollContainerDiv = _this.scrollContainer.nativeElement;
                            // Read scrollContainerEl's offset left relative to the document.
                            var horizontalOffset = scrollContainerDiv.getBoundingClientRect().left;
                            // Adjust with the scrollContainerEl horizontal scroll position.
                            var horizontalScrollOffset = scrollContainerDiv.scrollLeft - horizontalOffset;
                            // Read left offset of the resized header.
                            var headerOffsetLeft = _this.headerBeingResized.el.offsetLeft || 0;
                            // Calculate the desired width.
                            var width = horizontalScrollOffset + event.clientX - headerOffsetLeft;
                            return Object.assign(Object.assign({}, column), {
                                // Update the column object with the new size value, enforce our minimum size.
                                gridTrackSize: Math.max(minColumnGridTrackSize, width) + "px"
                            });
                        }
                        // For the other headers which don't have a set width, fix it to their computed width.
                        if (column.gridTrackSize.startsWith('minmax')) {
                            return Object.assign(Object.assign({}, column), {
                                // isn't fixed yet (it would be a px value)
                                gridTrackSize: lodashEs.parseInt(_this.thEls[i].clientWidth) + "px"
                            });
                        }
                        return column;
                    });
                    /*
                     * Update the column sizes.
                     * Note: grid-template-columns sets the width for all columns in one value.
                     */
                    _this.updateGridColumnsSize();
                });
            });
            this.resizeHandleContainerMouseUp$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () {
                if (_this.headerBeingResized) {
                    _this.columns = _this.columns.map(function (column) {
                        if (column.name === _this.headerBeingResized.columnName) {
                            return Object.assign(Object.assign({}, column), { headerCSSClassName: lodashEs.without(column.headerCSSClassName, 'header--being-resized') });
                        }
                        return column;
                    });
                    _this.headerBeingResized = undefined;
                    _this.styles = Object.assign(Object.assign({}, _this.styles), { tableCursor: 'auto' });
                }
            });
        };
        DataGridComponent.prototype.clearMouseHighlights = function () {
            if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }
        };
        DataGridComponent.prototype._getCellRendererSpec = function (_d) {
            var type = _d.type, value = _d.value, row = _d.row, columnName = _d.columnName;
            var column = this.columns.find(function (_d) {
                var name = _d.name;
                return name === columnName;
            });
            var columnRenderer = this.getColumnRenderer(column);
            var rendererTemplate = lodashEs.get(columnRenderer, (type === 'HEADER' ? 'headerCellRendererDef' : 'cellRendererDef') + ".template");
            var cellRendererComponent = column.cellRendererComponent, headerCellRendererComponent = column.headerCellRendererComponent;
            var rendererComponent = type === 'HEADER' ? headerCellRendererComponent : cellRendererComponent;
            return {
                renderer: rendererTemplate || rendererComponent,
                context: {
                    value: value,
                    item: row,
                    property: column
                }
            };
        };
        DataGridComponent.prototype.getColumnRenderer = function (column) {
            return this.columnRenderers.toArray().find(function (_d) {
                var name = _d.name;
                return name === column.name;
            });
        };
        DataGridComponent.prototype.updateFilteringLabelsParams = function (stats) {
            this.filteringLabelsParams = {
                filteredItemsCount: stats.filteredSize,
                allItemsCount: stats.size
            };
        };
        DataGridComponent.prototype.updatePaginationLabelParams = function (stats) {
            this.pagination.nextPage = stats.nextPage;
            var pageFirstItemIdx = (stats.currentPage - 1) * stats.firstPageSize + 1;
            this.paginationLabelParams = {
                pageFirstItemIdx: pageFirstItemIdx,
                pageLastItemIdx: pageFirstItemIdx + (stats.currentPageSize - 1),
                itemsTotal: stats.filteredSize
            };
        };
        DataGridComponent.prototype.createLoadMoreComponent = function (stats) {
            if (this.infiniteScroll &&
                stats &&
                stats.nextPage &&
                (!this.loadMoreComponent || this.recreateLoadMoreComponent)) {
                this.recreateLoadMoreComponent = false;
                this.infiniteScrollContainer.clear();
                var componentFactory = this.cfr.resolveComponentFactory(LoadMoreComponent);
                var componentRef = this.infiniteScrollContainer.createComponent(componentFactory);
                var instance = componentRef.instance;
                instance.useIntersection = this.infiniteScroll === 'auto' || this.infiniteScroll === 'hidden';
                instance.hidden = this.infiniteScroll === 'hidden';
                instance.paging = {
                    nextPage: stats.nextPage,
                    next: this.loadNextPage.bind(this)
                };
                instance.loadNextLabel = this.loadMoreItemsLabel;
                instance.loadingLabel = this.loadingItemsLabel;
                this.loadMoreComponent = instance;
            }
            else if (this.loadMoreComponent && !stats.nextPage) {
                this.loadMoreComponent.paging = {
                    nextPage: null
                };
            }
        };
        DataGridComponent.prototype.scrollToTop = function () {
            if (this.infiniteScroll) {
                this.scrollContainer.nativeElement.scrollTop = 0;
            }
        };
        return DataGridComponent;
    }());
    DataGridComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-data-grid',
                    template: "<div\n  #scroll\n  class=\"table-data-grid-scroll\"\n  [ngClass]=\"{ 'table-data-grid__overlay': (dataSource.loading$ | async) && !loadMoreComponent }\"\n>\n  <div\n    class=\"table-data-grid__loading--wrapper\"\n    *ngIf=\"(dataSource.loading$ | async) && !loadMoreComponent\"\n  >\n    <div class=\"table-data-grid__loading--loader\">\n      <c8y-progress-bar [message]=\"loadingItemsLabel\"></c8y-progress-bar>\n    </div>\n  </div>\n\n  <div *ngIf=\"displayOptions.gridHeader\" class=\"table-data-grid-header separator large-padding\">\n    <h4 [ngClass]=\"{ 'm-r-16': !!title }\">{{ title | translate }}</h4>\n\n    <ng-container *ngIf=\"displayOptions.filter\">\n      <span *ngIf=\"!filteringApplied\">\n        <span class=\"label label-default m-r-4\" translate>No filters</span>\n        <small\n          *ngIf=\"!!filteringLabelsParams.allItemsCount\"\n          class=\"m-r-4\"\n          ngNonBindable\n          translate\n          [translateParams]=\"filteringLabelsParams\"\n        >\n          {{ filteredItemsCount }} of {{ allItemsCount }} items\n        </small>\n      </span>\n      <span *ngIf=\"filteringApplied\">\n        <ng-container *ngIf=\"!!filteringLabelsParams.allItemsCount\">\n          <span class=\"badge badge-info m-r-4\">\n            {{ (dataSource.stats$ | async).filteredSize }}\n          </span>\n          <small ngNonBindable translate [translateParams]=\"filteringLabelsParams\">\n            of {{ allItemsCount }} items\n          </small>\n        </ng-container>\n        <button\n          title=\" {{ 'Clear filters' | translate }}\"\n          class=\"m-l-8 btn btn-xs btn-default m-r-4\"\n          (click)=\"clearFilters()\"\n        >\n          {{ 'Clear filters' | translate }}\n        </button>\n      </span>\n\n      <span class=\"hidden-xs hidden-sm\">\n        <button\n          class=\"btn-clean text-primary\"\n          popover=\"{{ 'Click the column headers to apply filters.' | translate }}\"\n          placement=\"right\"\n          triggers=\"focus\"\n          c8yProductExperience\n          [actionName]=\"'dataGrid:ApplyFilterInfo'\"\n        >\n          <i c8yIcon=\"question-circle-o\"></i>\n        </button>\n      </span>\n\n      <span class=\"hidden-xs hidden-sm\" *ngIf=\"showCounterWarning\">\n        <button\n          class=\"btn-clean text-primary\"\n          popover=\"{{\n            'The counter for the total number of items might be inaccurate.' | translate\n          }}\"\n          placement=\"right\"\n          triggers=\"focus\"\n        >\n          <i c8yIcon=\"warning\"></i>\n        </button>\n      </span>\n    </ng-container>\n\n    <div class=\"flex-item-right\">\n      <div class=\"btnbar flex-row\">\n        <ng-container *ngFor=\"let headerActionControl of headerActionControls\">\n          <ng-container *ngIf=\"headerActionControl | isControlVisible\">\n            <ng-container *ngIf=\"!headerActionControl.template; else customTemplate\">\n              <button\n                title=\"{{ headerActionControl.text | translate }}\"\n                class=\"btnbar-btn btn-link\"\n                (click)=\"headerActionControl.callback()\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:' + headerActionControl.text\"\n                [actionData]=\"{ type: headerActionControl.type }\"\n              >\n                <i c8yIcon=\"headerActionControl.icon\" class=\"m-r-4\"></i>\n                <span>{{ headerActionControl.text | translate }}</span>\n              </button>\n            </ng-container>\n            <ng-template #customTemplate>\n              <ng-container\n                *ngTemplateOutlet=\"\n                  headerActionControl.template;\n                  context: { headerActionControl: headerActionControl }\n                \"\n              ></ng-container>\n            </ng-template>\n          </ng-container>\n        </ng-container>\n\n        <div\n          *ngIf=\"configureColumnsEnabled\"\n          class=\"dropdown\"\n          dropdown\n          #ddConfigureColumns=\"bs-dropdown\"\n          [insideClick]=\"true\"\n          container=\"body\"\n          placement=\"bottom left\"\n        >\n          <button\n            title=\"{{ 'Configure columns' | translate }}\"\n            class=\"btnbar-btn c8y-dropdown\"\n            dropdownToggle\n            c8yProductExperience\n            [actionName]=\"'dataGrid:ConfigureColumns'\"\n          >\n            <i c8yIcon=\"columns\" class=\"m-r-4\"></i>\n            <span>{{ 'Configure columns' | translate }}</span>\n          </button>\n\n          <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n            <li class=\"bg-white\">\n              <div cdkDropList (cdkDropListDropped)=\"onColumnDrop($event)\" class=\"list-group m-0\">\n                <div *ngFor=\"let column of columns\" cdkDrag cdkDragLockAxis=\"y\">\n                  <ng-container *ngIf=\"!column.positionFixed\">\n                    <div class=\"list-group-item draggable-after p-0 a-i-center\">\n                      <label\n                        title=\"{{ (column.header | translate) || column.name }}\"\n                        class=\"c8y-checkbox p-l-16\"\n                      >\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column.visible\"\n                          (change)=\"updateGridColumnsSize(); emitConfigChange()\"\n                          c8yProductExperience\n                          [actionName]=\"\n                            'dataGrid:ConfigureColumns:' + (column.header || column.name)\n                          \"\n                        />\n                        <span></span>\n                        <span>{{ (column.header | translate) || column.name }}</span>\n                      </label>\n                      <button\n                        *ngIf=\"column.custom\"\n                        class=\"btn btn-dot showOnHover max-width-fit a-i-center\"\n                        tooltip=\"{{ 'Remove`column,verb`' | translate }}\"\n                        placement=\"left\"\n                        container=\"body\"\n                        (click)=\"removeCustomColumn(poConfirm, column, ddConfigureColumns)\"\n                      >\n                        <c8y-popover-confirm\n                          [placement]=\"'left'\"\n                          [title]=\"'Confirm removal' | translate\"\n                          [outsideClick]=\"true\"\n                          #poConfirm\n                        ></c8y-popover-confirm>\n                        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n                      </button>\n                    </div>\n                  </ng-container>\n                </div>\n              </div>\n            </li>\n            <li *ngIf=\"onAddCustomColumn?.observers?.length\">\n              <button\n                title=\"{{ 'Add custom column' | translate }}\"\n                class=\"btn btn-add-block m-0\"\n                (click)=\"openCustomColumnModal(); ddConfigureColumns.hide()\"\n              >\n                <i c8yIcon=\"plus-circle\"></i>\n                <span>{{ 'Add custom column' | translate }}</span>\n              </button>\n            </li>\n          </ul>\n        </div>\n\n        <button\n          title=\"{{ 'Reload' | translate }}\"\n          class=\"btnbar-btn btn-link\"\n          [disabled]=\"dataSource.loading$ | async\"\n          (click)=\"clickReload()\"\n        >\n          <i c8yIcon=\"refresh\" class=\"m-r-4\"></i>\n          <span>{{ 'Reload' | translate }}</span>\n        </button>\n\n        <div\n          *ngIf=\"!serverSideDataCallback || showSearch\"\n          class=\"input-group input-group-search m-l-sm-16\"\n        >\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Search\u2026' | translate }}\"\n            [ngModel]=\"searchText\"\n            (input)=\"searchText$.emit($event.target.value)\"\n            c8yProductExperience\n            [actionName]=\"'dataGrid:SearchInput'\"\n          />\n          <div class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"searchText.length === 0\"></i>\n            <i\n              c8yIcon=\"times\"\n              class=\"pointer\"\n              *ngIf=\"searchText.length > 0\"\n              (click)=\"searchText = ''; searchText$.emit('')\"\n              c8yProductExperience\n              [actionName]=\"'dataGrid:SearchInputClear'\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"table-data-grid-header-bulk-actions animated slideInDown fast\"\n      *ngIf=\"selectedItemIds.length !== 0\"\n    >\n      <h4>\n        <span ngNonBindable translate [translateParams]=\"{ count: selectedItemIds.length }\">\n          {{ count }} selected items.\n        </span>\n        <br class=\"visible-xs\" />\n        <small *ngIf=\"!serverSideDataCallback && selectedItemIds.length >= pagination.pageSize\">\n          <a (click)=\"setAllItemsSelected(true)\" class=\"interact\">\n            <span\n              ngNonBindable\n              translate\n              [translateParams]=\"{ count: (dataSource.stats$ | async).filteredSize }\"\n            >\n              Select all {{ count }} items\n            </span>\n          </a>\n        </small>\n      </h4>\n      <div class=\"flex-item-right\">\n        <div class=\"btnbar flex-row\">\n          <ng-container\n            *ngFor=\"let bulkActionControl of bulkActionControls\"\n            [ngSwitch]=\"bulkActionControl.type\"\n          >\n            <ng-container *ngIf=\"bulkActionControl | isControlVisible: selectedItemIds\">\n              <button\n                title=\"{{ 'Export' | translate }}\"\n                *ngSwitchCase=\"builtInActionType.Export\"\n                class=\"btnbar-btn\"\n                (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:BulkExport'\"\n              >\n                <i c8yIcon=\"sign-out\"></i>\n                <span>{{ 'Export' | translate }}</span>\n              </button>\n\n              <button\n                title=\"{{ 'Delete' | translate }}\"\n                *ngSwitchCase=\"builtInActionType.Delete\"\n                class=\"btnbar-btn\"\n                (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:BulkDelete'\"\n              >\n                <i c8yIcon=\"trash\"></i>\n                <span>{{ 'Delete' | translate }}</span>\n              </button>\n\n              <button\n                title=\"{{ bulkActionControl.text | translate }}\"\n                *ngSwitchDefault\n                class=\"btnbar-btn\"\n                (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:Bulk:' + bulkActionControl.text\"\n              >\n                <i c8yIcon=\"{{ bulkActionControl.icon }}\"></i>\n                <span>{{ bulkActionControl.text | translate }}</span>\n              </button>\n            </ng-container>\n          </ng-container>\n\n          <button title=\"{{ 'Cancel' | translate }}\" class=\"btnbar-btn\" (click)=\"cancel()\">\n            <i c8yIcon=\"times\"></i>\n            <span>{{ 'Cancel' | translate }}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <table\n    class=\"table table-hover table-filtered-sorted table-data-grid large-padding\"\n    cdk-table\n    [dataSource]=\"dataSource\"\n    [trackBy]=\"trackByName\"\n    [class.table-striped]=\"displayOptions.striped\"\n    [class.table-bordered]=\"displayOptions.bordered\"\n    [class.table-data-grid-with-checkboxes]=\"selectable\"\n    [class.table-data-grid-with-actions]=\"actionControls.length > 0\"\n    [style.grid-template-columns]=\"styles.gridTemplateColumns\"\n    (mousemove)=\"resizeHandleContainerMouseMove$.emit($event)\"\n    (mouseup)=\"resizeHandleContainerMouseUp$.emit($event)\"\n  >\n    <ng-container\n      *ngFor=\"let column of columns; let i = index; trackBy: trackByName\"\n      [cdkColumnDef]=\"column.name\"\n    >\n      <ng-container [ngSwitch]=\"column.name\">\n        <ng-container *ngSwitchCase=\"'checkbox'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\">\n            <div>\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [checked]=\"currentPageSelectionState.allSelected\"\n                  [indeterminate]=\"\n                    !(\n                      currentPageSelectionState.allSelected ||\n                      currentPageSelectionState.allDeselected\n                    )\n                  \"\n                  (change)=\"setAllItemsInCurrentPageSelected($event.target.checked)\"\n                />\n                <span></span>\n              </label>\n            </div>\n          </th>\n\n          <td cdk-cell *cdkCellDef=\"let row\" data-type=\"icon\">\n            <label class=\"c8y-checkbox\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isItemSelected(row)\"\n                (change)=\"setItemsSelected([row], $event.target.checked)\"\n              />\n              <span></span>\n            </label>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'actions'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\"></th>\n\n          <td cdk-cell *cdkCellDef=\"let row\" data-type=\"icon\">\n            <ng-container *ngIf=\"actionControls.length <= 2\">\n              <ng-container\n                *ngFor=\"let actionControl of actionControls\"\n                [ngSwitch]=\"actionControl.type\"\n              >\n                <ng-container *ngIf=\"actionControl.showIf ? actionControl.showIf(row) : true\">\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Edit\"\n                    class=\"btn btn-icon btn-xs btn-default\"\n                    tooltip=\"{{ 'Edit' | translate }}\"\n                    container=\"body\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    c8yProductExperience\n                    [actionName]=\"'dataGridEntry:Edit'\"\n                  >\n                    <i c8yIcon=\"pencil\"></i>\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Delete\"\n                    class=\"btn btn-dot showOnHover\"\n                    tooltip=\"{{ 'Delete' | translate }}\"\n                    container=\"body\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    c8yProductExperience\n                    [actionName]=\"'dataGridEntry:Delete'\"\n                  >\n                    <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n                  </button>\n                  <button\n                    *ngSwitchDefault\n                    class=\"btn btn-icon btn-xs btn-default showOnHover\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    tooltip=\"{{ (actionControl.icon ? actionControl.text : '') | translate }}\"\n                    container=\"body\"\n                    c8yProductExperience\n                    [actionName]=\"'dataGridEntry:' + actionControl.text\"\n                  >\n                    <i *ngIf=\"actionControl.icon\" c8yIcon=\"{{ actionControl.icon }}\"></i>\n                    <span *ngIf=\"!actionControl.icon\">{{ actionControl.text | translate }}</span>\n                  </button>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n\n            <div [ngClass]=\"{ 'm-l-auto overflow-visible': actionControls.length > 2 }\">\n              <div\n                *ngIf=\"actionControls.length > 2\"\n                class=\"dropdown\"\n                dropdown\n                container=\"body\"\n                placement=\"bottom right\"\n              >\n                <button\n                  title=\"{{ 'Actions' | translate }}\"\n                  class=\"dropdown-toggle c8y-dropdown\"\n                  dropdownToggle\n                  c8yProductExperience\n                  [actionName]=\"'dataGridEntry:Actions'\"\n                >\n                  <i c8yIcon=\"ellipsis-v\"></i>\n                </button>\n                <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                  <li *ngFor=\"let actionControl of actionControls\" [ngSwitch]=\"actionControl.type\">\n                    <ng-container *ngIf=\"actionControl | isControlVisible: row\">\n                      <button\n                        title=\"{{ 'Edit' | translate }}\"\n                        *ngSwitchCase=\"builtInActionType.Edit\"\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:Edit'\"\n                      >\n                        <i c8yIcon=\"pencil\"></i>\n                        {{ 'Edit' | translate }}\n                      </button>\n                      <button\n                        title=\"{{ 'Delete' | translate }}\"\n                        *ngSwitchCase=\"builtInActionType.Delete\"\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:Delete'\"\n                      >\n                        <i c8yIcon=\"trash\"></i>\n                        {{ 'Delete' | translate }}\n                      </button>\n                      <button\n                        title=\"{{ 'Export' | translate }}\"\n                        *ngSwitchCase=\"builtInActionType.Export\"\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:Export'\"\n                      >\n                        <i c8yIcon=\"download\"></i>\n                        {{ 'Export' | translate }}\n                      </button>\n                      <button\n                        title=\"{{ actionControl.text | translate }}\"\n                        *ngSwitchDefault\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:' + actionControl.text\"\n                        [actionData]=\"{ type: actionControl.type }\"\n                      >\n                        <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                        {{ actionControl.text | translate }}\n                      </button>\n                    </ng-container>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <th\n            cdk-header-cell\n            *cdkHeaderCellDef\n            [ngClass]=\"column.headerCSSClassName\"\n            [attr.data-type]=\"column.dataType\"\n            [class.sorted]=\"column.sortOrder\"\n            [class.filtered]=\"column | map: isColumnFilteringApplied\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <div *ngIf=\"!column.filterable\" [title]=\"(column.header | translate) || column.name\">\n              <ng-container\n                *ngIf=\"\n                  [\n                    {\n                      columnName: column.name,\n                      value: (column.header | translate) || column.name\n                    }\n                  ] | map: getHeaderCellRendererSpec:this as cellRendererSpec\n                \"\n              >\n                <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n              </ng-container>\n            </div>\n\n            <!-- isDropDownPlacedRight to be removed when columns are transformed to observables. -->\n            <div\n              *ngIf=\"column.filterable\"\n              class=\"dropdown\"\n              dropdown\n              #dropdown=\"bs-dropdown\"\n              container=\"body\"\n              placement=\"bottom {{ isDropDownPlacedRight(column) ? 'right' : 'left' }} \"\n              [insideClick]=\"true\"\n            >\n              <button\n                class=\"btn-header c8y-dropdown\"\n                dropdownToggle\n                [title]=\"(column.header | translate) || column.name\"\n                c8yProductExperience\n                [actionName]=\"'dataGridFilterColumn:' + (column.header || column.name)\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    [\n                      {\n                        columnName: column.name,\n                        value: (column.header | translate) || column.name\n                      }\n                    ] | map: getHeaderCellRendererSpec:this as cellRendererSpec\n                  \"\n                >\n                  <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n                </ng-container>\n                <i c8yIcon=\"filter\" title=\"{{ 'Filter' | translate }}\"></i>\n              </button>\n\n              <!-- isDropDownPlacedRight to be removed when columns are transformed to observables. -->\n              <ul\n                *dropdownMenu\n                class=\"dropdown-menu\"\n                [ngClass]=\"{ 'dropdown-menu-right-grid': isDropDownPlacedRight(column) }\"\n                (click)=\"$event.stopPropagation()\"\n              >\n                <li class=\"data-grid__dropdown\">\n                  <ng-container\n                    *ngIf=\"\n                      [\n                        {\n                          column: column,\n                          dropdown: dropdown\n                        }\n                      ] | map: getFilteringFormRendererSpec:this as filteringFormRendererSpec\n                    \"\n                  >\n                    <c8y-filtering-form-renderer\n                      [spec]=\"filteringFormRendererSpec\"\n                    ></c8y-filtering-form-renderer>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n\n            <button\n              *ngIf=\"column.sortable\"\n              class=\"btn-sort\"\n              title=\"{{ 'Sort' | translate }}\"\n              (click)=\"changeSortOrder(column.name)\"\n            >\n              <ng-container [ngSwitch]=\"column.sortOrder\">\n                <i *ngSwitchCase=\"'asc'\" c8yIcon=\"long-arrow-up\"></i>\n                <i *ngSwitchCase=\"'desc'\" c8yIcon=\"long-arrow-down\"></i>\n                <i *ngSwitchDefault c8yIcon=\"exchange\"></i>\n              </ng-container>\n            </button>\n\n            <span\n              *ngIf=\"column.resizable\"\n              class=\"resize-handle\"\n              (mousedown)=\"\n                resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column.name })\n              \"\n            ></span>\n          </th>\n\n          <td\n            cdk-cell\n            *cdkCellDef=\"let row\"\n            [ngClass]=\"column.cellCSSClassName\"\n            [attr.data-cell-title]=\"column.header | translate\"\n            [attr.data-type]=\"column.dataType\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <ng-container\n              *ngIf=\"\n                [\n                  {\n                    value: resolveCellValue(row, column.path),\n                    row: row,\n                    columnName: column.name\n                  }\n                ] | map: getCellRendererSpec:this as cellRendererSpec\n              \"\n            >\n              <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n            </ng-container>\n          </td>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"infiniteScrollFooter\">\n      <td cdk-footer-cell *cdkFooterCellDef [style.grid-column]=\"styles.gridInfiniteScrollColumn\">\n        <template #infiniteScrollContainer></template>\n      </td>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"columnNames\"></tr>\n\n    <tr\n      cdk-row\n      *cdkRowDef=\"let row; columns: columnNames\"\n      (mouseover)=\"rowMouseOver.emit(row)\"\n      (mouseleave)=\"rowMouseLeave.emit(row)\"\n      (click)=\"rowClick.emit(row)\"\n    ></tr>\n\n    <ng-container>\n      <tr\n        [ngClass]=\"{ hidden: !infiniteScroll }\"\n        cdk-footer-row\n        *cdkFooterRowDef=\"['infiniteScrollFooter']\"\n      ></tr>\n    </ng-container>\n  </table>\n\n  <div\n    class=\"row m-0 p-t-40 p-b-40\"\n    *ngIf=\"!(dataSource.loading$ | async) && (dataSource.stats$ | async).filteredSize === 0\"\n  >\n    <div class=\"col-md-4 col-md-offset-4\">\n      <ng-content select=\"c8y-ui-empty-state, .c8y-empty-state\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"pagination && !infiniteScroll\" class=\"table-data-grid-footer separator large-padding\">\n    <div class=\"col-sm-4 no-gutter\">\n      <div *ngIf=\"(dataSource.stats$ | async).currentPageSize > 0\" class=\"counter\">\n        <span class=\"text-muted\" ngNonBindable translate [translateParams]=\"paginationLabelParams\">\n          {{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }}\n        </span>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-center\">\n      <div\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > minPossiblePageSize\"\n        class=\"form-group form-inline\"\n      >\n        <label class=\"m-r-4\">{{ 'Items per page' | translate }}</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"pagination.pageSize\"\n            (ngModelChange)=\"\n              updatePagination({ itemsPerPage: $event, page: pagination.currentPage })\n            \"\n          >\n            <option *ngFor=\"let pageSize of possiblePageSizes\" [ngValue]=\"pageSize\">\n              {{ pageSize }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-right\">\n      <pagination\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > 0\"\n        [class.hidden]=\"hidePagination$ | async\"\n        [ngModel]=\"pagination.currentPage\"\n        (pageChanged)=\"updatePagination($event)\"\n        [totalItems]=\"(dataSource.stats$ | async).filteredSize\"\n        [itemsPerPage]=\"pagination.pageSize\"\n        (numPages)=\"totalPagesCount$.next($event)\"\n        [maxSize]=\"5\"\n        [boundaryLinks]=\"false\"\n        previousText=\" \"\n        nextText=\" \"\n      ></pagination>\n    </div>\n  </div>\n</div>\n",
                    host: { class: 'd-contents' }
                },] }
    ];
    DataGridComponent.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: i0.ComponentFactoryResolver },
        { type: GainsightService },
        { type: i1$2.BsModalService },
        { type: AlertService }
    ]; };
    DataGridComponent.propDecorators = {
        title: [{ type: i0.Input }],
        loadMoreItemsLabel: [{ type: i0.Input }],
        loadingItemsLabel: [{ type: i0.Input }],
        showSearch: [{ type: i0.Input }],
        refresh: [{ type: i0.Input }],
        _columns: [{ type: i0.Input, args: ['columns',] }],
        _rows: [{ type: i0.Input, args: ['rows',] }],
        _pagination: [{ type: i0.Input, args: ['pagination',] }],
        _infiniteScroll: [{ type: i0.Input, args: ['infiniteScroll',] }],
        _serverSideDataCallback: [{ type: i0.Input, args: ['serverSideDataCallback',] }],
        _selectable: [{ type: i0.Input, args: ['selectable',] }],
        _selectionPrimaryKey: [{ type: i0.Input, args: ['selectionPrimaryKey',] }],
        _displayOptions: [{ type: i0.Input, args: ['displayOptions',] }],
        _actionControls: [{ type: i0.Input, args: ['actionControls',] }],
        _bulkActionControls: [{ type: i0.Input, args: ['bulkActionControls',] }],
        _headerActionControls: [{ type: i0.Input, args: ['headerActionControls',] }],
        searchText: [{ type: i0.Input }],
        configureColumnsEnabled: [{ type: i0.Input }],
        showCounterWarning: [{ type: i0.Input }],
        rowMouseOver: [{ type: i0.Output }],
        rowMouseLeave: [{ type: i0.Output }],
        rowClick: [{ type: i0.Output }],
        onConfigChange: [{ type: i0.Output }],
        onBeforeFilter: [{ type: i0.Output }],
        onBeforeSearch: [{ type: i0.Output }],
        onFilter: [{ type: i0.Output }],
        itemsSelect: [{ type: i0.Output }],
        onReload: [{ type: i0.Output }],
        onAddCustomColumn: [{ type: i0.Output }],
        onRemoveCustomColumn: [{ type: i0.Output }],
        columnRenderers: [{ type: i0.ContentChildren, args: [ColumnDirective,] }],
        scrollContainer: [{ type: i0.ViewChild, args: ['scroll', { static: true },] }],
        infiniteScrollContainer: [{ type: i0.ViewChild, args: ['infiniteScrollContainer', { static: false, read: i0.ViewContainerRef },] }],
        thRefs: [{ type: i0.ViewChildren, args: [table.CdkHeaderCell, { read: i0.ElementRef },] }]
    };

    var IsControlVisiblePipe = /** @class */ (function () {
        function IsControlVisiblePipe() {
        }
        IsControlVisiblePipe.prototype.transform = function (actionControl, arg) {
            return !actionControl.showIf || actionControl.showIf(arg);
        };
        return IsControlVisiblePipe;
    }());
    IsControlVisiblePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'isControlVisible' },] }
    ];

    var DataGridModule = /** @class */ (function () {
        function DataGridModule() {
        }
        return DataGridModule;
    }());
    DataGridModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        table.CdkTableModule,
                        dragDrop.DragDropModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        CommonModule,
                        FormsModule,
                        ModalModule,
                        dropdown.BsDropdownModule.forRoot(),
                        popover.PopoverModule.forRoot(),
                        tooltip.TooltipModule.forRoot(),
                        pagination.PaginationModule.forRoot(),
                        ProductExperienceModule
                    ],
                    declarations: [
                        CellRendererDefDirective,
                        HeaderCellRendererDefDirective,
                        CellRendererComponent,
                        FilteringFormRendererDefDirective,
                        FilteringFormRendererComponent,
                        ColumnDirective,
                        DataGridComponent,
                        IsControlVisiblePipe,
                        ConfigureCustomColumnComponent
                    ],
                    exports: [
                        CellRendererDefDirective,
                        HeaderCellRendererDefDirective,
                        FilteringFormRendererDefDirective,
                        ColumnDirective,
                        DataGridComponent,
                        IsControlVisiblePipe
                    ],
                    entryComponents: [DataGridComponent]
                },] }
    ];

    var HelpService = /** @class */ (function () {
        function HelpService(translateService, options) {
            this.translateService = translateService;
            this.options = options;
            this.contextHelp = new rxjs.BehaviorSubject(false);
            this.isWarningAlertViewed = false;
            this.SUPPORTED_LANGUAGES = ['en'];
            this.handleContextHelp();
        }
        HelpService.prototype.isSupportedLanguage = function () {
            return this.SUPPORTED_LANGUAGES.indexOf(this.translateService.currentLang) > -1;
        };
        HelpService.prototype.handleContextHelp = function () {
            var option = this.getContextHelpOption();
            if (option) {
                this.contextHelp.next(option);
                return;
            }
            this.contextHelp.next(false);
        };
        HelpService.prototype.getContextHelpOption = function () {
            return this.options.contextHelp;
        };
        return HelpService;
    }());
    HelpService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function HelpService_Factory() { return new HelpService(i0__namespace.ɵɵinject(i2__namespace.TranslateService), i0__namespace.ɵɵinject(OptionsService)); }, token: HelpService, providedIn: "root" });
    HelpService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    HelpService.ctorParameters = function () { return [
        { type: i2.TranslateService },
        { type: OptionsService }
    ]; };

    /**
     * A component which shows a context help in
     * the action bar.
     *
     * @example
     * ```html
     * <c8y-help src="/users-guide/cockpit/#dashboards"></c8y-help>
     * ```
     */
    var HelpComponent = /** @class */ (function () {
        /**
         * @ignore Only private DI
         */
        function HelpComponent(docsService, helpService) {
            this.docsService = docsService;
            this.helpService = helpService;
            /**
             * The source of the documentation. Used to link to the documentation as well as
             * to parse the source to display.
             */
            this.src = '';
            /**
             * Indicates if the help dialog is collapsed.
             */
            this.isCollapsed = true;
            /**
             * The priority where the help icon should be shown in the action bar
             */
            this.priority = Infinity;
            /**
             * A title. Set in open by passing the source.
             */
            this.title = '';
            /**
             * The section heading in the doc which is going to be displayed.
             */
            this.sectionHeading = '';
            /**
             * The section content in the doc which is going to be displayed.
             */
            this.sectionContent = '';
            /**
             * Indicates if the component is loading.
             */
            this.isLoading = true;
            /**
             * Indicates if the component failed loading the source.
             */
            this.hasError = false;
            /**
             * Indicates if a warning should be shown.
             */
            this.showLangWarning = false;
            /**
             * @ignore
             */
            this.isInit = false;
        }
        /**
         * The component is shown by default and therefore breaks e2e test. This is
         * to prevent the visibility on first navigation.
         * @ignore
         */
        HelpComponent.prototype.onCollapsed = function () {
            this.isInit = true;
        };
        /**
         * Builds the URL based on the src. The Base URL can be set in the application options docBaseUrl.
         * @param src The source of the help on the guide.
         * @param index This flag is used to call the index.json content of a guide. For example, "https://www.cumulocity.com/guides/users-guide/cockpit/index.json".
         */
        HelpComponent.prototype.getUrl = function (src, index) {
            if (src === void 0) { src = ''; }
            if (index === void 0) { index = false; }
            var docsUrl;
            try {
                docsUrl =
                    typeof this.helpService.contextHelp.value === 'string'
                        ? new URL(this.docsService.getUrlWithDocsVersion(this.helpService.contextHelp.value))
                        : new URL(this.docsService.getBaseUrl());
            }
            catch (error) {
                docsUrl = new URL(this.docsService.getBaseUrl());
                console.warn(error);
            }
            var _a = __read(src.split('#'), 2), url = _a[0], hashFragment = _a[1];
            this.sectionHeading = hashFragment;
            if (index) {
                src = url + "index.json";
            }
            return "" + docsUrl.href + src;
        };
        /**
         * Toggles the visibility of the help dialog.
         */
        HelpComponent.prototype.toggle = function () {
            if (this.isCollapsed) {
                this.open();
                return;
            }
            this.close();
        };
        /**
         * Closes the help dialog.
         */
        HelpComponent.prototype.close = function () {
            this.isCollapsed = true;
            this.clean();
        };
        /**
         * Opens the help dialog.
         */
        HelpComponent.prototype.open = function () {
            this.isCollapsed = false;
            this.isLoading = true;
            this.requestContent();
            if (!this.icon) {
                this.icon = this.resolveIcon();
            }
        };
        HelpComponent.prototype.requestContent = function () {
            var _this = this;
            var req = new XMLHttpRequest();
            req.onreadystatechange = function () { return _this.render(req); };
            req.addEventListener('load', function () { return _this.render(req); });
            req.open('GET', this.getUrl(this.src, true));
            req.responseType = 'json';
            req.setRequestHeader('Accept', 'text/html');
            req.send();
        };
        HelpComponent.prototype.clean = function () {
            this.title = '';
            this.hasError = false;
            this.sectionContent = '';
        };
        HelpComponent.prototype.resolveIcon = function () {
            try {
                var icon = Array.from(document.querySelector('nav .active i').classList).find(function (classes) { return classes.startsWith('c8y-icon-') || classes.startsWith('dlt-c8y-icon-'); });
                return icon.replace('dlt-c8y-icon-', '').replace('c8y-icon-', 'c8y-');
            }
            catch (ex) {
                return 'life-saver';
            }
        };
        HelpComponent.prototype.render = function (req) {
            if (req.readyState === 4) {
                this.isLoading = false;
                if (req.status === 200) {
                    this.hasError = false;
                    var sectionData = req.response[this.sectionHeading];
                    if (sectionData) {
                        this.title = sectionData.title;
                        this.sectionContent = sectionData.helpcontent;
                    }
                }
                else {
                    this.hasError = true;
                }
            }
        };
        return HelpComponent;
    }());
    HelpComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-help',
                    template: "<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"pull-right\"\n  [priority]=\"priority\"\n  *ngIf=\"!!(helpService.contextHelp | async)\"\n>\n  <button\n    class=\"btn btn-help\"\n    [title]=\"'Open help' | translate\"\n    (click)=\"toggle()\"\n    [attr.aria-expanded]=\"!isCollapsed\"\n    aria-controls=\"collapseHelp\"\n    c8yProductExperience\n    [actionName]=\"isCollapsed ? 'helpOpened' : 'helpClosed'\"\n    [actionData]=\"{ src: src }\"\n  >\n    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<div\n  id=\"collapseHelp\"\n  class=\"c8y-help-drawer\"\n  [collapse]=\"isCollapsed\"\n  [isAnimated]=\"true\"\n  (collapsed)=\"onCollapsed()\"\n>\n  <div [ngClass]=\"{ 'c8y-help-drawer-block': isInit }\" #docOutlet>\n    <div *ngIf=\"isLoading\">\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <div *ngIf=\"!isLoading\">\n      <div class=\"d-flex\">\n        <i\n          [c8yIcon]=\"!hasError ? icon : 'unlink'\"\n          [ngClass]=\"{ 'text-warning': hasError, 'text-muted': !hasError }\"\n          class=\"c8y-icon-duocolor icon-48\"\n        ></i>\n        <div class=\"p-l-16 flex-grow\" *ngIf=\"!hasError\">\n          <div\n            class=\"alert alert-info m-b-16\"\n            *ngIf=\"\n              !helpService.isSupportedLanguage() &&\n              !showLangWarning &&\n              !helpService.isWarningAlertViewed\n            \"\n          >\n            <button\n              class=\"close\"\n              type=\"button\"\n              (click)=\"\n                showLangWarning = !showLangWarning;\n                helpService.isWarningAlertViewed = !helpService.isWarningAlertViewed\n              \"\n            >\n              <span aria-hidden=\"true\">\u00D7</span>\n              <span class=\"sr-only\">Close</span>\n            </button>\n            <p>\n              {{ 'Help content is only available in English.' | translate }}\n            </p>\n          </div>\n          <h4 class=\"text-bold text-primary p-t-16 m-b-16\">\n            {{ title }}\n          </h4>\n          <div id=\"helpContent\" class=\"help-content\" [innerHTML]=\"sectionContent\"></div>\n        </div>\n\n        <div class=\"p-l-16 p-t-16 flex-grow\" *ngIf=\"hasError\">\n          <h4 class=\"text-bold m-b-16\" translate>Sorry, that didn't work</h4>\n          <div class=\"help-content\">\n            <p translate>The content couldn't be loaded.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"c8y-help-drawer-footer\" *ngIf=\"!isLoading && !hasError\">\n    <button\n      class=\"btn btn-default\"\n      (click)=\"toggle()\"\n      [title]=\"'Close help' | translate\"\n      [attr.aria-expanded]=\"!isCollapsed\"\n      aria-controls=\"collapseHelp\"\n      translate\n    >\n      Close\n    </button>\n    <a\n      href=\"{{ hasError ? getUrl() : getUrl(src) }}\"\n      class=\"btn btn-primary\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <span translate *ngIf=\"!hasError\"> Open the <span>User guide`KEEP_ORIGINAL`</span> </span>\n      <span translate *ngIf=\"hasError\"> Check the <span>User guide`KEEP_ORIGINAL`</span> </span>\n    </a>\n  </div>\n</div>\n"
                },] }
    ];
    HelpComponent.ctorParameters = function () { return [
        { type: DocsService },
        { type: HelpService }
    ]; };
    HelpComponent.propDecorators = {
        src: [{ type: i0.Input }],
        isCollapsed: [{ type: i0.Input }],
        priority: [{ type: i0.Input }],
        icon: [{ type: i0.Input }]
    };

    /**
     * Provides components which allow to display help elements
     * inside the app.
     * @exports HelpComponent A component which shows a context help in
     *                        the action bar.
     */
    var HelpModule = /** @class */ (function () {
        function HelpModule() {
        }
        return HelpModule;
    }());
    HelpModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [HelpComponent],
                    imports: [CommonModule, collapse.CollapseModule.forRoot(), ActionBarModule, ProductExperienceModule],
                    exports: [HelpComponent],
                    entryComponents: [HelpComponent],
                    providers: [HelpService]
                },] }
    ];

    var RealtimeButtonComponent = /** @class */ (function () {
        function RealtimeButtonComponent() {
            this.label = gettext('Realtime');
            this.title = gettext('Toggle realtime');
        }
        Object.defineProperty(RealtimeButtonComponent.prototype, "active", {
            get: function () {
                return !!this.service && this.service.active;
            },
            enumerable: false,
            configurable: true
        });
        RealtimeButtonComponent.prototype.toggle = function () {
            if (this.service) {
                this.active ? this.service.stop() : this.service.start();
            }
        };
        return RealtimeButtonComponent;
    }());
    RealtimeButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-realtime-btn',
                    template: "<button\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  title=\"{{ title | translate }}\"\n  (click)=\"toggle()\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"{ active: active, inactive: !active }\"></span>\n  <span>{{ label | translate }}</span>\n</button>\n"
                },] }
    ];
    RealtimeButtonComponent.propDecorators = {
        service: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        title: [{ type: i0.Input }]
    };

    var RealtimeModule = /** @class */ (function () {
        function RealtimeModule() {
        }
        return RealtimeModule;
    }());
    RealtimeModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [RealtimeButtonComponent],
                    exports: [RealtimeButtonComponent]
                },] }
    ];

    exports.ModalSelectionMode = void 0;
    (function (ModalSelectionMode) {
        ModalSelectionMode["SINGLE"] = "single";
        ModalSelectionMode["MULTI"] = "multi";
    })(exports.ModalSelectionMode || (exports.ModalSelectionMode = {}));

    var SelectModalComponent = /** @class */ (function () {
        function SelectModalComponent(bsModalRef) {
            var _this = this;
            this.bsModalRef = bsModalRef;
            this.subTitle = gettext('Select from the list of items matching the device type');
            this.mode = exports.ModalSelectionMode.MULTI;
            this.disableSelected = true;
            this.showFilter = true;
            this.areMoreEntries = false;
            this.result = new i0.EventEmitter();
            this.search = new i0.EventEmitter();
            this.onChoiceUpdated = new i0.EventEmitter();
            this.selected = false;
            this.filterTerm = '';
            this.listItems = [];
            this.debouncer = new rxjs.Subject();
            this._labels = { ok: gettext('Confirm'), cancel: gettext('Cancel') };
            this.debouncer.pipe(operators.debounceTime(500)).subscribe(function (value) {
                _this.search.emit(value);
            });
        }
        Object.defineProperty(SelectModalComponent.prototype, "labels", {
            get: function () {
                return this._labels;
            },
            set: function (labels) {
                var _a = labels || {}, _b = _a.ok, ok = _b === void 0 ? this.labels.ok : _b, _c = _a.cancel, cancel = _c === void 0 ? this.labels.cancel : _c;
                this._labels = { ok: ok, cancel: cancel };
            },
            enumerable: false,
            configurable: true
        });
        SelectModalComponent.prototype.ngOnChanges = function (changes) {
            return __awaiter(this, void 0, void 0, function () {
                var itemsPromise, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(changes.items && changes.items.currentValue)) return [3 /*break*/, 2];
                            itemsPromise = changes.items.currentValue.map(function (item) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, selected;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _a = item;
                                            return [4 /*yield*/, item.options];
                                        case 1:
                                            _a.options = _b.sent();
                                            selected = item.options.find(function (option) { return option.selected; });
                                            if (selected) {
                                                item.selectedId = selected.obj.id;
                                                if (this.disableSelected) {
                                                    item.options.map(function (option) { return lodashEs.assign(option, { disabled: true }); });
                                                }
                                            }
                                            return [2 /*return*/, item];
                                    }
                                });
                            }); });
                            _a = this;
                            return [4 /*yield*/, Promise.all(itemsPromise)];
                        case 1:
                            _a.listItems = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        SelectModalComponent.prototype.updatePipe = function (filterTerm) {
            this.debouncer.next(filterTerm);
            this.filterTerm = filterTerm;
        };
        SelectModalComponent.prototype.updateChoice = function (_a) {
            var item = _a.item, id = _a.id;
            if (this.mode === 'single') {
                this.listItems.map(function (value) { return (value.selectedId = undefined); });
            }
            item.selectedId = id;
            this.selected = true;
            this.onChoiceUpdated.emit(item);
        };
        SelectModalComponent.prototype.dismiss = function () {
            this.bsModalRef.hide();
        };
        SelectModalComponent.prototype.select = function () {
            this.result.emit(this.getOutput());
            this.bsModalRef.hide();
        };
        SelectModalComponent.prototype.ngOnDestroy = function () {
            this.debouncer.complete();
            this.result.complete();
            this.search.complete();
        };
        SelectModalComponent.prototype.getOutput = function () {
            return this.listItems
                .filter(function (item) { return item.selectedId; })
                .map(function (item) { return item.options.find(function (option) { return item.selectedId === option.obj.id; }); })
                .filter(function (option) { return !option.selected; })
                .map(function (selectedOption) { return selectedOption.obj; });
        };
        return SelectModalComponent;
    }());
    SelectModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-select-modal',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <span c8yIcon=\"{{ icon }}\"></span>\n    <h4 class=\"text-uppercase\">\n      {{ title | translate }}\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom min-height-fit\">\n    <p class=\"m-b-8\">{{ subTitle | translate }}</p>\n    <div class=\"row\">\n      <div\n        *ngIf=\"showFilter\"\n        [ngClass]=\"{\n          'col-xs-6': showFilter && additionalFilterTemplate,\n          'col-xs-12': !showFilter || !additionalFilterTemplate\n        }\"\n      >\n        <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n      </div>\n      <div\n        *ngIf=\"additionalFilterTemplate\"\n        [ngClass]=\"{\n          'col-xs-6': showFilter && additionalFilterTemplate,\n          'col-xs-12': !showFilter || !additionalFilterTemplate\n        }\"\n      >\n        <ng-container *ngTemplateOutlet=\"additionalFilterTemplate\"></ng-container>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"panel m-t-8 m-b-8\" *ngIf=\"!items || items.length === 0\">\n        <div class=\"c8y-empty-state text-left\">\n          <h1 c8yIcon=\"{{ icon }} \" class=\"c8y-icon-duocolor\"></h1>\n          <p>{{ (noItemsMessage | translate) ?? 'No items to display.' | translate }}</p>\n        </div>\n      </div>\n    </div>\n    <c8y-list-group>\n      <c8y-li *ngFor=\"let item of listItems | selectModalFilterPipe: filterTerm\">\n        <c8y-li-icon>\n          <i c8yIcon=\"{{ icon }}\"></i>\n        </c8y-li-icon>\n\n        <c8y-li-body class=\"content-flex-30\">\n          <div class=\"col-9\">\n            <div *ngFor=\"let bodyPart of item.body\" [ngClass]=\"bodyPart.class\">\n              <c8y-highlight\n                [title]=\"bodyPart.value\"\n                [pattern]=\"filterTerm\"\n                [text]=\"bodyPart.value\"\n              ></c8y-highlight>\n            </div>\n          </div>\n\n          <div class=\"col-3 text-right\" *ngIf=\"item.additionalInformation\">\n            <div [ngClass]=\"item.additionalInformation.class\">\n              {{ item.additionalInformation.value }}\n            </div>\n          </div>\n        </c8y-li-body>\n\n        <c8y-li-collapse>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let option of item.options\">\n              <c8y-li-radio\n                [name]=\"mode === 'single' ? 'single' : item.groupId\"\n                (onSelect)=\"updateChoice({ item: item, id: option.obj.id })\"\n                [disabled]=\"option.disabled\"\n                [selected]=\"option.selected\"\n              >\n              </c8y-li-radio>\n              <c8y-li-body class=\"content-flex-20\">\n                <div\n                  *ngFor=\"let optionPart of option.body; let i = index\"\n                  [ngClass]=\"optionPart.class\"\n                >\n                  <c8y-highlight [pattern]=\"filterTerm\" [text]=\"optionPart.value\"></c8y-highlight>\n                </div>\n                <ng-container\n                  *ngIf=\"option.template\"\n                  [ngTemplateOutlet]=\"option.template\"\n                  [ngTemplateOutletContext]=\"{ $implicit: item, option: option }\"\n                ></ng-container>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </c8y-li-collapse>\n      </c8y-li>\n      <div *ngIf=\"areMoreEntries\">\n        <div class=\"alert alert-info m-t-16 m-r-8 m-l-8\" translate>\n          Some entries might not be shown. Try narrowing search criteria.\n        </div>\n      </div>\n    </c8y-list-group>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      *ngIf=\"labels.cancel\"\n      class=\"btn btn-default\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"select()\"\n      [disabled]=\"!selected\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    SelectModalComponent.ctorParameters = function () { return [
        { type: i1$2.BsModalRef }
    ]; };
    SelectModalComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        subTitle: [{ type: i0.Input }],
        items: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        disableSelected: [{ type: i0.Input }],
        showFilter: [{ type: i0.Input }],
        additionalFilterTemplate: [{ type: i0.Input }],
        areMoreEntries: [{ type: i0.Input }],
        labels: [{ type: i0.Input }],
        noItemsMessage: [{ type: i0.Input }],
        result: [{ type: i0.Output }],
        search: [{ type: i0.Output }],
        onChoiceUpdated: [{ type: i0.Output }]
    };

    var SelectModalFilterPipe = /** @class */ (function () {
        function SelectModalFilterPipe() {
        }
        SelectModalFilterPipe.prototype.transform = function (items, filterTerm) {
            var _this = this;
            return filterTerm.trim().length === 0
                ? items
                : items.filter(function (item) {
                    var allValues = _this.extractValues(item);
                    var filteredValues = allValues.filter(function (value) { return _this.filterContainString(value, filterTerm); });
                    return filteredValues.length > 0;
                });
        };
        SelectModalFilterPipe.prototype.filterContainString = function (value, filterTerm) {
            var term = filterTerm.toLowerCase().trim();
            return value && value.toLowerCase().indexOf(term) > -1;
        };
        SelectModalFilterPipe.prototype.extractValues = function (item) {
            var _this = this;
            var values = [];
            if (item.value) {
                values.push(item.value);
            }
            Object.keys(item).forEach(function (key) {
                if (Array.isArray(item[key])) {
                    item[key].forEach(function (obj) { return values.concat(_this.extractValues(obj)); });
                }
                if (item[key] instanceof Object) {
                    values = values.concat(_this.extractValues(item[key]));
                }
            });
            return values;
        };
        return SelectModalFilterPipe;
    }());
    SelectModalFilterPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'selectModalFilterPipe',
                },] }
    ];

    var SelectModalModule = /** @class */ (function () {
        function SelectModalModule() {
        }
        return SelectModalModule;
    }());
    SelectModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        dropdown.BsDropdownModule.forRoot(),
                        CommonModule,
                        ListGroupModule,
                        SearchModule,
                        FormsModule
                    ],
                    exports: [
                        SelectModalComponent,
                        SelectModalFilterPipe
                    ],
                    declarations: [
                        SelectModalComponent,
                        SelectModalFilterPipe
                    ]
                },] }
    ];

    var RangeDisplayComponent = /** @class */ (function () {
        function RangeDisplayComponent(sanitizer) {
            this.sanitizer = sanitizer;
            this.config = {};
            this.display = 'full';
        }
        Object.defineProperty(RangeDisplayComponent.prototype, "inlineStyle", {
            get: function () {
                this.config = this.config || {};
                if (!this.config.min) {
                    this.config.min = 0;
                }
                if (!this.config.max) {
                    this.config.max = 100;
                }
                if (this.config.fractionSize !== undefined) {
                    this.config.current = parseFloat(this.config.current.toFixed(this.config.fractionSize));
                }
                return this.sanitizer.bypassSecurityTrustStyle("\n          --range-min: " + this.config.min + ";\n          --range-max: " + this.config.max + ";\n          --full-range: " + (this.config.max - this.config.min) + ";\n          --measurement-target: " + ((this.config.target - this.config.min) * 100) /
                    (this.config.max - this.config.min) + "%;\n          --measurement-current: " + ((this.config.current - this.config.min) * 100) /
                    (this.config.max - this.config.min) + "%;\n          --range-y-min: " + ((this.config.yellowRangeMin - this.config.min) * 100) /
                    (this.config.max - this.config.min) + "%;\n          --range-y-max: " + ((this.config.yellowRangeMax - this.config.min) /
                    (this.config.max - this.config.min)) *
                    100 + "%;\n          --range-r-min: " + ((this.config.redRangeMin - this.config.min) * 100) /
                    (this.config.max - this.config.min) + "%;\n          --range-r-max: " + ((this.config.redRangeMax - this.config.min) /
                    (this.config.max - this.config.min)) *
                    100 + "%;\n        ");
            },
            enumerable: false,
            configurable: true
        });
        RangeDisplayComponent.prototype.checkTarget = function () {
            return (this.config.target !== undefined && this.config.target !== null &&
                (this.config.target >= this.config.min && this.config.target <= this.config.max));
        };
        RangeDisplayComponent.prototype.rulerCalc = function (index) {
            var num = this.config.min + ((this.config.max - this.config.min) / 10) * index;
            if (this.config.fractionSize !== undefined) {
                return parseFloat(num.toFixed(this.config.fractionSize));
            }
            return parseFloat(num.toFixed(2));
        };
        RangeDisplayComponent.prototype.trackByIndex = function (index, el) {
            return index;
        };
        RangeDisplayComponent.prototype.isRedRangeDisplayed = function () {
            var _a = this.config, redRangeMin = _a.redRangeMin, redRangeMax = _a.redRangeMax;
            return this.isRangeDisplayed(redRangeMin, redRangeMax);
        };
        RangeDisplayComponent.prototype.isYellowRangeDisplayed = function () {
            var _a = this.config, yellowRangeMin = _a.yellowRangeMin, yellowRangeMax = _a.yellowRangeMax;
            return this.isRangeDisplayed(yellowRangeMin, yellowRangeMax);
        };
        RangeDisplayComponent.prototype.isRangeDisplayed = function (rangeMin, rangeMax) {
            return rangeMin === 0 || rangeMax === 0 || rangeMin && rangeMax;
        };
        return RangeDisplayComponent;
    }());
    RangeDisplayComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-range-display',
                    template: "<div [ngClass]=\"{ 'range-display--vertical': config.orientation === 'vertical',\n  'range-display--compact' : display ==='compact',\n  'range-display--inline' : display ==='inline' }\" \n  attr.data-label=\"{{ config.unit }}\"\n>\n  <div class=\"range-display\">\n    <div class=\"range-display__range\">\n      <div class=\"range-display__range__unit\">\n        {{ config.unit }}\n      </div>\n      <div *ngIf=\"isYellowRangeDisplayed()\" class=\"range-display__range__min\"></div>\n      <div *ngIf=\"isRedRangeDisplayed()\" class=\"range-display__range__max\"></div>\n      <div\n        *ngIf=\"checkTarget()\"\n        class=\"range-display__range__target\"\n        attr.data-label=\"{{ config.target }} {{ config.unit }}\"\n        title=\"{{ 'Target' | translate }}: {{ config.target }} {{ config.unit }}\"\n      ></div>\n      <div\n        *ngIf=\"\n          config.current != undefined &&\n          config.current >= config.min &&\n          config.current <= config.max\n        \"\n        class=\"range-display__range__current\"\n        attr.data-label=\"{{ config.current }} {{ config.unit }} &#xa; {{ config.time | c8yDate }}\"\n        title=\"{{ 'Current' | translate }}: {{ config.current }} {{ config.unit }} | {{\n          config.time | c8yDate\n        }}\"\n      ></div>\n    </div>\n    <div class=\"range-display__ruler\">\n      <div\n        *ngFor=\"let x of [].constructor(10); let index = index; trackBy: trackByIndex\"\n        attr.data-label=\"{{ rulerCalc(index) }}\"\n        class=\"range-display__tick\"\n      ></div>\n      <div attr.data-label=\"{{ config.max || 100 | number }}\" class=\"range-display__tick\"></div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    RangeDisplayComponent.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };
    RangeDisplayComponent.propDecorators = {
        config: [{ type: i0.Input }],
        display: [{ type: i0.Input }],
        inlineStyle: [{ type: i0.HostBinding, args: ['attr.style',] }]
    };

    /**
     * The angular module definition for a range-display.
     * @exports RangeDisplayModule
     */
    var RangeDisplayModule = /** @class */ (function () {
        function RangeDisplayModule() {
        }
        return RangeDisplayModule;
    }());
    RangeDisplayModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CommonModule],
                    exports: [RangeDisplayComponent],
                    declarations: [RangeDisplayComponent],
                    entryComponents: [RangeDisplayComponent]
                },] }
    ];

    var ListDisplaySwitchComponent = /** @class */ (function () {
        function ListDisplaySwitchComponent(location) {
            var _this = this;
            this.location = location;
            this.filterPipe = rxjs.pipe(operators.tap());
            this.onListClassChange = new i0.EventEmitter();
            this.DISPLAY_OPTIONS = [
                {
                    name: 'AUTO',
                    value: 'auto',
                    label: gettext('Auto'),
                    default: true,
                    getListClass: function () {
                        var option = _this._listLength > _this.AUTO_GRID_ITEMS_LIMIT
                            ? _this.DISPLAY_OPTIONS.find(function (opt) { return opt.name === 'LIST'; })
                            : _this.DISPLAY_OPTIONS.find(function (opt) { return opt.name === 'GRID'; });
                        return option.getListClass();
                    }
                },
                {
                    name: 'GRID',
                    value: 'grid',
                    label: gettext('Grid'),
                    getListClass: function () { return 'interact-grid'; }
                },
                {
                    name: 'LIST',
                    value: 'list',
                    label: gettext('List'),
                    getListClass: function () { return 'interact-list'; }
                }
            ];
            this.AUTO_GRID_ITEMS_LIMIT = 12;
        }
        Object.defineProperty(ListDisplaySwitchComponent.prototype, "listLength", {
            set: function (val) {
                this._listLength = val;
                this.loadSelectedOption();
            },
            enumerable: false,
            configurable: true
        });
        ListDisplaySwitchComponent.prototype.ngOnInit = function () {
            this.loadSelectedOption();
        };
        ListDisplaySwitchComponent.prototype.onOptionSelect = function (option) {
            var localStorageKey = this.getLocalStorageKey();
            if (option.default) {
                localStorage.removeItem(localStorageKey);
            }
            else {
                localStorage.setItem(localStorageKey, option.value);
            }
            this.loadSelectedOption();
        };
        ListDisplaySwitchComponent.prototype.loadSelectedOption = function () {
            this.selectedOption = this.getLocalStorageOption() || this.getDefaultOption();
            this.onListClassChange.emit(this.selectedOption.getListClass());
        };
        ListDisplaySwitchComponent.prototype.getLocalStorageOption = function () {
            var _this = this;
            return this.DISPLAY_OPTIONS.find(function (option) { return option.value === localStorage.getItem(_this.getLocalStorageKey()); });
        };
        ListDisplaySwitchComponent.prototype.getDefaultOption = function () {
            return this.DISPLAY_OPTIONS.find(function (option) { return option.default; });
        };
        ListDisplaySwitchComponent.prototype.getLocalStorageKey = function () {
            return "list-display-option[" + this.getListKey() + "]";
        };
        ListDisplaySwitchComponent.prototype.getListKey = function () {
            return this.listKey || this.location.path();
        };
        return ListDisplaySwitchComponent;
    }());
    ListDisplaySwitchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-list-display-switch',
                    template: "<div class=\"form-group\">\n  <label class=\"m-r-8\">\n    {{ 'Display as' | translate }}\n  </label>\n  <div class=\"c8y-select-wrapper\">\n    <select\n      class=\"form-control\"\n      [ngModel]=\"selectedOption\"\n      (ngModelChange)=\"onOptionSelect($event)\"\n    >\n      <option *ngFor=\"let option of DISPLAY_OPTIONS\" [ngValue]=\"option\">{{\n        option.label | translate\n      }}</option></select\n    >\n    <span></span>\n  </div>\n</div>\n"
                },] }
    ];
    ListDisplaySwitchComponent.ctorParameters = function () { return [
        { type: common.Location }
    ]; };
    ListDisplaySwitchComponent.propDecorators = {
        listKey: [{ type: i0.Input }],
        listLength: [{ type: i0.Input, args: ['listLength',] }],
        filterPipe: [{ type: i0.Input }],
        onListClassChange: [{ type: i0.Output }]
    };

    /**
     * The angular module definition for the list display switcher.
     * It allows to switch between a list and a grid view.
     * @exports ListDisplaySwitchComponent
     */
    var ListDisplaySwitchModule = /** @class */ (function () {
        function ListDisplaySwitchModule() {
        }
        return ListDisplaySwitchModule;
    }());
    ListDisplaySwitchModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ListDisplaySwitchComponent],
                    imports: [CommonModule, forms.FormsModule],
                    exports: [ListDisplaySwitchComponent]
                },] }
    ];

    var WizardBodyComponent = /** @class */ (function () {
        function WizardBodyComponent(wizard, wizardService) {
            this.wizard = wizard;
            this.wizardService = wizardService;
        }
        WizardBodyComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.wizardService.bodyTemplate$.next({
                    template: _this.bodyContent,
                    wizardId: _this.wizard.id
                });
            });
        };
        return WizardBodyComponent;
    }());
    WizardBodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-wizard-body',
                    template: "\n    <ng-template #bodyContent>\n      <div class=\"modal-inner-scroll animated fadeIn\">\n          <ng-content></ng-content>\n      </div>\n    </ng-template>\n  "
                },] }
    ];
    WizardBodyComponent.ctorParameters = function () { return [
        { type: WizardComponent },
        { type: WizardService }
    ]; };
    WizardBodyComponent.propDecorators = {
        bodyContent: [{ type: i0.ViewChild, args: ['bodyContent', { static: true },] }]
    };

    var WizardFooterComponent = /** @class */ (function () {
        function WizardFooterComponent(wizard, wizardService) {
            this.wizard = wizard;
            this.wizardService = wizardService;
        }
        WizardFooterComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.wizardService.footerTemplate$.next({
                    template: _this.footerContent,
                    wizardId: _this.wizard.id
                });
            });
        };
        return WizardFooterComponent;
    }());
    WizardFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-wizard-footer',
                    template: "\n    <ng-template #footerContent>\n      <div class=\"modal-footer\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  "
                },] }
    ];
    WizardFooterComponent.ctorParameters = function () { return [
        { type: WizardComponent },
        { type: WizardService }
    ]; };
    WizardFooterComponent.propDecorators = {
        footerContent: [{ type: i0.ViewChild, args: ['footerContent', { static: true },] }]
    };

    var WizardHeaderComponent = /** @class */ (function () {
        function WizardHeaderComponent(wizard, wizardService) {
            this.wizard = wizard;
            this.wizardService = wizardService;
        }
        WizardHeaderComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.wizardService.headerTemplate$.next({
                    template: _this.headerContent,
                    wizardId: _this.wizard.id
                });
            });
        };
        return WizardHeaderComponent;
    }());
    WizardHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-wizard-header',
                    template: "\n    <ng-template #headerContent>\n      <div class=\"modal-header dialog-header animated fadeIn\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  "
                },] }
    ];
    WizardHeaderComponent.ctorParameters = function () { return [
        { type: WizardComponent },
        { type: WizardService }
    ]; };
    WizardHeaderComponent.propDecorators = {
        headerContent: [{ type: i0.ViewChild, args: ['headerContent', { static: true },] }]
    };

    var WizardOutletComponent = /** @class */ (function () {
        function WizardOutletComponent(wizardComponent, router, c8yWizardService, resolver) {
            this.wizardComponent = wizardComponent;
            this.router = router;
            this.c8yWizardService = c8yWizardService;
            this.resolver = resolver;
            /**
             * The event that is emitted when the wizard entry is clicked.
             */
            this.onSelect = new i0.EventEmitter();
            /**
             * The initial state to be assigned to the created component.
             */
            this.initialState = {};
            /**
             * List of wizard entries.
             */
            this.entries = [];
            /**
             * @ignore
             */
            this.showList = true;
            /**
             * @ignore
             */
            this.destroy$ = new rxjs.Subject();
        }
        WizardOutletComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.c8yWizardService
                .getEntriesListById(this.wizardComponent.id)
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (entries) {
                _this.container.clear();
                _this.entries = entries;
                _this.onEntriesLoaded();
            });
            this.wizardComponent.onReset.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                if (_this.componentInstance) {
                    _this.componentInstance = undefined;
                    _this.container.clear();
                    _this.showList = true;
                }
            });
        };
        /**
         * Handles the wizard entry, if the entry contains a path, the user will be redirected to it.
         * Otherwise, an attempt will be made to create a dynamic component provided in the entry.
         * @param entry Wizard menu entry.
         */
        WizardOutletComponent.prototype.handleEntry = function (entry) {
            if (entry === void 0) { entry = {}; }
            var path = entry.path, component = entry.component;
            if (path) {
                this.handlePath(path);
                return;
            }
            if (component) {
                this.handleComponent(component);
                this.onSelect.emit(entry);
            }
        };
        WizardOutletComponent.prototype.ngOnDestroy = function () {
            if (this.componentInstance) {
                this.container.clear();
            }
            this.destroy$.next(true);
            this.destroy$.unsubscribe();
        };
        WizardOutletComponent.prototype.onEntriesLoaded = function () {
            var _a = __read(this.entries, 1), firstEntry = _a[0];
            var isSingleEntry = this.entries.length === 1;
            var shouldRedirectToPath = firstEntry && !!firstEntry.path;
            var shouldOmitListOfEntries = isSingleEntry && !shouldRedirectToPath;
            if (shouldOmitListOfEntries) {
                this.handleEntry(firstEntry);
            }
        };
        WizardOutletComponent.prototype.handlePath = function (path) {
            this.router.navigateByUrl(path);
            if (this.wizardComponent) {
                this.wizardComponent.close();
            }
        };
        WizardOutletComponent.prototype.handleComponent = function (component) {
            this.showList = false;
            var factory = this.resolver.resolveComponentFactory(component);
            var componentInstance = this.container.createComponent(factory);
            Object.assign(componentInstance.instance, this.initialState);
            this.componentInstance = componentInstance;
        };
        return WizardOutletComponent;
    }());
    WizardOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-wizard-outlet',
                    template: "<ng-container>\n  <div class=\"modal-inner-scroll animated fadeIn\" *ngIf=\"showList\">\n    <p class=\"p-16 text-center text-medium separator-bottom\">\n      <span translate>Select method</span>\n    </p>\n    <div class=\"list-group list-group-links\" *ngIf=\"entries.length > 0; else emptyState\">\n      <button\n        *ngFor=\"let entry of entries\"\n        type=\"button\"\n        class=\"list-group-item d-flex a-i-center p-t-8 p-b-8\"\n        (click)=\"handleEntry(entry)\"\n      >\n        <div class=\"list-item-icon\">\n          <i [c8yIcon]=\"entry.c8yIcon || 'cogs'\"></i>\n        </div>\n        <div title=\"{{ entry.name | translate }}\" class=\"list-item-body text-truncate\">\n          {{ entry.name | translate }}\n        </div>\n      </button>\n    </div>\n\n    <ng-template #emptyState>\n      <div class=\"c8y-empty-state\">\n        <p>{{ 'No options available.' | translate }}</p>\n      </div>\n    </ng-template>\n  </div>\n</ng-container>\n<template #container [hidden]=\"showList\"></template>\n"
                },] }
    ];
    WizardOutletComponent.ctorParameters = function () { return [
        { type: WizardComponent, decorators: [{ type: i0.Host }] },
        { type: i1.Router },
        { type: WizardService },
        { type: i0.ComponentFactoryResolver }
    ]; };
    WizardOutletComponent.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef },] }],
        onSelect: [{ type: i0.Output }],
        initialState: [{ type: i0.Input }]
    };

    var WizardModule = /** @class */ (function () {
        function WizardModule() {
        }
        return WizardModule;
    }());
    WizardModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1$2.ModalModule, common.CommonModule, CommonModule],
                    exports: [
                        WizardComponent,
                        WizardOutletComponent,
                        WizardHeaderComponent,
                        WizardBodyComponent,
                        WizardFooterComponent
                    ],
                    declarations: [
                        WizardComponent,
                        WizardOutletComponent,
                        WizardHeaderComponent,
                        WizardBodyComponent,
                        WizardFooterComponent
                    ],
                    entryComponents: [
                        WizardComponent,
                        WizardHeaderComponent,
                        WizardBodyComponent,
                        WizardFooterComponent
                    ],
                    providers: [WizardService, i1$2.BsModalRef]
                },] }
    ];

    var AssetTypesModule = /** @class */ (function () {
        function AssetTypesModule() {
        }
        return AssetTypesModule;
    }());
    AssetTypesModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [AssetTypesService]
                },] }
    ];

    var CoreModule = /** @class */ (function () {
        function CoreModule() {
        }
        CoreModule.forRoot = function () {
            return {
                ngModule: CoreModule,
                providers: __spreadArray(__spreadArray([], __read(CommonModule.providers())), __read(LoginModule.providers()))
            };
        };
        return CoreModule;
    }());
    CoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [
                        ActionBarModule,
                        ActionModule,
                        AlertModule,
                        AuditLogModule,
                        BootstrapModule,
                        BreadcrumbModule,
                        CommonModule,
                        DataGridModule,
                        DropAreaModule,
                        HeaderModule,
                        LoginModule,
                        ModalModule,
                        NavigatorModule,
                        AuthenticationModule,
                        SearchModule,
                        SelectModule,
                        TabsModule,
                        UserModule,
                        FormsModule,
                        DeviceStatusModule,
                        DocsModule,
                        StepperModule,
                        DynamicComponentModule,
                        DashboardModule,
                        ListGroupModule,
                        SelectModalModule,
                        FilePickerModule,
                        DatePickerModule,
                        ProductExperienceModule,
                        HelpModule,
                        RealtimeModule,
                        RangeDisplayModule,
                        ListDisplaySwitchModule,
                        WizardModule,
                        PluginsModule,
                        DynamicFormsModule,
                        PropertiesListModule,
                        AssetTypesModule,
                        DateTimePickerModule
                    ]
                },] }
    ];

    var QuickLinkComponent = /** @class */ (function () {
        function QuickLinkComponent() {
            this.classes = '';
        }
        QuickLinkComponent.prototype.ngOnInit = function () {
            this.classes = "card-block text-center " + lodashEs.kebabCase(this.label);
        };
        return QuickLinkComponent;
    }());
    QuickLinkComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-quick-link',
                    template: "<div [class]=\"classes\" title=\"{{ label | translate }}\">\r\n  <h1 class=\"text-gray-darker\">\r\n    <i [c8yIcon]=\"icon\" class=\"c8y-icon-duocolor\"></i>\r\n  </h1>\r\n  <p class=\"text-muted\">{{ label | translate }}</p>\r\n</div>\r\n"
                },] }
    ];
    QuickLinkComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        label: [{ type: i0.Input }]
    };

    var QuickLinkModule = /** @class */ (function () {
        function QuickLinkModule() {
        }
        return QuickLinkModule;
    }());
    QuickLinkModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [QuickLinkComponent],
                    imports: [CoreModule],
                    exports: [QuickLinkComponent],
                    providers: []
                },] }
    ];

    var HOOK_DYNAMIC_PROVIDER_CONFIG = new i0.InjectionToken('Dynamic Provider Config');

    var ProviderConfigurationNodeFactory = /** @class */ (function () {
        function ProviderConfigurationNodeFactory(config, injector) {
            this.injector = injector;
            this.config = lodashEs.flatten(config);
        }
        ProviderConfigurationNodeFactory.prototype.get = function () {
            var _this = this;
            if (!this.config || !this.config.length) {
                return;
            }
            if (!this.nodes) {
                var canActivate = this.config
                    .map(this.getGuards.bind(this))
                    .map(this.checkCanActivate.bind(this));
                return rxjs.forkJoin(canActivate).pipe(operators.map(function (canActivateResult) { return _this.config
                    .map(function (c, index) { return canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined; })
                    .filter(function (el) { return !!el; }); }), operators.tap(function (nodes) { return (_this.nodes = nodes); }));
            }
            return this.nodes;
        };
        ProviderConfigurationNodeFactory.prototype.checkCanActivate = function (ca) {
            if (!!ca && ca.length) {
                var canActivateResult = ca
                    .map(function (canActivate) { return canActivate.canActivate(undefined, undefined); })
                    .map(toObservable);
                return rxjs.forkJoin(canActivateResult).pipe(operators.map(function (caResult) { return caResult.reduce(function (acc, curr) { return acc && curr; }); }));
            }
            return rxjs.of(true);
        };
        ProviderConfigurationNodeFactory.prototype.getGuards = function (c) {
            var _this = this;
            var result = [];
            if (c.tab && c.tab.canActivate && c.tab.canActivate.length) {
                result = __spreadArray(__spreadArray([], __read(result)), __read(c.tab.canActivate.map(function (ca) { return _this.injector.get(ca); })));
            }
            if (c.navigation.canActivate && c.navigation.canActivate.length) {
                result = __spreadArray(__spreadArray([], __read(result)), __read(c.navigation.canActivate.map(function (ca) { return _this.injector.get(ca); })));
            }
            return result;
        };
        return ProviderConfigurationNodeFactory;
    }());
    ProviderConfigurationNodeFactory.decorators = [
        { type: i0.Injectable }
    ];
    ProviderConfigurationNodeFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
        { type: i0.Injector }
    ]; };

    var ProviderConfigurationService = /** @class */ (function (_super_1) {
        __extends(ProviderConfigurationService, _super_1);
        function ProviderConfigurationService(client, activatedRoute) {
            var _this = _super_1.call(this, client) || this;
            _this.baseUrl = lodashEs.get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.baseUrl');
            _this.listUrl = lodashEs.get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.listUrl');
            return _this;
        }
        ProviderConfigurationService.prototype.detail = function () {
            var _super = Object.create(null, {
                detail: { get: function () { return _super_1.prototype.detail; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, _super.detail.call(this, ProviderConfigurationService.NO_DETAIL_ID)];
                });
            });
        };
        ProviderConfigurationService.prototype.update = function (entity) {
            var _super = Object.create(null, {
                update: { get: function () { return _super_1.prototype.update; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, _super.update.call(this, entity)];
                });
            });
        };
        ProviderConfigurationService.prototype.delete = function () {
            var _super = Object.create(null, {
                delete: { get: function () { return _super_1.prototype.delete; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, _super.delete.call(this, ProviderConfigurationService.NO_DETAIL_ID)];
                });
            });
        };
        /** There is a single provider configuration per tenant and detail URL is not needed */
        ProviderConfigurationService.prototype.getDetailUrl = function (_) {
            return this.listUrl;
        };
        return ProviderConfigurationService;
    }(client.Service));
    ProviderConfigurationService.NO_DETAIL_ID = null;
    ProviderConfigurationService.decorators = [
        { type: i0.Injectable }
    ];
    ProviderConfigurationService.ctorParameters = function () { return [
        { type: client.FetchClient },
        { type: i1.ActivatedRoute }
    ]; };

    var ProviderDefinitionsService = /** @class */ (function (_super_1) {
        __extends(ProviderDefinitionsService, _super_1);
        function ProviderDefinitionsService(client, activatedRoute) {
            var _this = _super_1.call(this, client) || this;
            _this.baseUrl = lodashEs.get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.baseUrl');
            _this.listUrl = lodashEs.get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.listUrl');
            return _this;
        }
        ProviderDefinitionsService.prototype.list = function () {
            var _super = Object.create(null, {
                list: { get: function () { return _super_1.prototype.list; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, _super.list.call(this)];
                });
            });
        };
        return ProviderDefinitionsService;
    }(client.Service));
    ProviderDefinitionsService.decorators = [
        { type: i0.Injectable }
    ];
    ProviderDefinitionsService.ctorParameters = function () { return [
        { type: client.FetchClient },
        { type: i1.ActivatedRoute }
    ]; };

    var ProviderConfigurationComponent = /** @class */ (function () {
        function ProviderConfigurationComponent(permissions, activatedRoute, modalService, alertService, providerDefinitionsService, providerConfigurationService, jsonschema) {
            var _this = this;
            this.permissions = permissions;
            this.activatedRoute = activatedRoute;
            this.modalService = modalService;
            this.alertService = alertService;
            this.providerDefinitionsService = providerDefinitionsService;
            this.providerConfigurationService = providerConfigurationService;
            this.jsonschema = jsonschema;
            this.layout$ = this.activatedRoute.data.pipe(operators.map(function (config) { return config.layout; }), operators.tap(function (layout) { return (_this.layout = layout); }), operators.tap(function (layout) {
                _this.options.formState.disabled = !_this.permissions.hasAllRoles(layout.saveRoles || []);
                _this.beforeSaveHook = layout.beforeSaveHook;
            }));
            this.allRoles$ = this.layout$.pipe(operators.map(function (layout) { return __spreadArray(__spreadArray([], __read((layout.deleteRoles || []))), __read((layout.saveRoles || []))); }));
            this.changeProvider$ = new rxjs.BehaviorSubject(null);
            this.providerInput$ = new rxjs.BehaviorSubject('');
            this.form = new forms.FormGroup({});
            this.fields = [];
            this.options = {
                formState: {
                    disabled: false
                }
            };
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.updatedConfiguration$ = new rxjs.Subject();
        }
        ProviderConfigurationComponent.prototype.ngOnInit = function () {
            var _this = this;
            var allProviders$ = rxjs.from(this.providerDefinitionsService.list()).pipe(operators.map(function (result) { return result.data; }), operators.shareReplay(1));
            this.providers$ = rxjs.combineLatest(allProviders$, this.providerInput$).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), providers = _b[0], input = _b[1];
                return input
                    ? providers.filter(function (el) { return el.displayName.toLowerCase().indexOf(input.toLowerCase()) >= 0; })
                    : providers;
            }), operators.shareReplay(1));
            this.configuration$ = rxjs.merge(this.updatedConfiguration$, this.reload$.pipe(operators.switchMap(function () { return rxjs.from(_this.providerConfigurationService.detail()).pipe(operators.catchError(function () { return rxjs.of({}); })); }), operators.map(function (result) { return result.data; }))).pipe(operators.map(this.removeEncryptedValues), operators.shareReplay(1));
            this.selectedProvider$ = rxjs.combineLatest(allProviders$, this.configuration$, this.changeProvider$).pipe(operators.tap(function (_a) {
                var _b = __read(_a, 3), _ = _b[0], configuration = _b[1], newProvider = _b[2];
                return (_this.model = newProvider
                    ? lodashEs.pick(_this.model, 'sms.senderName', 'sms.senderAddress')
                    : configuration);
            }), operators.map(function (_a) {
                var _b = __read(_a, 3), providers = _b[0], configuration = _b[1], newProvider = _b[2];
                return newProvider ||
                    lodashEs.find(providers, function (provider) { return lodashEs.get(configuration, 'provider') === provider.id; });
            }), operators.tap(function (provider) {
                if (provider) {
                    var config = _this.jsonschema.toFieldConfig(lodashEs.get(provider, 'schema'));
                    if (config.fieldGroup) {
                        config.fieldGroup.forEach(function (fieldConfig) {
                            core["ɵdefineHiddenProp"](fieldConfig, '_keyPath', {
                                key: fieldConfig.key,
                                path: [fieldConfig.key]
                            });
                            fieldConfig.expressionProperties = {
                                'templateOptions.disabled': 'formState.disabled'
                            };
                        });
                    }
                    _this.fields = [config];
                    _this.form = new forms.FormGroup({});
                }
            }), operators.shareReplay(1));
        };
        ProviderConfigurationComponent.prototype.saveProviderConfiguration = function () {
            return __awaiter(this, void 0, void 0, function () {
                var modelToSave, _a, res, err_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!!this.beforeSaveHook) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.beforeSaveHook(this.model, this.fields)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = this.model;
                            _b.label = 3;
                        case 3:
                            modelToSave = _a;
                            lodashEs.forOwn(modelToSave, function (value, key) {
                                if (Array.isArray(value)) {
                                    modelToSave[key] = value.filter(function (item) { return !!item || item === 0; });
                                }
                            });
                            _b.label = 4;
                        case 4:
                            _b.trys.push([4, 6, , 7]);
                            return [4 /*yield*/, this.providerConfigurationService.update(modelToSave)];
                        case 5:
                            res = _b.sent();
                            this.changeProvider$.next(null);
                            this.updatedConfiguration$.next(res.data);
                            this.alertService.success(this.layout.configurationUpdatedSuccessMsg);
                            this.form.markAsPristine();
                            return [3 /*break*/, 7];
                        case 6:
                            err_1 = _b.sent();
                            this.alertService.addServerFailure(err_1);
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        ProviderConfigurationComponent.prototype.deleteProviderConfiguration = function () {
            return __awaiter(this, void 0, void 0, function () {
                var err_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.modalService.confirm(this.layout.deleteConfigurationModalTitle, this.layout.deleteConfigurationModalBody, exports.Status.DANGER, {
                                    ok: this.layout.deleteConfigurationModalOkBtnLabel,
                                    cancel: this.layout.deleteConfigurationModalCancelBtnLabel
                                })];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.providerConfigurationService.delete()];
                        case 2:
                            _a.sent();
                            this.reload$.next();
                            this.alertService.success(this.layout.configurationDeletedSuccessMsg);
                            return [3 /*break*/, 4];
                        case 3:
                            err_2 = _a.sent();
                            if (err_2) {
                                this.alertService.addServerFailure(err_2);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ProviderConfigurationComponent.prototype.removeEncryptedValues = function (configuration) {
            return lodashEs.mapValues(configuration, function (value) { return (value === '<<Encrypted>>' ? undefined : value); });
        };
        return ProviderConfigurationComponent;
    }());
    ProviderConfigurationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-sms-gateway',
                    template: "<c8y-title>\n  {{ (layout$ | async)?.pageTitle | translate }}\n</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-md-8 col-xs-12\">\n    <form class=\"card card--fullpage\" (ngSubmit)=\"saveProviderConfiguration()\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">\n          {{ (layout$ | async)?.cardTitle | translate }}\n        </h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\">\n          <p *ngIf=\"!!(layout$ | async)?.description\" class=\"m-b-8\">\n            {{ (layout$ | async)?.description | translate }}\n          </p>\n          <c8y-form-group>\n            <label for=\"providerName\">{{ (layout$ | async)?.providerName | translate }}</label>\n            <c8y-typeahead\n              [disabled]=\"!permissions.hasAllRoles((layout$ | async)?.saveRoles || [])\"\n              [ngModel]=\"selectedProvider$ | async\"\n              [displayProperty]=\"'displayName'\"\n              name=\"providerName\"\n              placeholder=\"{{ (layout$ | async)?.providerNamePlaceholder | translate }}\"\n              (onSearch)=\"providerInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n              [container]=\"'body'\"\n            >\n              <c8y-li\n                *ngFor=\"let provider of providers$ | async\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"changeProvider$.next(provider); providerInput$.next('')\"\n                [active]=\"(selectedProvider$ | async) === provider\"\n              >\n                <c8y-highlight\n                  [text]=\"provider.displayName || '--'\"\n                  [pattern]=\"providerInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"(layout$ | async)?.providerNameNoMatchesHint | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <formly-form\n            *ngIf=\"selectedProvider$ | async\"\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            [options]=\"options\"\n          ></formly-form>\n        </div>\n      </div>\n      <div class=\"card-footer separator\" *c8yIfAllowed=\"allRoles$ | async; allowAny\">\n        <button\n          *c8yIfAllowed=\"(layout$ | async)?.deleteRoles\"\n          class=\"btn btn-default\"\n          type=\"button\"\n          (click)=\"deleteProviderConfiguration()\"\n          [disabled]=\"\n            !(configuration$ | async)?.provider && !(configuration$ | async)?.providerName\n          \"\n          title=\"{{ (layout$ | async)?.deleteBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async)?.deleteBtnLabel | translate }}\n        </button>\n        <button\n          *c8yIfAllowed=\"(layout$ | async)?.saveRoles\"\n          class=\"btn btn-primary\"\n          type=\"submit\"\n          [disabled]=\"form.invalid || form.pristine\"\n          title=\"{{ (layout$ | async)?.saveBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async)?.saveBtnLabel | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n",
                    providers: [ProviderConfigurationService, ProviderDefinitionsService]
                },] }
    ];
    ProviderConfigurationComponent.ctorParameters = function () { return [
        { type: Permissions },
        { type: i1.ActivatedRoute },
        { type: ModalService },
        { type: AlertService },
        { type: ProviderDefinitionsService },
        { type: ProviderConfigurationService },
        { type: C8yJSONSchema }
    ]; };

    var ProviderConfigurationRouteFactory = /** @class */ (function () {
        function ProviderConfigurationRouteFactory(config) {
            this.config = lodashEs.flatten(config);
        }
        ProviderConfigurationRouteFactory.prototype.get = function () {
            var navigationRoutes = lodashEs.uniqBy(this.config.filter(function (c) { return c.tab; }), 'navigation.path').map(function (c) {
                return {
                    path: c.navigation.path,
                    component: ConditionalTabsOutletComponent
                };
            });
            var navigationWithTabsRoutes = this.config.map(function (c) { return ({
                path: c.tab
                    ? c.navigation.path.replace(/^\/|\/$/g, '') + "/" + c.tab.path.replace(/^\/|\/$/g, '')
                    : c.navigation.path,
                component: ProviderConfigurationComponent,
                canActivate: __spreadArray(__spreadArray([], __read((c.navigation.canActivate || []))), __read((lodashEs.get(c, 'tab.canActivate') || []))).filter(function (g) { return !!g; }),
                data: {
                    layout: c.layout,
                    endpoint: c.endpoint
                }
            }); });
            return __spreadArray(__spreadArray([], __read(navigationRoutes)), __read(navigationWithTabsRoutes));
        };
        return ProviderConfigurationRouteFactory;
    }());
    ProviderConfigurationRouteFactory.decorators = [
        { type: i0.Injectable }
    ];
    ProviderConfigurationRouteFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] }
    ]; };

    var ProviderConfigurationTabFactory = /** @class */ (function () {
        function ProviderConfigurationTabFactory(config, router, injector) {
            this.router = router;
            this.injector = injector;
            this.config = lodashEs.flatten(config);
        }
        ProviderConfigurationTabFactory.prototype.get = function () {
            var _this = this;
            if (!this.config || !this.config.length) {
                return;
            }
            var configForRoute = this.config.find(function (c) { return c.tab
                ? _this.router.url === '/' + _this.getNodeTabPath(c.navigation.path, c.tab.path) ||
                    _this.router.url.startsWith('/' + c.navigation.path.replace(/^\/|\/$/g, ''))
                : false; });
            var filteredRoutes = configForRoute
                ? this.config.filter(function (c) { return c.navigation.path.replace(/^\/|\/$/g, '') ===
                    configForRoute.navigation.path.replace(/^\/|\/$/g, '') && c.tab; })
                : [];
            var canActivate = filteredRoutes
                .map(function (c) { return c.tab.canActivate && c.tab.canActivate.length
                ? c.tab.canActivate.map(function (ca) { return _this.injector.get(ca); })
                : undefined; })
                .map(this.checkCanActivate.bind(this));
            return canActivate.length > 0
                ? rxjs.forkJoin(canActivate).pipe(operators.map(function (canActivateResult) { return filteredRoutes
                    .map(function (c, index) {
                    var tab = Object.assign(Object.assign({}, c.tab), { path: _this.getNodeTabPath(c.navigation.path, c.tab.path) });
                    return canActivateResult[index] ? tab : undefined;
                })
                    .filter(function (el) { return !!el; }); }))
                : [];
        };
        ProviderConfigurationTabFactory.prototype.checkCanActivate = function (ca) {
            if (!!ca && ca.length) {
                var canActivateResult = ca
                    .map(function (canActivate) { return canActivate.canActivate(undefined, undefined); })
                    .map(toObservable);
                return rxjs.forkJoin(canActivateResult).pipe(operators.map(function (caResult) { return caResult.reduce(function (acc, curr) { return acc && curr; }); }));
            }
            return rxjs.of(true);
        };
        ProviderConfigurationTabFactory.prototype.getNodeTabPath = function (nodePath, tabPath) {
            return nodePath.replace(/^\/|\/$/g, '') + "/" + tabPath.replace(/^\/|\/$/g, '');
        };
        return ProviderConfigurationTabFactory;
    }());
    ProviderConfigurationTabFactory.decorators = [
        { type: i0.Injectable }
    ];
    ProviderConfigurationTabFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
        { type: i1.Router },
        { type: i0.Injector }
    ]; };

    var ProviderConfigurationModule = /** @class */ (function () {
        function ProviderConfigurationModule() {
        }
        ProviderConfigurationModule.config = function (config) {
            return {
                ngModule: ProviderConfigurationModule,
                providers: [{ provide: HOOK_DYNAMIC_PROVIDER_CONFIG, useValue: config, multi: true }]
            };
        };
        return ProviderConfigurationModule;
    }());
    ProviderConfigurationModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ProviderConfigurationComponent],
                    exports: [ProviderConfigurationComponent],
                    imports: [CoreModule, CommonModule, DynamicFormsModule],
                    entryComponents: [ProviderConfigurationComponent],
                    providers: [
                        {
                            provide: HOOK_ROUTE,
                            useClass: i0.forwardRef(function () { return ProviderConfigurationRouteFactory; }),
                            multi: true
                        },
                        {
                            provide: HOOK_NAVIGATOR_NODES,
                            useClass: i0.forwardRef(function () { return ProviderConfigurationNodeFactory; }),
                            multi: true
                        },
                        {
                            provide: HOOK_TABS,
                            useClass: i0.forwardRef(function () { return ProviderConfigurationTabFactory; }),
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * A wrapper class for handling realtime notifications in RxJS fashion.
     */
    var RealtimeService = /** @class */ (function () {
        function RealtimeService(realtimeSubject) {
            this.realtimeSubject = realtimeSubject;
            this.isActive = new rxjs.BehaviorSubject(true);
        }
        Object.defineProperty(RealtimeService.prototype, "active", {
            /**
             * A flag displaying if realtime notifications are currently active.
             */
            get: function () {
                return this.isActive.value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Get an Observable of all realtime notifications.
         *
         * @param {string | number | IIdentified} entityOrId Entity object or id
         *
         * @returns An [[Observable]] of notifications wrapped as [[RealtimeMessage]]
         */
        RealtimeService.prototype.onAll$ = function (entityOrId) {
            var subject$ = this.realtimeSubject.getObservableForChannel(this.getChannel(entityOrId));
            return this.isActive.pipe(operators.switchMap(function (active) { return (active ? subject$ : rxjs.NEVER); }));
        };
        /**
         * Subscribes again all realtime channels with active observers.
         */
        RealtimeService.prototype.start = function () {
            if (!this.active) {
                this.isActive.next(true);
            }
        };
        /**
         * Stops realtime notifications and unsubscribes all realtime channels.
         */
        RealtimeService.prototype.stop = function () {
            if (this.active) {
                this.isActive.next(false);
            }
        };
        /**
         * Get an Observable of all CREATE realtime notifications.
         *
         * @param {string | number | IIdentified} entityOrId Entity object or id
         *
         * @returns An [[Observable]] of newly created entity objects.
         */
        RealtimeService.prototype.onCreate$ = function (entityOrId) {
            return this.onAll$(entityOrId).pipe(operators.filter(function (msg) { return msg.realtimeAction === 'CREATE'; }), operators.map(function (msg) { return msg.data; }));
        };
        /**
         * Get an Observable of all UPDATE realtime notifications.
         *
         * @param {string | number | IIdentified} entityOrId Entity object or id
         *
         * @returns An [[Observable]] of updated entity objects.
         */
        RealtimeService.prototype.onUpdate$ = function (entityOrId) {
            return this.onAll$(entityOrId).pipe(operators.filter(function (msg) { return msg.realtimeAction === 'UPDATE'; }), operators.map(function (msg) { return msg.data; }));
        };
        /**
         * Get an Observable of all DELETE realtime notifications.
         *
         * @param {string | number | IIdentified} entityOrId Entity object or id
         *
         * @returns An [[Observable]] of deleted entity objects.
         */
        RealtimeService.prototype.onDelete$ = function (entityOrId) {
            return this.onAll$(entityOrId).pipe(operators.filter(function (msg) { return msg.realtimeAction === 'DELETE'; }), operators.map(function (msg) { return coercion.coerceNumberProperty(msg.data); }));
        };
        RealtimeService.prototype.getIdString = function (reference) {
            var id;
            if (typeof reference === 'object') {
                id = reference.id;
            }
            else {
                id = reference;
            }
            return String(id);
        };
        RealtimeService.prototype.getChannel = function (entityOrId) {
            return entityOrId ? this.channel().replace('*', this.getIdString(entityOrId)) : this.channel();
        };
        return RealtimeService;
    }());

    /**
     * Service (providedIn root) that ensures to only create a single realtime subscription for each channel
     */
    var RealtimeSubjectService = /** @class */ (function () {
        function RealtimeSubjectService(realtime) {
            this.realtime = realtime;
            this.subjects$ = new Map();
        }
        RealtimeSubjectService.prototype.getObservableForChannel = function (channel) {
            if (this.subjects$.has(channel)) {
                return this.subjects$.get(channel);
            }
            var observable$ = this.createObservableForChannel(channel, this.realtime);
            var sharedObservable$ = observable$.pipe(operators.share());
            this.subjects$.set(channel, sharedObservable$);
            return sharedObservable$;
        };
        RealtimeSubjectService.prototype.createObservableForChannel = function (channel, realtime) {
            return new rxjs.Observable(function (observer) {
                var realtimeSubscription = realtime.subscribe(channel, function (msg) {
                    var data = {
                        channel: msg.channel,
                        data: msg.data.data,
                        id: msg.id,
                        realtimeAction: msg.data.realtimeAction
                    };
                    observer.next(data);
                });
                return {
                    unsubscribe: function () {
                        realtime.unsubscribe(realtimeSubscription);
                    }
                };
            });
        };
        return RealtimeSubjectService;
    }());
    RealtimeSubjectService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RealtimeSubjectService_Factory() { return new RealtimeSubjectService(i0__namespace.ɵɵinject(i1__namespace$4.Realtime)); }, token: RealtimeSubjectService, providedIn: "root" });
    RealtimeSubjectService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    RealtimeSubjectService.ctorParameters = function () { return [
        { type: client.Realtime }
    ]; };

    var AlarmRealtimeService = /** @class */ (function (_super) {
        __extends(AlarmRealtimeService, _super);
        function AlarmRealtimeService(realtimeSubject) {
            var _this = _super.call(this, realtimeSubject) || this;
            _this.realtimeSubject = realtimeSubject;
            return _this;
        }
        AlarmRealtimeService.prototype.channel = function () {
            return '/alarms/*';
        };
        return AlarmRealtimeService;
    }(RealtimeService));
    AlarmRealtimeService.decorators = [
        { type: i0.Injectable }
    ];
    AlarmRealtimeService.ctorParameters = function () { return [
        { type: RealtimeSubjectService }
    ]; };

    var EventRealtimeService = /** @class */ (function (_super) {
        __extends(EventRealtimeService, _super);
        function EventRealtimeService(realtimeSubject) {
            var _this = _super.call(this, realtimeSubject) || this;
            _this.realtimeSubject = realtimeSubject;
            return _this;
        }
        EventRealtimeService.prototype.channel = function () {
            return '/events/*';
        };
        return EventRealtimeService;
    }(RealtimeService));
    EventRealtimeService.decorators = [
        { type: i0.Injectable }
    ];
    EventRealtimeService.ctorParameters = function () { return [
        { type: RealtimeSubjectService }
    ]; };

    var ManagedObjectRealtimeService = /** @class */ (function (_super) {
        __extends(ManagedObjectRealtimeService, _super);
        function ManagedObjectRealtimeService(realtimeSubject) {
            var _this = _super.call(this, realtimeSubject) || this;
            _this.realtimeSubject = realtimeSubject;
            return _this;
        }
        /**
         * Get an Observable of all CREATE realtime notifications.
         *
         * @returns An [[Observable]] of newly created entity objects.
         */
        ManagedObjectRealtimeService.prototype.onCreate$ = function () {
            return _super.prototype.onCreate$.call(this);
        };
        ManagedObjectRealtimeService.prototype.channel = function () {
            return '/managedobjects/*';
        };
        return ManagedObjectRealtimeService;
    }(RealtimeService));
    ManagedObjectRealtimeService.decorators = [
        { type: i0.Injectable }
    ];
    ManagedObjectRealtimeService.ctorParameters = function () { return [
        { type: RealtimeSubjectService }
    ]; };

    var MeasurementRealtimeService = /** @class */ (function (_super) {
        __extends(MeasurementRealtimeService, _super);
        function MeasurementRealtimeService(realtimeSubject, measurementService) {
            var _this = _super.call(this, realtimeSubject) || this;
            _this.realtimeSubject = realtimeSubject;
            _this.measurementService = measurementService;
            return _this;
        }
        /**
         * Get an Observable of all measurements filtered by fragment and series.
         *
         * @param {string} fragment Measurement fragment
         *
         * @param {string} series Measurement series
         *
         * @param {string | number | IIdentified} entityOrId Entity object or id
         *
         * @returns An [[Observable]] of newly created entity objects.
         */
        MeasurementRealtimeService.prototype.onCreateOfSpecificMeasurement$ = function (fragment, series, entityOrId) {
            return this.onCreate$(entityOrId).pipe(operators.filter(function (msg) { return msg[fragment] && msg[fragment][series]; }));
        };
        /**
         * Get an Observable of all measurements filtered by fragment and series.
         * Combines the latest value from measurement API and future values via realtime API.
         *
         * @param {string} fragment Measurement fragment
         *
         * @param {string} series Measurement series
         *
         * @param {string | number | IIdentified} entityOrId Entity object or id
         *
         * @param {number} pageSize Number of measurements to initially retrieve from backend
         *
         * @param {boolean} emitNullIfInitialValuesWereNotFound Flag that if set to true will initially emit value of null in case no measurement could have been retrieved from backend
         *
         * @returns An [[Observable]] of newly created entity objects.
         */
        MeasurementRealtimeService.prototype.latestValueOfSpecificMeasurement$ = function (fragment, series, entityOrId, pageSize, emitNullIfInitialValuesWereNotFound) {
            if (pageSize === void 0) { pageSize = 1; }
            if (emitNullIfInitialValuesWereNotFound === void 0) { emitNullIfInitialValuesWereNotFound = false; }
            var realtime$ = this.onCreateOfSpecificMeasurement$(fragment, series, entityOrId);
            var lastMeasurement$ = this.lastMeasurement$(fragment, series, entityOrId, pageSize, emitNullIfInitialValuesWereNotFound);
            return rxjs.merge(lastMeasurement$, realtime$);
        };
        MeasurementRealtimeService.prototype.lastMeasurement$ = function (fragment, series, entityOrId, pageSize, emitNullIfInitialValuesWereNotFound) {
            if (emitNullIfInitialValuesWereNotFound === void 0) { emitNullIfInitialValuesWereNotFound = false; }
            return rxjs.from(this.measurementService.list({
                valueFragmentSeries: series,
                valueFragmentType: fragment,
                source: this.getIdString(entityOrId),
                dateFrom: '1970-01-01',
                revert: true,
                pageSize: pageSize
            })).pipe(
            // emit null in case no value could have been retrieved so we are able to note that in certain cases.
            operators.map(function (result) { return !emitNullIfInitialValuesWereNotFound || result.data.length ? result.data : [null]; }), 
            // reverse required, so that measurements are received ordered by time (ascending).
            // from ensures values are sent as single measurements and not a measurement array.
            operators.switchMap(function (result) { return rxjs.from(result.reverse()); }));
        };
        MeasurementRealtimeService.prototype.channel = function () {
            return '/measurements/*';
        };
        return MeasurementRealtimeService;
    }(RealtimeService));
    MeasurementRealtimeService.decorators = [
        { type: i0.Injectable }
    ];
    MeasurementRealtimeService.ctorParameters = function () { return [
        { type: RealtimeSubjectService },
        { type: client.MeasurementService }
    ]; };

    /**
     * A service for handling bulk operation realtime notifications in RxJS fashion.
     */
    var OperationBulkRealtimeService = /** @class */ (function (_super) {
        __extends(OperationBulkRealtimeService, _super);
        function OperationBulkRealtimeService(realtimeSubject) {
            var _this = _super.call(this, realtimeSubject) || this;
            _this.realtimeSubject = realtimeSubject;
            return _this;
        }
        /**
         * Get an Observable of all CREATE realtime notifications.
         *
         * @returns An [[Observable]] of newly created entity objects.
         */
        OperationBulkRealtimeService.prototype.onCreate$ = function () {
            return _super.prototype.onCreate$.call(this);
        };
        OperationBulkRealtimeService.prototype.channel = function () {
            return '/bulkOperations/*';
        };
        return OperationBulkRealtimeService;
    }(RealtimeService));
    OperationBulkRealtimeService.decorators = [
        { type: i0.Injectable }
    ];
    OperationBulkRealtimeService.ctorParameters = function () { return [
        { type: RealtimeSubjectService }
    ]; };

    /**
     * A service for handling bulk operation realtime notifications in RxJS fashion.
     */
    var OperationRealtimeService = /** @class */ (function (_super) {
        __extends(OperationRealtimeService, _super);
        function OperationRealtimeService(realtimeSubject) {
            var _this = _super.call(this, realtimeSubject) || this;
            _this.realtimeSubject = realtimeSubject;
            return _this;
        }
        OperationRealtimeService.prototype.channel = function () {
            return '/operations/*';
        };
        return OperationRealtimeService;
    }(RealtimeService));
    OperationRealtimeService.decorators = [
        { type: i0.Injectable }
    ];
    OperationRealtimeService.ctorParameters = function () { return [
        { type: RealtimeSubjectService }
    ]; };

    /**
     * A service for handling device bootstrap realtime notifications in RxJS fashion.
     */
    var DeviceBootstrapRealtimeService = /** @class */ (function (_super) {
        __extends(DeviceBootstrapRealtimeService, _super);
        function DeviceBootstrapRealtimeService(realtimeSubject) {
            var _this = _super.call(this, realtimeSubject) || this;
            _this.realtimeSubject = realtimeSubject;
            return _this;
        }
        DeviceBootstrapRealtimeService.prototype.channel = function () {
            return '/bootstrap';
        };
        return DeviceBootstrapRealtimeService;
    }(RealtimeService));
    DeviceBootstrapRealtimeService.decorators = [
        { type: i0.Injectable }
    ];
    DeviceBootstrapRealtimeService.ctorParameters = function () { return [
        { type: RealtimeSubjectService }
    ]; };

    var RealtimeMessage = /** @class */ (function () {
        function RealtimeMessage() {
        }
        return RealtimeMessage;
    }());

    /**
     * Barrel to export /core
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ActionBarComponent = ActionBarComponent;
    exports.ActionBarItemComponent = ActionBarItemComponent;
    exports.ActionBarModule = ActionBarModule;
    exports.ActionBarService = ActionBarService;
    exports.ActionComponent = ActionComponent;
    exports.ActionModule = ActionModule;
    exports.ActionOutletComponent = ActionOutletComponent;
    exports.ActionService = ActionService;
    exports.AlarmRealtimeService = AlarmRealtimeService;
    exports.AlertComponent = AlertComponent;
    exports.AlertDetailsComponent = AlertDetailsComponent;
    exports.AlertModule = AlertModule;
    exports.AlertOutletComponent = AlertOutletComponent;
    exports.AlertService = AlertService;
    exports.AlertTextComponent = AlertTextComponent;
    exports.AppIconComponent = AppIconComponent;
    exports.AppStateService = AppStateService;
    exports.AppSwitcherComponent = AppSwitcherComponent;
    exports.ApplicationOptions = ApplicationOptions;
    exports.AssetTypesModule = AssetTypesModule;
    exports.AssetTypesService = AssetTypesService;
    exports.AuthenticationModule = AuthenticationModule;
    exports.BootstrapComponent = BootstrapComponent;
    exports.BootstrapModule = BootstrapModule;
    exports.BreadcrumbComponent = BreadcrumbComponent;
    exports.BreadcrumbItemComponent = BreadcrumbItemComponent;
    exports.BreadcrumbModule = BreadcrumbModule;
    exports.BreadcrumbOutletComponent = BreadcrumbOutletComponent;
    exports.BreadcrumbService = BreadcrumbService;
    exports.BytesPipe = BytesPipe;
    exports.C8yJSONSchema = C8yJSONSchema;
    exports.C8yStepper = C8yStepper;
    exports.C8yStepperButtons = C8yStepperButtons;
    exports.C8yStepperIcon = C8yStepperIcon;
    exports.C8yStepperProgress = C8yStepperProgress;
    exports.C8yTranslateDirective = C8yTranslateDirective;
    exports.C8yTranslateModule = C8yTranslateModule;
    exports.C8yTranslatePipe = C8yTranslatePipe;
    exports.C8yValidators = C8yValidators;
    exports.CachedLocaleDictionaryService = CachedLocaleDictionaryService;
    exports.CellRendererComponent = CellRendererComponent;
    exports.CellRendererContext = CellRendererContext;
    exports.CellRendererDefDirective = CellRendererDefDirective;
    exports.ChangePasswordComponent = ChangePasswordComponent;
    exports.ColorService = ColorService;
    exports.ColumnDirective = ColumnDirective;
    exports.CommonModule = CommonModule;
    exports.ConditionalTabsOutletComponent = ConditionalTabsOutletComponent;
    exports.ConfigureCustomColumnComponent = ConfigureCustomColumnComponent;
    exports.ConfirmModalComponent = ConfirmModalComponent;
    exports.ContextRouteComponent = ContextRouteComponent;
    exports.ContextRouteGuard = ContextRouteGuard;
    exports.ContextRouteService = ContextRouteService;
    exports.CookieBannerComponent = CookieBannerComponent;
    exports.CoreModule = CoreModule;
    exports.CredentialsComponent = CredentialsComponent;
    exports.DashboardChildActionComponent = DashboardChildActionComponent;
    exports.DashboardChildChange = DashboardChildChange;
    exports.DashboardChildComponent = DashboardChildComponent;
    exports.DashboardChildTitleComponent = DashboardChildTitleComponent;
    exports.DashboardComponent = DashboardComponent;
    exports.DashboardModule = DashboardModule;
    exports.DataGridComponent = DataGridComponent;
    exports.DataGridModule = DataGridModule;
    exports.DatePickerComponent = DatePickerComponent;
    exports.DatePickerModule = DatePickerModule;
    exports.DatePipe = DatePipe;
    exports.DateTimePickerComponent = DateTimePickerComponent;
    exports.DateTimePickerModule = DateTimePickerModule;
    exports.DefaultValidationDirective = DefaultValidationDirective;
    exports.DeviceBootstrapRealtimeService = DeviceBootstrapRealtimeService;
    exports.DeviceStatusComponent = DeviceStatusComponent;
    exports.DeviceStatusModule = DeviceStatusModule;
    exports.DocsModule = DocsModule;
    exports.DocsService = DocsService;
    exports.DropAreaComponent = DropAreaComponent;
    exports.DropAreaModule = DropAreaModule;
    exports.DropdownDirectionDirective = DropdownDirectionDirective;
    exports.DynamicComponentComponent = DynamicComponentComponent;
    exports.DynamicComponentModule = DynamicComponentModule;
    exports.DynamicComponentService = DynamicComponentService;
    exports.DynamicFormsModule = DynamicFormsModule;
    exports.ES_MAX_TIME_MILLISECONDS = ES_MAX_TIME_MILLISECONDS;
    exports.EmailsValidatorDirective = EmailsValidatorDirective;
    exports.EmptyComponent = EmptyComponent;
    exports.EmptyStateComponent = EmptyStateComponent;
    exports.EventRealtimeService = EventRealtimeService;
    exports.FilePickerComponent = FilePickerComponent;
    exports.FilePickerModule = FilePickerModule;
    exports.FilesService = FilesService;
    exports.FilterInputComponent = FilterInputComponent;
    exports.FilteringFormRendererComponent = FilteringFormRendererComponent;
    exports.FilteringFormRendererContext = FilteringFormRendererContext;
    exports.FilteringFormRendererDefDirective = FilteringFormRendererDefDirective;
    exports.ForOfDirective = ForOfDirective;
    exports.FormGroupComponent = FormGroupComponent;
    exports.FormsModule = FormsModule;
    exports.GainsightService = GainsightService;
    exports.GridDataSource = GridDataSource;
    exports.GuideDocsComponent = GuideDocsComponent;
    exports.GuideHrefDirective = GuideHrefDirective;
    exports.HOOK_ACTION = HOOK_ACTION;
    exports.HOOK_ACTION_BAR = HOOK_ACTION_BAR;
    exports.HOOK_BREADCRUMB = HOOK_BREADCRUMB;
    exports.HOOK_COMPONENTS = HOOK_COMPONENTS;
    exports.HOOK_DOCS = HOOK_DOCS;
    exports.HOOK_DYNAMIC_PROVIDER_CONFIG = HOOK_DYNAMIC_PROVIDER_CONFIG;
    exports.HOOK_NAVIGATOR_NODES = HOOK_NAVIGATOR_NODES;
    exports.HOOK_ONCE_ROUTE = HOOK_ONCE_ROUTE;
    exports.HOOK_OPTIONS = HOOK_OPTIONS;
    exports.HOOK_PATTERN_MESSAGES = HOOK_PATTERN_MESSAGES;
    exports.HOOK_ROUTE = HOOK_ROUTE;
    exports.HOOK_SEARCH = HOOK_SEARCH;
    exports.HOOK_STEPPER = HOOK_STEPPER;
    exports.HOOK_TABS = HOOK_TABS;
    exports.HOOK_WIZARD = HOOK_WIZARD;
    exports.HeaderBarComponent = HeaderBarComponent;
    exports.HeaderCellRendererDefDirective = HeaderCellRendererDefDirective;
    exports.HeaderModule = HeaderModule;
    exports.HeaderService = HeaderService;
    exports.HelpComponent = HelpComponent;
    exports.HelpModule = HelpModule;
    exports.HighlightComponent = HighlightComponent;
    exports.HumanizeAppNamePipe = HumanizeAppNamePipe;
    exports.HumanizePipe = HumanizePipe;
    exports.I18nModule = I18nModule$1;
    exports.ICONS = ICONS;
    exports.ICON_LIST = ICON_LIST;
    exports.IconDirective = IconDirective;
    exports.IfAllowedDirective = IfAllowedDirective;
    exports.InputGroupListComponent = InputGroupListComponent;
    exports.InputGroupListContainerDirective = InputGroupListContainerDirective;
    exports.InventorySearchService = InventorySearchService;
    exports.IpRangeInputListComponent = IpRangeInputListComponent;
    exports.IsControlVisiblePipe = IsControlVisiblePipe;
    exports.JsonValidationPrettifierDirective = JsonValidationPrettifierDirective;
    exports.LANGUAGES = LANGUAGES;
    exports.LOCALE_PATH = LOCALE_PATH;
    exports.ListGroupComponent = ListGroupComponent;
    exports.ListGroupModule = ListGroupModule;
    exports.ListItemActionComponent = ListItemActionComponent;
    exports.ListItemBodyComponent = ListItemBodyComponent;
    exports.ListItemCheckboxComponent = ListItemCheckboxComponent;
    exports.ListItemCollapseComponent = ListItemCollapseComponent;
    exports.ListItemComponent = ListItemComponent;
    exports.ListItemDragHandleComponent = ListItemDragHandleComponent;
    exports.ListItemFooterComponent = ListItemFooterComponent;
    exports.ListItemIconComponent = ListItemIconComponent;
    exports.ListItemRadioComponent = ListItemRadioComponent;
    exports.ListItemTimelineComponent = ListItemTimelineComponent;
    exports.LoadMoreComponent = LoadMoreComponent;
    exports.LoadingComponent = LoadingComponent;
    exports.LoginComponent = LoginComponent;
    exports.LoginModule = LoginModule;
    exports.LoginService = LoginService;
    exports.MAX_PAGE_SIZE = MAX_PAGE_SIZE;
    exports.MESSAGES = MESSAGES;
    exports.ManagedObjectRealtimeService = ManagedObjectRealtimeService;
    exports.MapFunctionPipe = MapFunctionPipe;
    exports.MaxValidationDirective = MaxValidationDirective;
    exports.MeasurementRealtimeService = MeasurementRealtimeService;
    exports.MessageDirective = MessageDirective;
    exports.MessagesComponent = MessagesComponent;
    exports.MinValidationDirective = MinValidationDirective;
    exports.MissingTranslationCustomHandler = MissingTranslationCustomHandler;
    exports.ModalComponent = ModalComponent;
    exports.ModalModule = ModalModule;
    exports.ModalService = ModalService;
    exports.NEEDED_ROLE_FOR_SETUP = NEEDED_ROLE_FOR_SETUP;
    exports.NUMBER_FORMAT_REGEXP = NUMBER_FORMAT_REGEXP;
    exports.NavigatorIconComponent = NavigatorIconComponent;
    exports.NavigatorModule = NavigatorModule;
    exports.NavigatorNode = NavigatorNode;
    exports.NavigatorNodeComponent = NavigatorNodeComponent;
    exports.NavigatorNodeRoot = NavigatorNodeRoot;
    exports.NavigatorOutletComponent = NavigatorOutletComponent;
    exports.NavigatorService = NavigatorService;
    exports.NewPasswordComponent = NewPasswordComponent;
    exports.NumberPipe = NumberPipe;
    exports.OperationBulkRealtimeService = OperationBulkRealtimeService;
    exports.OperationRealtimeService = OperationRealtimeService;
    exports.OperationResultComponent = OperationResultComponent;
    exports.OptionsService = OptionsService;
    exports.OutletDirective = OutletDirective;
    exports.PasswordCheckListComponent = PasswordCheckListComponent;
    exports.PasswordConfirm = PasswordConfirm;
    exports.PasswordConfirmModalComponent = PasswordConfirmModalComponent;
    exports.PasswordService = PasswordService;
    exports.PasswordStrengthCheckerService = PasswordStrengthCheckerService;
    exports.PasswordStrengthComponent = PasswordStrengthComponent;
    exports.PasswordStrengthValidatorDirective = PasswordStrengthValidatorDirective;
    exports.PatternMessagesService = PatternMessagesService;
    exports.Permissions = Permissions;
    exports.PhoneValidationDirective = PhoneValidationDirective;
    exports.PluginsModule = PluginsModule;
    exports.PluginsResolveService = PluginsResolveService;
    exports.PluginsService = PluginsService;
    exports.PopoverConfirmComponent = PopoverConfirmComponent;
    exports.ProductExperienceDirective = ProductExperienceDirective;
    exports.ProductExperienceModule = ProductExperienceModule;
    exports.ProgressBarComponent = ProgressBarComponent;
    exports.PropertiesListComponent = PropertiesListComponent;
    exports.PropertiesListModule = PropertiesListModule;
    exports.ProviderConfigurationComponent = ProviderConfigurationComponent;
    exports.ProviderConfigurationModule = ProviderConfigurationModule;
    exports.ProviderConfigurationNodeFactory = ProviderConfigurationNodeFactory;
    exports.ProviderConfigurationRouteFactory = ProviderConfigurationRouteFactory;
    exports.ProviderConfigurationService = ProviderConfigurationService;
    exports.ProviderDefinitionsService = ProviderDefinitionsService;
    exports.QuickLinkComponent = QuickLinkComponent;
    exports.QuickLinkModule = QuickLinkModule;
    exports.RESOLVING_COMPONENT_WAIT_TIME = RESOLVING_COMPONENT_WAIT_TIME;
    exports.RangeComponent = RangeComponent;
    exports.RangeDirective = RangeDirective;
    exports.RangeDisplayComponent = RangeDisplayComponent;
    exports.RangeDisplayModule = RangeDisplayModule;
    exports.RealtimeButtonComponent = RealtimeButtonComponent;
    exports.RealtimeMessage = RealtimeMessage;
    exports.RealtimeModule = RealtimeModule;
    exports.RealtimeService = RealtimeService;
    exports.RealtimeSubjectService = RealtimeSubjectService;
    exports.RecoverPasswordComponent = RecoverPasswordComponent;
    exports.RequiredInputPlaceholderDirective = RequiredInputPlaceholderDirective;
    exports.RightDrawerComponent = RightDrawerComponent;
    exports.RouterModule = RouterModule;
    exports.RouterService = RouterService;
    exports.RouterTabsResolver = RouterTabsResolver;
    exports.SETUP_FINISHED_STEP_ID = SETUP_FINISHED_STEP_ID;
    exports.SearchComponent = SearchComponent;
    exports.SearchInputComponent = SearchInputComponent;
    exports.SearchModule = SearchModule;
    exports.SearchOutletComponent = SearchOutletComponent;
    exports.SearchResultEmptyComponent = SearchResultEmptyComponent;
    exports.SearchService = SearchService;
    exports.SelectComponent = SelectComponent;
    exports.SelectModalComponent = SelectModalComponent;
    exports.SelectModalFilterPipe = SelectModalFilterPipe;
    exports.SelectModalModule = SelectModalModule;
    exports.SelectModule = SelectModule;
    exports.SetupCompletedComponent = SetupCompletedComponent;
    exports.SetupComponent = SetupComponent;
    exports.SetupModule = SetupModule;
    exports.ShortenUserNamePipe = ShortenUserNamePipe;
    exports.ShowIfFilterPipe = ShowIfFilterPipe;
    exports.SmsChallengeComponent = SmsChallengeComponent;
    exports.StateService = StateService;
    exports.StepperModule = StepperModule;
    exports.StepperOutletComponent = StepperOutletComponent;
    exports.StepperService = StepperService;
    exports.StrengthValidatorService = StrengthValidatorService;
    exports.TabComponent = TabComponent;
    exports.TabsModule = TabsModule;
    exports.TabsOutletComponent = TabsOutletComponent;
    exports.TabsService = TabsService;
    exports.TenantUiService = TenantUiService;
    exports.TextAreaRowHeightDirective = TextAreaRowHeightDirective;
    exports.TextareaAutoresizeDirective = TextareaAutoresizeDirective;
    exports.TitleComponent = TitleComponent;
    exports.TitleOutletComponent = TitleOutletComponent;
    exports.TotpAuthComponent = TotpAuthComponent;
    exports.TotpChallengeComponent = TotpChallengeComponent;
    exports.TotpSetupComponent = TotpSetupComponent;
    exports.TranslateCustomLoader = TranslateCustomLoader;
    exports.TranslateParserCustom = TranslateParserCustom;
    exports.TranslateService = TranslateService;
    exports.TypeaheadComponent = TypeaheadComponent;
    exports.UniqueInCollectionByPathValidationDirective = UniqueInCollectionByPathValidationDirective;
    exports.UserEditComponent = UserEditComponent;
    exports.UserEditModalComponent = UserEditModalComponent;
    exports.UserMenuItemComponent = UserMenuItemComponent;
    exports.UserMenuOutletComponent = UserMenuOutletComponent;
    exports.UserMenuService = UserMenuService;
    exports.UserModule = UserModule;
    exports.UserPreferencesService = UserPreferencesService;
    exports.UserPreferencesStorageInventory = UserPreferencesStorageInventory;
    exports.UserPreferencesStorageLocal = UserPreferencesStorageLocal;
    exports.UserTotpRevokeComponent = UserTotpRevokeComponent;
    exports.UserTotpSetupComponent = UserTotpSetupComponent;
    exports.ValidationPattern = ValidationPattern;
    exports.ViewContextServices = ViewContextServices;
    exports.VirtualScrollWindowDirective = VirtualScrollWindowDirective;
    exports.VirtualScrollWindowStrategy = VirtualScrollWindowStrategy;
    exports.VirtualScrollerWrapperComponent = VirtualScrollerWrapperComponent;
    exports.WidgetsDashboardComponent = WidgetsDashboardComponent;
    exports.WizardBodyComponent = WizardBodyComponent;
    exports.WizardComponent = WizardComponent;
    exports.WizardFooterComponent = WizardFooterComponent;
    exports.WizardHeaderComponent = WizardHeaderComponent;
    exports.WizardModule = WizardModule;
    exports.WizardService = WizardService;
    exports.ZipService = ZipService;
    exports._ = _;
    exports._virtualScrollWindowStrategyFactory = _virtualScrollWindowStrategyFactory;
    exports.deviceAvailabilityIconMap = deviceAvailabilityIconMap;
    exports.fromFactories = fromFactories;
    exports.fromTrigger = fromTrigger;
    exports.fromTriggerOnce = fromTriggerOnce;
    exports.getActivatedRoute = getActivatedRoute;
    exports.getAngularLocalesLanguageString = getAngularLocalesLanguageString;
    exports.getBasicInputArrayFormFieldConfig = getBasicInputArrayFormFieldConfig;
    exports.gettext = gettext;
    exports.initializeServices = initializeServices;
    exports.isPromise = isPromise;
    exports.languagesFactory = languagesFactory;
    exports.loadLocale = loadLocale;
    exports.localeId = localeId;
    exports.localePathFactory = localePathFactory;
    exports.memoize = memoize;
    exports.minColumnGridTrackSize = minColumnGridTrackSize;
    exports.operationStatusClasses = operationStatusClasses;
    exports.operationStatusIcons = operationStatusIcons;
    exports.parse = parse;
    exports.ratiosByColumnTypes = ratiosByColumnTypes;
    exports.resolveInjectedFactories = resolveInjectedFactories;
    exports.retryWithDelay = retryWithDelay;
    exports.routes = routes;
    exports.sortByPriority = sortByPriority;
    exports.stateToFactory = stateToFactory;
    exports.statusAlert = statusAlert;
    exports.statusClasses = statusClasses;
    exports.statusIcons = statusIcons;
    exports.throttle = throttle;
    exports.toObservable = toObservable;
    exports.toObservableOfArrays = toObservableOfArrays;
    exports.tooltips = tooltips;
    exports.translateLoaderFactory = translateLoaderFactory;
    exports.trimTranslationKey = trimTranslationKey;
    exports["ɵa"] = CookieBannerService;
    exports["ɵb"] = HumanizeAppNamePipe;
    exports["ɵba"] = TimePickerModule;
    exports["ɵbb"] = TimePickerComponent;
    exports["ɵbc"] = AuditLogModule;
    exports["ɵbd"] = AuditLogComponent;
    exports["ɵbe"] = ConfigureCustomColumnComponent;
    exports["ɵbf"] = HelpService;
    exports["ɵbg"] = ListDisplaySwitchModule;
    exports["ɵbh"] = ListDisplaySwitchComponent;
    exports["ɵbi"] = WizardOutletComponent;
    exports["ɵbj"] = HOOK_ROUTE;
    exports["ɵbk"] = HOOK_NAVIGATOR_NODES;
    exports["ɵbl"] = HOOK_TABS;
    exports["ɵbm"] = ProviderConfigurationTabFactory;
    exports["ɵc"] = CookieBannerPreferencesModalComponent;
    exports["ɵd"] = CurrentPasswordModalComponent;
    exports["ɵe"] = ProvidePhoneNumberComponent;
    exports["ɵf"] = CredentialsFromQueryParamsService;
    exports["ɵg"] = PasswordService;
    exports["ɵh"] = TenantIdSetupComponent;
    exports["ɵi"] = I18nModule;
    exports["ɵj"] = TranslateExtension;
    exports["ɵk"] = registerTranslateExtension;
    exports["ɵl"] = ValidationModule;
    exports["ɵm"] = c8yValidationConfigFactory;
    exports["ɵn"] = FIELD_TYPES;
    exports["ɵo"] = fieldTypeFactory;
    exports["ɵp"] = DynamicFormsUIThemeModule;
    exports["ɵq"] = FieldCheckbox;
    exports["ɵr"] = ArrayTypeComponent;
    exports["ɵs"] = WrapperFormField;
    exports["ɵt"] = FieldFile;
    exports["ɵu"] = FieldInput;
    exports["ɵv"] = FieldRadio;
    exports["ɵw"] = ObjectTypeComponent;
    exports["ɵx"] = FieldDate;
    exports["ɵy"] = FieldDateTime;
    exports["ɵz"] = TypeaheadTypeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components.umd.js.map
