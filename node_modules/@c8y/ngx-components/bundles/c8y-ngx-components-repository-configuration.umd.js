(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@c8y/client'), require('@c8y/ngx-components'), require('@c8y/ngx-components/repository/shared'), require('lodash-es'), require('rxjs/operators'), require('file-saver'), require('ngx-bootstrap/modal'), require('@angular/common'), require('ngx-bootstrap/tabs'), require('@c8y/ngx-components/operations/operation-details'), require('@ngx-translate/core'), require('rxjs'), require('ngx-bootstrap/tooltip')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/repository/configuration', ['exports', '@angular/core', '@angular/router', '@c8y/client', '@c8y/ngx-components', '@c8y/ngx-components/repository/shared', 'lodash-es', 'rxjs/operators', 'file-saver', 'ngx-bootstrap/modal', '@angular/common', 'ngx-bootstrap/tabs', '@c8y/ngx-components/operations/operation-details', '@ngx-translate/core', 'rxjs', 'ngx-bootstrap/tooltip'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].repository = global.c8y["ngx-components"].repository || {}, global.c8y["ngx-components"].repository.configuration = {}), global.ng.core, global.ng.router, global.client, global.c8y["ngx-components"], global.c8y["ngx-components"].repository.shared, global.lodashEs, global.rxjs.operators, global.fileSaver, global.modal, global.ng.common, global.tabs, global.c8y["ngx-components"].operations["operation-details"], global.core$1, global.rxjs, global.tooltip));
})(this, (function (exports, core, router, client, ngxComponents, shared, lodashEs, operators, fileSaver, modal, common, tabs, operationDetails, core$1, rxjs, tooltip) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var DeviceConfigurationService = /** @class */ (function () {
        function DeviceConfigurationService() {
            this.configurationsUpdated = new core.EventEmitter();
        }
        DeviceConfigurationService.prototype.updateConfigurations = function (repositorySnapsOnly) {
            this.configurationsUpdated.emit(repositorySnapsOnly);
        };
        DeviceConfigurationService.prototype.hasAnySupportedOperation = function (mo, operation) {
            var supported = mo.c8y_SupportedOperations;
            if (!supported) {
                return false;
            }
            if (!Array.isArray(operation)) {
                operation = [operation];
            }
            return supported.some(function (supportedOperation) { return operation.includes(supportedOperation); });
        };
        return DeviceConfigurationService;
    }());
    DeviceConfigurationService.decorators = [
        { type: core.Injectable }
    ];

    var TextBasedConfigurationComponent = /** @class */ (function () {
        function TextBasedConfigurationComponent(route, alertService, repositoryService, deviceConfigurationService, inventoryService) {
            this.route = route;
            this.alertService = alertService;
            this.repositoryService = repositoryService;
            this.deviceConfigurationService = deviceConfigurationService;
            this.inventoryService = inventoryService;
            this.reloadingConfig = false;
        }
        TextBasedConfigurationComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.load()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        TextBasedConfigurationComponent.prototype.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.device = this.route.snapshot.parent.data.contextData;
                            return [4 /*yield*/, this.loadDevice()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.loadOperation()];
                        case 2:
                            _a.sent();
                            this.showTextBasedConfigReload = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [shared.DeviceConfigurationOperation.SEND_CONFIG]);
                            this.showTextBasedConfigSave = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [shared.DeviceConfigurationOperation.CONFIG]);
                            if (this.device.c8y_Configuration && this.device.c8y_Configuration.config) {
                                this.config = this.device.c8y_Configuration.config;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        TextBasedConfigurationComponent.prototype.loadOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var operation;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repositoryService.getLastConfigUpdateOperation(this.device.id)];
                        case 1:
                            operation = _a.sent();
                            if (operation !== null) {
                                this.reloadingConfig =
                                    !!operation.c8y_SendConfiguration &&
                                        (operation.status === client.OperationStatus.PENDING ||
                                            operation.status === client.OperationStatus.EXECUTING);
                                this.repositoryService.observeOperation(operation).subscribe(function (operationUpdate) {
                                    _this.latestOperation = operationUpdate;
                                });
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(TextBasedConfigurationComponent.prototype, "savingConfig", {
            get: function () {
                return this.latestOperation
                    ? !!this.latestOperation.c8y_Configuration &&
                        (this.latestOperation.status === client.OperationStatus.PENDING ||
                            this.latestOperation.status === client.OperationStatus.EXECUTING)
                    : false;
            },
            enumerable: false,
            configurable: true
        });
        TextBasedConfigurationComponent.prototype.reloadConfiguration = function () {
            return __awaiter(this, void 0, void 0, function () {
                var operationCfg;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.reloadingConfig = true;
                            return [4 /*yield*/, this.repositoryService.createTextBasedConfigurationReloadOperation(this.device)];
                        case 1:
                            operationCfg = _a.sent();
                            try {
                                this.repositoryService
                                    .createObservedOperation(operationCfg)
                                    .subscribe(function (operationUpdate) { return _this.onOperationReloadSuccess(operationUpdate); }, function (operationUpdate) { return _this.onOperationReloadError(operationUpdate); }, function () { return _this.onOperationReloadComplete(); });
                            }
                            catch (ex) {
                                this.alertService.addServerFailure(ex);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        TextBasedConfigurationComponent.prototype.updateConfiguration = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                var operationCfg;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repositoryService.createTextBasedConfigurationUpdateOperation(this.device, config)];
                        case 1:
                            operationCfg = _a.sent();
                            try {
                                this.repositoryService
                                    .createObservedOperation(operationCfg)
                                    .subscribe(function (operationUpdate) { return _this.onOperationUpdateSuccess(operationUpdate); }, function (operationUpdate) { return _this.onOperationUpdateError(operationUpdate); }, function () { return _this.onOperationUpdateComplete(); });
                            }
                            catch (ex) {
                                this.alertService.addServerFailure(ex);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        TextBasedConfigurationComponent.prototype.onOperationReloadSuccess = function (operationUpdate) {
            this.latestOperation = operationUpdate;
            if (operationUpdate.status === client.OperationStatus.PENDING) {
                this.alertService.success(ngxComponents.gettext('Configuration will be reloaded.'));
            }
        };
        TextBasedConfigurationComponent.prototype.onOperationReloadError = function (operationUpdate) {
            this.latestOperation = operationUpdate;
            this.reloadingConfig = false;
        };
        TextBasedConfigurationComponent.prototype.onOperationReloadComplete = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadDevice()];
                        case 1:
                            _a.sent();
                            this.config = this.device.c8y_Configuration.config;
                            this.reloadingConfig = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        TextBasedConfigurationComponent.prototype.onOperationUpdateSuccess = function (operationUpdate) {
            this.latestOperation = operationUpdate;
            if (operationUpdate.status === client.OperationStatus.PENDING) {
                this.alertService.success(ngxComponents.gettext('Configuration will be updated.'));
            }
        };
        TextBasedConfigurationComponent.prototype.onOperationUpdateError = function (operationUpdate) {
            this.latestOperation = operationUpdate;
        };
        TextBasedConfigurationComponent.prototype.onOperationUpdateComplete = function () {
            this.device.c8y_Configuration.config = this.config;
        };
        TextBasedConfigurationComponent.prototype.loadDevice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.inventoryService.detail(this.device.id, {
                                    withChildren: false
                                })];
                        case 1:
                            _a.device = (_b.sent()).data;
                            return [2 /*return*/];
                    }
                });
            });
        };
        return TextBasedConfigurationComponent;
    }());
    TextBasedConfigurationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-text-based-configuration',
                    template: "<div class=\"d-flex d-col fit-h\">\n  <fieldset class=\"card-block bg-gray-white fit-w\">\n    <div class=\"content-flex-50\">\n      <div class=\"flex-item-left d-flex\">\n        <button\n          title=\"{{ 'Get configuration from device' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default btn-sm flex-item-v-center m-t-8 m-b-8\"\n          *ngIf=\"showTextBasedConfigReload\"\n          (click)=\"reloadConfiguration()\"\n          [disabled]=\"reloadingConfig || savingConfig\"\n        >\n          <i\n            c8yIcon=\"refresh\"\n            *ngIf=\"reloadingConfig\"\n            class=\"m-r-4\"\n            [ngClass]=\"{ 'icon-spin': reloadingConfig }\"\n          ></i>\n          <i c8yIcon=\"download\" *ngIf=\"!reloadingConfig\" class=\"m-r-4\"></i>\n\n          {{ 'Get configuration from device' | translate }}\n        </button>\n      </div>\n      <c8y-operation-details\n        *ngIf=\"latestOperation !== undefined\"\n        [operation]=\"latestOperation\"\n        class=\"flex-grow\"\n      ></c8y-operation-details>\n    </div>\n  </fieldset>\n  <div class=\"flex-grow\">\n    <textarea\n      [(ngModel)]=\"config\"\n      class=\"form-control fit-h p-r-16 p-l-16\"\n      [disabled]=\"reloadingConfig || savingConfig\"\n      c8y-spellcheck=\"false\"\n    ></textarea>\n  </div>\n  <div class=\"card-footer fit-w separator\" *ngIf=\"showTextBasedConfigSave\">\n    <button\n      type=\"button\"\n      id=\"send-config-btn\"\n      (click)=\"updateConfiguration(config)\"\n      [disabled]=\"reloadingConfig || savingConfig || !config\"\n      class=\"btn btn-primary\"\n      [ngClass]=\"{ 'btn-pending': savingConfig }\"\n    >\n      <span title=\"{{ 'Send' | translate }}\" *ngIf=\"!savingConfig\">\n        {{ 'Send configuration to device' | translate }}\n      </span>\n      <span title=\"{{ 'Sending\u2026' | translate }}\" *ngIf=\"savingConfig\">\n        {{ 'Sending\u2026' | translate }}\n      </span>\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    TextBasedConfigurationComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: ngxComponents.AlertService },
        { type: shared.RepositoryService },
        { type: DeviceConfigurationService },
        { type: client.InventoryService }
    ]; };

    var DeviceConfigurationGuard = /** @class */ (function () {
        function DeviceConfigurationGuard(deviceConfigurationService) {
            this.deviceConfigurationService = deviceConfigurationService;
        }
        DeviceConfigurationGuard.prototype.canActivate = function (route, state) {
            var contextData = route.data.contextData || route.parent.data.contextData;
            if (!contextData) {
                return false;
            }
            return ((contextData.c8y_SupportedConfigurations &&
                contextData.c8y_SupportedConfigurations.length > 0) ||
                this.deviceConfigurationService.hasAnySupportedOperation(contextData, [
                    shared.DeviceConfigurationOperation.DOWNLOAD_CONFIG,
                    shared.DeviceConfigurationOperation.UPLOAD_CONFIG,
                    shared.DeviceConfigurationOperation.CONFIG,
                    shared.DeviceConfigurationOperation.SEND_CONFIG
                ]) ||
                lodashEs.has(contextData, 'c8y_Configuration'));
        };
        return DeviceConfigurationGuard;
    }());
    DeviceConfigurationGuard.decorators = [
        { type: core.Injectable }
    ];
    DeviceConfigurationGuard.ctorParameters = function () { return [
        { type: DeviceConfigurationService }
    ]; };

    var ConfigurationFilterPipe = /** @class */ (function () {
        function ConfigurationFilterPipe() {
        }
        ConfigurationFilterPipe.prototype.transform = function (items, filterTerm) {
            var _this = this;
            return filterTerm.trim().length === 0
                ? items
                : items.filter(function (item) { return _this.filterContainString(item.name, filterTerm) ||
                    _this.filterContainString(item.deviceType, filterTerm); });
        };
        ConfigurationFilterPipe.prototype.filterContainString = function (name, filterTerm) {
            var term = filterTerm.toLowerCase().trim();
            return name && name.toLowerCase().indexOf(term) > -1;
        };
        return ConfigurationFilterPipe;
    }());
    ConfigurationFilterPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'configurationFilterPipe'
                },] }
    ];

    var SaveToRepositoryComponent = /** @class */ (function () {
        function SaveToRepositoryComponent(modal, alertService, repositoryService) {
            var _this = this;
            this.modal = modal;
            this.alertService = alertService;
            this.repositoryService = repositoryService;
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        SaveToRepositoryComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var configSnapshotData, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            configSnapshotData = {
                                selected: {
                                    configurationType: this.configSnapshot.configurationType
                                },
                                version: this.configSnapshot.name,
                                deviceType: this.configSnapshot.deviceType,
                                description: this.configSnapshot.description,
                                binary: {
                                    file: new File([this.configSnapshot.binary], this.configSnapshot.name)
                                }
                            };
                            return [4 /*yield*/, this.repositoryService.save(configSnapshotData, shared.RepositoryType.CONFIGURATION)];
                        case 1:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Configuration saved.'));
                            this._save();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SaveToRepositoryComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        return SaveToRepositoryComponent;
    }());
    SaveToRepositoryComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-save-config-to-configuration-repository',
                    template: "<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"gears\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Save configuration\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #saveConfigurationSnapshot=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"name\">Name</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"name\"\n        [(ngModel)]=\"configSnapshot.name\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"deviceType\">Device type</label>\n      <input\n        id=\"deviceType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"deviceType\"\n        [(ngModel)]=\"configSnapshot.deviceType\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"description\">Description</label>\n      <input\n        type=\"text\"\n        id=\"description\"\n        class=\"form-control\"\n        maxlength=\"254\"\n        autocomplete=\"off\"\n        name=\"description\"\n        [(ngModel)]=\"configSnapshot.description\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"configurationType\">Configuration type</label>\n      <input\n        id=\"configurationType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"configurationType\"\n        [(ngModel)]=\"configSnapshot.configurationType\"\n      />\n    </c8y-form-group>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Save configuration to repository' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"saveConfigurationSnapshot.form.invalid\"\n    translate\n  >\n    Save\n  </button>\n</div>\n"
                },] }
    ];
    SaveToRepositoryComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: ngxComponents.AlertService },
        { type: shared.RepositoryService }
    ]; };

    var ConfigurationPreviewComponent = /** @class */ (function () {
        function ConfigurationPreviewComponent(deviceConfigurationService, operationRealtime, bsModal, user, appState, repositoryService, operationService, alertService) {
            this.deviceConfigurationService = deviceConfigurationService;
            this.operationRealtime = operationRealtime;
            this.bsModal = bsModal;
            this.user = user;
            this.appState = appState;
            this.repositoryService = repositoryService;
            this.operationService = operationService;
            this.alertService = alertService;
            this.isLegacy = false;
            this.canCallAction = true;
            this.deviceConfigurationOperation = shared.DeviceConfigurationOperation;
        }
        Object.defineProperty(ConfigurationPreviewComponent.prototype, "configurationType", {
            get: function () {
                return this._configurationType;
            },
            set: function (type) {
                this._configurationType = type;
                this.setOperation(type);
            },
            enumerable: false,
            configurable: true
        });
        ConfigurationPreviewComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.setCanCallAction();
                    this.setOperation(this._configurationType);
                    this.operationsSubscription = this.operationRealtime
                        .onAll$(this.device.id)
                        .pipe(operators.map(function (_a) {
                        var data = _a.data;
                        return data;
                    }))
                        .subscribe(function (operation) {
                        _this.updatePreview(operation);
                    });
                    return [2 /*return*/];
                });
            });
        };
        ConfigurationPreviewComponent.prototype.setOperation = function (configType) {
            return __awaiter(this, void 0, void 0, function () {
                var operationList, operation;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repositoryService.getConfigFileOperationList(this.device.id, this.operationToTrigger)];
                        case 1:
                            operationList = _a.sent();
                            operation = this.isLegacy
                                ? operationList.find(function (op) { return op[_this.operationToTrigger] && !op[_this.operationToTrigger].type; })
                                : operationList.find(function (op) { return op[_this.operationToTrigger].type === configType; });
                            this.operation =
                                operation && operation.status !== client.OperationStatus.SUCCESSFUL ? operation : undefined;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationPreviewComponent.prototype.setCanCallAction = function () {
            this.canCallAction = this.deviceConfigurationService.hasAnySupportedOperation(this.device, this.operationToTrigger);
        };
        ConfigurationPreviewComponent.prototype.createDeviceOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var operationCfg, _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this.operationToTrigger === shared.DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
                                operationCfg = this.repositoryService.getDownloadConfigurationFileOperation(this.device, this._configurationType, this.configSnapshot, this.isLegacy);
                            }
                            if (this.operationToTrigger === shared.DeviceConfigurationOperation.UPLOAD_CONFIG) {
                                operationCfg = this.repositoryService.getUploadConfigurationFileOperation(this.device, this._configurationType, this.isLegacy);
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, this.operationService.create(operationCfg)];
                        case 2:
                            _a.operation = (_b.sent()).data;
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _b.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationPreviewComponent.prototype.showOperation = function () {
            if (this.operationToTrigger === shared.DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
                return !!this.operation;
            }
            return (this.operation &&
                [client.OperationStatus.PENDING, client.OperationStatus.EXECUTING, client.OperationStatus.FAILED].includes(this.operation.status));
        };
        ConfigurationPreviewComponent.prototype.showBinary = function () {
            if (this.operationToTrigger === shared.DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
                return true;
            }
            return !this.showOperation();
        };
        ConfigurationPreviewComponent.prototype.isCreateOperationDisabled = function () {
            return (this.operation &&
                [client.OperationStatus.PENDING, client.OperationStatus.EXECUTING].includes(this.operation.status));
        };
        ConfigurationPreviewComponent.prototype.updatePreview = function (operation) {
            if (operation &&
                operation[this.operationToTrigger] &&
                (this.isLegacy ||
                    (operation[this.operationToTrigger].type &&
                        operation[this.operationToTrigger].type === this.configurationType))) {
                this.operation = operation;
                this.updateSnapshotsOnConfigUpload(operation);
            }
        };
        ConfigurationPreviewComponent.prototype.download = function () {
            var blob = new Blob([this.configSnapshot.binary], { type: this.configSnapshot.binaryType });
            var fileName = this.configSnapshot.name;
            switch (this.configSnapshot.binaryType) {
                case 'text/csv':
                case 'application/csv':
                    fileName = fileName.concat('.csv');
                    break;
                case 'text/yaml':
                case 'application/x-yaml':
                    fileName = fileName.concat('.yaml');
                    break;
                case 'application/json':
                    fileName = fileName.concat('.json');
                    break;
            }
            fileSaver.saveAs(blob, fileName);
        };
        ConfigurationPreviewComponent.prototype.saveToRepository = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            initialState = {
                                configSnapshot: lodashEs.cloneDeep(this.configSnapshot)
                            };
                            modal = this.bsModal.show(SaveToRepositoryComponent, {
                                class: 'modal-sm',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            _a.sent();
                            this.deviceConfigurationService.updateConfigurations(true);
                            modal.close();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationPreviewComponent.prototype.hasPermission = function () {
            return this.user.hasAnyRole(this.appState.currentUser.value, [
                'ROLE_INVENTORY_ADMIN',
                'ROLE_INVENTORY_CREATE'
            ]);
        };
        ConfigurationPreviewComponent.prototype.ngOnDestroy = function () {
            if (this.operationsSubscription) {
                this.operationsSubscription.unsubscribe();
            }
        };
        ConfigurationPreviewComponent.prototype.updateSnapshotsOnConfigUpload = function (operation) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (operation[shared.DeviceConfigurationOperation.UPLOAD_CONFIG] &&
                        operation.status === client.OperationStatus.SUCCESSFUL) {
                        this.deviceConfigurationService.updateConfigurations();
                    }
                    return [2 /*return*/];
                });
            });
        };
        return ConfigurationPreviewComponent;
    }());
    ConfigurationPreviewComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-configuration-preview',
                    template: "<div class=\"content-flex-55 p-b-16\">\n  <div class=\"col-7 p-t-4\">\n    <p>\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Configuration</span>\n      <span *ngIf=\"configSnapshot?.name; else emptyText\">\n        <strong>{{ configSnapshot.name }}</strong>\n      </span>\n      <ng-template #emptyText> --- </ng-template>\n    </p>\n    <p>\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Last updated</span>\n      <small *ngIf=\"configSnapshot?.time; else emptyDate\">\n        {{ configSnapshot.time | c8yDate }}\n      </small>\n      <ng-template #emptyDate> --- </ng-template>\n    </p>\n  </div>\n  <div class=\"col-5\">\n    <button\n      id=\"action-btn\"\n      class=\"btn btn-default btn-sm pull-right\"\n      type=\"button\"\n      title=\"{{ actionButtonText | translate }}\"\n      (click)=\"createDeviceOperation()\"\n      [disabled]=\"isCreateOperationDisabled()\"\n      *ngIf=\"canCallAction\"\n    >\n      <i [c8yIcon]=\"actionButtonIcon\"></i> {{ actionButtonText | translate }}\n    </button>\n  </div>\n</div>\n<div class=\"c8y-empty-state text-left\" *ngIf=\"!configSnapshot?.binary && showBinary()\">\n  <h1 [c8yIcon]=\"'file-image-o'\"></h1>\n  <p>\n    <strong translate>No preview available.</strong><br />\n    <small *ngIf=\"configSnapshot?.binary !== ''; else emptyFile\" translate\n      >The file is not available.</small\n    >\n    <ng-template #emptyFile>\n      <small translate>The file is empty.</small>\n    </ng-template>\n  </p>\n</div>\n<div *ngIf=\"configSnapshot?.binary && showBinary()\" class=\"flex-grow d-flex d-col\">\n  <c8y-source-code-preview\n    [text]=\"configSnapshot.binary\"\n    [isDisabled]=\"true\"\n    class=\"d-contents\"\n  ></c8y-source-code-preview>\n  <div *ngIf=\"canSaveSnapshot\" class=\"p-t-16\">\n    <button\n      type=\"button\"\n      class=\"btn btn-primary btn-sm pull-right m-l-8\"\n      (click)=\"download()\"\n      translate\n    >\n      Download\n    </button>\n    <button\n      *ngIf=\"hasPermission()\"\n      type=\"button\"\n      class=\"btn btn-default btn-sm pull-right\"\n      (click)=\"saveToRepository()\"\n      translate\n    >\n      Save to repository\n    </button>\n  </div>\n</div>\n<div *ngIf=\"showOperation()\">\n  <c8y-operation-details [operation]=\"operation\"></c8y-operation-details>\n</div>\n"
                },] }
    ];
    ConfigurationPreviewComponent.ctorParameters = function () { return [
        { type: DeviceConfigurationService },
        { type: ngxComponents.OperationRealtimeService },
        { type: modal.BsModalService },
        { type: client.UserService },
        { type: ngxComponents.AppStateService },
        { type: shared.RepositoryService },
        { type: client.OperationService },
        { type: ngxComponents.AlertService }
    ]; };
    ConfigurationPreviewComponent.propDecorators = {
        device: [{ type: core.Input }],
        configurationType: [{ type: core.Input }],
        configSnapshot: [{ type: core.Input }],
        canSaveSnapshot: [{ type: core.Input }],
        actionButtonText: [{ type: core.Input }],
        actionButtonIcon: [{ type: core.Input }],
        isLegacy: [{ type: core.Input }],
        operationToTrigger: [{ type: core.Input }]
    };

    var DeviceConfigurationComponent = /** @class */ (function () {
        function DeviceConfigurationComponent(route, deviceConfigurationService, realtime, repositoryService) {
            var _this = this;
            this.route = route;
            this.deviceConfigurationService = deviceConfigurationService;
            this.realtime = realtime;
            this.repositoryService = repositoryService;
            this.supportedConfigurations = [];
            this.showBinaryBasedConfig = false;
            this.configSnapshot = {};
            this.reloading = false;
            this.deviceConfigurationService.configurationsUpdated.subscribe(function (repositorySnapsOnly) {
                _this.updateSnapshots(repositorySnapsOnly);
            });
        }
        DeviceConfigurationComponent.prototype.ngOnInit = function () {
            this.device = this.route.snapshot.parent.data.contextData;
            if (this.device.c8y_SupportedConfigurations) {
                this.supportedConfigurations = this.device.c8y_SupportedConfigurations.map(function (item) { return ({
                    name: item
                }); });
            }
            if (this.deviceConfigurationService.hasAnySupportedOperation(this.device, [
                shared.DeviceConfigurationOperation.DOWNLOAD_CONFIG,
                shared.DeviceConfigurationOperation.UPLOAD_CONFIG
            ])) {
                this.supportedConfigurations.push({
                    name: ngxComponents.gettext('Legacy configuration snapshot'),
                    isLegacy: true
                });
            }
            if (this.supportedConfigurations.length > 0) {
                this.showBinaryBasedConfig = true;
            }
            this.repositorySnapshotsEmptyState = {
                icon: 'gears',
                title: ngxComponents.gettext('No configurations available.'),
                text: ngxComponents.gettext('Add configuration to configuration repository')
            };
            this.showTextBasedConfig =
                this.deviceConfigurationService.hasAnySupportedOperation(this.device, [
                    shared.DeviceConfigurationOperation.CONFIG,
                    shared.DeviceConfigurationOperation.SEND_CONFIG
                ]) || lodashEs.has(this.device, 'c8y_Configuration');
        };
        DeviceConfigurationComponent.prototype.onConfigTypeSelected = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.configurationType = config.name;
                    this.isLegacy = config.isLegacy;
                    this.updateSnapshots();
                    return [2 /*return*/];
                });
            });
        };
        DeviceConfigurationComponent.prototype.onRepositoryConfigSelected = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                var binary, _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.repositorySnapshot = {
                                id: config.id,
                                time: config.creationTime,
                                name: config.name,
                                binaryUrl: config.url,
                                deviceType: config.deviceType,
                                configurationType: config.configurationType
                            };
                            if (!config.url) return [3 /*break*/, 6];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, this.repositoryService.getBinaryFile(config.url, {
                                    allowExternal: false
                                })];
                        case 2:
                            binary = _b.sent();
                            if (!binary) return [3 /*break*/, 4];
                            _a = this.repositorySnapshot;
                            return [4 /*yield*/, binary.text()];
                        case 3:
                            _a.binary = _b.sent();
                            _b.label = 4;
                        case 4: return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _b.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceConfigurationComponent.prototype.updateSnapshots = function (repositorySnapsOnly) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.reloading = true;
                            this.repositorySnapshot = undefined;
                            _a = this;
                            return [4 /*yield*/, this.repositoryService.getSnapshotsFromRepository(this.device, this.configurationType)];
                        case 1:
                            _a.repositorySnapshots = _d.sent();
                            if (!!repositorySnapsOnly) return [3 /*break*/, 6];
                            _b = this;
                            if (!this.isLegacy) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.repositoryService.getLegacyConfigSnapshot(this.device)];
                        case 2:
                            _c = _d.sent();
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.repositoryService.getConfigSnapshot(this.device, this.configurationType)];
                        case 4:
                            _c = _d.sent();
                            _d.label = 5;
                        case 5:
                            _b.configSnapshot = _c;
                            _d.label = 6;
                        case 6:
                            if (!this.showTextBasedConfig) return [3 /*break*/, 8];
                            return [4 /*yield*/, this.textBasedConfigurationComponent.load()];
                        case 7:
                            _d.sent();
                            _d.label = 8;
                        case 8:
                            this.reloading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        return DeviceConfigurationComponent;
    }());
    DeviceConfigurationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-configuration',
                    template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"updateSnapshots()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card content-fullpage card-has-tabs\">\n  <tabset>\n    <div class=\"card-header separator\" *ngIf=\"showBinaryBasedConfig && !showTextBasedConfig\">\n      <h4 class=\"card-title\">{{ 'Configurations' | translate }}</h4>\n    </div>\n    <div class=\"card-header separator\" *ngIf=\"!showBinaryBasedConfig && showTextBasedConfig\">\n      <h4 class=\"card-title\">{{ 'Text-based configuration' | translate }}</h4>\n    </div>\n    <tab heading=\"{{ 'Configurations' | translate }}\" *ngIf=\"showBinaryBasedConfig\">\n      <div class=\"card--grid card grid__col--4-8--md grid__row--6-6--md m-b-0\">\n        <!-- DEVICE SUPPORTED CONFIGURATIONS -->\n        <div class=\"card--grid__inner-scroll bg-gray-white\">\n          <div class=\"p-l-16 p-r-16\">\n            <h5 class=\"legend form-block\">\n              <span translate>Device-supported configurations</span>\n            </h5>\n          </div>\n          <c8y-device-configuration-list\n            [items]=\"supportedConfigurations\"\n            [itemIcon]=\"'gears'\"\n            (configSelected)=\"onConfigTypeSelected($event)\"\n          ></c8y-device-configuration-list>\n        </div>\n\n        <!-- CONFIGURATION PREVIEW -->\n        <div class=\"card--grid__inner-scroll d-flex d-col flex-grow\">\n          <div class=\"card-block d-flex d-col flex-grow\">\n            <h5 class=\"legend form-block\"><span translate>Preview</span></h5>\n\n            <!-- EMPTY STATE -->\n            <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n              <h1 [c8yIcon]=\"'file-text'\"></h1>\n              <p>\n                <strong translate>No configuration selected.</strong><br />\n                <small translate>Select a configuration to preview</small>\n              </p>\n            </div>\n\n            <!-- PREVIEW AVAILABLE STATE -->\n            <c8y-device-configuration-preview\n              *ngIf=\"configurationType\"\n              [device]=\"device\"\n              [configurationType]=\"configurationType\"\n              [configSnapshot]=\"configSnapshot\"\n              [canSaveSnapshot]=\"true\"\n              [operationToTrigger]=\"'c8y_UploadConfigFile'\"\n              [actionButtonText]=\"'Get snapshot from device' | translate\"\n              [actionButtonIcon]=\"'download'\"\n              [isLegacy]=\"isLegacy\"\n              class=\"d-flex d-col flex-grow\"\n            ></c8y-device-configuration-preview>\n          </div>\n        </div>\n\n        <!-- AVAILABLE SUPPORTED CONFIGURATIONS -->\n        <div class=\"card--grid__inner-scroll bg-gray-white\">\n          <div class=\"p-l-16 p-r-16\">\n            <h5 class=\"legend form-block\" translate>Available supported configurations</h5>\n          </div>\n\n          <!-- EMPTY STATE -->\n          <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n            <h1 [c8yIcon]=\"'gears'\"></h1>\n            <p>\n              <strong translate>No selection</strong><br />\n              <small translate\n                >Select a configuration from the device-supported configuration list</small\n              >\n            </p>\n          </div>\n          <div class=\"p-r-16\" *ngIf=\"configurationType\">\n            <c8y-device-configuration-list\n              [items]=\"repositorySnapshots\"\n              [itemIcon]=\"'file-text'\"\n              [emptyState]=\"repositorySnapshotsEmptyState\"\n              [isFilterEnabled]=\"true\"\n              (configSelected)=\"onRepositoryConfigSelected($event)\"\n            ></c8y-device-configuration-list>\n          </div>\n        </div>\n\n        <!-- CONFIGURATION PREVIEW -->\n        <div class=\"card--grid__inner-scroll d-flex d-col flex-grow\">\n          <div class=\"card-block flex-grow d-flex d-col\">\n            <h5 class=\"legend form-block\" translate>Preview</h5>\n\n            <!-- EMPTY STATE -->\n\n            <div class=\"c8y-empty-state text-left\" *ngIf=\"!repositorySnapshot\">\n              <h1 [c8yIcon]=\"'file-text'\"></h1>\n              <p>\n                <strong translate>No configuration selected.</strong><br />\n                <small *ngIf=\"!configurationType; else noSnapshot\" translate\n                  >Select a configuration to preview</small\n                >\n                <ng-template #noSnapshot>\n                  <small translate>Select the configuration you want to preview</small>\n                </ng-template>\n              </p>\n            </div>\n\n            <!-- CONFIGURATION SELECTED STATE -->\n            <c8y-device-configuration-preview\n              *ngIf=\"repositorySnapshot\"\n              [device]=\"device\"\n              [configurationType]=\"configurationType\"\n              [configSnapshot]=\"repositorySnapshot\"\n              [operationToTrigger]=\"'c8y_DownloadConfigFile'\"\n              [actionButtonText]=\"'Send configuration to device' | translate\"\n              [actionButtonIcon]=\"'upload'\"\n              [isLegacy]=\"isLegacy\"\n              class=\"d-flex d-col flex-grow\"\n            ></c8y-device-configuration-preview>\n          </div>\n        </div>\n      </div>\n    </tab>\n    <tab heading=\"{{ 'Text-based configuration' | translate }}\" *ngIf=\"showTextBasedConfig\">\n      <c8y-text-based-configuration></c8y-text-based-configuration>\n    </tab>\n  </tabset>\n</div>\n"
                },] }
    ];
    DeviceConfigurationComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: DeviceConfigurationService },
        { type: client.Realtime },
        { type: shared.RepositoryService }
    ]; };
    DeviceConfigurationComponent.propDecorators = {
        textBasedConfigurationComponent: [{ type: core.ViewChild, args: [TextBasedConfigurationComponent,] }]
    };

    var SourceCodePreviewComponent = /** @class */ (function () {
        function SourceCodePreviewComponent() {
        }
        return SourceCodePreviewComponent;
    }());
    SourceCodePreviewComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-source-code-preview',
                    template: "<textarea\n  [disabled]=\"isDisabled\"\n  class=\"text-monospace form-control no-resize flex-grow\"\n  rows=\"4\"\n  >{{ text }}</textarea\n>\n"
                },] }
    ];
    SourceCodePreviewComponent.propDecorators = {
        isDisabled: [{ type: core.Input }],
        text: [{ type: core.Input }]
    };

    var DeviceConfigurationListComponent = /** @class */ (function () {
        function DeviceConfigurationListComponent() {
            this.configSelected = new core.EventEmitter();
            this.filterTerm = '';
        }
        DeviceConfigurationListComponent.prototype.showConfigurationTypePreview = function (config) {
            this.selectedConfig = config;
            this.configSelected.emit(config);
        };
        DeviceConfigurationListComponent.prototype.updatePipe = function (filterTerm) {
            this.filterTerm = filterTerm;
        };
        return DeviceConfigurationListComponent;
    }());
    DeviceConfigurationListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-configuration-list',
                    template: "<div class=\"p-l-16 m-b-8\" *ngIf=\"isFilterEnabled\">\n  <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n</div>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state text-left\" *ngIf=\"items?.length === 0\">\n  <h1 [c8yIcon]=\"emptyState.icon\"></h1>\n  <p>\n    <strong>{{ emptyState.title | translate }}</strong\n    ><br />\n    <small>{{ emptyState.text | translate }}</small>\n  </p>\n</div>\n\n<!-- CONFIGURATIONS AVAILABLE -->\n<div class=\"c8y-nav-stacked\">\n  <div\n    class=\"c8y-stacked-item flex-row\"\n    [class.active]=\"config === selectedConfig\"\n    *ngFor=\"let config of items | configurationFilterPipe: filterTerm\"\n    (click)=\"showConfigurationTypePreview(config)\"\n  >\n    <div class=\"list-item-icon\">\n      <i [c8yIcon]=\"itemIcon\"></i>\n    </div>\n    <div class=\"list-item-body text-truncate\">\n      <div class=\"d-flex\">\n        <span class=\"text-truncate\" title=\"{{ config.name }}\">{{ config.name }}</span>\n        <span class=\"text-label-small flex-item-right flex-item-middle\">{{ config.deviceType }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- for Carlos: config.configurationType to differentiate whether a config matches configuration type. -->\n"
                },] }
    ];
    DeviceConfigurationListComponent.propDecorators = {
        items: [{ type: core.Input }],
        itemIcon: [{ type: core.Input }],
        emptyState: [{ type: core.Input }],
        isFilterEnabled: [{ type: core.Input }],
        configSelected: [{ type: core.Output }]
    };

    var ConfigurationRepositoryDeviceTabModule = /** @class */ (function () {
        function ConfigurationRepositoryDeviceTabModule() {
        }
        ConfigurationRepositoryDeviceTabModule.forRoot = function () {
            return {
                ngModule: ConfigurationRepositoryDeviceTabModule,
                providers: [
                    DeviceConfigurationGuard,
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: [
                            {
                                context: ngxComponents.ViewContext.Device,
                                path: 'device-configuration',
                                component: DeviceConfigurationComponent,
                                label: ngxComponents.gettext('Configuration'),
                                icon: 'gears',
                                priority: 600,
                                canActivate: [DeviceConfigurationGuard]
                            }
                        ],
                        multi: true
                    }
                ]
            };
        };
        return ConfigurationRepositoryDeviceTabModule;
    }());
    ConfigurationRepositoryDeviceTabModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ngxComponents.CoreModule,
                        shared.SharedRepositoryModule,
                        operationDetails.OperationDetailsModule,
                        tabs.TabsModule.forRoot()
                    ],
                    declarations: [
                        DeviceConfigurationComponent,
                        DeviceConfigurationListComponent,
                        ConfigurationPreviewComponent,
                        ConfigurationFilterPipe,
                        SaveToRepositoryComponent,
                        SourceCodePreviewComponent,
                        TextBasedConfigurationComponent
                    ],
                    entryComponents: [
                        DeviceConfigurationComponent,
                        SaveToRepositoryComponent,
                        TextBasedConfigurationComponent
                    ],
                    providers: [DeviceConfigurationService]
                },] }
    ];

    var ConfigurationDetailComponent = /** @class */ (function () {
        function ConfigurationDetailComponent(repositoryService, bsModalRef, alert) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.bsModalRef = bsModalRef;
            this.alert = alert;
            this.binary = {
                file: undefined,
                url: undefined
            };
            this.pattern = '';
            this.mo = {};
            this.saving = false;
            this.uploadChoice = 'uploadBinary';
            this.textForConfigurationUrlPopover = ngxComponents.gettext("Path for binaries can vary depending on device agent implementation, for example:\n    /configuration/binaries/configuration1.bin\n    https://configuration/binary/123\n    ftp://configuration/binary/123.tar.gz\n    Configurations with external URLs only work with the configuration typed devices, not with legacy ones.\n  ");
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        ConfigurationDetailComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.repositoryService.listRepositoryEntries(shared.RepositoryType.CONFIGURATION)];
                        case 1:
                            _a.configs = _b.sent();
                            if (this.selected) {
                                this.uploadChoice = this.binary.file ? 'uploadBinary' : 'uploadUrl';
                                this.existingBinary = this.binary.file;
                            }
                            this.setPipe('');
                            this.submitButtonTitle = this.mo.id
                                ? ngxComponents.gettext('Update configuration')
                                : ngxComponents.gettext('Add configuration');
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationDetailComponent.prototype.cancel = function () {
            this.bsModalRef.hide();
            this._cancel();
        };
        ConfigurationDetailComponent.prototype.setPipe = function (filterStr) {
            this.pattern = filterStr;
            this.filterPipe = rxjs.pipe(operators.map(function (data) { return lodashEs.uniqBy(data, 'configurationType'); }), operators.map(function (data) {
                return data.filter(function (mo) { return mo.configurationType &&
                    mo.configurationType.toLowerCase().indexOf(filterStr.toLowerCase()) > -1; });
            }));
        };
        ConfigurationDetailComponent.prototype.onFile = function (dropped) {
            this.configurationForm.form.markAsDirty();
            if (!lodashEs.isUndefined(dropped.url)) {
                this.binary = {
                    url: dropped.url
                };
                return;
            }
            else if (dropped.droppedFiles) {
                this.binary = {
                    file: dropped.droppedFiles[0].file
                };
                return;
            }
            else {
                this.binary = {
                    file: undefined,
                    url: undefined
                };
            }
        };
        ConfigurationDetailComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, selected, version, description, binary, deviceType, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, 3, 4]);
                            this.saving = true;
                            _a = this, selected = _a.selected, version = _a.version, description = _a.description, binary = _a.binary, deviceType = _a.deviceType;
                            if (this.existingBinary === this.binary.file) {
                                binary.file = undefined;
                            }
                            return [4 /*yield*/, this.repositoryService.save({ selected: selected, version: version, description: description, binary: binary, deviceType: deviceType }, shared.RepositoryType.CONFIGURATION, this.mo)];
                        case 1:
                            _b.sent();
                            this.alert.success(this.mo.id ? ngxComponents.gettext('Configuration updated.') : ngxComponents.gettext('Configuration created.'));
                            this.bsModalRef.hide();
                            this._save();
                            return [3 /*break*/, 4];
                        case 2:
                            ex_1 = _b.sent();
                            this.alert.addServerFailure(ex_1);
                            this._cancel();
                            return [3 /*break*/, 4];
                        case 3:
                            this.saving = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return ConfigurationDetailComponent;
    }());
    ConfigurationDetailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-configuration-detail',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'cogs'\"></i>\n    <h4 translate *ngIf=\"mo.id\">Update configuration</h4>\n    <h4 translate *ngIf=\"!mo.id\">Add configuration</h4>\n  </div>\n\n  <form\n    class=\"d-contents\"\n    #configurationForm=\"ngForm\"\n    (ngSubmit)=\"configurationForm.form.valid && save()\"\n  >\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <c8y-form-group>\n          <label translate>Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"{{ 'e.g.' | translate }} hosts\"\n            autocomplete=\"off\"\n            required\n            maxlength=\"254\"\n            [(ngModel)]=\"version\"\n            name=\"version\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label translate>Device type</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n            maxlength=\"254\"\n            autocomplete=\"off\"\n            [(ngModel)]=\"deviceType\"\n            name=\"deviceType\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label translate>Description</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"{{ 'e.g. Host configuration' | translate }} c8y_Linux\"\n            maxlength=\"254\"\n            autocomplete=\"off\"\n            [(ngModel)]=\"description\"\n            name=\"description\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label translate>Configuration type</label>\n          <c8y-typeahead\n            [(ngModel)]=\"selected\"\n            name=\"confType\"\n            placeholder=\"{{ 'e.g.' | translate }} ssh\"\n            maxlength=\"254\"\n            (onSearch)=\"setPipe($event)\"\n            displayProperty=\"configurationType\"\n          >\n            <c8y-li\n              *c8yFor=\"let config of configs; pipe: filterPipe; notFound: notFoundTemplate\"\n              class=\"p-l-8 p-r-8 c8y-list__item--link\"\n              (click)=\"selected = config; setPipe('')\"\n              [active]=\"selected === config\"\n            >\n              <c8y-highlight\n                [text]=\"config.configurationType || '--'\"\n                [pattern]=\"pattern\"\n              ></c8y-highlight>\n            </c8y-li>\n            <ng-template #notFoundTemplate>\n              <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"pattern.length > 0\">\n                <span translate>No match found.</span>\n                <button\n                  title=\"{{ 'Add new`configuration type`' | translate }}\"\n                  type=\"button\"\n                  class=\"btn btn-primary btn-xs m-l-8\"\n                  translate\n                >\n                  Add new`configuration type`\n                </button>\n              </c8y-li>\n            </ng-template>\n          </c8y-typeahead>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block m-t-40\" translate>Configuration file</div>\n          <c8y-file-picker\n            [maxAllowedFiles]=\"1\"\n            (onFilesPicked)=\"onFile($event)\"\n            [uploadChoice]=\"uploadChoice\"\n            [fileUrl]=\"binary.url\"\n            [fileBinary]=\"binary.file\"\n            [fileUrlPopover]=\"textForConfigurationUrlPopover\"\n          >\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button\n        (click)=\"cancel()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Cancel' | translate }}\"\n        [disabled]=\"saving\"\n      >\n        <span translate>Cancel</span>\n      </button>\n      <button\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        title=\"{{ submitButtonTitle | translate }}\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !configurationForm.valid ||\n          configurationForm.pristine ||\n          (!binary?.url && !binary?.file) ||\n          saving\n        \"\n      >\n        {{ submitButtonTitle | translate }}\n      </button>\n    </div>\n  </form>\n</div>\n"
                },] }
    ];
    ConfigurationDetailComponent.ctorParameters = function () { return [
        { type: shared.RepositoryService },
        { type: modal.BsModalRef },
        { type: ngxComponents.AlertService }
    ]; };
    ConfigurationDetailComponent.propDecorators = {
        configurationForm: [{ type: core.ViewChild, args: ['configurationForm', { static: true },] }]
    };

    var ConfigurationListComponent = /** @class */ (function () {
        function ConfigurationListComponent(alert, repositoryService, bsModalService, modalService, translateService, inventoryBinaryService, inventoryService) {
            this.alert = alert;
            this.repositoryService = repositoryService;
            this.bsModalService = bsModalService;
            this.modalService = modalService;
            this.translateService = translateService;
            this.inventoryBinaryService = inventoryBinaryService;
            this.inventoryService = inventoryService;
            this.filterTerm = '';
            this.reloading = false;
            this.DELETED_SUCCESS_MSG = ngxComponents.gettext('Configuration deleted.');
        }
        ConfigurationListComponent.prototype.ngOnInit = function () {
            this.loadConfigurations();
        };
        ConfigurationListComponent.prototype.loadConfigurations = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.reloading = true;
                            _a = this;
                            _b = rxjs.of;
                            return [4 /*yield*/, this.repositoryService.listRepositoryEntries(shared.RepositoryType.CONFIGURATION)];
                        case 1:
                            _a.configurations$ = _b.apply(void 0, [_c.sent()]);
                            this.reloading = false;
                            this.reset();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationListComponent.prototype.add = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.bsModalService.show(ConfigurationDetailComponent, {
                                    class: 'modal-sm',
                                    ignoreBackdropClick: true
                                }).content.result];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.loadConfigurations()];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationListComponent.prototype.edit = function (configuration) {
            return __awaiter(this, void 0, void 0, function () {
                var fileBinary, modal, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repositoryService.getBinaryFile(configuration.url, {
                                allowExternal: false
                            })];
                        case 1:
                            fileBinary = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 5, , 6]);
                            modal = this.bsModalService.show(ConfigurationDetailComponent, {
                                class: 'modal-sm',
                                ignoreBackdropClick: true,
                                initialState: {
                                    selected: configuration,
                                    version: configuration.name,
                                    deviceType: configuration.deviceType,
                                    description: configuration.description,
                                    binary: { file: fileBinary, url: configuration.url }
                                }
                            }).content;
                            modal.mo = configuration;
                            return [4 /*yield*/, modal.result];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.loadConfigurations()];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationListComponent.prototype.isBinaryFile = function (configuration) {
            return configuration.url ? !!this.inventoryBinaryService.getIdFromUrl(configuration.url) : false;
        };
        ConfigurationListComponent.prototype.getBinaryName = function (configuration) {
            return this.repositoryService.getBinaryName$(configuration.url);
        };
        ConfigurationListComponent.prototype.download = function (configuration) {
            return __awaiter(this, void 0, void 0, function () {
                var fileBinary;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repositoryService.getBinaryFile(configuration.url, {
                                allowExternal: false
                            })];
                        case 1:
                            fileBinary = _a.sent();
                            fileSaver.saveAs(fileBinary);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationListComponent.prototype.delete = function (configuration) {
            return __awaiter(this, void 0, void 0, function () {
                var title, confirmationText, hint, proceed, body, labels, ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            title = ngxComponents.gettext('Delete configuration snapshot');
                            confirmationText = ngxComponents.gettext('You are about to delete the configuration snapshot {{ name }}.');
                            hint = ngxComponents.gettext('This operation is irreversible.');
                            proceed = ngxComponents.gettext('Do you want to proceed?');
                            body = [
                                this.translateService.instant(confirmationText, {
                                    name: configuration.name
                                }),
                                this.translateService.instant(hint),
                                this.translateService.instant(proceed)
                            ].join(' ');
                            labels = {
                                ok: ngxComponents.gettext('Delete')
                            };
                            return [4 /*yield*/, this.modalService.confirm(title, body, ngxComponents.Status.DANGER, labels)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.repositoryService.delete(configuration)];
                        case 2:
                            _a.sent();
                            this.alert.success(this.DELETED_SUCCESS_MSG);
                            return [4 /*yield*/, this.loadConfigurations()];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_3 = _a.sent();
                            if (ex_3) {
                                this.alert.addServerFailure(ex_3);
                            }
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationListComponent.prototype.setPipe = function (filterTerm) {
            var _this = this;
            this.filterTerm = filterTerm;
            this.filterPipe = rxjs.pipe(operators.map(function (data) {
                _this.data =
                    filterTerm.trim().length === 0
                        ? data
                        : data.filter(function (mo) { return _this.filterContainString(mo.name, filterTerm) ||
                            _this.filterContainString(mo.configurationType, filterTerm) ||
                            _this.filterContainString(mo.deviceType, filterTerm) ||
                            _this.filterContainString(mo.description, filterTerm); });
                return _this.data;
            }));
        };
        ConfigurationListComponent.prototype.shouldShowEmptyState = function () {
            return !(this.data && this.data.length > 0);
        };
        ConfigurationListComponent.prototype.reset = function () {
            this.filter.filterTerm = '';
            this.setPipe('');
        };
        ConfigurationListComponent.prototype.filterContainString = function (name, filterTerm) {
            var term = filterTerm.toLowerCase().trim();
            return name && name.toLowerCase().indexOf(term) > -1;
        };
        return ConfigurationListComponent;
    }());
    ConfigurationListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-configuration-list',
                    template: "<c8y-title>\n  <span translate> Configuration snapshots repository </span>&nbsp;\n  <small *ngIf=\"(configurations$ | async)?.paging.totalPages === 1 && !filterTerm\">\n    {{ (configurations$ | async).data.length }}\n    <span translate> snapshots </span>\n  </small>\n  <small\n    *ngIf=\"(configurations$ | async)?.paging.totalPages > 1 && !filterTerm\"\n    [tooltip]=\"'More data available. Scroll to the bottom of the list to load it.' | translate\"\n    container=\"body\"\n  >\n    {{ (configurations$ | async).paging.pageSize }}+\n    <span translate>snapshots</span>\n  </small>\n  <small *ngIf=\"filterTerm\">\n    <span translate> Search results for </span>&nbsp;\" {{ this.filterTerm }}\"\n  </small>\n</c8y-title>\n\n<c8y-action-bar-item itemClass=\"navbar-form\">\n  <c8y-filter [icon]=\"'search'\" (onSearch)=\"setPipe($event)\"></c8y-filter>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Add configuration snapshot' | translate }}\" (click)=\"add()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add configuration snapshot' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadConfigurations()\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#configuration-repository\"></c8y-help>\n\n<!-- empty state -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"!filterTerm && (configurations$ | async)?.data.length === 0\"\n>\n  <h1 c8yIcon=\"gears\"></h1>\n  <h3 translate>There are no configuration snapshots defined</h3>\n  <p translate>Add a configuration snapshot first.</p>\n  <div>\n    <button (click)=\"add()\" class=\"btn btn-primary\" translate>Add configuration snapshot</button>\n  </div>\n  <p c8y-guide-docs>\n    <small translate ngNonBindable>\n      Find out more in the\n      <a c8y-guide-href=\"users-guide/device-management/#configuration-repository\">\n        User guide`KEEP_ORIGINAL` </a\n      >.\n    </small>\n  </p>\n</div>\n\n<!-- no results empty state -->\n<div\n  class=\"c8y-empty-state\"\n  *ngIf=\"shouldShowEmptyState() && (configurations$ | async)?.data.length > 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"search\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Refine your search terms or check your spelling.</p>\n</div>\n\n<c8y-list-group\n  class=\"m-b-24\"\n  *ngIf=\"(configurations$ | async)?.data.length > 0\"\n  [ngClass]=\"{\n    'dd-low': data && data.length ? data.length < 10 : (configurations$ | async)?.data.length < 10\n  }\"\n>\n  <c8y-li\n    [emptyActions]=\"true\"\n    class=\"page-sticky-header hidden-xs\"\n    *ngIf=\"!shouldShowEmptyState()\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <div class=\"col-2\">\n        {{ 'Configuration' | translate }}\n      </div>\n      <div class=\"col-3\">\n        {{ 'Description' | translate }}\n      </div>\n      <div class=\"col-3\">\n        {{ 'File' | translate }}\n      </div>\n      <div class=\"col-2\">\n        {{ 'Device type' | translate }}\n      </div>\n      <div class=\"col-2\">\n        {{ 'Configuration type' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n\n  <c8y-li *c8yFor=\"let configuration of configurations$; pipe: filterPipe\">\n    <c8y-li-icon icon=\"gears\"></c8y-li-icon>\n    <div class=\"content-flex-60\">\n      <button class=\"btn-clean col-2\" (click)=\"edit(configuration)\">\n        <span class=\"text-truncate\" title=\"{{ configuration.name || '-' }}\">\n          <c8y-highlight\n            [text]=\"configuration.name || '-'\"\n            elementClass=\"text-info\"\n            [pattern]=\"filterTerm\"\n          ></c8y-highlight>\n        </span>\n      </button>\n      <div class=\"col-3\">\n        <div class=\"text-label-small visible-xs-inline m-r-4\">\n          {{ 'Description' | translate }}\n        </div>\n        <small\n          class=\"text-truncate\"\n          *ngIf=\"configuration.description; else emptyDescription\"\n          title=\"configuration.description\"\n        >\n          <c8y-highlight\n            [text]=\"configuration.description || '-'\"\n            elementClass=\"text-info\"\n            [pattern]=\"filterTerm\"\n          >\n          </c8y-highlight>\n        </small>\n      </div>\n      <div class=\"col-3\">\n        <span class=\"text-truncate\">\n          <span class=\"text-label-small m-r-4 visible-xs-inline\" translate> File </span>\n          <small\n            *ngIf=\"isBinaryFile(configuration); else noFile\"\n            title=\"{{ getBinaryName(configuration) | async }}\"\n          >\n            {{ getBinaryName(configuration) | async }}\n          </small>\n          <ng-template #noFile>\n            <small title=\"{{ configuration.url }}\">\n              {{ configuration.url }}\n            </small>\n          </ng-template>\n        </span>\n      </div>\n      <div class=\"col-2\">\n        <div\n          class=\"text-truncate\"\n          title=\"{{ 'Device type' | translate }}: {{ configuration.deviceType || '-' }}\"\n        >\n          <span class=\"text-label-small visible-xs-inline m-r-4\" translate> Device type </span>\n          <span *ngIf=\"configuration.deviceType; else emptyText\">\n            <c8y-highlight\n              [text]=\"configuration.deviceType || '-'\"\n              elementClass=\"text-info\"\n              [pattern]=\"filterTerm\"\n            >\n            </c8y-highlight>\n          </span>\n        </div>\n      </div>\n      <div class=\"col-2\">\n        <div class=\"text-truncate\" title=\"{{ configuration.configurationType }}\">\n          <span class=\"label label-primary\" *ngIf=\"configuration.configurationType; else emptyText\">\n            <c8y-highlight\n              [text]=\"configuration.configurationType\"\n              elementClass=\"text-info\"\n              [pattern]=\"filterTerm\"\n            >\n            </c8y-highlight>\n          </span>\n        </div>\n      </div>\n    </div>\n    <c8y-li-action (click)=\"edit(configuration)\" icon=\"pencil\" label=\"{{ 'Edit' | translate }}\">\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"delete(configuration)\"\n      icon=\"trash-o\"\n      label=\"{{ 'Delete' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isBinaryFile(configuration)\"\n      (click)=\"download(configuration)\"\n      icon=\"download\"\n      label=\"{{ 'Download' | translate }}\"\n    >\n    </c8y-li-action>\n    <ng-template #emptyText>\n      <small class=\"text-muted\">\n        <em>{{ 'Undefined' | translate }}</em>\n      </small>\n    </ng-template>\n    <ng-template #emptyDescription>\n      <small class=\"text-muted\">\n        <em>{{ 'No description' | translate }}</em>\n      </small>\n    </ng-template>\n  </c8y-li>\n</c8y-list-group>\n"
                },] }
    ];
    ConfigurationListComponent.ctorParameters = function () { return [
        { type: ngxComponents.AlertService },
        { type: shared.RepositoryService },
        { type: modal.BsModalService },
        { type: ngxComponents.ModalService },
        { type: core$1.TranslateService },
        { type: client.InventoryBinaryService },
        { type: client.InventoryService }
    ]; };
    ConfigurationListComponent.propDecorators = {
        filter: [{ type: core.ViewChild, args: [ngxComponents.FilterInputComponent, { static: false },] }]
    };
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], ConfigurationListComponent.prototype, "getBinaryName", null);

    var ConfigurationRepositoryNavigationFactory = /** @class */ (function () {
        function ConfigurationRepositoryNavigationFactory() {
            this.node = new ngxComponents.NavigatorNode({
                label: ngxComponents.gettext('Configuration repository'),
                path: 'configuration',
                icon: 'gears',
                parent: ngxComponents.gettext('Management'),
                priority: 800
            });
        }
        ConfigurationRepositoryNavigationFactory.prototype.get = function () {
            return this.node;
        };
        return ConfigurationRepositoryNavigationFactory;
    }());
    ConfigurationRepositoryNavigationFactory.decorators = [
        { type: core.Injectable }
    ];
    ConfigurationRepositoryNavigationFactory.ctorParameters = function () { return []; };

    var ConfigurationRepositoryListModule = /** @class */ (function () {
        function ConfigurationRepositoryListModule() {
        }
        ConfigurationRepositoryListModule.forRoot = function () {
            return {
                ngModule: ConfigurationRepositoryListModule,
                providers: [
                    {
                        provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                        useClass: ConfigurationRepositoryNavigationFactory,
                        multi: true
                    },
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: [
                            {
                                path: 'configuration',
                                component: ConfigurationListComponent
                            },
                        ],
                        multi: true
                    }
                ]
            };
        };
        return ConfigurationRepositoryListModule;
    }());
    ConfigurationRepositoryListModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ngxComponents.CoreModule,
                        shared.SharedRepositoryModule,
                        tooltip.TooltipModule
                    ],
                    declarations: [
                        ConfigurationListComponent,
                        ConfigurationDetailComponent,
                    ],
                    entryComponents: [
                        ConfigurationListComponent,
                        ConfigurationDetailComponent,
                    ]
                },] }
    ];

    var ConfigurationRepositoryModule = /** @class */ (function () {
        function ConfigurationRepositoryModule() {
        }
        return ConfigurationRepositoryModule;
    }());
    ConfigurationRepositoryModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        ngxComponents.CoreModule,
                        ngxComponents.FormsModule,
                        ConfigurationRepositoryListModule.forRoot(),
                        ConfigurationRepositoryDeviceTabModule.forRoot()
                    ],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ConfigurationDetailComponent = ConfigurationDetailComponent;
    exports.ConfigurationFilterPipe = ConfigurationFilterPipe;
    exports.ConfigurationListComponent = ConfigurationListComponent;
    exports.ConfigurationPreviewComponent = ConfigurationPreviewComponent;
    exports.ConfigurationRepositoryDeviceTabModule = ConfigurationRepositoryDeviceTabModule;
    exports.ConfigurationRepositoryListModule = ConfigurationRepositoryListModule;
    exports.ConfigurationRepositoryModule = ConfigurationRepositoryModule;
    exports.DeviceConfigurationComponent = DeviceConfigurationComponent;
    exports.DeviceConfigurationGuard = DeviceConfigurationGuard;
    exports.DeviceConfigurationListComponent = DeviceConfigurationListComponent;
    exports.DeviceConfigurationService = DeviceConfigurationService;
    exports.SaveToRepositoryComponent = SaveToRepositoryComponent;
    exports.SourceCodePreviewComponent = SourceCodePreviewComponent;
    exports.TextBasedConfigurationComponent = TextBasedConfigurationComponent;
    exports["ɵa"] = ConfigurationRepositoryListModule;
    exports["ɵb"] = ConfigurationListComponent;
    exports["ɵc"] = ConfigurationDetailComponent;
    exports["ɵd"] = ConfigurationRepositoryNavigationFactory;
    exports["ɵe"] = ConfigurationRepositoryDeviceTabModule;
    exports["ɵf"] = DeviceConfigurationComponent;
    exports["ɵg"] = TextBasedConfigurationComponent;
    exports["ɵh"] = DeviceConfigurationService;
    exports["ɵi"] = DeviceConfigurationListComponent;
    exports["ɵj"] = ConfigurationPreviewComponent;
    exports["ɵk"] = ConfigurationFilterPipe;
    exports["ɵl"] = SaveToRepositoryComponent;
    exports["ɵm"] = SourceCodePreviewComponent;
    exports["ɵn"] = DeviceConfigurationGuard;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-repository-configuration.umd.js.map
