(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/popover'), require('@angular/forms'), require('@angular/router'), require('@c8y/client'), require('@ngx-translate/core'), require('lodash-es'), require('@c8y/ngx-components/datapoint-library/services'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/datapoint-library', ['exports', '@angular/core', '@c8y/ngx-components', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/popover', '@angular/forms', '@angular/router', '@c8y/client', '@ngx-translate/core', 'lodash-es', '@c8y/ngx-components/datapoint-library/services', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["datapoint-library"] = {}), global.ng.core, global.c8y["ngx-components"], global.dropdown, global.popover, global.ng.forms, global.ng.router, global.client, global.core$1, global.lodashEs, global.c8y["ngx-components"]["datapoint-library"].services, global.rxjs, global.rxjs.operators));
})(this, (function (exports, core, ngxComponents, dropdown, popover, forms, router, client, core$1, lodashEs, services, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var pathToDatapointLibrary = 'datapointlibrary';
    var DATAPOINT_LIBRARY_CONFIG = new core.InjectionToken('DatapointLibraryOptions');

    var DatapointLibraryDetailsComponent = /** @class */ (function () {
        function DatapointLibraryDetailsComponent(activatedRoute, inventory, formBuilder, alertService, router, translate, colorService, parser, config) {
            this.activatedRoute = activatedRoute;
            this.inventory = inventory;
            this.formBuilder = formBuilder;
            this.alertService = alertService;
            this.router = router;
            this.translate = translate;
            this.colorService = colorService;
            this.parser = parser;
            this.config = config;
            this.path = pathToDatapointLibrary;
            this.isLoading = true;
            this.rangeConfig = {};
            this.initForm();
        }
        DatapointLibraryDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.routeSub = this.activatedRoute.parent.data.subscribe(function (data) {
                _this.load(data);
            });
        };
        DatapointLibraryDetailsComponent.prototype.ngOnDestroy = function () {
            if (this.routeSub) {
                this.routeSub.unsubscribe();
            }
        };
        DatapointLibraryDetailsComponent.prototype.save = function (value) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var kpiValues, kpi, cleanedUpKpi, mo, res, res, e_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            kpiValues = this.extractKpiValuesFromFormValue(value);
                            kpi = Object.assign({}, ((_a = this.datapoint) === null || _a === void 0 ? void 0 : _a.c8y_Kpi) || {}, kpiValues);
                            cleanedUpKpi = this.removeNullValues(kpi);
                            mo = {
                                c8y_Kpi: cleanedUpKpi,
                                c8y_Global: value.c8y_Global ? {} : null
                            };
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 6, , 7]);
                            if (!((_b = this.datapoint) === null || _b === void 0 ? void 0 : _b.id)) return [3 /*break*/, 3];
                            mo.id = this.datapoint.id;
                            return [4 /*yield*/, this.inventory.update(mo)];
                        case 2:
                            res = _c.sent();
                            this.datapointUpdate(res.data);
                            this.alertService.saveSuccess(ngxComponents.gettext('Data point library entry'))();
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.inventory.create(mo)];
                        case 4:
                            res = _c.sent();
                            this.datapointUpdate(res.data);
                            this.alertService.createSuccess(ngxComponents.gettext('Data point library entry'))();
                            _c.label = 5;
                        case 5:
                            this.navigateBackToList();
                            return [3 /*break*/, 7];
                        case 6:
                            e_1 = _c.sent();
                            this.alertService.addServerFailure(e_1);
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        DatapointLibraryDetailsComponent.prototype.cancel = function () {
            this.navigateBackToList();
        };
        DatapointLibraryDetailsComponent.prototype.formChange = function () {
            if (this.formGroup.invalid) {
                return;
            }
            var kpiValues = this.extractKpiValuesFromFormValue(this.formGroup.value);
            this.rangeConfig = Object.assign({ orientation: 'horizontal' }, kpiValues);
        };
        DatapointLibraryDetailsComponent.prototype.navigateBackToList = function () {
            return this.router.navigate([pathToDatapointLibrary]);
        };
        DatapointLibraryDetailsComponent.prototype.datapointUpdate = function (tmpDatapoint) {
            var datapoint = this.parser.parseDatapoint(tmpDatapoint);
            this.datapoint = datapoint;
            var _c = datapoint.c8y_Kpi, fragment = _c.fragment, series = _c.series, description = _c.description, unit = _c.unit, target = _c.target, label = _c.label, color = _c.color, yellowRangeMin = _c.yellowRangeMin, yellowRangeMax = _c.yellowRangeMax, redRangeMin = _c.redRangeMin, redRangeMax = _c.redRangeMax, min = _c.min, max = _c.max;
            this.formGroup.patchValue({
                fragment: fragment,
                series: series,
                description: description,
                unit: unit,
                target: target,
                label: label,
                color: color,
                range: { min: min, max: max },
                yellowRange: { min: yellowRangeMin, max: yellowRangeMax },
                redRange: { min: redRangeMin, max: redRangeMax },
                c8y_Global: !!datapoint.c8y_Global
            });
            this.formChange();
        };
        DatapointLibraryDetailsComponent.prototype.extractKpiValuesFromFormValue = function (formValue) {
            var fragment = formValue.fragment, series = formValue.series, description = formValue.description, unit = formValue.unit, target = formValue.target, label = formValue.label, color = formValue.color;
            return {
                fragment: fragment,
                series: series,
                description: description,
                unit: unit,
                target: target,
                label: label,
                color: color,
                yellowRangeMin: lodashEs.get(formValue, 'yellowRange.min'),
                yellowRangeMax: lodashEs.get(formValue, 'yellowRange.max'),
                redRangeMin: lodashEs.get(formValue, 'redRange.min'),
                redRangeMax: lodashEs.get(formValue, 'redRange.max'),
                min: lodashEs.get(formValue, 'range.min'),
                max: lodashEs.get(formValue, 'range.max')
            };
        };
        DatapointLibraryDetailsComponent.prototype.load = function (data) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _c, fragment, series, humanize, label, currentDate, color, contextData, id, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            this.isLoading = true;
                            this.formGroup.reset();
                            _c = this.activatedRoute.snapshot.queryParams, fragment = _c.fragment, series = _c.series;
                            humanize = new ngxComponents.HumanizePipe();
                            label = fragment && series
                                ? humanize.transform(fragment + " => " + series)
                                : this.translate.instant(ngxComponents.gettext('New data point template'));
                            currentDate = new Date().toISOString();
                            return [4 /*yield*/, this.colorService.generateColor(currentDate)];
                        case 1:
                            color = _e.sent();
                            contextData = (data && data.contextData) || {
                                c8y_Kpi: {
                                    label: label,
                                    fragment: fragment,
                                    series: series,
                                    color: color
                                },
                                c8y_Global: !((_a = this.config) === null || _a === void 0 ? void 0 : _a.doNotAddGlobalFragmentByDefault) ? {} : null
                            };
                            id = contextData.id;
                            if (!id) return [3 /*break*/, 3];
                            _d = this.datapointUpdate;
                            return [4 /*yield*/, this.inventory.detail(id)];
                        case 2:
                            _d.apply(this, [(_e.sent()).data]);
                            return [3 /*break*/, 4];
                        case 3:
                            this.datapointUpdate(contextData);
                            _e.label = 4;
                        case 4:
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        DatapointLibraryDetailsComponent.prototype.initForm = function () {
            var _a;
            this.range = this.formBuilder.group({
                min: [undefined, []],
                max: [undefined, []]
            }, { validators: [ngxComponents.C8yValidators.minMaxValidator(), ngxComponents.C8yValidators.requireBothMinAndMax()] });
            this.redRange = this.formBuilder.group({
                min: [undefined, []],
                max: [undefined, []]
            }, { validators: [ngxComponents.C8yValidators.minMaxValidator(), ngxComponents.C8yValidators.requireBothMinAndMax()] });
            this.yellowRange = this.formBuilder.group({
                min: [undefined, []],
                max: [undefined, []]
            }, { validators: [ngxComponents.C8yValidators.minMaxValidator(), ngxComponents.C8yValidators.requireBothMinAndMax()] });
            this.formGroup = this.formBuilder.group({
                color: ['', [forms.Validators.required, forms.Validators.minLength(4)]],
                label: ['', [forms.Validators.required, forms.Validators.minLength(1), forms.Validators.maxLength(120)]],
                description: ['', []],
                fragment: [
                    '',
                    [
                        forms.Validators.required,
                        forms.Validators.minLength(1),
                        forms.Validators.maxLength(120),
                        forms.Validators.pattern(/^[^.]*$/)
                    ]
                ],
                series: [
                    '',
                    [
                        forms.Validators.required,
                        forms.Validators.minLength(1),
                        forms.Validators.maxLength(120),
                        forms.Validators.pattern(/^[^.]*$/)
                    ]
                ],
                range: this.range,
                unit: [undefined, []],
                target: [undefined, []],
                redRange: this.redRange,
                yellowRange: this.yellowRange,
                c8y_Global: [!((_a = this.config) === null || _a === void 0 ? void 0 : _a.doNotAddGlobalFragmentByDefault), []]
            }, {
                validators: [
                    ngxComponents.C8yValidators.withinScale('redRange.min'),
                    ngxComponents.C8yValidators.withinScale('redRange.max'),
                    ngxComponents.C8yValidators.withinScale('yellowRange.min'),
                    ngxComponents.C8yValidators.withinScale('yellowRange.max'),
                    ngxComponents.C8yValidators.withinScale('target')
                ]
            });
        };
        DatapointLibraryDetailsComponent.prototype.removeNullValues = function (value) {
            // remove null values before sending data to backend
            var cleanedupValues = Object.assign({}, value);
            Object.keys(cleanedupValues).forEach(function (key) {
                if (cleanedupValues[key] === null) {
                    delete cleanedupValues[key];
                }
            });
            return cleanedupValues;
        };
        return DatapointLibraryDetailsComponent;
    }());
    DatapointLibraryDetailsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-datapoint-library-details',
                    template: "<c8y-title *ngIf=\"!isLoading\">\n  {{ formGroup.value?.label }}\n  <small *ngIf=\"formGroup.value?.fragment && formGroup.value?.series\"\n    >{{ formGroup.value?.fragment }} / {{ formGroup.value?.series }}</small\n  >\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-data-points'\"\n    [label]=\"'Data point library' | translate\"\n    [path]=\"path\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<form\n  (ngSubmit)=\"formGroup.valid && save(formGroup.value)\"\n  (change)=\"formChange()\"\n  [formGroup]=\"formGroup\"\n  class=\"card content-fullpage card--grid grid__col--6-6--md grid__row--fit-auto\"\n  novalidate\n>\n  <div class=\"card-header large-padding separator grid__col--fullspan\">\n    <h4 class=\"card-title\">\n      {{ formGroup.value?.label }}\n    </h4>\n  </div>\n  <div *ngIf=\"!isLoading\" class=\"d-contents\">\n    <div class=\"inner-scroll bg-white flex-grow\">\n      <div class=\"card-block large-padding\">\n        <div class=\"d-flex\">\n          <c8y-form-group>\n            <label translate>Color</label>\n            <div class=\"data-point-color form-control\">\n              <div class=\"c8y-colorpicker\">\n                <input type=\"color\" name=\"color\" formControlName=\"color\" />\n                <span [style.background-color]=\"formGroup.value?.color\"></span>\n              </div>\n            </div>\n          </c8y-form-group>\n          <c8y-form-group class=\"flex-grow p-l-8\">\n            <label translate>Label</label>\n            <input\n              class=\"form-control\"\n              formControlName=\"label\"\n              name=\"label\"\n              [placeholder]=\"'e.g. Temperature' | translate\"\n              type=\"text\"\n            />\n            <c8y-messages [show]=\"formGroup.controls?.label?.touched && formGroup.controls?.label?.errors\">\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n        <!-- TODO: add description to data point library templates -->\n        <c8y-form-group>\n          <label translate>Description</label>\n          <textarea\n            class=\"form-control\"\n            formControlName=\"description\"\n            name=\"description\"\n            [placeholder]=\"'e.g. Ambient Temperature in Celsius' | translate\"\n            rows=\"3\"\n          ></textarea>\n        </c8y-form-group>\n\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <c8y-form-group>\n              <label translate>Fragment</label>\n              <input\n                class=\"form-control\"\n                name=\"fragment\"\n                formControlName=\"fragment\"\n                [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'c8y_Temperature' }\"\n                type=\"text\"\n              />\n              <c8y-messages [show]=\"formGroup.controls?.fragment?.touched && formGroup.controls?.fragment?.errors\">\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n\n          <div class=\"col-sm-6\">\n            <c8y-form-group>\n              <label translate>Series</label>\n              <input\n                class=\"form-control\"\n                formControlName=\"series\"\n                name=\"series\"\n                [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'T' }\"\n                type=\"text\"\n              />\n              <c8y-messages [show]=\"formGroup.controls?.series?.touched && formGroup.controls?.series?.errors\">\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n        </div>\n        <div class=\"row\" *ngIf=\"config?.showCheckboxForGlobalFragment\">\n          <div class=\"col-sm-6\">\n            <c8y-form-group>\n              <label class=\"c8y-checkbox\">\n                <input\n                  name=\"c8y_Global\"\n                  formControlName=\"c8y_Global\"\n                  type=\"checkbox\"\n                />\n                <span></span>\n                <span translate>Globally available</span>\n                <button\n                  class=\"btn btn-clean\"\n                  [popover]=\"'Will make this entry available to all users on the tenant if checked.' | translate\"\n                  container=\"body\"\n                  type=\"button\"\n                  [outsideClick]=\"true\"\n                >\n                  <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n                </button>\n              </label>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"inner-scroll bg-gray-white\">\n      <div class=\"card-block large-padding\">\n        <fieldset class=\"c8y-fieldset\">\n          <legend translate>Preview</legend>\n          <c8y-range-display [config]=\"rangeConfig\" class=\"m-b-16 d-block\"></c8y-range-display>\n        </fieldset>\n        <fieldset class=\"c8y-fieldset\">\n          <legend translate>Range</legend>\n          <div class=\"row\" formGroupName=\"range\">\n            <div class=\"col-md-6\">\n              <c8y-form-group\n                [ngClass]=\"{ 'has-error': range?.touched && range?.controls?.min?.errors }\"\n              >\n                <label translate>Min</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"min\"\n                  formControlName=\"min\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 0 }\"\n                />\n                <c8y-messages [show]=\"range?.touched && range.controls?.min?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-md-6\">\n              <c8y-form-group\n                [ngClass]=\"{ 'has-error': range?.touched && range?.controls?.max?.errors }\"\n              >\n                <label translate>Max</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"max\"\n                  formControlName=\"max\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 100 }\"\n                />\n                <c8y-messages [show]=\"range?.touched && range.controls?.max?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <c8y-form-group>\n                <label translate>Unit</label>\n                <input\n                  class=\"form-control\"\n                  name=\"unit\"\n                  formControlName=\"unit\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: '\u00BAC' }\"\n                />\n                <c8y-messages [show]=\"formGroup.controls?.unit?.touched && formGroup.controls?.unit?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n\n            <div class=\"col-md-6\">\n              <c8y-form-group\n                [ngClass]=\"{\n                  'has-error':\n                    (range?.touched || formGroup.controls?.target?.touched) &&\n                    formGroup.controls?.target?.errors\n                }\"\n              >\n                <label translate>Target</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"target\"\n                  formControlName=\"target\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 25 }\"\n                />\n                <c8y-messages [show]=\"(range?.touched || formGroup.controls?.target?.touched) && formGroup.controls?.target?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset class=\"c8y-fieldset\" formGroupName=\"yellowRange\">\n          <legend translate>Yellow range</legend>\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <c8y-form-group\n                [ngClass]=\"{\n                  'has-error':\n                    (range?.touched || yellowRange?.touched) && yellowRange?.controls?.min?.errors\n                }\"\n              >\n                <label translate>Min</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"min\"\n                  formControlName=\"min\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 50 }\"\n                />\n                <c8y-messages [show]=\"(range?.touched || yellowRange?.touched) && yellowRange.controls?.min?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n\n            <div class=\"col-md-6\">\n              <c8y-form-group\n                [ngClass]=\"{\n                  'has-error':\n                    (range?.touched || yellowRange?.touched) && yellowRange?.controls?.max?.errors\n                }\"\n              >\n                <label translate>Max</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"max\"\n                  formControlName=\"max\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 75 }\"\n                />\n                <c8y-messages [show]=\"(range?.touched || yellowRange?.touched) && yellowRange.controls?.max?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset class=\"c8y-fieldset\" formGroupName=\"redRange\">\n          <legend translate>Red range</legend>\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <c8y-form-group\n                [ngClass]=\"{\n                  'has-error':\n                    (range?.touched || redRange?.touched) && redRange?.controls?.min?.errors\n                }\"\n              >\n                <label translate>Min</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"min\"\n                  formControlName=\"min\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 75 }\"\n                />\n                <c8y-messages [show]=\"(range?.touched || redRange?.touched) && redRange.controls?.min?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n\n            <div class=\"col-md-6\">\n              <c8y-form-group\n                [ngClass]=\"{\n                  'has-error':\n                    (range?.touched || redRange?.touched) && redRange?.controls?.max?.errors\n                }\"\n              >\n                <label translate>Max</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"max\"\n                  formControlName=\"max\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 100 }\"\n                />\n                <c8y-messages [show]=\"(range?.touched || redRange?.touched) && redRange.controls?.max?.errors\">\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-footer separator grid__col--fullspan\">\n    <button (click)=\"cancel()\" class=\"btn btn-default\" [title]=\"'Cancel' | translate\" type=\"button\">\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      *c8yIfAllowed=\"['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_UPDATE']; allowAny: true\"\n      [disabled]=\"formGroup.invalid || formGroup.pristine\"\n      class=\"btn btn-primary btn-form\"\n      [title]=\"'Save' | translate\"\n      type=\"submit\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n"
                },] }
    ];
    DatapointLibraryDetailsComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: client.InventoryService },
        { type: forms.FormBuilder },
        { type: ngxComponents.AlertService },
        { type: router.Router },
        { type: core$1.TranslateService },
        { type: ngxComponents.ColorService },
        { type: services.DatapointParserService },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [DATAPOINT_LIBRARY_CONFIG,] }] }
    ]; };

    var DatapointLibraryListComponent = /** @class */ (function () {
        function DatapointLibraryListComponent(inventory, router, modalService, translateService, alertService, parser) {
            var _this = this;
            this.inventory = inventory;
            this.router = router;
            this.modalService = modalService;
            this.translateService = translateService;
            this.alertService = alertService;
            this.parser = parser;
            this.listClass = '';
            this.isLoading = true;
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.datapoints$ = this.reload$.pipe(operators.tap(function () {
                _this.isLoading = true;
            }), operators.switchMap(function () { return _this.getDatapoints(); }), operators.tap(function () {
                _this.isLoading = false;
            }), operators.shareReplay());
            this.parsePipe = rxjs.pipe(operators.map(function (data) { return _this.parser.parseDatapoints(data); }));
        }
        DatapointLibraryListComponent.prototype.getDatapoints = function () {
            return this.inventory.list({ pageSize: 20, fragmentType: 'c8y_Kpi', withTotalPages: true });
        };
        DatapointLibraryListComponent.prototype.addDatapointEntry = function () {
            this.router.navigate([pathToDatapointLibrary, 'new']);
        };
        DatapointLibraryListComponent.prototype.editDatapointEntry = function (entry) {
            this.router.navigate([pathToDatapointLibrary, entry.id]);
        };
        DatapointLibraryListComponent.prototype.removeDatapointEntry = function (entry) {
            return __awaiter(this, void 0, void 0, function () {
                var e_1, e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.modalService.confirm(ngxComponents.gettext('Delete data point'), this.translateService.instant(ngxComponents.gettext('You are about to delete data point "{{ dpLabel }}". Do you want to proceed?'), { dpLabel: entry.c8y_Kpi.label }), 'danger')];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            return [2 /*return*/];
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, this.inventory.delete(entry.id)];
                        case 4:
                            _a.sent();
                            this.reload$.next();
                            return [3 /*break*/, 6];
                        case 5:
                            e_2 = _a.sent();
                            this.alertService.addServerFailure(e_2);
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        DatapointLibraryListComponent.prototype.reload = function () {
            this.reload$.next();
        };
        return DatapointLibraryListComponent;
    }());
    DatapointLibraryListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-datapoint-library-list',
                    template: "<c8y-title>Data point library</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\" *c8yIfAllowed=\"['ROLE_INVENTORY_ADMIN']\" [priority]=\"1\">\n  <button (click)=\"addDatapointEntry()\" class=\"btn btn-link\" [title]=\"'Add data point' | translate\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add data point' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" [priority]=\"0\">\n  <button\n    (click)=\"reload()\"\n    class=\"btn btn-link\"\n    [disabled]=\"isLoading\"\n    [title]=\"'Reload' | translate\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': isLoading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(datapoints$ | async)?.data?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/cockpit/#data-point-library\"></c8y-help>\n\n<!-- empty state -->\n<div *ngIf=\"(datapoints$ | async)?.data?.length === 0\" class=\"c8y-empty-state text-center\">\n  <h1 class=\"c8y-icon c8y-icon-modules c8y-icon-duocolor\"></h1>\n  <h3 translate>No data points to display.</h3>\n  <p translate>Add a data point using the button below.</p>\n  <p>\n    <button\n      (click)=\"addDatapointEntry()\"\n      class=\"btn btn-primary\"\n      [title]=\"'Add data point' | translate\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      {{ 'Add data point' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- loading indicator -->\n<div *ngIf=\"isLoading\" class=\"d-flex j-c-center\">\n  <c8y-loading></c8y-loading>\n</div>\n\n<div\n  class=\"card-group\"\n  [ngClass]=\"listClass\"\n  *ngIf=\"!isLoading && (datapoints$ | async) as datapoints\"\n>\n  <div class=\"page-sticky-header hidden-xs\" *ngIf=\"datapoints.data.length\">\n    <div class=\"flex-row\">\n      <div class=\"card-header\">\n        <div class=\"card-icon\"></div>\n        <p translate>Label</p>\n      </div>\n      <div class=\"card-actions\"></div>\n      <div class=\"card-block p-l-0\">\n        <div class=\"col-sm-3 p-l-16\">\n          <p translate>Fragment</p>\n        </div>\n        <div class=\"col-sm-2\">\n          <p translate>Series</p>\n        </div>\n        <div class=\"col-sm-1\">\n          <span translate>Unit</span>\n        </div>\n        <div class=\"col-sm-2\">\n          <span translate>Target</span>\n        </div>\n        <div class=\"col-sm-4\">\n          <span translate>Range</span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *c8yFor=\"let datapoint of datapoints; loadMore: 'hidden'; pipe: parsePipe\" class=\"col-sm-6 col-md-4 col-lg-3 col-xs-12\">\n    <div class=\"card pointer\" (click)=\"editDatapointEntry(datapoint)\">\n      <div class=\"card-actions\" (click)=\"$event.stopPropagation()\">\n        <div class=\"dropdown settings pull-right\" dropdown>\n          <button\n            [title]=\"'Actions' | translate\"\n            type=\"button\"\n            class=\"dropdown-toggle c8y-dropdown\"\n            dropdownToggle\n          >\n            <i c8yIcon=\"ellipsis-v\"></i>\n          </button>\n          <ul class=\"dropdown-menu\" *dropdownMenu>\n            <li>\n              <button\n                type=\"button\"\n                [title]=\"'Edit' | translate\"\n                (click)=\"editDatapointEntry(datapoint)\"\n              >\n                <i c8yIcon=\"pencil\"></i>\n                <span translate>Edit</span>\n              </button>\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                [title]=\"'Remove' | translate\"\n                (click)=\"removeDatapointEntry(datapoint)\"\n              >\n                <i c8yIcon=\"trash\"></i>\n                <span translate>Remove</span>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"card-header separator\">\n        <div class=\"card-icon\">\n          <i c8yIcon=\"circle\" [style.color]=\"datapoint.c8y_Kpi?.color\"></i>\n        </div>\n        <div class=\"card-title text-truncate\" [title]=\"datapoint.c8y_Kpi?.label\">\n          {{ datapoint.c8y_Kpi?.label }}\n        </div>\n      </div>\n      <div class=\"card-block bg-gray-white p-b-24 card-hidden-list\">\n        <div class=\"col-sm-3 col-md-2 \">\n          <c8y-range-display [config]=\"datapoint.c8y_Kpi\" [display]=\"'compact'\"></c8y-range-display>\n        </div>\n        </div>\n        <div class=\"card-block\">\n        <div class=\"col-sm-3 text-truncate\">\n          <span>\n            <label class=\"text-label-small m-r-4\" translate>Fragment</label>\n            <span [title]=\"datapoint.c8y_Kpi?.fragment\">\n              {{ datapoint.c8y_Kpi?.fragment }}\n            </span>\n          </span>\n        </div>\n        <div class=\"col-sm-2 text-truncate\">\n          <label class=\"text-label-small m-r-4\" translate>Series</label>\n          <span [title]=\"datapoint.c8y_Kpi?.series\">{{ datapoint.c8y_Kpi?.series }}</span>\n        </div>\n        <div class=\"col-sm-1 text-truncate card-hidden-grid\">\n          <span *ngIf=\"datapoint.c8y_Kpi?.unit\">\n            <label class=\"text-label-small m-r-4\" translate>Unit</label>\n            <span [title]=\"datapoint.c8y_Kpi?.unit\">{{ datapoint.c8y_Kpi?.unit }}</span>\n          </span>\n        </div>\n        <div class=\"col-sm-2 text-truncate\">\n          <span *ngIf=\"datapoint.c8y_Kpi?.target\">\n            <label class=\"text-label-small m-r-4\" translate>Target</label>\n            <span [title]=\"datapoint.c8y_Kpi?.target\">{{ datapoint.c8y_Kpi?.target }}</span>\n          </span>\n        </div>\n        <div class=\"col-sm-4 card-hidden-grid\">\n          <c8y-range-display [config]=\"datapoint.c8y_Kpi\" [display]=\"'inline'\"></c8y-range-display>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    DatapointLibraryListComponent.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: router.Router },
        { type: ngxComponents.ModalService },
        { type: core$1.TranslateService },
        { type: ngxComponents.AlertService },
        { type: services.DatapointParserService }
    ]; };

    var DatapointLibraryModule = /** @class */ (function () {
        function DatapointLibraryModule() {
        }
        DatapointLibraryModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: DatapointLibraryModule,
                providers: [
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: [
                            {
                                path: pathToDatapointLibrary,
                                component: DatapointLibraryListComponent
                            },
                            {
                                context: ngxComponents.ViewContext.DatapointLibrary,
                                path: 'details',
                                component: DatapointLibraryDetailsComponent,
                                label: ngxComponents.gettext('Details'),
                                icon: 'palette',
                                priority: 500
                            }
                        ],
                        multi: true
                    },
                    {
                        provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                        useValue: [
                            new ngxComponents.NavigatorNode({
                                parent: ngxComponents.gettext('Configuration'),
                                label: ngxComponents.gettext('Data point library'),
                                featureId: 'dataPointLibrary',
                                path: pathToDatapointLibrary,
                                icon: 'c8y-data-points',
                                routerLinkExact: false
                            })
                        ],
                        multi: true
                    },
                    {
                        provide: DATAPOINT_LIBRARY_CONFIG,
                        useValue: config
                    }
                ]
            };
        };
        return DatapointLibraryModule;
    }());
    DatapointLibraryModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [ngxComponents.CoreModule, dropdown.BsDropdownModule, popover.PopoverModule],
                    declarations: [DatapointLibraryListComponent, DatapointLibraryDetailsComponent],
                    exports: [DatapointLibraryListComponent, DatapointLibraryDetailsComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DATAPOINT_LIBRARY_CONFIG = DATAPOINT_LIBRARY_CONFIG;
    exports.DatapointLibraryDetailsComponent = DatapointLibraryDetailsComponent;
    exports.DatapointLibraryListComponent = DatapointLibraryListComponent;
    exports.DatapointLibraryModule = DatapointLibraryModule;
    exports.pathToDatapointLibrary = pathToDatapointLibrary;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-datapoint-library.umd.js.map
