{"version":3,"file":"c8y-ngx-components-operations-status-filter.umd.js","sources":["../../operations/status-filter/status-filter.component.ts","../../operations/status-filter/status-filter.module.ts","../../operations/status-filter/c8y-ngx-components-operations-status-filter.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { StatusOption, OperationStatusOptionsMap } from '@c8y/ngx-components/operations/shared';\n\n@Component({\n  selector: 'c8y-status-filter',\n  templateUrl: './status-filter.component.html'\n})\nexport class StatusFilterComponent {\n  statusOptions: Array<{ selected: boolean; option: StatusOption }> = [];\n\n  /** List of filter options to be displayed */\n  @Input() set options(options: OperationStatusOptionsMap) {\n    this.statusOptions = (Object.values(options) || []).map(option => ({\n      selected: false,\n      option\n    }));\n  }\n\n  /**\n   * Allows multiple options to be active simultaneosly.\n   */\n  @Input('multiple') set _multiple(multiple: boolean) {\n    this.multiple = coerceBooleanProperty(multiple);\n  }\n\n  /** Display the filter as a small button group */\n  @Input('small') set _small(small: boolean) {\n    this.small = coerceBooleanProperty(small);\n  }\n\n  @HostBinding('class.btn-group-sm') get displaySmall() {\n    return this.small;\n  }\n\n  @Output() onFilterChanged: EventEmitter<StatusOption[]> = new EventEmitter();\n\n  isAllButtonSelected: boolean = true;\n\n  private multiple: boolean;\n  private small: boolean;\n\n  changeFilter(option: { selected: boolean; option: StatusOption }) {\n    this.isAllButtonSelected = false;\n    let emitNeeded: boolean = false;\n\n    if (this.multiple) {\n      option.selected = !option.selected;\n      emitNeeded = true;\n    } else if (!option.selected) {\n      option.selected = true;\n      this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));\n      emitNeeded = true;\n    }\n\n    if (emitNeeded) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  removeFilter() {\n    this.isAllButtonSelected = true;\n    this.statusOptions.forEach(op => (op.selected = false));\n\n    this.emitSelectedOptions();\n  }\n\n  /**\n   * Allows the filter to be initalliy displayed with some preset filters.\n   *\n   * @param filters An `StatusOption` array defining filter options to be preset.\n   * @param emit  (optional) If `true` component will emit `onFilterChanged` event.\n   */\n  preset(filters: StatusOption[], emit: boolean = true) {\n    let firstSelected: boolean = false;\n\n    this.statusOptions.forEach(option => (option.selected = false));\n\n    this.statusOptions\n      .filter(option => (filters || []).map(o => o.label).includes(option.option.label))\n      .filter(() => {\n        // only first option passed will be set in single selection mode\n        const include: boolean = this.multiple || !firstSelected;\n        if (include) {\n          firstSelected = true;\n        }\n\n        return include;\n      })\n      .forEach(option => (option.selected = true));\n\n    this.isAllButtonSelected = !(filters && filters.length);\n\n    if (emit) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  reset() {\n    this.removeFilter();\n  }\n\n  activeFilters(): StatusOption[] {\n    return this.statusOptions.filter(option => option.selected).map(option => option.option);\n  }\n\n  isFilterApplied(): boolean {\n    return this.statusOptions.some(option => option.selected);\n  }\n\n  private emitSelectedOptions() {\n    this.onFilterChanged.emit(\n      this.statusOptions.filter(option => option.selected).map(option => option.option)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { StatusFilterComponent } from './status-filter.component';\n\n/**\n * This module provides a component for selecting status filter.\n */\n@NgModule({\n  imports: [CoreModule, TooltipModule, BsDropdownModule],\n  declarations: [StatusFilterComponent],\n  entryComponents: [StatusFilterComponent],\n  exports: [StatusFilterComponent]\n})\nexport class StatusFilterModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["EventEmitter","coerceBooleanProperty","Component","Input","HostBinding","Output","NgModule","CoreModule","TooltipModule","BsDropdownModule"],"mappings":"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"}