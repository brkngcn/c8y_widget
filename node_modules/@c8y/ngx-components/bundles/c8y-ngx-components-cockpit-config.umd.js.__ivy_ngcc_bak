(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@c8y/ngx-components/ecosystem'), require('@c8y/ngx-components/assets-navigator'), require('ngx-bootstrap/popover'), require('@c8y/client'), require('lodash-es'), require('rxjs/operators'), require('@c8y/client'), require('@angular/cdk/stepper')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/cockpit-config', ['exports', '@angular/core', '@c8y/ngx-components', '@c8y/ngx-components/ecosystem', '@c8y/ngx-components/assets-navigator', 'ngx-bootstrap/popover', '@c8y/client', 'lodash-es', 'rxjs/operators', '@c8y/client', '@angular/cdk/stepper'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["cockpit-config"] = {}), global.ng.core, global.c8y["ngx-components"], global.c8y["ngx-components"].ecosystem, global.c8y["ngx-components"]["assets-navigator"], global.popover, global.client, global.lodashEs, global.rxjs.operators, global.i3, global.ng.cdk.stepper));
})(this, (function (exports, i0, i1, i2, i2$1, popover, client, lodashEs, operators, i3, stepper) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    var DEFAULT_HOME_DASHBOARD_NAME = 'home-cockpit1';
    var USER_HOME_DASHBOARD_NAME = 'home-cockpit-user';
    var DEFAULT_CONFIG = {
        rootNodes: [],
        features: {
            alarms: true,
            dataExplorer: true,
            groups: true,
            reports: true,
            exports: true,
            dataPointLibrary: true,
            globalSmartRules: true,
            smartRules: true,
            subassets: true,
            search: true
        },
        hideNavigator: false,
        homeDashboardName: DEFAULT_HOME_DASHBOARD_NAME,
        userSpecificHomeDashboard: false
    };
    exports.HomeDashboardType = void 0;
    (function (HomeDashboardType) {
        /**
         * Shared by all Cockpit apps
         */
        HomeDashboardType[HomeDashboardType["DEFAULT"] = 0] = "DEFAULT";
        /**
         * Only for the current Cockpit.
         */
        HomeDashboardType[HomeDashboardType["APP"] = 1] = "APP";
        /**
         * Only for the current user.
         */
        HomeDashboardType[HomeDashboardType["USER"] = 2] = "USER";
    })(exports.HomeDashboardType || (exports.HomeDashboardType = {}));
    var COCKPIT_CONFIG_PATH = 'cockpit-application-configuration';

    var CockpitConfigGuard = /** @class */ (function () {
        function CockpitConfigGuard(permissions, appState, ecosystemService) {
            this.permissions = permissions;
            this.appState = appState;
            this.ecosystemService = ecosystemService;
            this.configNode = new i1.NavigatorNode({
                path: "/" + COCKPIT_CONFIG_PATH,
                parent: i1.gettext('Configuration'),
                label: i1.gettext('App configuration'),
                icon: 'imac-settings',
                preventDuplicates: true
            });
        }
        CockpitConfigGuard.prototype.get = function () {
            if (this.canActivate()) {
                return this.configNode;
            }
            return;
        };
        CockpitConfigGuard.prototype.canActivate = function () {
            return (this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
                this.ecosystemService.isOwner(this.appState.currentApplication.value));
        };
        return CockpitConfigGuard;
    }());
    CockpitConfigGuard.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function CockpitConfigGuard_Factory() { return new CockpitConfigGuard(i0__namespace.ɵɵinject(i1__namespace.Permissions), i0__namespace.ɵɵinject(i1__namespace.AppStateService), i0__namespace.ɵɵinject(i2__namespace.EcosystemService)); }, token: CockpitConfigGuard, providedIn: "root" });
    CockpitConfigGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    CockpitConfigGuard.ctorParameters = function () { return [
        { type: i1.Permissions },
        { type: i1.AppStateService },
        { type: i2.EcosystemService }
    ]; };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CockpitConfigService = /** @class */ (function () {
        function CockpitConfigService(navigatorService, tabsService, searchService, assetNodeService, inventoryService, appState, optionsService, permissions, moduleConfig) {
            this.navigatorService = navigatorService;
            this.tabsService = tabsService;
            this.searchService = searchService;
            this.assetNodeService = assetNodeService;
            this.inventoryService = inventoryService;
            this.appState = appState;
            this.optionsService = optionsService;
            this.permissions = permissions;
            this.moduleConfig = moduleConfig;
            this.currentConfig = DEFAULT_CONFIG;
            this.nodes = [];
            this.DEFAULT_NODE_PRIORITY = 2000;
            this.registerFilterForFeatures();
            this.init();
        }
        Object.defineProperty(CockpitConfigService.prototype, "excludedFeatureKeys", {
            get: function () {
                var _this = this;
                return Object.keys(this.currentConfig.features).filter(function (key) { return !_this.currentConfig.features[key]; });
            },
            enumerable: false,
            configurable: true
        });
        CockpitConfigService.prototype.init = function () {
            var _this = this;
            this.appState.currentApplicationConfig.subscribe(function (config) {
                if (config) {
                    _this.currentConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);
                    _this.setRootNodes();
                }
            });
        };
        CockpitConfigService.prototype.saveConfig = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.currentConfig = config;
                            return [4 /*yield*/, this.storeApplicationConfig(this.currentConfig)];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CockpitConfigService.prototype.refresh = function () {
            this.optionsService.hideNavigator = this.currentConfig.hideNavigator;
            this.navigatorService.refresh();
            this.searchService.refresh();
        };
        CockpitConfigService.prototype.setRootNodes = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _b, _c, node, data, e_1_1;
                var e_1, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            this.addNodesToFactories();
                            _e.label = 1;
                        case 1:
                            _e.trys.push([1, 6, 7, 8]);
                            _b = __values(this.currentConfig.rootNodes), _c = _b.next();
                            _e.label = 2;
                        case 2:
                            if (!!_c.done) return [3 /*break*/, 5];
                            node = _c.value;
                            return [4 /*yield*/, this.inventoryService.detail(node.id)];
                        case 3:
                            data = (_e.sent()).data;
                            if (data) {
                                this.nodes.push(this.assetNodeService.createAssetNode({
                                    mo: data,
                                    hideDevices: node.hideDevices,
                                    priority: lodashEs.isUndefined((_a = this.moduleConfig) === null || _a === void 0 ? void 0 : _a.rootNodePriority)
                                        ? this.DEFAULT_NODE_PRIORITY
                                        : this.moduleConfig.rootNodePriority
                                }));
                            }
                            _e.label = 4;
                        case 4:
                            _c = _b.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _e.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8:
                            this.refresh();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CockpitConfigService.prototype.getAppDashboardName = function () {
            return DEFAULT_HOME_DASHBOARD_NAME.substring(0, DEFAULT_HOME_DASHBOARD_NAME.length - 1) + "_" + this.appState.state.app.id;
        };
        CockpitConfigService.prototype.storeApplicationConfig = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.appState.updateApplicationConfig(config)];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CockpitConfigService.prototype.addNodesToFactories = function () {
            var _this = this;
            var nodeInFactories = this.navigatorService.factories.find(function (nodes) { return nodes === _this.nodes; });
            var isNodeAlreadyInFactories = !!nodeInFactories;
            if (isNodeAlreadyInFactories) {
                this.nodes = nodeInFactories;
                this.nodes.length = 0;
            }
            else {
                this.navigatorService.factories.push(this.nodes);
            }
        };
        CockpitConfigService.prototype.registerFilterForFeatures = function () {
            var _this = this;
            this.navigatorService.items$ = this.navigatorService.items$.pipe(operators.map(function (nodes) { return _this.setHiddenAttrLock(nodes); }), operators.map(function (nodes) { return _this.filterNavigatorNode(nodes); }));
            this.tabsService.items$ = this.tabsService.items$.pipe(operators.map(function (tabs) { return _this.filterTabs(tabs); }));
            this.searchService.items$ = this.searchService.items$.pipe(operators.map(function (search) { return (_this.currentConfig.features.search ? search : []); }));
        };
        CockpitConfigService.prototype.setHiddenAttrLock = function (nodes) {
            var _this = this;
            nodes.forEach(function (node) {
                Object.keys(_this.currentConfig.features).forEach(function (key) {
                    var childNode = node.find(lodashEs.startCase(key).toLowerCase());
                    if (childNode) {
                        if (!_this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
                            childNode.lockHiddenAttr === undefined &&
                            childNode.hidden === true) {
                            childNode.lockHiddenAttr = childNode.hidden;
                        }
                    }
                });
            });
            return nodes;
        };
        CockpitConfigService.prototype.filterTabs = function (tabs) {
            var _this = this;
            return tabs.filter(function (tab) { return !_this.excludedFeatureKeys.some(function (key) { return tab.featureId === key; }); });
        };
        CockpitConfigService.prototype.filterNavigatorNode = function (nodes) {
            if (!this.currentConfig) {
                return nodes;
            }
            var disabledFeatures = this.excludedFeatureKeys;
            var filteredNodes = nodes.filter(function (node) { return !disabledFeatures.some(function (key) { return node.featureId === key; }); });
            this.showAllChildrenNodes(nodes);
            this.hideChildrenNodesThatAreDisabled(nodes, disabledFeatures);
            return filteredNodes;
        };
        CockpitConfigService.prototype.hideChildrenNodesThatAreDisabled = function (nodes, disabledFeatures) {
            nodes.forEach(function (node) { return disabledFeatures.forEach(function (key) {
                var childNode = node.find(key, 'featureId');
                if (childNode) {
                    childNode.hidden = true;
                }
            }); });
        };
        CockpitConfigService.prototype.showAllChildrenNodes = function (nodes) {
            var _this = this;
            nodes.forEach(function (node) {
                Object.keys(_this.currentConfig.features).forEach(function (key) {
                    var childNode = node.find(lodashEs.startCase(key).toLowerCase());
                    if (childNode) {
                        if (childNode.lockHiddenAttr === true) {
                            return;
                        }
                        childNode.hidden = false;
                    }
                });
            });
        };
        return CockpitConfigService;
    }());
    CockpitConfigService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function CockpitConfigService_Factory() { return new CockpitConfigService(i0__namespace.ɵɵinject(i1__namespace.NavigatorService), i0__namespace.ɵɵinject(i1__namespace.TabsService), i0__namespace.ɵɵinject(i1__namespace.SearchService), i0__namespace.ɵɵinject(i2__namespace$1.AssetNodeService), i0__namespace.ɵɵinject(i3__namespace.InventoryService), i0__namespace.ɵɵinject(i1__namespace.AppStateService), i0__namespace.ɵɵinject(i1__namespace.OptionsService), i0__namespace.ɵɵinject(i1__namespace.Permissions), i0__namespace.ɵɵinject(i2__namespace$1.ASSET_NAVIGATOR_CONFIG, 8)); }, token: CockpitConfigService, providedIn: "root" });
    CockpitConfigService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    CockpitConfigService.ctorParameters = function () { return [
        { type: i1.NavigatorService },
        { type: i1.TabsService },
        { type: i1.SearchService },
        { type: i2$1.AssetNodeService },
        { type: client.InventoryService },
        { type: i1.AppStateService },
        { type: i1.OptionsService },
        { type: i1.Permissions },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i2$1.ASSET_NAVIGATOR_CONFIG,] }] }
    ]; };

    var CockpitConfigurationComponent = /** @class */ (function () {
        function CockpitConfigurationComponent(cockpitConfigService, alertService) {
            this.cockpitConfigService = cockpitConfigService;
            this.alertService = alertService;
            /**
             * The currently used configuration.
             */
            this.config = DEFAULT_CONFIG;
        }
        /**
         * @ignore
         */
        CockpitConfigurationComponent.prototype.ngOnInit = function () {
            this.config = this.cockpitConfigService.currentConfig;
        };
        /**
         * Stores the configuration and shows a success message.
         */
        CockpitConfigurationComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.cockpitConfigService.saveConfig(this.config)];
                        case 1:
                            _a.sent();
                            this.alertService.success(i1.gettext('Cockpit configuration saved.'));
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates the features to directly reflect the results of the change.
         */
        CockpitConfigurationComponent.prototype.updateFeatures = function () {
            this.cockpitConfigService.currentConfig = this.config;
            this.cockpitConfigService.refresh();
        };
        /**
         * Updates the root nodes to directly reflect the results of the change.
         */
        CockpitConfigurationComponent.prototype.updateRootNodes = function () {
            this.cockpitConfigService.currentConfig = this.config;
            this.cockpitConfigService.setRootNodes();
        };
        return CockpitConfigurationComponent;
    }());
    CockpitConfigurationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cockpit-configuration',
                    template: "<c8y-title>{{ 'App configuration' | translate }}</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <form #configForm=\"ngForm\">\n      <div class=\"card card--fullpage\">\n        <div class=\"card-header separator\">\n          <div class=\"card-title\" translate>Cockpit configuration</div>\n        </div>\n\n        <div class=\"inner-scroll\">\n          <div class=\"card-block p-t-0 p-b-0\">\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <div class=\"d-inline-flex m-b-16\">\n                  <h4 class=\"text-medium m-r-4\" translate>Features</h4>\n                  <button\n                    class=\"btn btn-clean\"\n                    popover=\"{{\n                      'Define which are the enabled features in the current application.'\n                        | translate\n                    }}\"\n                    container=\"body\"\n                    placement=\"right\"\n                    [outsideClick]=\"true\"\n                  >\n                    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n                  </button>\n                </div>\n              </div>\n              <div class=\"col-xs-12 col-sm-9 col-md-8\">\n                <c8y-feature-config\n                  [config]=\"config\"\n                  (onUpdate)=\"updateFeatures()\"\n                ></c8y-feature-config>\n              </div>\n            </fieldset>\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <div class=\"d-inline-flex m-b-16\">\n                  <h4 class=\"text-medium m-r-8\" translate>Top level nodes</h4>\n                  <button\n                    class=\"btn btn-clean\"\n                    popover=\"{{\n                      'Select which nodes to display in the top level of the navigator menu. By default, only Groups is shown.'\n                        | translate\n                    }}\"\n                    container=\"body\"\n                    placement=\"right\"\n                    [outsideClick]=\"true\"\n                  >\n                    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n                  </button>\n                </div>\n              </div>\n              <div class=\"col-xs-12 col-sm-10 col-md-10\">\n                <div class=\"row\">\n                  <c8y-root-node-config\n                    [config]=\"config\"\n                    (onUpdate)=\"updateRootNodes()\"\n                  ></c8y-root-node-config>\n                </div>\n              </div>\n            </fieldset>\n\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <div class=\"d-inline-flex m-b-16\">\n                  <h4 class=\"text-medium m-r-8\" translate>Home dashboard</h4>\n                  <button\n                    class=\"btn btn-clean\"\n                    popover=\"{{\n                      'The landing page for this application. By default it is a customizable dashboard displaying data for the overall tenant.'\n                        | translate\n                    }}\"\n                    placement=\"right\"\n                    container=\"body\"\n                    [outsideClick]=\"true\"\n                  >\n                    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n                  </button>\n                </div>\n              </div>\n              <div class=\"col-xs-12 col-sm-9 col-md-8\">\n                <c8y-home-dashboard-config [config]=\"config\"></c8y-home-dashboard-config>\n              </div>\n            </fieldset>\n\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <h4 class=\"text-medium d-inline-block m-r-4\" translate>Misc</h4>\n              </div>\n              <div class=\"col-xs-12 col-sm-9 col-md-8\">\n                <c8y-misc-config [config]=\"config\"></c8y-misc-config>\n              </div>\n            </fieldset>\n          </div>\n        </div>\n        <div class=\"card-footer separator\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-primary\"\n            translate\n            [disabled]=\"!configForm.form.valid\"\n            (click)=\"save()\"\n            c8yProductExperience\n            [actionName]=\"'cockpitConfigurationSaved'\"\n            [actionData]=\"{ config: config }\"\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n"
                },] }
    ];
    CockpitConfigurationComponent.ctorParameters = function () { return [
        { type: CockpitConfigService },
        { type: i1.AlertService }
    ]; };

    var FeatureConfigComponent = /** @class */ (function () {
        function FeatureConfigComponent() {
            this.onUpdate = new i0.EventEmitter();
        }
        FeatureConfigComponent.prototype.updateFeatures = function () {
            this.onUpdate.emit();
        };
        return FeatureConfigComponent;
    }());
    FeatureConfigComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-feature-config',
                    template: "<c8y-list-group>\n  <c8y-li>\n    <c8y-li-icon icon=\"search\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Global search' | translate }}</p>\n        <p>\n          <small translate>Display the global search in the main header.</small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Global search' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.search\"\n          name=\"search\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-group\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Groups' | translate }}</p>\n        <p>\n          <small translate>Display top level groups under the Groups navigator menu.</small>\n        </p>\n      </div>\n      <label class=\"c8y-switch c8y-switch--inline m-l-auto\" title=\"{{ 'Groups' | translate }}\">\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.groups\"\n          name=\"groups\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"bell\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Alarms' | translate }}</p>\n        <p>\n          <small translate>Display a link to the global alarms list in the navigator menu.</small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Global Alarms view' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.alarms\"\n          name=\"alarms\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-data-explorer\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Data explorer' | translate }}</p>\n        <p>\n          <small translate>\n            Display the data explorer in the navigator menu and on the group tabs.\n          </small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Data explorer' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.dataExplorer\"\n          name=\"dataExplorer\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-reports\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Reports' | translate }}</p>\n        <p>\n          <small translate>Display a link to the Reports list in the navigator menu.</small>\n        </p>\n      </div>\n      <label class=\"c8y-switch c8y-switch--inline m-l-auto\" title=\"{{ 'Reports' | translate }}\">\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.reports\"\n          name=\"reports\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"graph-report\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Exports' | translate }}</p>\n        <p>\n          <small translate>\n            Display a link to the Exports list under the Configuration navigator menu.\n          </small>\n        </p>\n      </div>\n      <label class=\"c8y-switch c8y-switch--inline m-l-auto\" title=\"{{ 'Exports' | translate }}\">\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.exports\"\n          name=\"exports\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-data-points\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Data point library' | translate }}</p>\n        <p>\n          <small translate>\n            Display a link to the Data point library under the Configuration navigator menu.\n          </small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Data point library' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.dataPointLibrary\"\n          name=\"dataPointLibrary\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-smart-rules\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Global smart rules' | translate }}</p>\n        <p>\n          <small translate>\n            Display a link to the Global smart rules under the Configuration navigator menu.\n          </small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Global smart rules' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.globalSmartRules\"\n          name=\"globalSmartRules\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-group-open\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Sub assets view' | translate }}</p>\n        <p><small translate>Display the sub assets tab on groups.</small></p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Sub assets view' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.subassets\"\n          name=\"subassets\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-smart-rules\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Smart rules for devices and groups' | translate }}</p>\n        <p>\n          <small translate>Display the smart rules tab on groups and devices.</small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Smart rules for devices and groups' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.smartRules\"\n          name=\"smartRules\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n</c8y-list-group>\n"
                },] }
    ];
    FeatureConfigComponent.propDecorators = {
        config: [{ type: i0.Input }],
        onUpdate: [{ type: i0.Output }]
    };

    var HomeDashboardConfigComponent = /** @class */ (function () {
        /**
         * @ignore
         */
        function HomeDashboardConfigComponent(cockpitConfigService) {
            this.cockpitConfigService = cockpitConfigService;
            /**
             * The types of dashboard that can be configured.
             */
            this.homeDashboardTypes = exports.HomeDashboardType;
        }
        /**
         * @ignore
         */
        HomeDashboardConfigComponent.prototype.dashboardChange = function (selected, type) {
            if (!selected) {
                return;
            }
            switch (type) {
                case this.homeDashboardTypes.DEFAULT: {
                    this.config.homeDashboardName = DEFAULT_HOME_DASHBOARD_NAME;
                    this.config.userSpecificHomeDashboard = false;
                    break;
                }
                case this.homeDashboardTypes.APP: {
                    this.config.homeDashboardName = this.cockpitConfigService.getAppDashboardName();
                    this.config.userSpecificHomeDashboard = false;
                    break;
                }
                case this.homeDashboardTypes.USER: {
                    this.config.homeDashboardName = USER_HOME_DASHBOARD_NAME;
                    this.config.userSpecificHomeDashboard = true;
                    break;
                }
            }
        };
        /**
         * @ignore
         */
        HomeDashboardConfigComponent.prototype.verifySelected = function (type) {
            if (type === this.homeDashboardTypes.USER) {
                return this.config.userSpecificHomeDashboard;
            }
            if (type === this.homeDashboardTypes.DEFAULT) {
                return this.config.homeDashboardName === DEFAULT_HOME_DASHBOARD_NAME;
            }
            return this.config.homeDashboardName === this.cockpitConfigService.getAppDashboardName();
        };
        return HomeDashboardConfigComponent;
    }());
    HomeDashboardConfigComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-home-dashboard-config',
                    template: "<c8y-list-group class=\"separator-top\">\n  <c8y-li>\n    <c8y-li-radio\n      (onSelect)=\"dashboardChange($event, homeDashboardTypes.DEFAULT)\"\n      [selected]=\"verifySelected(homeDashboardTypes.DEFAULT)\"\n    >\n    </c8y-li-radio>\n    <p translate>Default home dashboard</p>\n    <small translate>Changes done in the home dashboard are reflected across the platform.</small>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-radio\n      (onSelect)=\"dashboardChange($event, homeDashboardTypes.APP)\"\n      [selected]=\"verifySelected(homeDashboardTypes.APP)\"\n    >\n    </c8y-li-radio>\n    <p translate>Custom home dashboard</p>\n    <small translate\n      >Changes done to the home dashboard are reflected only in the current application.</small\n    >\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-radio\n      (onSelect)=\"dashboardChange($event, homeDashboardTypes.USER)\"\n      [selected]=\"verifySelected(homeDashboardTypes.USER)\"\n    >\n    </c8y-li-radio>\n    <p translate>User home dashboard</p>\n    <small translate\n      >Changes done to the home dashboard are reflected only for the current user. NOTE: This user\n      needs to have inventory write permission.</small\n    >\n  </c8y-li>\n</c8y-list-group>\n"
                },] }
    ];
    HomeDashboardConfigComponent.ctorParameters = function () { return [
        { type: CockpitConfigService }
    ]; };
    HomeDashboardConfigComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var MiscConfigComponent = /** @class */ (function () {
        function MiscConfigComponent() {
        }
        return MiscConfigComponent;
    }());
    MiscConfigComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-misc-config',
                    template: "<c8y-list-group>\n  <c8y-li>\n    <div class=\"d-flex a-i-center\">\n      <p>{{ 'Always collapse navigator on start up' | translate }}</p>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Collapse navigator on start up' | translate }}\"\n      >\n        <input type=\"checkbox\" [(ngModel)]=\"config.hideNavigator\" name=\"hideNavigator\" />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n</c8y-list-group>\n"
                },] }
    ];
    MiscConfigComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var RootNodeConfigComponent = /** @class */ (function () {
        function RootNodeConfigComponent() {
            this.onUpdate = new i0.EventEmitter();
        }
        /**
         * Removes one of the root nodes.
         * @param node The node to remove.
         */
        RootNodeConfigComponent.prototype.removeNavigatorNode = function (node) {
            var index = this.config.rootNodes.indexOf(node);
            if (index > -1) {
                this.config.rootNodes.splice(index, 1);
                this.onUpdate.emit();
            }
        };
        return RootNodeConfigComponent;
    }());
    RootNodeConfigComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-root-node-config',
                    template: "<div class=\"col-sm-6\">\n  <label title=\"{{ 'Current top level nodes' | translate }}\" translate>\n    Current top level nodes\n  </label>\n  <c8y-list-group class=\"separator-top\">\n    <c8y-li *ngIf=\"config.rootNodes.length === 0\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 c8yIcon=\"folder-open\"></h1>\n        <p>\n          <strong>{{ 'No top level nodes set' | translate }}</strong>\n        </p>\n      </div>\n    </c8y-li>\n    <c8y-li *ngFor=\"let node of config.rootNodes; let index = index\">\n      <c8y-li-icon icon=\"c8y-group\"></c8y-li-icon>\n      <div class=\"content-flex-30\">\n        <div class=\"col-6\">\n          <div class=\"text-truncate\" title=\"{{ node.name }}\">\n            {{ node.name }}\n          </div>\n        </div>\n        <div class=\"col-4\">\n          <label class=\"c8y-switch c8y-switch--inline\" title=\"{{ 'Hide devices' | translate }}\">\n            <input\n              type=\"checkbox\"\n              [(ngModel)]=\"node.hideDevices\"\n              name=\"node.{{ index }}.hideDevices\"\n              (change)=\"onUpdate.emit()\"\n            />\n            <span></span>\n            <small>{{ 'Hide devices' | translate }}</small>\n          </label>\n        </div>\n        <div class=\"col-2 text-right\">\n          <button\n            class=\"btn-clean\"\n            title=\"{{ 'Remove' | translate }}\"\n            (click)=\"removeNavigatorNode(node)\"\n          >\n            <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n          </button>\n        </div>\n      </div>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n\n<div class=\"col-sm-6 col-md-5 col-md-offset-1\">\n  <label title=\"{{ 'Select top level nodes' | translate }}\" translate>Select top level nodes</label>\n  <c8y-asset-selector\n    [config]=\"{ groupsOnly: true, multi: true, groupsSelectable: true }\"\n    [(ngModel)]=\"config.rootNodes\"\n    (onSelected)=\"onUpdate.emit()\"\n    name=\"rootNodes\"\n  ></c8y-asset-selector>\n</div>\n"
                },] }
    ];
    RootNodeConfigComponent.propDecorators = {
        config: [{ type: i0.Input }],
        onUpdate: [{ type: i0.Output }]
    };

    var CockpitSetupStep = /** @class */ (function () {
        function CockpitSetupStep(stepper, step, setup, appState, alert) {
            this.stepper = stepper;
            this.step = step;
            this.setup = setup;
            this.appState = appState;
            this.alert = alert;
            this.config = DEFAULT_CONFIG;
            this.pending = false;
        }
        CockpitSetupStep.prototype.next = function () {
            return __awaiter(this, void 0, void 0, function () {
                var newConfig, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.pending = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            newConfig = Object.assign(Object.assign({}, this.setup.data$.value), this.config);
                            return [4 /*yield*/, this.appState.updateApplicationConfig(newConfig)];
                        case 2:
                            _a.sent();
                            this.setup.stepCompleted(this.stepper.selectedIndex);
                            this.setup.data$.next(newConfig);
                            this.stepper.next();
                            return [3 /*break*/, 5];
                        case 3:
                            ex_1 = _a.sent();
                            this.alert.addServerFailure(ex_1);
                            return [3 /*break*/, 5];
                        case 4:
                            this.pending = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        CockpitSetupStep.prototype.back = function () {
            this.stepper.previous();
        };
        return CockpitSetupStep;
    }());

    var CockpitSetupStep1Component = /** @class */ (function (_super) {
        __extends(CockpitSetupStep1Component, _super);
        function CockpitSetupStep1Component(stepper, step, setup, appState, alert) {
            var _this = _super.call(this, stepper, step, setup, appState, alert) || this;
            _this.stepper = stepper;
            _this.step = step;
            _this.setup = setup;
            _this.appState = appState;
            _this.alert = alert;
            return _this;
        }
        return CockpitSetupStep1Component;
    }(CockpitSetupStep));
    CockpitSetupStep1Component.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cockpit-setup-step1',
                    template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3  p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Features</h3>\n        <p class=\"lead text-normal\" translate>\n          Define which are the enabled features in the current application.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-feature-config [config]=\"config\"></c8y-feature-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                    host: { class: 'd-contents' }
                },] }
    ];
    CockpitSetupStep1Component.ctorParameters = function () { return [
        { type: i1.C8yStepper },
        { type: stepper.CdkStep },
        { type: i1.SetupComponent },
        { type: i1.AppStateService },
        { type: i1.AlertService }
    ]; };

    var CockpitSetupStep2Component = /** @class */ (function (_super) {
        __extends(CockpitSetupStep2Component, _super);
        function CockpitSetupStep2Component(stepper, step, setup, appState, alert) {
            var _this = _super.call(this, stepper, step, setup, appState, alert) || this;
            _this.stepper = stepper;
            _this.step = step;
            _this.setup = setup;
            _this.appState = appState;
            _this.alert = alert;
            return _this;
        }
        return CockpitSetupStep2Component;
    }(CockpitSetupStep));
    CockpitSetupStep2Component.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cockpit-setup-step2',
                    template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3 p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Top level nodes</h3>\n        <p class=\"lead text-normal\" translate>\n          Select which nodes to display in the top level of the navigator menu. By default, only\n          Groups is shown.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w p-t-16\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-root-node-config [config]=\"config\"></c8y-root-node-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                    host: { class: 'd-contents' }
                },] }
    ];
    CockpitSetupStep2Component.ctorParameters = function () { return [
        { type: i1.C8yStepper },
        { type: stepper.CdkStep },
        { type: i1.SetupComponent },
        { type: i1.AppStateService },
        { type: i1.AlertService }
    ]; };

    var CockpitSetupStep3Component = /** @class */ (function (_super) {
        __extends(CockpitSetupStep3Component, _super);
        function CockpitSetupStep3Component(stepper, step, setup, appState, alert) {
            var _this = _super.call(this, stepper, step, setup, appState, alert) || this;
            _this.stepper = stepper;
            _this.step = step;
            _this.setup = setup;
            _this.appState = appState;
            _this.alert = alert;
            return _this;
        }
        return CockpitSetupStep3Component;
    }(CockpitSetupStep));
    CockpitSetupStep3Component.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cockpit-setup-step3',
                    template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3  p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Home dashboard</h3>\n        <p class=\"lead text-normal\" translate>\n          The landing page for this application. By default it is a customizable dashboard\n          displaying data for the overall tenant.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-home-dashboard-config [config]=\"config\"></c8y-home-dashboard-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                    host: { class: 'd-contents' }
                },] }
    ];
    CockpitSetupStep3Component.ctorParameters = function () { return [
        { type: i1.C8yStepper },
        { type: stepper.CdkStep },
        { type: i1.SetupComponent },
        { type: i1.AppStateService },
        { type: i1.AlertService }
    ]; };

    var CockpitSetupStep4Component = /** @class */ (function (_super) {
        __extends(CockpitSetupStep4Component, _super);
        function CockpitSetupStep4Component(stepper, step, setup, appState, alert) {
            var _this = _super.call(this, stepper, step, setup, appState, alert) || this;
            _this.stepper = stepper;
            _this.step = step;
            _this.setup = setup;
            _this.appState = appState;
            _this.alert = alert;
            return _this;
        }
        return CockpitSetupStep4Component;
    }(CockpitSetupStep));
    CockpitSetupStep4Component.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cockpit-setup-step4',
                    template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3 p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Misc</h3>\n        <p class=\"lead text-normal\" translate>\n          Miscellaneous settings for the current application.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-misc-config [config]=\"config\"></c8y-misc-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                    host: { class: 'd-contents' }
                },] }
    ];
    CockpitSetupStep4Component.ctorParameters = function () { return [
        { type: i1.C8yStepper },
        { type: stepper.CdkStep },
        { type: i1.SetupComponent },
        { type: i1.AppStateService },
        { type: i1.AlertService }
    ]; };

    var CockpitSetupStepperButtonsComponent = /** @class */ (function () {
        function CockpitSetupStepperButtonsComponent() {
            this.onNext = new i0.EventEmitter();
            this.onBack = new i0.EventEmitter();
        }
        return CockpitSetupStepperButtonsComponent;
    }());
    CockpitSetupStepperButtonsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cockpit-setup-stepper-buttons',
                    template: "<div class=\"card-footer separator d-flex j-c-center\">\n  <button\n    class=\"btn btn-default\"\n    type=\"button\"\n    (click)=\"onBack.emit()\"\n    *ngIf=\"index !== 0\"\n    translate\n  >\n    Previous\n  </button>\n  <button class=\"btn btn-primary\" type=\"submit\" (click)=\"onNext.emit()\" translate>\n    Save and continue\n  </button>\n</div>\n"
                },] }
    ];
    CockpitSetupStepperButtonsComponent.propDecorators = {
        index: [{ type: i0.Input }],
        onNext: [{ type: i0.Output }],
        onBack: [{ type: i0.Output }]
    };

    var ɵ0 = [
        {
            path: COCKPIT_CONFIG_PATH,
            component: CockpitConfigurationComponent,
            canActivate: [CockpitConfigGuard]
        }
    ], ɵ1 = [
        {
            stepperId: i1.Steppers.SETUP,
            component: CockpitSetupStep1Component,
            label: i1.gettext('Features'),
            setupId: 'cockpitFeatures',
            priority: 0
        },
        {
            stepperId: i1.Steppers.SETUP,
            component: CockpitSetupStep2Component,
            label: i1.gettext('Top level nodes'),
            setupId: 'cockpitTopLevelNodes',
            priority: 10
        },
        {
            stepperId: i1.Steppers.SETUP,
            component: CockpitSetupStep3Component,
            label: i1.gettext('Home Dashboard'),
            setupId: 'cockpitHomeDashboard',
            priority: 20
        },
        {
            stepperId: i1.Steppers.SETUP,
            component: CockpitSetupStep4Component,
            label: i1.gettext('Misc'),
            setupId: 'cockpitMisc',
            priority: 30
        }
    ];
    var CockpitConfigModule = /** @class */ (function () {
        function CockpitConfigModule(service) {
            // only for DI, not used but needed.
        }
        return CockpitConfigModule;
    }());
    CockpitConfigModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        CockpitConfigurationComponent,
                        CockpitSetupStep1Component,
                        CockpitSetupStep2Component,
                        CockpitSetupStep3Component,
                        CockpitSetupStep4Component,
                        FeatureConfigComponent,
                        RootNodeConfigComponent,
                        HomeDashboardConfigComponent,
                        MiscConfigComponent,
                        CockpitSetupStepperButtonsComponent
                    ],
                    imports: [i1.CoreModule, i2$1.AssetSelectorModule, popover.PopoverModule, i2.EcosystemModule],
                    providers: [
                        CockpitConfigGuard,
                        {
                            provide: i1.HOOK_ROUTE,
                            useValue: ɵ0,
                            multi: true
                        },
                        {
                            provide: i1.HOOK_NAVIGATOR_NODES,
                            useClass: CockpitConfigGuard,
                            multi: true
                        },
                        {
                            provide: i1.HOOK_STEPPER,
                            useValue: ɵ1,
                            multi: true
                        }
                    ]
                },] }
    ];
    CockpitConfigModule.ctorParameters = function () { return [
        { type: CockpitConfigService }
    ]; };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.COCKPIT_CONFIG_PATH = COCKPIT_CONFIG_PATH;
    exports.CockpitConfigGuard = CockpitConfigGuard;
    exports.CockpitConfigModule = CockpitConfigModule;
    exports.CockpitConfigService = CockpitConfigService;
    exports.CockpitConfigurationComponent = CockpitConfigurationComponent;
    exports.CockpitSetupStep1Component = CockpitSetupStep1Component;
    exports.CockpitSetupStep2Component = CockpitSetupStep2Component;
    exports.CockpitSetupStep3Component = CockpitSetupStep3Component;
    exports.CockpitSetupStep4Component = CockpitSetupStep4Component;
    exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
    exports.DEFAULT_HOME_DASHBOARD_NAME = DEFAULT_HOME_DASHBOARD_NAME;
    exports.FeatureConfigComponent = FeatureConfigComponent;
    exports.HomeDashboardConfigComponent = HomeDashboardConfigComponent;
    exports.MiscConfigComponent = MiscConfigComponent;
    exports.RootNodeConfigComponent = RootNodeConfigComponent;
    exports.USER_HOME_DASHBOARD_NAME = USER_HOME_DASHBOARD_NAME;
    exports["ɵ0"] = ɵ0;
    exports["ɵ1"] = ɵ1;
    exports["ɵa"] = CockpitSetupStep;
    exports["ɵb"] = CockpitSetupStepperButtonsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-cockpit-config.umd.js.map
