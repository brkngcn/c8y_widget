(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@c8y/ngx-components'), require('@c8y/ngx-components/device-grid'), require('@ngx-translate/core'), require('ngx-bootstrap/modal'), require('@c8y/ngx-components/repository/shared'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('@c8y/client'), require('@angular/common'), require('ngx-bootstrap/popover'), require('@c8y/ngx-components/operations/operation-details'), require('ngx-bootstrap/tooltip')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/repository/software', ['exports', '@angular/core', '@angular/router', '@c8y/ngx-components', '@c8y/ngx-components/device-grid', '@ngx-translate/core', 'ngx-bootstrap/modal', '@c8y/ngx-components/repository/shared', 'lodash-es', 'rxjs', 'rxjs/operators', '@c8y/client', '@angular/common', 'ngx-bootstrap/popover', '@c8y/ngx-components/operations/operation-details', 'ngx-bootstrap/tooltip'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].repository = global.c8y["ngx-components"].repository || {}, global.c8y["ngx-components"].repository.software = {}), global.ng.core, global.ng.router, global.c8y["ngx-components"], global.c8y["ngx-components"]["device-grid"], global.core, global.modal, global.c8y["ngx-components"].repository.shared, global.lodashEs, global.rxjs, global.rxjs.operators, global.client, global.ng.common, global.popover, global.c8y["ngx-components"].operations["operation-details"], global.tooltip));
})(this, (function (exports, i0, router, ngxComponents, deviceGrid, core, modal, i1, lodashEs, rxjs, operators, client, common, popover, operationDetails, tooltip) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AddSoftwareModalComponent = /** @class */ (function () {
        function AddSoftwareModalComponent(modal, repositoryService, alert) {
            this.modal = modal;
            this.repositoryService = repositoryService;
            this.alert = alert;
            this.saved = new i0.EventEmitter();
            this.onInput = new rxjs.BehaviorSubject('');
            this.model = {
                selected: undefined,
                version: undefined,
                description: undefined,
                deviceType: undefined,
                softwareType: undefined,
                binary: {
                    file: undefined,
                    url: undefined
                }
            };
            this.saving = false;
            this.softwarePreselected = false;
            this.textForSoftwareUrlPopover = ngxComponents.gettext("Path for binaries can vary depending on device agent implementation, for example:\n    /software/binaries/software1.bin\n    https://software/binary/123\n    ftp://software/binary/123.tar.gz\n  ");
        }
        AddSoftwareModalComponent.prototype.ngOnInit = function () {
            this.setInitialState();
            this.loadSoftwares();
        };
        AddSoftwareModalComponent.prototype.setInitialState = function () {
            if (this.model.selected) {
                this.softwarePreselected = true;
            }
        };
        AddSoftwareModalComponent.prototype.loadSoftwares = function () {
            var _this = this;
            this.inputSubscription$ = this.onInput
                .pipe(operators.tap(function () {
                if (!_this.softwarePreselected) {
                    _this.model.description = null;
                    if (_this.form) {
                        _this.form.form.get('description').reset();
                    }
                }
            }), operators.debounceTime(300), operators.distinctUntilChanged(), operators.switchMap(function (searchStr) { return _this.getSoftwareResult(searchStr); }))
                .subscribe(function (result) {
                _this.softwaresResult = result;
            });
        };
        AddSoftwareModalComponent.prototype.getSoftwareResult = function (searchStr) {
            return rxjs.from(this.repositoryService.listRepositoryEntries(i1.RepositoryType.SOFTWARE, {
                partialName: searchStr,
                skipLegacy: true
            }));
        };
        AddSoftwareModalComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.saving = true;
                    this.repositoryService
                        .create(this.model, i1.RepositoryType.SOFTWARE)
                        .then(function (savedSoftware) {
                        _this.successMsg();
                        _this.saving = false;
                        _this.saved.next(savedSoftware);
                        _this.cancel();
                    })
                        .catch(function (e) {
                        _this.saving = false;
                        _this.saved.error(e);
                        _this.cancel();
                    });
                    return [2 /*return*/];
                });
            });
        };
        AddSoftwareModalComponent.prototype.successMsg = function () {
            var msg = ngxComponents.gettext('Software added.');
            this.alert.success(msg);
        };
        AddSoftwareModalComponent.prototype.cancel = function () {
            this.modal.hide();
            this.saved.complete();
        };
        AddSoftwareModalComponent.prototype.ngOnDestroy = function () {
            this.inputSubscription$.unsubscribe();
        };
        AddSoftwareModalComponent.prototype.onFile = function (dropped) {
            if (!lodashEs.isUndefined(dropped.url)) {
                this.model.binary = {
                    url: dropped.url
                };
                return;
            }
            else if (dropped.droppedFiles) {
                this.model.binary = {
                    file: dropped.droppedFiles[0].file
                };
                return;
            }
            else {
                this.model.binary = {
                    file: undefined,
                    url: undefined
                };
            }
        };
        AddSoftwareModalComponent.prototype.onSoftwareSelect = function (software) {
            lodashEs.assign(this.model, {
                selected: software,
                description: software.description,
                deviceType: lodashEs.get(software, 'c8y_Filter.type'),
                softwareType: software
            });
        };
        return AddSoftwareModalComponent;
    }());
    AddSoftwareModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-add-software-software-modal',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-tools'\"></i>\n    <h4 translate>Add software</h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\" *ngIf=\"!softwarePreselected\">\n    <p class=\"lead m-0\" translate>Select or create new software</p>\n  </div>\n  <form\n    class=\"d-contents\"\n    autocomplete=\"off\"\n    #softwareForm=\"ngForm\"\n    (ngSubmit)=\"softwareForm.form.valid && save()\"\n  >\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"softwarePreselected\">\n          <c8y-form-group>\n            <label for=\"softwareName\" translate>Software</label>\n            <c8y-typeahead\n              [(ngModel)]=\"model.selected\"\n              name=\"softwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"onInput.next($event)\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"\n                  let software of softwaresResult;\n                  loadMore: 'auto';\n                  notFound: notFoundTemplate\n                \"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"onSoftwareSelect(software)\"\n                [active]=\"model.selected === software\"\n              >\n                <c8y-highlight\n                  [text]=\"software.name || '--'\"\n                  [pattern]=\"onInput | async\"\n                ></c8y-highlight>\n              </c8y-li>\n              <ng-template #notFoundTemplate>\n                <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"(onInput | async)?.length > 0\">\n                  <span translate>No match found.</span>\n                  <button\n                    title=\"{{ 'Add new`software`' | translate }}\"\n                    type=\"button\"\n                    class=\"btn btn-primary btn-xs m-l-8\"\n                    translate\n                  >\n                    Add new`software`\n                  </button>\n                </c8y-li>\n              </ng-template>\n            </c8y-typeahead>\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label for=\"softwareDescription\" translate>Description</label>\n            <input\n              id=\"softwareDescription\"\n              class=\"form-control\"\n              autocomplete=\"off\"\n              name=\"description\"\n              [(ngModel)]=\"model.description\"\n              placeholder=\"{{ 'e.g. Cloud connectivity software' | translate }}\"\n              [disabled]=\"model.selected?.id\"\n              [required]=\"true\"\n            />\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label class=\"control-label\" for=\"softwareDeviceTypeFilter\">\n              {{ 'Device type filter' | translate }}\n              <button\n                class=\"btn btn-clean text-primary\"\n                popover=\"{{\n                  'If the filter is set, the software will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.'\n                    | translate\n                }}\"\n                triggers=\"focus\"\n                container=\"body\"\n                placement=\"right\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\"></i>\n              </button>\n            </label>\n            <input\n              id=\"softwareDeviceTypeFilter\"\n              class=\"form-control\"\n              name=\"softwareDeviceTypeFilter\"\n              [(ngModel)]=\"model.deviceType\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n              [disabled]=\"model.selected?.id\"\n            />\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label for=\"softwareType\" translate>Software type</label>\n            <c8y-software-type\n              name=\"softwareType\"\n              [(ngModel)]=\"model.softwareType\"\n              [disabled]=\"!!model.selected?.id\"\n            ></c8y-software-type>\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"softwareVersion\" translate>Version</label>\n          <input\n            id=\"softwareVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"version\"\n            [(ngModel)]=\"model.version\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            [required]=\"true\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block m-t-40\" translate>Software file</div>\n          <c8y-file-picker\n            [maxAllowedFiles]=\"1\"\n            (onFilesPicked)=\"onFile($event)\"\n            [fileUrlPopover]=\"textForSoftwareUrlPopover\"\n          ></c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n\n      <button\n        title=\"{{ 'Add software' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !softwareForm.form.valid ||\n          softwareForm.form.pristine ||\n          saving ||\n          (!model.binary?.url && !model.binary?.file)\n        \"\n        translate\n      >\n        Add software\n      </button>\n    </div>\n  </form>\n</div>\n"
                },] }
    ];
    AddSoftwareModalComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: i1.RepositoryService },
        { type: ngxComponents.AlertService }
    ]; };
    AddSoftwareModalComponent.propDecorators = {
        form: [{ type: i0.ViewChild, args: ['softwareForm', { static: false },] }],
        saved: [{ type: i0.Output }]
    };

    var DescriptionGridColumn = /** @class */ (function (_super) {
        __extends(DescriptionGridColumn, _super);
        function DescriptionGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'description';
            _this.path = 'description';
            _this.header = ngxComponents.gettext('Description');
            _this.filterable = true;
            _this.filteringConfig = {
                fields: ngxComponents.getBasicInputArrayFormFieldConfig({
                    key: 'descriptions',
                    label: ngxComponents.gettext('Filter software by description'),
                    addText: ngxComponents.gettext('Add next`description`'),
                    tooltip: ngxComponents.gettext('Use * as a wildcard character'),
                    placeholder: ngxComponents.gettext('Cloud connectivity software')
                }),
                getFilter: function (model) {
                    var filter = {};
                    if (model.descriptions.length) {
                        filter.description = { __in: model.descriptions };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return DescriptionGridColumn;
    }(deviceGrid.BaseDeviceGridColumn));

    var DeviceTypeCellRendererComponent = /** @class */ (function () {
        function DeviceTypeCellRendererComponent(context) {
            this.context = context;
        }
        return DeviceTypeCellRendererComponent;
    }());
    DeviceTypeCellRendererComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "<span *ngIf=\"context.item.c8y_Filter?.type; else emptyText\">\n  {{ context.item.c8y_Filter?.type }}\n</span>\n<ng-template #emptyText>\n  <small class=\"text-muted\">\n    <em translate>Undefined`device type`</em>\n  </small>\n</ng-template>\n"
                },] }
    ];
    DeviceTypeCellRendererComponent.ctorParameters = function () { return [
        { type: ngxComponents.CellRendererContext }
    ]; };

    var DeviceTypeGridColumn = /** @class */ (function (_super) {
        __extends(DeviceTypeGridColumn, _super);
        function DeviceTypeGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'deviceType';
            _this.path = 'c8y_Filter.type';
            _this.header = ngxComponents.gettext('Device type');
            _this.cellRendererComponent = DeviceTypeCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                fields: __spreadArray(__spreadArray([], __read(ngxComponents.getBasicInputArrayFormFieldConfig({
                    key: 'types',
                    label: ngxComponents.gettext('Filter software by device type'),
                    addText: ngxComponents.gettext('Add next`type`'),
                    tooltip: ngxComponents.gettext('Use * as a wildcard character'),
                    placeholder: 'c8y_Linux',
                    optional: true
                }))), [
                    {
                        key: 'noDeviceType',
                        type: 'switch',
                        templateOptions: {
                            label: ngxComponents.gettext('No device type')
                        }
                    }
                ]),
                getFilter: function (model) {
                    var _a;
                    var filter = { __or: {} };
                    if ((_a = model.types) === null || _a === void 0 ? void 0 : _a.length) {
                        filter.__or = {
                            'c8y_Filter.type': { __in: model.types }
                        };
                    }
                    if (model.noDeviceType) {
                        filter.__or = Object.assign(Object.assign({}, filter.__or), { __or: {
                                __not: { __has: 'c8y_Filter.type' },
                                'c8y_Filter.type': ''
                            } });
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return DeviceTypeGridColumn;
    }(deviceGrid.BaseDeviceGridColumn));

    var NameCellRendererComponent = /** @class */ (function () {
        function NameCellRendererComponent(context) {
            this.context = context;
        }
        return NameCellRendererComponent;
    }());
    NameCellRendererComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "\n    <a [routerLink]=\"[context.item.id]\" [title]=\"context.item.name\" class=\"interact\">\n      {{ context.item.name }}\n    </a>\n  "
                },] }
    ];
    NameCellRendererComponent.ctorParameters = function () { return [
        { type: ngxComponents.CellRendererContext }
    ]; };

    var SoftwareNameGridColumn = /** @class */ (function (_super) {
        __extends(SoftwareNameGridColumn, _super);
        function SoftwareNameGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'name';
            _this.path = 'name';
            _this.header = ngxComponents.gettext('Name');
            _this.cellRendererComponent = NameCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                fields: ngxComponents.getBasicInputArrayFormFieldConfig({
                    key: 'names',
                    label: ngxComponents.gettext('Filter software by name'),
                    addText: ngxComponents.gettext('Add next`name`'),
                    tooltip: ngxComponents.gettext('Use * as a wildcard character'),
                    placeholder: ngxComponents.gettext('Cloud connectivity')
                }),
                getFilter: function (model) {
                    var filter = {};
                    if (model.names.length) {
                        filter.name = { __in: model.names };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return SoftwareNameGridColumn;
    }(deviceGrid.BaseDeviceGridColumn));

    var SoftwareTypeCellRendererComponent = /** @class */ (function () {
        function SoftwareTypeCellRendererComponent(context) {
            this.context = context;
        }
        return SoftwareTypeCellRendererComponent;
    }());
    SoftwareTypeCellRendererComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "<span *ngIf=\"!!context?.item?.softwareType; else emptyText\" class=\"label label-info\">{{\n  context.item.softwareType\n}}</span>\n<ng-template #emptyText>\n  <small class=\"text-muted\">\n    <em translate>Undefined`software type`</em>\n  </small>\n</ng-template>\n"
                },] }
    ];
    SoftwareTypeCellRendererComponent.ctorParameters = function () { return [
        { type: ngxComponents.CellRendererContext }
    ]; };

    var SoftwareTypeFilteringFormRendererComponent = /** @class */ (function () {
        function SoftwareTypeFilteringFormRendererComponent(context, changeDetectorRef, repositoryService, elementRef) {
            var _this = this;
            this.context = context;
            this.changeDetectorRef = changeDetectorRef;
            this.repositoryService = repositoryService;
            this.elementRef = elementRef;
            this.softwareWithType$ = rxjs.NEVER;
            this.search$ = new rxjs.BehaviorSubject(null);
            this.filterPipe = rxjs.pipe(operators.tap());
            this.typeaheadPlaceholder = ngxComponents.gettext('Start typing to search, for example, {{ example }}');
            this.queriesUtil = new client.QueriesUtil();
            this.softwareTypes = new Set();
            this.softwareWithType$ = this.search$.pipe(operators.debounceTime(300), operators.tap(function () { return _this.softwareTypes.clear(); }), operators.switchMap(function (searchString) {
                var query = _this.queriesUtil.prependOrderbys({}, [{ softwareType: 1 }]);
                var filter = !!searchString
                    ? {
                        softwareType: {
                            __eq: "*" + searchString + "*"
                        }
                    }
                    : {
                        __has: 'softwareType'
                    };
                query = _this.queriesUtil.addAndFilter(query, filter);
                return _this.repositoryService.listRepositoryEntries(i1.RepositoryType.SOFTWARE, {
                    skipDefaultOrder: true,
                    query: query,
                    params: {
                        pageSize: 200
                    }
                });
            }));
            this.filterPipe = rxjs.pipe(operators.map(this.removeDuplicatesBySoftwareType.bind(this)), operators.tap(function () { return _this.changeDetectorRef.detectChanges(); }));
        }
        SoftwareTypeFilteringFormRendererComponent.prototype.onEnterKeyDown = function (event) {
            event.stopPropagation();
            this.applyFilter();
        };
        SoftwareTypeFilteringFormRendererComponent.prototype.onEscapeKeyDown = function (event) {
            event.stopPropagation();
            this.context.resetFilter();
        };
        SoftwareTypeFilteringFormRendererComponent.prototype.ngOnInit = function () {
            var column = this.context.property;
            this.selectedType = lodashEs.cloneDeep(column.externalFilterQuery || {});
        };
        SoftwareTypeFilteringFormRendererComponent.prototype.ngAfterViewInit = function () {
            var _a, _b, _c;
            (_c = (_b = (_a = this.typeahead) === null || _a === void 0 ? void 0 : _a.searchControl) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.focus();
            try {
                this.elementRef.nativeElement.parentElement.parentElement.style.overflow = 'visible';
            }
            catch (ex) {
                // intentionally empty
            }
        };
        SoftwareTypeFilteringFormRendererComponent.prototype.applyFilter = function () {
            this.context.applyFilter({
                externalFilterQuery: this.selectedType
            });
        };
        SoftwareTypeFilteringFormRendererComponent.prototype.removeDuplicatesBySoftwareType = function (list) {
            var _this = this;
            var uniqueBySoftwareType = lodashEs.uniqBy(list, 'softwareType').filter(function (sw) { return !_this.softwareTypes.has(sw.softwareType); });
            uniqueBySoftwareType.forEach(function (sw) { return _this.softwareTypes.add(sw.softwareType); });
            return uniqueBySoftwareType;
        };
        return SoftwareTypeFilteringFormRendererComponent;
    }());
    SoftwareTypeFilteringFormRendererComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "<c8y-form-group>\n  <label translate>Filter by software type</label>\n  <c8y-typeahead\n    [(ngModel)]=\"selectedType\"\n    name=\"softwareType\"\n    placeholder=\"{{ typeaheadPlaceholder | translate: { example: 'yum' } }}\"\n    displayProperty=\"softwareType\"\n    (onSearch)=\"search$.next($event)\"\n  >\n    <c8y-li\n      *c8yFor=\"let software of softwareWithType$; pipe: filterPipe; loadMore: 'auto'\"\n      class=\"p-l-8 p-r-8 c8y-list__item--link\"\n      (click)=\"\n        selectedType = software; typeahead.dropdown.hide(); changeDetectorRef.detectChanges()\n      \"\n      [active]=\"selectedType?.softwareType === software?.softwareType\"\n    >\n      <c8y-highlight\n        [text]=\"software?.softwareType || '--'\"\n        [pattern]=\"search$.value\"\n      ></c8y-highlight>\n    </c8y-li>\n  </c8y-typeahead>\n</c8y-form-group>\n\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"context.resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n",
                    changeDetection: i0.ChangeDetectionStrategy.Default
                },] }
    ];
    SoftwareTypeFilteringFormRendererComponent.ctorParameters = function () { return [
        { type: ngxComponents.FilteringFormRendererContext },
        { type: i0.ChangeDetectorRef },
        { type: i1.RepositoryService },
        { type: i0.ElementRef }
    ]; };
    SoftwareTypeFilteringFormRendererComponent.propDecorators = {
        typeahead: [{ type: i0.ViewChild, args: [ngxComponents.TypeaheadComponent, { static: false },] }],
        onEnterKeyDown: [{ type: i0.HostListener, args: ['keydown.enter', ['$event'],] }],
        onEscapeKeyDown: [{ type: i0.HostListener, args: ['keydown.escape', ['$event'],] }]
    };

    var SoftwareTypeGridColumn = /** @class */ (function (_super) {
        __extends(SoftwareTypeGridColumn, _super);
        function SoftwareTypeGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'type';
            _this.path = 'softwareType';
            _this.header = ngxComponents.gettext('Software type');
            _this.cellRendererComponent = SoftwareTypeCellRendererComponent;
            _this.filterable = true;
            _this.filteringFormRendererComponent = SoftwareTypeFilteringFormRendererComponent;
            _this.filteringConfig = {
                getFilter: function (model) {
                    var filter = {};
                    if (model.softwareType) {
                        filter.softwareType = { __eq: model.softwareType };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return SoftwareTypeGridColumn;
    }(deviceGrid.BaseDeviceGridColumn));

    var VersionsCellRendererComponent = /** @class */ (function () {
        function VersionsCellRendererComponent(context, repositoryService) {
            this.context = context;
            this.repositoryService = repositoryService;
            this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
            this.software = context.item;
        }
        VersionsCellRendererComponent.prototype.getBaseVersionsCount$ = function (software) {
            return this.repositoryService.getBaseVersionsCount$(software).pipe(operators.shareReplay(1));
        };
        return VersionsCellRendererComponent;
    }());
    VersionsCellRendererComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "<span class=\"label label-warning flex-item-right-sm\" *ngIf=\"isLegacy(software)\">\n  <span translate> Legacy </span>\n</span>\n<span *ngIf=\"!isLegacy(software)\">\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n    <span class=\"badge badge-info flex-item-right-sm\">\n      <i class=\"icon-spin\" c8yIcon=\"circle-o-notch\"></i>\n    </span>\n  </span>\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n    <span class=\"badge badge-info flex-item-right-sm\">\n      {{ getBaseVersionsCount$(software) | async }}\n    </span>\n  </span>\n</span>\n"
                },] }
    ];
    VersionsCellRendererComponent.ctorParameters = function () { return [
        { type: ngxComponents.CellRendererContext },
        { type: i1.RepositoryService }
    ]; };
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], VersionsCellRendererComponent.prototype, "getBaseVersionsCount$", null);

    var VersionsGridColumn = /** @class */ (function (_super) {
        __extends(VersionsGridColumn, _super);
        function VersionsGridColumn(initialColumnConfig) {
            var _this = _super.call(this, initialColumnConfig) || this;
            _this.name = 'versions';
            _this.header = ngxComponents.gettext('Versions');
            _this.cellRendererComponent = VersionsCellRendererComponent;
            _this.sortable = false;
            return _this;
        }
        return VersionsGridColumn;
    }(deviceGrid.BaseDeviceGridColumn));

    var SoftwareListComponent = /** @class */ (function () {
        function SoftwareListComponent(repositoryService, gridService, modalService, bsModalService, translateService, alertService, router, activatedRoute) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.gridService = gridService;
            this.modalService = modalService;
            this.bsModalService = bsModalService;
            this.translateService = translateService;
            this.alertService = alertService;
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.sizeRequestDone = false;
            this.refresh$ = new i0.EventEmitter();
            this.columns = [
                new SoftwareNameGridColumn(),
                new DescriptionGridColumn(),
                new DeviceTypeGridColumn(),
                new SoftwareTypeGridColumn(),
                new VersionsGridColumn()
            ];
            this.actionControls = [];
            this.pagination = {
                pageSize: 50,
                currentPage: 1
            };
            this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
            this.sizeRequest = this.repositoryService
                .listRepositoryEntries(i1.RepositoryType.SOFTWARE, {
                skipDefaultOrder: true,
                params: { pageSize: 1 }
            })
                .then(function (response) {
                var _a;
                _this.sizeRequestDone = true;
                return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages;
            });
        }
        SoftwareListComponent.prototype.ngOnInit = function () {
            this.actionControls.push({
                type: "EDIT" /* Edit */,
                callback: this.editSoftware.bind(this)
            });
            this.actionControls.push({
                type: "DELETE" /* Delete */,
                callback: this.deleteSoftware.bind(this)
            });
        };
        SoftwareListComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
            return __awaiter(this, void 0, void 0, function () {
                var serverSideDataResult, dataRequest, filtererdSizeRequest, _b, dataResponse, size, filteredSize, res, data, paging;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            dataRequest = this.repositoryService.listRepositoryEntries(i1.RepositoryType.SOFTWARE, {
                                query: this.gridService.getQueryObj(dataSourceModifier.columns),
                                skipDefaultOrder: true,
                                params: {
                                    pageSize: dataSourceModifier.pagination.pageSize,
                                    currentPage: dataSourceModifier.pagination.currentPage
                                }
                            });
                            filtererdSizeRequest = this.repositoryService
                                .listRepositoryEntries(i1.RepositoryType.SOFTWARE, {
                                skipDefaultOrder: true,
                                query: this.gridService.getQueryObj(dataSourceModifier.columns),
                                params: { pageSize: 1 }
                            })
                                .then(function (response) { var _a; return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages; });
                            return [4 /*yield*/, Promise.all([
                                    dataRequest,
                                    this.sizeRequest,
                                    filtererdSizeRequest
                                ])];
                        case 1:
                            _b = __read.apply(void 0, [_c.sent(), 3]), dataResponse = _b[0], size = _b[1], filteredSize = _b[2];
                            res = dataResponse.res, data = dataResponse.data, paging = dataResponse.paging;
                            serverSideDataResult = {
                                res: res,
                                data: data,
                                paging: paging,
                                filteredSize: filteredSize,
                                size: size
                            };
                            return [2 /*return*/, serverSideDataResult];
                    }
                });
            });
        };
        SoftwareListComponent.prototype.addSoftware = function () {
            var _this = this;
            var config = {
                class: 'modal-sm',
                ignoreBackdropClick: true
            };
            var modalRef = this.bsModalService.show(AddSoftwareModalComponent, config);
            modalRef.content.saved.subscribe(function (savedSoftware) { return _this.editSoftware(savedSoftware); });
        };
        SoftwareListComponent.prototype.editSoftware = function (software) {
            this.router.navigate([software.id], { relativeTo: this.activatedRoute });
        };
        SoftwareListComponent.prototype.deleteSoftware = function (software) {
            return __awaiter(this, void 0, void 0, function () {
                var title, body, labels, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 3, , 4]);
                            title = ngxComponents.gettext('Delete software');
                            body = "\n        " + this.translateService.instant(ngxComponents.gettext('You are about to delete software "{{ name }}" with all its versions.'), { name: software.name }) + "\n        " + this.translateService.instant(ngxComponents.gettext('This operation is irreversible.')) + "\n        " + this.translateService.instant(ngxComponents.gettext('Do you want to proceed?')) + "\n      ";
                            labels = {
                                ok: ngxComponents.gettext('Delete')
                            };
                            return [4 /*yield*/, this.modalService.confirm(title, body, ngxComponents.Status.DANGER, labels)];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, this.repositoryService.delete(software)];
                        case 2:
                            _b.sent();
                            this.alertService.success(ngxComponents.gettext('Software deleted.'));
                            this.refresh$.next();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _b.sent();
                            // only if not cancel from modal
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareListComponent.prototype.trackByName = function (_index, column) {
            return column.name;
        };
        return SoftwareListComponent;
    }());
    SoftwareListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-software-list',
                    template: "<c8y-title>\n  {{ 'Software repository' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Add software' | translate }}\" (click)=\"addSoftware()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add software' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#software-repo\"></c8y-help>\n\n<div class=\"content-fullpage\">\n  <c8y-data-grid\n    [title]=\"'Software' | translate\"\n    [refresh]=\"refresh$\"\n    [pagination]=\"pagination\"\n    [columns]=\"columns\"\n    [actionControls]=\"actionControls\"\n    [infiniteScroll]=\"'auto'\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n  >\n    <div class=\"c8y-empty-state\">\n      <ng-container *ngIf=\"!sizeRequestDone\">\n        <c8y-loading></c8y-loading>\n      </ng-container>\n      <ng-container *ngIf=\"sizeRequestDone\">\n        <ng-container *ngIf=\"(sizeRequest | async) === 0; else noResults\">\n          <div class=\"text-center\">\n            <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-tools\"></h1>\n            <h3 translate>No software to display.</h3>\n            <p translate>Add a new software by clicking below.</p>\n            <p>\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Add software' | translate }}\"\n                (click)=\"addSoftware()\"\n                translate\n              >\n                Add software\n              </button>\n            </p>\n          </div>\n        </ng-container>\n        <ng-template #noResults>\n          <h1 c8yIcon=\"search\"></h1>\n          <div>\n            <p>\n              <strong>{{ 'No results to display.' | translate }}</strong>\n            </p>\n            <small>{{ 'Refine your search terms or check your spelling.' | translate }}</small>\n          </div>\n        </ng-template>\n      </ng-container>\n    </div>\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n  </c8y-data-grid>\n</div>\n"
                },] }
    ];
    SoftwareListComponent.ctorParameters = function () { return [
        { type: i1.RepositoryService },
        { type: deviceGrid.DeviceGridService },
        { type: ngxComponents.ModalService },
        { type: modal.BsModalService },
        { type: core.TranslateService },
        { type: ngxComponents.AlertService },
        { type: router.Router },
        { type: router.ActivatedRoute }
    ]; };

    var SoftwareDetailsComponent = /** @class */ (function () {
        function SoftwareDetailsComponent(activatedRoute, inventoryService, repositoryService, alertService, translateService, modalService, bsModalService) {
            var _this = this;
            this.activatedRoute = activatedRoute;
            this.inventoryService = inventoryService;
            this.repositoryService = repositoryService;
            this.alertService = alertService;
            this.translateService = translateService;
            this.modalService = modalService;
            this.bsModalService = bsModalService;
            this.reload$ = new rxjs.Subject();
            this.reloading$ = new rxjs.BehaviorSubject(false);
            this.isSoftwareTypeChanged = false;
            this.updateSoftware$ = new rxjs.Subject();
            this.softwareUpdated$ = new rxjs.Subject();
            this.baseVersionsUpdated$ = new rxjs.Subject();
            this.software$ = rxjs.merge(this.activatedRoute.params.pipe(operators.map(function (params) { return params.id; }), operators.switchMap(function (id) { return rxjs.from(_this.inventoryService.detail(id).then(function (result) { return result.data; })); })), this.reload$.pipe(operators.tap(function () { return _this.reloading$.next(true); }), operators.switchMap(function () { return _this.activatedRoute.params; }), operators.map(function (params) { return params.id; }), operators.switchMap(function (id) { return rxjs.from(_this.inventoryService.detail(id).then(function (result) { return result.data; })); }), operators.tap(function () { return _this.reloading$.next(false); })), this.softwareUpdated$).pipe(operators.shareReplay(1));
            this.baseVersions$ = rxjs.merge(this.software$.pipe(operators.distinctUntilKeyChanged('id')), this.baseVersionsUpdated$, this.reload$).pipe(operators.switchMap(function () { return _this.software$; }), operators.switchMap(function (software) { return _this.repositoryService.listBaseVersions(software); }), operators.shareReplay(1));
            this.isLegacy$ = this.software$.pipe(operators.map(function (software) { return _this.repositoryService.isLegacyEntry(software); }), operators.shareReplay(1));
            this.destroy$ = new rxjs.Subject();
        }
        SoftwareDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.updateSoftware$
                .pipe(operators.withLatestFrom(this.software$), operators.switchMap(function (_b) {
                var _c = __read(_b, 2), softwarePartial = _c[0], software = _c[1];
                return _this.inventoryService.update(Object.assign({ id: software.id }, softwarePartial));
            }), operators.map(function (_b) {
                var data = _b.data;
                return data;
            }), operators.tap(function (software) { return _this.softwareUpdated$.next(software); }), operators.tap(function () { return _this.alertService.success(ngxComponents.gettext('Saved.')); }), operators.takeUntil(this.destroy$))
                .subscribe();
            this.software$.subscribe(function (software) {
                _this.softwareTypeObject = software;
            });
        };
        SoftwareDetailsComponent.prototype.getBinaryName$ = function (binaryUrl) {
            return this.repositoryService.getBinaryName$(binaryUrl);
        };
        SoftwareDetailsComponent.prototype.addBaseVersion = function () {
            var _this = this;
            this.software$
                .pipe(operators.take(1), operators.switchMap(function (software) {
                var initialState = {
                    model: {
                        selected: software,
                        description: software.description
                    }
                };
                var config = {
                    class: 'modal-sm',
                    ignoreBackdropClick: true,
                    initialState: initialState
                };
                var modalRef = _this.bsModalService.show(AddSoftwareModalComponent, config);
                return modalRef.content.saved;
            }))
                .subscribe(function () { return _this.baseVersionsUpdated$.next(); });
        };
        SoftwareDetailsComponent.prototype.deleteBaseVersion = function (baseVersion) {
            return __awaiter(this, void 0, void 0, function () {
                var title, body, labels, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 3, , 4]);
                            title = ngxComponents.gettext('Delete software');
                            body = "\n        " + this.translateService.instant(ngxComponents.gettext('You are about to delete software {{ version }}.'), { version: baseVersion.c8y_Software.version }) + "\n        " + this.translateService.instant(ngxComponents.gettext('This operation is irreversible.')) + "\n        " + this.translateService.instant(ngxComponents.gettext('Do you want to proceed?')) + "\n      ";
                            labels = {
                                ok: ngxComponents.gettext('Delete')
                            };
                            return [4 /*yield*/, this.modalService.confirm(title, body, ngxComponents.Status.DANGER, labels)];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, this.repositoryService.delete(baseVersion)];
                        case 2:
                            _b.sent();
                            this.alertService.success(ngxComponents.gettext('Software deleted.'));
                            this.baseVersionsUpdated$.next();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _b.sent();
                            // only if not cancel from modal
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareDetailsComponent.prototype.onSelectSoftwareType = function (software) {
            var _a;
            this.isSoftwareTypeChanged = !(((_a = this.softwareTypeObject) === null || _a === void 0 ? void 0 : _a.softwareType) === (software === null || software === void 0 ? void 0 : software.softwareType));
            this.softwareTypeObject = software;
        };
        SoftwareDetailsComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next(true);
            this.destroy$.unsubscribe();
        };
        return SoftwareDetailsComponent;
    }());
    SoftwareDetailsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-software-details',
                    template: "<c8y-title>\n  {{ (software$ | async)?.name }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    path=\"#/software\"\n    label=\"{{ 'Software repository' | translate }}\"\n    icon=\"c8y-tools\"\n  >\n  </c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"!(isLegacy$ | async)\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add software' | translate }}\"\n    (click)=\"addBaseVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add software' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Software info</h4>\n      </div>\n      <div class=\"card-block overflow-visible\">\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Name' | translate }}\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #nameInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(software$ | async)?.name\"\n                  #nameModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g. My software' | translate }}\"\n                  [ngStyle]=\"{ 'width.ch': (software$ | async)?.name?.length + 2 || 31 }\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    (click)=\"updateSoftware$.next({ name: nameInput.value }); nameModel.reset()\"\n                    [disabled]=\"nameInput.value.length === 0\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-sm-6\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Description' | translate }}\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #descriptionInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(software$ | async)?.description\"\n                  #descriptionModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g. Cloud connectivity software' | translate }}\"\n                  [ngStyle]=\"{ 'width.ch': (software$ | async)?.description?.length + 2 || 31 }\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    (click)=\"\n                      updateSoftware$.next({ description: descriptionInput.value });\n                      descriptionModel.reset()\n                    \"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type' | translate }}\n                <button\n                  class=\"btn-clean\"\n                  popover=\"{{\n                    'If the filter is set, the software will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.'\n                      | translate\n                  }}\"\n                  [outsideClick]=\"true\"\n                  container=\"body\"\n                >\n                  <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #deviceTypeInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(software$ | async)?.c8y_Filter?.type\"\n                  #deviceTypeModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  [ngStyle]=\"{ 'width.ch': (software$ | async)?.type?.length + 2 || 31 }\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    (click)=\"\n                      updateSoftware$.next({ c8y_Filter: { type: deviceTypeInput.value } });\n                      deviceTypeModel.reset()\n                    \"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-sm-6\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Software type' | translate }}\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <c8y-software-type\n                  [softwareTypeMO]=\"softwareTypeObject\"\n                  [style]=\"{ 'width.ch': softwareTypeObject?.softwareType?.length + 2 || 31 }\"\n                  (onSelectSoftware)=\"onSelectSoftwareType($event)\"\n                >\n                </c8y-software-type>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    [ngClass]=\"isSoftwareTypeChanged ? '' : 'hidden'\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"softwareTypeObject?.softwareType === ''\"\n                    (click)=\"\n                      updateSoftware$.next({ softwareType: softwareTypeObject.softwareType });\n                      softwareType.resetInput();\n                      isSoftwareTypeChanged = false\n                    \"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Versions</h4>\n      </div>\n\n      <div class=\"card-block p-t-0 p-b-24\">\n        <div *ngIf=\"(baseVersions$ | async)?.data.length === 0\">\n          <div class=\"c8y-empty-state text-center\">\n            <h1 c8yIcon=\"c8y-tools\" class=\"c8y-icon-duocolor\"></h1>\n            <h3 translate>No versions to display.</h3>\n            <p translate>Add a new version by clicking below.</p>\n            <p>\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Add software' | translate }}\"\n                (click)=\"addBaseVersion()\"\n              >\n                {{ 'Add software' | translate }}\n              </button>\n            </p>\n          </div>\n        </div>\n\n        <c8y-list-group\n          [ngClass]=\"{ 'dd-low': (baseVersions$ | async)?.data.length < 10 }\"\n          *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n        >\n          <c8y-li\n            *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\"\n          >\n            <c8y-li-icon>\n              <i c8yIcon=\"c8y-tools\"></i>\n            </c8y-li-icon>\n\n            <c8y-li-body class=\"content-flex-50\">\n              <div class=\"col-4\">\n                <p class=\"text-truncate-wrap\" title=\"{{ baseVersion.c8y_Software.version }}\">\n                  {{ baseVersion.c8y_Software.version }}\n                </p>\n              </div>\n              <div class=\"col-5\">\n                <p class=\"text-truncate-wrap\">\n                  <span class=\"text-label-small m-r-8\" translate> File </span>\n                  <span title=\" {{ getBinaryName$(baseVersion.c8y_Software.url) | async }}\">\n                    <c8y-file-download url=\"{{ baseVersion.c8y_Software.url }}\"></c8y-file-download>\n                  </span>\n                </p>\n              </div>\n              <div class=\"col-2 flex-row a-i-start\">\n                <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning flex-item-right-sm\">\n                  {{ 'Legacy' | translate }}\n                </span>\n\n                <div class=\"fit-h-20\" *ngIf=\"!(isLegacy$ | async)\">\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                    (click)=\"deleteBaseVersion(baseVersion)\"\n                    title=\"{{ 'Delete' | translate }}\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                    {{ 'Delete' | translate }}\n                  </button>\n                </div>\n              </div>\n              <div *ngIf=\"!(isLegacy$ | async)\" class=\"flex-item-right fit-h-20 p-r-8 hidden-xs\">\n                <button\n                  class=\"btn btn-dot text-danger showOnHover\"\n                  (click)=\"deleteBaseVersion(baseVersion)\"\n                  title=\"{{ 'Delete' | translate }}\"\n                >\n                  <i c8yIcon=\"minus-circle\"></i>\n                </button>\n              </div>\n            </c8y-li-body>\n          </c8y-li>\n        </c8y-list-group>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    SoftwareDetailsComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: client.InventoryService },
        { type: i1.RepositoryService },
        { type: ngxComponents.AlertService },
        { type: core.TranslateService },
        { type: ngxComponents.ModalService },
        { type: modal.BsModalService }
    ]; };
    SoftwareDetailsComponent.propDecorators = {
        softwareType: [{ type: i0.ViewChild, args: [i1.SoftwareTypeComponent, { static: true },] }]
    };
    __decorate([
        ngxComponents.memoize()
    ], SoftwareDetailsComponent.prototype, "getBinaryName$", null);

    var SoftwareRepositoryNavigationFactory = /** @class */ (function () {
        function SoftwareRepositoryNavigationFactory() {
            this.node = new ngxComponents.NavigatorNode({
                label: ngxComponents.gettext('Software repository'),
                path: 'software',
                icon: 'c8y-tools',
                parent: ngxComponents.gettext('Management'),
                priority: 900
            });
        }
        SoftwareRepositoryNavigationFactory.prototype.get = function () {
            return this.node;
        };
        return SoftwareRepositoryNavigationFactory;
    }());
    SoftwareRepositoryNavigationFactory.decorators = [
        { type: i0.Injectable }
    ];
    SoftwareRepositoryNavigationFactory.ctorParameters = function () { return []; };

    var SoftwareRepositoryListModule = /** @class */ (function () {
        function SoftwareRepositoryListModule() {
        }
        SoftwareRepositoryListModule.forRoot = function () {
            return {
                ngModule: SoftwareRepositoryListModule,
                providers: [
                    {
                        provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                        useClass: SoftwareRepositoryNavigationFactory,
                        multi: true
                    },
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: [
                            {
                                path: 'software',
                                component: SoftwareListComponent
                            },
                            {
                                path: 'software/:id',
                                component: SoftwareDetailsComponent
                            }
                        ],
                        multi: true
                    }
                ]
            };
        };
        return SoftwareRepositoryListModule;
    }());
    SoftwareRepositoryListModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ngxComponents.CoreModule,
                        ngxComponents.FormsModule,
                        deviceGrid.DeviceGridModule,
                        popover.PopoverModule,
                        router.RouterModule,
                        i1.SharedRepositoryModule
                    ],
                    declarations: [
                        SoftwareListComponent,
                        SoftwareDetailsComponent,
                        AddSoftwareModalComponent,
                        NameCellRendererComponent,
                        SoftwareTypeCellRendererComponent,
                        SoftwareTypeFilteringFormRendererComponent,
                        DeviceTypeCellRendererComponent,
                        VersionsCellRendererComponent
                    ],
                    entryComponents: [SoftwareListComponent, SoftwareDetailsComponent, AddSoftwareModalComponent]
                },] }
    ];

    var DeviceSoftwareChangesComponent = /** @class */ (function () {
        function DeviceSoftwareChangesComponent() {
            this.clear = new i0.EventEmitter();
            this.drop = new i0.EventEmitter();
            this.apply = new i0.EventEmitter();
            this.hideSoftwareChanges = new i0.EventEmitter();
            this.changes$ = new rxjs.BehaviorSubject([]);
            this.installations$ = this.changes$.pipe(operators.map(function (changes) {
                return changes.filter(function (change) { return change.action === 'install'; });
            }));
            this.removals$ = this.changes$.pipe(operators.map(function (changes) {
                return changes.filter(function (change) { return change.action === 'delete'; });
            }));
        }
        Object.defineProperty(DeviceSoftwareChangesComponent.prototype, "applyButtonLabel", {
            get: function () {
                return this.changesInProgress ? ngxComponents.gettext('Applying changes…') : ngxComponents.gettext('Apply changes');
            },
            enumerable: false,
            configurable: true
        });
        DeviceSoftwareChangesComponent.prototype.ngOnChanges = function (changes) {
            if (changes.changes) {
                this.changes$.next(changes.changes.currentValue);
            }
        };
        return DeviceSoftwareChangesComponent;
    }());
    DeviceSoftwareChangesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-device-software-changes',
                    template: "<div class=\"inner-scroll d-flex d-col\">\n  <div class=\"card-header separator sticky-top visible-sm visible-xs\">\n    <button\n      class=\"btn btn-clean text-primary\"\n      [title]=\"'Back' | translate\"\n      (click)=\"hideSoftwareChanges.emit()\"\n    >\n      <i c8yIcon=\"chevron-left\"></i><span translate>Back</span>\n    </button>\n  </div>\n  <div class=\"card-header separator large-padding sticky-top\">\n    <h4 class=\"card-title\" translate>Software changes</h4>\n  </div>\n  <div id=\"software-changes-list\" class=\"flex-grow inner-scroll\">\n    <div class=\"card-block large-padding\" *ngIf=\"(changes$ | async).length === 0; else changesList\">\n      <div class=\"c8y-empty-state text-center\">\n        <h1 class=\"c8y-icon c8y-icon-device-control c8y-icon-duocolor\"></h1>\n        <p>\n          <strong translate>No software changes.</strong> <br />\n          <small translate>Selected actions will be displayed here.</small>\n        </p>\n      </div>\n    </div>\n\n    <ng-template #changesList>\n      <fieldset\n        class=\"card-block p-t-0 p-b-0\"\n        *ngIf=\"(installations$ | async).length > 0\"\n        [disabled]=\"changesInProgress\"\n      >\n        <div class=\"form-block legend\" translate>Installations`software`</div>\n        <c8y-device-software-list\n          [softwareList]=\"installations$ | async\"\n          (remove)=\"drop.emit($event)\"\n        ></c8y-device-software-list>\n      </fieldset>\n\n      <fieldset\n        class=\"card-block p-t-0 p-b-0\"\n        *ngIf=\"(removals$ | async).length > 0\"\n        [disabled]=\"changesInProgress\"\n      >\n        <div class=\"form-block legend\" translate>Removals`software`</div>\n        <c8y-device-software-list\n          [softwareList]=\"removals$ | async\"\n          (remove)=\"drop.emit($event)\"\n        ></c8y-device-software-list>\n      </fieldset>\n    </ng-template>\n  </div>\n  <div\n    class=\"card-footer separator large-padding sticky-bottom\"\n    *ngIf=\"(changes$ | async).length > 0\"\n  >\n    <button\n      class=\"btn btn-default\"\n      (click)=\"clear.emit()\"\n      title=\"{{ 'Clear changes' | translate }}\"\n      [disabled]=\"changesInProgress\"\n      translate\n    >\n      Clear`changes`\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      [ngClass]=\"{ 'btn-pending': changesInProgress }\"\n      [disabled]=\"changesInProgress\"\n      (click)=\"apply.emit(); hideSoftwareChanges.emit()\"\n      title=\"{{ applyButtonLabel | translate }}\"\n    >\n      {{ applyButtonLabel | translate }}\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    DeviceSoftwareChangesComponent.propDecorators = {
        changes: [{ type: i0.Input }],
        changesInProgress: [{ type: i0.Input }],
        clear: [{ type: i0.Output }],
        drop: [{ type: i0.Output }],
        apply: [{ type: i0.Output }],
        hideSoftwareChanges: [{ type: i0.Output }]
    };

    var DeviceSoftwareService = /** @class */ (function () {
        function DeviceSoftwareService(advancedSoftwareService) {
            this.advancedSoftwareService = advancedSoftwareService;
            this.reloadSubject$ = new rxjs.BehaviorSubject(null);
            this.loadingSubject$ = new rxjs.Subject();
        }
        Object.defineProperty(DeviceSoftwareService.prototype, "loading$", {
            /**
             * Indicates whether device software data is currently being loaded.
             */
            get: function () {
                return this.loadingSubject$.asObservable().pipe(operators.share());
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Trigger device software data reload.
         */
        DeviceSoftwareService.prototype.reload = function () {
            this.reloadSubject$.next();
        };
        /**
         * Retrieves the software list that is installed on a given device.
         *
         * @param deviceId ID of the device to retrieve software data for
         * @param filterCriteria Criteria that software items are filtered by.
         * @param legacySoftwareList If provided no data will be fetched from backend. The provided software list
         * will be filtered by the specified filter criteria.
         *
         * @returns The software items installed on the specified device filtered by the specified criteria.
         */
        DeviceSoftwareService.prototype.getSoftwareList = function (deviceId, filterCriteria, legacySoftwareList) {
            var _this = this;
            this.loadingSubject$.next(true);
            return this.reloadSubject$.pipe(operators.switchMap(function () {
                var softwareList$ = !!legacySoftwareList
                    ? _this.getLegacySoftwareList(legacySoftwareList, filterCriteria)
                    : _this.getAdvancedSoftwareList(deviceId, filterCriteria);
                return softwareList$.then(function (resultList) {
                    _this.loadingSubject$.next(false);
                    return resultList;
                });
            }), operators.share());
        };
        DeviceSoftwareService.prototype.getAdvancedSoftwareList = function (deviceId, filterCriteria) {
            var queryFilter = {
                deviceId: deviceId,
                currentPage: 1,
                pageSize: 50,
                withTotalPages: true
            };
            if (filterCriteria === null || filterCriteria === void 0 ? void 0 : filterCriteria.name) {
                lodashEs.set(queryFilter, 'name', "*" + filterCriteria.name + "*");
            }
            if (filterCriteria === null || filterCriteria === void 0 ? void 0 : filterCriteria.softwareType) {
                lodashEs.set(queryFilter, 'type', "" + filterCriteria.softwareType);
            }
            return this.advancedSoftwareService.list(queryFilter);
        };
        DeviceSoftwareService.prototype.getLegacySoftwareList = function (legacySoftwareList, filterCriteria) {
            var data = filterCriteria
                ? legacySoftwareList.filter(function (item) {
                    var _a;
                    var match = true;
                    if (filterCriteria === null || filterCriteria === void 0 ? void 0 : filterCriteria.name) {
                        match = match && ((_a = item.name) === null || _a === void 0 ? void 0 : _a.includes(filterCriteria.name));
                    }
                    if (filterCriteria === null || filterCriteria === void 0 ? void 0 : filterCriteria.softwareType) {
                        match = match && item.softwareType === filterCriteria.softwareType;
                    }
                    return match;
                })
                : legacySoftwareList;
            return Promise.resolve({
                data: data,
                res: null,
                paging: {
                    totalPages: data.length
                }
            });
        };
        return DeviceSoftwareService;
    }());
    DeviceSoftwareService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DeviceSoftwareService_Factory() { return new DeviceSoftwareService(i0__namespace.ɵɵinject(i1__namespace.AdvancedSoftwareService)); }, token: DeviceSoftwareService, providedIn: "root" });
    DeviceSoftwareService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    DeviceSoftwareService.ctorParameters = function () { return [
        { type: i1.AdvancedSoftwareService }
    ]; };

    var DeviceSoftwareListComponent = /** @class */ (function () {
        function DeviceSoftwareListComponent(deviceSoftwareService) {
            this.deviceSoftwareService = deviceSoftwareService;
            this.filterCriteria$ = rxjs.of(null);
            this.update = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.onListEmpty = new i0.EventEmitter();
            this.alreadyInstalledMessage = ngxComponents.gettext('This software is already installed on the device');
            this.supportsSoftwareOperations = false;
            this.operationTypes = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];
            this.legacySoftwareList$ = new rxjs.BehaviorSubject([]);
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(DeviceSoftwareListComponent.prototype, "softwareList", {
            set: function (softwareList) {
                if (softwareList !== null) {
                    this.legacySoftwareList$.next(softwareList);
                }
            },
            enumerable: false,
            configurable: true
        });
        DeviceSoftwareListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.softwareItems$ = rxjs.combineLatest([
                this.filterCriteria$.pipe(operators.debounceTime(300), operators.distinctUntilChanged()),
                this.legacySoftwareList$
            ]).pipe(operators.switchMap(function (_c) {
                var _d = __read(_c, 2), filterCriteria = _d[0], legacySoftwareList = _d[1];
                var _a;
                return _this.deviceSoftwareService
                    .getSoftwareList((_a = _this.device) === null || _a === void 0 ? void 0 : _a.id, filterCriteria, legacySoftwareList)
                    .pipe(operators.map(function (resultList) { return ({ resultList: resultList, filterCriteria: filterCriteria }); }));
            }), operators.tap(function (_c) {
                var resultList = _c.resultList, filterCriteria = _c.filterCriteria;
                var _a, _b;
                _this.notifyListEmpty(!((_a = resultList === null || resultList === void 0 ? void 0 : resultList.paging) === null || _a === void 0 ? void 0 : _a.totalPages) && !filterCriteria);
                _this.noSearchResults = !((_b = resultList === null || resultList === void 0 ? void 0 : resultList.paging) === null || _b === void 0 ? void 0 : _b.totalPages) && !!filterCriteria;
            }), operators.map(function (_c) {
                var resultList = _c.resultList;
                return resultList;
            }), operators.share(), operators.takeUntil(this.destroyed$));
            var supportedOperations = lodashEs.get(this.device, 'c8y_SupportedOperations', []);
            this.supportsSoftwareOperations = this.operationTypes.some(function (operationType) { return supportedOperations.indexOf(operationType) > -1; });
        };
        DeviceSoftwareListComponent.prototype.ngAfterContentInit = function () {
            this.showUpdate = this.update.observers.length > 0;
            this.showRemove = this.remove.observers.length > 0;
        };
        DeviceSoftwareListComponent.prototype.isSoftwareGoingToBeChanged = function (software) {
            var relevantChanges = lodashEs.filter(this.deviceSoftwareChanges, software);
            return relevantChanges.length > 0;
        };
        DeviceSoftwareListComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        DeviceSoftwareListComponent.prototype.notifyListEmpty = function (isEmpty) {
            this.emptyList = isEmpty;
            this.onListEmpty.emit(isEmpty);
        };
        return DeviceSoftwareListComponent;
    }());
    DeviceSoftwareListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-device-software-list',
                    template: "<c8y-list-group class=\"no-border-last\">\n  <c8y-li\n    [ngClass]=\"{ disabled: isSoftwareGoingToBeChanged(software) }\"\n    *c8yFor=\"let software of softwareItems$\"\n  >\n    <!-- SOFTWARE ICON -->\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-tools\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-20\">\n      <div title=\"{{ software.name }}\" class=\"col-9\">\n        <p class=\"d-flex\">\n          <!-- SOFTWARE NAME -->\n          <span class=\"text-truncate\">\n            {{ software.name }}\n          </span>\n          <!-- SOFTWARE TYPE-->\n          <span class=\"text-truncate\">\n            <span class=\"label label-primary m-l-8\">{{ software.softwareType }}</span>\n          </span>\n        </p>\n        <!-- SOFTWARE VERSION -->\n        <p class=\"d-flex a-i-center\">\n          <span class=\"text-truncate text-label-small m-r-4\" translate> Version </span>\n          <span class=\"text-truncate m-r-4\" title=\"{{ software.version }}\">\n            {{ software.version }}\n          </span>\n          <i\n            *ngIf=\"software.installed\"\n            c8yIcon=\"warning\"\n            class=\"text-warning a-s-center\"\n            [tooltip]=\"\n              alreadyInstalledMessage\n                | translate: { name: software.name, version: software.version }\n            \"\n            container=\"body\"\n            placement=\"top\"\n          ></i>\n        </p>\n      </div>\n\n      <div\n        *ngIf=\"supportsSoftwareOperations && (showUpdate || showRemove)\"\n        class=\"col-3 text-right m-0 flex-grow\"\n      >\n        <!-- UPDATE SOFTWARE -->\n        <button\n          *ngIf=\"showUpdate && !isSoftwareGoingToBeChanged(software)\"\n          class=\"btn btn-default btn-xs showOnHover m-l-0 m-r-4\"\n          (click)=\"update.emit(software)\"\n          title=\"{{ 'Update`software,verb`' | translate }}\"\n        >\n          {{ 'Update`software,verb`' | translate }}\n        </button>\n\n        <!-- REMOVE SOFTWARE -->\n        <button\n          *ngIf=\"showRemove && !isSoftwareGoingToBeChanged(software)\"\n          class=\"btn btn-dot showOnHover m-l-4\"\n          (click)=\"remove.emit(software)\"\n          tooltip=\"{{ 'Remove`software,verb`' | translate }}\"\n          placement=\"bottom\"\n          container=\"body\"\n        >\n          <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n        </button>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n</c8y-list-group>\n<!-- NO SEARCH RESULTS STATE -->\n<div class=\"card-block\" *ngIf=\"noSearchResults || emptyList\">\n  <ng-content *ngIf=\"emptyList\" select=\".c8y-empty-state:not(.c8y-no-results-state)\"></ng-content>\n  <ng-content *ngIf=\"noSearchResults\" select=\".c8y-no-results-state\"></ng-content>\n</div>\n"
                },] }
    ];
    DeviceSoftwareListComponent.ctorParameters = function () { return [
        { type: DeviceSoftwareService }
    ]; };
    DeviceSoftwareListComponent.propDecorators = {
        softwareList: [{ type: i0.Input }],
        device: [{ type: i0.Input }],
        deviceSoftwareChanges: [{ type: i0.Input }],
        filterCriteria$: [{ type: i0.Input }],
        update: [{ type: i0.Output }],
        remove: [{ type: i0.Output }],
        onListEmpty: [{ type: i0.Output }]
    };

    var InstalledSoftwareComponent = /** @class */ (function () {
        function InstalledSoftwareComponent(repository, bsModal) {
            this.repository = repository;
            this.bsModal = bsModal;
            this.changes = new i0.EventEmitter();
            this.showSoftwareChanges = new i0.EventEmitter();
            this.alreadyInstalledMessage = ngxComponents.gettext('{{ name }} (v. {{ version }}) is already installed on this device');
            this.showFilter = false;
            this.supportsSoftwareOperations = false;
            this.textFilter$ = new rxjs.BehaviorSubject('');
            this.softwareTypeFilter$ = new rxjs.BehaviorSubject('');
            this.operationTypes = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];
            this.destroyed$ = new rxjs.Subject();
            this.filterCriteria$ = rxjs.combineLatest([this.textFilter$, this.softwareTypeFilter$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), textFilter = _b[0], softwareTypeFilter = _b[1];
                return ({
                    name: textFilter,
                    softwareType: softwareTypeFilter
                });
            }), operators.map(function (filterCriteria) { return !filterCriteria.name && !filterCriteria.softwareType ? null : filterCriteria; }));
            this.queriesUtil = new client.QueriesUtil();
        }
        InstalledSoftwareComponent.prototype.ngOnInit = function () {
            var supportedOperations = lodashEs.get(this.device, 'c8y_SupportedOperations', []);
            this.supportsSoftwareOperations = this.operationTypes.some(function (operationType) { return supportedOperations.indexOf(operationType) > -1; });
        };
        InstalledSoftwareComponent.prototype.installSoftware = function () {
            var _this = this;
            var _a = this.displaySoftwareSelectModal({
                title: ngxComponents.gettext('Install software'),
                subTitle: ngxComponents.gettext('Available softwares matching the device type'),
                labels: { ok: ngxComponents.gettext('Install') },
                showAdditionalFilter: true,
                additionalFilterTemplate: this.softwareTypeTemplate,
                repositoryEntriesWithVersions$: rxjs.of([]),
                repositoryEntriesWithVersionsFn$: function (modal) { return _this.getInstallableSoftwareListWithVersions$(modal.content.searchTerm); }
            }), resultEmitter = _a.resultEmitter, choiceEmitter = _a.choiceEmitter, updateInstallableList$ = _a.updateInstallableList$;
            resultEmitter.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (softwareToInstall) {
                _this.emitSoftwareInstall(softwareToInstall);
                _this.showSoftwareChanges.emit();
            });
            choiceEmitter
                .pipe(this.isSoftwareInstalledOnDevicePipe(updateInstallableList$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var item = _a.item;
                return updateInstallableList$.next({
                    object: item,
                    template: _this.alreadyInstalledWarningTemplate,
                    mapper: function (object) {
                        object.installed = true;
                        return object;
                    }
                });
            });
        };
        InstalledSoftwareComponent.prototype.updateSoftware = function (softwareToUpdate) {
            var _this = this;
            var _a = this.displaySoftwareSelectModal({
                title: ngxComponents.gettext('Update software'),
                subTitle: ngxComponents.gettext('Select one of the available software versions'),
                labels: { ok: ngxComponents.gettext('Update') },
                noItemsMessage: ngxComponents.gettext('No other software versions available.'),
                showFilter: false,
                repositoryEntriesWithVersions$: this.getSingleSoftwareWithVersions$(softwareToUpdate)
            }), resultEmitter = _a.resultEmitter, choiceEmitter = _a.choiceEmitter, updateInstallableList$ = _a.updateInstallableList$;
            resultEmitter.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (softwareToInstall) {
                _this.emitSoftwareInstall(softwareToInstall);
                _this.showSoftwareChanges.emit();
            });
            choiceEmitter
                .pipe(this.isSoftwareInstalledOnDevicePipe(updateInstallableList$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var item = _a.item;
                return updateInstallableList$.next({
                    object: item,
                    template: _this.alreadyInstalledWarningTemplate,
                    mapper: function (object) {
                        object.installed = true;
                        return object;
                    }
                });
            });
        };
        InstalledSoftwareComponent.prototype.removeSoftware = function (softwareToRemove) {
            this.emitSoftwareRemoval([softwareToRemove]);
        };
        InstalledSoftwareComponent.prototype.getInstallableSoftwareListWithVersions$ = function (searchTerm$) {
            var _this = this;
            var installedSoftwareNames = (this.softwareList || []).map(function (s) { return s.name; });
            return searchTerm$.pipe(operators.distinctUntilChanged(), operators.switchMap(function (searchTerm) { return _this.repository.listRepositoryEntries(i1.RepositoryType.SOFTWARE, {
                query: searchTerm.softwareType
                    ? _this.queriesUtil.addAndFilter(_this.typesQuery, {
                        softwareType: searchTerm.softwareType
                    })
                    : _this.typesQuery,
                partialName: searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.name,
                params: { pageSize: 100 }
            }); }), operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.map(function (softwareList) {
                return softwareList.filter(function (software) {
                    return !installedSoftwareNames.includes(software.name);
                });
            }), operators.map(function (softwareList) { return _this.attachVersions(softwareList); }), operators.shareReplay(1));
        };
        InstalledSoftwareComponent.prototype.getSingleSoftwareWithVersions$ = function (software) {
            var _this = this;
            return rxjs.from(this.repository.listRepositoryEntries(i1.RepositoryType.SOFTWARE, {
                query: { name: software.name }
            })).pipe(operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.map(function (softwareList) { return _this.attachVersions(softwareList); }), operators.shareReplay(1));
        };
        InstalledSoftwareComponent.prototype.attachVersions = function (softwareList) {
            var _this = this;
            softwareList.forEach(function (software) {
                software.versions = _this.repository.listBaseVersions(software);
            });
            return softwareList;
        };
        InstalledSoftwareComponent.prototype.displaySoftwareSelectModal = function (initialStateOverrides) {
            var initialState = Object.assign({ repositoryType: i1.RepositoryType.SOFTWARE, mode: ngxComponents.ModalSelectionMode.MULTI, icon: 'c8y-tools', disableSelected: false, selected: this.softwareList }, initialStateOverrides);
            var modal = this.bsModal.show(i1.RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                class: 'modal-sm',
                initialState: initialState
            });
            if (initialStateOverrides.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ =
                    initialStateOverrides.repositoryEntriesWithVersionsFn$(modal);
            }
            this.modalSearch = modal.content.search.bind(modal.content);
            modal.content.load.next();
            return {
                resultEmitter: modal.content.resultEmitter,
                choiceEmitter: modal.content.onChoiceUpdated,
                updateInstallableList$: modal.content.updateInstallableList$
            };
        };
        InstalledSoftwareComponent.prototype.search = function (filterCriteria) {
            if (this.modalSearch) {
                this.modalSearch(filterCriteria);
            }
        };
        InstalledSoftwareComponent.prototype.emitSoftwareInstall = function (items) {
            this.changes.emit(items.map(function (item) {
                return Object.assign(Object.assign({}, item), { action: 'install' });
            }));
        };
        InstalledSoftwareComponent.prototype.emitSoftwareRemoval = function (items) {
            this.changes.emit(items.map(function (item) {
                return Object.assign(Object.assign({}, item), { action: 'delete' });
            }));
        };
        InstalledSoftwareComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        InstalledSoftwareComponent.prototype.isSoftwareInstalledOnDevicePipe = function (updateInstallableList$) {
            var _this = this;
            return rxjs.pipe(operators.tap(function (item) { return updateInstallableList$.next({ object: item, template: _this.loadingTemplate }); }), operators.map(function (item) { return ({
                item: item,
                software: ((item.options || []).find(function (option) { return option.obj.id === item.selectedId; }) || {}).obj
            }); }), operators.mergeMap(function (_a) {
                var item = _a.item, software = _a.software;
                return rxjs.from(_this.repository.isSoftwareInstalledOnDevice(_this.device.id, software)).pipe(operators.map(function (installed) { return ({ item: item, installed: installed }); }));
            }), operators.tap(function (_a) {
                var item = _a.item;
                return updateInstallableList$.next({ object: item });
            }), operators.filter(function (_a) {
                var installed = _a.installed;
                return !!installed;
            }));
        };
        return InstalledSoftwareComponent;
    }());
    InstalledSoftwareComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-installed-software',
                    template: "<div class=\"d-flex d-col flex-grow\">\n  <div class=\"card-header large-padding separator sticky-top\">\n    <h4 class=\"card-title\" translate>Installed software</h4>\n  </div>\n  <div class=\"flex-grow\">\n    <fieldset\n      id=\"operation-block\"\n      *ngIf=\"deviceSoftwareChangesOperation\"\n      class=\"card-block large-padding bg-gray-lighter\"\n    >\n      <c8y-operation-details [operation]=\"deviceSoftwareChangesOperation\"></c8y-operation-details>\n    </fieldset>\n    <fieldset class=\"card-block large-padding overflow-visible separator-bottom\" *ngIf=\"showFilter\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              type=\"search\"\n              title=\"{{ 'Filter installed software\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter installed software\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                class=\"text-muted\"\n                c8yIcon=\"times\"\n                *ngIf=\"(textFilter$ | async).length > 0\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-xs-6\">\n          <c8y-software-type\n            [required]=\"false\"\n            [emitResultsOnly]=\"true\"\n            [showBtnInNotFoundMessage]=\"false\"\n            [allowFreeEntries]=\"false\"\n            [placeholder]=\"'Filter by software type\u2026' | translate\"\n            [showClearSelectionOption]=\"true\"\n            (onSelectSoftware)=\"softwareTypeFilter$.next($event?.softwareType)\"\n          ></c8y-software-type>\n        </div>\n      </div>\n    </fieldset>\n\n    <fieldset\n      id=\"software-list\"\n      class=\"flex-grow inner-scroll\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <!-- NOT EMPTY STATE -->\n      <c8y-device-software-list\n        [device]=\"device\"\n        [filterCriteria$]=\"filterCriteria$\"\n        [softwareList]=\"softwareList\"\n        [deviceSoftwareChanges]=\"deviceSoftwareChanges\"\n        (update)=\"updateSoftware($event)\"\n        (remove)=\"removeSoftware($event)\"\n        (onListEmpty)=\"showFilter = !$event\"\n        class=\"d-block p-l-16 p-r-16\"\n        container=\"body\"\n      >\n        <!-- EMPTY STATE -->\n        <div class=\"c8y-empty-state text-center m-t-16\">\n          <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n          <p>\n            <strong translate>No software installed.</strong> <br />\n            <small translate>Click below to install software into this device.</small>\n          </p>\n        </div>\n        <!-- NO SEARCH RESULTS STATE -->\n        <div class=\"c8y-empty-state c8y-no-results-state text-center\">\n          <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n          <p>\n            <strong translate>No software matches your filter criteria.</strong> <br />\n            <small translate>Try changing your search criteria.</small>\n          </p>\n        </div>\n      </c8y-device-software-list>\n    </fieldset>\n  </div>\n  <!-- INSTALL SOFTWARE-->\n  <div\n    class=\"card-footer large-padding separator sticky-bottom d-flex j-c-between bg-white\"\n    [ngClass]=\"{ 'visible-sm visible-xs': !supportsSoftwareOperations }\"\n  >\n    <button\n      *ngIf=\"supportsSoftwareOperations\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Install software' | translate }}\"\n      (click)=\"installSoftware()\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      {{ 'Install software' | translate }}\n    </button>\n    <button\n      (click)=\"showSoftwareChanges.emit()\"\n      class=\"btn btn-clean text-primary visible-sm visible-xs\"\n      [title]=\"'Show &quot;Software changes&quot;' | translate\"\n    >\n      <span translate>Show \"Software changes\"</span>\n      <i c8yIcon=\"chevron-right\"></i>\n    </button>\n  </div>\n</div>\n\n<ng-template #alreadyInstalledWarning let-item let-option=\"option\">\n  <i\n    c8yIcon=\"warning\"\n    class=\"text-warning a-s-center\"\n    [tooltip]=\"\n      alreadyInstalledMessage\n        | translate: { name: item.body[0].value, version: option.body[0].value }\n    \"\n  ></i>\n</ng-template>\n\n<ng-template #loading>\n  <div class=\"p-relative d-flex m-l-auto\">\n    <i class=\"icon-spin\" c8yIcon=\"circle-o-notch\"></i>\n  </div>\n</ng-template>\n\n<ng-template #softwareType>\n  <c8y-software-type\n    additionalFilter\n    [required]=\"false\"\n    [placeholder]=\"'Filter by software type\u2026' | translate\"\n    (onSelectSoftware)=\"search({ softwareType: $event?.softwareType })\"\n    [emitResultsOnly]=\"true\"\n    [showBtnInNotFoundMessage]=\"false\"\n    [allowFreeEntries]=\"false\"\n    [showClearSelectionOption]=\"true\"\n  ></c8y-software-type>\n</ng-template>\n"
                },] }
    ];
    InstalledSoftwareComponent.ctorParameters = function () { return [
        { type: i1.RepositoryService },
        { type: modal.BsModalService }
    ]; };
    InstalledSoftwareComponent.propDecorators = {
        device: [{ type: i0.Input }],
        softwareList: [{ type: i0.Input }],
        deviceSoftwareChanges: [{ type: i0.Input }],
        deviceSoftwareChangesOperation: [{ type: i0.Input }],
        deviceSoftwareChangesInProgress: [{ type: i0.Input }],
        typesQuery: [{ type: i0.Input }],
        changes: [{ type: i0.Output }],
        showSoftwareChanges: [{ type: i0.Output }],
        alreadyInstalledWarningTemplate: [{ type: i0.ViewChild, args: ['alreadyInstalledWarning', { static: true },] }],
        loadingTemplate: [{ type: i0.ViewChild, args: ['loading', { static: true },] }],
        softwareTypeTemplate: [{ type: i0.ViewChild, args: ['softwareType', { static: true },] }]
    };

    var SoftwareDeviceTabComponent = /** @class */ (function () {
        function SoftwareDeviceTabComponent(route, repository, inventory, deviceSoftwareService, advancedSoftwareService) {
            var _this = this;
            this.route = route;
            this.repository = repository;
            this.inventory = inventory;
            this.deviceSoftwareService = deviceSoftwareService;
            this.advancedSoftwareService = advancedSoftwareService;
            this.deviceId = this.route.snapshot.parent.data.contextData.id;
            this.device$ = new rxjs.BehaviorSubject(this.route.snapshot.parent.data.contextData);
            this.typesQuery$ = this.device$.pipe(operators.map(function (device) {
                var deviceTypeQuery = _this.repository.getDeviceTypeQuery(i1.RepositoryType.SOFTWARE, device);
                return _this.repository.getSoftwareTypeQuery(device, deviceTypeQuery);
            }));
            this.list$ = this.device$.pipe(operators.switchMap(function (device) { return _this.advancedSoftwareService
                .isASMAvailable()
                .then(function (isASMAvailable) { return ({ isASMAvailable: isASMAvailable, device: device }); }); }), operators.map(function (_a) {
                var isASMAvailable = _a.isASMAvailable, device = _a.device;
                // with ASM available software items will be retrieved directly in the
                // device-software-list component
                return isASMAvailable ? undefined : _this.repository.getDeviceSoftwareList(device);
            }));
            this.changes$ = new rxjs.BehaviorSubject([]);
            this.changesOperation$ = new rxjs.BehaviorSubject(null);
            this.changesInProgress$ = this.changesOperation$.pipe(operators.map(function (operation) { return _this.isInProgress(operation); }));
            this.reloading = false;
            this.showSoftwareChanges = false;
        }
        SoftwareDeviceTabComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadDevice()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.loadOperation()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareDeviceTabComponent.prototype.addChanges = function (requestedChanges) {
            var _this = this;
            var stagedChanges = __spreadArray([], __read(this.changes$.value));
            requestedChanges.forEach(function (requestedChange) {
                var alreadyStaged = stagedChanges.some(function (stagedChange) { return _this.areSameChanges(stagedChange, requestedChange); });
                if (!alreadyStaged) {
                    stagedChanges = __spreadArray(__spreadArray([], __read(stagedChanges)), [requestedChange]);
                }
            });
            this.changes$.next(stagedChanges);
        };
        SoftwareDeviceTabComponent.prototype.dropChange = function (changeToBeDropped) {
            var _this = this;
            var stagedChanges = __spreadArray([], __read(this.changes$.value));
            stagedChanges = stagedChanges.filter(function (stagedChange) { return !_this.areSameChanges(stagedChange, changeToBeDropped); });
            this.changes$.next(stagedChanges);
        };
        SoftwareDeviceTabComponent.prototype.areSameChanges = function (change1, change2) {
            return (change1.name === change2.name &&
                change1.version === change2.version &&
                change1.action === change2.action);
        };
        SoftwareDeviceTabComponent.prototype.clearChanges = function () {
            this.changes$.next([]);
        };
        SoftwareDeviceTabComponent.prototype.loadDevice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var device;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.reloading = true;
                            this.deviceSoftwareService.reload();
                            return [4 /*yield*/, Promise.all([
                                    this.deviceSoftwareService.loading$
                                        .pipe(operators.filter(function (loading) { return !loading; }), operators.take(1))
                                        .toPromise(),
                                    this.inventory.detail(this.deviceId, { withChildren: false }).then(function (result) { return result.data; })
                                ]).then(function (_a) {
                                    var _b = __read(_a, 2), _ = _b[0], dvc = _b[1];
                                    return dvc;
                                })];
                        case 1:
                            device = _a.sent();
                            this.device$.next(device);
                            this.reloading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareDeviceTabComponent.prototype.applyChanges = function () {
            return __awaiter(this, void 0, void 0, function () {
                var operation;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repository.createSoftwareUpdateOperation(this.device$.value, this.changes$.value)];
                        case 1:
                            operation = _a.sent();
                            return [4 /*yield*/, this.trackOperation(operation)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareDeviceTabComponent.prototype.loadOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var operation;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repository.getLastSoftwareUpdateOperation(this.deviceId)];
                        case 1:
                            operation = _a.sent();
                            return [4 /*yield*/, this.trackOperation(operation)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareDeviceTabComponent.prototype.trackOperation = function (operation) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.changesOperation$.next(operation);
                            if (!this.isInProgress(operation)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.displayChangesFromOperation(operation)];
                        case 1:
                            _a.sent();
                            this.repository.observeOperation(operation).subscribe(function (operationUpdate) {
                                _this.changesOperation$.next(operationUpdate);
                                if (operationUpdate.status === client.OperationStatus.SUCCESSFUL) {
                                    _this.clearChanges();
                                    _this.loadDevice();
                                }
                            }, function (operationUpdate) {
                                _this.changesOperation$.next(operationUpdate);
                            });
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareDeviceTabComponent.prototype.displayChangesFromOperation = function (operation) {
            return __awaiter(this, void 0, void 0, function () {
                var changes;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repository.getDeviceSoftwareChangesFromOperation(operation, this.device$.value)];
                        case 1:
                            changes = _a.sent();
                            this.changes$.next(changes);
                            return [2 /*return*/];
                    }
                });
            });
        };
        SoftwareDeviceTabComponent.prototype.isInProgress = function (operation) {
            return (operation && [client.OperationStatus.PENDING, client.OperationStatus.EXECUTING].includes(operation.status));
        };
        return SoftwareDeviceTabComponent;
    }());
    SoftwareDeviceTabComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-software-device-tab',
                    template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadDevice()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card split-view--7-5 m-b-0\">\n  <c8y-installed-software\n    class=\"split-view__list\"\n    [device]=\"device$ | async\"\n    [typesQuery]=\"typesQuery$ | async\"\n    [softwareList]=\"list$ | async\"\n    [deviceSoftwareChanges]=\"changes$ | async\"\n    [deviceSoftwareChangesOperation]=\"changesOperation$ | async\"\n    [deviceSoftwareChangesInProgress]=\"changesInProgress$ | async\"\n    (changes)=\"addChanges($event)\"\n    (showSoftwareChanges)=\"showSoftwareChanges = true\"\n  ></c8y-installed-software>\n  <c8y-device-software-changes\n    class=\"bg-gray-white split-view__detail\"\n    [ngClass]=\"{ 'split-view__detail--selected': showSoftwareChanges }\"\n    [changes]=\"changes$ | async\"\n    [changesInProgress]=\"changesInProgress$ | async\"\n    (clear)=\"clearChanges()\"\n    (drop)=\"dropChange($event)\"\n    (apply)=\"applyChanges()\"\n    (hideSoftwareChanges)=\"showSoftwareChanges = false\"\n  ></c8y-device-software-changes>\n</div>\n"
                },] }
    ];
    SoftwareDeviceTabComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: i1.RepositoryService },
        { type: client.InventoryService },
        { type: DeviceSoftwareService },
        { type: i1.AdvancedSoftwareService }
    ]; };

    var SoftwareDeviceTabGuard = /** @class */ (function () {
        function SoftwareDeviceTabGuard() {
            this.operations = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];
        }
        SoftwareDeviceTabGuard.prototype.canActivate = function (route) {
            var device = lodashEs.get(route, 'data.contextData') || lodashEs.get(route, 'parent.data.contextData');
            return (this.isAnyOperationSupported(device) ||
                lodashEs.has(device, 'c8y_Software') ||
                lodashEs.has(device, 'c8y_SoftwareList') ||
                lodashEs.has(device, 'c8y_SupportedSoftwareTypes'));
        };
        SoftwareDeviceTabGuard.prototype.isAnyOperationSupported = function (device) {
            var supportedOperations = (device === null || device === void 0 ? void 0 : device.c8y_SupportedOperations) || [];
            return this.operations.some(function (operation) { return supportedOperations.indexOf(operation) >= 0; });
        };
        return SoftwareDeviceTabGuard;
    }());
    SoftwareDeviceTabGuard.decorators = [
        { type: i0.Injectable }
    ];

    var SoftwareRepositoryDeviceTabModule = /** @class */ (function () {
        function SoftwareRepositoryDeviceTabModule() {
        }
        SoftwareRepositoryDeviceTabModule.forRoot = function () {
            return {
                ngModule: SoftwareRepositoryDeviceTabModule,
                providers: [
                    SoftwareDeviceTabGuard,
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: [
                            {
                                context: ngxComponents.ViewContext.Device,
                                path: 'software',
                                component: SoftwareDeviceTabComponent,
                                label: ngxComponents.gettext('Software'),
                                icon: 'c8y-tools',
                                priority: 499,
                                canActivate: [SoftwareDeviceTabGuard]
                            }
                        ],
                        multi: true
                    }
                ]
            };
        };
        return SoftwareRepositoryDeviceTabModule;
    }());
    SoftwareRepositoryDeviceTabModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ngxComponents.CoreModule,
                        router.RouterModule,
                        i1.SharedRepositoryModule,
                        operationDetails.OperationDetailsModule,
                        tooltip.TooltipModule
                    ],
                    declarations: [
                        SoftwareDeviceTabComponent,
                        InstalledSoftwareComponent,
                        DeviceSoftwareListComponent,
                        DeviceSoftwareChangesComponent
                    ],
                    entryComponents: [
                        SoftwareDeviceTabComponent,
                        DeviceSoftwareListComponent,
                        DeviceSoftwareChangesComponent
                    ]
                },] }
    ];

    var SoftwareRepositoryModule = /** @class */ (function () {
        function SoftwareRepositoryModule() {
        }
        return SoftwareRepositoryModule;
    }());
    SoftwareRepositoryModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        SoftwareRepositoryDeviceTabModule.forRoot(),
                        SoftwareRepositoryListModule.forRoot()
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AddSoftwareModalComponent = AddSoftwareModalComponent;
    exports.DeviceSoftwareChangesComponent = DeviceSoftwareChangesComponent;
    exports.DeviceSoftwareListComponent = DeviceSoftwareListComponent;
    exports.DeviceSoftwareService = DeviceSoftwareService;
    exports.InstalledSoftwareComponent = InstalledSoftwareComponent;
    exports.SoftwareDetailsComponent = SoftwareDetailsComponent;
    exports.SoftwareDeviceTabComponent = SoftwareDeviceTabComponent;
    exports.SoftwareDeviceTabGuard = SoftwareDeviceTabGuard;
    exports.SoftwareListComponent = SoftwareListComponent;
    exports.SoftwareRepositoryDeviceTabModule = SoftwareRepositoryDeviceTabModule;
    exports.SoftwareRepositoryListModule = SoftwareRepositoryListModule;
    exports.SoftwareRepositoryModule = SoftwareRepositoryModule;
    exports["ɵa"] = SoftwareRepositoryDeviceTabModule;
    exports["ɵb"] = SoftwareDeviceTabComponent;
    exports["ɵc"] = DeviceSoftwareService;
    exports["ɵd"] = InstalledSoftwareComponent;
    exports["ɵe"] = DeviceSoftwareListComponent;
    exports["ɵf"] = DeviceSoftwareChangesComponent;
    exports["ɵg"] = SoftwareDeviceTabGuard;
    exports["ɵh"] = SoftwareRepositoryListModule;
    exports["ɵi"] = SoftwareListComponent;
    exports["ɵj"] = SoftwareDetailsComponent;
    exports["ɵk"] = AddSoftwareModalComponent;
    exports["ɵl"] = NameCellRendererComponent;
    exports["ɵm"] = SoftwareTypeCellRendererComponent;
    exports["ɵn"] = SoftwareTypeFilteringFormRendererComponent;
    exports["ɵo"] = DeviceTypeCellRendererComponent;
    exports["ɵp"] = VersionsCellRendererComponent;
    exports["ɵq"] = SoftwareRepositoryNavigationFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-repository-software.umd.js.map
