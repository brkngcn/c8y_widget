(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('ngx-bootstrap/modal'), require('@angular/router'), require('@c8y/client'), require('@ngx-translate/core'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('@c8y/client'), require('@angular/forms'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('@c8y/ngx-components/assets-navigator'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/context-dashboard', ['exports', '@angular/core', '@c8y/ngx-components', 'ngx-bootstrap/modal', '@angular/router', '@c8y/client', '@ngx-translate/core', 'lodash-es', 'rxjs', 'rxjs/operators', '@c8y/client', '@angular/forms', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', '@c8y/ngx-components/assets-navigator', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["context-dashboard"] = {}), global.ng.core, global.c8y["ngx-components"], global.i3$1, global.ng.router, global.client, global.i3, global.lodashEs, global.rxjs, global.rxjs.operators, global.i1, global.ng.forms, global.dropdown, global.popover, global.tooltip, global.c8y["ngx-components"]["assets-navigator"], global.ng.common));
})(this, (function (exports, i0, i2, i3$1, i4, client, i3, lodashEs, rxjs, operators, i1, forms, dropdown, popover, tooltip, assetsNavigator, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CONTEXT_DASHBOARD_CONFIG = new i0.InjectionToken('ContextDashboardConfig');
    exports.ContextDashboardType = void 0;
    (function (ContextDashboardType) {
        ContextDashboardType["Device"] = "device";
        ContextDashboardType["DeviceType"] = "type";
        ContextDashboardType["Group"] = "group";
        ContextDashboardType["Named"] = "name";
        ContextDashboardType["Report"] = "report";
    })(exports.ContextDashboardType || (exports.ContextDashboardType = {}));
    var WIDGET_HEADER_CLASSES = [
        {
            label: i2.gettext('Regular`style`'),
            class: 'panel-title-regular',
            description: i2.gettext('The widget has no border between header and content.')
        },
        {
            label: i2.gettext('Border`style`'),
            class: 'panel-title-border',
            description: i2.gettext('The widget has a small separation border between header and content.')
        },
        {
            label: i2.gettext('Overlay`style`'),
            class: 'panel-title-overlay',
            description: i2.gettext('The widget content overlays the header.')
        },
        {
            label: i2.gettext('Hidden`style`'),
            class: 'panel-title-hidden',
            description: i2.gettext('The widget header is not shown.')
        }
    ];
    var WIDGET_CONTENT_CLASSES = [
        {
            label: i2.gettext('Light`style`'),
            class: 'panel-content-light',
            description: i2.gettext('The widget is styled with a light background and has low contrast.')
        },
        {
            label: i2.gettext('Dark`style`'),
            class: 'panel-content-dark',
            description: i2.gettext('The widget is styled with a dark background and has high contrast.')
        },
        {
            label: i2.gettext('Transparent`style`'),
            class: 'panel-content-transparent',
            description: i2.gettext('The widget is styled with a transparent background and therefore is border-less.')
        },
        {
            label: i2.gettext('Branded`style`'),
            class: 'panel-content-branded',
            description: i2.gettext('The widget is styled with the main brand color.')
        }
    ];
    var DASHBOARD_THEME_CLASSES = [
        {
            label: i2.gettext('Light`theme`'),
            class: 'dashboard-theme-light',
            description: i2.gettext('The dashboard is styled with a light background and has low contrast.')
        },
        {
            label: i2.gettext('Dark`theme`'),
            class: 'dashboard-theme-dark',
            description: i2.gettext('The dashboard is styled with a dark background and has high contrast.')
        },
        {
            label: i2.gettext('Transparent`theme`'),
            class: 'dashboard-theme-transparent',
            description: i2.gettext('The dashboard is styled with a transparent background and therefore is border-less.')
        },
        {
            label: i2.gettext('Branded`theme`'),
            class: 'dashboard-theme-branded',
            description: i2.gettext('The dashboard is styled with the main brand color.')
        }
    ];
    var STYLING_CLASS_PREFIXES = ['dashboard-theme-', 'panel-title-', 'panel-content-'];

    var ContextDashboardService = /** @class */ (function () {
        function ContextDashboardService(inventory, tabs, modal, translateService, router, navigator, permissions, alert) {
            this.inventory = inventory;
            this.tabs = tabs;
            this.modal = modal;
            this.translateService = translateService;
            this.router = router;
            this.navigator = navigator;
            this.permissions = permissions;
            this.alert = alert;
            this.REPORT_PARTIAL_NAME = 'report_';
            this.cache = new Map();
            this.DEFAULT_PAGESIZE = 1000;
            this.FRAGMENT_NAME = 'c8y_Dashboard';
            this.DASHBOARD_ROUTE_PATH = 'dashboard';
            this.INDEX_SPLIT = '!';
            this._formDisabled = true;
        }
        Object.defineProperty(ContextDashboardService.prototype, "formDisabled", {
            get: function () {
                return this._formDisabled;
            },
            set: function (value) {
                this._formDisabled = value;
            },
            enumerable: false,
            configurable: true
        });
        ContextDashboardService.prototype.create = function (dashboardCfg, context, name) {
            if (name === void 0) { name = ''; }
            return __awaiter(this, void 0, void 0, function () {
                var id, dashboardType, dashboard, value, fragmentKey, data, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            id = '';
                            if (context) {
                                id = context.contextData.id;
                                dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, context);
                            }
                            if (name) {
                                dashboardType = exports.ContextDashboardType.Named;
                            }
                            dashboard = {};
                            lodashEs.assign(dashboard, { c8y_Dashboard: dashboardCfg });
                            value = dashboardType === exports.ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : name || id;
                            fragmentKey = this.createFragmentKey(dashboardType, value);
                            dashboard[fragmentKey] = {};
                            if (this.shouldSetGlobal(dashboard, context)) {
                                lodashEs.assign(dashboard, { c8y_Global: {} });
                            }
                            dashboard.name = dashboard.c8y_Dashboard.name;
                            if (!(dashboardType === exports.ContextDashboardType.Group ||
                                dashboardType === exports.ContextDashboardType.Device ||
                                (context && dashboardType === exports.ContextDashboardType.Named))) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.inventory.childAdditionsCreate(dashboard, id)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.inventory.create(dashboard)];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            data = (_a).data;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.detail = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventory.detail(dashboardMO)];
                        case 1:
                            data = (_a.sent()).data;
                            this.cache.set(dashboardMO.id, data);
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.update = function (dashboard) {
            return __awaiter(this, void 0, void 0, function () {
                var keepFragments, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dashboard.name = dashboard.c8y_Dashboard.name;
                            keepFragments = this.clean(lodashEs.pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
                            keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
                            return [4 /*yield*/, this.inventory.update(keepFragments)];
                        case 1:
                            data = (_a.sent()).data;
                            this.cache.set(dashboard.id, data);
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.delete = function (dashboard, withConfirmation) {
            if (withConfirmation === void 0) { withConfirmation = true; }
            return __awaiter(this, void 0, void 0, function () {
                var msg, tabToRemove, ex_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            if (!withConfirmation) return [3 /*break*/, 2];
                            msg = i2.gettext("You are about to delete the dashboard \"{{ dashboardName }}\". Do you want to proceed?");
                            if (this.isDeviceType(dashboard)) {
                                msg = i2.gettext("You are about to delete the dashboard \"{{ dashboardName }}\" from all devices of the type \"{{ deviceType }}\".\n           Do you want to proceed?");
                            }
                            return [4 /*yield*/, this.modal.confirm(i2.gettext('Delete dashboard'), this.translateService.instant(msg, {
                                    dashboardName: dashboard.c8y_Dashboard.name,
                                    deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                                }), i2.Status.DANGER, {
                                    ok: i2.gettext('Delete'),
                                    cancel: i2.gettext('Cancel')
                                })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, this.inventory.delete(dashboard)];
                        case 3:
                            _a.sent();
                            tabToRemove = Array.from(this.tabs.state).find(function (tab) { return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboard.id); });
                            this.tabs.remove(tabToRemove);
                            this.tabs.refresh();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.activateDashboards = function (route, types) {
            var dashboardId = route.params.dashboardId;
            if (dashboardId) {
                return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(operators.tap(function (dashboard) {
                    route.data = { dashboard: dashboard };
                }), operators.map(function () { return true; }), operators.catchError(function () {
                    return rxjs.of(false);
                }));
            }
            return this.getTabs$(route.data.contextData, types);
        };
        ContextDashboardService.prototype.getNamedDashboardOrCreate = function (name, defaultWidgets, context) {
            var _this = this;
            var children = this.mapWidgets(defaultWidgets);
            return this.getDashboard$(name, [exports.ContextDashboardType.Named]).pipe(operators.throwIfEmpty(), operators.catchError(function () { return rxjs.from(_this.create({
                children: children,
                widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
            }, context, name)); }));
        };
        ContextDashboardService.prototype.refreshTabs = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                var tabToUpdate, data, _a, icon, priority, name;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!this.isNamed(dashboardMO)) return [3 /*break*/, 2];
                            tabToUpdate = Array.from(this.tabs.state).find(function (tab) { return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboardMO.id); });
                            return [4 /*yield*/, this.detail(dashboardMO)];
                        case 1:
                            data = _b.sent();
                            if (tabToUpdate) {
                                _a = data.c8y_Dashboard, icon = _a.icon, priority = _a.priority, name = _a.name;
                                tabToUpdate.icon = icon;
                                tabToUpdate.priority = priority;
                                tabToUpdate.label = name;
                            }
                            this.tabs.refresh();
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.updateNavigatorItem = function (mo) {
            var _this = this;
            this.navigator.state.forEach(function (node) {
                if (node.path === "reports/" + mo.id) {
                    _this.navigator.remove(node);
                }
            });
            if (mo.c8y_IsNavigatorNode) {
                var nodeToAdd = new i2.NavigatorNode({
                    label: mo.name,
                    path: "reports/" + mo.id,
                    icon: mo.icon,
                    priority: mo.priority
                });
                this.navigator.add(nodeToAdd);
            }
        };
        ContextDashboardService.prototype.navigateToDashboard = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (/dashboard/.test(this.router.url)) {
                        this.router.navigate(['..', dashboardMO.id], {
                            relativeTo: i2.getActivatedRoute(this.router)
                        });
                    }
                    else {
                        this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                            relativeTo: i2.getActivatedRoute(this.router)
                        });
                    }
                    return [2 /*return*/];
                });
            });
        };
        ContextDashboardService.prototype.canEditDashboard = function (mo) {
            return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
        };
        ContextDashboardService.prototype.isNamed = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT).test(prop); });
        };
        ContextDashboardService.prototype.isReport = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT + _this.REPORT_PARTIAL_NAME).test(prop); });
        };
        ContextDashboardService.prototype.isDeviceType = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.DeviceType + _this.INDEX_SPLIT).test(prop); });
        };
        ContextDashboardService.prototype.isDeviceDashboard = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Device + _this.INDEX_SPLIT).test(prop); });
        };
        ContextDashboardService.prototype.isGroupDashboard = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Group + _this.INDEX_SPLIT).test(prop); });
        };
        ContextDashboardService.prototype.getFilteredDashboardStyles = function (styleList) {
            return styleList.filter(function (c) { return STYLING_CLASS_PREFIXES.some(function (classPrefix) { return c.startsWith(classPrefix); }); });
        };
        ContextDashboardService.prototype.getStyling = function (styleList, styleName, defaultValue) {
            var styling = styleList.find(function (style) { return style && new RegExp("-" + styleName + "$", 'i').test(style.class); });
            return styling ? styling.class : defaultValue;
        };
        ContextDashboardService.prototype.mapWidgets = function (widgets) {
            return lodashEs.keyBy(widgets.map(function (widget) {
                widget.id = String(Math.random()).substr(2);
                return widget;
            }), 'id');
        };
        ContextDashboardService.prototype.getDashboard$ = function (dashboardIdOrName, dashboardType, mo) {
            var _this = this;
            var cache = this.cache.get(dashboardIdOrName);
            var dashboards = mo
                ? this.getContextDashboards(mo, dashboardType)
                : [this.getNamedDashboard(dashboardIdOrName)];
            var cacheRefresh = this.getContextDashboards$(dashboards).pipe(operators.tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), operators.filter(function (dashboard) { return dashboard.id === dashboardIdOrName ||
                lodashEs.has(dashboard, "" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT + dashboardIdOrName); }));
            return cache ? rxjs.of(cache) : cacheRefresh;
        };
        ContextDashboardService.prototype.pasteDashboard = function (newContext) {
            return __awaiter(this, void 0, void 0, function () {
                var dashboardToPaste, dashboard;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.copyClipboard) return [3 /*break*/, 2];
                            if (!this.canPasteDashboard(this.copyClipboard, newContext.context)) return [3 /*break*/, 2];
                            dashboardToPaste = this.createContextDashboardCopy(this.copyClipboard.dashboard, newContext.contextData, this.copyClipboard.context.contextData);
                            return [4 /*yield*/, this.create(this.clean(dashboardToPaste), newContext)];
                        case 1:
                            dashboard = _a.sent();
                            this.copyClipboard = undefined;
                            this.navigateToDashboard(dashboard);
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.canPasteDashboard = function (copyClipboard, currentContext) {
            var clipboardViewContext = copyClipboard.context.context;
            if (currentContext !== clipboardViewContext) {
                if (clipboardViewContext === i2.ViewContext.Device) {
                    this.alert.warning(i2.gettext('Device dashboards can only be copied into a device.'));
                }
                else if (clipboardViewContext === i2.ViewContext.Group) {
                    this.alert.warning(i2.gettext('Group dashboards can only be copied into a group.'));
                }
                return false;
            }
            return true;
        };
        ContextDashboardService.prototype.createContextDashboardCopy = function (dash, newContext, oldContext) {
            var _this = this;
            var children = lodashEs.reduce(dash.children, function (_children, child) {
                var id = child.id;
                var cfg = child.config;
                var propertiesToCopy = {
                    device: function (device) { return _this.replaceContextInObj(device, newContext, oldContext); },
                    datapoints: function (dataPoints) { return _this.replaceContextInDataPoints(dataPoints, newContext, oldContext); },
                    dataPoints: function (dataPoints) { return _this.replaceContextInDataPoints(dataPoints, newContext, oldContext); },
                    datapointsGauge: function (dataPoints) { return _this.replaceContextInDataPoints(dataPoints, newContext, oldContext); },
                    datapointsLabels: function (dataPoints) { return _this.replaceContextInDataPoints(dataPoints, newContext, oldContext); }
                };
                if (cfg) {
                    _this.copyProperties(cfg, propertiesToCopy);
                    if (cfg.options) {
                        _this.copyProperties(cfg.options, propertiesToCopy);
                    }
                }
                _children[id] = lodashEs.cloneDeep(child);
                return _children;
            }, {});
            dash.children = children;
            return dash;
        };
        ContextDashboardService.prototype.copyProperties = function (obj, propertiesToCopy) {
            lodashEs.forEach(propertiesToCopy, function (copyFn, property) {
                if (obj[property]) {
                    obj[property] = copyFn(obj[property]);
                }
            });
        };
        ContextDashboardService.prototype.replaceContextInDataPoints = function (dataPoints, newContext, oldContext) {
            var _this = this;
            dataPoints.forEach(function (dp) {
                dp.__target = _this.replaceContextInObj(dp.__target, newContext, oldContext);
            });
            return dataPoints;
        };
        ContextDashboardService.prototype.replaceContextInObj = function (obj, newContext, oldContext) {
            if (obj && obj.id === oldContext.id) {
                Object.assign(obj, lodashEs.pick(newContext, ['id', 'name']));
            }
            return obj;
        };
        ContextDashboardService.prototype.getTabs$ = function (mo, dashboardType) {
            var _this = this;
            var dashboards = this.getContextDashboards(mo, dashboardType);
            return this.getContextDashboards$(dashboards).pipe(operators.map(function (dashboard) { return _this.removeDashboardMoProperty(dashboard); }), operators.tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), operators.map(function (dashboard) { return _this.createDashboardTab(dashboard); }), operators.toArray());
        };
        ContextDashboardService.prototype.getContextDashboards$ = function (requests) {
            return rxjs.from(requests).pipe(operators.mergeAll(), operators.mergeMap(function (response) { return response.data; }));
        };
        /**
         * Cleans already corrupted dashboards from dashboardMo property.
         * Added to fix dashboards on the cloud instance (eu-latest).
         * @deprecated This is going to be removed after 1007.7.0.
         */
        ContextDashboardService.prototype.removeDashboardMoProperty = function (dashboard) {
            var dashboardCopy = lodashEs.cloneDeep(dashboard);
            var children = lodashEs.get(dashboardCopy, 'c8y_Dashboard.children');
            var updateDashboard = false;
            lodashEs.forEach(children, function (child) {
                if (lodashEs.get(child, 'componentTransformConfigWithContext')) {
                    delete child.componentTransformConfigWithContext;
                    updateDashboard = true;
                }
                if (lodashEs.get(child, 'config.dashboardMo')) {
                    delete child.config.dashboardMo;
                    updateDashboard = true;
                }
            });
            if (updateDashboard) {
                this.update(dashboardCopy);
            }
            return dashboardCopy;
        };
        ContextDashboardService.prototype.cacheDashboard = function (dashboard) {
            this.cache.set(dashboard.id, dashboard);
        };
        ContextDashboardService.prototype.createDashboardTab = function (dashboard) {
            var _dashboard = dashboard.c8y_Dashboard, id = dashboard.id;
            return {
                icon: _dashboard.icon,
                path: this.DASHBOARD_ROUTE_PATH + "/" + id,
                label: _dashboard.name,
                priority: _dashboard.priority,
                hide: this.isReport(dashboard)
            };
        };
        ContextDashboardService.prototype.clean = function (dashboard) {
            var jsonString = JSON.stringify(dashboard, function (key, value) {
                if (key === '$$hashKey' || key === 'klasses') {
                    return undefined;
                }
                return value;
            });
            return JSON.parse(jsonString);
        };
        ContextDashboardService.prototype.getNamedDashboard = function (name) {
            return this.inventory.list({
                fragmentType: "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + exports.ContextDashboardType.Named + this.INDEX_SPLIT + name,
                pageSize: 1
            });
        };
        ContextDashboardService.prototype.getContextDashboards = function (mo, dashboardType) {
            var _this = this;
            return dashboardType.map(function (type) { return _this.inventory.list({
                fragmentType: _this.createDashboardFragment(mo, type),
                pageSize: _this.DEFAULT_PAGESIZE
            }); });
        };
        ContextDashboardService.prototype.createDashboardFragment = function (mo, type) {
            var value;
            if (mo.c8y_Report) {
                value = "" + this.REPORT_PARTIAL_NAME + mo.id;
            }
            else {
                value = type === exports.ContextDashboardType.DeviceType ? mo.type : mo.id;
            }
            return "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + type + this.INDEX_SPLIT + value;
        };
        ContextDashboardService.prototype.getDashboardTypeFromViewContext = function (dashboardCfg, context) {
            var dashboardType;
            if (context.context === i2.ViewContext.Device) {
                dashboardType = dashboardCfg.deviceType
                    ? exports.ContextDashboardType.DeviceType
                    : exports.ContextDashboardType.Device;
            }
            if (context.context === i2.ViewContext.Group) {
                dashboardType = exports.ContextDashboardType.Group;
            }
            return dashboardType;
        };
        ContextDashboardService.prototype.createFragmentKey = function (contextDashboardType, value) {
            return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
        };
        ContextDashboardService.prototype.shouldSetGlobal = function (dashboard, context) {
            if ((!context && this.isNamed(dashboard) && !this.isReport(dashboard)) ||
                this.isDeviceType(dashboard)) {
                return {};
            }
            return null;
        };
        return ContextDashboardService;
    }());
    ContextDashboardService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ContextDashboardService_Factory() { return new ContextDashboardService(i0__namespace.ɵɵinject(i1__namespace.InventoryService), i0__namespace.ɵɵinject(i2__namespace.TabsService), i0__namespace.ɵɵinject(i2__namespace.ModalService), i0__namespace.ɵɵinject(i3__namespace.TranslateService), i0__namespace.ɵɵinject(i4__namespace.Router), i0__namespace.ɵɵinject(i2__namespace.NavigatorService), i0__namespace.ɵɵinject(i2__namespace.Permissions), i0__namespace.ɵɵinject(i2__namespace.AlertService)); }, token: ContextDashboardService, providedIn: "root" });
    ContextDashboardService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ContextDashboardService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: i2.TabsService },
        { type: i2.ModalService },
        { type: i3.TranslateService },
        { type: i4.Router },
        { type: i2.NavigatorService },
        { type: i2.Permissions },
        { type: i2.AlertService }
    ]; };

    var ReportDashboardService = /** @class */ (function () {
        function ReportDashboardService(inventoryService, navigatorService) {
            this.inventoryService = inventoryService;
            this.navigatorService = navigatorService;
            this.queriesUtil = new client.QueriesUtil();
        }
        ReportDashboardService.prototype.listReports = function (options) {
            if (options === void 0) { options = {}; }
            var query = { __has: 'c8y_Report' };
            if (options.filter) {
                query = this.queriesUtil.addAndFilter(query, options.filter);
            }
            var filters = {
                query: this.queriesUtil.buildQuery(query),
                pageSize: options.pageSize || 50,
                withTotalPages: true
            };
            return this.inventoryService.list(filters);
        };
        ReportDashboardService.prototype.createReport = function (reportCfg) {
            var report = {};
            Object.assign(report, reportCfg);
            Object.assign(report, { c8y_Report: {} });
            return this.inventoryService.create(report);
        };
        ReportDashboardService.prototype.addReportNavigatorNode = function (report) {
            var node = new i2.NavigatorNode({
                label: report.name,
                path: "reports/" + report.id,
                icon: report.icon,
                priority: report.priority
            });
            this.navigatorService.add(node);
        };
        ReportDashboardService.prototype.removeNavigatorNode = function (report) {
            var _this = this;
            this.navigatorService.state.forEach(function (node) {
                if (node.path === "reports/" + report.id) {
                    _this.navigatorService.remove(node);
                    return;
                }
            });
        };
        return ReportDashboardService;
    }());
    ReportDashboardService.decorators = [
        { type: i0.Injectable }
    ];
    ReportDashboardService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: i2.NavigatorService }
    ]; };

    var REPORTS_NAVIGATOR_NODE_PRIORITY = 40;
    var REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY = 30;
    var ReportDashboardNavigationFactory = /** @class */ (function () {
        function ReportDashboardNavigationFactory(navigatorService, inventoryService, reportDashboardService) {
            this.navigatorService = navigatorService;
            this.inventoryService = inventoryService;
            this.reportDashboardService = reportDashboardService;
            this.loaded = false;
        }
        ReportDashboardNavigationFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                var reports;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.loaded) return [3 /*break*/, 2];
                            this.loaded = true;
                            this.navigatorService.add(new i2.NavigatorNode({
                                label: i2.gettext('Reports'),
                                path: 'reports',
                                icon: 'c8y-reports',
                                featureId: 'reports',
                                priority: REPORTS_NAVIGATOR_NODE_PRIORITY
                            }));
                            return [4 /*yield*/, this.reportDashboardService.listReports({
                                    filter: { __has: 'c8y_IsNavigatorNode' },
                                    pageSize: 2000
                                })];
                        case 1:
                            reports = (_a.sent()).data;
                            reports.forEach(function (report) {
                                var node = new i2.NavigatorNode({
                                    label: report.name,
                                    path: "reports/" + report.id,
                                    icon: report.icon,
                                    priority: report.priority,
                                    routerLinkExact: false
                                });
                                _this.navigatorService.add(node);
                            });
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        return ReportDashboardNavigationFactory;
    }());
    ReportDashboardNavigationFactory.decorators = [
        { type: i0.Injectable }
    ];
    ReportDashboardNavigationFactory.ctorParameters = function () { return [
        { type: i2.NavigatorService },
        { type: client.InventoryService },
        { type: ReportDashboardService }
    ]; };

    var DashboardDetailComponent = /** @class */ (function () {
        function DashboardDetailComponent(modal, iconList, contextDashboardService, navigatorService, permissionsService, translateService) {
            var _this = this;
            this.modal = modal;
            this.contextDashboardService = contextDashboardService;
            this.navigatorService = navigatorService;
            this.permissionsService = permissionsService;
            this.translateService = translateService;
            this.styling = {
                themeClass: 'dashboard-theme-light',
                headerClass: 'panel-title-regular'
            };
            this.possibleStyling = { DASHBOARD_THEME_CLASSES: DASHBOARD_THEME_CLASSES, WIDGET_HEADER_CLASSES: WIDGET_HEADER_CLASSES };
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
            this.DEFAULT_DASHBOARD_MARGIN = 12;
            this.DEFAULT_DASHBOARD_ICON = 'th';
            this.DEFAULT_DASHBOARD_PRIORITY = 10000;
            this.icons = iconList;
            this.filteredIcons = iconList;
        }
        Object.defineProperty(DashboardDetailComponent.prototype, "applyToDevicesOfTypeTitle", {
            get: function () {
                var text = this.applyToDevicesOfTypePermitted ?
                    i2.gettext('Apply dashboard to all devices of type {{ type }}') :
                    i2.gettext('Apply dashboard to all devices of type {{ type }} (permission required)');
                return this.translateService.instant(text, { type: this.dashboard.deviceTypeValue });
            },
            enumerable: false,
            configurable: true
        });
        DashboardDetailComponent.prototype.ngAfterContentInit = function () {
            var defaultDashboardCfg = {
                name: this.translateService.instant(this.isReport ? i2.gettext('Report') : i2.gettext('Dashboard')),
                priority: this.isReport ? REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY : this.DEFAULT_DASHBOARD_PRIORITY,
                icon: this.DEFAULT_DASHBOARD_ICON,
                deviceTypeValue: this.deviceType
            };
            if (this.dashboard) {
                this.currentDashboard = lodashEs.clone(this.dashboard);
                this.dashboardName = this.currentDashboard.name;
                this.setDashboardStyle();
            }
            else {
                this.dashboard = defaultDashboardCfg;
                this.dashboardName = this.dashboard.name;
                this.dashboardDetailForm.form.markAsDirty();
            }
            this.setTitle();
            this.setupApplyToDevicesOfTypeCheckbox();
            this.navigatorNodes$ = this.navigatorService.items$;
            this.namePlaceholder = this.isReport ? i2.gettext('e.g. My report') : i2.gettext('e.g. My dashboard');
        };
        DashboardDetailComponent.prototype.setTitle = function () {
            if (!this.currentDashboard) {
                this.title = this.isReport ? i2.gettext('Add report') : i2.gettext('Add dashboard');
            }
            else {
                this.title = this.isReport ? i2.gettext('Edit report') : i2.gettext('Edit dashboard');
            }
        };
        DashboardDetailComponent.prototype.setupApplyToDevicesOfTypeCheckbox = function () {
            var rolesToCheck = ['ROLE_INVENTORY_CREATE', 'ROLE_INVENTORY_ADMIN'];
            this.applyToDevicesOfTypePermitted = this.permissionsService.hasAnyRole(rolesToCheck);
        };
        DashboardDetailComponent.prototype.save = function () {
            var _a, _b;
            this.dashboard.name = this.dashboardName;
            this.dashboard.classes = (_a = {}, _a[this.styling.themeClass] = true, _a);
            this.dashboard.widgetClasses = (_b = {}, _b[this.styling.headerClass] = true, _b);
            this.dashboard.c8y_IsNavigatorNode = this.dashboard.c8y_IsNavigatorNode
                ? {}
                : this.currentDashboard
                    ? null
                    : undefined;
            this._save(this.dashboard);
        };
        DashboardDetailComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        DashboardDetailComponent.prototype.getDashboardPreviewStyle = function () {
            var cssClasses = {};
            cssClasses[this.styling.headerClass] = true;
            cssClasses[this.styling.themeClass] = true;
            return cssClasses;
        };
        DashboardDetailComponent.prototype.selectIcon = function (icon) {
            this.dashboard.icon = icon;
            this.dashboardDetailForm.form.markAsDirty();
        };
        DashboardDetailComponent.prototype.updateFiltered = function (term) {
            if (term) {
                var search_1 = new RegExp(term, 'i');
                this.filteredIcons = this.icons.filter(function (val) { return search_1.test(val); });
            }
            else {
                this.filteredIcons = this.icons;
            }
        };
        DashboardDetailComponent.prototype.setDashboardStyle = function () {
            var _this = this;
            var allClasses = Object.assign(Object.assign({}, this.dashboard.classes), this.dashboard.widgetClasses);
            var styles = Object.keys(allClasses).map(function (c) { return c.split('-').pop(); });
            styles.forEach(function (styleName) {
                _this.styling.themeClass = _this.contextDashboardService.getStyling(DASHBOARD_THEME_CLASSES, styleName, _this.styling.themeClass);
                _this.styling.headerClass = _this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, _this.styling.headerClass);
            });
        };
        return DashboardDetailComponent;
    }());
    DashboardDetailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-dashboard-detail',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3>{{ title | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-24 p-r-24\">\n      <form #dashboardDetailForm=\"ngForm\" class=\"d-contents\">\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <div *ngIf=\"!isNamedDashboard || isReport\">\n              <h6 class=\"legend form-block\">\n                <span>{{ 'General' | translate }}</span>\n              </h6>\n              <div class=\"d-flex\">\n                <c8y-form-group>\n                  <label class=\"d-block\">{{ 'Icon' | translate }}</label>\n                  <div dropdown class=\"dropdown\">\n                    <button\n                      title=\"{{ 'Icon' | translate }}\"\n                      class=\"btn-default btn btn-gray\"\n                      dropdownToggle\n                    >\n                      <i c8yIcon=\"{{ dashboard.icon }}\"></i>\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul\n                      *dropdownMenu\n                      class=\"dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0\"\n                      style=\"max-height: 250px;\"\n                    >\n                      <ng-container *ngFor=\"let icon of filteredIcons\">\n                        <li (click)=\"selectIcon(icon)\">\n                          <a\n                            class=\"interact\"\n                            title=\"{{ icon }}\"\n                            [ngClass]=\"{ active: dashboard.icon === icon }\"\n                          >\n                            <i class=\"icon\" [c8yIcon]=\"icon\"></i>\n                          </a>\n                        </li>\n                      </ng-container>\n                    </ul>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group class=\"flex-grow\">\n                  <label>\n                    <span class=\"m-r-4\">{{ 'Menu label' | translate }}</span>\n                    <button\n                      class=\"btn btn-clean\"\n                      popover=\"{{\n                        'Menu label to display in submenu when dashboard is attached' | translate\n                      }}\"\n                      triggers=\"focus\"\n                      placement=\"right\"\n                      container=\"body\"\n                    >\n                      <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                    </button>\n                  </label>\n                  <input\n                    title=\"{{ 'Menu label' | translate }}\"\n                    class=\"form-control\"\n                    name=\"name\"\n                    [(ngModel)]=\"dashboardName\"\n                    placeholder=\"{{ namePlaceholder | translate }}\"\n                    maxlength=\"512\"\n                    required\n                  />\n                </c8y-form-group>\n              </div>\n              <c8y-form-group *ngIf=\"isReport\">\n                <label translate>Description</label>\n                <textarea\n                  class=\"form-control\"\n                  rows=\"2\"\n                  name=\"description\"\n                  [(ngModel)]=\"dashboard.description\"\n                ></textarea>\n              </c8y-form-group>\n              <div class=\"row\">\n                <div class=\"col-sm-6\" *ngIf=\"!isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigation' | translate }}</span>\n                      <button\n                        class=\"btn btn-clean\"\n                        popover=\"{{\n                          'Position in navigation menu (10000 first, -10000 last)' | translate\n                        }}\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"10000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                      required\n                    />\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <label translate>Navigator menu item</label>\n                  <c8y-form-group>\n                    <label title=\"{{ 'Show in navigator' | translate }}\" class=\"c8y-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"isNavigatorNode\"\n                        [(ngModel)]=\"!!dashboard.c8y_IsNavigatorNode\"\n                      /><span></span>\n                      <span>{{ 'Show in navigator' | translate }}</span>\n                    </label>\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigator' | translate }}</span>\n                      <ng-template #positionInNavPop>\n                        <span>\n                          {{\n                            'Position in navigator (10001 first, -10000 last).' | translate\n                          }}&nbsp;\n                          {{ 'Existing nodes:' | translate }}\n                        </span>\n                        <ul class=\"list-unstyled m-t-16\">\n                          <li *ngFor=\"let node of navigatorNodes$ | async\">\n                            <i [c8yIcon]=\"node.icon\"></i>\n                            <span class=\"word-break m-l-4 m-r-16\">\n                              {{\n                                node.label.length > 15\n                                  ? (node.label | slice: 0:15) + '...'\n                                  : node.label\n                              }}\n                            </span>\n                            <span class=\"pull-right\"> {{ node.priority }} </span>\n                          </li>\n                        </ul>\n                      </ng-template>\n                      <button\n                        class=\"btn btn-clean\"\n                        [popover]=\"positionInNavPop\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"20000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                    />\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div *ngIf=\"!currentDashboard && deviceType\">\n                <div class=\"form-group\">\n                  <label title=\"{{ applyToDevicesOfTypeTitle }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"deviceType\"\n                      [(ngModel)]=\"dashboard.deviceType\"\n                      [disabled]=\"!applyToDevicesOfTypePermitted\"\n                    />\n                    <span></span>\n                    <span class=\"m-r-4\" translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                      Apply dashboard to all devices of type <i>{{ type }}</i>\n                    </span>\n                  </label>\n                </div>\n\n                <div class=\"alert alert-info m-b-24\" *ngIf=\"isDeviceType\">\n                  <i c8y-icon=\"info\"></i>\n                  <span translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                    This dashboard is shared between all devices of the type <i>{{ type }}</i>.\n                  </span>\n                </div>\n              </div>\n            </div>\n            <c8y-appearance-settings\n              [(themeClass)]=\"styling.themeClass\"\n              [(headerClass)]=\"styling.headerClass\"\n            >\n            </c8y-appearance-settings>\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label>{{ 'Widget margin' | translate }}</label>\n                  <div class=\"input-group\">\n                    <input\n                      title=\"{{ 'Widget margin' | translate }}\"\n                      id=\"margin\"\n                      name=\"margin\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      [(ngModel)]=\"dashboard.widgetMargin\"\n                      min=\"0\"\n                      max=\"50\"\n                      placeholder=\"{{ DEFAULT_DASHBOARD_MARGIN }}\"\n                    />\n                    <span class=\"input-group-addon\">px</span>\n                  </div>\n                </c8y-form-group>\n              </div>\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label translate>Widget titles</label>\n                  <label title=\"{{ 'Translate if possible' | translate }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"translateWidgetTitle\"\n                      [(ngModel)]=\"dashboard.translateWidgetTitle\"\n                    /><span></span>\n                    <span>{{ 'Translate if possible' | translate }}</span>\n                  </label>\n                </c8y-form-group>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-sm-6\">\n            <c8y-widget-preview\n              [tab]=\"!isNamedDashboard ? dashboard : undefined\"\n              [previewClasses]=\"getDashboardPreviewStyle()\"\n            ></c8y-widget-preview>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\">\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"dashboardDetailForm.form.invalid || dashboardDetailForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    DashboardDetailComponent.ctorParameters = function () { return [
        { type: i3$1.BsModalRef },
        { type: Array, decorators: [{ type: i0.Inject, args: [i2.ICON_LIST,] }] },
        { type: ContextDashboardService },
        { type: i2.NavigatorService },
        { type: i2.Permissions },
        { type: i3.TranslateService }
    ]; };
    DashboardDetailComponent.propDecorators = {
        dashboardDetailForm: [{ type: i0.ViewChild, args: ['dashboardDetailForm', { static: true },] }]
    };

    var AddDashboardFactory = /** @class */ (function () {
        function AddDashboardFactory(permissions, contextDashboardService, bsModal, contextRoute) {
            this.permissions = permissions;
            this.contextDashboardService = contextDashboardService;
            this.bsModal = bsModal;
            this.contextRoute = contextRoute;
        }
        AddDashboardFactory.prototype.get = function (activatedRoute) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.currentContext = this.contextRoute.getContextData(activatedRoute);
                            _b = [i2.ViewContext.Device, i2.ViewContext.Group].includes((_a = this.currentContext) === null || _a === void 0 ? void 0 : _a.context);
                            if (!_b) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.hasPermission(this.currentContext.contextData)];
                        case 1:
                            _b = (_c.sent());
                            _c.label = 2;
                        case 2:
                            if (_b) {
                                return [2 /*return*/, [
                                        {
                                            label: 'Add dashboard',
                                            component: AddDashboardComponent,
                                            priority: -Infinity
                                        }
                                    ]];
                            }
                            return [2 /*return*/, []];
                    }
                });
            });
        };
        AddDashboardFactory.prototype.addDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, dashboardCfg, dashboardMO, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this.currentContext.context === i2.ViewContext.Device) {
                                initialState = {
                                    deviceType: this.currentContext.contextData.type
                                };
                            }
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            dashboardCfg = _b.sent();
                            return [4 /*yield*/, this.contextDashboardService.create(dashboardCfg, this.currentContext)];
                        case 3:
                            dashboardMO = _b.sent();
                            return [4 /*yield*/, this.contextDashboardService.navigateToDashboard(dashboardMO)];
                        case 4:
                            _b.sent();
                            modal.close();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _b.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        AddDashboardFactory.prototype.hasPermission = function (context) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(context === null || context === void 0 ? void 0 : context.id)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context)];
                        case 1: return [2 /*return*/, _b.sent()];
                        case 2: return [2 /*return*/, (this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']))];
                    }
                });
            });
        };
        return AddDashboardFactory;
    }());
    AddDashboardFactory.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AddDashboardFactory_Factory() { return new AddDashboardFactory(i0__namespace.ɵɵinject(i2__namespace.Permissions), i0__namespace.ɵɵinject(ContextDashboardService), i0__namespace.ɵɵinject(i3__namespace$1.BsModalService), i0__namespace.ɵɵinject(i2__namespace.ContextRouteService)); }, token: AddDashboardFactory, providedIn: "root" });
    AddDashboardFactory.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    AddDashboardFactory.ctorParameters = function () { return [
        { type: i2.Permissions },
        { type: ContextDashboardService },
        { type: i3$1.BsModalService },
        { type: i2.ContextRouteService }
    ]; };

    var AddDashboardComponent = /** @class */ (function () {
        function AddDashboardComponent(viewContainerRef, addDashboardFactory) {
            this.viewContainerRef = viewContainerRef;
            this.addDashboardFactory = addDashboardFactory;
        }
        AddDashboardComponent.prototype.ngOnInit = function () {
            this.viewContainerRef.createEmbeddedView(this.template);
        };
        AddDashboardComponent.prototype.addDashboard = function () {
            this.addDashboardFactory.addDashboard();
        };
        return AddDashboardComponent;
    }());
    AddDashboardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-add-dashboard',
                    template: "<ng-template #template>\n  <li class=\"d-flex-xs a-i-center\">\n    <button\n      class=\"btn btn-clean m-t-lg-4 p-l-xs-16 p-r-xs-16\"\n      title=\"{{ 'Add dashboard' | translate }}\"\n      (click)=\"addDashboard()\"\n      tooltip=\"{{ 'Add dashboard' | translate }}\"\n      placement=\"right\"\n      container=\"body\"\n    >\n      <i c8yIcon=\"plus-circle\" class=\"icon-20\"></i>\n    </button>\n  </li>\n</ng-template>"
                },] }
    ];
    AddDashboardComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: AddDashboardFactory }
    ]; };
    AddDashboardComponent.propDecorators = {
        template: [{ type: i0.ViewChild, args: ['template', { static: true },] }]
    };

    var AppearanceSettingsComponent = /** @class */ (function () {
        function AppearanceSettingsComponent() {
            this.themeClass = 'dashboard-theme-light';
            this.headerClass = 'panel-title-regular';
            this.themeClassChange = new i0.EventEmitter();
            this.headerClassChange = new i0.EventEmitter();
            this.possibleStylingTheme = DASHBOARD_THEME_CLASSES;
            this.possibleStylingHeader = WIDGET_HEADER_CLASSES;
        }
        AppearanceSettingsComponent.prototype.themeClassClick = function (value) {
            value = this.resetToDefault(value, this.themeClass, this.defaultThemeClass);
            this.themeClass = value;
            this.themeClassChange.emit(value);
        };
        AppearanceSettingsComponent.prototype.headerClassClick = function (value) {
            value = this.resetToDefault(value, this.headerClass, this.defaultHeaderClass);
            this.headerClass = value;
            this.headerClassChange.emit(value);
        };
        AppearanceSettingsComponent.prototype.resetToDefault = function (value, compareTo, defaultValue) {
            if (defaultValue && value === compareTo) {
                value = defaultValue;
            }
            return value;
        };
        return AppearanceSettingsComponent;
    }());
    AppearanceSettingsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-appearance-settings',
                    template: "<h6 class=\"legend form-block\"><span translate>Layout</span></h6>\n<div class=\"row \">\n  <div class=\"col-sm-6 m-b-32\">\n    <label translate>Theme</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row\"\n        style=\"align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let themeClassItem of possibleStylingTheme; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradiocontentclass' + i\"\n              name=\"content\"\n              [value]=\"themeClassItem.class\"\n              [ngModel]=\"themeClass\"\n              (click)=\"themeClassClick(themeClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradiocontentclass' + i\">\n          <span>{{ themeClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"themeClassItem.class === defaultThemeClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ themeClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-6\">\n    <label translate>Widget header style</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row a-i-center\"\n        style=\"box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let headerClassItem of possibleStylingHeader; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradioheaderclass' + i\"\n              name=\"header\"\n              [value]=\"headerClassItem.class\"\n              [ngModel]=\"headerClass\"\n              (click)=\"headerClassClick(headerClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradioheaderclass' + i\">\n          <span>{{ headerClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"headerClassItem.class === defaultHeaderClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ headerClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n</div>\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] }
    ];
    AppearanceSettingsComponent.propDecorators = {
        themeClass: [{ type: i0.Input }],
        headerClass: [{ type: i0.Input }],
        defaultThemeClass: [{ type: i0.Input }],
        defaultHeaderClass: [{ type: i0.Input }],
        themeClassChange: [{ type: i0.Output }],
        headerClassChange: [{ type: i0.Output }],
        possibleStylingTheme: [{ type: i0.Input }],
        possibleStylingHeader: [{ type: i0.Input }]
    };

    /**
     * A hook to define the default widgets of the home dashboard in the cockpit app.
     */
    var COCKPIT_HOME_DASHBOARD_CONFIG = new i0.InjectionToken('CockpitHomeDashboardConfig');
    /**
     * An array of widgets that is per default placed on the home dashboard of the cockpit app.
     */
    var DEFAULT_COCKPIT_HOME_WIDGETS = [
        {
            name: 'cockpit.welcome.widget',
            title: i2.gettext(''),
            _x: 0,
            _y: 0,
            _height: 5,
            _width: 12,
            classes: { 'panel-title-hidden': true }
        },
        {
            name: 'Asset Alarms',
            title: i2.gettext('Active, critical alarms'),
            _x: 0,
            _y: 5,
            _height: 4,
            _width: 6
        },
        {
            name: 'Recent Alarms',
            title: i2.gettext('Recent alarms'),
            _x: 0,
            _y: 9,
            _height: 4,
            _width: 6
        },
        {
            name: 'Map',
            title: i2.gettext('Map'),
            _x: 6,
            _y: 5,
            _height: 8,
            _width: 6
        }
    ];

    var CockpitDashboardComponent = /** @class */ (function () {
        function CockpitDashboardComponent(appState, homeDashboardConfig) {
            var _a, _b;
            this.appState = appState;
            this.homeDashboardConfig = homeDashboardConfig;
            this.defaultWidgets = DEFAULT_COCKPIT_HOME_WIDGETS;
            this.dashboardName = 'home-cockpit1';
            this.pageTitle = i2.gettext('Home');
            var config = Object.assign(Object.assign({}, this.homeDashboardConfig), { dashboardName: (_a = appState.currentApplication.value.config) === null || _a === void 0 ? void 0 : _a.homeDashboardName, userSpecific: (_b = appState.currentApplication.value.config) === null || _b === void 0 ? void 0 : _b.userSpecificHomeDashboard });
            this.applyDashboardConfig(config);
        }
        CockpitDashboardComponent.prototype.applyDashboardConfig = function (config) {
            if (!config) {
                return;
            }
            if (config.dashboardName) {
                this.dashboardName = config.dashboardName;
            }
            if (config.defaultWidgets) {
                this.defaultWidgets = config.defaultWidgets;
            }
            if (config.userSpecific && this.appState.currentUser.value) {
                this.dashboardName = this.appState.currentUser.value.userName.replace(/\./g, '__') + "_" + this.dashboardName;
            }
            if (config.pageTitle) {
                this.pageTitle = config.pageTitle;
            }
        };
        return CockpitDashboardComponent;
    }());
    CockpitDashboardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-cockpit-dashboard',
                    template: "<c8y-title>\n  {{ pageTitle | translate }}\n</c8y-title>\n\n<c8y-help src=\"/users-guide/cockpit/#dashboards\"></c8y-help>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n"
                },] }
    ];
    CockpitDashboardComponent.ctorParameters = function () { return [
        { type: i2.AppStateService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [COCKPIT_HOME_DASHBOARD_CONFIG,] }] }
    ]; };

    var WidgetService = /** @class */ (function () {
        function WidgetService(dynamicComponentService, translateService, moduleConfig) {
            var _this = this;
            this.dynamicComponentService = dynamicComponentService;
            this.translateService = translateService;
            this.moduleConfig = moduleConfig;
            this.dynamicComponentService.items$.subscribe(function (widgets) {
                _this.widgets = widgets;
            });
        }
        WidgetService.prototype.getWidgetDefinition = function (componentId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.dynamicComponentService.getById(componentId)];
                });
            });
        };
        WidgetService.prototype.getWidgetDefinitions = function () {
            var _this = this;
            var translatedComponents = this.widgets.map(function (cmp) { return (Object.assign(Object.assign({}, cmp), { label: _this.translateService.instant(cmp.label) })); });
            return lodashEs.cloneDeep(lodashEs.sortBy(translatedComponents, 'label').filter(this.moduleConfig.widgetFilter));
        };
        WidgetService.prototype.mapLegacy = function (widget) {
            return __awaiter(this, void 0, void 0, function () {
                var cmp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getWidgetDefinition(widget.componentId || widget.name)];
                        case 1:
                            cmp = _a.sent();
                            if (lodashEs.get(cmp, 'data.settings.upgrade')) {
                                widget.widgetComponent = cmp.data.settings.widgetComponent;
                                widget.configComponent = cmp.data.settings.configComponent;
                                widget.templateUrl = cmp.data.settings.templateUrl;
                                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                                widget.transformConfigWithContext =
                                    cmp.data.settings.componentTransformConfigWithContext ||
                                        cmp.data.settings.transformConfigWithContext ||
                                        widget.transformConfigWithContext;
                            }
                            else {
                                delete widget.templateUrl;
                                delete widget.configTemplateUrl;
                            }
                            return [2 /*return*/, widget];
                    }
                });
            });
        };
        return WidgetService;
    }());
    WidgetService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function WidgetService_Factory() { return new WidgetService(i0__namespace.ɵɵinject(i2__namespace.DynamicComponentService), i0__namespace.ɵɵinject(i3__namespace.TranslateService), i0__namespace.ɵɵinject(CONTEXT_DASHBOARD_CONFIG, 8)); }, token: WidgetService, providedIn: "root" });
    WidgetService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    WidgetService.ctorParameters = function () { return [
        { type: i2.DynamicComponentService },
        { type: i3.TranslateService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] }
    ]; };

    var WidgetConfigComponent = /** @class */ (function () {
        function WidgetConfigComponent(widgetService, modal, inventory, contextDashboardService) {
            var _this = this;
            this.widgetService = widgetService;
            this.modal = modal;
            this.inventory = inventory;
            this.contextDashboardService = contextDashboardService;
            this.mode = 'select';
            this.searchChange$ = new rxjs.Subject();
            this.searchTerm = '';
            this.styling = {
                headerClass: 'panel-title-regular',
                contentClass: 'panel-content-light'
            };
            this.defaultStyling = {
                headerClass: 'panel-title-regular',
                contentClass: 'panel-content-light'
            };
            this.possibleStyling = { WIDGET_HEADER_CLASSES: WIDGET_HEADER_CLASSES, WIDGET_CONTENT_CLASSES: WIDGET_CONTENT_CLASSES };
            this.isUpgrade = false;
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        Object.defineProperty(WidgetConfigComponent.prototype, "isEdit", {
            get: function () {
                return !!this.current;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetConfigComponent.prototype, "isDeviceTypeDashboard", {
            get: function () {
                var _a, _b;
                return !!((_a = this.mo.c8y_Dashboard) === null || _a === void 0 ? void 0 : _a.deviceType) && !!((_b = this.mo.c8y_Dashboard) === null || _b === void 0 ? void 0 : _b.deviceTypeValue);
            },
            enumerable: false,
            configurable: true
        });
        WidgetConfigComponent.prototype.ngAfterContentInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _e, data, res;
                var _this = this;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            this.components = this.widgetService.getWidgetDefinitions();
                            if (this.selected) {
                                this.current = lodashEs.clone(this.selected);
                                this.select(this.selected, this.isEdit ? 'config' : 'select');
                            }
                            this.searchSub = this.searchChange$
                                .pipe(operators.switchMap(function (event) { return rxjs.iif(function () { return event.which !== 13; }, rxjs.timer(200), rxjs.timer(10)); }))
                                .subscribe(function () {
                                _this.search();
                            });
                            if (this.mo.c8y_Dashboard.classes) {
                                this.styling = this.setDefaultStyle(Object.assign(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses), (this.isEdit ? this.current.data.classes : {})));
                                this.defaultStyling = this.setDefaultStyle(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses));
                            }
                            if (!(this.widgetConfig && this.widgetConfig.device)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.inventory.detail(this.widgetConfig.device.id)];
                        case 1:
                            _e = _f.sent(), data = _e.data, res = _e.res;
                            this.selectedDevice = data;
                            _f.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        WidgetConfigComponent.prototype.checkIfDeviceRequired = function () {
            return (!this.widgetConfig.settings.deviceTargetNotRequired &&
                !this.widgetConfig.device &&
                !this.widgetConfig.settings.noDeviceTarget);
        };
        WidgetConfigComponent.prototype.selectionChanged = function (selection) {
            this.widgetConfig.device = selection.change.item;
        };
        WidgetConfigComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var hookSuccess, _e, _x, _y, _width, _height, _f, id, name, widget;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0: return [4 /*yield*/, this.dynamicComponent.callLifeCycleHooks().toPromise()];
                        case 1:
                            hookSuccess = _g.sent();
                            if (!hookSuccess) {
                                return [2 /*return*/];
                            }
                            _e = this.selected.data, _x = _e._x, _y = _e._y, _width = _e._width, _height = _e._height;
                            if (this.widgetConfig && this.widgetConfig.device) {
                                _f = this.widgetConfig.device, id = _f.id, name = _f.name;
                                this.widgetConfig.device = { id: id, name: name };
                            }
                            widget = Object.assign({ _x: _x,
                                _y: _y,
                                _width: _width,
                                _height: _height, config: lodashEs.omit(this.widgetConfig, 'settings'), title: this.selected.data.title, componentId: this.selected.id, id: this.isEdit ? this.current.data.id : String(Math.random()).substr(2), classes: this.getStyle() }, (!this.isEdit ? this.widgetConfig.settings.widgetDefaults : {}));
                            this._save(widget);
                            return [2 /*return*/];
                    }
                });
            });
        };
        WidgetConfigComponent.prototype.select = function (cmp, mode) {
            if (mode === void 0) { mode = 'config'; }
            cmp.data = cmp.data || {};
            this.selected = cmp;
            this.isUpgrade = !!lodashEs.get(cmp, 'data.settings.upgrade');
            this.contextDashboardService.formDisabled = this.isUpgrade;
            if (this.isEdit) {
                var _e = this.current.data, _x = _e._x, _y = _e._y, _width = _e._width, _height = _e._height, classes = _e.classes, title = _e.title;
                this.selected.data = Object.assign(Object.assign({}, this.selected.data), { _x: _x, _y: _y, _width: _width, _height: _height, classes: classes, title: title });
            }
            this.widgetConfig = lodashEs.cloneDeep(this.composeWidgetConfig(this.selected, this.context));
            this.selected.data.title = this.selected.data.title || cmp.label;
            this.componentLabel = cmp.label;
            this.mode = mode;
        };
        WidgetConfigComponent.prototype.search = function () {
            var _this = this;
            if (this.searchTerm.length > 0) {
                this.searchResult = this.components.filter(function (cmp) { return new RegExp(lodashEs.escapeRegExp(_this.searchTerm.trim()), 'i').test(cmp.label); });
            }
            else {
                this.resetSearch();
            }
        };
        WidgetConfigComponent.prototype.resetSearch = function () {
            this.searchTerm = '';
            this.searchResult = undefined;
        };
        WidgetConfigComponent.prototype.changeMode = function (mode) {
            this.mode = mode;
        };
        WidgetConfigComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        WidgetConfigComponent.prototype.getStyle = function (isPreview) {
            if (isPreview === void 0) { isPreview = false; }
            var cssClasses = {};
            if (isPreview || !this.isDashboardDefaultStyle(this.styling.headerClass)) {
                cssClasses[this.styling.headerClass] = true;
            }
            if (isPreview || !this.isDashboardDefaultStyle(this.styling.contentClass)) {
                cssClasses[this.styling.contentClass] = true;
            }
            if (isPreview) {
                cssClasses["dashboard-theme-" + this.defaultStyling.contentClass.split('-').pop()] = true;
            }
            return cssClasses;
        };
        WidgetConfigComponent.prototype.ngOnDestroy = function () {
            this.contextDashboardService.formDisabled = true;
            if (this.searchSub) {
                this.searchSub.unsubscribe();
            }
        };
        WidgetConfigComponent.prototype.hasConfig = function () {
            var _a, _b, _c, _d;
            if ((_a = this.widgetConfig.settings) === null || _a === void 0 ? void 0 : _a.upgrade) {
                return (((_b = this.widgetConfig.settings) === null || _b === void 0 ? void 0 : _b.configComponent) || ((_c = this.widgetConfig.settings) === null || _c === void 0 ? void 0 : _c.configTemplateUrl));
            }
            return !((_d = this.dynamicComponent) === null || _d === void 0 ? void 0 : _d.error);
        };
        WidgetConfigComponent.prototype.isDashboardDefaultStyle = function (className) {
            var allClasses = Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses);
            var styles = Object.keys(allClasses).map(function (cssClass) { return ({ class: cssClass }); });
            var style = this.contextDashboardService.getStyling(styles, className.split('-').pop(), undefined);
            return !!style;
        };
        WidgetConfigComponent.prototype.setDefaultStyle = function (setClasses) {
            var _this = this;
            var contentClass = this.styling.contentClass;
            var headerClass = this.styling.headerClass;
            var styles = this.contextDashboardService
                .getFilteredDashboardStyles(Object.keys(setClasses))
                .map(function (c) { return c.split('-').pop(); });
            styles.forEach(function (styleName) {
                contentClass = _this.contextDashboardService.getStyling(WIDGET_CONTENT_CLASSES, styleName, contentClass);
                headerClass = _this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, headerClass);
            });
            return { headerClass: headerClass, contentClass: contentClass };
        };
        WidgetConfigComponent.prototype.composeWidgetConfig = function (selectedComponent, context) {
            if (context === void 0) { context = {}; }
            var setting = Object.assign({ settings: Object.assign(Object.assign(Object.assign(Object.assign({}, selectedComponent.data.settings), lodashEs.get(selectedComponent.data.settings, 'ng1.options')), lodashEs.get(selectedComponent.data, 'ng1.options')), { context: context, dashboardMo: this.mo.c8y_Dashboard }) }, selectedComponent.data.config);
            return this.applyTargetIfDeviceDashboard(setting);
        };
        WidgetConfigComponent.prototype.applyTargetIfDeviceDashboard = function (widgetConfig) {
            var isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            if (isDeviceType) {
                widgetConfig.settings.hideTarget = isDeviceType;
                var noDeviceTarget = widgetConfig.settings.ng1
                    ? widgetConfig.settings.ng1.options.noDeviceTarget
                    : widgetConfig.settings.noDeviceTarget;
                if (!noDeviceTarget) {
                    widgetConfig.device = {
                        id: this.context.id,
                        name: this.context.name
                    };
                }
            }
            return widgetConfig;
        };
        return WidgetConfigComponent;
    }());
    WidgetConfigComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-widget-config',
                    template: "<div class=\"modal-header separator\">\n  <h4 class=\"text-medium\" *ngIf=\"!current\" translate>Add widget</h4>\n  <h4 class=\"text-medium\" *ngIf=\"current\" translate>Edit widget</h4>\n</div>\n<form #configForm=\"ngForm\" name=\"form\">\n  <div class=\"c8y-modal-tabs\">\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y p-l-24\">\n        <li [class.active]=\"mode === 'select'\">\n          <button type=\"button\" class=\"btn\" (click)=\"changeMode('select'); (false)\">\n            <i c8yIcon=\"th-large\"></i> <span class=\"txt\" translate>Select widget</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'config'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('config'); (false)\"\n          >\n            <i c8yIcon=\"cog\"></i> <span class=\"txt\" translate>Configuration</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'style'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('style'); (false)\"\n          >\n            <i c8yIcon=\"paint-brush\"></i> <span class=\"txt\" translate>Appearance</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div\n      *ngIf=\"mode === 'select'\"\n      class=\"bg-white p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0\"\n      style=\"z-index: 2\"\n    >\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              placeholder=\"{{ 'Search\u2026' | translate }}\"\n              type=\"text\"\n              [(ngModel)]=\"searchTerm\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (keydown)=\"searchChange$.next($event)\"\n            />\n            <span class=\"input-group-btn\">\n              <button class=\"btn btn-clean\" (click)=\"resetSearch()\" type=\"button\">\n                <i [c8yIcon]=\"searchTerm.length === 0 ? 'search' : 'close'\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-body bg-gray-lighter\" *ngIf=\"mode === 'select'\">\n      <div class=\"card-group card-select m-b-0\">\n        <div\n          class=\"col-md-3 col-sm-4 col-xs-6\"\n          *ngFor=\"let cmp of searchResult || components\"\n          title=\"{{ cmp.description | translate }}\"\n        >\n          <div class=\"card p-8\" [class.active]=\"selected === cmp\" (click)=\"select(cmp)\">\n            <div\n              class=\"text-center p-8 m-b-8 flex-col flex-center\"\n              style=\"min-height: 170px; background-color: var(--body-background-color, #f2f3f4)\"\n            >\n              <ng-container *ngIf=\"!cmp.previewImage; else previewImage\">\n                <h1><i c8yIcon=\"file-image-o\"></i></h1>\n                <small translate>Preview not available</small>\n              </ng-container>\n              <ng-template #previewImage>\n                <img class=\"img-responsive\" [src]=\"cmp.previewImage\" />\n              </ng-template>\n            </div>\n            <p class=\"card-title text-truncate\">\n              <c8y-highlight\n                text=\"{{ cmp.label | translate }}\"\n                [pattern]=\"searchTerm\"\n              ></c8y-highlight>\n            </p>\n          </div>\n        </div>\n\n        <div class=\"c8y-empty-state text-center\" *ngIf=\"searchResult && searchResult.length === 0\">\n          <h1 c8yIcon=\"search\"></h1>\n          <h3 translate>No widgets found.</h3>\n          <div class=\"d-flex\">\n            <p translate class=\"m-r-8\">Rephrase your search term.</p>\n            <button class=\"btn btn-primary\" (click)=\"resetSearch()\" translate>Reset search</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- The following is intentional set to hidden to allow the ViewChild ref in the controller -->\n    <div *ngIf=\"selected\" [hidden]=\"mode !== 'config'\" style=\"max-height: calc(100vh - 290px)\">\n      <div class=\"p-t-16 flex-no-grow\">\n        <div class=\"row\">\n          <div class=\"col-sm-4\">\n            <div class=\"p-l-24\">\n              <h4 class=\"text-left text-medium\">\n                {{ selected.label | translate }}\n              </h4>\n              <p>\n                {{ selected.description | translate }}\n              </p>\n            </div>\n          </div>\n          <div class=\"col-sm-8\">\n            <div class=\"p-r-24\">\n              <c8y-form-group>\n                <label for=\"widgetTitle\" translate>Title</label>\n                <input\n                  id=\"widgetTitle\"\n                  [(ngModel)]=\"selected.data.title\"\n                  type=\"text\"\n                  name=\"title\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g.' | translate }} {{ componentLabel | translate }}\"\n                  required\n                />\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        class=\"row flex-grow separator-top\"\n        [ngClass]=\"{ 'd-flex m-l-0': widgetConfig.options || hasConfig() }\"\n      >\n        <div\n          *ngIf=\"!widgetConfig.settings?.noDeviceTarget\"\n          class=\"a-i-stretch\"\n          [ngClass]=\"{\n            'bg-gray-white col-sm-4 p-l-0 p-r-0': hasConfig(),\n            'bg-white col-sm-12': !hasConfig()\n          }\"\n          style=\"height: 360px\"\n        >\n          <div class=\"p-l-16 fit-h bg-inherit\" [ngClass]=\"{ 'p-r-16': !hasConfig() }\">\n            <c8y-asset-selector-miller\n              (onSelected)=\"selectionChanged($event)\"\n              [config]=\"{\n                view: 'miller',\n                groupsSelectable: this.widgetConfig.settings?.groupsSelectable,\n                showChildDevices: true,\n                columnHeaders: true,\n                showUnassignedDevices: true,\n                search: !this.widgetConfig.settings.context?.additionParents,\n                showFilter: true,\n                singleColumn: !!this.hasConfig()\n              }\"\n              [asset]=\"widgetConfig.settings?.context\"\n              [selectedDevice]=\"selectedDevice\"\n              class=\"bg-inherit p-relative\"\n            ></c8y-asset-selector-miller>\n          </div>\n        </div>\n        <div\n          [ngClass]=\"{\n            'col-sm-8': !widgetConfig.settings?.noDeviceTarget,\n            'col-sm-12 p-l-32 p-r-8': widgetConfig.settings?.noDeviceTarget\n          }\"\n        >\n          <c8y-dynamic-component\n            class=\"d-block p-t-8 p-r-24\"\n            [componentId]=\"selected.id\"\n            mode=\"config\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            #config\n          ></c8y-dynamic-component>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"mode === 'style'\" class=\"modal-body p-t-0\" style=\"min-height: calc(100vh - 290px)\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.contentClass\"\n            [(headerClass)]=\"styling.headerClass\"\n            [possibleStylingTheme]=\"possibleStyling.WIDGET_CONTENT_CLASSES\"\n            [possibleStylingHeader]=\"possibleStyling.WIDGET_HEADER_CLASSES\"\n            [defaultThemeClass]=\"defaultStyling.contentClass\"\n            [defaultHeaderClass]=\"defaultStyling.headerClass\"\n          >\n          </c8y-appearance-settings>\n        </div>\n        <div class=\"col-xs-6 sticky-header-top-0\">\n          <c8y-widget-preview [previewClasses]=\"getStyle(true)\"></c8y-widget-preview>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      (click)=\"close()\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      translate\n      [disabled]=\"\n        contextDashboardService.formDisabled || configForm.invalid || checkIfDeviceRequired()\n      \"\n      c8yProductExperience\n      [actionName]=\"current ? 'editWidget' : 'createWidget'\"\n      [actionData]=\"{ widgetName: selected && selected.id }\"\n    >\n      Save\n    </button>\n  </div>\n</form>\n"
                },] }
    ];
    WidgetConfigComponent.ctorParameters = function () { return [
        { type: WidgetService },
        { type: i3$1.BsModalRef },
        { type: client.InventoryService },
        { type: ContextDashboardService }
    ]; };
    WidgetConfigComponent.propDecorators = {
        dynamicComponent: [{ type: i0.ViewChild, args: ['config', { static: false },] }]
    };

    /**
     * The context dashboard is a dashboard which resolves it data from the current context (device or group)
     * it is displayed on. It usually uses the route.data for it, but you can pass
     * a different managedObject to the [mo] input parameter to change that behavior.
     */
    var ContextDashboardComponent = /** @class */ (function () {
        function ContextDashboardComponent(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal, inventory, gainsightService, actionBarService, translateService, modal) {
            this.route = route;
            this.router = router;
            this.contextDashboardService = contextDashboardService;
            this.alert = alert;
            this.renderer = renderer;
            this.moduleConfig = moduleConfig;
            this.widgetService = widgetService;
            this.bsModal = bsModal;
            this.inventory = inventory;
            this.gainsightService = gainsightService;
            this.actionBarService = actionBarService;
            this.translateService = translateService;
            this.modal = modal;
            this.childrenClasses = '';
            this.setTitle = false;
            this.disabled = false;
            this.defaultWidgets = [];
            this.canCopy = true;
            this.canDelete = true;
            this.isLoading = true;
            this.class = '';
            this.widgets = [];
        }
        ContextDashboardComponent.prototype.ngOnInit = function () {
            if (!this.name) {
                this.loadContextDashboard();
                return;
            }
            this.loadNamedDashboard();
        };
        /**
         * Applies the current context to the widget
         * @param widget The widget to apply the context to.
         */
        ContextDashboardComponent.prototype.applyDeviceTarget = function (widget) {
            if (widget.config.device) {
                widget.config.device = { id: this.context.id, name: this.context.name };
            }
        };
        /**
         * Removes the route listener.
         */
        ContextDashboardComponent.prototype.ngOnDestroy = function () {
            if (this.dataSub) {
                this.dataSub.unsubscribe();
            }
        };
        /**
         * Restores the dashboard widgets to the default widgets.
         */
        ContextDashboardComponent.prototype.restore = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.isLoading = true;
                            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
                            return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                        case 1:
                            _b.sent();
                            this.onLoad();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates all dashboards children's. Useful for position changes on the dashboard.
         * @param child The child to change.
         */
        ContextDashboardComponent.prototype.updateDashboardChildren = function (child) {
            return __awaiter(this, void 0, void 0, function () {
                var children, dashboardMO, mappedChildren;
                var _this = this;
                return __generator(this, function (_b) {
                    children = child.children;
                    dashboardMO = this.mo;
                    mappedChildren = lodashEs.keyBy(children.map(function (c) { return _this.componentToWidget(c); }), 'id');
                    dashboardMO.c8y_Dashboard.children = mappedChildren;
                    return [2 /*return*/, this.contextDashboardService.update(dashboardMO)];
                });
            });
        };
        /**
         * Copies the dashboard and current context to a clipboard.
         */
        ContextDashboardComponent.prototype.copyDashboard = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var viewContext, ctx, msg;
                return __generator(this, function (_b) {
                    viewContext = (_a = this.route.parent.snapshot.data) === null || _a === void 0 ? void 0 : _a.context;
                    if (this.canCopyDashboard(viewContext)) {
                        this.contextDashboardService.copyClipboard = {
                            dashboard: lodashEs.cloneDeep(this.mo.c8y_Dashboard),
                            context: {
                                context: viewContext,
                                contextData: this.context
                            }
                        };
                        if (viewContext) {
                            ctx = viewContext.split('/').shift();
                            msg = this.translateService.instant('Dashboard copied. Navigate to the desired {{ ctx }} and select "Paste dashboard"', { ctx: ctx });
                            this.alert.success(msg);
                        }
                        this.actionBarService.refresh();
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Remove the complete dashboard and navigate away.
         */
        ContextDashboardComponent.prototype.deleteDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var route;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.contextDashboardService.delete(this.mo)];
                        case 1:
                            _b.sent();
                            if (this.route.parent) {
                                route = this.route.parent.snapshot.url.map(function (segment) { return segment.path; }).join('/');
                                this.router.navigateByUrl(route);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Edits the current dashboard
         */
        ContextDashboardComponent.prototype.editDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var isReport, _b, name, icon, priority, c8y_IsNavigatorNode, description, initialState, modal, dashboardMO, cfg, name, icon, c8y_IsNavigatorNode, priority, description, dashboardCfg, ex_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            isReport = this.contextDashboardService.isReport(this.mo);
                            if (isReport) {
                                _b = this.context, name = _b.name, icon = _b.icon, priority = _b.priority, c8y_IsNavigatorNode = _b.c8y_IsNavigatorNode, description = _b.description;
                                Object.assign(this.dashboard, { name: name, icon: icon, priority: priority, c8y_IsNavigatorNode: c8y_IsNavigatorNode, description: description });
                            }
                            initialState = {
                                dashboard: this.dashboard,
                                deviceType: this.context.type,
                                isDeviceType: this.contextDashboardService.isDeviceType(this.mo),
                                isNamedDashboard: this.contextDashboardService.isNamed(this.mo),
                                isReport: isReport
                            };
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 5, , 6]);
                            dashboardMO = lodashEs.cloneDeep(this.mo);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            cfg = _c.sent();
                            if (isReport) {
                                name = cfg.name, icon = cfg.icon, c8y_IsNavigatorNode = cfg.c8y_IsNavigatorNode, priority = cfg.priority, description = cfg.description, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                                dashboardMO.c8y_Dashboard = dashboardCfg;
                                this.updateReport({
                                    id: this.context.id,
                                    name: name,
                                    icon: icon,
                                    c8y_IsNavigatorNode: c8y_IsNavigatorNode,
                                    priority: priority,
                                    description: description
                                });
                            }
                            else {
                                dashboardMO.c8y_Dashboard = cfg;
                            }
                            return [4 /*yield*/, this.contextDashboardService.update(dashboardMO)];
                        case 3:
                            _c.sent();
                            return [4 /*yield*/, this.contextDashboardService.refreshTabs(dashboardMO)];
                        case 4:
                            _c.sent();
                            this.onLoad();
                            modal.close();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _c.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(ContextDashboardComponent.prototype, "isDeviceTypeDashboard", {
            get: function () {
                var _a;
                return !!((_a = this.dashboard) === null || _a === void 0 ? void 0 : _a.deviceType) && !!this.dashboard.deviceTypeValue;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Edits a widget on the dashboard.
         * @param change The widget change event.
         */
        ContextDashboardComponent.prototype.editWidget = function (change) {
            return __awaiter(this, void 0, void 0, function () {
                var _b, x, y, width, height, component;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = change.source, x = _b.x, y = _b.y, width = _b.width, height = _b.height;
                            return [4 /*yield*/, this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId)];
                        case 1:
                            component = _c.sent();
                            if (!component) {
                                this.addWidget();
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.addWidget(Object.assign(Object.assign({}, component), { data: Object.assign(Object.assign(Object.assign({}, component.data), change.widget), { _x: x, _y: y, _width: width, _height: height }) }))];
                        case 2:
                            _c.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Adds a widget to the dashboard.
         * @param selected Define a selected component to switch to edit mode directly.
         */
        ContextDashboardComponent.prototype.addWidget = function (selected) {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, newWidget, ex_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            initialState = {
                                mo: this.mo,
                                context: this.context.c8y_Report ? {} : this.context,
                                selected: lodashEs.cloneDeep(selected)
                            };
                            modal = this.bsModal.show(WidgetConfigComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            newWidget = _b.sent();
                            if (!this.mo.c8y_Dashboard.children) {
                                this.mo.c8y_Dashboard.children = {};
                            }
                            this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                            this.contextDashboardService.update(this.mo);
                            newWidget.classes = this.mergeWidgetClasses(newWidget);
                            return [4 /*yield*/, this.updateWidget(newWidget)];
                        case 3:
                            _b.sent();
                            modal.close();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_2 = _b.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates a widget or adds a new one if it doesn't exist on
         * the dashboard.
         * @param widget The new widget
         */
        ContextDashboardComponent.prototype.updateWidget = function (widget) {
            return __awaiter(this, void 0, void 0, function () {
                var index, isNew, mappedWidget;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            index = lodashEs.findIndex(this.widgets, { id: widget.id });
                            isNew = index === -1;
                            return [4 /*yield*/, this.widgetService.mapLegacy(widget)];
                        case 1:
                            mappedWidget = _b.sent();
                            if (isNew) {
                                this.widgets.push(mappedWidget);
                            }
                            else {
                                this.widgets.splice(index, 1, mappedWidget);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Removes a widget and rearranges the remaining ones
         * if necessary.
         * @param change The change event.
         */
        ContextDashboardComponent.prototype.deleteWidget = function (change) {
            return __awaiter(this, void 0, void 0, function () {
                var widgetTitle, e_1, widget_1, source, removed, dashboard, sleep, child, e_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            widgetTitle = change.widget.title;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.modal.confirm(i2.gettext('Remove widget'), this.translateService.instant(i2.gettext('You are about to remove widget "{{ widgetTitle }}" from your dashboard. Do you want to proceed?'), { widgetTitle: widgetTitle }), i2.Status.DANGER, {
                                    ok: i2.gettext('Remove'),
                                    cancel: i2.gettext('Cancel')
                                })];
                        case 2:
                            _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _b.sent();
                            // on cancel: do nothing
                            return [2 /*return*/];
                        case 4:
                            _b.trys.push([4, 7, , 8]);
                            widget_1 = change.widget, source = change.source;
                            delete this.mo.c8y_Dashboard.children[widget_1.id];
                            removed = this.widgets.find(function (_b) {
                                var id = _b.id;
                                return id === widget_1.id;
                            });
                            this.widgets.splice(this.widgets.indexOf(removed), 1);
                            dashboard = source.dashboard;
                            dashboard.children = dashboard.children.filter(function (c) { return c.data.id !== widget_1.id; });
                            sleep = function (timeout) { return new Promise(function (resolve) { return setTimeout(resolve, timeout); }); };
                            return [4 /*yield*/, sleep(0)];
                        case 5:
                            _b.sent();
                            child = new i2.DashboardChildChange(source);
                            child.collapseUpAll();
                            return [4 /*yield*/, this.updateDashboardChildren(child)];
                        case 6:
                            _b.sent();
                            return [3 /*break*/, 8];
                        case 7:
                            e_2 = _b.sent();
                            this.alert.addServerFailure(e_2);
                            return [3 /*break*/, 8];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * This is a workaround to ensure that the dragged-element
         * (which is attached to the body) has the right styling.
         */
        ContextDashboardComponent.prototype.addDashboardClassToBody = function () {
            var _this = this;
            this.class.split(' ').forEach(function (cssClass) {
                _this.renderer.addClass(document.body, cssClass);
            });
        };
        /**
         * This is a workaround to ensure that the dragged-element
         * (which is attached to the body) has the right styling.
         */
        ContextDashboardComponent.prototype.removeDashboardClassFromBody = function () {
            var _this = this;
            this.class.split(' ').forEach(function (cssClass) {
                _this.renderer.removeClass(document.body, cssClass);
            });
        };
        /**
         * Changes the dashboard settings to frozen or vice versa.
         * @param settings The current settings of the dashboard.
         */
        ContextDashboardComponent.prototype.toggleFreeze = function (settings) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.toggleIsFrozenFlag(settings);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                        case 2:
                            _b.sent();
                            if (this.dashboard.isFrozen) {
                                this.alert.success(i2.gettext('Your dashboard is locked now.'));
                            }
                            else {
                                this.alert.success(i2.gettext('Your dashboard is unlocked now.'));
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            ex_3 = _b.sent();
                            this.alert.addServerFailure(ex_3);
                            this.toggleIsFrozenFlag(settings);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.updateReport = function (mo) {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.inventory.update(mo)];
                        case 1:
                            res = _b.sent();
                            this.context = res.data;
                            if (this.route.parent) {
                                this.route.parent.snapshot.data.contextData = this.context;
                            }
                            this.contextDashboardService.updateNavigatorItem(res.data);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.toggleIsFrozenFlag = function (settings) {
            settings.isFrozen = !settings.isFrozen;
            this.dashboard.isFrozen = settings.isFrozen;
        };
        ContextDashboardComponent.prototype.loadContextDashboard = function () {
            var _this = this;
            this.dataSub = this.route.data.subscribe(function (_b) {
                var dashboard = _b.dashboard;
                var _a;
                _this.context = _this.route.parent.snapshot.data.contextData;
                _this.title = (_a = _this.context) === null || _a === void 0 ? void 0 : _a.name;
                _this.mo = dashboard;
                _this.dashboard = _this.mo.c8y_Dashboard;
                _this.onLoad(true);
            });
        };
        ContextDashboardComponent.prototype.loadNamedDashboard = function () {
            var _this = this;
            this.dataSub = this.contextDashboardService
                .getNamedDashboardOrCreate(this.name, this.defaultWidgets, this.context)
                .subscribe(function (mo) {
                _this.context = _this.context || {};
                _this.mo = mo;
                _this.dashboard = _this.mo.c8y_Dashboard;
                _this.onLoad(true);
            });
        };
        ContextDashboardComponent.prototype.onLoad = function (trackExperience) {
            return __awaiter(this, void 0, void 0, function () {
                var canEditDashboard, dashboardChildren, isDeviceType, isReport, dashboardClasses, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.contextDashboardService.canEditDashboard(this.mo)];
                        case 1:
                            canEditDashboard = _c.sent();
                            this.disabled = !canEditDashboard;
                            this.canCopy =
                                this.contextDashboardService.isDeviceDashboard(this.mo) ||
                                    this.contextDashboardService.isDeviceType(this.mo) ||
                                    this.contextDashboardService.isGroupDashboard(this.mo);
                            dashboardChildren = lodashEs.cloneDeep(this.mo.c8y_Dashboard.children);
                            isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
                            isReport = this.contextDashboardService.isReport(this.mo);
                            dashboardClasses = Object.assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
                            _b = this;
                            return [4 /*yield*/, Promise.all(lodashEs.values(dashboardChildren).map(function (widget) {
                                    widget.classes = _this.mergeWidgetClasses(widget);
                                    if (isDeviceType) {
                                        _this.applyDeviceTarget(widget);
                                    }
                                    if (trackExperience) {
                                        _this.gainsightService.triggerEvent('loadWidget', {
                                            widgetName: widget.componentId || widget.name
                                        });
                                    }
                                    return _this.widgetService.mapLegacy(widget);
                                }))];
                        case 2:
                            _b.widgets = _c.sent();
                            this.class = Object.keys(dashboardClasses).join(' ');
                            if (isReport) {
                                this.addReportDashboardSettings();
                            }
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.mergeWidgetClasses = function (widget) {
            var _b;
            var hasHeaderClass = WIDGET_HEADER_CLASSES.find(function (el) { return widget.classes && widget.classes[el.class]; });
            var widgetClasses = hasHeaderClass
                ? Object.assign({}, widget.classes) : Object.assign(Object.assign({}, this.dashboard.widgetClasses), widget.classes);
            return Object.assign((_b = { card: true, 'card-dashboard': true }, _b[lodashEs.kebabCase(widget.componentId || widget.name)] = true, _b), widgetClasses);
        };
        ContextDashboardComponent.prototype.componentToWidget = function (child) {
            return Object.assign(Object.assign({}, lodashEs.omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext'])), {
                _x: child.x,
                _y: child.y,
                _width: child.width,
                _height: child.height
            });
        };
        ContextDashboardComponent.prototype.addReportDashboardSettings = function () {
            this.setTitle = true;
            this.title = this.context.name;
            this.breadcrumbSettings = {
                icon: 'th',
                label: 'Reports',
                path: 'reports'
            };
            this.canDelete = false;
        };
        ContextDashboardComponent.prototype.canCopyDashboard = function (viewContext) {
            if (!this.validDashboardChildren() && viewContext) {
                var ctx = viewContext.split('/').shift();
                var msg = this.translateService.instant('Only dashboards with widgets referencing the current {{ ctx }} can be copied.', { ctx: ctx });
                this.alert.warning(msg);
                return false;
            }
            return true;
        };
        ContextDashboardComponent.prototype.validDashboardChildren = function () {
            var _this = this;
            return lodashEs.every(this.mo.c8y_Dashboard.children, function (child) {
                var config = child.config || {};
                var dataPoints = config.datapoints || [];
                return !((config.device && config.device.id !== _this.context.id) ||
                    lodashEs.some(dataPoints, function (dataPoint) { return dataPoint.__target.id !== _this.context.id; }));
            });
        };
        return ContextDashboardComponent;
    }());
    ContextDashboardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-context-dashboard',
                    template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" px-event=\"Restore dashboard\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin,\n    canCopy: canCopy\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onCopyDashboard)=\"copyDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
                    host: {
                        style: "\n      display: block;\n    ",
                        class: 'dashboard c8y-grid-dashboard'
                    }
                },] }
    ];
    ContextDashboardComponent.ctorParameters = function () { return [
        { type: i4.ActivatedRoute },
        { type: i4.Router },
        { type: ContextDashboardService },
        { type: i2.AlertService },
        { type: i0.Renderer2 },
        { type: undefined, decorators: [{ type: i0.Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
        { type: WidgetService },
        { type: i3$1.BsModalService },
        { type: client.InventoryService },
        { type: i2.GainsightService },
        { type: i2.ActionBarService },
        { type: i3.TranslateService },
        { type: i2.ModalService }
    ]; };
    ContextDashboardComponent.propDecorators = {
        name: [{ type: i0.Input }],
        childrenClasses: [{ type: i0.Input }],
        context: [{ type: i0.Input }],
        setTitle: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        defaultWidgets: [{ type: i0.Input }],
        canCopy: [{ type: i0.Input }],
        canDelete: [{ type: i0.Input }],
        isLoading: [{ type: i0.Input }],
        breadcrumbSettings: [{ type: i0.Input }],
        class: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var PasteDashboardActionComponent = /** @class */ (function () {
        function PasteDashboardActionComponent(vcRef, router, contextDashboardService, inventoryService) {
            this.vcRef = vcRef;
            this.router = router;
            this.contextDashboardService = contextDashboardService;
            this.inventoryService = inventoryService;
            this.dashboardName = '';
        }
        PasteDashboardActionComponent.prototype.ngOnInit = function () {
            this.vcRef.createEmbeddedView(this.templatePaste);
            var clipboard = this.contextDashboardService.copyClipboard;
            if (clipboard) {
                this.dashboardName = clipboard.dashboard.name;
            }
        };
        PasteDashboardActionComponent.prototype.pasteDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var context, currentUrl, isDevice, isGroup, id, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            currentUrl = this.router.url;
                            isDevice = new RegExp(/device\/\d+/).test(currentUrl);
                            isGroup = new RegExp(/group\/\d+/).test(currentUrl);
                            id = currentUrl.match(/\d+/)[0];
                            if (!isDevice) return [3 /*break*/, 2];
                            _a = {
                                context: i2.ViewContext.Device
                            };
                            return [4 /*yield*/, this.getContextMo(id)];
                        case 1:
                            context = (_a.contextData = _c.sent(),
                                _a);
                            return [3 /*break*/, 4];
                        case 2:
                            if (!isGroup) return [3 /*break*/, 4];
                            _b = {
                                context: i2.ViewContext.Group
                            };
                            return [4 /*yield*/, this.getContextMo(id)];
                        case 3:
                            context = (_b.contextData = _c.sent(),
                                _b);
                            _c.label = 4;
                        case 4:
                            this.contextDashboardService.pasteDashboard(context);
                            return [2 /*return*/];
                    }
                });
            });
        };
        PasteDashboardActionComponent.prototype.getContextMo = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventoryService.detail(id)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            });
        };
        return PasteDashboardActionComponent;
    }());
    PasteDashboardActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-paste-dashboard-action',
                    template: "\n    <ng-template #templatePaste>\n      <li>\n        <button title=\"{{ 'Paste dashboard' | translate }}\" (click)=\"pasteDashboard()\">\n          <i class=\"m-r-4\" c8yIcon=\"clipboard\"></i><span translate>Paste dashboard</span>&nbsp;<span\n            >\"{{ dashboardName }}\"</span\n          >\n        </button>\n      </li>\n    </ng-template>\n  "
                },] }
    ];
    PasteDashboardActionComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i4.Router },
        { type: ContextDashboardService },
        { type: client.InventoryService }
    ]; };
    PasteDashboardActionComponent.propDecorators = {
        templatePaste: [{ type: i0.ViewChild, args: ['templatePaste', { read: i0.TemplateRef, static: true },] }]
    };

    var DashboardActionBarFactory = /** @class */ (function () {
        function DashboardActionBarFactory(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        DashboardActionBarFactory.prototype.get = function (activeRoute) {
            var actions = [];
            var data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            var contextData = data.contextData;
            var canPaste = contextData &&
                [i2.ViewContext.Device, i2.ViewContext.Group].includes(data.context) &&
                this.contextDashboardService.copyClipboard;
            if (canPaste) {
                actions.push({
                    priority: -10,
                    placement: 'more',
                    template: PasteDashboardActionComponent
                });
            }
            return actions;
        };
        return DashboardActionBarFactory;
    }());
    DashboardActionBarFactory.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DashboardActionBarFactory_Factory() { return new DashboardActionBarFactory(i0__namespace.ɵɵinject(ContextDashboardService)); }, token: DashboardActionBarFactory, providedIn: "root" });
    DashboardActionBarFactory.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    DashboardActionBarFactory.ctorParameters = function () { return [
        { type: ContextDashboardService }
    ]; };

    var DeviceDashboardGuard = /** @class */ (function () {
        function DeviceDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        DeviceDashboardGuard.prototype.canActivate = function (route) {
            return this.contextDashboardService.activateDashboards(route, [
                exports.ContextDashboardType.Device,
                exports.ContextDashboardType.DeviceType
            ]);
        };
        return DeviceDashboardGuard;
    }());
    DeviceDashboardGuard.decorators = [
        { type: i0.Injectable }
    ];
    DeviceDashboardGuard.ctorParameters = function () { return [
        { type: ContextDashboardService }
    ]; };

    var GroupDashboardGuard = /** @class */ (function () {
        function GroupDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        GroupDashboardGuard.prototype.canActivate = function (route) {
            return this.contextDashboardService.activateDashboards(route, [exports.ContextDashboardType.Group]);
        };
        return GroupDashboardGuard;
    }());
    GroupDashboardGuard.decorators = [
        { type: i0.Injectable }
    ];
    GroupDashboardGuard.ctorParameters = function () { return [
        { type: ContextDashboardService }
    ]; };

    var WidgetPreviewComponent = /** @class */ (function () {
        function WidgetPreviewComponent() {
            this.previewClasses = {
                'dashboard-theme-light': true,
                'panel-title-regular': true
            };
        }
        return WidgetPreviewComponent;
    }());
    WidgetPreviewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-widget-preview',
                    template: "<div class=\"legend form-block\" translate>Preview</div>\n<label *ngIf=\"tab\" translate>Tab and layout</label>\n<label *ngIf=\"!tab\" translate>Layout</label>\n<div class=\"dashboard-preview-slot\" [ngClass]=\"previewClasses\">\n  <div\n    class=\"page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden\"\n    style=\"left: 0; margin: 0 15px;\"\n    *ngIf=\"tab\"\n  >\n    <div class=\"tabContainer hidden-xs\">\n      <ul class=\"nav nav-tabs nav-tabsc8y\">\n        <li class=\"active\" style=\"left: 16px;\">\n          <a routerlinkactive=\"\" title=\"{{ tab.name }}\">\n            <i class=\"text-primary\" [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.name }}</span></a\n          >\n        </li>\n      </ul>\n    </div>\n    <div class=\"visible-xs mobile-tabs\"></div>\n  </div>\n  <div [ngClass]=\"{ 'm-t-64': !!tab }\">\n    <div class=\"card card-dashboard\" style=\"height: 360px;\">\n      <div class=\"card-header-actions\" style=\"z-index: 8;\">\n        <div class=\"card-title\">\n          <span translate>Widget title</span>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"optionsBtn dropdown\">\n            <a href=\"\" (click)=\"(false)\" class=\"dropdown-toggle c8y-dropdown\">\n              <i c8yIcon=\"cog\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-inner-scroll p-t-16\">\n        <p translate>Widget example content.</p>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    WidgetPreviewComponent.propDecorators = {
        previewClasses: [{ type: i0.Input }],
        tab: [{ type: i0.Input }]
    };

    var defaultConfig = {
        allowFullscreen: true,
        widgetFilter: function (_a) {
            var data = _a.data;
            return !(data && data.settings && data.settings.noNewWidgets);
        },
        routes: [
            {
                path: 'dashboard/:dashboardId',
                component: ContextDashboardComponent,
                canActivate: [DeviceDashboardGuard],
                context: i2.ViewContext.Device
            },
            {
                path: 'dashboard/:dashboardId',
                component: ContextDashboardComponent,
                canActivate: [GroupDashboardGuard],
                context: i2.ViewContext.Group
            }
        ]
    };
    var ɵ0$4 = defaultConfig;
    var ContextDashboardModule = /** @class */ (function () {
        function ContextDashboardModule() {
        }
        ContextDashboardModule.config = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: ContextDashboardModule,
                providers: [
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: Object.assign(Object.assign({}, defaultConfig), config)
                    },
                    ContextDashboardService,
                    DeviceDashboardGuard,
                    GroupDashboardGuard,
                    {
                        provide: i2.HOOK_ROUTE,
                        useValue: Object.assign(Object.assign({}, defaultConfig), config).routes,
                        multi: true
                    },
                    {
                        provide: i2.HOOK_TABS,
                        useExisting: AddDashboardFactory,
                        multi: true
                    },
                    {
                        provide: i2.HOOK_ACTION_BAR,
                        useClass: DashboardActionBarFactory,
                        multi: true
                    }
                ]
            };
        };
        return ContextDashboardModule;
    }());
    ContextDashboardModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        AppearanceSettingsComponent,
                        ContextDashboardComponent,
                        WidgetConfigComponent,
                        WidgetPreviewComponent,
                        DashboardDetailComponent,
                        AddDashboardComponent,
                        PasteDashboardActionComponent
                    ],
                    imports: [
                        i2.CoreModule,
                        tooltip.TooltipModule,
                        popover.PopoverModule,
                        assetsNavigator.AssetSelectorModule,
                        dropdown.BsDropdownModule.forRoot()
                    ],
                    exports: [ContextDashboardComponent, WidgetConfigComponent],
                    entryComponents: [
                        ContextDashboardComponent,
                        WidgetConfigComponent,
                        DashboardDetailComponent,
                        PasteDashboardActionComponent
                    ],
                    providers: [
                        WidgetService,
                        {
                            provide: CONTEXT_DASHBOARD_CONFIG,
                            useValue: ɵ0$4
                        }
                    ]
                },] }
    ];

    var WelcomeToCockpit = /** @class */ (function () {
        function WelcomeToCockpit(tenantService, docs, router, navigator, applicationService) {
            this.tenantService = tenantService;
            this.docs = docs;
            this.router = router;
            this.navigator = navigator;
            this.applicationService = applicationService;
            this.quickLinks = [];
            this.CONFIGURATION_NODE = 'Configuration';
            this.TRIAL = 'TRIAL';
        }
        WelcomeToCockpit.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.tenantService.currentTenantType()];
                        case 1:
                            _a.tenantType = _b.sent();
                            this.setMessage();
                            this.navSubscription = this.navigator.items$.subscribe(function (nodes) {
                                _this.navNodes = nodes;
                                _this.configurationNode = nodes.find(function (node) { return node.label === _this.CONFIGURATION_NODE; });
                            });
                            this.docsSubscription = this.docs.items$.subscribe(function (links) {
                                _this.links = links;
                            });
                            // <---TRIAL & REGULAR TENANT --->
                            this.createConnectSmartphoneQuickLink();
                            return [4 /*yield*/, this.createQuicklinkRegisterDevice()];
                        case 2:
                            _b.sent();
                            // <--- TRIAL TENANT --->
                            if (this.tenantType === this.TRIAL) {
                                this.createQuicklinkUserGuide();
                                return [2 /*return*/];
                            }
                            // <--- REGULAR TENANT --->
                            this.createQuicklinkAddGroup();
                            this.createQuickLinkReports();
                            this.createQuickLinkExports();
                            this.createQuicklinkSmartRules();
                            return [2 /*return*/];
                    }
                });
            });
        };
        WelcomeToCockpit.prototype.ngOnDestroy = function () {
            if (this.docsSubscription && !this.docsSubscription.closed) {
                this.docsSubscription.unsubscribe();
            }
            if (this.navSubscription && !this.navSubscription.closed) {
                this.navSubscription.unsubscribe();
            }
        };
        WelcomeToCockpit.prototype.setMessage = function () {
            if (this.tenantType === this.TRIAL) {
                this.welcomeMessage = i2.gettext("\n        The Cockpit application allows you to build IoT applications in minutes.\n        To get started, connect any device to the platform.\n        If you do not have an IoT device to hand, you can start by connecting your smartphone.\n        Click below to be guided through the process.\n      ");
            }
            else {
                this.welcomeMessage = i2.gettext("\n        The Cockpit application provides you with options to manage\n        and monitor Internet of Things assets and data from business perspective.\n      ");
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkAddGroup = function () {
            // comes from angularJS factory c8yQuickLinks
            var addGroup = this.links.find(function (link) { return link.label === 'Add group'; });
            if (addGroup) {
                this.quickLinks.push(addGroup);
            }
        };
        WelcomeToCockpit.prototype.createConnectSmartphoneQuickLink = function () {
            // Provider in SensorPhoneModule defines the
            // 'Connect smartphone' quicklink.
            var connectSmartphone = this.links.find(function (link) { return link.label === 'Connect smartphone'; });
            if (connectSmartphone) {
                this.quickLinks.push(connectSmartphone);
            }
        };
        WelcomeToCockpit.prototype.createQuickLinkReports = function () {
            var _this = this;
            var label = i2.gettext('Reports');
            var reports = {
                icon: 'th',
                label: label,
                url: '/reports'
            };
            var reportsNode = this.findNavigatorNode(label, this.navNodes);
            if (reportsNode) {
                reports.click = function () {
                    reportsNode.open = true;
                    _this.router.navigateByUrl(reports.url);
                };
                this.quickLinks.push(reports);
            }
        };
        WelcomeToCockpit.prototype.createQuickLinkExports = function () {
            var _this = this;
            var label = i2.gettext('Exports');
            var exports = {
                icon: 'c8y-reports',
                label: label,
                url: '/export'
            };
            if (this.isConfigChildNodeShown(label)) {
                exports.click = function () {
                    _this.configurationNode.open = true;
                    _this.router.navigateByUrl(exports.url);
                };
                this.quickLinks.push(exports);
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkSmartRules = function () {
            var _this = this;
            var label = i2.gettext('Smart rules');
            var smartRules = {
                icon: 'c8y-smart-rules',
                label: label,
                url: '/rules'
            };
            if (this.isConfigChildNodeShown('Global smart rules')) {
                smartRules.click = function () {
                    _this.configurationNode.open = true;
                    _this.router.navigateByUrl(smartRules.url);
                };
                this.quickLinks.push(smartRules);
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkRegisterDevice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data, deviceManagement, deviceMgmtUrl_1, registerDevice;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.listByUser(undefined, { pageSize: 2000 })];
                        case 1:
                            data = (_a.sent()).data;
                            if (data) {
                                deviceManagement = data.find(function (app) { return app.contextPath === 'devicemanagement'; });
                                if (deviceManagement) {
                                    deviceMgmtUrl_1 = this.applicationService.getHref(deviceManagement);
                                    registerDevice = {
                                        icon: 'c8y-device-connect',
                                        label: i2.gettext('Register device'),
                                        click: function () { return window.open(deviceMgmtUrl_1 + "/#/deviceregistration", '_self'); }
                                    };
                                    this.quickLinks.push(registerDevice);
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        WelcomeToCockpit.prototype.createQuicklinkUserGuide = function () {
            var _this = this;
            var userGuide = {
                icon: 'c8y-user',
                label: i2.gettext('User guide'),
                url: '/users-guide/getting-started',
                click: function () {
                    var userGuideURL = _this.docs.getUserGuideLink(userGuide.url);
                    window.open(userGuideURL);
                }
            };
            this.quickLinks.push(userGuide);
        };
        WelcomeToCockpit.prototype.isConfigChildNodeShown = function (nodeName) {
            if (this.configurationNode && this.configurationNode.show) {
                var navNode = this.findNavigatorNode(nodeName, this.configurationNode.children);
                return !!navNode && navNode.show;
            }
            return false;
        };
        WelcomeToCockpit.prototype.findNavigatorNode = function (nodeName, navNodes) {
            if (navNodes && navNodes.length > 0) {
                return navNodes.find(function (node) { return node.label === nodeName; });
            }
            return undefined;
        };
        return WelcomeToCockpit;
    }());
    WelcomeToCockpit.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-welcome-to-cockpit',
                    template: "<div class=\"welcome-widget welcome-cockpit\">\n  <div class=\"flex-row\">\n    <div class=\"col-xs-12 col-md-5 flex-item-v-stretch p-24\">\n      <h2 class=\"text-light\">{{ 'Welcome to Cockpit' | translate }}</h2>\n      <p class=\"text-16 text-light p-t-16 p-b-24\">{{ welcomeMessage | translate }}</p>\n      <div class=\"card-group interact-grid tight-grid\">\n        <div *ngFor=\"let link of quickLinks\" class=\"col-sm-4 col-xs-6\">\n          <c8y-quick-link\n            (click)=\"link.click ? link.click() : false\"\n            [icon]=\"link.icon\"\n            [label]=\"link.label\"\n            class=\"card\"\n            c8yProductExperience\n            [actionName]=\"'welcomeWidgetClicked'\"\n            [actionData]=\"{ link: link.label }\"\n          >\n          </c8y-quick-link>\n        </div>\n      </div>\n    </div>\n    <!-- <div class=\"col-sm-6 welcome-illustration flex-item-v-stretch\"></div> -->\n  </div>\n</div>\n"
                },] }
    ];
    WelcomeToCockpit.ctorParameters = function () { return [
        { type: client.TenantService },
        { type: i2.DocsService },
        { type: i4.Router },
        { type: i2.NavigatorService },
        { type: client.ApplicationService }
    ]; };
    WelcomeToCockpit.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var LegacyWelcomeComponent = /** @class */ (function () {
        function LegacyWelcomeComponent(dashboard) {
            this.dashboard = dashboard;
        }
        LegacyWelcomeComponent.prototype.restore = function () {
            this.dashboard.restore();
        };
        return LegacyWelcomeComponent;
    }());
    LegacyWelcomeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-legacy-welcome-widget',
                    template: "<div class=\"card-block\">\n  <p class=\"lead\" c8y-guide-docs>\n    <span>{{ 'Welcome to Cockpit' | translate }}.</span>\n    <span title=\"{{ 'Browse the manual' | translate }}\" class=\"cockpit-welcome-manual\" translate ngNonBindable\n      >Browse the manual <a c8y-guide-href=\"users-guide/cockpit/\">here</a>.</span\n    >\n  </p>\n  <p class=\"m-t-16\">\n    <em>{{ 'New default dashboard available.' | translate }} </em>\n  </p>\n  <button class=\"btn btn-primary btn-sm m-t-16\" (click)=\"restore(); (false)\" translate>\n    Get new dashboard\n  </button>\n</div>\n"
                },] }
    ];
    LegacyWelcomeComponent.ctorParameters = function () { return [
        { type: ContextDashboardComponent }
    ]; };

    // import for the preview img to get into the build.
    var previewImage = '';
    try {
        // tslint:disable-next-line: no-var-requires
        previewImage = require('@c8y/style/img/welcome-widget-pr.png');
    }
    catch (ex) {
        // intended empty
    }
    var ɵ0$3 = [{ label: i2.gettext('Home'), icon: 'home', priority: 10000, path: '/' }], ɵ1$1 = [
        {
            id: 'cockpit.welcome.widget',
            label: i2.gettext('Welcome to Cockpit'),
            description: i2.gettext('Displays a welcome message for Cockpit'),
            component: WelcomeToCockpit,
            previewImage: previewImage,
            data: {
                settings: {
                    noNewWidgets: false,
                    widgetDefaults: {
                        _width: 12,
                        _height: 6
                    },
                    ng1: {
                        options: {
                            noDeviceTarget: true,
                            groupsSelectable: false
                        }
                    }
                }
            }
        }
    ], ɵ2 = [
        {
            id: 'Cockpit Welcome',
            label: i2.gettext('Welcome to Cockpit'),
            description: i2.gettext('Displays a welcome message for Cockpit'),
            component: LegacyWelcomeComponent,
            data: {
                settings: {
                    noNewWidgets: true,
                    ng1: {
                        options: {
                            noDeviceTarget: true,
                            groupsSelectable: false
                        }
                    }
                }
            }
        }
    ];
    var CockpitDashboardModule = /** @class */ (function () {
        function CockpitDashboardModule() {
        }
        CockpitDashboardModule.config = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: CockpitDashboardModule,
                providers: [
                    {
                        provide: COCKPIT_HOME_DASHBOARD_CONFIG,
                        useValue: config
                    }
                ]
            };
        };
        return CockpitDashboardModule;
    }());
    CockpitDashboardModule.decorators = [
        { type: i0.NgModule, args: [{
                    entryComponents: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                    imports: [
                        i2.DocsModule,
                        i2.CoreModule,
                        ContextDashboardModule.config({
                            routes: [
                                {
                                    path: 'dashboard/:dashboardId',
                                    component: ContextDashboardComponent,
                                    canActivate: [DeviceDashboardGuard],
                                    context: i2.ViewContext.Device
                                },
                                {
                                    path: 'dashboard/:dashboardId',
                                    component: ContextDashboardComponent,
                                    canActivate: [GroupDashboardGuard],
                                    context: i2.ViewContext.Group
                                },
                                {
                                    path: '',
                                    component: CockpitDashboardComponent
                                }
                            ]
                        }),
                        i2.QuickLinkModule
                    ],
                    declarations: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                    providers: [
                        {
                            provide: i2.HOOK_NAVIGATOR_NODES,
                            useValue: ɵ0$3,
                            multi: true
                        },
                        {
                            provide: i2.HOOK_COMPONENTS,
                            multi: true,
                            useValue: ɵ1$1
                        },
                        {
                            provide: i2.HOOK_COMPONENTS,
                            multi: true,
                            useValue: ɵ2
                        }
                    ]
                },] }
    ];

    var DeviceInfoDashboardComponent = /** @class */ (function () {
        function DeviceInfoDashboardComponent(router, widgetService, translateService) {
            var _this = this;
            this.router = router;
            this.widgetService = widgetService;
            this.translateService = translateService;
            this.isLoading$ = new rxjs.BehaviorSubject(true);
            this.DEVICE_INFO_WIDGETS = [
                {
                    name: 'Alarm list',
                    title: i2.gettext('Active, critical alarms'),
                    _x: 4,
                    _y: 7,
                    _height: 4,
                    _width: 4,
                    config: {
                        options: {
                            orderMode: 'ACTIVE_FIRST',
                            severity: { CRITICAL: true },
                            status: {
                                ACTIVE: true,
                                ACKNOWLEDGED: false,
                                CLEARED: false
                            },
                            types: []
                        }
                    }
                },
                {
                    name: 'Map',
                    title: i2.gettext('Location'),
                    _x: 4,
                    _y: 11,
                    _height: 4,
                    _width: 8
                },
                {
                    name: 'Asset Properties',
                    title: i2.gettext('Device data'),
                    config: {
                        options: {
                            properties: [],
                            allowDisplayAndEditKnownProperties: true,
                            hiddenPropertiesKeyPaths: ['owner']
                        }
                    },
                    _x: 0,
                    _y: 7,
                    _height: 8,
                    _width: 4
                },
                {
                    name: 'Data points graph',
                    title: i2.gettext('Device and communication'),
                    _x: 4,
                    _y: 2,
                    _height: 5,
                    _width: 8,
                    config: {
                        interval: 'hours',
                        aggregation: 'NONE',
                        realtime: true,
                        datapointsInitialDisplayLimit: 3,
                        datapoints: [
                            {
                                fragment: 'c8y_Battery',
                                series: 'level',
                                label: this.translateService.instant('Battery: level'),
                                unit: '%',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#5e07b3',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'rssi',
                                label: this.translateService.instant('Signal: RSSI'),
                                unit: 'dBm',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#a7d0f1',
                                __active: true
                            },
                            {
                                fragment: 'c8y_MemoryMeasurement',
                                series: 'Used',
                                label: this.translateService.instant('Memory: used'),
                                unit: 'MB',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#f75229',
                                __active: true
                            },
                            {
                                fragment: 'c8y_CPUMeasurement',
                                series: 'Workload',
                                label: this.translateService.instant('CPU: workload'),
                                unit: '%',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#b24f3e',
                                __active: true
                            },
                            {
                                fragment: 'c8y_NetworkStatistics',
                                series: 'Upload',
                                label: this.translateService.instant('Network: upload'),
                                unit: 'KB/s',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#88c039',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RCSP',
                                label: this.translateService.instant('Signal: RCSP'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#5e2f19',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RSCP',
                                label: this.translateService.instant('Signal: RSCP'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#5e2f19',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RSRP',
                                label: this.translateService.instant('Signal: RSRP'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#43ba3b',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RSRQ',
                                label: this.translateService.instant('Signal: RSRQ'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#14b0b3',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'ber',
                                label: this.translateService.instant('Signal: BER'),
                                unit: '%',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#44ff33',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'ECN0',
                                label: this.translateService.instant('Signal: ECN0'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#873efa',
                                __active: true
                            },
                            {
                                fragment: 'c8y_NetworkStatistics',
                                series: 'Download',
                                label: this.translateService.instant('Network: download'),
                                unit: 'KB/s',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#f27a45',
                                __active: true
                            },
                            {
                                fragment: 'c8y_MemoryMeasurement',
                                series: 'Total',
                                label: this.translateService.instant('Memory: total'),
                                unit: 'MB',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#dadd8c',
                                __active: true
                            }
                        ],
                        alarmsEventsConfigs: [
                            {
                                label: 'c8y_LocationUpdate',
                                timelineType: 'EVENT',
                                color: '#6f6cd0',
                                filters: {
                                    type: 'c8y_LocationUpdate'
                                },
                                __active: true
                            },
                            {
                                label: 'c8y_UnavailabilityAlarm',
                                timelineType: 'ALARM',
                                color: '#375bf2',
                                filters: {
                                    type: 'c8y_UnavailabilityAlarm'
                                },
                                __active: true
                            }
                        ]
                    },
                    transformConfigWithContext: function (config, context, c8yDevices) {
                        'ngInject';
                        return c8yDevices
                            .getSupportedSeries(context.id)
                            .then(function (supportedMeasurementSeries) { return config.datapoints.filter(function (configMeasurement) { return supportedMeasurementSeries.find(function (supportedSeries) { return supportedSeries.fragment === configMeasurement.fragment &&
                            supportedSeries.series === configMeasurement.series; }); }); })
                            .then(function (datapoints) { return (Object.assign(Object.assign({}, config), { datapoints: datapoints })); });
                    }
                },
                {
                    name: 'deviceStatusWidget',
                    title: i2.gettext('Device status'),
                    _x: 0,
                    _y: 2,
                    _height: 5,
                    _width: 4
                },
                {
                    name: 'deviceGroupAssignmentWidget',
                    title: i2.gettext('Group assignment'),
                    _x: 8,
                    _y: 7,
                    _height: 4,
                    _width: 4
                },
                {
                    componentId: 'assetNotesWidget',
                    title: i2.gettext('Message of the day'),
                    classes: { 'panel-title-hidden': true },
                    _x: 0,
                    _y: 0,
                    _height: 2,
                    _width: 12
                },
                {
                    componentId: 'Map',
                    title: i2.gettext('Location'),
                    _x: 4,
                    _y: 11,
                    _height: 4,
                    _width: 8
                }
            ];
            this.currentContext$ = this.router.parent.data.pipe(operators.map(function (_a) {
                var contextData = _a.contextData;
                _this.title = contextData.name;
                return contextData;
            }));
            this.widgets$ = rxjs.from(this.DEVICE_INFO_WIDGETS).pipe(operators.mergeMap(function (widget) { return _this.widgetService.mapLegacy(widget); }), operators.map(function (widget) { return (Object.assign(Object.assign({}, widget), { config: Object.assign(Object.assign({}, widget.config), { device: _this.router.parent.snapshot.data.contextData }) })); }), operators.toArray());
            this.widgetsSubscription = rxjs.combineLatest([this.widgets$, this.currentContext$]).subscribe(function () {
                _this.isLoading$.next(false);
            });
        }
        DeviceInfoDashboardComponent.prototype.ngOnDestroy = function () {
            this.widgetsSubscription.unsubscribe();
        };
        return DeviceInfoDashboardComponent;
    }());
    DeviceInfoDashboardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-device-info-dashboard-dashboard',
                    template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [context]=\"currentContext$ | async\"\n  [widgets]=\"widgets$ | async\"\n  [settings]=\"{\n    isLoading: isLoading$ | async,\n    isDisabled: true,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    canCopy: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
                },] }
    ];
    DeviceInfoDashboardComponent.ctorParameters = function () { return [
        { type: i4.ActivatedRoute },
        { type: WidgetService },
        { type: i3.TranslateService }
    ]; };

    var ɵ0$2 = [
        {
            context: i2.ViewContext.Device,
            path: 'device-info',
            component: DeviceInfoDashboardComponent,
            label: i2.gettext('Info'),
            priority: 10000,
            icon: 'asterisk'
        }
    ];
    var DeviceInfoDashboardModule = /** @class */ (function () {
        function DeviceInfoDashboardModule() {
        }
        return DeviceInfoDashboardModule;
    }());
    DeviceInfoDashboardModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [DeviceInfoDashboardComponent],
                    imports: [common.CommonModule, i2.CoreModule, ContextDashboardModule],
                    exports: [],
                    entryComponents: [DeviceInfoDashboardComponent],
                    providers: [
                        {
                            provide: i2.HOOK_ROUTE,
                            useValue: ɵ0$2,
                            multi: true
                        }
                    ]
                },] }
    ];

    var DeviceManagementHomeDashboardComponent = /** @class */ (function () {
        function DeviceManagementHomeDashboardComponent(widgetService) {
            this.widgetService = widgetService;
            this.widgets = [];
            this.DEFAULT_HOME_WIDGETS = [
                {
                    name: 'Asset Alarms',
                    title: i2.gettext('Active, critical alarms'),
                    _x: 0,
                    _y: 0,
                    _height: 4,
                    _width: 6
                },
                {
                    name: 'Map',
                    title: i2.gettext('Map'),
                    _x: 6,
                    _y: 0,
                    _height: 8,
                    _width: 6
                }
            ];
        }
        DeviceManagementHomeDashboardComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.DEFAULT_HOME_WIDGETS.map(function (widget) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.widgetService
                                .mapLegacy(widget)
                                .then(function (transformedWidget) { return _this.widgets.push(transformedWidget); })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        return DeviceManagementHomeDashboardComponent;
    }());
    DeviceManagementHomeDashboardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-device-management-home-dashboard',
                    template: "<c8y-title>\n  {{ 'Home' | translate }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [contextDashboard]=\"{}\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isDisabled: false,\n    canDelete: false,\n    canCopy: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false\n  }\"\n></c8y-widgets-dashboard>\n"
                },] }
    ];
    DeviceManagementHomeDashboardComponent.ctorParameters = function () { return [
        { type: WidgetService }
    ]; };

    var ɵ0$1 = {
        path: '',
        component: DeviceManagementHomeDashboardComponent
    }, ɵ1 = [{ label: i2.gettext('Home'), icon: 'home', priority: 10000, path: '/' }];
    var DeviceManagementHomeDashboardModule = /** @class */ (function () {
        function DeviceManagementHomeDashboardModule() {
        }
        return DeviceManagementHomeDashboardModule;
    }());
    DeviceManagementHomeDashboardModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [DeviceManagementHomeDashboardComponent],
                    imports: [common.CommonModule, i2.CoreModule, ContextDashboardModule],
                    exports: [],
                    entryComponents: [DeviceManagementHomeDashboardComponent],
                    providers: [
                        {
                            provide: i2.HOOK_ONCE_ROUTE,
                            useValue: ɵ0$1,
                            multi: true
                        },
                        {
                            provide: i2.HOOK_NAVIGATOR_NODES,
                            useValue: ɵ1,
                            multi: true
                        }
                    ]
                },] }
    ];

    var ReportDashboardListComponent = /** @class */ (function () {
        function ReportDashboardListComponent(inventoryService, contextDashboardService, bsModal, translateService, modal, alertService, reportDashboardService, permissions) {
            var _this = this;
            this.inventoryService = inventoryService;
            this.contextDashboardService = contextDashboardService;
            this.bsModal = bsModal;
            this.translateService = translateService;
            this.modal = modal;
            this.alertService = alertService;
            this.reportDashboardService = reportDashboardService;
            this.permissions = permissions;
            this.textFilter$ = new rxjs.BehaviorSubject('');
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.reloading = false;
            this.reports$ = rxjs.combineLatest(this.textFilter$.pipe(operators.debounceTime(400), operators.distinctUntilChanged()), this.reload$).pipe(operators.tap(function () {
                _this.reloading = true;
            }), operators.switchMap(function (_b) {
                var _c = __read(_b, 1), text = _c[0];
                return _this.loadReports(text);
            }), operators.tap(function () {
                _this.reloading = false;
            }), operators.shareReplay(1));
            this.canAddReport = false;
            this.DELETED_SUCCESS_MSG = i2.gettext('Report deleted.');
        }
        ReportDashboardListComponent.prototype.ngOnInit = function () {
            this.canAddReport = this.permissions.hasAnyRole([
                'ROLE_INVENTORY_CREATE',
                'ROLE_INVENTORY_ADMIN'
            ]);
        };
        ReportDashboardListComponent.prototype.loadReports = function (partialName) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    return [2 /*return*/, partialName
                            ? this.reportDashboardService.listReports({ filter: { name: "*" + partialName + "*" } })
                            : this.reportDashboardService.listReports()];
                });
            });
        };
        ReportDashboardListComponent.prototype.add = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, cfg, name, icon, c8y_IsNavigatorNode, priority, description, dashboardCfg, report, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            initialState = {
                                isReport: true,
                                isNamedDashboard: true
                            };
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                ignoreBackdropClick: true,
                                initialState: initialState
                            }).content;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            cfg = _b.sent();
                            name = cfg.name, icon = cfg.icon, c8y_IsNavigatorNode = cfg.c8y_IsNavigatorNode, priority = cfg.priority, description = cfg.description, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                            return [4 /*yield*/, this.reportDashboardService.createReport({
                                    name: name,
                                    icon: icon,
                                    c8y_IsNavigatorNode: c8y_IsNavigatorNode,
                                    priority: priority,
                                    description: description
                                })];
                        case 3:
                            report = (_b.sent()).data;
                            return [4 /*yield*/, this.contextDashboardService.create(dashboardCfg, undefined, "" + this.contextDashboardService.REPORT_PARTIAL_NAME + report.id)];
                        case 4:
                            _b.sent();
                            if (report.c8y_IsNavigatorNode) {
                                this.reportDashboardService.addReportNavigatorNode(report);
                            }
                            this.reload$.next();
                            modal.close();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _b.sent();
                            if (ex_1) {
                                throw new Error("Something went wrong: " + ex_1);
                            }
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        ReportDashboardListComponent.prototype.delete = function (report) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var dashboard, isDashboardFrozen, msg, ex_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 5, , 6]);
                            return [4 /*yield*/, this.contextDashboardService
                                    .getDashboard$("report_" + report.id, [exports.ContextDashboardType.Named])
                                    .toPromise()];
                        case 1:
                            dashboard = _b.sent();
                            isDashboardFrozen = !!((_a = dashboard === null || dashboard === void 0 ? void 0 : dashboard.c8y_Dashboard) === null || _a === void 0 ? void 0 : _a.isFrozen);
                            msg = isDashboardFrozen
                                ? i2.gettext("You are about to delete the report \"{{ reportName }}\". Be aware that the report has a locked dashboard assigned. Do you want to proceed?")
                                : i2.gettext("You are about to delete the report \"{{ reportName }}\". Do you want to proceed?");
                            return [4 /*yield*/, this.modal.confirm(i2.gettext('Delete report'), this.translateService.instant(msg, {
                                    reportName: report.name
                                }), i2.Status.DANGER, {
                                    ok: i2.gettext('Delete'),
                                    cancel: i2.gettext('Cancel')
                                })];
                        case 2:
                            _b.sent();
                            return [4 /*yield*/, this.contextDashboardService.delete(dashboard, false)];
                        case 3:
                            _b.sent();
                            return [4 /*yield*/, this.inventoryService.delete(report.id)];
                        case 4:
                            _b.sent();
                            this.alertService.success(this.DELETED_SUCCESS_MSG);
                            if (report.c8y_IsNavigatorNode) {
                                this.reportDashboardService.removeNavigatorNode(report);
                            }
                            this.reload$.next();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_2 = _b.sent();
                            if (ex_2) {
                                throw new Error("Something went wrong: " + ex_2);
                            }
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        ReportDashboardListComponent.prototype.update = function (report) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            report.c8y_IsNavigatorNode = report.c8y_IsNavigatorNode ? {} : null;
                            return [4 /*yield*/, this.inventoryService.update(report)];
                        case 1:
                            _b.sent();
                            report.c8y_IsNavigatorNode
                                ? this.reportDashboardService.addReportNavigatorNode(report)
                                : this.reportDashboardService.removeNavigatorNode(report);
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ReportDashboardListComponent;
    }());
    ReportDashboardListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c8y-report-dashboard-list',
                    template: "<c8y-title> <span translate> Reports </span>&nbsp; </c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      class=\"form-control\"\n      type=\"search\"\n      title=\"{{ 'Filter\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n        px-event=\"Clear filtering reports\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Add report' | translate }}\"\n    (click)=\"add()\"\n    [disabled]=\"!canAddReport\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add report' | translate }}\n  </button>\n  <button *ngIf=\"!canAddReport\"\n    class=\"btn btn-clean m-r-16\"\n    popover=\"{{ 'You don\\'t have permission to add reports' | translate }}\"\n    triggers=\"focus\"\n    placement=\"top\"\n    container=\"body\"\n  >\n    <i [c8yIcon]=\"'info-circle'\" class=\"text-primary\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadReports()\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/cockpit/#reports\"></c8y-help>\n\n<div class=\"p-b-32\">\n  <c8y-list-group>\n    <c8y-li\n      class=\"page-sticky-header hidden-xs hidden-sm\"\n      *ngIf=\"(reports$ | async)?.data.length > 0\"\n    >\n      <c8y-li-icon>\n        <i class=\"p-l-24\"></i>\n      </c8y-li-icon>\n      <c8y-li-body class=\"content-flex-80\">\n        <div class=\"col-3\">\n          {{ 'Report' | translate }}\n        </div>\n        <div class=\"col-6\">\n          {{ 'Description' | translate }}\n        </div>\n        <div class=\"col-2\">\n          {{ 'Show in navigator' | translate }}\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n\n    <c8y-li *c8yFor=\"let report of reports$; let i = index; loadMore: 'auto'\">\n      <c8y-li-icon [icon]=\"report.icon\"></c8y-li-icon>\n      <c8y-li-body class=\"content-flex-70\">\n        <div class=\"col-3\">\n          <button class=\"btn-clean\" title=\"{{ report.name }}\" routerLink=\"/reports/{{ report.id }}\">\n            <span class=\"text-truncate\">\n              {{ report.name }}\n            </span>\n          </button>\n        </div>\n        <div class=\"col-6\">\n          <small class=\"text-truncate-wrap\">\n            <em class=\"text-muted\" *ngIf=\"!report.description; else showDescription\">\n              {{ 'No description available' | translate }}\n            </em>\n            <ng-template #showDescription>\n              {{ report.description }}\n            </ng-template>\n          </small>\n        </div>\n        <div class=\"col-2\">\n          <span class=\"m-t-8 visible-xs\"></span>\n          <label\n            class=\"c8y-switch c8y-switch--inline\"\n            title=\"{{ 'Show in navigator' | translate }}\"\n          >\n            <input\n              [(ngModel)]=\"!!report.c8y_IsNavigatorNode\"\n              type=\"checkbox\"\n              (change)=\"update(report)\"\n            />\n            <span></span>\n            <span class=\"visible-xs\">\n              {{ 'Show in navigator' | translate }}\n            </span>\n          </label>\n        </div>\n        <div class=\"col-1 text-right hidden-xs\">\n          <button\n            class=\"btn-dot showOnHover pull-right\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n          </button>\n        </div>\n        <div class=\"visible-xs p-t-8 text-right\">\n          <button\n            class=\"btn-danger btn btn-xs\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i c8yIcon=\"trash\"></i>\n            {{ 'Remove report' | translate }}\n          </button>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n\n<div class=\"c8y-empty-state text-center m-t-40\" *ngIf=\"(reports$ | async)?.data.length === 0\">\n  <h1 c8yIcon=\"c8y-reports\" class=\"c8y-icon-duocolor\"></h1>\n  <h3 translate>There are no reports defined</h3>\n  <p translate>Add a report first.</p>\n  <div>\n    <button class=\"btn btn-primary\" (click)=\"add()\" translate>Add report</button>\n  </div>\n  <p c8y-guide-docs>\n    <small translate ngNonBindable\n      >Find out more in the\n      <a c8y-guide-href=\"users-guide/cockpit/#reports\"> User guide`KEEP_ORIGINAL` </a>.\n    </small>\n  </p>\n</div>\n"
                },] }
    ];
    ReportDashboardListComponent.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: ContextDashboardService },
        { type: i3$1.BsModalService },
        { type: i3.TranslateService },
        { type: i2.ModalService },
        { type: i2.AlertService },
        { type: ReportDashboardService },
        { type: i2.Permissions }
    ]; };
    ReportDashboardListComponent.propDecorators = {
        filter: [{ type: i0.ViewChild, args: [i2.FilterInputComponent, { static: false },] }]
    };

    var ReportDashboardGuard = /** @class */ (function () {
        function ReportDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        ReportDashboardGuard.prototype.canActivate = function (route) {
            var _this = this;
            var reportId = route.data.contextData && route.data.contextData.id;
            return rxjs.from(this.contextDashboardService.activateDashboards(route, [exports.ContextDashboardType.Named])).pipe(operators.tap(function (res) {
                return Array.isArray(res) && res.length === 0
                    ? _this.createDashboardIfNotExist(reportId)
                    : rxjs.of(true);
            }));
        };
        ReportDashboardGuard.prototype.createDashboardIfNotExist = function (reportId) {
            var dashboardCfg = {};
            return this.contextDashboardService
                .create(dashboardCfg, undefined, "report_" + reportId)
                .then(function () { return true; });
        };
        return ReportDashboardGuard;
    }());
    ReportDashboardGuard.decorators = [
        { type: i0.Injectable }
    ];
    ReportDashboardGuard.ctorParameters = function () { return [
        { type: ContextDashboardService }
    ]; };

    var ɵ0 = [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [ReportDashboardGuard],
            context: i2.ViewContext.Report
        }
    ];
    var ReportDashboardModule = /** @class */ (function () {
        function ReportDashboardModule() {
        }
        return ReportDashboardModule;
    }());
    ReportDashboardModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ReportDashboardListComponent],
                    entryComponents: [],
                    imports: [
                        i2.CoreModule,
                        ContextDashboardModule,
                        i4.RouterModule.forChild([
                            {
                                path: 'reports',
                                component: ReportDashboardListComponent
                            }
                        ]),
                        popover.PopoverModule
                    ],
                    providers: [
                        ReportDashboardGuard,
                        ReportDashboardNavigationFactory,
                        ReportDashboardService,
                        {
                            provide: i2.HOOK_ROUTE,
                            useValue: ɵ0,
                            multi: true
                        },
                        {
                            provide: i2.HOOK_NAVIGATOR_NODES,
                            useClass: ReportDashboardNavigationFactory,
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AddDashboardComponent = AddDashboardComponent;
    exports.AddDashboardFactory = AddDashboardFactory;
    exports.AppearanceSettingsComponent = AppearanceSettingsComponent;
    exports.COCKPIT_HOME_DASHBOARD_CONFIG = COCKPIT_HOME_DASHBOARD_CONFIG;
    exports.CONTEXT_DASHBOARD_CONFIG = CONTEXT_DASHBOARD_CONFIG;
    exports.CockpitDashboardComponent = CockpitDashboardComponent;
    exports.CockpitDashboardModule = CockpitDashboardModule;
    exports.ContextDashboardComponent = ContextDashboardComponent;
    exports.ContextDashboardModule = ContextDashboardModule;
    exports.ContextDashboardService = ContextDashboardService;
    exports.DASHBOARD_THEME_CLASSES = DASHBOARD_THEME_CLASSES;
    exports.DEFAULT_COCKPIT_HOME_WIDGETS = DEFAULT_COCKPIT_HOME_WIDGETS;
    exports.DashboardActionBarFactory = DashboardActionBarFactory;
    exports.DashboardDetailComponent = DashboardDetailComponent;
    exports.DeviceDashboardGuard = DeviceDashboardGuard;
    exports.DeviceInfoDashboardComponent = DeviceInfoDashboardComponent;
    exports.DeviceInfoDashboardModule = DeviceInfoDashboardModule;
    exports.DeviceManagementHomeDashboardComponent = DeviceManagementHomeDashboardComponent;
    exports.DeviceManagementHomeDashboardModule = DeviceManagementHomeDashboardModule;
    exports.GroupDashboardGuard = GroupDashboardGuard;
    exports.LegacyWelcomeComponent = LegacyWelcomeComponent;
    exports.PasteDashboardActionComponent = PasteDashboardActionComponent;
    exports.REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY = REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY;
    exports.ReportDashboardGuard = ReportDashboardGuard;
    exports.ReportDashboardListComponent = ReportDashboardListComponent;
    exports.ReportDashboardModule = ReportDashboardModule;
    exports.ReportDashboardNavigationFactory = ReportDashboardNavigationFactory;
    exports.ReportDashboardService = ReportDashboardService;
    exports.STYLING_CLASS_PREFIXES = STYLING_CLASS_PREFIXES;
    exports.WIDGET_CONTENT_CLASSES = WIDGET_CONTENT_CLASSES;
    exports.WIDGET_HEADER_CLASSES = WIDGET_HEADER_CLASSES;
    exports.WelcomeToCockpit = WelcomeToCockpit;
    exports.WidgetConfigComponent = WidgetConfigComponent;
    exports.WidgetPreviewComponent = WidgetPreviewComponent;
    exports.WidgetService = WidgetService;
    exports["ɵ2"] = ɵ2;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-context-dashboard.umd.js.map
