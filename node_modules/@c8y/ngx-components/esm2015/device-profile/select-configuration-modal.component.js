import { Component, EventEmitter } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { QueriesUtil } from '@c8y/client';
import { Subject } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';
export class SelectConfigurationModalComponent {
    constructor(repositoryService) {
        this.repositoryService = repositoryService;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(() => this.getItems()), map(({ data }) => this.aggregate(data)));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    search(searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: `*${searchTerm}*` }, { configurationType: `*${searchTerm}*` });
        }
        this.load.next();
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    getItems() {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    }
    aggregate(mos) {
        const selectedItems = this.selected;
        return mos.reduce((acc, curr) => {
            curr.configurationType = curr.configurationType || curr.name;
            const selected = selectedItems && selectedItems.filter(val => val.url === curr.url).length > 0;
            const selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected
            };
            let selectModalObject = acc.find(val => val.body[0].value === curr.configurationType);
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    }
}
SelectConfigurationModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-select-configuration-modal',
                template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
            },] }
];
SelectConfigurationModalComponent.ctorParameters = () => [
    { type: RepositoryService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLXByb2ZpbGUvc2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxPQUFPLEVBQXVELE1BQU0scUJBQXFCLENBQUM7QUFDbkcsT0FBTyxFQUFrQixXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUQsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQU0xRixNQUFNLE9BQU8saUNBQWlDO0lBYzVDLFlBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBYnhELFVBQUssR0FBVyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNoRCxTQUFJLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDcEMsbUJBQWMsR0FBc0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2hELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDaEMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN4QyxDQUFDO1FBQ0Ysa0JBQWEsR0FBd0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU3RCxvQkFBZSxHQUFRLEVBQUUsQ0FBQztRQUMxQixnQkFBVyxHQUFRLEVBQUUs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RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgSVNlbGVjdE1vZGFsT2JqZWN0LCBJU2VsZWN0TW9kYWxPcHRpb24sIE1vZGFsTGFiZWxzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgUXVlcmllc1V0aWwgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJlcG9zaXRvcnlTZXJ2aWNlLCBSZXBvc2l0b3J5VHlwZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeS9zaGFyZWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNlbGVjdENvbmZpZ3VyYXRpb25Nb2RhbENvbXBvbmVudCB7XG4gIHRpdGxlOiBzdHJpbmcgPSBnZXR0ZXh0KCdTZWxlY3QgY29uZmlndXJhdGlvbicpO1xuICBsb2FkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgY29uZmlndXJhdGlvbnM6IE9ic2VydmFibGU8YW55W10+ID0gdGhpcy5sb2FkLnBpcGUoXG4gICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuZ2V0SXRlbXMoKSksXG4gICAgbWFwKCh7IGRhdGEgfSkgPT4gdGhpcy5hZ2dyZWdhdGUoZGF0YSkpXG4gICk7XG4gIHJlc3VsdEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnlbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgc2VsZWN0ZWQ6IGFueVtdO1xuICBkZXZpY2VUeXBlUXVlcnk6IGFueSA9IHt9O1xuICBzZWFyY2hRdWVyeTogYW55ID0ge307XG4gIGxhYmVsczogTW9kYWxMYWJlbHMgPSB7IG9rOiBnZXR0ZXh0KCdTYXZlJykgfTtcbiAgcHJpdmF0ZSBxdWVyaWVzVXRpbDogUXVlcmllc1V0aWw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZXBvc2l0b3J5U2VydmljZTogUmVwb3NpdG9yeVNlcnZpY2UpIHtcbiAgICB0aGlzLnF1ZXJpZXNVdGlsID0gbmV3IFF1ZXJpZXNVdGlsKCk7XG4gIH1cblxuICBzZWFyY2goc2VhcmNoVGVybSkge1xuICAgIGlmICghc2VhcmNoVGVybSkge1xuICAgICAgdGhpcy5zZWFyY2hRdWVyeSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlYXJjaFF1ZXJ5ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRPckZpbHRlcihcbiAgICAgICAgeyBuYW1lOiBgKiR7c2VhcmNoVGVybX0qYCB9LFxuICAgICAgICB7IGNvbmZpZ3VyYXRpb25UeXBlOiBgKiR7c2VhcmNoVGVybX0qYCB9XG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvYWQubmV4dCgpO1xuICB9XG5cbiAgcmVzdWx0KHNlbGVjdGVkSXRlbXMpIHtcbiAgICB0aGlzLnJlc3VsdEVtaXR0ZXIuZW1pdChzZWxlY3RlZEl0ZW1zKTtcbiAgfVxuXG4gIGdldEl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmxpc3RSZXBvc2l0b3J5RW50cmllcyhSZXBvc2l0b3J5VHlwZS5DT05GSUdVUkFUSU9OLCB7XG4gICAgICBxdWVyeTogdGhpcy5xdWVyaWVzVXRpbC5hZGRPckZpbHRlcih0aGlzLmRldmljZVR5cGVRdWVyeSwgdGhpcy5zZWFyY2hRdWVyeSksXG4gICAgICBwYXJhbXM6IHsgcGFnZVNpemU6IDEwMCB9XG4gICAgfSk7XG4gIH1cblxuICBhZ2dyZWdhdGUobW9zOiBJTWFuYWdlZE9iamVjdFtdKTogSVNlbGVjdE1vZGFsT2JqZWN0W10ge1xuICAgIGNvbnN0IHNlbGVjdGVkSXRlbXM6IGFueVtdID0gdGhpcy5zZWxlY3RlZDtcbiAgICByZXR1cm4gbW9zLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiB7XG4gICAgICBjdXJyLmNvbmZpZ3VyYXRpb25UeXBlID0gY3Vyci5jb25maWd1cmF0aW9uVHlwZSB8fCBjdXJyLm5hbWU7XG4gICAgICBjb25zdCBzZWxlY3RlZCA9XG4gICAgICAgIHNlbGVjdGVkSXRlbXMgJiYgc2VsZWN0ZWRJdGVtcy5maWx0ZXIodmFsID0+IHZhbC51cmwgPT09IGN1cnIudXJsKS5sZW5ndGggPiAwO1xuICAgICAgY29uc3Qgc2VsZWN0TW9kYWxPcHRpb246IElTZWxlY3RNb2RhbE9wdGlvbiA9IHtcbiAgICAgICAgYm9keTogW3sgdmFsdWU6IGN1cnIubmFtZSB9XSxcbiAgICAgICAgb2JqOiBjdXJyLFxuICAgICAgICBzZWxlY3RlZFxuICAgICAgfTtcbiAgICAgIGxldCBzZWxlY3RNb2RhbE9iamVjdDogSVNlbGVjdE1vZGFsT2JqZWN0ID0gYWNjLmZpbmQoXG4gICAgICAgIHZhbCA9PiB2YWwuYm9keVswXS52YWx1ZSA9PT0gY3Vyci5jb25maWd1cmF0aW9uVHlwZVxuICAgICAgKSBhcyBJU2VsZWN0TW9kYWxPYmplY3Q7XG4gICAgICBpZiAoc2VsZWN0TW9kYWxPYmplY3QpIHtcbiAgICAgICAgc2VsZWN0TW9kYWxPYmplY3Qub3B0aW9ucy5wdXNoKHNlbGVjdE1vZGFsT3B0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdE1vZGFsT2JqZWN0ID0ge1xuICAgICAgICAgIGdyb3VwSWQ6IGN1cnIuaWQsXG4gICAgICAgICAgYm9keTogW3sgdmFsdWU6IGN1cnIuY29uZmlndXJhdGlvblR5cGUgfV0sXG4gICAgICAgICAgb3B0aW9uczogW3NlbGVjdE1vZGFsT3B0aW9uXVxuICAgICAgICB9O1xuICAgICAgICBhY2MucHVzaChzZWxlY3RNb2RhbE9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgfVxufVxuIl19