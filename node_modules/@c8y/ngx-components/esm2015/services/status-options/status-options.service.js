import { Inject, Injectable, Optional } from '@angular/core';
import { flatten } from 'lodash-es';
import { HOOK_SERVICE_STATUS, SERVICE_STATUS_OPTIONS } from './status-options.model';
import * as i0 from "@angular/core";
import * as i1 from "./status-options.model";
/**
 * The service for system wide registered service status options.
 * It provides the standard service statuses plus all custom status options
 * registered with the <code>HOOK_SERVICE_STATUS</code> extension hook.
 */
import * as ɵngcc0 from '@angular/core';
export class StatusOptionsService {
    constructor(options) {
        this._options = [...SERVICE_STATUS_OPTIONS, ...flatten(options)];
    }
    get options() {
        return this._options;
    }
}
StatusOptionsService.ɵfac = function StatusOptionsService_Factory(t) { return new (t || StatusOptionsService)(ɵngcc0.ɵɵinject(HOOK_SERVICE_STATUS, 8)); };
StatusOptionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StatusOptionsService_Factory() { return new StatusOptionsService(i0.ɵɵinject(i1.HOOK_SERVICE_STATUS, 8)); }, token: StatusOptionsService, providedIn: "root" });
StatusOptionsService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_SERVICE_STATUS,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StatusOptionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_SERVICE_STATUS]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLW9wdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc2VydmljZXMvc3RhdHVzLW9wdGlvbnMvc3RhdHVzLW9wdGlvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsc0JBQXNCLEVBQWdCLE1BQU0sd0JBQXdCLENBQUM7QUFDbkc7QUFFZ0M7QUFEaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlILE1BQU0sT0FBTyxvQkFBb0I7QUFDakMsSUFNRSxZQUMyQyxPQUE2QztBQUN2RixRQUNDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxHQUFHLHNCQUFzQixFQUFFLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDckUsSUFBRSxDQUFDO0FBQ0gsSUFYRSxJQUFJLE9BQU87QUFBSyxRQUNkLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN6QixJQUFFLENBQUM7QUFDSDswSkFDQTtBQUFDLHVPQUxJO0FBQUM7RUFITCxVQUFVLFNBQUMsa0JBQ1YsVUFBVSxFQUFFLE1BQU0sY0FDbkIsdkVBRWUsWUFPc0MsS0FBSyx1QkFBdEQsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7QUFBUTs7Ozs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgSE9PS19TRVJWSUNFX1NUQVRVUywgU0VSVklDRV9TVEFUVVNfT1BUSU9OUywgU3RhdHVzT3B0aW9uIH0gZnJvbSAnLi9zdGF0dXMtb3B0aW9ucy5tb2RlbCc7XG5cbi8qKlxuICogVGhlIHNlcnZpY2UgZm9yIHN5c3RlbSB3aWRlIHJlZ2lzdGVyZWQgc2VydmljZSBzdGF0dXMgb3B0aW9ucy5cbiAqIEl0IHByb3ZpZGVzIHRoZSBzdGFuZGFyZCBzZXJ2aWNlIHN0YXR1c2VzIHBsdXMgYWxsIGN1c3RvbSBzdGF0dXMgb3B0aW9uc1xuICogcmVnaXN0ZXJlZCB3aXRoIHRoZSA8Y29kZT5IT09LX1NFUlZJQ0VfU1RBVFVTPC9jb2RlPiBleHRlbnNpb24gaG9vay5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU3RhdHVzT3B0aW9uc1NlcnZpY2Uge1xuICBnZXQgb3B0aW9ucygpOiBTdGF0dXNPcHRpb25bXSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIF9vcHRpb25zOiBTdGF0dXNPcHRpb25bXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEhPT0tfU0VSVklDRV9TVEFUVVMpIG9wdGlvbnM6IEFycmF5PFN0YXR1c09wdGlvbiB8IFN0YXR1c09wdGlvbltdPlxuICApIHtcbiAgICB0aGlzLl9vcHRpb25zID0gWy4uLlNFUlZJQ0VfU1RBVFVTX09QVElPTlMsIC4uLmZsYXR0ZW4ob3B0aW9ucyldO1xuICB9XG59XG4iXX0=