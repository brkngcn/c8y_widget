import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, gettext, HOOK_BREADCRUMB, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { LastUpdatedDateCellRendererComponent, NameCellRendererComponent, StatusCellRendererComponent } from './columns';
import { ServicesDeviceTabComponent } from './services-device-tab.component';
import { ServicesDeviceTabGuard } from './services-device-tab.guard';
import { ServicesBreadcrumbFactory } from './services.breadcrumb-factory';
const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'services',
        component: ServicesDeviceTabComponent,
        label: gettext('Services'),
        icon: 'statistics',
        priority: 500,
        canActivate: [ServicesDeviceTabGuard]
    }
];
export class ServicesDeviceTabModule {
}
ServicesDeviceTabModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, RouterModule, TooltipModule],
                declarations: [
                    ServicesDeviceTabComponent,
                    LastUpdatedDateCellRendererComponent,
                    NameCellRendererComponent,
                    StatusCellRendererComponent
                ],
                providers: [
                    ServicesDeviceTabGuard,
                    ServicesBreadcrumbFactory,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    { provide: HOOK_BREADCRUMB, useClass: ServicesBreadcrumbFactory, multi: true }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXMtZGV2aWNlLXRhYi5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZXJ2aWNlcy9zZXJ2aWNlcy1kZXZpY2UtdGFiL3NlcnZpY2VzLWRldmljZS10YWIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNQLGVBQWUsRUFDZixVQUFVLEVBRVYsV0FBVyxFQUNaLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFDTCxvQ0FBb0MsRUFDcEMseUJBQXlCLEVBQ3pCLDJCQUEyQixFQUM1QixNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztXQWUxRDtJQUNSO1FBQ0UsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNO1FBQzNCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFNBQVMsRUFBRSwwQkFBMEI7UUFDckMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDMUIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsUUFBUSxFQUFFLEdBQUc7UUFDYixXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztLQUN0QztDQUNTO0FBTWxCLE1BQU0sT0FBTyx1QkFBdUI7OztZQTdCbkMsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDO2dCQUNsRCxZQUFZLEVBQUU7b0JBQ1osMEJBQTBCO29CQUMxQixvQ0FBb0M7b0JBQ3BDLHlCQUF5QjtvQkFDekIsMkJBQTJCO2lCQUM1QjtnQkFDRCxTQUFTLEVBQUU7b0JBQ1Qsc0JBQXNCO29CQUN0Qix5QkFBeUI7b0JBQ3pCO3dCQUNFLE9BQU8sRUFBRSxVQUFVO3dCQUNuQixRQUFRLElBVUk7d0JBQ1osS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0QsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSx5QkFBeUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2lCQUMvRTthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1xuICBDb3JlTW9kdWxlLFxuICBnZXR0ZXh0LFxuICBIT09LX0JSRUFEQ1JVTUIsXG4gIEhPT0tfUk9VVEUsXG4gIFJvdXRlLFxuICBWaWV3Q29udGV4dFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHtcbiAgTGFzdFVwZGF0ZWREYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnRcbn0gZnJvbSAnLi9jb2x1bW5zJztcbmltcG9ydCB7IFNlcnZpY2VzRGV2aWNlVGFiQ29tcG9uZW50IH0gZnJvbSAnLi9zZXJ2aWNlcy1kZXZpY2UtdGFiLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZXJ2aWNlc0RldmljZVRhYkd1YXJkIH0gZnJvbSAnLi9zZXJ2aWNlcy1kZXZpY2UtdGFiLmd1YXJkJztcbmltcG9ydCB7IFNlcnZpY2VzQnJlYWRjcnVtYkZhY3RvcnkgfSBmcm9tICcuL3NlcnZpY2VzLmJyZWFkY3J1bWItZmFjdG9yeSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBSb3V0ZXJNb2R1bGUsIFRvb2x0aXBNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTZXJ2aWNlc0RldmljZVRhYkNvbXBvbmVudCxcbiAgICBMYXN0VXBkYXRlZERhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnRcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgU2VydmljZXNEZXZpY2VUYWJHdWFyZCxcbiAgICBTZXJ2aWNlc0JyZWFkY3J1bWJGYWN0b3J5LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICB1c2VWYWx1ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlLFxuICAgICAgICAgIHBhdGg6ICdzZXJ2aWNlcycsXG4gICAgICAgICAgY29tcG9uZW50OiBTZXJ2aWNlc0RldmljZVRhYkNvbXBvbmVudCxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU2VydmljZXMnKSxcbiAgICAgICAgICBpY29uOiAnc3RhdGlzdGljcycsXG4gICAgICAgICAgcHJpb3JpdHk6IDUwMCxcbiAgICAgICAgICBjYW5BY3RpdmF0ZTogW1NlcnZpY2VzRGV2aWNlVGFiR3VhcmRdXG4gICAgICAgIH1cbiAgICAgIF0gYXMgUm91dGVbXSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQlJFQURDUlVNQiwgdXNlQ2xhc3M6IFNlcnZpY2VzQnJlYWRjcnVtYkZhY3RvcnksIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlc0RldmljZVRhYk1vZHVsZSB7fVxuIl19