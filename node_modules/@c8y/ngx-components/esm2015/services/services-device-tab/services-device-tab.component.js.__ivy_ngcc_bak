import { __awaiter } from "tslib";
import { Component, EventEmitter } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryService, QueriesUtil } from '@c8y/client';
import { DeviceGridService } from '@c8y/ngx-components/device-grid';
import { StatusOptionsService } from '../status-options';
import { LastUpdatedDateGridColumn, ServiceNameGridColumn, ServiceTypeGridColumn, StatusGridColumn } from './columns';
const SERVICE_FRAGMENT = 'c8y_Service';
export class ServicesDeviceTabComponent {
    constructor(route, inventoryService, gridService, statusOptionsService) {
        this.route = route;
        this.inventoryService = inventoryService;
        this.gridService = gridService;
        this.statusOptionsService = statusOptionsService;
        this.deviceId = this.route.snapshot.parent.data.contextData.id;
        this.sizeRequestDone = false;
        this.refresh$ = new EventEmitter();
        this.pagination = {
            pageSize: 50,
            currentPage: 1
        };
        this.columns = [
            new StatusGridColumn(this.statusOptionsService),
            new ServiceNameGridColumn(),
            new ServiceTypeGridColumn(),
            new LastUpdatedDateGridColumn()
        ];
        this.queriesUtil = new QueriesUtil();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.sizeRequest = this.inventoryService
            .childAdditionsList(this.deviceId, {
            query: `type eq ${SERVICE_FRAGMENT}`,
            withTotalPages: true,
            pageSize: 1
        })
            .then(response => {
            var _a;
            this.sizeRequestDone = true;
            return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages;
        });
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverSideDataResult;
            const query = this.queriesUtil.buildQuery(this.queriesUtil.addAndFilter(this.gridService.getQueryObj(dataSourceModifier.columns), {
                type: SERVICE_FRAGMENT
            }));
            const dataRequest = this.inventoryService.childAdditionsList(this.deviceId, {
                query,
                withTotalPages: true,
                pageSize: dataSourceModifier.pagination.pageSize,
                currentPage: dataSourceModifier.pagination.currentPage
            });
            const filtererdSizeRequest = this.inventoryService
                .childAdditionsList(this.deviceId, {
                query,
                withTotalPages: true,
                pageSize: 1
            })
                .then(response => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages; });
            const [dataResponse, size, filteredSize] = yield Promise.all([
                dataRequest,
                this.sizeRequest,
                filtererdSizeRequest
            ]);
            const { res, data, paging } = dataResponse;
            serverSideDataResult = {
                res,
                data,
                paging,
                filteredSize,
                size
            };
            return serverSideDataResult;
        });
    }
    trackByName(_index, column) {
        return column.name;
    }
}
ServicesDeviceTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-services-device-tab',
                template: "<div class=\"content-fullpage\">\n  <c8y-data-grid\n    [title]=\"'Services' | translate\"\n    [refresh]=\"refresh$\"\n    [actionControls]=\"[]\"\n    [pagination]=\"pagination\"\n    [columns]=\"columns\"\n    [infiniteScroll]=\"'auto'\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n  >\n    <div class=\"c8y-empty-state\">\n      <ng-container *ngIf=\"!sizeRequestDone\">\n        <c8y-loading></c8y-loading>\n      </ng-container>\n      <ng-container *ngIf=\"sizeRequestDone\">\n        <ng-container *ngIf=\"(sizeRequest | async) === 0; else noResults\">\n          <div class=\"text-center\">\n            <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-tools\"></h1>\n            <h3 translate>No services to display.</h3>\n          </div>\n        </ng-container>\n        <ng-template #noResults>\n          <h1 c8yIcon=\"search\"></h1>\n          <div>\n            <p>\n              <strong>{{ 'No results to display.' | translate }}</strong>\n            </p>\n            <small>{{ 'Refine your search terms or check your spelling.' | translate }}</small>\n          </div>\n        </ng-template>\n      </ng-container>\n    </div>\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n  </c8y-data-grid>\n</div>\n"
            },] }
];
ServicesDeviceTabComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: InventoryService },
    { type: DeviceGridService },
    { type: StatusOptionsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXMtZGV2aWNlLXRhYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZXJ2aWNlcy9zZXJ2aWNlcy1kZXZpY2UtdGFiL3NlcnZpY2VzLWRldmljZS10YWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFrQixnQkFBZ0IsRUFBZSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekYsT0FBTyxFQUFvQixpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pELE9BQU8sRUFDTCx5QkFBeUIsRUFDekIscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQixnQkFBZ0IsRUFDakIsTUFBTSxXQUFXLENBQUM7QUFFbkIsTUFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUM7QUFNdkMsTUFBTSxPQUFPLDBCQUEwQjtJQXVCckMsWUFDVSxLQUFxQixFQUNyQixnQkFBa0MsRUFDbEMsV0FBOEIsRUFDOUIsb0JBQTBDO1FBSDFDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsZ0JBQVcsR0FBWCxXQUFXLENBQW1CO1FBQzlCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUExQnBELGFBQVEsR0FBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1FBRzNFLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBRXhCLGFBQVEsR0FBdUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsRCxlQUFVLEdB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USxjQUFjO1lBQ0UsZ0JBQWdCO1lBRWQsaUJBQWlCO1lBQ25DLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSwgSVJlc3VsdExpc3QsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZU1vZGlmaWVyLCBTZXJ2ZXJTaWRlRGF0YVJlc3VsdCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZENvbHVtbiwgRGV2aWNlR3JpZFNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IFN0YXR1c09wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi4vc3RhdHVzLW9wdGlvbnMnO1xuaW1wb3J0IHtcbiAgTGFzdFVwZGF0ZWREYXRlR3JpZENvbHVtbixcbiAgU2VydmljZU5hbWVHcmlkQ29sdW1uLFxuICBTZXJ2aWNlVHlwZUdyaWRDb2x1bW4sXG4gIFN0YXR1c0dyaWRDb2x1bW5cbn0gZnJvbSAnLi9jb2x1bW5zJztcblxuY29uc3QgU0VSVklDRV9GUkFHTUVOVCA9ICdjOHlfU2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zZXJ2aWNlcy1kZXZpY2UtdGFiJyxcbiAgdGVtcGxhdGVVcmw6ICdzZXJ2aWNlcy1kZXZpY2UtdGFiLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlc0RldmljZVRhYkNvbXBvbmVudCB7XG4gIGRldmljZUlkOiBzdHJpbmcgfCBudW1iZXIgPSB0aGlzLnJvdXRlLnNuYXBzaG90LnBhcmVudC5kYXRhLmNvbnRleHREYXRhLmlkO1xuXG4gIHNpemVSZXF1ZXN0OiBQcm9taXNlPG51bWJlcj47XG4gIHNpemVSZXF1ZXN0RG9uZSA9IGZhbHNlO1xuXG4gIHJlZnJlc2gkOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHBhZ2luYXRpb24gPSB7XG4gICAgcGFnZVNpemU6IDUwLFxuICAgIGN1cnJlbnRQYWdlOiAxXG4gIH07XG5cbiAgY29sdW1uczogRGV2aWNlR3JpZENvbHVtbltdID0gW1xuICAgIG5ldyBTdGF0dXNHcmlkQ29sdW1uKHRoaXMuc3RhdHVzT3B0aW9uc1NlcnZpY2UpLFxuICAgIG5ldyBTZXJ2aWNlTmFtZUdyaWRDb2x1bW4oKSxcbiAgICBuZXcgU2VydmljZVR5cGVHcmlkQ29sdW1uKCksXG4gICAgbmV3IExhc3RVcGRhdGVkRGF0ZUdyaWRDb2x1bW4oKVxuICBdO1xuXG4gIHNlcnZlclNpZGVEYXRhQ2FsbGJhY2s6IGFueTtcblxuICBwcml2YXRlIHF1ZXJpZXNVdGlsOiBRdWVyaWVzVXRpbCA9IG5ldyBRdWVyaWVzVXRpbCgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGdyaWRTZXJ2aWNlOiBEZXZpY2VHcmlkU2VydmljZSxcbiAgICBwcml2YXRlIHN0YXR1c09wdGlvbnNTZXJ2aWNlOiBTdGF0dXNPcHRpb25zU2VydmljZVxuICApIHtcbiAgICB0aGlzLnNlcnZlclNpZGVEYXRhQ2FsbGJhY2sgPSB0aGlzLm9uRGF0YVNvdXJjZU1vZGlmaWVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zaXplUmVxdWVzdCA9IHRoaXMuaW52ZW50b3J5U2VydmljZVxuICAgICAgLmNoaWxkQWRkaXRpb25zTGlzdCh0aGlzLmRldmljZUlkLCB7XG4gICAgICAgIHF1ZXJ5OiBgdHlwZSBlcSAke1NFUlZJQ0VfRlJBR01FTlR9YCxcbiAgICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWUsXG4gICAgICAgIHBhZ2VTaXplOiAxXG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICB0aGlzLnNpemVSZXF1ZXN0RG9uZSA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXNwb25zZT8ucGFnaW5nPy50b3RhbFBhZ2VzO1xuICAgICAgfSk7XG4gIH1cblxuICBhc3luYyBvbkRhdGFTb3VyY2VNb2RpZmllcihcbiAgICBkYXRhU291cmNlTW9kaWZpZXI6IERhdGFTb3VyY2VNb2RpZmllclxuICApOiBQcm9taXNlPFNlcnZlclNpZGVEYXRhUmVzdWx0PiB7XG4gICAgbGV0IHNlcnZlclNpZGVEYXRhUmVzdWx0OiBTZXJ2ZXJTaWRlRGF0YVJlc3VsdDtcblxuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyaWVzVXRpbC5idWlsZFF1ZXJ5KFxuICAgICAgdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIodGhpcy5ncmlkU2VydmljZS5nZXRRdWVyeU9iaihkYXRhU291cmNlTW9kaWZpZXIuY29sdW1ucyksIHtcbiAgICAgICAgdHlwZTogU0VSVklDRV9GUkFHTUVOVFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgY29uc3QgZGF0YVJlcXVlc3Q6IFByb21pc2U8SVJlc3VsdExpc3Q8SU1hbmFnZWRPYmplY3Q+PiA9XG4gICAgICB0aGlzLmludmVudG9yeVNlcnZpY2UuY2hpbGRBZGRpdGlvbnNMaXN0KHRoaXMuZGV2aWNlSWQsIHtcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHdpdGhUb3RhbFBhZ2VzOiB0cnVlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YVNvdXJjZU1vZGlmaWVyLnBhZ2luYXRpb24ucGFnZVNpemUsXG4gICAgICAgIGN1cnJlbnRQYWdlOiBkYXRhU291cmNlTW9kaWZpZXIucGFnaW5hdGlvbi5jdXJyZW50UGFnZVxuICAgICAgfSk7XG5cbiAgICBjb25zdCBmaWx0ZXJlcmRTaXplUmVxdWVzdDogUHJvbWlzZTxudW1iZXI+ID0gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlXG4gICAgICAuY2hpbGRBZGRpdGlvbnNMaXN0KHRoaXMuZGV2aWNlSWQsIHtcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHdpdGhUb3RhbFBhZ2VzOiB0cnVlLFxuICAgICAgICBwYWdlU2l6ZTogMVxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlPy5wYWdpbmc/LnRvdGFsUGFnZXMpO1xuXG4gICAgY29uc3QgW2RhdGFSZXNwb25zZSwgc2l6ZSwgZmlsdGVyZWRTaXplXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIGRhdGFSZXF1ZXN0LFxuICAgICAgdGhpcy5zaXplUmVxdWVzdCxcbiAgICAgIGZpbHRlcmVyZFNpemVSZXF1ZXN0XG4gICAgXSk7XG5cbiAgICBjb25zdCB7IHJlcywgZGF0YSwgcGFnaW5nIH0gPSBkYXRhUmVzcG9uc2U7XG5cbiAgICBzZXJ2ZXJTaWRlRGF0YVJlc3VsdCA9IHtcbiAgICAgIHJlcyxcbiAgICAgIGRhdGEsXG4gICAgICBwYWdpbmcsXG4gICAgICBmaWx0ZXJlZFNpemUsXG4gICAgICBzaXplXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2ZXJTaWRlRGF0YVJlc3VsdDtcbiAgfVxuXG4gIHRyYWNrQnlOYW1lKF9pbmRleCwgY29sdW1uOiBEZXZpY2VHcmlkQ29sdW1uKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29sdW1uLm5hbWU7XG4gIH1cbn1cbiJdfQ==