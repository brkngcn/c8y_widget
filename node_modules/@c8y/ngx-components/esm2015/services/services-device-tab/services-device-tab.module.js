import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, gettext, HOOK_BREADCRUMB, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { LastUpdatedDateCellRendererComponent, NameCellRendererComponent, StatusCellRendererComponent } from './columns';
import { ServicesDeviceTabComponent } from './services-device-tab.component';
import { ServicesDeviceTabGuard } from './services-device-tab.guard';
import { ServicesBreadcrumbFactory } from './services.breadcrumb-factory';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'services',
        component: ServicesDeviceTabComponent,
        label: gettext('Services'),
        icon: 'statistics',
        priority: 500,
        canActivate: [ServicesDeviceTabGuard]
    }
];
export class ServicesDeviceTabModule {
}
ServicesDeviceTabModule.ɵfac = function ServicesDeviceTabModule_Factory(t) { return new (t || ServicesDeviceTabModule)(); };
ServicesDeviceTabModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ServicesDeviceTabModule });
ServicesDeviceTabModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ServicesDeviceTabGuard,
        ServicesBreadcrumbFactory,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        { provide: HOOK_BREADCRUMB, useClass: ServicesBreadcrumbFactory, multi: true }
    ], imports: [[CoreModule, RouterModule, TooltipModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServicesDeviceTabModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, RouterModule, TooltipModule],
                declarations: [
                    ServicesDeviceTabComponent,
                    LastUpdatedDateCellRendererComponent,
                    NameCellRendererComponent,
                    StatusCellRendererComponent
                ],
                providers: [
                    ServicesDeviceTabGuard,
                    ServicesBreadcrumbFactory,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    { provide: HOOK_BREADCRUMB, useClass: ServicesBreadcrumbFactory, multi: true }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ServicesDeviceTabModule, { declarations: function () { return [ServicesDeviceTabComponent,
        LastUpdatedDateCellRendererComponent,
        NameCellRendererComponent,
        StatusCellRendererComponent]; }, imports: function () { return [CoreModule, RouterModule, TooltipModule]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXMtZGV2aWNlLXRhYi5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZpY2VzL3NlcnZpY2VzLWRldmljZS10YWIvc2VydmljZXMtZGV2aWNlLXRhYi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1AsZUFBZSxFQUNmLFVBQVUsRUFFVixXQUFXLEVBQ1osTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUNMLG9DQUFvQyxFQUNwQyx5QkFBeUIsRUFDekIsMkJBQTJCLEVBQzVCLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUMxRSxXQWNnQjtBQUNoQixJQUFRO0FBQ1IsUUFBVSxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07QUFDckMsUUFBVSxJQUFJLEVBQUUsVUFBVTtBQUMxQixRQUFVLFNBQVMsRUFBRSwwQkFBMEI7QUFDL0MsUUFBVSxLQUFLLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxRQUFVLElBQUksRUFBRSxZQUFZO0FBQzVCLFFBQVUsUUFBUSxFQUFFLEdBQUc7QUFDdkIsUUFBVSxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztBQUMvQyxLQUFTO0FBQ1QsQ0FBa0I7QUFNbEIsTUFBTSxPQUFPLHVCQUF1QjtBQUFHO21EQTdCdEMsUUFBUSxTQUFDLGtCQUNSLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUU7VUFBYSxDQUFDLGtCQUNsRCxZQUFZLEVBQUUsc0JBQ1osMEJBQTBCO1FBQzFCLG9DQUFvQyxzQkFDcEM7T0FBeUIsc0JBQ3pCO3dCQUEyQjtPQUM1QjtlQUNELFNBQVMsRUFBRTtlQUNUO1dBQXNCO1NBQ3RCO3VCQUF5QixzQkFDekIsMEJBQ0UsT0FBTyxFQUFFO0dBQVUsMEJBQ25CLFFBQVEsSUFVSTtHQUNaLEtBQUssRUFBRSxJQUFJLHNCQUNaLHNCQUNELEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUU7RUFBeUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1dBQy9FO1FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkhBQ0k7QUFBQztBQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1xuICBDb3JlTW9kdWxlLFxuICBnZXR0ZXh0LFxuICBIT09LX0JSRUFEQ1JVTUIsXG4gIEhPT0tfUk9VVEUsXG4gIFJvdXRlLFxuICBWaWV3Q29udGV4dFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHtcbiAgTGFzdFVwZGF0ZWREYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnRcbn0gZnJvbSAnLi9jb2x1bW5zJztcbmltcG9ydCB7IFNlcnZpY2VzRGV2aWNlVGFiQ29tcG9uZW50IH0gZnJvbSAnLi9zZXJ2aWNlcy1kZXZpY2UtdGFiLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZXJ2aWNlc0RldmljZVRhYkd1YXJkIH0gZnJvbSAnLi9zZXJ2aWNlcy1kZXZpY2UtdGFiLmd1YXJkJztcbmltcG9ydCB7IFNlcnZpY2VzQnJlYWRjcnVtYkZhY3RvcnkgfSBmcm9tICcuL3NlcnZpY2VzLmJyZWFkY3J1bWItZmFjdG9yeSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBSb3V0ZXJNb2R1bGUsIFRvb2x0aXBNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTZXJ2aWNlc0RldmljZVRhYkNvbXBvbmVudCxcbiAgICBMYXN0VXBkYXRlZERhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnRcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgU2VydmljZXNEZXZpY2VUYWJHdWFyZCxcbiAgICBTZXJ2aWNlc0JyZWFkY3J1bWJGYWN0b3J5LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICB1c2VWYWx1ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlLFxuICAgICAgICAgIHBhdGg6ICdzZXJ2aWNlcycsXG4gICAgICAgICAgY29tcG9uZW50OiBTZXJ2aWNlc0RldmljZVRhYkNvbXBvbmVudCxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU2VydmljZXMnKSxcbiAgICAgICAgICBpY29uOiAnc3RhdGlzdGljcycsXG4gICAgICAgICAgcHJpb3JpdHk6IDUwMCxcbiAgICAgICAgICBjYW5BY3RpdmF0ZTogW1NlcnZpY2VzRGV2aWNlVGFiR3VhcmRdXG4gICAgICAgIH1cbiAgICAgIF0gYXMgUm91dGVbXSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQlJFQURDUlVNQiwgdXNlQ2xhc3M6IFNlcnZpY2VzQnJlYWRjcnVtYkZhY3RvcnksIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlc0RldmljZVRhYk1vZHVsZSB7fVxuIl19