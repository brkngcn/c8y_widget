import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { gettext, ViewContext } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class ServicesBreadcrumbFactory {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
    }
    get(route) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const { context, contextData } = route.snapshot.data;
            const { routeConfig } = route.snapshot;
            this.contextData = contextData || this.contextData;
            if ((context === ViewContext.Service || ((_a = routeConfig) === null || _a === void 0 ? void 0 : _a.context) === ViewContext.Service) &&
                !!this.contextData) {
                const serviceMO = (_b = (yield this.inventoryService.detail(this.contextData, { withParents: true }))) === null || _b === void 0 ? void 0 : _b.data;
                const breadcrumb = { items: [] };
                const breadcrumbItems = [];
                const device = (_d = (_c = serviceMO === null || serviceMO === void 0 ? void 0 : serviceMO.additionParents) === null || _c === void 0 ? void 0 : _c.references[0]) === null || _d === void 0 ? void 0 : _d.managedObject;
                if (device) {
                    breadcrumbItems.push({
                        label: device.name,
                        path: `/device/${device.id}`
                    });
                    breadcrumbItems.push({
                        label: gettext('Services'),
                        path: `/device/${device.id}/services`
                    });
                    breadcrumbItems.push({
                        label: serviceMO.name
                    });
                }
                breadcrumb.items = breadcrumbItems;
                return breadcrumb;
            }
        });
    }
}
ServicesBreadcrumbFactory.ɵfac = function ServicesBreadcrumbFactory_Factory(t) { return new (t || ServicesBreadcrumbFactory)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService)); };
ServicesBreadcrumbFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ServicesBreadcrumbFactory, factory: ServicesBreadcrumbFactory.ɵfac });
ServicesBreadcrumbFactory.ctorParameters = () => [
    { type: InventoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServicesBreadcrumbFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXMuYnJlYWRjcnVtYi1mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZXJ2aWNlcy9zZXJ2aWNlcy1kZXZpY2UtdGFiL3NlcnZpY2VzLmJyZWFkY3J1bWItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQVcsTUFBTSxhQUFhLENBQUM7QUFDeEQsT0FBTyxFQUlMLE9BQU8sRUFDUCxXQUFXLEVBQ1osTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRzdCLE1BQU0sT0FBTyx5QkFBeUI7QUFBRyxJQUd2QyxZQUFvQixnQkFBa0M7QUFBSSxRQUF0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsSUFBRSxDQUFDO0FBQzVELElBQ1EsR0FBRyxDQUFDLEtBQXFCO0FBQ2pDO0FBQTRCO0FBQ0ksWUFENUIsTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztBQUN6RCxZQUFJLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQzNDLFlBQ0ksSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUN2RCxZQUNJLElBQ0UsQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDLE9BQU8sSUFBSSxDQUFBLE1BQUMsV0FBbUIsMENBQUUsT0FBTyxNQUFLLFdBQVcsQ0FBQyxPQUFPLENBQUM7QUFDaEcsZ0JBQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQ2xCO0FBQ04sZ0JBQU0sTUFBTSxTQUFTLEdBQUcsTUFBQSxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsMENBQUUsSUFBSSxDQUFDO0FBQzVHLGdCQUFNLE1BQU0sVUFBVSxHQUFlLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQ25ELGdCQUFNLE1BQU0sZUFBZSxHQUFxQixFQUFFLENBQUM7QUFDbkQsZ0JBQU0sTUFBTSxNQUFNLEdBQVksTUFBQSxNQUFBLFNBQVMsYUFBVCxTQUFTLHVCQUFULFNBQVMsQ0FBRSxlQUFlLDBDQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsMENBQUUsYUFBYSxDQUFDO0FBQ3ZGLGdCQUNNLElBQUksTUFBTSxFQUFFO0FBQ2xCLG9CQUFRLGVBQWUsQ0FBQyxJQUFJLENBQUM7QUFDN0Isd0JBQVUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQzVCLHdCQUFVLElBQUksRUFBRSxXQUFXLE1BQU0sQ0FBQyxFQUFFLEVBQUU7QUFDdEMscUJBQVMsQ0FBQyxDQUFDO0FBQ1gsb0JBQVEsZUFBZSxDQUFDLElBQUksQ0FBQztBQUM3Qix3QkFBVSxLQUFLLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyx3QkFBVSxJQUFJLEVBQUUsV0FBVyxNQUFNLENBQUMsRUFBRSxXQUFXO0FBQy9DLHFCQUFTLENBQUMsQ0FBQztBQUNYLG9CQUFRLGVBQWUsQ0FBQyxJQUFJLENBQUM7QUFDN0Isd0JBQVUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJO0FBQy9CLHFCQUEyQixDQUFDLENBQUM7QUFDN0IsaUJBQU87QUFDUCxnQkFDTSxVQUFVLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQztBQUN6QyxnQkFBTSxPQUFPLFVBQVUsQ0FBQztBQUN4QixhQUFLO0FBQ0w7QUFFTSxLQUZIO0FBQ0g7cURBdkNDLFVBQVU7eUpBQ1Q7QUFBQztBQUFtRCxZQVY3QyxnQkFBZ0I7QUFBRzs7O2lGQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJbnZlbnRvcnlTZXJ2aWNlLCBJU291cmNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQnJlYWRjcnVtYixcbiAgQnJlYWRjcnVtYkZhY3RvcnksXG4gIEJyZWFkY3J1bWJJdGVtLFxuICBnZXR0ZXh0LFxuICBWaWV3Q29udGV4dFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlcnZpY2VzQnJlYWRjcnVtYkZhY3RvcnkgaW1wbGVtZW50cyBCcmVhZGNydW1iRmFjdG9yeSB7XG4gIHByaXZhdGUgY29udGV4dERhdGE7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlKSB7fVxuXG4gIGFzeW5jIGdldChyb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBjb25zdCB7IGNvbnRleHQsIGNvbnRleHREYXRhIH0gPSByb3V0ZS5zbmFwc2hvdC5kYXRhO1xuICAgIGNvbnN0IHsgcm91dGVDb25maWcgfSA9IHJvdXRlLnNuYXBzaG90O1xuXG4gICAgdGhpcy5jb250ZXh0RGF0YSA9IGNvbnRleHREYXRhIHx8IHRoaXMuY29udGV4dERhdGE7XG5cbiAgICBpZiAoXG4gICAgICAoY29udGV4dCA9PT0gVmlld0NvbnRleHQuU2VydmljZSB8fCAocm91dGVDb25maWcgYXMgYW55KT8uY29udGV4dCA9PT0gVmlld0NvbnRleHQuU2VydmljZSkgJiZcbiAgICAgICEhdGhpcy5jb250ZXh0RGF0YVxuICAgICkge1xuICAgICAgY29uc3Qgc2VydmljZU1PID0gKGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5kZXRhaWwodGhpcy5jb250ZXh0RGF0YSwgeyB3aXRoUGFyZW50czogdHJ1ZSB9KSk/LmRhdGE7XG4gICAgICBjb25zdCBicmVhZGNydW1iOiBCcmVhZGNydW1iID0geyBpdGVtczogW10gfTtcbiAgICAgIGNvbnN0IGJyZWFkY3J1bWJJdGVtczogQnJlYWRjcnVtYkl0ZW1bXSA9IFtdO1xuICAgICAgY29uc3QgZGV2aWNlOiBJU291cmNlID0gc2VydmljZU1PPy5hZGRpdGlvblBhcmVudHM/LnJlZmVyZW5jZXNbMF0/Lm1hbmFnZWRPYmplY3Q7XG5cbiAgICAgIGlmIChkZXZpY2UpIHtcbiAgICAgICAgYnJlYWRjcnVtYkl0ZW1zLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBkZXZpY2UubmFtZSxcbiAgICAgICAgICBwYXRoOiBgL2RldmljZS8ke2RldmljZS5pZH1gXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhZGNydW1iSXRlbXMucHVzaCh7XG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1NlcnZpY2VzJyksXG4gICAgICAgICAgcGF0aDogYC9kZXZpY2UvJHtkZXZpY2UuaWR9L3NlcnZpY2VzYFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWRjcnVtYkl0ZW1zLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBzZXJ2aWNlTU8ubmFtZVxuICAgICAgICB9IGFzIEJyZWFkY3J1bWJJdGVtKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWRjcnVtYi5pdGVtcyA9IGJyZWFkY3J1bWJJdGVtcztcbiAgICAgIHJldHVybiBicmVhZGNydW1iO1xuICAgIH1cbiAgfVxufVxuIl19