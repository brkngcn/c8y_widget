import { getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';
import { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { entries } from 'lodash-es';
import { StatusCellRendererComponent } from './status.cell-renderer.component';
export class StatusGridColumn extends BaseDeviceGridColumn {
    constructor(statusOptionsService, initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'status';
        this.path = 'status';
        this.header = gettext('Status');
        this.dataType = "icon" /* Icon */;
        this.cellRendererComponent = StatusCellRendererComponent;
        this.filterable = true;
        this.resizable = false;
        this.filteringConfig = {
            fields: [
                {
                    key: 'statusOptions',
                    type: 'object',
                    templateOptions: {
                        label: gettext('Show devices with status')
                    },
                    fieldGroup: [
                        ...statusOptionsService.options.map(option => ({
                            key: option.key,
                            type: 'switch',
                            templateOptions: {
                                label: option.label
                            }
                        }))
                    ]
                },
                ...getBasicInputArrayFormFieldConfig({
                    key: 'custom',
                    label: gettext('or filter by custom status'),
                    addText: gettext('Add next`custom status`'),
                    tooltip: gettext('Use * as a wildcard character'),
                    placeholder: gettext('restarting`SERVICE_STATUS`'),
                    optional: true
                })
            ],
            getFilter(model) {
                const filter = {};
                filter.status = {
                    __in: [
                        ...entries((model === null || model === void 0 ? void 0 : model.statusOptions) || {})
                            .filter(([_, value]) => !!value)
                            .map(([key, _]) => key),
                        ...model.custom.filter(c => !!c)
                    ]
                };
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmdyaWQtY29sdW1uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvc2VydmljZXMtZGV2aWNlLXRhYi9jb2x1bW5zL3N0YXR1cy5ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsaUNBQWlDLEVBQ2pDLE9BQU8sRUFDUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0UsTUFBTSxPQUFPLGdCQUFpQixTQUFRLG9CQUFvQjtJQUN4RCxZQUFZLG9CQUEwQyxFQUFFLG1CQUFrQztRQUN4RixLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxvQkFBc0IsQ0FBQztRQUNwQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsMkJBQTJCLENBQUM7UUFDekQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsR0FBRyxFQUFFLGVBQWU7b0JBQ3BCLElBQUksRUFBRSxRQUFRO29CQUNkLGVBQWUsRUFBRTt3QkFDZixLQUFLLEVBQUUsT0FBTyxDQUFDLDBCQUEwQixDQUFDO3FCQUMzQztvQkFDRCxVQUFVLEVBQUU7d0JBQ1YsR0FBRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDN0MsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHOzRCQUNmLElBQUksRUFBRSxRQUFROzRCQUNkLGVBQWUsRUFBRTtnQ0FDZixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7NkJBQ3BCO3lCQUNGLENBQUMsQ0FBQztxQkFDSjtpQkFDRjtnQkFDRCxHQUFHLGlDQUFpQyxDQUFDO29CQUNuQyxHQUFHLEVBQUUsUUFBUTtvQkFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLDRCQUE0QixDQUFDO29CQUM1QyxPQUFPLEVBQUUsT0FBTyxDQUFDLHlCQUF5QixDQUFDO29CQUMzQyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO29CQUNqRCxXQUFXLEVBQUUsT0FBTyxDQUFDLDRCQUE0QixDQUFDO29CQUNsRCxRQUFRLEVBQUUsSUFBSTtpQkFDZixDQUFDO2FBQ0g7WUFDRCxTQUFTLENBQUMsS0FBSztnQkFDYixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7Z0JBQ3ZCLE1BQU0sQ0FBQyxNQUFNLEdBQUc7b0JBQ2QsSUFBSSxFQUFFO3dCQUNKLEdBQUcsT0FBTyxDQUFDLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGFBQWEsS0FBSSxFQUFFLENBQUM7NkJBQ25DLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOzZCQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO3dCQUN6QixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDakM7aUJBQ0YsQ0FBQztnQkFDRixPQUFPLE1BQU0sQ0FBQztZQUNoQixDQUFDO1NBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDMUMsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbHVtbkNvbmZpZyxcbiAgQ29sdW1uRGF0YVR5cGUsXG4gIGdldEJhc2ljSW5wdXRBcnJheUZvcm1GaWVsZENvbmZpZyxcbiAgZ2V0dGV4dFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJhc2VEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBlbnRyaWVzIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFN0YXR1c09wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc3RhdHVzLW9wdGlvbnMnO1xuaW1wb3J0IHsgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9zdGF0dXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuXG5leHBvcnQgY2xhc3MgU3RhdHVzR3JpZENvbHVtbiBleHRlbmRzIEJhc2VEZXZpY2VHcmlkQ29sdW1uIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzT3B0aW9uc1NlcnZpY2U6IFN0YXR1c09wdGlvbnNTZXJ2aWNlLCBpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG4gICAgdGhpcy5uYW1lID0gJ3N0YXR1cyc7XG4gICAgdGhpcy5wYXRoID0gJ3N0YXR1cyc7XG4gICAgdGhpcy5oZWFkZXIgPSBnZXR0ZXh0KCdTdGF0dXMnKTtcbiAgICB0aGlzLmRhdGFUeXBlID0gQ29sdW1uRGF0YVR5cGUuSWNvbjtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudDtcbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuICAgIHRoaXMucmVzaXphYmxlID0gZmFsc2U7XG5cbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHtcbiAgICAgIGZpZWxkczogW1xuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnc3RhdHVzT3B0aW9ucycsXG4gICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU2hvdyBkZXZpY2VzIHdpdGggc3RhdHVzJylcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpZWxkR3JvdXA6IFtcbiAgICAgICAgICAgIC4uLnN0YXR1c09wdGlvbnNTZXJ2aWNlLm9wdGlvbnMubWFwKG9wdGlvbiA9PiAoe1xuICAgICAgICAgICAgICBrZXk6IG9wdGlvbi5rZXksXG4gICAgICAgICAgICAgIHR5cGU6ICdzd2l0Y2gnLFxuICAgICAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uLmxhYmVsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgLi4uZ2V0QmFzaWNJbnB1dEFycmF5Rm9ybUZpZWxkQ29uZmlnKHtcbiAgICAgICAgICBrZXk6ICdjdXN0b20nLFxuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdvciBmaWx0ZXIgYnkgY3VzdG9tIHN0YXR1cycpLFxuICAgICAgICAgIGFkZFRleHQ6IGdldHRleHQoJ0FkZCBuZXh0YGN1c3RvbSBzdGF0dXNgJyksXG4gICAgICAgICAgdG9vbHRpcDogZ2V0dGV4dCgnVXNlICogYXMgYSB3aWxkY2FyZCBjaGFyYWN0ZXInKSxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogZ2V0dGV4dCgncmVzdGFydGluZ2BTRVJWSUNFX1NUQVRVU2AnKSxcbiAgICAgICAgICBvcHRpb25hbDogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgXSxcbiAgICAgIGdldEZpbHRlcihtb2RlbCkge1xuICAgICAgICBjb25zdCBmaWx0ZXI6IGFueSA9IHt9O1xuICAgICAgICBmaWx0ZXIuc3RhdHVzID0ge1xuICAgICAgICAgIF9faW46IFtcbiAgICAgICAgICAgIC4uLmVudHJpZXMobW9kZWw/LnN0YXR1c09wdGlvbnMgfHwge30pXG4gICAgICAgICAgICAgIC5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+ICEhdmFsdWUpXG4gICAgICAgICAgICAgIC5tYXAoKFtrZXksIF9dKSA9PiBrZXkpLFxuICAgICAgICAgICAgLi4ubW9kZWwuY3VzdG9tLmZpbHRlcihjID0+ICEhYylcbiAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc29ydGFibGUgPSB0cnVlO1xuICAgIHRoaXMuc29ydGluZ0NvbmZpZyA9IHtcbiAgICAgIHBhdGhTb3J0aW5nQ29uZmlnczogW3sgcGF0aDogdGhpcy5wYXRoIH1dXG4gICAgfTtcbiAgfVxufVxuIl19