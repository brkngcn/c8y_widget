import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { DeviceRegistrationService, InventoryService } from '@c8y/client';
import { AppStateService, GainsightService, gettext } from '@c8y/ngx-components';
import { head } from 'lodash-es';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
export class SensorPhoneService {
    constructor(ui, inventoryService, deviceRegistrationService, gainsightService) {
        this.ui = ui;
        this.inventoryService = inventoryService;
        this.deviceRegistrationService = deviceRegistrationService;
        this.gainsightService = gainsightService;
        this.HTTP_STATUS_CODE = {
            OK: 200,
            CREATED: 201
        };
        this.PHONE_GROUP_FRAGMENT = 'c8y_IsSensorPhoneGroup';
        this.PHONE_GROUP_NAME = gettext('Phones');
        this.ui.currentTenant.subscribe(data => {
            if (data) {
                this.domainName = data.domainName;
                this.tenantId = data.name;
            }
        });
    }
    getHost() {
        return this.domainName.substring(this.domainName.indexOf('.') + 1);
    }
    getTenantName() {
        return this.domainName.split('.')[0];
    }
    getTenantId() {
        return this.tenantId;
    }
    checkPhoneGroupExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, res } = yield this.inventoryService.list({
                fragmentType: this.PHONE_GROUP_FRAGMENT
            });
            if (data && res && res.status === this.HTTP_STATUS_CODE.OK) {
                return head(data);
            }
            return null;
        });
    }
    addPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.checkPhoneGroupExists();
            if (group) {
                return group;
            }
            return yield this.createPhoneGroup();
        });
    }
    createPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const newPhoneGroup = {
                c8y_Global: {},
                c8y_IsDeviceGroup: {},
                type: 'c8y_DeviceGroup',
                name: this.PHONE_GROUP_NAME,
                [this.PHONE_GROUP_FRAGMENT]: {}
            };
            const { data, res } = yield this.inventoryService.create(newPhoneGroup);
            if (data && res && res.status === this.HTTP_STATUS_CODE.CREATED) {
                return data;
            }
            return null;
        });
    }
    generateRegistrationData(deviceId) {
        const res = 'c8y://' + this.getTenantName() + '.' + this.getHost() + '/?deviceId=' + deviceId;
        return res;
    }
    createPhoneRegistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.addPhoneGroup();
            const device = { id: deviceId, groupId: group.id };
            const { res } = yield this.deviceRegistrationService.create(device);
            if (res.status !== this.HTTP_STATUS_CODE.CREATED) {
                throw res;
            }
        });
    }
    acceptPhoneRegistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { res } = yield this.deviceRegistrationService.accept(deviceId);
            if (res.status !== this.HTTP_STATUS_CODE.OK) {
                throw res;
            }
            this.gainsightService.triggerEvent('connectSmartphone:Success');
        });
    }
}
SensorPhoneService.ɵfac = function SensorPhoneService_Factory(t) { return new (t || SensorPhoneService)(ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.DeviceRegistrationService), ɵngcc0.ɵɵinject(ɵngcc1.GainsightService)); };
SensorPhoneService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SensorPhoneService, factory: SensorPhoneService.ɵfac });
SensorPhoneService.ctorParameters = () => [
    { type: AppStateService },
    { type: InventoryService },
    { type: DeviceRegistrationService },
    { type: GainsightService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SensorPhoneService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AppStateService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc2.DeviceRegistrationService }, { type: ɵngcc1.GainsightService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,