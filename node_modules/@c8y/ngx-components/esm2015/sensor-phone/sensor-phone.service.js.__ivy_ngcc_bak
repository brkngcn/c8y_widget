import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { DeviceRegistrationService, InventoryService } from '@c8y/client';
import { AppStateService, GainsightService, gettext } from '@c8y/ngx-components';
import { head } from 'lodash-es';
export class SensorPhoneService {
    constructor(ui, inventoryService, deviceRegistrationService, gainsightService) {
        this.ui = ui;
        this.inventoryService = inventoryService;
        this.deviceRegistrationService = deviceRegistrationService;
        this.gainsightService = gainsightService;
        this.HTTP_STATUS_CODE = {
            OK: 200,
            CREATED: 201
        };
        this.PHONE_GROUP_FRAGMENT = 'c8y_IsSensorPhoneGroup';
        this.PHONE_GROUP_NAME = gettext('Phones');
        this.ui.currentTenant.subscribe(data => {
            if (data) {
                this.domainName = data.domainName;
                this.tenantId = data.name;
            }
        });
    }
    getHost() {
        return this.domainName.substring(this.domainName.indexOf('.') + 1);
    }
    getTenantName() {
        return this.domainName.split('.')[0];
    }
    getTenantId() {
        return this.tenantId;
    }
    checkPhoneGroupExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, res } = yield this.inventoryService.list({
                fragmentType: this.PHONE_GROUP_FRAGMENT
            });
            if (data && res && res.status === this.HTTP_STATUS_CODE.OK) {
                return head(data);
            }
            return null;
        });
    }
    addPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.checkPhoneGroupExists();
            if (group) {
                return group;
            }
            return yield this.createPhoneGroup();
        });
    }
    createPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const newPhoneGroup = {
                c8y_Global: {},
                c8y_IsDeviceGroup: {},
                type: 'c8y_DeviceGroup',
                name: this.PHONE_GROUP_NAME,
                [this.PHONE_GROUP_FRAGMENT]: {}
            };
            const { data, res } = yield this.inventoryService.create(newPhoneGroup);
            if (data && res && res.status === this.HTTP_STATUS_CODE.CREATED) {
                return data;
            }
            return null;
        });
    }
    generateRegistrationData(deviceId) {
        const res = 'c8y://' + this.getTenantName() + '.' + this.getHost() + '/?deviceId=' + deviceId;
        return res;
    }
    createPhoneRegistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.addPhoneGroup();
            const device = { id: deviceId, groupId: group.id };
            const { res } = yield this.deviceRegistrationService.create(device);
            if (res.status !== this.HTTP_STATUS_CODE.CREATED) {
                throw res;
            }
        });
    }
    acceptPhoneRegistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { res } = yield this.deviceRegistrationService.accept(deviceId);
            if (res.status !== this.HTTP_STATUS_CODE.OK) {
                throw res;
            }
            this.gainsightService.triggerEvent('connectSmartphone:Success');
        });
    }
}
SensorPhoneService.decorators = [
    { type: Injectable }
];
SensorPhoneService.ctorParameters = () => [
    { type: AppStateService },
    { type: InventoryService },
    { type: DeviceRegistrationService },
    { type: GainsightService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc29yLXBob25lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zZW5zb3ItcGhvbmUvc2Vuc29yLXBob25lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHlCQUF5QixFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUdqQyxNQUFNLE9BQU8sa0JBQWtCO0lBVTdCLFlBQ1UsRUFBbUIsRUFDbkIsZ0JBQWtDLEVBQ2xDLHlCQUFvRCxFQUNwRCxnQkFBa0M7UUFIbEMsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBQ3BELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFibkMscUJBQWdCLEdBQUc7WUFDMUIsRUFBRSxFQUFFLEdBQUc7WUFDUCxPQUFPLEVBQUUsR0FBRztTQUNiLENBQUM7UUFHTSx5QkFBb0IsR0FBRyx3QkFBd0IsQ0FBQztRQUN2QyxxQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFRcEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLElBQUksSUFBSSxFQUFFO2dCQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQzNCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFD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TSxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUU7Z0JBQzNDLE1BQU0sR0FBRyxDQUFDO2FBQ1g7WUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDbEUsQ0FBQztLQUFBOzs7WUE1RkYsVUFBVTs7O1lBSEYsZUFBZTtZQURZLGdCQUFnQjtZQUEzQyx5QkFBeUI7WUFDUixnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlLCBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlLCBHYWluc2lnaHRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBoZWFkIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlbnNvclBob25lU2VydmljZSB7XG4gIHJlYWRvbmx5IEhUVFBfU1RBVFVTX0NPREUgPSB7XG4gICAgT0s6IDIwMCxcbiAgICBDUkVBVEVEOiAyMDFcbiAgfTtcbiAgcHJpdmF0ZSBkb21haW5OYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgdGVuYW50SWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBQSE9ORV9HUk9VUF9GUkFHTUVOVCA9ICdjOHlfSXNTZW5zb3JQaG9uZUdyb3VwJztcbiAgcHJpdmF0ZSByZWFkb25seSBQSE9ORV9HUk9VUF9OQU1FID0gZ2V0dGV4dCgnUGhvbmVzJyk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB1aTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGRldmljZVJlZ2lzdHJhdGlvblNlcnZpY2U6IERldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBnYWluc2lnaHRTZXJ2aWNlOiBHYWluc2lnaHRTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMudWkuY3VycmVudFRlbmFudC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICB0aGlzLmRvbWFpbk5hbWUgPSBkYXRhLmRvbWFpbk5hbWU7XG4gICAgICAgIHRoaXMudGVuYW50SWQgPSBkYXRhLm5hbWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXRIb3N0KCkge1xuICAgIHJldHVybiB0aGlzLmRvbWFpbk5hbWUuc3Vic3RyaW5nKHRoaXMuZG9tYWluTmFtZS5pbmRleE9mKCcuJykgKyAxKTtcbiAgfVxuXG4gIGdldFRlbmFudE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluTmFtZS5zcGxpdCgnLicpWzBdO1xuICB9XG5cbiAgZ2V0VGVuYW50SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVuYW50SWQ7XG4gIH1cblxuICBhc3luYyBjaGVja1Bob25lR3JvdXBFeGlzdHMoKSB7XG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5saXN0KHtcbiAgICAgIGZyYWdtZW50VHlwZTogdGhpcy5QSE9ORV9HUk9VUF9GUkFHTUVOVFxuICAgIH0pO1xuICAgIGlmIChkYXRhICYmIHJlcyAmJiByZXMuc3RhdHVzID09PSB0aGlzLkhUVFBfU1RBVFVTX0NPREUuT0spIHtcbiAgICAgIHJldHVybiBoZWFkKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGFkZFBob25lR3JvdXAoKSB7XG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCB0aGlzLmNoZWNrUGhvbmVHcm91cEV4aXN0cygpO1xuICAgIGlmIChncm91cCkge1xuICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jcmVhdGVQaG9uZUdyb3VwKCk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVQaG9uZUdyb3VwKCkge1xuICAgIGNvbnN0IG5ld1Bob25lR3JvdXAgPSB7XG4gICAgICBjOHlfR2xvYmFsOiB7fSxcbiAgICAgIGM4eV9Jc0RldmljZUdyb3VwOiB7fSxcbiAgICAgIHR5cGU6ICdjOHlfRGV2aWNlR3JvdXAnLFxuICAgICAgbmFtZTogdGhpcy5QSE9ORV9HUk9VUF9OQU1FLFxuICAgICAgW3RoaXMuUEhPTkVfR1JPVVBfRlJBR01FTlRdOiB7fVxuICAgIH07XG5cbiAgICBjb25zdCB7IGRhdGEsIHJlcyB9ID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmNyZWF0ZShuZXdQaG9uZUdyb3VwKTtcbiAgICBpZiAoZGF0YSAmJiByZXMgJiYgcmVzLnN0YXR1cyA9PT0gdGhpcy5IVFRQX1NUQVRVU19DT0RFLkNSRUFURUQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdlbmVyYXRlUmVnaXN0cmF0aW9uRGF0YShkZXZpY2VJZCkge1xuICAgIGNvbnN0IHJlcyA9ICdjOHk6Ly8nICsgdGhpcy5nZXRUZW5hbnROYW1lKCkgKyAnLicgKyB0aGlzLmdldEhvc3QoKSArICcvP2RldmljZUlkPScgKyBkZXZpY2VJZDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlUGhvbmVSZWdpc3RyYXRpb25SZXF1ZXN0KGRldmljZUlkKSB7XG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCB0aGlzLmFkZFBob25lR3JvdXAoKTtcbiAgICBjb25zdCBkZXZpY2UgPSB7IGlkOiBkZXZpY2VJZCwgZ3JvdXBJZDogZ3JvdXAuaWQgfTtcblxuICAgIGNvbnN0IHsgcmVzIH0gPSBhd2FpdCB0aGlzLmRldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UuY3JlYXRlKGRldmljZSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT09IHRoaXMuSFRUUF9TVEFUVVNfQ09ERS5DUkVBVEVEKSB7XG4gICAgICB0aHJvdyByZXM7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYWNjZXB0UGhvbmVSZWdpc3RyYXRpb25SZXF1ZXN0KGRldmljZUlkKSB7XG4gICAgY29uc3QgeyByZXMgfSA9IGF3YWl0IHRoaXMuZGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZS5hY2NlcHQoZGV2aWNlSWQpO1xuICAgIGlmIChyZXMuc3RhdHVzICE9PSB0aGlzLkhUVFBfU1RBVFVTX0NPREUuT0spIHtcbiAgICAgIHRocm93IHJlcztcbiAgICB9XG4gICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnRyaWdnZXJFdmVudCgnY29ubmVjdFNtYXJ0cGhvbmU6U3VjY2VzcycpO1xuICB9XG59XG4iXX0=