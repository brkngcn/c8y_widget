import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { DeviceGridService } from '@c8y/ngx-components/device-grid';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AddSmartGroupComponent } from './add-smart-group.component';
export class DeviceListComponent {
    constructor(deviceGridService, bsModalService) {
        this.deviceGridService = deviceGridService;
        this.bsModalService = bsModalService;
        this.GRID_CONFIG_KEY = 'device-grid-all';
        this.count$ = this.deviceGridService.getTotal({});
    }
    createSmartGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                configKey: this.GRID_CONFIG_KEY,
                deviceQuery: this.deviceQueryStringOutput
            };
            this.bsModalService.show(AddSmartGroupComponent, {
                class: 'modal-sm',
                initialState
            });
        });
    }
}
DeviceListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-list',
                template: "<c8y-title>\n  {{ 'All devices' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Create smart group' | translate }}\"\n    (click)=\"createSmartGroup()\"\n  >\n    <i c8yIcon=\"c8y-group-smart\"></i>\n    {{ 'Create smart group' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#viewing-devices\"></c8y-help>\n\n<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [infiniteScroll]=\"(count$ | async) === undefined ? 'auto' : undefined\"\n    [columnsConfigKey]=\"GRID_CONFIG_KEY\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n"
            },] }
];
DeviceListComponent.ctorParameters = () => [
    { type: DeviceGridService },
    { type: BsModalService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLWxpc3QvZGV2aWNlLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU1yRSxNQUFNLE9BQU8sbUJBQW1CO0lBTzlCLFlBQ1ksaUJBQW9DLEVBQ3RDLGNBQThCO1FBRDVCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDdEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBUi9CLG9CQUFlLEdBQUcsaUJBQWlCLENBQUM7UUFFN0MsV0FBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFPMUMsQ0FBQztJQUVFLGdCQUFnQjs7WUFDcEIsTUFBTSxZQUFZLEdBQUc7Z0JBQ25CLFNBQVMsRUFBRSxJQUFJLENBQUMsZUFBZTtnQkFDL0IsV0FBVyxFQUFFLElBQUksQ0FBQyx1QkFBdUI7YUFDMUMsQ0FBQztZQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFO2dCQUMvQyxLQUFLLEVBQUUsVUFBVTtnQkFDakIsWUFBWTthQUNiLENBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTs7O1lBMUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixtdUJBQTJDO2FBQzVDOzs7WUFQUSxpQkFBaUI7WUFDakIsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZFNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBBZGRTbWFydEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9hZGQtc21hcnQtZ3JvdXAuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWRldmljZS1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RldmljZS1saXN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VMaXN0Q29tcG9uZW50IHtcbiAgcmVhZG9ubHkgR1JJRF9DT05GSUdfS0VZID0gJ2RldmljZS1ncmlkLWFsbCc7XG5cbiAgY291bnQkID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXRUb3RhbCh7fSk7XG5cbiAgZGV2aWNlUXVlcnlTdHJpbmdPdXRwdXQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgZGV2aWNlR3JpZFNlcnZpY2U6IERldmljZUdyaWRTZXJ2aWNlLFxuICAgIHByaXZhdGUgYnNNb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBjcmVhdGVTbWFydEdyb3VwKCkge1xuICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgIGNvbmZpZ0tleTogdGhpcy5HUklEX0NPTkZJR19LRVksXG4gICAgICBkZXZpY2VRdWVyeTogdGhpcy5kZXZpY2VRdWVyeVN0cmluZ091dHB1dFxuICAgIH07XG5cbiAgICB0aGlzLmJzTW9kYWxTZXJ2aWNlLnNob3coQWRkU21hcnRHcm91cENvbXBvbmVudCwge1xuICAgICAgY2xhc3M6ICdtb2RhbC1zbScsXG4gICAgICBpbml0aWFsU3RhdGVcbiAgICB9KTtcbiAgfVxufVxuIl19