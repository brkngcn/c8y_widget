import { Directive, ElementRef, Optional, Renderer2 } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '@angular/forms';
export class RequiredInputPlaceholderDirective {
    constructor(el, renderer, translationService, ngControl) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.ngControl = ngControl;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    ngAfterViewChecked() {
        var _a, _b, _c, _d, _e, _f, _g;
        if (((_b = (_a = this.el) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.required) !== undefined || ((_c = this.ngControl) === null || _c === void 0 ? void 0 : _c.control)) {
            const isRequired = ((_e = (_d = this.el) === null || _d === void 0 ? void 0 : _d.nativeElement) === null || _e === void 0 ? void 0 : _e.required) ||
                ((_g = (_f = this.ngControl) === null || _f === void 0 ? void 0 : _f.control) === null || _g === void 0 ? void 0 : _g.hasValidator(Validators.required));
            const willSetRequiredHint = isRequired && !this.shouldSkipRequiredHint;
            const placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== willSetRequiredHint) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, willSetRequiredHint));
            }
        }
    }
    getTextForPlaceholder(placeholder = '', required = false) {
        this.req = required;
        const requiredText = `(${this.translationService.instant(gettext('required'))})`;
        const requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? `${placeholder} ${requiredText}` : requiredText;
    }
    updatePlaceholder(placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    }
}
RequiredInputPlaceholderDirective.ɵfac = function RequiredInputPlaceholderDirective_Factory(t) { return new (t || RequiredInputPlaceholderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 8)); };
RequiredInputPlaceholderDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: RequiredInputPlaceholderDirective, selectors: [["input", "required", ""], ["input", "formControlName", ""]] });
RequiredInputPlaceholderDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TranslateService },
    { type: NgControl, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RequiredInputPlaceholderDirective, [{
        type: Directive,
        args: [{
                selector: 'input[required], input[formControlName]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.TranslateService }, { type: ɵngcc2.NgControl, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL3JlcXVpcmVkLWlucHV0LXBsYWNlaG9sZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9CLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUsxQyxNQUFNLE9BQU8saUNBQWlDO0FBQUcsSUFJL0MsWUFDVSxFQUFjLEVBQ2QsUUFBbUIsRUFDbkIsa0JBQW9DLEVBQ3hCLFNBQW9CO0FBQ3pDLFFBSlMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ3BCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBa0I7QUFBQyxRQUN6QixjQUFTLEdBQVQsU0FBUyxDQUFXO0FBQzVDLFFBUlUsMkJBQXNCLEdBQVksS0FBSyxDQUFDO0FBQ2xELFFBUUksSUFBSSxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNwRyxJQUFFLENBQUM7QUFDSCxJQUNFLGtCQUFrQjtBQUFLO0FBQ1MsUUFBOUIsSUFBSSxDQUFBLE1BQUEsTUFBQSxJQUFJLENBQUMsRUFBRSwwQ0FBRSxhQUFhLDBDQUFFLFFBQVEsTUFBSyxTQUFTLEtBQUksTUFBQSxJQUFJLENBQUMsU0FBUywwQ0FBRSxPQUFPLENBQUEsRUFBRTtBQUNuRixZQUFNLE1BQU0sVUFBVSxHQUNkLENBQUEsTUFBQSxNQUFBLElBQUksQ0FBQyxFQUFFLDBDQUFFLGFBQWEsMENBQUUsUUFBUTtBQUN2QyxpQkFBTyxNQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsT0FBTywwQ0FBRSxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUM7QUFDbkUsWUFBTSxNQUFNLG1CQUFtQixHQUFHLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztBQUM3RSxZQUFNLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztBQUM1RCxZQUNNLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxtQkFBbUIsRUFBRTtBQUNoRixnQkFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7QUFDN0YsYUFBTztBQUNQLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLHFCQUFxQixDQUFDLFdBQVcsR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEtBQUs7QUFDbEUsUUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztBQUN4QixRQUFJLE1BQU0sWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ3JGLFFBQUksTUFBTSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3BFLFFBQUksSUFBSSxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7QUFDL0IsWUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEUsU0FBSztBQUNMLFFBQUksSUFBSSxpQkFBaUIsS0FBSyxDQUFDLEVBQUU7QUFDakMsWUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDbkIsWUFBTSxPQUFPLFdBQVcsQ0FBQztBQUN6QixTQUFLO0FBQ0wsUUFBSSxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLElBQUksWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUNoRixJQUFFLENBQUM7QUFDSCxJQUNVLGlCQUFpQixDQUFDLFdBQVc7QUFDdkMsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEYsUUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSDs2REFsREMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSx5Q0FBeUMsY0FDcEQ7dU1BQ0k7QUFBQztBQUEyRCxZQVIzQixVQUFVO0FBQUksWUFBUSxTQUFTO0FBQUksWUFFaEUsZ0JBQWdCO0FBQUksWUFEcEIsU0FBUyx1QkFlYixRQUFRO0FBQU07Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE9wdGlvbmFsLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtyZXF1aXJlZF0sIGlucHV0W2Zvcm1Db250cm9sTmFtZV0nXG59KVxuZXhwb3J0IGNsYXNzIFJlcXVpcmVkSW5wdXRQbGFjZWhvbGRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQge1xuICBwcml2YXRlIHNob3VsZFNraXBSZXF1aXJlZEhpbnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBwcml2YXRlIHJlcTogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuZ0NvbnRyb2w6IE5nQ29udHJvbFxuICApIHtcbiAgICB0aGlzLnNob3VsZFNraXBSZXF1aXJlZEhpbnQgPSAhIXRoaXMuZWwubmF0aXZlRWxlbWVudC5jbG9zZXN0KCdbcGxhY2Vob2xkZXItbm8tcmVxdWlyZWQtaGludF0nKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lbD8ubmF0aXZlRWxlbWVudD8ucmVxdWlyZWQgIT09IHVuZGVmaW5lZCB8fCB0aGlzLm5nQ29udHJvbD8uY29udHJvbCkge1xuICAgICAgY29uc3QgaXNSZXF1aXJlZCA9XG4gICAgICAgIHRoaXMuZWw/Lm5hdGl2ZUVsZW1lbnQ/LnJlcXVpcmVkIHx8XG4gICAgICAgIHRoaXMubmdDb250cm9sPy5jb250cm9sPy5oYXNWYWxpZGF0b3IoVmFsaWRhdG9ycy5yZXF1aXJlZCk7XG4gICAgICBjb25zdCB3aWxsU2V0UmVxdWlyZWRIaW50ID0gaXNSZXF1aXJlZCAmJiAhdGhpcy5zaG91bGRTa2lwUmVxdWlyZWRIaW50O1xuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGxhY2Vob2xkZXI7XG5cbiAgICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyICE9PSBwbGFjZWhvbGRlciB8fCB0aGlzLnJlcSAhPT0gd2lsbFNldFJlcXVpcmVkSGludCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVBsYWNlaG9sZGVyKHRoaXMuZ2V0VGV4dEZvclBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyLCB3aWxsU2V0UmVxdWlyZWRIaW50KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZXh0Rm9yUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIgPSAnJywgcmVxdWlyZWQgPSBmYWxzZSkge1xuICAgIHRoaXMucmVxID0gcmVxdWlyZWQ7XG4gICAgY29uc3QgcmVxdWlyZWRUZXh0ID0gYCgke3RoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoZ2V0dGV4dCgncmVxdWlyZWQnKSl9KWA7XG4gICAgY29uc3QgcmVxdWlyZWRUZXh0SW5kZXggPSBwbGFjZWhvbGRlci5sYXN0SW5kZXhPZihyZXF1aXJlZFRleHQpO1xuICAgIGlmIChyZXF1aXJlZFRleHRJbmRleCA+IDApIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXIuc2xpY2UoMCwgcmVxdWlyZWRUZXh0SW5kZXggLSAxKTtcbiAgICB9XG4gICAgaWYgKHJlcXVpcmVkVGV4dEluZGV4ID09PSAwKSB7XG4gICAgICBwbGFjZWhvbGRlciA9ICcnO1xuICAgIH1cbiAgICBpZiAoIXJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIHJldHVybiBwbGFjZWhvbGRlci50cmltKCkgPyBgJHtwbGFjZWhvbGRlcn0gJHtyZXF1aXJlZFRleHR9YCA6IHJlcXVpcmVkVGV4dDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyKTtcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gIH1cbn1cbiJdfQ==