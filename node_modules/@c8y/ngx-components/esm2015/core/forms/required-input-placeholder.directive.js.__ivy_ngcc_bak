import { Directive, ElementRef, Optional, Renderer2 } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
export class RequiredInputPlaceholderDirective {
    constructor(el, renderer, translationService, ngControl) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.ngControl = ngControl;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    ngAfterViewChecked() {
        var _a, _b, _c, _d, _e, _f, _g;
        if (((_b = (_a = this.el) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.required) !== undefined || ((_c = this.ngControl) === null || _c === void 0 ? void 0 : _c.control)) {
            const isRequired = ((_e = (_d = this.el) === null || _d === void 0 ? void 0 : _d.nativeElement) === null || _e === void 0 ? void 0 : _e.required) ||
                ((_g = (_f = this.ngControl) === null || _f === void 0 ? void 0 : _f.control) === null || _g === void 0 ? void 0 : _g.hasValidator(Validators.required));
            const willSetRequiredHint = isRequired && !this.shouldSkipRequiredHint;
            const placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== willSetRequiredHint) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, willSetRequiredHint));
            }
        }
    }
    getTextForPlaceholder(placeholder = '', required = false) {
        this.req = required;
        const requiredText = `(${this.translationService.instant(gettext('required'))})`;
        const requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? `${placeholder} ${requiredText}` : requiredText;
    }
    updatePlaceholder(placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    }
}
RequiredInputPlaceholderDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[required], input[formControlName]'
            },] }
];
RequiredInputPlaceholderDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TranslateService },
    { type: NgControl, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9yZXF1aXJlZC1pbnB1dC1wbGFjZWhvbGRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLMUMsTUFBTSxPQUFPLGlDQUFpQztJQUk1QyxZQUNVLEVBQWMsRUFDZCxRQUFtQixFQUNuQixrQkFBb0MsRUFDeEIsU0FBb0I7UUFIaEMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFrQjtRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBUGxDLDJCQUFzQixHQUFZLEtBQUssQ0FBQztRQVM5QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFFRCxrQkFBa0I7O1FBQ2hCLElBQUksQ0FBQSxNQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsMENBQUUsYUFBYSwwQ0FBRSxRQUFRLE1BQUssU0FBUyxLQUFJLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsT0FBTyxDQUFBLEVBQUU7WUFDN0UsTUFBTSxVQUFVLEdBQ2QsQ0FBQSxNQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsMENBQUUsYUFBYSwwQ0FBRSxRQUFRO2lCQUNoQyxNQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsT0FBTywwQ0FBRSxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUM7WUFDN0QsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7WUFDdkUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBRXRELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxtQkFBbUIsRUFBRTtnQkFDeEUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO2FBQ3RGO1NBQ0Y7SUFDSCxDQUFDO0lBRU8scUJBQXFCLENBQUMsV0FBVyxHQUFHLEVBQUUsRUFBRSxRQUFRLEdBQUcsS0FBSztRQUM5RCxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztRQUNwQixNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNqRixNQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEUsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7WUFDekIsV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxpQkFBaUIsS0FBSyxDQUFDLEVBQUU7WUFDM0IsV0FBVyxHQUFHLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPLFdBQVcsQ0FBQztTQUNwQjtRQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQzlFLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxXQUFXO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNqQyxDQUFDOzs7WUFqREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5Q0FBeUM7YUFDcEQ7OztZQVBxQyxVQUFVO1lBQVksU0FBUztZQUU1RCxnQkFBZ0I7WUFEaEIsU0FBUyx1QkFlYixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3Q2hlY2tlZCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPcHRpb25hbCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbcmVxdWlyZWRdLCBpbnB1dFtmb3JtQ29udHJvbE5hbWVdJ1xufSlcbmV4cG9ydCBjbGFzcyBSZXF1aXJlZElucHV0UGxhY2Vob2xkZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkIHtcbiAgcHJpdmF0ZSBzaG91bGRTa2lwUmVxdWlyZWRIaW50OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgcHJpdmF0ZSByZXE6IGJvb2xlYW47XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbmdDb250cm9sOiBOZ0NvbnRyb2xcbiAgKSB7XG4gICAgdGhpcy5zaG91bGRTa2lwUmVxdWlyZWRIaW50ID0gISF0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xvc2VzdCgnW3BsYWNlaG9sZGVyLW5vLXJlcXVpcmVkLWhpbnRdJyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZWw/Lm5hdGl2ZUVsZW1lbnQ/LnJlcXVpcmVkICE9PSB1bmRlZmluZWQgfHwgdGhpcy5uZ0NvbnRyb2w/LmNvbnRyb2wpIHtcbiAgICAgIGNvbnN0IGlzUmVxdWlyZWQgPVxuICAgICAgICB0aGlzLmVsPy5uYXRpdmVFbGVtZW50Py5yZXF1aXJlZCB8fFxuICAgICAgICB0aGlzLm5nQ29udHJvbD8uY29udHJvbD8uaGFzVmFsaWRhdG9yKFZhbGlkYXRvcnMucmVxdWlyZWQpO1xuICAgICAgY29uc3Qgd2lsbFNldFJlcXVpcmVkSGludCA9IGlzUmVxdWlyZWQgJiYgIXRoaXMuc2hvdWxkU2tpcFJlcXVpcmVkSGludDtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBsYWNlaG9sZGVyO1xuXG4gICAgICBpZiAodGhpcy5wbGFjZWhvbGRlciAhPT0gcGxhY2Vob2xkZXIgfHwgdGhpcy5yZXEgIT09IHdpbGxTZXRSZXF1aXJlZEhpbnQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQbGFjZWhvbGRlcih0aGlzLmdldFRleHRGb3JQbGFjZWhvbGRlcihwbGFjZWhvbGRlciwgd2lsbFNldFJlcXVpcmVkSGludCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGV4dEZvclBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyID0gJycsIHJlcXVpcmVkID0gZmFsc2UpIHtcbiAgICB0aGlzLnJlcSA9IHJlcXVpcmVkO1xuICAgIGNvbnN0IHJlcXVpcmVkVGV4dCA9IGAoJHt0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KGdldHRleHQoJ3JlcXVpcmVkJykpfSlgO1xuICAgIGNvbnN0IHJlcXVpcmVkVGV4dEluZGV4ID0gcGxhY2Vob2xkZXIubGFzdEluZGV4T2YocmVxdWlyZWRUZXh0KTtcbiAgICBpZiAocmVxdWlyZWRUZXh0SW5kZXggPiAwKSB7XG4gICAgICBwbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyLnNsaWNlKDAsIHJlcXVpcmVkVGV4dEluZGV4IC0gMSk7XG4gICAgfVxuICAgIGlmIChyZXF1aXJlZFRleHRJbmRleCA9PT0gMCkge1xuICAgICAgcGxhY2Vob2xkZXIgPSAnJztcbiAgICB9XG4gICAgaWYgKCFyZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICByZXR1cm4gcGxhY2Vob2xkZXIudHJpbSgpID8gYCR7cGxhY2Vob2xkZXJ9ICR7cmVxdWlyZWRUZXh0fWAgOiByZXF1aXJlZFRleHQ7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlcik7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICB9XG59XG4iXX0=