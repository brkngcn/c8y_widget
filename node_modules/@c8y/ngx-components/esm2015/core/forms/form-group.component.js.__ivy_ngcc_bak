import { Component, ContentChild, HostBinding, Input } from '@angular/core';
import { FormControlName, NgModel } from '@angular/forms';
import { merge, Subject, timer } from 'rxjs';
import { debounce, filter, takeUntil } from 'rxjs/operators';
import { MessagesComponent } from './messages.component';
/**
 * A form group helps to validate an input of a form element.
 *
 * ## Example:
 *
 * ```html
 *  <c8y-form-group [hasWarning]="user.email.length === 0">
 *   <label translate for="userEmail">Email</label>
 *   <input
 *     id="userEmail"
 *     class="form-control"
 *     type="email"
 *     name="email"
 *     [maxlength]="254"
 *     autocomplete="off"
 *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
 *     [(ngModel)]="user.email"
 *     email
 *     required
 *   >
 *   <c8y-messages>
 *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
 *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
 *   </c8y-messages>
 *  </c8y-form-group>
 * ```
 *
 * @param status The current status could be error, warning or success.
 * @param hasError Set this to true to display a error.
 * @param hasWarning Set this to true to display a warning.
 * @param hasSuccess Set this to true to display a success.
 * @param novalidation Set this to true to disable automatic validation by this component.
 */
export class FormGroupComponent {
    constructor() {
        this.hasError = false;
        this.hasWarning = false;
        this.hasSuccess = false;
        this.novalidation = false;
        this.destroyed$ = new Subject();
        this.VALIDATION_DEBOUNCE_MS = 1000;
    }
    get error() {
        return this.status === 'error' || this.hasError;
    }
    get warning() {
        return this.status === 'warning' || this.hasWarning;
    }
    get success() {
        return this.status === 'success' || this.hasSuccess;
    }
    ngAfterContentInit() {
        this.initNgModel();
        this.initFormControl();
    }
    initNgModel() {
        if (this.model) {
            this.model.valueAccessor.registerOnTouched(() => {
                if (this.model.control && !this.model.control.dirty) {
                    this.model.control.markAsDirty();
                    this.model.control.updateValueAndValidity({ onlySelf: true });
                }
            });
            this.subscribeForChanges(this.model);
        }
    }
    initFormControl() {
        if (this.formControlName) {
            this.subscribeForChanges(this.formControlName.control);
        }
    }
    subscribeForChanges(control) {
        merge(control.valueChanges, control.statusChanges)
            .pipe(filter(() => control.dirty && !this.novalidation), debounce(() => (this.hasError ? timer(10) : timer(this.VALIDATION_DEBOUNCE_MS))), takeUntil(this.destroyed$))
            .subscribe(() => this.update(control));
    }
    update(control) {
        this.hasError = control.status === 'INVALID';
        if (this.customErrorMessage) {
            this.customErrorMessage.changVisibility(control.errors);
        }
        else {
            this.errors = control.errors;
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
FormGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-form-group',
                template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
                host: {
                    class: 'form-group'
                }
            },] }
];
FormGroupComponent.propDecorators = {
    hasError: [{ type: Input }],
    hasWarning: [{ type: Input }],
    hasSuccess: [{ type: Input }],
    novalidation: [{ type: Input }],
    status: [{ type: Input }],
    error: [{ type: HostBinding, args: ['class.has-error',] }],
    warning: [{ type: HostBinding, args: ['class.has-warning',] }],
    success: [{ type: HostBinding, args: ['class.has-success',] }],
    customErrorMessage: [{ type: ContentChild, args: [MessagesComponent, { static: false },] }],
    model: [{ type: ContentChild, args: [NgModel, { static: true },] }],
    formControlName: [{ type: ContentChild, args: [FormControlName, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,