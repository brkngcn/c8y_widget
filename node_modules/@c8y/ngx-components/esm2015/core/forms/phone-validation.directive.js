import { NG_VALIDATORS } from '@angular/forms';
import { Directive } from '@angular/core';
import { parsePhoneNumberFromString } from 'libphonenumber-js/max';
import * as ɵngcc0 from '@angular/core';
export class PhoneValidationDirective {
    validate(control) {
        const valid = this.validateInternationalPhoneNumber(control);
        return valid ? null : { internationalPhoneNumber: true };
    }
    validateInternationalPhoneNumber(control) {
        let numberValid;
        try {
            const phoneNumber = parsePhoneNumberFromString(control.value);
            numberValid = phoneNumber.isValid();
            if (numberValid && control.value !== phoneNumber.format('E.164')) {
                control.setValue(phoneNumber.format('E.164'), {
                    emitEvent: false,
                    emitModelToViewChange: false
                });
            }
        }
        catch (e) {
            numberValid = !control.value;
        }
        return numberValid;
    }
}
PhoneValidationDirective.ɵfac = function PhoneValidationDirective_Factory(t) { return new (t || PhoneValidationDirective)(); };
PhoneValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PhoneValidationDirective, selectors: [["", "c8yPhoneValidation", ""]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: PhoneValidationDirective, multi: true }])] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PhoneValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yPhoneValidation]',
                providers: [{ provide: NG_VALIDATORS, useExisting: PhoneValidationDirective, multi: true }]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGhvbmUtdmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZm9ybXMvcGhvbmUtdmFsaWRhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBOEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQU1uRSxNQUFNLE9BQU8sd0JBQXdCO0FBQUcsSUFDdEMsUUFBUSxDQUFDLE9BQXdCO0FBQUksUUFDbkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pFLFFBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUM3RCxJQUFFLENBQUM7QUFDSCxJQUNVLGdDQUFnQyxDQUFDLE9BQXdCO0FBQ25FLFFBQUksSUFBSSxXQUFXLENBQUM7QUFDcEIsUUFBSSxJQUFJO0FBQ1IsWUFBTSxNQUFNLFdBQVcsR0FBRywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEUsWUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzFDLFlBQU0sSUFBSSxXQUFXLElBQUksT0FBTyxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3hFLGdCQUFRLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN0RCxvQkFBVSxTQUFTLEVBQUUsS0FBSztBQUMxQixvQkFBVSxxQkFBcUIsRUFBRSxLQUFLO0FBQ3RDLGlCQUFTLENBQUMsQ0FBQztBQUNYLGFBQU87QUFDUCxTQUFLO0FBQUMsUUFBQSxPQUFPLENBQUMsRUFBRTtBQUNoQixZQUFNLFdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDbkMsU0FBSztBQUNMLFFBQUksT0FBTyxXQUFXLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0g7b0RBMUJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsc0JBQXNCO1VBQ2hDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLGNBQzVGOzs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOR19WQUxJREFUT1JTLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgcGFyc2VQaG9uZU51bWJlckZyb21TdHJpbmcgfSBmcm9tICdsaWJwaG9uZW51bWJlci1qcy9tYXgnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5UGhvbmVWYWxpZGF0aW9uXScsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IFBob25lVmFsaWRhdGlvbkRpcmVjdGl2ZSwgbXVsdGk6IHRydWUgfV1cbn0pXG5leHBvcnQgY2xhc3MgUGhvbmVWYWxpZGF0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwge1xuICAgIGNvbnN0IHZhbGlkID0gdGhpcy52YWxpZGF0ZUludGVybmF0aW9uYWxQaG9uZU51bWJlcihjb250cm9sKTtcbiAgICByZXR1cm4gdmFsaWQgPyBudWxsIDogeyBpbnRlcm5hdGlvbmFsUGhvbmVOdW1iZXI6IHRydWUgfTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVJbnRlcm5hdGlvbmFsUGhvbmVOdW1iZXIoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSB7XG4gICAgbGV0IG51bWJlclZhbGlkO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwaG9uZU51bWJlciA9IHBhcnNlUGhvbmVOdW1iZXJGcm9tU3RyaW5nKGNvbnRyb2wudmFsdWUpO1xuICAgICAgbnVtYmVyVmFsaWQgPSBwaG9uZU51bWJlci5pc1ZhbGlkKCk7XG4gICAgICBpZiAobnVtYmVyVmFsaWQgJiYgY29udHJvbC52YWx1ZSAhPT0gcGhvbmVOdW1iZXIuZm9ybWF0KCdFLjE2NCcpKSB7XG4gICAgICAgIGNvbnRyb2wuc2V0VmFsdWUocGhvbmVOdW1iZXIuZm9ybWF0KCdFLjE2NCcpLCB7XG4gICAgICAgICAgZW1pdEV2ZW50OiBmYWxzZSxcbiAgICAgICAgICBlbWl0TW9kZWxUb1ZpZXdDaGFuZ2U6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG51bWJlclZhbGlkID0gIWNvbnRyb2wudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudW1iZXJWYWxpZDtcbiAgfVxufVxuIl19