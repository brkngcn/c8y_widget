import { Component, ContentChild, HostBinding, Input } from '@angular/core';
import { FormControlName, NgModel } from '@angular/forms';
import { merge, Subject, timer } from 'rxjs';
import { debounce, filter, takeUntil } from 'rxjs/operators';
import { MessagesComponent } from './messages.component';
/**
 * A form group helps to validate an input of a form element.
 *
 * ## Example:
 *
 * ```html
 *  <c8y-form-group [hasWarning]="user.email.length === 0">
 *   <label translate for="userEmail">Email</label>
 *   <input
 *     id="userEmail"
 *     class="form-control"
 *     type="email"
 *     name="email"
 *     [maxlength]="254"
 *     autocomplete="off"
 *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
 *     [(ngModel)]="user.email"
 *     email
 *     required
 *   >
 *   <c8y-messages>
 *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
 *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
 *   </c8y-messages>
 *  </c8y-form-group>
 * ```
 *
 * @param status The current status could be error, warning or success.
 * @param hasError Set this to true to display a error.
 * @param hasWarning Set this to true to display a warning.
 * @param hasSuccess Set this to true to display a success.
 * @param novalidation Set this to true to disable automatic validation by this component.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './messages.component';

function FormGroupComponent_c8y_messages_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-messages", 1);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("show", ctx_r0.errors);
} }
const _c0 = ["*"];
export class FormGroupComponent {
    constructor() {
        this.hasError = false;
        this.hasWarning = false;
        this.hasSuccess = false;
        this.novalidation = false;
        this.destroyed$ = new Subject();
        this.VALIDATION_DEBOUNCE_MS = 1000;
    }
    get error() {
        return this.status === 'error' || this.hasError;
    }
    get warning() {
        return this.status === 'warning' || this.hasWarning;
    }
    get success() {
        return this.status === 'success' || this.hasSuccess;
    }
    ngAfterContentInit() {
        this.initNgModel();
        this.initFormControl();
    }
    initNgModel() {
        if (this.model) {
            this.model.valueAccessor.registerOnTouched(() => {
                if (this.model.control && !this.model.control.dirty) {
                    this.model.control.markAsDirty();
                    this.model.control.updateValueAndValidity({ onlySelf: true });
                }
            });
            this.subscribeForChanges(this.model);
        }
    }
    initFormControl() {
        if (this.formControlName) {
            this.subscribeForChanges(this.formControlName.control);
        }
    }
    subscribeForChanges(control) {
        merge(control.valueChanges, control.statusChanges)
            .pipe(filter(() => control.dirty && !this.novalidation), debounce(() => (this.hasError ? timer(10) : timer(this.VALIDATION_DEBOUNCE_MS))), takeUntil(this.destroyed$))
            .subscribe(() => this.update(control));
    }
    update(control) {
        this.hasError = control.status === 'INVALID';
        if (this.customErrorMessage) {
            this.customErrorMessage.changVisibility(control.errors);
        }
        else {
            this.errors = control.errors;
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
FormGroupComponent.ɵfac = function FormGroupComponent_Factory(t) { return new (t || FormGroupComponent)(); };
FormGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormGroupComponent, selectors: [["c8y-form-group"]], contentQueries: function FormGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MessagesComponent, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgModel, 7);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FormControlName, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customErrorMessage = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.model = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formControlName = _t.first);
    } }, hostAttrs: [1, "form-group"], hostVars: 6, hostBindings: function FormGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-error", ctx.error)("has-warning", ctx.warning)("has-success", ctx.success);
    } }, inputs: { hasError: "hasError", hasWarning: "hasWarning", hasSuccess: "hasSuccess", novalidation: "novalidation", status: "status" }, ngContentSelectors: _c0, decls: 2, vars: 1, consts: [[3, "show", 4, "ngIf"], [3, "show"]], template: function FormGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, FormGroupComponent_c8y_messages_1_Template, 1, 1, "c8y-messages", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.customErrorMessage);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MessagesComponent], encapsulation: 2 });
FormGroupComponent.propDecorators = {
    hasError: [{ type: Input }],
    hasWarning: [{ type: Input }],
    hasSuccess: [{ type: Input }],
    novalidation: [{ type: Input }],
    status: [{ type: Input }],
    error: [{ type: HostBinding, args: ['class.has-error',] }],
    warning: [{ type: HostBinding, args: ['class.has-warning',] }],
    success: [{ type: HostBinding, args: ['class.has-success',] }],
    customErrorMessage: [{ type: ContentChild, args: [MessagesComponent, { static: false },] }],
    model: [{ type: ContentChild, args: [NgModel, { static: true },] }],
    formControlName: [{ type: ContentChild, args: [FormControlName, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormGroupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-form-group',
                template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
                host: {
                    class: 'form-group'
                }
            }]
    }], function () { return []; }, { hasError: [{
            type: Input
        }], hasWarning: [{
            type: Input
        }], hasSuccess: [{
            type: Input
        }], novalidation: [{
            type: Input
        }], error: [{
            type: HostBinding,
            args: ['class.has-error']
        }], warning: [{
            type: HostBinding,
            args: ['class.has-warning']
        }], success: [{
            type: HostBinding,
            args: ['class.has-success']
        }], status: [{
            type: Input
        }], customErrorMessage: [{
            type: ContentChild,
            args: [MessagesComponent, { static: false }]
        }], model: [{
            type: ContentChild,
            args: [NgModel, { static: true }]
        }], formControlName: [{
            type: ContentChild,
            args: [FormControlName, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,