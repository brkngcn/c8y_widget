import { Component, ContentChildren, Input } from '@angular/core';
import { MessageDirective } from './message.directive';
import { ValidationPattern } from './validation-pattern';
import { TranslateService } from '@ngx-translate/core';
export class MessagesComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.show = {};
        this.defaults = ValidationPattern.messages;
        this.messages = [];
        this.messageMap = {};
    }
    ngAfterContentInit() {
        this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce((messages, directive) => {
            messages[directive.name] = directive.text;
            return messages;
        }, {}));
    }
    changVisibility(show) {
        this.show = show;
        this.ngOnChanges();
    }
    ngOnChanges() {
        if (this.show) {
            this.messages = Object.keys(this.show)
                .map((key) => this.toMessage(key, this.show[key]))
                // if an null message is returned, it will not be displayed
                .filter(message => message !== null);
        }
        else {
            this.messages = [];
        }
    }
    toMessage(key, value) {
        let message = this.messageMap[key];
        if ((!message || message === ValidationPattern.messages.pattern) && key === 'pattern' && typeof (value === null || value === void 0 ? void 0 : value.requiredPattern) === 'string') {
            const pattern = value.requiredPattern.replace(/^\//, '').replace(/\/$/, '');
            const foundPattern = Object.keys(ValidationPattern.rules).find(tmp => { var _a; return ((_a = ValidationPattern.rules[tmp].pattern) === null || _a === void 0 ? void 0 : _a.source) === pattern; });
            if (foundPattern) {
                key = foundPattern;
                message = this.messageMap[key];
            }
        }
        if (!message) {
            return null;
        }
        return this.translateService.instant(message, value);
    }
}
MessagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-messages',
                template: "<small class=\"form-control-feedback-message\">\n  <div class=\"d-block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
            },] }
];
MessagesComponent.ctorParameters = () => [
    { type: TranslateService }
];
MessagesComponent.propDecorators = {
    show: [{ type: Input }],
    defaults: [{ type: Input }],
    customMessages: [{ type: ContentChildren, args: [MessageDirective,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9tZXNzYWdlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTXZELE1BQU0sT0FBTyxpQkFBaUI7SUFPNUIsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFON0MsU0FBSSxHQUFPLEVBQUUsQ0FBQztRQUNkLGFBQVEsR0FBTyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7UUFFbkQsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLGVBQVUsR0FBUSxFQUFFLENBQUM7SUFFb0MsQ0FBQztJQUUxRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFO1lBQ3BHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztZQUMxQyxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNWLENBQUM7SUFFRCxlQUFlLENBQUMsSUFBUTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztpQkFDbkMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELDJEQUEyRDtpQkFDMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDO1NBQ3hDO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFFTyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUs7UUFDMUIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxLQUFLLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLE9BQU8sQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsZUFBZSxDQUFBLEtBQUssUUFBUSxFQUFFO1lBQ25JLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVFLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQUMsT0FBQSxDQUFBLE1BQUEsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sMENBQUUsTUFBTSxNQUFLLE9BQU8sQ0FBQSxFQUFBLENBQUMsQ0FBQztZQUNoSSxJQUFJLFlBQVksRUFBRTtnQkFDaEIsR0FBRyxHQUFHLFlBQVksQ0FBQztnQkFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEM7U0FDRjtRQUNELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7WUFsREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2dCQUN4QixpTUFBd0M7YUFDekM7OztZQUxRLGdCQUFnQjs7O21CQU90QixLQUFLO3VCQUNMLEtBQUs7NkJBQ0wsZUFBZSxTQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi9tZXNzYWdlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uUGF0dGVybiB9IGZyb20gJy4vdmFsaWRhdGlvbi1wYXR0ZXJuJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LW1lc3NhZ2VzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21lc3NhZ2VzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdlc0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNob3c6IHt9ID0ge307XG4gIEBJbnB1dCgpIGRlZmF1bHRzOiB7fSA9IFZhbGlkYXRpb25QYXR0ZXJuLm1lc3NhZ2VzO1xuICBAQ29udGVudENoaWxkcmVuKE1lc3NhZ2VEaXJlY3RpdmUpIGN1c3RvbU1lc3NhZ2VzOiBRdWVyeUxpc3Q8TWVzc2FnZURpcmVjdGl2ZT47XG4gIG1lc3NhZ2VzID0gW107XG4gIG1lc3NhZ2VNYXA6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5tZXNzYWdlTWFwID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZhdWx0cywgdGhpcy5jdXN0b21NZXNzYWdlcy5yZWR1Y2UoKG1lc3NhZ2VzLCBkaXJlY3RpdmUpID0+IHtcbiAgICAgIG1lc3NhZ2VzW2RpcmVjdGl2ZS5uYW1lXSA9IGRpcmVjdGl2ZS50ZXh0O1xuICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH0sIHt9KSk7XG4gIH1cblxuICBjaGFuZ1Zpc2liaWxpdHkoc2hvdzoge30pIHtcbiAgICB0aGlzLnNob3cgPSBzaG93O1xuICAgIHRoaXMubmdPbkNoYW5nZXMoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLnNob3cpIHtcbiAgICAgIHRoaXMubWVzc2FnZXMgPSBPYmplY3Qua2V5cyh0aGlzLnNob3cpXG4gICAgICAgIC5tYXAoKGtleSkgPT4gdGhpcy50b01lc3NhZ2Uoa2V5LCB0aGlzLnNob3dba2V5XSkpXG4gICAgICAgIC8vIGlmIGFuIG51bGwgbWVzc2FnZSBpcyByZXR1cm5lZCwgaXQgd2lsbCBub3QgYmUgZGlzcGxheWVkXG4gICAgICAgIC5maWx0ZXIobWVzc2FnZSA9PiBtZXNzYWdlICE9PSBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9NZXNzYWdlKGtleSwgdmFsdWUpIHtcbiAgICBsZXQgbWVzc2FnZSA9IHRoaXMubWVzc2FnZU1hcFtrZXldO1xuICAgIGlmICgoIW1lc3NhZ2UgfHwgbWVzc2FnZSA9PT0gVmFsaWRhdGlvblBhdHRlcm4ubWVzc2FnZXMucGF0dGVybikgJiYga2V5ID09PSAncGF0dGVybicgJiYgdHlwZW9mIHZhbHVlPy5yZXF1aXJlZFBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBwYXR0ZXJuID0gdmFsdWUucmVxdWlyZWRQYXR0ZXJuLnJlcGxhY2UoL15cXC8vLCAnJykucmVwbGFjZSgvXFwvJC8sICcnKTtcbiAgICAgIGNvbnN0IGZvdW5kUGF0dGVybiA9IE9iamVjdC5rZXlzKFZhbGlkYXRpb25QYXR0ZXJuLnJ1bGVzKS5maW5kKHRtcCA9PiBWYWxpZGF0aW9uUGF0dGVybi5ydWxlc1t0bXBdLnBhdHRlcm4/LnNvdXJjZSA9PT0gcGF0dGVybik7XG4gICAgICBpZiAoZm91bmRQYXR0ZXJuKSB7XG4gICAgICAgIGtleSA9IGZvdW5kUGF0dGVybjtcbiAgICAgICAgbWVzc2FnZSA9IHRoaXMubWVzc2FnZU1hcFtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQobWVzc2FnZSwgdmFsdWUpO1xuICB9XG59XG4iXX0=