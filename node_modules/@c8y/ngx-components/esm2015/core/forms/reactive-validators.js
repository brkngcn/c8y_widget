import { FormArray } from '@angular/forms';
import { DatapointLibraryValidationErrors } from './validation-pattern';
import { get } from 'lodash-es';
// @dynamic
export class C8yValidators {
    static minMaxValidator() {
        return (control) => {
            const min = control.get(`min`);
            const max = control.get(`max`);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            // remove previous errors
            this.removeErrors(min, [DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]);
            this.removeErrors(max, [DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]);
            if (!minDefined || !maxDefined) {
                return null;
            }
            // sets errors
            if (min.value >= max.value) {
                const minError = { [DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]: true };
                const maxError = { [DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]: true };
                const errors = Object.assign({}, minError, maxError);
                min.setErrors(Object.assign(minError, min.errors || {}));
                max.setErrors(Object.assign(maxError, max.errors || {}));
                return errors;
            }
            return null;
        };
    }
    static requireBothMinAndMax() {
        const errorAttribute = DatapointLibraryValidationErrors.SHOULD_BE_DEFINED;
        return (control) => {
            const min = control.get(`min`);
            const max = control.get(`max`);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            const errors = {};
            if (minDefined && !maxDefined && max) {
                // sets error
                const error = { [errorAttribute]: true };
                max.setErrors(Object.assign({}, max.errors || {}, error));
                Object.assign(errors, error);
            }
            else {
                // remove previous error
                this.removeErrors(max, [errorAttribute]);
            }
            if (maxDefined && !minDefined && min) {
                // sets error
                const error = { [errorAttribute]: true };
                min.setErrors(Object.assign({}, min.errors || {}, error));
                Object.assign(errors, error);
            }
            else {
                // remove previous error
                this.removeErrors(min, [errorAttribute]);
            }
            return Object.keys(errors).length ? errors : null;
        };
    }
    static withinScale(field) {
        return (control) => {
            if (!field) {
                return null;
            }
            const min = control.get(`range.min`);
            const max = control.get(`range.max`);
            const fieldControl = control.get(field);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            const fieldDefined = fieldControl && fieldControl.value !== undefined && fieldControl.value !== null;
            // remove previous errors
            this.removeErrors(fieldControl, [
                DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX,
                DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN
            ]);
            if (!minDefined || !maxDefined || !fieldDefined) {
                return null;
            }
            const errors = {};
            // sets errors
            if (fieldControl.value < min.value) {
                const error = { [DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN]: true };
                fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                Object.assign(errors, error);
            }
            if (fieldControl.value > max.value) {
                const error = { [DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX]: true };
                fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                Object.assign(errors, error);
            }
            return Object.keys(errors).length ? errors : null;
        };
    }
    static maxActiveCount(maxActive, activeAttribute = 'details.__active') {
        return (control) => {
            if (!Number.isInteger(maxActive) || Number.isNaN(maxActive)) {
                return null;
            }
            if (!(control instanceof FormArray)) {
                return null;
            }
            const formArray = control;
            const value = formArray.value;
            if (!Array.isArray(value)) {
                return null;
            }
            const filteredActiveEntries = value.filter(tmp => tmp && !!get(tmp, activeAttribute));
            if (filteredActiveEntries.length <= maxActive) {
                return null;
            }
            return { [DatapointLibraryValidationErrors.MAX_ACTIVE_COUNT]: { maxActive, actualLength: filteredActiveEntries.length } };
        };
    }
    static minActiveCount(minActive, activeAttribute = 'details.__active') {
        return (control) => {
            if (!Number.isInteger(minActive) || Number.isNaN(minActive)) {
                return null;
            }
            if (!(control instanceof FormArray)) {
                return null;
            }
            const formArray = control;
            const value = formArray.value;
            if (!Array.isArray(value)) {
                return null;
            }
            const filteredActiveEntries = value.filter(tmp => tmp && !!get(tmp, activeAttribute));
            if (filteredActiveEntries.length >= minActive) {
                return null;
            }
            return { [DatapointLibraryValidationErrors.MIN_ACTIVE_COUNT]: { minActive, actualLength: filteredActiveEntries.length } };
        };
    }
    static removeErrors(control, errors) {
        if (!control || !control.errors) {
            return false;
        }
        let removedError = false;
        for (const error of errors) {
            if (control.errors[error]) {
                removedError = true;
                delete control.errors[error];
            }
        }
        if (removedError) {
            control.setErrors(Object.keys(control.errors).length ? Object.assign({}, control.errors) : null);
        }
        return removedError;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RpdmUtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZm9ybXMvcmVhY3RpdmUtdmFsaWRhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLFNBQVMsRUFBaUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRWhDLFdBQVc7QUFDWCxNQUFNLE9BQU8sYUFBYTtJQUN4QixNQUFNLENBQUMsZUFBZTtRQUNwQixPQUFPLENBQUMsT0FBd0IsRUFBMkIsRUFBRTtZQUMzRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFL0IsTUFBTSxVQUFVLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDO1lBQ3hFLE1BQU0sVUFBVSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztZQUV4RSx5QkFBeUI7WUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7WUFDbEYsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7WUFFL0UsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDOUIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUVELGNBQWM7WUFDZCxJ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dENvbnRyb2wsIEZvcm1BcnJheSwgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEYXRhcG9pbnRMaWJyYXJ5VmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJy4vdmFsaWRhdGlvbi1wYXR0ZXJuJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgQzh5VmFsaWRhdG9ycyB7XG4gIHN0YXRpYyBtaW5NYXhWYWxpZGF0b3IoKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgY29uc3QgbWluID0gY29udHJvbC5nZXQoYG1pbmApO1xuICAgICAgY29uc3QgbWF4ID0gY29udHJvbC5nZXQoYG1heGApO1xuXG4gICAgICBjb25zdCBtaW5EZWZpbmVkID0gbWluICYmIG1pbi52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIG1pbi52YWx1ZSAhPT0gbnVsbDtcbiAgICAgIGNvbnN0IG1heERlZmluZWQgPSBtYXggJiYgbWF4LnZhbHVlICE9PSB1bmRlZmluZWQgJiYgbWF4LnZhbHVlICE9PSBudWxsO1xuXG4gICAgICAvLyByZW1vdmUgcHJldmlvdXMgZXJyb3JzXG4gICAgICB0aGlzLnJlbW92ZUVycm9ycyhtaW4sIFtEYXRhcG9pbnRMaWJyYXJ5VmFsaWRhdGlvbkVycm9ycy5HUkVBVEVSX1RIQU5fUkFOR0VfTUFYXSk7XG4gICAgICB0aGlzLnJlbW92ZUVycm9ycyhtYXgsIFtEYXRhcG9pbnRMaWJyYXJ5VmFsaWRhdGlvbkVycm9ycy5MRVNTX1RIQU5fUkFOR0VfTUlOXSk7XG5cbiAgICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0cyBlcnJvcnNcbiAgICAgIGlmIChtaW4udmFsdWUgPj0gbWF4LnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1pbkVycm9yID0geyBbRGF0YXBvaW50TGlicmFyeVZhbGlkYXRpb25FcnJvcnMuR1JFQVRFUl9USEFOX1JBTkdFX01BWF06IHRydWUgfTtcbiAgICAgICAgY29uc3QgbWF4RXJyb3IgPSB7IFtEYXRhcG9pbnRMaWJyYXJ5VmFsaWRhdGlvbkVycm9ycy5MRVNTX1RIQU5fUkFOR0VfTUlOXTogdHJ1ZSB9O1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBPYmplY3QuYXNzaWduKHt9LCBtaW5FcnJvciwgbWF4RXJyb3IpO1xuICAgICAgICBtaW4uc2V0RXJyb3JzKE9iamVjdC5hc3NpZ24obWluRXJyb3IsIG1pbi5lcnJvcnMgfHwge30pKTtcbiAgICAgICAgbWF4LnNldEVycm9ycyhPYmplY3QuYXNzaWduKG1heEVycm9yLCBtYXguZXJyb3JzIHx8IHt9KSk7XG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgcmVxdWlyZUJvdGhNaW5BbmRNYXgoKTogVmFsaWRhdG9yRm4ge1xuICAgIGNvbnN0IGVycm9yQXR0cmlidXRlID0gRGF0YXBvaW50TGlicmFyeVZhbGlkYXRpb25FcnJvcnMuU0hPVUxEX0JFX0RFRklORUQ7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XG4gICAgICBjb25zdCBtaW4gPSBjb250cm9sLmdldChgbWluYCk7XG4gICAgICBjb25zdCBtYXggPSBjb250cm9sLmdldChgbWF4YCk7XG5cbiAgICAgIGNvbnN0IG1pbkRlZmluZWQgPSBtaW4gJiYgbWluLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgbWluLnZhbHVlICE9PSBudWxsO1xuICAgICAgY29uc3QgbWF4RGVmaW5lZCA9IG1heCAmJiBtYXgudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBtYXgudmFsdWUgIT09IG51bGw7XG5cbiAgICAgIGNvbnN0IGVycm9ycyA9IHt9O1xuICAgICAgaWYgKG1pbkRlZmluZWQgJiYgIW1heERlZmluZWQgJiYgbWF4KSB7XG4gICAgICAgIC8vIHNldHMgZXJyb3JcbiAgICAgICAgY29uc3QgZXJyb3IgPSB7IFtlcnJvckF0dHJpYnV0ZV06IHRydWUgfTtcbiAgICAgICAgbWF4LnNldEVycm9ycyhPYmplY3QuYXNzaWduKHt9LCBtYXguZXJyb3JzIHx8IHt9LCBlcnJvcikpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGVycm9ycywgZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVtb3ZlIHByZXZpb3VzIGVycm9yXG4gICAgICAgIHRoaXMucmVtb3ZlRXJyb3JzKG1heCwgW2Vycm9yQXR0cmlidXRlXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXhEZWZpbmVkICYmICFtaW5EZWZpbmVkICYmIG1pbikge1xuICAgICAgICAvLyBzZXRzIGVycm9yXG4gICAgICAgIGNvbnN0IGVycm9yID0geyBbZXJyb3JBdHRyaWJ1dGVdOiB0cnVlIH07XG4gICAgICAgIG1pbi5zZXRFcnJvcnMoT2JqZWN0LmFzc2lnbih7fSwgbWluLmVycm9ycyB8fCB7fSwgZXJyb3IpKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlcnJvcnMsIGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlbW92ZSBwcmV2aW91cyBlcnJvclxuICAgICAgICB0aGlzLnJlbW92ZUVycm9ycyhtaW4sIFtlcnJvckF0dHJpYnV0ZV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPyBlcnJvcnMgOiBudWxsO1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgd2l0aGluU2NhbGUoZmllbGQ6IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgIGlmICghZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBtaW4gPSBjb250cm9sLmdldChgcmFuZ2UubWluYCk7XG4gICAgICBjb25zdCBtYXggPSBjb250cm9sLmdldChgcmFuZ2UubWF4YCk7XG4gICAgICBjb25zdCBmaWVsZENvbnRyb2wgPSBjb250cm9sLmdldChmaWVsZCk7XG5cbiAgICAgIGNvbnN0IG1pbkRlZmluZWQgPSBtaW4gJiYgbWluLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgbWluLnZhbHVlICE9PSBudWxsO1xuICAgICAgY29uc3QgbWF4RGVmaW5lZCA9IG1heCAmJiBtYXgudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBtYXgudmFsdWUgIT09IG51bGw7XG4gICAgICBjb25zdCBmaWVsZERlZmluZWQgPVxuICAgICAgICBmaWVsZENvbnRyb2wgJiYgZmllbGRDb250cm9sLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgZmllbGRDb250cm9sLnZhbHVlICE9PSBudWxsO1xuXG4gICAgICAvLyByZW1vdmUgcHJldmlvdXMgZXJyb3JzXG4gICAgICB0aGlzLnJlbW92ZUVycm9ycyhmaWVsZENvbnRyb2wsIFtcbiAgICAgICAgRGF0YXBvaW50TGlicmFyeVZhbGlkYXRpb25FcnJvcnMuR1JFQVRFUl9USEFOX1NDQUxFX01BWCxcbiAgICAgICAgRGF0YXBvaW50TGlicmFyeVZhbGlkYXRpb25FcnJvcnMuTEVTU19USEFOX1NDQUxFX01JTlxuICAgICAgXSk7XG5cbiAgICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCB8fCAhZmllbGREZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlcnJvcnMgPSB7fTtcblxuICAgICAgLy8gc2V0cyBlcnJvcnNcbiAgICAgIGlmIChmaWVsZENvbnRyb2wudmFsdWUgPCBtaW4udmFsdWUpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSB7IFtEYXRhcG9pbnRMaWJyYXJ5VmFsaWRhdGlvbkVycm9ycy5MRVNTX1RIQU5fU0NBTEVfTUlOXTogdHJ1ZSB9O1xuICAgICAgICBmaWVsZENvbnRyb2wuc2V0RXJyb3JzKE9iamVjdC5hc3NpZ24oe30sIGZpZWxkQ29udHJvbC5lcnJvcnMgfHwge30sIGVycm9yKSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZXJyb3JzLCBlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZENvbnRyb2wudmFsdWUgPiBtYXgudmFsdWUpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSB7IFtEYXRhcG9pbnRMaWJyYXJ5VmFsaWRhdGlvbkVycm9ycy5HUkVBVEVSX1RIQU5fU0NBTEVfTUFYXTogdHJ1ZSB9O1xuICAgICAgICBmaWVsZENvbnRyb2wuc2V0RXJyb3JzKE9iamVjdC5hc3NpZ24oe30sIGZpZWxkQ29udHJvbC5lcnJvcnMgfHwge30sIGVycm9yKSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZXJyb3JzLCBlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA/IGVycm9ycyA6IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBtYXhBY3RpdmVDb3VudChtYXhBY3RpdmU6IG51bWJlciwgYWN0aXZlQXR0cmlidXRlID0gJ2RldGFpbHMuX19hY3RpdmUnKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG1heEFjdGl2ZSkgfHwgTnVtYmVyLmlzTmFOKG1heEFjdGl2ZSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICghKGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtQXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZm9ybUFycmF5ID0gY29udHJvbCBhcyBGb3JtQXJyYXk7XG4gICAgICBjb25zdCB2YWx1ZTogYW55W10gPSBmb3JtQXJyYXkudmFsdWU7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaWx0ZXJlZEFjdGl2ZUVudHJpZXMgPSB2YWx1ZS5maWx0ZXIodG1wID0+IHRtcCAmJiAhIWdldCh0bXAsIGFjdGl2ZUF0dHJpYnV0ZSkpO1xuICAgICAgaWYgKGZpbHRlcmVkQWN0aXZlRW50cmllcy5sZW5ndGggPD0gbWF4QWN0aXZlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyBbRGF0YXBvaW50TGlicmFyeVZhbGlkYXRpb25FcnJvcnMuTUFYX0FDVElWRV9DT1VOVF06IHsgbWF4QWN0aXZlLCBhY3R1YWxMZW5ndGg6IGZpbHRlcmVkQWN0aXZlRW50cmllcy5sZW5ndGggfSB9O1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgbWluQWN0aXZlQ291bnQobWluQWN0aXZlOiBudW1iZXIsIGFjdGl2ZUF0dHJpYnV0ZSA9ICdkZXRhaWxzLl9fYWN0aXZlJyk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihtaW5BY3RpdmUpIHx8IE51bWJlci5pc05hTihtaW5BY3RpdmUpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIShjb250cm9sIGluc3RhbmNlb2YgRm9ybUFycmF5KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZvcm1BcnJheSA9IGNvbnRyb2wgYXMgRm9ybUFycmF5O1xuICAgICAgY29uc3QgdmFsdWU6IGFueVtdID0gZm9ybUFycmF5LnZhbHVlO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmlsdGVyZWRBY3RpdmVFbnRyaWVzID0gdmFsdWUuZmlsdGVyKHRtcCA9PiB0bXAgJiYgISFnZXQodG1wLCBhY3RpdmVBdHRyaWJ1dGUpKTtcbiAgICAgIGlmIChmaWx0ZXJlZEFjdGl2ZUVudHJpZXMubGVuZ3RoID49IG1pbkFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgW0RhdGFwb2ludExpYnJhcnlWYWxpZGF0aW9uRXJyb3JzLk1JTl9BQ1RJVkVfQ09VTlRdOiB7IG1pbkFjdGl2ZSwgYWN0dWFsTGVuZ3RoOiBmaWx0ZXJlZEFjdGl2ZUVudHJpZXMubGVuZ3RoIH0gfTtcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVtb3ZlRXJyb3JzKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgZXJyb3JzOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuICAgIGlmICghY29udHJvbCB8fCAhY29udHJvbC5lcnJvcnMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHJlbW92ZWRFcnJvciA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgZXJyb3Igb2YgZXJyb3JzKSB7XG4gICAgICBpZiAoY29udHJvbC5lcnJvcnNbZXJyb3JdKSB7XG4gICAgICAgIHJlbW92ZWRFcnJvciA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSBjb250cm9sLmVycm9yc1tlcnJvcl07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZW1vdmVkRXJyb3IpIHtcbiAgICAgIGNvbnRyb2wuc2V0RXJyb3JzKFxuICAgICAgICBPYmplY3Qua2V5cyhjb250cm9sLmVycm9ycykubGVuZ3RoID8gT2JqZWN0LmFzc2lnbih7fSwgY29udHJvbC5lcnJvcnMpIDogbnVsbFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbW92ZWRFcnJvcjtcbiAgfVxufVxuIl19