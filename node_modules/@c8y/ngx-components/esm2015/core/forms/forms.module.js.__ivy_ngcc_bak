import { NgModule } from '@angular/core';
import { FormsModule as NgFormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '../common/common.module';
import { DefaultValidationDirective } from './default-validation.directive';
import { EmailsValidatorDirective } from './emails-validator.directive';
import { FilterInputComponent } from './filter-input.component';
import { FormGroupComponent } from './form-group.component';
import { InputGroupListContainerDirective } from './input-group-list-container.directive';
import { InputGroupListComponent } from './input-group-list.component';
import { IpRangeInputListComponent } from './ip-range-input-list.component';
import { JsonValidationPrettifierDirective } from './json-validation-prettifier.directive';
import { MaxValidationDirective } from './max-validation.directive';
import { MessageDirective } from './message.directive';
import { MessagesComponent } from './messages.component';
import { MinValidationDirective } from './min-validation.directive';
import { PhoneValidationDirective } from './phone-validation.directive';
import { RangeComponent } from './range.component';
import { RangeDirective } from './range.directive';
import { RequiredInputPlaceholderDirective } from './required-input-placeholder.directive';
import { TextAreaRowHeightDirective } from './text-area-row-height.directive';
import { UniqueInCollectionByPathValidationDirective } from './unique-in-collection-by-path-validation.directive';
import { PopoverModule } from 'ngx-bootstrap/popover';
/**
 * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
 * @exports PhoneValidationDirective Allows to validate international phone numbers.
 * @exports NewsletterDirective Allows to subscribe to the newsletter.
 * @exports DefaultValidationDirective Allows to validate some predefined patterns.
 * @exports MessageDirective A directive that allows to define messages.
 * @exports MessagesComponent Allows to display error messages.
 * @exports RangeComponent A component that allows to display a styled range slider.
 */
export class FormsModule {
}
FormsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgFormsModule, ReactiveFormsModule, PopoverModule],
                exports: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    NgFormsModule,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    FilterInputComponent,
                    EmailsValidatorDirective,
                    RangeDirective,
                    RangeComponent,
                    UniqueInCollectionByPathValidationDirective
                ],
                declarations: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    FilterInputComponent,
                    EmailsValidatorDirective,
                    RangeDirective,
                    RangeComponent,
                    UniqueInCollectionByPathValidationDirective
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9mb3Jtcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxJQUFJLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMxRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMzRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSwyQ0FBMkMsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQ2xILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RDs7Ozs7Ozs7R0FRRztBQTZDSCxNQUFNLE9BQU8sV0FBVzs7O1lBNUN2QixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxhQUFhLENBQUM7Z0JBQzFFLE9BQU8sRUFBRTtvQkFDUCx3QkFBd0I7b0JBQ3hCLDBCQUEwQjtvQkFDMUIsc0JBQXNCO29CQUN0QixzQkFBc0I7b0JBQ3RCLGFBQWE7b0JBQ2Isa0JBQWtCO29CQUNsQixnQkFBZ0I7b0JBQ2hCLGlCQUFpQjtvQkFDakIsdUJBQXVCO29CQUN2QixnQ0FBZ0M7b0JBQ2hDLGlDQUFpQztvQkFDakMsMEJBQTBCO29CQUMxQixpQ0FBaUM7b0JBQ2pDLHlCQUF5QjtvQkFDekIsb0JBQW9CO29CQUNwQix3QkFBd0I7b0JBQ3hCLGNBQWM7b0JBQ2QsY0FBYztvQkFDZCwyQ0FBMkM7aUJBQzVDO2dCQUNELFlBQVksRUFBRTtvQkFDWix3QkFBd0I7b0JBQ3hCLDBCQUEwQjtvQkFDMUIsc0JBQXNCO29CQUN0QixzQkFBc0I7b0JBQ3RCLGtCQUFrQjtvQkFDbEIsZ0JBQWdCO29CQUNoQixpQkFBaUI7b0JBQ2pCLHVCQUF1QjtvQkFDdkIsZ0NBQWdDO29CQUNoQyxpQ0FBaUM7b0JBQ2pDLDBCQUEwQjtvQkFDMUIsaUNBQWlDO29CQUNqQyx5QkFBeUI7b0JBQ3pCLG9CQUFvQjtvQkFDcEIsd0JBQXdCO29CQUN4QixjQUFjO29CQUNkLGNBQWM7b0JBQ2QsMkNBQTJDO2lCQUM1QzthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIGFzIE5nRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBEZWZhdWx0VmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGVmYXVsdC12YWxpZGF0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUgfSBmcm9tICcuL2VtYWlscy12YWxpZGF0b3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IEZpbHRlcklucHV0Q29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItaW5wdXQuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vZm9ybS1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5wdXRHcm91cExpc3RDb250YWluZXJEaXJlY3RpdmUgfSBmcm9tICcuL2lucHV0LWdyb3VwLWxpc3QtY29udGFpbmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJbnB1dEdyb3VwTGlzdENvbXBvbmVudCB9IGZyb20gJy4vaW5wdXQtZ3JvdXAtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSXBSYW5nZUlucHV0TGlzdENvbXBvbmVudCB9IGZyb20gJy4vaXAtcmFuZ2UtaW5wdXQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSnNvblZhbGlkYXRpb25QcmV0dGlmaWVyRGlyZWN0aXZlIH0gZnJvbSAnLi9qc29uLXZhbGlkYXRpb24tcHJldHRpZmllci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTWF4VmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vbWF4LXZhbGlkYXRpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IE1lc3NhZ2VEaXJlY3RpdmUgfSBmcm9tICcuL21lc3NhZ2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IE1lc3NhZ2VzQ29tcG9uZW50IH0gZnJvbSAnLi9tZXNzYWdlcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWluVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vbWluLXZhbGlkYXRpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IFBob25lVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vcGhvbmUtdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUmFuZ2VDb21wb25lbnQgfSBmcm9tICcuL3JhbmdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSYW5nZURpcmVjdGl2ZSB9IGZyb20gJy4vcmFuZ2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJlcXVpcmVkSW5wdXRQbGFjZWhvbGRlckRpcmVjdGl2ZSB9IGZyb20gJy4vcmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRleHRBcmVhUm93SGVpZ2h0RGlyZWN0aXZlIH0gZnJvbSAnLi90ZXh0LWFyZWEtcm93LWhlaWdodC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVW5pcXVlSW5Db2xsZWN0aW9uQnlQYXRoVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vdW5pcXVlLWluLWNvbGxlY3Rpb24tYnktcGF0aC12YWxpZGF0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBQb3BvdmVyTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3BvdmVyJztcblxuLyoqXG4gKiBAZXhwb3J0cyBGb3JtR3JvdXBDb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBhbGxvd3MgdG8gZ3JvdXAgYW4gaW5wdXQgYW5kIGNhbiBkaXNwbGF5IHdhcm5pbmdzIGFuZCBlcnJvcnMuXG4gKiBAZXhwb3J0cyBQaG9uZVZhbGlkYXRpb25EaXJlY3RpdmUgQWxsb3dzIHRvIHZhbGlkYXRlIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVycy5cbiAqIEBleHBvcnRzIE5ld3NsZXR0ZXJEaXJlY3RpdmUgQWxsb3dzIHRvIHN1YnNjcmliZSB0byB0aGUgbmV3c2xldHRlci5cbiAqIEBleHBvcnRzIERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlIEFsbG93cyB0byB2YWxpZGF0ZSBzb21lIHByZWRlZmluZWQgcGF0dGVybnMuXG4gKiBAZXhwb3J0cyBNZXNzYWdlRGlyZWN0aXZlIEEgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHRvIGRlZmluZSBtZXNzYWdlcy5cbiAqIEBleHBvcnRzIE1lc3NhZ2VzQ29tcG9uZW50IEFsbG93cyB0byBkaXNwbGF5IGVycm9yIG1lc3NhZ2VzLlxuICogQGV4cG9ydHMgUmFuZ2VDb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBhbGxvd3MgdG8gZGlzcGxheSBhIHN0eWxlZCByYW5nZSBzbGlkZXIuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIE5nRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUsIFBvcG92ZXJNb2R1bGVdLFxuICBleHBvcnRzOiBbXG4gICAgUGhvbmVWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIE1pblZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgTWF4VmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBOZ0Zvcm1zTW9kdWxlLFxuICAgIEZvcm1Hcm91cENvbXBvbmVudCxcbiAgICBNZXNzYWdlRGlyZWN0aXZlLFxuICAgIE1lc3NhZ2VzQ29tcG9uZW50LFxuICAgIElucHV0R3JvdXBMaXN0Q29tcG9uZW50LFxuICAgIElucHV0R3JvdXBMaXN0Q29udGFpbmVyRGlyZWN0aXZlLFxuICAgIEpzb25WYWxpZGF0aW9uUHJldHRpZmllckRpcmVjdGl2ZSxcbiAgICBUZXh0QXJlYVJvd0hlaWdodERpcmVjdGl2ZSxcbiAgICBSZXF1aXJlZElucHV0UGxhY2Vob2xkZXJEaXJlY3RpdmUsXG4gICAgSXBSYW5nZUlucHV0TGlzdENvbXBvbmVudCxcbiAgICBGaWx0ZXJJbnB1dENvbXBvbmVudCxcbiAgICBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgUmFuZ2VEaXJlY3RpdmUsXG4gICAgUmFuZ2VDb21wb25lbnQsXG4gICAgVW5pcXVlSW5Db2xsZWN0aW9uQnlQYXRoVmFsaWRhdGlvbkRpcmVjdGl2ZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBQaG9uZVZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIEZvcm1Hcm91cENvbXBvbmVudCxcbiAgICBNZXNzYWdlRGlyZWN0aXZlLFxuICAgIE1lc3NhZ2VzQ29tcG9uZW50LFxuICAgIElucHV0R3JvdXBMaXN0Q29tcG9uZW50LFxuICAgIElucHV0R3JvdXBMaXN0Q29udGFpbmVyRGlyZWN0aXZlLFxuICAgIEpzb25WYWxpZGF0aW9uUHJldHRpZmllckRpcmVjdGl2ZSxcbiAgICBUZXh0QXJlYVJvd0hlaWdodERpcmVjdGl2ZSxcbiAgICBSZXF1aXJlZElucHV0UGxhY2Vob2xkZXJEaXJlY3RpdmUsXG4gICAgSXBSYW5nZUlucHV0TGlzdENvbXBvbmVudCxcbiAgICBGaWx0ZXJJbnB1dENvbXBvbmVudCxcbiAgICBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgUmFuZ2VEaXJlY3RpdmUsXG4gICAgUmFuZ2VDb21wb25lbnQsXG4gICAgVW5pcXVlSW5Db2xsZWN0aW9uQnlQYXRoVmFsaWRhdGlvbkRpcmVjdGl2ZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1zTW9kdWxlIHt9XG4iXX0=