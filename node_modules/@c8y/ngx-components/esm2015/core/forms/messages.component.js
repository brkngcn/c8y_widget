import { Component, ContentChildren, Input } from '@angular/core';
import { MessageDirective } from './message.directive';
import { ValidationPattern } from './validation-pattern';
import { TranslateService } from '@ngx-translate/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../i18n/c8y-translate.pipe';

function MessagesComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const msg_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, msg_r1), " ");
} }
const _c0 = ["*"];
export class MessagesComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.show = {};
        this.defaults = ValidationPattern.messages;
        this.messages = [];
        this.messageMap = {};
    }
    ngAfterContentInit() {
        this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce((messages, directive) => {
            messages[directive.name] = directive.text;
            return messages;
        }, {}));
    }
    changVisibility(show) {
        this.show = show;
        this.ngOnChanges();
    }
    ngOnChanges() {
        if (this.show) {
            this.messages = Object.keys(this.show)
                .map((key) => this.toMessage(key, this.show[key]))
                // if an null message is returned, it will not be displayed
                .filter(message => message !== null);
        }
        else {
            this.messages = [];
        }
    }
    toMessage(key, value) {
        let message = this.messageMap[key];
        if ((!message || message === ValidationPattern.messages.pattern) && key === 'pattern' && typeof (value === null || value === void 0 ? void 0 : value.requiredPattern) === 'string') {
            const pattern = value.requiredPattern.replace(/^\//, '').replace(/\/$/, '');
            const foundPattern = Object.keys(ValidationPattern.rules).find(tmp => { var _a; return ((_a = ValidationPattern.rules[tmp].pattern) === null || _a === void 0 ? void 0 : _a.source) === pattern; });
            if (foundPattern) {
                key = foundPattern;
                message = this.messageMap[key];
            }
        }
        if (!message) {
            return null;
        }
        return this.translateService.instant(message, value);
    }
}
MessagesComponent.ɵfac = function MessagesComponent_Factory(t) { return new (t || MessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService)); };
MessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MessagesComponent, selectors: [["c8y-messages"]], contentQueries: function MessagesComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MessageDirective, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customMessages = _t);
    } }, inputs: { show: "show", defaults: "defaults" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 3, vars: 1, consts: [[1, "form-control-feedback-message"], ["class", "d-block", 4, "ngFor", "ngForOf"], [1, "d-block"]], template: function MessagesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "small", 0);
        ɵngcc0.ɵɵtemplate(1, MessagesComponent_div_1_Template, 3, 3, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.messages);
    } }, directives: [ɵngcc2.NgForOf], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
MessagesComponent.ctorParameters = () => [
    { type: TranslateService }
];
MessagesComponent.propDecorators = {
    show: [{ type: Input }],
    defaults: [{ type: Input }],
    customMessages: [{ type: ContentChildren, args: [MessageDirective,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MessagesComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-messages',
                template: "<small class=\"form-control-feedback-message\">\n  <div class=\"d-block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
            }]
    }], function () { return [{ type: ɵngcc1.TranslateService }]; }, { show: [{
            type: Input
        }], defaults: [{
            type: Input
        }], customMessages: [{
            type: ContentChildren,
            args: [MessageDirective]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL21lc3NhZ2VzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTXZELE1BQU0sT0FBTyxpQkFBaUI7QUFDOUIsSUFNRSxZQUFvQixnQkFBa0M7QUFBSSxRQUF0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFOOUMsU0FBSSxHQUFPLEVBQUUsQ0FBQztBQUN6QixRQUFXLGFBQVEsR0FBTyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7QUFDckQsUUFDRSxhQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUUsZUFBVSxHQUFRLEVBQUUsQ0FBQztBQUN2QixJQUMyRCxDQUFDO0FBQzVELElBQ0Usa0JBQWtCO0FBQUssUUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFO0FBQzFHLFlBQU0sUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2hELFlBQU0sT0FBTyxRQUFRLENBQUM7QUFDdEIsUUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNaLElBQUUsQ0FBQztBQUNILElBQ0UsZUFBZSxDQUFDLElBQVE7QUFDMUIsUUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNyQixRQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN2QixJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNuQixZQUFNLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzVDLGlCQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzFELGdCQUFRLDJEQUEyRDtBQUNuRSxpQkFBUyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7QUFDN0MsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSztBQUM5QixRQUFJLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkMsUUFBSSxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxLQUFLLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLE9BQU8sQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsZUFBZSxDQUFBLEtBQUssUUFBUSxFQUFFO0FBQ3pJLFlBQU0sTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbEYsWUFBTSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFDLE9BQUEsQ0FBQSxNQUFBLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLDBDQUFFLE1BQU0sTUFBSyxPQUFPLENBQUEsRUFBQSxDQUFDLENBQUM7QUFDdEksWUFBTSxJQUFJLFlBQVksRUFBRTtBQUN4QixnQkFBUSxHQUFHLEdBQUcsWUFBWSxDQUFDO0FBQzNCLGdCQUFRLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLGFBQU87QUFDUCxTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2xCLFlBQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsU0FBSztBQUNMLFFBQUksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFDSDs2Q0FuREMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxjQUFjLGtCQUN4QjtnS0FBd0MsY0FDekM7Ozs7Ozs7Ozs7Ozs7OzZGQUNJO0FBQUM7QUFDVSxZQVBQLGdCQUFnQjtBQUFHO0FBQUc7QUFFcEIsbUJBS1IsS0FBSztBQUFLLHVCQUNWLEtBQUs7QUFBSyw2QkFDVixlQUFlLFNBQUMsZ0JBQWdCO0FBQU07Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgSW5wdXQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWVzc2FnZURpcmVjdGl2ZSB9IGZyb20gJy4vbWVzc2FnZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblBhdHRlcm4gfSBmcm9tICcuL3ZhbGlkYXRpb24tcGF0dGVybic7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1tZXNzYWdlcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9tZXNzYWdlcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZXNDb21wb25lbnQge1xuICBASW5wdXQoKSBzaG93OiB7fSA9IHt9O1xuICBASW5wdXQoKSBkZWZhdWx0czoge30gPSBWYWxpZGF0aW9uUGF0dGVybi5tZXNzYWdlcztcbiAgQENvbnRlbnRDaGlsZHJlbihNZXNzYWdlRGlyZWN0aXZlKSBjdXN0b21NZXNzYWdlczogUXVlcnlMaXN0PE1lc3NhZ2VEaXJlY3RpdmU+O1xuICBtZXNzYWdlcyA9IFtdO1xuICBtZXNzYWdlTWFwOiBhbnkgPSB7fTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMubWVzc2FnZU1hcCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMsIHRoaXMuY3VzdG9tTWVzc2FnZXMucmVkdWNlKChtZXNzYWdlcywgZGlyZWN0aXZlKSA9PiB7XG4gICAgICBtZXNzYWdlc1tkaXJlY3RpdmUubmFtZV0gPSBkaXJlY3RpdmUudGV4dDtcbiAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9LCB7fSkpO1xuICB9XG5cbiAgY2hhbmdWaXNpYmlsaXR5KHNob3c6IHt9KSB7XG4gICAgdGhpcy5zaG93ID0gc2hvdztcbiAgICB0aGlzLm5nT25DaGFuZ2VzKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5zaG93KSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzID0gT2JqZWN0LmtleXModGhpcy5zaG93KVxuICAgICAgICAubWFwKChrZXkpID0+IHRoaXMudG9NZXNzYWdlKGtleSwgdGhpcy5zaG93W2tleV0pKVxuICAgICAgICAvLyBpZiBhbiBudWxsIG1lc3NhZ2UgaXMgcmV0dXJuZWQsIGl0IHdpbGwgbm90IGJlIGRpc3BsYXllZFxuICAgICAgICAuZmlsdGVyKG1lc3NhZ2UgPT4gbWVzc2FnZSAhPT0gbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRvTWVzc2FnZShrZXksIHZhbHVlKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VNYXBba2V5XTtcbiAgICBpZiAoKCFtZXNzYWdlIHx8IG1lc3NhZ2UgPT09IFZhbGlkYXRpb25QYXR0ZXJuLm1lc3NhZ2VzLnBhdHRlcm4pICYmIGtleSA9PT0gJ3BhdHRlcm4nICYmIHR5cGVvZiB2YWx1ZT8ucmVxdWlyZWRQYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgcGF0dGVybiA9IHZhbHVlLnJlcXVpcmVkUGF0dGVybi5yZXBsYWNlKC9eXFwvLywgJycpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gICAgICBjb25zdCBmb3VuZFBhdHRlcm4gPSBPYmplY3Qua2V5cyhWYWxpZGF0aW9uUGF0dGVybi5ydWxlcykuZmluZCh0bXAgPT4gVmFsaWRhdGlvblBhdHRlcm4ucnVsZXNbdG1wXS5wYXR0ZXJuPy5zb3VyY2UgPT09IHBhdHRlcm4pO1xuICAgICAgaWYgKGZvdW5kUGF0dGVybikge1xuICAgICAgICBrZXkgPSBmb3VuZFBhdHRlcm47XG4gICAgICAgIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VNYXBba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KG1lc3NhZ2UsIHZhbHVlKTtcbiAgfVxufVxuIl19