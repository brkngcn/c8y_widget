import { Component, ComponentFactoryResolver, EventEmitter, Host, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { WizardComponent } from '../wizard.component';
import { WizardService } from '../wizard.service';
export class WizardOutletComponent {
    constructor(wizardComponent, router, c8yWizardService, resolver) {
        this.wizardComponent = wizardComponent;
        this.router = router;
        this.c8yWizardService = c8yWizardService;
        this.resolver = resolver;
        /**
         * The event that is emitted when the wizard entry is clicked.
         */
        this.onSelect = new EventEmitter();
        /**
         * The initial state to be assigned to the created component.
         */
        this.initialState = {};
        /**
         * List of wizard entries.
         */
        this.entries = [];
        /**
         * @ignore
         */
        this.showList = true;
        /**
         * @ignore
         */
        this.destroy$ = new Subject();
    }
    ngAfterViewInit() {
        this.c8yWizardService
            .getEntriesListById(this.wizardComponent.id)
            .pipe(takeUntil(this.destroy$))
            .subscribe((entries) => {
            this.container.clear();
            this.entries = entries;
            this.onEntriesLoaded();
        });
        this.wizardComponent.onReset.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.componentInstance) {
                this.componentInstance = undefined;
                this.container.clear();
                this.showList = true;
            }
        });
    }
    /**
     * Handles the wizard entry, if the entry contains a path, the user will be redirected to it.
     * Otherwise, an attempt will be made to create a dynamic component provided in the entry.
     * @param entry Wizard menu entry.
     */
    handleEntry(entry = {}) {
        const { path, component } = entry;
        if (path) {
            this.handlePath(path);
            return;
        }
        if (component) {
            this.handleComponent(component);
            this.onSelect.emit(entry);
        }
    }
    ngOnDestroy() {
        if (this.componentInstance) {
            this.container.clear();
        }
        this.destroy$.next(true);
        this.destroy$.unsubscribe();
    }
    onEntriesLoaded() {
        const [firstEntry] = this.entries;
        const isSingleEntry = this.entries.length === 1;
        const shouldRedirectToPath = firstEntry && !!firstEntry.path;
        const shouldOmitListOfEntries = isSingleEntry && !shouldRedirectToPath;
        if (shouldOmitListOfEntries) {
            this.handleEntry(firstEntry);
        }
    }
    handlePath(path) {
        this.router.navigateByUrl(path);
        if (this.wizardComponent) {
            this.wizardComponent.close();
        }
    }
    handleComponent(component) {
        this.showList = false;
        const factory = this.resolver.resolveComponentFactory(component);
        const componentInstance = this.container.createComponent(factory);
        Object.assign(componentInstance.instance, this.initialState);
        this.componentInstance = componentInstance;
    }
}
WizardOutletComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-wizard-outlet',
                template: "<ng-container>\n  <div class=\"modal-inner-scroll animated fadeIn\" *ngIf=\"showList\">\n    <p class=\"p-16 text-center text-medium separator-bottom\">\n      <span translate>Select method</span>\n    </p>\n    <div class=\"list-group list-group-links\" *ngIf=\"entries.length > 0; else emptyState\">\n      <button\n        *ngFor=\"let entry of entries\"\n        type=\"button\"\n        class=\"list-group-item d-flex a-i-center p-t-8 p-b-8\"\n        (click)=\"handleEntry(entry)\"\n      >\n        <div class=\"list-item-icon\">\n          <i [c8yIcon]=\"entry.c8yIcon || 'cogs'\"></i>\n        </div>\n        <div title=\"{{ entry.name | translate }}\" class=\"list-item-body text-truncate\">\n          {{ entry.name | translate }}\n        </div>\n      </button>\n    </div>\n\n    <ng-template #emptyState>\n      <div class=\"c8y-empty-state\">\n        <p>{{ 'No options available.' | translate }}</p>\n      </div>\n    </ng-template>\n  </div>\n</ng-container>\n<template #container [hidden]=\"showList\"></template>\n"
            },] }
];
WizardOutletComponent.ctorParameters = () => [
    { type: WizardComponent, decorators: [{ type: Host }] },
    { type: Router },
    { type: WizardService },
    { type: ComponentFactoryResolver }
];
WizardOutletComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    onSelect: [{ type: Output }],
    initialState: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,