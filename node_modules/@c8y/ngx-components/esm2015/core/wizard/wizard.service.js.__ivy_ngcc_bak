import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Subject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { fromTrigger, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { WizardComponent } from './wizard.component';
import { HOOK_WIZARD } from './wizard.model';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
import * as i2 from "@angular/router";
export class WizardService extends StateService {
    constructor(bsModalService, injector, router) {
        super();
        this.bsModalService = bsModalService;
        this.injector = injector;
        this.router = router;
        /** Wizard header subject. It emits header template. */
        this.headerTemplate$ = new Subject();
        /** Wizard body subject. It emits body template. */
        this.bodyTemplate$ = new Subject();
        /** Wizard footer subject. It emits footer template. */
        this.footerTemplate$ = new Subject();
        /**
         * @ignore
         */
        this.state$ = new BehaviorSubject(new Set());
        /** Refresh the extension factories subject. */
        this.refreshTrigger = new Subject();
        /** Additional factories that can be added by plugins. */
        this.factories = [];
        this.items$ = fromTrigger(this.router, this.refreshTrigger, [
            () => this.injector.get(HOOK_WIZARD, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map(entries => this.getUniqueListBy(entries, 'name', 'wizardId')), shareReplay(1));
    }
    /**
     * Returns the current state.
     * @returns The current set of entries.
     * @readonly
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Refresh the extension factories.
     */
    refresh() {
        this.refreshTrigger.next();
    }
    /**
     * Adds a new entry in the wizard.
     * @param entry Wizard entry to add.
     */
    add(entry) {
        this.state.add(entry);
        this.emitNewState();
    }
    /**
     * Removes entry from the wizard.
     * @param entry Wizard entry to remove.
     */
    remove(entry) {
        this.state.delete(entry);
        this.emitNewState();
    }
    /**
     * List of wizard entries matching the given id.
     * @param id
     * @returns observable with list of wizard entries.
     */
    getEntriesListById(id) {
        return this.items$.pipe(map(entries => entries.filter(entry => entry.wizardId === id)));
    }
    /**
     * Shows a wizard modal.
     * @param modalOptions Modal options.
     * @returns a reference to the modal.
     */
    show(modalOptions = {}) {
        const options = Object.assign({ class: 'modal-sm', backdrop: 'static' }, modalOptions);
        return this.bsModalService.show(WizardComponent, options);
    }
    getUniqueListBy(entries, ...keys) {
        return [
            ...new Map(entries.map(item => [this.getUniqIdentifierForKeys(item, keys), item])).values()
        ];
    }
    getUniqIdentifierForKeys(entry, keys) {
        return keys.map(key => entry[key]).join('_');
    }
}
WizardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WizardService_Factory() { return new WizardService(i0.ɵɵinject(i1.BsModalService), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i2.Router)); }, token: WizardService, providedIn: "root" });
WizardService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
WizardService.ctorParameters = () => [
    { type: BsModalService },
    { type: Injector },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,