import { matches, snakeCase } from 'lodash-es';
/**
 * Base navigator node. Represents a single entry in the navigator menu.
 * Is considered to be the basic building block of the navigator.
 */
export class NavigatorNode {
    /**
     * @ignore
     */
    constructor(data) {
        /**
         * Navigator node children (subentries).
         */
        this.children = [];
        /**
         * Navigator node parent nodes.
         */
        this.parents = [];
        /**
         * Indicates whether the navigator node should be active based on matching the node path and the URL path.
         * To match the URL exactly, set this option to true.
         *
         * routerLinkExact set to true:
         * When the URL path is set to /a/b/c and the node path to /a/b then the node will not be set active.
         *
         * routerLinkExact set to false:
         * When the URL path is set to /a/b/c and the node path to /a/b then the node will be set active.
         */
        this.routerLinkExact = true;
        /**
         * Indicates that the navigator node is expanded/collapsed.
         */
        this.open = false;
        /**
         * Indicates that the navigator node is visible/hidden.
         */
        this.hidden = false;
        /**
         * Indicates that the navigator node is draggable.
         */
        this.draggable = false;
        /**
         * Indicates that the navigator node is droppable.
         */
        this.droppable = false;
        /**
         * Indicates that the navigator node is dragged.
         */
        this.dragged = false;
        /**
         * Indicates that currently something is dragged over the node.
         */
        this.draggedHover = false;
        /**
         * Confirmation popover displayed at the end of the process of moving the navigator menu item.
         */
        this.confirm = undefined;
        this._priority = 0;
        this.update(data);
    }
    /**
     * Returns information whether a navigator node has children.
     * @readonly
     */
    get hasChildren() {
        return this.children.length > 0;
    }
    /**
     * Returns the ID of the navigator node.
     * @readonly
     */
    get id() {
        return 'navigator_node_' + snakeCase(this.label);
    }
    /**
     * Returns the priority value of the navigator node.
     * @readonly
     */
    get priority() {
        if (this._priority) {
            return this._priority;
        }
        else {
            const childrenPriorities = this.children.map(({ priority }) => priority || 0);
            if (childrenPriorities.length) {
                return childrenPriorities.length ? Math.max(...childrenPriorities) : 0;
            }
            return 0;
        }
    }
    /**
     * Sets the priority value of the navigator node.
     *
     * @param {number} priority Priority value.
     */
    set priority(priority) {
        this._priority = priority;
    }
    /**
     * @ignore
     */
    openOnStart(url) {
        return false;
    }
    /**
     * Adds a child navigator node to the node.
     *
     * @param {NavigatorNode} node Child node.
     */
    add(node) {
        if (node === this) {
            throw new Error('Adding node to itself');
        }
        if (this.children.indexOf(node) === -1) {
            this.children.push(node);
        }
        if (node.parents.indexOf(this) === -1) {
            node.parents.push(this);
        }
        this.updateChildren();
    }
    /**
     * Removes the child navigator node from the node.
     *
     * @param {NavigatorNode} node Child node.
     */
    remove(node) {
        const ix = this.children.indexOf(node);
        const pix = node.parents.indexOf(this);
        if (ix > -1) {
            this.children.splice(ix, 1);
        }
        if (pix > -1) {
            node.parents.splice(pix, 1);
        }
        this.updateChildren();
    }
    /**
     * Updates the navigator node.
     *
     * @param {NavigatorNodeData} data Data to be updated.
     */
    update(data) {
        if (data) {
            Object.assign(this, data);
            if (data.hidden !== undefined) {
                this.parents.forEach(p => {
                    p.updateHidden();
                });
            }
        }
    }
    /**
     * Returns a child navigator node based on the predicate.
     *
     * @param {string|object} predicate Filter criteria.
     * @param {string} findBy NavigatorNode field name to compare.
     *
     * @example
     * ```ts
     * // The function will compare the labels to the string and return a matching result.
     * // The capitalization of the characters does not matter (case insensitive).
     * const predicate = 'group1';
     * const childNode = parentNode.find(predicate);
     *
     * // Check: [lodash matches](https://lodash.com/docs/4.17.15#matches)
     * const predicate = { label: 'group2' };
     * const childNode = parentNode.find(predicate);
     * ```
     */
    find(predicate, findBy = 'label') {
        if (typeof predicate === 'string') {
            if (findBy === 'label') {
                const compareLabel = predicate.toLocaleLowerCase();
                predicate = ({ label }) => compareLabel === label.toLowerCase();
            }
            else {
                const compareId = predicate;
                predicate = ({ featureId }) => compareId === featureId;
            }
        }
        if (typeof predicate === 'object') {
            predicate = matches(predicate);
        }
        if (typeof predicate !== 'function') {
            throw new Error('Invalid search predicate');
        }
        return this.children.reduce((found, child) => found || child.find(predicate), this.children.find(predicate));
    }
    /**
     * Removes children nodes.
     */
    empty() {
        this.children.length = 0;
    }
    /**
     * @ignore
     */
    click(options = {}) {
        // do nothing
    }
    /**
     * This event is fired when an element is dropped on a valid drop target.
     * @param $event DOM event.
     */
    drop($event) {
        $event.stopPropagation();
        clearTimeout(this.expandDragTimeout);
    }
    /**
     * This event is fired when the user starts dragging an element.
     * @param $event DOM event.
     */
    dragStart($event) {
        $event.stopPropagation();
        // we can't pass a object to setData, so we do it via service
        // set data is still needed, to make the drag&drop work
        $event.dataTransfer.setData('node', 'node');
        this.dragged = true;
    }
    /**
     * This event is fired when a drag operation has ended.
     * @param $event DOM event.
     */
    dragEnd($event) {
        $event.stopPropagation();
        this.dragged = false;
    }
    /**
     * Returns information whether the navigator node is droppable.
     * @readonly
     */
    get canDrop() {
        return this.droppable;
    }
    /**
     * Returns information whether navigation is possible.
     * @readonly
     */
    get canNavigate() {
        return typeof this.path !== 'undefined';
    }
    /**
     * This event is fired when a dragged element enters a valid drop target.
     * @param $event DOM event.
     */
    dragEnter($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = true;
        if (!this.open) {
            this.expandDragTimeout = setTimeout(() => this.expand(), 1000);
        }
    }
    /**
     * This event is fired when a dragged element leaves a valid drop target.
     * @param $event DOM event.
     */
    dragLeave($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = false;
        clearTimeout(this.expandDragTimeout);
    }
    /**
     * Expands the navigator node if it is collapsed.
     */
    expand() {
        if (!this.open) {
            this.open = true;
            this.click({ open: true, expander: true });
        }
    }
    /**
     * Performs a callback function recursively on each of the navigator node's children down the hierarchy.
     * @param {function} callback Function to be called.
     *
     * @example
     * ```ts
     * const expandChild = (childNode) => childNode.expand();
     * parentNode.traverse(expandChild);
     * ```
     */
    traverse(callback) {
        if (this.children) {
            this.children.forEach(child => {
                callback(child);
                child.traverse(callback);
            });
        }
    }
    /**
     * @ignore
     */
    destroy() {
        // nothing todo here
    }
    /**
     * Counts the amount of children nodes.
     */
    countChildren() {
        return this.children.length;
    }
    /**
     * Identifies itself.
     */
    toString() {
        return NavigatorNode.NAME;
    }
    hasChildDevices() {
        return false;
    }
    /**
     * Updates the navigator node by sorting its children and also checking their visibility.
     */
    updateChildren() {
        this.sort();
        this.updateHidden();
    }
    /**
     * Sorts the children of the navigator node, by priority and name (ASC).
     * The higher the priority, the higher the position in the hierarchy.
     * For the same priority values, the alphabetical order will take precedence.
     */
    sort() {
        this.children.sort((a, b) => {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else if ((a.label || '').toLowerCase() < (b.label || '').toLowerCase()) {
                return -1;
            }
            else if ((a.label || '').toLowerCase() > (b.label || '').toLowerCase()) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
    /**
     * Checks if the navigator node should be hidden based on the visibility of its child nodes.
     */
    updateHidden() {
        if (typeof this.path === 'undefined') {
            this.hidden = !this.children.some(({ hidden }) => !hidden);
        }
    }
}
NavigatorNode.NAME = 'NavigatorNode';
//# sourceMappingURL=data:application/json;base64,