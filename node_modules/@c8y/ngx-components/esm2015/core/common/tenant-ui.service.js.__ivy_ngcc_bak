import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, GrantType, TenantLoginOptionType, UserManagementSource, UserService, ApplicationType } from '@c8y/client';
import { get } from 'lodash-es';
import { AppStateService } from './ui-state.service';
/** The helper UI service for tenant related methods built upon client services. */
export class TenantUiService {
    constructor(userService, appStateService, applicationService) {
        this.userService = userService;
        this.appStateService = appStateService;
        this.applicationService = applicationService;
        this.MANAGEMENT = 'management';
        this.ROLE_TENANT_MANAGEMENT_READ = 'ROLE_TENANT_MANAGEMENT_READ';
    }
    /**
     * Returns current tenant
     */
    get currentTenant() {
        return this.appStateService.currentTenant.value;
    }
    /**
     * Checks whether current tenant is the management tenant.
     * @returns True if current tenant is the management tenant.
     */
    isManagementTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appStateService.currentTenant.value;
            return this.isManagement(currentTenant);
        });
    }
    /**
     * Checks whether current tenant is an enterprise tenant.
     * An enterprise tenant is a tenant which has subscribed:
     * - `branding` microservice or `feature-branding` feature app,
     * - `sslmanagement` microservice,
     * - `feature-user-hierarchy` feature app,
     * - `feature-broker` feature app.
     *
     * See https://cumulocity.com/guides/users-guide/enterprise-edition/ for details about such tenants.
     *
     * @returns True, if current tenant is an enterprise tenant.
     */
    isEnterpriseTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            const hasBranding = (yield this.hasApp({ name: 'branding' })) ||
                (yield this.hasApp({ name: 'feature-branding' }));
            const hasSslManagement = yield this.hasApp({ name: 'sslmanagement' });
            const hasUserHierarchy = yield this.hasApp({ name: 'feature-user-hierarchy' });
            const hasDataBroker = yield this.hasApp({ name: 'feature-broker' });
            return hasBranding && hasSslManagement && hasUserHierarchy && hasDataBroker;
        });
    }
    /**
     * Checks whether the current user has read access to tenants, i.e.:
     * - the current tenant can create subtenants or it's the management tenant,
     * - the current user has ROLE_TENANT_MANAGEMENT_READ role.
     * @returns True, if the current user has read access to tenants.
     */
    canReadTenants() {
        const currentTenant = this.appStateService.currentTenant.value;
        const currentUser = this.appStateService.currentUser.value;
        return ((this.isManagement(currentTenant) || currentTenant.allowCreateTenants) &&
            this.userService.hasRole(currentUser, this.ROLE_TENANT_MANAGEMENT_READ));
    }
    /**
     * Returns tenant login option which is preferred.
     *
     * @param All available tenant's login options.
     *
     * @returns Returns ITenantLoginOption.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const preferredLoginOption = tenantLoginOptionsService.getPreferredLoginOption(loginOptions);
     *   })();
     * ```
     */
    getPreferredLoginOption(loginOptions) {
        const defaultFallback = { type: TenantLoginOptionType.BASIC, userManagementSource: UserManagementSource.INTERNAL };
        if (!loginOptions) {
            return defaultFallback;
        }
        else {
            const visibleLoginOptions = loginOptions.filter(this.isVisibleOnLoginPage);
            return visibleLoginOptions.find(this.isOauthInternal)
                || visibleLoginOptions.find(this.isBasic)
                || visibleLoginOptions.find(this.isOauth2)
                || defaultFallback;
        }
    }
    /**
     * Returns Oauth2 login option if it can be used by UI.
     *
     * @param All available tenant's login options.
     *
     * @returns Returns ITenantLoginOption.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2 = tenantLoginOptionsService.getOauth2Option(loginOptions);
     *   })();
     * ```
     */
    getOauth2Option(loginOptions) {
        return loginOptions.find(loginOption => this.isVisibleOnLoginPage(loginOption) && this.isOauth2(loginOption));
    }
    /**
     * Callback which checks if login option is visible on login page.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const loginOptionsVisibleOnLoginPage = loginOptions.filter(tenantLoginOptionsService.isVisibleOnLoginPage);
     *   })();
     * ```
     */
    isVisibleOnLoginPage(loginOption) {
        return loginOption.visibleOnLoginPage;
    }
    /**
     * Callback which checks if login option type is 'OAUTH2_INTERNAL'.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2InternalLoginOptions = loginOptions.filter(tenantLoginOptionsService.isOauthInternal);
     *   })();
     * ```
     */
    isOauthInternal(loginOption) {
        return loginOption.type === TenantLoginOptionType.OAUTH2_INTERNAL;
    }
    /**
     * Callback which checks if login option type is 'BASIC'.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const basicLoginOptions = loginOptions.filter(tenantLoginOptionsService.isBasic);
     *   })();
     * ```
     */
    isBasic(loginOption) {
        return loginOption.type === TenantLoginOptionType.BASIC;
    }
    /**
     * Callback which checks if login option type is 'OAUTH2' and grantType is 'AUTHORIZATION_CODE'.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2LoginOptions = loginOptions.filter(tenantLoginOptionsService.OAUTH2);
     *   })();
     * ```
     */
    isOauth2(loginOption) {
        return loginOption.type === TenantLoginOptionType.OAUTH2 && loginOption.grantType === GrantType.AUTHORIZATION_CODE;
    }
    /**
     * Checks if application of type MICROSERVICE is subscribed to the current tenant.
     * It checks the application references of the currentTenant from the application state.
     * No additional request.
     * @param identifier application name or contextPath
     */
    isMicroserviceSubscribedInCurrentTenant(identifier) {
        if ((identifier === null || identifier === void 0 ? void 0 : identifier.length) > 0) {
            const microservices = this.getSubscribedMicroservicesInCurrentTenant();
            return microservices.some(({ name, contextPath }) => [name, contextPath].includes(identifier));
        }
        return false;
    }
    /**
     * Gets all application of type MICROSERVICE subscribed to the current tenant.
     * It checks the application references of the currentTenant from the application state.
     * No additional request.
     */
    getSubscribedMicroservicesInCurrentTenant() {
        const references = get(this.appStateService.currentTenant, 'value.applications.references', []);
        return references.map(appRef => appRef.application).filter(app => app.type === ApplicationType.MICROSERVICE);
    }
    hasApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.applicationService.isAvailable(app)).data;
        });
    }
    isManagement(currentTenant) {
        return currentTenant.name === this.MANAGEMENT;
    }
}
TenantUiService.decorators = [
    { type: Injectable }
];
TenantUiService.ctorParameters = () => [
    { type: UserService },
    { type: AppStateService },
    { type: ApplicationService }
];
//# sourceMappingURL=data:application/json;base64,