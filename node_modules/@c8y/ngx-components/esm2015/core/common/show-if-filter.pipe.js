import { Pipe } from '@angular/core';
import { entries, mapValues, omitBy } from 'lodash-es';
import { combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { toObservable } from './extension-hooks';
import * as ɵngcc0 from '@angular/core';
export class ShowIfFilterPipe {
    transform(value) {
        const observableShowIfMap = mapValues(value, val => {
            if (typeof val.showIf === 'boolean') {
                return of(val.showIf);
            }
            else if (typeof val.showIf === 'function') {
                return toObservable(val.showIf());
            }
            else {
                return of(true);
            }
        });
        return combineLatest(entries(observableShowIfMap).map(([key, val]) => val.pipe(map(showIf => ({ key, showIf }))))).pipe(map((allShowIfs) => {
            allShowIfs.forEach(showIf => (value[showIf.key].showIf = showIf.showIf));
            return omitBy(value, (v) => !v.showIf);
        }));
    }
}
ShowIfFilterPipe.ɵfac = function ShowIfFilterPipe_Factory(t) { return new (t || ShowIfFilterPipe)(); };
ShowIfFilterPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "showIfFilter", type: ShowIfFilterPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShowIfFilterPipe, [{
        type: Pipe,
        args: [{ name: 'showIfFilter' }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1pZi1maWx0ZXIucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9jb21tb24vc2hvdy1pZi1maWx0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7QUFHakQsTUFBTSxPQUFPLGdCQUFnQjtBQUFHLElBQzlCLFNBQVMsQ0FNUCxLQUFRO0FBQUksUUFDWixNQUFNLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDdkQsWUFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7QUFDM0MsZ0JBQVEsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLGFBQU87QUFBQyxpQkFBSyxJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7QUFDbkQsZ0JBQVEsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDMUMsYUFBTztBQUFDLGlCQUFLO0FBQ2IsZ0JBQVEsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsYUFBTztBQUNQLFFBQUksQ0FBQyxDQUFlLENBQUM7QUFDckIsUUFDSSxPQUFPLGFBQWEsQ0FDbEIsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUM5QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ1ksQ0FDekQsQ0FBQyxJQUFJLENBQ0osR0FBRyxDQUFDLENBQUMsVUFBbUQsRUFBRSxFQUFFO0FBQ2xFLFlBQVEsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDakYsWUFBUSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwRSxRQUFNLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDs0Q0E5QkMsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTs7Ozs7MEJBQ3pCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBlbnRyaWVzLCBtYXBWYWx1ZXMsIG9taXRCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdG9PYnNlcnZhYmxlIH0gZnJvbSAnLi9leHRlbnNpb24taG9va3MnO1xuXG5AUGlwZSh7IG5hbWU6ICdzaG93SWZGaWx0ZXInIH0pXG5leHBvcnQgY2xhc3MgU2hvd0lmRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm08XG4gICAgVCBleHRlbmRzIHtcbiAgICAgIFtrZXk6IHN0cmluZ106IHtcbiAgICAgICAgc2hvd0lmPzogYm9vbGVhbiB8ICgoKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiB8IE9ic2VydmFibGU8Ym9vbGVhbj4pO1xuICAgICAgfTtcbiAgICB9XG4gID4odmFsdWU6IFQpOiBPYnNlcnZhYmxlPFBhcnRpYWw8VD4+IHtcbiAgICBjb25zdCBvYnNlcnZhYmxlU2hvd0lmTWFwID0gbWFwVmFsdWVzKHZhbHVlLCB2YWwgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWwuc2hvd0lmID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9mKHZhbC5zaG93SWYpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsLnNob3dJZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdG9PYnNlcnZhYmxlKHZhbC5zaG93SWYoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgICB9XG4gICAgfSkgYXMgUGFydGlhbDxUPjtcblxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFxuICAgICAgZW50cmllcyhvYnNlcnZhYmxlU2hvd0lmTWFwKS5tYXAoKFtrZXksIHZhbF0pID0+XG4gICAgICAgIHZhbC5waXBlKG1hcChzaG93SWYgPT4gKHsga2V5LCBzaG93SWYgfSkpKVxuICAgICAgKSBhcyBBcnJheTxPYnNlcnZhYmxlPHsga2V5OiBzdHJpbmc7IHNob3dJZjogYm9vbGVhbiB9Pj5cbiAgICApLnBpcGUoXG4gICAgICBtYXAoKGFsbFNob3dJZnM6IEFycmF5PHsga2V5OiBzdHJpbmc7IHNob3dJZjogYm9vbGVhbiB9PikgPT4ge1xuICAgICAgICBhbGxTaG93SWZzLmZvckVhY2goc2hvd0lmID0+ICh2YWx1ZVtzaG93SWYua2V5XS5zaG93SWYgPSBzaG93SWYuc2hvd0lmKSk7XG4gICAgICAgIHJldHVybiBvbWl0QnkodmFsdWUsICh2OiB7IHNob3dJZjogYm9vbGVhbiB9KSA9PiAhdi5zaG93SWYpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=