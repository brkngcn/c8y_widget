import { __awaiter, __decorate } from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { keys, get } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { scan, distinctUntilChanged, map, filter } from 'rxjs/operators';
import { StateService } from './state-service.abstract';
import { OptionsService } from './options.service';
import { FetchClient, TenantLoginOptionsService } from '@c8y/client';
import { ApplicationService } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
import { throttle } from './throttle.decorator';
export class AppStateService extends StateService {
    constructor(applicationService, apiService, options, fetchClient, tenantLoginOptionsService) {
        super();
        this.applicationService = applicationService;
        this.apiService = apiService;
        this.options = options;
        this.fetchClient = fetchClient;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.state$ = new BehaviorSubject({
            app: {
                name: this.options.name,
                contextPath: this.getCurrentContextPath() || this.options.contextPath
            },
            supportUrl: this.options.supportUrl,
            lang: this.options.get('defaultLanguage', 'en'),
            langs: this.getLangs(),
            langsDetail: this.options.languages,
            loginOptions: this.options.loginOptions,
            activateSupportUserAvailable: undefined,
            versions: {
                backend: undefined,
                ui: this.options.versions || { ngx: undefined }
            },
            hidePowered: this.options.hidePowered,
            isLoading: false,
            showRightDrawer: this.options.rightDrawer,
            loginExtraLink: this.options.get('login_extra_link'),
            newsletter: this.options.newsletter
        });
        this.currentSupportUserName = new BehaviorSubject(null);
        this.currentUser = new BehaviorSubject(null);
        this.currentTenant = new BehaviorSubject(null);
        this.currentApplication = new BehaviorSubject(null);
        this.currentApplicationConfig = new BehaviorSubject(null);
        this.apiService.calls
            .pipe(filter(({ url }) => !/notification\/realtime/.test(url)), map(({ phase }) => (phase === 'start' ? 1 : -1)), scan((count, item) => count + item, 0), map(count => count > 0), distinctUntilChanged())
            .subscribe(isLoading => (this.state.isLoading = isLoading));
        this.assignApplicationKeyToDefaultHeaders();
    }
    assignApplicationKeyToDefaultHeaders() {
        if (!isDevMode()) {
            this.fetchClient.defaultHeaders = Object.assign(Object.assign({}, (this.fetchClient.defaultHeaders || {})), { 'X-Cumulocity-Application-Key': this.options.key });
        }
    }
    /**
     * Returns the current state.
     */
    get state() {
        return this.state$.value;
    }
    getLangs() {
        const { languages } = this.options;
        return languages ? keys(languages).filter(k => languages[k]) : [];
    }
    /**
     * Returns the correct UI version. In hybrid mode for angular and ngx.
     */
    get uiVersion() {
        const version = this.state.versions.ui;
        return version.ngx || version.ng1;
    }
    /**
     * Loads the app manifest. If no access -> throw an error to verify app access.
     */
    loadManifest() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { application } = (yield this.applicationService.detail(`${this.state.app.contextPath}/manifest`)).data;
                this.state.app.manifest = application;
                this.state.app.id = application.id;
                const { data } = yield this.applicationService.detail(application.id);
                this.currentApplication.next(data);
                this.currentApplicationConfig.next(data.config);
                yield this.loadDefaultOptions();
            }
            catch (ex) {
                throw ex;
            }
        });
    }
    /**
     * Dynamic options are stored on the API in a specific config: {} object. They can
     * be used to configure the app dynamically.
     *
     * Note: To avoids conflicts with the default Config, it is recommended
     * to use a certain namespace.
     */
    updateApplicationConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: currentApp } = yield this.applicationService.detail(this.state.app.id);
            const currentConfig = (currentApp === null || currentApp === void 0 ? void 0 : currentApp.config) || {};
            const newConfig = Object.assign(Object.assign({}, currentConfig), config);
            this.currentApplicationConfig.next(newConfig);
            return this.applicationService.update({
                id: this.state.app.id,
                config: newConfig
            });
        });
    }
    /**
     * When this function called, it refreshes the values of loginOptions stored within ui state object.
     * Function is throttled to execute the refresh once in a time specified by params of @throttled decorator,
     * it should be called on leading edge of the timeout.
     */
    refreshLoginOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const loginOptions = (yield this.tenantLoginOptionsService.listForCurrentTenant()).data;
            this.state$.next(Object.assign(Object.assign({}, this.state), { loginOptions }));
        });
    }
    /**
     * Checks current users application list and matches it against given application name.
     * Returns true if application is in the list.
     * @param name application name
     */
    isApplicationAvailable(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser(undefined, { pageSize: 100 });
            return data.some(app => app.name === name);
        });
    }
    /**
     * Sets current user (including support user).
     * @param userInfo Info about current user and support user to be set.
     */
    setUser(userInfo) {
        this.currentSupportUserName.next(userInfo.supportUserName || null);
        this.currentUser.next(userInfo.user);
    }
    /**
     * Verifies if the current application is owned by the current tenant.
     * @param app The application to verify.
     * @returns true if it belongs to the current tenant.
     */
    isOwnerOfApplication(app) {
        if (!app) {
            app = this.currentApplication.value;
        }
        const currentTenant = this.currentTenant.value;
        const appOwner = get(app, 'owner.tenant.id');
        return currentTenant.name === appOwner;
    }
    getCurrentContextPath() {
        const match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
        return match && match[2];
    }
    loadDefaultOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            this.state.supportUrl = yield this.options.getSupportUrl();
            this.state.activateSupportUserAvailable = yield this.options.getActivateSupportUser();
            this.state.versions.backend = yield this.options.getSystemOption('system', 'version');
            try {
                this.showIncompatibleVersionsError();
            }
            catch (ex) {
                // ignore this
            }
            this.emitNewState();
        });
    }
    showIncompatibleVersionsError() {
        const uiVersion = this.state.versions.ui.ngx;
        const backendVersion = this.state.versions.backend;
        const uiVersionArray = uiVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        const beVersionArray = backendVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        const multiplier = Math.pow(10, Math.ceil(Math.log10(Math.max(...uiVersionArray, ...beVersionArray) + 1)));
        const sumReducer = (acc, cur) => acc + cur;
        const calculateVersionMapper = (curr, idx) => curr * (multiplier / Math.pow(10, idx));
        const uiVersionNumber = uiVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        const beVersionNumber = beVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        const showError = uiVersionNumber > beVersionNumber;
        if (showError) {
            const errorContent = `You are running version ${uiVersion} of the UI and version ${backendVersion} of backend!`;
            console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
        }
    }
}
AppStateService.decorators = [
    { type: Injectable }
];
AppStateService.ctorParameters = () => [
    { type: ApplicationService },
    { type: ApiService },
    { type: OptionsService },
    { type: FetchClient },
    { type: TenantLoginOptionsService }
];
__decorate([
    throttle(600, { trailing: false })
], AppStateService.prototype, "refreshLoginOptions", null);
//# sourceMappingURL=data:application/json;base64,