import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryBinaryService, SystemOptionsService } from '@c8y/client';
import { every, first, flatten, get, isNaN, isUndefined, keys, map, uniq } from 'lodash-es';
import { saveAs } from 'file-saver';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/system-options/SystemOptionsService";
import * as i2 from "@c8y/client/lib/src/inventory/InventoryBinaryService";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export var GENERIC_FILE_TYPE;
(function (GENERIC_FILE_TYPE) {
    GENERIC_FILE_TYPE["ARCHIVE"] = "archive";
    GENERIC_FILE_TYPE["AUDIO"] = "audio";
    GENERIC_FILE_TYPE["CODE"] = "code";
    GENERIC_FILE_TYPE["EXCEL"] = "excel";
    GENERIC_FILE_TYPE["IMAGE"] = "image";
    GENERIC_FILE_TYPE["PDF"] = "pdf";
    GENERIC_FILE_TYPE["POWERPOINT"] = "powerpoint";
    GENERIC_FILE_TYPE["TEXT"] = "text";
    GENERIC_FILE_TYPE["VIDEO"] = "video";
    GENERIC_FILE_TYPE["WORD"] = "word";
    GENERIC_FILE_TYPE["EPL"] = "epl";
})(GENERIC_FILE_TYPE || (GENERIC_FILE_TYPE = {}));
export class FilesService {
    constructor(systemOptionsService, inventoryBinaryService) {
        this.systemOptionsService = systemOptionsService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.DEFAULT_BYTES_LIMIT = 52428800;
        this.FILENAME_MAX_LENGTH = 128;
        this.fileTypeExtensionsMap = {
            [GENERIC_FILE_TYPE.ARCHIVE]: {
                exts: ['7z', 'apk', 'cab', 'gz', 'iso', 'jar', 'rar', 'tar', 'zip']
            },
            [GENERIC_FILE_TYPE.AUDIO]: {
                exts: ['3gp', 'aiff', 'aac', 'amr', 'm4a', 'm4p', 'mp3', 'oga', 'ogg', 'raw', 'wav', 'wma']
            },
            [GENERIC_FILE_TYPE.CODE]: {
                exts: ['aspx', 'exe', 'htm', 'html', 'jad', 'js', 'json', 'jsp', 'php', 'xml']
            },
            [GENERIC_FILE_TYPE.EXCEL]: {
                exts: ['xls', 'xlsx']
            },
            [GENERIC_FILE_TYPE.IMAGE]: {
                exts: ['bmp', 'gif', 'jpeg', 'jpg', 'png', 'tiff', 'svg', 'ico']
            },
            [GENERIC_FILE_TYPE.PDF]: {
                exts: ['pdf']
            },
            [GENERIC_FILE_TYPE.POWERPOINT]: {
                exts: ['ppt', 'pptx']
            },
            [GENERIC_FILE_TYPE.TEXT]: {
                exts: ['txt']
            },
            [GENERIC_FILE_TYPE.VIDEO]: {
                exts: ['asf', 'avi', 'flv', 'mov', 'mp4', 'ogv', 'qt', 'rm', 'rmvb', 'wmv', '3gp']
            },
            [GENERIC_FILE_TYPE.WORD]: {
                exts: ['doc', 'docx']
            },
            [GENERIC_FILE_TYPE.EPL]: {
                exts: ['mon']
            }
        };
        this.fileSizeLimitCfg = {
            systemOption: {
                category: 'files',
                key: 'max.size'
            },
            defaultBytesLimit: this.DEFAULT_BYTES_LIMIT,
            actualBytesLimit: undefined
        };
    }
    /**
     * Checks if files have valid size.
     * @param files Files to check.
     * @returns Returns true if each file has the correct size.
     */
    haveValidSizes(files) {
        return __awaiter(this, void 0, void 0, function* () {
            const limit = yield this.loadBytesSizeLimit();
            return every(files, (f) => {
                return this.size(f) <= limit;
            });
        });
    }
    /**
     * Checks the system file size limit, if not available returns the default value.
     * Default limit: [DEFAULT_BYTES_LIMIT]{@link DEFAULT_BYTES_LIMIT}
     * @returns Returns promise with the limit value.
     */
    loadBytesSizeLimit() {
        return __awaiter(this, void 0, void 0, function* () {
            let bytesLimit = this.DEFAULT_BYTES_LIMIT;
            if (this.fileSizeLimitCfg.actualBytesLimit) {
                return this.fileSizeLimitCfg.actualBytesLimit;
            }
            const { systemOption } = this.fileSizeLimitCfg;
            try {
                const { data: { value: actualBytesLimit } } = yield this.systemOptionsService.detail(systemOption);
                if (!actualBytesLimit) {
                    return bytesLimit;
                }
                const parsedActualBytesLimit = parseInt(actualBytesLimit, 10);
                if (isNaN(parsedActualBytesLimit)) {
                    return bytesLimit;
                }
                this.fileSizeLimitCfg.actualBytesLimit = parsedActualBytesLimit;
                bytesLimit = parsedActualBytesLimit;
            }
            catch (error) {
                // do nothing
            }
            return bytesLimit;
        });
    }
    /**
     * Checks the size of the file
     * @param file File to check.
     * @returns Returns size of the file in bytes.
     */
    size(file) {
        const fileLength = get(file, 'length') || get(file, 'size');
        const attachments = get(file, '_attachments');
        const attachmentsObj = get(attachments, first(keys(attachments)));
        return isUndefined(fileLength) ? get(attachmentsObj, 'length') : fileLength;
    }
    /**
     * Checks whether files have allowed extensions.
     * If the accept parameter is not specified, all extensions are accepted.
     * @param files Files to check.
     * @param accept String of comma separated file extensions and generic types ([GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}), e.g. .zip,.7z,excel.
     * @returns  Returns true if each file has allowed extension.
     */
    haveValidExtensions(files, accept) {
        if (!accept) {
            return true;
        }
        const filesArray = files.item
            ? Array.from(files)
            : Array.isArray(files)
                ? files
                : [files];
        const filesExts = filesArray.map((file) => { var _a; return (_a = this.getFileExtension(file)) === null || _a === void 0 ? void 0 : _a.toLowerCase(); });
        const allowedExts = this.extractFileExtensions(accept);
        return filesExts.every(ext => allowedExts.includes(ext));
    }
    /**
     * Checks if each file has a valid filename length.
     * @param files Files to check.
     * @returns Returns true if each file has a valid filename length.
     */
    checkMaxLength(files) {
        return every(files, (f) => {
            return this.FILENAME_MAX_LENGTH > f.name.length;
        });
    }
    /**
     * Extracts the file extension.
     * @param file File from which the extension should be extracted.
     * @returns Returns the file extension or undefined if the file has no extension.
     */
    getFileExtension(file) {
        const fileNameAndFileExt = file.name.split('.');
        if (fileNameAndFileExt.length === 1) {
            // no file ext
            return undefined;
        }
        return fileNameAndFileExt.pop();
    }
    /**
     * List of file extensions.
     * @returns Returns list of file extensions.
     */
    getFileExtensions() {
        return uniq(flatten(map(this.fileTypeExtensionsMap, ({ exts }) => exts)));
    }
    /**
     * The list of generic file types.
     * @returns Returns the list of generic file types.
     */
    getGenericFileTypes() {
        return Object.keys(this.fileTypeExtensionsMap);
    }
    /**
     * @ignore
     */
    mapGenericFileTypesToExtensions(genericFileTypes = []) {
        const fileExts = genericFileTypes.map(gT => {
            const { exts } = this.fileTypeExtensionsMap[gT];
            return exts;
        });
        return uniq(flatten(fileExts));
    }
    /**
     * Extracts a list of file extensions from a string.
     * Can accept generic file types check: [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}.
     *
     * @param str String from which the file extensions are extracted (comma separated values).
     * Accepted string format:
     * * ".zip,.iso",
     * * "zip,ISO",
     * * "archive".
     * Important: generic types cannot contain a dot. All values with a dot are treated as a normal extension.
     * @returns Returns a list of the file extensions.
     */
    extractFileExtensions(str) {
        if (!str) {
            return [];
        }
        const types = str.split(',').map(t => t.toLowerCase().trim());
        const genericTypes = types.filter((t) => this.isGenericType(t));
        const defaultFileExts = types.filter((t) => !this.isGenericType(t));
        const allTypes = [
            ...this.mapGenericFileTypesToExtensions(genericTypes),
            ...defaultFileExts
        ].map(t => t.replace('.', ''));
        return uniq(allTypes);
    }
    /**
     * Converts a file to a base64 image string.
     *
     * @param file The file to convert to base 64.
     * @returns The image string in base64 format.
     */
    toBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }
    /**
     * Allows to get a File representation of an managed object binary. Can be used
     * to convert this file toBase64 to show it to the end-user.
     * @param binary The binary managed object
     * @returns The file representation.
     */
    getFile(binary) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.inventoryBinaryService.download(binary.id);
            const arrayBuffer = yield res.arrayBuffer();
            return new File([arrayBuffer], binary.name, { type: binary.contentType });
        });
    }
    /**
     * Allows to download a file (opens the browser download prompt).
     * @param binary The binary managed object.
     */
    download(binary) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.getFile(binary);
            saveAs(file);
        });
    }
    isGenericType(type) {
        return Object.values(GENERIC_FILE_TYPE).includes(type);
    }
}
FilesService.ɵfac = function FilesService_Factory(t) { return new (t || FilesService)(ɵngcc0.ɵɵinject(ɵngcc1.SystemOptionsService), ɵngcc0.ɵɵinject(ɵngcc1.InventoryBinaryService)); };
FilesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FilesService_Factory() { return new FilesService(i0.ɵɵinject(i1.SystemOptionsService), i0.ɵɵinject(i2.InventoryBinaryService)); }, token: FilesService, providedIn: "root" });
FilesService.ctorParameters = () => [
    { type: SystemOptionsService },
    { type: InventoryBinaryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilesService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.SystemOptionsService }, { type: ɵngcc1.InventoryBinaryService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,