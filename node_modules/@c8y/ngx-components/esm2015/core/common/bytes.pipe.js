import { Pipe } from '@angular/core';
import { isNaN, isFinite } from 'lodash-es';
/*
 * Converts the file size to a readable format.
 * Usage:
 *
 * ```html
 *  {{ myData | bytes }} <!-- e.g. 100.1 MB -->
 *
 * ```
 * Default precision is set to 1 decimal place.
 * To change the precision, pass an additional argument to pipe.

 * ```html
 * {{ myData | bytes: 5 }} <!-- e.g. 100.12345 MB -->
 * ```
 *
 */
import * as ɵngcc0 from '@angular/core';
export class BytesPipe {
    static bytes(bytes, precision) {
        if (isNaN(bytes) || !isFinite(bytes)) {
            return '-';
        }
        if (bytes === 0) {
            return 0;
        }
        const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];
        const num = Math.floor(Math.log(bytes) / Math.log(1000));
        // eslint-disable-next-line no-mixed-operators
        const result = (bytes / Math.pow(1000, Math.floor(num))).toFixed(precision);
        return `${result} ${units[num]}`;
    }
    transform(value, precision = 1) {
        return BytesPipe.bytes(value, precision);
    }
}
BytesPipe.ɵfac = function BytesPipe_Factory(t) { return new (t || BytesPipe)(); };
BytesPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "bytes", type: BytesPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BytesPipe, [{
        type: Pipe,
        args: [{ name: 'bytes' }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnl0ZXMucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9jb21tb24vYnl0ZXMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILE1BQU0sT0FBTyxTQUFTO0FBQUcsSUFDdkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFhLEVBQUUsU0FBaUI7QUFBSSxRQUMvQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQyxZQUFNLE9BQU8sR0FBRyxDQUFDO0FBQ2pCLFNBQUs7QUFDTCxRQUFJLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtBQUNyQixZQUFNLE9BQU8sQ0FBQyxDQUFDO0FBQ2YsU0FBSztBQUNMLFFBQUksTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFELFFBQUksTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM3RCxRQUFJLDhDQUE4QztBQUNsRCxRQUFJLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxHQUFHLFNBQUEsSUFBSSxFQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4RSxRQUNJLE9BQU8sR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7QUFDckMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxTQUFTLENBQUMsS0FBYSxFQUFFLFlBQW9CLENBQUM7QUFBSSxRQUNoRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUNIO3FDQXBCQyxJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFOzs7OzswQkFDbEI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzTmFOLCBpc0Zpbml0ZSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbi8qXG4gKiBDb252ZXJ0cyB0aGUgZmlsZSBzaXplIHRvIGEgcmVhZGFibGUgZm9ybWF0LlxuICogVXNhZ2U6XG4gKlxuICogYGBgaHRtbFxuICogIHt7IG15RGF0YSB8IGJ5dGVzIH19IDwhLS0gZS5nLiAxMDAuMSBNQiAtLT5cbiAqXG4gKiBgYGBcbiAqIERlZmF1bHQgcHJlY2lzaW9uIGlzIHNldCB0byAxIGRlY2ltYWwgcGxhY2UuXG4gKiBUbyBjaGFuZ2UgdGhlIHByZWNpc2lvbiwgcGFzcyBhbiBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBpcGUuXG5cbiAqIGBgYGh0bWxcbiAqIHt7IG15RGF0YSB8IGJ5dGVzOiA1IH19IDwhLS0gZS5nLiAxMDAuMTIzNDUgTUIgLS0+XG4gKiBgYGBcbiAqXG4gKi9cbkBQaXBlKHsgbmFtZTogJ2J5dGVzJyB9KVxuZXhwb3J0IGNsYXNzIEJ5dGVzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBzdGF0aWMgYnl0ZXMoYnl0ZXM6IG51bWJlciwgcHJlY2lzaW9uOiBudW1iZXIpOiBzdHJpbmcgfCBudW1iZXIge1xuICAgIGlmIChpc05hTihieXRlcykgfHwgIWlzRmluaXRlKGJ5dGVzKSkge1xuICAgICAgcmV0dXJuICctJztcbiAgICB9XG4gICAgaWYgKGJ5dGVzID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgdW5pdHMgPSBbJ2J5dGVzJywgJ2tCJywgJ01CJywgJ0dCJywgJ1RCJywgJ1BCJ107XG4gICAgY29uc3QgbnVtID0gTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZygxMDAwKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW1peGVkLW9wZXJhdG9yc1xuICAgIGNvbnN0IHJlc3VsdCA9IChieXRlcyAvIDEwMDAgKiogTWF0aC5mbG9vcihudW0pKS50b0ZpeGVkKHByZWNpc2lvbik7XG5cbiAgICByZXR1cm4gYCR7cmVzdWx0fSAke3VuaXRzW251bV19YDtcbiAgfVxuXG4gIHRyYW5zZm9ybSh2YWx1ZTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlciA9IDEpOiBzdHJpbmcgfCBudW1iZXIge1xuICAgIHJldHVybiBCeXRlc1BpcGUuYnl0ZXModmFsdWUsIHByZWNpc2lvbik7XG4gIH1cbn1cbiJdfQ==