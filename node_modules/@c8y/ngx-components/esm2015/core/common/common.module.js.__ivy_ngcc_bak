import { ScrollingModule } from '@angular/cdk/scrolling';
import { CommonModule as NgCommonModule } from '@angular/common';
import { APP_INITIALIZER, InjectionToken, NgModule } from '@angular/core';
import { DataModule } from '@c8y/ngx-components/api';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { distinctUntilChanged, filter, map, startWith, switchMap } from 'rxjs/operators';
import { I18nModule } from '../i18n/i18n.module';
import { TranslateService } from '../i18n/translate.service';
import { BytesPipe } from './bytes.pipe';
import { DatePipe } from './date.pipe';
import { DropdownDirectionDirective } from './dropdown-direction.directive';
import { EmptyStateComponent } from './empty-state/empty-state.component';
import { FilesService } from './files.service';
import { ForOfDirective } from './forOf.directive';
import { HumanizeAppNamePipe } from './humanize-app-name.pipe';
import { HumanizePipe } from './humanize.pipe';
import { IconDirective, ICONS } from './icon.directive';
import { IfAllowedDirective } from './if-allowed.directive';
import { LoadMoreComponent } from './load-more.component';
import { LoadingComponent } from './loading.component';
import { MapFunctionPipe } from './map-function.pipe';
import { NumberPipe } from './number.pipe';
import { OperationResultComponent } from './operation-result.component';
import { HOOK_OPTIONS, OptionsService } from './options.service';
import { OutletDirective } from './outlet.directive';
import { Permissions } from './permissions.service';
import { ProgressBarComponent } from './progress-bar.component';
import { ShortenUserNamePipe } from './shorten-user-name.pipe';
import { ShowIfFilterPipe } from './show-if-filter.pipe';
import { TenantUiService } from './tenant-ui.service';
import { TextareaAutoresizeDirective } from './textarea-autoresize.directive';
import { AppStateService } from './ui-state.service';
import { UserPreferencesService } from './user-preferences/user-preferences.service';
import { VirtualScrollWindowDirective } from './virtual-scroll/virtual-scroll-window.directive';
import { VirtualScrollerWrapperComponent } from './virtual-scroll/virtual-scroller-wrapper.component';
import { ZipService } from './zip.service';
export function initializeServices(translateService, state, userPreferences) {
    const initialize = () => {
        const queryStringLanguage = translateService.queryStringLang();
        const firstLanguage = translateService.firstSupportedLanguage();
        /*
          The ?lang parameter will prevent the user preference language from being activated
        */
        if (queryStringLanguage && translateService.getSupported(queryStringLanguage)) {
            translateService.switchToLanguage(queryStringLanguage);
        }
        else {
            state.currentUser
                .pipe(map(user => user && user.userName), filter(u => !!u), distinctUntilChanged(), switchMap(() => userPreferences.get('language')), startWith(firstLanguage), filter(lang => !!lang), distinctUntilChanged())
                .subscribe(lang => {
                translateService.switchToLanguage(lang);
            });
        }
    };
    return initialize;
}
export const ICON_LIST = new InjectionToken('iconList');
/**
 * Commonly used directives, data access and translation. This module is the shared
 * module across all core components. It should be imported by default.
 *
 * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
 * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
 * @exports I18nModule Translation module.
 * @exports NgCommonModule Angular common module.
 * @exports DataModule The data layer to allow DI with @c8y/client
 * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher)
 * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`
 * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`
 * @exports ForOfDirective A forOf directive like ngFor but with load-more function
 * @exports LoadMoreComponent A component to load more data from a certain data-source
 * @exports ProgressBarComponent Displays either defined or undefined progress.
 * @exports DropdownDirectionDirective Determines if a dropdown opens to the bottom or to the top.
 * @exports TextareaAutoresizeDirective resizes a textarea height as the user inputs.
 * @exports OperationResultComponent displays an animated svg for success and error operations.
 */
export class CommonModule {
    static providers() {
        return [
            ...DataModule.providers(),
            // TODO: maybe we can think of a way to remove this C8Y_APP global
            { provide: HOOK_OPTIONS, useValue: window.C8Y_APP || {}, multi: true },
            {
                provide: APP_INITIALIZER,
                useFactory: initializeServices,
                deps: [TranslateService, AppStateService, UserPreferencesService],
                multi: true
            },
            { provide: ICON_LIST, useValue: ICONS, multi: false },
            ...I18nModule.providers(),
            UserPreferencesService,
            OptionsService,
            AppStateService,
            Permissions,
            TenantUiService,
            HumanizePipe,
            HumanizeAppNamePipe,
            ShortenUserNamePipe,
            MapFunctionPipe,
            DatePipe,
            ZipService,
            FilesService,
            BytesPipe
        ];
    }
    static forRoot() {
        return {
            ngModule: CommonModule,
            providers: CommonModule.providers()
        };
    }
}
CommonModule.decorators = [
    { type: NgModule, args: [{
                imports: [NgCommonModule, I18nModule, TooltipModule, ScrollingModule],
                exports: [
                    EmptyStateComponent,
                    IconDirective,
                    OutletDirective,
                    I18nModule,
                    NgCommonModule,
                    HumanizeAppNamePipe,
                    HumanizePipe,
                    IfAllowedDirective,
                    ShortenUserNamePipe,
                    ForOfDirective,
                    LoadMoreComponent,
                    MapFunctionPipe,
                    ProgressBarComponent,
                    DatePipe,
                    NumberPipe,
                    LoadingComponent,
                    DropdownDirectionDirective,
                    TextareaAutoresizeDirective,
                    OperationResultComponent,
                    VirtualScrollerWrapperComponent,
                    VirtualScrollWindowDirective,
                    BytesPipe,
                    ShowIfFilterPipe
                ],
                declarations: [
                    EmptyStateComponent,
                    IconDirective,
                    OutletDirective,
                    HumanizePipe,
                    HumanizeAppNamePipe,
                    IfAllowedDirective,
                    ShortenUserNamePipe,
                    ForOfDirective,
                    LoadMoreComponent,
                    MapFunctionPipe,
                    ProgressBarComponent,
                    DatePipe,
                    NumberPipe,
                    LoadingComponent,
                    DropdownDirectionDirective,
                    TextareaAutoresizeDirective,
                    OperationResultComponent,
                    VirtualScrollerWrapperComponent,
                    VirtualScrollWindowDirective,
                    BytesPipe,
                    ShowIfFilterPipe
                ],
                entryComponents: [LoadMoreComponent, LoadingComponent, VirtualScrollerWrapperComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,