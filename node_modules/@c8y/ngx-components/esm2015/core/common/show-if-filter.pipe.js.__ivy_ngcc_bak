import { Pipe } from '@angular/core';
import { entries, mapValues, omitBy } from 'lodash-es';
import { combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { toObservable } from './extension-hooks';
export class ShowIfFilterPipe {
    transform(value) {
        const observableShowIfMap = mapValues(value, val => {
            if (typeof val.showIf === 'boolean') {
                return of(val.showIf);
            }
            else if (typeof val.showIf === 'function') {
                return toObservable(val.showIf());
            }
            else {
                return of(true);
            }
        });
        return combineLatest(entries(observableShowIfMap).map(([key, val]) => val.pipe(map(showIf => ({ key, showIf }))))).pipe(map((allShowIfs) => {
            allShowIfs.forEach(showIf => (value[showIf.key].showIf = showIf.showIf));
            return omitBy(value, (v) => !v.showIf);
        }));
    }
}
ShowIfFilterPipe.decorators = [
    { type: Pipe, args: [{ name: 'showIfFilter' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1pZi1maWx0ZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL3Nob3ctaWYtZmlsdGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHakQsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixTQUFTLENBTVAsS0FBUTtRQUNSLE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNqRCxJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7Z0JBQ25DLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN2QjtpQkFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQzNDLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pCO1FBQ0gsQ0FBQyxDQUFlLENBQUM7UUFFakIsT0FBTyxhQUFhLENBQ2xCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FDOUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNZLENBQ3pELENBQUMsSUFBSSxDQUNKLEdBQUcsQ0FBQyxDQUFDLFVBQW1ELEVBQUUsRUFBRTtZQUMxRCxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN6RSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7O1lBN0JGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBlbnRyaWVzLCBtYXBWYWx1ZXMsIG9taXRCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdG9PYnNlcnZhYmxlIH0gZnJvbSAnLi9leHRlbnNpb24taG9va3MnO1xuXG5AUGlwZSh7IG5hbWU6ICdzaG93SWZGaWx0ZXInIH0pXG5leHBvcnQgY2xhc3MgU2hvd0lmRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm08XG4gICAgVCBleHRlbmRzIHtcbiAgICAgIFtrZXk6IHN0cmluZ106IHtcbiAgICAgICAgc2hvd0lmPzogYm9vbGVhbiB8ICgoKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiB8IE9ic2VydmFibGU8Ym9vbGVhbj4pO1xuICAgICAgfTtcbiAgICB9XG4gID4odmFsdWU6IFQpOiBPYnNlcnZhYmxlPFBhcnRpYWw8VD4+IHtcbiAgICBjb25zdCBvYnNlcnZhYmxlU2hvd0lmTWFwID0gbWFwVmFsdWVzKHZhbHVlLCB2YWwgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWwuc2hvd0lmID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9mKHZhbC5zaG93SWYpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsLnNob3dJZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdG9PYnNlcnZhYmxlKHZhbC5zaG93SWYoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgICB9XG4gICAgfSkgYXMgUGFydGlhbDxUPjtcblxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFxuICAgICAgZW50cmllcyhvYnNlcnZhYmxlU2hvd0lmTWFwKS5tYXAoKFtrZXksIHZhbF0pID0+XG4gICAgICAgIHZhbC5waXBlKG1hcChzaG93SWYgPT4gKHsga2V5LCBzaG93SWYgfSkpKVxuICAgICAgKSBhcyBBcnJheTxPYnNlcnZhYmxlPHsga2V5OiBzdHJpbmc7IHNob3dJZjogYm9vbGVhbiB9Pj5cbiAgICApLnBpcGUoXG4gICAgICBtYXAoKGFsbFNob3dJZnM6IEFycmF5PHsga2V5OiBzdHJpbmc7IHNob3dJZjogYm9vbGVhbiB9PikgPT4ge1xuICAgICAgICBhbGxTaG93SWZzLmZvckVhY2goc2hvd0lmID0+ICh2YWx1ZVtzaG93SWYua2V5XS5zaG93SWYgPSBzaG93SWYuc2hvd0lmKSk7XG4gICAgICAgIHJldHVybiBvbWl0QnkodmFsdWUsICh2OiB7IHNob3dJZjogYm9vbGVhbiB9KSA9PiAhdi5zaG93SWYpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=