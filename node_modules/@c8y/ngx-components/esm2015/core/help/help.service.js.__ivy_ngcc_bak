import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { OptionsService } from '../common/options.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../common/options.service";
export class HelpService {
    constructor(translateService, options) {
        this.translateService = translateService;
        this.options = options;
        this.contextHelp = new BehaviorSubject(false);
        this.isWarningAlertViewed = false;
        this.SUPPORTED_LANGUAGES = ['en'];
        this.handleContextHelp();
    }
    isSupportedLanguage() {
        return this.SUPPORTED_LANGUAGES.indexOf(this.translateService.currentLang) > -1;
    }
    handleContextHelp() {
        const option = this.getContextHelpOption();
        if (option) {
            this.contextHelp.next(option);
            return;
        }
        this.contextHelp.next(false);
    }
    getContextHelpOption() {
        return this.options.contextHelp;
    }
}
HelpService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HelpService_Factory() { return new HelpService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.OptionsService)); }, token: HelpService, providedIn: "root" });
HelpService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
HelpService.ctorParameters = () => [
    { type: TranslateService },
    { type: OptionsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9oZWxwL2hlbHAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7O0FBRzNELE1BQU0sT0FBTyxXQUFXO0lBS3RCLFlBQW9CLGdCQUFrQyxFQUFVLE9BQXVCO1FBQW5FLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUo5RSxnQkFBVyxHQUFzQyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRix5QkFBb0IsR0FBWSxLQUFLLENBQUM7UUFDckIsd0JBQW1CLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUc1QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMzQyxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTyxvQkFBb0I7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUNsQyxDQUFDOzs7O1lBekJGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQUp6QixnQkFBZ0I7WUFFaEIsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vb3B0aW9ucy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBIZWxwU2VydmljZSB7XG4gIHJlYWRvbmx5IGNvbnRleHRIZWxwOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbiB8IHN0cmluZz4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgaXNXYXJuaW5nQWxlcnRWaWV3ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSByZWFkb25seSBTVVBQT1JURURfTEFOR1VBR0VTID0gWydlbiddO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSwgcHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zU2VydmljZSkge1xuICAgIHRoaXMuaGFuZGxlQ29udGV4dEhlbHAoKTtcbiAgfVxuXG4gIGlzU3VwcG9ydGVkTGFuZ3VhZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuU1VQUE9SVEVEX0xBTkdVQUdFUy5pbmRleE9mKHRoaXMudHJhbnNsYXRlU2VydmljZS5jdXJyZW50TGFuZykgPiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ29udGV4dEhlbHAoKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gdGhpcy5nZXRDb250ZXh0SGVscE9wdGlvbigpO1xuICAgIGlmIChvcHRpb24pIHtcbiAgICAgIHRoaXMuY29udGV4dEhlbHAubmV4dChvcHRpb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNvbnRleHRIZWxwLm5leHQoZmFsc2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb250ZXh0SGVscE9wdGlvbigpOiBib29sZWFuIHwgc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNvbnRleHRIZWxwO1xuICB9XG59XG4iXX0=