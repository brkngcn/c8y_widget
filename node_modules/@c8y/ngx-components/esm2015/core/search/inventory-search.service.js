import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { find, get, isUndefined, some } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/inventory/InventoryService";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class InventorySearchService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.FRAGMENTS_FOR_NO_DEVICE = [
            'c8y_Dashboard',
            'c8y_Report',
            'c8y_Kpi',
            'c8y_ExportConfiguration',
            'c8y_IsBinary',
            'c8y_NoDevice',
            'c8y_IsDeviceGroup',
            'c8y_Group',
            'com_cumulocity_model_smartrest_SmartRestTemplate',
            'com_cumulocity_model_devicesimulator_SensorTemplate',
            '_attachments',
            'c8y_IsDeviceType',
            'c8y_objectmapping_ObjectMapping',
            'c8y_IsAssetType'
        ];
        this.TYPES_FOR_NO_DEVICE = [
            'c8y_ConfigurationDump',
            'c8y_Firmware',
            'c8y_SmartRule',
            'c8y_Software',
            'impact_object_mapping',
            'c8y_UserPreference',
            'c8y_TenantPolicy',
            'c8y_PrivateSmartRule',
            'c8y_SmartRest2Template',
            'c8y_JsonSchema',
            'c8y_DeviceShellTemplate',
            'c8y_DemoStatus',
            'c8y_DataBroker',
            'c8y_Application_',
            'brandingVariables',
            'c8y_DeviceSimulator',
            'c8y_CertificateMetadata',
            'lwm2m_post_registration',
            'c8y_microservice_manifest_'
        ];
        this.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
        this.DEFAULT_PAGE_SIZE = 50;
    }
    /**
     * Returns the full-text search results.
     *
     * @param term The search term.
     * @param pagination The currently used pagination.
     */
    search(term, pagination = { currentPage: 1, pageSize: this.DEFAULT_PAGE_SIZE }) {
        return this.inventoryService.list({
            text: term,
            withTotalPages: true,
            pageSize: pagination.pageSize,
            withChildren: false,
            currentPage: pagination.currentPage || 1
        });
    }
    /**
     * Will return only valid assets (groups and devices) and filter out
     * none useful inventories (e.g. c8y_JsonSchema).
     * @param data All managed objects that should be filtered.
     */
    filterOnlyAssets(data) {
        return data.filter(mo => mo.c8y_IsDeviceGroup || this.isAnyDevice(mo));
    }
    isAnyDevice(mo) {
        const isDevice = this.isRootDevice(mo) || !this.hasFragmentOrTypeFromBlacklist(mo);
        return isDevice;
    }
    hasFragmentOrTypeFromBlacklist(mo) {
        return this.hasTypeFromBlacklist(mo) || this.hasFragmentFromBlacklist(mo);
    }
    hasTypeFromBlacklist(mo) {
        const moType = get(mo, 'type', '');
        return some(this.TYPES_FOR_NO_DEVICE, type => moType.includes(type));
    }
    hasFragmentFromBlacklist(mo) {
        return find(this.FRAGMENTS_FOR_NO_DEVICE, f => !isUndefined(mo[f]));
    }
    isRootDevice(mo) {
        return !!mo[this.DEVICE_FRAGMENT_TYPE];
    }
}
InventorySearchService.ɵfac = function InventorySearchService_Factory(t) { return new (t || InventorySearchService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService)); };
InventorySearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function InventorySearchService_Factory() { return new InventorySearchService(i0.ɵɵinject(i1.InventoryService)); }, token: InventorySearchService, providedIn: "root" });
InventorySearchService.ctorParameters = () => [
    { type: InventoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InventorySearchService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.InventoryService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52ZW50b3J5LXNlYXJjaC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3NlYXJjaC9pbnZlbnRvcnktc2VhcmNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWtCLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDekQ7QUFBcUM7OztBQUtyQyxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBd0NFLFlBQW9CLGdCQUFrQztBQUFJLFFBQXRDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQXhDdkQsNEJBQXVCLEdBQUc7QUFDNUIsWUFBSSxlQUFlO0FBQ25CLFlBQUksWUFBWTtBQUNoQixZQUFJLFNBQVM7QUFDYixZQUFJLHlCQUF5QjtBQUM3QixZQUFJLGNBQWM7QUFDbEIsWUFBSSxjQUFjO0FBQ2xCLFlBQUksbUJBQW1CO0FBQ3ZCLFlBQUksV0FBVztBQUNmLFlBQUksa0RBQWtEO0FBQ3RELFlBQUkscURBQXFEO0FBQ3pELFlBQUksY0FBYztBQUNsQixZQUFJLGtCQUFrQjtBQUN0QixZQUFJLGlDQUFpQztBQUNyQyxZQUFJLGlCQUFpQjtBQUNyQixTQUFHLENBQUM7QUFDSixRQUFFLHdCQUFtQixHQUFHO0FBQ3hCLFlBQUksdUJBQXVCO0FBQzNCLFlBQUksY0FBYztBQUNsQixZQUFJLGVBQWU7QUFDbkIsWUFBSSxjQUFjO0FBQ2xCLFlBQUksdUJBQXVCO0FBQzNCLFlBQUksb0JBQW9CO0FBQ3hCLFlBQUksa0JBQWtCO0FBQ3RCLFlBQUksc0JBQXNCO0FBQzFCLFlBQUksd0JBQXdCO0FBQzVCLFlBQUksZ0JBQWdCO0FBQ3BCLFlBQUkseUJBQXlCO0FBQzdCLFlBQUksZ0JBQWdCO0FBQ3BCLFlBQUksZ0JBQWdCO0FBQ3BCLFlBQUksa0JBQWtCO0FBQ3RCLFlBQUksbUJBQW1CO0FBQ3ZCLFlBQUkscUJBQXFCO0FBQ3pCLFlBQUkseUJBQXlCO0FBQzdCLFlBQUkseUJBQXlCO0FBQzdCLFlBQUksNEJBQTRCO0FBQ2hDLFNBQUcsQ0FBQztBQUNKLFFBQUUseUJBQW9CLEdBQUcsY0FBYyxDQUFDO0FBQ3hDLFFBQVksc0JBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQ25DLElBQzJELENBQUM7QUFDNUQsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMLElBQUUsTUFBTSxDQUNKLElBQVksRUFDWixhQUF5QixFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtBQUM5RSxRQUNDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQztBQUN0QyxZQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hCLFlBQU0sY0FBYyxFQUFFLElBQUk7QUFDMUIsWUFBTSxRQUFRLEVBQUUsVUFBVSxDQUFDLFFBQVE7QUFDbkMsWUFBTSxZQUFZLEVBQUUsS0FBSztBQUN6QixZQUFNLFdBQVcsRUFBRSxVQUFVLENBQUMsV0FBVyxJQUFJLENBQUM7QUFDOUMsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMLElBQUUsZ0JBQWdCLENBQUMsSUFBc0I7QUFBSSxRQUN6QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNFLElBQUUsQ0FBQztBQUNILElBQ1UsV0FBVyxDQUFDLEVBQUU7QUFBSSxRQUN4QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZGLFFBQUksT0FBTyxRQUFRLENBQUM7QUFDcEIsSUFBRSxDQUFDO0FBQ0gsSUFDVSw4QkFBOEIsQ0FBQyxFQUFFO0FBQUksUUFDM0MsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzlFLElBQUUsQ0FBQztBQUNILElBQ1Usb0JBQW9CLENBQUMsRUFBRTtBQUFJLFFBQ2pDLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLElBQUUsQ0FBQztBQUNILElBQ1Usd0JBQXdCLENBQUMsRUFBRTtBQUFJLFFBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEUsSUFBRSxDQUFDO0FBQ0gsSUFDVSxZQUFZLENBQUMsRUFBRTtBQUFJLFFBQ3pCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUMzQyxJQUFFLENBQUM7QUFDSDtpS0FBQztBQUNELHlPQTdGSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUlJLFlBUlMsZ0JBQWdCO0FBQUc7S0FLMUMsVUFBVSxFQUFFLE1BQU0sY0FDbkI7Ozs7O2lGQU42QztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIEludmVudG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBmaW5kLCBnZXQsIGlzVW5kZWZpbmVkLCBzb21lIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFBhZ2luYXRpb24gfSBmcm9tICcuLi9kYXRhLWdyaWQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBJbnZlbnRvcnlTZWFyY2hTZXJ2aWNlIHtcbiAgRlJBR01FTlRTX0ZPUl9OT19ERVZJQ0UgPSBbXG4gICAgJ2M4eV9EYXNoYm9hcmQnLFxuICAgICdjOHlfUmVwb3J0JyxcbiAgICAnYzh5X0twaScsXG4gICAgJ2M4eV9FeHBvcnRDb25maWd1cmF0aW9uJyxcbiAgICAnYzh5X0lzQmluYXJ5JyxcbiAgICAnYzh5X05vRGV2aWNlJyxcbiAgICAnYzh5X0lzRGV2aWNlR3JvdXAnLFxuICAgICdjOHlfR3JvdXAnLFxuICAgICdjb21fY3VtdWxvY2l0eV9tb2RlbF9zbWFydHJlc3RfU21hcnRSZXN0VGVtcGxhdGUnLFxuICAgICdjb21fY3VtdWxvY2l0eV9tb2RlbF9kZXZpY2VzaW11bGF0b3JfU2Vuc29yVGVtcGxhdGUnLFxuICAgICdfYXR0YWNobWVudHMnLFxuICAgICdjOHlfSXNEZXZpY2VUeXBlJyxcbiAgICAnYzh5X29iamVjdG1hcHBpbmdfT2JqZWN0TWFwcGluZycsXG4gICAgJ2M4eV9Jc0Fzc2V0VHlwZSdcbiAgXTtcbiAgVFlQRVNfRk9SX05PX0RFVklDRSA9IFtcbiAgICAnYzh5X0NvbmZpZ3VyYXRpb25EdW1wJyxcbiAgICAnYzh5X0Zpcm13YXJlJyxcbiAgICAnYzh5X1NtYXJ0UnVsZScsXG4gICAgJ2M4eV9Tb2Z0d2FyZScsXG4gICAgJ2ltcGFjdF9vYmplY3RfbWFwcGluZycsXG4gICAgJ2M4eV9Vc2VyUHJlZmVyZW5jZScsXG4gICAgJ2M4eV9UZW5hbnRQb2xpY3knLFxuICAgICdjOHlfUHJpdmF0ZVNtYXJ0UnVsZScsXG4gICAgJ2M4eV9TbWFydFJlc3QyVGVtcGxhdGUnLFxuICAgICdjOHlfSnNvblNjaGVtYScsXG4gICAgJ2M4eV9EZXZpY2VTaGVsbFRlbXBsYXRlJyxcbiAgICAnYzh5X0RlbW9TdGF0dXMnLFxuICAgICdjOHlfRGF0YUJyb2tlcicsXG4gICAgJ2M4eV9BcHBsaWNhdGlvbl8nLFxuICAgICdicmFuZGluZ1ZhcmlhYmxlcycsXG4gICAgJ2M4eV9EZXZpY2VTaW11bGF0b3InLFxuICAgICdjOHlfQ2VydGlmaWNhdGVNZXRhZGF0YScsXG4gICAgJ2x3bTJtX3Bvc3RfcmVnaXN0cmF0aW9uJyxcbiAgICAnYzh5X21pY3Jvc2VydmljZV9tYW5pZmVzdF8nXG4gIF07XG4gIERFVklDRV9GUkFHTUVOVF9UWVBFID0gJ2M4eV9Jc0RldmljZSc7XG4gIHByb3RlY3RlZCBERUZBVUxUX1BBR0VfU0laRSA9IDUwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSkge31cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZnVsbC10ZXh0IHNlYXJjaCByZXN1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0gdGVybSBUaGUgc2VhcmNoIHRlcm0uXG4gICAqIEBwYXJhbSBwYWdpbmF0aW9uIFRoZSBjdXJyZW50bHkgdXNlZCBwYWdpbmF0aW9uLlxuICAgKi9cbiAgc2VhcmNoKFxuICAgIHRlcm06IHN0cmluZyxcbiAgICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uID0geyBjdXJyZW50UGFnZTogMSwgcGFnZVNpemU6IHRoaXMuREVGQVVMVF9QQUdFX1NJWkUgfVxuICApIHtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmxpc3Qoe1xuICAgICAgdGV4dDogdGVybSxcbiAgICAgIHdpdGhUb3RhbFBhZ2VzOiB0cnVlLFxuICAgICAgcGFnZVNpemU6IHBhZ2luYXRpb24ucGFnZVNpemUsXG4gICAgICB3aXRoQ2hpbGRyZW46IGZhbHNlLFxuICAgICAgY3VycmVudFBhZ2U6IHBhZ2luYXRpb24uY3VycmVudFBhZ2UgfHwgMVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFdpbGwgcmV0dXJuIG9ubHkgdmFsaWQgYXNzZXRzIChncm91cHMgYW5kIGRldmljZXMpIGFuZCBmaWx0ZXIgb3V0XG4gICAqIG5vbmUgdXNlZnVsIGludmVudG9yaWVzIChlLmcuIGM4eV9Kc29uU2NoZW1hKS5cbiAgICogQHBhcmFtIGRhdGEgQWxsIG1hbmFnZWQgb2JqZWN0cyB0aGF0IHNob3VsZCBiZSBmaWx0ZXJlZC5cbiAgICovXG4gIGZpbHRlck9ubHlBc3NldHMoZGF0YTogSU1hbmFnZWRPYmplY3RbXSk6IElNYW5hZ2VkT2JqZWN0W10ge1xuICAgIHJldHVybiBkYXRhLmZpbHRlcihtbyA9PiBtby5jOHlfSXNEZXZpY2VHcm91cCB8fCB0aGlzLmlzQW55RGV2aWNlKG1vKSk7XG4gIH1cblxuICBwcml2YXRlIGlzQW55RGV2aWNlKG1vKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXNEZXZpY2UgPSB0aGlzLmlzUm9vdERldmljZShtbykgfHwgIXRoaXMuaGFzRnJhZ21lbnRPclR5cGVGcm9tQmxhY2tsaXN0KG1vKTtcbiAgICByZXR1cm4gaXNEZXZpY2U7XG4gIH1cblxuICBwcml2YXRlIGhhc0ZyYWdtZW50T3JUeXBlRnJvbUJsYWNrbGlzdChtbyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhc1R5cGVGcm9tQmxhY2tsaXN0KG1vKSB8fCB0aGlzLmhhc0ZyYWdtZW50RnJvbUJsYWNrbGlzdChtbyk7XG4gIH1cblxuICBwcml2YXRlIGhhc1R5cGVGcm9tQmxhY2tsaXN0KG1vKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbW9UeXBlID0gZ2V0KG1vLCAndHlwZScsICcnKTtcbiAgICByZXR1cm4gc29tZSh0aGlzLlRZUEVTX0ZPUl9OT19ERVZJQ0UsIHR5cGUgPT4gbW9UeXBlLmluY2x1ZGVzKHR5cGUpKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFzRnJhZ21lbnRGcm9tQmxhY2tsaXN0KG1vKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpbmQodGhpcy5GUkFHTUVOVFNfRk9SX05PX0RFVklDRSwgZiA9PiAhaXNVbmRlZmluZWQobW9bZl0pKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNSb290RGV2aWNlKG1vKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhbW9bdGhpcy5ERVZJQ0VfRlJBR01FTlRfVFlQRV07XG4gIH1cbn1cbiJdfQ==