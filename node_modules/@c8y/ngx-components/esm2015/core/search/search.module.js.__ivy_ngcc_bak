import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { CommonModule } from '../common/common.module';
import { SearchOutletComponent } from './search-outlet.component';
import { SearchComponent } from './search.component';
import { FormsModule } from '@angular/forms';
import { HighlightComponent } from './highlight.component';
import { SearchResultEmptyComponent } from './search-result-empty.component';
import { SearchInputComponent } from './search-input.component';
import { SelectModule } from '../select/select.module';
import { ListGroupModule } from '../list-group/list-group.module';
import { DeviceStatusModule } from '../device-status/device-status.module';
/**
 * The angular module definition for the search.
 * @exports SearchComponent
 * @exports SearchOutletComponent
 * @exports HighlightComponent A component to highlight search results.
 */
export class SearchModule {
}
SearchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SearchOutletComponent,
                    SearchComponent,
                    HighlightComponent,
                    SearchResultEmptyComponent,
                    SearchInputComponent
                ],
                imports: [
                    FormsModule,
                    BsDropdownModule,
                    CommonModule,
                    SelectModule,
                    ListGroupModule,
                    DeviceStatusModule,
                    RouterModule.forChild([])
                ],
                exports: [
                    SearchOutletComponent,
                    SearchComponent,
                    HighlightComponent,
                    SearchResultEmptyComponent,
                    SearchInputComponent
                ],
                entryComponents: [SearchInputComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvc2VhcmNoL3NlYXJjaC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUUzRTs7Ozs7R0FLRztBQTJCSCxNQUFNLE9BQU8sWUFBWTs7O1lBMUJ4QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLHFCQUFxQjtvQkFDckIsZUFBZTtvQkFDZixrQkFBa0I7b0JBQ2xCLDBCQUEwQjtvQkFDMUIsb0JBQW9CO2lCQUNyQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsV0FBVztvQkFDWCxnQkFBZ0I7b0JBQ2hCLFlBQVk7b0JBQ1osWUFBWTtvQkFDWixlQUFlO29CQUNmLGtCQUFrQjtvQkFDbEIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7aUJBQzFCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxxQkFBcUI7b0JBQ3JCLGVBQWU7b0JBQ2Ysa0JBQWtCO29CQUNsQiwwQkFBMEI7b0JBQzFCLG9CQUFvQjtpQkFDckI7Z0JBQ0QsZUFBZSxFQUFFLENBQUMsb0JBQW9CLENBQUM7YUFDeEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJzRHJvcGRvd25Nb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Ryb3Bkb3duJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IFNlYXJjaE91dGxldENvbXBvbmVudCB9IGZyb20gJy4vc2VhcmNoLW91dGxldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VhcmNoQ29tcG9uZW50IH0gZnJvbSAnLi9zZWFyY2guY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSGlnaGxpZ2h0Q29tcG9uZW50IH0gZnJvbSAnLi9oaWdobGlnaHQuY29tcG9uZW50JztcbmltcG9ydCB7IFNlYXJjaFJlc3VsdEVtcHR5Q29tcG9uZW50IH0gZnJvbSAnLi9zZWFyY2gtcmVzdWx0LWVtcHR5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWFyY2hJbnB1dENvbXBvbmVudCB9IGZyb20gJy4vc2VhcmNoLWlucHV0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWxlY3RNb2R1bGUgfSBmcm9tICcuLi9zZWxlY3Qvc2VsZWN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBMaXN0R3JvdXBNb2R1bGUgfSBmcm9tICcuLi9saXN0LWdyb3VwL2xpc3QtZ3JvdXAubW9kdWxlJztcbmltcG9ydCB7IERldmljZVN0YXR1c01vZHVsZSB9IGZyb20gJy4uL2RldmljZS1zdGF0dXMvZGV2aWNlLXN0YXR1cy5tb2R1bGUnO1xuXG4vKipcbiAqIFRoZSBhbmd1bGFyIG1vZHVsZSBkZWZpbml0aW9uIGZvciB0aGUgc2VhcmNoLlxuICogQGV4cG9ydHMgU2VhcmNoQ29tcG9uZW50XG4gKiBAZXhwb3J0cyBTZWFyY2hPdXRsZXRDb21wb25lbnRcbiAqIEBleHBvcnRzIEhpZ2hsaWdodENvbXBvbmVudCBBIGNvbXBvbmVudCB0byBoaWdobGlnaHQgc2VhcmNoIHJlc3VsdHMuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFNlYXJjaE91dGxldENvbXBvbmVudCxcbiAgICBTZWFyY2hDb21wb25lbnQsXG4gICAgSGlnaGxpZ2h0Q29tcG9uZW50LFxuICAgIFNlYXJjaFJlc3VsdEVtcHR5Q29tcG9uZW50LFxuICAgIFNlYXJjaElucHV0Q29tcG9uZW50XG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBCc0Ryb3Bkb3duTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZSxcbiAgICBTZWxlY3RNb2R1bGUsXG4gICAgTGlzdEdyb3VwTW9kdWxlLFxuICAgIERldmljZVN0YXR1c01vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQoW10pXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBTZWFyY2hPdXRsZXRDb21wb25lbnQsXG4gICAgU2VhcmNoQ29tcG9uZW50LFxuICAgIEhpZ2hsaWdodENvbXBvbmVudCxcbiAgICBTZWFyY2hSZXN1bHRFbXB0eUNvbXBvbmVudCxcbiAgICBTZWFyY2hJbnB1dENvbXBvbmVudFxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtTZWFyY2hJbnB1dENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgU2VhcmNoTW9kdWxlIHt9XG4iXX0=