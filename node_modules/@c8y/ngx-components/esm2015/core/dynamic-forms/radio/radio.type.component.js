import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FieldType } from '@ngx-formly/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ngx-formly/core';
import * as ɵngcc4 from '@ngx-formly/core/select';
import * as ɵngcc5 from '../../common/humanize.pipe';

function FieldRadio_label_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 1);
    ɵngcc0.ɵɵelement(1, "input", 2);
    ɵngcc0.ɵɵelement(2, "span");
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "humanize");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", option_r1.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("name", ctx_r0.field.name || ctx_r0.id)("value", option_r1.value)("formControl", ctx_r0.formControl)("formlyAttributes", ctx_r0.field);
    ɵngcc0.ɵɵattribute("value", option_r1.value)("disabled", option_r1.disabled || ctx_r0.formControl.disabled ? true : null);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 9, option_r1.label));
} }
export class FieldRadio extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                options: [],
                formCheck: 'custom' // 'custom' | 'custom-inline' | 'stacked' | 'inline'
            }
        };
    }
}
FieldRadio.ɵfac = /*@__PURE__*/ function () { let ɵFieldRadio_BaseFactory; return function FieldRadio_Factory(t) { return (ɵFieldRadio_BaseFactory || (ɵFieldRadio_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldRadio)))(t || FieldRadio); }; }();
FieldRadio.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FieldRadio, selectors: [["c8y-field-radio"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [["class", "c8y-radio", 3, "title", 4, "ngFor", "ngForOf"], [1, "c8y-radio", 3, "title"], ["type", "radio", 3, "id", "name", "value", "formControl", "formlyAttributes"]], template: function FieldRadio_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FieldRadio_label_0_Template, 6, 11, "label", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵpipe(2, "formlySelectOptions");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.RadioControlValueAccessor, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes], pipes: [ɵngcc1.AsyncPipe, ɵngcc4.ɵa, ɵngcc5.HumanizePipe], encapsulation: 2, changeDetection: 0 });
FieldRadio.CONFIG = {
    types: [
        {
            name: 'radio',
            component: FieldRadio,
            wrappers: ['c8y-form-field']
        }
    ]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldRadio, [{
        type: Component,
        args: [{
                selector: 'c8y-field-radio',
                template: "<label\n  *ngFor=\"let option of to.options | formlySelectOptions: field | async; let i = index\"\n  [title]=\"option.label\"\n  class=\"c8y-radio\"\n>\n  <input\n    type=\"radio\"\n    [id]=\"id + '_' + i\"\n    [name]=\"field.name || id\"\n    [attr.value]=\"option.value\"\n    [value]=\"option.value\"\n    [formControl]=\"formControl\"\n    [formlyAttributes]=\"field\"\n    [attr.disabled]=\"option.disabled || formControl.disabled ? true : null\"\n  />\n  <span></span>\n  <span>{{ option.label | humanize }}</span>\n</label>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8udHlwZS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1mb3Jtcy9yYWRpby9yYWRpby50eXBlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBZ0IsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPM0QsTUFBTSxPQUFPLFVBQVcsU0FBUSxTQUFTO0FBQ3pDLElBTkE7QUFDRztBQUNGLFFBY0MsbUJBQWMsR0FBRztBQUNuQixZQUFJLGVBQWUsRUFBRTtBQUNyQixnQkFBTSxPQUFPLEVBQUUsRUFBRTtBQUNqQixnQkFBTSxTQUFTLEVBQUUsUUFBUSxDQUFDLG9EQUFvRDtBQUM5RSxhQUFLO0FBQ0wsU0FBRyxDQUFDO0FBQ0osSUFBQSxDQUFDO0FBQ0Q7Ozs7Ozs7O3VSQUFDO0FBakJpQixpQkFBTSxHQUFpQjtBQUN6QyxJQUFJLEtBQUssRUFBRTtBQUNYLFFBQU07QUFDTixZQUFRLElBQUksRUFBRSxPQUFPO0FBQ3JCLFlBQVEsU0FBUyxFQUFFLFVBQVU7QUFDN0IsWUFBUSxRQUFRLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNwQyxTQUFPO0FBQ1AsS0FBSztBQUNMLENBQUcsQ0FBQztzQ0FkSCxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjthQUMzQjs7O3lkQUEwQyxrQkFDMUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sY0FDaEQ7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnT3B0aW9uLCBGaWVsZFR5cGUgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWZpZWxkLXJhZGlvJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvLnR5cGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBGaWVsZFJhZGlvIGV4dGVuZHMgRmllbGRUeXBlIHtcbiAgc3RhdGljIHJlYWRvbmx5IENPTkZJRzogQ29uZmlnT3B0aW9uID0ge1xuICAgIHR5cGVzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdyYWRpbycsXG4gICAgICAgIGNvbXBvbmVudDogRmllbGRSYWRpbyxcbiAgICAgICAgd3JhcHBlcnM6IFsnYzh5LWZvcm0tZmllbGQnXVxuICAgICAgfVxuICAgIF1cbiAgfTtcblxuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgZm9ybUNoZWNrOiAnY3VzdG9tJyAvLyAnY3VzdG9tJyB8ICdjdXN0b20taW5saW5lJyB8ICdzdGFja2VkJyB8ICdpbmxpbmUnXG4gICAgfVxuICB9O1xufVxuIl19