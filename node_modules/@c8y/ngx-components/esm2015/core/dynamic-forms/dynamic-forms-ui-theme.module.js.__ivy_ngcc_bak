import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule, FORMLY_CONFIG } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { CommonModule as C8YCommonModule } from '../common/common.module';
import { DropAreaModule } from '../drop-area/drop-area.module';
import { FormsModule } from '../forms/index';
import { ListGroupModule } from '../list-group/list-group.module';
import { SearchModule } from '../search/search.module';
import { SelectModule } from '../select/select.module';
import { C8yTranslateModule } from '../i18n/c8y-translate.module';
import { ArrayTypeComponent } from './array/array.type.component';
import { FieldCheckbox } from './checkbox/checkbox.type.component';
import { FieldDate } from './date/date.type.component';
import { FieldFile } from './file/file.type.component';
import { WrapperFormField } from './form-field/form-field.wrapper.component';
import { FieldInput } from './input/input.type.component';
import { ObjectTypeComponent } from './object/object.type.component';
import { FieldRadio } from './radio/radio.type.component';
import { FieldDateTime } from './date-time/date-time.type.component';
import { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';
import { TypeaheadTypeComponent } from './typeahead/typeahead.type.component';
export const FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldFile,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent,
    FieldDate,
    FieldDateTime,
    TypeaheadTypeComponent
];
export function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(type => type['CONFIG']).reduce((formlyConfig, typeConfig) => (Object.assign(Object.assign({}, formlyConfig), { types: [...formlyConfig.types, ...(typeConfig.types || [])], wrappers: [...formlyConfig.wrappers, ...(typeConfig.wrappers || [])] })), { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
export class DynamicFormsUIThemeModule {
}
DynamicFormsUIThemeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [...FIELD_TYPES],
                entryComponents: [...FIELD_TYPES],
                imports: [
                    CommonModule,
                    C8YCommonModule,
                    PopoverModule,
                    ReactiveFormsModule,
                    C8yTranslateModule,
                    DropAreaModule,
                    FormsModule,
                    FormlyModule,
                    FormlySelectModule,
                    DateTimePickerModule,
                    SelectModule,
                    ListGroupModule,
                    SearchModule,
                    BsDatepickerModule
                ],
                providers: [
                    {
                        provide: FORMLY_CONFIG,
                        useFactory: fieldTypeFactory,
                        multi: true
                    }
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3Jtcy11aS10aGVtZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2R5bmFtaWMtZm9ybXMvZHluYW1pYy1mb3Jtcy11aS10aGVtZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUEyQixZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLElBQUksZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQTJCO0lBQ2pELGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLG1CQUFtQjtJQUNuQixTQUFTO0lBQ1QsYUFBYTtJQUNiLHNCQUFzQjtDQUN2QixDQUFDO0FBRUYsTUFBTSxVQUFVLGdCQUFnQjtJQUM5Qiw2Q0FBNkM7SUFDN0MsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUNuRCxDQUFDLFlBQTBCLEVBQUUsVUFBd0IsRUFBRSxFQUFFLENBQ3ZELENBQUMsZ0NBQ0ksWUFBWSxLQUNmLEtBQUssRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUMzRCxRQUFRLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsR0FDcEQsQ0FBQSxFQUNwQixFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUM1QixDQUFDO0FBQ0osQ0FBQztBQUVEOzs7O0dBSUc7QUE0QkgsTUFBTSxPQUFPLHlCQUF5Qjs7O1lBM0JyQyxRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7Z0JBQzlCLGVBQWUsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO2dCQUNqQyxPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixlQUFlO29CQUNmLGFBQWE7b0JBQ2IsbUJBQW1CO29CQUNuQixrQkFBa0I7b0JBQ2xCLGNBQWM7b0JBQ2QsV0FBVztvQkFDWCxZQUFZO29CQUNaLGtCQUFrQjtvQkFDbEIsb0JBQW9CO29CQUNwQixZQUFZO29CQUNaLGVBQWU7b0JBQ2YsWUFBWTtvQkFDWixrQkFBa0I7aUJBQ25CO2dCQUNELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsVUFBVSxFQUFFLGdCQUFnQjt3QkFDNUIsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbmZpZ09wdGlvbiwgRmllbGRUeXBlLCBGb3JtbHlNb2R1bGUsIEZPUk1MWV9DT05GSUcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZvcm1seVNlbGVjdE1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUvc2VsZWN0JztcbmltcG9ydCB7IEJzRGF0ZXBpY2tlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvZGF0ZXBpY2tlcic7XG5pbXBvcnQgeyBQb3BvdmVyTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3BvdmVyJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSBhcyBDOFlDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBEcm9wQXJlYU1vZHVsZSB9IGZyb20gJy4uL2Ryb3AtYXJlYS9kcm9wLWFyZWEubW9kdWxlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnLi4vZm9ybXMvaW5kZXgnO1xuaW1wb3J0IHsgTGlzdEdyb3VwTW9kdWxlIH0gZnJvbSAnLi4vbGlzdC1ncm91cC9saXN0LWdyb3VwLm1vZHVsZSc7XG5pbXBvcnQgeyBTZWFyY2hNb2R1bGUgfSBmcm9tICcuLi9zZWFyY2gvc2VhcmNoLm1vZHVsZSc7XG5pbXBvcnQgeyBTZWxlY3RNb2R1bGUgfSBmcm9tICcuLi9zZWxlY3Qvc2VsZWN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBDOHlUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICcuLi9pMThuL2M4eS10cmFuc2xhdGUubW9kdWxlJztcbmltcG9ydCB7IEFycmF5VHlwZUNvbXBvbmVudCB9IGZyb20gJy4vYXJyYXkvYXJyYXkudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRDaGVja2JveCB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tib3gudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGREYXRlIH0gZnJvbSAnLi9kYXRlL2RhdGUudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRGaWxlIH0gZnJvbSAnLi9maWxlL2ZpbGUudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgV3JhcHBlckZvcm1GaWVsZCB9IGZyb20gJy4vZm9ybS1maWVsZC9mb3JtLWZpZWxkLndyYXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkSW5wdXQgfSBmcm9tICcuL2lucHV0L2lucHV0LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9iamVjdFR5cGVDb21wb25lbnQgfSBmcm9tICcuL29iamVjdC9vYmplY3QudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRSYWRpbyB9IGZyb20gJy4vcmFkaW8vcmFkaW8udHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGREYXRlVGltZSB9IGZyb20gJy4vZGF0ZS10aW1lL2RhdGUtdGltZS50eXBlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRlVGltZVBpY2tlck1vZHVsZSB9IGZyb20gJy4uL2RhdGUtdGltZS1waWNrZXIvZGF0ZS10aW1lLXBpY2tlci5tb2R1bGUnO1xuaW1wb3J0IHsgVHlwZWFoZWFkVHlwZUNvbXBvbmVudCB9IGZyb20gJy4vdHlwZWFoZWFkL3R5cGVhaGVhZC50eXBlLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBGSUVMRF9UWVBFUzogQXJyYXk8VHlwZTxGaWVsZFR5cGU+PiA9IFtcbiAgRmllbGRDaGVja2JveCxcbiAgQXJyYXlUeXBlQ29tcG9uZW50LFxuICBXcmFwcGVyRm9ybUZpZWxkLFxuICBGaWVsZEZpbGUsXG4gIEZpZWxkSW5wdXQsXG4gIEZpZWxkUmFkaW8sXG4gIE9iamVjdFR5cGVDb21wb25lbnQsXG4gIEZpZWxkRGF0ZSxcbiAgRmllbGREYXRlVGltZSxcbiAgVHlwZWFoZWFkVHlwZUNvbXBvbmVudFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpZWxkVHlwZUZhY3RvcnkoKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICByZXR1cm4gRklFTERfVFlQRVMubWFwKHR5cGUgPT4gdHlwZVsnQ09ORklHJ10pLnJlZHVjZShcbiAgICAoZm9ybWx5Q29uZmlnOiBDb25maWdPcHRpb24sIHR5cGVDb25maWc6IENvbmZpZ09wdGlvbikgPT5cbiAgICAgICh7XG4gICAgICAgIC4uLmZvcm1seUNvbmZpZyxcbiAgICAgICAgdHlwZXM6IFsuLi5mb3JtbHlDb25maWcudHlwZXMsIC4uLih0eXBlQ29uZmlnLnR5cGVzIHx8IFtdKV0sXG4gICAgICAgIHdyYXBwZXJzOiBbLi4uZm9ybWx5Q29uZmlnLndyYXBwZXJzLCAuLi4odHlwZUNvbmZpZy53cmFwcGVycyB8fCBbXSldXG4gICAgICB9IGFzIENvbmZpZ09wdGlvbiksXG4gICAgeyB0eXBlczogW10sIHdyYXBwZXJzOiBbXSB9XG4gICk7XG59XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVjbGFyZXMgZmllbGQgdHlwZSBjb21wb25lbnRzIGZvciBkeW5hbWljIGZvcm1zIHRoYXQgbWF0Y2ggQzhZIHN0eWxlZ3VpZGUuXG4gKlxuICogQGR5bmFtaWNcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbLi4uRklFTERfVFlQRVNdLFxuICBlbnRyeUNvbXBvbmVudHM6IFsuLi5GSUVMRF9UWVBFU10sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQzhZQ29tbW9uTW9kdWxlLFxuICAgIFBvcG92ZXJNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBDOHlUcmFuc2xhdGVNb2R1bGUsXG4gICAgRHJvcEFyZWFNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgRm9ybWx5TW9kdWxlLFxuICAgIEZvcm1seVNlbGVjdE1vZHVsZSxcbiAgICBEYXRlVGltZVBpY2tlck1vZHVsZSxcbiAgICBTZWxlY3RNb2R1bGUsXG4gICAgTGlzdEdyb3VwTW9kdWxlLFxuICAgIFNlYXJjaE1vZHVsZSxcbiAgICBCc0RhdGVwaWNrZXJNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogRk9STUxZX0NPTkZJRyxcbiAgICAgIHVzZUZhY3Rvcnk6IGZpZWxkVHlwZUZhY3RvcnksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybXNVSVRoZW1lTW9kdWxlIHt9XG4iXX0=