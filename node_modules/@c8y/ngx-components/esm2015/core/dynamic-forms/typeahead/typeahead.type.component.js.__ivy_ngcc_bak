import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { FieldType } from '@ngx-formly/core';
import { TranslateService } from '@ngx-translate/core';
import { pick, get } from 'lodash-es';
import { defer, isObservable, of, pipe } from 'rxjs';
import { map, startWith, switchMap, tap } from 'rxjs/operators';
import { gettext } from '../../i18n';
export class TypeaheadTypeComponent extends FieldType {
    constructor(cdRef, translateService) {
        super();
        this.cdRef = cdRef;
        this.translateService = translateService;
        this.match = false;
        this.placeholder$ = defer(() => { var _a; return of((_a = this.to) === null || _a === void 0 ? void 0 : _a.placeholder); }).pipe(switchMap(placeholder => placeholder
            ? of(placeholder)
            : this.defaultPlaceholder$.pipe(startWith(this.translateService.instant(gettext('Start typing to search'))))));
        this.defaultPlaceholder$ = defer(() => { var _a, _b, _c; return isObservable((_a = this.to) === null || _a === void 0 ? void 0 : _a.c8yForOptions) ? (_b = this.to) === null || _b === void 0 ? void 0 : _b.c8yForOptions : of((_c = this.to) === null || _c === void 0 ? void 0 : _c.c8yForOptions); }).pipe(map(({ data }) => get(data[0], this.labelProp || 'name')), map(example => {
            return !!example
                ? this.translateService.instant(gettext('Start typing to search, for example, {{ example }}'), { example })
                : this.translateService.instant(gettext('No items'));
        }));
        this.excludeLabelProp = false;
    }
    ngOnInit() {
        if (this.to) {
            if (this.to.excludeDisplayProperty) {
                this.excludeLabelProp = this.to.excludeDisplayProperty;
            }
            if (this.to.displayProperty) {
                this.setPipe('');
                this.labelProp = this.to.displayProperty;
                this.valueProps = this.to.valueProperties;
            }
            else {
                console.error('To correctly use the typeahead select you need to specify displayProperty: string within templateOptions!');
            }
        }
    }
    selectOption(opt) {
        if (this.valueProps && this.valueProps.length > 0) {
            const pickList = this.excludeLabelProp
                ? this.valueProps
                : [...this.valueProps, this.labelProp];
            this.formControl.setValue(pick(opt, pickList));
            this.selected = { [this.labelProp]: opt[this.labelProp] };
        }
        else {
            this.formControl.setValue(opt);
        }
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterPipe = pipe(map((data) => {
            return data.filter((el) => el[this.labelProp] &&
                el[this.labelProp].toLowerCase().indexOf(filterStr.toLowerCase()) > -1);
        }), tap(data => {
            this.match = data.length > 0;
            this.cdRef.detectChanges();
        }));
    }
}
TypeaheadTypeComponent.CONFIG = {
    types: [{ name: 'typeahead', component: TypeaheadTypeComponent }]
};
TypeaheadTypeComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-typeahead-type',
                template: "<c8y-typeahead\n  [required]=\"to?.required || false\"\n  [placeholder]=\"placeholder$ | async\"\n  [displayProperty]=\"to?.displayProperty\"\n  [selected]=\"selected\"\n  [allowFreeEntries]=\"to?.allowFreeEntries || false\"\n  [container]=\"to?.container || ''\"\n  [disabled]=\"to?.disabled\"\n  (onSearch)=\"setPipe($event)\"\n  [formControl]=\"formControl\"\n  [class.is-invalid]=\"showError\"\n  [formlyAttributes]=\"field\">\n\n  <c8y-li *c8yFor=\"let opt of to?.c8yForOptions; loadMore: to?.loadMore || 'auto'; pipe: filterPipe; notFound: notFoundTemplate; loadingTemplate: loading;\"\n          (click)=\"selectOption(opt); setPipe('')\"\n          class=\"p-l-8 p-r-8 c8y-list__item--link\">\n    <c8y-highlight [text]=\"opt[labelProp]\" [pattern]=\"pattern\"></c8y-highlight>\n  </c8y-li>\n  <ng-template #notFoundTemplate>\n    <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"pattern.length > 0 && !match\">\n      <p><strong translate>No match found.</strong></p>\n    </c8y-li>\n  </ng-template>\n  <ng-template #loading>\n    <c8y-li class=\"text-center p-t-8 p-relative\">\n      <c8y-loading></c8y-loading>\n    </c8y-li>\n  </ng-template>\n</c8y-typeahead>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
TypeaheadTypeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,