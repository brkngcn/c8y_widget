import { ValidationPattern } from '../../forms/validation-pattern';
import { gettext } from '../../i18n/gettext';
export function c8yValidationConfigFactory(translate) {
    return {
        validationMessages: [
            {
                name: 'required',
                message() {
                    return translate.stream(ValidationPattern.messages.required);
                }
            },
            {
                name: 'notExisting',
                message() {
                    return translate.stream(gettext('No selection'));
                }
            },
            {
                name: 'pattern',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.pattern, error);
                }
            },
            {
                name: 'minlength',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.minLength, field.templateOptions);
                }
            },
            {
                name: 'min',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.min, field.templateOptions);
                }
            },
            {
                name: 'max',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.max, field.templateOptions);
                }
            },
            {
                name: 'invalidDateTime',
                message() {
                    return translate.stream(gettext('This date is invalid.'));
                }
            },
            {
                name: 'dateBeforeRangeMin',
                message() {
                    return translate.stream(gettext('This date is before the earliest allowed date.'));
                }
            },
            {
                name: 'dateAfterRangeMax',
                message() {
                    return translate.stream(gettext('This date is after the latest allowed date.'));
                }
            }
        ]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1jb25maWcuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1mb3Jtcy92YWxpZGF0aW9uL3ZhbGlkYXRpb24tY29uZmlnLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTdDLE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxTQUEyQjtJQUNwRSxPQUFPO1FBQ0wsa0JBQWtCLEVBQUU7WUFDbEI7Z0JBQ0UsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLE9BQU87b0JBQ0wsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDL0QsQ0FBQzthQUNGO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLE9BQU87b0JBQ0wsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUNuRCxDQUFDO2FBQ0Y7WUFDRDtnQkFDRSxJQUFJLEVBQUUsU0FBUztnQkFDZixPQUFPLENBQUMsS0FBVSxFQUFFLEtBQXdCO29CQUMxQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDckUsQ0FBQzthQUNGO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLFdBQVc7Z0JBQ2pCLE9BQU8sQ0FBQyxLQUFVLEVBQUUsS0FBd0I7b0JBQzFDLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDdkYsQ0FBQzthQUNGO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsT0FBTyxDQUFDLEtBQVUsRUFBRSxLQUF3QjtvQkFDMUMsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNqRixDQUFDO2FBQ0Y7WUFDRDtnQkFDRSxJQUFJLEVBQUUsS0FBSztnQkFDWCxPQUFPLENBQUMsS0FBVSxFQUFFLEtBQXdCO29CQUMxQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ2pGLENBQUM7YUFDRjtZQUNEO2dCQUNFLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLE9BQU87b0JBQ0wsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7Z0JBQzVELENBQUM7YUFDRjtZQUNEO2dCQUNFLElBQUksRUFBRSxvQkFBb0I7Z0JBQzFCLE9BQU87b0JBQ0wsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JGLENBQUM7YUFDRjtZQUNEO2dCQUNFLElBQUksRUFBRSxtQkFBbUI7Z0JBQ3pCLE9BQU87b0JBQ0wsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xGLENBQUM7YUFDRjtTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblBhdHRlcm4gfSBmcm9tICcuLi8uLi9mb3Jtcy92YWxpZGF0aW9uLXBhdHRlcm4nO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uLy4uL2kxOG4vZ2V0dGV4dCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjOHlWYWxpZGF0aW9uQ29uZmlnRmFjdG9yeSh0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UpIHtcbiAgcmV0dXJuIHtcbiAgICB2YWxpZGF0aW9uTWVzc2FnZXM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3JlcXVpcmVkJyxcbiAgICAgICAgbWVzc2FnZSgpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlLnN0cmVhbShWYWxpZGF0aW9uUGF0dGVybi5tZXNzYWdlcy5yZXF1aXJlZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdub3RFeGlzdGluZycsXG4gICAgICAgIG1lc3NhZ2UoKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZS5zdHJlYW0oZ2V0dGV4dCgnTm8gc2VsZWN0aW9uJykpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAncGF0dGVybicsXG4gICAgICAgIG1lc3NhZ2UoZXJyb3I6IGFueSwgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZS5zdHJlYW0oVmFsaWRhdGlvblBhdHRlcm4ubWVzc2FnZXMucGF0dGVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnbWlubGVuZ3RoJyxcbiAgICAgICAgbWVzc2FnZShlcnJvcjogYW55LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlLnN0cmVhbShWYWxpZGF0aW9uUGF0dGVybi5tZXNzYWdlcy5taW5MZW5ndGgsIGZpZWxkLnRlbXBsYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdtaW4nLFxuICAgICAgICBtZXNzYWdlKGVycm9yOiBhbnksIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZykge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUuc3RyZWFtKFZhbGlkYXRpb25QYXR0ZXJuLm1lc3NhZ2VzLm1pbiwgZmllbGQudGVtcGxhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ21heCcsXG4gICAgICAgIG1lc3NhZ2UoZXJyb3I6IGFueSwgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZS5zdHJlYW0oVmFsaWRhdGlvblBhdHRlcm4ubWVzc2FnZXMubWF4LCBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnaW52YWxpZERhdGVUaW1lJyxcbiAgICAgICAgbWVzc2FnZSgpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlLnN0cmVhbShnZXR0ZXh0KCdUaGlzIGRhdGUgaXMgaW52YWxpZC4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdkYXRlQmVmb3JlUmFuZ2VNaW4nLFxuICAgICAgICBtZXNzYWdlKCkge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUuc3RyZWFtKGdldHRleHQoJ1RoaXMgZGF0ZSBpcyBiZWZvcmUgdGhlIGVhcmxpZXN0IGFsbG93ZWQgZGF0ZS4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdkYXRlQWZ0ZXJSYW5nZU1heCcsXG4gICAgICAgIG1lc3NhZ2UoKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZS5zdHJlYW0oZ2V0dGV4dCgnVGhpcyBkYXRlIGlzIGFmdGVyIHRoZSBsYXRlc3QgYWxsb3dlZCBkYXRlLicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cbiJdfQ==