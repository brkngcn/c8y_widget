import { __awaiter } from "tslib";
import { ChangeDetectorRef, Component, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { get, map, some } from 'lodash-es';
import { BytesPipe } from '../common/bytes.pipe';
import { FilesService } from '../common/files.service';
import { gettext } from '../i18n/gettext';
/**
 * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.
 *
 * ## Example:
 *
 * ```html
 *  <div>
 *    <c8y-drop-area
 *      (dropped)="uploadFile($event)"
 *      [icon]="'upload'"
 *      [accept]="'.zip,.7z,video'">
 *    </c8y-drop-area>
 *  </div>
 * ```
 */
export class DropAreaComponent {
    constructor(cd, filesService, translate, bytes) {
        this.cd = cd;
        this.filesService = filesService;
        this.translate = translate;
        this.bytes = bytes;
        this.title = gettext('Upload file');
        this.message = gettext('Drop file here');
        this.icon = 'plus-square';
        this.loadingMessage = gettext('Uploadingâ€¦');
        this.forceHideList = false;
        /** Affects displaying both the drop zone and the list of dropped files. */
        this.alwaysShow = false;
        this.clickToOpen = true;
        this.loading = false;
        /**
         * Current progress of the upload as a percentage. If not given a spinner will be displayed.
         */
        this.progress = -1; // -1 = spinner
        this.dropped = new EventEmitter();
        this.maxAllowedFiles = Infinity;
        this.isOver = false;
        this.errors = false;
        this.onChange = _ => undefined;
        this.onTouched = () => undefined;
    }
    onkeyup(event) {
        if (event.key === 'Enter') {
            this.picker.nativeElement.click();
        }
    }
    ngOnInit() {
        this.acceptedExts = this.filesService.extractFileExtensions(this.accept).map(t => `.${t}`);
        this.alwaysShow = this.alwaysShow || this.area.nativeElement.children.length === 0;
        if (this.files && this.isFilesAnObjectOrArray() && this.files.length > 0) {
            this.onFilesSelected(this.files);
        }
    }
    /**
     * Toggles the style of the drop zone element when a file is dragged over the component.
     */
    toggle($event) {
        this.zone.nativeElement.style.height = this.area.nativeElement.offsetHeight + 'px';
        this.onOver();
    }
    /**
     * Shows computer browser with files to drop into drop-area zone.
     */
    showPicker($event) {
        this.preventDefault($event);
        this.picker.nativeElement.value = '';
        this.picker.nativeElement.click();
    }
    /**
     * Triggered when file is on over drop area, but not dropped.
     */
    onOver() {
        if (!this.isOver) {
            this.isOver = true;
            document.addEventListener('dragover', this.preventDefault);
            document.addEventListener('drop', this.preventDefault);
        }
    }
    /**
     * Triggered when file is dropped.
     */
    onPick($event) {
        this.errors = false;
        this.preventDefault($event);
        this.onFilesSelected($event.target.files);
    }
    /**
     * Handle file when it is dropped into drop-area.
     */
    onDrop($event) {
        this.preventDefault($event);
        this.onFilesSelected($event.dataTransfer.files);
        this.stopDragging();
    }
    /**
     * Checks condition what should be displayed: drop-area zone or list of dropped files.
     */
    shouldShowFilesList() {
        return (this.isFilesAnObjectOrArray() &&
            !this.forceHideList &&
            this.alwaysShow &&
            !this.isFilesArrayEmpty() &&
            !this.hasEmptyFiles() &&
            !this.isTooManyFiles());
    }
    /**
     * Triggered when file is picked over web application.
     */
    stopDragging() {
        document.removeEventListener('dragover', this.preventDefault);
        document.removeEventListener('drop', this.preventDefault);
        this.isOver = false;
    }
    /**
     * Delete files already dropped files.
     */
    onDelete() {
        delete this.files;
        delete this.filesNameString;
        this.clearErrors();
        this.dropped.emit(null);
        this.onChange(null);
        this.cd.markForCheck();
    }
    writeValue(value) {
        this.files = value;
        if (!value) {
            this.onDelete();
        }
        this.cd.detectChanges();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    onFilesSelected(files) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const hasValidNameLength = this.filesService.checkMaxLength(files);
            if (!hasValidNameLength) {
                this.onFileInvalidNameLength();
                return;
            }
            const haveValidTypes = this.filesService.haveValidExtensions(files, this.accept);
            if (!haveValidTypes) {
                this.onFileInvalidType();
                return;
            }
            const haveValidSizes = yield this.filesService.haveValidSizes(files);
            if (!haveValidSizes) {
                yield this.onFileInvalidSize();
                return;
            }
            this.files = files;
            this.filesNameString = this.getFilesNamesAsString(files);
            this.errors = false;
            if (this.isTooManyFiles()) {
                this.errors = true;
                (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ tooManyFiles: true });
                this.errorMessage = gettext('Too many files selected.');
                return;
            }
            if (this.hasEmptyFiles()) {
                this.errors = true;
                (_b = this.formControl) === null || _b === void 0 ? void 0 : _b.setErrors({ emptyFiles: true });
                this.errorMessage = gettext('File must not be empty, select another one.');
                return;
            }
            const droppedFiles = this.compose(files);
            this.dropped.emit(droppedFiles);
            this.onChange(droppedFiles);
            this.cd.markForCheck();
        });
    }
    onFileInvalidNameLength() {
        var _a;
        this.errors = true;
        (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidNameLength: true });
        this.errorMessage = gettext('The filename is too long.');
    }
    onFileInvalidType() {
        var _a;
        this.errors = true;
        (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidType: true });
        this.errorMessage = gettext('The selected file is not supported.');
    }
    onFileInvalidSize() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const msg = gettext('The selected file is too large. The size limit is {{ limit }}.');
            const limit = this.bytes.transform(yield this.filesService.loadBytesSizeLimit());
            this.errors = true;
            (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidSize: true });
            this.errorMessage = this.translate.instant(msg, { limit });
        });
    }
    getFilesNamesAsString(files) {
        return map(files, ({ name }) => name).join(', ');
    }
    isFilesArrayEmpty() {
        return get(this, 'files.length', 0) === 0;
    }
    isTooManyFiles() {
        return get(this, 'files.length', 0) > this.maxAllowedFiles;
    }
    isFilesAnObjectOrArray() {
        return typeof this.files === 'object';
    }
    hasEmptyFiles() {
        let result = true;
        if (!this.isFilesArrayEmpty()) {
            result = this.isAnyFileEmpty();
        }
        return result;
    }
    isAnyFileEmpty() {
        return some(Array.from(this.files), ['size', 0]);
    }
    clearErrors() {
        var _a;
        delete this.errorMessage;
        this.errors = false;
        (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors(null);
    }
    preventDefault($event) {
        if ($event) {
            $event.preventDefault();
        }
    }
    compose(files) {
        return Array.from(files).map(file => ({
            file,
            readAsJson: () => __awaiter(this, void 0, void 0, function* () { return JSON.parse(yield this.read(file, ReadAsType.TEXT)); }),
            readAsText: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.TEXT); }),
            readAsArrayBuffer: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.ARRAY_BUFFER); }),
            readAsBinaryString: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.BINARY_STRING); }),
            readAsDataURL: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.DATA_URL); })
        }));
    }
    read(file, type) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                switch (type) {
                    case ReadAsType.TEXT: {
                        reader.readAsText(file);
                        break;
                    }
                    case ReadAsType.ARRAY_BUFFER: {
                        reader.readAsArrayBuffer(file);
                        break;
                    }
                    case ReadAsType.BINARY_STRING: {
                        reader.readAsBinaryString(file);
                        break;
                    }
                    case ReadAsType.DATA_URL: {
                        reader.readAsDataURL(file);
                        break;
                    }
                }
                reader.onload = () => this.onLoad(reader, resolve, reject);
            });
        });
    }
    onLoad(reader, resolve, reject) {
        if (reader.readyState !== 2) {
            return;
        }
        if (reader.error) {
            reject(reader.error);
        }
        resolve(reader.result);
    }
}
DropAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-drop-area',
                template: "<div\n  class=\"drop-zone\"\n  *ngIf=\"!shouldShowFilesList()\"\n  [ngClass]=\"{ 'has-errors': errors }\"\n  [style.pointerEvents]=\"loading ? 'none' : 'auto'\"\n  #zone\n  (dragleave)=\"stopDragging()\"\n  (drop)=\"onDrop($event)\"\n  (dragover)=\"onOver()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  (click)=\"showPicker($event)\"\n  tabindex=\"0\"\n>\n  <div class=\"file-placeholder\" [ngClass]=\"{ 'drag-over': isOver }\">\n    <div *ngIf=\"loading\" class=\"d-flex p-4 flex-center\">\n      <div\n        class=\"progress progress-striped active m-0\"\n        *ngIf=\"progress !== -1\"\n        style=\"min-width: 50%\"\n      >\n        <div\n          class=\"progress-bar\"\n          role=\"progressbar\"\n          aria-valuenow=\"0\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          [style.width]=\"progress + '%'\"\n        ></div>\n      </div>\n      <div class=\"spinner-snake\" *ngIf=\"progress === -1\"></div>\n      <p class=\"flex-item-middle m-r-8\">\n        {{ loadingMessage | translate }}\n      </p>\n    </div>\n\n    <div *ngIf=\"!loading\" class=\"hint-placeholder pointer\">\n      <i class=\"dlt-c8y-icon-{{ icon }}\"></i>\n      <p *ngIf=\"!errors\">\n        <b>{{ message | translate }}</b>\n        <br />\n        <span *ngIf=\"alwaysShow && clickToOpen\" translate\n          >or click to browse your file system.</span\n        >\n      </p>\n      <div *ngIf=\"errors\" class=\"has-errors\">\n        <p class=\"form-control-feedback-message\">\n          {{ errorMessage | translate }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"drop-zone\"\n  *ngIf=\"shouldShowFilesList()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  tabindex=\"0\"\n>\n  <div *ngIf=\"loading\" class=\"p-absolute p-4 fit-w fit-h d-flex d-col j-c-center a-i-center\">\n    <p class=\"m-b-8\">\n      <strong>\n        {{ loadingMessage | translate }}\n      </strong>\n    </p>\n    <div\n      class=\"progress progress-striped active m-0\"\n      *ngIf=\"progress !== -1\"\n      style=\"min-width: 80%\"\n    >\n      <div\n        class=\"progress-bar\"\n        role=\"progressbar\"\n        aria-valuenow=\"0\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </div>\n    <div class=\"spinner p-relative m-0\" *ngIf=\"progress === -1\">\n      <div class=\"rect1\"></div>\n      <div class=\"rect2\"></div>\n      <div class=\"rect3\"></div>\n      <div class=\"rect4\"></div>\n      <div class=\"rect5\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!loading\" class=\"file-placeholder p-4\">\n    <div class=\"flex-row p-4\">\n      <i c8yIcon=\"file-o\" class=\"m-r-8\"></i>\n      <span title=\"{{ filesNameString }}\" class=\"text-truncate\">\n        {{ filesNameString }}\n      </span>\n      <button title=\"{{ 'Remove' | translate }}\" class=\"btn btn-clean showOnHover flex-item-right\">\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n\n<input\n  #picker\n  *ngIf=\"clickToOpen\"\n  (change)=\"onPick($event)\"\n  (click)=\"picker.focus()\"\n  (blur)=\"onTouched()\"\n  [accept]=\"acceptedExts\"\n  [multiple]=\"maxAllowedFiles > 1\"\n  type=\"file\"\n  style=\"opacity: 0; filter: alpha(opacity = 0); height: 0px\"\n/>\n<div #area [hidden]=\"isOver || loading\" (dragover)=\"toggle($event)\">\n  <ng-content></ng-content>\n</div>\n",
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: DropAreaComponent, multi: true }]
            },] }
];
DropAreaComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: FilesService },
    { type: TranslateService },
    { type: BytesPipe }
];
DropAreaComponent.propDecorators = {
    formControl: [{ type: Input }],
    title: [{ type: Input }],
    message: [{ type: Input }],
    icon: [{ type: Input }],
    loadingMessage: [{ type: Input }],
    forceHideList: [{ type: Input }],
    alwaysShow: [{ type: Input }],
    clickToOpen: [{ type: Input }],
    loading: [{ type: Input }],
    progress: [{ type: Input }],
    dropped: [{ type: Output }],
    maxAllowedFiles: [{ type: Input }],
    files: [{ type: Input }],
    accept: [{ type: Input }],
    area: [{ type: ViewChild, args: ['area', { static: true },] }],
    zone: [{ type: ViewChild, args: ['zone', { static: false },] }],
    picker: [{ type: ViewChild, args: ['picker', { static: false },] }],
    onkeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
var ReadAsType;
(function (ReadAsType) {
    ReadAsType[ReadAsType["TEXT"] = 0] = "TEXT";
    ReadAsType[ReadAsType["DATA_URL"] = 1] = "DATA_URL";
    ReadAsType[ReadAsType["ARRAY_BUFFER"] = 2] = "ARRAY_BUFFER";
    ReadAsType[ReadAsType["BINARY_STRING"] = 3] = "BINARY_STRING";
})(ReadAsType || (ReadAsType = {}));
//# sourceMappingURL=data:application/json;base64,