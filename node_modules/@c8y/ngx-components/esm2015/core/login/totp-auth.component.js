import { __awaiter } from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
import { LoginService } from './login.service';
import { LoginViews } from './login.model';
import { gettext } from '../i18n/gettext';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './login.service';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '../alert/alert.service';
import * as ɵngcc4 from '../i18n/c8y-translate.directive';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '../authentication/totp-challenge.component';
import * as ɵngcc7 from '../authentication/totp-setup.component';

function TotpAuthComponent_c8y_totp_setup_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-totp-setup");
} }
export class TotpAuthComponent {
    constructor(loginService, userService, alert) {
        this.loginService = loginService;
        this.userService = userService;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.loading = false;
        this.hasError = false;
        this.isSetup = false;
    }
    /**
     * In case of a setup we need the user to be authorized
     * first.
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.view === this.LOGIN_VIEWS.TotpSetup) {
                yield this.loginService.switchLoginMode(this.credentials);
                this.isSetup = true;
            }
        });
    }
    onTotpSuccess(code) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                this.credentials.tfa = code;
                if (this.isSetup) {
                    yield this.userService.activateTotp();
                }
                yield this.loginService.switchLoginMode(this.credentials);
                yield this.loginService.verifyAppAccess();
                yield this.loginService.authFulfilled();
            }
            catch (e) {
                this.alert.removeLastDanger();
                if (e.data && e.data.message === 'Access is denied') {
                    this.alert.addServerFailure(e);
                }
                if (e.data && e.data.message === 'Authentication failed! : User account is locked') {
                    this.alert.warning(gettext('Authentication failed due to: user account is locked.'));
                }
                else {
                    this.hasError = true;
                }
            }
            finally {
                this.loading = false;
            }
        });
    }
}
TotpAuthComponent.ɵfac = function TotpAuthComponent_Factory(t) { return new (t || TotpAuthComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService)); };
TotpAuthComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TotpAuthComponent, selectors: [["c8y-totp-auth"]], inputs: { credentials: "credentials", view: "view" }, outputs: { onCancel: "onCancel" }, decls: 4, vars: 4, consts: [["translate", "", 1, "legend", "form-block", "center"], [4, "ngIf"], [3, "loading", "hasError", "verify", "onSuccess", "totpUnconfirmedEmitter"]], template: function TotpAuthComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1, " Two-factor authentication\n");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, TotpAuthComponent_c8y_totp_setup_2_Template, 1, 0, "c8y-totp-setup", 1);
        ɵngcc0.ɵɵelementStart(3, "c8y-totp-challenge", 2);
        ɵngcc0.ɵɵlistener("onSuccess", function TotpAuthComponent_Template_c8y_totp_challenge_onSuccess_3_listener($event) { return ctx.onTotpSuccess($event); })("totpUnconfirmedEmitter", function TotpAuthComponent_Template_c8y_totp_challenge_totpUnconfirmedEmitter_3_listener() { return ctx.onCancel.emit(); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSetup);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("loading", ctx.loading)("hasError", ctx.hasError)("verify", ctx.view === ctx.LOGIN_VIEWS.TotpSetup);
    } }, directives: [ɵngcc4.C8yTranslateDirective, ɵngcc5.NgIf, ɵngcc6.TotpChallengeComponent, ɵngcc7.TotpSetupComponent], encapsulation: 2 });
TotpAuthComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
TotpAuthComponent.propDecorators = {
    credentials: [{ type: Input }],
    view: [{ type: Input }],
    onCancel: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TotpAuthComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-totp-auth',
                template: "<div\n  class=\"legend form-block center\"\n  translate\n>\n  Two-factor authentication\n</div>\n\n<c8y-totp-setup *ngIf=\"isSetup\">\n</c8y-totp-setup>\n<c8y-totp-challenge\n  [loading]=\"loading\"\n  [hasError]=\"hasError\"\n  [verify]=\"view === LOGIN_VIEWS.TotpSetup\"\n  (onSuccess)=\"onTotpSuccess($event)\"\n  (totpUnconfirmedEmitter)=\"onCancel.emit()\"\n></c8y-totp-challenge>\n"
            }]
    }], function () { return [{ type: ɵngcc1.LoginService }, { type: ɵngcc2.UserService }, { type: ɵngcc3.AlertService }]; }, { onCancel: [{
            type: Output
        }], credentials: [{
            type: Input
        }], view: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1hdXRoLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9sb2dpbi90b3RwLWF1dGguY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBZ0IsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7Ozs7Ozs7QUFNMUMsTUFBTSxPQUFPLGlCQUFpQjtBQUFHLElBUy9CLFlBQ1MsWUFBMEIsRUFDekIsV0FBd0IsRUFDeEIsS0FBbUI7QUFDNUIsUUFIUSxpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUFDLFFBQzFCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0FBQUMsUUFDekIsVUFBSyxHQUFMLEtBQUssQ0FBYztBQUMvQixRQVZZLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzFDLFFBQUUsZ0JBQVcsR0FBRyxVQUFVLENBQUM7QUFDM0IsUUFBRSxZQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLFFBQUUsYUFBUSxHQUFHLEtBQUssQ0FBQztBQUNuQixRQUFFLFlBQU8sR0FBRyxLQUFLLENBQUM7QUFDbEIsSUFLSyxDQUFDO0FBQ04sSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBUSxRQUFRO0FBQ2hCO0FBQ1UsWUFETixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7QUFDbEQsZ0JBQU0sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDaEUsZ0JBQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDMUIsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNRLGFBQWEsQ0FBQyxJQUFJO0FBQzFCO0FBRXlCLFlBRnJCLElBQUk7QUFDUixnQkFBTSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUMxQixnQkFBTSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUM1QixnQkFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDbEMsZ0JBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3hCLG9CQUFRLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM5QyxpQkFBTztBQUNQLGdCQUFNLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2hFLGdCQUFNLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNoRCxnQkFBTSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDOUMsYUFBSztBQUFDLFlBQUEsT0FBTyxDQUFDLEVBQUU7QUFDaEIsZ0JBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3BDLGdCQUFNLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxrQkFBa0IsRUFBRTtBQUMzRCxvQkFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLGlCQUFPO0FBQ1AsZ0JBQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGlEQUFpRCxFQUFFO0FBQzFGLG9CQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyx1REFBdUQsQ0FBQyxDQUFDLENBQUM7QUFDN0YsaUJBQU87QUFBQyxxQkFBSztBQUNiLG9CQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQzdCLGlCQUFPO0FBQ1AsYUFBSztBQUFDLG9CQUFRO0FBQ2QsZ0JBQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDM0IsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDs2Q0F2REMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxlQUFlLGtCQUN6QjtzUkFBeUMsY0FDMUM7Ozs7Ozs7Ozs7Ozs7Z0pBQ0k7QUFBQztBQUEyQyxZQVJ4QyxZQUFZO0FBQUksWUFGRixXQUFXO0FBQUksWUFDN0IsWUFBWTtBQUFHO0FBQUc7QUFDbEIsMEJBU04sS0FBSztBQUFLLG1CQUNWLEtBQUs7QUFBSyx1QkFDVixNQUFNO0FBQUk7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDcmVkZW50aWFscywgVXNlclNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblZpZXdzIH0gZnJvbSAnLi9sb2dpbi5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXRvdHAtYXV0aCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90b3RwLWF1dGguY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRvdHBBdXRoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY3JlZGVudGlhbHM6IElDcmVkZW50aWFscztcbiAgQElucHV0KCkgdmlldzogTG9naW5WaWV3cztcbiAgQE91dHB1dCgpIG9uQ2FuY2VsID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBMT0dJTl9WSUVXUyA9IExvZ2luVmlld3M7XG4gIGxvYWRpbmcgPSBmYWxzZTtcbiAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgaXNTZXR1cCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBJbiBjYXNlIG9mIGEgc2V0dXAgd2UgbmVlZCB0aGUgdXNlciB0byBiZSBhdXRob3JpemVkXG4gICAqIGZpcnN0LlxuICAgKi9cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudmlldyA9PT0gdGhpcy5MT0dJTl9WSUVXUy5Ub3RwU2V0dXApIHtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLnN3aXRjaExvZ2luTW9kZSh0aGlzLmNyZWRlbnRpYWxzKTtcbiAgICAgIHRoaXMuaXNTZXR1cCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgb25Ub3RwU3VjY2Vzcyhjb2RlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzLnRmYSA9IGNvZGU7XG4gICAgICBpZiAodGhpcy5pc1NldHVwKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXNlclNlcnZpY2UuYWN0aXZhdGVUb3RwKCk7XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLmxvZ2luU2VydmljZS5zd2l0Y2hMb2dpbk1vZGUodGhpcy5jcmVkZW50aWFscyk7XG4gICAgICBhd2FpdCB0aGlzLmxvZ2luU2VydmljZS52ZXJpZnlBcHBBY2Nlc3MoKTtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLmF1dGhGdWxmaWxsZWQoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmFsZXJ0LnJlbW92ZUxhc3REYW5nZXIoKTtcbiAgICAgIGlmIChlLmRhdGEgJiYgZS5kYXRhLm1lc3NhZ2UgPT09ICdBY2Nlc3MgaXMgZGVuaWVkJykge1xuICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZSk7XG4gICAgICB9XG4gICAgICBpZiAoZS5kYXRhICYmIGUuZGF0YS5tZXNzYWdlID09PSAnQXV0aGVudGljYXRpb24gZmFpbGVkISA6IFVzZXIgYWNjb3VudCBpcyBsb2NrZWQnKSB7XG4gICAgICAgIHRoaXMuYWxlcnQud2FybmluZyhnZXR0ZXh0KCdBdXRoZW50aWNhdGlvbiBmYWlsZWQgZHVlIHRvOiB1c2VyIGFjY291bnQgaXMgbG9ja2VkLicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==