import { __awaiter } from "tslib";
import { Component, Input, HostListener } from '@angular/core';
import { TenantLoginOptionType } from '@c8y/client';
import { LoginService } from './login.service';
import { OptionsService } from '../common/options.service';
import { LoginViews } from './login.model';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n/gettext';
import { CredentialsFromQueryParamsService } from './credentials-from-query-params.service';
export class LoginComponent {
    /**
     * Just DI.
     */
    constructor(loginService, options, alert, credentialsFromQueryParamsService) {
        this.loginService = loginService;
        this.options = options;
        this.alert = alert;
        this.credentialsFromQueryParamsService = credentialsFromQueryParamsService;
        this.currentView = LoginViews.None;
        this.LOGIN_VIEWS = LoginViews;
        this.disabled = false;
        this.credentials = {};
        this.loginViewParams = {};
        this.displayAlerts = false;
        this.TOKEN_PARAM = 'token';
    }
    ngOnInit() {
        const token = this.getResetPasswordToken();
        if (this.loginService.isFirstLogin) {
            if (!token) {
                this.loginAutomatically();
            }
            else {
                this.credentials.token = token;
                this.reset();
            }
        }
        this.loginService.isFirstLogin = false;
    }
    ngOnDestroy() {
        // make sure that we do not have any queryParameters related to credentials after logging in or even if we were already logged in.
        this.credentialsFromQueryParamsService.removeCredentialsFromQueryParams();
    }
    handleLoginTemplate(event) {
        this.currentView = event.view;
        this.credentials = event.credentials || {};
        this.loginViewParams = event.loginViewParams || {};
    }
    onkeyup(event) {
        if (event.key !== 'Enter') {
            this.loginService.cleanMessages();
        }
    }
    reset() {
        this.loginService.reset();
        this.setView();
        this.loginService.cleanMessages();
    }
    loginAutomatically() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loginService.login();
            }
            catch (e) {
                const preferredLoginOptionType = this.loginService.loginMode.type;
                if (preferredLoginOptionType === TenantLoginOptionType.OAUTH2) {
                    this.loginService.redirectToOauth();
                }
                else {
                    this.reset();
                    if (preferredLoginOptionType === TenantLoginOptionType.OAUTH2_INTERNAL && window.location.protocol !== 'https:') {
                        this.alert.danger(gettext('Current login mode only supports HTTPS.'));
                    }
                    else if (e.res && e.res.status === 403) {
                        this.alert.addServerFailure(e);
                    }
                }
            }
        });
    }
    setView() {
        if (this.credentials && this.credentials.token) {
            this.handleLoginTemplate({ view: LoginViews.ChangePassword, credentials: this.credentials });
        }
        else if (this.loginService.showTenantSetup()) {
            this.handleLoginTemplate({ view: LoginViews.TenantIdSetup });
        }
        else {
            this.handleLoginTemplate({ view: LoginViews.Credentials });
        }
    }
    getResetPasswordToken() {
        const token = this.options.get(this.TOKEN_PARAM);
        if (token) {
            this.options.set(this.TOKEN_PARAM, undefined); // only use once
        }
        return token;
    }
}
LoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-login',
                template: "<div\n  class=\"loading card fadeInUp animated shadow5\"\n  *ngIf=\"currentView !== LOGIN_VIEWS.None\"\n  [ngSwitch]=\"currentView\"\n>\n  <div class=\"card-block p-b-0\">\n    <img alt=\"\" class=\"mainlogo\">\n    <c8y-credentials\n      *ngSwitchCase=\"LOGIN_VIEWS.Credentials\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [loginViewParams]=\"loginViewParams\"\n    ></c8y-credentials>\n    <c8y-recover-password\n      *ngSwitchCase=\"LOGIN_VIEWS.RecoverPassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-recover-password>\n    <c8y-change-password\n      *ngSwitchCase=\"LOGIN_VIEWS.ChangePassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-change-password>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpChallenge\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpSetup\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-sms-challenge\n      *ngSwitchCase=\"LOGIN_VIEWS.SmsChallenge\"\n      (onCancel)=\"reset()\"\n      [credentials]=\"credentials\"\n    ></c8y-sms-challenge>\n\n    <c8y-provide-phone-number\n      *ngSwitchCase=\"LOGIN_VIEWS.ProvidePhoneNumber\"\n      (onCancel)=\"reset()\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-provide-phone-number>\n    <c8y-tenant-id-setup\n      *ngSwitchCase=\"LOGIN_VIEWS.TenantIdSetup\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-tenant-id-setup>\n\n    <c8y-alert-outlet position=\"static\"></c8y-alert-outlet>\n  </div>\n</div>\n"
            },] }
];
LoginComponent.ctorParameters = () => [
    { type: LoginService },
    { type: OptionsService },
    { type: AlertService },
    { type: CredentialsFromQueryParamsService }
];
LoginComponent.propDecorators = {
    name: [{ type: Input }],
    onkeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,