import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class CredentialsFromQueryParamsService {
    constructor() {
        this.queryParamsToHandle = ['tenant', 'user'];
    }
    /**
     * Retrieves any subset of credentials provided via queryParams
     * @return ICredentials found in queryParams.
     */
    getCredentialsFromQueryParams() {
        const credentials = {};
        try {
            const params = new URLSearchParams(window.location.search);
            this.queryParamsToHandle.forEach(param => {
                const value = this.getParameterFromQueryParams(params, param);
                if (value) {
                    credentials[param] = value;
                }
            });
        }
        catch (e) {
            // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
        }
        return credentials;
    }
    /**
     * Removes credentials from the queryParameters if any are present.
     * In case some credentials were present, this method will cause a page reload.
     * @return boolean if credentials were found.
     */
    removeCredentialsFromQueryParams() {
        try {
            const params = new URLSearchParams(window.location.search);
            const hasRemovedAtLeastOneParam = this.queryParamsToHandle.map(param => this.removeParameterFromQueryParameters(params, param)).reduceRight((prev, curr) => prev || curr, false);
            if (hasRemovedAtLeastOneParam) {
                window.location.search = params.toString();
                return true;
            }
        }
        catch (e) {
            // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
        }
        return false;
    }
    /**
     * Looks for the specified key in the provided URLSearchParams.
     * If the specified key was found, it will be removed.
     * @return boolean if key was found.
     */
    removeParameterFromQueryParameters(params, key) {
        const keyAsString = `${key}`;
        if (!params.has(keyAsString)) {
            return false;
        }
        params.delete(keyAsString);
        return true;
    }
    /**
     * Looks for the specified key in the provided URLSearchParams.
     * If the specified key was found, it's value will be returned.
     * Otherwise null will be returned.
     * @return string/null.
     */
    getParameterFromQueryParams(params, key) {
        const keyAsString = `${key}`;
        if (!params.has(keyAsString)) {
            return null;
        }
        const value = params.get(keyAsString);
        if (!value) {
            return null;
        }
        return value;
    }
}
CredentialsFromQueryParamsService.ɵfac = function CredentialsFromQueryParamsService_Factory(t) { return new (t || CredentialsFromQueryParamsService)(); };
CredentialsFromQueryParamsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: CredentialsFromQueryParamsService, factory: CredentialsFromQueryParamsService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CredentialsFromQueryParamsService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMtZnJvbS1xdWVyeS1wYXJhbXMuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9sb2dpbi9jcmVkZW50aWFscy1mcm9tLXF1ZXJ5LXBhcmFtcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTNDLE1BQU0sT0FBTyxpQ0FBaUM7QUFDOUMsSUFGQTtBQUNFLFFBQ2lCLHdCQUFtQixHQUE4QixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2RixJQXdFQSxDQUFDO0FBQ0QsSUF4RUU7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsNkJBQTZCO0FBQUssUUFDaEMsTUFBTSxXQUFXLEdBQWlCLEVBQUUsQ0FBQztBQUN6QyxRQUFJLElBQUk7QUFDUixZQUFNLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakUsWUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQy9DLGdCQUFRLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEUsZ0JBQVEsSUFBSSxLQUFLLEVBQUU7QUFDbkIsb0JBQVUsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNyQyxpQkFBUztBQUNULFlBQU0sQ0FBQyxDQUFDLENBQUM7QUFDVCxTQUFLO0FBQUMsUUFBQSxPQUFPLENBQUMsRUFBRTtBQUNoQixZQUFNLCtGQUErRjtBQUNyRyxTQUFLO0FBQ0wsUUFBSSxPQUFPLFdBQVcsQ0FBQztBQUN2QixJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMLElBQUUsZ0NBQWdDO0FBQUssUUFDbkMsSUFBSTtBQUNSLFlBQU0sTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqRSxZQUFNLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZMLFlBQU0sSUFBSSx5QkFBeUIsRUFBRTtBQUNyQyxnQkFBUSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbkQsZ0JBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsYUFBTztBQUNQLFNBQUs7QUFBQyxRQUFBLE9BQU8sQ0FBQyxFQUFFO0FBQ2hCLFlBQU0sK0ZBQStGO0FBQ3JHLFNBQUs7QUFDTCxRQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFFSixPQURLO0FBQ0wsSUFBVSxrQ0FBa0MsQ0FBQyxNQUF1QixFQUFFLEdBQXVCO0FBQUksUUFDN0YsTUFBTSxXQUFXLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNqQyxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO0FBQ2xDLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvQixRQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREc7QUFDTCxJQUFVLDJCQUEyQixDQUFDLE1BQXVCLEVBQUUsR0FBdUI7QUFBSSxRQUN0RixNQUFNLFdBQVcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7QUFDbEMsWUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixTQUFLO0FBQ0wsUUFBSSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzFDLFFBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNoQixZQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLFNBQUs7QUFDTCxRQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUNIOzZEQTFFQyxVQUFVOzs7O2dEQUNUO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ3JlZGVudGlhbHMgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDcmVkZW50aWFsc0Zyb21RdWVyeVBhcmFtc1NlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHF1ZXJ5UGFyYW1zVG9IYW5kbGU6IEFycmF5PGtleW9mIElDcmVkZW50aWFscz4gPSBbJ3RlbmFudCcsICd1c2VyJ107XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbnkgc3Vic2V0IG9mIGNyZWRlbnRpYWxzIHByb3ZpZGVkIHZpYSBxdWVyeVBhcmFtc1xuICAgKiBAcmV0dXJuIElDcmVkZW50aWFscyBmb3VuZCBpbiBxdWVyeVBhcmFtcy5cbiAgICovXG4gIGdldENyZWRlbnRpYWxzRnJvbVF1ZXJ5UGFyYW1zKCk6IElDcmVkZW50aWFscyB7XG4gICAgY29uc3QgY3JlZGVudGlhbHM6IElDcmVkZW50aWFscyA9IHt9O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgdGhpcy5xdWVyeVBhcmFtc1RvSGFuZGxlLmZvckVhY2gocGFyYW0gPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0UGFyYW1ldGVyRnJvbVF1ZXJ5UGFyYW1zKHBhcmFtcywgcGFyYW0pO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBjcmVkZW50aWFsc1twYXJhbV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gVVJMU2VhcmNoUGFyYW1zIHByb2JhYmx5IG5vdCBhdmFpbGFibGUgaW4gYWxsIGJyb3dzZXJzIChodHRwczovL2Nhbml1c2UuY29tL3VybHNlYXJjaHBhcmFtcylcbiAgICB9XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgY3JlZGVudGlhbHMgZnJvbSB0aGUgcXVlcnlQYXJhbWV0ZXJzIGlmIGFueSBhcmUgcHJlc2VudC5cbiAgICogSW4gY2FzZSBzb21lIGNyZWRlbnRpYWxzIHdlcmUgcHJlc2VudCwgdGhpcyBtZXRob2Qgd2lsbCBjYXVzZSBhIHBhZ2UgcmVsb2FkLlxuICAgKiBAcmV0dXJuIGJvb2xlYW4gaWYgY3JlZGVudGlhbHMgd2VyZSBmb3VuZC5cbiAgICovXG4gIHJlbW92ZUNyZWRlbnRpYWxzRnJvbVF1ZXJ5UGFyYW1zKCk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgY29uc3QgaGFzUmVtb3ZlZEF0TGVhc3RPbmVQYXJhbSA9IHRoaXMucXVlcnlQYXJhbXNUb0hhbmRsZS5tYXAocGFyYW0gPT4gdGhpcy5yZW1vdmVQYXJhbWV0ZXJGcm9tUXVlcnlQYXJhbWV0ZXJzKHBhcmFtcywgcGFyYW0pKS5yZWR1Y2VSaWdodCgocHJldiwgY3VycikgPT4gcHJldiB8fCBjdXJyLCBmYWxzZSk7XG4gICAgICBpZiAoaGFzUmVtb3ZlZEF0TGVhc3RPbmVQYXJhbSkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFVSTFNlYXJjaFBhcmFtcyBwcm9iYWJseSBub3QgYXZhaWxhYmxlIGluIGFsbCBicm93c2VycyAoaHR0cHM6Ly9jYW5pdXNlLmNvbS91cmxzZWFyY2hwYXJhbXMpXG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb29rcyBmb3IgdGhlIHNwZWNpZmllZCBrZXkgaW4gdGhlIHByb3ZpZGVkIFVSTFNlYXJjaFBhcmFtcy5cbiAgICogSWYgdGhlIHNwZWNpZmllZCBrZXkgd2FzIGZvdW5kLCBpdCB3aWxsIGJlIHJlbW92ZWQuXG4gICAqIEByZXR1cm4gYm9vbGVhbiBpZiBrZXkgd2FzIGZvdW5kLlxuICAgKi9cbiAgcHJpdmF0ZSByZW1vdmVQYXJhbWV0ZXJGcm9tUXVlcnlQYXJhbWV0ZXJzKHBhcmFtczogVVJMU2VhcmNoUGFyYW1zLCBrZXk6IGtleW9mIElDcmVkZW50aWFscyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGtleUFzU3RyaW5nID0gYCR7a2V5fWA7XG4gICAgaWYgKCFwYXJhbXMuaGFzKGtleUFzU3RyaW5nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwYXJhbXMuZGVsZXRlKGtleUFzU3RyaW5nKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb29rcyBmb3IgdGhlIHNwZWNpZmllZCBrZXkgaW4gdGhlIHByb3ZpZGVkIFVSTFNlYXJjaFBhcmFtcy5cbiAgICogSWYgdGhlIHNwZWNpZmllZCBrZXkgd2FzIGZvdW5kLCBpdCdzIHZhbHVlIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqIE90aGVyd2lzZSBudWxsIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqIEByZXR1cm4gc3RyaW5nL251bGwuXG4gICAqL1xuICBwcml2YXRlIGdldFBhcmFtZXRlckZyb21RdWVyeVBhcmFtcyhwYXJhbXM6IFVSTFNlYXJjaFBhcmFtcywga2V5OiBrZXlvZiBJQ3JlZGVudGlhbHMpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCBrZXlBc1N0cmluZyA9IGAke2tleX1gO1xuICAgIGlmICghcGFyYW1zLmhhcyhrZXlBc1N0cmluZykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHBhcmFtcy5nZXQoa2V5QXNTdHJpbmcpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxufVxuIl19