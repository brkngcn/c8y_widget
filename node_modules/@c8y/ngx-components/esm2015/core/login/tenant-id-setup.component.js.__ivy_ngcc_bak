import { __awaiter } from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { LoginViews } from './login.model';
import { FetchClient } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { LoginService } from './login.service';
import { AlertService } from '../alert/alert.service';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
/**
 * `TenantIdSetupComponent` is intended to be shown when tenant's id cannot be determined based on the current URL.
 * It asks the user to provide target tenant's id and then it fetches login options for this tenant.
 * In case of OAI-Secure login mode, login options will contain `domain` property set by backend.
 * The component will redirect user to this domain, preserving URL path and params.
 */
export class TenantIdSetupComponent {
    constructor(client, ui, loginService, alert, translateService) {
        this.client = client;
        this.ui = ui;
        this.loginService = loginService;
        this.alert = alert;
        this.translateService = translateService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.model = {
            tenant: ''
        };
    }
    /**
     * Sets up login mode for particular tenant. In case of OAI-Secure will redirect user to tenant domain.
     */
    setupLoginMode() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.tenant = this.model.tenant;
            try {
                yield this.ui.refreshLoginOptions();
                this.loginService.initLoginOptions();
                this.redirectToCorrectDomain();
            }
            catch (e) {
                if (e.res && e.res.status === 401) {
                    this.alert.danger(this.translateService.instant(gettext('Could not find tenant with ID "{{ tenantId }}".'), { tenantId: this.model.tenant }));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    /**
     * Redirects to tenant domain when login mode contains domain.
     */
    redirectToCorrectDomain() {
        const loginRedirectDomain = this.loginService.loginMode.loginRedirectDomain;
        if (loginRedirectDomain) {
            const alreadyOnCorrectDomain = window.location.href.includes(loginRedirectDomain);
            if (!alreadyOnCorrectDomain) {
                this.loginService.redirectToDomain(loginRedirectDomain);
            }
            else {
                this.onChangeView.emit({
                    view: LoginViews.Credentials,
                    loginViewParams: { showTenant: true, disableTenant: true }
                });
            }
        }
        else {
            this.onChangeView.emit({ view: LoginViews.Credentials });
        }
    }
}
TenantIdSetupComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-tenant-id-setup',
                template: "<form #tenantIdSetupForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"setupLoginMode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Tenant setup\n  </div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Apply' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"!tenantIdSetupForm.form.valid\"\n    translate\n  >\n    Apply\n  </button>\n</form>\n"
            },] }
];
TenantIdSetupComponent.ctorParameters = () => [
    { type: FetchClient },
    { type: AppStateService },
    { type: LoginService },
    { type: AlertService },
    { type: TranslateService }
];
TenantIdSetupComponent.propDecorators = {
    onChangeView: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbG9naW4vdGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFRMUM7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBT2pDLFlBQ1UsTUFBbUIsRUFDbkIsRUFBbUIsRUFDbkIsWUFBMEIsRUFDMUIsS0FBbUIsRUFDbkIsZ0JBQWtDO1FBSmxDLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDbkIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbkIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBWGxDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QyxnQkFBVyxHQUFHLFVBQVUsQ0FBQztRQUN6QixVQUFLLEdBQUc7WUFDTixNQUFNLEVBQUUsRUFBRTtTQUNYLENBQUM7SUFRQyxDQUFDO0lBRUo7O09BRUc7SUFDRyxjQUFjOztZQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUN2QyxJQUFJO2dCQUNGLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2dCQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO2FBQ2hDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtvQkFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ2YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FDM0IsT0FBTyxDQUFDLGlEQUFpRCxDQUFDLEVBQzFELEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQ2hDLENBQ0YsQ0FBQztpQkFDSDtxQkFBTTtvQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoQzthQUNGO1FBQ0gsQ0FBQztLQUFBO0lBRUQ7O09BRUc7SUFDSCx1QkFBdUI7UUFDckIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztRQUM1RSxJQUFJLG1CQUFtQixFQUFFO1lBQ3ZCLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDbEYsSUFBSSxDQUFDLHNCQUFzQixFQUFFO2dCQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDekQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7b0JBQ3JCLElBQUksRUFBRSxVQUFVLENBQUMsV0FBVztvQkFDNUIsZUFBZSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFO2lCQUMzRCxDQUFDLENBQUM7YUFDSjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7OztZQXBFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsNjVCQUErQzthQUVoRDs7O1lBWFEsV0FBVztZQUNYLGVBQWU7WUFDZixZQUFZO1lBQ1osWUFBWTtZQUNaLGdCQUFnQjs7OzJCQWdCdEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9naW5WaWV3cyB9IGZyb20gJy4vbG9naW4ubW9kZWwnO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXRlbmFudC1pZC1zZXR1cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90ZW5hbnQtaWQtc2V0dXAuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXM6IFtdXG59KVxuXG4vKipcbiAqIGBUZW5hbnRJZFNldHVwQ29tcG9uZW50YCBpcyBpbnRlbmRlZCB0byBiZSBzaG93biB3aGVuIHRlbmFudCdzIGlkIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IFVSTC5cbiAqIEl0IGFza3MgdGhlIHVzZXIgdG8gcHJvdmlkZSB0YXJnZXQgdGVuYW50J3MgaWQgYW5kIHRoZW4gaXQgZmV0Y2hlcyBsb2dpbiBvcHRpb25zIGZvciB0aGlzIHRlbmFudC5cbiAqIEluIGNhc2Ugb2YgT0FJLVNlY3VyZSBsb2dpbiBtb2RlLCBsb2dpbiBvcHRpb25zIHdpbGwgY29udGFpbiBgZG9tYWluYCBwcm9wZXJ0eSBzZXQgYnkgYmFja2VuZC5cbiAqIFRoZSBjb21wb25lbnQgd2lsbCByZWRpcmVjdCB1c2VyIHRvIHRoaXMgZG9tYWluLCBwcmVzZXJ2aW5nIFVSTCBwYXRoIGFuZCBwYXJhbXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5hbnRJZFNldHVwQ29tcG9uZW50IHtcbiAgQE91dHB1dCgpIG9uQ2hhbmdlVmlldyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgTE9HSU5fVklFV1MgPSBMb2dpblZpZXdzO1xuICBtb2RlbCA9IHtcbiAgICB0ZW5hbnQ6ICcnXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50LFxuICAgIHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIGxvZ2luIG1vZGUgZm9yIHBhcnRpY3VsYXIgdGVuYW50LiBJbiBjYXNlIG9mIE9BSS1TZWN1cmUgd2lsbCByZWRpcmVjdCB1c2VyIHRvIHRlbmFudCBkb21haW4uXG4gICAqL1xuICBhc3luYyBzZXR1cExvZ2luTW9kZSgpIHtcbiAgICB0aGlzLmNsaWVudC50ZW5hbnQgPSB0aGlzLm1vZGVsLnRlbmFudDtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy51aS5yZWZyZXNoTG9naW5PcHRpb25zKCk7XG4gICAgICB0aGlzLmxvZ2luU2VydmljZS5pbml0TG9naW5PcHRpb25zKCk7XG4gICAgICB0aGlzLnJlZGlyZWN0VG9Db3JyZWN0RG9tYWluKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUucmVzICYmIGUucmVzLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKFxuICAgICAgICAgIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KFxuICAgICAgICAgICAgZ2V0dGV4dCgnQ291bGQgbm90IGZpbmQgdGVuYW50IHdpdGggSUQgXCJ7eyB0ZW5hbnRJZCB9fVwiLicpLFxuICAgICAgICAgICAgeyB0ZW5hbnRJZDogdGhpcy5tb2RlbC50ZW5hbnQgfVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVkaXJlY3RzIHRvIHRlbmFudCBkb21haW4gd2hlbiBsb2dpbiBtb2RlIGNvbnRhaW5zIGRvbWFpbi5cbiAgICovXG4gIHJlZGlyZWN0VG9Db3JyZWN0RG9tYWluKCkge1xuICAgIGNvbnN0IGxvZ2luUmVkaXJlY3REb21haW4gPSB0aGlzLmxvZ2luU2VydmljZS5sb2dpbk1vZGUubG9naW5SZWRpcmVjdERvbWFpbjtcbiAgICBpZiAobG9naW5SZWRpcmVjdERvbWFpbikge1xuICAgICAgY29uc3QgYWxyZWFkeU9uQ29ycmVjdERvbWFpbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluY2x1ZGVzKGxvZ2luUmVkaXJlY3REb21haW4pO1xuICAgICAgaWYgKCFhbHJlYWR5T25Db3JyZWN0RG9tYWluKSB7XG4gICAgICAgIHRoaXMubG9naW5TZXJ2aWNlLnJlZGlyZWN0VG9Eb21haW4obG9naW5SZWRpcmVjdERvbWFpbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlVmlldy5lbWl0KHtcbiAgICAgICAgICB2aWV3OiBMb2dpblZpZXdzLkNyZWRlbnRpYWxzLFxuICAgICAgICAgIGxvZ2luVmlld1BhcmFtczogeyBzaG93VGVuYW50OiB0cnVlLCBkaXNhYmxlVGVuYW50OiB0cnVlIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25DaGFuZ2VWaWV3LmVtaXQoeyB2aWV3OiBMb2dpblZpZXdzLkNyZWRlbnRpYWxzIH0pO1xuICAgIH1cbiAgfVxufVxuIl19