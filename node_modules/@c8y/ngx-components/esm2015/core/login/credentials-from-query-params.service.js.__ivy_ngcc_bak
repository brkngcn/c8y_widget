import { Injectable } from '@angular/core';
export class CredentialsFromQueryParamsService {
    constructor() {
        this.queryParamsToHandle = ['tenant', 'user'];
    }
    /**
     * Retrieves any subset of credentials provided via queryParams
     * @return ICredentials found in queryParams.
     */
    getCredentialsFromQueryParams() {
        const credentials = {};
        try {
            const params = new URLSearchParams(window.location.search);
            this.queryParamsToHandle.forEach(param => {
                const value = this.getParameterFromQueryParams(params, param);
                if (value) {
                    credentials[param] = value;
                }
            });
        }
        catch (e) {
            // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
        }
        return credentials;
    }
    /**
     * Removes credentials from the queryParameters if any are present.
     * In case some credentials were present, this method will cause a page reload.
     * @return boolean if credentials were found.
     */
    removeCredentialsFromQueryParams() {
        try {
            const params = new URLSearchParams(window.location.search);
            const hasRemovedAtLeastOneParam = this.queryParamsToHandle.map(param => this.removeParameterFromQueryParameters(params, param)).reduceRight((prev, curr) => prev || curr, false);
            if (hasRemovedAtLeastOneParam) {
                window.location.search = params.toString();
                return true;
            }
        }
        catch (e) {
            // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
        }
        return false;
    }
    /**
     * Looks for the specified key in the provided URLSearchParams.
     * If the specified key was found, it will be removed.
     * @return boolean if key was found.
     */
    removeParameterFromQueryParameters(params, key) {
        const keyAsString = `${key}`;
        if (!params.has(keyAsString)) {
            return false;
        }
        params.delete(keyAsString);
        return true;
    }
    /**
     * Looks for the specified key in the provided URLSearchParams.
     * If the specified key was found, it's value will be returned.
     * Otherwise null will be returned.
     * @return string/null.
     */
    getParameterFromQueryParams(params, key) {
        const keyAsString = `${key}`;
        if (!params.has(keyAsString)) {
            return null;
        }
        const value = params.get(keyAsString);
        if (!value) {
            return null;
        }
        return value;
    }
}
CredentialsFromQueryParamsService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMtZnJvbS1xdWVyeS1wYXJhbXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbG9naW4vY3JlZGVudGlhbHMtZnJvbS1xdWVyeS1wYXJhbXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTNDLE1BQU0sT0FBTyxpQ0FBaUM7SUFEOUM7UUFFbUIsd0JBQW1CLEdBQThCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBeUV2RixDQUFDO0lBdkVDOzs7T0FHRztJQUNILDZCQUE2QjtRQUMzQixNQUFNLFdBQVcsR0FBaUIsRUFBRSxDQUFDO1FBQ3JDLElBQUk7WUFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzlELElBQUksS0FBSyxFQUFFO29CQUNULFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQzVCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsK0ZBQStGO1NBQ2hHO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxnQ0FBZ0M7UUFDOUIsSUFBSTtZQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0QsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDakwsSUFBSSx5QkFBeUIsRUFBRTtnQkFDN0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUMzQyxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLCtGQUErRjtTQUNoRztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxrQ0FBa0MsQ0FBQyxNQUF1QixFQUFFLEdBQXVCO1FBQ3pGLE1BQU0sV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDNUIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSywyQkFBMkIsQ0FBQyxNQUF1QixFQUFFLEdBQXVCO1FBQ2xGLE1BQU0sV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQXpFRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNyZWRlbnRpYWxzIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbHNGcm9tUXVlcnlQYXJhbXNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBxdWVyeVBhcmFtc1RvSGFuZGxlOiBBcnJheTxrZXlvZiBJQ3JlZGVudGlhbHM+ID0gWyd0ZW5hbnQnLCAndXNlciddO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYW55IHN1YnNldCBvZiBjcmVkZW50aWFscyBwcm92aWRlZCB2aWEgcXVlcnlQYXJhbXNcbiAgICogQHJldHVybiBJQ3JlZGVudGlhbHMgZm91bmQgaW4gcXVlcnlQYXJhbXMuXG4gICAqL1xuICBnZXRDcmVkZW50aWFsc0Zyb21RdWVyeVBhcmFtcygpOiBJQ3JlZGVudGlhbHMge1xuICAgIGNvbnN0IGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMgPSB7fTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgIHRoaXMucXVlcnlQYXJhbXNUb0hhbmRsZS5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFBhcmFtZXRlckZyb21RdWVyeVBhcmFtcyhwYXJhbXMsIHBhcmFtKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgY3JlZGVudGlhbHNbcGFyYW1dID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFVSTFNlYXJjaFBhcmFtcyBwcm9iYWJseSBub3QgYXZhaWxhYmxlIGluIGFsbCBicm93c2VycyAoaHR0cHM6Ly9jYW5pdXNlLmNvbS91cmxzZWFyY2hwYXJhbXMpXG4gICAgfVxuICAgIHJldHVybiBjcmVkZW50aWFscztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGNyZWRlbnRpYWxzIGZyb20gdGhlIHF1ZXJ5UGFyYW1ldGVycyBpZiBhbnkgYXJlIHByZXNlbnQuXG4gICAqIEluIGNhc2Ugc29tZSBjcmVkZW50aWFscyB3ZXJlIHByZXNlbnQsIHRoaXMgbWV0aG9kIHdpbGwgY2F1c2UgYSBwYWdlIHJlbG9hZC5cbiAgICogQHJldHVybiBib29sZWFuIGlmIGNyZWRlbnRpYWxzIHdlcmUgZm91bmQuXG4gICAqL1xuICByZW1vdmVDcmVkZW50aWFsc0Zyb21RdWVyeVBhcmFtcygpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgIGNvbnN0IGhhc1JlbW92ZWRBdExlYXN0T25lUGFyYW0gPSB0aGlzLnF1ZXJ5UGFyYW1zVG9IYW5kbGUubWFwKHBhcmFtID0+IHRoaXMucmVtb3ZlUGFyYW1ldGVyRnJvbVF1ZXJ5UGFyYW1ldGVycyhwYXJhbXMsIHBhcmFtKSkucmVkdWNlUmlnaHQoKHByZXYsIGN1cnIpID0+IHByZXYgfHwgY3VyciwgZmFsc2UpO1xuICAgICAgaWYgKGhhc1JlbW92ZWRBdExlYXN0T25lUGFyYW0pIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnNlYXJjaCA9IHBhcmFtcy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBVUkxTZWFyY2hQYXJhbXMgcHJvYmFibHkgbm90IGF2YWlsYWJsZSBpbiBhbGwgYnJvd3NlcnMgKGh0dHBzOi8vY2FuaXVzZS5jb20vdXJsc2VhcmNocGFyYW1zKVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogTG9va3MgZm9yIHRoZSBzcGVjaWZpZWQga2V5IGluIHRoZSBwcm92aWRlZCBVUkxTZWFyY2hQYXJhbXMuXG4gICAqIElmIHRoZSBzcGVjaWZpZWQga2V5IHdhcyBmb3VuZCwgaXQgd2lsbCBiZSByZW1vdmVkLlxuICAgKiBAcmV0dXJuIGJvb2xlYW4gaWYga2V5IHdhcyBmb3VuZC5cbiAgICovXG4gIHByaXZhdGUgcmVtb3ZlUGFyYW1ldGVyRnJvbVF1ZXJ5UGFyYW1ldGVycyhwYXJhbXM6IFVSTFNlYXJjaFBhcmFtcywga2V5OiBrZXlvZiBJQ3JlZGVudGlhbHMpOiBib29sZWFuIHtcbiAgICBjb25zdCBrZXlBc1N0cmluZyA9IGAke2tleX1gO1xuICAgIGlmICghcGFyYW1zLmhhcyhrZXlBc1N0cmluZykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcGFyYW1zLmRlbGV0ZShrZXlBc1N0cmluZyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogTG9va3MgZm9yIHRoZSBzcGVjaWZpZWQga2V5IGluIHRoZSBwcm92aWRlZCBVUkxTZWFyY2hQYXJhbXMuXG4gICAqIElmIHRoZSBzcGVjaWZpZWQga2V5IHdhcyBmb3VuZCwgaXQncyB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLlxuICAgKiBPdGhlcndpc2UgbnVsbCB3aWxsIGJlIHJldHVybmVkLlxuICAgKiBAcmV0dXJuIHN0cmluZy9udWxsLlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRQYXJhbWV0ZXJGcm9tUXVlcnlQYXJhbXMocGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMsIGtleToga2V5b2YgSUNyZWRlbnRpYWxzKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgY29uc3Qga2V5QXNTdHJpbmcgPSBgJHtrZXl9YDtcbiAgICBpZiAoIXBhcmFtcy5oYXMoa2V5QXNTdHJpbmcpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBwYXJhbXMuZ2V0KGtleUFzU3RyaW5nKTtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbn1cbiJdfQ==