import { Component, EventEmitter, Input, Output } from '@angular/core';
import { pipe } from 'rxjs';
import { tap } from 'rxjs/operators';
import { gettext } from '../i18n/gettext';
import { Location } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '../i18n/c8y-translate.pipe';

function ListDisplaySwitchComponent_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", option_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, option_r1.label));
} }
export class ListDisplaySwitchComponent {
    constructor(location) {
        this.location = location;
        this.filterPipe = pipe(tap());
        this.onListClassChange = new EventEmitter();
        this.DISPLAY_OPTIONS = [
            {
                name: 'AUTO',
                value: 'auto',
                label: gettext('Auto'),
                default: true,
                getListClass: () => {
                    const option = this._listLength > this.AUTO_GRID_ITEMS_LIMIT
                        ? this.DISPLAY_OPTIONS.find((opt) => opt.name === 'LIST')
                        : this.DISPLAY_OPTIONS.find((opt) => opt.name === 'GRID');
                    return option.getListClass();
                }
            },
            {
                name: 'GRID',
                value: 'grid',
                label: gettext('Grid'),
                getListClass: () => 'interact-grid'
            },
            {
                name: 'LIST',
                value: 'list',
                label: gettext('List'),
                getListClass: () => 'interact-list'
            }
        ];
        this.AUTO_GRID_ITEMS_LIMIT = 12;
    }
    set listLength(val) {
        this._listLength = val;
        this.loadSelectedOption();
    }
    ngOnInit() {
        this.loadSelectedOption();
    }
    onOptionSelect(option) {
        const localStorageKey = this.getLocalStorageKey();
        if (option.default) {
            localStorage.removeItem(localStorageKey);
        }
        else {
            localStorage.setItem(localStorageKey, option.value);
        }
        this.loadSelectedOption();
    }
    loadSelectedOption() {
        this.selectedOption = this.getLocalStorageOption() || this.getDefaultOption();
        this.onListClassChange.emit(this.selectedOption.getListClass());
    }
    getLocalStorageOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.value === localStorage.getItem(this.getLocalStorageKey()));
    }
    getDefaultOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.default);
    }
    getLocalStorageKey() {
        return `list-display-option[${this.getListKey()}]`;
    }
    getListKey() {
        return this.listKey || this.location.path();
    }
}
ListDisplaySwitchComponent.ɵfac = function ListDisplaySwitchComponent_Factory(t) { return new (t || ListDisplaySwitchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Location)); };
ListDisplaySwitchComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListDisplaySwitchComponent, selectors: [["c8y-list-display-switch"]], inputs: { filterPipe: "filterPipe", listLength: "listLength", listKey: "listKey" }, outputs: { onListClassChange: "onListClassChange" }, decls: 8, vars: 5, consts: [[1, "form-group"], [1, "m-r-8"], [1, "c8y-select-wrapper"], [1, "form-control", 3, "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], [3, "ngValue"]], template: function ListDisplaySwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "label", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "select", 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function ListDisplaySwitchComponent_Template_select_ngModelChange_5_listener($event) { return ctx.onOptionSelect($event); });
        ɵngcc0.ɵɵtemplate(6, ListDisplaySwitchComponent_option_6_Template, 3, 4, "option", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(7, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "Display as"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedOption);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.DISPLAY_OPTIONS);
    } }, directives: [ɵngcc2.SelectControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgForOf, ɵngcc2.NgSelectOption, ɵngcc2.ɵNgSelectMultipleOption], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
ListDisplaySwitchComponent.ctorParameters = () => [
    { type: Location }
];
ListDisplaySwitchComponent.propDecorators = {
    listKey: [{ type: Input }],
    listLength: [{ type: Input, args: ['listLength',] }],
    filterPipe: [{ type: Input }],
    onListClassChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListDisplaySwitchComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-display-switch',
                template: "<div class=\"form-group\">\n  <label class=\"m-r-8\">\n    {{ 'Display as' | translate }}\n  </label>\n  <div class=\"c8y-select-wrapper\">\n    <select\n      class=\"form-control\"\n      [ngModel]=\"selectedOption\"\n      (ngModelChange)=\"onOptionSelect($event)\"\n    >\n      <option *ngFor=\"let option of DISPLAY_OPTIONS\" [ngValue]=\"option\">{{\n        option.label | translate\n      }}</option></select\n    >\n    <span></span>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Location }]; }, { filterPipe: [{
            type: Input
        }], onListClassChange: [{
            type: Output
        }], listLength: [{
            type: Input,
            args: ['listLength']
        }], listKey: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbGlzdC1kaXNwbGF5LXN3aXRjaC9saXN0LWRpc3BsYXktc3dpdGNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9FLE9BQU8sRUFBYyxJQUFJLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBTyxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQU0zQyxNQUFNLE9BQU8sMEJBQTBCO0FBQUcsSUF3Q3hDLFlBQW9CLFFBQWtCO0FBQUksUUFBdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtBQUFDLFFBakM5QixlQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDcEMsUUFBWSxzQkFBaUIsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztBQUNqRixRQUVXLG9CQUFlLEdBQW9CO0FBQzlDLFlBQUk7QUFDSixnQkFBTSxJQUFJLEVBQUUsTUFBTTtBQUNsQixnQkFBTSxLQUFLLEVBQUUsTUFBTTtBQUNuQixnQkFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUM1QixnQkFBTSxPQUFPLEVBQUUsSUFBSTtBQUNuQixnQkFBTSxZQUFZLEVBQUUsR0FBRyxFQUFFO0FBQ3pCLG9CQUFRLE1BQU0sTUFBTSxHQUNWLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLHFCQUFxQjtBQUN2RCx3QkFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FB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Q0FBQztBQUNoRCxJQUFFLENBQUM7QUFDSDtzREFsRkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSx5QkFBeUIsa0JBQ25DOzBiQUFtRCxjQUNwRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytOQUNJO0FBQUM7QUFBb0QsWUFOakQsUUFBUTtBQUFHO0FBQUc7QUFHWixzQkFJUixLQUFLO0FBQUsseUJBQ1YsS0FBSyxTQUFDLFlBQVk7QUFDaEIseUJBSUYsS0FBSztBQUFLLGdDQUNWLE1BQU07QUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSVJlc3VsdExpc3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBwaXBlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBEaXNwbGF5T3B0aW9uIH0gZnJvbSAnLi9saXN0LWRpc3BsYXktc3dpdGNoLm1vZGVsJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWxpc3QtZGlzcGxheS1zd2l0Y2gnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTGlzdERpc3BsYXlTd2l0Y2hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBsaXN0S2V5OiBzdHJpbmc7XG4gIEBJbnB1dCgnbGlzdExlbmd0aCcpXG4gIHNldCBsaXN0TGVuZ3RoKHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5fbGlzdExlbmd0aCA9IHZhbDtcbiAgICB0aGlzLmxvYWRTZWxlY3RlZE9wdGlvbigpO1xuICB9XG4gIEBJbnB1dCgpIGZpbHRlclBpcGUgPSBwaXBlKHRhcCgpKTtcbiAgQE91dHB1dCgpIG9uTGlzdENsYXNzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBzZWxlY3RlZE9wdGlvbjogRGlzcGxheU9wdGlvbjtcblxuICByZWFkb25seSBESVNQTEFZX09QVElPTlM6IERpc3BsYXlPcHRpb25bXSA9IFtcbiAgICB7XG4gICAgICBuYW1lOiAnQVVUTycsXG4gICAgICB2YWx1ZTogJ2F1dG8nLFxuICAgICAgbGFiZWw6IGdldHRleHQoJ0F1dG8nKSxcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICBnZXRMaXN0Q2xhc3M6ICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID1cbiAgICAgICAgICB0aGlzLl9saXN0TGVuZ3RoID4gdGhpcy5BVVRPX0dSSURfSVRFTVNfTElNSVRcbiAgICAgICAgICAgID8gdGhpcy5ESVNQTEFZX09QVElPTlMuZmluZCgob3B0KSA9PiBvcHQubmFtZSA9PT0gJ0xJU1QnKVxuICAgICAgICAgICAgOiB0aGlzLkRJU1BMQVlfT1BUSU9OUy5maW5kKChvcHQpID0+IG9wdC5uYW1lID09PSAnR1JJRCcpO1xuICAgICAgICByZXR1cm4gb3B0aW9uLmdldExpc3RDbGFzcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0dSSUQnLFxuICAgICAgdmFsdWU6ICdncmlkJyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdHcmlkJyksXG4gICAgICBnZXRMaXN0Q2xhc3M6ICgpID0+ICdpbnRlcmFjdC1ncmlkJ1xuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0xJU1QnLFxuICAgICAgdmFsdWU6ICdsaXN0JyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdMaXN0JyksXG4gICAgICBnZXRMaXN0Q2xhc3M6ICgpID0+ICdpbnRlcmFjdC1saXN0J1xuICAgIH1cbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBBVVRPX0dSSURfSVRFTVNfTElNSVQgPSAxMjtcbiAgcHJpdmF0ZSBfbGlzdExlbmd0aDogbnVtYmVyO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmxvYWRTZWxlY3RlZE9wdGlvbigpO1xuICB9XG5cbiAgb25PcHRpb25TZWxlY3Qob3B0aW9uOiBEaXNwbGF5T3B0aW9uKSB7XG4gICAgY29uc3QgbG9jYWxTdG9yYWdlS2V5ID0gdGhpcy5nZXRMb2NhbFN0b3JhZ2VLZXkoKTtcbiAgICBpZiAob3B0aW9uLmRlZmF1bHQpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGxvY2FsU3RvcmFnZUtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxvY2FsU3RvcmFnZUtleSwgb3B0aW9uLnZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5sb2FkU2VsZWN0ZWRPcHRpb24oKTtcbiAgfVxuXG4gIHByaXZhdGUgbG9hZFNlbGVjdGVkT3B0aW9uKCkge1xuICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSB0aGlzLmdldExvY2FsU3RvcmFnZU9wdGlvbigpIHx8IHRoaXMuZ2V0RGVmYXVsdE9wdGlvbigpO1xuICAgIHRoaXMub25MaXN0Q2xhc3NDaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkT3B0aW9uLmdldExpc3RDbGFzcygpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TG9jYWxTdG9yYWdlT3B0aW9uKCk6IERpc3BsYXlPcHRpb24ge1xuICAgIHJldHVybiB0aGlzLkRJU1BMQVlfT1BUSU9OUy5maW5kKFxuICAgICAgKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlID09PSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmdldExvY2FsU3RvcmFnZUtleSgpKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldERlZmF1bHRPcHRpb24oKTogRGlzcGxheU9wdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuRElTUExBWV9PUFRJT05TLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLmRlZmF1bHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMb2NhbFN0b3JhZ2VLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGxpc3QtZGlzcGxheS1vcHRpb25bJHt0aGlzLmdldExpc3RLZXkoKX1dYDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGlzdEtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxpc3RLZXkgfHwgdGhpcy5sb2NhdGlvbi5wYXRoKCk7XG4gIH1cbn1cbiJdfQ==