import { Injectable, Injector } from '@angular/core';
import { OptionsService } from '../common/options.service';
import { documentationItems } from './defaults.items';
import { AppStateService } from '../common/ui-state.service';
import { gettext } from '../i18n/gettext';
import { HOOK_DOCS } from './docs.models';
import { fromTriggerOnce } from '../common/extension-hooks';
import { Subject } from 'rxjs';
import { Router } from '@angular/router';
import { shareReplay, startWith, first, filter } from 'rxjs/operators';
import { isUndefined, get } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "../common/options.service";
import * as i2 from "../common/ui-state.service";
import * as i3 from "@angular/router";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../common/options.service';
import * as ɵngcc2 from '../common/ui-state.service';
import * as ɵngcc3 from '@angular/router';
export class DocsService {
    constructor(options, app, injector, router) {
        this.options = options;
        this.app = app;
        this.injector = injector;
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        /**
         * Refresh the extension factories subject.
         * @readonly
         */
        this.refreshTrigger = new Subject();
        /**
         * Default documentation URL.
         */
        this.DEFAULT_DOCS_BASE_URL = 'https://www.cumulocity.com/guides/{{ version }}';
        const supportUrlRefreshTrigger = this.app.map(({ supportUrl }) => supportUrl);
        this.items$ = fromTriggerOnce(router, [supportUrlRefreshTrigger, this.refreshTrigger], [() => this.injector.get(HOOK_DOCS, []), () => this.factories, this]).pipe(startWith([]), shareReplay(1));
    }
    getBaseUrl(uiVersion) {
        const docsBaseUrl = this.options.get('docsBaseUrl', this.DEFAULT_DOCS_BASE_URL);
        return this.getUrlWithDocsVersion(docsBaseUrl, uiVersion);
    }
    /**
     * Takes a URL and replaces all `{{ version }}` placeholders with the relevant docs version
     * (the version is derived from the app state or from the provided parameter).
     * @param url Any URL that contains `{{ version }}` placeholders.
     * @param uiVersion A version string or object, defaults to the app state version.
     * @returns The URL with replaced `{{ version }}` placeholders.
     */
    getUrlWithDocsVersion(url, uiVersion = this.app.uiVersion) {
        const version = typeof uiVersion === 'string' ? uiVersion : get(uiVersion, 'ngx');
        let docsVersion = '';
        if (!(isUndefined(version) || version === '')) {
            docsVersion = this.getDocsVersionForUiVersion(version);
        }
        return url.replace(/{{\s*version\s*}}/g, docsVersion).replace(/\/+$/g, '');
    }
    get templateStr() {
        return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
    }
    getUserGuideLink(link) {
        if (/^https?:/.test(link)) {
            return link;
        }
        if (this.getBaseUrl === null) {
            return null;
        }
        return this.getLink(this.templateStr, link);
    }
    list() {
        return this.items$
            .pipe(filter(i => !!i.length), first())
            .toPromise();
    }
    refresh() {
        this.refreshTrigger.next(1);
    }
    get() {
        // use the function as a factory
        const { links, noDefault, excludeDefault = [] } = this.options.get('docs', {});
        const { supportUrl } = this.app.state;
        let staticLinks = noDefault
            ? []
            : documentationItems
                .map((item) => (Object.assign(Object.assign({}, item), { url: this.getUserGuideLink(item.url) })))
                .filter(({ url }) => !excludeDefault.some(e => new RegExp(e).test(url)));
        if (links) {
            // backwards compatibility
            links.map((lnk) => {
                if (isUndefined(lnk.type)) {
                    lnk.type = 'doc';
                    return lnk;
                }
            });
            staticLinks = staticLinks.concat(links);
        }
        if (supportUrl) {
            staticLinks.push({
                icon: 'comments',
                label: gettext('Forum support'),
                url: supportUrl,
                type: 'doc'
            });
        }
        return staticLinks;
    }
    getLink(templateStr, partialLink) {
        if (!templateStr) {
            return undefined;
        }
        return templateStr
            .replace(/\${docsBaseUrl}/, this.getBaseUrl())
            .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
    }
    prefixWithSlash(partialLink = '') {
        const shouldPrefix = !(partialLink && /^\//.test(partialLink));
        const prefix = shouldPrefix ? '/' : '';
        return `${prefix}${partialLink}`;
    }
    /**
     * Returns the most relevant version of documentation for the given version of UI.
     * For maintenance versions, it's the first version in the line, e.g. 1017.0.123 -> 10.17.0.
     * For develop versions, it's the next minor one, e.g. 1017.123.0-SNAPSHOT -> 10.18.0.
     *
     * @param uiVersion The version of UI.
     * @private
     */
    getDocsVersionForUiVersion(uiVersion) {
        const [majorMinorStr, patchStr] = uiVersion.split('.');
        const patchNumber = parseInt(patchStr, 10);
        const takeNextMinor = patchNumber > 0;
        const majorNumber = Math.floor(parseInt(majorMinorStr, 10) / 100);
        const minorNumber = parseInt(majorMinorStr, 10) - majorNumber * 100 + (takeNextMinor ? 1 : 0);
        return `${majorNumber}.${minorNumber}.0`;
    }
}
DocsService.ɵfac = function DocsService_Factory(t) { return new (t || DocsService)(ɵngcc0.ɵɵinject(ɵngcc1.OptionsService), ɵngcc0.ɵɵinject(ɵngcc2.AppStateService), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc3.Router)); };
DocsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(i0.ɵɵinject(i1.OptionsService), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.Router)); }, token: DocsService, providedIn: "root" });
DocsService.ctorParameters = () => [
    { type: OptionsService },
    { type: AppStateService },
    { type: Injector },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DocsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.OptionsService }, { type: ɵngcc2.AppStateService }, { type: ɵngcc0.Injector }, { type: ɵngcc3.Router }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,