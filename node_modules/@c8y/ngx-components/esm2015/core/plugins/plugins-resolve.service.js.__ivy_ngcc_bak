import { __awaiter } from "tslib";
import { Compiler, Injectable, InjectFlags, Injector, NgModuleFactory } from '@angular/core';
import { ActionBarService, HOOK_ACTION_BAR } from '../action-bar/action-bar.service';
import { ActionService, HOOK_ACTION } from '../action/action.service';
import { BreadcrumbService, HOOK_BREADCRUMB } from '../breadcrumb/breadcrumb.service';
import { HOOK_DOCS } from '../docs/docs.models';
import { DocsService } from '../docs/docs.service';
import { HOOK_COMPONENTS } from '../dynamic-component/dynamic-component.model';
import { DynamicComponentService } from '../dynamic-component/dynamic-component.service';
import { HOOK_NAVIGATOR_NODES, NavigatorService } from '../navigator/navigator.service';
import { HOOK_ONCE_ROUTE, HOOK_ROUTE, RouterService } from '../router/router.service';
import { HOOK_SEARCH, SearchService } from '../search/search.service';
import { HOOK_TABS, TabsService } from '../tabs/tabs.service';
import { WizardService } from '../wizard/wizard.service';
import { HOOK_WIZARD } from '../wizard/wizard.model';
import * as i0 from "@angular/core";
import * as i1 from "../tabs/tabs.service";
import * as i2 from "../navigator/navigator.service";
import * as i3 from "../action/action.service";
import * as i4 from "../action-bar/action-bar.service";
import * as i5 from "../breadcrumb/breadcrumb.service";
import * as i6 from "../dynamic-component/dynamic-component.service";
import * as i7 from "../search/search.service";
import * as i8 from "../router/router.service";
import * as i9 from "../docs/docs.service";
import * as i10 from "../wizard/wizard.service";
export class PluginsResolveService {
    constructor(tabs, navigator, action, actionBar, breadcrumb, dynamicComponent, search, c8yRouter, docs, wizard, compiler, injector) {
        this.tabs = tabs;
        this.navigator = navigator;
        this.action = action;
        this.actionBar = actionBar;
        this.breadcrumb = breadcrumb;
        this.dynamicComponent = dynamicComponent;
        this.search = search;
        this.c8yRouter = c8yRouter;
        this.docs = docs;
        this.wizard = wizard;
        this.compiler = compiler;
        this.injector = injector;
        this.allHooks = [
            { token: HOOK_ACTION, service: this.action, values: [] },
            { token: HOOK_ACTION_BAR, service: this.actionBar, values: [] },
            { token: HOOK_NAVIGATOR_NODES, service: this.navigator, values: [] },
            { token: HOOK_BREADCRUMB, service: this.breadcrumb, values: [] },
            { token: HOOK_COMPONENTS, service: this.dynamicComponent, values: [] },
            { token: HOOK_ONCE_ROUTE, service: this.c8yRouter, values: [] },
            { token: HOOK_ROUTE, service: this.c8yRouter, values: [] },
            { token: HOOK_SEARCH, service: this.search, values: [] },
            { token: HOOK_TABS, service: this.tabs, values: [] },
            { token: HOOK_DOCS, service: this.docs, values: [] },
            { token: HOOK_WIZARD, service: this.wizard, values: [] }
        ];
    }
    /**
     * Loads plugins by resolving the remote NgModules and injecting it. Also attaching
     * the hooks onto the root injector.
     * @param remoteModules The remote plugins to load as factory name mapping array.
     */
    resolveRemotePlugins(remoteModules) {
        return __awaiter(this, void 0, void 0, function* () {
            const remoteNgModules = remoteModules
                .filter(({ factory }) => factory)
                .map(({ name, factory }) => factory[name]);
            for (const remoteNgModule of remoteNgModules) {
                let factory;
                if (remoteNgModule instanceof NgModuleFactory) {
                    // AOT
                    factory = remoteNgModule;
                }
                else {
                    // JIT
                    factory = yield this.compiler.compileModuleAsync(remoteNgModule);
                }
                const moduleRef = factory.create(this.injector);
                this.allHooks.forEach(hook => {
                    hook.values = [...hook.values, ...moduleRef.injector.get(hook.token, [], InjectFlags.Self)];
                });
            }
            this.allHooks.forEach(hook => {
                if (hook.values.length) {
                    hook.service.factories = [...hook.service.factories, ...hook.values];
                    hook.service.refresh();
                }
            });
        });
    }
}
PluginsResolveService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PluginsResolveService_Factory() { return new PluginsResolveService(i0.ɵɵinject(i1.TabsService), i0.ɵɵinject(i2.NavigatorService), i0.ɵɵinject(i3.ActionService), i0.ɵɵinject(i4.ActionBarService), i0.ɵɵinject(i5.BreadcrumbService), i0.ɵɵinject(i6.DynamicComponentService), i0.ɵɵinject(i7.SearchService), i0.ɵɵinject(i8.RouterService), i0.ɵɵinject(i9.DocsService), i0.ɵɵinject(i10.WizardService), i0.ɵɵinject(i0.Compiler), i0.ɵɵinject(i0.INJECTOR)); }, token: PluginsResolveService, providedIn: "root" });
PluginsResolveService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PluginsResolveService.ctorParameters = () => [
    { type: TabsService },
    { type: NavigatorService },
    { type: ActionService },
    { type: ActionBarService },
    { type: BreadcrumbService },
    { type: DynamicComponentService },
    { type: SearchService },
    { type: RouterService },
    { type: DocsService },
    { type: WizardService },
    { type: Compiler },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,