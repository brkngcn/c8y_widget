import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/ngx-components/api';
import { AppStateService } from '../common/ui-state.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/api';
import * as ɵngcc2 from '../common/ui-state.service';
export class PluginsService {
    constructor(applicationService, appState) {
        this.applicationService = applicationService;
        this.appState = appState;
    }
    listPackages() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.list({ pageSize: 2000 });
            return data.filter((app) => app.exports || (app.manifest && app.manifest.exports));
        });
    }
    listVersions(forPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.binary(forPackage).listPlugins();
            return data
                .map(plugin => (Object.assign(Object.assign({}, plugin.pluginPackage), { version: plugin.pluginName })))
                .filter(plugin => plugin.exports);
        });
    }
    listInstalled(forApp, flat = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const app = yield this.getApplication(forApp);
            const c8yJson = yield this.getCumulocityJsonFile(app);
            if (flat) {
                let flatList = [];
                for (const key in c8yJson.imports) {
                    if (c8yJson.imports.hasOwnProperty(key)) {
                        flatList = [
                            ...flatList,
                            ...c8yJson.imports[key].map(imp => /@/.test(key) ? `${key}/${imp}` : `${key}@latest/${imp}`)
                        ];
                    }
                }
                return flatList;
            }
            return c8yJson.imports;
        });
    }
    addByName(addTo, pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = pluginName.split('//').pop();
            const contextPath = pluginName.split('//').shift();
            const pkg = {
                contextPath
            };
            return this.add(addTo, pkg, name);
        });
    }
    removeByName(removeFrom, pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = pluginName.split('/').pop();
            const contextPath = /@latest/.test(pluginName)
                ? pluginName.split('@').shift()
                : pluginName.split('/').shift();
            const pkg = {
                contextPath
            };
            return this.remove(removeFrom, pkg, name);
        });
    }
    add(addToApp, fromPackage, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.addOrRemove(addToApp, fromPackage, name, true);
        });
    }
    remove(removeFromApp, fromPackage, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.addOrRemove(removeFromApp, fromPackage, name, false);
        });
    }
    updateRemotesInCumulocityJson(app, remotes) {
        return __awaiter(this, void 0, void 0, function* () {
            const c8yJson = yield this.getCumulocityJsonFile(app);
            return this.applicationService.storeAppManifest(app, Object.assign(Object.assign({}, c8yJson), { remotes }));
        });
    }
    addOrRemove(addToApp, fromPackage, name, add = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const application = yield this.getApplication(addToApp);
            const pkg = yield this.getApplication(fromPackage);
            const c8yJson = yield this.getCumulocityJsonFile(application);
            // TODO: Versions?!!
            const pkgImport = new Set(c8yJson.imports[pkg.contextPath]);
            if (add) {
                pkgImport.add(name);
            }
            else {
                pkgImport.delete(name);
            }
            c8yJson.imports[pkg.contextPath] = Array.from(pkgImport);
            yield this.applicationService.storeAppManifest(application, c8yJson);
            return c8yJson;
        });
    }
    getCumulocityJsonFile(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const c8yJson = yield this.applicationService.getAppManifest(app);
            if (!c8yJson.imports) {
                c8yJson.imports = {};
            }
            return c8yJson;
        });
    }
    getApplication(app) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof app !== 'number' && app.contextPath) {
                return app;
            }
            const { data } = yield this.applicationService.detail(app);
            return data;
        });
    }
}
PluginsService.ɵfac = function PluginsService_Factory(t) { return new (t || PluginsService)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc2.AppStateService)); };
PluginsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PluginsService, factory: PluginsService.ɵfac });
PluginsService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PluginsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }, { type: ɵngcc2.AppStateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,