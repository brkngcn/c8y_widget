import { ChangeDetectorRef, Component, EventEmitter, forwardRef, Input, Output, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '../i18n/c8y-translate.pipe';
export class TimePickerComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.lastValidHours = '00';
        this.lastValidMinutes = '00';
        this.dayForward = new EventEmitter();
        this.dayBackward = new EventEmitter();
        this.disabled = false;
        this.date = new Date();
        this.touched = false;
        this.destroy$ = new Subject();
        this.simulatedWheelUpEvent = { wheelDeltaY: 1, preventDefault: () => null };
        this.simulatedWheelDownEvent = { wheelDeltaY: -1, preventDefault: () => null };
    }
    parseValue(target, lastValid, limit) {
        this.cdRef.detectChanges();
        if (this[target].length > 0 && !/^\d+$/.test(this[target])) {
            this[target] = this[lastValid];
            return;
        }
        if (this[target].length <= 1) {
            this[target] = this[target].padStart(2, '0');
        }
        if (this[target].length > 2 && this[target].startsWith('0')) {
            this[target] = this[target].slice(1, 3);
        }
        if (this[target].length > 2) {
            this[target] = this[lastValid];
            return;
        }
        if (Number(this[target]) > limit) {
            this[target] = limit;
        }
        this[lastValid] = this[target];
    }
    initializeMinutes() {
        if (!this.hasValue(this.minutes)) {
            this.minutes = '00';
        }
    }
    initializeHours() {
        if (!this.hasValue(this.hours)) {
            this.hours = '00';
        }
    }
    handleHourScroll(ev) {
        // up
        ev.preventDefault();
        if (ev.wheelDeltaY > 0) {
            if (Number(this.hours) === 23) {
                this.writeValue({ hour: 0, minute: Number(this.minutes) });
                this.dayForward.emit();
            }
            else {
                this.writeValue({ hour: Number(this.hours) + 1, minute: Number(this.minutes) });
            }
            this.emitValue();
        }
        // down
        if (ev.wheelDeltaY < 0) {
            if (Number(this.hours) === 0) {
                this.writeValue({ hour: 23, minute: Number(this.minutes) });
                this.dayBackward.emit();
            }
            else {
                this.writeValue({ hour: Number(this.hours) - 1, minute: Number(this.minutes) });
            }
            this.emitValue();
        }
    }
    handleMinuteScroll(ev) {
        // up
        ev.preventDefault();
        if (ev.wheelDeltaY > 0) {
            if (Number(this.minutes) === 59) {
                this.writeValue({ hour: Number(this.hours), minute: 0 });
                this.handleHourScroll(this.simulatedWheelUpEvent);
            }
            else {
                this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) + 1 });
            }
        }
        // down
        if (ev.wheelDeltaY < 0) {
            if (Number(this.minutes) === 0) {
                this.writeValue({ hour: Number(this.hours), minute: 59 });
                this.handleHourScroll(this.simulatedWheelDownEvent);
            }
            else {
                this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) - 1 });
            }
        }
        this.emitValue();
    }
    emitValue() {
        if (this.hasValue(this.hours) && this.hasValue(this.minutes)) {
            this.onChange({
                hour: Number(this.hours),
                minute: Number(this.minutes)
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value) {
        if (this.hasValue(value === null || value === void 0 ? void 0 : value.hour) && this.hasValue(value === null || value === void 0 ? void 0 : value.minute)) {
            this.hours = value.hour.toString();
            this.minutes = value.minute.toString();
            this.parseValue('hours', 'lastValidHours', 23);
            this.parseValue('minutes', 'lastValidMinutes', 59);
        }
        else {
            this.hours = undefined;
            this.minutes = undefined;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched();
            this.touched = true;
        }
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    hasValue(value) {
        return typeof value !== 'undefined';
    }
}
TimePickerComponent.ɵfac = function TimePickerComponent_Factory(t) { return new (t || TimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
TimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TimePickerComponent, selectors: [["c8y-time-picker"]], inputs: { minDate: "minDate", maxDate: "maxDate", placeholder: "placeholder" }, outputs: { dayForward: "dayForward", dayBackward: "dayBackward" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TimePickerComponent),
                multi: true
            }
        ])], decls: 11, vars: 10, consts: [[1, "form-group"], ["type", "text", 1, "form-control", "text-center", "bs-timepicker-field", 3, "disabled", "placeholder", "ngModel", "ngModelChange", "input", "change", "wheel", "focus"]], template: function TimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table");
        ɵngcc0.ɵɵelementStart(1, "tbody");
        ɵngcc0.ɵɵelementStart(2, "tr");
        ɵngcc0.ɵɵelementStart(3, "td", 0);
        ɵngcc0.ɵɵelementStart(4, "input", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function TimePickerComponent_Template_input_ngModelChange_4_listener($event) { return ctx.hours = $event; })("input", function TimePickerComponent_Template_input_input_4_listener() { ctx.parseValue("hours", "lastValidHours", 23); return ctx.initializeMinutes(); })("change", function TimePickerComponent_Template_input_change_4_listener() { return ctx.emitValue(); })("wheel", function TimePickerComponent_Template_input_wheel_4_listener($event) { return ctx.handleHourScroll($event); })("focus", function TimePickerComponent_Template_input_focus_4_listener() { return ctx.markAsTouched(); });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "td");
        ɵngcc0.ɵɵtext(7, "\u00A0:\u00A0");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "td", 0);
        ɵngcc0.ɵɵelementStart(9, "input", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function TimePickerComponent_Template_input_ngModelChange_9_listener($event) { return ctx.minutes = $event; })("input", function TimePickerComponent_Template_input_input_9_listener() { ctx.parseValue("minutes", "lastValidMinutes", 59); return ctx.initializeHours(); })("change", function TimePickerComponent_Template_input_change_9_listener() { return ctx.emitValue(); })("wheel", function TimePickerComponent_Template_input_wheel_9_listener($event) { return ctx.handleMinuteScroll($event); })("focus", function TimePickerComponent_Template_input_focus_9_listener() { return ctx.markAsTouched(); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("placeholder", ɵngcc0.ɵɵpipeBind1(5, 6, "HH`HOURS`"))("ngModel", ctx.hours);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("placeholder", ɵngcc0.ɵɵpipeBind1(10, 8, "MM`MINUTES`"))("ngModel", ctx.minutes);
    } }, directives: [ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
TimePickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
TimePickerComponent.propDecorators = {
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    placeholder: [{ type: Input }],
    dayForward: [{ type: Output }],
    dayBackward: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-time-picker',
                template: "<table>\n  <tbody>\n    <tr>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'HH`HOURS`' | translate\"\n          [(ngModel)]=\"hours\"\n          (input)=\"parseValue('hours', 'lastValidHours', 23); initializeMinutes()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleHourScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n      <td>&nbsp;:&nbsp;</td>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'MM`MINUTES`' | translate\"\n          [(ngModel)]=\"minutes\"\n          (input)=\"parseValue('minutes', 'lastValidMinutes', 59); initializeHours()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleMinuteScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TimePickerComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { dayForward: [{
            type: Output
        }], dayBackward: [{
            type: Output
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], placeholder: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,