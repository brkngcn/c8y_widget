import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { PasswordService } from './password.service';
import { LoginService } from '../login/login.service';
import { assign, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
export class PasswordCheckListComponent {
    constructor(loginService, passwordStrengthChecker, passwordService) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (for example, abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (for example, ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (for example, 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (for example, !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: password => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.minGreenLength = yield this.loginService.getGreenMinLength();
            if (!this.minGreenLength) {
                this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
            }
        });
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map(this.checklist, requirement => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
}
PasswordCheckListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-password-check-list',
                template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n"
            },] }
];
PasswordCheckListComponent.ctorParameters = () => [
    { type: LoginService },
    { type: PasswordService },
    { type: PasswordService }
];
PasswordCheckListComponent.propDecorators = {
    password: [{ type: Input, args: ['password',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLWNoZWNrLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU8xQyxNQUFNLE9BQU8sMEJBQTBCO0lBMkNyQyxZQUNTLFlBQTBCLEVBQ3pCLHVCQUF3QyxFQUN4QyxlQUFnQztRQUZqQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN6Qiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQWlCO1FBQ3hDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQXRDMUMsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFFM0IsY0FBUyxHQUFHO1lBQ1Y7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxvREFBb0QsQ0FBQztnQkFDcEUsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZO2dCQUNoRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtZQUNEO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsb0RBQW9ELENBQUM7Z0JBQ3BFLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWTtnQkFDaEQsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsZUFBZSxFQUFFLEVBQUU7YUFDcEI7WUFDRDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO2dCQUN2RCxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVU7Z0JBQzlDLElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztnQkFDdkQsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlO2dCQUNuRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtZQUNEO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsMENBQTBDLENBQUM7Z0JBQzFELEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLGNBQWM7Z0JBQ3pELElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1NBQ0YsQ0FBQztJQU1DLENBQUM7SUE5Q0osSUFDSSxRQUFRLENBQUMsUUFBZ0I7UUFDM0IsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQTJDSyxRQUFROztZQUNaLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO2FBQzFFO1FBQ0gsQ0FBQztLQUFBO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWM7U0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFRO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUU7WUFDakQsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25DLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWTthQUM3QyxDQUFDLENBQUM7WUFDSCxPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTVFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsOGVBQW1EO2FBRXBEOzs7WUFSUSxZQUFZO1lBRFosZUFBZTtZQUFmLGVBQWU7Ozt1QkFXckIsS0FBSyxTQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBhc3N3b3JkU2VydmljZSB9IGZyb20gJy4vcGFzc3dvcmQuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IGFzc2lnbiwgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcGFzc3dvcmQtY2hlY2stbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBQYXNzd29yZENoZWNrTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgncGFzc3dvcmQnKVxuICBzZXQgcGFzc3dvcmQocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLm9uUGFzc3dvcmRDaGFuZ2UocGFzc3dvcmQpO1xuICAgIH1cbiAgfVxuXG4gIG1pbkdyZWVuTGVuZ3RoOiBudW1iZXIgPSAwO1xuXG4gIGNoZWNrbGlzdCA9IFtcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSBsb3dlcmNhc2UgY2hhcmFjdGVycyAoZm9yIGV4YW1wbGUsIGFiY2RlZiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc0xvd2VyQ2FzZSxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgdXBwZXJjYXNlIGNoYXJhY3RlcnMgKGZvciBleGFtcGxlLCBBQkNERUYpJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNVcHBlckNhc2UsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIG51bWJlcnMgKGZvciBleGFtcGxlLCAxMjM0NTYpJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNOdW1iZXJzLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSBzeW1ib2xzIChmb3IgZXhhbXBsZSwgIUAjJCVeKScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzU3BlY2lhbENoYXJzLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnTXVzdCBoYXZlIGF0IGxlYXN0IHt7bGVuZ3RofX0gY2hhcmFjdGVycycpLFxuICAgICAgY2hlY2s6IHBhc3N3b3JkID0+IHBhc3N3b3JkLmxlbmd0aCA+PSB0aGlzLm1pbkdyZWVuTGVuZ3RoLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfVxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIHBhc3N3b3JkU3RyZW5ndGhDaGVja2VyOiBQYXNzd29yZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwYXNzd29yZFNlcnZpY2U6IFBhc3N3b3JkU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5taW5HcmVlbkxlbmd0aCA9IGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLmdldEdyZWVuTWluTGVuZ3RoKCk7XG4gICAgaWYgKCF0aGlzLm1pbkdyZWVuTGVuZ3RoKSB7XG4gICAgICB0aGlzLm1pbkdyZWVuTGVuZ3RoID0gdGhpcy5wYXNzd29yZFNlcnZpY2UuZ2V0RGVmYXVsdFBhc3N3b3JkTWluTGVuZ3RoKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYW5zbGF0ZVBhcmFtcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVuZ3RoOiB0aGlzLm1pbkdyZWVuTGVuZ3RoXG4gICAgfTtcbiAgfVxuXG4gIG9uUGFzc3dvcmRDaGFuZ2UocGFzc3dvcmQpIHtcbiAgICB0aGlzLmNoZWNrbGlzdCA9IG1hcCh0aGlzLmNoZWNrbGlzdCwgcmVxdWlyZW1lbnQgPT4ge1xuICAgICAgY29uc3QgY2hlY2tlZCA9IHJlcXVpcmVtZW50LmNoZWNrKHBhc3N3b3JkKTtcbiAgICAgIGFzc2lnbihyZXF1aXJlbWVudCwge1xuICAgICAgICBpY29uOiBjaGVja2VkID8gJ2NoZWNrLWNpcmNsZScgOiAnJyxcbiAgICAgICAgY29udGV4dHVhbENvbG9yOiBjaGVja2VkID8gJycgOiAndGV4dC1tdXRlZCdcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcXVpcmVtZW50O1xuICAgIH0pO1xuICB9XG59XG4iXX0=