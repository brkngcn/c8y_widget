import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { PasswordService } from './password.service';
import { LoginService } from '../login/login.service';
import { assign, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../login/login.service';
import * as ɵngcc2 from './password.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../common/icon.directive';
import * as ɵngcc5 from '../i18n/c8y-translate.directive';
import * as ɵngcc6 from '../i18n/c8y-translate.pipe';

function PasswordCheckListComponent_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 0);
    ɵngcc0.ɵɵelement(1, "i", 3);
    ɵngcc0.ɵɵelement(2, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const requirement_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", requirement_r1.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("small ", requirement_r1.contextualColor, "");
    ɵngcc0.ɵɵproperty("translate", requirement_r1.label)("translateParams", ctx_r0.translateParams);
} }
export class PasswordCheckListComponent {
    constructor(loginService, passwordStrengthChecker, passwordService) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (for example, abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (for example, ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (for example, 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (for example, !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: password => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.minGreenLength = yield this.loginService.getGreenMinLength();
            if (!this.minGreenLength) {
                this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
            }
        });
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map(this.checklist, requirement => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
}
PasswordCheckListComponent.ɵfac = function PasswordCheckListComponent_Factory(t) { return new (t || PasswordCheckListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PasswordService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PasswordService)); };
PasswordCheckListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasswordCheckListComponent, selectors: [["c8y-password-check-list"]], inputs: { password: "password" }, decls: 6, vars: 4, consts: [[1, "small"], [1, "list-unstyled"], ["class", "small", 4, "ngFor", "ngForOf"], [1, "text-success", 3, "c8yIcon"], [3, "translate", "translateParams"]], template: function PasswordCheckListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "span", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "ul", 1);
        ɵngcc0.ɵɵtemplate(5, PasswordCheckListComponent_li_5_Template, 3, 6, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(3, 2, "Please meet 5 out of the 5 conditions below"), ":");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.checklist);
    } }, directives: [ɵngcc3.NgForOf, ɵngcc4.IconDirective, ɵngcc5.C8yTranslateDirective], pipes: [ɵngcc6.C8yTranslatePipe], encapsulation: 2 });
PasswordCheckListComponent.ctorParameters = () => [
    { type: LoginService },
    { type: PasswordService },
    { type: PasswordService }
];
PasswordCheckListComponent.propDecorators = {
    password: [{ type: Input, args: ['password',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordCheckListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-password-check-list',
                template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.LoginService }, { type: ɵngcc2.PasswordService }, { type: ɵngcc2.PasswordService }]; }, { password: [{
            type: Input,
            args: ['password']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYXV0aGVudGljYXRpb24vcGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU8xQyxNQUFNLE9BQU8sMEJBQTBCO0FBQUcsSUEyQ3hDLFlBQ1MsWUFBMEIsRUFDekIsdUJBQXdDLEVBQ3hDLGVBQWdDO0FBQ3pDLFFBSFEsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUMxQiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQWlCO0FBQUMsUUFDekMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQzVDLFFBdkNFLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO0FBQzdCLFFBQ0UsY0FBUyxHQUFHO0FBQ2QsWUFBSTtBQUNKLGdCQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsb0RBQW9ELENBQUM7QUFDMUUsZ0JBQU0sS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZO0FBQ3RELGdCQUFNLElBQUksRUFBRSxFQUFFO0FBQ2QsZ0JBQU0sZUFBZSxFQUFFLEVBQUU7QUFDekIsYUFBSztBQUNMLFlBQUk7QUFDSixnQkFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLG9EQUFvRCxDQUFDO0FBQzFFLGdCQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWTtBQUN0RCxnQkFBTSxJQUFJLEVBQUUsRUFBRTtBQUNkLGdCQUFNLGVBQWUsRUFBRSxFQUFFO0FBQ3pCLGFBQUs7QUFDTCxZQUFJO0FBQ0osZ0JBQU0sS0FBSyxFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUM3RCxnQkFBTSxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVU7QUFDcEQsZ0JBQU0sSUFBSSxFQUFFLEVBQUU7QUFDZCxnQkFBTSxlQUFlLEVBQUUsRUFBRTtBQUN6QixhQUFLO0FBQ0wsWUFBSTtBQUNKLGdCQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDN0QsZ0JBQU0sS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlO0FBQ3pELGdCQUFNLElBQUksRUFBRSxFQUFFO0FBQ2QsZ0JBQU0sZUFBZSxFQUFFLEVBQUU7QUFDekIsYUFBSztBQUNMLFlBQUk7QUFDSixnQkFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLDBDQUEwQyxDQUFDO0FBQ2hFLGdCQUFNLEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLGNBQWM7QUFDL0QsZ0JBQU0sSUFBSSxFQUFFLEVBQUU7QUFDZCxnQkFBTSxlQUFlLEVBQUUsRUFBRTtBQUN6QixhQUFLO0FBQ0wsU0FBRyxDQUFDO0FBQ0osSUFLSyxDQUFDO0FBQ04sSUEvQ0UsSUFDSSxRQUFRLENBQUMsUUFBZ0I7QUFDL0IsUUFBSSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtBQUN0QyxZQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUEwQ1EsUUFBUTtBQUNoQjtBQUE4RCxZQUExRCxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQ3RFLFlBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7QUFDOUIsZ0JBQU0sSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLDJCQUEyQixFQUFFLENBQUM7QUFDL0UsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFLElBQUksZUFBZTtBQUNyQixRQUFJLE9BQU87QUFDWCxZQUFNLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYztBQUNqQyxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLGdCQUFnQixDQUFDLFFBQVE7QUFDM0IsUUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUFFO0FBQ3ZELFlBQU0sTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxZQUFNLE1BQU0sQ0FBQyxXQUFXLEVBQUU7QUFDMUIsZ0JBQVEsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQzNDLGdCQUFRLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWTtBQUNwRCxhQUFPLENBQUMsQ0FBQztBQUNULFlBQU0sT0FBTyxXQUFXLENBQUM7QUFDekIsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNIO3NEQTdFQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHlCQUF5QixrQkFDbkM7c1dBQW1ELGNBRXBEOzs7Ozs7Ozs7Ozs7Ozs7aUpBQ0k7QUFBQztBQUFvRCxZQVRqRCxZQUFZO0FBQUksWUFEaEIsZUFBZTtBQUFJLFlBQW5CLGVBQWU7QUFBRztBQUFHO0FBQ1IsdUJBVW5CLEtBQUssU0FBQyxVQUFVO0FBQ2Y7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGFzc3dvcmRTZXJ2aWNlIH0gZnJvbSAnLi9wYXNzd29yZC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4uL2xvZ2luL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgYXNzaWduLCBtYXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wYXNzd29yZC1jaGVjay1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Bhc3N3b3JkLWNoZWNrLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkQ2hlY2tMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCdwYXNzd29yZCcpXG4gIHNldCBwYXNzd29yZChwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMub25QYXNzd29yZENoYW5nZShwYXNzd29yZCk7XG4gICAgfVxuICB9XG5cbiAgbWluR3JlZW5MZW5ndGg6IG51bWJlciA9IDA7XG5cbiAgY2hlY2tsaXN0ID0gW1xuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIGxvd2VyY2FzZSBjaGFyYWN0ZXJzIChmb3IgZXhhbXBsZSwgYWJjZGVmKScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzTG93ZXJDYXNlLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSB1cHBlcmNhc2UgY2hhcmFjdGVycyAoZm9yIGV4YW1wbGUsIEFCQ0RFRiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc1VwcGVyQ2FzZSxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgbnVtYmVycyAoZm9yIGV4YW1wbGUsIDEyMzQ1NiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc051bWJlcnMsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIHN5bWJvbHMgKGZvciBleGFtcGxlLCAhQCMkJV4pJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNTcGVjaWFsQ2hhcnMsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdNdXN0IGhhdmUgYXQgbGVhc3Qge3tsZW5ndGh9fSBjaGFyYWN0ZXJzJyksXG4gICAgICBjaGVjazogcGFzc3dvcmQgPT4gcGFzc3dvcmQubGVuZ3RoID49IHRoaXMubWluR3JlZW5MZW5ndGgsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9XG4gIF07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlLFxuICAgIHByaXZhdGUgcGFzc3dvcmRTdHJlbmd0aENoZWNrZXI6IFBhc3N3b3JkU2VydmljZSxcbiAgICBwcml2YXRlIHBhc3N3b3JkU2VydmljZTogUGFzc3dvcmRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1pbkdyZWVuTGVuZ3RoID0gYXdhaXQgdGhpcy5sb2dpblNlcnZpY2UuZ2V0R3JlZW5NaW5MZW5ndGgoKTtcbiAgICBpZiAoIXRoaXMubWluR3JlZW5MZW5ndGgpIHtcbiAgICAgIHRoaXMubWluR3JlZW5MZW5ndGggPSB0aGlzLnBhc3N3b3JkU2VydmljZS5nZXREZWZhdWx0UGFzc3dvcmRNaW5MZW5ndGgoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdHJhbnNsYXRlUGFyYW1zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZW5ndGg6IHRoaXMubWluR3JlZW5MZW5ndGhcbiAgICB9O1xuICB9XG5cbiAgb25QYXNzd29yZENoYW5nZShwYXNzd29yZCkge1xuICAgIHRoaXMuY2hlY2tsaXN0ID0gbWFwKHRoaXMuY2hlY2tsaXN0LCByZXF1aXJlbWVudCA9PiB7XG4gICAgICBjb25zdCBjaGVja2VkID0gcmVxdWlyZW1lbnQuY2hlY2socGFzc3dvcmQpO1xuICAgICAgYXNzaWduKHJlcXVpcmVtZW50LCB7XG4gICAgICAgIGljb246IGNoZWNrZWQgPyAnY2hlY2stY2lyY2xlJyA6ICcnLFxuICAgICAgICBjb250ZXh0dWFsQ29sb3I6IGNoZWNrZWQgPyAnJyA6ICd0ZXh0LW11dGVkJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVxdWlyZW1lbnQ7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==