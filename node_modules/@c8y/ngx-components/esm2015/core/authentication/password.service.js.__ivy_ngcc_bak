import { Injectable } from '@angular/core';
import { PasswordStrength } from '@c8y/client';
import { filter } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import { PasswordConfirmModalComponent } from './password-confirm-modal.component';
import { BsModalService } from 'ngx-bootstrap/modal';
import { take } from 'rxjs/operators';
import { CurrentPasswordModalComponent } from './current-password-modal.component';
export class PasswordService {
    constructor(modalService) {
        this.modalService = modalService;
        this.DEFAULT_PASSWORD_MIN_LENGTH = 8;
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    confirmPassword() {
        const modalInstance = this.modalService.show(PasswordConfirmModalComponent);
        const passwordConfirmedEmitter = modalInstance.content.passwordConfirmedEmitter;
        return passwordConfirmedEmitter.pipe(take(1));
    }
    /**
     * Returns an observable with the password provided by user:
     * - `string` when user provided a value
     * - `null` when user cancelled the modal
     */
    currentPassword() {
        const modalInstance = this.modalService.show(CurrentPasswordModalComponent, { class: 'modal-sm' });
        const currentPasswordEmitter = modalInstance.content.currentPasswordEmitter;
        return currentPasswordEmitter.pipe(take(1));
    }
    hasLowerCase(password) {
        return (password.search(/[a-z]/) !== -1);
    }
    hasUpperCase(password) {
        return (password.search(/[A-Z]/) !== -1);
    }
    hasNumbers(password) {
        return (password.search(/[0-9]/) !== -1);
    }
    hasSpecialChars(password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    }
    getStrengthColor(password) {
        const passwordStrength = filter([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 3) {
            return this.GREEN;
        }
        else if (passwordStrength >= 3) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    }
    getDefaultPasswordMinLength() {
        return this.DEFAULT_PASSWORD_MIN_LENGTH;
    }
}
PasswordService.decorators = [
    { type: Injectable }
];
PasswordService.ctorParameters = () => [
    { type: BsModalService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYXV0aGVudGljYXRpb24vcGFzc3dvcmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0QyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUduRixNQUFNLE9BQU8sZUFBZTtJQXNCMUIsWUFBb0IsWUFBNEI7UUFBNUIsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBckJ4QyxnQ0FBMkIsR0FBRyxDQUFDLENBQUM7UUFFaEMsVUFBSyxHQUEwQjtZQUNyQyxTQUFTLEVBQUUsT0FBTztZQUNsQixLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFdBQVcsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQzlCLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLEtBQUs7U0FDekMsQ0FBQztRQUNNLFdBQU0sR0FBMEI7WUFDdEMsU0FBUyxFQUFFLFFBQVE7WUFDbkIsS0FBSyxFQUFFLG1CQUFtQjtZQUMxQixXQUFXLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUM5QixnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNO1NBQzFDLENBQUM7UUFDTSxRQUFHLEdBQTBCO1lBQ25DLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLEtBQUssRUFBRSxpQkFBaUI7WUFDeEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDNUIsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsR0FBRztTQUN2QyxDQUFDO0lBRWlELENBQUM7SUFFcEQsZUFBZTtRQUNiLE1BQU0sYUFBYSxHQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDakYsTUFBTSx3QkFBd0IsR0FBMEIsYUFBYSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztRQUN2RyxPQUFPLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGVBQWU7UUFDYixNQUFNLGFBQWEsR0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3hHLE1BQU0sc0JBQXNCLEdBQWdDLGFBQWEsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUM7UUFDekcsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFlBQVksQ0FBQyxRQUFnQjtRQUMzQixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxZQUFZLENBQUMsUUFBZ0I7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQWdCO1FBQ3pCLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUFnQjtRQUM5QixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFnQjtRQUMvQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztZQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUN6QixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztTQUMvQixDQUFDLENBQUMsTUFBTSxDQUFDO1FBRVYsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ25CO2FBQU0sSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLEVBQUU7WUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3BCO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRUQsMkJBQTJCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDO0lBQzFDLENBQUM7OztZQTdFRixVQUFVOzs7WUFMRixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYXNzd29yZFN0cmVuZ3RoIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhDb2xvciB9IGZyb20gJy4vcGFzc3dvcmQubW9kZWwnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBQYXNzd29yZENvbmZpcm1Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4vcGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDdXJyZW50UGFzc3dvcmRNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vY3VycmVudC1wYXNzd29yZC1tb2RhbC5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBERUZBVUxUX1BBU1NXT1JEX01JTl9MRU5HVEggPSA4O1xuXG4gIHByaXZhdGUgR1JFRU46IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcbiAgICBjb2xvck5hbWU6ICdncmVlbicsXG4gICAgY29sb3I6ICdyZ2IoMCwgMTI4LCAwKScsXG4gICAgZGVzY3JpcHRpb246IGdldHRleHQoJ3N0cm9uZycpLFxuICAgIHBhc3N3b3JkU3RyZW5ndGg6IFBhc3N3b3JkU3RyZW5ndGguR1JFRU5cbiAgfTtcbiAgcHJpdmF0ZSBZRUxMT1c6IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcbiAgICBjb2xvck5hbWU6ICd5ZWxsb3cnLFxuICAgIGNvbG9yOiAncmdiKDI1NSwgMjA0LCA1MSknLFxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdtZWRpdW0nKSxcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBQYXNzd29yZFN0cmVuZ3RoLllFTExPV1xuICB9O1xuICBwcml2YXRlIFJFRDogUGFzc3dvcmRTdHJlbmd0aENvbG9yID0ge1xuICAgIGNvbG9yTmFtZTogJ3JlZCcsXG4gICAgY29sb3I6ICdyZ2IoMTcwLCAwLCA1MSknLFxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCd3ZWFrJyksXG4gICAgcGFzc3dvcmRTdHJlbmd0aDogUGFzc3dvcmRTdHJlbmd0aC5SRURcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UpIHt9XG5cbiAgY29uZmlybVBhc3N3b3JkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IG1vZGFsSW5zdGFuY2U6IGFueSA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coUGFzc3dvcmRDb25maXJtTW9kYWxDb21wb25lbnQpO1xuICAgIGNvbnN0IHBhc3N3b3JkQ29uZmlybWVkRW1pdHRlcjogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbW9kYWxJbnN0YW5jZS5jb250ZW50LnBhc3N3b3JkQ29uZmlybWVkRW1pdHRlcjtcbiAgICByZXR1cm4gcGFzc3dvcmRDb25maXJtZWRFbWl0dGVyLnBpcGUodGFrZSgxKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdpdGggdGhlIHBhc3N3b3JkIHByb3ZpZGVkIGJ5IHVzZXI6XG4gICAqIC0gYHN0cmluZ2Agd2hlbiB1c2VyIHByb3ZpZGVkIGEgdmFsdWVcbiAgICogLSBgbnVsbGAgd2hlbiB1c2VyIGNhbmNlbGxlZCB0aGUgbW9kYWxcbiAgICovXG4gIGN1cnJlbnRQYXNzd29yZCgpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcbiAgICBjb25zdCBtb2RhbEluc3RhbmNlOiBhbnkgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KEN1cnJlbnRQYXNzd29yZE1vZGFsQ29tcG9uZW50LCB7IGNsYXNzOiAnbW9kYWwtc20nIH0pO1xuICAgIGNvbnN0IGN1cnJlbnRQYXNzd29yZEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudWxsPiA9IG1vZGFsSW5zdGFuY2UuY29udGVudC5jdXJyZW50UGFzc3dvcmRFbWl0dGVyO1xuICAgIHJldHVybiBjdXJyZW50UGFzc3dvcmRFbWl0dGVyLnBpcGUodGFrZSgxKSk7XG4gIH1cblxuICBoYXNMb3dlckNhc2UocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bYS16XS8pICE9PSAtMSk7XG4gIH1cblxuICBoYXNVcHBlckNhc2UocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bQS1aXS8pICE9PSAtMSk7XG4gIH1cblxuICBoYXNOdW1iZXJzKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvWzAtOV0vKSAhPT0gLTEpO1xuICB9XG5cbiAgaGFzU3BlY2lhbENoYXJzKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvW14wLTlhLXpBLVpdKy8pICE9PSAtMSk7XG4gIH1cblxuICBnZXRTdHJlbmd0aENvbG9yKHBhc3N3b3JkOiBzdHJpbmcpOiBQYXNzd29yZFN0cmVuZ3RoQ29sb3Ige1xuICAgIGNvbnN0IHBhc3N3b3JkU3RyZW5ndGggPSBmaWx0ZXIoW1xuICAgICAgdGhpcy5oYXNMb3dlckNhc2UocGFzc3dvcmQpLFxuICAgICAgdGhpcy5oYXNVcHBlckNhc2UocGFzc3dvcmQpLFxuICAgICAgdGhpcy5oYXNOdW1iZXJzKHBhc3N3b3JkKSxcbiAgICAgIHRoaXMuaGFzU3BlY2lhbENoYXJzKHBhc3N3b3JkKVxuICAgIF0pLmxlbmd0aDtcblxuICAgIGlmIChwYXNzd29yZFN0cmVuZ3RoID4gMykge1xuICAgICAgcmV0dXJuIHRoaXMuR1JFRU47XG4gICAgfSBlbHNlIGlmIChwYXNzd29yZFN0cmVuZ3RoID49IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLllFTExPVztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuUkVEO1xuICAgIH1cbiAgfVxuXG4gIGdldERlZmF1bHRQYXNzd29yZE1pbkxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5ERUZBVUxUX1BBU1NXT1JEX01JTl9MRU5HVEg7XG4gIH1cbn1cbiJdfQ==