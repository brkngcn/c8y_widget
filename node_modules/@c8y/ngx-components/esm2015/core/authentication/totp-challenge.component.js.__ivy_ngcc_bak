import { __awaiter } from "tslib";
import { Component, Output, EventEmitter, Input, ViewChild } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
import { LoginService } from '../login/login.service';
import { UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
export class TotpChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        /**
         * Calls the verify endpoint if set to true (default true)
         */
        this.verify = true;
        /**
         * Emits the token on success.
         */
        this.onSuccess = new EventEmitter();
        /**
         * Emits if set up two-factor authentication is canceled.
         */
        this.totpUnconfirmedEmitter = new EventEmitter();
        this.loading = false;
        this.hasError = false;
        this.model = {
            token: ''
        };
    }
    verifyCode() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                if (this.verify) {
                    yield this.users.verifyTotpCode(this.model.token);
                }
                this.onSuccess.emit(this.model.token);
            }
            catch (e) {
                this.hasError = true;
                this.alert.removeLastDanger();
                this.loading = false;
            }
        });
    }
    cancel() {
        this.totpUnconfirmedEmitter.emit();
    }
}
TotpChallengeComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-totp-challenge',
                template: "<form #totpForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"verifyCode()\" novalidate>\n  <div class=\"d-block p-24 p-b-0\">\n    <c8y-form-group\n      [hasError]=\"hasError\"\n      [novalidation]=\"true\"\n      [ngClass]=\"hasError ? 'p-b-24' : ''\"\n    >\n      <h1 class=\"label p-0\"><label translate for=\"totpToken\">Verification code</label></h1>\n\n      <input\n        id=\"totpToken\"\n        [(ngModel)]=\"model.token\"\n        name=\"totpToken\"\n        type=\"text\"\n        autofocus\n        autocapitalize=\"off\"\n        autocorrect=\"off\"\n        autocomplete=\"off\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g.' | translate }} 624327\"\n        required\n      />\n\n      <c8y-messages>\n        <c8y-message *ngIf=\"hasError\" translate>\n          Invalid verification code. In case of key loss, please contact your platform\n          administrator.\n        </c8y-message>\n      </c8y-messages>\n      <p id=\"helpinput\" *ngIf=\"!hasError\" class=\"help-block\" translate>\n        In case of key loss, please contact your platform administrator.\n      </p>\n    </c8y-form-group>\n  </div>\n  <div class=\"modal-footer separator-top bg-level-0 sticky-bottom p-b-0\">\n    <button\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      *ngIf=\"!loading\"\n      title=\"{{ 'Verify' | translate }}\"\n      [disabled]=\"!totpForm.form.valid\"\n      type=\"submit\"\n      class=\"btn btn-primary form-group\"\n    >\n      {{ 'Verify' | translate }}\n    </button>\n\n    <button\n      *ngIf=\"loading\"\n      title=\"{{ 'Verifying\u2026' | translate }}\"\n      type=\"submit\"\n      class=\"btn btn-primary btn-pending\"\n    >\n      {{ 'Verifying\u2026' | translate }}\n    </button>\n  </div>\n</form>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
TotpChallengeComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
TotpChallengeComponent.propDecorators = {
    verify: [{ type: Input }],
    onSuccess: [{ type: Output }],
    totpUnconfirmedEmitter: [{ type: Output }],
    loading: [{ type: Input }],
    hasError: [{ type: Input }],
    modal: [{ type: ViewChild, args: ['modal', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1jaGFsbGVuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9hdXRoZW50aWNhdGlvbi90b3RwLWNoYWxsZW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFTdEQsTUFBTSxPQUFPLHNCQUFzQjtJQW9CakMsWUFDUyxZQUEwQixFQUN6QixLQUFrQixFQUNsQixLQUFtQjtRQUZwQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN6QixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQWM7UUF0QjdCOztXQUVHO1FBQ00sV0FBTSxHQUFHLElBQUksQ0FBQztRQUN2Qjs7V0FFRztRQUNPLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3pDOztXQUVHO1FBQ08sMkJBQXNCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3QyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUIsVUFBSyxHQUFHO1lBQ04sS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDO0lBT0MsQ0FBQztJQUVFLFVBQVU7O1lBQ2QsSUFBSTtnQkFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDZixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25EO2dCQUNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkM7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzthQUN0QjtRQUNILENBQUM7S0FBQTtJQUVELE1BQU07UUFDSixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7O1lBakRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QiwyNERBQThDO2dCQUM5QyxhQUFhLEVBQUUsQ0FBRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUU7YUFDdEU7OztZQVRRLFlBQVk7WUFDWixXQUFXO1lBQ1gsWUFBWTs7O3FCQWFsQixLQUFLO3dCQUlMLE1BQU07cUNBSU4sTUFBTTtzQkFDTixLQUFLO3VCQUNMLEtBQUs7b0JBSUwsU0FBUyxTQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sQ29udGFpbmVyLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBNb2RhbENvbXBvbmVudCB9IGZyb20gJy4uL21vZGFsL21vZGFsLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS10b3RwLWNoYWxsZW5nZScsXG4gIHRlbXBsYXRlVXJsOiAnLi90b3RwLWNoYWxsZW5nZS5jb21wb25lbnQuaHRtbCcsXG4gIHZpZXdQcm92aWRlcnM6IFsgeyBwcm92aWRlOiBDb250cm9sQ29udGFpbmVyLCB1c2VFeGlzdGluZzogTmdGb3JtIH0gXVxufSlcblxuZXhwb3J0IGNsYXNzIFRvdHBDaGFsbGVuZ2VDb21wb25lbnQge1xuICAvKipcbiAgICogQ2FsbHMgdGhlIHZlcmlmeSBlbmRwb2ludCBpZiBzZXQgdG8gdHJ1ZSAoZGVmYXVsdCB0cnVlKVxuICAgKi9cbiAgQElucHV0KCkgdmVyaWZ5ID0gdHJ1ZTtcbiAgLyoqXG4gICAqIEVtaXRzIHRoZSB0b2tlbiBvbiBzdWNjZXNzLlxuICAgKi9cbiAgQE91dHB1dCgpIG9uU3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLyoqXG4gICAqIEVtaXRzIGlmIHNldCB1cCB0d28tZmFjdG9yIGF1dGhlbnRpY2F0aW9uIGlzIGNhbmNlbGVkLlxuICAgKi9cbiAgQE91dHB1dCgpIHRvdHBVbmNvbmZpcm1lZEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIGxvYWRpbmcgPSBmYWxzZTtcbiAgQElucHV0KCkgaGFzRXJyb3IgPSBmYWxzZTtcbiAgbW9kZWwgPSB7XG4gICAgdG9rZW46ICcnXG4gIH07XG4gIEBWaWV3Q2hpbGQoJ21vZGFsJywgeyBzdGF0aWM6IGZhbHNlIH0pIHByaXZhdGUgbW9kYWw6IE1vZGFsQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIHVzZXJzOiBVc2VyU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIHZlcmlmeUNvZGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICBpZiAodGhpcy52ZXJpZnkpIHtcbiAgICAgICAgYXdhaXQgdGhpcy51c2Vycy52ZXJpZnlUb3RwQ29kZSh0aGlzLm1vZGVsLnRva2VuKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub25TdWNjZXNzLmVtaXQodGhpcy5tb2RlbC50b2tlbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWU7XG4gICAgICB0aGlzLmFsZXJ0LnJlbW92ZUxhc3REYW5nZXIoKTtcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnRvdHBVbmNvbmZpcm1lZEVtaXR0ZXIuZW1pdCgpO1xuICB9XG59XG4iXX0=