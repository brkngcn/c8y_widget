import { Component, HostBinding, HostListener, Input } from '@angular/core';
import { filter, sortBy } from 'lodash-es';
import { of, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { GainsightService } from '../product-experience/gainsight.service';
/**
 * This component is used as the outlet to show the action bars.
 * In a c8ycli app it is by default placed on the bootstrap component.
 */
export class ActionBarComponent {
    constructor(gainsightService) {
        this.gainsightService = gainsightService;
        /**
         * Identifies if the navigator is opened. If yes, the action-bar
         * needs to move to the right.
         */
        this.navigatorOpen = false;
        /**
         * Identifies if the current view has tabs. If yes, the action bar needs
         * to move down.
         */
        this.hasTabs = false;
        /**
         * Identifies if the tabs are aligned horizontally. If yes, the tabs don't
         * need to move to the left.
         */
        this.isTabsHorizontal = false;
        /**
         * Identifies if in a mobile view the toolbar is expanded or not.
         */
        this.isPageToolbarExpanded = false;
        /**
         * Adds the default `c8y-ui-action-bar` class.
         */
        this.uiActionBar = true;
        /**
         * The current items to display in the ActionBar.
         */
        this.items$ = of([]);
        /**
         * Provides observable for right action items.
         */
        this.right$ = of([]);
        /**
         * Provides observable for left action items.
         */
        this.left$ = of([]);
        /**
         * Provides observable for more action items.
         */
        this.more$ = of([]);
        /**
         * Returns true if no items are present and hides the action bar.
         */
        this.hidden$ = of(true);
        /**
         * Binds hidden property to this component's native element
         */
        this.hidden = true;
        this.destroy$ = new Subject();
    }
    mouseDown(event) {
        if (event.getAttribute('id') === 'page-toolbar') {
            return;
        }
        const element = event.closest('[px-event]') || event.closest('[title]') || event.closest('[uib-tooltip]');
        if (!element) {
            return;
        }
        const eventName = element.getAttribute('px-event') || element.getAttribute('title') || element.getAttribute('uib-tooltip');
        const translatedEventName = this.gainsightService.translateToEnglish(eventName);
        this.gainsightService.triggerEvent(`actionBarItem:${translatedEventName}`, { url: element.baseURI });
    }
    ngOnInit() {
        this.right$ = this.items$.pipe(map(items => filter(items, { placement: 'right' })), map(items => sortBy(items, this.byPriority)));
        this.left$ = this.items$.pipe(map(items => filter(items, { placement: 'left' })), map(items => sortBy(items, this.byPriority)));
        this.more$ = this.items$.pipe(map(items => filter(items, { placement: 'more' })), map(items => sortBy(items, this.byPriority)));
        this.hidden$ = this.items$.pipe(map(items => {
            return !(items && items.length);
        }));
        this.hidden$
            .pipe(takeUntil(this.destroy$)).subscribe(hidden => {
            this.hidden = hidden;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    byPriority(item) {
        return -item.priority;
    }
}
ActionBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-action-bar',
                template: "<div class=\"navbar-header\">\n  <p class=\"text-label-small p-l-16 p-t-8 p-b-8 visible-xs\">\n    <span class=\"text-primary\">{{ 'Action bar' | translate }}</span>\n  </p>\n</div>\n\n<div id=\"page-toolbar\" class=\"navbar-collapse\">\n  <ul class=\"nav navbar-nav navbar-left\">\n    <ng-container *ngFor=\"let item of left$ | async\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n  </ul>\n  <ul class=\"nav navbar-nav navbar-right\">\n    <ng-container *ngFor=\"let item of right$ | async\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n    <li class=\"no-remove more-wrapper\" *ngIf=\"(more$ | async).length > 0\">\n      <div class=\"dropdown\" dropdown>\n        <button\n          title=\"{{ 'More' | translate }}\u2026\"\n          class=\"dropdown-toggle c8y-dropdown d-flex\"\n          dropdownToggle\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          <span class=\"text-truncate\" translate>More\u2026</span>\n          <i [c8yIcon]=\"'caret-down'\"></i>\n        </button>\n        <ul class=\"dropdown-menu visible-xs\">\n          <ng-container *ngFor=\"let item of more$ | async\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n        <ul class=\"dropdown-menu dropdown-menu-right hidden-xs\" *dropdownMenu>\n          <ng-container *ngFor=\"let item of more$ | async\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n    </li>\n  </ul>\n</div>\n",
                host: { class: 'c8y-ui-action-bar' }
            },] }
];
ActionBarComponent.ctorParameters = () => [
    { type: GainsightService }
];
ActionBarComponent.propDecorators = {
    navigatorOpen: [{ type: Input }, { type: HostBinding, args: ['class.navigator-open',] }],
    hasTabs: [{ type: Input }, { type: HostBinding, args: ['class.has-tabs',] }],
    isTabsHorizontal: [{ type: Input }, { type: HostBinding, args: ['class.horizontal-tabs',] }],
    uiActionBar: [{ type: HostBinding, args: ['class.c8y-ui-action-bar',] }],
    items$: [{ type: Input }],
    hidden: [{ type: HostBinding }],
    mouseDown: [{ type: HostListener, args: ['mousedown', ['$event.target'],] }]
};
//# sourceMappingURL=data:application/json;base64,