import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { camelCase } from 'lodash-es';
import { BehaviorSubject, combineLatest, fromEvent } from 'rxjs';
import { delay, filter, map, take } from 'rxjs/operators';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/ui-state.service";
import * as i2 from "../common/options.service";
import * as i3 from "../bootstrap/cookie-banner/cookie-banner.service";
import * as i4 from "../common/user-preferences/user-preferences.service";
import * as i5 from "@ngx-translate/core";
/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../common/ui-state.service';
import * as ɵngcc2 from '../common/options.service';
import * as ɵngcc3 from '../bootstrap/cookie-banner/cookie-banner.service';
import * as ɵngcc4 from '../common/user-preferences/user-preferences.service';
import * as ɵngcc5 from '@ngx-translate/core';
export class GainsightService {
    constructor(appState, options, cookieBannerService, userPreferencesService, translateService) {
        this.appState = appState;
        this.options = options;
        this.cookieBannerService = cookieBannerService;
        this.userPreferencesService = userPreferencesService;
        this.translateService = translateService;
        /**
         * A subject that emits the tag function as soon as a new tag is set.
         */
        this.tagFunction$ = new BehaviorSubject(null);
        this.USER_PREFERENCES_KEY = 'gainsightEnabled';
        this.GAINSIGHT_URL = 'web-sdk.aptrinsic.com/api/aptrinsic.js?a=';
        this.GAINSIGHT_GLOBAL_SCOPE = 'aptrinsic';
        this.SCRIPT_EXECUTION_WAIT_TIME = 500;
        this.OPTIONS_KEY_CATEGORY = 'gainsight';
        this.OPTIONS_KEY_NAME = 'api.key';
        this.isScriptLoaded = false;
    }
    isGainsightDisabledInUserPreferences() {
        return __awaiter(this, void 0, void 0, function* () {
            const userGainsightPref = yield this.userPreferencesService
                .get(this.USER_PREFERENCES_KEY)
                .toPromise();
            return userGainsightPref === false;
        });
    }
    setFunctionalCookie(value) {
        const cookies = this.cookieBannerService.getUserCookiePreferences();
        if (cookies) {
            Object.keys(cookies).forEach(cookieName => {
                if (cookieName === 'functional') {
                    cookies[cookieName] = value;
                    return;
                }
            });
            localStorage.setItem('acceptCookieNotice', JSON.stringify(cookies));
        }
    }
    getGainsightKey() {
        return __awaiter(this, void 0, void 0, function* () {
            this.gainsightKey =
                this.options.gainsightKey ||
                    (yield this.options.getSystemOption(this.OPTIONS_KEY_CATEGORY, this.OPTIONS_KEY_NAME));
            return this.gainsightKey;
        });
    }
    /**
     * Returns the tag global function which can be used to identify user
     * or add special events.
     */
    get tagFunction() {
        return window[this.GAINSIGHT_GLOBAL_SCOPE];
    }
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param currentTenant The current tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    loadTag(currentTenant, identify = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const scriptTag = document.createElement('script');
            const key = yield this.getGainsightKey();
            if (key && !this.isScriptLoaded) {
                this.loadScriptTag(scriptTag, key);
                combineLatest(this.appState.currentUser, fromEvent(scriptTag, 'load'), this.appState.state$.pipe(filter(({ versions }) => versions.backend), map(({ versions }) => versions), take(1)))
                    .pipe(delay(this.SCRIPT_EXECUTION_WAIT_TIME), filter(([user, scriptEvent]) => !!(scriptEvent && user)))
                    .subscribe(([user, scriptEvent, versions]) => {
                    const instanceId = this.getInstanceIdFromUrl();
                    if (identify) {
                        this.identify(user, currentTenant, instanceId, versions.ui.ngx, versions.backend);
                    }
                    this.isScriptLoaded = true;
                    this.tagFunction$.next(this.tagFunction);
                });
            }
        });
    }
    /**
     * Identifies the user/account at Gainsight.
     * @param user The user which is given to Gainsight.
     * @param tenant The tenant which is given to Gainsight.
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    identify(user, tenant, instanceId, versionUI, versionBE) {
        const windowRef = window;
        const { id: userId, email, userName, firstName, lastName } = user;
        const { name, customProperties, domainName } = tenant;
        const { externalReference } = customProperties || {};
        windowRef[this.GAINSIGHT_GLOBAL_SCOPE]('identify', {
            id: `${userId}_${name}_${instanceId}`,
            email,
            userName,
            firstName,
            lastName,
            domainName,
            versionUI,
            versionBE,
            userLanguage: this.translateService.currentLang,
            instanceId,
            externalReference
        }, {
            id: `${name}_${instanceId}`,
            instanceId
        });
    }
    triggerEvent(eventName, props) {
        if (this.tagFunction && eventName) {
            eventName = this.prepareEventName(eventName);
            this.tagFunction('track', eventName, props);
        }
    }
    translateToEnglish(textToTranslate) {
        const { currentLang } = this.translateService;
        if (currentLang === 'en') {
            return textToTranslate;
        }
        if (currentLang && currentLang !== this.cachedLanguage) {
            this.cachedRevertedTranslations = undefined;
        }
        if (!this.cachedRevertedTranslations) {
            this.cachedLanguage = currentLang;
            this.cachedRevertedTranslations = this.getRevertedTranslations(currentLang);
        }
        return this.getEnTranslation(textToTranslate, this.cachedRevertedTranslations);
    }
    /**
     * Checks if the Gainsight's tag should be loaded.
     * The decision to load Gainsight will depend on custom properties and functional cookies.
     * @param customProperties Tenant's customProperties.
     */
    shouldLoadGainsightTag(customProperties) {
        return (this.cookieBannerService.isConfigCookiePreferencesDefined() &&
            this.cookieBannerService.isFunctionalCookieEnabled() &&
            !this.isGainsightDisabled(customProperties) &&
            !this.isCustomBranding());
    }
    canEditProductExperienceSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appState.currentTenant.value;
            const { customProperties } = currentTenant;
            const gainsightKey = !!this.gainsightKey || !!(yield this.getGainsightKey());
            return (gainsightKey &&
                this.cookieBannerService.isConfigCookiePreferencesDefined() &&
                !this.isGainsightDisabled(customProperties) &&
                !!this.cookieBannerService.getUserCookiePreferences() &&
                !this.isCustomBranding());
        });
    }
    prepareEventName(baseEventName) {
        return baseEventName
            .split(':')
            .map(eventNamePart => camelCase(removeTranslationContext(eventNamePart)))
            .join(':');
        function removeTranslationContext(eventNamePart) {
            return eventNamePart.replace(/`[\w\W]*`/g, '');
        }
    }
    isGainsightDisabled(customProperties) {
        const gainsightEnabled = customProperties && customProperties.gainsightEnabled;
        return gainsightEnabled === false;
    }
    isCustomBranding() {
        const brandingCssVars = this.options.get('brandingCssVars') || {};
        return !!brandingCssVars['brand-logo-img'];
    }
    loadScriptTag(scriptTag, key) {
        try {
            const windowRef = window;
            const firstTag = document.getElementsByTagName('script')[0];
            const protocol = location.protocol;
            const gainsightGlobalScope = this.GAINSIGHT_GLOBAL_SCOPE;
            scriptTag.src = `${protocol}//${this.GAINSIGHT_URL}${key}`;
            (windowRef[this.GAINSIGHT_GLOBAL_SCOPE] =
                windowRef[this.GAINSIGHT_GLOBAL_SCOPE] ||
                    // tslint:disable-next-line:only-arrow-functions
                    function () {
                        (windowRef[gainsightGlobalScope].q = windowRef[gainsightGlobalScope].q || []).push(arguments);
                    }),
                (windowRef[gainsightGlobalScope].p = key);
            scriptTag.async = true;
            firstTag.parentNode.insertBefore(scriptTag, firstTag);
        }
        catch (ex) {
            console.warn('Failed to load Gainsight PX', ex);
        }
    }
    getInstanceIdFromUrl() {
        const hostName = location.hostname;
        return hostName.substring(hostName.indexOf('.') + 1);
    }
    /**
     * Reverses the translation object.
     *
     * **Example**
     * { Add widget: "Widget hinzufügen" }
     *
     * will be changed to:
     *
     * { Widget hinzufügen: "Add widget" }
     *
     * @param currentLang Language whose translated values are to be placed in the object key.
     * @returns Returns an inverted object where the keys have been swapped with the values.
     */
    getRevertedTranslations(currentLang) {
        const translations = this.translateService.store.translations[currentLang];
        const swappedKeysWithValues = {};
        Object.keys(translations).forEach(key => {
            swappedKeysWithValues[translations[key]] = key;
        });
        return swappedKeysWithValues;
    }
    /**Translates string back into English.
     * If the current application language is set to English, the string passed as an argument is returned.
     * @param textToTranslate string to translate.
     * @returns Returns the string translated into English.
     */
    getEnTranslation(textToTranslate, translations) {
        let enTranslation = translations[textToTranslate];
        if (!enTranslation) {
            return textToTranslate;
        }
        /** remove translation context */
        const regex = /\`(.*?)\`/;
        enTranslation = enTranslation.replace(regex, '');
        return enTranslation;
    }
}
GainsightService.ɵfac = function GainsightService_Factory(t) { return new (t || GainsightService)(ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc2.OptionsService), ɵngcc0.ɵɵinject(ɵngcc3.CookieBannerService), ɵngcc0.ɵɵinject(ɵngcc4.UserPreferencesService), ɵngcc0.ɵɵinject(ɵngcc5.TranslateService)); };
GainsightService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GainsightService_Factory() { return new GainsightService(i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.OptionsService), i0.ɵɵinject(i3.CookieBannerService), i0.ɵɵinject(i4.UserPreferencesService), i0.ɵɵinject(i5.TranslateService)); }, token: GainsightService, providedIn: "root" });
GainsightService.ctorParameters = () => [
    { type: AppStateService },
    { type: OptionsService },
    { type: CookieBannerService },
    { type: UserPreferencesService },
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GainsightService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppStateService }, { type: ɵngcc2.OptionsService }, { type: ɵngcc3.CookieBannerService }, { type: ɵngcc4.UserPreferencesService }, { type: ɵngcc5.TranslateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,