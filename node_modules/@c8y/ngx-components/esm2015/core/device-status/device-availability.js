import { formatDate } from '@angular/common';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '../i18n/translate.service';
// TODO remove  when c8y-icon will works
export var SendStatus;
(function (SendStatus) {
    SendStatus["AVAILABLE"] = "AVAILABLE";
    SendStatus["UNAVAILABLE"] = "UNAVAILABLE";
    SendStatus["UNKNOWN"] = "UNKNOWN";
    SendStatus["MAINTENANCE"] = "MAINTENANCE";
    SendStatus["NOT_MONITORED"] = "NOT_MONITORED";
})(SendStatus || (SendStatus = {}));
export var PushStatus;
(function (PushStatus) {
    PushStatus["CONNECTED"] = "CONNECTED";
    PushStatus["DISCONNECTED"] = "DISCONNECTED";
    PushStatus["UNKNOWN"] = "UNKNOWN";
    PushStatus["MAINTENANCE"] = "MAINTENANCE";
})(PushStatus || (PushStatus = {}));
export var SendStatusLabels;
(function (SendStatusLabels) {
    SendStatusLabels[SendStatusLabels["AVAILABLE"] = gettext('Send connection: online')] = "AVAILABLE";
    SendStatusLabels[SendStatusLabels["NOT_MONITORED"] = gettext('Send connection: not monitored')] = "NOT_MONITORED";
    SendStatusLabels[SendStatusLabels["UNAVAILABLE"] = gettext('Send connection: offline')] = "UNAVAILABLE";
    SendStatusLabels[SendStatusLabels["UNKNOWN"] = gettext('Send connection status unknown')] = "UNKNOWN";
    SendStatusLabels[SendStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(SendStatusLabels || (SendStatusLabels = {}));
export var PushStatusLabels;
(function (PushStatusLabels) {
    PushStatusLabels[PushStatusLabels["CONNECTED"] = gettext('Push connection: active')] = "CONNECTED";
    PushStatusLabels[PushStatusLabels["DISCONNECTED"] = gettext('Push connection: inactive')] = "DISCONNECTED";
    PushStatusLabels[PushStatusLabels["UNKNOWN"] = gettext('Push connection: inactive')] = "UNKNOWN";
    PushStatusLabels[PushStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(PushStatusLabels || (PushStatusLabels = {}));
export const deviceAvailabilityIconMap = {
    sendData: {
        [SendStatus.AVAILABLE]: {
            icon: 'long-arrow-right',
            class: 'statusOk'
        },
        [SendStatus.UNAVAILABLE]: {
            icon: 'long-arrow-right',
            class: 'statusNok'
        },
        [SendStatus.UNKNOWN]: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        [SendStatus.NOT_MONITORED]: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        }
    },
    push: {
        [PushStatus.CONNECTED]: {
            icon: 'long-arrow-left',
            class: 'statusOk'
        },
        [PushStatus.DISCONNECTED]: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        [PushStatus.UNKNOWN]: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        [PushStatus.MAINTENANCE]: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    },
    device: {
        MAINTENANCE: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    }
};
const ɵ0 = (lastMessage, translateService) => {
    const date = formatDate(new Date(lastMessage), 'medium', translateService.currentLang || TranslateService.defaultLang());
    return translateService.instant(gettext('Device last request:\n{{date}}'), { date });
};
export const tooltips = {
    sendStatusConnected: ɵ0,
    sendStatusDisconnected: gettext('Connection not monitored'),
    pushStatusConnected: gettext('Connection to device established'),
    pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
    maintenance: gettext('Device is under maintenance')
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWF2YWlsYWJpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZGV2aWNlLXN0YXR1cy9kZXZpY2UtYXZhaWxhYmlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDN0Qsd0NBQXdDO0FBRXhDLE1BQU0sQ0FBTixJQUFZLFVBTVg7QUFORCxXQUFZLFVBQVU7SUFDcEIscUNBQXVCLENBQUE7SUFDdkIseUNBQTJCLENBQUE7SUFDM0IsaUNBQW1CLENBQUE7SUFDbkIseUNBQTJCLENBQUE7SUFDM0IsNkNBQStCLENBQUE7QUFDakMsQ0FBQyxFQU5XLFVBQVUsS0FBVixVQUFVLFFBTXJCO0FBRUQsTUFBTSxDQUFOLElBQVksVUFLWDtBQUxELFdBQVksVUFBVTtJQUNwQixxQ0FBdUIsQ0FBQTtJQUN2QiwyQ0FBNkIsQ0FBQTtJQUM3QixpQ0FBbUIsQ0FBQTtJQUNuQix5Q0FBMkIsQ0FBQTtBQUM3QixDQUFDLEVBTFcsVUFBVSxLQUFWLFVBQVUsUUFLckI7QUFFRCxNQUFNLENBQU4sSUFBWSxnQkFNWDtBQU5ELFdBQVksZ0JBQWdCO0lBQzFCLGlEQUFZLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxlQUFBLENBQUE7SUFDOUMscURBQWdCLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxtQkFBQSxDQUFBO0lBQ3pELG1EQUFjLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxpQkFBQSxDQUFBO0lBQ2pELCtDQUFVLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxhQUFBLENBQUE7SUFDbkQsbURBQWMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLGlCQUFBLENBQUE7QUFDdEQsQ0FBQyxFQU5XLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFNM0I7QUFFRCxNQUFNLENBQU4sSUFBWSxnQkFLWDtBQUxELFdBQVksZ0JBQWdCO0lBQzFCLGlEQUFZLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxlQUFBLENBQUE7SUFDOUMsb0RBQWUsT0FBTyxDQUFDLDJCQUEyQixDQUFDLGtCQUFBLENBQUE7SUFDbkQsK0NBQVUsT0FBTyxDQUFDLDJCQUEyQixDQUFDLGFBQUEsQ0FBQTtJQUM5QyxtREFBYyxPQUFPLENBQUMsNkJBQTZCLENBQUMsaUJBQUEsQ0FBQTtBQUN0RCxDQUFDLEVBTFcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUszQjtBQUVELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHO0lBQ3ZDLFFBQVEsRUFBRTtRQUNSLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLFVBQVU7U0FDbEI7UUFDRCxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN4QixJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLEtBQUssRUFBRSxXQUFXO1NBQ25CO1FBQ0QsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixLQUFLLEVBQUUsZUFBZTtTQUN2QjtRQUNELENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzFCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLGVBQWU7U0FDdkI7S0FDRjtJQUNELElBQUksRUFBRTtRQUNKLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsS0FBSyxFQUFFLFVBQVU7U0FDbEI7UUFDRCxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN6QixJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLEtBQUssRUFBRSxlQUFlO1NBQ3ZCO1FBQ0QsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixLQUFLLEVBQUUsZUFBZTtTQUN2QjtRQUNELENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGFBQWE7U0FDckI7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLFdBQVcsRUFBRTtZQUNYLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGFBQWE7U0FDckI7S0FDRjtDQUNGLENBQUM7V0FHcUIsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRTtJQUNyRCxNQUFNLElBQUksR0FBRyxVQUFVLENBQ3JCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUNyQixRQUFRLEVBQ1IsZ0JBQWdCLENBQUMsV0FBVyxJQUFJLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUMvRCxDQUFDO0lBQ0YsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZGLENBQUM7QUFSSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUc7SUFDdEIsbUJBQW1CLElBT2xCO0lBQ0Qsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0lBQzNELG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQztJQUNoRSxzQkFBc0IsRUFBRSxPQUFPLENBQzdCLG1GQUFtRixDQUNwRjtJQUNELFdBQVcsRUFBRSxPQUFPLENBQUMsNkJBQTZCLENBQUM7Q0FDcEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vaTE4bi90cmFuc2xhdGUuc2VydmljZSc7XG4vLyBUT0RPIHJlbW92ZSAgd2hlbiBjOHktaWNvbiB3aWxsIHdvcmtzXG5cbmV4cG9ydCBlbnVtIFNlbmRTdGF0dXMge1xuICBBVkFJTEFCTEUgPSAnQVZBSUxBQkxFJyxcbiAgVU5BVkFJTEFCTEUgPSAnVU5BVkFJTEFCTEUnLFxuICBVTktOT1dOID0gJ1VOS05PV04nLFxuICBNQUlOVEVOQU5DRSA9ICdNQUlOVEVOQU5DRScsXG4gIE5PVF9NT05JVE9SRUQgPSAnTk9UX01PTklUT1JFRCdcbn1cblxuZXhwb3J0IGVudW0gUHVzaFN0YXR1cyB7XG4gIENPTk5FQ1RFRCA9ICdDT05ORUNURUQnLFxuICBESVNDT05ORUNURUQgPSAnRElTQ09OTkVDVEVEJyxcbiAgVU5LTk9XTiA9ICdVTktOT1dOJyxcbiAgTUFJTlRFTkFOQ0UgPSAnTUFJTlRFTkFOQ0UnXG59XG5cbmV4cG9ydCBlbnVtIFNlbmRTdGF0dXNMYWJlbHMge1xuICBBVkFJTEFCTEUgPSBnZXR0ZXh0KCdTZW5kIGNvbm5lY3Rpb246IG9ubGluZScpLFxuICBOT1RfTU9OSVRPUkVEID0gZ2V0dGV4dCgnU2VuZCBjb25uZWN0aW9uOiBub3QgbW9uaXRvcmVkJyksXG4gIFVOQVZBSUxBQkxFID0gZ2V0dGV4dCgnU2VuZCBjb25uZWN0aW9uOiBvZmZsaW5lJyksXG4gIFVOS05PV04gPSBnZXR0ZXh0KCdTZW5kIGNvbm5lY3Rpb24gc3RhdHVzIHVua25vd24nKSxcbiAgTUFJTlRFTkFOQ0UgPSBnZXR0ZXh0KCdEZXZpY2UgaXMgdW5kZXIgbWFpbnRlbmFuY2UnKVxufVxuXG5leHBvcnQgZW51bSBQdXNoU3RhdHVzTGFiZWxzIHtcbiAgQ09OTkVDVEVEID0gZ2V0dGV4dCgnUHVzaCBjb25uZWN0aW9uOiBhY3RpdmUnKSxcbiAgRElTQ09OTkVDVEVEID0gZ2V0dGV4dCgnUHVzaCBjb25uZWN0aW9uOiBpbmFjdGl2ZScpLFxuICBVTktOT1dOID0gZ2V0dGV4dCgnUHVzaCBjb25uZWN0aW9uOiBpbmFjdGl2ZScpLFxuICBNQUlOVEVOQU5DRSA9IGdldHRleHQoJ0RldmljZSBpcyB1bmRlciBtYWludGVuYW5jZScpXG59XG5cbmV4cG9ydCBjb25zdCBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwID0ge1xuICBzZW5kRGF0YToge1xuICAgIFtTZW5kU3RhdHVzLkFWQUlMQUJMRV06IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LXJpZ2h0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzT2snXG4gICAgfSxcbiAgICBbU2VuZFN0YXR1cy5VTkFWQUlMQUJMRV06IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LXJpZ2h0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzTm9rJ1xuICAgIH0sXG4gICAgW1NlbmRTdGF0dXMuVU5LTk9XTl06IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LXJpZ2h0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9LFxuICAgIFtTZW5kU3RhdHVzLk5PVF9NT05JVE9SRURdOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1yaWdodCcsXG4gICAgICBjbGFzczogJ3N0YXR1c1Vua25vd24nXG4gICAgfVxuICB9LFxuICBwdXNoOiB7XG4gICAgW1B1c2hTdGF0dXMuQ09OTkVDVEVEXToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctbGVmdCcsXG4gICAgICBjbGFzczogJ3N0YXR1c09rJ1xuICAgIH0sXG4gICAgW1B1c2hTdGF0dXMuRElTQ09OTkVDVEVEXToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctbGVmdCcsXG4gICAgICBjbGFzczogJ3N0YXR1c1Vua25vd24nXG4gICAgfSxcbiAgICBbUHVzaFN0YXR1cy5VTktOT1dOXToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctbGVmdCcsXG4gICAgICBjbGFzczogJ3N0YXR1c1Vua25vd24nXG4gICAgfSxcbiAgICBbUHVzaFN0YXR1cy5NQUlOVEVOQU5DRV06IHtcbiAgICAgIGljb246ICd3cmVuY2gnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNBbGVydCdcbiAgICB9XG4gIH0sXG4gIGRldmljZToge1xuICAgIE1BSU5URU5BTkNFOiB7XG4gICAgICBpY29uOiAnd3JlbmNoJyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzQWxlcnQnXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgdG9vbHRpcHMgPSB7XG4gIHNlbmRTdGF0dXNDb25uZWN0ZWQ6IChsYXN0TWVzc2FnZSwgdHJhbnNsYXRlU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBmb3JtYXREYXRlKFxuICAgICAgbmV3IERhdGUobGFzdE1lc3NhZ2UpLFxuICAgICAgJ21lZGl1bScsXG4gICAgICB0cmFuc2xhdGVTZXJ2aWNlLmN1cnJlbnRMYW5nIHx8IFRyYW5zbGF0ZVNlcnZpY2UuZGVmYXVsdExhbmcoKVxuICAgICk7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChnZXR0ZXh0KCdEZXZpY2UgbGFzdCByZXF1ZXN0Olxcbnt7ZGF0ZX19JyksIHsgZGF0ZSB9KTtcbiAgfSxcbiAgc2VuZFN0YXR1c0Rpc2Nvbm5lY3RlZDogZ2V0dGV4dCgnQ29ubmVjdGlvbiBub3QgbW9uaXRvcmVkJyksXG4gIHB1c2hTdGF0dXNDb25uZWN0ZWQ6IGdldHRleHQoJ0Nvbm5lY3Rpb24gdG8gZGV2aWNlIGVzdGFibGlzaGVkJyksXG4gIHB1c2hTdGF0dXNEaXNjb25uZWN0ZWQ6IGdldHRleHQoXG4gICAgJ0Nvbm5lY3Rpb24gdG8gZGV2aWNlIG5vdCBlc3RhYmxpc2hlZCAobm90IHN1cHBvcnRlZCBieSBkZXZpY2Ugb3Igbm8gY29ubmVjdGl2aXR5KSdcbiAgKSxcbiAgbWFpbnRlbmFuY2U6IGdldHRleHQoJ0RldmljZSBpcyB1bmRlciBtYWludGVuYW5jZScpXG59O1xuIl19