import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
import { NEVER } from 'rxjs';
import { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';
import { AppStateService } from '../common/ui-state.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i2 from "@c8y/ngx-components/api";
import * as i3 from "../common/ui-state.service";
/**
 * AssetTypesService is being used to manage a cache of all existing asset types.
 * This service is injected in the AssetOverviewNavigationFactory class, which will trigger
 * the initialization of the cache as the contstructor is called.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components/api';
import * as ɵngcc3 from '../common/ui-state.service';
export class AssetTypesService {
    constructor(inventory, apiService, appStateService) {
        this.inventory = inventory;
        this.apiService = apiService;
        this.appStateService = appStateService;
        this.ASSET_TYPE_GROUP_QUERY = {
            __filter: {
                __and: [{ __has: 'c8y_IsAssetType' }, { name: 'group' }]
            }
        };
        this.assetTypesCache = {};
        this.DEFAULT_GROUP_ICON = 'c8y-group';
        this.DEFAULT_GROUP_ICON_OPEN = 'c8y-group-open';
        this.appStateService.currentUser
            .pipe(map(user => user === null || user === void 0 ? void 0 : user.id), distinctUntilChanged(), switchMap(userId => {
            if (userId) {
                this.initAssetTypesCache();
                return this.subscribeForAssetTypeUpdates();
            }
            else {
                this.assetTypesCache = {};
                return NEVER;
            }
        }))
            .subscribe();
    }
    /**
     * Queries available asset types and adds every asset type to the local cache.
     * @returns void.
     */
    initAssetTypesCache() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.list({
                fragmentType: 'c8y_IsAssetType',
                withChildren: false,
                pageSize: 2000
            });
            data.forEach(assetType => this.addAssetType(assetType));
            return;
        });
    }
    /**
     * Returns an asset type from the cache based on the unique name property.
     * @param name Name of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeByName(name) {
        if (!this.assetTypesCache.hasOwnProperty(name)) {
            return undefined;
        }
        return this.assetTypesCache[name];
    }
    /**
     * Returns an asset type from the cache based on the id.
     * @param assetTypeId Id of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeById(assetTypeId) {
        if (!assetTypeId) {
            return;
        }
        return Object.values(this.assetTypesCache).find((assetType) => assetType.id === assetTypeId);
    }
    /**
     * Extracts an icon from an asset type.
     * @param type Type of the asset type.
     * @param open Determines whether the method should return an alternative icon showing the open state.
     * Defaults to false.
     * @returns Returns an icon for a given asset type.
     */
    getIcon(type, open = false) {
        var _a, _b;
        const assetType = this.getAssetTypeByName(type);
        const icon = ((_b = (_a = assetType === null || assetType === void 0 ? void 0 : assetType.c8y_IsAssetType) === null || _a === void 0 ? void 0 : _a.icon) === null || _b === void 0 ? void 0 : _b.name) || this.getDefaultGroupIcon(open);
        return icon;
    }
    getDefaultGroupIcon(open = false) {
        return open ? this.DEFAULT_GROUP_ICON_OPEN : this.DEFAULT_GROUP_ICON;
    }
    /**
     * Checks if the default asset type 'group' already exists and if it doesn't it will be created.
     * @returns void.
     */
    createAssetTypeGroupIfNotExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const managedObjects = (yield this.inventory.listQuery(this.ASSET_TYPE_GROUP_QUERY)).data;
            if (managedObjects.length > 0) {
                return;
            }
            // if default group asset type doesn't exit create it
            yield this.createDefaultAssetTypeGroup();
        });
    }
    /**
     * create the default asset type group in the Inventory.
     */
    createDefaultAssetTypeGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.inventory.create({
                label: 'Group',
                name: 'group',
                description: 'Default group asset type',
                c8y_IsAssetType: {
                    icon: 'folder',
                    propertyIds: [],
                    allowedAssetTypeIds: [],
                    isNoneChildAssetsAllowed: 'false'
                }
            });
        });
    }
    /**
     * Add an asset type to the local cache.
     * @param assetType Asset type which should be added to the cache.
     * @returns void.
     */
    addAssetType(assetType) {
        if (!assetType) {
            console.error('Asset type must not be null');
            return;
        }
        this.assetTypesCache[assetType.name] = assetType;
    }
    /**
     * Delete an asset type from the local cache based on the given asset type id.
     * @param assetTypeId Id of the asset type which should be deleted.
     * @returns void.
     */
    deleteAssetType(assetTypeId) {
        if (!assetTypeId) {
            console.error('Asset type ID must not be null');
            return;
        }
        const assetType = this.getAssetTypeById(assetTypeId);
        if (assetType) {
            delete this.assetTypesCache[assetType.name];
        }
    }
    /**
     * Update an asset type in the local cache.
     * @param assetType Asset type which should be updated in the cache.
     * @returns void.
     */
    updateAssetType(assetType) {
        if (!assetType) {
            console.error('Asset type must not be null');
            return;
        }
        const cachedAssetType = this.getAssetTypeById(assetType.id);
        if (cachedAssetType) {
            this.assetTypesCache[cachedAssetType.name] = Object.assign(cachedAssetType, assetType);
        }
    }
    /**
     * Subscribes to api PUT, POST and DELETE requests interceptor to update local asset types cache.
     * If a new asset type has been created it will be added to the local cache. If an asset
     * type has been deleted it will be removed from the local cache.
     */
    subscribeForAssetTypeUpdates() {
        return this.apiService
            .hookResponse(c => this.checkIfInventoryMoApiCall(c))
            .pipe(tap((call) => {
            var _a;
            if (!call && !call.method) {
                return;
            }
            const bodyToParse = (_a = call.options) === null || _a === void 0 ? void 0 : _a.body;
            if (bodyToParse) {
                try {
                    const mo = JSON.parse(bodyToParse);
                    if (call.method === 'DELETE') {
                        this.deleteAssetType(mo.id);
                        return;
                    }
                    if (!mo.hasOwnProperty('c8y_IsAssetType')) {
                        return;
                    }
                    if (call.method === 'PUT') {
                        this.updateAssetType(mo);
                        return;
                    }
                    this.addAssetType(mo);
                }
                catch (error) {
                    // do nothing
                }
            }
        }));
    }
    /**
     * Managed objects inventory api filter, allowing only PUT, POST and DELETE methods.
     * @param call Api call to filter.
     * @returns Returns true if api call meets the required criteria.
     */
    checkIfInventoryMoApiCall(call) {
        if (!call) {
            return false;
        }
        const hasRequiredMethod = call.method === 'POST' || call.method === 'DELETE' || call.method === 'PUT';
        const hasRequiredUrl = call.url.includes('managedObjects');
        return hasRequiredMethod && hasRequiredUrl;
    }
}
AssetTypesService.ɵfac = function AssetTypesService_Factory(t) { return new (t || AssetTypesService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.ApiService), ɵngcc0.ɵɵinject(ɵngcc3.AppStateService)); };
AssetTypesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetTypesService_Factory() { return new AssetTypesService(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i3.AppStateService)); }, token: AssetTypesService, providedIn: "root" });
AssetTypesService.ctorParameters = () => [
    { type: InventoryService },
    { type: ApiService },
    { type: AppStateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetTypesService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc2.ApiService }, { type: ɵngcc3.AppStateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,