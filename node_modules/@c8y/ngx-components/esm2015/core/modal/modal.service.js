import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import { ConfirmModalComponent } from './modal-confirm.component';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
/**
 * Service to show a modal.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
export class ModalService {
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     * @param confirmOptions Selection options to display as checkbox list.
     */
    confirm(title, body, status = Status.INFO, labels = {}, confirmOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = {
                ok: labels.ok || gettext('Confirm'),
                cancel: labels.cancel || gettext('Cancel')
            };
            const modalRef = this.modalService.show(ConfirmModalComponent, {
                initialState: { title, body, labels: modalLabels, status, confirmOptions },
                ignoreBackdropClick: true
            });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    acknowledge(title, body, status = Status.INFO, acknowledgeLabel = gettext('Confirm')) {
        return __awaiter(this, void 0, void 0, function* () {
            const labels = { ok: acknowledgeLabel, cancel: null };
            const modalRef = this.modalService.show(ConfirmModalComponent, {
                initialState: { title, body, labels, status },
                ignoreBackdropClick: true
            });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick logout confirmation modal.
     * @param body The text body to display. Default: 'You will be logged out to apply your changes. Do you want to proceed?'
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm and log out', cancel: 'Cancel' }
     */
    confirmLogout(body, status = Status.WARNING, labels = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = {
                ok: labels.ok || gettext('Confirm and log out'),
                cancel: labels.cancel || gettext('Cancel')
            };
            const modalBody = body || gettext('You must log out to apply your changes. Do you want to proceed?');
            return yield this.confirm(gettext('Logout required'), modalBody, status, modalLabels);
        });
    }
}
ModalService.ɵfac = function ModalService_Factory(t) { return new (t || ModalService)(ɵngcc0.ɵɵinject(ɵngcc1.BsModalService)); };
ModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1.BsModalService)); }, token: ModalService, providedIn: "root" });
ModalService.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModalService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.BsModalService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9tb2RhbC9tb2RhbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsTUFBTSxFQUFjLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxxQkFBcUIsRUFBa0IsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRjtBQUlBO0FBSEE7QUFDQTtBQUNBLEdBQUc7OztBQUlILE1BQU0sT0FBTyxZQUFZO0FBQ3pCLElBQUUsWUFBb0IsWUFBNEI7QUFBSSxRQUFoQyxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7QUFBQyxJQUFFLENBQUM7QUFDdEQsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREQ7QUFDTCxJQUFRLE9BQU8sQ0FDWCxLQUFhLEVBQ2IsSUFBWSxFQUNaLFNBQXFCLE1BQU0sQ0FBQyxJQUFJLEVBQ2hDLFNBQWMsRUFBRSxFQUNoQixpQkFBaUMsRUFBRTtBQUNwQztBQUU4QixZQUQ3QixNQUFNLFdBQVcsR0FBRztBQUN4QixnQkFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ3pDLGdCQUFNLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDaEQsYUFBSyxDQUFDO0FBQ04sWUFBSSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtBQUNuRSxnQkFBTSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRTtBQUNoRixnQkFBTSxtQkFBbUIsRUFBRSxJQUFJO0FBQy9CLGFBQUssQ0FBQyxDQUFDO0FBQ1AsWUFBSSxPQUFPLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDekMsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FEQztBQUNMLElBQVEsV0FBVyxDQUNmLEtBQWEsRUFDYixJQUFZLEVBQ1osU0FBcUIsTUFBTSxDQUFDLElBQUksRUFDaEMsbUJBQTJCLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDOUM7QUFFSCxZQURJLE1BQU0sTUFBTSxHQUFHLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUMxRCxZQUFJLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQ25FLGdCQUFNLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtBQUNuRCxnQkFBTSxtQkFBbUIsRUFBRSxJQUFJO0FBQy9CLGFBQUssQ0FBQyxDQUFDO0FBQ1AsWUFBSSxPQUFPLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDekMsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREc7QUFDTCxJQUFRLGFBQWEsQ0FBQyxJQUFhLEVBQUUsU0FBcUIsTUFBTSxDQUFDLE9BQU8sRUFBRSxTQUFjLEVBQUU7QUFDMUY7QUFDb0MsWUFEaEMsTUFBTSxXQUFXLEdBQUc7QUFDeEIsZ0JBQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQ3JELGdCQUFNLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDaEQsYUFBSyxDQUFDO0FBQ04sWUFBSSxNQUFNLFNBQVMsR0FDYixJQUFJLElBQUksT0FBTyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7QUFDekYsWUFBSSxPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzFGLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDtpSUFBQztBQUNELCtMQWxFSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUlJLFlBWlAsY0FBYztBQUFHO09BU3hCLFVBQVUsRUFBRSxNQUFNLGNBQ25COzs7OzsrRUFWMkI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBTdGF0dXMsIFN0YXR1c1R5cGUgfSBmcm9tICcuLi9jb21tb24vc3RhdHVzLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgQ29uZmlybU1vZGFsQ29tcG9uZW50LCBDb25maXJtT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwtY29uZmlybS5jb21wb25lbnQnO1xuXG4vKipcbiAqIFNlcnZpY2UgdG8gc2hvdyBhIG1vZGFsLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNb2RhbFNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgcXVpY2sgY29uZmlybSBtZXNzYWdlIG1vZGFsLlxuICAgKiBAcGFyYW0gdGl0bGUgVGhlIHRpdGxlIG9mIHRoYXQgbW9kYWwuXG4gICAqIEBwYXJhbSBib2R5IFRoZSB0ZXh0IGJvZHkgdG8gZGlzcGxheS5cbiAgICogQHBhcmFtIHN0YXR1cyBUaGUgc3RhdHVzLlxuICAgKiBAcGFyYW0gbGFiZWxzIFRoZSBsYWJlbHMgdG8gdXNlLiBEZWZhdWx0OiB7IG9rOiAnQ29uZmlybScsIGNhbmNlbDogJ0NhbmNlbCd9XG4gICAqIEBwYXJhbSBjb25maXJtT3B0aW9ucyBTZWxlY3Rpb24gb3B0aW9ucyB0byBkaXNwbGF5IGFzIGNoZWNrYm94IGxpc3QuXG4gICAqL1xuICBhc3luYyBjb25maXJtKFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgYm9keTogc3RyaW5nLFxuICAgIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5JTkZPLFxuICAgIGxhYmVsczogYW55ID0ge30sXG4gICAgY29uZmlybU9wdGlvbnM6IENvbmZpcm1PcHRpb25zID0ge31cbiAgKSB7XG4gICAgY29uc3QgbW9kYWxMYWJlbHMgPSB7XG4gICAgICBvazogbGFiZWxzLm9rIHx8IGdldHRleHQoJ0NvbmZpcm0nKSxcbiAgICAgIGNhbmNlbDogbGFiZWxzLmNhbmNlbCB8fCBnZXR0ZXh0KCdDYW5jZWwnKVxuICAgIH07XG4gICAgY29uc3QgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KENvbmZpcm1Nb2RhbENvbXBvbmVudCwge1xuICAgICAgaW5pdGlhbFN0YXRlOiB7IHRpdGxlLCBib2R5LCBsYWJlbHM6IG1vZGFsTGFiZWxzLCBzdGF0dXMsIGNvbmZpcm1PcHRpb25zIH0sXG4gICAgICBpZ25vcmVCYWNrZHJvcENsaWNrOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IG1vZGFsUmVmLmNvbnRlbnQucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgcXVpY2sgYWNrbm93bGVkZ2UgbWVzc2FnZSBtb2RhbC5cbiAgICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSBvZiB0aGF0IG1vZGFsLlxuICAgKiBAcGFyYW0gYm9keSBUaGUgdGV4dCBib2R5IHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSBzdGF0dXMgVGhlIHN0YXR1cy5cbiAgICogQHBhcmFtIGFja25vd2xlZGdlTGFiZWwgVGhlIGxhYmVsIHRvIHVzZS5cbiAgICovXG4gIGFzeW5jIGFja25vd2xlZGdlKFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgYm9keTogc3RyaW5nLFxuICAgIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5JTkZPLFxuICAgIGFja25vd2xlZGdlTGFiZWw6IHN0cmluZyA9IGdldHRleHQoJ0NvbmZpcm0nKVxuICApIHtcbiAgICBjb25zdCBsYWJlbHMgPSB7IG9rOiBhY2tub3dsZWRnZUxhYmVsLCBjYW5jZWw6IG51bGwgfTtcbiAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coQ29uZmlybU1vZGFsQ29tcG9uZW50LCB7XG4gICAgICBpbml0aWFsU3RhdGU6IHsgdGl0bGUsIGJvZHksIGxhYmVscywgc3RhdHVzIH0sXG4gICAgICBpZ25vcmVCYWNrZHJvcENsaWNrOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IG1vZGFsUmVmLmNvbnRlbnQucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgcXVpY2sgbG9nb3V0IGNvbmZpcm1hdGlvbiBtb2RhbC5cbiAgICogQHBhcmFtIGJvZHkgVGhlIHRleHQgYm9keSB0byBkaXNwbGF5LiBEZWZhdWx0OiAnWW91IHdpbGwgYmUgbG9nZ2VkIG91dCB0byBhcHBseSB5b3VyIGNoYW5nZXMuIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/J1xuICAgKiBAcGFyYW0gc3RhdHVzIFRoZSBzdGF0dXMuXG4gICAqIEBwYXJhbSBsYWJlbHMgVGhlIGxhYmVscyB0byB1c2UuIERlZmF1bHQ6IHsgb2s6ICdDb25maXJtIGFuZCBsb2cgb3V0JywgY2FuY2VsOiAnQ2FuY2VsJyB9XG4gICAqL1xuICBhc3luYyBjb25maXJtTG9nb3V0KGJvZHk/OiBzdHJpbmcsIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5XQVJOSU5HLCBsYWJlbHM6IGFueSA9IHt9KSB7XG4gICAgY29uc3QgbW9kYWxMYWJlbHMgPSB7XG4gICAgICBvazogbGFiZWxzLm9rIHx8IGdldHRleHQoJ0NvbmZpcm0gYW5kIGxvZyBvdXQnKSxcbiAgICAgIGNhbmNlbDogbGFiZWxzLmNhbmNlbCB8fCBnZXR0ZXh0KCdDYW5jZWwnKVxuICAgIH07XG4gICAgY29uc3QgbW9kYWxCb2R5ID1cbiAgICAgIGJvZHkgfHwgZ2V0dGV4dCgnWW91IG11c3QgbG9nIG91dCB0byBhcHBseSB5b3VyIGNoYW5nZXMuIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/Jyk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY29uZmlybShnZXR0ZXh0KCdMb2dvdXQgcmVxdWlyZWQnKSwgbW9kYWxCb2R5LCBzdGF0dXMsIG1vZGFsTGFiZWxzKTtcbiAgfVxufVxuIl19