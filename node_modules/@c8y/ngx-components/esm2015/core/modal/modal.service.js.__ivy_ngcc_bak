import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import { ConfirmModalComponent } from './modal-confirm.component';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
/**
 * Service to show a modal.
 */
export class ModalService {
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     * @param confirmOptions Selection options to display as checkbox list.
     */
    confirm(title, body, status = Status.INFO, labels = {}, confirmOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = {
                ok: labels.ok || gettext('Confirm'),
                cancel: labels.cancel || gettext('Cancel')
            };
            const modalRef = this.modalService.show(ConfirmModalComponent, {
                initialState: { title, body, labels: modalLabels, status, confirmOptions },
                ignoreBackdropClick: true
            });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    acknowledge(title, body, status = Status.INFO, acknowledgeLabel = gettext('Confirm')) {
        return __awaiter(this, void 0, void 0, function* () {
            const labels = { ok: acknowledgeLabel, cancel: null };
            const modalRef = this.modalService.show(ConfirmModalComponent, {
                initialState: { title, body, labels, status },
                ignoreBackdropClick: true
            });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick logout confirmation modal.
     * @param body The text body to display. Default: 'You will be logged out to apply your changes. Do you want to proceed?'
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm and log out', cancel: 'Cancel' }
     */
    confirmLogout(body, status = Status.WARNING, labels = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = {
                ok: labels.ok || gettext('Confirm and log out'),
                cancel: labels.cancel || gettext('Cancel')
            };
            const modalBody = body || gettext('You must log out to apply your changes. Do you want to proceed?');
            return yield this.confirm(gettext('Logout required'), modalBody, status, modalLabels);
        });
    }
}
ModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1.BsModalService)); }, token: ModalService, providedIn: "root" });
ModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ModalService.ctorParameters = () => [
    { type: BsModalService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbW9kYWwvbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBYyxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUscUJBQXFCLEVBQWtCLE1BQU0sMkJBQTJCLENBQUM7OztBQUVsRjs7R0FFRztBQUlILE1BQU0sT0FBTyxZQUFZO0lBQ3ZCLFlBQW9CLFlBQTRCO1FBQTVCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtJQUFHLENBQUM7SUFFcEQ7Ozs7Ozs7T0FPRztJQUNHLE9BQU8sQ0FDWCxLQUFhLEVBQ2IsSUFBWSxFQUNaLFNBQXFCLE1BQU0sQ0FBQyxJQUFJLEVBQ2hDLFNBQWMsRUFBRSxFQUNoQixpQkFBaUMsRUFBRTs7WUFFbkMsTUFBTSxXQUFXLEdBQUc7Z0JBQ2xCLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7Z0JBQ25DLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDM0MsQ0FBQztZQUNGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO2dCQUM3RCxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRTtnQkFDMUUsbUJBQW1CLEVBQUUsSUFBSTthQUMxQixDQUFDLENBQUM7WUFDSCxPQUFPLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDdkMsQ0FBQztLQUFBO0lBRUQ7Ozs7OztPQU1HO0lBQ0csV0FBVyxDQUNmLEtBQWEsRUFDYixJQUFZLEVBQ1osU0FBcUIsTUFBTSxDQUFDLElBQUksRUFDaEMsbUJBQTJCLE9BQU8sQ0FBQyxTQUFTLENBQUM7O1lBRTdDLE1BQU0sTUFBTSxHQUFHLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUN0RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtnQkFDN0QsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO2dCQUM3QyxtQkFBbUIsRUFBRSxJQUFJO2FBQzFCLENBQUMsQ0FBQztZQUNILE9BQU8sTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN2QyxDQUFDO0tBQUE7SUFFRDs7Ozs7T0FLRztJQUNHLGFBQWEsQ0FBQyxJQUFhLEVBQUUsU0FBcUIsTUFBTSxDQUFDLE9BQU8sRUFBRSxTQUFjLEVBQUU7O1lBQ3RGLE1BQU0sV0FBVyxHQUFHO2dCQUNsQixFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMscUJBQXFCLENBQUM7Z0JBQy9DLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDM0MsQ0FBQztZQUNGLE1BQU0sU0FBUyxHQUNiLElBQUksSUFBSSxPQUFPLENBQUMsaUVBQWlFLENBQUMsQ0FBQztZQUNyRixPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hGLENBQUM7S0FBQTs7OztZQW5FRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVZRLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgU3RhdHVzLCBTdGF0dXNUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IENvbmZpcm1Nb2RhbENvbXBvbmVudCwgQ29uZmlybU9wdGlvbnMgfSBmcm9tICcuL21vZGFsLWNvbmZpcm0uY29tcG9uZW50JztcblxuLyoqXG4gKiBTZXJ2aWNlIHRvIHNob3cgYSBtb2RhbC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBTaG93cyBhIHF1aWNrIGNvbmZpcm0gbWVzc2FnZSBtb2RhbC5cbiAgICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSBvZiB0aGF0IG1vZGFsLlxuICAgKiBAcGFyYW0gYm9keSBUaGUgdGV4dCBib2R5IHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSBzdGF0dXMgVGhlIHN0YXR1cy5cbiAgICogQHBhcmFtIGxhYmVscyBUaGUgbGFiZWxzIHRvIHVzZS4gRGVmYXVsdDogeyBvazogJ0NvbmZpcm0nLCBjYW5jZWw6ICdDYW5jZWwnfVxuICAgKiBAcGFyYW0gY29uZmlybU9wdGlvbnMgU2VsZWN0aW9uIG9wdGlvbnMgdG8gZGlzcGxheSBhcyBjaGVja2JveCBsaXN0LlxuICAgKi9cbiAgYXN5bmMgY29uZmlybShcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGJvZHk6IHN0cmluZyxcbiAgICBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTyxcbiAgICBsYWJlbHM6IGFueSA9IHt9LFxuICAgIGNvbmZpcm1PcHRpb25zOiBDb25maXJtT3B0aW9ucyA9IHt9XG4gICkge1xuICAgIGNvbnN0IG1vZGFsTGFiZWxzID0ge1xuICAgICAgb2s6IGxhYmVscy5vayB8fCBnZXR0ZXh0KCdDb25maXJtJyksXG4gICAgICBjYW5jZWw6IGxhYmVscy5jYW5jZWwgfHwgZ2V0dGV4dCgnQ2FuY2VsJylcbiAgICB9O1xuICAgIGNvbnN0IG1vZGFsUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhDb25maXJtTW9kYWxDb21wb25lbnQsIHtcbiAgICAgIGluaXRpYWxTdGF0ZTogeyB0aXRsZSwgYm9keSwgbGFiZWxzOiBtb2RhbExhYmVscywgc3RhdHVzLCBjb25maXJtT3B0aW9ucyB9LFxuICAgICAgaWdub3JlQmFja2Ryb3BDbGljazogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBtb2RhbFJlZi5jb250ZW50LnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyBhIHF1aWNrIGFja25vd2xlZGdlIG1lc3NhZ2UgbW9kYWwuXG4gICAqIEBwYXJhbSB0aXRsZSBUaGUgdGl0bGUgb2YgdGhhdCBtb2RhbC5cbiAgICogQHBhcmFtIGJvZHkgVGhlIHRleHQgYm9keSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0gc3RhdHVzIFRoZSBzdGF0dXMuXG4gICAqIEBwYXJhbSBhY2tub3dsZWRnZUxhYmVsIFRoZSBsYWJlbCB0byB1c2UuXG4gICAqL1xuICBhc3luYyBhY2tub3dsZWRnZShcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGJvZHk6IHN0cmluZyxcbiAgICBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTyxcbiAgICBhY2tub3dsZWRnZUxhYmVsOiBzdHJpbmcgPSBnZXR0ZXh0KCdDb25maXJtJylcbiAgKSB7XG4gICAgY29uc3QgbGFiZWxzID0geyBvazogYWNrbm93bGVkZ2VMYWJlbCwgY2FuY2VsOiBudWxsIH07XG4gICAgY29uc3QgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KENvbmZpcm1Nb2RhbENvbXBvbmVudCwge1xuICAgICAgaW5pdGlhbFN0YXRlOiB7IHRpdGxlLCBib2R5LCBsYWJlbHMsIHN0YXR1cyB9LFxuICAgICAgaWdub3JlQmFja2Ryb3BDbGljazogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBtb2RhbFJlZi5jb250ZW50LnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyBhIHF1aWNrIGxvZ291dCBjb25maXJtYXRpb24gbW9kYWwuXG4gICAqIEBwYXJhbSBib2R5IFRoZSB0ZXh0IGJvZHkgdG8gZGlzcGxheS4gRGVmYXVsdDogJ1lvdSB3aWxsIGJlIGxvZ2dlZCBvdXQgdG8gYXBwbHkgeW91ciBjaGFuZ2VzLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPydcbiAgICogQHBhcmFtIHN0YXR1cyBUaGUgc3RhdHVzLlxuICAgKiBAcGFyYW0gbGFiZWxzIFRoZSBsYWJlbHMgdG8gdXNlLiBEZWZhdWx0OiB7IG9rOiAnQ29uZmlybSBhbmQgbG9nIG91dCcsIGNhbmNlbDogJ0NhbmNlbCcgfVxuICAgKi9cbiAgYXN5bmMgY29uZmlybUxvZ291dChib2R5Pzogc3RyaW5nLCBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuV0FSTklORywgbGFiZWxzOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IG1vZGFsTGFiZWxzID0ge1xuICAgICAgb2s6IGxhYmVscy5vayB8fCBnZXR0ZXh0KCdDb25maXJtIGFuZCBsb2cgb3V0JyksXG4gICAgICBjYW5jZWw6IGxhYmVscy5jYW5jZWwgfHwgZ2V0dGV4dCgnQ2FuY2VsJylcbiAgICB9O1xuICAgIGNvbnN0IG1vZGFsQm9keSA9XG4gICAgICBib2R5IHx8IGdldHRleHQoJ1lvdSBtdXN0IGxvZyBvdXQgdG8gYXBwbHkgeW91ciBjaGFuZ2VzLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPycpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbmZpcm0oZ2V0dGV4dCgnTG9nb3V0IHJlcXVpcmVkJyksIG1vZGFsQm9keSwgc3RhdHVzLCBtb2RhbExhYmVscyk7XG4gIH1cbn1cbiJdfQ==