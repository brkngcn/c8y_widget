import { Component, Input } from '@angular/core';
import { isEmpty, mapValues } from 'lodash-es';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { Status, statusAlert, statusIcons } from '../common/status.model';
export class ConfirmModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.status = Status.INFO;
        this._labels = {
            ok: 'OK',
            cancel: 'Cancel'
        };
        this.result = new Promise((resolve, reject) => {
            this.dismiss = () => {
                reject();
                this.modal.hide();
            };
            this.close = () => {
                resolve(isEmpty(this.confirmOptions)
                    ? true
                    : {
                        confirmed: true,
                        confirmOptions: mapValues(this.confirmOptions, option => option.checked)
                    });
                this.modal.hide();
            };
        });
    }
    set labels(labels) {
        const { ok = 'OK', cancel = 'Cancel' } = labels || {};
        this._labels = { ok, cancel };
    }
    get labels() {
        return this._labels;
    }
    get classIcon() {
        return `dlt-c8y-icon-${statusIcons[this.status]}`;
    }
    get classAlert() {
        return statusAlert[this.status];
    }
    ngOnDestroy() {
        this.dismiss();
    }
}
ConfirmModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-confirm-modal',
                template: "<div class=\"c8y-prompt alert\" [ngClass]=\"[classAlert]\">\n  <h3 class=\"m-b-16 d-flex a-i-center\" *ngIf=\"title\">\n    <i class=\"dlt-c8y-icon\" [ngClass]=\"[classIcon]\"></i>\n    <span *ngIf=\"title\">{{ title | translate }}</span>\n  </h3>\n  <p class=\"text-break-word m-b-16\">{{ body | translate }}</p>\n  <div\n    class=\"c8y-checkbox plain m-b-8\"\n    *ngFor=\"let co of confirmOptions | showIfFilter | async | keyvalue\"\n  >\n    <label [title]=\"co.value.text | translate\" class=\"c8y-checkbox\">\n      <input\n        type=\"checkbox\"\n        [checked]=\"co.value.checked\"\n        (change)=\"co.value.checked = !co.value.checked\"\n        [disabled]=\"confirmOptions[co.value.disabledByKey]?.checked\"\n      />\n      <span></span>\n      <span class=\"text-muted\">{{ co.value.text | translate }}</span>\n    </label>\n  </div>\n  <ng-content></ng-content>\n  <div class=\"alert-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      *ngIf=\"labels.cancel !== null\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      (click)=\"close()\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
            },] }
];
ConfirmModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
ConfirmModalComponent.propDecorators = {
    title: [{ type: Input }],
    body: [{ type: Input }],
    confirmOptions: [{ type: Input }],
    status: [{ type: Input }],
    labels: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL21vZGFsL21vZGFsLWNvbmZpcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQWMsTUFBTSx3QkFBd0IsQ0FBQztBQStCdEYsTUFBTSxPQUFPLHFCQUFxQjtJQWtCaEMsWUFBb0IsS0FBaUI7UUFBakIsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQVg1QixXQUFNLEdBQWUsTUFBTSxDQUFDLElBQUksQ0FBQztRQVl4QyxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsRUFBRSxFQUFFLElBQUk7WUFDUixNQUFNLEVBQUUsUUFBUTtTQUNqQixDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtnQkFDbEIsTUFBTSxFQUFFLENBQUM7Z0JBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixDQUFDLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRTtnQkFDaEIsT0FBTyxDQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO29CQUMxQixDQUFDLENBQUMsSUFBSTtvQkFDTixDQUFDLENBQUM7d0JBQ0UsU0FBUyxFQUFFLElBQUk7d0JBQ2YsY0FBYyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztxQkFDekUsQ0FDTixDQUFDO2dCQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEIsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBaENELElBQWEsTUFBTSxDQUFDLE1BQW1CO1FBQ3JDLE1BQU0sRUFBRSxFQUFFLEdBQUcsSUFBSSxFQUFFLE1BQU0sR0FBRyxRQUFRLEVBQUUsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBMkJELElBQUksU0FBUztRQUNYLE9BQU8sZ0JBQWdCLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7OztZQXhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsazNDQUE2QzthQUM5Qzs7O1lBaENRLFVBQVU7OztvQkFxQ2hCLEtBQUs7bUJBQ0wsS0FBSzs2QkFDTCxLQUFLO3FCQUNMLEtBQUs7cUJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNFbXB0eSwgbWFwVmFsdWVzIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN0YXR1cywgc3RhdHVzQWxlcnQsIHN0YXR1c0ljb25zLCBTdGF0dXNUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBNb2RhbExhYmVscyB9IGZyb20gJy4uL3NlbGVjdC1tb2RhbC9zZWxlY3QtbW9kYWwubW9kZWwnO1xuXG4vKipcbiAqIExhYmVscyB0byBiZSB1c2VkIGluIHRoZSBzZWxlY3Rpb24gbW9kYWwuXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGdvaW5nIHRvIGJlIHJlbW92ZWQgYWZ0ZXIgMTAwNy43LjAuIFVzZSBNb2RhbExhYmVscyBpbnN0ZWFkLlxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWVtcHR5LWludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBJTGFiZWxzIGV4dGVuZHMgTW9kYWxMYWJlbHMge31cblxuLyoqXG4gKiBEZWZpbmVzIG9wdGlvbnMgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBjb25maXJtIGRpYWxvZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb25maXJtT3B0aW9ucyB7XG4gIFtrZXk6IHN0cmluZ106IENvbmZpcm1PcHRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlybU9wdGlvbiB7XG4gIHRleHQ6IHN0cmluZztcbiAgY2hlY2tlZD86IGJvb2xlYW47XG4gIHNob3dJZj86IGJvb2xlYW4gfCAoKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4gfCBPYnNlcnZhYmxlPGJvb2xlYW4+KTtcbiAgLyoqXG4gICAqIFdpbGwgZGlzYWJsZSB0aGUgY3VycmVudCBvcHRpb24gd2hlbiBhbiBvcHRpb24gd2l0aCB0aGUgZ2l2ZW4ga2V5IGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgZGlzYWJsZWRCeUtleT86IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWNvbmZpcm0tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vbW9kYWwtY29uZmlybS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ29uZmlybU1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcmVzdWx0OiBQcm9taXNlPGJvb2xlYW4gfCB7IGNvbmZpcm1lZDogYm9vbGVhbjsgY29uZmlybU9wdGlvbnM6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IH0+O1xuICBkaXNtaXNzOiAoKSA9PiB2b2lkO1xuICBjbG9zZTogKCkgPT4gdm9pZDtcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgYm9keTogc3RyaW5nO1xuICBASW5wdXQoKSBjb25maXJtT3B0aW9uczogQ29uZmlybU9wdGlvbnM7XG4gIEBJbnB1dCgpIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5JTkZPO1xuICBASW5wdXQoKSBzZXQgbGFiZWxzKGxhYmVsczogTW9kYWxMYWJlbHMpIHtcbiAgICBjb25zdCB7IG9rID0gJ09LJywgY2FuY2VsID0gJ0NhbmNlbCcgfSA9IGxhYmVscyB8fCB7fTtcbiAgICB0aGlzLl9sYWJlbHMgPSB7IG9rLCBjYW5jZWwgfTtcbiAgfVxuXG4gIGdldCBsYWJlbHMoKTogTW9kYWxMYWJlbHMge1xuICAgIHJldHVybiB0aGlzLl9sYWJlbHM7XG4gIH1cblxuICBwcml2YXRlIF9sYWJlbHM6IE1vZGFsTGFiZWxzO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsOiBCc01vZGFsUmVmKSB7XG4gICAgdGhpcy5fbGFiZWxzID0ge1xuICAgICAgb2s6ICdPSycsXG4gICAgICBjYW5jZWw6ICdDYW5jZWwnXG4gICAgfTtcbiAgICB0aGlzLnJlc3VsdCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZGlzbWlzcyA9ICgpID0+IHtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIHRoaXMubW9kYWwuaGlkZSgpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgaXNFbXB0eSh0aGlzLmNvbmZpcm1PcHRpb25zKVxuICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICBjb25maXJtZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlybU9wdGlvbnM6IG1hcFZhbHVlcyh0aGlzLmNvbmZpcm1PcHRpb25zLCBvcHRpb24gPT4gb3B0aW9uLmNoZWNrZWQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb2RhbC5oaWRlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGNsYXNzSWNvbigpIHtcbiAgICByZXR1cm4gYGRsdC1jOHktaWNvbi0ke3N0YXR1c0ljb25zW3RoaXMuc3RhdHVzXX1gO1xuICB9XG5cbiAgZ2V0IGNsYXNzQWxlcnQoKSB7XG4gICAgcmV0dXJuIHN0YXR1c0FsZXJ0W3RoaXMuc3RhdHVzXTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGlzbWlzcygpO1xuICB9XG59XG4iXX0=