import { coerceNumberProperty } from '@angular/cdk/coercion';
import { BehaviorSubject, NEVER } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
/**
 * A wrapper class for handling realtime notifications in RxJS fashion.
 */
export class RealtimeService {
    constructor(realtimeSubject) {
        this.realtimeSubject = realtimeSubject;
        this.isActive = new BehaviorSubject(true);
    }
    /**
     * A flag displaying if realtime notifications are currently active.
     */
    get active() {
        return this.isActive.value;
    }
    /**
     * Get an Observable of all realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of notifications wrapped as [[RealtimeMessage]]
     */
    onAll$(entityOrId) {
        const subject$ = this.realtimeSubject.getObservableForChannel(this.getChannel(entityOrId));
        return this.isActive.pipe(switchMap(active => (active ? subject$ : NEVER)));
    }
    /**
     * Subscribes again all realtime channels with active observers.
     */
    start() {
        if (!this.active) {
            this.isActive.next(true);
        }
    }
    /**
     * Stops realtime notifications and unsubscribes all realtime channels.
     */
    stop() {
        if (this.active) {
            this.isActive.next(false);
        }
    }
    /**
     * Get an Observable of all CREATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    onCreate$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'CREATE'), map(msg => msg.data));
    }
    /**
     * Get an Observable of all UPDATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of updated entity objects.
     */
    onUpdate$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'UPDATE'), map(msg => msg.data));
    }
    /**
     * Get an Observable of all DELETE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of deleted entity objects.
     */
    onDelete$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'DELETE'), map(msg => coerceNumberProperty(msg.data)));
    }
    getIdString(reference) {
        let id;
        if (typeof reference === 'object') {
            id = reference.id;
        }
        else {
            id = reference;
        }
        return String(id);
    }
    getChannel(entityOrId) {
        return entityOrId ? this.channel().replace('*', this.getIdString(entityOrId)) : this.channel();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhbHRpbWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcmVhbHRpbWUvcmVhbHRpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUU3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUl4RDs7R0FFRztBQUNILE1BQU0sT0FBZ0IsZUFBZTtJQVVuQyxZQUFzQixlQUF1QztRQUF2QyxvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7UUFGckQsYUFBUSxHQUFHLElBQUksZUFBZSxDQUFVLElBQUksQ0FBQyxDQUFDO0lBRVUsQ0FBQztJQVRqRTs7T0FFRztJQUNILElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQU1EOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxVQUEwQztRQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUU5RixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJO1FBQ0YsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsU0FBUyxDQUFDLFVBQTBDO1FBQ2xELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQ2pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEtBQUssUUFBUSxDQUFDLEVBQzlDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFTLENBQUMsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxTQUFTLENBQUMsVUFBMEM7UUFDbEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDakMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxRQUFRLENBQUMsRUFDOUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQVMsQ0FBQyxDQUMxQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILFNBQVMsQ0FBQyxVQUEwQztRQUNsRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxLQUFLLFFBQVEsQ0FBQyxFQUM5QyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDM0MsQ0FBQztJQUNKLENBQUM7SUFFUyxXQUFXLENBQUMsU0FBd0M7UUFDNUQsSUFBSSxFQUFtQixDQUFDO1FBQ3hCLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDO1NBQ25CO2FBQU07WUFDTCxFQUFFLEdBQUcsU0FBUyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVTLFVBQVUsQ0FBQyxVQUEwQztRQUM3RCxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakcsQ0FBQztDQUdGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgSUlkZW50aWZpZWQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE5FVkVSLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVhbHRpbWVTdWJqZWN0U2VydmljZSB9IGZyb20gJy4vcmVhbHRpbWUtc3ViamVjdC5zZXJ2aWNlJztcbmltcG9ydCB7IFJlYWx0aW1lTWVzc2FnZSB9IGZyb20gJy4vcmVhbHRpbWUubW9kZWwnO1xuXG4vKipcbiAqIEEgd3JhcHBlciBjbGFzcyBmb3IgaGFuZGxpbmcgcmVhbHRpbWUgbm90aWZpY2F0aW9ucyBpbiBSeEpTIGZhc2hpb24uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZWFsdGltZVNlcnZpY2U8VD4ge1xuICAvKipcbiAgICogQSBmbGFnIGRpc3BsYXlpbmcgaWYgcmVhbHRpbWUgbm90aWZpY2F0aW9ucyBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGdldCBhY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNBY3RpdmUudmFsdWU7XG4gIH1cblxuICBwcml2YXRlIGlzQWN0aXZlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPih0cnVlKTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhbHRpbWVTdWJqZWN0OiBSZWFsdGltZVN1YmplY3RTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gT2JzZXJ2YWJsZSBvZiBhbGwgcmVhbHRpbWUgbm90aWZpY2F0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBJSWRlbnRpZmllZH0gZW50aXR5T3JJZCBFbnRpdHkgb2JqZWN0IG9yIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIFtbT2JzZXJ2YWJsZV1dIG9mIG5vdGlmaWNhdGlvbnMgd3JhcHBlZCBhcyBbW1JlYWx0aW1lTWVzc2FnZV1dXG4gICAqL1xuICBvbkFsbCQoZW50aXR5T3JJZD86IHN0cmluZyB8IG51bWJlciB8IElJZGVudGlmaWVkKTogT2JzZXJ2YWJsZTxSZWFsdGltZU1lc3NhZ2U8VD4+IHtcbiAgICBjb25zdCBzdWJqZWN0JCA9IHRoaXMucmVhbHRpbWVTdWJqZWN0LmdldE9ic2VydmFibGVGb3JDaGFubmVsPFQ+KHRoaXMuZ2V0Q2hhbm5lbChlbnRpdHlPcklkKSk7XG5cbiAgICByZXR1cm4gdGhpcy5pc0FjdGl2ZS5waXBlKHN3aXRjaE1hcChhY3RpdmUgPT4gKGFjdGl2ZSA/IHN1YmplY3QkIDogTkVWRVIpKSk7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyBhZ2FpbiBhbGwgcmVhbHRpbWUgY2hhbm5lbHMgd2l0aCBhY3RpdmUgb2JzZXJ2ZXJzLlxuICAgKi9cbiAgc3RhcnQoKSB7XG4gICAgaWYgKCF0aGlzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5pc0FjdGl2ZS5uZXh0KHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyByZWFsdGltZSBub3RpZmljYXRpb25zIGFuZCB1bnN1YnNjcmliZXMgYWxsIHJlYWx0aW1lIGNoYW5uZWxzLlxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIHRoaXMuaXNBY3RpdmUubmV4dChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBPYnNlcnZhYmxlIG9mIGFsbCBDUkVBVEUgcmVhbHRpbWUgbm90aWZpY2F0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBJSWRlbnRpZmllZH0gZW50aXR5T3JJZCBFbnRpdHkgb2JqZWN0IG9yIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIFtbT2JzZXJ2YWJsZV1dIG9mIG5ld2x5IGNyZWF0ZWQgZW50aXR5IG9iamVjdHMuXG4gICAqL1xuICBvbkNyZWF0ZSQoZW50aXR5T3JJZD86IHN0cmluZyB8IG51bWJlciB8IElJZGVudGlmaWVkKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgcmV0dXJuIHRoaXMub25BbGwkKGVudGl0eU9ySWQpLnBpcGUoXG4gICAgICBmaWx0ZXIobXNnID0+IG1zZy5yZWFsdGltZUFjdGlvbiA9PT0gJ0NSRUFURScpLFxuICAgICAgbWFwKG1zZyA9PiBtc2cuZGF0YSBhcyBUKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIE9ic2VydmFibGUgb2YgYWxsIFVQREFURSByZWFsdGltZSBub3RpZmljYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IElJZGVudGlmaWVkfSBlbnRpdHlPcklkIEVudGl0eSBvYmplY3Qgb3IgaWRcbiAgICpcbiAgICogQHJldHVybnMgQW4gW1tPYnNlcnZhYmxlXV0gb2YgdXBkYXRlZCBlbnRpdHkgb2JqZWN0cy5cbiAgICovXG4gIG9uVXBkYXRlJChlbnRpdHlPcklkPzogc3RyaW5nIHwgbnVtYmVyIHwgSUlkZW50aWZpZWQpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5vbkFsbCQoZW50aXR5T3JJZCkucGlwZShcbiAgICAgIGZpbHRlcihtc2cgPT4gbXNnLnJlYWx0aW1lQWN0aW9uID09PSAnVVBEQVRFJyksXG4gICAgICBtYXAobXNnID0+IG1zZy5kYXRhIGFzIFQpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gT2JzZXJ2YWJsZSBvZiBhbGwgREVMRVRFIHJlYWx0aW1lIG5vdGlmaWNhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgSUlkZW50aWZpZWR9IGVudGl0eU9ySWQgRW50aXR5IG9iamVjdCBvciBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBBbiBbW09ic2VydmFibGVdXSBvZiBkZWxldGVkIGVudGl0eSBvYmplY3RzLlxuICAgKi9cbiAgb25EZWxldGUkKGVudGl0eU9ySWQ/OiBzdHJpbmcgfCBudW1iZXIgfCBJSWRlbnRpZmllZCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMub25BbGwkKGVudGl0eU9ySWQpLnBpcGUoXG4gICAgICBmaWx0ZXIobXNnID0+IG1zZy5yZWFsdGltZUFjdGlvbiA9PT0gJ0RFTEVURScpLFxuICAgICAgbWFwKG1zZyA9PiBjb2VyY2VOdW1iZXJQcm9wZXJ0eShtc2cuZGF0YSkpXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRJZFN0cmluZyhyZWZlcmVuY2U6IG51bWJlciB8IHN0cmluZyB8IElJZGVudGlmaWVkKTogc3RyaW5nIHtcbiAgICBsZXQgaWQ6IHN0cmluZyB8IG51bWJlcjtcbiAgICBpZiAodHlwZW9mIHJlZmVyZW5jZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlkID0gcmVmZXJlbmNlLmlkO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IHJlZmVyZW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhpZCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0Q2hhbm5lbChlbnRpdHlPcklkPzogc3RyaW5nIHwgbnVtYmVyIHwgSUlkZW50aWZpZWQpIHtcbiAgICByZXR1cm4gZW50aXR5T3JJZCA/IHRoaXMuY2hhbm5lbCgpLnJlcGxhY2UoJyonLCB0aGlzLmdldElkU3RyaW5nKGVudGl0eU9ySWQpKSA6IHRoaXMuY2hhbm5lbCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNoYW5uZWwoKTogc3RyaW5nO1xufVxuIl19