import { Injectable } from '@angular/core';
import { Realtime } from '@c8y/client';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/realtime/Realtime";
/**
 * Service (providedIn root) that ensures to only create a single realtime subscription for each channel
 */
export class RealtimeSubjectService {
    constructor(realtime) {
        this.realtime = realtime;
        this.subjects$ = new Map();
    }
    getObservableForChannel(channel) {
        if (this.subjects$.has(channel)) {
            return this.subjects$.get(channel);
        }
        const observable$ = this.createObservableForChannel(channel, this.realtime);
        const sharedObservable$ = observable$.pipe(share());
        this.subjects$.set(channel, sharedObservable$);
        return sharedObservable$;
    }
    createObservableForChannel(channel, realtime) {
        return new Observable(observer => {
            const realtimeSubscription = realtime.subscribe(channel, msg => {
                const data = {
                    channel: msg.channel,
                    data: msg.data.data,
                    id: msg.id,
                    realtimeAction: msg.data.realtimeAction
                };
                observer.next(data);
            });
            return {
                unsubscribe() {
                    realtime.unsubscribe(realtimeSubscription);
                }
            };
        });
    }
}
RealtimeSubjectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RealtimeSubjectService_Factory() { return new RealtimeSubjectService(i0.ɵɵinject(i1.Realtime)); }, token: RealtimeSubjectService, providedIn: "root" });
RealtimeSubjectService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
RealtimeSubjectService.ctorParameters = () => [
    { type: Realtime }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhbHRpbWUtc3ViamVjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9yZWFsdGltZS9yZWFsdGltZS1zdWJqZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFHdkM7O0dBRUc7QUFFSCxNQUFNLE9BQU8sc0JBQXNCO0lBR2pDLFlBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFGaEMsY0FBUyxHQUFHLElBQUksR0FBRyxFQUFnRCxDQUFDO0lBRWpDLENBQUM7SUFFNUMsdUJBQXVCLENBQUksT0FBZTtRQUN4QyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFtQyxDQUFDO1NBQ3RFO1FBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFJLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0UsTUFBTSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFFL0MsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDO0lBRVMsMEJBQTBCLENBQ2xDLE9BQWUsRUFDZixRQUFrQjtRQUVsQixPQUFPLElBQUksVUFBVSxDQUFxQixRQUFRLENBQUMsRUFBRTtZQUNuRCxNQUFNLG9CQUFvQixHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUM3RCxNQUFNLElBQUksR0FBdUI7b0JBQy9CLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztvQkFDcEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSTtvQkFDbkIsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFO29CQUNWLGNBQWMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWM7aUJBQ3hDLENBQUM7Z0JBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztZQUNILE9BQU87Z0JBQ0wsV0FBVztvQkFDVCxRQUFRLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQzdDLENBQUM7YUFDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7O1lBckNGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQVJ6QixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhbHRpbWUgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJlYWx0aW1lTWVzc2FnZSB9IGZyb20gJy4vcmVhbHRpbWUubW9kZWwnO1xuXG4vKipcbiAqIFNlcnZpY2UgKHByb3ZpZGVkSW4gcm9vdCkgdGhhdCBlbnN1cmVzIHRvIG9ubHkgY3JlYXRlIGEgc2luZ2xlIHJlYWx0aW1lIHN1YnNjcmlwdGlvbiBmb3IgZWFjaCBjaGFubmVsXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUmVhbHRpbWVTdWJqZWN0U2VydmljZSB7XG4gIHByaXZhdGUgc3ViamVjdHMkID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8UmVhbHRpbWVNZXNzYWdlPHVua25vd24+Pj4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhbHRpbWU6IFJlYWx0aW1lKSB7fVxuXG4gIGdldE9ic2VydmFibGVGb3JDaGFubmVsPFQ+KGNoYW5uZWw6IHN0cmluZyk6IE9ic2VydmFibGU8UmVhbHRpbWVNZXNzYWdlPFQ+PiB7XG4gICAgaWYgKHRoaXMuc3ViamVjdHMkLmhhcyhjaGFubmVsKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3ViamVjdHMkLmdldChjaGFubmVsKSBhcyBPYnNlcnZhYmxlPFJlYWx0aW1lTWVzc2FnZTxUPj47XG4gICAgfVxuICAgIGNvbnN0IG9ic2VydmFibGUkID0gdGhpcy5jcmVhdGVPYnNlcnZhYmxlRm9yQ2hhbm5lbDxUPihjaGFubmVsLCB0aGlzLnJlYWx0aW1lKTtcbiAgICBjb25zdCBzaGFyZWRPYnNlcnZhYmxlJCA9IG9ic2VydmFibGUkLnBpcGUoc2hhcmUoKSk7XG4gICAgdGhpcy5zdWJqZWN0cyQuc2V0KGNoYW5uZWwsIHNoYXJlZE9ic2VydmFibGUkKTtcblxuICAgIHJldHVybiBzaGFyZWRPYnNlcnZhYmxlJDtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVPYnNlcnZhYmxlRm9yQ2hhbm5lbDxUPihcbiAgICBjaGFubmVsOiBzdHJpbmcsXG4gICAgcmVhbHRpbWU6IFJlYWx0aW1lXG4gICk6IE9ic2VydmFibGU8UmVhbHRpbWVNZXNzYWdlPFQ+PiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFJlYWx0aW1lTWVzc2FnZTxUPj4ob2JzZXJ2ZXIgPT4ge1xuICAgICAgY29uc3QgcmVhbHRpbWVTdWJzY3JpcHRpb24gPSByZWFsdGltZS5zdWJzY3JpYmUoY2hhbm5lbCwgbXNnID0+IHtcbiAgICAgICAgY29uc3QgZGF0YTogUmVhbHRpbWVNZXNzYWdlPFQ+ID0ge1xuICAgICAgICAgIGNoYW5uZWw6IG1zZy5jaGFubmVsLFxuICAgICAgICAgIGRhdGE6IG1zZy5kYXRhLmRhdGEsXG4gICAgICAgICAgaWQ6IG1zZy5pZCxcbiAgICAgICAgICByZWFsdGltZUFjdGlvbjogbXNnLmRhdGEucmVhbHRpbWVBY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgcmVhbHRpbWUudW5zdWJzY3JpYmUocmVhbHRpbWVTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4iXX0=