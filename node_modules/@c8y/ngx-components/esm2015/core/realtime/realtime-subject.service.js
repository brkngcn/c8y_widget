import { Injectable } from '@angular/core';
import { Realtime } from '@c8y/client';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/realtime/Realtime";
/**
 * Service (providedIn root) that ensures to only create a single realtime subscription for each channel
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class RealtimeSubjectService {
    constructor(realtime) {
        this.realtime = realtime;
        this.subjects$ = new Map();
    }
    getObservableForChannel(channel) {
        if (this.subjects$.has(channel)) {
            return this.subjects$.get(channel);
        }
        const observable$ = this.createObservableForChannel(channel, this.realtime);
        const sharedObservable$ = observable$.pipe(share());
        this.subjects$.set(channel, sharedObservable$);
        return sharedObservable$;
    }
    createObservableForChannel(channel, realtime) {
        return new Observable(observer => {
            const realtimeSubscription = realtime.subscribe(channel, msg => {
                const data = {
                    channel: msg.channel,
                    data: msg.data.data,
                    id: msg.id,
                    realtimeAction: msg.data.realtimeAction
                };
                observer.next(data);
            });
            return {
                unsubscribe() {
                    realtime.unsubscribe(realtimeSubscription);
                }
            };
        });
    }
}
RealtimeSubjectService.ɵfac = function RealtimeSubjectService_Factory(t) { return new (t || RealtimeSubjectService)(ɵngcc0.ɵɵinject(ɵngcc1.Realtime)); };
RealtimeSubjectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RealtimeSubjectService_Factory() { return new RealtimeSubjectService(i0.ɵɵinject(i1.Realtime)); }, token: RealtimeSubjectService, providedIn: "root" });
RealtimeSubjectService.ctorParameters = () => [
    { type: Realtime }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RealtimeSubjectService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.Realtime }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhbHRpbWUtc3ViamVjdC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3JlYWx0aW1lL3JlYWx0aW1lLXN1YmplY3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkM7QUFBcUM7QUFFckM7QUFDQTtBQUNBLEdBQUc7OztBQUVILE1BQU0sT0FBTyxzQkFBc0I7QUFDbkMsSUFFRSxZQUFzQixRQUFrQjtBQUFJLFFBQXRCLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBQyxRQUZqQyxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWdELENBQUM7QUFDOUUsSUFDNkMsQ0FBQztBQUM5QyxJQUNFLHVCQUF1QixDQUFJLE9BQWU7QUFBSSxRQUM1QyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3JDLFlBQU0sT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQW1DLENBQUM7QUFDM0UsU0FBSztBQUNMLFFBQUksTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFJLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkYsUUFBSSxNQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUN4RCxRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ25ELFFBQ0ksT0FBTyxpQkFBaUIsQ0FBQztBQUM3QixJQUFFLENBQUM7QUFDSCxJQUNZLDBCQUEwQixDQUNsQyxPQUFlLEVBQ2YsUUFBa0I7QUFDbkIsUUFDQyxPQUFPLElBQUksVUFBVSxDQUFxQixRQUFRLENBQUMsRUFBRTtBQUN6RCxZQUFNLE1BQU0sb0JBQW9CLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDckUsZ0JBQVEsTUFBTSxJQUFJLEdBQXVCO0FBQ3pDLG9CQUFVLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztBQUM5QixvQkFBVSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJO0FBQzdCLG9CQUFVLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRTtBQUNwQixvQkFBVSxjQUFjLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjO0FBQ2pELGlCQUFTLENBQUM7QUFDVixnQkFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLFlBQU0sQ0FBQyxDQUFDLENBQUM7QUFDVCxZQUFNLE9BQU87QUFDYixnQkFBUSxXQUFXO0FBQ25CLG9CQUFVLFFBQVEsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNyRCxnQkFBUSxDQUFDO0FBQ1QsYUFBTyxDQUFDO0FBQ1IsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNIO3lKQUFDO0FBQ0QsaU9BdENLO0FBQUM7RUFETCxVQUFVLFNBQUMsckJBRUksWUFWUCxRQUFRO0FBUUgsQUFSTTtPQVFJLEVBQUUsTUFBTSxFQUFFOzs7eUVBUlo7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlYWx0aW1lIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2hhcmUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZWFsdGltZU1lc3NhZ2UgfSBmcm9tICcuL3JlYWx0aW1lLm1vZGVsJztcblxuLyoqXG4gKiBTZXJ2aWNlIChwcm92aWRlZEluIHJvb3QpIHRoYXQgZW5zdXJlcyB0byBvbmx5IGNyZWF0ZSBhIHNpbmdsZSByZWFsdGltZSBzdWJzY3JpcHRpb24gZm9yIGVhY2ggY2hhbm5lbFxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFJlYWx0aW1lU3ViamVjdFNlcnZpY2Uge1xuICBwcml2YXRlIHN1YmplY3RzJCA9IG5ldyBNYXA8c3RyaW5nLCBPYnNlcnZhYmxlPFJlYWx0aW1lTWVzc2FnZTx1bmtub3duPj4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJlYWx0aW1lOiBSZWFsdGltZSkge31cblxuICBnZXRPYnNlcnZhYmxlRm9yQ2hhbm5lbDxUPihjaGFubmVsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFJlYWx0aW1lTWVzc2FnZTxUPj4ge1xuICAgIGlmICh0aGlzLnN1YmplY3RzJC5oYXMoY2hhbm5lbCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1YmplY3RzJC5nZXQoY2hhbm5lbCkgYXMgT2JzZXJ2YWJsZTxSZWFsdGltZU1lc3NhZ2U8VD4+O1xuICAgIH1cbiAgICBjb25zdCBvYnNlcnZhYmxlJCA9IHRoaXMuY3JlYXRlT2JzZXJ2YWJsZUZvckNoYW5uZWw8VD4oY2hhbm5lbCwgdGhpcy5yZWFsdGltZSk7XG4gICAgY29uc3Qgc2hhcmVkT2JzZXJ2YWJsZSQgPSBvYnNlcnZhYmxlJC5waXBlKHNoYXJlKCkpO1xuICAgIHRoaXMuc3ViamVjdHMkLnNldChjaGFubmVsLCBzaGFyZWRPYnNlcnZhYmxlJCk7XG5cbiAgICByZXR1cm4gc2hhcmVkT2JzZXJ2YWJsZSQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlT2JzZXJ2YWJsZUZvckNoYW5uZWw8VD4oXG4gICAgY2hhbm5lbDogc3RyaW5nLFxuICAgIHJlYWx0aW1lOiBSZWFsdGltZVxuICApOiBPYnNlcnZhYmxlPFJlYWx0aW1lTWVzc2FnZTxUPj4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxSZWFsdGltZU1lc3NhZ2U8VD4+KG9ic2VydmVyID0+IHtcbiAgICAgIGNvbnN0IHJlYWx0aW1lU3Vic2NyaXB0aW9uID0gcmVhbHRpbWUuc3Vic2NyaWJlKGNoYW5uZWwsIG1zZyA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGE6IFJlYWx0aW1lTWVzc2FnZTxUPiA9IHtcbiAgICAgICAgICBjaGFubmVsOiBtc2cuY2hhbm5lbCxcbiAgICAgICAgICBkYXRhOiBtc2cuZGF0YS5kYXRhLFxuICAgICAgICAgIGlkOiBtc2cuaWQsXG4gICAgICAgICAgcmVhbHRpbWVBY3Rpb246IG1zZy5kYXRhLnJlYWx0aW1lQWN0aW9uXG4gICAgICAgIH07XG4gICAgICAgIG9ic2VydmVyLm5leHQoZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgIHJlYWx0aW1lLnVuc3Vic2NyaWJlKHJlYWx0aW1lU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuIl19