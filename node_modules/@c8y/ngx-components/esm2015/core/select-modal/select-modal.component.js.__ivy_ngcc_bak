import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { assign } from 'lodash-es';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { gettext } from '../i18n/gettext';
import { ModalSelectionMode } from './select-modal.model';
export class SelectModalComponent {
    constructor(bsModalRef) {
        this.bsModalRef = bsModalRef;
        this.subTitle = gettext('Select from the list of items matching the device type');
        this.mode = ModalSelectionMode.MULTI;
        this.disableSelected = true;
        this.showFilter = true;
        this.areMoreEntries = false;
        this.result = new EventEmitter();
        this.search = new EventEmitter();
        this.onChoiceUpdated = new EventEmitter();
        this.selected = false;
        this.filterTerm = '';
        this.listItems = [];
        this.debouncer = new Subject();
        this._labels = { ok: gettext('Confirm'), cancel: gettext('Cancel') };
        this.debouncer.pipe(debounceTime(500)).subscribe(value => {
            this.search.emit(value);
        });
    }
    set labels(labels) {
        const { ok = this.labels.ok, cancel = this.labels.cancel } = labels || {};
        this._labels = { ok, cancel };
    }
    get labels() {
        return this._labels;
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes.items && changes.items.currentValue) {
                const itemsPromise = changes.items.currentValue.map((item) => __awaiter(this, void 0, void 0, function* () {
                    item.options = yield item.options;
                    const selected = item.options.find(option => option.selected);
                    if (selected) {
                        item.selectedId = selected.obj.id;
                        if (this.disableSelected) {
                            item.options.map(option => assign(option, { disabled: true }));
                        }
                    }
                    return item;
                }));
                this.listItems = yield Promise.all(itemsPromise);
            }
        });
    }
    updatePipe(filterTerm) {
        this.debouncer.next(filterTerm);
        this.filterTerm = filterTerm;
    }
    updateChoice({ item, id }) {
        if (this.mode === 'single') {
            this.listItems.map(value => (value.selectedId = undefined));
        }
        item.selectedId = id;
        this.selected = true;
        this.onChoiceUpdated.emit(item);
    }
    dismiss() {
        this.bsModalRef.hide();
    }
    select() {
        this.result.emit(this.getOutput());
        this.bsModalRef.hide();
    }
    ngOnDestroy() {
        this.debouncer.complete();
        this.result.complete();
        this.search.complete();
    }
    getOutput() {
        return this.listItems
            .filter(item => item.selectedId)
            .map(item => item.options.find(option => item.selectedId === option.obj.id))
            .filter(option => !option.selected)
            .map(selectedOption => selectedOption.obj);
    }
}
SelectModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-select-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <span c8yIcon=\"{{ icon }}\"></span>\n    <h4 class=\"text-uppercase\">\n      {{ title | translate }}\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom min-height-fit\">\n    <p class=\"m-b-8\">{{ subTitle | translate }}</p>\n    <div class=\"row\">\n      <div\n        *ngIf=\"showFilter\"\n        [ngClass]=\"{\n          'col-xs-6': showFilter && additionalFilterTemplate,\n          'col-xs-12': !showFilter || !additionalFilterTemplate\n        }\"\n      >\n        <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n      </div>\n      <div\n        *ngIf=\"additionalFilterTemplate\"\n        [ngClass]=\"{\n          'col-xs-6': showFilter && additionalFilterTemplate,\n          'col-xs-12': !showFilter || !additionalFilterTemplate\n        }\"\n      >\n        <ng-container *ngTemplateOutlet=\"additionalFilterTemplate\"></ng-container>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"panel m-t-8 m-b-8\" *ngIf=\"!items || items.length === 0\">\n        <div class=\"c8y-empty-state text-left\">\n          <h1 c8yIcon=\"{{ icon }} \" class=\"c8y-icon-duocolor\"></h1>\n          <p>{{ (noItemsMessage | translate) ?? 'No items to display.' | translate }}</p>\n        </div>\n      </div>\n    </div>\n    <c8y-list-group>\n      <c8y-li *ngFor=\"let item of listItems | selectModalFilterPipe: filterTerm\">\n        <c8y-li-icon>\n          <i c8yIcon=\"{{ icon }}\"></i>\n        </c8y-li-icon>\n\n        <c8y-li-body class=\"content-flex-30\">\n          <div class=\"col-9\">\n            <div *ngFor=\"let bodyPart of item.body\" [ngClass]=\"bodyPart.class\">\n              <c8y-highlight\n                [title]=\"bodyPart.value\"\n                [pattern]=\"filterTerm\"\n                [text]=\"bodyPart.value\"\n              ></c8y-highlight>\n            </div>\n          </div>\n\n          <div class=\"col-3 text-right\" *ngIf=\"item.additionalInformation\">\n            <div [ngClass]=\"item.additionalInformation.class\">\n              {{ item.additionalInformation.value }}\n            </div>\n          </div>\n        </c8y-li-body>\n\n        <c8y-li-collapse>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let option of item.options\">\n              <c8y-li-radio\n                [name]=\"mode === 'single' ? 'single' : item.groupId\"\n                (onSelect)=\"updateChoice({ item: item, id: option.obj.id })\"\n                [disabled]=\"option.disabled\"\n                [selected]=\"option.selected\"\n              >\n              </c8y-li-radio>\n              <c8y-li-body class=\"content-flex-20\">\n                <div\n                  *ngFor=\"let optionPart of option.body; let i = index\"\n                  [ngClass]=\"optionPart.class\"\n                >\n                  <c8y-highlight [pattern]=\"filterTerm\" [text]=\"optionPart.value\"></c8y-highlight>\n                </div>\n                <ng-container\n                  *ngIf=\"option.template\"\n                  [ngTemplateOutlet]=\"option.template\"\n                  [ngTemplateOutletContext]=\"{ $implicit: item, option: option }\"\n                ></ng-container>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </c8y-li-collapse>\n      </c8y-li>\n      <div *ngIf=\"areMoreEntries\">\n        <div class=\"alert alert-info m-t-16 m-r-8 m-l-8\" translate>\n          Some entries might not be shown. Try narrowing search criteria.\n        </div>\n      </div>\n    </c8y-list-group>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      *ngIf=\"labels.cancel\"\n      class=\"btn btn-default\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"select()\"\n      [disabled]=\"!selected\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
            },] }
];
SelectModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
SelectModalComponent.propDecorators = {
    icon: [{ type: Input }],
    title: [{ type: Input }],
    subTitle: [{ type: Input }],
    items: [{ type: Input }],
    mode: [{ type: Input }],
    disableSelected: [{ type: Input }],
    showFilter: [{ type: Input }],
    additionalFilterTemplate: [{ type: Input }],
    areMoreEntries: [{ type: Input }],
    labels: [{ type: Input }],
    noItemsMessage: [{ type: Input }],
    result: [{ type: Output }],
    search: [{ type: Output }],
    onChoiceUpdated: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,