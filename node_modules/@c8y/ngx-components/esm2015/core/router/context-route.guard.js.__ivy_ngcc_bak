import { Injectable, Injector } from '@angular/core';
import { from, of } from 'rxjs';
import { catchError, map, shareReplay, tap } from 'rxjs/operators';
import { ViewContextServices } from './view-context.service';
import { InventoryService } from '@c8y/ngx-components/api';
export class ContextRouteGuard {
    constructor(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    canActivate(route) {
        const id = route.paramMap.get('id');
        const service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap(contextData => (route.data = Object.assign(Object.assign({}, route.data), { contextData }))), map(() => true), catchError(ex => of(false)));
    }
    service(route) {
        const serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    }
    detailCached(service, id) {
        if (id === 'new') {
            return of(undefined);
        }
        const cache = this.getCache(service);
        let cached = cache[id];
        if (!cached) {
            const params = service instanceof InventoryService ? { withChildren: false } : undefined;
            cached = from(service.detail(id, params)).pipe(map(({ data }) => data), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    }
    clearDetailCached(service, id) {
        const cache = this.getCache(service);
        delete cache[id];
    }
    getCache(service) {
        let cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    }
}
ContextRouteGuard.decorators = [
    { type: Injectable }
];
ContextRouteGuard.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1yb3V0ZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcm91dGVyL2NvbnRleHQtcm91dGUuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRzNELE1BQU0sT0FBTyxpQkFBaUI7SUFFNUIsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUQ5QixXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNjLENBQUM7SUFFMUMsV0FBVyxDQUFDLEtBQTZCO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDeEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxtQ0FBUSxLQUFLLENBQUMsSUFBSSxLQUFFLFdBQVcsR0FBRSxDQUFDLENBQUMsRUFDakUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNmLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVPLE9BQU8sQ0FBQyxLQUFLO1FBQ25CLE1BQU0sZUFBZSxHQUFHLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakYsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU8sWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzlCLElBQUksRUFBRSxLQUFLLEtBQUssRUFBRTtZQUNoQixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN0QjtRQUNELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLE1BQU0sR0FBRyxPQUFPLFlBQVksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDekYsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDNUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ3ZCLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO1lBQ0YsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQztTQUNwQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNuQyxNQUFNLEtBQUssR0FBa0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU8sUUFBUSxDQUFDLE9BQU87UUFDdEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQWxERixVQUFVOzs7WUFQVSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHNoYXJlUmVwbGF5LCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBWaWV3Q29udGV4dFNlcnZpY2VzIH0gZnJvbSAnLi92aWV3LWNvbnRleHQuc2VydmljZSc7XG5pbXBvcnQgeyBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hcGknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29udGV4dFJvdXRlR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIHByaXZhdGUgY2FjaGVzID0gbmV3IE1hcCgpO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge31cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIGNvbnN0IGlkID0gcm91dGUucGFyYW1NYXAuZ2V0KCdpZCcpO1xuICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLnNlcnZpY2Uocm91dGUpO1xuICAgIHRoaXMuY2xlYXJEZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpO1xuICAgIHJldHVybiB0aGlzLmRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkucGlwZShcbiAgICAgIHRhcChjb250ZXh0RGF0YSA9PiAocm91dGUuZGF0YSA9IHsgLi4ucm91dGUuZGF0YSwgY29udGV4dERhdGEgfSkpLFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgY2F0Y2hFcnJvcihleCA9PiBvZihmYWxzZSkpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2VydmljZShyb3V0ZSkge1xuICAgIGNvbnN0IHNlcnZpY2VJbnN0YW5jZSA9IFZpZXdDb250ZXh0U2VydmljZXMuY29udGV4dFRvU2VydmljZShyb3V0ZS5kYXRhLmNvbnRleHQpO1xuICAgIHJldHVybiB0aGlzLmluamVjdG9yLmdldChzZXJ2aWNlSW5zdGFuY2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpIHtcbiAgICBpZiAoaWQgPT09ICduZXcnKSB7XG4gICAgICByZXR1cm4gb2YodW5kZWZpbmVkKTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLmdldENhY2hlKHNlcnZpY2UpO1xuICAgIGxldCBjYWNoZWQgPSBjYWNoZVtpZF07XG4gICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHNlcnZpY2UgaW5zdGFuY2VvZiBJbnZlbnRvcnlTZXJ2aWNlID8geyB3aXRoQ2hpbGRyZW46IGZhbHNlIH0gOiB1bmRlZmluZWQ7XG4gICAgICBjYWNoZWQgPSBmcm9tKHNlcnZpY2UuZGV0YWlsKGlkLCBwYXJhbXMpKS5waXBlKFxuICAgICAgICBtYXAoKHsgZGF0YSB9KSA9PiBkYXRhKSxcbiAgICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICAgICk7XG4gICAgICBjYWNoZVtpZF0gPSBjYWNoZWQ7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cblxuICBwcml2YXRlIGNsZWFyRGV0YWlsQ2FjaGVkKHNlcnZpY2UsIGlkKSB7XG4gICAgY29uc3QgY2FjaGU6IE1hcDxhbnksIGFueT4gPSB0aGlzLmdldENhY2hlKHNlcnZpY2UpO1xuICAgIGRlbGV0ZSBjYWNoZVtpZF07XG4gIH1cblxuICBwcml2YXRlIGdldENhY2hlKHNlcnZpY2UpIHtcbiAgICBsZXQgY2FjaGUgPSB0aGlzLmNhY2hlcy5nZXQoc2VydmljZSk7XG4gICAgaWYgKCFjYWNoZSkge1xuICAgICAgY2FjaGUgPSB7fTtcbiAgICAgIHRoaXMuY2FjaGVzLnNldChzZXJ2aWNlLCBjYWNoZSk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZTtcbiAgfVxufVxuIl19