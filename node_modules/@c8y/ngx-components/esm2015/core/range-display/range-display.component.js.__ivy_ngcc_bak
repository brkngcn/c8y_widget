import { Component, Input, HostBinding } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
export class RangeDisplayComponent {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.config = {};
        this.display = 'full';
    }
    get inlineStyle() {
        this.config = this.config || {};
        if (!this.config.min) {
            this.config.min = 0;
        }
        if (!this.config.max) {
            this.config.max = 100;
        }
        if (this.config.fractionSize !== undefined) {
            this.config.current = parseFloat(this.config.current.toFixed(this.config.fractionSize));
        }
        return this.sanitizer.bypassSecurityTrustStyle(`
          --range-min: ${this.config.min};
          --range-max: ${this.config.max};
          --full-range: ${this.config.max - this.config.min};
          --measurement-target: ${((this.config.target - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --measurement-current: ${((this.config.current - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --range-y-min: ${((this.config.yellowRangeMin - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --range-y-max: ${((this.config.yellowRangeMax - this.config.min) /
            (this.config.max - this.config.min)) *
            100}%;
          --range-r-min: ${((this.config.redRangeMin - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --range-r-max: ${((this.config.redRangeMax - this.config.min) /
            (this.config.max - this.config.min)) *
            100}%;
        `);
    }
    checkTarget() {
        return (this.config.target !== undefined && this.config.target !== null &&
            (this.config.target >= this.config.min && this.config.target <= this.config.max));
    }
    rulerCalc(index) {
        const num = this.config.min + ((this.config.max - this.config.min) / 10) * index;
        if (this.config.fractionSize !== undefined) {
            return parseFloat(num.toFixed(this.config.fractionSize));
        }
        return parseFloat(num.toFixed(2));
    }
    trackByIndex(index, el) {
        return index;
    }
    isRedRangeDisplayed() {
        const { redRangeMin, redRangeMax } = this.config;
        return this.isRangeDisplayed(redRangeMin, redRangeMax);
    }
    isYellowRangeDisplayed() {
        const { yellowRangeMin, yellowRangeMax } = this.config;
        return this.isRangeDisplayed(yellowRangeMin, yellowRangeMax);
    }
    isRangeDisplayed(rangeMin, rangeMax) {
        return rangeMin === 0 || rangeMax === 0 || rangeMin && rangeMax;
    }
}
RangeDisplayComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-range-display',
                template: "<div [ngClass]=\"{ 'range-display--vertical': config.orientation === 'vertical',\n  'range-display--compact' : display ==='compact',\n  'range-display--inline' : display ==='inline' }\" \n  attr.data-label=\"{{ config.unit }}\"\n>\n  <div class=\"range-display\">\n    <div class=\"range-display__range\">\n      <div class=\"range-display__range__unit\">\n        {{ config.unit }}\n      </div>\n      <div *ngIf=\"isYellowRangeDisplayed()\" class=\"range-display__range__min\"></div>\n      <div *ngIf=\"isRedRangeDisplayed()\" class=\"range-display__range__max\"></div>\n      <div\n        *ngIf=\"checkTarget()\"\n        class=\"range-display__range__target\"\n        attr.data-label=\"{{ config.target }} {{ config.unit }}\"\n        title=\"{{ 'Target' | translate }}: {{ config.target }} {{ config.unit }}\"\n      ></div>\n      <div\n        *ngIf=\"\n          config.current != undefined &&\n          config.current >= config.min &&\n          config.current <= config.max\n        \"\n        class=\"range-display__range__current\"\n        attr.data-label=\"{{ config.current }} {{ config.unit }} &#xa; {{ config.time | c8yDate }}\"\n        title=\"{{ 'Current' | translate }}: {{ config.current }} {{ config.unit }} | {{\n          config.time | c8yDate\n        }}\"\n      ></div>\n    </div>\n    <div class=\"range-display__ruler\">\n      <div\n        *ngFor=\"let x of [].constructor(10); let index = index; trackBy: trackByIndex\"\n        attr.data-label=\"{{ rulerCalc(index) }}\"\n        class=\"range-display__tick\"\n      ></div>\n      <div attr.data-label=\"{{ config.max || 100 | number }}\" class=\"range-display__tick\"></div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
RangeDisplayComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
RangeDisplayComponent.propDecorators = {
    config: [{ type: Input }],
    display: [{ type: Input }],
    inlineStyle: [{ type: HostBinding, args: ['attr.style',] }]
};
//# sourceMappingURL=data:application/json;base64,