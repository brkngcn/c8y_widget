import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormGroup, FormControl, NG_VALIDATORS } from '@angular/forms';
import { first, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { gettext } from '../i18n';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/datepicker';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '../time-picker/time-picker.component';
import * as ɵngcc4 from '../i18n/c8y-translate.pipe';

const _c0 = function () { return { customTodayClass: "today", dateInputFormat: "YYYY-MM-DD" }; };
export class DateTimePickerComponent {
    constructor() {
        this.defaultPlaceholder = gettext('Select a date…');
        this.destroy$ = new Subject();
        this.form = new FormGroup({});
        this.form.addControl('date', new FormControl(null));
        this.form.addControl('time', new FormControl(null));
        this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value) => {
            this.setDatetime(value);
            this.previousValue = value;
        });
        this.form.statusChanges
            .pipe(first())
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.onTouched();
        });
    }
    set _minDate(value) {
        this.minDate = value ? new Date(value) : undefined;
    }
    set _maxDate(value) {
        this.maxDate = value ? new Date(value) : undefined;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value) {
        if (typeof value === 'string' && value.length) {
            this.date = new Date(value);
            this.form.setValue({
                date: new Date(value),
                time: {
                    hour: this.date.getHours(),
                    minute: this.date.getMinutes()
                }
            }, { emitEvent: false });
        }
        else {
            this.form.setValue({ date: null, time: null }, { emitEvent: false });
        }
        this.previousValue = this.form.value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(disabled) {
        disabled ? this.form.disable() : this.form.enable();
    }
    validate(control) {
        var _a, _b;
        if (((_a = this.date) === null || _a === void 0 ? void 0 : _a.getTime()) < new Date(this.minDate).getTime()) {
            return { dateBeforeRangeMin: true };
        }
        else if (((_b = this.date) === null || _b === void 0 ? void 0 : _b.getTime()) > new Date(this.maxDate).getTime()) {
            return { dateAfterRangeMax: true };
        }
        else if (this.form.invalid) {
            return { invalidDateTime: true };
        }
        else {
            return null;
        }
    }
    previousDay() {
        this.date.setDate(this.date.getDate() - 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    nextDay() {
        this.date.setDate(this.date.getDate() + 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    /**
     * If internal form changes its value, then combine date and time into one Date and pass its ISO string value to onChange method
     * @param dateTime
     * @private
     */
    setDatetime(dateTime) {
        var _a, _b, _c;
        if (!dateTime.date && ((_a = this.previousValue) === null || _a === void 0 ? void 0 : _a.date)) {
            this.form.get('time').setValue({ hour: undefined, minute: undefined }, { emitEvent: false });
            this.onChange(null);
            return;
        }
        if (!dateTime.date) {
            dateTime.date = new Date();
            dateTime.date.setSeconds(0);
        }
        this.date = new Date(dateTime.date);
        if (typeof ((_b = dateTime.time) === null || _b === void 0 ? void 0 : _b.hour) === 'undefined' ||
            typeof ((_c = dateTime.time) === null || _c === void 0 ? void 0 : _c.minute) === 'undefined') {
            dateTime.time = { hour: 0, minute: 0 };
            this.form.get('time').setValue(dateTime.time, { emitEvent: false });
        }
        this.date.setHours(dateTime.time.hour, dateTime.time.minute);
        this.form.get('date').setValue(dateTime.date, { emitEvent: false });
        this.onChange(this.date.toISOString());
    }
}
DateTimePickerComponent.ɵfac = function DateTimePickerComponent_Factory(t) { return new (t || DateTimePickerComponent)(); };
DateTimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateTimePickerComponent, selectors: [["c8y-date-time-picker"]], inputs: { _minDate: ["minDate", "_minDate"], _maxDate: ["maxDate", "_maxDate"], placeholder: "placeholder" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => DateTimePickerComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => DateTimePickerComponent),
                multi: true
            }
        ])], decls: 5, vars: 9, consts: [[1, "datetime-picker"], [1, "form-group", "datepicker"], ["bsDatepicker", "", 1, "form-control", 3, "placeholder", "bsConfig", "formControl", "minDate", "maxDate", "blur"], [3, "formControl", "dayBackward", "dayForward"]], template: function DateTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2);
        ɵngcc0.ɵɵlistener("blur", function DateTimePickerComponent_Template_input_blur_2_listener() { return ctx.onTouched(); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-time-picker", 3);
        ɵngcc0.ɵɵlistener("dayBackward", function DateTimePickerComponent_Template_c8y_time_picker_dayBackward_4_listener() { return ctx.previousDay(); })("dayForward", function DateTimePickerComponent_Template_c8y_time_picker_dayForward_4_listener() { return ctx.nextDay(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(3, 6, ctx.placeholder || ctx.defaultPlaceholder))("bsConfig", ɵngcc0.ɵɵpureFunction0(8, _c0))("formControl", ctx.form.get("date"))("minDate", ctx.minDate)("maxDate", ctx.maxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.form.get("time"));
    } }, directives: [ɵngcc1.BsDatepickerInputDirective, ɵngcc2.DefaultValueAccessor, ɵngcc1.BsDatepickerDirective, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.TimePickerComponent], pipes: [ɵngcc4.C8yTranslatePipe], encapsulation: 2 });
DateTimePickerComponent.ctorParameters = () => [];
DateTimePickerComponent.propDecorators = {
    _minDate: [{ type: Input, args: ['minDate',] }],
    _maxDate: [{ type: Input, args: ['maxDate',] }],
    placeholder: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateTimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-date-time-picker',
                template: "<div class=\"datetime-picker\">\n  <div class=\"form-group datepicker\">\n    <input\n      class=\"form-control\"\n      [placeholder]=\"placeholder || defaultPlaceholder | translate\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [formControl]=\"form.get('date')\"\n      (blur)=\"onTouched()\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n    />\n  </div>\n  <c8y-time-picker\n    [formControl]=\"form.get('time')\"\n    (dayBackward)=\"previousDay()\"\n    (dayForward)=\"nextDay()\"\n  ></c8y-time-picker>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => DateTimePickerComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => DateTimePickerComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, { _minDate: [{
            type: Input,
            args: ['minDate']
        }], _maxDate: [{
            type: Input,
            args: ['maxDate']
        }], placeholder: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,