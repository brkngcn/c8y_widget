import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormGroup, FormControl, NG_VALIDATORS } from '@angular/forms';
import { first, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { gettext } from '../i18n';
export class DateTimePickerComponent {
    constructor() {
        this.defaultPlaceholder = gettext('Select a dateâ€¦');
        this.destroy$ = new Subject();
        this.form = new FormGroup({});
        this.form.addControl('date', new FormControl(null));
        this.form.addControl('time', new FormControl(null));
        this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value) => {
            this.setDatetime(value);
            this.previousValue = value;
        });
        this.form.statusChanges
            .pipe(first())
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.onTouched();
        });
    }
    set _minDate(value) {
        this.minDate = value ? new Date(value) : undefined;
    }
    set _maxDate(value) {
        this.maxDate = value ? new Date(value) : undefined;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value) {
        if (typeof value === 'string' && value.length) {
            this.date = new Date(value);
            this.form.setValue({
                date: new Date(value),
                time: {
                    hour: this.date.getHours(),
                    minute: this.date.getMinutes()
                }
            }, { emitEvent: false });
        }
        else {
            this.form.setValue({ date: null, time: null }, { emitEvent: false });
        }
        this.previousValue = this.form.value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(disabled) {
        disabled ? this.form.disable() : this.form.enable();
    }
    validate(control) {
        var _a, _b;
        if (((_a = this.date) === null || _a === void 0 ? void 0 : _a.getTime()) < new Date(this.minDate).getTime()) {
            return { dateBeforeRangeMin: true };
        }
        else if (((_b = this.date) === null || _b === void 0 ? void 0 : _b.getTime()) > new Date(this.maxDate).getTime()) {
            return { dateAfterRangeMax: true };
        }
        else if (this.form.invalid) {
            return { invalidDateTime: true };
        }
        else {
            return null;
        }
    }
    previousDay() {
        this.date.setDate(this.date.getDate() - 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    nextDay() {
        this.date.setDate(this.date.getDate() + 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    /**
     * If internal form changes its value, then combine date and time into one Date and pass its ISO string value to onChange method
     * @param dateTime
     * @private
     */
    setDatetime(dateTime) {
        var _a, _b, _c;
        if (!dateTime.date && ((_a = this.previousValue) === null || _a === void 0 ? void 0 : _a.date)) {
            this.form.get('time').setValue({ hour: undefined, minute: undefined }, { emitEvent: false });
            this.onChange(null);
            return;
        }
        if (!dateTime.date) {
            dateTime.date = new Date();
            dateTime.date.setSeconds(0);
        }
        this.date = new Date(dateTime.date);
        if (typeof ((_b = dateTime.time) === null || _b === void 0 ? void 0 : _b.hour) === 'undefined' ||
            typeof ((_c = dateTime.time) === null || _c === void 0 ? void 0 : _c.minute) === 'undefined') {
            dateTime.time = { hour: 0, minute: 0 };
            this.form.get('time').setValue(dateTime.time, { emitEvent: false });
        }
        this.date.setHours(dateTime.time.hour, dateTime.time.minute);
        this.form.get('date').setValue(dateTime.date, { emitEvent: false });
        this.onChange(this.date.toISOString());
    }
}
DateTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-date-time-picker',
                template: "<div class=\"datetime-picker\">\n  <div class=\"form-group datepicker\">\n    <input\n      class=\"form-control\"\n      [placeholder]=\"placeholder || defaultPlaceholder | translate\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [formControl]=\"form.get('date')\"\n      (blur)=\"onTouched()\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n    />\n  </div>\n  <c8y-time-picker\n    [formControl]=\"form.get('time')\"\n    (dayBackward)=\"previousDay()\"\n    (dayForward)=\"nextDay()\"\n  ></c8y-time-picker>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => DateTimePickerComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => DateTimePickerComponent),
                        multi: true
                    }
                ]
            },] }
];
DateTimePickerComponent.ctorParameters = () => [];
DateTimePickerComponent.propDecorators = {
    _minDate: [{ type: Input, args: ['minDate',] }],
    _maxDate: [{ type: Input, args: ['maxDate',] }],
    placeholder: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,