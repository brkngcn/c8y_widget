import { CdkStep } from '@angular/cdk/stepper';
import { Component } from '@angular/core';
import { C8yStepper } from '../stepper/stepper.component';
import { SetupComponent } from './setup.component';
import { gettext } from '../i18n/gettext';
export class SetupCompletedComponent {
    constructor(stepper, step, setup) {
        this.stepper = stepper;
        this.step = step;
        this.setup = setup;
        this.status = 'done';
        this.STEP_LABEL = gettext('Step');
        this.isVerified = false;
    }
    ngOnInit() {
        this.stepperSelectionChangeSubscription = this.stepper.selectionChange.subscribe(({ selectedIndex }) => {
            this.verify(selectedIndex);
        });
    }
    ngOnDestroy() {
        this.stepperSelectionChangeSubscription.unsubscribe();
    }
    verify(selectedIndex) {
        const isLastStep = this.stepper.steps.length - 1 === selectedIndex;
        if (isLastStep || this.isVerified) {
            // set the last step to completed
            this.getOverallStatus();
            this.setup.verify();
            this.isVerified = true;
        }
    }
    start() {
        this.setup.finish();
    }
    back() {
        this.stepper.previous();
    }
    gotoStep(index) {
        this.stepper.selectedIndex = index;
    }
    getOverallStatus() {
        const validSteps = this.setup.steps.slice(0, this.setup.steps.length - 1);
        this.status = 'done';
        if (validSteps.find(step => !step.completed && step.required)) {
            this.status = 'error';
        }
        else if (validSteps.find(step => !step.completed && !step.required)) {
            this.status = 'warning';
        }
        this.step.state = this.status;
    }
}
SetupCompletedComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-setup-completed',
                template: "<div class=\"container-fluid flex-no-shrink fit-w\">\n  <div class=\"row separator-bottom\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3  p-t-24 p-l-16 p-r-16\">\n      <h3 translate class=\"text-medium l-h-base\">Summary</h3>\n      <p translate class=\"lead text-normal p-t-8 p-b-8\">\n        Please verify the setup result. If any step is not finished but required, you need to ensure\n        that you have finished the step.\n      </p>\n    </div>\n  </div>\n</div>\n<div class=\"inner-scroll flex-grow\">\n  <div class=\"container-fluid fit-w p-t-16\">\n    <div class=\"row\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n        <div class=\"text-center\" [ngSwitch]=\"status\">\n          <c8y-operation-result\n            *ngSwitchCase=\"'done'\"\n            text=\"{{ 'Setup completed' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"success\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngSwitchCase=\"'warning'\"\n            text=\"{{ 'Setup completed with warnings' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"warning\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngSwitchCase=\"'error'\"\n            text=\"{{ 'Setup not completed' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"error\"\n          ></c8y-operation-result>\n        </div>\n        <ul class=\"list-unstyled m-t-16 separator-top\">\n          <li\n            class=\"p-t-4 p-b-4 d-flex a-i-center separator-bottom text-nowrap l-h-1\"\n            *ngFor=\"let step of setup.steps.slice(0, setup.steps.length - 1)\"\n            (click)=\"gotoStep(step.index)\"\n            style=\"cursor: pointer\"\n          >\n            <span *ngIf=\"step.label\">\n              <span class=\"dot small m-r-4 l-h-1\"\n                [ngClass]=\"{ 'dot-success': step.completed, \n                            'dot-error' : !step.completed && step.required,\n                            'dot-warning' : !step.completed && !step.required }\"\n              >\n                {{step.index + 1}}\n              </span>\n              {{ step.label || (STEP_LABEL | translate) + ' ' }}\n            </span>\n            <span *ngIf=\"!step.label\">\n              <span translate>Step</span>{{ ' ' + (step.index + 1) }}\n            </span>\n            <span class=\"m-l-auto icon-20 l-h-1\">\n              <i\n                *ngIf=\"step.completed\"\n                [c8yIcon]=\"'success'\"\n                class=\"text-success\"\n                [title]=\"'Completed' | translate\"\n              ></i>\n              <i\n                *ngIf=\"!step.completed && step.required\"\n                [c8yIcon]=\"'error'\"\n                class=\"text-danger\"\n                [title]=\"\n                  'Not completed and required. Please go to the step and fulfil the setup.'\n                    | translate\n                \"\n              ></i>\n              <i\n                *ngIf=\"!step.completed && !step.required\"\n                [c8yIcon]=\"'warning'\"\n                class=\"text-warning\"\n                [title]=\"'This step was not completed but it is also not required.' | translate\"\n              ></i>\n            </span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"card-footer separator d-flex j-c-center\">\n  <button\n    translate\n    class=\"btn btn-default\"\n    type=\"button\"\n    (click)=\"back()\"\n    *ngIf=\"stepper.selectedIndex !== 0\"\n    [disabled]=\"\n      setup.currentSetupState === setup.setupState.FINALIZING ||\n      setup.currentSetupState === setup.setupState.RELOADING\n    \"\n  >\n    Back\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    type=\"button\"\n    (click)=\"start()\"\n    [disabled]=\"\n      status === 'error' ||\n      setup.currentSetupState === setup.setupState.FINALIZING ||\n      setup.currentSetupState === setup.setupState.RELOADING\n    \"\n    [ngClass]=\"{\n      'btn-pending':\n        setup.currentSetupState === setup.setupState.FINALIZING ||\n        setup.currentSetupState === setup.setupState.RELOADING\n    }\"\n  >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.WIZARD\" translate\n      >Save and reload</span\n    >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.FINALIZING\" translate\n      >Getting things ready\u2026</span\n    >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.RELOADING\" translate\n      >Done. Reloading the application.</span\n    >\n  </button>\n</div>\n",
                host: { class: 'd-contents' }
            },] }
];
SetupCompletedComponent.ctorParameters = () => [
    { type: C8yStepper },
    { type: CdkStep },
    { type: SetupComponent }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAtY29tcGxldGVkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvc2V0dXAvc2V0dXAtY29tcGxldGVkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPMUMsTUFBTSxPQUFPLHVCQUF1QjtJQU1sQyxZQUFtQixPQUFtQixFQUFTLElBQWEsRUFBUyxLQUFxQjtRQUF2RSxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVMsU0FBSSxHQUFKLElBQUksQ0FBUztRQUFTLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBTDFGLFdBQU0sR0FBaUMsTUFBTSxDQUFDO1FBQ3JDLGVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsZUFBVSxHQUFHLEtBQUssQ0FBQztJQUdrRSxDQUFDO0lBRTlGLFFBQVE7UUFDTixJQUFJLENBQUMsa0NBQWtDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1lBQ3JHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWE7UUFDbEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxhQUFhLENBQUM7UUFDbkUsSUFBSSxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQyxpQ0FBaUM7WUFDakMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFLO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3RCxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztTQUN2QjthQUFNLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNyRSxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUN6QjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDaEMsQ0FBQzs7O1lBdERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixtcUpBQStDO2dCQUMvQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFO2FBQzlCOzs7WUFUUSxVQUFVO1lBRlYsT0FBTztZQUdQLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtTdGVwIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3N0ZXBwZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQzh5U3RlcHBlciB9IGZyb20gJy4uL3N0ZXBwZXIvc3RlcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2V0dXBDb21wb25lbnQgfSBmcm9tICcuL3NldHVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc2V0dXAtY29tcGxldGVkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NldHVwLWNvbXBsZXRlZC5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3Q6IHsgY2xhc3M6ICdkLWNvbnRlbnRzJyB9XG59KVxuZXhwb3J0IGNsYXNzIFNldHVwQ29tcGxldGVkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBzdGF0dXM6ICdkb25lJyB8ICd3YXJuaW5nJyB8ICdlcnJvcicgPSAnZG9uZSc7XG4gIHJlYWRvbmx5IFNURVBfTEFCRUwgPSBnZXR0ZXh0KCdTdGVwJyk7XG4gIHByaXZhdGUgaXNWZXJpZmllZCA9IGZhbHNlO1xuICBwcml2YXRlIHN0ZXBwZXJTZWxlY3Rpb25DaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RlcHBlcjogQzh5U3RlcHBlciwgcHVibGljIHN0ZXA6IENka1N0ZXAsIHB1YmxpYyBzZXR1cDogU2V0dXBDb21wb25lbnQpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdGVwcGVyU2VsZWN0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uID0gdGhpcy5zdGVwcGVyLnNlbGVjdGlvbkNoYW5nZS5zdWJzY3JpYmUoKHsgc2VsZWN0ZWRJbmRleCB9KSA9PiB7XG4gICAgICB0aGlzLnZlcmlmeShzZWxlY3RlZEluZGV4KTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3RlcHBlclNlbGVjdGlvbkNoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgdmVyaWZ5KHNlbGVjdGVkSW5kZXgpIHtcbiAgICBjb25zdCBpc0xhc3RTdGVwID0gdGhpcy5zdGVwcGVyLnN0ZXBzLmxlbmd0aCAtIDEgPT09IHNlbGVjdGVkSW5kZXg7XG4gICAgaWYgKGlzTGFzdFN0ZXAgfHwgdGhpcy5pc1ZlcmlmaWVkKSB7XG4gICAgICAvLyBzZXQgdGhlIGxhc3Qgc3RlcCB0byBjb21wbGV0ZWRcbiAgICAgIHRoaXMuZ2V0T3ZlcmFsbFN0YXR1cygpO1xuICAgICAgdGhpcy5zZXR1cC52ZXJpZnkoKTtcbiAgICAgIHRoaXMuaXNWZXJpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5zZXR1cC5maW5pc2goKTtcbiAgfVxuXG4gIGJhY2soKSB7XG4gICAgdGhpcy5zdGVwcGVyLnByZXZpb3VzKCk7XG4gIH1cblxuICBnb3RvU3RlcChpbmRleCkge1xuICAgIHRoaXMuc3RlcHBlci5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gIH1cblxuICBwcml2YXRlIGdldE92ZXJhbGxTdGF0dXMoKSB7XG4gICAgY29uc3QgdmFsaWRTdGVwcyA9IHRoaXMuc2V0dXAuc3RlcHMuc2xpY2UoMCwgdGhpcy5zZXR1cC5zdGVwcy5sZW5ndGggLSAxKTtcbiAgICB0aGlzLnN0YXR1cyA9ICdkb25lJztcbiAgICBpZiAodmFsaWRTdGVwcy5maW5kKHN0ZXAgPT4gIXN0ZXAuY29tcGxldGVkICYmIHN0ZXAucmVxdWlyZWQpKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgfSBlbHNlIGlmICh2YWxpZFN0ZXBzLmZpbmQoc3RlcCA9PiAhc3RlcC5jb21wbGV0ZWQgJiYgIXN0ZXAucmVxdWlyZWQpKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9ICd3YXJuaW5nJztcbiAgICB9XG4gICAgdGhpcy5zdGVwLnN0YXRlID0gdGhpcy5zdGF0dXM7XG4gIH1cbn1cbiJdfQ==