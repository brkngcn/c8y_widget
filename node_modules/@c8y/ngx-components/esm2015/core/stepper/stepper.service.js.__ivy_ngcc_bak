import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, take } from 'rxjs/operators';
import { fromTrigger, stateToFactory, } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@ngx-translate/core";
/**
 * A hook to use for Multi Provider extension.
 */
export const HOOK_STEPPER = new InjectionToken('HookStepper');
/**
 * A service which defines the steps in a stepper component.
 * A stepper hook needs an certain outlet which has an matching id
 * to display the steps.
 */
export class StepperService extends StateService {
    constructor(injector, router, translateService) {
        super();
        this.injector = injector;
        this.translateService = translateService;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.factories = [];
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_STEPPER, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(shareReplay(1), distinctUntilChanged());
    }
    sortSteps(steps) {
        return steps.sort((a, b) => {
            const priorityOrder = (b.priority || 0) - (a.priority || 0);
            const aTranslatedLabel = this.translateService.instant(a.label);
            const bTranslatedLabel = this.translateService.instant(b.label);
            const translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return priorityOrder || translatedLabelOrder;
        });
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes a step and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    /**
     * Returns the component by it's asssigned stepper id as an observable.
     * @param id The id of the stepper to hook into.
     */
    getById$(id) {
        return this.items$.pipe(filter((steps) => steps.length > 0), map((steps) => steps.filter((cmp) => cmp.stepperId === id)), take(1));
    }
}
StepperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StepperService_Factory() { return new StepperService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TranslateService)); }, token: StepperService, providedIn: "root" });
StepperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
StepperService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,