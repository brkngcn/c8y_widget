import { NgModule } from '@angular/core';
import { CdkStepperModule, CdkStep, STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';
import { C8yStepper } from './stepper.component';
import { CommonModule } from '../common/common.module';
import { C8yStepperIcon } from './stepper-icon.directive';
import { C8yStepperProgress } from './stepper-progress.component';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { C8yStepperButtons } from './stepper-buttons.component';
import { StepperService } from './stepper.service';
import { StepperOutletComponent } from './stepper-outlet.component';
import { FormsModule } from '@angular/forms';
const ɵ0 = { displayDefaultIndicatorType: false };
/**
 * The angular module definition for c8y-stepper (Wizard).
 * @exports C8yStepper
 * @exports C8yStepperIcon
 * @exports C8yStepperButtons
 * @exports CdkStep
 */
export class StepperModule {
}
StepperModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, CdkStepperModule, TooltipModule, FormsModule],
                declarations: [
                    C8yStepper,
                    C8yStepperIcon,
                    C8yStepperProgress,
                    C8yStepperButtons,
                    StepperOutletComponent
                ],
                exports: [C8yStepper, CdkStep, C8yStepperIcon, C8yStepperButtons, StepperOutletComponent],
                providers: [
                    StepperService,
                    {
                        /**
                         * This enables additional states, like: edit, done and error
                         * These states are used to display custom icons, if needed.
                         * Any change in here will most probably result in not showing custom icons anymore
                         */
                        provide: STEPPER_GLOBAL_OPTIONS,
                        useValue: ɵ0
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3N0ZXBwZXIvc3RlcHBlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7V0E0QjdCLEVBQUUsMkJBQTJCLEVBQUUsS0FBSyxFQUFFO0FBMUJ0RDs7Ozs7O0dBTUc7QUF3QkgsTUFBTSxPQUFPLGFBQWE7OztZQXZCekIsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDO2dCQUNyRSxZQUFZLEVBQUU7b0JBQ1osVUFBVTtvQkFDVixjQUFjO29CQUNkLGtCQUFrQjtvQkFDbEIsaUJBQWlCO29CQUNqQixzQkFBc0I7aUJBQ3ZCO2dCQUNELE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLHNCQUFzQixDQUFDO2dCQUN6RixTQUFTLEVBQUU7b0JBQ1QsY0FBYztvQkFDZDt3QkFDRTs7OzsyQkFJRzt3QkFDSCxPQUFPLEVBQUUsc0JBQXNCO3dCQUMvQixRQUFRLElBQXdDO3FCQUNqRDtpQkFDRjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENka1N0ZXBwZXJNb2R1bGUsIENka1N0ZXAsIFNURVBQRVJfR0xPQkFMX09QVElPTlMgfSBmcm9tICdAYW5ndWxhci9jZGsvc3RlcHBlcic7XG5pbXBvcnQgeyBDOHlTdGVwcGVyIH0gZnJvbSAnLi9zdGVwcGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBDOHlTdGVwcGVySWNvbiB9IGZyb20gJy4vc3RlcHBlci1pY29uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDOHlTdGVwcGVyUHJvZ3Jlc3MgfSBmcm9tICcuL3N0ZXBwZXItcHJvZ3Jlc3MuY29tcG9uZW50JztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgQzh5U3RlcHBlckJ1dHRvbnMgfSBmcm9tICcuL3N0ZXBwZXItYnV0dG9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RlcHBlclNlcnZpY2UgfSBmcm9tICcuL3N0ZXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTdGVwcGVyT3V0bGV0Q29tcG9uZW50IH0gZnJvbSAnLi9zdGVwcGVyLW91dGxldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qKlxuICogVGhlIGFuZ3VsYXIgbW9kdWxlIGRlZmluaXRpb24gZm9yIGM4eS1zdGVwcGVyIChXaXphcmQpLlxuICogQGV4cG9ydHMgQzh5U3RlcHBlclxuICogQGV4cG9ydHMgQzh5U3RlcHBlckljb25cbiAqIEBleHBvcnRzIEM4eVN0ZXBwZXJCdXR0b25zXG4gKiBAZXhwb3J0cyBDZGtTdGVwXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIENka1N0ZXBwZXJNb2R1bGUsIFRvb2x0aXBNb2R1bGUsIEZvcm1zTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgQzh5U3RlcHBlcixcbiAgICBDOHlTdGVwcGVySWNvbixcbiAgICBDOHlTdGVwcGVyUHJvZ3Jlc3MsXG4gICAgQzh5U3RlcHBlckJ1dHRvbnMsXG4gICAgU3RlcHBlck91dGxldENvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbQzh5U3RlcHBlciwgQ2RrU3RlcCwgQzh5U3RlcHBlckljb24sIEM4eVN0ZXBwZXJCdXR0b25zLCBTdGVwcGVyT3V0bGV0Q29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgU3RlcHBlclNlcnZpY2UsXG4gICAge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGlzIGVuYWJsZXMgYWRkaXRpb25hbCBzdGF0ZXMsIGxpa2U6IGVkaXQsIGRvbmUgYW5kIGVycm9yXG4gICAgICAgKiBUaGVzZSBzdGF0ZXMgYXJlIHVzZWQgdG8gZGlzcGxheSBjdXN0b20gaWNvbnMsIGlmIG5lZWRlZC5cbiAgICAgICAqIEFueSBjaGFuZ2UgaW4gaGVyZSB3aWxsIG1vc3QgcHJvYmFibHkgcmVzdWx0IGluIG5vdCBzaG93aW5nIGN1c3RvbSBpY29ucyBhbnltb3JlXG4gICAgICAgKi9cbiAgICAgIHByb3ZpZGU6IFNURVBQRVJfR0xPQkFMX09QVElPTlMsXG4gICAgICB1c2VWYWx1ZTogeyBkaXNwbGF5RGVmYXVsdEluZGljYXRvclR5cGU6IGZhbHNlIH1cbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlck1vZHVsZSB7fVxuIl19