import { Component, Input, Output, EventEmitter } from '@angular/core';
export class C8yStepperProgress {
    constructor() {
        /** Emits the index: number of the step which was clicked */
        this.onStepClicked = new EventEmitter();
    }
    /** Called on click and emits the step index */
    stepSelected() {
        this.onStepClicked.emit(this.index);
    }
}
C8yStepperProgress.decorators = [
    { type: Component, args: [{
                selector: 'c8y-stepper-progress',
                template: "<button\n  type=\"button\"\n  class=\"c8y-step\"\n  [ngClass]=\"{\n    active: selected,\n    'step-done': state === 'done' || state === '_done',\n    'step-error': state === 'error',\n    'step-warning': state === 'warning'\n  }\"\n  [disabled]=\"disabled\"\n  [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\"\n  (click)=\"stepSelected()\"\n>\n  <ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides[state]\"></ng-container>\n  <ng-container *ngSwitchDefault [ngSwitch]=\"state\">\n    <span *ngSwitchCase=\"'edit'\">\n      <span [c8yIcon]=\"'edit'\"></span>\n    </span>\n    <span *ngSwitchCase=\"'done'\">\n      <span class=\"m-t-4\" [c8yIcon]=\"'check'\"></span>\n    </span>\n    <span *ngSwitchDefault> {{ index + 1 }} </span>\n  </ng-container>\n</button>\n"
            },] }
];
C8yStepperProgress.propDecorators = {
    iconOverrides: [{ type: Input }],
    index: [{ type: Input }],
    selected: [{ type: Input }],
    state: [{ type: Input }],
    disabled: [{ type: Input }],
    onStepClicked: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1wcm9ncmVzcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3N0ZXBwZXIvc3RlcHBlci1wcm9ncmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFlLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU9wRixNQUFNLE9BQU8sa0JBQWtCO0lBSi9CO1FBdUJFLDREQUE0RDtRQUNsRCxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7SUFNdkQsQ0FBQztJQUpDLCtDQUErQztJQUMvQyxZQUFZO1FBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OztZQTdCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMscXlCQUFnRDthQUNqRDs7OzRCQVdFLEtBQUs7b0JBRUwsS0FBSzt1QkFFTCxLQUFLO29CQUVMLEtBQUs7dUJBRUwsS0FBSzs0QkFFTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdGVwU3RhdGUgfSBmcm9tICdAYW5ndWxhci9jZGsvc3RlcHBlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zdGVwcGVyLXByb2dyZXNzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N0ZXBwZXItcHJvZ3Jlc3MuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEM4eVN0ZXBwZXJQcm9ncmVzcyB7XG4gIC8qKiBMaXN0IG9mIG92ZXJyaWRlbiBpY29ucyBhcyBUZW1wbGF0ZVJlZi4gQWxzbyBkZWZhdWx0IGljb25zIGNvdWxkIGJlIG92ZXJyaWRlbi5cbiAgICogIFRoZSBnaXZlbiBvdmVycmlkZW4gaWNvbnMgd2lsbCByZXBsYWNlIGFuIGljb24gd2l0aCBtYXRjaGluZyBzdGF0ZTogU3RlcFN0YXRlXG4gICAqXG4gICAqIDxuZy1jb250YWluZXJcbiAgICogKm5nU3dpdGNoQ2FzZT1cInRydWVcIlxuICAgKiBbbmdUZW1wbGF0ZU91dGxldF09XCJpY29uT3ZlcnJpZGVzW3N0YXRlXVwiXG4gICAqID48L25nLWNvbnRhaW5lcj5cbiAgICpcbiAgICovXG4gIEBJbnB1dCgpIGljb25PdmVycmlkZXM6IHsgW2tleTogc3RyaW5nXTogVGVtcGxhdGVSZWY8YW55PiB9O1xuICAvKiogVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHN0ZXAgKi9cbiAgQElucHV0KCkgaW5kZXg6IG51bWJlcjtcbiAgLyoqIFdoZXRoZXIgdGhlIHN0ZXAgaXMgY3VycmVudGx5IHNlbGVjdGVkIG9yIG5vdCAgKi9cbiAgQElucHV0KCkgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gIC8qKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc3RlcCAqL1xuICBASW5wdXQoKSBzdGF0ZTogU3RlcFN0YXRlO1xuICAvKiogRGlzYWJsZSBuYXZpZ2F0aW9uIGJ1dHRvbnMgKi9cbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIC8qKiBFbWl0cyB0aGUgaW5kZXg6IG51bWJlciBvZiB0aGUgc3RlcCB3aGljaCB3YXMgY2xpY2tlZCAqL1xuICBAT3V0cHV0KCkgb25TdGVwQ2xpY2tlZCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gIC8qKiBDYWxsZWQgb24gY2xpY2sgYW5kIGVtaXRzIHRoZSBzdGVwIGluZGV4ICovXG4gIHN0ZXBTZWxlY3RlZCgpIHtcbiAgICB0aGlzLm9uU3RlcENsaWNrZWQuZW1pdCh0aGlzLmluZGV4KTtcbiAgfVxufVxuIl19