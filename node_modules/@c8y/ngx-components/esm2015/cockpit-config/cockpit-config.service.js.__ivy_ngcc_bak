import { __awaiter } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { AppStateService, NavigatorService, OptionsService, Permissions, SearchService, TabsService } from '@c8y/ngx-components';
import { AssetNodeService, ASSET_NAVIGATOR_CONFIG } from '@c8y/ngx-components/assets-navigator';
import { isUndefined, startCase } from 'lodash-es';
import { map } from 'rxjs/operators';
import { DEFAULT_CONFIG, DEFAULT_HOME_DASHBOARD_NAME } from './cockpit-config.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/assets-navigator";
import * as i3 from "@c8y/client/lib/src/inventory/InventoryService";
export class CockpitConfigService {
    constructor(navigatorService, tabsService, searchService, assetNodeService, inventoryService, appState, optionsService, permissions, moduleConfig) {
        this.navigatorService = navigatorService;
        this.tabsService = tabsService;
        this.searchService = searchService;
        this.assetNodeService = assetNodeService;
        this.inventoryService = inventoryService;
        this.appState = appState;
        this.optionsService = optionsService;
        this.permissions = permissions;
        this.moduleConfig = moduleConfig;
        this.currentConfig = DEFAULT_CONFIG;
        this.nodes = [];
        this.DEFAULT_NODE_PRIORITY = 2000;
        this.registerFilterForFeatures();
        this.init();
    }
    get excludedFeatureKeys() {
        return Object.keys(this.currentConfig.features).filter(key => !this.currentConfig.features[key]);
    }
    init() {
        this.appState.currentApplicationConfig.subscribe(config => {
            if (config) {
                this.currentConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);
                this.setRootNodes();
            }
        });
    }
    saveConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentConfig = config;
            yield this.storeApplicationConfig(this.currentConfig);
        });
    }
    refresh() {
        this.optionsService.hideNavigator = this.currentConfig.hideNavigator;
        this.navigatorService.refresh();
        this.searchService.refresh();
    }
    setRootNodes() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.addNodesToFactories();
            for (const node of this.currentConfig.rootNodes) {
                const { data } = yield this.inventoryService.detail(node.id);
                if (data) {
                    this.nodes.push(this.assetNodeService.createAssetNode({
                        mo: data,
                        hideDevices: node.hideDevices,
                        priority: isUndefined((_a = this.moduleConfig) === null || _a === void 0 ? void 0 : _a.rootNodePriority)
                            ? this.DEFAULT_NODE_PRIORITY
                            : this.moduleConfig.rootNodePriority
                    }));
                }
            }
            this.refresh();
        });
    }
    getAppDashboardName() {
        return `${DEFAULT_HOME_DASHBOARD_NAME.substring(0, DEFAULT_HOME_DASHBOARD_NAME.length - 1)}_${this.appState.state.app.id}`;
    }
    storeApplicationConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appState.updateApplicationConfig(config);
        });
    }
    addNodesToFactories() {
        const nodeInFactories = this.navigatorService.factories.find(nodes => nodes === this.nodes);
        const isNodeAlreadyInFactories = !!nodeInFactories;
        if (isNodeAlreadyInFactories) {
            this.nodes = nodeInFactories;
            this.nodes.length = 0;
        }
        else {
            this.navigatorService.factories.push(this.nodes);
        }
    }
    registerFilterForFeatures() {
        this.navigatorService.items$ = this.navigatorService.items$.pipe(map(nodes => this.setHiddenAttrLock(nodes)), map(nodes => this.filterNavigatorNode(nodes)));
        this.tabsService.items$ = this.tabsService.items$.pipe(map(tabs => this.filterTabs(tabs)));
        this.searchService.items$ = this.searchService.items$.pipe(map(search => (this.currentConfig.features.search ? search : [])));
    }
    setHiddenAttrLock(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (!this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
                        childNode.lockHiddenAttr === undefined &&
                        childNode.hidden === true) {
                        childNode.lockHiddenAttr = childNode.hidden;
                    }
                }
            });
        });
        return nodes;
    }
    filterTabs(tabs) {
        return tabs.filter(tab => !this.excludedFeatureKeys.some(key => tab.featureId === key));
    }
    filterNavigatorNode(nodes) {
        if (!this.currentConfig) {
            return nodes;
        }
        const disabledFeatures = this.excludedFeatureKeys;
        const filteredNodes = nodes.filter(node => !disabledFeatures.some(key => node.featureId === key));
        this.showAllChildrenNodes(nodes);
        this.hideChildrenNodesThatAreDisabled(nodes, disabledFeatures);
        return filteredNodes;
    }
    hideChildrenNodesThatAreDisabled(nodes, disabledFeatures) {
        nodes.forEach(node => disabledFeatures.forEach(key => {
            const childNode = node.find(key, 'featureId');
            if (childNode) {
                childNode.hidden = true;
            }
        }));
    }
    showAllChildrenNodes(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (childNode.lockHiddenAttr === true) {
                        return;
                    }
                    childNode.hidden = false;
                }
            });
        });
    }
}
CockpitConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CockpitConfigService_Factory() { return new CockpitConfigService(i0.ɵɵinject(i1.NavigatorService), i0.ɵɵinject(i1.TabsService), i0.ɵɵinject(i1.SearchService), i0.ɵɵinject(i2.AssetNodeService), i0.ɵɵinject(i3.InventoryService), i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i1.OptionsService), i0.ɵɵinject(i1.Permissions), i0.ɵɵinject(i2.ASSET_NAVIGATOR_CONFIG, 8)); }, token: CockpitConfigService, providedIn: "root" });
CockpitConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CockpitConfigService.ctorParameters = () => [
    { type: NavigatorService },
    { type: TabsService },
    { type: SearchService },
    { type: AssetNodeService },
    { type: InventoryService },
    { type: AppStateService },
    { type: OptionsService },
    { type: Permissions },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,