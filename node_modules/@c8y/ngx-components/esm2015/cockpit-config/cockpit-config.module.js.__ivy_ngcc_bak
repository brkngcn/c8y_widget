import { NgModule } from '@angular/core';
import { CoreModule, gettext, HOOK_NAVIGATOR_NODES, HOOK_ROUTE, HOOK_STEPPER, Steppers } from '@c8y/ngx-components';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { EcosystemModule } from '@c8y/ngx-components/ecosystem';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { CockpitConfigGuard } from './cockpit-config.guard';
import { COCKPIT_CONFIG_PATH } from './cockpit-config.model';
import { CockpitConfigService } from './cockpit-config.service';
import { CockpitConfigurationComponent } from './cockpit-configuration.component';
import { FeatureConfigComponent } from './feature-config.component';
import { HomeDashboardConfigComponent } from './home-dashboard-config.component';
import { MiscConfigComponent } from './misc-config.component';
import { RootNodeConfigComponent } from './root-node-config.component';
import { CockpitSetupStep1Component } from './setup/cockpit-setup-step1.component';
import { CockpitSetupStep2Component } from './setup/cockpit-setup-step2.component';
import { CockpitSetupStep3Component } from './setup/cockpit-setup-step3.component';
import { CockpitSetupStep4Component } from './setup/cockpit-setup-step4.component';
import { CockpitSetupStepperButtonsComponent } from './setup/cockpit-setup-stepper-buttons.component';
const ɵ0 = [
    {
        path: COCKPIT_CONFIG_PATH,
        component: CockpitConfigurationComponent,
        canActivate: [CockpitConfigGuard]
    }
], ɵ1 = [
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep1Component,
        label: gettext('Features'),
        setupId: 'cockpitFeatures',
        priority: 0
    },
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep2Component,
        label: gettext('Top level nodes'),
        setupId: 'cockpitTopLevelNodes',
        priority: 10
    },
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep3Component,
        label: gettext('Home Dashboard'),
        setupId: 'cockpitHomeDashboard',
        priority: 20
    },
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep4Component,
        label: gettext('Misc'),
        setupId: 'cockpitMisc',
        priority: 30
    }
];
export class CockpitConfigModule {
    constructor(service) {
        // only for DI, not used but needed.
    }
}
CockpitConfigModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CockpitConfigurationComponent,
                    CockpitSetupStep1Component,
                    CockpitSetupStep2Component,
                    CockpitSetupStep3Component,
                    CockpitSetupStep4Component,
                    FeatureConfigComponent,
                    RootNodeConfigComponent,
                    HomeDashboardConfigComponent,
                    MiscConfigComponent,
                    CockpitSetupStepperButtonsComponent
                ],
                imports: [CoreModule, AssetSelectorModule, PopoverModule, EcosystemModule],
                providers: [
                    CockpitConfigGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: CockpitConfigGuard,
                        multi: true
                    },
                    {
                        provide: HOOK_STEPPER,
                        useValue: ɵ1,
                        multi: true
                    }
                ]
            },] }
];
CockpitConfigModule.ctorParameters = () => [
    { type: CockpitConfigService }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ja3BpdC1jb25maWcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29ja3BpdC1jb25maWcvY29ja3BpdC1jb25maWcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1Asb0JBQW9CLEVBQ3BCLFVBQVUsRUFDVixZQUFZLEVBRVosUUFBUSxFQUNULE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztXQW9CdEY7SUFDUjtRQUNFLElBQUksRUFBRSxtQkFBbUI7UUFDekIsU0FBUyxFQUFFLDZCQUE2QjtRQUN4QyxXQUFXLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztLQUNsQztDQUNGLE9BVVM7SUFDUjtRQUNFLFNBQVMsRUFBRSxRQUFRLENBQUMsS0FBSztRQUN6QixTQUFTLEVBQUUsMEJBQTBCO1FBQ3JDLEtBQUssRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsUUFBUSxFQUFFLENBQUM7S0FDWjtJQUNEO1FBQ0UsU0FBUyxFQUFFLFFBQVEsQ0FBQyxLQUFLO1FBQ3pCLFNBQVMsRUFBRSwwQkFBMEI7UUFDckMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUNqQyxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLFFBQVEsRUFBRSxFQUFFO0tBQ2I7SUFDRDtRQUNFLFNBQVMsRUFBRSxRQUFRLENBQUMsS0FBSztRQUN6QixTQUFTLEVBQUUsMEJBQTBCO1FBQ3JDLEtBQUssRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFDaEMsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQixRQUFRLEVBQUUsRUFBRTtLQUNiO0lBQ0Q7UUFDRSxTQUFTLEVBQUUsUUFBUSxDQUFDLEtBQUs7UUFDekIsU0FBUyxFQUFFLDBCQUEwQjtRQUNyQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsYUFBYTtRQUN0QixRQUFRLEVBQUUsRUFBRTtLQUNiO0NBQ2E7QUFLdEIsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFZLE9BQTZCO1FBQ3ZDLG9DQUFvQztJQUN0QyxDQUFDOzs7WUF2RUYsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWiw2QkFBNkI7b0JBQzdCLDBCQUEwQjtvQkFDMUIsMEJBQTBCO29CQUMxQiwwQkFBMEI7b0JBQzFCLDBCQUEwQjtvQkFDMUIsc0JBQXNCO29CQUN0Qix1QkFBdUI7b0JBQ3ZCLDRCQUE0QjtvQkFDNUIsbUJBQW1CO29CQUNuQixtQ0FBbUM7aUJBQ3BDO2dCQUNELE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxhQUFhLEVBQUUsZUFBZSxDQUFDO2dCQUMxRSxTQUFTLEVBQUU7b0JBQ1Qsa0JBQWtCO29CQUNsQjt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxJQU1QO3dCQUNELEtBQUssRUFBRSxJQUFJO3FCQUNaO29CQUNEO3dCQUNFLE9BQU8sRUFBRSxvQkFBb0I7d0JBQzdCLFFBQVEsRUFBRSxrQkFBa0I7d0JBQzVCLEtBQUssRUFBRSxJQUFJO3FCQUNaO29CQUNEO3dCQUNFLE9BQU8sRUFBRSxZQUFZO3dCQUNyQixRQUFRLElBNkJRO3dCQUNoQixLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjthQUNGOzs7WUEvRVEsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIENvcmVNb2R1bGUsXG4gIGdldHRleHQsXG4gIEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICBIT09LX1JPVVRFLFxuICBIT09LX1NURVBQRVIsXG4gIFNldHVwU3RlcCxcbiAgU3RlcHBlcnNcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBc3NldFNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yJztcbmltcG9ydCB7IEVjb3N5c3RlbU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZWNvc3lzdGVtJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgQ29ja3BpdENvbmZpZ0d1YXJkIH0gZnJvbSAnLi9jb2NrcGl0LWNvbmZpZy5ndWFyZCc7XG5pbXBvcnQgeyBDT0NLUElUX0NPTkZJR19QQVRIIH0gZnJvbSAnLi9jb2NrcGl0LWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBDb2NrcGl0Q29uZmlnU2VydmljZSB9IGZyb20gJy4vY29ja3BpdC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBDb2NrcGl0Q29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vY29ja3BpdC1jb25maWd1cmF0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGZWF0dXJlQ29uZmlnQ29tcG9uZW50IH0gZnJvbSAnLi9mZWF0dXJlLWNvbmZpZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSG9tZURhc2hib2FyZENvbmZpZ0NvbXBvbmVudCB9IGZyb20gJy4vaG9tZS1kYXNoYm9hcmQtY29uZmlnLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNaXNjQ29uZmlnQ29tcG9uZW50IH0gZnJvbSAnLi9taXNjLWNvbmZpZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgUm9vdE5vZGVDb25maWdDb21wb25lbnQgfSBmcm9tICcuL3Jvb3Qtbm9kZS1jb25maWcuY29tcG9uZW50JztcbmltcG9ydCB7IENvY2twaXRTZXR1cFN0ZXAxQ29tcG9uZW50IH0gZnJvbSAnLi9zZXR1cC9jb2NrcGl0LXNldHVwLXN0ZXAxLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2NrcGl0U2V0dXBTdGVwMkNvbXBvbmVudCB9IGZyb20gJy4vc2V0dXAvY29ja3BpdC1zZXR1cC1zdGVwMi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29ja3BpdFNldHVwU3RlcDNDb21wb25lbnQgfSBmcm9tICcuL3NldHVwL2NvY2twaXQtc2V0dXAtc3RlcDMuY29tcG9uZW50JztcbmltcG9ydCB7IENvY2twaXRTZXR1cFN0ZXA0Q29tcG9uZW50IH0gZnJvbSAnLi9zZXR1cC9jb2NrcGl0LXNldHVwLXN0ZXA0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2NrcGl0U2V0dXBTdGVwcGVyQnV0dG9uc0NvbXBvbmVudCB9IGZyb20gJy4vc2V0dXAvY29ja3BpdC1zZXR1cC1zdGVwcGVyLWJ1dHRvbnMuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgQ29ja3BpdENvbmZpZ3VyYXRpb25Db21wb25lbnQsXG4gICAgQ29ja3BpdFNldHVwU3RlcDFDb21wb25lbnQsXG4gICAgQ29ja3BpdFNldHVwU3RlcDJDb21wb25lbnQsXG4gICAgQ29ja3BpdFNldHVwU3RlcDNDb21wb25lbnQsXG4gICAgQ29ja3BpdFNldHVwU3RlcDRDb21wb25lbnQsXG4gICAgRmVhdHVyZUNvbmZpZ0NvbXBvbmVudCxcbiAgICBSb290Tm9kZUNvbmZpZ0NvbXBvbmVudCxcbiAgICBIb21lRGFzaGJvYXJkQ29uZmlnQ29tcG9uZW50LFxuICAgIE1pc2NDb25maWdDb21wb25lbnQsXG4gICAgQ29ja3BpdFNldHVwU3RlcHBlckJ1dHRvbnNDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIEFzc2V0U2VsZWN0b3JNb2R1bGUsIFBvcG92ZXJNb2R1bGUsIEVjb3N5c3RlbU1vZHVsZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIENvY2twaXRDb25maWdHdWFyZCxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6IENPQ0tQSVRfQ09ORklHX1BBVEgsXG4gICAgICAgICAgY29tcG9uZW50OiBDb2NrcGl0Q29uZmlndXJhdGlvbkNvbXBvbmVudCxcbiAgICAgICAgICBjYW5BY3RpdmF0ZTogW0NvY2twaXRDb25maWdHdWFyZF1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgICAgIHVzZUNsYXNzOiBDb2NrcGl0Q29uZmlnR3VhcmQsXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19TVEVQUEVSLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHN0ZXBwZXJJZDogU3RlcHBlcnMuU0VUVVAsXG4gICAgICAgICAgY29tcG9uZW50OiBDb2NrcGl0U2V0dXBTdGVwMUNvbXBvbmVudCxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnRmVhdHVyZXMnKSxcbiAgICAgICAgICBzZXR1cElkOiAnY29ja3BpdEZlYXR1cmVzJyxcbiAgICAgICAgICBwcmlvcml0eTogMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgc3RlcHBlcklkOiBTdGVwcGVycy5TRVRVUCxcbiAgICAgICAgICBjb21wb25lbnQ6IENvY2twaXRTZXR1cFN0ZXAyQ29tcG9uZW50LFxuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdUb3AgbGV2ZWwgbm9kZXMnKSxcbiAgICAgICAgICBzZXR1cElkOiAnY29ja3BpdFRvcExldmVsTm9kZXMnLFxuICAgICAgICAgIHByaW9yaXR5OiAxMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgc3RlcHBlcklkOiBTdGVwcGVycy5TRVRVUCxcbiAgICAgICAgICBjb21wb25lbnQ6IENvY2twaXRTZXR1cFN0ZXAzQ29tcG9uZW50LFxuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdIb21lIERhc2hib2FyZCcpLFxuICAgICAgICAgIHNldHVwSWQ6ICdjb2NrcGl0SG9tZURhc2hib2FyZCcsXG4gICAgICAgICAgcHJpb3JpdHk6IDIwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzdGVwcGVySWQ6IFN0ZXBwZXJzLlNFVFVQLFxuICAgICAgICAgIGNvbXBvbmVudDogQ29ja3BpdFNldHVwU3RlcDRDb21wb25lbnQsXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ01pc2MnKSxcbiAgICAgICAgICBzZXR1cElkOiAnY29ja3BpdE1pc2MnLFxuICAgICAgICAgIHByaW9yaXR5OiAzMFxuICAgICAgICB9XG4gICAgICBdIGFzIFNldHVwU3RlcFtdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQ29ja3BpdENvbmZpZ01vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKHNlcnZpY2U6IENvY2twaXRDb25maWdTZXJ2aWNlKSB7XG4gICAgLy8gb25seSBmb3IgREksIG5vdCB1c2VkIGJ1dCBuZWVkZWQuXG4gIH1cbn1cbiJdfQ==