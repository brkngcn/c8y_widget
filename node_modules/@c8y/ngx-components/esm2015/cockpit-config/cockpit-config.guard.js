import { Injectable } from '@angular/core';
import { AppStateService, gettext, NavigatorNode, Permissions } from '@c8y/ngx-components';
import { EcosystemService } from '@c8y/ngx-components/ecosystem';
import { COCKPIT_CONFIG_PATH } from './cockpit-config.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/ecosystem";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/ngx-components/ecosystem';
export class CockpitConfigGuard {
    constructor(permissions, appState, ecosystemService) {
        this.permissions = permissions;
        this.appState = appState;
        this.ecosystemService = ecosystemService;
        this.configNode = new NavigatorNode({
            path: `/${COCKPIT_CONFIG_PATH}`,
            parent: gettext('Configuration'),
            label: gettext('App configuration'),
            icon: 'imac-settings',
            preventDuplicates: true
        });
    }
    get() {
        if (this.canActivate()) {
            return this.configNode;
        }
        return;
    }
    canActivate() {
        return (this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
            this.ecosystemService.isOwner(this.appState.currentApplication.value));
    }
}
CockpitConfigGuard.ɵfac = function CockpitConfigGuard_Factory(t) { return new (t || CockpitConfigGuard)(ɵngcc0.ɵɵinject(ɵngcc1.Permissions), ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc2.EcosystemService)); };
CockpitConfigGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function CockpitConfigGuard_Factory() { return new CockpitConfigGuard(i0.ɵɵinject(i1.Permissions), i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.EcosystemService)); }, token: CockpitConfigGuard, providedIn: "root" });
CockpitConfigGuard.ctorParameters = () => [
    { type: Permissions },
    { type: AppStateService },
    { type: EcosystemService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CockpitConfigGuard, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Permissions }, { type: ɵngcc1.AppStateService }, { type: ɵngcc2.EcosystemService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ja3BpdC1jb25maWcuZ3VhcmQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvY2twaXQtY29uZmlnL2NvY2twaXQtY29uZmlnLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUNMLGVBQWUsRUFDZixPQUFPLEVBQ1AsYUFBYSxFQUViLFdBQVcsRUFDWixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdEO0FBR0M7QUFDd0M7Ozs7QUFBekMsTUFBTSxPQUFPLGtCQUFrQjtBQUFHLElBU2hDLFlBQ1UsV0FBd0IsRUFDeEIsUUFBeUIsRUFDekIsZ0JBQWtDO0FBQzNDLFFBSFMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7QUFBQyxRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtBQUFDLFFBQzFCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFDOUMsUUFacUIsZUFBVSxHQUFrQixJQUFJLGFBQWEsQ0FBQztBQUNuRSxZQUFJLElBQUksRUFBRSxJQUFJLG1CQUFtQixFQUFFO0FBQ25DLFlBQUksTUFBTSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDcEMsWUFBSSxLQUFLLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ3ZDLFlBQUksSUFBSSxFQUFFLGVBQWU7QUFDekIsWUFBSSxpQkFBaUIsRUFBRSxJQUFJO0FBQzNCLFNBQUcsQ0FBQyxDQUFDO0FBQ0wsSUFLSyxDQUFDO0FBQ04sSUFDRSxHQUFHO0FBQUssUUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtBQUM1QixZQUFNLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUM3QixTQUFLO0FBQ0wsUUFBSSxPQUFPO0FBQ1gsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQUssUUFDZCxPQUFPLENBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUM7QUFDbkUsWUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQ3RFLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDttT0FBQztBQUNELHVSQTdCSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUdzQyxZQVJoRCxXQUFXO1lBTVgsVUFBVSxFQUFFLE1BQU0sOUJBTGpCLFlBTEQsZUFBZTthQVdoQixiQVZDLFlBS08sZ0JBQWdCO0FBQUc7Ozs7OztpSkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FuQWN0aXZhdGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgQXBwU3RhdGVTZXJ2aWNlLFxuICBnZXR0ZXh0LFxuICBOYXZpZ2F0b3JOb2RlLFxuICBOYXZpZ2F0b3JOb2RlRmFjdG9yeSxcbiAgUGVybWlzc2lvbnNcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBFY29zeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9lY29zeXN0ZW0nO1xuaW1wb3J0IHsgQ09DS1BJVF9DT05GSUdfUEFUSCB9IGZyb20gJy4vY29ja3BpdC1jb25maWcubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb2NrcGl0Q29uZmlnR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSwgTmF2aWdhdG9yTm9kZUZhY3Rvcnkge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29uZmlnTm9kZTogTmF2aWdhdG9yTm9kZSA9IG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICBwYXRoOiBgLyR7Q09DS1BJVF9DT05GSUdfUEFUSH1gLFxuICAgIHBhcmVudDogZ2V0dGV4dCgnQ29uZmlndXJhdGlvbicpLFxuICAgIGxhYmVsOiBnZXR0ZXh0KCdBcHAgY29uZmlndXJhdGlvbicpLFxuICAgIGljb246ICdpbWFjLXNldHRpbmdzJyxcbiAgICBwcmV2ZW50RHVwbGljYXRlczogdHJ1ZVxuICB9KTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHBlcm1pc3Npb25zOiBQZXJtaXNzaW9ucyxcbiAgICBwcml2YXRlIGFwcFN0YXRlOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlY29zeXN0ZW1TZXJ2aWNlOiBFY29zeXN0ZW1TZXJ2aWNlXG4gICkge31cblxuICBnZXQoKTogTmF2aWdhdG9yTm9kZSB7XG4gICAgaWYgKHRoaXMuY2FuQWN0aXZhdGUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29uZmlnTm9kZTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2FuQWN0aXZhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucGVybWlzc2lvbnMuaGFzUm9sZSgnUk9MRV9BUFBMSUNBVElPTl9NQU5BR0VNRU5UX0FETUlOJykgJiZcbiAgICAgIHRoaXMuZWNvc3lzdGVtU2VydmljZS5pc093bmVyKHRoaXMuYXBwU3RhdGUuY3VycmVudEFwcGxpY2F0aW9uLnZhbHVlKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==