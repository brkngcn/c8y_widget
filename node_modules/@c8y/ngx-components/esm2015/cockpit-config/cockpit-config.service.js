import { __awaiter } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { AppStateService, NavigatorService, OptionsService, Permissions, SearchService, TabsService } from '@c8y/ngx-components';
import { AssetNodeService, ASSET_NAVIGATOR_CONFIG } from '@c8y/ngx-components/assets-navigator';
import { isUndefined, startCase } from 'lodash-es';
import { map } from 'rxjs/operators';
import { DEFAULT_CONFIG, DEFAULT_HOME_DASHBOARD_NAME } from './cockpit-config.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/assets-navigator";
import * as i3 from "@c8y/client/lib/src/inventory/InventoryService";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/ngx-components/assets-navigator';
import * as ɵngcc3 from '@c8y/client';
export class CockpitConfigService {
    constructor(navigatorService, tabsService, searchService, assetNodeService, inventoryService, appState, optionsService, permissions, moduleConfig) {
        this.navigatorService = navigatorService;
        this.tabsService = tabsService;
        this.searchService = searchService;
        this.assetNodeService = assetNodeService;
        this.inventoryService = inventoryService;
        this.appState = appState;
        this.optionsService = optionsService;
        this.permissions = permissions;
        this.moduleConfig = moduleConfig;
        this.currentConfig = DEFAULT_CONFIG;
        this.nodes = [];
        this.DEFAULT_NODE_PRIORITY = 2000;
        this.registerFilterForFeatures();
        this.init();
    }
    get excludedFeatureKeys() {
        return Object.keys(this.currentConfig.features).filter(key => !this.currentConfig.features[key]);
    }
    init() {
        this.appState.currentApplicationConfig.subscribe(config => {
            if (config) {
                this.currentConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);
                this.setRootNodes();
            }
        });
    }
    saveConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentConfig = config;
            yield this.storeApplicationConfig(this.currentConfig);
        });
    }
    refresh() {
        this.optionsService.hideNavigator = this.currentConfig.hideNavigator;
        this.navigatorService.refresh();
        this.searchService.refresh();
    }
    setRootNodes() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.addNodesToFactories();
            for (const node of this.currentConfig.rootNodes) {
                const { data } = yield this.inventoryService.detail(node.id);
                if (data) {
                    this.nodes.push(this.assetNodeService.createAssetNode({
                        mo: data,
                        hideDevices: node.hideDevices,
                        priority: isUndefined((_a = this.moduleConfig) === null || _a === void 0 ? void 0 : _a.rootNodePriority)
                            ? this.DEFAULT_NODE_PRIORITY
                            : this.moduleConfig.rootNodePriority
                    }));
                }
            }
            this.refresh();
        });
    }
    getAppDashboardName() {
        return `${DEFAULT_HOME_DASHBOARD_NAME.substring(0, DEFAULT_HOME_DASHBOARD_NAME.length - 1)}_${this.appState.state.app.id}`;
    }
    storeApplicationConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appState.updateApplicationConfig(config);
        });
    }
    addNodesToFactories() {
        const nodeInFactories = this.navigatorService.factories.find(nodes => nodes === this.nodes);
        const isNodeAlreadyInFactories = !!nodeInFactories;
        if (isNodeAlreadyInFactories) {
            this.nodes = nodeInFactories;
            this.nodes.length = 0;
        }
        else {
            this.navigatorService.factories.push(this.nodes);
        }
    }
    registerFilterForFeatures() {
        this.navigatorService.items$ = this.navigatorService.items$.pipe(map(nodes => this.setHiddenAttrLock(nodes)), map(nodes => this.filterNavigatorNode(nodes)));
        this.tabsService.items$ = this.tabsService.items$.pipe(map(tabs => this.filterTabs(tabs)));
        this.searchService.items$ = this.searchService.items$.pipe(map(search => (this.currentConfig.features.search ? search : [])));
    }
    setHiddenAttrLock(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (!this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
                        childNode.lockHiddenAttr === undefined &&
                        childNode.hidden === true) {
                        childNode.lockHiddenAttr = childNode.hidden;
                    }
                }
            });
        });
        return nodes;
    }
    filterTabs(tabs) {
        return tabs.filter(tab => !this.excludedFeatureKeys.some(key => tab.featureId === key));
    }
    filterNavigatorNode(nodes) {
        if (!this.currentConfig) {
            return nodes;
        }
        const disabledFeatures = this.excludedFeatureKeys;
        const filteredNodes = nodes.filter(node => !disabledFeatures.some(key => node.featureId === key));
        this.showAllChildrenNodes(nodes);
        this.hideChildrenNodesThatAreDisabled(nodes, disabledFeatures);
        return filteredNodes;
    }
    hideChildrenNodesThatAreDisabled(nodes, disabledFeatures) {
        nodes.forEach(node => disabledFeatures.forEach(key => {
            const childNode = node.find(key, 'featureId');
            if (childNode) {
                childNode.hidden = true;
            }
        }));
    }
    showAllChildrenNodes(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (childNode.lockHiddenAttr === true) {
                        return;
                    }
                    childNode.hidden = false;
                }
            });
        });
    }
}
CockpitConfigService.ɵfac = function CockpitConfigService_Factory(t) { return new (t || CockpitConfigService)(ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc1.TabsService), ɵngcc0.ɵɵinject(ɵngcc1.SearchService), ɵngcc0.ɵɵinject(ɵngcc2.AssetNodeService), ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc1.OptionsService), ɵngcc0.ɵɵinject(ɵngcc1.Permissions), ɵngcc0.ɵɵinject(ASSET_NAVIGATOR_CONFIG, 8)); };
CockpitConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CockpitConfigService_Factory() { return new CockpitConfigService(i0.ɵɵinject(i1.NavigatorService), i0.ɵɵinject(i1.TabsService), i0.ɵɵinject(i1.SearchService), i0.ɵɵinject(i2.AssetNodeService), i0.ɵɵinject(i3.InventoryService), i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i1.OptionsService), i0.ɵɵinject(i1.Permissions), i0.ɵɵinject(i2.ASSET_NAVIGATOR_CONFIG, 8)); }, token: CockpitConfigService, providedIn: "root" });
CockpitConfigService.ctorParameters = () => [
    { type: NavigatorService },
    { type: TabsService },
    { type: SearchService },
    { type: AssetNodeService },
    { type: InventoryService },
    { type: AppStateService },
    { type: OptionsService },
    { type: Permissions },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CockpitConfigService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NavigatorService }, { type: ɵngcc1.TabsService }, { type: ɵngcc1.SearchService }, { type: ɵngcc2.AssetNodeService }, { type: ɵngcc3.InventoryService }, { type: ɵngcc1.AppStateService }, { type: ɵngcc1.OptionsService }, { type: ɵngcc1.Permissions }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ASSET_NAVIGATOR_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ja3BpdC1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29ja3BpdC1jb25maWcvY29ja3BpdC1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQ0wsZUFBZSxFQUVmLGdCQUFnQixFQUNoQixjQUFjLEVBQ2QsV0FBVyxFQUNYLGFBQWEsRUFFYixXQUFXLEVBQ1osTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBRUwsZ0JBQWdCLEVBQ2hCLHNCQUFzQixFQUN2QixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25ELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQWlCLGNBQWMsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3BHO0FBR0M7QUFFSTtBQUNXOzs7OztBQUZoQixNQUFNLE9BQU8sb0JBQW9CO0FBQ2pDLElBV0UsWUFDVSxnQkFBa0MsRUFDbEMsV0FBd0IsRUFDeEIsYUFBNEIsRUFDNUIsZ0JBQWtDLEVBQ2xDLGdCQUFrQyxFQUNsQyxRQUF5QixFQUN6QixjQUE4QixFQUM5QixXQUF3QixFQUNtQixZQUFrQztBQUN0RixRQVRTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtBQUFDLFFBQ3pCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsUUFDN0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ25DLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxh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WCw0Q0FxQ0csUUFBUSxZQUFJLE1BQU0sU0FBQyxzQkFBc0I7QUFBUTs7Ozs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEludmVudG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQge1xuICBBcHBTdGF0ZVNlcnZpY2UsXG4gIE5hdmlnYXRvck5vZGUsXG4gIE5hdmlnYXRvclNlcnZpY2UsXG4gIE9wdGlvbnNTZXJ2aWNlLFxuICBQZXJtaXNzaW9ucyxcbiAgU2VhcmNoU2VydmljZSxcbiAgVGFiLFxuICBUYWJzU2VydmljZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7XG4gIEFzc2V0TmF2aWdhdG9yQ29uZmlnLFxuICBBc3NldE5vZGVTZXJ2aWNlLFxuICBBU1NFVF9OQVZJR0FUT1JfQ09ORklHXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvcic7XG5pbXBvcnQgeyBpc1VuZGVmaW5lZCwgc3RhcnRDYXNlIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENvY2twaXRDb25maWcsIERFRkFVTFRfQ09ORklHLCBERUZBVUxUX0hPTUVfREFTSEJPQVJEX05BTUUgfSBmcm9tICcuL2NvY2twaXQtY29uZmlnLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29ja3BpdENvbmZpZ1NlcnZpY2Uge1xuICBjdXJyZW50Q29uZmlnOiBDb2NrcGl0Q29uZmlnID0gREVGQVVMVF9DT05GSUc7XG4gIG5vZGVzOiBOYXZpZ2F0b3JOb2RlW10gPSBbXTtcblxuICBwcml2YXRlIHJlYWRvbmx5IERFRkFVTFRfTk9ERV9QUklPUklUWSA9IDIwMDA7XG5cbiAgZ2V0IGV4Y2x1ZGVkRmVhdHVyZUtleXMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY3VycmVudENvbmZpZy5mZWF0dXJlcykuZmlsdGVyKFxuICAgICAga2V5ID0+ICF0aGlzLmN1cnJlbnRDb25maWcuZmVhdHVyZXNba2V5XVxuICAgICk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5hdmlnYXRvclNlcnZpY2U6IE5hdmlnYXRvclNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0YWJzU2VydmljZTogVGFic1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBzZWFyY2hTZXJ2aWNlOiBTZWFyY2hTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXNzZXROb2RlU2VydmljZTogQXNzZXROb2RlU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgb3B0aW9uc1NlcnZpY2U6IE9wdGlvbnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQVNTRVRfTkFWSUdBVE9SX0NPTkZJRykgcHVibGljIG1vZHVsZUNvbmZpZzogQXNzZXROYXZpZ2F0b3JDb25maWdcbiAgKSB7XG4gICAgdGhpcy5yZWdpc3RlckZpbHRlckZvckZlYXR1cmVzKCk7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYXBwU3RhdGUuY3VycmVudEFwcGxpY2F0aW9uQ29uZmlnLnN1YnNjcmliZShjb25maWcgPT4ge1xuICAgICAgaWYgKGNvbmZpZykge1xuICAgICAgICB0aGlzLmN1cnJlbnRDb25maWcgPSB7IC4uLkRFRkFVTFRfQ09ORklHLCAuLi5jb25maWcgfSBhcyBDb2NrcGl0Q29uZmlnO1xuICAgICAgICB0aGlzLnNldFJvb3ROb2RlcygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2F2ZUNvbmZpZyhjb25maWcpIHtcbiAgICB0aGlzLmN1cnJlbnRDb25maWcgPSBjb25maWc7XG4gICAgYXdhaXQgdGhpcy5zdG9yZUFwcGxpY2F0aW9uQ29uZmlnKHRoaXMuY3VycmVudENvbmZpZyk7XG4gIH1cblxuICByZWZyZXNoKCkge1xuICAgIHRoaXMub3B0aW9uc1NlcnZpY2UuaGlkZU5hdmlnYXRvciA9IHRoaXMuY3VycmVudENvbmZpZy5oaWRlTmF2aWdhdG9yO1xuICAgIHRoaXMubmF2aWdhdG9yU2VydmljZS5yZWZyZXNoKCk7XG4gICAgdGhpcy5zZWFyY2hTZXJ2aWNlLnJlZnJlc2goKTtcbiAgfVxuXG4gIGFzeW5jIHNldFJvb3ROb2RlcygpIHtcbiAgICB0aGlzLmFkZE5vZGVzVG9GYWN0b3JpZXMoKTtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5jdXJyZW50Q29uZmlnLnJvb3ROb2Rlcykge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuZGV0YWlsKG5vZGUuaWQpO1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKFxuICAgICAgICAgIHRoaXMuYXNzZXROb2RlU2VydmljZS5jcmVhdGVBc3NldE5vZGUoe1xuICAgICAgICAgICAgbW86IGRhdGEsXG4gICAgICAgICAgICBoaWRlRGV2aWNlczogbm9kZS5oaWRlRGV2aWNlcyxcbiAgICAgICAgICAgIHByaW9yaXR5OiBpc1VuZGVmaW5lZCh0aGlzLm1vZHVsZUNvbmZpZz8ucm9vdE5vZGVQcmlvcml0eSlcbiAgICAgICAgICAgICAgPyB0aGlzLkRFRkFVTFRfTk9ERV9QUklPUklUWVxuICAgICAgICAgICAgICA6IHRoaXMubW9kdWxlQ29uZmlnLnJvb3ROb2RlUHJpb3JpdHlcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlZnJlc2goKTtcbiAgfVxuXG4gIGdldEFwcERhc2hib2FyZE5hbWUoKSB7XG4gICAgcmV0dXJuIGAke0RFRkFVTFRfSE9NRV9EQVNIQk9BUkRfTkFNRS5zdWJzdHJpbmcoMCwgREVGQVVMVF9IT01FX0RBU0hCT0FSRF9OQU1FLmxlbmd0aCAtIDEpfV8ke1xuICAgICAgdGhpcy5hcHBTdGF0ZS5zdGF0ZS5hcHAuaWRcbiAgICB9YDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc3RvcmVBcHBsaWNhdGlvbkNvbmZpZyhjb25maWc6IENvY2twaXRDb25maWcpIHtcbiAgICBhd2FpdCB0aGlzLmFwcFN0YXRlLnVwZGF0ZUFwcGxpY2F0aW9uQ29uZmlnPENvY2twaXRDb25maWc+KGNvbmZpZyk7XG4gIH1cblxuICBwcml2YXRlIGFkZE5vZGVzVG9GYWN0b3JpZXMoKSB7XG4gICAgY29uc3Qgbm9kZUluRmFjdG9yaWVzID0gdGhpcy5uYXZpZ2F0b3JTZXJ2aWNlLmZhY3Rvcmllcy5maW5kKFxuICAgICAgbm9kZXMgPT4gbm9kZXMgPT09IHRoaXMubm9kZXNcbiAgICApIGFzIE5hdmlnYXRvck5vZGVbXTtcbiAgICBjb25zdCBpc05vZGVBbHJlYWR5SW5GYWN0b3JpZXMgPSAhIW5vZGVJbkZhY3RvcmllcztcbiAgICBpZiAoaXNOb2RlQWxyZWFkeUluRmFjdG9yaWVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZUluRmFjdG9yaWVzO1xuICAgICAgdGhpcy5ub2Rlcy5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hdmlnYXRvclNlcnZpY2UuZmFjdG9yaWVzLnB1c2godGhpcy5ub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWdpc3RlckZpbHRlckZvckZlYXR1cmVzKCkge1xuICAgIHRoaXMubmF2aWdhdG9yU2VydmljZS5pdGVtcyQgPSB0aGlzLm5hdmlnYXRvclNlcnZpY2UuaXRlbXMkLnBpcGUoXG4gICAgICBtYXAobm9kZXMgPT4gdGhpcy5zZXRIaWRkZW5BdHRyTG9jayhub2RlcykpLFxuICAgICAgbWFwKG5vZGVzID0+IHRoaXMuZmlsdGVyTmF2aWdhdG9yTm9kZShub2RlcykpXG4gICAgKTtcbiAgICB0aGlzLnRhYnNTZXJ2aWNlLml0ZW1zJCA9IHRoaXMudGFic1NlcnZpY2UuaXRlbXMkLnBpcGUobWFwKHRhYnMgPT4gdGhpcy5maWx0ZXJUYWJzKHRhYnMpKSk7XG4gICAgdGhpcy5zZWFyY2hTZXJ2aWNlLml0ZW1zJCA9IHRoaXMuc2VhcmNoU2VydmljZS5pdGVtcyQucGlwZShcbiAgICAgIG1hcChzZWFyY2ggPT4gKHRoaXMuY3VycmVudENvbmZpZy5mZWF0dXJlcy5zZWFyY2ggPyBzZWFyY2ggOiBbXSkpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SGlkZGVuQXR0ckxvY2sobm9kZXMpIHtcbiAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5jdXJyZW50Q29uZmlnLmZlYXR1cmVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5vZGUuZmluZChzdGFydENhc2Uoa2V5KS50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgICBpZiAoY2hpbGROb2RlKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMucGVybWlzc2lvbnMuaGFzUm9sZSgnUk9MRV9BUFBMSUNBVElPTl9NQU5BR0VNRU5UX0FETUlOJykgJiZcbiAgICAgICAgICAgIGNoaWxkTm9kZS5sb2NrSGlkZGVuQXR0ciA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBjaGlsZE5vZGUuaGlkZGVuID09PSB0cnVlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjaGlsZE5vZGUubG9ja0hpZGRlbkF0dHIgPSBjaGlsZE5vZGUuaGlkZGVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJUYWJzKHRhYnM6IFRhYltdKSB7XG4gICAgcmV0dXJuIHRhYnMuZmlsdGVyKFxuICAgICAgdGFiID0+ICF0aGlzLmV4Y2x1ZGVkRmVhdHVyZUtleXMuc29tZShrZXkgPT4gdGFiLmZlYXR1cmVJZCA9PT0ga2V5KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlck5hdmlnYXRvck5vZGUobm9kZXM6IE5hdmlnYXRvck5vZGVbXSkge1xuICAgIGlmICghdGhpcy5jdXJyZW50Q29uZmlnKSB7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGNvbnN0IGRpc2FibGVkRmVhdHVyZXMgPSB0aGlzLmV4Y2x1ZGVkRmVhdHVyZUtleXM7XG4gICAgY29uc3QgZmlsdGVyZWROb2RlcyA9IG5vZGVzLmZpbHRlcihcbiAgICAgIG5vZGUgPT4gIWRpc2FibGVkRmVhdHVyZXMuc29tZShrZXkgPT4gbm9kZS5mZWF0dXJlSWQgPT09IGtleSlcbiAgICApO1xuXG4gICAgdGhpcy5zaG93QWxsQ2hpbGRyZW5Ob2Rlcyhub2Rlcyk7XG4gICAgdGhpcy5oaWRlQ2hpbGRyZW5Ob2Rlc1RoYXRBcmVEaXNhYmxlZChub2RlcywgZGlzYWJsZWRGZWF0dXJlcyk7XG4gICAgcmV0dXJuIGZpbHRlcmVkTm9kZXM7XG4gIH1cblxuICBwcml2YXRlIGhpZGVDaGlsZHJlbk5vZGVzVGhhdEFyZURpc2FibGVkKG5vZGVzOiBOYXZpZ2F0b3JOb2RlW10sIGRpc2FibGVkRmVhdHVyZXM6IHN0cmluZ1tdKSB7XG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+XG4gICAgICBkaXNhYmxlZEZlYXR1cmVzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbm9kZS5maW5kKGtleSwgJ2ZlYXR1cmVJZCcpO1xuICAgICAgICBpZiAoY2hpbGROb2RlKSB7XG4gICAgICAgICAgY2hpbGROb2RlLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvd0FsbENoaWxkcmVuTm9kZXMobm9kZXM6IE5hdmlnYXRvck5vZGVbXSkge1xuICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmN1cnJlbnRDb25maWcuZmVhdHVyZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbm9kZS5maW5kKHN0YXJ0Q2FzZShrZXkpLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgICAgICBpZiAoY2hpbGROb2RlLmxvY2tIaWRkZW5BdHRyID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGROb2RlLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19