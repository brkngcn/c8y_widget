import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ConfigurationListComponent } from './configuration-list.component';
import { ConfigurationDetailComponent } from './configuration-detail.component';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { ConfigurationRepositoryNavigationFactory } from './configuration-repository-navigation-factory';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
export class ConfigurationRepositoryListModule {
    static forRoot() {
        return {
            ngModule: ConfigurationRepositoryListModule,
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: ConfigurationRepositoryNavigationFactory,
                    multi: true
                },
                {
                    provide: HOOK_ROUTE,
                    useValue: [
                        {
                            path: 'configuration',
                            component: ConfigurationListComponent
                        },
                    ],
                    multi: true
                }
            ]
        };
    }
}
ConfigurationRepositoryListModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CoreModule,
                    SharedRepositoryModule,
                    TooltipModule
                ],
                declarations: [
                    ConfigurationListComponent,
                    ConfigurationDetailComponent,
                ],
                entryComponents: [
                    ConfigurationListComponent,
                    ConfigurationDetailComponent,
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1yZXBvc2l0b3J5LWxpc3QubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcmVwb3NpdG9yeS9jb25maWd1cmF0aW9uL2xpc3QvY29uZmlndXJhdGlvbi1yZXBvc2l0b3J5LWxpc3QubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBUyxNQUFNLHFCQUFxQixDQUFDO0FBQzFGLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQWtCdEQsTUFBTSxPQUFPLGlDQUFpQztJQUM1QyxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsaUNBQWlDO1lBQzNDLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixRQUFRLEVBQUUsd0NBQXdDO29CQUNsRCxLQUFLLEVBQUUsSUFBSTtpQkFDWjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsVUFBVTtvQkFDbkIsUUFBUSxFQUFFO3dCQUNSOzRCQUNFLElBQUksRUFBRSxlQUFlOzRCQUNyQixTQUFTLEVBQUUsMEJBQTBCO3lCQUN0QztxQkFDUztvQkFDWixLQUFLLEVBQUUsSUFBSTtpQkFDWjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXRDRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osVUFBVTtvQkFDVixzQkFBc0I7b0JBQ3RCLGFBQWE7aUJBQ2Q7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLDBCQUEwQjtvQkFDMUIsNEJBQTRCO2lCQUM3QjtnQkFDRCxlQUFlLEVBQUU7b0JBQ2YsMEJBQTBCO29CQUMxQiw0QkFBNEI7aUJBQzdCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25MaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb25maWd1cmF0aW9uLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25EZXRhaWxDb21wb25lbnQgfSBmcm9tICcuL2NvbmZpZ3VyYXRpb24tZGV0YWlsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBIT09LX05BVklHQVRPUl9OT0RFUywgSE9PS19ST1VURSwgUm91dGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25SZXBvc2l0b3J5TmF2aWdhdGlvbkZhY3RvcnkgfSBmcm9tICcuL2NvbmZpZ3VyYXRpb24tcmVwb3NpdG9yeS1uYXZpZ2F0aW9uLWZhY3RvcnknO1xuaW1wb3J0IHsgU2hhcmVkUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeS9zaGFyZWQnO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvdG9vbHRpcCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQ29yZU1vZHVsZSxcbiAgICBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlLFxuICAgIFRvb2x0aXBNb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgQ29uZmlndXJhdGlvbkxpc3RDb21wb25lbnQsXG4gICAgQ29uZmlndXJhdGlvbkRldGFpbENvbXBvbmVudCxcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgQ29uZmlndXJhdGlvbkxpc3RDb21wb25lbnQsXG4gICAgQ29uZmlndXJhdGlvbkRldGFpbENvbXBvbmVudCxcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uUmVwb3NpdG9yeUxpc3RNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENvbmZpZ3VyYXRpb25SZXBvc2l0b3J5TGlzdE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQ29uZmlndXJhdGlvblJlcG9zaXRvcnlMaXN0TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgICAgICAgICB1c2VDbGFzczogQ29uZmlndXJhdGlvblJlcG9zaXRvcnlOYXZpZ2F0aW9uRmFjdG9yeSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgICAgICB1c2VWYWx1ZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwYXRoOiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgICAgICAgIGNvbXBvbmVudDogQ29uZmlndXJhdGlvbkxpc3RDb21wb25lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSBhcyBSb3V0ZVtdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=