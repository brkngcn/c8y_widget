import { __awaiter, __decorate } from "tslib";
import { AlertService } from '@c8y/ngx-components';
import { Component, Input } from '@angular/core';
import { RepositoryService } from '../repository.service';
import { memoize } from '@c8y/ngx-components';
import { saveAs } from 'file-saver';
import { InventoryBinaryService } from '@c8y/client';
import { LinkRenderType } from './link-render-type.enum';
export class FileDownloadComponent {
    constructor(repositoryService, inventoryBinaryService, alertService) {
        this.repositoryService = repositoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.alertService = alertService;
        this.linkRenderType = LinkRenderType;
        this.isDownloading = false;
    }
    getBinaryName$(binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    }
    determineBehavior() {
        let result;
        if (this.inventoryBinaryService.getIdFromUrl(this.url)) {
            result = LinkRenderType.DOWNLOAD;
        }
        else if (this.url.match(/\/\//g)) {
            result = LinkRenderType.LINK;
        }
        else {
            result = LinkRenderType.TEXTONLY;
        }
        return result;
    }
    downloadFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.isDownloading = true;
                const binary = yield this.repositoryService.getBinaryFile(this.url, {
                    allowExternal: false
                });
                this.isDownloading = false;
                saveAs(binary);
            }
            catch (ex) {
                this.isDownloading = false;
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
}
FileDownloadComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-file-download',
                template: "<a\n  *ngIf=\"determineBehavior() === linkRenderType.LINK\"\n  href=\"{{ url }}\"\n  class=\"pointer\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n  {{ getBinaryName$(url) | async }}\n</a>\n\n<span *ngIf=\"determineBehavior() === linkRenderType.TEXTONLY\">{{\n  getBinaryName$(url) | async\n}}</span>\n\n<span *ngIf=\"determineBehavior() === linkRenderType.DOWNLOAD\">\n  <a *ngIf=\"!isDownloading\" class=\"pointer\" (click)=\"downloadFile()\">\n    {{ getBinaryName$(url) | async }}\n  </a>\n\n  <span *ngIf=\"isDownloading\">\n    <i c8yIcon=\"spinner\" class=\"icon-spin\"></i> {{ 'Downloading\u2026' | translate }}\n  </span>\n</span>\n"
            },] }
];
FileDownloadComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: InventoryBinaryService },
    { type: AlertService }
];
FileDownloadComponent.propDecorators = {
    url: [{ type: Input }]
};
__decorate([
    memoize()
], FileDownloadComponent.prototype, "getBinaryName$", null);
__decorate([
    memoize()
], FileDownloadComponent.prototype, "determineBehavior", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1kb3dubG9hZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NoYXJlZC9maWxlLWRvd25sb2FkL2ZpbGUtZG93bmxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU16RCxNQUFNLE9BQU8scUJBQXFCO0lBSWhDLFlBQ1UsaUJBQW9DLEVBQ3BDLHNCQUE4QyxFQUM5QyxZQUEwQjtRQUYxQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFMcEMsbUJBQWMsR0FBRyxjQUFjLENBQUM7UUFDaEMsa0JBQWEsR0FBRyxLQUFLLENBQUM7SUFLbkIsQ0FBQztJQUdKLGNBQWMsQ0FBQyxTQUFTO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBR0QsaUJBQWlCO1FBQ2YsSUFBSSxNQUFzQixDQUFDO1FBQzNCLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEQsTUFBTSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7U0FDbEM7YUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDO1NBQzlCO2FBQU07WUFDTCxNQUFNLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUNsQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFSyxZQUFZOztZQUNoQixJQUFJO2dCQUNGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO2dCQUMxQixNQUFNLE1BQU0sR0FBUyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtvQkFDeEUsYUFBYSxFQUFFLEtBQUs7aUJBQ3JCLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2hCO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7Z0JBQzNCLElBQUksRUFBRSxFQUFFO29CQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3hDO2FBQ0Y7UUFDSCxDQUFDO0tBQUE7OztZQTlDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IseXBCQUE2QzthQUM5Qzs7O1lBVFEsaUJBQWlCO1lBR2pCLHNCQUFzQjtZQUx0QixZQUFZOzs7a0JBYWxCLEtBQUs7O0FBVU47SUFEQyxPQUFPLEVBQUU7MkRBR1Q7QUFHRDtJQURDLE9BQU8sRUFBRTs4REFXVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeVNlcnZpY2UgfSBmcm9tICcuLi9yZXBvc2l0b3J5LnNlcnZpY2UnO1xuaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5pbXBvcnQgeyBJbnZlbnRvcnlCaW5hcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgTGlua1JlbmRlclR5cGUgfSBmcm9tICcuL2xpbmstcmVuZGVyLXR5cGUuZW51bSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1maWxlLWRvd25sb2FkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbGUtZG93bmxvYWQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVEb3dubG9hZENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuICBsaW5rUmVuZGVyVHlwZSA9IExpbmtSZW5kZXJUeXBlO1xuICBpc0Rvd25sb2FkaW5nID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVwb3NpdG9yeVNlcnZpY2U6IFJlcG9zaXRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5QmluYXJ5U2VydmljZTogSW52ZW50b3J5QmluYXJ5U2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlXG4gICkge31cblxuICBAbWVtb2l6ZSgpXG4gIGdldEJpbmFyeU5hbWUkKGJpbmFyeVVybCkge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJpbmFyeU5hbWUkKGJpbmFyeVVybCk7XG4gIH1cblxuICBAbWVtb2l6ZSgpXG4gIGRldGVybWluZUJlaGF2aW9yKCk6IExpbmtSZW5kZXJUeXBlIHtcbiAgICBsZXQgcmVzdWx0OiBMaW5rUmVuZGVyVHlwZTtcbiAgICBpZiAodGhpcy5pbnZlbnRvcnlCaW5hcnlTZXJ2aWNlLmdldElkRnJvbVVybCh0aGlzLnVybCkpIHtcbiAgICAgIHJlc3VsdCA9IExpbmtSZW5kZXJUeXBlLkRPV05MT0FEO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cmwubWF0Y2goL1xcL1xcLy9nKSkge1xuICAgICAgcmVzdWx0ID0gTGlua1JlbmRlclR5cGUuTElOSztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gTGlua1JlbmRlclR5cGUuVEVYVE9OTFk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyBkb3dubG9hZEZpbGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IHRydWU7XG4gICAgICBjb25zdCBiaW5hcnk6IEZpbGUgPSBhd2FpdCB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJpbmFyeUZpbGUodGhpcy51cmwsIHtcbiAgICAgICAgYWxsb3dFeHRlcm5hbDogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgdGhpcy5pc0Rvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgICBzYXZlQXMoYmluYXJ5KTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy5pc0Rvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgICBpZiAoZXgpIHtcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=