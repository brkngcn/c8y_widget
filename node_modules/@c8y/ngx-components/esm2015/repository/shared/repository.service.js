import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { EventBinaryService, EventService, InventoryBinaryService, InventoryService, OperationService, OperationStatus, QueriesUtil } from '@c8y/client';
import { AlertService, gettext, OperationRealtimeService } from '@c8y/ngx-components';
import { assign, cloneDeep, find, forEach, get, head, isNil, isString, isUndefined, map as _map, omitBy, pick, remove, set } from 'lodash-es';
import { defer, from, merge, of, throwError } from 'rxjs';
import { filter, map, switchMap, take, takeWhile, withLatestFrom } from 'rxjs/operators';
import { AdvancedSoftwareService } from './advanced-software.service';
import { RepositoryType, REPOSITORY_BINARY_TYPES } from './repository.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from './advanced-software.service';
export class RepositoryService {
    constructor(inventory, inventoryBinary, operation, alert, event, operationRealtime, eventBinary, advancedSoftwareService) {
        this.inventory = inventory;
        this.inventoryBinary = inventoryBinary;
        this.operation = operation;
        this.alert = alert;
        this.event = event;
        this.operationRealtime = operationRealtime;
        this.eventBinary = eventBinary;
        this.advancedSoftwareService = advancedSoftwareService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.queriesUtil = new QueriesUtil();
    }
    /**
     * Lists repository entries of given type.
     * @param type The type of repository entries to list.
     * @param options Extra listing options.
     */
    listRepositoryEntries(type, options) {
        const defaultOrder = [{ name: 1 }];
        const defaultFilters = { type };
        const legacyFilters = { __has: `url` };
        let filters = {};
        let fullQuery = (options && options.query) || {};
        if (!options || (options && !options.skipDefaultOrder)) {
            fullQuery = this.queriesUtil.addOrderbys(fullQuery, defaultOrder, 'prepend');
        }
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, defaultFilters);
        if (options && options.partialTextFilter) {
            const { partialText, properties } = options.partialTextFilter;
            const orFilter = { __or: properties.map(property => ({ [property]: `*${partialText}*` })) };
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, orFilter);
        }
        if (options && options.partialName) {
            // backwards compatibility if
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, { name: `*${options.partialName}*` });
        }
        if (options && options.skipLegacy) {
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, { __not: legacyFilters });
        }
        filters = Object.assign({ query: this.queriesUtil.buildQuery(fullQuery), pageSize: 50, withTotalPages: true }, ((options && options.params) || {}));
        return this.inventory.list(filters);
    }
    // TODO: merge with create()
    save(data, type, mo = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (type) {
                case RepositoryType.CONFIGURATION: {
                    Object.assign(mo, {
                        type: RepositoryType.CONFIGURATION,
                        configurationType: data.selected ? data.selected.configurationType : undefined,
                        name: data.version,
                        description: data.description,
                        deviceType: data.deviceType,
                        c8y_Global: {}
                    });
                    if (!data.deviceType && mo.id) {
                        mo.deviceType = null;
                    }
                    if (!data.selected && mo.id) {
                        mo.configurationType = null;
                    }
                    break;
                }
            }
            const existingUrl = mo.url;
            if (data.binary.url) {
                mo.url = data.binary.url;
            }
            else if (data.binary.file) {
                const response = yield this.inventoryBinary.create(data.binary.file, {
                    c8y_Global: {}
                });
                mo.url = response.data.self;
            }
            if (mo.id) {
                return this.updateEntry(mo, existingUrl);
            }
            return this.createEntry(mo);
        });
    }
    create(modal, type) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (type) {
                case RepositoryType.FIRMWARE:
                case RepositoryType.SOFTWARE:
                    return this.createFirmwareOrSoftware(modal, type);
            }
        });
    }
    createFirmwareOrSoftware(modal, type) {
        return __awaiter(this, void 0, void 0, function* () {
            let binary;
            let binaryURL;
            let repositoryEntry;
            let repositoryBinary;
            const mos = [];
            const { selected: { id: selectedId }, binary: { file, url } } = modal;
            try {
                if (file) {
                    ({ data: binary } = yield this.saveBinary(file));
                    ({ self: binaryURL } = binary);
                    mos.push(binary);
                }
                else {
                    binaryURL = url;
                }
                ({ data: repositoryEntry } = yield this.createOrUpdateRepositoryEntry(modal, type));
                if (isNil(selectedId)) {
                    mos.push(repositoryEntry);
                }
                ({ data: repositoryBinary } = yield this.createRepositoryBinary(modal, binaryURL, type, repositoryEntry));
                mos.push(repositoryBinary);
                if (file) {
                    yield this.linkBinary(repositoryBinary, binary);
                }
                return repositoryEntry;
            }
            catch (error) {
                this.cleanUp(mos);
                this.errorMsg();
                // Propagate error
                throw error;
            }
        });
    }
    saveBinary(file) {
        return this.inventoryBinary.create(file, { c8y_Global: {} });
    }
    createOrUpdateRepositoryEntry(modal, type) {
        const { selected: { id, name }, description, deviceType } = modal;
        const mo = {
            id,
            name: id ? undefined : name,
            description,
            type: id ? undefined : type,
            c8y_Global: {}
        };
        if (deviceType) {
            set(mo, 'c8y_Filter.type', deviceType);
        }
        if (modal.softwareType) {
            set(mo, 'softwareType', modal.softwareType.softwareType);
        }
        return id
            ? this.inventory.update(mo)
            : this.inventory.create(mo);
    }
    createRepositoryBinary(modal, binaryURL, type, parent) {
        const mo = this.prepareRepositoryBinaryMO(modal, binaryURL, type);
        return this.inventory.childAdditionsCreate(mo, parent);
    }
    prepareRepositoryBinaryMO(modal, binaryURL, type) {
        const { version, patchVersion, dependency } = modal;
        const result = {
            type: REPOSITORY_BINARY_TYPES[type],
            [type]: {
                url: binaryURL
            },
            c8y_Global: {}
        };
        if (dependency) {
            set(result, [type, 'version'], patchVersion);
            assign(result, {
                c8y_Patch: {
                    dependency: dependency.c8y_Firmware.version
                }
            });
        }
        else {
            set(result, [type, 'version'], version);
        }
        return result;
    }
    linkBinary(repositoryBinary, binary) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id: repositoryBinaryId } = repositoryBinary;
            if (binary) {
                const { id: binaryId } = binary;
                return this.inventory.childAdditionsAdd(binaryId, repositoryBinaryId);
            }
        });
    }
    cleanUp(mosToDelete) {
        mosToDelete.forEach(mo => {
            const { c8y_IsBinary } = mo;
            isUndefined(c8y_IsBinary) ? this.delete(mo) : this.inventoryBinary.delete(mo);
        });
    }
    delete(entity) {
        return this.inventory.delete(entity, { forceCascade: true });
    }
    errorMsg() {
        const msg = gettext('Failed to save');
        this.alert.danger(msg);
    }
    getBaseVersionsCount$(entry) {
        if (this.isLegacyEntry(entry)) {
            return of(1);
        }
        return from(this.listBaseVersions(entry, { pageSize: 1, withTotalPages: true })).pipe(map(({ paging }) => paging.totalPages));
    }
    getBaseVersionFromMO(mo) {
        return this.isPatch(mo) ? get(mo, 'c8y_Patch.dependency') : get(mo, 'c8y_Firmware.version');
    }
    isPatch(mo) {
        return !!get(mo, 'c8y_Patch.dependency');
    }
    getPatchVersionsCount$(entry, baseVersion) {
        if (this.isLegacyEntry(baseVersion)) {
            return of(0);
        }
        return from(this.listPatchVersions(entry, baseVersion, { pageSize: 1, withTotalPages: true })).pipe(map(({ paging }) => paging.totalPages));
    }
    isLegacyEntry(entry) {
        return Boolean(entry.url);
    }
    /**
     * Lists all versions (base and patch ones) of given top level entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param params Additional query params.
     */
    listAllVersions(entry, params = {}) {
        if (this.isLegacyEntry(entry)) {
            return this.getBaseVersionResultListForLegacyEntry(entry);
        }
        const VERSION_FILTER_ORDER = {
            __filter: {},
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, VERSION_FILTER_ORDER, params);
    }
    /**
     * Lists base versions of given top level entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param params Additional query params.
     */
    listBaseVersions(entry, params = {}) {
        if (this.isLegacyEntry(entry)) {
            return this.getBaseVersionResultListForLegacyEntry(entry);
        }
        const NO_PATCH_FILTER_ORDER = {
            __filter: {
                __not: { __has: 'c8y_Patch' }
            },
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, NO_PATCH_FILTER_ORDER, params);
    }
    /**
     * Lists patch versions of given base version under the entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param baseVersion Base version.
     * @param params Additional query params.
     */
    listPatchVersions(entry, baseVersion, params = {}) {
        const version = isString(baseVersion) ? baseVersion : get(baseVersion, 'c8y_Firmware.version');
        const PATCH_FILTER_ORDER = {
            __filter: {
                'c8y_Patch.dependency': version
            },
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, PATCH_FILTER_ORDER, params);
    }
    /**
     * Lists patch versions of given base version under the entry including the base version.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * In terms of legacy base version the entry gets transformed to fit the needed data model.
     * @param entry Top level repository entry.
     * @param baseVersion Base version.
     * @param params Additional query params.
     */
    listBaseVersionAndPatches(entry, baseVersion, params = {}) {
        if (this.isLegacyEntry(entry)) {
            return Promise.resolve({
                data: [
                    Object.assign({
                        c8y_Firmware: {
                            version: entry.version,
                            url: entry.url
                        }
                    }, entry)
                ]
            });
        }
        const PATCH_FILTER_ORDER = {
            __filter: {
                __or: {
                    'c8y_Patch.dependency': baseVersion.c8y_Firmware.version,
                    'c8y_Firmware.version': baseVersion.c8y_Firmware.version
                }
            },
            __orderby: [{ 'c8y_Patch.dependency': 1 }, { 'c8y_Firmware.version': 1 }]
        };
        return this.listChildren(entry, PATCH_FILTER_ORDER, params);
    }
    listChildren(entry, filters = {}, params = {}) {
        const childrenFilters = { __bygroupid: entry.id };
        const query = this.queriesUtil.addAndFilter(filters, childrenFilters);
        // FIXME: needed because of issue in forOf directive (...)
        params.withTotalPages = true;
        return this.inventory.listQuery(query, params);
    }
    /**
     * Fetches all items from the list starting with the provided page.
     * @param firstPage The first page of the list to fetch all items for.
     */
    fetchAllItemsFromList(firstPage) {
        return __awaiter(this, void 0, void 0, function* () {
            let allItems;
            if (!firstPage.then) {
                allItems = [...firstPage];
            }
            else {
                let { paging, data: items } = yield firstPage;
                allItems = [...items];
                while (paging && paging.nextPage) {
                    ({ paging, data: items } = yield paging.next());
                    allItems = [...allItems, ...items];
                }
            }
            return allItems;
        });
    }
    /**
     * Gets top level repository entry managed object for base or patch version.
     * @param mo Base or patch version managed object with parents.
     */
    getRepositoryEntryMO$(mo) {
        if (!mo) {
            return of(undefined);
        }
        const [reference] = get(mo, 'additionParents.references');
        const id = get(reference, 'managedObject.id');
        return id
            ? from(this.inventory.detail(id, { withChildren: false })).pipe(map(({ data }) => data))
            : of(undefined);
    }
    /**
     * Gets base or patch version managed object.
     * @param deviceRepositoryFragment Device repository fragment.
     * @param type Top level repository entry type.
     * @param configuration Configuration object with options:
     * - **skipLegacy** - `boolean` - Exclude legacy entries.
     * - **filters** - `object` - Filter object.
     *
     * @deprecated as it doesn't support 'missing url' case
     */
    getRepositoryBinaryMoByVersion(deviceRepositoryFragment, type, { skipLegacy = false, filters = {} } = {}) {
        const { version, url, name } = deviceRepositoryFragment;
        const repositoryBinaryType = REPOSITORY_BINARY_TYPES[type];
        let query;
        const newModelBaseVersionQuery = {
            [`${type}.version`]: version,
            [`${type}.url`]: url,
            type: repositoryBinaryType
        };
        const legacyVersionQuery = { url, type, name };
        filters = Object.assign({ withChildren: false, withParents: true }, filters);
        if (skipLegacy) {
            query = {
                __and: Object.assign({}, newModelBaseVersionQuery)
            };
        }
        else {
            query = {
                __or: [{ __and: Object.assign({}, newModelBaseVersionQuery) }, { __and: Object.assign({}, legacyVersionQuery) }]
            };
        }
        return this.inventory.listQuery(query, filters).then(({ data }) => head(data));
    }
    getBinaryName$(binaryUrl) {
        if (!binaryUrl) {
            return of('---');
        }
        const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
        if (!binaryId) {
            return of(binaryUrl);
        }
        return defer(() => this.inventory.detail(binaryId).then(result => result.data)).pipe(map(mo => mo.name));
    }
    /**
     * Generates an inventory query object which can be used to find
     * repository entries of specified type matching the type of provided device.
     * @param repositoryType The type of repository entries which will be queried with the generated query.
     * @param device The device for which matching repository entries will be queried with the generated query.
     */
    getDeviceTypeQuery(repositoryType, device) {
        let result = { type: repositoryType };
        if (repositoryType === RepositoryType.CONFIGURATION) {
            if (device.type) {
                result = this.queriesUtil.addAndFilter(result, {
                    __or: [{ deviceType: device.type }, { __not: { __has: `deviceType` } }]
                });
            }
        }
        else {
            result = this.queriesUtil.addAndFilter(result, {
                __or: [
                    { 'c8y_Filter.type': device.type },
                    { 'c8y_Filter.type': '' },
                    { __not: { __has: `c8y_Filter.type` } }
                ]
            });
        }
        return result;
    }
    /**
     * Generates an inventory query object which can be used to find
     * repository entries matching the predefined software types provided in the device.
     * @param device The device for which matching repository entries will be queried with the generated query.
     * @param query The query to which the software types filters will be attached. Default value is an object containg repository type software.
     */
    getSoftwareTypeQuery(device, query) {
        let result = Object.assign(Object.assign({}, (query || {})), { type: RepositoryType.SOFTWARE });
        if (device.c8y_SupportedSoftwareTypes) {
            result = this.queriesUtil.addAndFilter(result, {
                __or: [device.c8y_SupportedSoftwareTypes.map(type => ({ softwareType: type }))]
            });
        }
        return result;
    }
    /**
     * Generates an inventory query object which can be used to find configuration repository entries
     * matching the type of provided device and specified configuration type.
     * @param device The device for which matching repository entries will be queried with the generated query.
     * @param configurationType Configuration type for which matching repository entries will be queried with the generated query.
     */
    getConfigurationTypeQuery(device, configurationType) {
        const query = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION, device);
        return this.queriesUtil.addAndFilter(query, {
            __or: [
                { configurationType },
                { configurationType: '' },
                { __not: { __has: `configurationType` } }
            ]
        });
    }
    /**
     * Gets the list of software installed in the device in the uniform format.
     * Supports c8y_SoftwareList and c8y_Software fragments.
     * @param device The device whose software list should be returned.
     */
    getDeviceSoftwareList(device) {
        if (device.c8y_SoftwareList) {
            return cloneDeep(device.c8y_SoftwareList);
        }
        if (device.c8y_Software) {
            return _map(device.c8y_Software, (version, name) => ({ name, version }));
        }
        return [];
    }
    /**
     * Prepares a software update operation for given device and the list of changes, and sends it to the device.
     * @param device The device which the operation should be prepared for and sent to.
     * @param changes The list of software changes which should be applied.
     */
    createSoftwareUpdateOperation(device, changes) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = yield this.getSoftwareUpdateOperation(device, changes);
            return (yield this.operation.create(operation)).data;
        });
    }
    /**
     * Prepares a software update operation for given device and changes.
     * Returned operation type depends on device's supported operations.
     * Supports c8y_SoftwareUpdate, c8y_SoftwareList, and c8y_Software operations.
     * @param device The device for which operation should be prepared.
     * @param changes The list of software changes which should be applied.
     */
    getSoftwareUpdateOperation(device, changes) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = {
                deviceId: device.id,
                description: `Apply software changes: ${changes
                    .map(change => `${change.action} "${change.name}"${change.version ? ` (version: ${change.version})` : ''}`)
                    .join(', ')}`
            };
            if (device.c8y_SupportedOperations.includes('c8y_SoftwareUpdate')) {
                operation.c8y_SoftwareUpdate = (cloneDeep(changes) || []).map(change => omitBy(change, isNil));
            }
            else if (device.c8y_SupportedOperations.includes('c8y_SoftwareList')) {
                operation.c8y_SoftwareList = cloneDeep(yield this.getCurrentSoftware(device, 'c8y_SoftwareList', []));
                changes.forEach(change => {
                    const deviceSoftware = pick(omitBy(change, isNil), [
                        'name',
                        'version',
                        'url',
                        'softwareType'
                    ]);
                    if (change.action === 'delete') {
                        remove(operation.c8y_SoftwareList, deviceSoftware);
                    }
                    if (change.action === 'install') {
                        const softwareItemToUpdateIdx = operation.c8y_SoftwareList.findIndex(item => item.name === change.name);
                        if (softwareItemToUpdateIdx > -1) {
                            // update software
                            operation.c8y_SoftwareList.splice(softwareItemToUpdateIdx, 1, deviceSoftware);
                        }
                        else {
                            // install software
                            operation.c8y_SoftwareList.push(deviceSoftware);
                        }
                    }
                });
            }
            else if (device.c8y_SupportedOperations.includes('c8y_Software')) {
                operation.c8y_Software = cloneDeep(yield this.getCurrentSoftware(device, 'c8y_Software', {}));
                changes.forEach(change => {
                    if (change.action === 'delete') {
                        delete operation.c8y_Software[change.name];
                    }
                    if (change.action === 'install') {
                        operation.c8y_Software[change.name] = change.version;
                    }
                });
            }
            return operation;
        });
    }
    /**
     * Extracts the list of device software changes from given operation in the context of given device.
     * @param operation The operation from which the list should be extracted.
     * @param device The target device of the operation.
     */
    getDeviceSoftwareChangesFromOperation(operation, device) {
        return __awaiter(this, void 0, void 0, function* () {
            if (operation.c8y_SoftwareUpdate) {
                return cloneDeep(operation.c8y_SoftwareUpdate);
            }
            if (operation.c8y_SoftwareList) {
                return yield this.getDeviceSoftwareChangesFromSoftwareListOperation(operation, device);
            }
            if (operation.c8y_Software) {
                return yield this.getDeviceSoftwareChangesFromSoftwareOperation(operation, device);
            }
            return [];
        });
    }
    /**
     * Prepares a firmware update operation for given device and the selected repository binary, and sends it to the device.
     * @param device The device which the operation should be prepared for and sent to.
     * @param selectedOption The selected repository binary option.
     */
    createFirmwareUpdateOperation(device, selectedOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = this.getFirmwareUpdateOperation(device, selectedOption);
            return (yield this.operation.create(operation)).data;
        });
    }
    /**
     * Prepares a firmware update operation for given device and selected version.
     * Supports c8y_Firmware operation.
     * @param device The device for which operation should be prepared.
     * @param selectedOption Selected firmware version.
     */
    getFirmwareUpdateOperation(device, selectedOption) {
        delete selectedOption.id;
        const operation = {
            deviceId: device.id,
            description: `Update firmware to: "${selectedOption.name}"${selectedOption.version ? ` (version: ${selectedOption.version})` : ''}`,
            c8y_Firmware: Object.assign({}, selectedOption)
        };
        return operation;
    }
    /**
     * Prepares a configuration file upload operation for given device and configuration type.
     * @param device The device for which operation should be prepared.
     * @param configurationType Selected configuration type.
     * @param isLegacy  A legacy operation is created without a configurationType.
     */
    getUploadConfigurationFileOperation(device, configurationType, isLegacy = false) {
        if (isLegacy) {
            return {
                deviceId: device.id,
                description: `Retrieve configuration snapshot from device ${device.name}`,
                c8y_UploadConfigFile: {}
            };
        }
        return {
            deviceId: device.id,
            description: `Retrieve ${configurationType} configuration snapshot from device ${device.name}`,
            c8y_UploadConfigFile: {
                type: configurationType
            }
        };
    }
    /**
     * Prepares a configuration file download operation for given device and configuration type.
     * @param device The device for which operation should be prepared.
     * @param configurationType Selected configuration type.
     * @param binaryUrl The url of a binary to be downloaded.
     * @param isLegacy A legacy operation is created without a configurationType.
     */
    getDownloadConfigurationFileOperation(device, configurationType, configSnapshot, isLegacy = false) {
        if (isLegacy) {
            return {
                deviceId: device.id,
                description: `Send configuration snapshot ${configSnapshot.name} to device ${device.name}`,
                c8y_DownloadConfigFile: {
                    url: configSnapshot.binaryUrl,
                    c8y_ConfigurationDump: {
                        id: configSnapshot.id
                    }
                }
            };
        }
        return {
            deviceId: device.id,
            description: `Send configuration snapshot ${configSnapshot.name} of configuration type ${configurationType} to device ${device.name}`,
            c8y_DownloadConfigFile: {
                url: configSnapshot.binaryUrl,
                type: configurationType
            }
        };
    }
    /**
     * Gets the last firmware update operation for given device.
     * Looks for c8y_Firmware operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    getLastFirmwareUpdateOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                deviceId,
                dateFrom: new Date(0).toISOString(),
                dateTo: new Date(Date.now()).toISOString(),
                revert: true,
                pageSize: 1
            };
            return this.getFirstMatchingOperation([Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_Firmware' })]);
        });
    }
    /**
     * Gets the last software update operation for given device.
     * Looks for c8y_SoftwareUpdate, c8y_SoftwareList, or c8y_Software operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    getLastSoftwareUpdateOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                deviceId,
                dateFrom: new Date(0).toISOString(),
                dateTo: new Date(Date.now()).toISOString(),
                revert: true,
                pageSize: 1
            };
            return this.getLatestMatchingOperation([
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_SoftwareUpdate' }),
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_SoftwareList' }),
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_Software' })
            ]);
        });
    }
    /**
     * Iterates over the list of filters and queries the operations.
     * If a query returns at least one operation, the first one will be returned.
     * Otherwise the next query will be performed.
     * If none of the queries returns any operation, null will be returned.
     * @param filtersList The list of filters for the queries.
     */
    getFirstMatchingOperation(filtersList) {
        return __awaiter(this, void 0, void 0, function* () {
            let matchingOperation = null;
            for (const filters of filtersList) {
                const operations = (yield this.operation.list(filters)).data;
                if (operations.length) {
                    matchingOperation = operations[0];
                    break;
                }
            }
            return matchingOperation;
        });
    }
    /**
     * Iterates over the list of filters and queries the operations.
     * It compares the operations retrieved by the queries by 'creationTime'
     * and return the latest one.
     * If none of the queries returns any operation, null will be returned.
     * @param filtersList The list of filters for the queries.
     */
    getLatestMatchingOperation(filtersList) {
        return __awaiter(this, void 0, void 0, function* () {
            let matchingOperation = null;
            for (const filters of filtersList) {
                const operations = (yield this.operation.list(filters)).data;
                if (operations.length) {
                    if (matchingOperation) {
                        matchingOperation =
                            new Date(matchingOperation.creationTime).getTime() <
                                new Date(operations[0].creationTime).getTime()
                                ? operations[0]
                                : matchingOperation;
                    }
                    else {
                        matchingOperation = operations[0];
                    }
                }
            }
            return matchingOperation;
        });
    }
    /**
     * Creates the operation and returns an observable to track its progress.
     * Fails the observable when the operation returns FAILED status.
     * Completes the observable when the operation returns SUCCESSFUL status.
     * @param operation The operation to create and track.
     */
    createObservedOperation(operation) {
        return from(this.operation.create(operation)).pipe(map(({ data }) => data), take(1), switchMap(createdOperation => this.observeOperation(createdOperation)));
    }
    /**
     * Returns an observable to track progress of given operation.
     * Fails the observable when the operation returns FAILED status.
     * Completes the observable when the operation returns SUCCESSFUL status.
     * @param operation The operation to be observed.
     */
    observeOperation(operation) {
        const observedOperation$ = of(operation);
        const operationUpdates$ = observedOperation$.pipe(switchMap(observedOperation => this.operationRealtime.onAll$(observedOperation.deviceId)), map(({ data }) => data), withLatestFrom(observedOperation$), filter(([operationUpdate, observedOperation]) => operationUpdate.id === observedOperation.id), switchMap(([operationUpdate]) => {
            if (operationUpdate.status === OperationStatus.FAILED) {
                return throwError(operationUpdate);
            }
            return of(operationUpdate);
        }), takeWhile(operationUpdate => operationUpdate.status !== OperationStatus.SUCCESSFUL, true));
        return merge(observedOperation$, operationUpdates$);
    }
    /**
     * Gets a single event with latest creationTime for the given device Id and event type.
     * @param deviceId The device Id for which the events should be queried.
     * @param type Event type.
     */
    getLatestConfigurationEvent(deviceId, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const eventFilter = {
                source: deviceId,
                type,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                pageSize: 1
            };
            const { data } = yield this.event.list(eventFilter);
            return data[0];
        });
    }
    /**
     * Gets a list of operations for the given device Id, and operation type.
     * @param deviceId The device Id for which the operation should be queried.
     * @param operationType Operation type fragment.
     */
    getConfigFileOperationList(deviceId, operationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const operationFilter = {
                deviceId,
                fragmentType: operationType,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 2000
            };
            return (yield this.operation.list(operationFilter)).data;
        });
    }
    /**
     * Gets latest uploaded configuration snapshot for the given device, and configuration type.
     * @param device The device for which the configuration snapshot was uploaded.
     * @param configurationType Selected configuration type.
     */
    getConfigSnapshot(device, configurationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const event = yield this.getLatestConfigurationEvent(device.id, configurationType);
            let configSnapshot;
            if (event) {
                configSnapshot = {
                    time: event.time,
                    name: event.text,
                    deviceType: device.type,
                    configurationType
                };
                try {
                    configSnapshot.binary = yield (yield this.eventBinary.download(event)).text();
                    if (event.c8y_IsBinary) {
                        configSnapshot.binaryType = event.c8y_IsBinary.type;
                    }
                }
                catch (ex) {
                    const msg = gettext('Could not get the binary.');
                    this.alert.danger(msg);
                }
            }
            return configSnapshot;
        });
    }
    getLegacyConfigSnapshot(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            let configSnapshot;
            let mo;
            const device = (yield this.inventory.detail(deviceId, { withChildren: false })).data;
            const snapshotId = device.c8y_ConfigurationDump && device.c8y_ConfigurationDump.id;
            if (!snapshotId) {
                return;
            }
            try {
                mo = (yield this.inventory.detail(snapshotId)).data;
            }
            catch (ex) {
                // do nothing
            }
            if (mo) {
                configSnapshot = {
                    time: mo.creationTime,
                    name: mo.name
                };
                configSnapshot.binary = yield this.getBinaryText(mo.url, { allowExternal: false });
            }
            return configSnapshot;
        });
    }
    /**
     * Returns a binary object as text.
     * @param binaryUrl The URL to find binary
     * @param options The object with additional options:
     * - **allowExternal** - `boolean` - allows downloading external binary file
     * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`
     */
    getBinaryText(binaryUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
            let res;
            if (!binaryId) {
                if (options.allowExternal) {
                    res = yield this.getExternalBinaryResponse(binaryUrl, options);
                }
            }
            else {
                res = yield this.getInternalBinaryResponse(binaryId, options);
            }
            if (!res) {
                return null;
            }
            return res.text();
        });
    }
    /**
     * Returns a binary object as File.
     * @param binaryUrl The URL to find binary
     * @param options The object with additional options:
     * - **allowExternal** - `boolean` - allows downloading external binary file
     */
    getBinaryFile(binaryUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
            if (!binaryId && !options.allowExternal) {
                return null;
            }
            // @TODO: note that it doesn't solve issue with external binary here, such url won't have binaryId, so we won't know the name or contentType to use in File constructor, let's add a @FIXME comment for now?
            const { name, contentType } = (yield this.inventory.detail(binaryId)).data;
            const res = !!binaryId
                ? yield this.getInternalBinaryResponse(binaryId)
                : yield this.getExternalBinaryResponse(binaryUrl);
            const arrayBuffer = yield res.arrayBuffer();
            return new File([arrayBuffer], name, { type: contentType });
        });
    }
    /**
     * Gets the last configuration update operation for given device.
     * Looks for c8y_Configuration and c8y_SendConfiguration operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    getLastConfigUpdateOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                deviceId,
                dateFrom: new Date(0).toISOString(),
                dateTo: new Date(Date.now()).toISOString(),
                revert: true,
                pageSize: 1
            };
            return this.getLatestMatchingOperation([
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_Configuration' }),
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_SendConfiguration' })
            ]);
        });
    }
    /**
     * Prepares a configuration download operation for given device and its current configuration.
     * Supports c8y_SendConfiguration operation.
     * @param device The device for which operation should be prepared.
     */
    createTextBasedConfigurationReloadOperation(device) {
        return {
            deviceId: device.id,
            description: gettext('Requested current configuration'),
            c8y_SendConfiguration: {}
        };
    }
    /**
     * Prepares a configuration update operation for the given device.
     * Supports c8y_Configuration operation.
     * @param device The device for which operation should be prepared.
     * @param config The configuration which will update the existing one.
     */
    createTextBasedConfigurationUpdateOperation(device, config) {
        return {
            deviceId: device.id,
            description: gettext('Configuration update'),
            c8y_Configuration: {
                config
            }
        };
    }
    getBinary(binaryId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.inventoryBinary.download(binaryId);
            }
            catch (ex) {
                const msg = gettext('Could not get the binary.');
                this.alert.danger(msg);
            }
        });
    }
    /**
     * Gets all available snapshots from the repository for the given device.
     * @param device The device for which the snapshots should be prepared.
     * @param configurationType Selected configuration type.
     */
    getSnapshotsFromRepository(device, configurationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchQuery = this.getConfigurationTypeQuery(device, configurationType);
            const res = yield this.listRepositoryEntries(RepositoryType.CONFIGURATION, {
                query: searchQuery,
                params: { pageSize: 100 }
            });
            return res.data;
        });
    }
    /**
     * Checks if a device already have a given software installed
     * @param deviceId Id of the device to be checked
     * @param software The software to be checked
     */
    isSoftwareInstalledOnDevice(deviceId, software) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.advancedSoftwareService.isASMAvailable())) {
                return false;
            }
            const queryFilter = { deviceId };
            if (software === null || software === void 0 ? void 0 : software.name) {
                set(queryFilter, 'name', software.name);
            }
            if (software === null || software === void 0 ? void 0 : software.version) {
                set(queryFilter, 'version', software.version);
            }
            return this.advancedSoftwareService.list(queryFilter).then(result => { var _a; return !!((_a = result.data) === null || _a === void 0 ? void 0 : _a.length); });
        });
    }
    /**
     * Returns a binary object.
     * @param binaryId binary ID
     * @param options The object with additional options:
     * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`
     */
    getInternalBinaryResponse(binaryId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            try {
                res = yield this.inventoryBinary.download(binaryId);
            }
            catch (ex) {
                if (!options.noAlerts) {
                    const msg = gettext('Could not get the binary.');
                    this.alert.danger(msg);
                }
            }
            return res;
        });
    }
    /**
     * Returns a binary object.
     * @param binaryUrl The URL to find binary
     * @param options The object with additional options:
     * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`
     */
    getExternalBinaryResponse(binaryUrl, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            try {
                const fetchRes = yield fetch(binaryUrl);
                if (fetchRes.status >= 400) {
                    throw res;
                }
                res = fetchRes;
            }
            catch (_a) {
                if (!options.noAlerts) {
                    const msg = gettext('Could not get the external binary');
                    this.alert.danger(msg);
                }
            }
            return res;
        });
    }
    createEntry(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryId = yield this.inventoryBinary.getIdFromUrl(mo.url);
            const newMo = yield this.inventory.create(mo);
            if (binaryId) {
                yield this.inventory.childAdditionsAdd(binaryId, newMo.data);
            }
            return newMo;
        });
    }
    updateEntry(mo, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const existingBinaryId = yield this.inventoryBinary.getIdFromUrl(url);
            const newBinaryId = yield this.inventoryBinary.getIdFromUrl(mo.url);
            if (existingBinaryId && existingBinaryId !== newBinaryId) {
                const id = this.inventoryBinary.getIdFromUrl(url);
                yield this.inventoryBinary.delete(id);
            }
            if (newBinaryId) {
                yield this.inventory.childAdditionsAdd(newBinaryId, mo);
            }
            return this.inventory.update(mo);
        });
    }
    getBaseVersionResultListForLegacyEntry(entry) {
        return Promise.resolve({
            res: {},
            data: [
                Object.assign(Object.assign({}, entry), { [entry.type]: {
                        version: entry.version,
                        url: entry.url
                    } })
            ]
        });
    }
    getDeviceSoftwareChangesFromSoftwareListOperation(operation, device) {
        return __awaiter(this, void 0, void 0, function* () {
            const changes = [];
            const deviceSoftwareList = yield this.getCurrentSoftware(device, 'c8y_SoftwareList', []);
            forEach(operation.c8y_SoftwareList, operationSoftware => {
                const deviceSoftware = find(deviceSoftwareList, { name: operationSoftware.name });
                if ((operationSoftware && operationSoftware.version) !==
                    (deviceSoftware && deviceSoftware.version)) {
                    changes.push(Object.assign(Object.assign({}, operationSoftware), { action: 'install' }));
                }
            });
            forEach(deviceSoftwareList, deviceSoftware => {
                const operationSoftware = find(operation.c8y_SoftwareList, { name: deviceSoftware.name });
                if ((operationSoftware && operationSoftware.version) !==
                    (deviceSoftware && deviceSoftware.version)) {
                    const installChange = changes.find(change => deviceSoftware.name === change.name && change.action === 'install');
                    // check that this software is not an installation software change, otherwise it's an update and not a removal
                    if (!installChange) {
                        changes.push(Object.assign(Object.assign({}, deviceSoftware), { action: 'delete' }));
                    }
                }
            });
            return changes;
        });
    }
    getDeviceSoftwareChangesFromSoftwareOperation(operation, device) {
        return __awaiter(this, void 0, void 0, function* () {
            const changes = [];
            const deviceSoftware = yield this.getCurrentSoftware(device, 'c8y_Software', {});
            forEach(deviceSoftware, (deviceSoftwareVersion, deviceSoftwareName) => {
                if (operation.c8y_Software[deviceSoftwareName] !== deviceSoftwareVersion) {
                    changes.push({
                        name: deviceSoftwareName,
                        version: deviceSoftwareVersion,
                        action: 'delete'
                    });
                }
            });
            forEach(operation.c8y_Software, (operationSoftwareVersion, operationSoftwareName) => {
                const deviceSoftwareVersion = deviceSoftware && deviceSoftware[operationSoftwareName];
                if (deviceSoftwareVersion !== operationSoftwareVersion) {
                    changes.push({
                        name: operationSoftwareName,
                        version: operationSoftwareVersion,
                        action: 'install'
                    });
                }
            });
            return changes;
        });
    }
    getCurrentSoftware(device, swFragment, defaultValue) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const isASMAvailable = yield this.advancedSoftwareService.isASMAvailable();
            if (isASMAvailable) {
                let softwareResultList = yield this.advancedSoftwareService.list({ deviceId: device.id, pageSize: 100 });
                let list = ((softwareResultList === null || softwareResultList === void 0 ? void 0 : softwareResultList.data) || []).map(sw => pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType']));
                while ((_a = softwareResultList.paging) === null || _a === void 0 ? void 0 : _a.nextPage) {
                    softwareResultList = yield softwareResultList.paging.next();
                    list = [
                        ...list,
                        ...((softwareResultList === null || softwareResultList === void 0 ? void 0 : softwareResultList.data) || []).map(sw => pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType']))
                    ];
                }
                if (!(list === null || list === void 0 ? void 0 : list.length)) {
                    return defaultValue;
                }
                return Array.isArray(defaultValue) ? list : this.softwareListToLegacy(list);
            }
            else {
                return device[swFragment] || defaultValue;
            }
        });
    }
    softwareListToLegacy(list) {
        return (list || []).reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr.name]: curr.version })), {});
    }
}
RepositoryService.ɵfac = function RepositoryService_Factory(t) { return new (t || RepositoryService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.InventoryBinaryService), ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc2.AlertService), ɵngcc0.ɵɵinject(ɵngcc1.EventService), ɵngcc0.ɵɵinject(ɵngcc2.OperationRealtimeService), ɵngcc0.ɵɵinject(ɵngcc1.EventBinaryService), ɵngcc0.ɵɵinject(ɵngcc3.AdvancedSoftwareService)); };
RepositoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RepositoryService, factory: RepositoryService.ɵfac });
RepositoryService.ctorParameters = () => [
    { type: InventoryService },
    { type: InventoryBinaryService },
    { type: OperationService },
    { type: AlertService },
    { type: EventService },
    { type: OperationRealtimeService },
    { type: EventBinaryService },
    { type: AdvancedSoftwareService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RepositoryService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.InventoryBinaryService }, { type: ɵngcc1.OperationService }, { type: ɵngcc2.AlertService }, { type: ɵngcc1.EventService }, { type: ɵngcc2.OperationRealtimeService }, { type: ɵngcc1.EventBinaryService }, { type: ɵngcc3.AdvancedSoftwareService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NoYXJlZC9yZXBvc2l0b3J5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixZQUFZLEVBT1osc0JBQXNCLEVBQ3RCLGdCQUFnQixFQUloQixnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLFdBQVcsRUFDWixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RGLE9BQU8sRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULElBQUksRUFDSixPQUFPLEVBQ1AsR0FBRyxFQUNILElBQUksRUFDSixLQUFLLEVBQ0wsUUFBUSxFQUNSLFdBQVcsRUFDWCxHQUFHLElBQUksSUFBSSxFQUNYLE1BQU0sRUFDTixJQUFJLEVBQ0osTUFBTSxFQUNOLEdBQUcsRUFDSixNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBVUwsY0FBYyxFQUNkLHVCQUF1QixFQUd4QixNQUFNLG9CQUFvQixDQUFDOzs7OztBQUc1QixNQUFNLE9BQU8saUJBQWlCO0FBQzlCLElBSUUsWUFDVSxTQUEyQixFQUMzQixlQUF1QyxFQUN2QyxTQUEyQixFQUMzQixLQUFtQixFQUNuQixL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LE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsaUNBQU0sSUFBSSxLQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLElBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3RixJQUFFLENBQUM7QUFDSDs2Q0F0eUNDLFVBQVU7aUlBQ1Q7QUFBQztBQUNVLFlBOUNYLGdCQUFnQjtBQUNoQixZQUZBLHNCQUFzQjtBQUN0QixZQUlBLGdCQUFnQjtBQUNoQixZQUdPLFlBQVk7QUFBSSxZQWhCdkIsWUFBWTtBQUNaLFlBZThCLHdCQUF3QjtBQUFJLFlBakIxRCxrQkFBa0I7QUFDbEIsWUFtQ08sdUJBQXVCO0FBQUc7OztxVkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRXZlbnRCaW5hcnlTZXJ2aWNlLFxuICBFdmVudFNlcnZpY2UsXG4gIElkUmVmZXJlbmNlLFxuICBJRXZlbnQsXG4gIElGZXRjaFJlc3BvbnNlLFxuICBJSWRlbnRpZmllZCxcbiAgSU1hbmFnZWRPYmplY3QsXG4gIElNYW5hZ2VkT2JqZWN0QmluYXJ5LFxuICBJbnZlbnRvcnlCaW5hcnlTZXJ2aWNlLFxuICBJbnZlbnRvcnlTZXJ2aWNlLFxuICBJT3BlcmF0aW9uLFxuICBJUmVzdWx0LFxuICBJUmVzdWx0TGlzdCxcbiAgT3BlcmF0aW9uU2VydmljZSxcbiAgT3BlcmF0aW9uU3RhdHVzLFxuICBRdWVyaWVzVXRpbFxufSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIGdldHRleHQsIE9wZXJhdGlvblJlYWx0aW1lU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgYXNzaWduLFxuICBjbG9uZURlZXAsXG4gIGZpbmQsXG4gIGZvckVhY2gsXG4gIGdldCxcbiAgaGVhZCxcbiAgaXNOaWwsXG4gIGlzU3RyaW5nLFxuICBpc1VuZGVmaW5lZCxcbiAgbWFwIGFzIF9tYXAsXG4gIG9taXRCeSxcbiAgcGljayxcbiAgcmVtb3ZlLFxuICBzZXRcbn0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGRlZmVyLCBmcm9tLCBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBzd2l0Y2hNYXAsIHRha2UsIHRha2VXaGlsZSwgd2l0aExhdGVzdEZyb20gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBZHZhbmNlZFNvZnR3YXJlU2VydmljZSB9IGZyb20gJy4vYWR2YW5jZWQtc29mdHdhcmUuc2VydmljZSc7XG5pbXBvcnQge1xuICBDb25maWd1cmF0aW9uU25hcHNob3QsXG4gIERldmljZUZpcm13YXJlLFxuICBEZXZpY2VTb2Z0d2FyZSxcbiAgRGV2aWNlU29mdHdhcmVDaGFuZ2UsXG4gIEZpcm13YXJlQmluYXJ5LFxuICBGaXJtd2FyZVBhdGNoQmluYXJ5LFxuICBNb2RhbE1vZGVsLFxuICBSZXBvc2l0b3J5QmluYXJ5LFxuICBSZXBvc2l0b3J5Q2F0ZWdvcnksXG4gIFJlcG9zaXRvcnlUeXBlLFxuICBSRVBPU0lUT1JZX0JJTkFSWV9UWVBFUyxcbiAgU2VsZWN0ZWRSZXBvc2l0b3J5QmluYXJ5LFxuICBTb2Z0d2FyZUJpbmFyeVxufSBmcm9tICcuL3JlcG9zaXRvcnkubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeVNlcnZpY2Uge1xuICByZWFkb25seSBkYXRlRnJvbSA9IG5ldyBEYXRlKDApO1xuICByZWFkb25seSBkYXRlVG8gPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgODY0MDAwMDApOyAvLyAxIGRheSBpbiB0aGUgZnV0dXJlXG4gIHByaXZhdGUgcXVlcmllc1V0aWw6IFF1ZXJpZXNVdGlsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW52ZW50b3J5OiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5QmluYXJ5OiBJbnZlbnRvcnlCaW5hcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgb3BlcmF0aW9uOiBPcGVyYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIGV2ZW50OiBFdmVudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBvcGVyYXRpb25SZWFsdGltZTogT3BlcmF0aW9uUmVhbHRpbWVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZXZlbnRCaW5hcnk6IEV2ZW50QmluYXJ5U2VydmljZSxcbiAgICBwcml2YXRlIGFkdmFuY2VkU29mdHdhcmVTZXJ2aWNlOiBBZHZhbmNlZFNvZnR3YXJlU2VydmljZVxuICApIHtcbiAgICB0aGlzLnF1ZXJpZXNVdGlsID0gbmV3IFF1ZXJpZXNVdGlsKCk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdHMgcmVwb3NpdG9yeSBlbnRyaWVzIG9mIGdpdmVuIHR5cGUuXG4gICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIHJlcG9zaXRvcnkgZW50cmllcyB0byBsaXN0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBFeHRyYSBsaXN0aW5nIG9wdGlvbnMuXG4gICAqL1xuICBsaXN0UmVwb3NpdG9yeUVudHJpZXMoXG4gICAgdHlwZTogUmVwb3NpdG9yeVR5cGUsXG4gICAgb3B0aW9ucz86IHtcbiAgICAgIC8qKiBBZGRpdGlvbmFsIHF1ZXJ5LiAqL1xuICAgICAgcXVlcnk/OiBhbnk7XG4gICAgICAvKiogKGRlcHJlY2F0ZWQgLSB0byBiZSByZW1vdmVkKSBPbmx5IGluY2x1ZGUgZW50cmllcyB3aXRoIG1hdGNoaW5nIHBhcnRpYWwgbmFtZXMuICovXG4gICAgICBwYXJ0aWFsTmFtZT86IHN0cmluZztcbiAgICAgIC8qKiBJbmNsdWRlIGVudHJpZXMgd2l0aCBtYXRjaGluZyBwYXJ0aWFsIHRleHQgaW4gdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLiAqL1xuICAgICAgcGFydGlhbFRleHRGaWx0ZXI/OiB7IHBhcnRpYWxUZXh0OiBzdHJpbmc7IHByb3BlcnRpZXM6IHN0cmluZ1tdIH07XG4gICAgICAvKiogRXhjbHVkZSBsZWdhY3kgZW50cmllcy4gKi9cbiAgICAgIHNraXBMZWdhY3k/OiBib29sZWFuO1xuICAgICAgLyoqIEV4Y2x1ZGUgZGVmYXVsdCBvcmRlcmluZy4gKi9cbiAgICAgIHNraXBEZWZhdWx0T3JkZXI/OiBib29sZWFuO1xuICAgICAgLyoqIE90aGVyIHJlcXVlc3QgcGFyYW1zLiAqL1xuICAgICAgcGFyYW1zPzogYW55O1xuICAgIH1cbiAgKSB7XG4gICAgY29uc3QgZGVmYXVsdE9yZGVyID0gW3sgbmFtZTogMSB9XTtcbiAgICBjb25zdCBkZWZhdWx0RmlsdGVycyA9IHsgdHlwZSB9O1xuICAgIGNvbnN0IGxlZ2FjeUZpbHRlcnMgPSB7IF9faGFzOiBgdXJsYCB9O1xuICAgIGxldCBmaWx0ZXJzID0ge307XG5cbiAgICBsZXQgZnVsbFF1ZXJ5ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5xdWVyeSkgfHwge307XG4gICAgaWYgKCFvcHRpb25zIHx8IChvcHRpb25zICYmICFvcHRpb25zLnNraXBEZWZhdWx0T3JkZXIpKSB7XG4gICAgICBmdWxsUXVlcnkgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZE9yZGVyYnlzKGZ1bGxRdWVyeSwgZGVmYXVsdE9yZGVyLCAncHJlcGVuZCcpO1xuICAgIH1cblxuICAgIGZ1bGxRdWVyeSA9IHRoaXMucXVlcmllc1V0aWwuYWRkQW5kRmlsdGVyKGZ1bGxRdWVyeSwgZGVmYXVsdEZpbHRlcnMpO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5wYXJ0aWFsVGV4dEZpbHRlcikge1xuICAgICAgY29uc3QgeyBwYXJ0aWFsVGV4dCwgcHJvcGVydGllcyB9ID0gb3B0aW9ucy5wYXJ0aWFsVGV4dEZpbHRlcjtcbiAgICAgIGNvbnN0IG9yRmlsdGVyID0geyBfX29yOiBwcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiAoeyBbcHJvcGVydHldOiBgKiR7cGFydGlhbFRleHR9KmAgfSkpIH07XG4gICAgICBmdWxsUXVlcnkgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZEFuZEZpbHRlcihmdWxsUXVlcnksIG9yRmlsdGVyKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnBhcnRpYWxOYW1lKSB7XG4gICAgICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBpZlxuICAgICAgZnVsbFF1ZXJ5ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIoZnVsbFF1ZXJ5LCB7IG5hbWU6IGAqJHtvcHRpb25zLnBhcnRpYWxOYW1lfSpgIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2tpcExlZ2FjeSkge1xuICAgICAgZnVsbFF1ZXJ5ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIoZnVsbFF1ZXJ5LCB7IF9fbm90OiBsZWdhY3lGaWx0ZXJzIH0pO1xuICAgIH1cblxuICAgIGZpbHRlcnMgPSB7XG4gICAgICBxdWVyeTogdGhpcy5xdWVyaWVzVXRpbC5idWlsZFF1ZXJ5KGZ1bGxRdWVyeSksXG4gICAgICBwYWdlU2l6ZTogNTAsXG4gICAgICB3aXRoVG90YWxQYWdlczogdHJ1ZSxcbiAgICAgIC4uLigob3B0aW9ucyAmJiBvcHRpb25zLnBhcmFtcykgfHwge30pXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnkubGlzdChmaWx0ZXJzKTtcbiAgfVxuXG4gIC8vIFRPRE86IG1lcmdlIHdpdGggY3JlYXRlKClcbiAgYXN5bmMgc2F2ZShkYXRhOiBNb2RhbE1vZGVsLCB0eXBlOiBSZXBvc2l0b3J5VHlwZSwgbW86IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+ID0ge30pIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUmVwb3NpdG9yeVR5cGUuQ09ORklHVVJBVElPTjoge1xuICAgICAgICBPYmplY3QuYXNzaWduKG1vLCB7XG4gICAgICAgICAgdHlwZTogUmVwb3NpdG9yeVR5cGUuQ09ORklHVVJBVElPTixcbiAgICAgICAgICBjb25maWd1cmF0aW9uVHlwZTogZGF0YS5zZWxlY3RlZCA/IGRhdGEuc2VsZWN0ZWQuY29uZmlndXJhdGlvblR5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmFtZTogZGF0YS52ZXJzaW9uLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGRldmljZVR5cGU6IGRhdGEuZGV2aWNlVHlwZSxcbiAgICAgICAgICBjOHlfR2xvYmFsOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFkYXRhLmRldmljZVR5cGUgJiYgbW8uaWQpIHtcbiAgICAgICAgICBtby5kZXZpY2VUeXBlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRhdGEuc2VsZWN0ZWQgJiYgbW8uaWQpIHtcbiAgICAgICAgICBtby5jb25maWd1cmF0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZXhpc3RpbmdVcmwgPSBtby51cmw7XG4gICAgaWYgKGRhdGEuYmluYXJ5LnVybCkge1xuICAgICAgbW8udXJsID0gZGF0YS5iaW5hcnkudXJsO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5iaW5hcnkuZmlsZSkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmludmVudG9yeUJpbmFyeS5jcmVhdGUoZGF0YS5iaW5hcnkuZmlsZSwge1xuICAgICAgICBjOHlfR2xvYmFsOiB7fVxuICAgICAgfSBhcyBQYXJ0aWFsPElNYW5hZ2VkT2JqZWN0Pik7XG4gICAgICBtby51cmwgPSByZXNwb25zZS5kYXRhLnNlbGY7XG4gICAgfVxuXG4gICAgaWYgKG1vLmlkKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVFbnRyeShtbywgZXhpc3RpbmdVcmwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVFbnRyeShtbyk7XG4gIH1cblxuICBhc3luYyBjcmVhdGUobW9kYWw6IE1vZGFsTW9kZWwsIHR5cGU6IFJlcG9zaXRvcnlUeXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFJlcG9zaXRvcnlUeXBlLkZJUk1XQVJFOlxuICAgICAgY2FzZSBSZXBvc2l0b3J5VHlwZS5TT0ZUV0FSRTpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRmlybXdhcmVPclNvZnR3YXJlKG1vZGFsLCB0eXBlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBjcmVhdGVGaXJtd2FyZU9yU29mdHdhcmUoXG4gICAgbW9kYWw6IE1vZGFsTW9kZWwsXG4gICAgdHlwZTogUmVwb3NpdG9yeVR5cGVcbiAgKTogUHJvbWlzZTxSZXBvc2l0b3J5Q2F0ZWdvcnk+IHtcbiAgICBsZXQgYmluYXJ5OiBJTWFuYWdlZE9iamVjdEJpbmFyeTtcbiAgICBsZXQgYmluYXJ5VVJMOiBzdHJpbmc7XG4gICAgbGV0IHJlcG9zaXRvcnlFbnRyeTogUmVwb3NpdG9yeUNhdGVnb3J5O1xuICAgIGxldCByZXBvc2l0b3J5QmluYXJ5OiBGaXJtd2FyZUJpbmFyeSB8IFNvZnR3YXJlQmluYXJ5O1xuICAgIGNvbnN0IG1vcyA9IFtdO1xuICAgIGNvbnN0IHtcbiAgICAgIHNlbGVjdGVkOiB7IGlkOiBzZWxlY3RlZElkIH0sXG4gICAgICBiaW5hcnk6IHsgZmlsZSwgdXJsIH1cbiAgICB9ID0gbW9kYWw7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICh7IGRhdGE6IGJpbmFyeSB9ID0gYXdhaXQgdGhpcy5zYXZlQmluYXJ5KGZpbGUpKTtcbiAgICAgICAgKHsgc2VsZjogYmluYXJ5VVJMIH0gPSBiaW5hcnkpO1xuICAgICAgICBtb3MucHVzaChiaW5hcnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluYXJ5VVJMID0gdXJsO1xuICAgICAgfVxuXG4gICAgICAoeyBkYXRhOiByZXBvc2l0b3J5RW50cnkgfSA9IGF3YWl0IHRoaXMuY3JlYXRlT3JVcGRhdGVSZXBvc2l0b3J5RW50cnkobW9kYWwsIHR5cGUpKTtcbiAgICAgIGlmIChpc05pbChzZWxlY3RlZElkKSkge1xuICAgICAgICBtb3MucHVzaChyZXBvc2l0b3J5RW50cnkpO1xuICAgICAgfVxuXG4gICAgICAoeyBkYXRhOiByZXBvc2l0b3J5QmluYXJ5IH0gPSBhd2FpdCB0aGlzLmNyZWF0ZVJlcG9zaXRvcnlCaW5hcnkoXG4gICAgICAgIG1vZGFsLFxuICAgICAgICBiaW5hcnlVUkwsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHJlcG9zaXRvcnlFbnRyeVxuICAgICAgKSk7XG4gICAgICBtb3MucHVzaChyZXBvc2l0b3J5QmluYXJ5KTtcblxuICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5saW5rQmluYXJ5KHJlcG9zaXRvcnlCaW5hcnksIGJpbmFyeSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXBvc2l0b3J5RW50cnk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuY2xlYW5VcChtb3MpO1xuICAgICAgdGhpcy5lcnJvck1zZygpO1xuXG4gICAgICAvLyBQcm9wYWdhdGUgZXJyb3JcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHNhdmVCaW5hcnkoZmlsZTogRmlsZSk6IFByb21pc2U8SVJlc3VsdDxJTWFuYWdlZE9iamVjdEJpbmFyeT4+IHtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnlCaW5hcnkuY3JlYXRlKGZpbGUsIHsgYzh5X0dsb2JhbDoge30gfSBhcyBQYXJ0aWFsPElNYW5hZ2VkT2JqZWN0Pik7XG4gIH1cblxuICBjcmVhdGVPclVwZGF0ZVJlcG9zaXRvcnlFbnRyeShcbiAgICBtb2RhbDogTW9kYWxNb2RlbCxcbiAgICB0eXBlOiBSZXBvc2l0b3J5VHlwZVxuICApOiBQcm9taXNlPElSZXN1bHQ8UmVwb3NpdG9yeUNhdGVnb3J5Pj4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNlbGVjdGVkOiB7IGlkLCBuYW1lIH0sXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIGRldmljZVR5cGVcbiAgICB9ID0gbW9kYWw7XG5cbiAgICBjb25zdCBtbyA9IHtcbiAgICAgIGlkLFxuICAgICAgbmFtZTogaWQgPyB1bmRlZmluZWQgOiBuYW1lLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICB0eXBlOiBpZCA/IHVuZGVmaW5lZCA6IHR5cGUsXG4gICAgICBjOHlfR2xvYmFsOiB7fVxuICAgIH07XG5cbiAgICBpZiAoZGV2aWNlVHlwZSkge1xuICAgICAgc2V0KG1vLCAnYzh5X0ZpbHRlci50eXBlJywgZGV2aWNlVHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKG1vZGFsLnNvZnR3YXJlVHlwZSkge1xuICAgICAgc2V0KG1vLCAnc29mdHdhcmVUeXBlJywgbW9kYWwuc29mdHdhcmVUeXBlLnNvZnR3YXJlVHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlkXG4gICAgICA/ICh0aGlzLmludmVudG9yeS51cGRhdGUobW8pIGFzIFByb21pc2U8SVJlc3VsdDxSZXBvc2l0b3J5Q2F0ZWdvcnk+PilcbiAgICAgIDogKHRoaXMuaW52ZW50b3J5LmNyZWF0ZShtbykgYXMgUHJvbWlzZTxJUmVzdWx0PFJlcG9zaXRvcnlDYXRlZ29yeT4+KTtcbiAgfVxuXG4gIGNyZWF0ZVJlcG9zaXRvcnlCaW5hcnkoXG4gICAgbW9kYWw6IE1vZGFsTW9kZWwsXG4gICAgYmluYXJ5VVJMOiBzdHJpbmcsXG4gICAgdHlwZTogUmVwb3NpdG9yeVR5cGUsXG4gICAgcGFyZW50OiBSZXBvc2l0b3J5Q2F0ZWdvcnlcbiAgKTogUHJvbWlzZTxJUmVzdWx0PEZpcm13YXJlQmluYXJ5IHwgU29mdHdhcmVCaW5hcnkgfCBGaXJtd2FyZVBhdGNoQmluYXJ5Pj4ge1xuICAgIGNvbnN0IG1vID0gdGhpcy5wcmVwYXJlUmVwb3NpdG9yeUJpbmFyeU1PKG1vZGFsLCBiaW5hcnlVUkwsIHR5cGUpO1xuXG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5LmNoaWxkQWRkaXRpb25zQ3JlYXRlKG1vLCBwYXJlbnQpIGFzIFByb21pc2U8XG4gICAgICBJUmVzdWx0PEZpcm13YXJlQmluYXJ5IHwgU29mdHdhcmVCaW5hcnkgfCBGaXJtd2FyZVBhdGNoQmluYXJ5PlxuICAgID47XG4gIH1cblxuICBwcmVwYXJlUmVwb3NpdG9yeUJpbmFyeU1PKG1vZGFsOiBNb2RhbE1vZGVsLCBiaW5hcnlVUkw6IHN0cmluZywgdHlwZTogUmVwb3NpdG9yeVR5cGUpIHtcbiAgICBjb25zdCB7IHZlcnNpb24sIHBhdGNoVmVyc2lvbiwgZGVwZW5kZW5jeSB9ID0gbW9kYWw7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgdHlwZTogUkVQT1NJVE9SWV9CSU5BUllfVFlQRVNbdHlwZV0sXG4gICAgICBbdHlwZV06IHtcbiAgICAgICAgdXJsOiBiaW5hcnlVUkxcbiAgICAgIH0sXG4gICAgICBjOHlfR2xvYmFsOiB7fVxuICAgIH07XG5cbiAgICBpZiAoZGVwZW5kZW5jeSkge1xuICAgICAgc2V0KHJlc3VsdCwgW3R5cGUsICd2ZXJzaW9uJ10sIHBhdGNoVmVyc2lvbik7XG4gICAgICBhc3NpZ24ocmVzdWx0LCB7XG4gICAgICAgIGM4eV9QYXRjaDoge1xuICAgICAgICAgIGRlcGVuZGVuY3k6IGRlcGVuZGVuY3kuYzh5X0Zpcm13YXJlLnZlcnNpb25cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldChyZXN1bHQsIFt0eXBlLCAndmVyc2lvbiddLCB2ZXJzaW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFzeW5jIGxpbmtCaW5hcnkoXG4gICAgcmVwb3NpdG9yeUJpbmFyeTogRmlybXdhcmVCaW5hcnkgfCBTb2Z0d2FyZUJpbmFyeSxcbiAgICBiaW5hcnk6IElNYW5hZ2VkT2JqZWN0QmluYXJ5XG4gICkge1xuICAgIGNvbnN0IHsgaWQ6IHJlcG9zaXRvcnlCaW5hcnlJZCB9ID0gcmVwb3NpdG9yeUJpbmFyeTtcbiAgICBpZiAoYmluYXJ5KSB7XG4gICAgICBjb25zdCB7IGlkOiBiaW5hcnlJZCB9ID0gYmluYXJ5O1xuICAgICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5LmNoaWxkQWRkaXRpb25zQWRkKGJpbmFyeUlkLCByZXBvc2l0b3J5QmluYXJ5SWQpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFuVXAobW9zVG9EZWxldGU6IElJZGVudGlmaWVkW10pIHtcbiAgICBtb3NUb0RlbGV0ZS5mb3JFYWNoKG1vID0+IHtcbiAgICAgIGNvbnN0IHsgYzh5X0lzQmluYXJ5IH0gPSBtbztcbiAgICAgIGlzVW5kZWZpbmVkKGM4eV9Jc0JpbmFyeSkgPyB0aGlzLmRlbGV0ZShtbykgOiB0aGlzLmludmVudG9yeUJpbmFyeS5kZWxldGUobW8pO1xuICAgIH0pO1xuICB9XG5cbiAgZGVsZXRlKGVudGl0eTogSUlkZW50aWZpZWQpOiBQcm9taXNlPElSZXN1bHQ8bnVsbD4+IHtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnkuZGVsZXRlKGVudGl0eSwgeyBmb3JjZUNhc2NhZGU6IHRydWUgfSk7XG4gIH1cblxuICBlcnJvck1zZygpIHtcbiAgICBjb25zdCBtc2cgPSBnZXR0ZXh0KCdGYWlsZWQgdG8gc2F2ZScpO1xuICAgIHRoaXMuYWxlcnQuZGFuZ2VyKG1zZyk7XG4gIH1cblxuICBnZXRCYXNlVmVyc2lvbnNDb3VudCQoZW50cnk6IElNYW5hZ2VkT2JqZWN0KTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICBpZiAodGhpcy5pc0xlZ2FjeUVudHJ5KGVudHJ5KSkge1xuICAgICAgcmV0dXJuIG9mKDEpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbSh0aGlzLmxpc3RCYXNlVmVyc2lvbnMoZW50cnksIHsgcGFnZVNpemU6IDEsIHdpdGhUb3RhbFBhZ2VzOiB0cnVlIH0pKS5waXBlKFxuICAgICAgbWFwKCh7IHBhZ2luZyB9KSA9PiBwYWdpbmcudG90YWxQYWdlcylcbiAgICApO1xuICB9XG5cbiAgZ2V0QmFzZVZlcnNpb25Gcm9tTU8obW86IFJlcG9zaXRvcnlCaW5hcnkpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlzUGF0Y2gobW8pID8gZ2V0KG1vLCAnYzh5X1BhdGNoLmRlcGVuZGVuY3knKSA6IGdldChtbywgJ2M4eV9GaXJtd2FyZS52ZXJzaW9uJyk7XG4gIH1cblxuICBpc1BhdGNoKG1vOiBSZXBvc2l0b3J5QmluYXJ5KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhZ2V0KG1vLCAnYzh5X1BhdGNoLmRlcGVuZGVuY3knKTtcbiAgfVxuXG4gIGdldFBhdGNoVmVyc2lvbnNDb3VudCQoZW50cnk6IElNYW5hZ2VkT2JqZWN0LCBiYXNlVmVyc2lvbjogRmlybXdhcmVCaW5hcnkpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIGlmICh0aGlzLmlzTGVnYWN5RW50cnkoYmFzZVZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gb2YoMCk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tKFxuICAgICAgdGhpcy5saXN0UGF0Y2hWZXJzaW9ucyhlbnRyeSwgYmFzZVZlcnNpb24sIHsgcGFnZVNpemU6IDEsIHdpdGhUb3RhbFBhZ2VzOiB0cnVlIH0pXG4gICAgKS5waXBlKG1hcCgoeyBwYWdpbmcgfSkgPT4gcGFnaW5nLnRvdGFsUGFnZXMpKTtcbiAgfVxuXG4gIGlzTGVnYWN5RW50cnkoZW50cnk6IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZW50cnkudXJsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0cyBhbGwgdmVyc2lvbnMgKGJhc2UgYW5kIHBhdGNoIG9uZXMpIG9mIGdpdmVuIHRvcCBsZXZlbCBlbnRyeS5cbiAgICogVmVyc2lvbnMgYXJlIG9yZGVyZWQgYnkgY3JlYXRpb24gdGltZSAoYXNzdW1pbmcgdGhlIGVhcmxpZXIgY3JlYXRlZCwgdGhlIG9sZGVyIHRoZSB2ZXJzaW9uKS5cbiAgICogQHBhcmFtIGVudHJ5IFRvcCBsZXZlbCByZXBvc2l0b3J5IGVudHJ5LlxuICAgKiBAcGFyYW0gcGFyYW1zIEFkZGl0aW9uYWwgcXVlcnkgcGFyYW1zLlxuICAgKi9cbiAgbGlzdEFsbFZlcnNpb25zKGVudHJ5OiBQYXJ0aWFsPElNYW5hZ2VkT2JqZWN0PiwgcGFyYW1zID0ge30pIHtcbiAgICBpZiAodGhpcy5pc0xlZ2FjeUVudHJ5KGVudHJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QmFzZVZlcnNpb25SZXN1bHRMaXN0Rm9yTGVnYWN5RW50cnkoZW50cnkpO1xuICAgIH1cblxuICAgIGNvbnN0IFZFUlNJT05fRklMVEVSX09SREVSID0ge1xuICAgICAgX19maWx0ZXI6IHt9LFxuICAgICAgX19vcmRlcmJ5OiBbeyAnY3JlYXRpb25UaW1lLmRhdGUnOiAtMSB9LCB7IGNyZWF0aW9uVGltZTogLTEgfV1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmxpc3RDaGlsZHJlbihlbnRyeSwgVkVSU0lPTl9GSUxURVJfT1JERVIsIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdHMgYmFzZSB2ZXJzaW9ucyBvZiBnaXZlbiB0b3AgbGV2ZWwgZW50cnkuXG4gICAqIFZlcnNpb25zIGFyZSBvcmRlcmVkIGJ5IGNyZWF0aW9uIHRpbWUgKGFzc3VtaW5nIHRoZSBlYXJsaWVyIGNyZWF0ZWQsIHRoZSBvbGRlciB0aGUgdmVyc2lvbikuXG4gICAqIEBwYXJhbSBlbnRyeSBUb3AgbGV2ZWwgcmVwb3NpdG9yeSBlbnRyeS5cbiAgICogQHBhcmFtIHBhcmFtcyBBZGRpdGlvbmFsIHF1ZXJ5IHBhcmFtcy5cbiAgICovXG4gIGxpc3RCYXNlVmVyc2lvbnMoZW50cnk6IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+LCBwYXJhbXMgPSB7fSkge1xuICAgIGlmICh0aGlzLmlzTGVnYWN5RW50cnkoZW50cnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRCYXNlVmVyc2lvblJlc3VsdExpc3RGb3JMZWdhY3lFbnRyeShlbnRyeSk7XG4gICAgfVxuXG4gICAgY29uc3QgTk9fUEFUQ0hfRklMVEVSX09SREVSID0ge1xuICAgICAgX19maWx0ZXI6IHtcbiAgICAgICAgX19ub3Q6IHsgX19oYXM6ICdjOHlfUGF0Y2gnIH1cbiAgICAgIH0sXG4gICAgICBfX29yZGVyYnk6IFt7ICdjcmVhdGlvblRpbWUuZGF0ZSc6IC0xIH0sIHsgY3JlYXRpb25UaW1lOiAtMSB9XVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMubGlzdENoaWxkcmVuKGVudHJ5LCBOT19QQVRDSF9GSUxURVJfT1JERVIsIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdHMgcGF0Y2ggdmVyc2lvbnMgb2YgZ2l2ZW4gYmFzZSB2ZXJzaW9uIHVuZGVyIHRoZSBlbnRyeS5cbiAgICogVmVyc2lvbnMgYXJlIG9yZGVyZWQgYnkgY3JlYXRpb24gdGltZSAoYXNzdW1pbmcgdGhlIGVhcmxpZXIgY3JlYXRlZCwgdGhlIG9sZGVyIHRoZSB2ZXJzaW9uKS5cbiAgICogQHBhcmFtIGVudHJ5IFRvcCBsZXZlbCByZXBvc2l0b3J5IGVudHJ5LlxuICAgKiBAcGFyYW0gYmFzZVZlcnNpb24gQmFzZSB2ZXJzaW9uLlxuICAgKiBAcGFyYW0gcGFyYW1zIEFkZGl0aW9uYWwgcXVlcnkgcGFyYW1zLlxuICAgKi9cbiAgbGlzdFBhdGNoVmVyc2lvbnMoZW50cnk6IElNYW5hZ2VkT2JqZWN0LCBiYXNlVmVyc2lvbjogRmlybXdhcmVCaW5hcnkgfCBzdHJpbmcsIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgdmVyc2lvbiA9IGlzU3RyaW5nKGJhc2VWZXJzaW9uKSA/IGJhc2VWZXJzaW9uIDogZ2V0KGJhc2VWZXJzaW9uLCAnYzh5X0Zpcm13YXJlLnZlcnNpb24nKTtcbiAgICBjb25zdCBQQVRDSF9GSUxURVJfT1JERVIgPSB7XG4gICAgICBfX2ZpbHRlcjoge1xuICAgICAgICAnYzh5X1BhdGNoLmRlcGVuZGVuY3knOiB2ZXJzaW9uXG4gICAgICB9LFxuICAgICAgX19vcmRlcmJ5OiBbeyAnY3JlYXRpb25UaW1lLmRhdGUnOiAtMSB9LCB7IGNyZWF0aW9uVGltZTogLTEgfV1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmxpc3RDaGlsZHJlbihlbnRyeSwgUEFUQ0hfRklMVEVSX09SREVSLCBwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RzIHBhdGNoIHZlcnNpb25zIG9mIGdpdmVuIGJhc2UgdmVyc2lvbiB1bmRlciB0aGUgZW50cnkgaW5jbHVkaW5nIHRoZSBiYXNlIHZlcnNpb24uXG4gICAqIFZlcnNpb25zIGFyZSBvcmRlcmVkIGJ5IGNyZWF0aW9uIHRpbWUgKGFzc3VtaW5nIHRoZSBlYXJsaWVyIGNyZWF0ZWQsIHRoZSBvbGRlciB0aGUgdmVyc2lvbikuXG4gICAqIEluIHRlcm1zIG9mIGxlZ2FjeSBiYXNlIHZlcnNpb24gdGhlIGVudHJ5IGdldHMgdHJhbnNmb3JtZWQgdG8gZml0IHRoZSBuZWVkZWQgZGF0YSBtb2RlbC5cbiAgICogQHBhcmFtIGVudHJ5IFRvcCBsZXZlbCByZXBvc2l0b3J5IGVudHJ5LlxuICAgKiBAcGFyYW0gYmFzZVZlcnNpb24gQmFzZSB2ZXJzaW9uLlxuICAgKiBAcGFyYW0gcGFyYW1zIEFkZGl0aW9uYWwgcXVlcnkgcGFyYW1zLlxuICAgKi9cbiAgbGlzdEJhc2VWZXJzaW9uQW5kUGF0Y2hlcyhlbnRyeTogSU1hbmFnZWRPYmplY3QsIGJhc2VWZXJzaW9uOiBJTWFuYWdlZE9iamVjdCwgcGFyYW1zID0ge30pIHtcbiAgICBpZiAodGhpcy5pc0xlZ2FjeUVudHJ5KGVudHJ5KSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIGRhdGE6IFtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjOHlfRmlybXdhcmU6IHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBlbnRyeS52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHVybDogZW50cnkudXJsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnRyeVxuICAgICAgICAgIClcbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgUEFUQ0hfRklMVEVSX09SREVSID0ge1xuICAgICAgX19maWx0ZXI6IHtcbiAgICAgICAgX19vcjoge1xuICAgICAgICAgICdjOHlfUGF0Y2guZGVwZW5kZW5jeSc6IGJhc2VWZXJzaW9uLmM4eV9GaXJtd2FyZS52ZXJzaW9uLFxuICAgICAgICAgICdjOHlfRmlybXdhcmUudmVyc2lvbic6IGJhc2VWZXJzaW9uLmM4eV9GaXJtd2FyZS52ZXJzaW9uXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfX29yZGVyYnk6IFt7ICdjOHlfUGF0Y2guZGVwZW5kZW5jeSc6IDEgfSwgeyAnYzh5X0Zpcm13YXJlLnZlcnNpb24nOiAxIH1dXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5saXN0Q2hpbGRyZW4oZW50cnksIFBBVENIX0ZJTFRFUl9PUkRFUiwgcGFyYW1zKTtcbiAgfVxuXG4gIGxpc3RDaGlsZHJlbihlbnRyeTogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4sIGZpbHRlcnMgPSB7fSwgcGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IGNoaWxkcmVuRmlsdGVycyA9IHsgX19ieWdyb3VwaWQ6IGVudHJ5LmlkIH07XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZEFuZEZpbHRlcihmaWx0ZXJzLCBjaGlsZHJlbkZpbHRlcnMpO1xuICAgIC8vIEZJWE1FOiBuZWVkZWQgYmVjYXVzZSBvZiBpc3N1ZSBpbiBmb3JPZiBkaXJlY3RpdmUgKC4uLilcbiAgICBwYXJhbXMud2l0aFRvdGFsUGFnZXMgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLmludmVudG9yeS5saXN0UXVlcnkocXVlcnksIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBhbGwgaXRlbXMgZnJvbSB0aGUgbGlzdCBzdGFydGluZyB3aXRoIHRoZSBwcm92aWRlZCBwYWdlLlxuICAgKiBAcGFyYW0gZmlyc3RQYWdlIFRoZSBmaXJzdCBwYWdlIG9mIHRoZSBsaXN0IHRvIGZldGNoIGFsbCBpdGVtcyBmb3IuXG4gICAqL1xuICBhc3luYyBmZXRjaEFsbEl0ZW1zRnJvbUxpc3QoZmlyc3RQYWdlKSB7XG4gICAgbGV0IGFsbEl0ZW1zO1xuXG4gICAgaWYgKCFmaXJzdFBhZ2UudGhlbikge1xuICAgICAgYWxsSXRlbXMgPSBbLi4uZmlyc3RQYWdlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHsgcGFnaW5nLCBkYXRhOiBpdGVtcyB9ID0gYXdhaXQgZmlyc3RQYWdlO1xuICAgICAgYWxsSXRlbXMgPSBbLi4uaXRlbXNdO1xuXG4gICAgICB3aGlsZSAocGFnaW5nICYmIHBhZ2luZy5uZXh0UGFnZSkge1xuICAgICAgICAoeyBwYWdpbmcsIGRhdGE6IGl0ZW1zIH0gPSBhd2FpdCBwYWdpbmcubmV4dCgpKTtcbiAgICAgICAgYWxsSXRlbXMgPSBbLi4uYWxsSXRlbXMsIC4uLml0ZW1zXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWxsSXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0b3AgbGV2ZWwgcmVwb3NpdG9yeSBlbnRyeSBtYW5hZ2VkIG9iamVjdCBmb3IgYmFzZSBvciBwYXRjaCB2ZXJzaW9uLlxuICAgKiBAcGFyYW0gbW8gQmFzZSBvciBwYXRjaCB2ZXJzaW9uIG1hbmFnZWQgb2JqZWN0IHdpdGggcGFyZW50cy5cbiAgICovXG4gIGdldFJlcG9zaXRvcnlFbnRyeU1PJChtbzogSU1hbmFnZWRPYmplY3QpOiBPYnNlcnZhYmxlPElNYW5hZ2VkT2JqZWN0IHwgdW5kZWZpbmVkPiB7XG4gICAgaWYgKCFtbykge1xuICAgICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGNvbnN0IFtyZWZlcmVuY2VdID0gZ2V0KG1vLCAnYWRkaXRpb25QYXJlbnRzLnJlZmVyZW5jZXMnKTtcbiAgICBjb25zdCBpZCA9IGdldChyZWZlcmVuY2UsICdtYW5hZ2VkT2JqZWN0LmlkJyk7XG4gICAgcmV0dXJuIGlkXG4gICAgICA/IGZyb20odGhpcy5pbnZlbnRvcnkuZGV0YWlsKGlkLCB7IHdpdGhDaGlsZHJlbjogZmFsc2UgfSkpLnBpcGUobWFwKCh7IGRhdGEgfSkgPT4gZGF0YSkpXG4gICAgICA6IG9mKHVuZGVmaW5lZCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYmFzZSBvciBwYXRjaCB2ZXJzaW9uIG1hbmFnZWQgb2JqZWN0LlxuICAgKiBAcGFyYW0gZGV2aWNlUmVwb3NpdG9yeUZyYWdtZW50IERldmljZSByZXBvc2l0b3J5IGZyYWdtZW50LlxuICAgKiBAcGFyYW0gdHlwZSBUb3AgbGV2ZWwgcmVwb3NpdG9yeSBlbnRyeSB0eXBlLlxuICAgKiBAcGFyYW0gY29uZmlndXJhdGlvbiBDb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIG9wdGlvbnM6XG4gICAqIC0gKipza2lwTGVnYWN5KiogLSBgYm9vbGVhbmAgLSBFeGNsdWRlIGxlZ2FjeSBlbnRyaWVzLlxuICAgKiAtICoqZmlsdGVycyoqIC0gYG9iamVjdGAgLSBGaWx0ZXIgb2JqZWN0LlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBhcyBpdCBkb2Vzbid0IHN1cHBvcnQgJ21pc3NpbmcgdXJsJyBjYXNlXG4gICAqL1xuICBnZXRSZXBvc2l0b3J5QmluYXJ5TW9CeVZlcnNpb24oXG4gICAgZGV2aWNlUmVwb3NpdG9yeUZyYWdtZW50OiBEZXZpY2VGaXJtd2FyZSB8IERldmljZVNvZnR3YXJlLFxuICAgIHR5cGU6IFJlcG9zaXRvcnlUeXBlLFxuICAgIHsgc2tpcExlZ2FjeSA9IGZhbHNlLCBmaWx0ZXJzID0ge30gfTogeyBza2lwTGVnYWN5PzogYm9vbGVhbjsgZmlsdGVycz86IG9iamVjdCB9ID0ge31cbiAgKTogUHJvbWlzZTxJTWFuYWdlZE9iamVjdD4ge1xuICAgIGNvbnN0IHsgdmVyc2lvbiwgdXJsLCBuYW1lIH0gPSBkZXZpY2VSZXBvc2l0b3J5RnJhZ21lbnQ7XG4gICAgY29uc3QgcmVwb3NpdG9yeUJpbmFyeVR5cGUgPSBSRVBPU0lUT1JZX0JJTkFSWV9UWVBFU1t0eXBlXTtcbiAgICBsZXQgcXVlcnk7XG4gICAgY29uc3QgbmV3TW9kZWxCYXNlVmVyc2lvblF1ZXJ5ID0ge1xuICAgICAgW2Ake3R5cGV9LnZlcnNpb25gXTogdmVyc2lvbixcbiAgICAgIFtgJHt0eXBlfS51cmxgXTogdXJsLFxuICAgICAgdHlwZTogcmVwb3NpdG9yeUJpbmFyeVR5cGVcbiAgICB9O1xuICAgIGNvbnN0IGxlZ2FjeVZlcnNpb25RdWVyeSA9IHsgdXJsLCB0eXBlLCBuYW1lIH07XG4gICAgZmlsdGVycyA9IHsgd2l0aENoaWxkcmVuOiBmYWxzZSwgd2l0aFBhcmVudHM6IHRydWUsIC4uLmZpbHRlcnMgfTtcblxuICAgIGlmIChza2lwTGVnYWN5KSB7XG4gICAgICBxdWVyeSA9IHtcbiAgICAgICAgX19hbmQ6IHtcbiAgICAgICAgICAuLi5uZXdNb2RlbEJhc2VWZXJzaW9uUXVlcnlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVlcnkgPSB7XG4gICAgICAgIF9fb3I6IFt7IF9fYW5kOiB7IC4uLm5ld01vZGVsQmFzZVZlcnNpb25RdWVyeSB9IH0sIHsgX19hbmQ6IHsgLi4ubGVnYWN5VmVyc2lvblF1ZXJ5IH0gfV1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5Lmxpc3RRdWVyeShxdWVyeSwgZmlsdGVycykudGhlbigoeyBkYXRhIH0pID0+IGhlYWQoZGF0YSkpO1xuICB9XG5cbiAgZ2V0QmluYXJ5TmFtZSQoYmluYXJ5VXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIGlmICghYmluYXJ5VXJsKSB7XG4gICAgICByZXR1cm4gb2YoJy0tLScpO1xuICAgIH1cblxuICAgIGNvbnN0IGJpbmFyeUlkID0gdGhpcy5pbnZlbnRvcnlCaW5hcnkuZ2V0SWRGcm9tVXJsKGJpbmFyeVVybCk7XG4gICAgaWYgKCFiaW5hcnlJZCkge1xuICAgICAgcmV0dXJuIG9mKGJpbmFyeVVybCk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcigoKSA9PiB0aGlzLmludmVudG9yeS5kZXRhaWwoYmluYXJ5SWQpLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5kYXRhKSkucGlwZShcbiAgICAgIG1hcChtbyA9PiBtby5uYW1lKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGFuIGludmVudG9yeSBxdWVyeSBvYmplY3Qgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZmluZFxuICAgKiByZXBvc2l0b3J5IGVudHJpZXMgb2Ygc3BlY2lmaWVkIHR5cGUgbWF0Y2hpbmcgdGhlIHR5cGUgb2YgcHJvdmlkZWQgZGV2aWNlLlxuICAgKiBAcGFyYW0gcmVwb3NpdG9yeVR5cGUgVGhlIHR5cGUgb2YgcmVwb3NpdG9yeSBlbnRyaWVzIHdoaWNoIHdpbGwgYmUgcXVlcmllZCB3aXRoIHRoZSBnZW5lcmF0ZWQgcXVlcnkuXG4gICAqIEBwYXJhbSBkZXZpY2UgVGhlIGRldmljZSBmb3Igd2hpY2ggbWF0Y2hpbmcgcmVwb3NpdG9yeSBlbnRyaWVzIHdpbGwgYmUgcXVlcmllZCB3aXRoIHRoZSBnZW5lcmF0ZWQgcXVlcnkuXG4gICAqL1xuXG4gIGdldERldmljZVR5cGVRdWVyeShyZXBvc2l0b3J5VHlwZTogUmVwb3NpdG9yeVR5cGUsIGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBvYmplY3Qge1xuICAgIGxldCByZXN1bHQgPSB7IHR5cGU6IHJlcG9zaXRvcnlUeXBlIH07XG4gICAgaWYgKHJlcG9zaXRvcnlUeXBlID09PSBSZXBvc2l0b3J5VHlwZS5DT05GSUdVUkFUSU9OKSB7XG4gICAgICBpZiAoZGV2aWNlLnR5cGUpIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgX19vcjogW3sgZGV2aWNlVHlwZTogZGV2aWNlLnR5cGUgfSwgeyBfX25vdDogeyBfX2hhczogYGRldmljZVR5cGVgIH0gfV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMucXVlcmllc1V0aWwuYWRkQW5kRmlsdGVyKHJlc3VsdCwge1xuICAgICAgICBfX29yOiBbXG4gICAgICAgICAgeyAnYzh5X0ZpbHRlci50eXBlJzogZGV2aWNlLnR5cGUgfSxcbiAgICAgICAgICB7ICdjOHlfRmlsdGVyLnR5cGUnOiAnJyB9LFxuICAgICAgICAgIHsgX19ub3Q6IHsgX19oYXM6IGBjOHlfRmlsdGVyLnR5cGVgIH0gfVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiBpbnZlbnRvcnkgcXVlcnkgb2JqZWN0IHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZpbmRcbiAgICogcmVwb3NpdG9yeSBlbnRyaWVzIG1hdGNoaW5nIHRoZSBwcmVkZWZpbmVkIHNvZnR3YXJlIHR5cGVzIHByb3ZpZGVkIGluIHRoZSBkZXZpY2UuXG4gICAqIEBwYXJhbSBkZXZpY2UgVGhlIGRldmljZSBmb3Igd2hpY2ggbWF0Y2hpbmcgcmVwb3NpdG9yeSBlbnRyaWVzIHdpbGwgYmUgcXVlcmllZCB3aXRoIHRoZSBnZW5lcmF0ZWQgcXVlcnkuXG4gICAqIEBwYXJhbSBxdWVyeSBUaGUgcXVlcnkgdG8gd2hpY2ggdGhlIHNvZnR3YXJlIHR5cGVzIGZpbHRlcnMgd2lsbCBiZSBhdHRhY2hlZC4gRGVmYXVsdCB2YWx1ZSBpcyBhbiBvYmplY3QgY29udGFpbmcgcmVwb3NpdG9yeSB0eXBlIHNvZnR3YXJlLlxuICAgKi9cbiAgZ2V0U29mdHdhcmVUeXBlUXVlcnkoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCwgcXVlcnk/OiBvYmplY3QpOiBvYmplY3Qge1xuICAgIGxldCByZXN1bHQgPSB7IC4uLihxdWVyeSB8fCB7fSksIHR5cGU6IFJlcG9zaXRvcnlUeXBlLlNPRlRXQVJFIH07XG5cbiAgICBpZiAoZGV2aWNlLmM4eV9TdXBwb3J0ZWRTb2Z0d2FyZVR5cGVzKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZEFuZEZpbHRlcihyZXN1bHQsIHtcbiAgICAgICAgX19vcjogW2RldmljZS5jOHlfU3VwcG9ydGVkU29mdHdhcmVUeXBlcy5tYXAodHlwZSA9PiAoeyBzb2Z0d2FyZVR5cGU6IHR5cGUgfSkpXVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gaW52ZW50b3J5IHF1ZXJ5IG9iamVjdCB3aGljaCBjYW4gYmUgdXNlZCB0byBmaW5kIGNvbmZpZ3VyYXRpb24gcmVwb3NpdG9yeSBlbnRyaWVzXG4gICAqIG1hdGNoaW5nIHRoZSB0eXBlIG9mIHByb3ZpZGVkIGRldmljZSBhbmQgc3BlY2lmaWVkIGNvbmZpZ3VyYXRpb24gdHlwZS5cbiAgICogQHBhcmFtIGRldmljZSBUaGUgZGV2aWNlIGZvciB3aGljaCBtYXRjaGluZyByZXBvc2l0b3J5IGVudHJpZXMgd2lsbCBiZSBxdWVyaWVkIHdpdGggdGhlIGdlbmVyYXRlZCBxdWVyeS5cbiAgICogQHBhcmFtIGNvbmZpZ3VyYXRpb25UeXBlIENvbmZpZ3VyYXRpb24gdHlwZSBmb3Igd2hpY2ggbWF0Y2hpbmcgcmVwb3NpdG9yeSBlbnRyaWVzIHdpbGwgYmUgcXVlcmllZCB3aXRoIHRoZSBnZW5lcmF0ZWQgcXVlcnkuXG4gICAqL1xuICBnZXRDb25maWd1cmF0aW9uVHlwZVF1ZXJ5KGRldmljZTogSU1hbmFnZWRPYmplY3QsIGNvbmZpZ3VyYXRpb25UeXBlOiBzdHJpbmcpOiBvYmplY3Qge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5nZXREZXZpY2VUeXBlUXVlcnkoUmVwb3NpdG9yeVR5cGUuQ09ORklHVVJBVElPTiwgZGV2aWNlKTtcbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIocXVlcnksIHtcbiAgICAgIF9fb3I6IFtcbiAgICAgICAgeyBjb25maWd1cmF0aW9uVHlwZSB9LFxuICAgICAgICB7IGNvbmZpZ3VyYXRpb25UeXBlOiAnJyB9LFxuICAgICAgICB7IF9fbm90OiB7IF9faGFzOiBgY29uZmlndXJhdGlvblR5cGVgIH0gfVxuICAgICAgXVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxpc3Qgb2Ygc29mdHdhcmUgaW5zdGFsbGVkIGluIHRoZSBkZXZpY2UgaW4gdGhlIHVuaWZvcm0gZm9ybWF0LlxuICAgKiBTdXBwb3J0cyBjOHlfU29mdHdhcmVMaXN0IGFuZCBjOHlfU29mdHdhcmUgZnJhZ21lbnRzLlxuICAgKiBAcGFyYW0gZGV2aWNlIFRoZSBkZXZpY2Ugd2hvc2Ugc29mdHdhcmUgbGlzdCBzaG91bGQgYmUgcmV0dXJuZWQuXG4gICAqL1xuICBnZXREZXZpY2VTb2Z0d2FyZUxpc3QoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IERldmljZVNvZnR3YXJlW10ge1xuICAgIGlmIChkZXZpY2UuYzh5X1NvZnR3YXJlTGlzdCkge1xuICAgICAgcmV0dXJuIGNsb25lRGVlcChkZXZpY2UuYzh5X1NvZnR3YXJlTGlzdCk7XG4gICAgfVxuICAgIGlmIChkZXZpY2UuYzh5X1NvZnR3YXJlKSB7XG4gICAgICByZXR1cm4gX21hcChkZXZpY2UuYzh5X1NvZnR3YXJlLCAodmVyc2lvbiwgbmFtZSkgPT4gKHsgbmFtZSwgdmVyc2lvbiB9KSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlcyBhIHNvZnR3YXJlIHVwZGF0ZSBvcGVyYXRpb24gZm9yIGdpdmVuIGRldmljZSBhbmQgdGhlIGxpc3Qgb2YgY2hhbmdlcywgYW5kIHNlbmRzIGl0IHRvIHRoZSBkZXZpY2UuXG4gICAqIEBwYXJhbSBkZXZpY2UgVGhlIGRldmljZSB3aGljaCB0aGUgb3BlcmF0aW9uIHNob3VsZCBiZSBwcmVwYXJlZCBmb3IgYW5kIHNlbnQgdG8uXG4gICAqIEBwYXJhbSBjaGFuZ2VzIFRoZSBsaXN0IG9mIHNvZnR3YXJlIGNoYW5nZXMgd2hpY2ggc2hvdWxkIGJlIGFwcGxpZWQuXG4gICAqL1xuICBhc3luYyBjcmVhdGVTb2Z0d2FyZVVwZGF0ZU9wZXJhdGlvbihcbiAgICBkZXZpY2U6IElNYW5hZ2VkT2JqZWN0LFxuICAgIGNoYW5nZXM6IERldmljZVNvZnR3YXJlQ2hhbmdlW11cbiAgKTogUHJvbWlzZTxJT3BlcmF0aW9uPiB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gYXdhaXQgdGhpcy5nZXRTb2Z0d2FyZVVwZGF0ZU9wZXJhdGlvbihkZXZpY2UsIGNoYW5nZXMpO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5vcGVyYXRpb24uY3JlYXRlKG9wZXJhdGlvbikpLmRhdGE7XG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZXMgYSBzb2Z0d2FyZSB1cGRhdGUgb3BlcmF0aW9uIGZvciBnaXZlbiBkZXZpY2UgYW5kIGNoYW5nZXMuXG4gICAqIFJldHVybmVkIG9wZXJhdGlvbiB0eXBlIGRlcGVuZHMgb24gZGV2aWNlJ3Mgc3VwcG9ydGVkIG9wZXJhdGlvbnMuXG4gICAqIFN1cHBvcnRzIGM4eV9Tb2Z0d2FyZVVwZGF0ZSwgYzh5X1NvZnR3YXJlTGlzdCwgYW5kIGM4eV9Tb2Z0d2FyZSBvcGVyYXRpb25zLlxuICAgKiBAcGFyYW0gZGV2aWNlIFRoZSBkZXZpY2UgZm9yIHdoaWNoIG9wZXJhdGlvbiBzaG91bGQgYmUgcHJlcGFyZWQuXG4gICAqIEBwYXJhbSBjaGFuZ2VzIFRoZSBsaXN0IG9mIHNvZnR3YXJlIGNoYW5nZXMgd2hpY2ggc2hvdWxkIGJlIGFwcGxpZWQuXG4gICAqL1xuICBhc3luYyBnZXRTb2Z0d2FyZVVwZGF0ZU9wZXJhdGlvbihcbiAgICBkZXZpY2U6IElNYW5hZ2VkT2JqZWN0LFxuICAgIGNoYW5nZXM6IERldmljZVNvZnR3YXJlQ2hhbmdlW11cbiAgKTogUHJvbWlzZTxJT3BlcmF0aW9uPiB7XG4gICAgY29uc3Qgb3BlcmF0aW9uOiBJT3BlcmF0aW9uID0ge1xuICAgICAgZGV2aWNlSWQ6IGRldmljZS5pZCxcbiAgICAgIGRlc2NyaXB0aW9uOiBgQXBwbHkgc29mdHdhcmUgY2hhbmdlczogJHtjaGFuZ2VzXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgY2hhbmdlID0+XG4gICAgICAgICAgICBgJHtjaGFuZ2UuYWN0aW9ufSBcIiR7Y2hhbmdlLm5hbWV9XCIke1xuICAgICAgICAgICAgICBjaGFuZ2UudmVyc2lvbiA/IGAgKHZlcnNpb246ICR7Y2hhbmdlLnZlcnNpb259KWAgOiAnJ1xuICAgICAgICAgICAgfWBcbiAgICAgICAgKVxuICAgICAgICAuam9pbignLCAnKX1gXG4gICAgfTtcbiAgICBpZiAoZGV2aWNlLmM4eV9TdXBwb3J0ZWRPcGVyYXRpb25zLmluY2x1ZGVzKCdjOHlfU29mdHdhcmVVcGRhdGUnKSkge1xuICAgICAgb3BlcmF0aW9uLmM4eV9Tb2Z0d2FyZVVwZGF0ZSA9IChjbG9uZURlZXAoY2hhbmdlcykgfHwgW10pLm1hcChjaGFuZ2UgPT5cbiAgICAgICAgb21pdEJ5KGNoYW5nZSwgaXNOaWwpXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoZGV2aWNlLmM4eV9TdXBwb3J0ZWRPcGVyYXRpb25zLmluY2x1ZGVzKCdjOHlfU29mdHdhcmVMaXN0JykpIHtcbiAgICAgIG9wZXJhdGlvbi5jOHlfU29mdHdhcmVMaXN0ID0gY2xvbmVEZWVwKFxuICAgICAgICBhd2FpdCB0aGlzLmdldEN1cnJlbnRTb2Z0d2FyZShkZXZpY2UsICdjOHlfU29mdHdhcmVMaXN0JywgW10pXG4gICAgICApO1xuICAgICAgY2hhbmdlcy5mb3JFYWNoKGNoYW5nZSA9PiB7XG4gICAgICAgIGNvbnN0IGRldmljZVNvZnR3YXJlOiBEZXZpY2VTb2Z0d2FyZSA9IHBpY2sob21pdEJ5KGNoYW5nZSwgaXNOaWwpLCBbXG4gICAgICAgICAgJ25hbWUnLFxuICAgICAgICAgICd2ZXJzaW9uJyxcbiAgICAgICAgICAndXJsJyxcbiAgICAgICAgICAnc29mdHdhcmVUeXBlJ1xuICAgICAgICBdKTtcbiAgICAgICAgaWYgKGNoYW5nZS5hY3Rpb24gPT09ICdkZWxldGUnKSB7XG4gICAgICAgICAgcmVtb3ZlKG9wZXJhdGlvbi5jOHlfU29mdHdhcmVMaXN0LCBkZXZpY2VTb2Z0d2FyZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZS5hY3Rpb24gPT09ICdpbnN0YWxsJykge1xuICAgICAgICAgIGNvbnN0IHNvZnR3YXJlSXRlbVRvVXBkYXRlSWR4ID0gb3BlcmF0aW9uLmM4eV9Tb2Z0d2FyZUxpc3QuZmluZEluZGV4KFxuICAgICAgICAgICAgaXRlbSA9PiBpdGVtLm5hbWUgPT09IGNoYW5nZS5uYW1lXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoc29mdHdhcmVJdGVtVG9VcGRhdGVJZHggPiAtMSkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHNvZnR3YXJlXG4gICAgICAgICAgICBvcGVyYXRpb24uYzh5X1NvZnR3YXJlTGlzdC5zcGxpY2Uoc29mdHdhcmVJdGVtVG9VcGRhdGVJZHgsIDEsIGRldmljZVNvZnR3YXJlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaW5zdGFsbCBzb2Z0d2FyZVxuICAgICAgICAgICAgb3BlcmF0aW9uLmM4eV9Tb2Z0d2FyZUxpc3QucHVzaChkZXZpY2VTb2Z0d2FyZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGRldmljZS5jOHlfU3VwcG9ydGVkT3BlcmF0aW9ucy5pbmNsdWRlcygnYzh5X1NvZnR3YXJlJykpIHtcbiAgICAgIG9wZXJhdGlvbi5jOHlfU29mdHdhcmUgPSBjbG9uZURlZXAoYXdhaXQgdGhpcy5nZXRDdXJyZW50U29mdHdhcmUoZGV2aWNlLCAnYzh5X1NvZnR3YXJlJywge30pKTtcbiAgICAgIGNoYW5nZXMuZm9yRWFjaChjaGFuZ2UgPT4ge1xuICAgICAgICBpZiAoY2hhbmdlLmFjdGlvbiA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICBkZWxldGUgb3BlcmF0aW9uLmM4eV9Tb2Z0d2FyZVtjaGFuZ2UubmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZS5hY3Rpb24gPT09ICdpbnN0YWxsJykge1xuICAgICAgICAgIG9wZXJhdGlvbi5jOHlfU29mdHdhcmVbY2hhbmdlLm5hbWVdID0gY2hhbmdlLnZlcnNpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIHRoZSBsaXN0IG9mIGRldmljZSBzb2Z0d2FyZSBjaGFuZ2VzIGZyb20gZ2l2ZW4gb3BlcmF0aW9uIGluIHRoZSBjb250ZXh0IG9mIGdpdmVuIGRldmljZS5cbiAgICogQHBhcmFtIG9wZXJhdGlvbiBUaGUgb3BlcmF0aW9uIGZyb20gd2hpY2ggdGhlIGxpc3Qgc2hvdWxkIGJlIGV4dHJhY3RlZC5cbiAgICogQHBhcmFtIGRldmljZSBUaGUgdGFyZ2V0IGRldmljZSBvZiB0aGUgb3BlcmF0aW9uLlxuICAgKi9cbiAgYXN5bmMgZ2V0RGV2aWNlU29mdHdhcmVDaGFuZ2VzRnJvbU9wZXJhdGlvbihcbiAgICBvcGVyYXRpb246IElPcGVyYXRpb24sXG4gICAgZGV2aWNlOiBJTWFuYWdlZE9iamVjdFxuICApOiBQcm9taXNlPERldmljZVNvZnR3YXJlQ2hhbmdlW10+IHtcbiAgICBpZiAob3BlcmF0aW9uLmM4eV9Tb2Z0d2FyZVVwZGF0ZSkge1xuICAgICAgcmV0dXJuIGNsb25lRGVlcChvcGVyYXRpb24uYzh5X1NvZnR3YXJlVXBkYXRlKTtcbiAgICB9XG4gICAgaWYgKG9wZXJhdGlvbi5jOHlfU29mdHdhcmVMaXN0KSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXREZXZpY2VTb2Z0d2FyZUNoYW5nZXNGcm9tU29mdHdhcmVMaXN0T3BlcmF0aW9uKG9wZXJhdGlvbiwgZGV2aWNlKTtcbiAgICB9XG4gICAgaWYgKG9wZXJhdGlvbi5jOHlfU29mdHdhcmUpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldERldmljZVNvZnR3YXJlQ2hhbmdlc0Zyb21Tb2Z0d2FyZU9wZXJhdGlvbihvcGVyYXRpb24sIGRldmljZSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlcyBhIGZpcm13YXJlIHVwZGF0ZSBvcGVyYXRpb24gZm9yIGdpdmVuIGRldmljZSBhbmQgdGhlIHNlbGVjdGVkIHJlcG9zaXRvcnkgYmluYXJ5LCBhbmQgc2VuZHMgaXQgdG8gdGhlIGRldmljZS5cbiAgICogQHBhcmFtIGRldmljZSBUaGUgZGV2aWNlIHdoaWNoIHRoZSBvcGVyYXRpb24gc2hvdWxkIGJlIHByZXBhcmVkIGZvciBhbmQgc2VudCB0by5cbiAgICogQHBhcmFtIHNlbGVjdGVkT3B0aW9uIFRoZSBzZWxlY3RlZCByZXBvc2l0b3J5IGJpbmFyeSBvcHRpb24uXG4gICAqL1xuICBhc3luYyBjcmVhdGVGaXJtd2FyZVVwZGF0ZU9wZXJhdGlvbihcbiAgICBkZXZpY2U6IElNYW5hZ2VkT2JqZWN0LFxuICAgIHNlbGVjdGVkT3B0aW9uOiBTZWxlY3RlZFJlcG9zaXRvcnlCaW5hcnlcbiAgKTogUHJvbWlzZTxJT3BlcmF0aW9uPiB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5nZXRGaXJtd2FyZVVwZGF0ZU9wZXJhdGlvbihkZXZpY2UsIHNlbGVjdGVkT3B0aW9uKTtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMub3BlcmF0aW9uLmNyZWF0ZShvcGVyYXRpb24pKS5kYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmVzIGEgZmlybXdhcmUgdXBkYXRlIG9wZXJhdGlvbiBmb3IgZ2l2ZW4gZGV2aWNlIGFuZCBzZWxlY3RlZCB2ZXJzaW9uLlxuICAgKiBTdXBwb3J0cyBjOHlfRmlybXdhcmUgb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gZGV2aWNlIFRoZSBkZXZpY2UgZm9yIHdoaWNoIG9wZXJhdGlvbiBzaG91bGQgYmUgcHJlcGFyZWQuXG4gICAqIEBwYXJhbSBzZWxlY3RlZE9wdGlvbiBTZWxlY3RlZCBmaXJtd2FyZSB2ZXJzaW9uLlxuICAgKi9cbiAgZ2V0RmlybXdhcmVVcGRhdGVPcGVyYXRpb24oXG4gICAgZGV2aWNlOiBJTWFuYWdlZE9iamVjdCxcbiAgICBzZWxlY3RlZE9wdGlvbjogU2VsZWN0ZWRSZXBvc2l0b3J5QmluYXJ5XG4gICk6IElPcGVyYXRpb24ge1xuICAgIGRlbGV0ZSBzZWxlY3RlZE9wdGlvbi5pZDtcblxuICAgIGNvbnN0IG9wZXJhdGlvbjogSU9wZXJhdGlvbiA9IHtcbiAgICAgIGRldmljZUlkOiBkZXZpY2UuaWQsXG4gICAgICBkZXNjcmlwdGlvbjogYFVwZGF0ZSBmaXJtd2FyZSB0bzogXCIke3NlbGVjdGVkT3B0aW9uLm5hbWV9XCIke1xuICAgICAgICBzZWxlY3RlZE9wdGlvbi52ZXJzaW9uID8gYCAodmVyc2lvbjogJHtzZWxlY3RlZE9wdGlvbi52ZXJzaW9ufSlgIDogJydcbiAgICAgIH1gLFxuICAgICAgYzh5X0Zpcm13YXJlOiB7IC4uLnNlbGVjdGVkT3B0aW9uIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG9wZXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlcyBhIGNvbmZpZ3VyYXRpb24gZmlsZSB1cGxvYWQgb3BlcmF0aW9uIGZvciBnaXZlbiBkZXZpY2UgYW5kIGNvbmZpZ3VyYXRpb24gdHlwZS5cbiAgICogQHBhcmFtIGRldmljZSBUaGUgZGV2aWNlIGZvciB3aGljaCBvcGVyYXRpb24gc2hvdWxkIGJlIHByZXBhcmVkLlxuICAgKiBAcGFyYW0gY29uZmlndXJhdGlvblR5cGUgU2VsZWN0ZWQgY29uZmlndXJhdGlvbiB0eXBlLlxuICAgKiBAcGFyYW0gaXNMZWdhY3kgIEEgbGVnYWN5IG9wZXJhdGlvbiBpcyBjcmVhdGVkIHdpdGhvdXQgYSBjb25maWd1cmF0aW9uVHlwZS5cbiAgICovXG4gIGdldFVwbG9hZENvbmZpZ3VyYXRpb25GaWxlT3BlcmF0aW9uKFxuICAgIGRldmljZTogSU1hbmFnZWRPYmplY3QsXG4gICAgY29uZmlndXJhdGlvblR5cGU6IHN0cmluZyxcbiAgICBpc0xlZ2FjeTogYm9vbGVhbiA9IGZhbHNlXG4gICk6IElPcGVyYXRpb24ge1xuICAgIGlmIChpc0xlZ2FjeSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGV2aWNlSWQ6IGRldmljZS5pZCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBSZXRyaWV2ZSBjb25maWd1cmF0aW9uIHNuYXBzaG90IGZyb20gZGV2aWNlICR7ZGV2aWNlLm5hbWV9YCxcbiAgICAgICAgYzh5X1VwbG9hZENvbmZpZ0ZpbGU6IHt9XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZGV2aWNlSWQ6IGRldmljZS5pZCxcbiAgICAgIGRlc2NyaXB0aW9uOiBgUmV0cmlldmUgJHtjb25maWd1cmF0aW9uVHlwZX0gY29uZmlndXJhdGlvbiBzbmFwc2hvdCBmcm9tIGRldmljZSAke2RldmljZS5uYW1lfWAsXG4gICAgICBjOHlfVXBsb2FkQ29uZmlnRmlsZToge1xuICAgICAgICB0eXBlOiBjb25maWd1cmF0aW9uVHlwZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZXMgYSBjb25maWd1cmF0aW9uIGZpbGUgZG93bmxvYWQgb3BlcmF0aW9uIGZvciBnaXZlbiBkZXZpY2UgYW5kIGNvbmZpZ3VyYXRpb24gdHlwZS5cbiAgICogQHBhcmFtIGRldmljZSBUaGUgZGV2aWNlIGZvciB3aGljaCBvcGVyYXRpb24gc2hvdWxkIGJlIHByZXBhcmVkLlxuICAgKiBAcGFyYW0gY29uZmlndXJhdGlvblR5cGUgU2VsZWN0ZWQgY29uZmlndXJhdGlvbiB0eXBlLlxuICAgKiBAcGFyYW0gYmluYXJ5VXJsIFRoZSB1cmwgb2YgYSBiaW5hcnkgdG8gYmUgZG93bmxvYWRlZC5cbiAgICogQHBhcmFtIGlzTGVnYWN5IEEgbGVnYWN5IG9wZXJhdGlvbiBpcyBjcmVhdGVkIHdpdGhvdXQgYSBjb25maWd1cmF0aW9uVHlwZS5cbiAgICovXG4gIGdldERvd25sb2FkQ29uZmlndXJhdGlvbkZpbGVPcGVyYXRpb24oXG4gICAgZGV2aWNlOiBJTWFuYWdlZE9iamVjdCxcbiAgICBjb25maWd1cmF0aW9uVHlwZTogc3RyaW5nLFxuICAgIGNvbmZpZ1NuYXBzaG90OiBDb25maWd1cmF0aW9uU25hcHNob3QsXG4gICAgaXNMZWdhY3k6IGJvb2xlYW4gPSBmYWxzZVxuICApOiBJT3BlcmF0aW9uIHtcbiAgICBpZiAoaXNMZWdhY3kpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRldmljZUlkOiBkZXZpY2UuaWQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU2VuZCBjb25maWd1cmF0aW9uIHNuYXBzaG90ICR7Y29uZmlnU25hcHNob3QubmFtZX0gdG8gZGV2aWNlICR7ZGV2aWNlLm5hbWV9YCxcbiAgICAgICAgYzh5X0Rvd25sb2FkQ29uZmlnRmlsZToge1xuICAgICAgICAgIHVybDogY29uZmlnU25hcHNob3QuYmluYXJ5VXJsLFxuICAgICAgICAgIGM4eV9Db25maWd1cmF0aW9uRHVtcDoge1xuICAgICAgICAgICAgaWQ6IGNvbmZpZ1NuYXBzaG90LmlkXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZGV2aWNlSWQ6IGRldmljZS5pZCxcbiAgICAgIGRlc2NyaXB0aW9uOiBgU2VuZCBjb25maWd1cmF0aW9uIHNuYXBzaG90ICR7Y29uZmlnU25hcHNob3QubmFtZX0gb2YgY29uZmlndXJhdGlvbiB0eXBlICR7Y29uZmlndXJhdGlvblR5cGV9IHRvIGRldmljZSAke2RldmljZS5uYW1lfWAsXG4gICAgICBjOHlfRG93bmxvYWRDb25maWdGaWxlOiB7XG4gICAgICAgIHVybDogY29uZmlnU25hcHNob3QuYmluYXJ5VXJsLFxuICAgICAgICB0eXBlOiBjb25maWd1cmF0aW9uVHlwZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbGFzdCBmaXJtd2FyZSB1cGRhdGUgb3BlcmF0aW9uIGZvciBnaXZlbiBkZXZpY2UuXG4gICAqIExvb2tzIGZvciBjOHlfRmlybXdhcmUgb3BlcmF0aW9ucy5cbiAgICogQHBhcmFtIGRldmljZUlkIFRoZSBJRCBvZiB0aGUgZGV2aWNlIHRvIGZpbmQgYW4gb3BlcmF0aW9uIGZvci5cbiAgICovXG4gIGFzeW5jIGdldExhc3RGaXJtd2FyZVVwZGF0ZU9wZXJhdGlvbihkZXZpY2VJZDogc3RyaW5nIHwgbnVtYmVyKTogUHJvbWlzZTxJT3BlcmF0aW9uPiB7XG4gICAgY29uc3QgZmlsdGVycyA9IHtcbiAgICAgIGRldmljZUlkLFxuICAgICAgZGF0ZUZyb206IG5ldyBEYXRlKDApLnRvSVNPU3RyaW5nKCksXG4gICAgICBkYXRlVG86IG5ldyBEYXRlKERhdGUubm93KCkpLnRvSVNPU3RyaW5nKCksXG4gICAgICByZXZlcnQ6IHRydWUsXG4gICAgICBwYWdlU2l6ZTogMVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3RNYXRjaGluZ09wZXJhdGlvbihbeyAuLi5maWx0ZXJzLCBmcmFnbWVudFR5cGU6ICdjOHlfRmlybXdhcmUnIH1dKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsYXN0IHNvZnR3YXJlIHVwZGF0ZSBvcGVyYXRpb24gZm9yIGdpdmVuIGRldmljZS5cbiAgICogTG9va3MgZm9yIGM4eV9Tb2Z0d2FyZVVwZGF0ZSwgYzh5X1NvZnR3YXJlTGlzdCwgb3IgYzh5X1NvZnR3YXJlIG9wZXJhdGlvbnMuXG4gICAqIEBwYXJhbSBkZXZpY2VJZCBUaGUgSUQgb2YgdGhlIGRldmljZSB0byBmaW5kIGFuIG9wZXJhdGlvbiBmb3IuXG4gICAqL1xuICBhc3luYyBnZXRMYXN0U29mdHdhcmVVcGRhdGVPcGVyYXRpb24oZGV2aWNlSWQ6IHN0cmluZyB8IG51bWJlcik6IFByb21pc2U8SU9wZXJhdGlvbj4ge1xuICAgIGNvbnN0IGZpbHRlcnMgPSB7XG4gICAgICBkZXZpY2VJZCxcbiAgICAgIGRhdGVGcm9tOiBuZXcgRGF0ZSgwKS50b0lTT1N0cmluZygpLFxuICAgICAgZGF0ZVRvOiBuZXcgRGF0ZShEYXRlLm5vdygpKS50b0lTT1N0cmluZygpLFxuICAgICAgcmV2ZXJ0OiB0cnVlLFxuICAgICAgcGFnZVNpemU6IDFcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmdldExhdGVzdE1hdGNoaW5nT3BlcmF0aW9uKFtcbiAgICAgIHsgLi4uZmlsdGVycywgZnJhZ21lbnRUeXBlOiAnYzh5X1NvZnR3YXJlVXBkYXRlJyB9LFxuICAgICAgeyAuLi5maWx0ZXJzLCBmcmFnbWVudFR5cGU6ICdjOHlfU29mdHdhcmVMaXN0JyB9LFxuICAgICAgeyAuLi5maWx0ZXJzLCBmcmFnbWVudFR5cGU6ICdjOHlfU29mdHdhcmUnIH1cbiAgICBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlcyBvdmVyIHRoZSBsaXN0IG9mIGZpbHRlcnMgYW5kIHF1ZXJpZXMgdGhlIG9wZXJhdGlvbnMuXG4gICAqIElmIGEgcXVlcnkgcmV0dXJucyBhdCBsZWFzdCBvbmUgb3BlcmF0aW9uLCB0aGUgZmlyc3Qgb25lIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqIE90aGVyd2lzZSB0aGUgbmV4dCBxdWVyeSB3aWxsIGJlIHBlcmZvcm1lZC5cbiAgICogSWYgbm9uZSBvZiB0aGUgcXVlcmllcyByZXR1cm5zIGFueSBvcGVyYXRpb24sIG51bGwgd2lsbCBiZSByZXR1cm5lZC5cbiAgICogQHBhcmFtIGZpbHRlcnNMaXN0IFRoZSBsaXN0IG9mIGZpbHRlcnMgZm9yIHRoZSBxdWVyaWVzLlxuICAgKi9cbiAgYXN5bmMgZ2V0Rmlyc3RNYXRjaGluZ09wZXJhdGlvbihmaWx0ZXJzTGlzdDogYW55W10pOiBQcm9taXNlPElPcGVyYXRpb24+IHtcbiAgICBsZXQgbWF0Y2hpbmdPcGVyYXRpb24gPSBudWxsO1xuXG4gICAgZm9yIChjb25zdCBmaWx0ZXJzIG9mIGZpbHRlcnNMaXN0KSB7XG4gICAgICBjb25zdCBvcGVyYXRpb25zID0gKGF3YWl0IHRoaXMub3BlcmF0aW9uLmxpc3QoZmlsdGVycykpLmRhdGE7XG4gICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgbWF0Y2hpbmdPcGVyYXRpb24gPSBvcGVyYXRpb25zWzBdO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hpbmdPcGVyYXRpb247XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZXMgb3ZlciB0aGUgbGlzdCBvZiBmaWx0ZXJzIGFuZCBxdWVyaWVzIHRoZSBvcGVyYXRpb25zLlxuICAgKiBJdCBjb21wYXJlcyB0aGUgb3BlcmF0aW9ucyByZXRyaWV2ZWQgYnkgdGhlIHF1ZXJpZXMgYnkgJ2NyZWF0aW9uVGltZSdcbiAgICogYW5kIHJldHVybiB0aGUgbGF0ZXN0IG9uZS5cbiAgICogSWYgbm9uZSBvZiB0aGUgcXVlcmllcyByZXR1cm5zIGFueSBvcGVyYXRpb24sIG51bGwgd2lsbCBiZSByZXR1cm5lZC5cbiAgICogQHBhcmFtIGZpbHRlcnNMaXN0IFRoZSBsaXN0IG9mIGZpbHRlcnMgZm9yIHRoZSBxdWVyaWVzLlxuICAgKi9cbiAgYXN5bmMgZ2V0TGF0ZXN0TWF0Y2hpbmdPcGVyYXRpb24oZmlsdGVyc0xpc3Q6IGFueVtdKTogUHJvbWlzZTxJT3BlcmF0aW9uPiB7XG4gICAgbGV0IG1hdGNoaW5nT3BlcmF0aW9uOiBJT3BlcmF0aW9uID0gbnVsbDtcblxuICAgIGZvciAoY29uc3QgZmlsdGVycyBvZiBmaWx0ZXJzTGlzdCkge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uczogSU9wZXJhdGlvbltdID0gKGF3YWl0IHRoaXMub3BlcmF0aW9uLmxpc3QoZmlsdGVycykpLmRhdGE7XG4gICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG1hdGNoaW5nT3BlcmF0aW9uKSB7XG4gICAgICAgICAgbWF0Y2hpbmdPcGVyYXRpb24gPVxuICAgICAgICAgICAgbmV3IERhdGUobWF0Y2hpbmdPcGVyYXRpb24uY3JlYXRpb25UaW1lKS5nZXRUaW1lKCkgPFxuICAgICAgICAgICAgbmV3IERhdGUob3BlcmF0aW9uc1swXS5jcmVhdGlvblRpbWUpLmdldFRpbWUoKVxuICAgICAgICAgICAgICA/IG9wZXJhdGlvbnNbMF1cbiAgICAgICAgICAgICAgOiBtYXRjaGluZ09wZXJhdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRjaGluZ09wZXJhdGlvbiA9IG9wZXJhdGlvbnNbMF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hpbmdPcGVyYXRpb247XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgb3BlcmF0aW9uIGFuZCByZXR1cm5zIGFuIG9ic2VydmFibGUgdG8gdHJhY2sgaXRzIHByb2dyZXNzLlxuICAgKiBGYWlscyB0aGUgb2JzZXJ2YWJsZSB3aGVuIHRoZSBvcGVyYXRpb24gcmV0dXJucyBGQUlMRUQgc3RhdHVzLlxuICAgKiBDb21wbGV0ZXMgdGhlIG9ic2VydmFibGUgd2hlbiB0aGUgb3BlcmF0aW9uIHJldHVybnMgU1VDQ0VTU0ZVTCBzdGF0dXMuXG4gICAqIEBwYXJhbSBvcGVyYXRpb24gVGhlIG9wZXJhdGlvbiB0byBjcmVhdGUgYW5kIHRyYWNrLlxuICAgKi9cbiAgY3JlYXRlT2JzZXJ2ZWRPcGVyYXRpb24ob3BlcmF0aW9uOiBJT3BlcmF0aW9uKTogT2JzZXJ2YWJsZTxJT3BlcmF0aW9uPiB7XG4gICAgcmV0dXJuIGZyb20odGhpcy5vcGVyYXRpb24uY3JlYXRlKG9wZXJhdGlvbikpLnBpcGUoXG4gICAgICBtYXAoKHsgZGF0YSB9KSA9PiBkYXRhKSxcbiAgICAgIHRha2UoMSksXG4gICAgICBzd2l0Y2hNYXAoY3JlYXRlZE9wZXJhdGlvbiA9PiB0aGlzLm9ic2VydmVPcGVyYXRpb24oY3JlYXRlZE9wZXJhdGlvbikpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgdG8gdHJhY2sgcHJvZ3Jlc3Mgb2YgZ2l2ZW4gb3BlcmF0aW9uLlxuICAgKiBGYWlscyB0aGUgb2JzZXJ2YWJsZSB3aGVuIHRoZSBvcGVyYXRpb24gcmV0dXJucyBGQUlMRUQgc3RhdHVzLlxuICAgKiBDb21wbGV0ZXMgdGhlIG9ic2VydmFibGUgd2hlbiB0aGUgb3BlcmF0aW9uIHJldHVybnMgU1VDQ0VTU0ZVTCBzdGF0dXMuXG4gICAqIEBwYXJhbSBvcGVyYXRpb24gVGhlIG9wZXJhdGlvbiB0byBiZSBvYnNlcnZlZC5cbiAgICovXG4gIG9ic2VydmVPcGVyYXRpb24ob3BlcmF0aW9uOiBJT3BlcmF0aW9uKTogT2JzZXJ2YWJsZTxJT3BlcmF0aW9uPiB7XG4gICAgY29uc3Qgb2JzZXJ2ZWRPcGVyYXRpb24kID0gb2Yob3BlcmF0aW9uKTtcbiAgICBjb25zdCBvcGVyYXRpb25VcGRhdGVzJCA9IG9ic2VydmVkT3BlcmF0aW9uJC5waXBlKFxuICAgICAgc3dpdGNoTWFwKG9ic2VydmVkT3BlcmF0aW9uID0+IHRoaXMub3BlcmF0aW9uUmVhbHRpbWUub25BbGwkKG9ic2VydmVkT3BlcmF0aW9uLmRldmljZUlkKSksXG4gICAgICBtYXAoKHsgZGF0YSB9KSA9PiBkYXRhIGFzIElPcGVyYXRpb24pLFxuICAgICAgd2l0aExhdGVzdEZyb20ob2JzZXJ2ZWRPcGVyYXRpb24kKSxcbiAgICAgIGZpbHRlcigoW29wZXJhdGlvblVwZGF0ZSwgb2JzZXJ2ZWRPcGVyYXRpb25dKSA9PiBvcGVyYXRpb25VcGRhdGUuaWQgPT09IG9ic2VydmVkT3BlcmF0aW9uLmlkKSxcbiAgICAgIHN3aXRjaE1hcCgoW29wZXJhdGlvblVwZGF0ZV0pID0+IHtcbiAgICAgICAgaWYgKG9wZXJhdGlvblVwZGF0ZS5zdGF0dXMgPT09IE9wZXJhdGlvblN0YXR1cy5GQUlMRUQpIHtcbiAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihvcGVyYXRpb25VcGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZihvcGVyYXRpb25VcGRhdGUpO1xuICAgICAgfSksXG4gICAgICB0YWtlV2hpbGUob3BlcmF0aW9uVXBkYXRlID0+IG9wZXJhdGlvblVwZGF0ZS5zdGF0dXMgIT09IE9wZXJhdGlvblN0YXR1cy5TVUNDRVNTRlVMLCB0cnVlKVxuICAgICk7XG4gICAgcmV0dXJuIG1lcmdlKG9ic2VydmVkT3BlcmF0aW9uJCwgb3BlcmF0aW9uVXBkYXRlcyQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBzaW5nbGUgZXZlbnQgd2l0aCBsYXRlc3QgY3JlYXRpb25UaW1lIGZvciB0aGUgZ2l2ZW4gZGV2aWNlIElkIGFuZCBldmVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGV2aWNlSWQgVGhlIGRldmljZSBJZCBmb3Igd2hpY2ggdGhlIGV2ZW50cyBzaG91bGQgYmUgcXVlcmllZC5cbiAgICogQHBhcmFtIHR5cGUgRXZlbnQgdHlwZS5cbiAgICovXG4gIGFzeW5jIGdldExhdGVzdENvbmZpZ3VyYXRpb25FdmVudChcbiAgICBkZXZpY2VJZDogc3RyaW5nIHwgbnVtYmVyLFxuICAgIHR5cGU6IHN0cmluZ1xuICApOiBQcm9taXNlPElFdmVudCB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IGV2ZW50RmlsdGVyOiBvYmplY3QgPSB7XG4gICAgICBzb3VyY2U6IGRldmljZUlkLFxuICAgICAgdHlwZSxcbiAgICAgIGRhdGVGcm9tOiB0aGlzLmRhdGVGcm9tLnRvSVNPU3RyaW5nKCksXG4gICAgICBkYXRlVG86IHRoaXMuZGF0ZVRvLnRvSVNPU3RyaW5nKCksXG4gICAgICBwYWdlU2l6ZTogMVxuICAgIH07XG5cbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuZXZlbnQubGlzdChldmVudEZpbHRlcik7XG4gICAgcmV0dXJuIGRhdGFbMF07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIGxpc3Qgb2Ygb3BlcmF0aW9ucyBmb3IgdGhlIGdpdmVuIGRldmljZSBJZCwgYW5kIG9wZXJhdGlvbiB0eXBlLlxuICAgKiBAcGFyYW0gZGV2aWNlSWQgVGhlIGRldmljZSBJZCBmb3Igd2hpY2ggdGhlIG9wZXJhdGlvbiBzaG91bGQgYmUgcXVlcmllZC5cbiAgICogQHBhcmFtIG9wZXJhdGlvblR5cGUgT3BlcmF0aW9uIHR5cGUgZnJhZ21lbnQuXG4gICAqL1xuICBhc3luYyBnZXRDb25maWdGaWxlT3BlcmF0aW9uTGlzdChcbiAgICBkZXZpY2VJZDogc3RyaW5nIHwgbnVtYmVyLFxuICAgIG9wZXJhdGlvblR5cGU6IHN0cmluZ1xuICApOiBQcm9taXNlPElPcGVyYXRpb25bXT4ge1xuICAgIGNvbnN0IG9wZXJhdGlvbkZpbHRlcjogb2JqZWN0ID0ge1xuICAgICAgZGV2aWNlSWQsXG4gICAgICBmcmFnbWVudFR5cGU6IG9wZXJhdGlvblR5cGUsXG4gICAgICBkYXRlRnJvbTogdGhpcy5kYXRlRnJvbS50b0lTT1N0cmluZygpLFxuICAgICAgZGF0ZVRvOiB0aGlzLmRhdGVUby50b0lTT1N0cmluZygpLFxuICAgICAgcmV2ZXJ0OiB0cnVlLFxuICAgICAgcGFnZVNpemU6IDIwMDBcbiAgICB9O1xuXG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLm9wZXJhdGlvbi5saXN0KG9wZXJhdGlvbkZpbHRlcikpLmRhdGE7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBsYXRlc3QgdXBsb2FkZWQgY29uZmlndXJhdGlvbiBzbmFwc2hvdCBmb3IgdGhlIGdpdmVuIGRldmljZSwgYW5kIGNvbmZpZ3VyYXRpb24gdHlwZS5cbiAgICogQHBhcmFtIGRldmljZSBUaGUgZGV2aWNlIGZvciB3aGljaCB0aGUgY29uZmlndXJhdGlvbiBzbmFwc2hvdCB3YXMgdXBsb2FkZWQuXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uVHlwZSBTZWxlY3RlZCBjb25maWd1cmF0aW9uIHR5cGUuXG4gICAqL1xuICBhc3luYyBnZXRDb25maWdTbmFwc2hvdChcbiAgICBkZXZpY2U6IElNYW5hZ2VkT2JqZWN0LFxuICAgIGNvbmZpZ3VyYXRpb25UeXBlOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDb25maWd1cmF0aW9uU25hcHNob3QgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCBldmVudDogSUV2ZW50ID0gYXdhaXQgdGhpcy5nZXRMYXRlc3RDb25maWd1cmF0aW9uRXZlbnQoZGV2aWNlLmlkLCBjb25maWd1cmF0aW9uVHlwZSk7XG4gICAgbGV0IGNvbmZpZ1NuYXBzaG90OiBDb25maWd1cmF0aW9uU25hcHNob3Q7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb25maWdTbmFwc2hvdCA9IHtcbiAgICAgICAgdGltZTogZXZlbnQudGltZSxcbiAgICAgICAgbmFtZTogZXZlbnQudGV4dCxcbiAgICAgICAgZGV2aWNlVHlwZTogZGV2aWNlLnR5cGUsXG4gICAgICAgIGNvbmZpZ3VyYXRpb25UeXBlXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uZmlnU25hcHNob3QuYmluYXJ5ID0gYXdhaXQgKGF3YWl0IHRoaXMuZXZlbnRCaW5hcnkuZG93bmxvYWQoZXZlbnQpKS50ZXh0KCk7XG4gICAgICAgIGlmIChldmVudC5jOHlfSXNCaW5hcnkpIHtcbiAgICAgICAgICBjb25maWdTbmFwc2hvdC5iaW5hcnlUeXBlID0gZXZlbnQuYzh5X0lzQmluYXJ5LnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGdldHRleHQoJ0NvdWxkIG5vdCBnZXQgdGhlIGJpbmFyeS4nKTtcbiAgICAgICAgdGhpcy5hbGVydC5kYW5nZXIobXNnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ1NuYXBzaG90O1xuICB9XG5cbiAgYXN5bmMgZ2V0TGVnYWN5Q29uZmlnU25hcHNob3QoZGV2aWNlSWQpIHtcbiAgICBsZXQgY29uZmlnU25hcHNob3Q6IENvbmZpZ3VyYXRpb25TbmFwc2hvdDtcbiAgICBsZXQgbW87XG4gICAgY29uc3QgZGV2aWNlID0gKGF3YWl0IHRoaXMuaW52ZW50b3J5LmRldGFpbChkZXZpY2VJZCwgeyB3aXRoQ2hpbGRyZW46IGZhbHNlIH0pKS5kYXRhO1xuICAgIGNvbnN0IHNuYXBzaG90SWQgPSBkZXZpY2UuYzh5X0NvbmZpZ3VyYXRpb25EdW1wICYmIGRldmljZS5jOHlfQ29uZmlndXJhdGlvbkR1bXAuaWQ7XG4gICAgaWYgKCFzbmFwc2hvdElkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIG1vID0gKGF3YWl0IHRoaXMuaW52ZW50b3J5LmRldGFpbChzbmFwc2hvdElkKSkuZGF0YTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbiAgICBpZiAobW8pIHtcbiAgICAgIGNvbmZpZ1NuYXBzaG90ID0ge1xuICAgICAgICB0aW1lOiBtby5jcmVhdGlvblRpbWUsXG4gICAgICAgIG5hbWU6IG1vLm5hbWVcbiAgICAgIH07XG4gICAgICBjb25maWdTbmFwc2hvdC5iaW5hcnkgPSBhd2FpdCB0aGlzLmdldEJpbmFyeVRleHQobW8udXJsLCB7IGFsbG93RXh0ZXJuYWw6IGZhbHNlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnU25hcHNob3Q7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJpbmFyeSBvYmplY3QgYXMgdGV4dC5cbiAgICogQHBhcmFtIGJpbmFyeVVybCBUaGUgVVJMIHRvIGZpbmQgYmluYXJ5XG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnM6XG4gICAqIC0gKiphbGxvd0V4dGVybmFsKiogLSBgYm9vbGVhbmAgLSBhbGxvd3MgZG93bmxvYWRpbmcgZXh0ZXJuYWwgYmluYXJ5IGZpbGVcbiAgICogLSAqKm5vQWxlcnRzKiogLSBgYm9vbGVhbmAgLSBkbyBub3QgZGlzcGxheSBhbiBhbGVydCBtZXNzYWdlOyBkZWZhdWx0cyB0byBgZmFsc2VgXG4gICAqL1xuICBhc3luYyBnZXRCaW5hcnlUZXh0KFxuICAgIGJpbmFyeVVybDogc3RyaW5nLFxuICAgIG9wdGlvbnM6IHsgYWxsb3dFeHRlcm5hbDogYm9vbGVhbjsgbm9BbGVydHM/OiBib29sZWFuIH1cbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBiaW5hcnlJZCA9IHRoaXMuaW52ZW50b3J5QmluYXJ5LmdldElkRnJvbVVybChiaW5hcnlVcmwpO1xuICAgIGxldCByZXM7XG4gICAgaWYgKCFiaW5hcnlJZCkge1xuICAgICAgaWYgKG9wdGlvbnMuYWxsb3dFeHRlcm5hbCkge1xuICAgICAgICByZXMgPSBhd2FpdCB0aGlzLmdldEV4dGVybmFsQmluYXJ5UmVzcG9uc2UoYmluYXJ5VXJsLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0gYXdhaXQgdGhpcy5nZXRJbnRlcm5hbEJpbmFyeVJlc3BvbnNlKGJpbmFyeUlkLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnRleHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYmluYXJ5IG9iamVjdCBhcyBGaWxlLlxuICAgKiBAcGFyYW0gYmluYXJ5VXJsIFRoZSBVUkwgdG8gZmluZCBiaW5hcnlcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9iamVjdCB3aXRoIGFkZGl0aW9uYWwgb3B0aW9uczpcbiAgICogLSAqKmFsbG93RXh0ZXJuYWwqKiAtIGBib29sZWFuYCAtIGFsbG93cyBkb3dubG9hZGluZyBleHRlcm5hbCBiaW5hcnkgZmlsZVxuICAgKi9cbiAgYXN5bmMgZ2V0QmluYXJ5RmlsZShiaW5hcnlVcmw6IHN0cmluZywgb3B0aW9uczogeyBhbGxvd0V4dGVybmFsOiBib29sZWFuIH0pOiBQcm9taXNlPEZpbGU+IHtcbiAgICBjb25zdCBiaW5hcnlJZCA9IHRoaXMuaW52ZW50b3J5QmluYXJ5LmdldElkRnJvbVVybChiaW5hcnlVcmwpO1xuICAgIGlmICghYmluYXJ5SWQgJiYgIW9wdGlvbnMuYWxsb3dFeHRlcm5hbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBub3RlIHRoYXQgaXQgZG9lc24ndCBzb2x2ZSBpc3N1ZSB3aXRoIGV4dGVybmFsIGJpbmFyeSBoZXJlLCBzdWNoIHVybCB3b24ndCBoYXZlIGJpbmFyeUlkLCBzbyB3ZSB3b24ndCBrbm93IHRoZSBuYW1lIG9yIGNvbnRlbnRUeXBlIHRvIHVzZSBpbiBGaWxlIGNvbnN0cnVjdG9yLCBsZXQncyBhZGQgYSBARklYTUUgY29tbWVudCBmb3Igbm93P1xuICAgIGNvbnN0IHsgbmFtZSwgY29udGVudFR5cGUgfSA9IChhd2FpdCB0aGlzLmludmVudG9yeS5kZXRhaWwoYmluYXJ5SWQpKS5kYXRhO1xuICAgIGNvbnN0IHJlcyA9ICEhYmluYXJ5SWRcbiAgICAgID8gYXdhaXQgdGhpcy5nZXRJbnRlcm5hbEJpbmFyeVJlc3BvbnNlKGJpbmFyeUlkKVxuICAgICAgOiBhd2FpdCB0aGlzLmdldEV4dGVybmFsQmluYXJ5UmVzcG9uc2UoYmluYXJ5VXJsKTtcbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlcy5hcnJheUJ1ZmZlcigpO1xuICAgIHJldHVybiBuZXcgRmlsZShbYXJyYXlCdWZmZXJdLCBuYW1lLCB7IHR5cGU6IGNvbnRlbnRUeXBlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxhc3QgY29uZmlndXJhdGlvbiB1cGRhdGUgb3BlcmF0aW9uIGZvciBnaXZlbiBkZXZpY2UuXG4gICAqIExvb2tzIGZvciBjOHlfQ29uZmlndXJhdGlvbiBhbmQgYzh5X1NlbmRDb25maWd1cmF0aW9uIG9wZXJhdGlvbnMuXG4gICAqIEBwYXJhbSBkZXZpY2VJZCBUaGUgSUQgb2YgdGhlIGRldmljZSB0byBmaW5kIGFuIG9wZXJhdGlvbiBmb3IuXG4gICAqL1xuICBhc3luYyBnZXRMYXN0Q29uZmlnVXBkYXRlT3BlcmF0aW9uKGRldmljZUlkOiBzdHJpbmcgfCBudW1iZXIpOiBQcm9taXNlPElPcGVyYXRpb24+IHtcbiAgICBjb25zdCBmaWx0ZXJzID0ge1xuICAgICAgZGV2aWNlSWQsXG4gICAgICBkYXRlRnJvbTogbmV3IERhdGUoMCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGRhdGVUbzogbmV3IERhdGUoRGF0ZS5ub3coKSkudG9JU09TdHJpbmcoKSxcbiAgICAgIHJldmVydDogdHJ1ZSxcbiAgICAgIHBhZ2VTaXplOiAxXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5nZXRMYXRlc3RNYXRjaGluZ09wZXJhdGlvbihbXG4gICAgICB7IC4uLmZpbHRlcnMsIGZyYWdtZW50VHlwZTogJ2M4eV9Db25maWd1cmF0aW9uJyB9LFxuICAgICAgeyAuLi5maWx0ZXJzLCBmcmFnbWVudFR5cGU6ICdjOHlfU2VuZENvbmZpZ3VyYXRpb24nIH1cbiAgICBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlcyBhIGNvbmZpZ3VyYXRpb24gZG93bmxvYWQgb3BlcmF0aW9uIGZvciBnaXZlbiBkZXZpY2UgYW5kIGl0cyBjdXJyZW50IGNvbmZpZ3VyYXRpb24uXG4gICAqIFN1cHBvcnRzIGM4eV9TZW5kQ29uZmlndXJhdGlvbiBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBkZXZpY2UgVGhlIGRldmljZSBmb3Igd2hpY2ggb3BlcmF0aW9uIHNob3VsZCBiZSBwcmVwYXJlZC5cbiAgICovXG4gIGNyZWF0ZVRleHRCYXNlZENvbmZpZ3VyYXRpb25SZWxvYWRPcGVyYXRpb24oZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IElPcGVyYXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICBkZXZpY2VJZDogZGV2aWNlLmlkLFxuICAgICAgZGVzY3JpcHRpb246IGdldHRleHQoJ1JlcXVlc3RlZCBjdXJyZW50IGNvbmZpZ3VyYXRpb24nKSxcbiAgICAgIGM4eV9TZW5kQ29uZmlndXJhdGlvbjoge31cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmVzIGEgY29uZmlndXJhdGlvbiB1cGRhdGUgb3BlcmF0aW9uIGZvciB0aGUgZ2l2ZW4gZGV2aWNlLlxuICAgKiBTdXBwb3J0cyBjOHlfQ29uZmlndXJhdGlvbiBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBkZXZpY2UgVGhlIGRldmljZSBmb3Igd2hpY2ggb3BlcmF0aW9uIHNob3VsZCBiZSBwcmVwYXJlZC5cbiAgICogQHBhcmFtIGNvbmZpZyBUaGUgY29uZmlndXJhdGlvbiB3aGljaCB3aWxsIHVwZGF0ZSB0aGUgZXhpc3Rpbmcgb25lLlxuICAgKi9cbiAgY3JlYXRlVGV4dEJhc2VkQ29uZmlndXJhdGlvblVwZGF0ZU9wZXJhdGlvbihkZXZpY2U6IElNYW5hZ2VkT2JqZWN0LCBjb25maWc6IHN0cmluZyk6IElPcGVyYXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICBkZXZpY2VJZDogZGV2aWNlLmlkLFxuICAgICAgZGVzY3JpcHRpb246IGdldHRleHQoJ0NvbmZpZ3VyYXRpb24gdXBkYXRlJyksXG4gICAgICBjOHlfQ29uZmlndXJhdGlvbjoge1xuICAgICAgICBjb25maWdcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZ2V0QmluYXJ5KGJpbmFyeUlkOiBJZFJlZmVyZW5jZSk6IFByb21pc2U8SUZldGNoUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW52ZW50b3J5QmluYXJ5LmRvd25sb2FkKGJpbmFyeUlkKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY29uc3QgbXNnID0gZ2V0dGV4dCgnQ291bGQgbm90IGdldCB0aGUgYmluYXJ5LicpO1xuICAgICAgdGhpcy5hbGVydC5kYW5nZXIobXNnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbGwgYXZhaWxhYmxlIHNuYXBzaG90cyBmcm9tIHRoZSByZXBvc2l0b3J5IGZvciB0aGUgZ2l2ZW4gZGV2aWNlLlxuICAgKiBAcGFyYW0gZGV2aWNlIFRoZSBkZXZpY2UgZm9yIHdoaWNoIHRoZSBzbmFwc2hvdHMgc2hvdWxkIGJlIHByZXBhcmVkLlxuICAgKiBAcGFyYW0gY29uZmlndXJhdGlvblR5cGUgU2VsZWN0ZWQgY29uZmlndXJhdGlvbiB0eXBlLlxuICAgKi9cbiAgYXN5bmMgZ2V0U25hcHNob3RzRnJvbVJlcG9zaXRvcnkoZGV2aWNlLCBjb25maWd1cmF0aW9uVHlwZSkge1xuICAgIGNvbnN0IHNlYXJjaFF1ZXJ5ID0gdGhpcy5nZXRDb25maWd1cmF0aW9uVHlwZVF1ZXJ5KGRldmljZSwgY29uZmlndXJhdGlvblR5cGUpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubGlzdFJlcG9zaXRvcnlFbnRyaWVzKFJlcG9zaXRvcnlUeXBlLkNPTkZJR1VSQVRJT04sIHtcbiAgICAgIHF1ZXJ5OiBzZWFyY2hRdWVyeSxcbiAgICAgIHBhcmFtczogeyBwYWdlU2l6ZTogMTAwIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzLmRhdGE7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZGV2aWNlIGFscmVhZHkgaGF2ZSBhIGdpdmVuIHNvZnR3YXJlIGluc3RhbGxlZFxuICAgKiBAcGFyYW0gZGV2aWNlSWQgSWQgb2YgdGhlIGRldmljZSB0byBiZSBjaGVja2VkXG4gICAqIEBwYXJhbSBzb2Z0d2FyZSBUaGUgc29mdHdhcmUgdG8gYmUgY2hlY2tlZFxuICAgKi9cbiAgYXN5bmMgaXNTb2Z0d2FyZUluc3RhbGxlZE9uRGV2aWNlKFxuICAgIGRldmljZUlkOiBzdHJpbmcgfCBudW1iZXIsXG4gICAgc29mdHdhcmU6IERldmljZVNvZnR3YXJlXG4gICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICghKGF3YWl0IHRoaXMuYWR2YW5jZWRTb2Z0d2FyZVNlcnZpY2UuaXNBU01BdmFpbGFibGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeUZpbHRlciA9IHsgZGV2aWNlSWQgfTtcbiAgICBpZiAoc29mdHdhcmU/Lm5hbWUpIHtcbiAgICAgIHNldChxdWVyeUZpbHRlciwgJ25hbWUnLCBzb2Z0d2FyZS5uYW1lKTtcbiAgICB9XG4gICAgaWYgKHNvZnR3YXJlPy52ZXJzaW9uKSB7XG4gICAgICBzZXQocXVlcnlGaWx0ZXIsICd2ZXJzaW9uJywgc29mdHdhcmUudmVyc2lvbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFkdmFuY2VkU29mdHdhcmVTZXJ2aWNlLmxpc3QocXVlcnlGaWx0ZXIpLnRoZW4ocmVzdWx0ID0+ICEhcmVzdWx0LmRhdGE/Lmxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJpbmFyeSBvYmplY3QuXG4gICAqIEBwYXJhbSBiaW5hcnlJZCBiaW5hcnkgSURcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9iamVjdCB3aXRoIGFkZGl0aW9uYWwgb3B0aW9uczpcbiAgICogLSAqKm5vQWxlcnRzKiogLSBgYm9vbGVhbmAgLSBkbyBub3QgZGlzcGxheSBhbiBhbGVydCBtZXNzYWdlOyBkZWZhdWx0cyB0byBgZmFsc2VgXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEludGVybmFsQmluYXJ5UmVzcG9uc2UoXG4gICAgYmluYXJ5SWQ6IElkUmVmZXJlbmNlLFxuICAgIG9wdGlvbnM6IHsgbm9BbGVydHM/OiBib29sZWFuIH0gPSB7fVxuICApOiBQcm9taXNlPElGZXRjaFJlc3BvbnNlPiB7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlCaW5hcnkuZG93bmxvYWQoYmluYXJ5SWQpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBpZiAoIW9wdGlvbnMubm9BbGVydHMpIHtcbiAgICAgICAgY29uc3QgbXNnID0gZ2V0dGV4dCgnQ291bGQgbm90IGdldCB0aGUgYmluYXJ5LicpO1xuICAgICAgICB0aGlzLmFsZXJ0LmRhbmdlcihtc2cpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBiaW5hcnkgb2JqZWN0LlxuICAgKiBAcGFyYW0gYmluYXJ5VXJsIFRoZSBVUkwgdG8gZmluZCBiaW5hcnlcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9iamVjdCB3aXRoIGFkZGl0aW9uYWwgb3B0aW9uczpcbiAgICogLSAqKm5vQWxlcnRzKiogLSBgYm9vbGVhbmAgLSBkbyBub3QgZGlzcGxheSBhbiBhbGVydCBtZXNzYWdlOyBkZWZhdWx0cyB0byBgZmFsc2VgXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEV4dGVybmFsQmluYXJ5UmVzcG9uc2UoXG4gICAgYmluYXJ5VXJsOiBzdHJpbmcsXG4gICAgb3B0aW9uczogeyBub0FsZXJ0cz86IGJvb2xlYW4gfSA9IHt9XG4gICk6IFByb21pc2U8SUZldGNoUmVzcG9uc2U+IHtcbiAgICBsZXQgcmVzO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmZXRjaFJlcyA9IGF3YWl0IGZldGNoKGJpbmFyeVVybCk7XG4gICAgICBpZiAoZmV0Y2hSZXMuc3RhdHVzID49IDQwMCkge1xuICAgICAgICB0aHJvdyByZXM7XG4gICAgICB9XG4gICAgICByZXMgPSBmZXRjaFJlcztcbiAgICB9IGNhdGNoIHtcbiAgICAgIGlmICghb3B0aW9ucy5ub0FsZXJ0cykge1xuICAgICAgICBjb25zdCBtc2cgPSBnZXR0ZXh0KCdDb3VsZCBub3QgZ2V0IHRoZSBleHRlcm5hbCBiaW5hcnknKTtcbiAgICAgICAgdGhpcy5hbGVydC5kYW5nZXIobXNnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlRW50cnkobW86IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+KSB7XG4gICAgY29uc3QgYmluYXJ5SWQgPSBhd2FpdCB0aGlzLmludmVudG9yeUJpbmFyeS5nZXRJZEZyb21VcmwobW8udXJsKTtcbiAgICBjb25zdCBuZXdNbyA9IGF3YWl0IHRoaXMuaW52ZW50b3J5LmNyZWF0ZShtbyk7XG4gICAgaWYgKGJpbmFyeUlkKSB7XG4gICAgICBhd2FpdCB0aGlzLmludmVudG9yeS5jaGlsZEFkZGl0aW9uc0FkZChiaW5hcnlJZCwgbmV3TW8uZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdNbztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdXBkYXRlRW50cnkobW86IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+LCB1cmwpIHtcbiAgICBjb25zdCBleGlzdGluZ0JpbmFyeUlkID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlCaW5hcnkuZ2V0SWRGcm9tVXJsKHVybCk7XG4gICAgY29uc3QgbmV3QmluYXJ5SWQgPSBhd2FpdCB0aGlzLmludmVudG9yeUJpbmFyeS5nZXRJZEZyb21VcmwobW8udXJsKTtcbiAgICBpZiAoZXhpc3RpbmdCaW5hcnlJZCAmJiBleGlzdGluZ0JpbmFyeUlkICE9PSBuZXdCaW5hcnlJZCkge1xuICAgICAgY29uc3QgaWQgPSB0aGlzLmludmVudG9yeUJpbmFyeS5nZXRJZEZyb21VcmwodXJsKTtcbiAgICAgIGF3YWl0IHRoaXMuaW52ZW50b3J5QmluYXJ5LmRlbGV0ZShpZCk7XG4gICAgfVxuICAgIGlmIChuZXdCaW5hcnlJZCkge1xuICAgICAgYXdhaXQgdGhpcy5pbnZlbnRvcnkuY2hpbGRBZGRpdGlvbnNBZGQobmV3QmluYXJ5SWQsIG1vKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5LnVwZGF0ZShtbyk7XG4gIH1cblxuICBwcml2YXRlIGdldEJhc2VWZXJzaW9uUmVzdWx0TGlzdEZvckxlZ2FjeUVudHJ5KGVudHJ5KSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICByZXM6IHt9IGFzIElGZXRjaFJlc3BvbnNlLFxuICAgICAgZGF0YTogW1xuICAgICAgICB7XG4gICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgW2VudHJ5LnR5cGVdOiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBlbnRyeS52ZXJzaW9uLFxuICAgICAgICAgICAgdXJsOiBlbnRyeS51cmxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9IGFzIElSZXN1bHRMaXN0PElNYW5hZ2VkT2JqZWN0Pik7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldERldmljZVNvZnR3YXJlQ2hhbmdlc0Zyb21Tb2Z0d2FyZUxpc3RPcGVyYXRpb24oXG4gICAgb3BlcmF0aW9uOiBJT3BlcmF0aW9uLFxuICAgIGRldmljZTogSU1hbmFnZWRPYmplY3RcbiAgKTogUHJvbWlzZTxEZXZpY2VTb2Z0d2FyZUNoYW5nZVtdPiB7XG4gICAgY29uc3QgY2hhbmdlczogRGV2aWNlU29mdHdhcmVDaGFuZ2VbXSA9IFtdO1xuICAgIGNvbnN0IGRldmljZVNvZnR3YXJlTGlzdCA9IGF3YWl0IHRoaXMuZ2V0Q3VycmVudFNvZnR3YXJlKGRldmljZSwgJ2M4eV9Tb2Z0d2FyZUxpc3QnLCBbXSk7XG4gICAgZm9yRWFjaChvcGVyYXRpb24uYzh5X1NvZnR3YXJlTGlzdCwgb3BlcmF0aW9uU29mdHdhcmUgPT4ge1xuICAgICAgY29uc3QgZGV2aWNlU29mdHdhcmUgPSBmaW5kKGRldmljZVNvZnR3YXJlTGlzdCwgeyBuYW1lOiBvcGVyYXRpb25Tb2Z0d2FyZS5uYW1lIH0pO1xuICAgICAgaWYgKFxuICAgICAgICAob3BlcmF0aW9uU29mdHdhcmUgJiYgb3BlcmF0aW9uU29mdHdhcmUudmVyc2lvbikgIT09XG4gICAgICAgIChkZXZpY2VTb2Z0d2FyZSAmJiBkZXZpY2VTb2Z0d2FyZS52ZXJzaW9uKVxuICAgICAgKSB7XG4gICAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgLi4ub3BlcmF0aW9uU29mdHdhcmUsXG4gICAgICAgICAgYWN0aW9uOiAnaW5zdGFsbCdcbiAgICAgICAgfSBhcyBEZXZpY2VTb2Z0d2FyZUNoYW5nZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZm9yRWFjaChkZXZpY2VTb2Z0d2FyZUxpc3QsIGRldmljZVNvZnR3YXJlID0+IHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvblNvZnR3YXJlID0gZmluZChvcGVyYXRpb24uYzh5X1NvZnR3YXJlTGlzdCwgeyBuYW1lOiBkZXZpY2VTb2Z0d2FyZS5uYW1lIH0pO1xuICAgICAgaWYgKFxuICAgICAgICAob3BlcmF0aW9uU29mdHdhcmUgJiYgb3BlcmF0aW9uU29mdHdhcmUudmVyc2lvbikgIT09XG4gICAgICAgIChkZXZpY2VTb2Z0d2FyZSAmJiBkZXZpY2VTb2Z0d2FyZS52ZXJzaW9uKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGluc3RhbGxDaGFuZ2UgPSBjaGFuZ2VzLmZpbmQoXG4gICAgICAgICAgY2hhbmdlID0+IGRldmljZVNvZnR3YXJlLm5hbWUgPT09IGNoYW5nZS5uYW1lICYmIGNoYW5nZS5hY3Rpb24gPT09ICdpbnN0YWxsJ1xuICAgICAgICApO1xuICAgICAgICAvLyBjaGVjayB0aGF0IHRoaXMgc29mdHdhcmUgaXMgbm90IGFuIGluc3RhbGxhdGlvbiBzb2Z0d2FyZSBjaGFuZ2UsIG90aGVyd2lzZSBpdCdzIGFuIHVwZGF0ZSBhbmQgbm90IGEgcmVtb3ZhbFxuICAgICAgICBpZiAoIWluc3RhbGxDaGFuZ2UpIHtcbiAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgLi4uZGV2aWNlU29mdHdhcmUsXG4gICAgICAgICAgICBhY3Rpb246ICdkZWxldGUnXG4gICAgICAgICAgfSBhcyBEZXZpY2VTb2Z0d2FyZUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2hhbmdlcztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0RGV2aWNlU29mdHdhcmVDaGFuZ2VzRnJvbVNvZnR3YXJlT3BlcmF0aW9uKFxuICAgIG9wZXJhdGlvbjogSU9wZXJhdGlvbixcbiAgICBkZXZpY2U6IElNYW5hZ2VkT2JqZWN0XG4gICk6IFByb21pc2U8RGV2aWNlU29mdHdhcmVDaGFuZ2VbXT4ge1xuICAgIGNvbnN0IGNoYW5nZXM6IERldmljZVNvZnR3YXJlQ2hhbmdlW10gPSBbXTtcbiAgICBjb25zdCBkZXZpY2VTb2Z0d2FyZSA9IGF3YWl0IHRoaXMuZ2V0Q3VycmVudFNvZnR3YXJlKGRldmljZSwgJ2M4eV9Tb2Z0d2FyZScsIHt9KTtcbiAgICBmb3JFYWNoKGRldmljZVNvZnR3YXJlLCAoZGV2aWNlU29mdHdhcmVWZXJzaW9uLCBkZXZpY2VTb2Z0d2FyZU5hbWUpID0+IHtcbiAgICAgIGlmIChvcGVyYXRpb24uYzh5X1NvZnR3YXJlW2RldmljZVNvZnR3YXJlTmFtZV0gIT09IGRldmljZVNvZnR3YXJlVmVyc2lvbikge1xuICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGRldmljZVNvZnR3YXJlTmFtZSxcbiAgICAgICAgICB2ZXJzaW9uOiBkZXZpY2VTb2Z0d2FyZVZlcnNpb24sXG4gICAgICAgICAgYWN0aW9uOiAnZGVsZXRlJ1xuICAgICAgICB9IGFzIERldmljZVNvZnR3YXJlQ2hhbmdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmb3JFYWNoKG9wZXJhdGlvbi5jOHlfU29mdHdhcmUsIChvcGVyYXRpb25Tb2Z0d2FyZVZlcnNpb24sIG9wZXJhdGlvblNvZnR3YXJlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgZGV2aWNlU29mdHdhcmVWZXJzaW9uID0gZGV2aWNlU29mdHdhcmUgJiYgZGV2aWNlU29mdHdhcmVbb3BlcmF0aW9uU29mdHdhcmVOYW1lXTtcbiAgICAgIGlmIChkZXZpY2VTb2Z0d2FyZVZlcnNpb24gIT09IG9wZXJhdGlvblNvZnR3YXJlVmVyc2lvbikge1xuICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IG9wZXJhdGlvblNvZnR3YXJlTmFtZSxcbiAgICAgICAgICB2ZXJzaW9uOiBvcGVyYXRpb25Tb2Z0d2FyZVZlcnNpb24sXG4gICAgICAgICAgYWN0aW9uOiAnaW5zdGFsbCdcbiAgICAgICAgfSBhcyBEZXZpY2VTb2Z0d2FyZUNoYW5nZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNoYW5nZXM7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldEN1cnJlbnRTb2Z0d2FyZShcbiAgICBkZXZpY2U6IElNYW5hZ2VkT2JqZWN0LFxuICAgIHN3RnJhZ21lbnQ6IHN0cmluZyxcbiAgICBkZWZhdWx0VmFsdWU6IG9iamVjdFxuICApOiBQcm9taXNlPG9iamVjdD4ge1xuICAgIGNvbnN0IGlzQVNNQXZhaWxhYmxlID0gYXdhaXQgdGhpcy5hZHZhbmNlZFNvZnR3YXJlU2VydmljZS5pc0FTTUF2YWlsYWJsZSgpO1xuICAgIGlmIChpc0FTTUF2YWlsYWJsZSkge1xuICAgICAgbGV0IHNvZnR3YXJlUmVzdWx0TGlzdDogSVJlc3VsdExpc3Q8SU1hbmFnZWRPYmplY3Q+ID0gYXdhaXQgdGhpcy5hZHZhbmNlZFNvZnR3YXJlU2VydmljZS5saXN0KFxuICAgICAgICB7IGRldmljZUlkOiBkZXZpY2UuaWQsIHBhZ2VTaXplOiAxMDAgfVxuICAgICAgKTtcbiAgICAgIGxldCBsaXN0ID0gKHNvZnR3YXJlUmVzdWx0TGlzdD8uZGF0YSB8fCBbXSkubWFwKHN3ID0+XG4gICAgICAgIHBpY2sob21pdEJ5KHN3LCBpc05pbCksIFsnbmFtZScsICd2ZXJzaW9uJywgJ3VybCcsICdzb2Z0d2FyZVR5cGUnXSlcbiAgICAgICk7XG5cbiAgICAgIHdoaWxlIChzb2Z0d2FyZVJlc3VsdExpc3QucGFnaW5nPy5uZXh0UGFnZSkge1xuICAgICAgICBzb2Z0d2FyZVJlc3VsdExpc3QgPSBhd2FpdCBzb2Z0d2FyZVJlc3VsdExpc3QucGFnaW5nLm5leHQoKTtcbiAgICAgICAgbGlzdCA9IFtcbiAgICAgICAgICAuLi5saXN0LFxuICAgICAgICAgIC4uLihzb2Z0d2FyZVJlc3VsdExpc3Q/LmRhdGEgfHwgW10pLm1hcChzdyA9PlxuICAgICAgICAgICAgcGljayhvbWl0Qnkoc3csIGlzTmlsKSwgWyduYW1lJywgJ3ZlcnNpb24nLCAndXJsJywgJ3NvZnR3YXJlVHlwZSddKVxuICAgICAgICAgIClcbiAgICAgICAgXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFsaXN0Py5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGVmYXVsdFZhbHVlKSA/IGxpc3QgOiB0aGlzLnNvZnR3YXJlTGlzdFRvTGVnYWN5KGxpc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGV2aWNlW3N3RnJhZ21lbnRdIHx8IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNvZnR3YXJlTGlzdFRvTGVnYWN5KGxpc3Q6IElNYW5hZ2VkT2JqZWN0W10pOiBvYmplY3Qge1xuICAgIHJldHVybiAobGlzdCB8fCBbXSkucmVkdWNlKChwcmV2LCBjdXJyKSA9PiAoeyAuLi5wcmV2LCBbY3Vyci5uYW1lXTogY3Vyci52ZXJzaW9uIH0pLCB7fSk7XG4gIH1cbn1cbiJdfQ==