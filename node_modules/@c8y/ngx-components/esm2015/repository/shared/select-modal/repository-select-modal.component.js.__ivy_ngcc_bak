import { __awaiter } from "tslib";
import { Component, EventEmitter } from '@angular/core';
import { QueriesUtil } from '@c8y/client';
import { gettext, ModalSelectionMode } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { get, has, isEmpty, isEqual, omitBy } from 'lodash-es';
import { BehaviorSubject, merge, of, Subject } from 'rxjs';
import { map, mergeMap, switchMap, tap } from 'rxjs/operators';
import { RepositoryService } from '../repository.service';
// MODAL STRUCTURE
// - selectModalObject (repository entry (repositoryCategory) -> type c8y_Firmware/c8y_Software)
//   -- ISelectModalOption (repository binary entry (repositoryBinary) => type c8y_FirmwareBinary/c8y_SoftwareBinary)
//   -- ISelectModalOption...
// - selectModalObject...
/**
 * RepositorySelectModalComponent displays repository entries options and allows to select them.
 *
 * @example
 * ```
 * import { take } from 'rxjs/operators';
 * import { RepositorySelectModalComponent, ModalSelectionMode, RepositoryType } from '@c8y/ngx-components/repository/shared';
 *
 * const initialState = {
 *   repositoryType: RepositoryType.FIRMWARE,
 *   title: gettext('Install firmware'),
 *   subTitle: gettext('Available firmwares matching the device type'),
 *   icon: 'c8y-firmware',
 *   mode: ModalSelectionMode.SINGLE,
 *   labels: { ok: gettext('Install') },
 *   disableSelected: false
 * };
 *
 * const modal = this.bsModal.show(RepositorySelectModalComponent, {
 *   ignoreBackdropClick: true,
 *   initialState
 * });
 *
 * modal.content.load.next();
 * modal.content.resultEmitter.pipe(take(1)).subscribe((firmware) => {
 *   ...
 * })
 * ```
 */
export class RepositorySelectModalComponent {
    constructor(repositoryService, translateService) {
        this.repositoryService = repositoryService;
        this.translateService = translateService;
        /**
         * Optional
         * Allows to provide custom data.
         * @example
         * ```
         * import { from } from 'rxjs';
         *
         * const repositoryEntry = { name: 'ExampleEntry', type: 'c8y_Firmware' };
         * const versions = [{ c8y_Firmware: { version: '1.0.0', url: 'http://example.com' } }];
         *
         * const initialState = {repositoryEntriesWithVersions$: from({ ...repositoryEntry, versions })};
         * ```
         */
        this.repositoryEntriesWithVersions$ = undefined;
        /**
         * Optional
         * Allows to use custom badges templates.
         * @example
         * ```
         * import { gettext } from '@c8y/ngx-components';
         *
         * const badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };
         * const initialState = { badgeTemplates };
         * ```
         */
        this.badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };
        /**
         * Optional
         * Allows to provide custom modal title.
         */
        this.title = gettext('Select repository entry');
        /**
         * Loads the content of the modal.
         * Must be invoked by the modal's caller.
         */
        this.load = new Subject();
        /**
         * Triggers an update of the item list emitted.
         */
        this.updateInstallableList$ = new Subject();
        /**
         * Optional
         * Emits a filter criteria object currently entered in the filter input.
         * Use it to filter the items if you use custom repositoryEntriesWithVersions$.
         */
        this.searchTerm = new BehaviorSubject({});
        /**
         * Optional
         * Allows to provide device type query to restrict search criteria.
         * Only takes effect when repositoryEntriesWithVersions$ is not provided,
         * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.
         */
        this.deviceTypeQuery = {};
        /**
         * Optional
         * Allows to provide query to restrict search criteria.
         * Only takes effect when repositoryEntriesWithVersions$ is not provided,
         * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.
         */
        this.searchQuery = {};
        /**
         * Optional
         * Allows to provide custom labels for the buttons responsible for confirm/dismiss modal actions.
         */
        this.labels = { ok: gettext('Save') };
        /**
         * Optional
         * Allows to hide the name filter input field.
         * By default, the filter input field is displayed.
         */
        this.showFilter = true;
        /**
         * Optional
         * Allows to show a warning that the search criteria should be narrowed down.
         * By default, this warning is hidden.
         */
        this.areMoreEntries = false;
        /**
         * Emits whenever a new repository binary have been selected in the modal.
         */
        this.onChoiceUpdated = new EventEmitter();
        /**
         * Emits the list of selected options.
         */
        this.resultEmitter = new EventEmitter();
        /**
         * Optional
         * Allows to change selection mode.
         * Supported options:
         *   * single: only single option can be selected.
         *   * multiple: multiple options can be selected.
         */
        this.mode = ModalSelectionMode.SINGLE;
        /**
         * Allows to block selection of the other versions from the same repository entry.
         */
        this.disableSelected = true;
        this.filterCriteria = {};
        this.repositoryEntries$ = this.load.pipe(switchMap(() => this.repositoryEntriesWithVersions$), mergeMap(mos => this.aggregate(mos)), tap(items => {
            this.areMoreEntries = items.length >= this.PAGE_SIZE ? true : false;
        }), tap(items => (this.repositoryEntries = items)));
        this.modalEntries = merge(this.repositoryEntries$, this.updateInstallableList$.pipe(map((updateItemEvent) => {
            const itemToUpdate = (this.repositoryEntries || []).find(item => item.groupId === updateItemEvent.object.groupId);
            if (itemToUpdate) {
                const optionToUpdate = (itemToUpdate.options || []).find(option => option.obj.id === updateItemEvent.object.selectedId);
                if (optionToUpdate) {
                    optionToUpdate.template = updateItemEvent.template;
                    if (updateItemEvent.mapper) {
                        optionToUpdate.obj = updateItemEvent.mapper(optionToUpdate.obj);
                    }
                }
            }
            return this.repositoryEntries;
        })));
        this.PAGE_SIZE = 100;
        this.queriesUtil = new QueriesUtil();
    }
    ngOnInit() {
        if (!this.repositoryType) {
            throw new Error('Repository type must be defined');
        }
        if (!this.repositoryEntriesWithVersions$) {
            this.repositoryEntriesWithVersions$ = of(1).pipe(mergeMap(() => this.repositoryService.listRepositoryEntries(this.repositoryType, {
                query: this.queriesUtil.addAndFilter(this.deviceTypeQuery, has(this.searchQuery, 'name')
                    ? Object.assign(Object.assign({}, this.searchQuery), { name: `*${this.searchQuery.name}*` }) : this.searchQuery),
                params: { pageSize: this.PAGE_SIZE }
            })), map(({ data }) => data), map(mos => this.getAndAssignRepositoryBinaries(mos)));
        }
    }
    getAndAssignRepositoryBinaries(mos) {
        mos.forEach(mo => {
            mo.versions = this.repositoryService.listAllVersions(mo);
        });
        return mos;
    }
    search(filterCriteria) {
        this.filterCriteria = omitBy(Object.assign(Object.assign({}, this.filterCriteria), filterCriteria), isEmpty);
        if (!isEqual(this.filterCriteria, this.searchQuery)) {
            this.searchTerm.next(this.filterCriteria);
            this.searchQuery = this.filterCriteria;
            this.load.next();
        }
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    aggregate(mos) {
        return __awaiter(this, void 0, void 0, function* () {
            const repositoryType = this.repositoryType;
            const selectedItems = this.selected;
            return Promise.all(mos.map((repositoryEntry) => __awaiter(this, void 0, void 0, function* () {
                const options = this.getSelectModalOptions(yield this.repositoryService.fetchAllItemsFromList(repositoryEntry.versions), selectedItems, repositoryEntry, repositoryType);
                const selectModalObject = this.getSelectModalObject(repositoryEntry, options);
                return selectModalObject;
            })));
        });
    }
    getSelectModalOptions(versions, selectedItems, repositoryEntry, repositoryType) {
        const selectModalOptions = [];
        versions.forEach(repositoryBinary => {
            const isSelected = this.isBinaryRepositorySelected(selectedItems, repositoryEntry, repositoryBinary, repositoryType);
            const { version } = repositoryBinary[`${repositoryType}`];
            const bodyValue = version || `(${this.translateService.instant(gettext('not specified`version`'))})`;
            const bodyClass = version ? '' : 'text-muted';
            selectModalOptions.push({
                body: [
                    {
                        value: bodyValue,
                        class: bodyClass
                    }
                ],
                obj: Object.assign(Object.assign(Object.assign({ id: repositoryBinary.id, name: repositoryEntry.name, version }, (get(repositoryBinary, 'c8y_Patch.dependency') && {
                    dependency: get(repositoryBinary, 'c8y_Patch.dependency')
                })), (get(repositoryBinary, 'c8y_Patch') && { isPatch: true })), { url: repositoryBinary[`${repositoryType}`].url, softwareType: repositoryEntry.softwareType }),
                selected: isSelected
            });
        });
        return selectModalOptions;
    }
    isBinaryRepositorySelected(selectedItems, repositoryEntry, repositoryBinary, repositoryType) {
        const isSelected = selectedItems
            ? selectedItems.filter(repositoryFragment => repositoryFragment.name === repositoryEntry.name &&
                repositoryFragment.version === repositoryBinary[`${repositoryType}`].version).length > 0
            : false;
        return isSelected;
    }
    getSelectModalObject(repositoryEntry, options) {
        const label = options.length === 1
            ? this.translateService.instant(this.badgeTemplates['=1'], { count: options.length })
            : this.translateService.instant(this.badgeTemplates.other, { count: options.length });
        const selectModalObject = {
            groupId: repositoryEntry.id,
            body: [
                { value: repositoryEntry.name, class: 'text-truncate' },
                { value: repositoryEntry.description, class: 'text-truncate text-muted' }
            ],
            additionalInformation: { value: label, class: 'label label-info' },
            options
        };
        return selectModalObject;
    }
}
RepositorySelectModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-repository-select-modal',
                template: "<c8y-select-modal\n  [icon]=\"icon\"\n  [title]=\"title\"\n  [subTitle]=\"subTitle\"\n  [items]=\"modalEntries | async\"\n  [mode]=\"mode\"\n  [disableSelected]=\"disableSelected\"\n  [labels]=\"labels\"\n  [showFilter]=\"showFilter\"\n  [additionalFilterTemplate]=\"additionalFilterTemplate\"\n  [areMoreEntries]=\"areMoreEntries\"\n  [noItemsMessage]=\"noItemsMessage\"\n  (search)=\"search({ name: $event })\"\n  (onChoiceUpdated)=\"onChoiceUpdated.emit($event)\"\n  (result)=\"result($event)\"\n>\n</c8y-select-modal>\n"
            },] }
];
RepositorySelectModalComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,