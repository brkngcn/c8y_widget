import { getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';
import { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { DeviceTypeCellRendererComponent } from './device-type.cell-renderer.component';
export class DeviceTypeGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'deviceType';
        this.path = 'c8y_Filter.type';
        this.header = gettext('Device type');
        this.cellRendererComponent = DeviceTypeCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            fields: [
                ...getBasicInputArrayFormFieldConfig({
                    key: 'types',
                    label: gettext('Filter software by device type'),
                    addText: gettext('Add next`type`'),
                    tooltip: gettext('Use * as a wildcard character'),
                    placeholder: 'c8y_Linux',
                    optional: true
                }),
                {
                    key: 'noDeviceType',
                    type: 'switch',
                    templateOptions: {
                        label: gettext('No device type')
                    }
                }
            ],
            getFilter(model) {
                var _a;
                const filter = { __or: {} };
                if ((_a = model.types) === null || _a === void 0 ? void 0 : _a.length) {
                    filter.__or = {
                        'c8y_Filter.type': { __in: model.types }
                    };
                }
                if (model.noDeviceType) {
                    filter.__or = Object.assign(Object.assign({}, filter.__or), { __or: {
                            __not: { __has: 'c8y_Filter.type' },
                            'c8y_Filter.type': ''
                        } });
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXR5cGUuZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NvZnR3YXJlL2xpc3QvY29sdW1ucy9kZXZpY2UtdHlwZS5ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLGlDQUFpQyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9GLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBRXhGLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxvQkFBb0I7SUFDNUQsWUFBWSxtQkFBa0M7UUFDNUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsK0JBQStCLENBQUM7UUFFN0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFFdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sR0FBRyxpQ0FBaUMsQ0FBQztvQkFDbkMsR0FBRyxFQUFFLE9BQU87b0JBQ1osS0FBSyxFQUFFLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztvQkFDaEQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDbEMsT0FBTyxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztvQkFDakQsV0FBVyxFQUFFLFdBQVc7b0JBQ3hCLFFBQVEsRUFBRSxJQUFJO2lCQUNmLENBQUM7Z0JBQ0Y7b0JBQ0UsR0FBRyxFQUFFLGNBQWM7b0JBQ25CLElBQUksRUFBRSxRQUFRO29CQUNkLGVBQWUsRUFBRTt3QkFDZixLQUFLLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO3FCQUNqQztpQkFDRjthQUNGO1lBQ0QsU0FBUyxDQUFDLEtBQVU7O2dCQUNsQixNQUFNLE1BQU0sR0FBUSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztnQkFDakMsSUFBSSxNQUFBLEtBQUssQ0FBQyxLQUFLLDBDQUFFLE1BQU0sRUFBRTtvQkFDdkIsTUFBTSxDQUFDLElBQUksR0FBRzt3QkFDWixpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFO3FCQUN6QyxDQUFDO2lCQUNIO2dCQUNELElBQUksS0FBSyxDQUFDLFlBQVksRUFBRTtvQkFDdEIsTUFBTSxDQUFDLElBQUksbUNBQ04sTUFBTSxDQUFDLElBQUksS0FDZCxJQUFJLEVBQUU7NEJBQ0osS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFOzRCQUNuQyxpQkFBaUIsRUFBRSxFQUFFO3lCQUN0QixHQUNGLENBQUM7aUJBQ0g7Z0JBQ0QsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQztTQUNGLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLGtCQUFrQixFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzFDLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW5Db25maWcsIGdldEJhc2ljSW5wdXRBcnJheUZvcm1GaWVsZENvbmZpZywgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQmFzZURldmljZUdyaWRDb2x1bW4gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IERldmljZVR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2RldmljZS10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcblxuZXhwb3J0IGNsYXNzIERldmljZVR5cGVHcmlkQ29sdW1uIGV4dGVuZHMgQmFzZURldmljZUdyaWRDb2x1bW4ge1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG4gICAgdGhpcy5uYW1lID0gJ2RldmljZVR5cGUnO1xuICAgIHRoaXMucGF0aCA9ICdjOHlfRmlsdGVyLnR5cGUnO1xuICAgIHRoaXMuaGVhZGVyID0gZ2V0dGV4dCgnRGV2aWNlIHR5cGUnKTtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IERldmljZVR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuXG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBmaWVsZHM6IFtcbiAgICAgICAgLi4uZ2V0QmFzaWNJbnB1dEFycmF5Rm9ybUZpZWxkQ29uZmlnKHtcbiAgICAgICAgICBrZXk6ICd0eXBlcycsXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ0ZpbHRlciBzb2Z0d2FyZSBieSBkZXZpY2UgdHlwZScpLFxuICAgICAgICAgIGFkZFRleHQ6IGdldHRleHQoJ0FkZCBuZXh0YHR5cGVgJyksXG4gICAgICAgICAgdG9vbHRpcDogZ2V0dGV4dCgnVXNlICogYXMgYSB3aWxkY2FyZCBjaGFyYWN0ZXInKSxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJ2M4eV9MaW51eCcsXG4gICAgICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICAgICAgfSksXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdub0RldmljZVR5cGUnLFxuICAgICAgICAgIHR5cGU6ICdzd2l0Y2gnLFxuICAgICAgICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgICAgICAgbGFiZWw6IGdldHRleHQoJ05vIGRldmljZSB0eXBlJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBnZXRGaWx0ZXIobW9kZWw6IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogYW55ID0geyBfX29yOiB7fSB9O1xuICAgICAgICBpZiAobW9kZWwudHlwZXM/Lmxlbmd0aCkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0ge1xuICAgICAgICAgICAgJ2M4eV9GaWx0ZXIudHlwZSc6IHsgX19pbjogbW9kZWwudHlwZXMgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLm5vRGV2aWNlVHlwZSkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0ge1xuICAgICAgICAgICAgLi4uZmlsdGVyLl9fb3IsXG4gICAgICAgICAgICBfX29yOiB7XG4gICAgICAgICAgICAgIF9fbm90OiB7IF9faGFzOiAnYzh5X0ZpbHRlci50eXBlJyB9LFxuICAgICAgICAgICAgICAnYzh5X0ZpbHRlci50eXBlJzogJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc29ydGFibGUgPSB0cnVlO1xuICAgIHRoaXMuc29ydGluZ0NvbmZpZyA9IHtcbiAgICAgIHBhdGhTb3J0aW5nQ29uZmlnczogW3sgcGF0aDogdGhpcy5wYXRoIH1dXG4gICAgfTtcbiAgfVxufVxuIl19