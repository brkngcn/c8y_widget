import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { CellRendererContext, memoize } from '@c8y/ngx-components';
import { property } from 'lodash-es';
import { shareReplay } from 'rxjs/operators';
import { RepositoryService } from '@c8y/ngx-components/repository/shared';
export class VersionsCellRendererComponent {
    constructor(context, repositoryService) {
        this.context = context;
        this.repositoryService = repositoryService;
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.software = context.item;
    }
    getBaseVersionsCount$(software) {
        return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));
    }
}
VersionsCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<span class=\"label label-warning flex-item-right-sm\" *ngIf=\"isLegacy(software)\">\n  <span translate> Legacy </span>\n</span>\n<span *ngIf=\"!isLegacy(software)\">\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n    <span class=\"badge badge-info flex-item-right-sm\">\n      <i class=\"icon-spin\" c8yIcon=\"circle-o-notch\"></i>\n    </span>\n  </span>\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n    <span class=\"badge badge-info flex-item-right-sm\">\n      {{ getBaseVersionsCount$(software) | async }}\n    </span>\n  </span>\n</span>\n"
            },] }
];
VersionsCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: RepositoryService }
];
__decorate([
    memoize(property('id'))
], VersionsCellRendererComponent.prototype, "getBaseVersionsCount$", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbnMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NvZnR3YXJlL2xpc3QvY29sdW1ucy92ZXJzaW9ucy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFLMUUsTUFBTSxPQUFPLDZCQUE2QjtJQUd4QyxZQUFtQixPQUE0QixFQUFVLGlCQUFvQztRQUExRSxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUFVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFGN0YsYUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRzNFLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUMvQixDQUFDO0lBR0QscUJBQXFCLENBQUMsUUFBd0I7UUFDNUMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7OztZQWJGLFNBQVMsU0FBQztnQkFDVCxrbUJBQXNEO2FBQ3ZEOzs7WUFSUSxtQkFBbUI7WUFJbkIsaUJBQWlCOztBQWF4QjtJQURDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7MEVBR3ZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IENlbGxSZW5kZXJlckNvbnRleHQsIG1lbW9pemUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnkvc2hhcmVkJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi92ZXJzaW9ucy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uc0NlbGxSZW5kZXJlckNvbXBvbmVudCB7XG4gIGlzTGVnYWN5ID0gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5pc0xlZ2FjeUVudHJ5LmJpbmQodGhpcy5yZXBvc2l0b3J5U2VydmljZSk7XG4gIHNvZnR3YXJlO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29udGV4dDogQ2VsbFJlbmRlcmVyQ29udGV4dCwgcHJpdmF0ZSByZXBvc2l0b3J5U2VydmljZTogUmVwb3NpdG9yeVNlcnZpY2UpIHtcbiAgICB0aGlzLnNvZnR3YXJlID0gY29udGV4dC5pdGVtO1xuICB9XG5cbiAgQG1lbW9pemUocHJvcGVydHkoJ2lkJykpXG4gIGdldEJhc2VWZXJzaW9uc0NvdW50JChzb2Z0d2FyZTogSU1hbmFnZWRPYmplY3QpOiBPYnNlcnZhYmxlPG51bWJlciB8IHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJhc2VWZXJzaW9uc0NvdW50JChzb2Z0d2FyZSkucGlwZShzaGFyZVJlcGxheSgxKSk7XG4gIH1cbn1cbiJdfQ==