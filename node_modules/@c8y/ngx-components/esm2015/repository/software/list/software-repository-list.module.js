import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NameCellRendererComponent } from './columns/name.cell-renderer.component';
import { SoftwareTypeCellRendererComponent } from './columns/software-type.cell-renderer.component';
import { SoftwareTypeFilteringFormRendererComponent } from './columns/software-type.filtering-form-renderer.component';
import { DeviceTypeCellRendererComponent } from './columns/device-type.cell-renderer.component';
import { VersionsCellRendererComponent } from './columns/versions.cell-renderer.component';
import { SoftwareListComponent } from './software-list.component';
import { SoftwareDetailsComponent } from './software-details.component';
import { AddSoftwareModalComponent } from './add-software-modal.component';
import { CoreModule, FormsModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { SoftwareRepositoryNavigationFactory } from './software-repository-navigation-factory';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { RouterModule } from '@angular/router';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
export class SoftwareRepositoryListModule {
    static forRoot() {
        return {
            ngModule: SoftwareRepositoryListModule,
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: SoftwareRepositoryNavigationFactory,
                    multi: true
                },
                {
                    provide: HOOK_ROUTE,
                    useValue: [
                        {
                            path: 'software',
                            component: SoftwareListComponent
                        },
                        {
                            path: 'software/:id',
                            component: SoftwareDetailsComponent
                        }
                    ],
                    multi: true
                }
            ]
        };
    }
}
SoftwareRepositoryListModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CoreModule,
                    FormsModule,
                    DeviceGridModule,
                    PopoverModule,
                    RouterModule,
                    SharedRepositoryModule
                ],
                declarations: [
                    SoftwareListComponent,
                    SoftwareDetailsComponent,
                    AddSoftwareModalComponent,
                    NameCellRendererComponent,
                    SoftwareTypeCellRendererComponent,
                    SoftwareTypeFilteringFormRendererComponent,
                    DeviceTypeCellRendererComponent,
                    VersionsCellRendererComponent
                ],
                entryComponents: [SoftwareListComponent, SoftwareDetailsComponent, AddSoftwareModalComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdHdhcmUtcmVwb3NpdG9yeS1saXN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlcG9zaXRvcnkvc29mdHdhcmUvbGlzdC9zb2Z0d2FyZS1yZXBvc2l0b3J5LWxpc3QubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNwRyxPQUFPLEVBQUUsMENBQTBDLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUN2SCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNoRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMzRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQ0wsVUFBVSxFQUNWLFdBQVcsRUFDWCxvQkFBb0IsRUFDcEIsVUFBVSxFQUVYLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDL0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQXdCbkUsTUFBTSxPQUFPLDRCQUE0QjtJQUN2QyxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsNEJBQTRCO1lBQ3RDLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxLQUFLLEVBQUUsSUFBSTtpQkFDWjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsVUFBVTtvQkFDbkIsUUFBUSxFQUFFO3dCQUNSOzRCQUNFLElBQUksRUFBRSxVQUFVOzRCQUNoQixTQUFTLEVBQUUscUJBQXFCO3lCQUNqQzt3QkFDRDs0QkFDRSxJQUFJLEVBQUUsY0FBYzs0QkFDcEIsU0FBUyxFQUFFLHdCQUF3Qjt5QkFDcEM7cUJBQ1M7b0JBQ1osS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUFoREYsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFVBQVU7b0JBQ1YsV0FBVztvQkFDWCxnQkFBZ0I7b0JBQ2hCLGFBQWE7b0JBQ2IsWUFBWTtvQkFDWixzQkFBc0I7aUJBQ3ZCO2dCQUNELFlBQVksRUFBRTtvQkFDWixxQkFBcUI7b0JBQ3JCLHdCQUF3QjtvQkFDeEIseUJBQXlCO29CQUN6Qix5QkFBeUI7b0JBQ3pCLGlDQUFpQztvQkFDakMsMENBQTBDO29CQUMxQywrQkFBK0I7b0JBQy9CLDZCQUE2QjtpQkFDOUI7Z0JBQ0QsZUFBZSxFQUFFLENBQUMscUJBQXFCLEVBQUUsd0JBQXdCLEVBQUUseUJBQXlCLENBQUM7YUFDOUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvbmFtZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTb2Z0d2FyZVR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvc29mdHdhcmUtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTb2Z0d2FyZVR5cGVGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvc29mdHdhcmUtdHlwZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlVHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9kZXZpY2UtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBWZXJzaW9uc0NlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy92ZXJzaW9ucy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTb2Z0d2FyZUxpc3RDb21wb25lbnQgfSBmcm9tICcuL3NvZnR3YXJlLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFNvZnR3YXJlRGV0YWlsc0NvbXBvbmVudCB9IGZyb20gJy4vc29mdHdhcmUtZGV0YWlscy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWRkU29mdHdhcmVNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vYWRkLXNvZnR3YXJlLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBDb3JlTW9kdWxlLFxuICBGb3Jtc01vZHVsZSxcbiAgSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gIEhPT0tfUk9VVEUsXG4gIFJvdXRlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgU29mdHdhcmVSZXBvc2l0b3J5TmF2aWdhdGlvbkZhY3RvcnkgfSBmcm9tICcuL3NvZnR3YXJlLXJlcG9zaXRvcnktbmF2aWdhdGlvbi1mYWN0b3J5JztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFNoYXJlZFJlcG9zaXRvcnlNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnkvc2hhcmVkJztcbmltcG9ydCB7IERldmljZUdyaWRNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBDb3JlTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIERldmljZUdyaWRNb2R1bGUsXG4gICAgUG9wb3Zlck1vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUsXG4gICAgU2hhcmVkUmVwb3NpdG9yeU1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTb2Z0d2FyZUxpc3RDb21wb25lbnQsXG4gICAgU29mdHdhcmVEZXRhaWxzQ29tcG9uZW50LFxuICAgIEFkZFNvZnR3YXJlTW9kYWxDb21wb25lbnQsXG4gICAgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTb2Z0d2FyZVR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU29mdHdhcmVUeXBlRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIERldmljZVR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgVmVyc2lvbnNDZWxsUmVuZGVyZXJDb21wb25lbnRcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbU29mdHdhcmVMaXN0Q29tcG9uZW50LCBTb2Z0d2FyZURldGFpbHNDb21wb25lbnQsIEFkZFNvZnR3YXJlTW9kYWxDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFNvZnR3YXJlUmVwb3NpdG9yeUxpc3RNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFNvZnR3YXJlUmVwb3NpdG9yeUxpc3RNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFNvZnR3YXJlUmVwb3NpdG9yeUxpc3RNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICAgICAgICAgIHVzZUNsYXNzOiBTb2Z0d2FyZVJlcG9zaXRvcnlOYXZpZ2F0aW9uRmFjdG9yeSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgICAgICB1c2VWYWx1ZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwYXRoOiAnc29mdHdhcmUnLFxuICAgICAgICAgICAgICBjb21wb25lbnQ6IFNvZnR3YXJlTGlzdENvbXBvbmVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcGF0aDogJ3NvZnR3YXJlLzppZCcsXG4gICAgICAgICAgICAgIGNvbXBvbmVudDogU29mdHdhcmVEZXRhaWxzQ29tcG9uZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSBhcyBSb3V0ZVtdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=