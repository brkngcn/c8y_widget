import { __awaiter } from "tslib";
import { Component, EventEmitter } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { DeviceGridService } from '@c8y/ngx-components/device-grid';
import { TranslateService } from '@ngx-translate/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';
import { AddSoftwareModalComponent } from './add-software-modal.component';
import { DescriptionGridColumn } from './columns/description.grid-column';
import { DeviceTypeGridColumn } from './columns/device-type.grid-column';
import { SoftwareNameGridColumn } from './columns/name.grid-column';
import { SoftwareTypeGridColumn } from './columns/software-type.grid-column';
import { VersionsGridColumn } from './columns/versions.grid-column';
export class SoftwareListComponent {
    constructor(repositoryService, gridService, modalService, bsModalService, translateService, alertService, router, activatedRoute) {
        this.repositoryService = repositoryService;
        this.gridService = gridService;
        this.modalService = modalService;
        this.bsModalService = bsModalService;
        this.translateService = translateService;
        this.alertService = alertService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.sizeRequestDone = false;
        this.refresh$ = new EventEmitter();
        this.columns = [
            new SoftwareNameGridColumn(),
            new DescriptionGridColumn(),
            new DeviceTypeGridColumn(),
            new SoftwareTypeGridColumn(),
            new VersionsGridColumn()
        ];
        this.actionControls = [];
        this.pagination = {
            pageSize: 50,
            currentPage: 1
        };
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.sizeRequest = this.repositoryService
            .listRepositoryEntries(RepositoryType.SOFTWARE, {
            skipDefaultOrder: true,
            params: { pageSize: 1 }
        })
            .then(response => {
            var _a;
            this.sizeRequestDone = true;
            return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages;
        });
    }
    ngOnInit() {
        this.actionControls.push({
            type: "EDIT" /* Edit */,
            callback: this.editSoftware.bind(this)
        });
        this.actionControls.push({
            type: "DELETE" /* Delete */,
            callback: this.deleteSoftware.bind(this)
        });
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverSideDataResult;
            const dataRequest = this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {
                query: this.gridService.getQueryObj(dataSourceModifier.columns),
                skipDefaultOrder: true,
                params: {
                    pageSize: dataSourceModifier.pagination.pageSize,
                    currentPage: dataSourceModifier.pagination.currentPage
                }
            });
            const filtererdSizeRequest = this.repositoryService
                .listRepositoryEntries(RepositoryType.SOFTWARE, {
                skipDefaultOrder: true,
                query: this.gridService.getQueryObj(dataSourceModifier.columns),
                params: { pageSize: 1 }
            })
                .then(response => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages; });
            const [dataResponse, size, filteredSize] = yield Promise.all([
                dataRequest,
                this.sizeRequest,
                filtererdSizeRequest
            ]);
            const { res, data, paging } = dataResponse;
            serverSideDataResult = {
                res,
                data,
                paging,
                filteredSize,
                size
            };
            return serverSideDataResult;
        });
    }
    addSoftware() {
        const config = {
            class: 'modal-sm',
            ignoreBackdropClick: true
        };
        const modalRef = this.bsModalService.show(AddSoftwareModalComponent, config);
        modalRef.content.saved.subscribe(savedSoftware => this.editSoftware(savedSoftware));
    }
    editSoftware(software) {
        this.router.navigate([software.id], { relativeTo: this.activatedRoute });
    }
    deleteSoftware(software) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const title = gettext('Delete software');
                const body = `
        ${this.translateService.instant(gettext('You are about to delete software "{{ name }}" with all its versions.'), { name: software.name })}
        ${this.translateService.instant(gettext('This operation is irreversible.'))}
        ${this.translateService.instant(gettext('Do you want to proceed?'))}
      `;
                const labels = {
                    ok: gettext('Delete')
                };
                yield this.modalService.confirm(title, body, Status.DANGER, labels);
                yield this.repositoryService.delete(software);
                this.alertService.success(gettext('Software deleted.'));
                this.refresh$.next();
            }
            catch (ex) {
                // only if not cancel from modal
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
    trackByName(_index, column) {
        return column.name;
    }
}
SoftwareListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-software-list',
                template: "<c8y-title>\n  {{ 'Software repository' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Add software' | translate }}\" (click)=\"addSoftware()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add software' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#software-repo\"></c8y-help>\n\n<div class=\"content-fullpage\">\n  <c8y-data-grid\n    [title]=\"'Software' | translate\"\n    [refresh]=\"refresh$\"\n    [pagination]=\"pagination\"\n    [columns]=\"columns\"\n    [actionControls]=\"actionControls\"\n    [infiniteScroll]=\"'auto'\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n  >\n    <div class=\"c8y-empty-state\">\n      <ng-container *ngIf=\"!sizeRequestDone\">\n        <c8y-loading></c8y-loading>\n      </ng-container>\n      <ng-container *ngIf=\"sizeRequestDone\">\n        <ng-container *ngIf=\"(sizeRequest | async) === 0; else noResults\">\n          <div class=\"text-center\">\n            <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-tools\"></h1>\n            <h3 translate>No software to display.</h3>\n            <p translate>Add a new software by clicking below.</p>\n            <p>\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Add software' | translate }}\"\n                (click)=\"addSoftware()\"\n                translate\n              >\n                Add software\n              </button>\n            </p>\n          </div>\n        </ng-container>\n        <ng-template #noResults>\n          <h1 c8yIcon=\"search\"></h1>\n          <div>\n            <p>\n              <strong>{{ 'No results to display.' | translate }}</strong>\n            </p>\n            <small>{{ 'Refine your search terms or check your spelling.' | translate }}</small>\n          </div>\n        </ng-template>\n      </ng-container>\n    </div>\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n  </c8y-data-grid>\n</div>\n"
            },] }
];
SoftwareListComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: DeviceGridService },
    { type: ModalService },
    { type: BsModalService },
    { type: TranslateService },
    { type: AlertService },
    { type: Router },
    { type: ActivatedRoute }
];
//# sourceMappingURL=data:application/json;base64,