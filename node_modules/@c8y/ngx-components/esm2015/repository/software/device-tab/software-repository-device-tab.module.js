import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { OperationDetailsModule } from '@c8y/ngx-components/operations/operation-details';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { DeviceSoftwareChangesComponent } from './device-software-changes.component';
import { DeviceSoftwareListComponent } from './device-software-list.component';
import { InstalledSoftwareComponent } from './installed-software.component';
import { SoftwareDeviceTabComponent } from './software-device-tab.component';
import { SoftwareDeviceTabGuard } from './software-device-tab.guard';
export class SoftwareRepositoryDeviceTabModule {
    static forRoot() {
        return {
            ngModule: SoftwareRepositoryDeviceTabModule,
            providers: [
                SoftwareDeviceTabGuard,
                {
                    provide: HOOK_ROUTE,
                    useValue: [
                        {
                            context: ViewContext.Device,
                            path: 'software',
                            component: SoftwareDeviceTabComponent,
                            label: gettext('Software'),
                            icon: 'c8y-tools',
                            priority: 499,
                            canActivate: [SoftwareDeviceTabGuard]
                        }
                    ],
                    multi: true
                }
            ]
        };
    }
}
SoftwareRepositoryDeviceTabModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CoreModule,
                    RouterModule,
                    SharedRepositoryModule,
                    OperationDetailsModule,
                    TooltipModule
                ],
                declarations: [
                    SoftwareDeviceTabComponent,
                    InstalledSoftwareComponent,
                    DeviceSoftwareListComponent,
                    DeviceSoftwareChangesComponent
                ],
                entryComponents: [
                    SoftwareDeviceTabComponent,
                    DeviceSoftwareListComponent,
                    DeviceSoftwareChangesComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdHdhcmUtcmVwb3NpdG9yeS1kZXZpY2UtdGFiLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlcG9zaXRvcnkvc29mdHdhcmUvZGV2aWNlLXRhYi9zb2Z0d2FyZS1yZXBvc2l0b3J5LWRldmljZS10YWIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFTLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQXVCckUsTUFBTSxPQUFPLGlDQUFpQztJQUM1QyxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsaUNBQWlDO1lBQzNDLFNBQVMsRUFBRTtnQkFDVCxzQkFBc0I7Z0JBQ3RCO29CQUNFLE9BQU8sRUFBRSxVQUFVO29CQUNuQixRQUFRLEVBQUU7d0JBQ1I7NEJBQ0UsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNOzRCQUMzQixJQUFJLEVBQUUsVUFBVTs0QkFDaEIsU0FBUyxFQUFFLDBCQUEwQjs0QkFDckMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7NEJBQzFCLElBQUksRUFBRSxXQUFXOzRCQUNqQixRQUFRLEVBQUUsR0FBRzs0QkFDYixXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzt5QkFDdEM7cUJBQ1M7b0JBQ1osS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUE1Q0YsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFVBQVU7b0JBQ1YsWUFBWTtvQkFDWixzQkFBc0I7b0JBQ3RCLHNCQUFzQjtvQkFDdEIsYUFBYTtpQkFDZDtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osMEJBQTBCO29CQUMxQiwwQkFBMEI7b0JBQzFCLDJCQUEyQjtvQkFDM0IsOEJBQThCO2lCQUMvQjtnQkFDRCxlQUFlLEVBQUU7b0JBQ2YsMEJBQTBCO29CQUMxQiwyQkFBMkI7b0JBQzNCLDhCQUE4QjtpQkFDL0I7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIGdldHRleHQsIEhPT0tfUk9VVEUsIFJvdXRlLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgT3BlcmF0aW9uRGV0YWlsc01vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9vcGVyYXRpb24tZGV0YWlscyc7XG5pbXBvcnQgeyBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBvc2l0b3J5L3NoYXJlZCc7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC90b29sdGlwJztcbmltcG9ydCB7IERldmljZVNvZnR3YXJlQ2hhbmdlc0NvbXBvbmVudCB9IGZyb20gJy4vZGV2aWNlLXNvZnR3YXJlLWNoYW5nZXMuY29tcG9uZW50JztcbmltcG9ydCB7IERldmljZVNvZnR3YXJlTGlzdENvbXBvbmVudCB9IGZyb20gJy4vZGV2aWNlLXNvZnR3YXJlLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IEluc3RhbGxlZFNvZnR3YXJlQ29tcG9uZW50IH0gZnJvbSAnLi9pbnN0YWxsZWQtc29mdHdhcmUuY29tcG9uZW50JztcbmltcG9ydCB7IFNvZnR3YXJlRGV2aWNlVGFiQ29tcG9uZW50IH0gZnJvbSAnLi9zb2Z0d2FyZS1kZXZpY2UtdGFiLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTb2Z0d2FyZURldmljZVRhYkd1YXJkIH0gZnJvbSAnLi9zb2Z0d2FyZS1kZXZpY2UtdGFiLmd1YXJkJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBDb3JlTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZSxcbiAgICBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlLFxuICAgIE9wZXJhdGlvbkRldGFpbHNNb2R1bGUsXG4gICAgVG9vbHRpcE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTb2Z0d2FyZURldmljZVRhYkNvbXBvbmVudCxcbiAgICBJbnN0YWxsZWRTb2Z0d2FyZUNvbXBvbmVudCxcbiAgICBEZXZpY2VTb2Z0d2FyZUxpc3RDb21wb25lbnQsXG4gICAgRGV2aWNlU29mdHdhcmVDaGFuZ2VzQ29tcG9uZW50XG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIFNvZnR3YXJlRGV2aWNlVGFiQ29tcG9uZW50LFxuICAgIERldmljZVNvZnR3YXJlTGlzdENvbXBvbmVudCxcbiAgICBEZXZpY2VTb2Z0d2FyZUNoYW5nZXNDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTb2Z0d2FyZVJlcG9zaXRvcnlEZXZpY2VUYWJNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFNvZnR3YXJlUmVwb3NpdG9yeURldmljZVRhYk1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogU29mdHdhcmVSZXBvc2l0b3J5RGV2aWNlVGFiTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFNvZnR3YXJlRGV2aWNlVGFiR3VhcmQsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0LkRldmljZSxcbiAgICAgICAgICAgICAgcGF0aDogJ3NvZnR3YXJlJyxcbiAgICAgICAgICAgICAgY29tcG9uZW50OiBTb2Z0d2FyZURldmljZVRhYkNvbXBvbmVudCxcbiAgICAgICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1NvZnR3YXJlJyksXG4gICAgICAgICAgICAgIGljb246ICdjOHktdG9vbHMnLFxuICAgICAgICAgICAgICBwcmlvcml0eTogNDk5LFxuICAgICAgICAgICAgICBjYW5BY3RpdmF0ZTogW1NvZnR3YXJlRGV2aWNlVGFiR3VhcmRdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSBhcyBSb3V0ZVtdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=