import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryService, OperationStatus } from '@c8y/client';
import { AdvancedSoftwareService, RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';
import { BehaviorSubject } from 'rxjs';
import { filter, map, switchMap, take } from 'rxjs/operators';
import { DeviceSoftwareService } from './device-software.service';
export class SoftwareDeviceTabComponent {
    constructor(route, repository, inventory, deviceSoftwareService, advancedSoftwareService) {
        this.route = route;
        this.repository = repository;
        this.inventory = inventory;
        this.deviceSoftwareService = deviceSoftwareService;
        this.advancedSoftwareService = advancedSoftwareService;
        this.deviceId = this.route.snapshot.parent.data.contextData.id;
        this.device$ = new BehaviorSubject(this.route.snapshot.parent.data.contextData);
        this.typesQuery$ = this.device$.pipe(map(device => {
            const deviceTypeQuery = this.repository.getDeviceTypeQuery(RepositoryType.SOFTWARE, device);
            return this.repository.getSoftwareTypeQuery(device, deviceTypeQuery);
        }));
        this.list$ = this.device$.pipe(switchMap(device => this.advancedSoftwareService
            .isASMAvailable()
            .then(isASMAvailable => ({ isASMAvailable, device }))), map(({ isASMAvailable, device }) => 
        // with ASM available software items will be retrieved directly in the
        // device-software-list component
        isASMAvailable ? undefined : this.repository.getDeviceSoftwareList(device)));
        this.changes$ = new BehaviorSubject([]);
        this.changesOperation$ = new BehaviorSubject(null);
        this.changesInProgress$ = this.changesOperation$.pipe(map(operation => this.isInProgress(operation)));
        this.reloading = false;
        this.showSoftwareChanges = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadDevice();
            yield this.loadOperation();
        });
    }
    addChanges(requestedChanges) {
        let stagedChanges = [...this.changes$.value];
        requestedChanges.forEach(requestedChange => {
            const alreadyStaged = stagedChanges.some(stagedChange => this.areSameChanges(stagedChange, requestedChange));
            if (!alreadyStaged) {
                stagedChanges = [...stagedChanges, requestedChange];
            }
        });
        this.changes$.next(stagedChanges);
    }
    dropChange(changeToBeDropped) {
        let stagedChanges = [...this.changes$.value];
        stagedChanges = stagedChanges.filter(stagedChange => !this.areSameChanges(stagedChange, changeToBeDropped));
        this.changes$.next(stagedChanges);
    }
    areSameChanges(change1, change2) {
        return (change1.name === change2.name &&
            change1.version === change2.version &&
            change1.action === change2.action);
    }
    clearChanges() {
        this.changes$.next([]);
    }
    loadDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reloading = true;
            this.deviceSoftwareService.reload();
            const device = yield Promise.all([
                this.deviceSoftwareService.loading$
                    .pipe(filter(loading => !loading), take(1))
                    .toPromise(),
                this.inventory.detail(this.deviceId, { withChildren: false }).then(result => result.data)
            ]).then(([_, dvc]) => dvc);
            this.device$.next(device);
            this.reloading = false;
        });
    }
    applyChanges() {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = yield this.repository.createSoftwareUpdateOperation(this.device$.value, this.changes$.value);
            yield this.trackOperation(operation);
        });
    }
    loadOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = yield this.repository.getLastSoftwareUpdateOperation(this.deviceId);
            yield this.trackOperation(operation);
        });
    }
    trackOperation(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            this.changesOperation$.next(operation);
            if (this.isInProgress(operation)) {
                yield this.displayChangesFromOperation(operation);
                this.repository.observeOperation(operation).subscribe(operationUpdate => {
                    this.changesOperation$.next(operationUpdate);
                    if (operationUpdate.status === OperationStatus.SUCCESSFUL) {
                        this.clearChanges();
                        this.loadDevice();
                    }
                }, operationUpdate => {
                    this.changesOperation$.next(operationUpdate);
                });
            }
        });
    }
    displayChangesFromOperation(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            const changes = yield this.repository.getDeviceSoftwareChangesFromOperation(operation, this.device$.value);
            this.changes$.next(changes);
        });
    }
    isInProgress(operation) {
        return (operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status));
    }
}
SoftwareDeviceTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-software-device-tab',
                template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadDevice()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card split-view--7-5 m-b-0\">\n  <c8y-installed-software\n    class=\"split-view__list\"\n    [device]=\"device$ | async\"\n    [typesQuery]=\"typesQuery$ | async\"\n    [softwareList]=\"list$ | async\"\n    [deviceSoftwareChanges]=\"changes$ | async\"\n    [deviceSoftwareChangesOperation]=\"changesOperation$ | async\"\n    [deviceSoftwareChangesInProgress]=\"changesInProgress$ | async\"\n    (changes)=\"addChanges($event)\"\n    (showSoftwareChanges)=\"showSoftwareChanges = true\"\n  ></c8y-installed-software>\n  <c8y-device-software-changes\n    class=\"bg-gray-white split-view__detail\"\n    [ngClass]=\"{ 'split-view__detail--selected': showSoftwareChanges }\"\n    [changes]=\"changes$ | async\"\n    [changesInProgress]=\"changesInProgress$ | async\"\n    (clear)=\"clearChanges()\"\n    (drop)=\"dropChange($event)\"\n    (apply)=\"applyChanges()\"\n    (hideSoftwareChanges)=\"showSoftwareChanges = false\"\n  ></c8y-device-software-changes>\n</div>\n"
            },] }
];
SoftwareDeviceTabComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: RepositoryService },
    { type: InventoryService },
    { type: DeviceSoftwareService },
    { type: AdvancedSoftwareService }
];
//# sourceMappingURL=data:application/json;base64,