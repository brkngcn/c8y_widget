import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { QueriesUtil } from '@c8y/client';
import { gettext, ModalSelectionMode } from '@c8y/ngx-components';
import { RepositorySelectModalComponent, RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';
import { get } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, combineLatest, from, of, pipe, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, mergeMap, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';
export class InstalledSoftwareComponent {
    constructor(repository, bsModal) {
        this.repository = repository;
        this.bsModal = bsModal;
        this.changes = new EventEmitter();
        this.showSoftwareChanges = new EventEmitter();
        this.alreadyInstalledMessage = gettext('{{ name }} (v. {{ version }}) is already installed on this device');
        this.showFilter = false;
        this.supportsSoftwareOperations = false;
        this.textFilter$ = new BehaviorSubject('');
        this.softwareTypeFilter$ = new BehaviorSubject('');
        this.operationTypes = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];
        this.destroyed$ = new Subject();
        this.filterCriteria$ = combineLatest([this.textFilter$, this.softwareTypeFilter$]).pipe(map(([textFilter, softwareTypeFilter]) => ({
            name: textFilter,
            softwareType: softwareTypeFilter
        })), map(filterCriteria => !filterCriteria.name && !filterCriteria.softwareType ? null : filterCriteria));
        this.queriesUtil = new QueriesUtil();
    }
    ngOnInit() {
        const supportedOperations = get(this.device, 'c8y_SupportedOperations', []);
        this.supportsSoftwareOperations = this.operationTypes.some(operationType => supportedOperations.indexOf(operationType) > -1);
    }
    installSoftware() {
        const { resultEmitter, choiceEmitter, updateInstallableList$ } = this.displaySoftwareSelectModal({
            title: gettext('Install software'),
            subTitle: gettext('Available softwares matching the device type'),
            labels: { ok: gettext('Install') },
            showAdditionalFilter: true,
            additionalFilterTemplate: this.softwareTypeTemplate,
            repositoryEntriesWithVersions$: of([]),
            repositoryEntriesWithVersionsFn$: modal => this.getInstallableSoftwareListWithVersions$(modal.content.searchTerm)
        });
        resultEmitter.pipe(takeUntil(this.destroyed$)).subscribe(softwareToInstall => {
            this.emitSoftwareInstall(softwareToInstall);
            this.showSoftwareChanges.emit();
        });
        choiceEmitter
            .pipe(this.isSoftwareInstalledOnDevicePipe(updateInstallableList$), takeUntil(this.destroyed$))
            .subscribe(({ item }) => updateInstallableList$.next({
            object: item,
            template: this.alreadyInstalledWarningTemplate,
            mapper: object => {
                object.installed = true;
                return object;
            }
        }));
    }
    updateSoftware(softwareToUpdate) {
        const { resultEmitter, choiceEmitter, updateInstallableList$ } = this.displaySoftwareSelectModal({
            title: gettext('Update software'),
            subTitle: gettext('Select one of the available software versions'),
            labels: { ok: gettext('Update') },
            noItemsMessage: gettext('No other software versions available.'),
            showFilter: false,
            repositoryEntriesWithVersions$: this.getSingleSoftwareWithVersions$(softwareToUpdate)
        });
        resultEmitter.pipe(takeUntil(this.destroyed$)).subscribe(softwareToInstall => {
            this.emitSoftwareInstall(softwareToInstall);
            this.showSoftwareChanges.emit();
        });
        choiceEmitter
            .pipe(this.isSoftwareInstalledOnDevicePipe(updateInstallableList$), takeUntil(this.destroyed$))
            .subscribe(({ item }) => updateInstallableList$.next({
            object: item,
            template: this.alreadyInstalledWarningTemplate,
            mapper: object => {
                object.installed = true;
                return object;
            }
        }));
    }
    removeSoftware(softwareToRemove) {
        this.emitSoftwareRemoval([softwareToRemove]);
    }
    getInstallableSoftwareListWithVersions$(searchTerm$) {
        const installedSoftwareNames = (this.softwareList || []).map(s => s.name);
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(searchTerm => this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
            query: searchTerm.softwareType
                ? this.queriesUtil.addAndFilter(this.typesQuery, {
                    softwareType: searchTerm.softwareType
                })
                : this.typesQuery,
            partialName: searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.name,
            params: { pageSize: 100 }
        })), map(({ data }) => data), map(softwareList => {
            return softwareList.filter(software => {
                return !installedSoftwareNames.includes(software.name);
            });
        }), map(softwareList => this.attachVersions(softwareList)), shareReplay(1));
    }
    getSingleSoftwareWithVersions$(software) {
        return from(this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
            query: { name: software.name }
        })).pipe(map(({ data }) => data), map(softwareList => this.attachVersions(softwareList)), shareReplay(1));
    }
    attachVersions(softwareList) {
        softwareList.forEach(software => {
            software.versions = this.repository.listBaseVersions(software);
        });
        return softwareList;
    }
    displaySoftwareSelectModal(initialStateOverrides) {
        const initialState = Object.assign({ repositoryType: RepositoryType.SOFTWARE, mode: ModalSelectionMode.MULTI, icon: 'c8y-tools', disableSelected: false, selected: this.softwareList }, initialStateOverrides);
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            class: 'modal-sm',
            initialState
        });
        if (initialStateOverrides.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ =
                initialStateOverrides.repositoryEntriesWithVersionsFn$(modal);
        }
        this.modalSearch = modal.content.search.bind(modal.content);
        modal.content.load.next();
        return {
            resultEmitter: modal.content.resultEmitter,
            choiceEmitter: modal.content.onChoiceUpdated,
            updateInstallableList$: modal.content.updateInstallableList$
        };
    }
    search(filterCriteria) {
        if (this.modalSearch) {
            this.modalSearch(filterCriteria);
        }
    }
    emitSoftwareInstall(items) {
        this.changes.emit(items.map(item => {
            return Object.assign(Object.assign({}, item), { action: 'install' });
        }));
    }
    emitSoftwareRemoval(items) {
        this.changes.emit(items.map(item => {
            return Object.assign(Object.assign({}, item), { action: 'delete' });
        }));
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    isSoftwareInstalledOnDevicePipe(updateInstallableList$) {
        return pipe(tap((item) => updateInstallableList$.next({ object: item, template: this.loadingTemplate })), map(item => ({
            item,
            software: ((item.options || []).find(option => option.obj.id === item.selectedId) || {}).obj
        })), mergeMap(({ item, software }) => from(this.repository.isSoftwareInstalledOnDevice(this.device.id, software)).pipe(map(installed => ({ item, installed })))), tap(({ item }) => updateInstallableList$.next({ object: item })), filter(({ installed }) => !!installed));
    }
}
InstalledSoftwareComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-installed-software',
                template: "<div class=\"d-flex d-col flex-grow\">\n  <div class=\"card-header large-padding separator sticky-top\">\n    <h4 class=\"card-title\" translate>Installed software</h4>\n  </div>\n  <div class=\"flex-grow\">\n    <fieldset\n      id=\"operation-block\"\n      *ngIf=\"deviceSoftwareChangesOperation\"\n      class=\"card-block large-padding bg-gray-lighter\"\n    >\n      <c8y-operation-details [operation]=\"deviceSoftwareChangesOperation\"></c8y-operation-details>\n    </fieldset>\n    <fieldset class=\"card-block large-padding overflow-visible separator-bottom\" *ngIf=\"showFilter\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              type=\"search\"\n              title=\"{{ 'Filter installed software\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter installed software\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                class=\"text-muted\"\n                c8yIcon=\"times\"\n                *ngIf=\"(textFilter$ | async).length > 0\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-xs-6\">\n          <c8y-software-type\n            [required]=\"false\"\n            [emitResultsOnly]=\"true\"\n            [showBtnInNotFoundMessage]=\"false\"\n            [allowFreeEntries]=\"false\"\n            [placeholder]=\"'Filter by software type\u2026' | translate\"\n            [showClearSelectionOption]=\"true\"\n            (onSelectSoftware)=\"softwareTypeFilter$.next($event?.softwareType)\"\n          ></c8y-software-type>\n        </div>\n      </div>\n    </fieldset>\n\n    <fieldset\n      id=\"software-list\"\n      class=\"flex-grow inner-scroll\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <!-- NOT EMPTY STATE -->\n      <c8y-device-software-list\n        [device]=\"device\"\n        [filterCriteria$]=\"filterCriteria$\"\n        [softwareList]=\"softwareList\"\n        [deviceSoftwareChanges]=\"deviceSoftwareChanges\"\n        (update)=\"updateSoftware($event)\"\n        (remove)=\"removeSoftware($event)\"\n        (onListEmpty)=\"showFilter = !$event\"\n        class=\"d-block p-l-16 p-r-16\"\n        container=\"body\"\n      >\n        <!-- EMPTY STATE -->\n        <div class=\"c8y-empty-state text-center m-t-16\">\n          <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n          <p>\n            <strong translate>No software installed.</strong> <br />\n            <small translate>Click below to install software into this device.</small>\n          </p>\n        </div>\n        <!-- NO SEARCH RESULTS STATE -->\n        <div class=\"c8y-empty-state c8y-no-results-state text-center\">\n          <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n          <p>\n            <strong translate>No software matches your filter criteria.</strong> <br />\n            <small translate>Try changing your search criteria.</small>\n          </p>\n        </div>\n      </c8y-device-software-list>\n    </fieldset>\n  </div>\n  <!-- INSTALL SOFTWARE-->\n  <div\n    class=\"card-footer large-padding separator sticky-bottom d-flex j-c-between bg-white\"\n    [ngClass]=\"{ 'visible-sm visible-xs': !supportsSoftwareOperations }\"\n  >\n    <button\n      *ngIf=\"supportsSoftwareOperations\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Install software' | translate }}\"\n      (click)=\"installSoftware()\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      {{ 'Install software' | translate }}\n    </button>\n    <button\n      (click)=\"showSoftwareChanges.emit()\"\n      class=\"btn btn-clean text-primary visible-sm visible-xs\"\n      [title]=\"'Show &quot;Software changes&quot;' | translate\"\n    >\n      <span translate>Show \"Software changes\"</span>\n      <i c8yIcon=\"chevron-right\"></i>\n    </button>\n  </div>\n</div>\n\n<ng-template #alreadyInstalledWarning let-item let-option=\"option\">\n  <i\n    c8yIcon=\"warning\"\n    class=\"text-warning a-s-center\"\n    [tooltip]=\"\n      alreadyInstalledMessage\n        | translate: { name: item.body[0].value, version: option.body[0].value }\n    \"\n  ></i>\n</ng-template>\n\n<ng-template #loading>\n  <div class=\"p-relative d-flex m-l-auto\">\n    <i class=\"icon-spin\" c8yIcon=\"circle-o-notch\"></i>\n  </div>\n</ng-template>\n\n<ng-template #softwareType>\n  <c8y-software-type\n    additionalFilter\n    [required]=\"false\"\n    [placeholder]=\"'Filter by software type\u2026' | translate\"\n    (onSelectSoftware)=\"search({ softwareType: $event?.softwareType })\"\n    [emitResultsOnly]=\"true\"\n    [showBtnInNotFoundMessage]=\"false\"\n    [allowFreeEntries]=\"false\"\n    [showClearSelectionOption]=\"true\"\n  ></c8y-software-type>\n</ng-template>\n"
            },] }
];
InstalledSoftwareComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: BsModalService }
];
InstalledSoftwareComponent.propDecorators = {
    device: [{ type: Input }],
    softwareList: [{ type: Input }],
    deviceSoftwareChanges: [{ type: Input }],
    deviceSoftwareChangesOperation: [{ type: Input }],
    deviceSoftwareChangesInProgress: [{ type: Input }],
    typesQuery: [{ type: Input }],
    changes: [{ type: Output }],
    showSoftwareChanges: [{ type: Output }],
    alreadyInstalledWarningTemplate: [{ type: ViewChild, args: ['alreadyInstalledWarning', { static: true },] }],
    loadingTemplate: [{ type: ViewChild, args: ['loading', { static: true },] }],
    softwareTypeTemplate: [{ type: ViewChild, args: ['softwareType', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,