import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FirmwareListComponent } from './firmware-list.component';
import { FirmwareDetailsComponent } from './firmware-details.component';
import { AddFirmwareModalComponent } from './add-firmware-modal.component';
import { AddFirmwarePatchModalComponent } from './add-firmware-patch-modal.component';
import { CoreModule, FormsModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { FirmwareRepositoryNavigationFactory } from './firmware-repository-navigation-factory';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
export class FirmwareRepositoryListModule {
    static forRoot() {
        return {
            ngModule: FirmwareRepositoryListModule,
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: FirmwareRepositoryNavigationFactory,
                    multi: true
                },
                {
                    provide: HOOK_ROUTE,
                    useValue: [
                        {
                            path: 'firmware',
                            component: FirmwareListComponent
                        },
                        {
                            path: 'firmware/:id',
                            component: FirmwareDetailsComponent
                        }
                    ],
                    multi: true
                }
            ]
        };
    }
}
FirmwareRepositoryListModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CoreModule,
                    FormsModule,
                    PopoverModule,
                    SharedRepositoryModule
                ],
                declarations: [
                    FirmwareListComponent,
                    FirmwareDetailsComponent,
                    AddFirmwareModalComponent,
                    AddFirmwarePatchModalComponent,
                ],
                entryComponents: [
                    FirmwareListComponent,
                    FirmwareDetailsComponent,
                    AddFirmwareModalComponent,
                    AddFirmwarePatchModalComponent,
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlybXdhcmUtcmVwb3NpdG9yeS1saXN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlcG9zaXRvcnkvZmlybXdhcmUvbGlzdC9maXJtd2FyZS1yZXBvc2l0b3J5LWxpc3QubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQVMsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RyxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUF1Qi9FLE1BQU0sT0FBTyw0QkFBNEI7SUFDdkMsTUFBTSxDQUFDLE9BQU87UUFDWixPQUFPO1lBQ0wsUUFBUSxFQUFFLDRCQUE0QjtZQUN0QyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjtvQkFDN0IsUUFBUSxFQUFFLG1DQUFtQztvQkFDN0MsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLFVBQVU7b0JBQ25CLFFBQVEsRUFBRTt3QkFDUjs0QkFDRSxJQUFJLEVBQUUsVUFBVTs0QkFDaEIsU0FBUyxFQUFFLHFCQUFxQjt5QkFDakM7d0JBQ0Q7NEJBQ0UsSUFBSSxFQUFFLGNBQWM7NEJBQ3BCLFNBQVMsRUFBRSx3QkFBd0I7eUJBQ3BDO3FCQUNTO29CQUNaLEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBL0NGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixVQUFVO29CQUNWLFdBQVc7b0JBQ1gsYUFBYTtvQkFDYixzQkFBc0I7aUJBQ3ZCO2dCQUNELFlBQVksRUFBRTtvQkFDWixxQkFBcUI7b0JBQ3JCLHdCQUF3QjtvQkFDeEIseUJBQXlCO29CQUN6Qiw4QkFBOEI7aUJBQy9CO2dCQUNELGVBQWUsRUFBRTtvQkFDZixxQkFBcUI7b0JBQ3JCLHdCQUF3QjtvQkFDeEIseUJBQXlCO29CQUN6Qiw4QkFBOEI7aUJBQy9CO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZpcm13YXJlTGlzdENvbXBvbmVudCB9IGZyb20gJy4vZmlybXdhcmUtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmlybXdhcmVEZXRhaWxzQ29tcG9uZW50IH0gZnJvbSAnLi9maXJtd2FyZS1kZXRhaWxzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBZGRGaXJtd2FyZU1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9hZGQtZmlybXdhcmUtbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEFkZEZpcm13YXJlUGF0Y2hNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vYWRkLWZpcm13YXJlLXBhdGNoLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBGb3Jtc01vZHVsZSwgSE9PS19OQVZJR0FUT1JfTk9ERVMsIEhPT0tfUk9VVEUsIFJvdXRlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBGaXJtd2FyZVJlcG9zaXRvcnlOYXZpZ2F0aW9uRmFjdG9yeSB9IGZyb20gJy4vZmlybXdhcmUtcmVwb3NpdG9yeS1uYXZpZ2F0aW9uLWZhY3RvcnknO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBvc2l0b3J5L3NoYXJlZCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQ29yZU1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBQb3BvdmVyTW9kdWxlLFxuICAgIFNoYXJlZFJlcG9zaXRvcnlNb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRmlybXdhcmVMaXN0Q29tcG9uZW50LFxuICAgIEZpcm13YXJlRGV0YWlsc0NvbXBvbmVudCxcbiAgICBBZGRGaXJtd2FyZU1vZGFsQ29tcG9uZW50LFxuICAgIEFkZEZpcm13YXJlUGF0Y2hNb2RhbENvbXBvbmVudCxcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgRmlybXdhcmVMaXN0Q29tcG9uZW50LFxuICAgIEZpcm13YXJlRGV0YWlsc0NvbXBvbmVudCxcbiAgICBBZGRGaXJtd2FyZU1vZGFsQ29tcG9uZW50LFxuICAgIEFkZEZpcm13YXJlUGF0Y2hNb2RhbENvbXBvbmVudCxcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBGaXJtd2FyZVJlcG9zaXRvcnlMaXN0TW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxGaXJtd2FyZVJlcG9zaXRvcnlMaXN0TW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBGaXJtd2FyZVJlcG9zaXRvcnlMaXN0TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgICAgICAgICB1c2VDbGFzczogRmlybXdhcmVSZXBvc2l0b3J5TmF2aWdhdGlvbkZhY3RvcnksXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcGF0aDogJ2Zpcm13YXJlJyxcbiAgICAgICAgICAgICAgY29tcG9uZW50OiBGaXJtd2FyZUxpc3RDb21wb25lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHBhdGg6ICdmaXJtd2FyZS86aWQnLFxuICAgICAgICAgICAgICBjb21wb25lbnQ6IEZpcm13YXJlRGV0YWlsc0NvbXBvbmVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0gYXMgUm91dGVbXSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19