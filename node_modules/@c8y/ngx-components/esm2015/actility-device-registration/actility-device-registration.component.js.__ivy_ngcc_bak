import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { from, forkJoin, of, BehaviorSubject, throwError, defer, Subject } from 'rxjs';
import { cloneDeep, uniq } from 'lodash-es';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { ActilityDeviceRegistrationService, ErrorName } from './actility-device-registration.service';
import { map, catchError, switchMap, shareReplay, takeUntil, mergeMap } from 'rxjs/operators';
export class ActilityDeviceRegistrationComponent {
    constructor(bsModalRef, registrationService) {
        this.bsModalRef = bsModalRef;
        this.registrationService = registrationService;
        this.registrationStepLabels = {
            next: gettext('Register')
        };
        this.finalStepLabels = {
            custom: gettext('Close')
        };
        this.state = 'loadPending';
        this.errors$ = new BehaviorSubject([]);
        this.errorMessages$ = this.errors$.pipe(map(errors => errors.map(error => error.message)), map(messages => uniq(messages)));
        this.connections$ = this.getConnections$();
        this.deviceProtocols$ = this.getDeviceProtocols$();
        this.unsubscribe$ = new Subject();
        this.load$ = this.connections$.pipe(catchError((error) => of(error)), switchMap(connections => {
            if (connections instanceof Error &&
                connections.name === ErrorName.NoConnectivitySettingsError) {
                return of([connections]);
            }
            return forkJoin([
                of(connections),
                this.deviceProtocols$.pipe(catchError((error) => of(error)))
            ]);
        }), map(results => results.filter(result => result instanceof Error)), switchMap(errors => (errors.length === 0 ? of([]) : throwError(errors))));
        this.form = new FormGroup({});
        this.model = {};
        // Formly schema definition to render actility device registration form
        this.fields = [
            {
                key: 'connection',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Connection'),
                    required: true,
                    c8yForOptions: this.connections$,
                    displayProperty: 'name',
                    valueProperties: ['name']
                }
            },
            {
                key: 'deviceProfile',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Device profile'),
                    required: true,
                    displayProperty: 'name',
                    placeholder: 'IWM-LR3',
                    valueProperties: ['id', 'name', 'typeMAC']
                },
                hooks: {
                    onInit: field => {
                        const connectionControl = field.form.get('connection');
                        connectionControl.valueChanges
                            .pipe(takeUntil(this.unsubscribe$), mergeMap(() => this.getDeviceProfiles$(this.form.get('connection').value.name)))
                            .subscribe(profiles => {
                            field.templateOptions.c8yForOptions = of(profiles);
                            field.formControl.setValue(null);
                        }, error => {
                            field.form.controls.deviceProfile.setErrors({ deviceProfile: true });
                            field.validators.deviceProfile.message = error.message;
                        });
                    }
                },
                validators: {
                    deviceProfile: {
                        expression: (control) => {
                            return control.status === 'VALID';
                        },
                        message: () => ''
                    }
                }
            },
            {
                key: 'deviceType',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Device protocol'),
                    required: true,
                    c8yForOptions: this.deviceProtocols$,
                    displayProperty: 'name',
                    valueProperties: ['id', 'name']
                }
            },
            {
                key: 'devEUI',
                type: 'input',
                templateOptions: {
                    placeholder: '0018A20000000004',
                    label: gettext('Device EUI'),
                    required: true,
                    pattern: '^([a-fA-F0-9]{16})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 16 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'applicationEUI',
                type: 'input',
                templateOptions: {
                    placeholder: '70B3D53260000003',
                    label: gettext('Application EUI'),
                    required: true,
                    pattern: '^([a-fA-F0-9]{16})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 16 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'applicationKey',
                type: 'input',
                templateOptions: {
                    label: gettext('Application key'),
                    placeholder: '258DB54023EA74F0D55085F7351737D0',
                    required: true,
                    pattern: '^([a-fA-F0-9]{32})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 32 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'connectivityPlan',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Connectivity plan'),
                    description: gettext('Only connectivity plans with free slots are displayed'),
                    required: true,
                    placeholder: 'Dev-ope testing CP',
                    displayProperty: 'name',
                    valueProperties: ['id', 'ref', 'name', 'grantedConnections', 'usedConnections']
                },
                hooks: {
                    onInit: field => {
                        const connectionControl = field.form.get('connection');
                        connectionControl.valueChanges
                            .pipe(takeUntil(this.unsubscribe$), mergeMap(() => this.getConnectivityPlans$(this.form.get('connection').value.name)))
                            .subscribe(profiles => {
                            field.templateOptions.c8yForOptions = of(profiles);
                            field.formControl.setValue(null);
                        }, error => {
                            field.form.controls.connectivityPlan.setErrors({ connectivityPlan: true });
                            field.validators.connectivityPlan.message = error.message;
                        });
                    }
                },
                validators: {
                    connectivityPlan: {
                        expression: (control) => {
                            return control.status === 'VALID';
                        },
                        message: () => ''
                    }
                }
            }
        ];
        this.load$.subscribe(() => {
            this.state = 'loadSuccess';
        }, errors => {
            this.state = 'loadError';
            this.errors$.next(errors);
        });
    }
    getConnectivityPlans$(name) {
        return defer(() => from(this.registrationService.getConnectivityPlans(name))).pipe(shareReplay(1));
    }
    getDeviceProfiles$(name) {
        return defer(() => from(this.registrationService.getDeviceProfiles(name))).pipe(shareReplay(1));
    }
    getDeviceProtocols$() {
        return defer(() => from(this.registrationService.getDeviceProtocols())).pipe(shareReplay(1));
    }
    getConnections$() {
        return defer(() => from(this.registrationService.getConnections())).pipe(shareReplay(1));
    }
    register(event) {
        return __awaiter(this, void 0, void 0, function* () {
            event.stepper.next();
            this.state = 'registrationPending';
            try {
                const actilityDevice = this.getActilityDeviceToSend();
                yield this.registrationService.register(actilityDevice);
                this.state = 'registrationSuccess';
            }
            catch (error) {
                this.state = 'registrationError';
                this.errors$.next([error]);
            }
        });
    }
    getActilityDeviceToSend() {
        const actilityDevice = cloneDeep(this.model);
        actilityDevice.lnsConnectionName = this.model.connection.name;
        delete actilityDevice.connection;
        return actilityDevice;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
ActilityDeviceRegistrationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-actility-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Actility LoRa registration' | translate }}</h4>\n  </ng-container>\n\n  <ng-container *ngIf=\"state === 'loadPending'; else registrationForm\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </ng-container>\n\n  <!--Formly schema is rendered-->\n  <ng-template #registrationForm>\n    <c8y-stepper\n      [hideStepProgress]=\"true\"\n      linear\n      *ngIf=\"(errorMessages$ | async).length === 0; else errorMessagesPresent\"\n    >\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"p-b-16\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              sticky-top\n              separator-bottom\n              lead\n              text-center\n              bg-component\n            \"\n          >\n          {{ 'Register a single Actility device' | translate }}\n          </p>\n          <formly-form\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            class=\"formly-group-array-cols d-block p-l-24 p-r-24\"\n          ></formly-form>\n        </div>\n\n        <c8y-stepper-buttons\n          [labels]=\"registrationStepLabels\"\n          (onNext)=\"register($event)\"\n          (onCancel)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [pending]=\"state === 'registrationPending'\"\n          [disabled]=\"!form?.valid\"\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n      <cdk-step state=\"final\">\n        <!--success scenario-->\n        <div class=\"p-16 text-center\" *ngIf=\"state === 'registrationPending'\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <div class=\"m-24\">\n          <c8y-operation-result\n            *ngIf=\"state === 'registrationSuccess'\"\n            text=\"{{ 'Device registered' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead m-b-0\"\n          ></c8y-operation-result>\n        </div>\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          (onCustom)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ custom: true }\"\n          [labels]=\"finalStepLabels\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </c8y-stepper>\n  </ng-template>\n\n  <!--Failure scenario-->\n  <ng-template #errorMessagesPresent>\n    <div class=\"m-24\">\n      <c8y-operation-result\n        *ngIf=\"state === 'registrationError'\"\n        text=\"{{ 'Failed to register' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n      <div\n        *ngFor=\"let msg of errorMessages$ | async\"\n        class=\"m-b-8\"\n        [ngClass]=\"{\n          'text-center': state === 'registrationError',\n          'alert alert-danger': state === 'loadError'\n        }\"\n      >\n        <span [innerHTML]=\"msg | translate\"></span>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Close' | translate }}\"\n        (click)=\"bsModalRef.hide()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        translate\n      >\n        Close\n      </button>\n    </div>\n  </ng-template>\n</c8y-modal>"
            },] }
];
ActilityDeviceRegistrationComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: ActilityDeviceRegistrationService }
];
//# sourceMappingURL=data:application/json;base64,