import { Injectable } from '@angular/core';
import { TenantLoginOptionsService, TenantLoginOptionType } from '@c8y/client';
import { defer, of } from 'rxjs';
import { catchError, map, publishReplay, refCount, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/tenant-login-options/TenantLoginOptionsService";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class SsoConfigurationService {
    constructor(loginOptionsService) {
        this.loginOptionsService = loginOptionsService;
        this.isSsoConfigurationAvailable$ = defer(() => this.loginOptionsService.detail(TenantLoginOptionType.OAUTH2)).pipe(map(res => true), catchError(({ res }) => (res.status === 403 /* Forbidden */ ? of(false) : of(true))), 
        // Both guard and tab.factory ask for OAUTH2 - this observable will be send one request in 1 second.
        publishReplay(1, 1000), refCount(), take(1));
    }
    showSsoConfiguration$() {
        return this.isSsoConfigurationAvailable$;
    }
}
SsoConfigurationService.ɵfac = function SsoConfigurationService_Factory(t) { return new (t || SsoConfigurationService)(ɵngcc0.ɵɵinject(ɵngcc1.TenantLoginOptionsService)); };
SsoConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SsoConfigurationService_Factory() { return new SsoConfigurationService(i0.ɵɵinject(i1.TenantLoginOptionsService)); }, token: SsoConfigurationService, providedIn: "root" });
SsoConfigurationService.ctorParameters = () => [
    { type: TenantLoginOptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SsoConfigurationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.TenantLoginOptionsService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NvLWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXV0aC1jb25maWd1cmF0aW9uL3Nzby1jb25maWd1cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0UsT0FBTyxFQUFjLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRjtBQUFxQzs7O0FBS3JDLE1BQU0sT0FBTyx1QkFBdUI7QUFDcEMsSUFXRSxZQUFvQixtQkFBOEM7QUFBSSxRQUFsRCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTJCO0FBQUMsUUFYM0QsaUNBQTRCLEdBQXdCLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FDckUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FDOUQsQ0FBQyxJQUFJLENBQ0osR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ2hCLFVBQVUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sd0JBQTZCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDNUYsUUFBRyxvR0FBb0c7QUFDeEcsUUFBSSxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUN0QixRQUFRLEVBQUUsRUFDVixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1IsQ0FBQztBQUNKLElBQ3VFLENBQUM7QUFDeEUsSUFDRSxxQkFBcUI7QUFBSyxRQUN4QixPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQztBQUM3QyxJQUFFLENBQUM7QUFDSDs2S0FBQztBQUNELHNQQWxCSztBQUFDO0VBSEwsVUFBVSxTQUFDLGtCQUNWLHZDQUdjLFlBVFAseUJBQXlCO0FBQUc7TUFNekIsRUFBRSxNQUFNLGNBQ25COzs7OzswRkFQc0M7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlbmFudExvZ2luT3B0aW9uc1NlcnZpY2UsIFRlbmFudExvZ2luT3B0aW9uVHlwZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IE9ic2VydmFibGUsIGRlZmVyLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBwdWJsaXNoUmVwbGF5LCByZWZDb3VudCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEh0dHBTdGF0dXNDb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTc29Db25maWd1cmF0aW9uU2VydmljZSB7XG4gIHByaXZhdGUgaXNTc29Db25maWd1cmF0aW9uQXZhaWxhYmxlJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IGRlZmVyKCgpID0+XG4gICAgdGhpcy5sb2dpbk9wdGlvbnNTZXJ2aWNlLmRldGFpbChUZW5hbnRMb2dpbk9wdGlvblR5cGUuT0FVVEgyKVxuICApLnBpcGUoXG4gICAgbWFwKHJlcyA9PiB0cnVlKSxcbiAgICBjYXRjaEVycm9yKCh7IHJlcyB9KSA9PiAocmVzLnN0YXR1cyA9PT0gSHR0cFN0YXR1c0NvZGUuRm9yYmlkZGVuID8gb2YoZmFsc2UpIDogb2YodHJ1ZSkpKSxcbiAgICAvLyBCb3RoIGd1YXJkIGFuZCB0YWIuZmFjdG9yeSBhc2sgZm9yIE9BVVRIMiAtIHRoaXMgb2JzZXJ2YWJsZSB3aWxsIGJlIHNlbmQgb25lIHJlcXVlc3QgaW4gMSBzZWNvbmQuXG4gICAgcHVibGlzaFJlcGxheSgxLCAxMDAwKSxcbiAgICByZWZDb3VudCgpLFxuICAgIHRha2UoMSlcbiAgKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvZ2luT3B0aW9uc1NlcnZpY2U6IFRlbmFudExvZ2luT3B0aW9uc1NlcnZpY2UpIHt9XG5cbiAgc2hvd1Nzb0NvbmZpZ3VyYXRpb24kKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmlzU3NvQ29uZmlndXJhdGlvbkF2YWlsYWJsZSQ7XG4gIH1cbn1cbiJdfQ==