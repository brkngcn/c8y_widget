import { NgModule } from '@angular/core';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE, HOOK_TABS } from '@c8y/ngx-components';
import { BasicAuthSettingsComponent } from './basic-auth-settings.component';
import { TabsFactory } from './factories/tabs.factory';
import { NavigationFactory } from './factories/navigation.factory';
import { AuthConfigurationGuard } from './auth-configuration.guard';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { AuthConfigurationService } from './auth-configuration.service';
import { AuthConfigurationComponent } from './auth-configuration.component';
import { TfaSettingsComponent } from './tfa-settings.component';
import { SessionConfigurationComponent } from './session-configuration.component';
import { LoginSettingsComponent } from './login-settings.component';
import { SsoConfigurationGuard } from './sso-configuration.guard';
import { SsoConfigurationService } from './sso-configuration.service';
const ɵ0 = [
    {
        path: 'auth-configuration',
        redirectTo: 'auth-configuration/basic_settings',
        pathMatch: 'full'
    },
    {
        path: 'auth-configuration/basic_settings',
        component: AuthConfigurationComponent,
        canActivate: [AuthConfigurationGuard]
    },
    {
        path: 'auth-configuration/single_sign-on',
        canActivate: [AuthConfigurationGuard, SsoConfigurationGuard],
        children: [] // This route exists to secure path by guards. Sso component exists only in Angular Js, so here children is used to avoid compilation error.
    }
];
export class AuthConfigurationModule {
}
AuthConfigurationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SessionConfigurationComponent,
                    LoginSettingsComponent,
                    BasicAuthSettingsComponent,
                    AuthConfigurationComponent,
                    TfaSettingsComponent
                ],
                exports: [],
                imports: [CoreModule, PopoverModule],
                providers: [
                    AuthConfigurationService,
                    AuthConfigurationGuard,
                    SsoConfigurationService,
                    SsoConfigurationGuard,
                    { provide: HOOK_TABS, useClass: TabsFactory, multi: true },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: NavigationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1jb25maWd1cmF0aW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2F1dGgtY29uZmlndXJhdGlvbi9hdXRoLWNvbmZpZ3VyYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFVBQVUsRUFDVixvQkFBb0IsRUFDcEIsVUFBVSxFQUNWLFNBQVMsRUFFVixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7V0F5QnREO0lBQ1I7UUFDRSxJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLFVBQVUsRUFBRSxtQ0FBbUM7UUFDL0MsU0FBUyxFQUFFLE1BQU07S0FDbEI7SUFDRDtRQUNFLElBQUksRUFBRSxtQ0FBbUM7UUFDekMsU0FBUyxFQUFFLDBCQUEwQjtRQUNyQyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztLQUN0QztJQUNEO1FBQ0UsSUFBSSxFQUFFLG1DQUFtQztRQUN6QyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxxQkFBcUIsQ0FBQztRQUM1RCxRQUFRLEVBQUUsRUFBRSxDQUFDLDRJQUE0STtLQUMxSjtDQUNTO0FBS2xCLE1BQU0sT0FBTyx1QkFBdUI7OztZQTVDbkMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWiw2QkFBNkI7b0JBQzdCLHNCQUFzQjtvQkFDdEIsMEJBQTBCO29CQUMxQiwwQkFBMEI7b0JBQzFCLG9CQUFvQjtpQkFDckI7Z0JBQ0QsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQztnQkFDcEMsU0FBUyxFQUFFO29CQUNULHdCQUF3QjtvQkFDeEIsc0JBQXNCO29CQUN0Qix1QkFBdUI7b0JBQ3ZCLHFCQUFxQjtvQkFDckIsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtvQkFDMUQ7d0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjt3QkFDN0IsUUFBUSxFQUFFLGlCQUFpQjt3QkFDM0IsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLFVBQVU7d0JBQ25CLFFBQVEsSUFnQkk7d0JBQ1osS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb3JlTW9kdWxlLFxuICBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgSE9PS19ST1VURSxcbiAgSE9PS19UQUJTLFxuICBSb3V0ZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJhc2ljQXV0aFNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNpYy1hdXRoLXNldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUYWJzRmFjdG9yeSB9IGZyb20gJy4vZmFjdG9yaWVzL3RhYnMuZmFjdG9yeSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uRmFjdG9yeSB9IGZyb20gJy4vZmFjdG9yaWVzL25hdmlnYXRpb24uZmFjdG9yeSc7XG5pbXBvcnQgeyBBdXRoQ29uZmlndXJhdGlvbkd1YXJkIH0gZnJvbSAnLi9hdXRoLWNvbmZpZ3VyYXRpb24uZ3VhcmQnO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBBdXRoQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGgtY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGhDb25maWd1cmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9hdXRoLWNvbmZpZ3VyYXRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IFRmYVNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi90ZmEtc2V0dGluZ3MuY29tcG9uZW50JztcbmltcG9ydCB7IFNlc3Npb25Db25maWd1cmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9zZXNzaW9uLWNvbmZpZ3VyYXRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2xvZ2luLXNldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTc29Db25maWd1cmF0aW9uR3VhcmQgfSBmcm9tICcuL3Nzby1jb25maWd1cmF0aW9uLmd1YXJkJztcbmltcG9ydCB7IFNzb0NvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9zc28tY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgU2Vzc2lvbkNvbmZpZ3VyYXRpb25Db21wb25lbnQsXG4gICAgTG9naW5TZXR0aW5nc0NvbXBvbmVudCxcbiAgICBCYXNpY0F1dGhTZXR0aW5nc0NvbXBvbmVudCxcbiAgICBBdXRoQ29uZmlndXJhdGlvbkNvbXBvbmVudCxcbiAgICBUZmFTZXR0aW5nc0NvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIFBvcG92ZXJNb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICBBdXRoQ29uZmlndXJhdGlvblNlcnZpY2UsXG4gICAgQXV0aENvbmZpZ3VyYXRpb25HdWFyZCxcbiAgICBTc29Db25maWd1cmF0aW9uU2VydmljZSxcbiAgICBTc29Db25maWd1cmF0aW9uR3VhcmQsXG4gICAgeyBwcm92aWRlOiBIT09LX1RBQlMsIHVzZUNsYXNzOiBUYWJzRmFjdG9yeSwgbXVsdGk6IHRydWUgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgICAgIHVzZUNsYXNzOiBOYXZpZ2F0aW9uRmFjdG9yeSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdhdXRoLWNvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgIHJlZGlyZWN0VG86ICdhdXRoLWNvbmZpZ3VyYXRpb24vYmFzaWNfc2V0dGluZ3MnLFxuICAgICAgICAgIHBhdGhNYXRjaDogJ2Z1bGwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXRoOiAnYXV0aC1jb25maWd1cmF0aW9uL2Jhc2ljX3NldHRpbmdzJyxcbiAgICAgICAgICBjb21wb25lbnQ6IEF1dGhDb25maWd1cmF0aW9uQ29tcG9uZW50LFxuICAgICAgICAgIGNhbkFjdGl2YXRlOiBbQXV0aENvbmZpZ3VyYXRpb25HdWFyZF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdhdXRoLWNvbmZpZ3VyYXRpb24vc2luZ2xlX3NpZ24tb24nLFxuICAgICAgICAgIGNhbkFjdGl2YXRlOiBbQXV0aENvbmZpZ3VyYXRpb25HdWFyZCwgU3NvQ29uZmlndXJhdGlvbkd1YXJkXSxcbiAgICAgICAgICBjaGlsZHJlbjogW10gLy8gVGhpcyByb3V0ZSBleGlzdHMgdG8gc2VjdXJlIHBhdGggYnkgZ3VhcmRzLiBTc28gY29tcG9uZW50IGV4aXN0cyBvbmx5IGluIEFuZ3VsYXIgSnMsIHNvIGhlcmUgY2hpbGRyZW4gaXMgdXNlZCB0byBhdm9pZCBjb21waWxhdGlvbiBlcnJvci5cbiAgICAgICAgfVxuICAgICAgXSBhcyBSb3V0ZVtdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQXV0aENvbmZpZ3VyYXRpb25Nb2R1bGUge31cbiJdfQ==