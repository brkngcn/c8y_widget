import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { of, EMPTY, merge } from 'rxjs';
import { switchMap, mergeAll, toArray } from 'rxjs/operators';
import { SsoConfigurationService } from '../sso-configuration.service';
export class TabsFactory {
    constructor(router, ssoConfigurationService) {
        this.router = router;
        this.ssoConfigurationService = ssoConfigurationService;
    }
    get() {
        if (!this.router.url.match(/auth-configuration/g)) {
            return of([]);
        }
        const basicSettingsTab$ = of({
            path: 'auth-configuration/basic_settings',
            label: gettext('Basic settings'),
            icon: 'unlock-alt',
            priority: 1100,
            orientation: 'horizontal'
        });
        const ssoTab$ = this.ssoConfigurationService.showSsoConfiguration$().pipe(switchMap(showSsoConfiguration => showSsoConfiguration
            ? of({
                path: 'auth-configuration/single_sign-on',
                label: gettext('Single sign-on'),
                icon: 'sign-in',
                priority: 1050,
                orientation: 'horizontal'
            })
            : EMPTY));
        return merge([basicSettingsTab$, ssoTab$]).pipe(mergeAll(), toArray());
    }
}
TabsFactory.decorators = [
    { type: Injectable }
];
TabsFactory.ctorParameters = () => [
    { type: Router },
    { type: SsoConfigurationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYXV0aC1jb25maWd1cmF0aW9uL2ZhY3Rvcmllcy90YWJzLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBbUIsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRCxPQUFPLEVBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHdkUsTUFBTSxPQUFPLFdBQVc7SUFDdEIsWUFBbUIsTUFBYyxFQUFVLHVCQUFnRDtRQUF4RSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUFHLENBQUM7SUFFL0YsR0FBRztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUNqRCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNmO1FBRUQsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7WUFDM0IsSUFBSSxFQUFFLG1DQUFtQztZQUN6QyxLQUFLLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1lBQ2hDLElBQUksRUFBRSxZQUFZO1lBQ2xCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsV0FBVyxFQUFFLFlBQVk7U0FDbkIsQ0FBQyxDQUFDO1FBQ1YsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUN2RSxTQUFTLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUMvQixvQkFBb0I7WUFDbEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDRCxJQUFJLEVBQUUsbUNBQW1DO2dCQUN6QyxLQUFLLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO2dCQUNoQyxJQUFJLEVBQUUsU0FBUztnQkFDZixRQUFRLEVBQUUsSUFBSTtnQkFDZCxXQUFXLEVBQUUsWUFBWTthQUNuQixDQUFDO1lBQ1gsQ0FBQyxDQUFDLEtBQUssQ0FDVixDQUNGLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQzs7O1lBOUJGLFVBQVU7OztZQU5GLE1BQU07WUFJTix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZ2V0dGV4dCwgVGFiLCBUYWJGYWN0b3J5IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgRU1QVFksIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIG1lcmdlQWxsLCB0b0FycmF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3NvQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zc28tY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRhYnNGYWN0b3J5IGltcGxlbWVudHMgVGFiRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByb3V0ZXI6IFJvdXRlciwgcHJpdmF0ZSBzc29Db25maWd1cmF0aW9uU2VydmljZTogU3NvQ29uZmlndXJhdGlvblNlcnZpY2UpIHt9XG5cbiAgZ2V0KCk6IE9ic2VydmFibGU8VGFiW10+IHtcbiAgICBpZiAoIXRoaXMucm91dGVyLnVybC5tYXRjaCgvYXV0aC1jb25maWd1cmF0aW9uL2cpKSB7XG4gICAgICByZXR1cm4gb2YoW10pO1xuICAgIH1cblxuICAgIGNvbnN0IGJhc2ljU2V0dGluZ3NUYWIkID0gb2Yoe1xuICAgICAgcGF0aDogJ2F1dGgtY29uZmlndXJhdGlvbi9iYXNpY19zZXR0aW5ncycsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnQmFzaWMgc2V0dGluZ3MnKSxcbiAgICAgIGljb246ICd1bmxvY2stYWx0JyxcbiAgICAgIHByaW9yaXR5OiAxMTAwLFxuICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xuICAgIH0gYXMgVGFiKTtcbiAgICBjb25zdCBzc29UYWIkID0gdGhpcy5zc29Db25maWd1cmF0aW9uU2VydmljZS5zaG93U3NvQ29uZmlndXJhdGlvbiQoKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKHNob3dTc29Db25maWd1cmF0aW9uID0+XG4gICAgICAgIHNob3dTc29Db25maWd1cmF0aW9uXG4gICAgICAgICAgPyBvZih7XG4gICAgICAgICAgICAgIHBhdGg6ICdhdXRoLWNvbmZpZ3VyYXRpb24vc2luZ2xlX3NpZ24tb24nLFxuICAgICAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU2luZ2xlIHNpZ24tb24nKSxcbiAgICAgICAgICAgICAgaWNvbjogJ3NpZ24taW4nLFxuICAgICAgICAgICAgICBwcmlvcml0eTogMTA1MCxcbiAgICAgICAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xuICAgICAgICAgICAgfSBhcyBUYWIpXG4gICAgICAgICAgOiBFTVBUWVxuICAgICAgKVxuICAgICk7XG4gICAgcmV0dXJuIG1lcmdlKFtiYXNpY1NldHRpbmdzVGFiJCwgc3NvVGFiJF0pLnBpcGUobWVyZ2VBbGwoKSwgdG9BcnJheSgpKTtcbiAgfVxufVxuIl19