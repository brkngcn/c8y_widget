import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { of, EMPTY, merge } from 'rxjs';
import { switchMap, mergeAll, toArray } from 'rxjs/operators';
import { SsoConfigurationService } from '../sso-configuration.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '../sso-configuration.service';
export class TabsFactory {
    constructor(router, ssoConfigurationService) {
        this.router = router;
        this.ssoConfigurationService = ssoConfigurationService;
    }
    get() {
        if (!this.router.url.match(/auth-configuration/g)) {
            return of([]);
        }
        const basicSettingsTab$ = of({
            path: 'auth-configuration/basic_settings',
            label: gettext('Basic settings'),
            icon: 'unlock-alt',
            priority: 1100,
            orientation: 'horizontal'
        });
        const ssoTab$ = this.ssoConfigurationService.showSsoConfiguration$().pipe(switchMap(showSsoConfiguration => showSsoConfiguration
            ? of({
                path: 'auth-configuration/single_sign-on',
                label: gettext('Single sign-on'),
                icon: 'sign-in',
                priority: 1050,
                orientation: 'horizontal'
            })
            : EMPTY));
        return merge([basicSettingsTab$, ssoTab$]).pipe(mergeAll(), toArray());
    }
}
TabsFactory.ɵfac = function TabsFactory_Factory(t) { return new (t || TabsFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.SsoConfigurationService)); };
TabsFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TabsFactory, factory: TabsFactory.ɵfac });
TabsFactory.ctorParameters = () => [
    { type: Router },
    { type: SsoConfigurationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.SsoConfigurationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9hdXRoLWNvbmZpZ3VyYXRpb24vZmFjdG9yaWVzL3RhYnMuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFtQixNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQUd2RSxNQUFNLE9BQU8sV0FBVztBQUFHLElBQ3pCLFlBQW1CLE1BQWMsRUFBVSx1QkFBZ0Q7QUFBSSxRQUE1RSxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFBUyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0FBQUMsSUFBRSxDQUFDO0FBQ2pHLElBQ0UsR0FBRztBQUFLLFFBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0FBQ3ZELFlBQU0sT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEIsU0FBSztBQUNMLFFBQ0ksTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFDakMsWUFBTSxJQUFJLEVBQUUsbUNBQW1DO0FBQy9DLFlBQU0sS0FBSyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUN0QyxZQUFNLElBQUksRUFBRSxZQUFZO0FBQ3hCLFlBQU0sUUFBUSxFQUFFLElBQUk7QUFDcEIsWUFBTSxXQUFXLEVBQUUsWUFBWTtBQUMvQixTQUFZLENBQUMsQ0FBQztBQUNkLFFBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUN2RSxTQUFTLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUMvQixvQkFBb0I7QUFDNUIsWUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2YsZ0JBQWMsSUFBSSxFQUFFLG1DQUFtQztBQUN2RCxnQkFBYyxLQUFLLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBQzlDLGdCQUFjLElBQUksRUFBRSxTQUFTO0FBQzdCLGdCQUFjLFFBQVEsRUFBRSxJQUFJO0FBQzVCLGdCQUFjLFdBQVcsRUFBRSxZQUFZO0FBQ3ZDLGFBQW9CLENBQUM7QUFDckIsWUFBVSxDQUFDLENBQUMsS0FBSyxDQUNWLENBQ0YsQ0FBQztBQUNOLFFBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzNFLElBQUUsQ0FBQztBQUNIO3VDQS9CQyxVQUFVOytHQUNUO0FBQUM7QUFBcUMsWUFQL0IsTUFBTTtBQUFJLFlBSVYsdUJBQXVCO0FBQUc7OztpSEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGdldHRleHQsIFRhYiwgVGFiRmFjdG9yeSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIEVNUFRZLCBtZXJnZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBtZXJnZUFsbCwgdG9BcnJheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFNzb0NvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc3NvLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUYWJzRmFjdG9yeSBpbXBsZW1lbnRzIFRhYkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgc3NvQ29uZmlndXJhdGlvblNlcnZpY2U6IFNzb0NvbmZpZ3VyYXRpb25TZXJ2aWNlKSB7fVxuXG4gIGdldCgpOiBPYnNlcnZhYmxlPFRhYltdPiB7XG4gICAgaWYgKCF0aGlzLnJvdXRlci51cmwubWF0Y2goL2F1dGgtY29uZmlndXJhdGlvbi9nKSkge1xuICAgICAgcmV0dXJuIG9mKFtdKTtcbiAgICB9XG5cbiAgICBjb25zdCBiYXNpY1NldHRpbmdzVGFiJCA9IG9mKHtcbiAgICAgIHBhdGg6ICdhdXRoLWNvbmZpZ3VyYXRpb24vYmFzaWNfc2V0dGluZ3MnLFxuICAgICAgbGFiZWw6IGdldHRleHQoJ0Jhc2ljIHNldHRpbmdzJyksXG4gICAgICBpY29uOiAndW5sb2NrLWFsdCcsXG4gICAgICBwcmlvcml0eTogMTEwMCxcbiAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCdcbiAgICB9IGFzIFRhYik7XG4gICAgY29uc3Qgc3NvVGFiJCA9IHRoaXMuc3NvQ29uZmlndXJhdGlvblNlcnZpY2Uuc2hvd1Nzb0NvbmZpZ3VyYXRpb24kKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcChzaG93U3NvQ29uZmlndXJhdGlvbiA9PlxuICAgICAgICBzaG93U3NvQ29uZmlndXJhdGlvblxuICAgICAgICAgID8gb2Yoe1xuICAgICAgICAgICAgICBwYXRoOiAnYXV0aC1jb25maWd1cmF0aW9uL3NpbmdsZV9zaWduLW9uJyxcbiAgICAgICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1NpbmdsZSBzaWduLW9uJyksXG4gICAgICAgICAgICAgIGljb246ICdzaWduLWluJyxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6IDEwNTAsXG4gICAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCdcbiAgICAgICAgICAgIH0gYXMgVGFiKVxuICAgICAgICAgIDogRU1QVFlcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybiBtZXJnZShbYmFzaWNTZXR0aW5nc1RhYiQsIHNzb1RhYiRdKS5waXBlKG1lcmdlQWxsKCksIHRvQXJyYXkoKSk7XG4gIH1cbn1cbiJdfQ==