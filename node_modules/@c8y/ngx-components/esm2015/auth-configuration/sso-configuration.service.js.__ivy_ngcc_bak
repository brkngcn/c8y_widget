import { Injectable } from '@angular/core';
import { TenantLoginOptionsService, TenantLoginOptionType } from '@c8y/client';
import { defer, of } from 'rxjs';
import { catchError, map, publishReplay, refCount, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/tenant-login-options/TenantLoginOptionsService";
export class SsoConfigurationService {
    constructor(loginOptionsService) {
        this.loginOptionsService = loginOptionsService;
        this.isSsoConfigurationAvailable$ = defer(() => this.loginOptionsService.detail(TenantLoginOptionType.OAUTH2)).pipe(map(res => true), catchError(({ res }) => (res.status === 403 /* Forbidden */ ? of(false) : of(true))), 
        // Both guard and tab.factory ask for OAUTH2 - this observable will be send one request in 1 second.
        publishReplay(1, 1000), refCount(), take(1));
    }
    showSsoConfiguration$() {
        return this.isSsoConfigurationAvailable$;
    }
}
SsoConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SsoConfigurationService_Factory() { return new SsoConfigurationService(i0.ɵɵinject(i1.TenantLoginOptionsService)); }, token: SsoConfigurationService, providedIn: "root" });
SsoConfigurationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SsoConfigurationService.ctorParameters = () => [
    { type: TenantLoginOptionsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NvLWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2F1dGgtY29uZmlndXJhdGlvbi9zc28tY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHlCQUF5QixFQUFFLHFCQUFxQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9FLE9BQU8sRUFBYyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQU1oRixNQUFNLE9BQU8sdUJBQXVCO0lBWWxDLFlBQW9CLG1CQUE4QztRQUE5Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTJCO1FBWDFELGlDQUE0QixHQUF3QixLQUFLLENBQUMsR0FBRyxFQUFFLENBQ3JFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQzlELENBQUMsSUFBSSxDQUNKLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNoQixVQUFVLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLHdCQUE2QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLG9HQUFvRztRQUNwRyxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUN0QixRQUFRLEVBQUUsRUFDVixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1IsQ0FBQztJQUVtRSxDQUFDO0lBRXRFLHFCQUFxQjtRQUNuQixPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQztJQUMzQyxDQUFDOzs7O1lBbkJGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBUFEseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGVuYW50TG9naW5PcHRpb25zU2VydmljZSwgVGVuYW50TG9naW5PcHRpb25UeXBlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZGVmZXIsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHB1Ymxpc2hSZXBsYXksIHJlZkNvdW50LCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHR0cFN0YXR1c0NvZGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNzb0NvbmZpZ3VyYXRpb25TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBpc1Nzb0NvbmZpZ3VyYXRpb25BdmFpbGFibGUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gZGVmZXIoKCkgPT5cbiAgICB0aGlzLmxvZ2luT3B0aW9uc1NlcnZpY2UuZGV0YWlsKFRlbmFudExvZ2luT3B0aW9uVHlwZS5PQVVUSDIpXG4gICkucGlwZShcbiAgICBtYXAocmVzID0+IHRydWUpLFxuICAgIGNhdGNoRXJyb3IoKHsgcmVzIH0pID0+IChyZXMuc3RhdHVzID09PSBIdHRwU3RhdHVzQ29kZS5Gb3JiaWRkZW4gPyBvZihmYWxzZSkgOiBvZih0cnVlKSkpLFxuICAgIC8vIEJvdGggZ3VhcmQgYW5kIHRhYi5mYWN0b3J5IGFzayBmb3IgT0FVVEgyIC0gdGhpcyBvYnNlcnZhYmxlIHdpbGwgYmUgc2VuZCBvbmUgcmVxdWVzdCBpbiAxIHNlY29uZC5cbiAgICBwdWJsaXNoUmVwbGF5KDEsIDEwMDApLFxuICAgIHJlZkNvdW50KCksXG4gICAgdGFrZSgxKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9naW5PcHRpb25zU2VydmljZTogVGVuYW50TG9naW5PcHRpb25zU2VydmljZSkge31cblxuICBzaG93U3NvQ29uZmlndXJhdGlvbiQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuaXNTc29Db25maWd1cmF0aW9uQXZhaWxhYmxlJDtcbiAgfVxufVxuIl19