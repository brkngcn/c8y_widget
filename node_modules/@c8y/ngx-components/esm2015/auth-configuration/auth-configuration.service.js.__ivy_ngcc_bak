import { Injectable } from '@angular/core';
import { ApplicationService, GrantType, SystemOptionsService, TenantLoginOptionsService, TenantLoginOptionType, TenantOptionsService, UserManagementSource, TenantService } from '@c8y/client';
import { catchError, map } from 'rxjs/operators';
import { forkJoin, from, of } from 'rxjs';
import { defaults, omit } from 'lodash-es';
import { TenantUiService } from '@c8y/ngx-components';
import { TypedOption } from './typed-option';
export class AuthConfigurationService {
    constructor(tenantLoginOptionsService, tenantOptionsService, systemOptionsService, applicationService, tenantUiService, tenantService) {
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.tenantOptionsService = tenantOptionsService;
        this.systemOptionsService = systemOptionsService;
        this.applicationService = applicationService;
        this.tenantUiService = tenantUiService;
        this.tenantService = tenantService;
        this.systemOptionsWithDefaultValue = [
            new TypedOption('password', 'limit.validity', 'number', null),
            new TypedOption('password', 'enforce.strength', 'boolean', false),
            new TypedOption('two-factor-authentication', 'tenant-scope-settings.enabled', 'boolean', false),
            new TypedOption('two-factor-authentication', 'enabled', 'boolean', false),
            // note: this definition is inconsistent with backend and is overridden in getSystemOptions$
            new TypedOption('two-factor-authentication', 'enforced', 'boolean', false),
            new TypedOption('two-factor-authentication', 'enforced.group', 'string', '')
        ];
        this.tenantOptionsWithDefaultValue = [
            new TypedOption('password', 'limit.validity', 'number', 0),
            new TypedOption('password', 'strength.validity', 'boolean', false),
            new TypedOption('two-factor-authentication', 'enabled', 'boolean', false),
            new TypedOption('two-factor-authentication', 'token.validity', 'number', 43200),
            new TypedOption('two-factor-authentication', 'pin.validity', 'number', 30),
            new TypedOption('two-factor-authentication', 'enforced', 'boolean', false),
            new TypedOption('two-factor-authentication', 'strategy', 'string', 'SMS'),
            new TypedOption('oauth.internal', 'basic-token.lifespan.seconds', 'number', null)
        ];
    }
    getAuthConfiguration$() {
        const loginOptions$ = this.getLoginOptions$();
        return forkJoin({
            loginOptions: loginOptions$,
            tenantOptions: this.getTenantOptions$(),
            systemOptions: this.getSystemOptions$(),
            smsGatewayAvailable: this.isSmsApplicationAvailable$(),
            preferredLoginOptionType: this.getPreferredLoginOptionType$(loginOptions$)
        });
    }
    save(newAuthConfiguration, previousAuthConfiguration) {
        const tenantOptions = this.prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration);
        const updateTenantOptions = tenantOptions.map(tenantOption => this.tenantOptionsService.create(tenantOption));
        const basicLoginOption = this.prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration);
        const oauthInternalLoginOption = this.prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration);
        return Promise.all([
            this.saveOrUpdateLoginOption(basicLoginOption),
            this.saveOrUpdateLoginOption(oauthInternalLoginOption),
            updateTenantOptions
        ]);
    }
    saveOrUpdateLoginOption(loginOption) {
        return loginOption.id
            ? this.tenantLoginOptionsService.update(loginOption)
            : this.tenantLoginOptionsService.create(loginOption);
    }
    prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        let basicLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.BASIC);
        basicLoginOption.authenticationRestrictions =
            this.authenticationRestriction(newAuthConfiguration);
        basicLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.BASIC);
        basicLoginOption = this.removeReadOnlyFields(basicLoginOption);
        return basicLoginOption;
    }
    prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        let oauthInternalLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        const sessionConfiguration = this.sessionConfiguration(newAuthConfiguration);
        sessionConfiguration !== null
            ? (oauthInternalLoginOption.sessionConfiguration = sessionConfiguration)
            : delete oauthInternalLoginOption.sessionConfiguration;
        oauthInternalLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        oauthInternalLoginOption = this.removeReadOnlyFields(oauthInternalLoginOption);
        return oauthInternalLoginOption;
    }
    originalLoginOptionWithDefaults(previousAuthConfiguration, loginOptionType) {
        return defaults({}, previousAuthConfiguration.loginOptions.find(loginOption => loginOption.type === loginOptionType), this.getDefaultLoginOption(loginOptionType));
    }
    sessionConfiguration(authConfiguration) {
        return authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
            .sessionConfiguration;
    }
    authenticationRestriction(authConfiguration) {
        const authenticationRestrictions = authConfiguration.loginOptions.find(this.tenantUiService.isBasic).authenticationRestrictions;
        return {
            trustedUserAgents: authenticationRestrictions.trustedUserAgents.filter(value => value),
            forbiddenUserAgents: authenticationRestrictions.forbiddenUserAgents.filter(value => value),
            forbiddenClients: authenticationRestrictions.forbiddenClients.filter(value => value)
        };
    }
    visibleOnLoginPage(authConfiguration, loginOptionType) {
        return authConfiguration.preferredLoginOptionType === loginOptionType;
    }
    removeReadOnlyFields(tenantLoginOption) {
        return omit(tenantLoginOption, [
            'self',
            'strengthValidity',
            'tfaStrategy',
            'greenMinLength',
            'enforceStrength',
            'strengthValidity',
            '_type'
        ]);
    }
    prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration) {
        const getValue = (authCfg, tenantOption) => authCfg.tenantOptions[tenantOption.category][tenantOption.key];
        const hasChanged = tenantOption => getValue(newAuthConfiguration, tenantOption) !==
            getValue(previousAuthConfiguration, tenantOption);
        return this.tenantOptionsWithDefaultValue
            .filter(tenantOption => getValue(newAuthConfiguration, tenantOption) !== null)
            .filter(tenantOption => hasChanged(tenantOption))
            .map(tenantOption => ({
            category: tenantOption.category,
            key: tenantOption.key,
            value: getValue(newAuthConfiguration, tenantOption).toString()
        }));
    }
    getLoginOptions$() {
        return from(this.tenantLoginOptionsService.listForCurrentTenant()).pipe(map(res => res.data), map(loginOptions => this.addDefaultLoginOptions(loginOptions)));
    }
    getPreferredLoginOptionType$(loginOptions$) {
        return loginOptions$.pipe(map(loginOptions => {
            return this.tenantUiService.getPreferredLoginOption(loginOptions).type;
        }));
    }
    addDefaultLoginOptions(loginOptions) {
        if (!loginOptions.find(this.tenantUiService.isBasic)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.BASIC));
        }
        if (!loginOptions.find(this.tenantUiService.isOauthInternal)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.OAUTH2_INTERNAL));
        }
        return loginOptions;
    }
    getTenantOptions$() {
        return forkJoin(this.tenantOptionsWithDefaultValue.map((option) => from(this.tenantOptionsService.detail(option)).pipe(map(res => {
            option.apply(res.data);
            return option;
        }), catchError(() => of(option))))).pipe(map(options => this.getOptionsObject(options)));
    }
    getSystemOptions$() {
        return forkJoin(this.systemOptionsWithDefaultValue.map((option) => {
            const fixedOption = this.fixTfaEnforcedSystemOption(option);
            if (fixedOption) {
                return fixedOption;
            }
            return from(this.systemOptionsService.detail(option)).pipe(map(res => {
                option.apply(res.data);
                return option;
            }), catchError(() => of(option)));
        })).pipe(map(options => this.getOptionsObject(options)));
    }
    /**
     * Returns an observable with fixed `two-factor-authentication.enforced` system option or null.
     * This method fixes problem with inconsistent value. System option `two-factor-authentication.enforced` is list of tenants when UI using boolean value.
     * This part will be removed after implementing new endpoint in MTM-50490.
     */
    fixTfaEnforcedSystemOption(option) {
        if (option.category === 'two-factor-authentication' && option.key === 'enforced') {
            return from(this.tenantService.getTfaSettings(this.tenantUiService.currentTenant)).pipe(map(tfaSettings => {
                option.value = tfaSettings.enforcedOnSystemLevel.toString();
                return option;
            }));
        }
        return null;
    }
    isSmsApplicationAvailable$() {
        return from(this.applicationService.isAvailable('sms-gateway')).pipe(map(res => res.data));
    }
    getOptionsObject(options) {
        return options.reduce((optionsObject, option) => {
            optionsObject[option.category] = optionsObject[option.category] || {};
            optionsObject[option.category][option.key] = option.getValue();
            return optionsObject;
        }, {});
    }
    getDefaultLoginOption(tenantLoginOptionType) {
        return {
            userManagementSource: UserManagementSource.INTERNAL,
            grantType: GrantType.PASSWORD,
            providerName: 'Cumulocity',
            visibleOnLoginPage: false,
            type: tenantLoginOptionType
        };
    }
}
AuthConfigurationService.decorators = [
    { type: Injectable }
];
AuthConfigurationService.ctorParameters = () => [
    { type: TenantLoginOptionsService },
    { type: TenantOptionsService },
    { type: SystemOptionsService },
    { type: ApplicationService },
    { type: TenantUiService },
    { type: TenantService }
];
//# sourceMappingURL=data:application/json;base64,