import { Component } from '@angular/core';
import { DeviceGridService, CustomDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { gettext } from '@c8y/ngx-components';
import { find, cloneDeep } from 'lodash-es';
export class DeviceGridExampleComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.examples = [
            this.getExampleWithStandardColumns(),
            this.getExampleWithStandardColumnsAndSavedFilteringSorting(),
            this.getExampleWithCustomColumnAndPredefinedFiltering()
        ];
    }
    getExampleWithStandardColumns() {
        const columns = this.deviceGridService.getDefaultColumns();
        return {
            label: 'Standard columns',
            columns
        };
    }
    getExampleWithStandardColumnsAndSavedFilteringSorting() {
        const columns = this.deviceGridService.getDefaultColumns();
        const nameColumn = find(columns, { name: 'name' });
        nameColumn.externalFilterQuery = {
            names: ['*Temp*']
        };
        nameColumn.sortOrder = 'desc';
        return {
            label: 'Standard columns with saved filtering/sorting',
            columns
        };
    }
    getExampleWithCustomColumnAndPredefinedFiltering() {
        const columns = this.deviceGridService.getDefaultColumns();
        const typeColumn = new CustomDeviceGridColumn();
        typeColumn.name = 'type';
        typeColumn.path = 'type';
        typeColumn.header = gettext('Type');
        typeColumn.externalFilterQuery = {
            equals: ['c8y_MQTTDevice']
        };
        columns.splice(2, 0, typeColumn);
        return {
            label: 'Standard columns with custom one with predefined filtering',
            columns
        };
    }
    onExampleSelect(example) {
        this.columnsInput = example.columns;
    }
    setColumnsOutput(output) {
        const result = cloneDeep(output);
        removeCircular(result);
        this.columnsOutput = result;
        function removeCircular(data) {
            const seen = new WeakSet();
            const recurse = obj => {
                if (obj) {
                    seen.add(obj);
                    for (const [k, v] of Object.entries(obj)) {
                        if (typeof v !== 'object') {
                            continue;
                        }
                        if (seen.has(v)) {
                            delete obj[k];
                        }
                        else {
                            recurse(v);
                        }
                    }
                }
            };
            recurse(data);
        }
    }
}
DeviceGridExampleComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-grid-example',
                template: "<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [title]=\"'Select devices for bulk operation'\"\n    [columns]=\"columnsInput\"\n    [actionControls]=\"[]\"\n    (onColumnsChange)=\"setColumnsOutput($event)\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card \">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">Input</h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"selectedExample\"\n            (ngModelChange)=\"onExampleSelect($event)\"\n          >\n            <option *ngFor=\"let example of examples\" [ngValue]=\"example\">{{\n              example.label\n            }}</option></select\n          ><span></span>\n        </div>\n        <pre\n          >{{ columnsInput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <span>\n          <h4 class=\"card-title\">Output</h4>\n        </span>\n      </div>\n      <div class=\"card-block\">\n        <pre\n          >{{ deviceQueryStringOutput | json }}\n        </pre>\n        <pre\n          >{{ columnsOutput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
DeviceGridExampleComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQtZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZpY2UtZ3JpZC1leGFtcGxlL2RldmljZS1ncmlkLWV4YW1wbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUNMLGlCQUFpQixFQUVqQixzQkFBc0IsRUFDdkIsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFNNUMsTUFBTSxPQUFPLDBCQUEwQjtJQU9yQyxZQUFzQixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUN4RCxJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ2QsSUFBSSxDQUFDLDZCQUE2QixFQUFFO1lBQ3BDLElBQUksQ0FBQyxxREFBcUQsRUFBRTtZQUM1RCxJQUFJLENBQUMsZ0RBQWdELEVBQUU7U0FDeEQsQ0FBQztJQUNKLENBQUM7SUFFRCw2QkFBNkI7UUFDM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDM0QsT0FBTztZQUNMLEtBQUssRUFBRSxrQkFBa0I7WUFDekIsT0FBTztTQUNSLENBQUM7SUFDSixDQUFDO0lBRUQscURBQXFEO1FBQ25ELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNuRCxVQUFVLENBQUMsbUJBQW1CLEdBQUc7WUFDL0IsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDO1NBQ2xCLENBQUM7UUFDRixVQUFVLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUM5QixPQUFPO1lBQ0wsS0FBSyxFQUFFLCtDQUErQztZQUN0RCxPQUFPO1NBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxnREFBZ0Q7UUFDOUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDM0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxzQkFBc0IsRUFBRSxDQUFDO1FBQ2hELFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLFVBQVUsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLFVBQVUsQ0FBQyxtQkFBbUIsR0FBRztZQUMvQixNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztTQUMzQixDQUFDO1FBQ0YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU87WUFDTCxLQUFLLEVBQUUsNERBQTREO1lBQ25FLE9BQU87U0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGVBQWUsQ0FBQyxPQUFPO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsTUFBMEI7UUFDekMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztRQUU1QixTQUFTLGNBQWMsQ0FBQyxJQUFJO1lBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7WUFDM0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksR0FBRyxFQUFFO29CQUNQLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2QsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQ3hDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFOzRCQUN6QixTQUFTO3lCQUNWO3dCQUNELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTs0QkFDZixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt5QkFDZjs2QkFBTTs0QkFDTCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7eUJBQ1o7cUJBQ0Y7aUJBQ0Y7WUFDSCxDQUFDLENBQUM7WUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEIsQ0FBQztJQUNILENBQUM7OztZQXBGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsbzdDQUFtRDthQUNwRDs7O1lBWEMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEZXZpY2VHcmlkU2VydmljZSxcbiAgRGV2aWNlR3JpZENvbHVtbixcbiAgQ3VzdG9tRGV2aWNlR3JpZENvbHVtblxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgZmluZCwgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWRldmljZS1ncmlkLWV4YW1wbGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGV2aWNlLWdyaWQtZXhhbXBsZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlR3JpZEV4YW1wbGVDb21wb25lbnQge1xuICBleGFtcGxlczogQXJyYXk8eyBsYWJlbDogc3RyaW5nOyBjb2x1bW5zOiBEZXZpY2VHcmlkQ29sdW1uW10gfT47XG4gIHNlbGVjdGVkRXhhbXBsZTtcbiAgY29sdW1uc0lucHV0OiBEZXZpY2VHcmlkQ29sdW1uW107XG4gIGNvbHVtbnNPdXRwdXQ6IERldmljZUdyaWRDb2x1bW5bXTtcbiAgZGV2aWNlUXVlcnlTdHJpbmdPdXRwdXQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGV2aWNlR3JpZFNlcnZpY2U6IERldmljZUdyaWRTZXJ2aWNlKSB7XG4gICAgdGhpcy5leGFtcGxlcyA9IFtcbiAgICAgIHRoaXMuZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnMoKSxcbiAgICAgIHRoaXMuZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnNBbmRTYXZlZEZpbHRlcmluZ1NvcnRpbmcoKSxcbiAgICAgIHRoaXMuZ2V0RXhhbXBsZVdpdGhDdXN0b21Db2x1bW5BbmRQcmVkZWZpbmVkRmlsdGVyaW5nKClcbiAgICBdO1xuICB9XG5cbiAgZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnMoKSB7XG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGVmYXVsdENvbHVtbnMoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6ICdTdGFuZGFyZCBjb2x1bW5zJyxcbiAgICAgIGNvbHVtbnNcbiAgICB9O1xuICB9XG5cbiAgZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnNBbmRTYXZlZEZpbHRlcmluZ1NvcnRpbmcoKSB7XG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGVmYXVsdENvbHVtbnMoKTtcbiAgICBjb25zdCBuYW1lQ29sdW1uID0gZmluZChjb2x1bW5zLCB7IG5hbWU6ICduYW1lJyB9KTtcbiAgICBuYW1lQ29sdW1uLmV4dGVybmFsRmlsdGVyUXVlcnkgPSB7XG4gICAgICBuYW1lczogWycqVGVtcConXVxuICAgIH07XG4gICAgbmFtZUNvbHVtbi5zb3J0T3JkZXIgPSAnZGVzYyc7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnU3RhbmRhcmQgY29sdW1ucyB3aXRoIHNhdmVkIGZpbHRlcmluZy9zb3J0aW5nJyxcbiAgICAgIGNvbHVtbnNcbiAgICB9O1xuICB9XG5cbiAgZ2V0RXhhbXBsZVdpdGhDdXN0b21Db2x1bW5BbmRQcmVkZWZpbmVkRmlsdGVyaW5nKCkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmRldmljZUdyaWRTZXJ2aWNlLmdldERlZmF1bHRDb2x1bW5zKCk7XG4gICAgY29uc3QgdHlwZUNvbHVtbiA9IG5ldyBDdXN0b21EZXZpY2VHcmlkQ29sdW1uKCk7XG4gICAgdHlwZUNvbHVtbi5uYW1lID0gJ3R5cGUnO1xuICAgIHR5cGVDb2x1bW4ucGF0aCA9ICd0eXBlJztcbiAgICB0eXBlQ29sdW1uLmhlYWRlciA9IGdldHRleHQoJ1R5cGUnKTtcbiAgICB0eXBlQ29sdW1uLmV4dGVybmFsRmlsdGVyUXVlcnkgPSB7XG4gICAgICBlcXVhbHM6IFsnYzh5X01RVFREZXZpY2UnXVxuICAgIH07XG4gICAgY29sdW1ucy5zcGxpY2UoMiwgMCwgdHlwZUNvbHVtbik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnU3RhbmRhcmQgY29sdW1ucyB3aXRoIGN1c3RvbSBvbmUgd2l0aCBwcmVkZWZpbmVkIGZpbHRlcmluZycsXG4gICAgICBjb2x1bW5zXG4gICAgfTtcbiAgfVxuXG4gIG9uRXhhbXBsZVNlbGVjdChleGFtcGxlKSB7XG4gICAgdGhpcy5jb2x1bW5zSW5wdXQgPSBleGFtcGxlLmNvbHVtbnM7XG4gIH1cblxuICBzZXRDb2x1bW5zT3V0cHV0KG91dHB1dDogRGV2aWNlR3JpZENvbHVtbltdKTogdm9pZCB7XG4gICAgY29uc3QgcmVzdWx0ID0gY2xvbmVEZWVwKG91dHB1dCk7XG4gICAgcmVtb3ZlQ2lyY3VsYXIocmVzdWx0KTtcbiAgICB0aGlzLmNvbHVtbnNPdXRwdXQgPSByZXN1bHQ7XG5cbiAgICBmdW5jdGlvbiByZW1vdmVDaXJjdWxhcihkYXRhKSB7XG4gICAgICBjb25zdCBzZWVuID0gbmV3IFdlYWtTZXQoKTtcbiAgICAgIGNvbnN0IHJlY3Vyc2UgPSBvYmogPT4ge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgc2Vlbi5hZGQob2JqKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKHYpKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBvYmpba107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWN1cnNlKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJlY3Vyc2UoZGF0YSk7XG4gICAgfVxuICB9XG59XG4iXX0=