import { __rest } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService, QueriesUtil, UserService } from '@c8y/client';
import { AlertService, BreadcrumbService, ModalService, AppStateService, OptionsService } from '@c8y/ngx-components';
import { ApiService } from '@c8y/ngx-components/api';
import { empty } from 'rxjs';
import { filter, mergeMap } from 'rxjs/operators';
import { AssetNode } from './asset-node';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { DynamicGroupNode } from './dynamic-group-node';
import { GroupFragment } from './group-fragment.model';
import { DeviceGroupService } from './group.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i2 from "@c8y/ngx-components/api";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@c8y/client/lib/src/user/UserService";
import * as i5 from "./asset-node-config.model";
import * as i6 from "./group.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components/api';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from './group.service';
export class AssetNodeService {
    constructor(inventory, apiService, modal, alert, breadcrumbService, user, appState, optionsService, moduleConfig, deviceGroupService) {
        this.inventory = inventory;
        this.apiService = apiService;
        this.modal = modal;
        this.alert = alert;
        this.breadcrumbService = breadcrumbService;
        this.user = user;
        this.appState = appState;
        this.optionsService = optionsService;
        this.moduleConfig = moduleConfig;
        this.deviceGroupService = deviceGroupService;
        this.firstUrl = true;
        this.PAGE_SIZE = 20;
        this.moduleConfig = Object.assign({ rootNodePriority: 2000 }, (moduleConfig || {}));
        this.queriesUtil = new QueriesUtil();
    }
    icon(mo, open) {
        return this.deviceGroupService.icon(mo, open);
    }
    isGroup(mo) {
        return this.deviceGroupService.isGroup(mo);
    }
    isDynamicGroup(mo) {
        return this.deviceGroupService.isDynamicGroup(mo);
    }
    isDataBroker(mo) {
        return this.deviceGroupService.isDataBroker(mo);
    }
    isDataBrokerActive(mo) {
        return this.deviceGroupService.isDataBrokerActive(mo);
    }
    isAsset(mo) {
        return this.deviceGroupService.isAsset(mo);
    }
    isAnyGroup(mo) {
        return this.deviceGroupService.isAnyGroup(mo);
    }
    isDevice(mo) {
        return this.deviceGroupService.isDevice(mo);
    }
    createRootNode(config = {}) {
        this.rootNode = this.createAssetNode(Object.assign(Object.assign({ root: true }, config), { priority: this.moduleConfig.rootNodePriority, featureId: 'groups' }));
        return this.rootNode;
    }
    createDynamicGroupNode(config) {
        return new DynamicGroupNode(this, config);
    }
    createAssetNode(config) {
        return new AssetNode(this, config);
    }
    createChildNode(managedObject, config) {
        const { type } = managedObject;
        config.mo = managedObject;
        if (type === GroupFragment.dynamicGroupType) {
            return this.createDynamicGroupNode(config);
        }
        return this.createAssetNode(config);
    }
    getRootNodes(customFilter) {
        const defaultFilter = {
            pageSize: this.PAGE_SIZE,
            withChildren: false,
            onlyRoots: !this.optionsService.disableOnlyRootsQuery,
            query: this.queriesUtil.buildQuery(this.navRootQueryFilter())
        };
        const groupFilter = Object.assign(Object.assign({}, defaultFilter), customFilter);
        // due to BE performance limitations we do not allow filtering and sorting for a user without inventory roles
        if (!this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_READ')) {
            delete groupFilter.query;
            Object.assign(groupFilter, {
                fragmentType: GroupFragment.groupFragmentType,
                onlyRoots: true
            });
        }
        return this.inventory.list(this.createFilter(groupFilter));
    }
    getAllInventories(customFilter) {
        const defaultFilter = {
            pageSize: this.PAGE_SIZE,
            withChildren: false
        };
        const groupFilter = Object.assign(Object.assign({}, defaultFilter), customFilter);
        return this.inventory.list(this.createFilter(groupFilter));
    }
    getGroupItems(moId, extraFilter = {}, withChildren = false, filterQuery = '') {
        const queryFilter = {
            withChildren,
            pageSize: this.PAGE_SIZE,
            query: this.groupQueryFilter(moId, filterQuery)
        };
        return this.inventory.childAssetsList(moId, Object.assign(Object.assign({}, queryFilter), extraFilter));
    }
    getUnassignedDevices(withChildren = false, filterQuery = '') {
        const queryFilter = {
            fragmentType: 'c8y_IsDevice',
            onlyRoots: true,
            withChildren,
            pageSize: this.PAGE_SIZE,
            q: this.getUnassignedDevicesQueryStr(filterQuery)
        };
        return this.inventory.list(this.createFilter(queryFilter));
    }
    getDynamicGroupItems(groupQuery, filterObj = {}) {
        const { query } = filterObj, queryParams = __rest(filterObj, ["query"]);
        const orderByQuery = query;
        const queryFilter = Object.assign({ q: this.buildCombinedQuery(groupQuery, orderByQuery) }, queryParams);
        return this.inventory.list(this.createFilter(queryFilter));
    }
    getDeviceChildren(moId, extraFilter = {}, filterQuery = '', withChildren = false) {
        const queryFilter = {
            withChildren,
            pageSize: this.PAGE_SIZE,
            query: this.groupQueryFilter(moId, filterQuery)
        };
        return this.inventory.childDevicesList(moId, Object.assign(Object.assign({}, queryFilter), extraFilter));
    }
    getUnassignedDevicesQueryStr(filterQuery) {
        const hasGroupId = filterQuery.includes('bygroupid');
        // Fetch all unassigned devices.
        const defaultQueryStr = '$orderby=name';
        // filterQuery is a custom query to fetch unassigned devices filtered by name.
        return hasGroupId || !filterQuery ? defaultQueryStr : filterQuery;
    }
    groupQueryFilter(moId, filterQuery) {
        if (!filterQuery) {
            return `$filter=(bygroupid(${moId}))$orderby=name`;
        }
        return filterQuery;
    }
    navRootQueryFilter() {
        const navRootFilter = this.rootQueryFilter();
        navRootFilter.__orderby = [{ name: 1 }];
        return navRootFilter;
    }
    rootQueryFilter() {
        const { moduleConfig } = this;
        const rootFilter = this.optionsService.disableOnlyRootsQuery
            ? {
                __filter: {
                    type: GroupFragment.groupType
                },
                __orderby: []
            }
            : {
                __filter: {
                    __has: GroupFragment.groupFragmentType
                },
                __orderby: []
            };
        if (moduleConfig.smartGroups) {
            const queryFilter = {
                __filter: {
                    __and: [
                        {
                            type: GroupFragment.dynamicGroupType
                        },
                        {
                            __has: GroupFragment.dynamicGroupFragment
                        },
                        { __not: { __has: `${GroupFragment.dynamicGroupFragment}.invisible` } }
                    ]
                }
            };
            this.queriesUtil.addOrFilter(rootFilter, queryFilter);
        }
        return rootFilter;
    }
    onUpdate({ mo, root }) {
        if (mo.id) {
            return this.apiService
                .hookResponse(({ url, method }) => ['PUT', 'DELETE', 'POST'].includes(method) &&
                RegExp(`((inventory/managedObjects)|(service/smartgroup/smartgroups))/${mo.id}`).test(url))
                .pipe(filter(() => !this.draggedData), mergeMap(this.apiService.resolveData), filter(response => !response.data.c8y_Dashboard));
        }
        else if (root) {
            return this.apiService
                .hookResponse(({ url, method }) => RegExp('((inventory/managedObjects)|(service/smartgroup/smartgroups))/?$').test(url) &&
                method === 'POST')
                .pipe(mergeMap(this.apiService.resolveData), filter(response => this.isNewManagedObjectRoot(response)));
        }
        else {
            return empty();
        }
    }
    isNewManagedObjectRoot(response = {}) {
        const { data } = response;
        let isRootAsset = false;
        if (typeof data === 'object') {
            isRootAsset = !!data[GroupFragment.groupFragmentType];
            if (!isRootAsset && this.moduleConfig.smartGroups) {
                isRootAsset = !!data[GroupFragment.dynamicGroupFragment];
            }
        }
        return isRootAsset;
    }
    /**
     * Check if it is possible to drop a node after dragging.
     * @param dropOnRoot Is the drop performed on the root node
     */
    canDropNode(dropOnRoot) {
        return (!dropOnRoot || this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_ADMIN'));
    }
    /**
     * There could be multiple breadcrumbs for devices,
     * so we set a preferred one on click on a device.
     * @param parents The parent nodes of the device to select the prefered one.
     */
    preferBreadcrumb(parents) {
        if (parents.length === 1) {
            this.breadcrumbService.selectPreferredByPath(parents[0].path);
        }
    }
    createFilter(extraParams = {}) {
        const params = {
            currentPage: 1,
            withTotalPages: true,
            pageSize: 10
        };
        return Object.assign(Object.assign({}, params), extraParams);
    }
    buildCombinedQuery(query, orderByQuery) {
        let combinedQuery;
        if (query && orderByQuery) {
            const filterQuery = this.queriesUtil.buildQuery({
                __useFilterQueryString: query
            });
            combinedQuery = `${filterQuery} ${orderByQuery}`;
        }
        else {
            combinedQuery = query || orderByQuery || '';
        }
        return combinedQuery;
    }
}
AssetNodeService.ɵfac = function AssetNodeService_Factory(t) { return new (t || AssetNodeService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.ApiService), ɵngcc0.ɵɵinject(ɵngcc3.ModalService), ɵngcc0.ɵɵinject(ɵngcc3.AlertService), ɵngcc0.ɵɵinject(ɵngcc3.BreadcrumbService), ɵngcc0.ɵɵinject(ɵngcc1.UserService), ɵngcc0.ɵɵinject(ɵngcc3.AppStateService), ɵngcc0.ɵɵinject(ɵngcc3.OptionsService), ɵngcc0.ɵɵinject(ASSET_NAVIGATOR_CONFIG, 8), ɵngcc0.ɵɵinject(ɵngcc4.DeviceGroupService)); };
AssetNodeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetNodeService_Factory() { return new AssetNodeService(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i3.ModalService), i0.ɵɵinject(i3.AlertService), i0.ɵɵinject(i3.BreadcrumbService), i0.ɵɵinject(i4.UserService), i0.ɵɵinject(i3.AppStateService), i0.ɵɵinject(i3.OptionsService), i0.ɵɵinject(i5.ASSET_NAVIGATOR_CONFIG, 8), i0.ɵɵinject(i6.DeviceGroupService)); }, token: AssetNodeService, providedIn: "root" });
AssetNodeService.ctorParameters = () => [
    { type: InventoryService },
    { type: ApiService },
    { type: ModalService },
    { type: AlertService },
    { type: BreadcrumbService },
    { type: UserService },
    { type: AppStateService },
    { type: OptionsService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] },
    { type: DeviceGroupService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetNodeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc2.ApiService }, { type: ɵngcc3.ModalService }, { type: ɵngcc3.AlertService }, { type: ɵngcc3.BreadcrumbService }, { type: ɵngcc1.UserService }, { type: ɵngcc3.AppStateService }, { type: ɵngcc3.OptionsService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ASSET_NAVIGATOR_CONFIG]
            }] }, { type: ɵngcc4.DeviceGroupService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,