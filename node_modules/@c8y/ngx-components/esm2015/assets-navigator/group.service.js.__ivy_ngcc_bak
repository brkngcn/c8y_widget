import { Injectable } from '@angular/core';
import { GroupFragment } from './group-fragment.model';
import { AssetTypesService } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export const MO_TYPES = [
    'asset',
    'dynamicGroup',
    'brokerSource',
    'brokerSourceInactive',
    'group',
    'other'
];
export class DeviceGroupService {
    constructor(assetTypesService) {
        this.assetTypesService = assetTypesService;
        this.icons = {
            brokerSourceInactive: {
                icon: 'c8y-group-remote-inactive',
                iconOpen: 'c8y-group-remote-inactive'
            },
            brokerSource: {
                icon: 'c8y-group-remote',
                iconOpen: 'c8y-group-remote-open'
            },
            group: {
                icon: 'c8y-group',
                iconOpen: 'c8y-group-open'
            },
            dynamicGroup: {
                icon: 'c8y-group-smart',
                iconOpen: 'c8y-group-smart-open'
            },
            other: {
                icon: 'exchange',
                iconClass: 'statusUnknown'
            }
        };
        this.dataBrokerSourceFragmentInactive = `_${GroupFragment.dataBrokerSourceFragment}`;
    }
    /**
     * Finds an icon based on the contents of a managed object.
     * It takes into account factors such as type, and specific fragemnts.
     * @param mo Managed object to be checked.
     * @param open Determines whether the method should return an alternative icon showing the open state.
     * @returns Returns an icon.
     */
    icon(mo, open = false) {
        let icon;
        const genericMoType = this.determineMoType(mo);
        if (genericMoType === 'asset') {
            icon = this.getAssetCustomIcon(mo.type, open);
            return icon;
        }
        const typeIcons = this.getDefaultIcon(genericMoType);
        return (open && typeIcons.iconOpen) || typeIcons.icon;
    }
    /**
     * Checks whether a given managed object is a group.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a group.
     */
    isGroup(mo) {
        return !!mo[GroupFragment.groupFragmentType] || mo.type === GroupFragment.groupType;
    }
    /**
     * Checks whether a given managed object is a dynamic group.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a dynamic group.
     */
    isDynamicGroup(mo) {
        return !!mo[GroupFragment.dynamicGroupFragment] || mo.type === GroupFragment.dynamicGroupType;
    }
    /**
     * Checks whether a given managed object is a data broker.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a data broker.
     */
    isDataBroker(mo) {
        return (!!mo[GroupFragment.dataBrokerSourceFragment] || !!mo[this.dataBrokerSourceFragmentInactive]);
    }
    /**
     * Checks whether a given managed object is a data broker active.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a data broker active.
     */
    isDataBrokerActive(mo) {
        return (!!mo[GroupFragment.dataBrokerSourceFragment] && !mo[this.dataBrokerSourceFragmentInactive]);
    }
    /**
     * Checks whether a given managed object is an asset.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is an asset.
     */
    isAsset(mo) {
        return !!mo.c8y_IsAsset;
    }
    /**
     * Checks whether the object belongs to any type of group.
     * Types of groups: group, dynamic group, data broker, data broker active.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object belongs to the group category.
     */
    isAnyGroup(mo) {
        return (this.isGroup(mo) ||
            this.isDynamicGroup(mo) ||
            this.isDataBroker(mo) ||
            this.isDataBrokerActive(mo));
    }
    /**
     * Checks whether a given managed object is a device.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a device.
     */
    isDevice(mo) {
        return !!mo.c8y_IsDevice;
    }
    getAssetCustomIcon(moType, open = false) {
        return this.assetTypesService.getIcon(moType, open);
    }
    getDefaultIcon(moType) {
        return this.icons[moType];
    }
    determineMoType(mo) {
        if (this.isAsset(mo)) {
            return 'asset';
        }
        if (this.isDynamicGroup(mo)) {
            return 'dynamicGroup';
        }
        if (this.isDataBrokerActive(mo)) {
            return 'brokerSource';
        }
        if (this.isDataBroker(mo)) {
            return 'brokerSourceInactive';
        }
        if (this.isGroup(mo)) {
            return 'group';
        }
        return 'other';
    }
}
DeviceGroupService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DeviceGroupService_Factory() { return new DeviceGroupService(i0.ɵɵinject(i1.AssetTypesService)); }, token: DeviceGroupService, providedIn: "root" });
DeviceGroupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DeviceGroupService.ctorParameters = () => [
    { type: AssetTypesService }
];
//# sourceMappingURL=data:application/json;base64,