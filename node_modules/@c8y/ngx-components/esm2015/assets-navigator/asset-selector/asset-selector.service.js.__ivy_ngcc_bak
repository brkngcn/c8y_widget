import { Injectable } from '@angular/core';
import { AssetNodeService } from '../asset-node.service';
import { isArray, isNumber, isObject, isString } from 'lodash';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i2 from "@c8y/ngx-components/api";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@c8y/client/lib/src/user/UserService";
import * as i5 from "../asset-node-config.model";
import * as i6 from "../group.service";
export class AssetSelectorService extends AssetNodeService {
    /**
     * Simplifies the object model based on the selected mode.
     * @param obj The selected asset.
     * @param mode The mode which will decide what type of model will be returned.
     */
    normalizeValue(obj, modelMode) {
        return this.simplifyModel(this.normalizeModelValue(obj), modelMode);
    }
    simplifyModel(model, mode) {
        const mapModel = modelObj => {
            const { id, name, c8y_DeviceQueryString } = modelObj;
            return Object.assign({ id, name }, (c8y_DeviceQueryString ? { c8y_DeviceQueryString } : {}));
        };
        if (mode === 'full') {
            return model;
        }
        if (!isArray(model)) {
            return mapModel(model);
        }
        return model.map(mapModel);
    }
    normalizeModelValue(value) {
        if (isNumber(value) || isString(value)) {
            return [{ id: value }];
        }
        if (isArray(value)) {
            return value;
        }
        if (isObject(value)) {
            return [value];
        }
        return [];
    }
}
AssetSelectorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetSelectorService_Factory() { return new AssetSelectorService(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i3.ModalService), i0.ɵɵinject(i3.AlertService), i0.ɵɵinject(i3.BreadcrumbService), i0.ɵɵinject(i4.UserService), i0.ɵɵinject(i3.AppStateService), i0.ɵɵinject(i3.OptionsService), i0.ɵɵinject(i5.ASSET_NAVIGATOR_CONFIG, 8), i0.ɵɵinject(i6.DeviceGroupService)); }, token: AssetSelectorService, providedIn: "root" });
AssetSelectorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtc2VsZWN0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Fzc2V0cy1uYXZpZ2F0b3IvYXNzZXQtc2VsZWN0b3IvYXNzZXQtc2VsZWN0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7Ozs7Ozs7O0FBSy9ELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxnQkFBZ0I7SUFDeEQ7Ozs7T0FJRztJQUNILGNBQWMsQ0FDWixHQUE0QixFQUM1QixTQUE0QjtRQUU1QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxhQUFhLENBQ1gsS0FBOEMsRUFDOUMsSUFBdUI7UUFFdkIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsR0FBRyxRQUF1QixDQUFDO1lBQ3BFLHVCQUFTLEVBQUUsRUFBRSxJQUFJLElBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRztRQUNuRixDQUFDLENBQUM7UUFFRixJQUFJLElBQUksS0FBSyxNQUFNLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkIsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEI7UUFDRCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVPLG1CQUFtQixDQUFDLEtBQVU7UUFDcEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7OztZQTdDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJSWRlbnRpZmllZCwgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBc3NldE5vZGVTZXJ2aWNlIH0gZnJvbSAnLi4vYXNzZXQtbm9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IGlzQXJyYXksIGlzTnVtYmVyLCBpc09iamVjdCwgaXNTdHJpbmcgfSBmcm9tICdsb2Rhc2gnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBc3NldFNlbGVjdG9yU2VydmljZSBleHRlbmRzIEFzc2V0Tm9kZVNlcnZpY2Uge1xuICAvKipcbiAgICogU2ltcGxpZmllcyB0aGUgb2JqZWN0IG1vZGVsIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBtb2RlLlxuICAgKiBAcGFyYW0gb2JqIFRoZSBzZWxlY3RlZCBhc3NldC5cbiAgICogQHBhcmFtIG1vZGUgVGhlIG1vZGUgd2hpY2ggd2lsbCBkZWNpZGUgd2hhdCB0eXBlIG9mIG1vZGVsIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqL1xuICBub3JtYWxpemVWYWx1ZShcbiAgICBvYmo6IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+LFxuICAgIG1vZGVsTW9kZTogJ3NpbXBsZScgfCAnZnVsbCdcbiAgKTogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4gfCBJSWRlbnRpZmllZCB7XG4gICAgcmV0dXJuIHRoaXMuc2ltcGxpZnlNb2RlbCh0aGlzLm5vcm1hbGl6ZU1vZGVsVmFsdWUob2JqKSwgbW9kZWxNb2RlKTtcbiAgfVxuXG4gIHNpbXBsaWZ5TW9kZWwoXG4gICAgbW9kZWw6IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+IHwgSUlkZW50aWZpZWRbXSxcbiAgICBtb2RlOiAnc2ltcGxlJyB8ICdmdWxsJ1xuICApOiBQYXJ0aWFsPElNYW5hZ2VkT2JqZWN0PiB8IElJZGVudGlmaWVkIHtcbiAgICBjb25zdCBtYXBNb2RlbCA9IG1vZGVsT2JqID0+IHtcbiAgICAgIGNvbnN0IHsgaWQsIG5hbWUsIGM4eV9EZXZpY2VRdWVyeVN0cmluZyB9ID0gbW9kZWxPYmogYXMgSUlkZW50aWZpZWQ7XG4gICAgICByZXR1cm4geyBpZCwgbmFtZSwgLi4uKGM4eV9EZXZpY2VRdWVyeVN0cmluZyA/IHsgYzh5X0RldmljZVF1ZXJ5U3RyaW5nIH0gOiB7fSkgfTtcbiAgICB9O1xuXG4gICAgaWYgKG1vZGUgPT09ICdmdWxsJykge1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXkobW9kZWwpKSB7XG4gICAgICByZXR1cm4gbWFwTW9kZWwobW9kZWwpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWwubWFwKG1hcE1vZGVsKTtcbiAgfVxuXG4gIHByaXZhdGUgbm9ybWFsaXplTW9kZWxWYWx1ZSh2YWx1ZTogYW55KTogSUlkZW50aWZpZWRbXSB7XG4gICAgaWYgKGlzTnVtYmVyKHZhbHVlKSB8fCBpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBbeyBpZDogdmFsdWUgfV07XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4iXX0=