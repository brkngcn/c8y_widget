import { __awaiter } from "tslib";
import { Component, Input, ChangeDetectorRef } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { GroupNode } from './group-node';
import { Subject } from 'rxjs';
import { takeUntil, filter } from 'rxjs/operators';
import { AssetSelectorComponent } from './asset-selector.component';
import { Action } from '../action.enum';
export class AssetSelectorNodeComponent {
    /**
     * @ignore only di
     */
    constructor(translateService, cd, parentAssetSelector) {
        this.translateService = translateService;
        this.cd = cd;
        this.parentAssetSelector = parentAssetSelector;
        /**
         * All preselected items.
         */
        this.preselected = [];
        /**
         * Should the path be shown.
         */
        this.showPath = false;
        /**
         * Can the user select multiple assets.
         */
        this.multi = false;
        /**
         * The current path to the node.
         */
        this.view = 'tree';
        /**
         * All currently selected assets.
         */
        this.selectedItems = [];
        /**
         * @ignore
         */
        this.level = 0;
        /**
         * @ignore
         */
        this.unsubscribe$ = new Subject();
        /** sets the `btn-pending` class in the load more button */
        this.isLoading = false;
    }
    /**
     * @ignore
     */
    get expandTitle() {
        return !this.node.open ? gettext('Expand') : gettext('Collapse');
    }
    /**
     * @ignore
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.breadcrumb = this.node.label;
            this.setupBreadcrumbsAndLevel(this.node);
            if (this.node instanceof GroupNode) {
                this.node.hookEvents();
            }
            // open on startup
            if (this.node.root) {
                this.click();
            }
            // used for loading and to trigger change detection when the node is no longer loading.
            if (this.node.events) {
                this.node.events
                    .pipe(takeUntil(this.unsubscribe$), filter((a) => a === Action.LOADING_DONE))
                    .subscribe(() => {
                    this.parentAssetSelector.onLoad.emit({
                        loading: false,
                        filterText: this.parentAssetSelector.filterText
                    });
                    this.cd.markForCheck();
                });
            }
        });
    }
    /**
     * Opens a node.
     */
    click() {
        this.node.open = !this.node.open;
        this.node.click({ open: this.node.open });
    }
    setupBreadcrumbsAndLevel(node) {
        if (node.parents && node.parents.length) {
            const parent = node.parents[0];
            this.breadcrumb =
                this.translateService.instant(parent.label) +
                    ' > ' +
                    this.translateService.instant(this.breadcrumb);
            this.level++;
            this.setupBreadcrumbsAndLevel(parent);
        }
    }
    /**
     * Selects the node and emits a change on the parent component.
     * @param node The node to select.
     */
    selected(node) {
        if (node.mo) {
            this.updateSelection(node.mo);
            return;
        }
        this.click();
    }
    /**
     * Handles clicks on a item in Miller View.
     * @param node The node that was clicked.
     */
    millerViewClick(node) {
        node.breadcrumb = this.breadcrumb;
        const shouldHandleDefault = this.parentAssetSelector.handleNextMillerViewColumn(node, this.index);
        if (shouldHandleDefault) {
            this.selected(node);
        }
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    }
    isSelected() {
        if (!this.node.mo) {
            return false;
        }
        return this.parentAssetSelector.getIndexOfSelected(this.preselected, this.node.mo) > -1;
    }
    isActive() {
        var _a;
        if (this.active && this.node.mo) {
            return ((_a = this.active.mo) === null || _a === void 0 ? void 0 : _a.id) === this.node.mo.id;
        }
        return false;
    }
    isGroupSelected() {
        if (this.selectedItems.some(selectedNode => { var _a; return selectedNode.id === ((_a = this.node.mo) === null || _a === void 0 ? void 0 : _a.id); })) {
            return true;
        }
        return false;
    }
    updateSelection(selectedMo) {
        if (!this.multi) {
            this.parentAssetSelector.deselectAll(selectedMo);
            return;
        }
        if (this.isSelected()) {
            this.parentAssetSelector.deselect(selectedMo);
            return;
        }
        this.parentAssetSelector.select(selectedMo);
    }
}
AssetSelectorNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-asset-selector-node',
                template: "<!-- Hierarchy tree -->\n<div\n  *ngIf=\"view === 'tree'\"\n  class=\"c8y-asset-selector__item\"\n  [attr.role]=\"view === 'tree' ? 'tree' : 'list'\"\n  [ngClass]=\"{\n    'c8y-asset-selector__item--more': node?.icon === 'plus',\n    'c8y-asset-selector__item--start': level === 0\n  }\"\n  [ngStyle]=\"{\n    'margin-left': level > 1 ? 16 + 'px' : '0'\n  }\"\n>\n  <div\n    *ngIf=\"node && !node.root && !node.hidden\"\n    class=\"c8y-asset-selector__node\"\n    [attr.role]=\"view === 'tree' ? 'treeitem' : 'listitem'\"\n    [ngClass]=\"{ 'c8y-asset-selector__node--open': node?.open }\"\n    title=\"{{ breadcrumb | translate }}\"\n  >\n    <div class=\"d-flex a-i-center p-t-4 p-b-4 m-r-8\" *ngIf=\"node.toString() !== 'LoadMoreNode'\">\n      <label [ngClass]=\"{ 'c8y-checkbox': multi, 'c8y-radio': !multi }\">\n        <input\n          [attr.aria-label]=\"node.label | translate\"\n          [type]=\"multi ? 'checkbox' : 'radio'\"\n          (change)=\"selected(node)\"\n          [checked]=\"isSelected()\"\n          [disabled]=\"!node.groupsSelectable && node.isGroup()\"\n        />\n        <span></span>\n      </label>\n    </div>\n\n    <!-- group button -->\n    <button\n      *ngIf=\"node.isGroup() || node.hasChildDevices()\"\n      class=\"c8y-asset-selector__btn text-truncate\"\n      (click)=\"click()\"\n      [attr.aria-expanded]=\"!node.open\"\n    >\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon === 'c8y-group-smart'\"\n        [title]=\"'Smart group' | translate\"\n        class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n      ></i>\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon !== 'c8y-group-smart'\"\n        [title]=\"'Group' | translate\"\n        class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n      ></i>\n      <span title=\"{{ breadcrumb }}\">\n        {{ node.label | translate }}\n        <!-- use just for search results to display the path -->\n        <p *ngIf=\"showPath\" class=\"text-truncate\">\n          <small class=\"text-muted\" title=\"{{ breadcrumb }}\">\n            <em>{{ breadcrumb }}</em>\n          </small>\n        </p>\n        <!-- up to here -->\n      </span>\n    </button>\n    <!-- not a group button -->\n    <button\n      *ngIf=\"!node.isGroup() && !node.hasChildDevices()\"\n      class=\"flex-grow\"\n      [ngClass]=\"{\n        'btn btn-default btn-sm m-b-8 d-flex j-c-center': node.icon === 'plus',\n        'c8y-asset-selector__btn text-truncate': node.icon != 'plus'\n      }\"\n      (click)=\"selected(node)\"\n      type=\"button\"\n      title=\"{{ breadcrumb }}\"\n    >\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon === 'c8y-group-smart'\"\n        [title]=\"'Smart group' | translate\"\n        class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n      ></i>\n      <i\n        [c8yIcon]=\"node.icon\"\n        *ngIf=\"node.icon !== 'c8y-group-smart'\"\n        [title]=\"'Group' | translate\"\n        [ngClass]=\"{ 'c8y-icon-duocolor text-16 ': node.icon != 'plus' }\"\n        class=\"c8y-icon m-r-4\"\n      ></i>\n      <span title=\"{{ breadcrumb }}\">\n        {{ node.label | translate }}\n        <!-- use just for search results to display the path -->\n        <p *ngIf=\"showPath\" class=\"text-truncate text-muted small\">\n          <em>{{ breadcrumb }}</em>\n        </p>\n        <!-- up to here -->\n      </span>\n    </button>\n    <!-- expand button (only for groups) -->\n    <div *ngIf=\"node.isGroup() || node.hasChildDevices()\">\n      <button\n        [title]=\"expandTitle\"\n        class=\"collapse-btn btn\"\n        (click)=\"click()\"\n        [attr.aria-expanded]=\"node.open\"\n      >\n        <i c8yIcon=\"angle-down\"></i>\n      </button>\n    </div>\n  </div>\n  <div\n    *ngIf=\"node.countChildren()\"\n    class=\"collapse\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n    [attr.role]=\"'group'\"\n  >\n    <c8y-asset-selector-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      [preselected]=\"preselected || []\"\n      [multi]=\"multi\"\n      [active]=\"active\"\n      [attr.role]=\"view === 'tree' ? 'treeitem' : 'listitem'\"\n    ></c8y-asset-selector-node>\n  </div>\n</div>\n\n<!-- Miller columns -->\n<div *ngIf=\"view === 'miller'\">\n  <div\n    *ngIf=\"node && !node.root && !node.hidden && node !== parentAssetSelector.rootNode\"\n    class=\"miller-column__item bg-inherit\"\n    [ngClass]=\"{\n      active: isActive(),\n      'miller-column__item--more': node.toString() === 'LoadMoreNode'\n    }\"\n    title=\"{{ breadcrumb | translate }}\"\n  >\n    <div\n      class=\"m-l-4 m-r-4 miller-column__item__checkbox\"\n      *ngIf=\"node.toString() !== 'LoadMoreNode'\"\n    >\n      <label [ngClass]=\"{ 'c8y-radio': !multi, 'c8y-checkbox': multi }\">\n        <input\n          [attr.aria-label]=\"node.label | translate\"\n          [type]=\"multi ? 'checkbox' : 'radio'\"\n          (change)=\"selected(node)\"\n          [checked]=\"isGroupSelected()\"\n          [disabled]=\"!node.groupsSelectable && node.isGroup()\"\n        />\n        <span></span>\n      </label>\n    </div>\n\n    <button\n      [ngClass]=\"{\n        'btn btn-default btn-sm d-flex flex-grow j-c-center m-l-16 m-r-16 m-b-8':\n          node.toString() === 'LoadMoreNode',\n        'miller-column__item__btn': node.toString() !== 'LoadMoreNode',\n        'btn-pending': node.loading && node.toString() === 'LoadMoreNode'\n      }\"\n      title=\"{{ breadcrumb | translate }}\"\n      (click)=\"millerViewClick(node)\"\n      type=\"button\"\n    >\n      <i\n        [c8yIcon]=\"node.icon\"\n        class=\"c8y-icon m-r-4\"\n        [ngClass]=\"{ 'c8y-icon-duocolor text-16': node.toString() !== 'LoadMoreNode' }\"\n      ></i>\n      <div class=\"text-left text-truncate\">\n        <p title=\"{{ node.label | translate }}\" class=\"text-truncate\">\n          {{ node.label | translate }}\n        </p>\n        <!-- use just for search results to display the path -->\n        <small *ngIf=\"showPath\" class=\"text-muted text-truncate\" title=\"{{ breadcrumb }}\">\n          <em>{{ breadcrumb }}</em>\n        </small>\n        <!-- up to here -->\n      </div>\n      <span *ngIf=\"node.isGroup() || node.hasChildDevices()\" class=\"p-l-4 m-l-auto\">\n        <i c8yIcon=\"angle-right\"></i>\n      </span>\n    </button>\n  </div>\n\n  <div *ngIf=\"node\" [ngClass]=\"{ hidden: node !== parentAssetSelector.rootNode }\" role=\"list\">\n    <c8y-asset-selector-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      [preselected]=\"preselected || []\"\n      [multi]=\"multi\"\n      [view]=\"view\"\n      [index]=\"index\"\n      [selectedItems]=\"selectedItems\"\n      [active]=\"active\"\n      role=\"listitem\"\n    ></c8y-asset-selector-node>\n  </div>\n</div>\n"
            },] }
];
AssetSelectorNodeComponent.ctorParameters = () => [
    { type: TranslateService },
    { type: ChangeDetectorRef },
    { type: AssetSelectorComponent }
];
AssetSelectorNodeComponent.propDecorators = {
    node: [{ type: Input }],
    preselected: [{ type: Input }],
    showPath: [{ type: Input }],
    multi: [{ type: Input }],
    view: [{ type: Input }],
    index: [{ type: Input }],
    active: [{ type: Input }],
    selectedItems: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,