import { AssetNode } from '../asset-node';
import { GroupFragment } from '../group-fragment.model';
export class GroupNode extends AssetNode {
    /**
     * Creates a new node which shows only groups.
     *
     * @param service The service to use.
     * @param config  The default configuration of the node.
     * @param groupsOnly Set this true, if only groups should be shown.
     * @param selectable Set this true, if it is selectable.
     */
    constructor(service, config = {}) {
        super(service, config);
        this.service = service;
        /**
         * Set this true, if only groups should be shown.
         */
        this.groupsOnly = false;
        /**
         * Set this true, if it groups are also selectable.
         */
        this.groupsSelectable = false;
        /**
         * Devices with children can be selected to show their child devices.
         */
        this.showChildDevices = false;
        /**
         * Group node children (subentries).
         */
        this.children = [];
        this.groupsOnly = config.groupsOnly || false;
        this.groupsSelectable = config.groupsSelectable || false;
        this.showChildDevices = config.showChildDevices || false;
    }
    /**
     * Adds the MO as a child node.
     * @param mo ManagedObject
     */
    addManagedObject(mo) {
        const { childAdditions } = this.mo;
        if (!this.isChildAddition(childAdditions, mo)) {
            this.add(this.service.createChildNode({
                mo,
                groupsOnly: this.groupsOnly,
                groupsSelectable: this.groupsSelectable,
                showChildDevices: this.showChildDevices
            }));
        }
    }
    /**
     * Counts the number of children for the current node (with the exception of the UnassignedDevicesNode).
     */
    countChildren() {
        return this.children.filter(value => value.toString() !== 'UnassignedDevicesNode').length;
    }
    /**
     * Removes all child nodes except the UnassignedDevicesNode.
     */
    empty() {
        this.children = this.children.filter(value => value.toString() === 'UnassignedDevicesNode');
    }
    fetch() {
        const isRoot = this.root;
        const isDevice = this.mo.c8y_IsDevice;
        return isRoot
            ? this.service.getRootNodes()
            : isDevice
                ? this.service.getDeviceChildren(this.mo.id, {}, this.filterQuery$.value, this.showChildDevices)
                : this.service.getGroupItems(this.mo.id, this.groupsOnly
                    ? {
                        query: `$filter=(has(${GroupFragment.groupFragmentType}))`
                    }
                    : {}, this.showChildDevices, this.filterQuery$.value);
    }
    toString() {
        return GroupNode.NAME;
    }
    isGroup() {
        return this.mo && this.service.isGroup(this.mo);
    }
}
GroupNode.NAME = 'GroupNode';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtbm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Fzc2V0cy1uYXZpZ2F0b3IvYXNzZXQtc2VsZWN0b3IvZ3JvdXAtbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUd4RCxNQUFNLE9BQU8sU0FBVSxTQUFRLFNBQVM7SUFzQnRDOzs7Ozs7O09BT0c7SUFFSCxZQUFzQixPQUF5QixFQUFFLFNBQTBCLEVBQUU7UUFDM0UsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQURILFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBNUIvQzs7V0FFRztRQUNILGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFbkI7O1dBRUc7UUFDSCxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDekI7O1dBRUc7UUFDSCxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFFekI7O1dBRUc7UUFDSCxhQUFRLEdBQWdCLEVBQUUsQ0FBQztRQWF6QixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDO1FBQzdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDO1FBQ3pELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDO0lBQzNELENBQUM7SUFFRDs7O09BR0c7SUFDSCxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsR0FBRyxDQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO2dCQUMzQixFQUFFO2dCQUNGLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDM0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtnQkFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjthQUN4QyxDQUFDLENBQ0gsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssdUJBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDNUYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssdUJBQXVCLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUM7UUFDdEMsT0FBTyxNQUFNO1lBQ1gsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzdCLENBQUMsQ0FBQyxRQUFRO2dCQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFDVixFQUFFLEVBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FDdEI7Z0JBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFDVixJQUFJLENBQUMsVUFBVTtvQkFDYixDQUFDLENBQUM7d0JBQ0UsS0FBSyxFQUFFLGdCQUFnQixhQUFhLENBQUMsaUJBQWlCLElBQUk7cUJBQzNEO29CQUNILENBQUMsQ0FBQyxFQUFFLEVBQ04sSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FDeEIsQ0FBQztJQUNSLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDOztBQW5HTSxjQUFJLEdBQUcsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXBOb2RlU2VydmljZSB9IGZyb20gJy4vZ3JvdXAtbm9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFzc2V0Tm9kZSB9IGZyb20gJy4uL2Fzc2V0LW5vZGUnO1xuaW1wb3J0IHsgR3JvdXBGcmFnbWVudCB9IGZyb20gJy4uL2dyb3VwLWZyYWdtZW50Lm1vZGVsJztcbmltcG9ydCB7IEdyb3VwTm9kZUNvbmZpZyB9IGZyb20gJy4vYXNzZXQtc2VsZWN0b3IubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgR3JvdXBOb2RlIGV4dGVuZHMgQXNzZXROb2RlIHtcbiAgc3RhdGljIE5BTUUgPSAnR3JvdXBOb2RlJztcblxuICAvKipcbiAgICogU2V0IHRoaXMgdHJ1ZSwgaWYgb25seSBncm91cHMgc2hvdWxkIGJlIHNob3duLlxuICAgKi9cbiAgZ3JvdXBzT25seSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0cnVlLCBpZiBpdCBncm91cHMgYXJlIGFsc28gc2VsZWN0YWJsZS5cbiAgICovXG4gIGdyb3Vwc1NlbGVjdGFibGUgPSBmYWxzZTtcbiAgLyoqXG4gICAqIERldmljZXMgd2l0aCBjaGlsZHJlbiBjYW4gYmUgc2VsZWN0ZWQgdG8gc2hvdyB0aGVpciBjaGlsZCBkZXZpY2VzLlxuICAgKi9cbiAgc2hvd0NoaWxkRGV2aWNlcyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBHcm91cCBub2RlIGNoaWxkcmVuIChzdWJlbnRyaWVzKS5cbiAgICovXG4gIGNoaWxkcmVuOiBHcm91cE5vZGVbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG5vZGUgd2hpY2ggc2hvd3Mgb25seSBncm91cHMuXG4gICAqXG4gICAqIEBwYXJhbSBzZXJ2aWNlIFRoZSBzZXJ2aWNlIHRvIHVzZS5cbiAgICogQHBhcmFtIGNvbmZpZyAgVGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBvZiB0aGUgbm9kZS5cbiAgICogQHBhcmFtIGdyb3Vwc09ubHkgU2V0IHRoaXMgdHJ1ZSwgaWYgb25seSBncm91cHMgc2hvdWxkIGJlIHNob3duLlxuICAgKiBAcGFyYW0gc2VsZWN0YWJsZSBTZXQgdGhpcyB0cnVlLCBpZiBpdCBpcyBzZWxlY3RhYmxlLlxuICAgKi9cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2VydmljZTogR3JvdXBOb2RlU2VydmljZSwgY29uZmlnOiBHcm91cE5vZGVDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKHNlcnZpY2UsIGNvbmZpZyk7XG4gICAgdGhpcy5ncm91cHNPbmx5ID0gY29uZmlnLmdyb3Vwc09ubHkgfHwgZmFsc2U7XG4gICAgdGhpcy5ncm91cHNTZWxlY3RhYmxlID0gY29uZmlnLmdyb3Vwc1NlbGVjdGFibGUgfHwgZmFsc2U7XG4gICAgdGhpcy5zaG93Q2hpbGREZXZpY2VzID0gY29uZmlnLnNob3dDaGlsZERldmljZXMgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgTU8gYXMgYSBjaGlsZCBub2RlLlxuICAgKiBAcGFyYW0gbW8gTWFuYWdlZE9iamVjdFxuICAgKi9cbiAgYWRkTWFuYWdlZE9iamVjdChtbykge1xuICAgIGNvbnN0IHsgY2hpbGRBZGRpdGlvbnMgfSA9IHRoaXMubW87XG4gICAgaWYgKCF0aGlzLmlzQ2hpbGRBZGRpdGlvbihjaGlsZEFkZGl0aW9ucywgbW8pKSB7XG4gICAgICB0aGlzLmFkZChcbiAgICAgICAgdGhpcy5zZXJ2aWNlLmNyZWF0ZUNoaWxkTm9kZSh7XG4gICAgICAgICAgbW8sXG4gICAgICAgICAgZ3JvdXBzT25seTogdGhpcy5ncm91cHNPbmx5LFxuICAgICAgICAgIGdyb3Vwc1NlbGVjdGFibGU6IHRoaXMuZ3JvdXBzU2VsZWN0YWJsZSxcbiAgICAgICAgICBzaG93Q2hpbGREZXZpY2VzOiB0aGlzLnNob3dDaGlsZERldmljZXNcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGZvciB0aGUgY3VycmVudCBub2RlICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlIFVuYXNzaWduZWREZXZpY2VzTm9kZSkuXG4gICAqL1xuICBjb3VudENoaWxkcmVuKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uZmlsdGVyKHZhbHVlID0+IHZhbHVlLnRvU3RyaW5nKCkgIT09ICdVbmFzc2lnbmVkRGV2aWNlc05vZGUnKS5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgY2hpbGQgbm9kZXMgZXhjZXB0IHRoZSBVbmFzc2lnbmVkRGV2aWNlc05vZGUuXG4gICAqL1xuICBlbXB0eSgpIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5maWx0ZXIodmFsdWUgPT4gdmFsdWUudG9TdHJpbmcoKSA9PT0gJ1VuYXNzaWduZWREZXZpY2VzTm9kZScpO1xuICB9XG5cbiAgZmV0Y2goKSB7XG4gICAgY29uc3QgaXNSb290ID0gdGhpcy5yb290O1xuICAgIGNvbnN0IGlzRGV2aWNlID0gdGhpcy5tby5jOHlfSXNEZXZpY2U7XG4gICAgcmV0dXJuIGlzUm9vdFxuICAgICAgPyB0aGlzLnNlcnZpY2UuZ2V0Um9vdE5vZGVzKClcbiAgICAgIDogaXNEZXZpY2VcbiAgICAgID8gdGhpcy5zZXJ2aWNlLmdldERldmljZUNoaWxkcmVuKFxuICAgICAgICAgIHRoaXMubW8uaWQsXG4gICAgICAgICAge30sXG4gICAgICAgICAgdGhpcy5maWx0ZXJRdWVyeSQudmFsdWUsXG4gICAgICAgICAgdGhpcy5zaG93Q2hpbGREZXZpY2VzXG4gICAgICAgIClcbiAgICAgIDogdGhpcy5zZXJ2aWNlLmdldEdyb3VwSXRlbXMoXG4gICAgICAgICAgdGhpcy5tby5pZCxcbiAgICAgICAgICB0aGlzLmdyb3Vwc09ubHlcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBgJGZpbHRlcj0oaGFzKCR7R3JvdXBGcmFnbWVudC5ncm91cEZyYWdtZW50VHlwZX0pKWBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fSxcbiAgICAgICAgICB0aGlzLnNob3dDaGlsZERldmljZXMsXG4gICAgICAgICAgdGhpcy5maWx0ZXJRdWVyeSQudmFsdWVcbiAgICAgICAgKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBHcm91cE5vZGUuTkFNRTtcbiAgfVxuXG4gIGlzR3JvdXAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW8gJiYgdGhpcy5zZXJ2aWNlLmlzR3JvdXAodGhpcy5tbyk7XG4gIH1cbn1cbiJdfQ==