import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, forwardRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { InventoryService } from '@c8y/client';
import { GroupNodeService } from './group-node.service';
import { AssetSelectorService } from './asset-selector.service';
import { CONFIG_OPTIONS_DEFAULT } from './asset-selector.model';
import { UnassignedDevicesNode } from './unassigned-devices-node';
import { AssetSelectorBase } from './asset-selector-base';
import { Subject } from 'rxjs';
/**
 * Displays a hierarchical tree selector for assets.
 */
export class AssetSelectorComponent extends AssetSelectorBase {
    /**
     * @ignore only DI
     */
    constructor(groupNodeService, inventory, assetSelectorService, cd) {
        super(groupNodeService, inventory, assetSelectorService);
        this.groupNodeService = groupNodeService;
        this.inventory = inventory;
        this.assetSelectorService = assetSelectorService;
        this.cd = cd;
        /**
         * Config object containing all options for the asset selector.
         */
        this.config = {};
        /**
         * Used only for miller-view, displays the column level for the current node.
         * E.g if the index is one, this will be second column.
         */
        this.index = 0;
        /**
         * The asset to use as root.
         */
        this.asset = undefined;
        /**
         * The selected device.
         */
        this.selectedDevice = undefined;
        /**
         * An array of predefined nodes.
         */
        this.selected = [];
        /**
         * All currently selected assets.
         */
        this.selectedItems = [];
        this.container = 'body';
        /**
         * Emits if one item was selected (all currently selected nodes).
         */
        this.onSelected = new EventEmitter();
        /**
         * Used only for miller view. Emit the selected node and use it as a 'rootNode' for the new column.
         */
        this.onRowSelected = new EventEmitter();
        /**
         * Emits the current loading state of the node.
         */
        this.onLoad = new EventEmitter();
        /**
         * The current filter applied.
         */
        this.filterText = '';
        /**
         * Displays the global search at all times if the miller view is used
         * on root group level.
         */
        this.root = false;
        /**
         * @ignore
         */
        this.unsubscribe$ = new Subject();
    }
    /**
     * Checks when a node was selected, if a new column needs to be added.
     * @param node The node that was clicked.
     * @param index The current index of this node.
     * @returns True if the click was handled and a new column was added.
     */
    handleNextMillerViewColumn(node, index) {
        const nodeCopy = Object.create(node);
        const isSameAsRoot = this.rootNode === node;
        const isUnassignedDevicesNode = node.toString() === UnassignedDevicesNode.NAME;
        const isNewColumnNeeded = !isSameAsRoot && (node.isGroup() || isUnassignedDevicesNode || node.hasChildDevices());
        if (isNewColumnNeeded) {
            this.onRowSelected.emit({ nodeCopy, index });
            return false;
        }
        return true;
    }
    /**
     * @ignore
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.index === 0) {
                this.config = Object.assign(Object.assign({}, CONFIG_OPTIONS_DEFAULT), this.config);
            }
            const shouldResetNameFilter = this.rootNode && this.rootNode.mo && this.config.view === 'miller';
            if (shouldResetNameFilter) {
                this.applyFilter('');
            }
            const isOnlyAssetNodeDefined = this.asset;
            if (isOnlyAssetNodeDefined) {
                this.rootNode = yield this.createManagedObjectRootNode(this.asset);
            }
            const isAnyNodeDefined = !this.rootNode && (!this.asset || Object.keys(this.asset).length === 0);
            if (isAnyNodeDefined) {
                this.rootNode = this.createDefaultRootNode();
            }
            if (this.config.showUnassignedDevices &&
                (!this.asset || Object.keys(this.asset).length === 0) &&
                this.rootNode.root) {
                this.rootNode.add(new UnassignedDevicesNode(this.groupNodeService, {
                    showChildDevices: this.config.showChildDevices
                }));
            }
            this.root = this.rootNode.root;
        });
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes.asset &&
                changes.asset.currentValue &&
                Object.keys(changes.asset.currentValue).length !== 0) {
                this.rootNode = yield this.createManagedObjectRootNode(changes.asset.currentValue);
            }
        });
    }
    /**
     * Changes the current root to one level back.
     */
    back() {
        const index = this.index - 1;
        const nodeCopy = Object.create(this.rootNode.parents[0]);
        this.onRowSelected.emit({ nodeCopy, index });
    }
    /**
     * Clears the current filter.
     */
    clearFilters() {
        this.filterText = '';
        this.applyFilter('');
    }
    clearSelectedDevices() {
        this.selectedDevice = undefined;
        this.applyFilter('');
    }
    isGroupSelected() {
        if (this.selectedItems.some(selectedNode => { var _a; return selectedNode.id === ((_a = this.rootNode.mo) === null || _a === void 0 ? void 0 : _a.id); })) {
            return true;
        }
        return false;
    }
    groupNameFilter(nameFilter, moId, showUnassignedDevices) {
        if (nameFilter) {
            const filterByName = showUnassignedDevices
                ? {
                    __filter: {
                        name: nameFilter
                    },
                    __orderby: [{ name: 1 }]
                }
                : {
                    __filter: {
                        name: nameFilter,
                        __bygroupid: moId
                    }
                };
            return this.assetSelectorService.queriesUtil.buildQuery(filterByName);
        }
        const defaultFilter = {
            __filter: {
                __bygroupid: moId
            },
            __orderby: [{ name: 1 }]
        };
        return this.assetSelectorService.queriesUtil.buildQuery(defaultFilter);
    }
    /**
     * Applies a filter.
     * @param filter The filter to apply.
     */
    applyFilter(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            this.rootNode.filterQuery$.next(this.groupNameFilter(filter, this.rootNode.mo.id, this.isUnassignedDevicesNode() ? true : false));
            this.rootNode.refresh();
            this.onLoad.emit({
                loading: true,
                filterText: this.filterText,
                index: this.index,
                selectedDevice: this.selectedDevice
            });
            this.cd.detectChanges();
        });
    }
    /**
     * Check if the UnassignedDevice node is the rootNode.
     */
    isUnassignedDevicesNode() {
        return this.rootNode.toString() === UnassignedDevicesNode.NAME;
    }
    /**
     * Called when the user resets the search result.
     */
    onSearchResultReset(term) {
        if (term) {
            this.deselectAll();
            this.rootNode = this.createDefaultRootNode();
            if (this.config.showUnassignedDevices) {
                this.rootNode.add(new UnassignedDevicesNode(this.groupNodeService, {
                    showChildDevices: this.config.showChildDevices
                }));
            }
            if (this.config.view === 'miller') {
                this.onRowSelected.emit({ root: true });
            }
            this.rootNode.click({ open: true });
            if (this.config.view === 'tree') {
                this.rootNode.open = true;
            }
        }
    }
    /**
     * Called if the user clicks on a search result.
     */
    onSearchResultClick(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const canSelectNode = this.config.groupsSelectable || !this.groupNodeService.isGroup(mo);
            this.rootNode = yield this.createManagedObjectRootNode(mo);
            this.rootNode.click({ open: true });
            if (this.config.view === 'miller') {
                const nodeCopy = Object.create(this.rootNode);
                this.onRowSelected.emit({
                    nodeCopy,
                    index: 0,
                    selectedDevices: this.selectedDevice,
                    root: true
                });
            }
            this.deselectAll();
            if (canSelectNode) {
                this.select(this.rootNode.mo);
            }
        });
    }
}
AssetSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-asset-selector',
                template: "<div\n  class=\"p-b-8 bg-inherit\"\n  [ngClass]=\"{ 'p-l-16 p-absolute p-r-16': config.view === 'miller' }\"\n  style=\"left: 0; right: 4px\"\n  [ngStyle]=\"{ 'z-index': config.singleColumn ? '30' : '20' }\"\n  *ngIf=\"!selectedDevice && index === 0 && (config.search || config.singleColumn)\"\n>\n  <p class=\"text-medium m-b-4 p-t-8\">\n    {{ config.label | translate }}\n  </p>\n  <c8y-search-input\n    *ngIf=\"config.search && root\"\n    (onClick)=\"onSearchResultClick($event)\"\n    (reset)=\"onSearchResultReset($event)\"\n    [mode]=\"'select'\"\n    [container]=\"container\"\n  ></c8y-search-input>\n</div>\n\n<div *ngIf=\"selectedDevice\" class=\"p-r-16\">\n  <div class=\"d-flex p-b-4\">\n    <p *ngIf=\"selectedDevice; else multiAssets\" class=\"text-medium p-t-8 m-r-8\">\n      {{ 'Selected asset' | translate }}\n    </p>\n    <ng-template #multiAssets>\n      <p class=\"text-medium m-r-8\">{{ 'Selected assets' | translate }}</p>\n    </ng-template>\n    <button\n      class=\"btn btn-default btn-xs a-s-center m-t-4 m-l-auto\"\n      (click)=\"clearSelectedDevices()\"\n      title=\"{{ 'Edit' | translate }}\"\n    >\n      {{ 'Change' | translate }}\n    </button>\n  </div>\n  <div class=\"d-flex\">\n    <i [c8yIcon]=\"'check-circle'\" class=\"text-success p-l-0 p-r-8\"></i>\n    <i\n      c8yIcon=\"{{ selectedDevice.type === 'c8y_DeviceGroup' ? 'c8y-group' : 'exchange' }}\"\n      class=\"m-r-4 icon-20\"\n    ></i>\n    <span>{{ selectedDevice.name }}</span>\n  </div>\n</div>\n\n<!-- miller columns header -->\n<div\n  *ngIf=\"\n    config.view === 'miller' &&\n    ((config.showFilter && !rootNode.root) || config.columnHeaders || config.singleColumn) &&\n    !selectedDevice\n  \"\n  class=\"miller-column__header sticky-top bg-inherit separator-top-bottom\"\n  [ngClass]=\"{ 'm-t-72 ': config.search, 'm-t-32': !config.search && config.singleColumn }\"\n  [ngStyle]=\"{ top: config.search && !config.singleColumn ? '72px' : '0' }\"\n>\n  <p\n    class=\"text-12 text-muted text-truncate m-b-4\"\n    *ngIf=\"config.singleColumn && index !== 0\"\n    title=\"{{ rootNode.breadcrumb || rootNode.label | translate }}\"\n  >\n    <i c8yIcon=\"home\" class=\"m-r-4\"></i>\n    {{ rootNode.breadcrumb || rootNode.label | translate }}\n  </p>\n  <div *ngIf=\"config.columnHeaders || config.singleColumn\" class=\"d-flex a-i-center p-b-4\">\n    <button\n      class=\"btn btn-default btn-xs m-r-8 p-t-0 p-b-0 p-l-4 p-r-4 l-h-1\"\n      *ngIf=\"config.singleColumn && !rootNode.root && index !== 0\"\n      title=\"{{ 'Back' | translate }}\"\n      (click)=\"back()\"\n    >\n      <i c8yIcon=\"angle-left\"></i>\n    </button>\n    <label\n      *ngIf=\"!rootNode.root && index === 0 && (config.groupsSelectable || !rootNode.isGroup())\"\n      class=\"c8y-radio checkbox-inline m-r-8\"\n    >\n      <input\n        type=\"radio\"\n        (change)=\"select(rootNode.mo)\"\n        [checked]=\"isGroupSelected()\"\n        title=\"{{ 'Select group' | translate }}\"\n      /><span></span>\n    </label>\n\n    <p\n      class=\"text-truncate\"\n      title=\"{{ rootNode.label | translate }}\"\n      *ngIf=\"config.columnHeaders\"\n      [ngClass]=\"{\n        'text-label-small': !config.singleColumn,\n        'text-medium': config.singleColumn\n      }\"\n    >\n      <i\n        *ngIf=\"config.singleColumn || (!rootNode.root && index === 0)\"\n        c8yIcon=\"c8y-group-open\"\n        class=\"icon-20 c8y-icon-duocolor m-r-4\"\n      ></i>\n      {{ rootNode.label | translate }}\n    </p>\n  </div>\n\n  <div *ngIf=\"!rootNode.root && config.showFilter\" [ngClass]=\"{ 'p-t-4': config.columnHeaders }\">\n    <div class=\"input-group input-group-sm input-group-search\">\n      <input\n        [(ngModel)]=\"filterText\"\n        placeholder=\"{{ 'Filter this column\u2026' | translate }}\"\n        class=\"form-control\"\n        (keyup.enter)=\"applyFilter('*' + filterText + '*')\"\n      />\n      <span class=\"input-group-btn\">\n        <button\n          title=\"{{ 'Apply filter' | translate }}\"\n          class=\"btn btn-clean p-r-8 p-l-4\"\n          (click)=\"applyFilter('*' + filterText + '*')\"\n        >\n          <i c8yIcon=\"filter\"></i>\n        </button>\n        <button\n          title=\" {{ 'Clear filters' | translate }}\"\n          class=\"btn btn-clean p-r-8 p-l-4\"\n          (click)=\"clearFilters()\"\n          *ngIf=\"filterText.length\"\n        >\n          <i c8yIcon=\"times\"></i>\n        </button>\n      </span>\n    </div>\n  </div>\n</div>\n\n<c8y-asset-selector-node\n  *ngIf=\"rootNode && !selectedDevice\"\n  [node]=\"rootNode\"\n  [preselected]=\"selected\"\n  [multi]=\"config.multi\"\n  [view]=\"config.view\"\n  [index]=\"index\"\n  [selectedItems]=\"selectedItems\"\n  [active]=\"active\"\n  class=\"d-block bg-inherit p-relative\"\n  [ngClass]=\"{ 'collapse show': !rootNode.root && !rootNode.hidden && config.view !== 'miller' }\"\n  style=\"z-index: 9\"\n></c8y-asset-selector-node>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => AssetSelectorComponent)
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => AssetSelectorComponent),
                        multi: true
                    }
                ]
            },] }
];
AssetSelectorComponent.ctorParameters = () => [
    { type: GroupNodeService },
    { type: InventoryService },
    { type: AssetSelectorService },
    { type: ChangeDetectorRef }
];
AssetSelectorComponent.propDecorators = {
    config: [{ type: Input }],
    active: [{ type: Input }],
    index: [{ type: Input }],
    asset: [{ type: Input }],
    selectedDevice: [{ type: Input }],
    selected: [{ type: Input }],
    rootNode: [{ type: Input }],
    selectedItems: [{ type: Input }],
    container: [{ type: Input }],
    onSelected: [{ type: Output }],
    onRowSelected: [{ type: Output }],
    onLoad: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,