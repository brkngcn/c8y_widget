import { Inject, Injectable, Optional } from '@angular/core';
import { get as getProp } from 'lodash-es';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { AssetNodeService } from './asset-node.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './asset-node.service';
export class AssetNodeFactory {
    constructor(service, moduleConfig) {
        this.service = service;
        this.moduleConfig = moduleConfig;
    }
    get() {
        var _a;
        const rootNavigatorNode = (_a = getProp(this.moduleConfig, 'rootNavigatorNode')) !== null && _a !== void 0 ? _a : true;
        let { rootNode } = this.service;
        if (rootNavigatorNode === false) {
            return;
        }
        if (!rootNode) {
            rootNode = this.service.createRootNode(rootNavigatorNode === true ? {} : rootNavigatorNode);
        }
        return rootNode;
    }
}
AssetNodeFactory.ɵfac = function AssetNodeFactory_Factory(t) { return new (t || AssetNodeFactory)(ɵngcc0.ɵɵinject(ɵngcc1.AssetNodeService), ɵngcc0.ɵɵinject(ASSET_NAVIGATOR_CONFIG, 8)); };
AssetNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AssetNodeFactory, factory: AssetNodeFactory.ɵfac });
AssetNodeFactory.ctorParameters = () => [
    { type: AssetNodeService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AssetNodeService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ASSET_NAVIGATOR_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtbm9kZS5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMtbmF2aWdhdG9yL2Fzc2V0LW5vZGUuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLEdBQUcsSUFBSSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFM0MsT0FBTyxFQUF3QixzQkFBc0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFHeEQsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QixJQUFFLFlBQ1UsT0FBeUIsRUFDa0IsWUFBa0M7QUFDdEYsUUFGUyxZQUFPLEdBQVAsT0FBTyxDQUFrQjtBQUFDLFFBQ2lCLGlCQUFZLEdBQVosWUFBWSxDQUFzQjtBQUN6RixJQUFLLENBQUM7QUFDTixJQUNFLEdBQUc7QUFBSztBQUNMLFFBQUQsTUFBTSxpQkFBaUIsR0FBRyxNQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLG1CQUFtQixDQUFDLG1DQUFJLElBQUksQ0FBQztBQUN0RixRQUFJLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3BDLFFBQ0ksSUFBSSxpQkFBaUIsS0FBSyxLQUFLLEVBQUU7QUFDckMsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNuQixZQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNsRyxTQUFLO0FBQ0wsUUFBSSxPQUFPLFFBQVEsQ0FBQztBQUNwQixJQUFFLENBQUM7QUFDSDs0Q0FwQkMsVUFBVTs4SEFDVDtBQUFDO0FBQ1UsWUFKSixnQkFBZ0I7QUFBSSw0Q0FNeEIsUUFBUSxZQUFJLE1BQU0sU0FBQyxzQkFBc0I7QUFBUTs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldCBhcyBnZXRQcm9wIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IEFzc2V0Tm9kZSB9IGZyb20gJy4vYXNzZXQtbm9kZSc7XG5pbXBvcnQgeyBBc3NldE5hdmlnYXRvckNvbmZpZywgQVNTRVRfTkFWSUdBVE9SX0NPTkZJRyB9IGZyb20gJy4vYXNzZXQtbm9kZS1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgQXNzZXROb2RlU2VydmljZSB9IGZyb20gJy4vYXNzZXQtbm9kZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFzc2V0Tm9kZUZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHNlcnZpY2U6IEFzc2V0Tm9kZVNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChBU1NFVF9OQVZJR0FUT1JfQ09ORklHKSBwdWJsaWMgbW9kdWxlQ29uZmlnOiBBc3NldE5hdmlnYXRvckNvbmZpZ1xuICApIHt9XG5cbiAgZ2V0KCk6IEFzc2V0Tm9kZSB7XG4gICAgY29uc3Qgcm9vdE5hdmlnYXRvck5vZGUgPSBnZXRQcm9wKHRoaXMubW9kdWxlQ29uZmlnLCAncm9vdE5hdmlnYXRvck5vZGUnKSA/PyB0cnVlO1xuICAgIGxldCB7IHJvb3ROb2RlIH0gPSB0aGlzLnNlcnZpY2U7XG5cbiAgICBpZiAocm9vdE5hdmlnYXRvck5vZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFyb290Tm9kZSkge1xuICAgICAgcm9vdE5vZGUgPSB0aGlzLnNlcnZpY2UuY3JlYXRlUm9vdE5vZGUocm9vdE5hdmlnYXRvck5vZGUgPT09IHRydWUgPyB7fSA6IHJvb3ROYXZpZ2F0b3JOb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3ROb2RlO1xuICB9XG59XG4iXX0=