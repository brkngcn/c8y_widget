import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { MultipleLnsConnectorService } from './multiple-lns-connector.service';
import { saveAs } from 'file-saver';
export class ConnectionInfoWithDownloadCsvComponent {
    constructor(modal, connectorService) {
        this.modal = modal;
        this.connectorService = connectorService;
    }
    dismiss() {
        this.modal.hide();
    }
    download() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/service/${this.appData.contextPath}${this.messageData.URL}`;
            const res = yield this.connectorService.download(url);
            const streamData = yield res.blob();
            saveAs(streamData, 'DeviceList.csv');
        });
    }
}
ConnectionInfoWithDownloadCsvComponent.decorators = [
    { type: Component, args: [{
                selector: 'connection-info-with-download-csv',
                template: "<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"c8y-prompt alert alert-danger\">\n      <h3 class=\"m-b-16\">\n        <i class=\"dlt-c8y-icon-exclamation-circle\"></i>\n        <span>{{ modalTitle | translate }}</span>\n      </h3>\n      <p class=\"text-break-word\">\n        {{ messageData.message | translate }}\n      </p>\n      \n      <span class=\"btn-default\" (click)=\"download()\">{{\n        'Click to download link with affected devices' | translate\n      }}</span>\n      <div class=\"alert-footer\">\n        <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"dismiss()\">\n          {{ 'Cancel' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
ConnectionInfoWithDownloadCsvComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: MultipleLnsConnectorService }
];
ConnectionInfoWithDownloadCsvComponent.propDecorators = {
    messageData: [{ type: Input }],
    appData: [{ type: Input }],
    modalTitle: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbi1pbmZvLXdpdGgtZG93bmxvYWQtY3N2LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb3RvY29sLWxwd2FuL211bHRpcGxlLWxucy1jb25uZWN0b3JzL2Nvbm5lY3Rpb24taW5mby13aXRoLWRvd25sb2FkLWNzdi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBT3BDLE1BQU0sT0FBTyxzQ0FBc0M7SUFJakQsWUFBb0IsS0FBaUIsRUFBVSxnQkFBNkM7UUFBeEUsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUFVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBNkI7SUFBRyxDQUFDO0lBRWhHLE9BQU87UUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFSyxRQUFROztZQUNaLE1BQU0sR0FBRyxHQUFHLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMxRSxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEMsTUFBTSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7S0FBQTs7O1lBbkJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUNBQW1DO2dCQUM3Qyxnd0JBQWlFO2FBQ2xFOzs7WUFSUSxVQUFVO1lBQ1YsMkJBQTJCOzs7MEJBU2pDLEtBQUs7c0JBQ0wsS0FBSzt5QkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgTXVsdGlwbGVMbnNDb25uZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi9tdWx0aXBsZS1sbnMtY29ubmVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5pbXBvcnQgeyBJQXBwbGljYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nvbm5lY3Rpb24taW5mby13aXRoLWRvd25sb2FkLWNzdicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb25uZWN0aW9uLWluZm8td2l0aC1kb3dubG9hZC1jc3YuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25JbmZvV2l0aERvd25sb2FkQ3N2Q29tcG9uZW50IHtcbiAgQElucHV0KCkgbWVzc2FnZURhdGE6IGFueTtcbiAgQElucHV0KCkgYXBwRGF0YTogSUFwcGxpY2F0aW9uO1xuICBASW5wdXQoKSBtb2RhbFRpdGxlOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kYWw6IEJzTW9kYWxSZWYsIHByaXZhdGUgY29ubmVjdG9yU2VydmljZTogTXVsdGlwbGVMbnNDb25uZWN0b3JTZXJ2aWNlKSB7fVxuXG4gIGRpc21pc3MoKSB7XG4gICAgdGhpcy5tb2RhbC5oaWRlKCk7XG4gIH1cblxuICBhc3luYyBkb3dubG9hZCgpIHtcbiAgICBjb25zdCB1cmwgPSBgL3NlcnZpY2UvJHt0aGlzLmFwcERhdGEuY29udGV4dFBhdGh9JHt0aGlzLm1lc3NhZ2VEYXRhLlVSTH1gO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY29ubmVjdG9yU2VydmljZS5kb3dubG9hZCh1cmwpO1xuICAgIGNvbnN0IHN0cmVhbURhdGEgPSBhd2FpdCByZXMuYmxvYigpO1xuICAgIHNhdmVBcyhzdHJlYW1EYXRhLCAnRGV2aWNlTGlzdC5jc3YnKTtcbiAgfVxufVxuIl19