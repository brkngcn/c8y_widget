import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { AlertService, AppStateService } from '@c8y/ngx-components';
import { isActilityConnection, isSigfoxConnection, ConnectionType } from './multiple-lns-connector.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/core/FetchClient";
import * as i2 from "@c8y/ngx-components";
export class MultipleLnsConnectorService {
    constructor(client, appStateService, alertService) {
        this.client = client;
        this.appStateService = appStateService;
        this.alertService = alertService;
        this.headers = { 'Content-Type': 'application/json' };
    }
    list(connectionType) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.getBaseUrlByType(connectionType)}/lns-connection`;
            const options = {
                method: 'GET',
                headers: this.headers
            };
            return this.client.fetch(url, options);
        });
    }
    /**
     * Saves the connection.
     * @param connection The connection to be saved.
     * @param originalName The original name of the connection, required to perform an update.
     */
    save(connection, originalName = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (originalName) {
                return this.update(connection, originalName);
            }
            return this.create(connection);
        });
    }
    detail(connectionType, connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = connectionName.toLocaleLowerCase();
            const url = `${this.getBaseUrlByType(connectionType)}/lns-connection/${encodeURIComponent(String(name))}`;
            const options = {
                method: 'GET',
                headers: this.headers
            };
            const res = yield this.client.fetch(url, options);
            if (res.status === 200) {
                return yield res.json();
            }
            return null;
        });
    }
    exists(connectionType, connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.detail(connectionType, connectionName);
            return connection !== null;
        });
    }
    create(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            connection.name = connection.name.toLocaleLowerCase();
            const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;
            const options = {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify(connection)
            };
            return this.client.fetch(url, options);
        });
    }
    update(connection, originalName) {
        return __awaiter(this, void 0, void 0, function* () {
            connection.name = connection.name.toLocaleLowerCase();
            const url = `${this.getBaseUrlByConnection(connection)}/lns-connection/${encodeURIComponent(String(originalName))}`;
            const options = {
                method: 'PUT',
                headers: this.headers,
                body: JSON.stringify(connection)
            };
            return this.client.fetch(url, options);
        });
    }
    getBaseUrlByConnection(connection) {
        return isSigfoxConnection(connection)
            ? 'service/sigfox-agent'
            : isActilityConnection(connection)
                ? 'service/actility'
                : '';
    }
    getBaseUrlByType(connectionType) {
        return (connectionType === ConnectionType.SIGFOX)
            ? 'service/sigfox-agent'
            : (connectionType === ConnectionType.ACTILITY)
                ? 'service/actility'
                : '';
    }
    delete(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;
            const options = {
                method: 'DELETE'
            };
            return this.client.fetch(`${url}/${encodeURIComponent(String(connection.name))}`, options);
        });
    }
    getApplication(name) {
        const { references } = this.appStateService.currentTenant.value.applications;
        return references.find(({ application }) => application.name === name).application;
    }
    download(url) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const options = {
                    method: 'GET'
                };
                return this.client.fetch(url, options);
            }
            catch (e) {
                this.alertService.addServerFailure(e);
            }
        });
    }
}
MultipleLnsConnectorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MultipleLnsConnectorService_Factory() { return new MultipleLnsConnectorService(i0.ɵɵinject(i1.FetchClient), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i2.AlertService)); }, token: MultipleLnsConnectorService, providedIn: "root" });
MultipleLnsConnectorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
MultipleLnsConnectorService.ctorParameters = () => [
    { type: FetchClient },
    { type: AppStateService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,