import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { MultipleLnsConnectorService } from './multiple-lns-connector.service';
import { head, orderBy, findIndex } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
import { ConnectionType } from './multiple-lns-connector.model';
import { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';
import { BsModalService } from 'ngx-bootstrap/modal';
export class SigfoxMultipleLnsConnectorComponent {
    constructor(connectorService, alertService, translateService, modalService, modal) {
        this.connectorService = connectorService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.modal = modal;
        this.state = 'loadingConnection';
        this.connection = {};
        this.connections = Array();
        this.showPassword = false;
        this.cardHeader = gettext('Sigfox connections');
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadConnections();
        });
    }
    loadConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.connectorService.list(ConnectionType.SIGFOX);
            if (res && res.status !== 200) {
                const data = res.json ? yield res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
                this.state = 'loadingError';
            }
            else {
                const list = yield res.json();
                this.connections = orderBy(list, ['name'], ['asc']);
                yield this.setModel();
            }
        });
    }
    setModel(connectionObj = null) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resetEditedUnsavedConnection();
            this.connection = connectionObj
                ? connectionObj
                : this.state === 'savedSuccessfully'
                    ? this.connection
                    : head(this.connections);
            this.state = 'updateConnection';
            this.showPassword = false;
            this.connectionBeingEdited = this.connection ? this.connection.name : undefined;
        });
    }
    resetEditedUnsavedConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            const originalConnectionIndex = (!this.connection) ? 0 : findIndex(this.connections, { name: this.connectionBeingEdited });
            if (this.connectionBeingEdited && this.state === 'updateConnection') {
                const isConnectionExist = yield this.connectorService.detail(ConnectionType.SIGFOX, this.connectionBeingEdited);
                this.connections[originalConnectionIndex] = isConnectionExist;
            }
        });
    }
    addConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resetEditedUnsavedConnection();
            this.connection = {};
            this.connectionBeingEdited = '';
            this.state = 'addConnections';
            this.showPassword = true;
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            const checkForConnectionName = (this.connectionBeingEdited && this.connectionBeingEdited !== '') ? this.connectionBeingEdited : this.connection.name;
            const isConnectionExist = yield this.connectorService.exists(ConnectionType.SIGFOX, checkForConnectionName);
            if (this.state === 'addConnections' && isConnectionExist) {
                const mesg = this.translateService.instant(gettext(`Connection with name "{{ name }}" already exists.`), { name: this.connection.name });
                this.alertService.danger(mesg);
            }
            else {
                this.saveConnection();
            }
        });
    }
    deleteConnection(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const mesg = this.translateService.instant(gettext(`You are about to delete the connection "{{ name }}". Do you want to proceed?`), { name: connection.name });
            try {
                yield this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                yield this.delete(connection);
            }
            catch (error) {
                // empty catch block
            }
        });
    }
    changePassword() {
        this.showPassword = !this.showPassword;
        if (this.connectorsForm.controls.password) {
            this.connectorsForm.controls.password.setValue(null);
        }
    }
    saveConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            res = yield this.connectorService.save(this.connection, this.connectionBeingEdited);
            if (res && (res.status === 201 || res.status === 200)) {
                this.state = 'savedSuccessfully';
                this.alertService.success(gettext('Connection saved.'));
                yield this.loadConnections();
            }
            else if (res && res.status === 500) {
                const data = res.json ? yield res.json() : undefined;
                const app = this.connectorService.getApplication('sigfox-agent');
                const initialState = {
                    messageData: data,
                    appData: app,
                    modalTitle: gettext('Failed to update the connection')
                };
                this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
            }
            else {
                const data = res.json ? yield res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
            }
        });
    }
    delete(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.connectorService.delete(connection);
                if (response.ok && response.status === 204) {
                    this.alertService.success(gettext('Connection deleted.'));
                    yield this.loadConnections();
                }
                else if (response && response.status === 500) {
                    const data = response.json ? yield response.json() : undefined;
                    const app = this.connectorService.getApplication('sigfox-agent');
                    const initialState = {
                        messageData: data,
                        appData: app,
                        modalTitle: gettext('Failed to delete the connection')
                    };
                    this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
                }
                else {
                    const data = response.json ? yield response.json() : undefined;
                    this.alertService.addServerFailure({ data, response });
                }
            }
            catch (error) {
                // empty catch block
            }
        });
    }
}
SigfoxMultipleLnsConnectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'sigfox-multiple-lns-connector',
                template: "<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <h4>{{ cardHeader | translate }}</h4>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connection.name\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        ng-class=\"{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            ng-click=\"vm.deselect()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Sigfox connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to detect...' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://backend.sigfox.com/api' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"parentGroupId\">\n                  {{ 'Parent group ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: '58c1793b9e93a15370f71caa' }\"\n                  id=\"parentGroupId\"\n                  name=\"parentGroupId\"\n                  [(ngModel)]=\"connection.parentGroupId\"\n                  required\n                  pattern=\"[a-z\\d]+\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid Parent group ID' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  [required]=\"state === 'addConnections'\"\n                />\n              </c8y-form-group>\n\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n          </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(connection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n          </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
            },] }
];
SigfoxMultipleLnsConnectorComponent.ctorParameters = () => [
    { type: MultipleLnsConnectorService },
    { type: AlertService },
    { type: TranslateService },
    { type: BsModalService },
    { type: ModalService }
];
SigfoxMultipleLnsConnectorComponent.propDecorators = {
    connectorsForm: [{ type: ViewChild, args: ['connectorsForm', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,