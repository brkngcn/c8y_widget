import { NgModule } from '@angular/core';
import { CoreModule, FormsModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { LpwanAssignDeviceProtocolComponent } from './lpwan-set-device-protocol.component';
import { LpwanAgentGuard } from './lpwan-agent.guard';
import { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';
import { LpwanAssignLnsConnectionsComponent } from './lpwan-set-connections.component';
const routes = [
    {
        context: ViewContext.Device,
        path: 'assign-protocol',
        component: LpwanAssignDeviceProtocolComponent,
        label: gettext('LPWAN'),
        icon: 'c8y-device-protocols',
        canActivate: [LpwanAgentGuard]
    }
];
const ɵ0 = routes;
export class LpwanProtocolModule {
}
LpwanProtocolModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    LpwanAssignDeviceProtocolComponent,
                    LpwanAssignLnsConnectionsComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule
                ],
                entryComponents: [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent],
                providers: [
                    LpwanAgentGuard,
                    LpwanSetDeviceProtocolService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHB3YW4tcHJvdG9jb2wubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtbHB3YW4vbHB3YW4tcHJvdG9jb2wubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFVBQVUsRUFDVixXQUFXLEVBQ1gsT0FBTyxFQUNQLFVBQVUsRUFFVixXQUFXLEVBQ1osTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMzRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFdkYsTUFBTSxNQUFNLEdBQVk7SUFDdEI7UUFDRSxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07UUFDM0IsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixTQUFTLEVBQUUsa0NBQWtDO1FBQzdDLEtBQUssRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsV0FBVyxFQUFFLENBQUMsZUFBZSxDQUFDO0tBQy9CO0NBQ0YsQ0FBQztXQWlCYyxNQUFNO0FBS3RCLE1BQU0sT0FBTyxtQkFBbUI7OztZQXBCL0IsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixrQ0FBa0M7b0JBQ2xDLGtDQUFrQztpQkFDbkM7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFVBQVU7b0JBQ1YsV0FBVztpQkFDWjtnQkFDRCxlQUFlLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxrQ0FBa0MsQ0FBQztnQkFDekYsU0FBUyxFQUFFO29CQUNULGVBQWU7b0JBQ2YsNkJBQTZCO29CQUM3Qjt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxJQUFRO3dCQUNoQixLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIENvcmVNb2R1bGUsXG4gIEZvcm1zTW9kdWxlLFxuICBnZXR0ZXh0LFxuICBIT09LX1JPVVRFLFxuICBSb3V0ZSxcbiAgVmlld0NvbnRleHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBMcHdhbkFzc2lnbkRldmljZVByb3RvY29sQ29tcG9uZW50IH0gZnJvbSAnLi9scHdhbi1zZXQtZGV2aWNlLXByb3RvY29sLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMcHdhbkFnZW50R3VhcmQgfSBmcm9tICcuL2xwd2FuLWFnZW50Lmd1YXJkJztcbmltcG9ydCB7IExwd2FuU2V0RGV2aWNlUHJvdG9jb2xTZXJ2aWNlIH0gZnJvbSAnLi9scHdhbi1zZXQtZGV2aWNlLXByb3RvY29sLnNlcnZpY2UnO1xuaW1wb3J0IHsgTHB3YW5Bc3NpZ25MbnNDb25uZWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vbHB3YW4tc2V0LWNvbm5lY3Rpb25zLmNvbXBvbmVudCc7XG5cbmNvbnN0IHJvdXRlczogUm91dGVbXSA9IFtcbiAge1xuICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0LkRldmljZSxcbiAgICBwYXRoOiAnYXNzaWduLXByb3RvY29sJyxcbiAgICBjb21wb25lbnQ6IExwd2FuQXNzaWduRGV2aWNlUHJvdG9jb2xDb21wb25lbnQsXG4gICAgbGFiZWw6IGdldHRleHQoJ0xQV0FOJyksXG4gICAgaWNvbjogJ2M4eS1kZXZpY2UtcHJvdG9jb2xzJyxcbiAgICBjYW5BY3RpdmF0ZTogW0xwd2FuQWdlbnRHdWFyZF1cbiAgfVxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTHB3YW5Bc3NpZ25EZXZpY2VQcm90b2NvbENvbXBvbmVudCxcbiAgICBMcHdhbkFzc2lnbkxuc0Nvbm5lY3Rpb25zQ29tcG9uZW50XG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb3JlTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlXG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0xwd2FuQXNzaWduRGV2aWNlUHJvdG9jb2xDb21wb25lbnQsIExwd2FuQXNzaWduTG5zQ29ubmVjdGlvbnNDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICBMcHdhbkFnZW50R3VhcmQsXG4gICAgTHB3YW5TZXREZXZpY2VQcm90b2NvbFNlcnZpY2UsXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgIHVzZVZhbHVlOiByb3V0ZXMsXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMcHdhblByb3RvY29sTW9kdWxlIHsgfVxuIl19