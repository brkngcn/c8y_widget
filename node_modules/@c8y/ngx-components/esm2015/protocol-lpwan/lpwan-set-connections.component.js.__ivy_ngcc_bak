import { __awaiter } from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';
import { AlertService, gettext, PopoverConfirmComponent } from '@c8y/ngx-components';
import { pipe } from 'rxjs';
import { map } from 'rxjs/operators';
import { find } from 'lodash-es';
export class LpwanAssignLnsConnectionsComponent {
    constructor(lpwanService, alertService) {
        this.lpwanService = lpwanService;
        this.alertService = alertService;
        this.buttons = [
            { label: gettext('Cancel'), action: () => Promise.reject() },
            { label: gettext('Re-register'), action: () => this.deviceReregister(), status: 'default' }
        ];
        this.reRegisterMsg = gettext('To change provider connection, you need to re-register device first.');
        this.filterConnection = pipe();
        this.pattern = '';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reload();
            this.setConnectionPipe('');
        });
    }
    setConnectionPipe(filterStr) {
        this.pattern = filterStr;
        this.filterConnection = pipe(map((connections) => connections.filter(connection => (!this.currentConnection || this.currentConnection.name !== connection.name) &&
            (!filterStr || connection.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1))));
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            this.newConnection = null;
            try {
                this.availableConnections = yield this.lpwanService.getAvailableConnections(this.device);
                this.currentConnection = find(this.availableConnections.data, {
                    name: this.device.c8y_LpwanDevice.lnsConnectionName
                });
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            finally {
                this.loading = false;
            }
        });
    }
    togglePopover(popoverCfrm) {
        popoverCfrm.show();
        this.setConnectionPipe('');
    }
    deviceReregister() {
        return new Promise((resolve, reject) => {
            window.location.href = `#/deviceregistration`;
            resolve(true);
        });
    }
}
LpwanAssignLnsConnectionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'set-lns-connections',
                template: "<div class=\"col-md-6\">\n  <div class=\"form-group\">\n    <label translate>Current connection</label>\n    <p class=\"form-control-static\" *ngIf=\"!currentConnection\">\n      {{ 'Connection is not set. Select connection for this device' | translate }}\n    </p>\n    <p class=\"form-control-static  text-truncate\" *ngIf=\"currentConnection\" title=\"{{ currentConnection.name }}\">\n      {{ currentConnection.name }}\n    </p>\n  </div>\n\n  <c8y-form-group>\n    <c8y-popover-confirm\n      outsideClick=\"true\"\n      containerClass=\"lns-connection-popover\"\n      [message]=\"reRegisterMsg\"\n      [buttons]=\"buttons\"\n      [placement]=\"'bottom'\"\n    ></c8y-popover-confirm>\n    <c8y-typeahead\n      *ngIf=\"!loading\"\n      [(ngModel)]=\"newConnection\"\n      placeholder=\"{{ 'Select new connection' | translate }}\"\n      name=\"newConnection\"\n      (onSearch)=\"setConnectionPipe($event)\"\n      [allowFreeEntries]=\"false\"\n    >\n      <c8y-li\n        *c8yFor=\"let connection of availableConnections; loadMore: 'hidden'; pipe: filterConnection\"\n        class=\"p-l-8 p-r-8 c8y-list__item--link\"\n        (click)=\"togglePopover(popoverConfirm)\"\n      >\n        <c8y-highlight [text]=\"connection.name\" [pattern]=\"pattern\"></c8y-highlight>\n      </c8y-li>\n    </c8y-typeahead>\n    <c8y-messages\n      ><c8y-message\n        name=\"notExisting\"\n        [text]=\"'Select one of the connections.' | translate\"\n      ></c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n</div>\n"
            },] }
];
LpwanAssignLnsConnectionsComponent.ctorParameters = () => [
    { type: LpwanSetDeviceProtocolService },
    { type: AlertService }
];
LpwanAssignLnsConnectionsComponent.propDecorators = {
    device: [{ type: Input }],
    popoverConfirm: [{ type: ViewChild, args: [PopoverConfirmComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHB3YW4tc2V0LWNvbm5lY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb3RvY29sLWxwd2FuL2xwd2FuLXNldC1jb25uZWN0aW9ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNwRixPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBeUIsdUJBQXVCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU1RyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBT2pDLE1BQU0sT0FBTyxrQ0FBa0M7SUFnQjdDLFlBQ1UsWUFBMkMsRUFDM0MsWUFBMEI7UUFEMUIsaUJBQVksR0FBWixZQUFZLENBQStCO1FBQzNDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBZnBDLFlBQU8sR0FBNEI7WUFDakMsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDNUQsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFO1NBQzVGLENBQUM7UUFDRixrQkFBYSxHQUFHLE9BQU8sQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1FBQ2hHLHFCQUFnQixHQUFHLElBQUksRUFBRSxDQUFDO1FBQzFCLFlBQU8sR0FBRyxFQUFFLENBQUM7SUFVVixDQUFDO0lBQ0UsUUFBUTs7WUFDWixNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsQ0FBQztLQUFBO0lBRUQsaUJBQWlCLENBQUMsU0FBaUI7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FDMUIsR0FBRyxDQUFDLENBQUMsV0FBNkIsRUFBRSxFQUFFLENBQ3BDLFdBQVcsQ0FBQyxNQUFNLENBQ2hCLFVBQVUsQ0FBQyxFQUFFLENBQ1gsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDNUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUN0RixDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFSyxNQUFNOztZQUNWLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQzFCLElBQUk7Z0JBQ0EsSUFBSSxDQUFDLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3pGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRTtvQkFDNUQsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLGlCQUFpQjtpQkFDcEQsQ0FBQyxDQUFDO2FBQ047WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3hDO29CQUFTO2dCQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQztLQUFBO0lBRUQsYUFBYSxDQUFDLFdBQVc7UUFDdkIsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxzQkFBc0IsQ0FBQztZQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFuRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLHdnREFBcUQ7YUFDdEQ7OztZQVhRLDZCQUE2QjtZQUM3QixZQUFZOzs7cUJBYWxCLEtBQUs7NkJBUUwsU0FBUyxTQUFDLHVCQUF1QixFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMcHdhblNldERldmljZVByb3RvY29sU2VydmljZSB9IGZyb20gJy4vbHB3YW4tc2V0LWRldmljZS1wcm90b2NvbC5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCwgUG9wb3ZlckNvbmZpcm1CdXR0b25zLCBQb3BvdmVyQ29uZmlybUNvbXBvbmVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIElSZXN1bHRMaXN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZmluZCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBBY3RpbGl0eUNvbm5lY3Rpb24sIFNpZ2ZveENvbm5lY3Rpb24gfSBmcm9tICcuL211bHRpcGxlLWxucy1jb25uZWN0b3JzL211bHRpcGxlLWxucy1jb25uZWN0b3IubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzZXQtbG5zLWNvbm5lY3Rpb25zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xwd2FuLXNldC1jb25uZWN0aW9ucy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTHB3YW5Bc3NpZ25MbnNDb25uZWN0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGxvYWRpbmc6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGRldmljZTogSU1hbmFnZWRPYmplY3Q7XG4gIGJ1dHRvbnM6IFBvcG92ZXJDb25maXJtQnV0dG9uc1tdID0gW1xuICAgIHsgbGFiZWw6IGdldHRleHQoJ0NhbmNlbCcpLCBhY3Rpb246ICgpID0+IFByb21pc2UucmVqZWN0KCkgfSxcbiAgICB7IGxhYmVsOiBnZXR0ZXh0KCdSZS1yZWdpc3RlcicpLCBhY3Rpb246ICgpID0+IHRoaXMuZGV2aWNlUmVyZWdpc3RlcigpLCBzdGF0dXM6ICdkZWZhdWx0JyB9XG4gIF07XG4gIHJlUmVnaXN0ZXJNc2cgPSBnZXR0ZXh0KCdUbyBjaGFuZ2UgcHJvdmlkZXIgY29ubmVjdGlvbiwgeW91IG5lZWQgdG8gcmUtcmVnaXN0ZXIgZGV2aWNlIGZpcnN0LicpO1xuICBmaWx0ZXJDb25uZWN0aW9uID0gcGlwZSgpO1xuICBwYXR0ZXJuID0gJyc7XG4gIEBWaWV3Q2hpbGQoUG9wb3ZlckNvbmZpcm1Db21wb25lbnQsIHtzdGF0aWM6IHRydWV9KSBwb3BvdmVyQ29uZmlybTogUG9wb3ZlckNvbmZpcm1Db21wb25lbnQ7XG5cbiAgbmV3Q29ubmVjdGlvbjogQWN0aWxpdHlDb25uZWN0aW9uIHwgU2lnZm94Q29ubmVjdGlvbjtcbiAgYXZhaWxhYmxlQ29ubmVjdGlvbnM6IElSZXN1bHRMaXN0PEFjdGlsaXR5Q29ubmVjdGlvbiB8IFNpZ2ZveENvbm5lY3Rpb24+O1xuICBjdXJyZW50Q29ubmVjdGlvbjogQWN0aWxpdHlDb25uZWN0aW9uIHwgU2lnZm94Q29ubmVjdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxwd2FuU2VydmljZTogTHB3YW5TZXREZXZpY2VQcm90b2NvbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZVxuICApIHt9XG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIGF3YWl0IHRoaXMucmVsb2FkKCk7XG4gICAgdGhpcy5zZXRDb25uZWN0aW9uUGlwZSgnJyk7XG4gIH1cblxuICBzZXRDb25uZWN0aW9uUGlwZShmaWx0ZXJTdHI6IHN0cmluZykge1xuICAgIHRoaXMucGF0dGVybiA9IGZpbHRlclN0cjtcbiAgICB0aGlzLmZpbHRlckNvbm5lY3Rpb24gPSBwaXBlKFxuICAgICAgbWFwKChjb25uZWN0aW9uczogSU1hbmFnZWRPYmplY3RbXSkgPT5cbiAgICAgICAgY29ubmVjdGlvbnMuZmlsdGVyKFxuICAgICAgICAgIGNvbm5lY3Rpb24gPT5cbiAgICAgICAgICAgICghdGhpcy5jdXJyZW50Q29ubmVjdGlvbiB8fCB0aGlzLmN1cnJlbnRDb25uZWN0aW9uLm5hbWUgIT09IGNvbm5lY3Rpb24ubmFtZSkgJiZcbiAgICAgICAgICAgICghZmlsdGVyU3RyIHx8IGNvbm5lY3Rpb24ubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyU3RyLnRvTG93ZXJDYXNlKCkpID4gLTEpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcmVsb2FkKCkge1xuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgdGhpcy5uZXdDb25uZWN0aW9uID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgICB0aGlzLmF2YWlsYWJsZUNvbm5lY3Rpb25zID0gYXdhaXQgdGhpcy5scHdhblNlcnZpY2UuZ2V0QXZhaWxhYmxlQ29ubmVjdGlvbnModGhpcy5kZXZpY2UpO1xuICAgICAgICB0aGlzLmN1cnJlbnRDb25uZWN0aW9uID0gZmluZCh0aGlzLmF2YWlsYWJsZUNvbm5lY3Rpb25zLmRhdGEsIHtcbiAgICAgICAgICBuYW1lOiB0aGlzLmRldmljZS5jOHlfTHB3YW5EZXZpY2UubG5zQ29ubmVjdGlvbk5hbWVcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoZXgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVQb3BvdmVyKHBvcG92ZXJDZnJtKSB7XG4gICAgcG9wb3ZlckNmcm0uc2hvdygpO1xuICAgIHRoaXMuc2V0Q29ubmVjdGlvblBpcGUoJycpO1xuICB9XG5cbiAgZGV2aWNlUmVyZWdpc3RlcigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgIy9kZXZpY2VyZWdpc3RyYXRpb25gO1xuICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICB9KTtcbiAgfVxufVxuIl19