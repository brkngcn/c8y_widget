import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService, FetchClient, IdentityService } from '@c8y/client';
import { get, orderBy } from 'lodash-es';
import { MultipleLnsConnectorService } from './multiple-lns-connectors';
import { ConnectionType } from './multiple-lns-connectors/multiple-lns-connector.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from './multiple-lns-connectors';
export class LpwanSetDeviceProtocolService {
    constructor(inventoryService, client, identityService, lnsService) {
        this.inventoryService = inventoryService;
        this.client = client;
        this.identityService = identityService;
        this.lnsService = lnsService;
        this.supportedDevicesCfgs = [
            {
                name: 'lora',
                match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora',
                protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],
                connectionType: ConnectionType.ACTILITY
            },
            {
                name: 'sigfox',
                match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',
                protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['com.sigfox.deviceId'],
                connectionType: ConnectionType.SIGFOX
            }
        ];
        this.header = { 'Content-Type': 'application/json' };
    }
    refreshCache(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const externalId = yield this.getExternalId(device);
            if (externalId) {
                const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;
                const options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify({})
                };
                return this.client.fetch(url, options);
            }
        });
    }
    getMicroserviceUrl(device) {
        const { serviceProvider } = device.c8y_LpwanDevice;
        let serviceName = serviceProvider.toLowerCase();
        if (serviceProvider === 'Sigfox') {
            serviceName = 'sigfox-agent';
        }
        return `/service/${serviceName}`;
    }
    isSupportedDevice(device) {
        return this.supportedDevicesCfgs.some(({ match }) => match(device));
    }
    getCurrentProtocol(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const lpwanDevice = device.c8y_LpwanDevice;
            let protocolId;
            if (lpwanDevice.typeExternalId) {
                const externalId = (yield this.identityService.detail(lpwanDevice.typeExternalId)).data;
                protocolId = externalId.managedObject.id;
            }
            if (!protocolId && lpwanDevice.type) {
                protocolId = lpwanDevice.type.split('/')[2];
            }
            if (!protocolId) {
                return null;
            }
            return (yield this.inventoryService.detail(protocolId)).data;
        });
    }
    applyProtocol(device, selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            const [protocolExternalId] = (yield this.identityService.list(selectedProtocol.id)).data;
            const { externalId, type } = protocolExternalId;
            device.c8y_LpwanDevice.typeExternalId = { externalId, type };
            device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
            device.type = selectedProtocol.name;
            return this.inventoryService.update(device);
        });
    }
    getAvailableProtocols(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = {
                __filter: {
                    type: { __in: this.getProtocolTypesMatchingDevice(device) }
                },
                __orderby: [{ name: 1 }]
            };
            return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });
        });
    }
    getAvailableConnections(device) {
        return __awaiter(this, void 0, void 0, function* () {
            let list;
            const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
            const response = yield this.lnsService.list(matchingCfg.connectionType);
            if (response && response.status === 200) {
                list = yield response.json();
                list = orderBy(list, ['name'], ['asc']);
                return { res: response, data: list };
            }
        });
    }
    getProtocolTypesMatchingDevice(device) {
        const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
        return matchingCfg ? matchingCfg.protocolTypes : [];
    }
    getExternalId(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
            const externalIds = (yield this.identityService.list(device.id)).data;
            const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));
            return externalId ? externalId.externalId : null;
        });
    }
}
LpwanSetDeviceProtocolService.ɵfac = function LpwanSetDeviceProtocolService_Factory(t) { return new (t || LpwanSetDeviceProtocolService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.IdentityService), ɵngcc0.ɵɵinject(ɵngcc2.MultipleLnsConnectorService)); };
LpwanSetDeviceProtocolService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LpwanSetDeviceProtocolService, factory: LpwanSetDeviceProtocolService.ɵfac });
LpwanSetDeviceProtocolService.ctorParameters = () => [
    { type: InventoryService },
    { type: FetchClient },
    { type: IdentityService },
    { type: MultipleLnsConnectorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanSetDeviceProtocolService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.FetchClient }, { type: ɵngcc1.IdentityService }, { type: ɵngcc2.MultipleLnsConnectorService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHB3YW4tc2V0LWRldmljZS1wcm90b2NvbC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm90b2NvbC1scHdhbi9scHdhbi1zZXQtZGV2aWNlLXByb3RvY29sLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUVMLGdCQUFnQixFQUVoQixXQUFXLEVBRVgsZUFBZSxFQUNoQixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN6QyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RSxPQUFPLEVBQXNCLGNBQWMsRUFBb0IsTUFBTSx3REFBd0QsQ0FBQzs7OztBQUc5SCxNQUFNLE9BQU8sNkJBQTZCO0FBQzFDLElBbUJFLFlBQ1UsZ0JBQWtDLEVBQ2xDLE1BQW1CLEVBQ25CLGVBQWdDLEVBQ2hDLFVBQXVDO0FBQ2hELFFBSlMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ25DLFdBQU0sR0FBTixNQUFNLENBQWE7QUFBQyxRQUNwQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7QUFBQyxRQUNqQyxlQUFVLEdBQVYsVUFBVSxDQUE2QjtBQUNuRCxRQXhCRSx5QkFBb0IsR0FBRztBQUN6QixZQUFJO0FBQ0osZ0JBQU0sSUFBSSxFQUFFLE1BQU07QUFDbEIsZ0JBQU0sS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxpQ0FBaUMsQ0FBQyxLQUFLLE1BQU07QUFDaEYsZ0JBQU0sYUFBYSxFQUFFLENBQUMsd0JBQXdCLEVBQUUsb0JBQW9CLEVBQUUscUJBQXFCLENBQUM7QUFDNUYsZ0JBQU0sZUFBZSxFQUFFLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQztBQUN0RCxnQkFBTSxjQUFjLEVBQUUs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SUFDZ0IsYUFBYSxDQUFDLE1BQXNCO0FBQUk7QUFDWCxZQUF6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDckYsWUFBSSxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzFFLFlBQUksTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEcsWUFBSSxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3JELFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDt5REF0SEMsVUFBVTtxS0FDVDtBQUFDO0FBQ1UsWUFaWCxnQkFBZ0I7QUFDaEIsWUFDQSxXQUFXO0FBQ1gsWUFDQSxlQUFlO0FBQ2QsWUFFTSwyQkFBMkI7QUFBRzs7OytMQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBJTWFuYWdlZE9iamVjdCxcbiAgSW52ZW50b3J5U2VydmljZSxcbiAgSVJlc3VsdExpc3QsXG4gIEZldGNoQ2xpZW50LFxuICBJRmV0Y2hPcHRpb25zLFxuICBJZGVudGl0eVNlcnZpY2Vcbn0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgZ2V0LCBvcmRlckJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IE11bHRpcGxlTG5zQ29ubmVjdG9yU2VydmljZSB9IGZyb20gJy4vbXVsdGlwbGUtbG5zLWNvbm5lY3RvcnMnO1xuaW1wb3J0IHsgQWN0aWxpdHlDb25uZWN0aW9uLCBDb25uZWN0aW9uVHlwZSwgU2lnZm94Q29ubmVjdGlvbiB9IGZyb20gJy4vbXVsdGlwbGUtbG5zLWNvbm5lY3RvcnMvbXVsdGlwbGUtbG5zLWNvbm5lY3Rvci5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMcHdhblNldERldmljZVByb3RvY29sU2VydmljZSB7XG4gIHN1cHBvcnRlZERldmljZXNDZmdzID0gW1xuICAgIHtcbiAgICAgIG5hbWU6ICdsb3JhJyxcbiAgICAgIG1hdGNoOiBkZXZpY2UgPT4gZ2V0KGRldmljZSwgJ2M4eV9McHdhbkRldmljZS5scHdhbkRldmljZVR5cGUnKSA9PT0gJ0xvcmEnLFxuICAgICAgcHJvdG9jb2xUeXBlczogWydjOHlfQWN0aWxpdHlEZXZpY2VUeXBlJywgJ2M4eV9Mb3JhRGV2aWNlVHlwZScsICdjOHlfTHB3YW5EZXZpY2VUeXBlJ10sXG4gICAgICBleHRlcm5hbElkVHlwZXM6IFsnYzh5X0xvcmlvdEVVSScsICdjOHlfU2VyaWFsJ10sXG4gICAgICBjb25uZWN0aW9uVHlwZTogQ29ubmVjdGlvblR5cGUuQUNUSUxJVFlcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdzaWdmb3gnLFxuICAgICAgbWF0Y2g6IGRldmljZSA9PiBnZXQoZGV2aWNlLCAnYzh5X0xwd2FuRGV2aWNlLnNlcnZpY2VQcm92aWRlcicpID09PSAnU2lnZm94JyxcbiAgICAgIHByb3RvY29sVHlwZXM6IFsnYzh5X1NpZ2ZveERldmljZVR5cGUnLCAnYzh5X0xwd2FuRGV2aWNlVHlwZSddLFxuICAgICAgZXh0ZXJuYWxJZFR5cGVzOiBbJ2NvbS5zaWdmb3guZGV2aWNlSWQnXSxcbiAgICAgIGNvbm5lY3Rpb25UeXBlOiBDb25uZWN0aW9uVHlwZS5TSUdGT1hcbiAgICB9XG4gIF07XG5cbiAgcHJpdmF0ZSByZWFkb25seSBoZWFkZXI6IGFueSA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQsXG4gICAgcHJpdmF0ZSBpZGVudGl0eVNlcnZpY2U6IElkZW50aXR5U2VydmljZSxcbiAgICBwcml2YXRlIGxuc1NlcnZpY2U6IE11bHRpcGxlTG5zQ29ubmVjdG9yU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgcmVmcmVzaENhY2hlKGRldmljZSkge1xuICAgIGNvbnN0IGV4dGVybmFsSWQgPSBhd2FpdCB0aGlzLmdldEV4dGVybmFsSWQoZGV2aWNlKTtcbiAgICBpZiAoZXh0ZXJuYWxJZCkge1xuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5nZXRNaWNyb3NlcnZpY2VVcmwoZGV2aWNlKX0vcmVmcmVzaENhY2hlLyR7ZXh0ZXJuYWxJZH1gO1xuICAgICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7fSlcbiAgICAgIH07XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBnZXRNaWNyb3NlcnZpY2VVcmwoZGV2aWNlKSB7XG4gICAgY29uc3QgeyBzZXJ2aWNlUHJvdmlkZXIgfSA9IGRldmljZS5jOHlfTHB3YW5EZXZpY2U7XG5cbiAgICBsZXQgc2VydmljZU5hbWUgPSBzZXJ2aWNlUHJvdmlkZXIudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoc2VydmljZVByb3ZpZGVyID09PSAnU2lnZm94Jykge1xuICAgICAgc2VydmljZU5hbWUgPSAnc2lnZm94LWFnZW50JztcbiAgICB9XG5cbiAgICByZXR1cm4gYC9zZXJ2aWNlLyR7c2VydmljZU5hbWV9YDtcbiAgfVxuXG4gIGlzU3VwcG9ydGVkRGV2aWNlKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0ZWREZXZpY2VzQ2Zncy5zb21lKCh7IG1hdGNoIH0pID0+IG1hdGNoKGRldmljZSkpO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q3VycmVudFByb3RvY29sKGRldmljZTogSU1hbmFnZWRPYmplY3QpIHtcbiAgICBjb25zdCBscHdhbkRldmljZSA9IGRldmljZS5jOHlfTHB3YW5EZXZpY2U7XG4gICAgbGV0IHByb3RvY29sSWQ7XG5cbiAgICBpZiAobHB3YW5EZXZpY2UudHlwZUV4dGVybmFsSWQpIHtcbiAgICAgIGNvbnN0IGV4dGVybmFsSWQgPSAoYXdhaXQgdGhpcy5pZGVudGl0eVNlcnZpY2UuZGV0YWlsKGxwd2FuRGV2aWNlLnR5cGVFeHRlcm5hbElkKSkuZGF0YTtcbiAgICAgIHByb3RvY29sSWQgPSBleHRlcm5hbElkLm1hbmFnZWRPYmplY3QuaWQ7XG4gICAgfVxuXG4gICAgaWYgKCFwcm90b2NvbElkICYmIGxwd2FuRGV2aWNlLnR5cGUpIHtcbiAgICAgIHByb3RvY29sSWQgPSBscHdhbkRldmljZS50eXBlLnNwbGl0KCcvJylbMl07XG4gICAgfVxuXG4gICAgaWYgKCFwcm90b2NvbElkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5kZXRhaWwocHJvdG9jb2xJZCkpLmRhdGE7XG4gIH1cblxuICBhc3luYyBhcHBseVByb3RvY29sKGRldmljZTogSU1hbmFnZWRPYmplY3QsIHNlbGVjdGVkUHJvdG9jb2w6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgY29uc3QgW3Byb3RvY29sRXh0ZXJuYWxJZF0gPSAoYXdhaXQgdGhpcy5pZGVudGl0eVNlcnZpY2UubGlzdChzZWxlY3RlZFByb3RvY29sLmlkKSkuZGF0YTtcbiAgICBjb25zdCB7IGV4dGVybmFsSWQsIHR5cGUgfSA9IHByb3RvY29sRXh0ZXJuYWxJZDtcbiAgICBkZXZpY2UuYzh5X0xwd2FuRGV2aWNlLnR5cGVFeHRlcm5hbElkID0geyBleHRlcm5hbElkLCB0eXBlIH07XG4gICAgZGV2aWNlLmM4eV9McHdhbkRldmljZS50eXBlID0gJ2ludmVudG9yeS9tYW5hZ2VkT2JqZWN0cy8nICsgc2VsZWN0ZWRQcm90b2NvbC5pZDtcbiAgICBkZXZpY2UudHlwZSA9IHNlbGVjdGVkUHJvdG9jb2wubmFtZTtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLnVwZGF0ZShkZXZpY2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0QXZhaWxhYmxlUHJvdG9jb2xzKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBQcm9taXNlPElSZXN1bHRMaXN0PElNYW5hZ2VkT2JqZWN0Pj4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0ge1xuICAgICAgX19maWx0ZXI6IHtcbiAgICAgICAgdHlwZTogeyBfX2luOiB0aGlzLmdldFByb3RvY29sVHlwZXNNYXRjaGluZ0RldmljZShkZXZpY2UpIH1cbiAgICAgIH0sXG4gICAgICBfX29yZGVyYnk6IFt7IG5hbWU6IDEgfV1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdFF1ZXJ5KHF1ZXJ5LCB7IHdpdGhUb3RhbFBhZ2VzOiB0cnVlLCBwYWdlU2l6ZTogNSB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldEF2YWlsYWJsZUNvbm5lY3Rpb25zKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBQcm9taXNlPElSZXN1bHRMaXN0PEFjdGlsaXR5Q29ubmVjdGlvbiB8IFNpZ2ZveENvbm5lY3Rpb24+PiB7XG4gICAgbGV0IGxpc3Q7XG4gICAgY29uc3QgbWF0Y2hpbmdDZmcgPSB0aGlzLnN1cHBvcnRlZERldmljZXNDZmdzLmZpbmQoKHsgbWF0Y2ggfSkgPT4gbWF0Y2goZGV2aWNlKSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmxuc1NlcnZpY2UubGlzdChtYXRjaGluZ0NmZy5jb25uZWN0aW9uVHlwZSk7XG4gICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICBsaXN0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgbGlzdCA9IG9yZGVyQnkobGlzdCwgWyduYW1lJ10sIFsnYXNjJ10pO1xuICAgICAgcmV0dXJuIHtyZXM6IHJlc3BvbnNlICwgZGF0YTogbGlzdCB9O1xuICAgIH1cblxuICB9XG5cbiAgcHJpdmF0ZSBnZXRQcm90b2NvbFR5cGVzTWF0Y2hpbmdEZXZpY2UoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBtYXRjaGluZ0NmZyA9IHRoaXMuc3VwcG9ydGVkRGV2aWNlc0NmZ3MuZmluZCgoeyBtYXRjaCB9KSA9PiBtYXRjaChkZXZpY2UpKTtcbiAgICByZXR1cm4gbWF0Y2hpbmdDZmcgPyBtYXRjaGluZ0NmZy5wcm90b2NvbFR5cGVzIDogW107XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldEV4dGVybmFsSWQoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgbWF0Y2hpbmdDZmcgPSB0aGlzLnN1cHBvcnRlZERldmljZXNDZmdzLmZpbmQoKHsgbWF0Y2ggfSkgPT4gbWF0Y2goZGV2aWNlKSk7XG4gICAgY29uc3QgZXh0ZXJuYWxJZHMgPSAoYXdhaXQgdGhpcy5pZGVudGl0eVNlcnZpY2UubGlzdChkZXZpY2UuaWQpKS5kYXRhO1xuICAgIGNvbnN0IGV4dGVybmFsSWQgPSBleHRlcm5hbElkcy5maW5kKCh7IHR5cGUgfSkgPT4gbWF0Y2hpbmdDZmcuZXh0ZXJuYWxJZFR5cGVzLmluY2x1ZGVzKHR5cGUpKTtcbiAgICByZXR1cm4gZXh0ZXJuYWxJZCA/IGV4dGVybmFsSWQuZXh0ZXJuYWxJZCA6IG51bGw7XG4gIH1cbn1cbiJdfQ==