import { __awaiter } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { getActivatedRoute } from '@c8y/ngx-components';
import { ContextDashboardService } from '@c8y/ngx-components/context-dashboard';
import { get } from 'lodash-es';
export class DashboardBridgeService {
    constructor(ng1Injector, zone, router, contextDashboardService) {
        this.ng1Injector = ng1Injector;
        this.zone = zone;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.dashboardSvc = ng1Injector.get('dashboardSvc');
        this.compile = ng1Injector.get('$compile');
    }
    get ng1Components() {
        return this.ng1Injector.get('c8yComponents');
    }
    instantiateComponent(widget, element) {
        return __awaiter(this, void 0, void 0, function* () {
            const { dashboard, context, child } = widget;
            if (dashboard) {
                const transformedChild = yield this.dashboardSvc.transformChildWithContext(this.dashboardSvc.forcedContext || context, dashboard, child);
                if (this.dashboardSvc.forcedContext || dashboard.deviceType || dashboard.updateTarget) {
                    yield this.dashboardSvc.updateConfigTargetsWithContext(this.dashboardSvc.forcedContext || context, transformedChild.config);
                }
                return this.zone.runOutsideAngular(() => this.loadTemplate(transformedChild, child, element, context));
            }
            else {
                return this.loadConfigTemplate(element, widget);
            }
        });
    }
    instantiateDeviceSelector(element, widgetConfig) {
        return this.loadConfigTemplate(element, widgetConfig, true);
    }
    loadTemplate(transformedChild, child, element, context) {
        const scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.child = transformedChild;
        scope.dashboardContext = context;
        if (child.widgetComponent) {
            element.innerHTML = `<c8y-ui-component component-name="'${child.widgetComponent}'" config="child.config" context="dashboardContext"></c8y-ui-component>`;
        }
        else if (child.templateUrl) {
            element.innerHTML = `<ng-include src="'${child.templateUrl}'"></ng-include>`;
        }
        this.compile(element)(scope);
        return scope;
    }
    getDashboard() {
        return getActivatedRoute(this.router).snapshot.data.dashboard;
    }
    loadConfigTemplate(element, widgetConfig, onlyDeviceSelector = false) {
        const { settings } = widgetConfig;
        const scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.settings = Object.assign(Object.assign({}, settings), settings.ng1);
        scope.options = widgetConfig.options;
        scope.config = widgetConfig;
        scope.forms = {};
        scope.rootId = settings.context.id;
        scope.dashboard = get(widgetConfig, 'settings.dashboardMo');
        let configCmp = '';
        if (!onlyDeviceSelector) {
            if (widgetConfig.settings.configComponent) {
                configCmp = `<c8y-ui-component component-name="'${widgetConfig.settings.configComponent}'" config="config"></c8y-ui-component>`;
            }
            else if (widgetConfig.settings.configTemplateUrl) {
                configCmp = `<ng-include src="'${widgetConfig.settings.configTemplateUrl}'"></ng-include>`;
            }
        }
        element.innerHTML = `
    <ng-form name="forms.componentForm">
      <div class="form-group m-0"
        ng-if="!settings.noDeviceTarget"
        ng-style="{height: settings.hideTarget && '0', overflow: 'hidden'}"
      >
      </div>
      ${configCmp}
    </ng-form>`;
        scope.$watch('forms.componentForm.$invalid', formStatus => {
            this.contextDashboardService.formDisabled = formStatus;
        });
        this.compile(element)(scope);
        this.contextDashboardService.formDisabled = scope.forms.componentForm.$invalid;
        return scope;
    }
}
DashboardBridgeService.decorators = [
    { type: Injectable }
];
DashboardBridgeService.ctorParameters = () => [
    { type: undefined },
    { type: NgZone },
    { type: Router },
    { type: ContextDashboardService }
];
//# sourceMappingURL=data:application/json;base64,