import { CommonModule } from '@angular/common';
import { NgModule, NgZone, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { HOOK_COMPONENTS } from '@c8y/ngx-components';
import { ContextDashboardService } from '@c8y/ngx-components/context-dashboard';
import { Ng1ComponentFactoryService } from './component.factory';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
import { C8yTranslateModule } from '@c8y/ngx-components';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
export class DashboardUpgradeModule {
}
DashboardUpgradeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DeviceSelectorComponent, WidgetComponent],
                entryComponents: [DeviceSelectorComponent, WidgetComponent],
                imports: [CommonModule, C8yTranslateModule, AssetSelectorModule],
                providers: [
                    {
                        provide: DashboardBridgeService,
                        useFactory: dashboardBridgeFactory,
                        deps: [
                            '$injector',
                            NgZone,
                            Router,
                            [new Optional(), ContextDashboardService]
                        ]
                    },
                    { provide: HOOK_COMPONENTS, useClass: Ng1ComponentFactoryService, multi: true }
                ]
            },] }
];
export function dashboardBridgeFactory(injector, ngZone, router, contextDashboardService) {
    return new DashboardBridgeService(injector, ngZone, router, contextDashboardService);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLXVwZ3JhZGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9kYXNoYm9hcmQvZGFzaGJvYXJkLXVwZ3JhZGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFvQjNFLE1BQU0sT0FBTyxzQkFBc0I7OztZQWxCbEMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLHVCQUF1QixFQUFFLGVBQWUsQ0FBQztnQkFDeEQsZUFBZSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsZUFBZSxDQUFDO2dCQUMzRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUM7Z0JBQ2hFLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsc0JBQXNCO3dCQUMvQixVQUFVLEVBQUUsc0JBQXNCO3dCQUNsQyxJQUFJLEVBQUU7NEJBQ0osV0FBVzs0QkFDWCxNQUFNOzRCQUNOLE1BQU07NEJBQ04sQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLHVCQUF1QixDQUFDO3lCQUMxQztxQkFDRjtvQkFDRCxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7aUJBQ2hGO2FBQ0Y7O0FBR0QsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLHVCQUF1QjtJQUN0RixPQUFPLElBQUksc0JBQXNCLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUN2RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlLCBOZ1pvbmUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSE9PS19DT01QT05FTlRTIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvY29udGV4dC1kYXNoYm9hcmQnO1xuaW1wb3J0IHsgTmcxQ29tcG9uZW50RmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2NvbXBvbmVudC5mYWN0b3J5JztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2RldmljZS1zZWxlY3Rvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQzh5VHJhbnNsYXRlTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBc3NldFNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbRGV2aWNlU2VsZWN0b3JDb21wb25lbnQsIFdpZGdldENvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0RldmljZVNlbGVjdG9yQ29tcG9uZW50LCBXaWRnZXRDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBDOHlUcmFuc2xhdGVNb2R1bGUsIEFzc2V0U2VsZWN0b3JNb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlLFxuICAgICAgdXNlRmFjdG9yeTogZGFzaGJvYXJkQnJpZGdlRmFjdG9yeSxcbiAgICAgIGRlcHM6IFtcbiAgICAgICAgJyRpbmplY3RvcicsXG4gICAgICAgIE5nWm9uZSxcbiAgICAgICAgUm91dGVyLFxuICAgICAgICBbbmV3IE9wdGlvbmFsKCksIENvbnRleHREYXNoYm9hcmRTZXJ2aWNlXVxuICAgICAgXVxuICAgIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0NPTVBPTkVOVFMsIHVzZUNsYXNzOiBOZzFDb21wb25lbnRGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZFVwZ3JhZGVNb2R1bGUge31cblxuZXhwb3J0IGZ1bmN0aW9uIGRhc2hib2FyZEJyaWRnZUZhY3RvcnkoaW5qZWN0b3IsIG5nWm9uZSwgcm91dGVyLCBjb250ZXh0RGFzaGJvYXJkU2VydmljZSkge1xuICByZXR1cm4gbmV3IERhc2hib2FyZEJyaWRnZVNlcnZpY2UoaW5qZWN0b3IsIG5nWm9uZSwgcm91dGVyLCBjb250ZXh0RGFzaGJvYXJkU2VydmljZSk7XG59XG4iXX0=