import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';
export class BulkExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(true);
    }
    getBulkDescription(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.fetch(this.getMetadataUrl(contextPath), {
                params: { lang: this.stateService.state.lang }
            });
            const { c8y_DeviceRegistration } = yield res.json();
            if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {
                throw new Error(gettext('The response of the microservice is incomplete. The bulk registration information is missing.'));
            }
            return c8y_DeviceRegistration.bulk;
        });
    }
    upload(csv, contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = this.createBinaryRequestBody(csv);
            const res = yield this.client.fetch(this.getBulkUrl(contextPath), { method, body });
            const data = yield res.json();
            return { res, data };
        });
    }
    getBulkUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/bulk`;
    }
    createBinaryRequestBody(file) {
        const body = new FormData();
        body.append('file', file, file.name);
        return body;
    }
}
BulkExtensibleDeviceRegistrationService.decorators = [
    { type: Injectable }
];
BulkExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlZ2lzdGVyLWRldmljZS9leHRlbnNpYmxlL2J1bGsvZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFXLE1BQU0sYUFBYSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFL0QsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFJekcsTUFBTSxPQUFPLHVDQUF3QyxTQUFRLHVDQUF1QztJQUNsRyxZQUNZLGtCQUFzQyxFQUN0QyxZQUE2QixFQUMvQixNQUFtQjtRQUUzQixLQUFLLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFKOUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFDL0IsV0FBTSxHQUFOLE1BQU0sQ0FBYTtJQUc3QixDQUFDO0lBRUQsOEJBQThCO1FBQzVCLE9BQU8sS0FBSyxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFSyxrQkFBa0IsQ0FBQyxXQUFtQjs7WUFDMUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNwRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO2FBQy9DLENBQUMsQ0FBQztZQUNILE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBRXBELElBQUksQ0FBQyxzQkFBc0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRTtnQkFDM0QsTUFBTSxJQUFJLEtBQUssQ0FDYixPQUFPLENBQ0wsK0ZBQStGLENBQ2hHLENBQ0YsQ0FBQzthQUNIO1lBRUQsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQUM7UUFDckMsQ0FBQztLQUFBO0lBRUssTUFBTSxDQUFDLEdBQVMsRUFBRSxXQUFXOztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDdEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3BGLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzlCLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdkIsQ0FBQztLQUFBO0lBRUQsVUFBVSxDQUFDLFdBQW1CO1FBQzVCLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUN2RCxDQUFDO0lBRU8sdUJBQXVCLENBQUMsSUFBUztRQUN2QyxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUEvQ0YsVUFBVTs7O1lBTkYsa0JBQWtCO1lBQ2xCLGVBQWU7WUFESyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZXJ2aWNlLCBGZXRjaENsaWVudCwgSVJlc3VsdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnVsa0Rlc2NyaXB0aW9uLCBCdWxrUmVzdWx0IH0gZnJvbSAnLi9leHRlbnNpYmxlLWJ1bGstZGV2aWNlLXJlZ2lzdHJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBCYXNlRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9iYXNlLWV4dGVuc2libGUtZGV2aWNlLXJlZ2lzdHJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlciB9IGZyb20gJy4uL2Jhc2UtZGV2aWNlLXJlZ2lzdHJhdGlvbi5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCdWxrRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UgZXh0ZW5kcyBCYXNlRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgYXBwbGljYXRpb25TZXJ2aWNlOiBBcHBsaWNhdGlvblNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHN0YXRlU2VydmljZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudFxuICApIHtcbiAgICBzdXBlcihhcHBsaWNhdGlvblNlcnZpY2UsIHN0YXRlU2VydmljZSk7XG4gIH1cblxuICBnZXREZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcnMoKTogUHJvbWlzZTxFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJbXT4ge1xuICAgIHJldHVybiBzdXBlci5nZXREZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcnModHJ1ZSk7XG4gIH1cblxuICBhc3luYyBnZXRCdWxrRGVzY3JpcHRpb24oY29udGV4dFBhdGg6IHN0cmluZyk6IFByb21pc2U8QnVsa0Rlc2NyaXB0aW9uPiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZmV0Y2godGhpcy5nZXRNZXRhZGF0YVVybChjb250ZXh0UGF0aCksIHtcbiAgICAgIHBhcmFtczogeyBsYW5nOiB0aGlzLnN0YXRlU2VydmljZS5zdGF0ZS5sYW5nIH1cbiAgICB9KTtcbiAgICBjb25zdCB7IGM4eV9EZXZpY2VSZWdpc3RyYXRpb24gfSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICBpZiAoIWM4eV9EZXZpY2VSZWdpc3RyYXRpb24gfHwgIWM4eV9EZXZpY2VSZWdpc3RyYXRpb24uYnVsaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBnZXR0ZXh0KFxuICAgICAgICAgICdUaGUgcmVzcG9uc2Ugb2YgdGhlIG1pY3Jvc2VydmljZSBpcyBpbmNvbXBsZXRlLiBUaGUgYnVsayByZWdpc3RyYXRpb24gaW5mb3JtYXRpb24gaXMgbWlzc2luZy4nXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGM4eV9EZXZpY2VSZWdpc3RyYXRpb24uYnVsaztcbiAgfVxuXG4gIGFzeW5jIHVwbG9hZChjc3Y6IEZpbGUsIGNvbnRleHRQYXRoKTogUHJvbWlzZTxJUmVzdWx0PEJ1bGtSZXN1bHQ+PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgIGNvbnN0IGJvZHkgPSB0aGlzLmNyZWF0ZUJpbmFyeVJlcXVlc3RCb2R5KGNzdik7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZmV0Y2godGhpcy5nZXRCdWxrVXJsKGNvbnRleHRQYXRoKSwgeyBtZXRob2QsIGJvZHkgfSk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIHsgcmVzLCBkYXRhIH07XG4gIH1cblxuICBnZXRCdWxrVXJsKGNvbnRleHRQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmdldFNlcnZpY2VCYXNlVXJsKGNvbnRleHRQYXRoKX0vYnVsa2A7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUJpbmFyeVJlcXVlc3RCb2R5KGZpbGU6IGFueSk6IEZvcm1EYXRhIHtcbiAgICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLCBmaWxlLm5hbWUpO1xuICAgIHJldHVybiBib2R5O1xuICB9XG59XG4iXX0=