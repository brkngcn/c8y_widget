import { Component } from '@angular/core';
import { BulkExtensibleDeviceRegistrationService } from './extensible-bulk-device-registration.service';
import { BsModalService } from 'ngx-bootstrap/modal';
import { ExtensibleBulkDeviceRegistrationModalComponent } from './extensible-bulk-device-registration-modal.component';
export class ExtensibleBulkDeviceRegistrationButtonComponent {
    constructor(bulkExtensibleDeviceRegistrationService, modalService) {
        this.bulkExtensibleDeviceRegistrationService = bulkExtensibleDeviceRegistrationService;
        this.modalService = modalService;
    }
    ngOnInit() {
        this.bulkProvidersMetaData = this.bulkExtensibleDeviceRegistrationService.getDeviceRegistrationProviders();
    }
    click(contextPath) {
        this.modalService.show(ExtensibleBulkDeviceRegistrationModalComponent, {
            initialState: { contextPath },
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
ExtensibleBulkDeviceRegistrationButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'extensible-device-registration-component',
                template: "<div *ngFor=\"let provider of bulkProvidersMetaData | async\">\n  <button\n    title=\"{{ provider.name | translate }}\"\n    type=\"button\"\n    (click)=\"click(provider.contextPath)\"\n  >\n    <i c8yIcon=\"upload\"></i>\n    {{ provider.name | translate }}\n  </button>\n</div>\n"
            },] }
];
ExtensibleBulkDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BulkExtensibleDeviceRegistrationService },
    { type: BsModalService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlZ2lzdGVyLWRldmljZS9leHRlbnNpYmxlL2J1bGsvZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsOENBQThDLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQVF2SCxNQUFNLE9BQU8sK0NBQStDO0lBRzFELFlBQ1UsdUNBQWdGLEVBQ2hGLFlBQTRCO1FBRDVCLDRDQUF1QyxHQUF2Qyx1Q0FBdUMsQ0FBeUM7UUFDaEYsaUJBQVksR0FBWixZQUFZLENBQWdCO0lBQ25DLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO0lBQzdHLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVztRQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDhDQUE4QyxFQUFFO1lBQ3JFLFlBQVksRUFBRSxFQUFFLFdBQVcsRUFBNkQ7WUFDeEYsS0FBSyxFQUFFLFVBQVU7WUFDakIsbUJBQW1CLEVBQUUsSUFBSTtTQUMxQixDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUF2QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwwQ0FBMEM7Z0JBQ3BELHVTQUF3RTthQUN6RTs7O1lBUlEsdUNBQXVDO1lBQ3ZDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnVsa0V4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9leHRlbnNpYmxlLWJ1bGstZGV2aWNlLXJlZ2lzdHJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBFeHRlbnNpYmxlQnVsa0RldmljZVJlZ2lzdHJhdGlvbk1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9leHRlbnNpYmxlLWJ1bGstZGV2aWNlLXJlZ2lzdHJhdGlvbi1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVyIH0gZnJvbSAnLi4vYmFzZS1kZXZpY2UtcmVnaXN0cmF0aW9uLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLWNvbXBvbmVudCcsXG4gIHRlbXBsYXRlVXJsOiAnZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24tYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIEV4dGVuc2libGVCdWxrRGV2aWNlUmVnaXN0cmF0aW9uQnV0dG9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgYnVsa1Byb3ZpZGVyc01ldGFEYXRhOiBQcm9taXNlPEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcltdPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJ1bGtFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZTogQnVsa0V4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5idWxrUHJvdmlkZXJzTWV0YURhdGEgPSB0aGlzLmJ1bGtFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZS5nZXREZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcnMoKTtcbiAgfVxuXG4gIGNsaWNrKGNvbnRleHRQYXRoKSB7XG4gICAgdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhFeHRlbnNpYmxlQnVsa0RldmljZVJlZ2lzdHJhdGlvbk1vZGFsQ29tcG9uZW50LCB7XG4gICAgICBpbml0aWFsU3RhdGU6IHsgY29udGV4dFBhdGggfSBhcyBQYXJ0aWFsPEV4dGVuc2libGVCdWxrRGV2aWNlUmVnaXN0cmF0aW9uTW9kYWxDb21wb25lbnQ+LFxuICAgICAgY2xhc3M6ICdtb2RhbC1zbScsXG4gICAgICBpZ25vcmVCYWNrZHJvcENsaWNrOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==