import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
export class BulkExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(true);
    }
    getBulkDescription(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.fetch(this.getMetadataUrl(contextPath), {
                params: { lang: this.stateService.state.lang }
            });
            const { c8y_DeviceRegistration } = yield res.json();
            if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {
                throw new Error(gettext('The response of the microservice is incomplete. The bulk registration information is missing.'));
            }
            return c8y_DeviceRegistration.bulk;
        });
    }
    upload(csv, contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = this.createBinaryRequestBody(csv);
            const res = yield this.client.fetch(this.getBulkUrl(contextPath), { method, body });
            const data = yield res.json();
            return { res, data };
        });
    }
    getBulkUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/bulk`;
    }
    createBinaryRequestBody(file) {
        const body = new FormData();
        body.append('file', file, file.name);
        return body;
    }
}
BulkExtensibleDeviceRegistrationService.ɵfac = function BulkExtensibleDeviceRegistrationService_Factory(t) { return new (t || BulkExtensibleDeviceRegistrationService)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc2.AppStateService), ɵngcc0.ɵɵinject(ɵngcc1.FetchClient)); };
BulkExtensibleDeviceRegistrationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkExtensibleDeviceRegistrationService, factory: BulkExtensibleDeviceRegistrationService.ɵfac });
BulkExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkExtensibleDeviceRegistrationService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }, { type: ɵngcc2.AppStateService }, { type: ɵngcc1.FetchClient }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcmVnaXN0ZXItZGV2aWNlL2V4dGVuc2libGUvYnVsay9leHRlbnNpYmxlLWJ1bGstZGV2aWNlLXJlZ2lzdHJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQVcsTUFBTSxhQUFhLENBQUM7QUFDdkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRCxPQUFPLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQzs7OztBQUl6RyxNQUFNLE9BQU8sdUNBQXdDLFNBQVEsdUNBQXVDO0FBQ3BHLElBQUUsWUFDWSxrQkFBc0MsRUFDdEMsWUFBNkIsRUFDL0IsTUFBbUI7QUFDNUIsUUFDQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDNUMsUUFMYyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsUUFDdkMsaUJBQVksR0FBWixZQUFZLENBQWlCO0FBQUMsUUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBYTtBQUMvQixJQUVFLENBQUM7QUFDSCxJQUNFLDhCQUE4QjtBQUFLLFFBQ2pDLE9BQU8sS0FBSyxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RELElBQUUsQ0FBQztBQUNILElBQ1Esa0JBQWtCLENBQUMsV0FBbUI7QUFBSTtBQUNkLFlBQWhDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFBRTtBQUMxRSxnQkFBTSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO0FBQ3BELGFBQUssQ0FBQyxDQUFDO0FBQ1AsWUFBSSxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN4RCxZQUNJLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRTtBQUNqRSxnQkFBTSxNQUFNLElBQUksS0FBSyxDQUNiLE9BQU8sQ0FDTCwrRkFBK0YsQ0FDaEcsQ0FDRixDQUFDO0FBQ1IsYUFBSztBQUNMLFlBQ0ksT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQUM7QUFDdkMsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNILElBQ1EsTUFBTSxDQUFDLEdBQVMsRUFBRSxXQUFXO0FBQUk7QUFFcEMsWUFERCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDMUIsWUFBSSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkQsWUFBSSxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4RixZQUFJLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xDLFlBQUksT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUN6QixRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDRSxVQUFVLENBQUMsV0FBbUI7QUFBSSxRQUNoQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0gsSUFDVSx1QkFBdUIsQ0FBQyxJQUFTO0FBQUksUUFDM0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUNoQyxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsUUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDSDttRUFoREMsVUFBVTttTUFDVDtBQUFDO0FBQWlFLFlBUDNELGtCQUFrQjtBQUFJLFlBQ3RCLGVBQWU7QUFBSSxZQURDLFdBQVc7QUFBRzs7O21KQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UsIEZldGNoQ2xpZW50LCBJUmVzdWx0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCdWxrRGVzY3JpcHRpb24sIEJ1bGtSZXN1bHQgfSBmcm9tICcuL2V4dGVuc2libGUtYnVsay1kZXZpY2UtcmVnaXN0cmF0aW9uLm1vZGVsJztcbmltcG9ydCB7IEJhc2VFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSB9IGZyb20gJy4uL2Jhc2UtZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVyIH0gZnJvbSAnLi4vYmFzZS1kZXZpY2UtcmVnaXN0cmF0aW9uLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJ1bGtFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSBleHRlbmRzIEJhc2VFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBhcHBsaWNhdGlvblNlcnZpY2U6IEFwcGxpY2F0aW9uU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgc3RhdGVTZXJ2aWNlOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50XG4gICkge1xuICAgIHN1cGVyKGFwcGxpY2F0aW9uU2VydmljZSwgc3RhdGVTZXJ2aWNlKTtcbiAgfVxuXG4gIGdldERldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVycygpOiBQcm9taXNlPEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcltdPiB7XG4gICAgcmV0dXJuIHN1cGVyLmdldERldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVycyh0cnVlKTtcbiAgfVxuXG4gIGFzeW5jIGdldEJ1bGtEZXNjcmlwdGlvbihjb250ZXh0UGF0aDogc3RyaW5nKTogUHJvbWlzZTxCdWxrRGVzY3JpcHRpb24+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5mZXRjaCh0aGlzLmdldE1ldGFkYXRhVXJsKGNvbnRleHRQYXRoKSwge1xuICAgICAgcGFyYW1zOiB7IGxhbmc6IHRoaXMuc3RhdGVTZXJ2aWNlLnN0YXRlLmxhbmcgfVxuICAgIH0pO1xuICAgIGNvbnN0IHsgYzh5X0RldmljZVJlZ2lzdHJhdGlvbiB9ID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgIGlmICghYzh5X0RldmljZVJlZ2lzdHJhdGlvbiB8fCAhYzh5X0RldmljZVJlZ2lzdHJhdGlvbi5idWxrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGdldHRleHQoXG4gICAgICAgICAgJ1RoZSByZXNwb25zZSBvZiB0aGUgbWljcm9zZXJ2aWNlIGlzIGluY29tcGxldGUuIFRoZSBidWxrIHJlZ2lzdHJhdGlvbiBpbmZvcm1hdGlvbiBpcyBtaXNzaW5nLidcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYzh5X0RldmljZVJlZ2lzdHJhdGlvbi5idWxrO1xuICB9XG5cbiAgYXN5bmMgdXBsb2FkKGNzdjogRmlsZSwgY29udGV4dFBhdGgpOiBQcm9taXNlPElSZXN1bHQ8QnVsa1Jlc3VsdD4+IHtcbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgY29uc3QgYm9keSA9IHRoaXMuY3JlYXRlQmluYXJ5UmVxdWVzdEJvZHkoY3N2KTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5mZXRjaCh0aGlzLmdldEJ1bGtVcmwoY29udGV4dFBhdGgpLCB7IG1ldGhvZCwgYm9keSB9KTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4geyByZXMsIGRhdGEgfTtcbiAgfVxuXG4gIGdldEJ1bGtVcmwoY29udGV4dFBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuZ2V0U2VydmljZUJhc2VVcmwoY29udGV4dFBhdGgpfS9idWxrYDtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQmluYXJ5UmVxdWVzdEJvZHkoZmlsZTogYW55KTogRm9ybURhdGEge1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBib2R5LmFwcGVuZCgnZmlsZScsIGZpbGUsIGZpbGUubmFtZSk7XG4gICAgcmV0dXJuIGJvZHk7XG4gIH1cbn1cbiJdfQ==