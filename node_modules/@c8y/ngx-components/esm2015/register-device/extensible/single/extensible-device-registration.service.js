import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
export class ExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getSchema(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.fetch(this.getMetadataUrl(contextPath), { params: { lang: this.stateService.state.lang } });
            const data = yield response.json();
            if (!data || !data.c8y_DeviceRegistration) {
                throw new Error(gettext('The response of the microservice is incomplete. The device registration information is missing.'));
            }
            return data.c8y_DeviceRegistration;
        });
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(false);
    }
    registerDevice(contextPath, model) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = JSON.stringify(model);
            const headers = { 'content-type': 'application/json', accept: 'application/json' };
            const res = yield this.client.fetch(this.getServiceBaseUrl(contextPath), { method, body, headers });
            const data = yield res.json();
            return { res, data };
        });
    }
}
ExtensibleDeviceRegistrationService.ɵfac = function ExtensibleDeviceRegistrationService_Factory(t) { return new (t || ExtensibleDeviceRegistrationService)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc2.AppStateService), ɵngcc0.ɵɵinject(ɵngcc1.FetchClient)); };
ExtensibleDeviceRegistrationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ExtensibleDeviceRegistrationService, factory: ExtensibleDeviceRegistrationService.ɵfac });
ExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExtensibleDeviceRegistrationService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }, { type: ɵngcc2.AppStateService }, { type: ɵngcc1.FetchClient }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlZ2lzdGVyLWRldmljZS9leHRlbnNpYmxlL3NpbmdsZS9leHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFXLE1BQU0sYUFBYSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sZ0RBQWdELENBQUM7Ozs7QUFLekcsTUFBTSxPQUFPLG1DQUFvQyxTQUFRLHVDQUF1QztBQUNoRyxJQUFFLFlBQ1ksa0JBQXNDLEVBQ3RDLFlBQTZCLEVBQy9CLE1BQW1CO0FBQzVCLFFBQ0MsS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzVDLFFBTGMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUFDLFFBQ3ZDLGlCQUFZLEdBQVosWUFBWSxDQUFpQjtBQUFDLFFBQ2hDLFdBQU0sR0FBTixNQUFNLENBQWE7QUFDL0IsSUFFRSxDQUFDO0FBQ0gsSUFDUSxTQUFTLENBQUMsV0FBbUI7QUFBSTtBQUN4QixZQUFiLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkksWUFBSSxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN2QyxZQUNJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7QUFDL0MsZ0JBQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsaUdBQWlHLENBQUMsQ0FBQyxDQUFDO0FBQ2xJLGFBQUs7QUFDTCxZQUNJLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDO0FBQ3ZDLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFLDhCQUE4QjtBQUFLLFFBQ2pDLE9BQU8sS0FBSyxDQUFDLDhCQUE4QixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELElBQUUsQ0FBQztBQUNILElBQ1EsY0FBYyxDQUFDLFdBQW1CLEVBQUUsS0FBVTtBQUFJO0FBRTlDLFlBRFIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQzFCLFlBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxZQUFJLE1BQU0sT0FBTyxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxDQUFDO0FBQ3ZGLFlBQUksTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDeEcsWUFBSSxNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQyxZQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDekIsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNIOytEQWpDQyxVQUFVO3VMQUNUO0FBQUM7QUFBNkQsWUFQdkQsa0JBQWtCO0FBQUksWUFDdEIsZUFBZTtBQUFJLFlBREMsV0FBVztBQUFHOzs7bUpBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSwgRmV0Y2hDbGllbnQsIElSZXN1bHQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJhc2VFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSB9IGZyb20gJy4uL2Jhc2UtZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNjaGVtYSB9IGZyb20gJy4vZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLm1vZGVsJztcbmltcG9ydCB7IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlciB9IGZyb20gJy4uL2Jhc2UtZGV2aWNlLXJlZ2lzdHJhdGlvbi5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSBleHRlbmRzIEJhc2VFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBhcHBsaWNhdGlvblNlcnZpY2U6IEFwcGxpY2F0aW9uU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgc3RhdGVTZXJ2aWNlOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50XG4gICkge1xuICAgIHN1cGVyKGFwcGxpY2F0aW9uU2VydmljZSwgc3RhdGVTZXJ2aWNlKTtcbiAgfVxuXG4gIGFzeW5jIGdldFNjaGVtYShjb250ZXh0UGF0aDogc3RyaW5nKTogUHJvbWlzZTxFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2NoZW1hPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNsaWVudC5mZXRjaCh0aGlzLmdldE1ldGFkYXRhVXJsKGNvbnRleHRQYXRoKSwgeyBwYXJhbXM6IHsgbGFuZzogdGhpcy5zdGF0ZVNlcnZpY2Uuc3RhdGUubGFuZyB9IH0pO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEuYzh5X0RldmljZVJlZ2lzdHJhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGdldHRleHQoJ1RoZSByZXNwb25zZSBvZiB0aGUgbWljcm9zZXJ2aWNlIGlzIGluY29tcGxldGUuIFRoZSBkZXZpY2UgcmVnaXN0cmF0aW9uIGluZm9ybWF0aW9uIGlzIG1pc3NpbmcuJykpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhLmM4eV9EZXZpY2VSZWdpc3RyYXRpb247XG4gIH1cblxuICBnZXREZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcnMoKTogUHJvbWlzZTxFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJbXT4ge1xuICAgIHJldHVybiBzdXBlci5nZXREZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcnMoZmFsc2UpO1xuICB9XG5cbiAgYXN5bmMgcmVnaXN0ZXJEZXZpY2UoY29udGV4dFBhdGg6IHN0cmluZywgbW9kZWw6IGFueSk6IFByb21pc2U8SVJlc3VsdDxhbnk+PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShtb2RlbCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5mZXRjaCh0aGlzLmdldFNlcnZpY2VCYXNlVXJsKGNvbnRleHRQYXRoKSwgeyBtZXRob2QsIGJvZHksIGhlYWRlcnMgfSk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIHsgcmVzLCBkYXRhIH07XG4gIH1cblxufVxuIl19