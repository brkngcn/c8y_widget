import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';
export class ExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getSchema(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.fetch(this.getMetadataUrl(contextPath), { params: { lang: this.stateService.state.lang } });
            const data = yield response.json();
            if (!data || !data.c8y_DeviceRegistration) {
                throw new Error(gettext('The response of the microservice is incomplete. The device registration information is missing.'));
            }
            return data.c8y_DeviceRegistration;
        });
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(false);
    }
    registerDevice(contextPath, model) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = JSON.stringify(model);
            const headers = { 'content-type': 'application/json', accept: 'application/json' };
            const res = yield this.client.fetch(this.getServiceBaseUrl(contextPath), { method, body, headers });
            const data = yield res.json();
            return { res, data };
        });
    }
}
ExtensibleDeviceRegistrationService.decorators = [
    { type: Injectable }
];
ExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9yZWdpc3Rlci1kZXZpY2UvZXh0ZW5zaWJsZS9zaW5nbGUvZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBVyxNQUFNLGFBQWEsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBS3pHLE1BQU0sT0FBTyxtQ0FBb0MsU0FBUSx1Q0FBdUM7SUFDOUYsWUFDWSxrQkFBc0MsRUFDdEMsWUFBNkIsRUFDL0IsTUFBbUI7UUFFM0IsS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBSjlCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsaUJBQVksR0FBWixZQUFZLENBQWlCO1FBQy9CLFdBQU0sR0FBTixNQUFNLENBQWE7SUFHN0IsQ0FBQztJQUVLLFNBQVMsQ0FBQyxXQUFtQjs7WUFDakMsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMvSCxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVuQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFO2dCQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxpR0FBaUcsQ0FBQyxDQUFDLENBQUM7YUFDN0g7WUFFRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztRQUNyQyxDQUFDO0tBQUE7SUFFRCw4QkFBOEI7UUFDNUIsT0FBTyxLQUFLLENBQUMsOEJBQThCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVLLGNBQWMsQ0FBQyxXQUFtQixFQUFFLEtBQVU7O1lBQ2xELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUN0QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25DLE1BQU0sT0FBTyxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxDQUFDO1lBQ25GLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ3BHLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzlCLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdkIsQ0FBQztLQUFBOzs7WUFoQ0YsVUFBVTs7O1lBTkYsa0JBQWtCO1lBQ2xCLGVBQWU7WUFESyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZXJ2aWNlLCBGZXRjaENsaWVudCwgSVJlc3VsdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQmFzZUV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1leHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2NoZW1hIH0gZnJvbSAnLi9leHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVyIH0gZnJvbSAnLi4vYmFzZS1kZXZpY2UtcmVnaXN0cmF0aW9uLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlIGV4dGVuZHMgQmFzZUV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGFwcGxpY2F0aW9uU2VydmljZTogQXBwbGljYXRpb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBzdGF0ZVNlcnZpY2U6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnRcbiAgKSB7XG4gICAgc3VwZXIoYXBwbGljYXRpb25TZXJ2aWNlLCBzdGF0ZVNlcnZpY2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0U2NoZW1hKGNvbnRleHRQYXRoOiBzdHJpbmcpOiBQcm9taXNlPEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TY2hlbWE+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmZldGNoKHRoaXMuZ2V0TWV0YWRhdGFVcmwoY29udGV4dFBhdGgpLCB7IHBhcmFtczogeyBsYW5nOiB0aGlzLnN0YXRlU2VydmljZS5zdGF0ZS5sYW5nIH0gfSk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgIGlmICghZGF0YSB8fCAhZGF0YS5jOHlfRGV2aWNlUmVnaXN0cmF0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZ2V0dGV4dCgnVGhlIHJlc3BvbnNlIG9mIHRoZSBtaWNyb3NlcnZpY2UgaXMgaW5jb21wbGV0ZS4gVGhlIGRldmljZSByZWdpc3RyYXRpb24gaW5mb3JtYXRpb24gaXMgbWlzc2luZy4nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGEuYzh5X0RldmljZVJlZ2lzdHJhdGlvbjtcbiAgfVxuXG4gIGdldERldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVycygpOiBQcm9taXNlPEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcltdPiB7XG4gICAgcmV0dXJuIHN1cGVyLmdldERldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVycyhmYWxzZSk7XG4gIH1cblxuICBhc3luYyByZWdpc3RlckRldmljZShjb250ZXh0UGF0aDogc3RyaW5nLCBtb2RlbDogYW55KTogUHJvbWlzZTxJUmVzdWx0PGFueT4+IHtcbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KG1vZGVsKTtcbiAgICBjb25zdCBoZWFkZXJzID0geyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmZldGNoKHRoaXMuZ2V0U2VydmljZUJhc2VVcmwoY29udGV4dFBhdGgpLCB7IG1ldGhvZCwgYm9keSwgaGVhZGVycyB9KTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4geyByZXMsIGRhdGEgfTtcbiAgfVxuXG59XG4iXX0=