import { __awaiter } from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { C8yStepper, gettext } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { ExtensibleDeviceRegistrationService } from './extensible-device-registration.service';
import { RegisterDeviceService } from '../../register-device.service';
import { STEP_STATE } from '@angular/cdk/stepper';
export class ExtensibleDeviceRegistrationStepperComponent {
    constructor(customProviderService, registerDeviceService, bsModalRef) {
        this.customProviderService = customProviderService;
        this.registerDeviceService = registerDeviceService;
        this.bsModalRef = bsModalRef;
        this.pendingStatus = false;
        this.forms = [];
        this.model = {};
        this.SERVER_ERROR = gettext('Cannot register your device.');
        this.SUCCESSFUL_REGISTRATION = gettext('Your device was successfully registered.');
        this.NO_CONNECTION = gettext('Unable to reach the microservice.');
    }
    ngOnInit() {
        this.steps.forEach(step => this.forms.push(new FormGroup({})));
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pendingStatus = true;
            this.errorMessage = null;
            const { res, data } = yield this.customProviderService.registerDevice(this.contextPath, this.model)
                .catch(err => {
                return {
                    res: undefined,
                    data: undefined
                };
            })
                .finally(() => {
                this.pendingStatus = false;
                this.stepper.next();
            });
            if (res && data) {
                if (res.status >= 400 && res.status < 500) {
                    this.handleError(data.message || this.SERVER_ERROR);
                }
                else if (res.status >= 500) {
                    this.handleError(this.SERVER_ERROR);
                }
                else {
                    this.message = this.SUCCESSFUL_REGISTRATION;
                }
            }
            else {
                this.handleError(this.NO_CONNECTION);
            }
        });
    }
    close() {
        this.bsModalRef.hide();
    }
    complete() {
        this.registerDeviceService.list();
        this.bsModalRef.hide();
    }
    goToFirstStep() {
        this.stepper.selectedIndex = 0;
    }
    isRegistrationStep() {
        return this.stepper.selectedIndex === this.steps.length - 1;
    }
    finalStepStatus() {
        if (this.stepper.selectedIndex === this.steps.length) {
            if (this.errorMessage) {
                return STEP_STATE.ERROR;
            }
            else {
                return STEP_STATE.DONE;
            }
        }
        else {
            return STEP_STATE.NUMBER;
        }
    }
    handleError(message) {
        this.errorMessage = message;
    }
}
ExtensibleDeviceRegistrationStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-extensible-device-registration-stepper',
                template: "<c8y-stepper\n  [disableProgressButtons]=\"true\"\n  [disableDefaultIcons]=\"{ edit: true, done: false }\"\n  [customClasses]=\"['m-40', 'm-t-16', 'm-b-16']\"\n  linear\n>\n  <cdk-step *ngFor=\"let step of steps; let i = index\" [stepControl]=\"forms[i]\" [label]=\"labels[i]\">\n    <c8y-form-group class=\"form-group p-24 p-b-0 p-t-16\">\n      <formly-form [form]=\"forms[i]\" [fields]=\"step\" [model]=\"model\"></formly-form>\n    </c8y-form-group>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: true, next: true }\"\n      [labels]=\"{ next: 'Register' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"save()\"\n      [pending]=\"pendingStatus\"\n      [disabled]=\"forms[i].invalid\"\n    ></c8y-stepper-buttons>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"!isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: i !== 0, next: true }\"\n      [disabled]=\"forms[i].invalid\"\n      (onCancel)=\"close()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n  <cdk-step [state]=\"finalStepStatus()\" label=\"{{ 'Summary' | translate }}\">\n    <c8y-operation-result\n      *ngIf=\"!errorMessage; else errorInfo\"\n      text=\"{{ message | translate }}\"\n      [size]=\"84\"\n      [vertical]=\"true\"\n      type=\"success\"\n      class=\"lead\"\n    ></c8y-operation-result>\n    <ng-template #errorInfo>\n      <c8y-operation-result\n        text=\"{{ errorMessage | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </ng-template>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      [showButtons]=\"{ cancel: errorMessage, back: errorMessage, next: !errorMessage }\"\n      [labels]=\"{ back: 'Fix issue', next: 'Close' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"complete()\"\n      (onBack)=\"goToFirstStep()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n</c8y-stepper>\n"
            },] }
];
ExtensibleDeviceRegistrationStepperComponent.ctorParameters = () => [
    { type: ExtensibleDeviceRegistrationService },
    { type: RegisterDeviceService },
    { type: BsModalRef }
];
ExtensibleDeviceRegistrationStepperComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }],
    contextPath: [{ type: Input }],
    labels: [{ type: Input }],
    steps: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLXN0ZXBwZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcmVnaXN0ZXItZGV2aWNlL2V4dGVuc2libGUvc2luZ2xlL2V4dGVuc2libGUtZGV2aWNlLXJlZ2lzdHJhdGlvbi1zdGVwcGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV0RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFPbEQsTUFBTSxPQUFPLDRDQUE0QztJQWtCdkQsWUFDVSxxQkFBMEQsRUFDMUQscUJBQTRDLEVBQzVDLFVBQXNCO1FBRnRCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBcUM7UUFDMUQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBakJoQyxrQkFBYSxHQUFZLEtBQUssQ0FBQztRQUMvQixVQUFLLEdBQWdCLEVBQUUsQ0FBQztRQUN4QixVQUFLLEdBQVEsRUFBRSxDQUFDO1FBUUMsaUJBQVksR0FBRyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUN2RCw0QkFBdUIsR0FBRyxPQUFPLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUM5RSxrQkFBYSxH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O3NCQWtCaEIsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7MEJBR3RDLEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEM4eVN0ZXBwZXIsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9leHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBSZWdpc3RlckRldmljZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9yZWdpc3Rlci1kZXZpY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgU1RFUF9TVEFURSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWV4dGVuc2libGUtZGV2aWNlLXJlZ2lzdHJhdGlvbi1zdGVwcGVyJyxcbiAgdGVtcGxhdGVVcmw6ICdleHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24tc3RlcHBlci5jb21wb25lbnQuaHRtbCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU3RlcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgbWVzc2FnZTogc3RyaW5nO1xuICBlcnJvck1lc3NhZ2U6IHN0cmluZztcbiAgcGVuZGluZ1N0YXR1czogYm9vbGVhbiA9IGZhbHNlO1xuICBmb3JtczogRm9ybUdyb3VwW10gPSBbXTtcbiAgbW9kZWw6IGFueSA9IHt9O1xuICBAVmlld0NoaWxkKEM4eVN0ZXBwZXIsIHsgc3RhdGljOiB0cnVlIH0pXG4gIHN0ZXBwZXI6IEM4eVN0ZXBwZXI7XG5cbiAgQElucHV0KCkgY29udGV4dFBhdGg6IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWxzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgc3RlcHM6IEZvcm1seUZpZWxkQ29uZmlnW11bXTtcblxuICBwcml2YXRlIHJlYWRvbmx5IFNFUlZFUl9FUlJPUiA9IGdldHRleHQoJ0Nhbm5vdCByZWdpc3RlciB5b3VyIGRldmljZS4nKTtcbiAgcHJpdmF0ZSByZWFkb25seSBTVUNDRVNTRlVMX1JFR0lTVFJBVElPTiA9IGdldHRleHQoJ1lvdXIgZGV2aWNlIHdhcyBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZC4nKTtcbiAgcHJpdmF0ZSByZWFkb25seSBOT19DT05ORUNUSU9OID0gZ2V0dGV4dCgnVW5hYmxlIHRvIHJlYWNoIHRoZSBtaWNyb3NlcnZpY2UuJyk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjdXN0b21Qcm92aWRlclNlcnZpY2U6IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVnaXN0ZXJEZXZpY2VTZXJ2aWNlOiBSZWdpc3RlckRldmljZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBic01vZGFsUmVmOiBCc01vZGFsUmVmXG4gICkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdGVwcy5mb3JFYWNoKHN0ZXAgPT4gdGhpcy5mb3Jtcy5wdXNoKG5ldyBGb3JtR3JvdXAoe30pKSk7XG4gIH1cblxuICBhc3luYyBzYXZlKCkge1xuICAgIHRoaXMucGVuZGluZ1N0YXR1cyA9IHRydWU7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBudWxsO1xuICAgIGNvbnN0IHsgcmVzLCBkYXRhIH0gPSBhd2FpdCB0aGlzLmN1c3RvbVByb3ZpZGVyU2VydmljZS5yZWdpc3RlckRldmljZSh0aGlzLmNvbnRleHRQYXRoLCB0aGlzLm1vZGVsKVxuICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzOiB1bmRlZmluZWQsXG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9KVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZ1N0YXR1cyA9IGZhbHNlO1xuICAgICAgdGhpcy5zdGVwcGVyLm5leHQoKTtcbiAgICB9KTtcblxuICAgIGlmIChyZXMgJiYgZGF0YSkge1xuICAgICAgaWYgKHJlcy5zdGF0dXMgPj0gNDAwICYmIHJlcy5zdGF0dXMgPCA1MDApIHtcbiAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihkYXRhLm1lc3NhZ2UgfHwgdGhpcy5TRVJWRVJfRVJST1IpO1xuICAgICAgfSBlbHNlIGlmIChyZXMuc3RhdHVzID49IDUwMCkge1xuICAgICAgICB0aGlzLmhhbmRsZUVycm9yKHRoaXMuU0VSVkVSX0VSUk9SKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuU1VDQ0VTU0ZVTF9SRUdJU1RSQVRJT047XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGFuZGxlRXJyb3IodGhpcy5OT19DT05ORUNUSU9OKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLmJzTW9kYWxSZWYuaGlkZSgpO1xuICB9XG5cbiAgY29tcGxldGUoKSB7XG4gICAgdGhpcy5yZWdpc3RlckRldmljZVNlcnZpY2UubGlzdCgpO1xuICAgIHRoaXMuYnNNb2RhbFJlZi5oaWRlKCk7XG4gIH1cblxuICBnb1RvRmlyc3RTdGVwKCkge1xuICAgIHRoaXMuc3RlcHBlci5zZWxlY3RlZEluZGV4ID0gMDtcbiAgfVxuXG4gIGlzUmVnaXN0cmF0aW9uU3RlcCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGVwcGVyLnNlbGVjdGVkSW5kZXggPT09IHRoaXMuc3RlcHMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIGZpbmFsU3RlcFN0YXR1cygpIHtcbiAgICBpZiAodGhpcy5zdGVwcGVyLnNlbGVjdGVkSW5kZXggPT09IHRoaXMuc3RlcHMubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5lcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIFNURVBfU1RBVEUuRVJST1I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gU1RFUF9TVEFURS5ET05FO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gU1RFUF9TVEFURS5OVU1CRVI7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cbn1cbiJdfQ==