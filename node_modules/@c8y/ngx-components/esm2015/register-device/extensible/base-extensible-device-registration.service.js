import { __awaiter } from "tslib";
import { ApplicationType } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
import { flatMap } from 'lodash-es';
export class BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService) {
        this.applicationService = applicationService;
        this.stateService = stateService;
    }
    getMetadataUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/metadata`;
    }
    getServiceBaseUrl(contextPath) {
        if (!contextPath || contextPath.length === 0) {
            throw new Error(gettext('The URL of the microservice is misconfigured. A context path is missing.'));
        }
        return `/service/${contextPath}/deviceRegistration`;
    }
    getDeviceRegistrationProviders(bulk) {
        return __awaiter(this, void 0, void 0, function* () {
            let providers = [];
            const microservices = yield this.listMicroservicesByUser();
            if (microservices && microservices.length > 0) {
                providers = this.getProvidersFromManifestExtensions(microservices, bulk).concat(this.getProvidersFromExtensions(microservices, bulk));
            }
            return providers;
        });
    }
    listMicroservicesByUser() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser((_c = (_b = (_a = this.stateService) === null || _a === void 0 ? void 0 : _a.currentUser) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.userName, {
                dropOverwrittenApps: true,
                noPaging: true,
                pageSize: 100,
                withTotalPages: true
            });
            return data === null || data === void 0 ? void 0 : data.filter(({ type }) => type === ApplicationType.MICROSERVICE);
        });
    }
    getProvidersFromManifestExtensions(applications, bulk) {
        return flatMap(applications, application => {
            var _a, _b;
            return (_b = (_a = application === null || application === void 0 ? void 0 : application.manifest) === null || _a === void 0 ? void 0 : _a.extensions) === null || _b === void 0 ? void 0 : _b.map(extension => {
                return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    getProvidersFromExtensions(applications, bulk) {
        return flatMap(applications, application => {
            var _a;
            return (_a = application.extensions) === null || _a === void 0 ? void 0 : _a.map(extension => {
                return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    appSupportingExtensibleDeviceRegistrationForm(extension, bulk) {
        if (bulk) {
            return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleBulkDeviceRegistration';
        }
        else {
            return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleDeviceRegistration';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1leHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3JlZ2lzdGVyLWRldmljZS9leHRlbnNpYmxlL2Jhc2UtZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBc0IsZUFBZSxFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUNoRixPQUFPLEVBQW1CLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHcEMsTUFBTSxPQUFPLHVDQUF1QztJQUNsRCxZQUNZLGtCQUFzQyxFQUN0QyxZQUE2QjtRQUQ3Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLGlCQUFZLEdBQVosWUFBWSxDQUFpQjtJQUN0QyxDQUFDO0lBRU0sY0FBYyxDQUFDLFdBQW1CO1FBQzFDLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUMzRCxDQUFDO0lBRVMsaUJBQWlCLENBQUMsV0FBbUI7UUFDN0MsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQywwRUFBMEUsQ0FBQyxDQUFDLENBQUM7U0FDdEc7UUFDRCxPQUFPLFlBQVksV0FBVyxxQkFBcUIsQ0FBQztJQUN0RCxDQUFDO0lBRWUsOEJBQThCLENBQzVDLElBQWE7O1lBRWIsSUFBSSxTQUFTLEdBQTJDLEVBQUUsQ0FBQztZQUMzRCxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQzNELElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QyxTQUFTLEdBQUcsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQzdFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQ3JELENBQUM7YUFDSDtZQUNELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7S0FBQTtJQUVhLHVCQUF1Qjs7O1lBQ25DLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQ3ZELE1BQUEsTUFBQSxNQUFBLElBQUksQ0FBQyxZQUFZLDBDQUFFLFdBQVcsMENBQUUsS0FBSywwQ0FBRSxRQUFRLEVBQy9DO2dCQUNFLG1CQUFtQixFQUFFLElBQUk7Z0JBQ3pCLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFFBQVEsRUFBRSxHQUFHO2dCQUNiLGNBQWMsRUFBRSxJQUFJO2FBQ3JCLENBQ0YsQ0FBQztZQUNGLE9BQU8sSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7O0tBQzFFO0lBRU8sa0NBQWtDLENBQ3hDLFlBQTRCLEVBQzVCLElBQWE7UUFFYixPQUFPLE9BQU8sQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLEVBQUU7O1lBQ3pDLE9BQU8sTUFBQSxNQUFBLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxRQUFRLDBDQUFFLFVBQVUsMENBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLGdDQUFLLFNBQVMsS0FBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsR0FBMEIsQ0FBQztZQUN4RixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyw2Q0FBNkMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRU8sMEJBQTBCLENBQUMsWUFBNEIsRUFBRSxJQUFhO1FBQzVFLE9BQU8sT0FBTyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsRUFBRTs7WUFDekMsT0FBTyxNQUFBLFdBQVcsQ0FBQyxVQUFVLDBDQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDN0MsT0FBTyxnQ0FBSyxTQUFTLEtBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEdBQTBDLENBQUM7WUFDeEcsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkNBQTZDLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUVPLDZDQUE2QyxDQUFDLFNBQStDLEVBQUUsSUFBYTtRQUNsSCxJQUFJLElBQUksRUFBRTtZQUNSLE9BQU8sQ0FBQSxTQUFTLGFBQVQsU0FBUyx1QkFBVCxTQUFTLENBQUUsSUFBSSxNQUFLLGtDQUFrQyxDQUFDO1NBQy9EO2FBQU07WUFDTCxPQUFPLENBQUEsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLElBQUksTUFBSyw4QkFBOEIsQ0FBQztTQUMzRDtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSwgQXBwbGljYXRpb25UeXBlLCBJQXBwbGljYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGZsYXRNYXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25FeHRlbnNpb24sIEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlciB9IGZyb20gJy4vYmFzZS1kZXZpY2UtcmVnaXN0cmF0aW9uLm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIEJhc2VFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBhcHBsaWNhdGlvblNlcnZpY2U6IEFwcGxpY2F0aW9uU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgc3RhdGVTZXJ2aWNlOiBBcHBTdGF0ZVNlcnZpY2VcbiAgKSB7fVxuXG4gIHByb3RlY3RlZCBnZXRNZXRhZGF0YVVybChjb250ZXh0UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5nZXRTZXJ2aWNlQmFzZVVybChjb250ZXh0UGF0aCl9L21ldGFkYXRhYDtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTZXJ2aWNlQmFzZVVybChjb250ZXh0UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIWNvbnRleHRQYXRoIHx8IGNvbnRleHRQYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGdldHRleHQoJ1RoZSBVUkwgb2YgdGhlIG1pY3Jvc2VydmljZSBpcyBtaXNjb25maWd1cmVkLiBBIGNvbnRleHQgcGF0aCBpcyBtaXNzaW5nLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGAvc2VydmljZS8ke2NvbnRleHRQYXRofS9kZXZpY2VSZWdpc3RyYXRpb25gO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGdldERldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVycyhcbiAgICBidWxrOiBib29sZWFuXG4gICk6IFByb21pc2U8RXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVyW10+IHtcbiAgICBsZXQgcHJvdmlkZXJzOiBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJbXSA9IFtdO1xuICAgIGNvbnN0IG1pY3Jvc2VydmljZXMgPSBhd2FpdCB0aGlzLmxpc3RNaWNyb3NlcnZpY2VzQnlVc2VyKCk7XG4gICAgaWYgKG1pY3Jvc2VydmljZXMgJiYgbWljcm9zZXJ2aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBwcm92aWRlcnMgPSB0aGlzLmdldFByb3ZpZGVyc0Zyb21NYW5pZmVzdEV4dGVuc2lvbnMobWljcm9zZXJ2aWNlcywgYnVsaykuY29uY2F0KFxuICAgICAgICB0aGlzLmdldFByb3ZpZGVyc0Zyb21FeHRlbnNpb25zKG1pY3Jvc2VydmljZXMsIGJ1bGspXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdmlkZXJzO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsaXN0TWljcm9zZXJ2aWNlc0J5VXNlcigpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBwbGljYXRpb25TZXJ2aWNlLmxpc3RCeVVzZXIoXG4gICAgICB0aGlzLnN0YXRlU2VydmljZT8uY3VycmVudFVzZXI/LnZhbHVlPy51c2VyTmFtZSxcbiAgICAgIHtcbiAgICAgICAgZHJvcE92ZXJ3cml0dGVuQXBwczogdHJ1ZSxcbiAgICAgICAgbm9QYWdpbmc6IHRydWUsXG4gICAgICAgIHBhZ2VTaXplOiAxMDAsXG4gICAgICAgIHdpdGhUb3RhbFBhZ2VzOiB0cnVlXG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gZGF0YT8uZmlsdGVyKCh7IHR5cGUgfSkgPT4gdHlwZSA9PT0gQXBwbGljYXRpb25UeXBlLk1JQ1JPU0VSVklDRSk7XG4gIH1cblxuICBwcml2YXRlIGdldFByb3ZpZGVyc0Zyb21NYW5pZmVzdEV4dGVuc2lvbnMoXG4gICAgYXBwbGljYXRpb25zOiBJQXBwbGljYXRpb25bXSxcbiAgICBidWxrOiBib29sZWFuXG4gICk6IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcltdIHtcbiAgICByZXR1cm4gZmxhdE1hcChhcHBsaWNhdGlvbnMsIGFwcGxpY2F0aW9uID0+IHtcbiAgICAgIHJldHVybiBhcHBsaWNhdGlvbj8ubWFuaWZlc3Q/LmV4dGVuc2lvbnM/Lm1hcChleHRlbnNpb24gPT4ge1xuICAgICAgICByZXR1cm4geyAuLi5leHRlbnNpb24sIGNvbnRleHRQYXRoOiBhcHBsaWNhdGlvbi5jb250ZXh0UGF0aCB9IGFzIEFwcGxpY2F0aW9uRXh0ZW5zaW9uO1xuICAgICAgfSk7XG4gICAgfSkuZmlsdGVyKHByb3ZpZGVyID0+IHRoaXMuYXBwU3VwcG9ydGluZ0V4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Gb3JtKHByb3ZpZGVyLCBidWxrKSk7XG4gIH1cblxuICBwcml2YXRlIGdldFByb3ZpZGVyc0Zyb21FeHRlbnNpb25zKGFwcGxpY2F0aW9uczogSUFwcGxpY2F0aW9uW10sIGJ1bGs6IGJvb2xlYW4pOiBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJbXSB7XG4gICAgcmV0dXJuIGZsYXRNYXAoYXBwbGljYXRpb25zLCBhcHBsaWNhdGlvbiA9PiB7XG4gICAgICByZXR1cm4gYXBwbGljYXRpb24uZXh0ZW5zaW9ucz8ubWFwKGV4dGVuc2lvbiA9PiB7XG4gICAgICAgIHJldHVybiB7IC4uLmV4dGVuc2lvbiwgY29udGV4dFBhdGg6IGFwcGxpY2F0aW9uLmNvbnRleHRQYXRoIH0gYXMgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVyO1xuICAgICAgfSk7XG4gICAgfSkuZmlsdGVyKHByb3ZpZGVyID0+IHRoaXMuYXBwU3VwcG9ydGluZ0V4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Gb3JtKHByb3ZpZGVyLCBidWxrKSk7XG4gIH1cblxuICBwcml2YXRlIGFwcFN1cHBvcnRpbmdFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uRm9ybShleHRlbnNpb246IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlciwgYnVsazogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGlmIChidWxrKSB7XG4gICAgICByZXR1cm4gZXh0ZW5zaW9uPy50eXBlID09PSAnZXh0ZW5zaWJsZUJ1bGtEZXZpY2VSZWdpc3RyYXRpb24nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXh0ZW5zaW9uPy50eXBlID09PSAnZXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvbic7XG4gICAgfVxuICB9XG59XG4iXX0=