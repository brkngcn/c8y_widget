import { Injectable } from '@angular/core';
import { gettext, NavigatorNode, Permissions } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
export class RegisterDeviceNavigationFactory {
    constructor(permissions) {
        this.permissions = permissions;
    }
    get() {
        const userHasPermission = this.permissions.hasAnyRole([
            'ROLE_DEVICE_CONTROL_ADMIN',
            'ROLE_DEVICE_CONTROL_READ'
        ]);
        const nav = [];
        if (userHasPermission) {
            nav.push(new NavigatorNode({
                label: gettext('Registration'),
                icon: 'c8y-device-connect',
                path: '/deviceregistration',
                parent: gettext('Devices'),
                preventDuplicates: true,
                priority: 3000
            }));
        }
        return nav;
    }
}
RegisterDeviceNavigationFactory.ɵfac = function RegisterDeviceNavigationFactory_Factory(t) { return new (t || RegisterDeviceNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Permissions)); };
RegisterDeviceNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RegisterDeviceNavigationFactory, factory: RegisterDeviceNavigationFactory.ɵfac });
RegisterDeviceNavigationFactory.ctorParameters = () => [
    { type: Permissions }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegisterDeviceNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Permissions }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZGV2aWNlLW5hdmlnYXRpb24uZmFjdG9yeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcmVnaXN0ZXItZGV2aWNlL3JlZ2lzdGVyLWRldmljZS1uYXZpZ2F0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBd0IsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUdoRyxNQUFNLE9BQU8sK0JBQStCO0FBQUcsSUFDN0MsWUFBb0IsV0FBd0I7QUFBSSxRQUE1QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtBQUFDLElBQUUsQ0FBQztBQUNsRCxJQUFFLEdBQUc7QUFDTCxRQUFJLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUM7QUFDMUQsWUFBTSwyQkFBMkI7QUFDakMsWUFBTSwwQkFBMEI7QUFDaEMsU0FBSyxDQUFDLENBQUM7QUFDUCxRQUFJLE1BQU0sR0FBRyxHQUFvQixFQUFFLENBQUM7QUFDcEMsUUFBSSxJQUFJLGlCQUFpQixFQUFFO0FBQzNCLFlBQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQztBQUNqQyxnQkFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN0QyxnQkFBUSxJQUFJLEVBQUUsb0JBQW9CO0FBQ2xDLGdCQUFRLElBQUksRUFBRSxxQkFBcUI7QUFDbkMsZ0JBQVEsTUFBTSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsZ0JBQVEsaUJBQWlCLEVBQUUsSUFBSTtBQUMvQixnQkFBUSxRQUFRLEVBQUUsSUFBSTtBQUN0QixhQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1YsU0FBSztBQUNMLFFBQUksT0FBTyxHQUFHLENBQUM7QUFDZixJQUFFLENBQUM7QUFDSDsyREFyQkMsVUFBVTsyS0FDVDtBQUFDO0FBQXlELFlBSEwsV0FBVztBQUFHOzs7NEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIE5hdmlnYXRvck5vZGUsIE5hdmlnYXRvck5vZGVGYWN0b3J5LCBQZXJtaXNzaW9ucyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVnaXN0ZXJEZXZpY2VOYXZpZ2F0aW9uRmFjdG9yeSBpbXBsZW1lbnRzIE5hdmlnYXRvck5vZGVGYWN0b3J5IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwZXJtaXNzaW9uczogUGVybWlzc2lvbnMpIHt9XG4gIGdldCgpIHtcbiAgICBjb25zdCB1c2VySGFzUGVybWlzc2lvbiA9IHRoaXMucGVybWlzc2lvbnMuaGFzQW55Um9sZShbXG4gICAgICAnUk9MRV9ERVZJQ0VfQ09OVFJPTF9BRE1JTicsXG4gICAgICAnUk9MRV9ERVZJQ0VfQ09OVFJPTF9SRUFEJ1xuICAgIF0pO1xuICAgIGNvbnN0IG5hdjogTmF2aWdhdG9yTm9kZVtdID0gW107XG4gICAgaWYgKHVzZXJIYXNQZXJtaXNzaW9uKSB7XG4gICAgICBuYXYucHVzaChuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdSZWdpc3RyYXRpb24nKSxcbiAgICAgICAgaWNvbjogJ2M4eS1kZXZpY2UtY29ubmVjdCcsXG4gICAgICAgIHBhdGg6ICcvZGV2aWNlcmVnaXN0cmF0aW9uJyxcbiAgICAgICAgcGFyZW50OiBnZXR0ZXh0KCdEZXZpY2VzJyksXG4gICAgICAgIHByZXZlbnREdXBsaWNhdGVzOiB0cnVlLFxuICAgICAgICBwcmlvcml0eTogMzAwMFxuICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmF2O1xuICB9XG59XG4iXX0=