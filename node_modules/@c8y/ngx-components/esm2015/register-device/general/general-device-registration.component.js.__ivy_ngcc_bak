import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { TenantUiService, gettext, memoize } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { from, Subject, defer } from 'rxjs';
import { filter, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';
import { InventoryService, TenantService } from '@c8y/client';
import { RegisterDeviceService } from '../register-device.service';
import { BsModalRef } from 'ngx-bootstrap/modal';
export class GeneralDeviceRegistrationComponent {
    constructor(tenantUIService, tenantService, registerDeviceService, inventoryService, cd, bsModalRef) {
        this.tenantUIService = tenantUIService;
        this.tenantService = tenantService;
        this.registerDeviceService = registerDeviceService;
        this.inventoryService = inventoryService;
        this.cd = cd;
        this.bsModalRef = bsModalRef;
        this.MANAGEMENT = 'management';
        this.FILTER = {
            withTotalPages: true,
            pageSize: 25
        };
        this.form = new FormGroup({});
        this.model = {
            devicesToCreate: [{}]
        };
        this.options = {
            formState: {
                canLoadTenants: true,
            }
        };
        this.success = [];
        this.failed = [];
        this.fields = [
            {
                type: 'array',
                key: 'devicesToCreate',
                templateOptions: {
                    addText: gettext('Add device'),
                    addTextDataCy: 'add-device'
                },
                fieldArray: {
                    fieldGroup: [{
                            key: 'id',
                            type: 'string',
                            focus: true,
                            templateOptions: {
                                placeholder: '0123ab32fcd',
                                label: gettext('Device ID'),
                                required: true
                            },
                            validators: {
                                unique: {
                                    expression: (control) => {
                                        const found = control.root.get('devicesToCreate').value.filter(el => el.id === control.value);
                                        return found.length === 0;
                                    },
                                    message: () => gettext('Device ID duplicates are not allowed'),
                                },
                            },
                        },
                        {
                            key: 'tenant',
                            type: 'typeahead',
                            hideExpression: (model, formState, field) => {
                                if (!(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants)) {
                                    field.formControl.setValue(null);
                                }
                                return !(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) || false;
                            },
                            defaultValue: { id: this.MANAGEMENT },
                            templateOptions: {
                                label: gettext('Add to tenant'),
                                required: true,
                                c8yForOptions: this.canLoadTenants$().pipe(filter(canLoad => canLoad), switchMap(() => this.getTenants$())),
                                container: 'body',
                                displayProperty: 'id',
                                valueProperties: ['id']
                            },
                            hooks: {
                                onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {
                                    this.options.formState.canLoadTenants = canLoad;
                                    this.cd.detectChanges();
                                }))
                            }
                        },
                        {
                            key: 'group',
                            type: 'typeahead',
                            expressionProperties: {
                                'templateOptions.disabled': (model, formState, field) => {
                                    var _a, _b, _c;
                                    if (formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) {
                                        if (((_a = model === null || model === void 0 ? void 0 : model.tenant) === null || _a === void 0 ? void 0 : _a.id) !== this.MANAGEMENT) {
                                            field.formControl.setValue(null);
                                        }
                                        return !(((_b = model === null || model === void 0 ? void 0 : model.tenant) === null || _b === void 0 ? void 0 : _b.id) === this.MANAGEMENT);
                                    }
                                    (_c = field === null || field === void 0 ? void 0 : field.templateOptions) === null || _c === void 0 ? true : delete _c.description;
                                    return false;
                                }
                            },
                            templateOptions: {
                                disabled: false,
                                label: gettext('Add to group'),
                                description: gettext('You can add device to specific group for management tenant only.'),
                                container: 'body',
                                displayProperty: 'name',
                                valueProperties: ['id'],
                                c8yForOptions: this.getGroups$()
                            },
                            hooks: {
                                onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {
                                    this.options.formState.canLoadTenants = canLoad;
                                    this.cd.detectChanges();
                                }))
                            }
                        }]
                }
            }
        ];
        this.destroy$ = new Subject();
        this.lastCreatedDevices = [];
        this.isLoading$ = this.registerDeviceService.loading$;
    }
    ngAfterViewInit() {
        this.cd.detectChanges();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    create(eventObject) {
        var _a, _b;
        if (((_b = (_a = this.model) === null || _a === void 0 ? void 0 : _a.devicesToCreate) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            this.lastCreatedDevices = [...this.model.devicesToCreate];
            const dataToSend = this.model.devicesToCreate.map((el) => {
                const { id, tenant, group } = el;
                let data = { id };
                if (tenant === null || tenant === void 0 ? void 0 : tenant.id) {
                    data = Object.assign(Object.assign({}, data), { tenantId: tenant.id });
                }
                if (group === null || group === void 0 ? void 0 : group.id) {
                    data = Object.assign(Object.assign({}, data), { groupId: group.id });
                }
                return data;
            });
            this.registerDeviceService.createMultiple(dataToSend)
                .pipe(takeUntil(this.destroy$))
                .subscribe(requests => {
                this.success = requests.success;
                this.failed = requests.failed;
                if (eventObject) {
                    eventObject.stepper.next();
                }
            });
        }
    }
    fixErrors(event, failedRequests) {
        if (failedRequests && failedRequests.length > 0) {
            this.options.resetModel({ devicesToCreate: [...this.lastCreatedDevices.filter(el => failedRequests.map(data => data.id).includes(el.id))] });
            this.cd.detectChanges();
        }
        event === null || event === void 0 ? void 0 : event.stepper.previous();
    }
    canLoadTenants$() {
        return defer(() => from(this.tenantUIService.isManagementTenant())).pipe(shareReplay(1));
    }
    getTenants$() {
        return defer(() => from(this.tenantService.list(this.FILTER))).pipe(shareReplay(1));
    }
    getGroups$() {
        return defer(() => from(this.inventoryService.listQuery({ __filter: { __has: 'c8y_IsDeviceGroup' }, __orderby: [{ name: 1 }] }, Object.assign({}, this.FILTER)))).pipe(shareReplay(1));
    }
}
GeneralDeviceRegistrationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-general-device-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Register devices' | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear>\n    <cdk-step [stepControl]=\"form\">\n      <div class=\"p-b-16\">\n        <p\n          class=\"\n            p-l-24 p-r-24 p-t-16 p-b-16\n            m-b-0\n            sticky-top\n            separator-bottom\n            text-medium text-16 text-center\n            bg-component\n          \"\n          translate\n        >\n          Register a general device\n        </p>\n        <formly-form\n          [form]=\"form\"\n          [fields]=\"fields\"\n          [model]=\"model\"\n          [options]=\"options\"\n          class=\"formly-group-array-cols d-block p-24 min-height-fit\"\n        ></formly-form>\n      </div>\n      <c8y-stepper-buttons\n        (onNext)=\"create($event)\"\n        (onCancel)=\"bsModalRef.hide()\"\n        [showButtons]=\"{ cancel: true, next: true }\"\n        [disabled]=\"!form?.valid\"\n        [pending]=\"isLoading$ | async\"\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step state=\"final\">\n      <div class=\"p-24 min-height-fit\">\n        <c8y-operation-result\n          *ngIf=\"success.length === 1 && failed.length === 0\"\n          text=\"{{ 'Device registered' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"success\"\n          class=\"lead\"\n        ></c8y-operation-result>\n        <c8y-operation-result\n          *ngIf=\"success.length === 0 && failed.length === 1\"\n          text=\"{{ 'Failed to register device' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"error\"\n          class=\"lead\"\n        ></c8y-operation-result>\n\n        <ng-container *ngIf=\"success.length > 1 || failed.length > 1\">\n          <c8y-operation-result\n            *ngIf=\"failed.length === 0\"\n            [text]=\"\n              '{{ successfulDevicesCount }} devices registered'\n                | translate: { successfulDevicesCount: success.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngIf=\"success.length === 0\"\n            [text]=\"\n              '{{ failedDevicesCount }} devices failed to register'\n                | translate: { failedDevicesCount: failed.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </ng-container>\n\n        <div *ngIf=\"success.length > 0 && failed.length > 0\" class=\"p-l-24 p-r-24 text-center\">\n          <c8y-operation-result\n            text=\"{{ 'Several devices failed to register' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <p\n            ngNonBindable\n            translate\n            [translateParams]=\"{ count: failed.length, total: failed.length + success.length }\"\n            class=\"p-b-16 text-danger\"\n          >\n            Registration failed for {{ count }} devices out of {{ total }}.\n          </p>\n        </div>\n\n        <div class=\"m-b-8 p-l-24 p-r-24\" *ngIf=\"success.length > 0\" translate>\n          Turn on the registered device(s) and wait for connection(s) to be established. Once a\n          device is connected, its status will change to \"Pending acceptance\". You will need to\n          approve it by clicking on the \"Accept\" button.\n        </div>\n\n        <c8y-list-group class=\"separator-top m-t-16\">\n          <c8y-li *ngFor=\"let fail of failed\">\n            <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n            <p>{{ fail?.id }}</p>\n            <small>{{ fail?.message | translate }}</small>\n            <c8y-li-collapse>\n              <pre><code>{{ fail?.details | json }}</code></pre>\n            </c8y-li-collapse>\n          </c8y-li>\n\n          <c8y-li *ngFor=\"let s of success\">\n            <c8y-li-icon class=\"text-success\" [icon]=\"'check-circle'\"></c8y-li-icon>\n            {{ s?.id }}\n          </c8y-li>\n        </c8y-list-group>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        (onCustom)=\"bsModalRef.hide()\"\n        (onBack)=\"fixErrors($event, failed)\"\n        [showButtons]=\"{ back: failed.length > 0, custom: true }\"\n        [labels]=\"{ back: 'Fix errors', custom: 'Close' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
GeneralDeviceRegistrationComponent.ctorParameters = () => [
    { type: TenantUiService },
    { type: TenantService },
    { type: RegisterDeviceService },
    { type: InventoryService },
    { type: ChangeDetectorRef },
    { type: BsModalRef }
];
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "canLoadTenants$", null);
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "getTenants$", null);
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "getGroups$", null);
//# sourceMappingURL=data:application/json;base64,