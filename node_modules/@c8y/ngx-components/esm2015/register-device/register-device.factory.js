import { Injectable } from '@angular/core';
import { GeneralDeviceRegistrationButtonComponent } from './general/general-device-registration-button.component';
import { ExtensibleDeviceRegistrationButtonComponent } from './extensible/single/extensible-device-registration-button.component';
import { ExtensibleBulkDeviceRegistrationButtonComponent } from './extensible/bulk/extensible-bulk-device-registration-button.component';
import { BulkDeviceRegistrationButtonComponent } from './bulk/bulk-device-registration-button.component';
import * as ɵngcc0 from '@angular/core';
export class DeviceRegistrationFactory {
    get() {
        return [{
                template: GeneralDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'single'
            }, {
                template: ExtensibleDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'single'
            }, {
                template: ExtensibleBulkDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'bulk'
            }, {
                template: BulkDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'bulk'
            }];
    }
}
DeviceRegistrationFactory.ɵfac = function DeviceRegistrationFactory_Factory(t) { return new (t || DeviceRegistrationFactory)(); };
DeviceRegistrationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceRegistrationFactory, factory: DeviceRegistrationFactory.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceRegistrationFactory, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZGV2aWNlLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3JlZ2lzdGVyLWRldmljZS9yZWdpc3Rlci1kZXZpY2UuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ2xILE9BQU8sRUFBRSwyQ0FBMkMsRUFBRSxNQUFNLHFFQUFxRSxDQUFDO0FBQ2xJLE9BQU8sRUFBRSwrQ0FBK0MsRUFBRSxNQUFNLHdFQUF3RSxDQUFDO0FBQ3pJLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLGtEQUFrRCxDQUFDOztBQUl6RyxNQUFNLE9BQU8seUJBQXlCO0FBQUcsSUFDdkMsR0FBRztBQUNMLFFBQUksT0FBTyxDQUFDO0FBQ1osZ0JBQU0sUUFBUSxFQUFFLHdDQUF3QztBQUN4RCxnQkFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQixnQkFBTSxRQUFRLEVBQUUsUUFBUTtBQUN4QixhQUEyQixFQUFFO0FBQzdCLGdCQUFNLFFBQVEsRUFBRSwyQ0FBMkM7QUFDM0QsZ0JBQU0sUUFBUSxFQUFFLEVBQUU7QUFDbEIsZ0JBQU0sUUFBUSxFQUFFLFFBQVE7QUFDeEIsYUFBMkIsRUFBRTtBQUM3QixnQkFBTSxRQUFRLEVBQUUsK0NBQStDO0FBQy9ELGdCQUFNLFFBQVEsRUFBRSxFQUFFO0FBQ2xCLGdCQUFNLFFBQVEsRUFBRSxNQUFNO0FBQ3RCLGFBQTJCLEVBQUU7QUFDN0IsZ0JBQU0sUUFBUSxFQUFFLHFDQUFxQztBQUNyRCxnQkFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQixnQkFBTSxRQUFRLEVBQUUsTUFBTTtBQUN0QixhQUEyQixDQUFDLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0g7cURBckJDLFVBQVU7Ozs7MEJBQ1Q7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdlbmVyYWxEZXZpY2VSZWdpc3RyYXRpb25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2dlbmVyYWwvZ2VuZXJhbC1kZXZpY2UtcmVnaXN0cmF0aW9uLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vZXh0ZW5zaWJsZS9zaW5nbGUvZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXh0ZW5zaWJsZUJ1bGtEZXZpY2VSZWdpc3RyYXRpb25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2V4dGVuc2libGUvYnVsay9leHRlbnNpYmxlLWJ1bGstZGV2aWNlLXJlZ2lzdHJhdGlvbi1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IEJ1bGtEZXZpY2VSZWdpc3RyYXRpb25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2J1bGsvYnVsay1kZXZpY2UtcmVnaXN0cmF0aW9uLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVnaXN0ZXJEZXZpY2VJdGVtLCBSZWdpc3RlckRldmljZUZhY3RvcnkgfSBmcm9tICcuL2Ryb3Bkb3duL1JlZ2lzdGVyRGV2aWNlSXRlbSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZXZpY2VSZWdpc3RyYXRpb25GYWN0b3J5IGltcGxlbWVudHMgUmVnaXN0ZXJEZXZpY2VGYWN0b3J5IHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiBbe1xuICAgICAgdGVtcGxhdGU6IEdlbmVyYWxEZXZpY2VSZWdpc3RyYXRpb25CdXR0b25Db21wb25lbnQsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgY2F0ZWdvcnk6ICdzaW5nbGUnXG4gICAgfSBhcyBSZWdpc3RlckRldmljZUl0ZW0sIHtcbiAgICAgIHRlbXBsYXRlOiBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uQnV0dG9uQ29tcG9uZW50LFxuICAgICAgcHJpb3JpdHk6IDUwLFxuICAgICAgY2F0ZWdvcnk6ICdzaW5nbGUnXG4gICAgfSBhcyBSZWdpc3RlckRldmljZUl0ZW0sIHtcbiAgICAgIHRlbXBsYXRlOiBFeHRlbnNpYmxlQnVsa0RldmljZVJlZ2lzdHJhdGlvbkJ1dHRvbkNvbXBvbmVudCxcbiAgICAgIHByaW9yaXR5OiA1MCxcbiAgICAgIGNhdGVnb3J5OiAnYnVsaydcbiAgICB9IGFzIFJlZ2lzdGVyRGV2aWNlSXRlbSwge1xuICAgICAgdGVtcGxhdGU6IEJ1bGtEZXZpY2VSZWdpc3RyYXRpb25CdXR0b25Db21wb25lbnQsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgY2F0ZWdvcnk6ICdidWxrJ1xuICAgIH0gYXMgUmVnaXN0ZXJEZXZpY2VJdGVtXTtcbiAgfVxufVxuIl19