import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { fromTriggerOnce } from '@c8y/ngx-components';
import { Subject } from 'rxjs';
import { shareReplay, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export const HOOK_DEVICE_REGISTRATION = new InjectionToken('RegisterDevicesFactory');
export class RegisterDeviceExtensionService {
    constructor(injector, router) {
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.items$ = fromTriggerOnce(router, [this.refreshTrigger], [() => this.injector.get(HOOK_DEVICE_REGISTRATION, []), () => this.factories, this]).pipe(startWith([]), shareReplay(1));
    }
    refresh() {
        this.refreshTrigger.next();
    }
}
RegisterDeviceExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RegisterDeviceExtensionService_Factory() { return new RegisterDeviceExtensionService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: RegisterDeviceExtensionService, providedIn: "root" });
RegisterDeviceExtensionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RegisterDeviceExtensionService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZGV2aWNlLWV4dGVuc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcmVnaXN0ZXItZGV2aWNlL2Ryb3Bkb3duL3JlZ2lzdGVyLWRldmljZS1leHRlbnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBb0MsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEYsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFJeEQsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxjQUFjLENBQTBCLHdCQUF3QixDQUFDLENBQUM7QUFLOUcsTUFBTSxPQUFPLDhCQUE4QjtJQUt6QyxZQUFvQixRQUFrQixFQUFFLE1BQWM7UUFBbEMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUh0QyxjQUFTLEdBQThCLEVBQUUsQ0FBQztRQUMxQyxtQkFBYyxHQUFpQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUMzQixNQUFNLEVBQ04sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQ3JCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FDcEYsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O1lBbEJGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBWm9DLFFBQVE7WUFDcEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEV4dGVuc2lvbkZhY3RvcnksIEV4dGVuc2lvblBvaW50LCBmcm9tVHJpZ2dlck9uY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlUmVwbGF5LCBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZWdpc3RlckRldmljZUl0ZW0gfSBmcm9tICcuL1JlZ2lzdGVyRGV2aWNlSXRlbSc7XG5cbmV4cG9ydCB0eXBlIFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uID0gUmVnaXN0ZXJEZXZpY2VJdGVtIHwgUmVnaXN0ZXJEZXZpY2VJdGVtW10gfCBFeHRlbnNpb25GYWN0b3J5PFJlZ2lzdGVyRGV2aWNlSXRlbT47XG5leHBvcnQgY29uc3QgSE9PS19ERVZJQ0VfUkVHSVNUUkFUSU9OID0gbmV3IEluamVjdGlvblRva2VuPFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uPignUmVnaXN0ZXJEZXZpY2VzRmFjdG9yeScpO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBSZWdpc3RlckRldmljZUV4dGVuc2lvblNlcnZpY2UgaW1wbGVtZW50cyBFeHRlbnNpb25Qb2ludDxSZWdpc3RlckRldmljZUV4dGVuc2lvbj4ge1xuICBpdGVtcyQ6IE9ic2VydmFibGU8UmVnaXN0ZXJEZXZpY2VJdGVtW10+O1xuICBmYWN0b3JpZXM6IFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uW10gPSBbXTtcbiAgcmVmcmVzaFRyaWdnZXI6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHJvdXRlcjogUm91dGVyKSB7XG4gICAgdGhpcy5pdGVtcyQgPSBmcm9tVHJpZ2dlck9uY2UoXG4gICAgICByb3V0ZXIsXG4gICAgICBbdGhpcy5yZWZyZXNoVHJpZ2dlcl0sXG4gICAgICBbKCkgPT4gdGhpcy5pbmplY3Rvci5nZXQoSE9PS19ERVZJQ0VfUkVHSVNUUkFUSU9OLCBbXSksICgpID0+IHRoaXMuZmFjdG9yaWVzLCB0aGlzXVxuICAgICkucGlwZShzdGFydFdpdGgoW10pLCBzaGFyZVJlcGxheSgxKSk7XG4gIH1cblxuICByZWZyZXNoKCkge1xuICAgIHRoaXMucmVmcmVzaFRyaWdnZXIubmV4dCgpO1xuICB9XG59XG4iXX0=