import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { fromTriggerOnce } from '@c8y/ngx-components';
import { Subject } from 'rxjs';
import { shareReplay, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export const HOOK_DEVICE_REGISTRATION = new InjectionToken('RegisterDevicesFactory');
export class RegisterDeviceExtensionService {
    constructor(injector, router) {
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.items$ = fromTriggerOnce(router, [this.refreshTrigger], [() => this.injector.get(HOOK_DEVICE_REGISTRATION, []), () => this.factories, this]).pipe(startWith([]), shareReplay(1));
    }
    refresh() {
        this.refreshTrigger.next();
    }
}
RegisterDeviceExtensionService.ɵfac = function RegisterDeviceExtensionService_Factory(t) { return new (t || RegisterDeviceExtensionService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
RegisterDeviceExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RegisterDeviceExtensionService_Factory() { return new RegisterDeviceExtensionService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: RegisterDeviceExtensionService, providedIn: "root" });
RegisterDeviceExtensionService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegisterDeviceExtensionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZGV2aWNlLWV4dGVuc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9yZWdpc3Rlci1kZXZpY2UvZHJvcGRvd24vcmVnaXN0ZXItZGV2aWNlLWV4dGVuc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFvQyxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RixPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQ7QUFBcUM7OztBQUdyQyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLGNBQWMsQ0FBMEIsd0JBQXdCLENBQUMsQ0FBQztBQUs5RyxNQUFNLE9BQU8sOEJBQThCO0FBQUcsSUFLNUMsWUFBb0IsUUFBa0IsRUFBRSxNQUFjO0FBQ3hELFFBRHNCLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBQyxRQUh2QyxjQUFTLEdBQThCLEVBQUUsQ0FBQztBQUM1QyxRQUFFLG1CQUFjLEdBQWlCLElBQUksT0FBTyxFQUFFLENBQUM7QUFDL0MsUUFFSSxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FDM0IsTUFBTSxFQUNOLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUNyQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQ3BGLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxJQUFFLENBQUM7QUFDSCxJQUNFLE9BQU87QUFDVCxRQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDL0IsSUFBRSxDQUFDO0FBQ0g7aU5BQUM7QUFDRCx5UkFqQks7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFHa0QsWUFiekIsUUFBUTtlQVczQyxmQVgrQyxZQUN4QyxNQUFNO0FBQUc7Q0FVTixFQUFFLE1BQU0sY0FDbkI7Ozs7O2tHQVhtQjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRXh0ZW5zaW9uRmFjdG9yeSwgRXh0ZW5zaW9uUG9pbnQsIGZyb21UcmlnZ2VyT25jZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2hhcmVSZXBsYXksIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJlZ2lzdGVyRGV2aWNlSXRlbSB9IGZyb20gJy4vUmVnaXN0ZXJEZXZpY2VJdGVtJztcblxuZXhwb3J0IHR5cGUgUmVnaXN0ZXJEZXZpY2VFeHRlbnNpb24gPSBSZWdpc3RlckRldmljZUl0ZW0gfCBSZWdpc3RlckRldmljZUl0ZW1bXSB8IEV4dGVuc2lvbkZhY3Rvcnk8UmVnaXN0ZXJEZXZpY2VJdGVtPjtcbmV4cG9ydCBjb25zdCBIT09LX0RFVklDRV9SRUdJU1RSQVRJT04gPSBuZXcgSW5qZWN0aW9uVG9rZW48UmVnaXN0ZXJEZXZpY2VFeHRlbnNpb24+KCdSZWdpc3RlckRldmljZXNGYWN0b3J5Jyk7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uU2VydmljZSBpbXBsZW1lbnRzIEV4dGVuc2lvblBvaW50PFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uPiB7XG4gIGl0ZW1zJDogT2JzZXJ2YWJsZTxSZWdpc3RlckRldmljZUl0ZW1bXT47XG4gIGZhY3RvcmllczogUmVnaXN0ZXJEZXZpY2VFeHRlbnNpb25bXSA9IFtdO1xuICByZWZyZXNoVHJpZ2dlcjogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3QoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvciwgcm91dGVyOiBSb3V0ZXIpIHtcbiAgICB0aGlzLml0ZW1zJCA9IGZyb21UcmlnZ2VyT25jZShcbiAgICAgIHJvdXRlcixcbiAgICAgIFt0aGlzLnJlZnJlc2hUcmlnZ2VyXSxcbiAgICAgIFsoKSA9PiB0aGlzLmluamVjdG9yLmdldChIT09LX0RFVklDRV9SRUdJU1RSQVRJT04sIFtdKSwgKCkgPT4gdGhpcy5mYWN0b3JpZXMsIHRoaXNdXG4gICAgKS5waXBlKHN0YXJ0V2l0aChbXSksIHNoYXJlUmVwbGF5KDEpKTtcbiAgfVxuXG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5yZWZyZXNoVHJpZ2dlci5uZXh0KCk7XG4gIH1cbn1cbiJdfQ==