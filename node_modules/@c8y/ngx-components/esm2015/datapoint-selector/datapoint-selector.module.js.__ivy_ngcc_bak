import { DragDropModule } from '@angular/cdk/drag-drop';
import { NgModule } from '@angular/core';
import { CoreModule } from '@c8y/ngx-components';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { ModalModule } from 'ngx-bootstrap/modal';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { DatapointAttributesFormComponent } from './datapoint-attributes-form/datapoint-attributes-form.component';
import { DatapointSelectionListComponent } from './datapoint-selection-list/datapoint-selection-list.component';
import { DatapointSelectorListItemComponent } from './datapoint-selector-list-item/datapoint-selector-list-item.component';
import { DatapointSelectorModalComponent } from './datapoint-selector-modal/datapoint-selector-modal.component';
import { DatapointSelectorComponent } from './datapoint-selector.component';
import { DatapointTemplatePopoverComponent } from './datapoint-template-popover/datapoint-template-popover.component';
import { DatapointLabelPipe } from './pipes/datapoint-label.pipe';
import { FilterDatapointsPipe } from './pipes/filter-datapoints.pipe';
import { IncludesDatapointPipe } from './pipes/includes-datapoint.pipe';
export class DatapointSelectorModule {
}
DatapointSelectorModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    AssetSelectorModule,
                    CollapseModule,
                    CoreModule,
                    BsDropdownModule,
                    ModalModule,
                    PopoverModule,
                    DragDropModule
                ],
                declarations: [
                    DatapointSelectorComponent,
                    DatapointSelectorModalComponent,
                    DatapointSelectorListItemComponent,
                    DatapointSelectionListComponent,
                    DatapointTemplatePopoverComponent,
                    IncludesDatapointPipe,
                    DatapointLabelPipe,
                    FilterDatapointsPipe,
                    DatapointAttributesFormComponent
                ],
                exports: [
                    DatapointSelectorComponent,
                    DatapointSelectorModalComponent,
                    DatapointSelectorListItemComponent,
                    DatapointSelectionListComponent,
                    DatapointTemplatePopoverComponent,
                    IncludesDatapointPipe,
                    DatapointLabelPipe,
                    DatapointAttributesFormComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXBvaW50LXNlbGVjdG9yLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RhdGFwb2ludC1zZWxlY3Rvci9kYXRhcG9pbnQtc2VsZWN0b3IubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUNuSCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUNoSCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSx1RUFBdUUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUNoSCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxtRUFBbUUsQ0FBQztBQUN0SCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQWtDeEUsTUFBTSxPQUFPLHVCQUF1Qjs7O1lBaENuQyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLG1CQUFtQjtvQkFDbkIsY0FBYztvQkFDZCxVQUFVO29CQUNWLGdCQUFnQjtvQkFDaEIsV0FBVztvQkFDWCxhQUFhO29CQUNiLGNBQWM7aUJBQ2Y7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLDBCQUEwQjtvQkFDMUIsK0JBQStCO29CQUMvQixrQ0FBa0M7b0JBQ2xDLCtCQUErQjtvQkFDL0IsaUNBQWlDO29CQUNqQyxxQkFBcUI7b0JBQ3JCLGtCQUFrQjtvQkFDbEIsb0JBQW9CO29CQUNwQixnQ0FBZ0M7aUJBQ2pDO2dCQUNELE9BQU8sRUFBRTtvQkFDUCwwQkFBMEI7b0JBQzFCLCtCQUErQjtvQkFDL0Isa0NBQWtDO29CQUNsQywrQkFBK0I7b0JBQy9CLGlDQUFpQztvQkFDakMscUJBQXFCO29CQUNyQixrQkFBa0I7b0JBQ2xCLGdDQUFnQztpQkFDakM7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERyYWdEcm9wTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2RyYWctZHJvcCc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQXNzZXRTZWxlY3Rvck1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvcic7XG5pbXBvcnQgeyBDb2xsYXBzZU1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvY29sbGFwc2UnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgTW9kYWxNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgRGF0YXBvaW50QXR0cmlidXRlc0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2RhdGFwb2ludC1hdHRyaWJ1dGVzLWZvcm0vZGF0YXBvaW50LWF0dHJpYnV0ZXMtZm9ybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YXBvaW50U2VsZWN0aW9uTGlzdENvbXBvbmVudCB9IGZyb20gJy4vZGF0YXBvaW50LXNlbGVjdGlvbi1saXN0L2RhdGFwb2ludC1zZWxlY3Rpb24tbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YXBvaW50U2VsZWN0b3JMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4vZGF0YXBvaW50LXNlbGVjdG9yLWxpc3QtaXRlbS9kYXRhcG9pbnQtc2VsZWN0b3ItbGlzdC1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhcG9pbnRTZWxlY3Rvck1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRhcG9pbnQtc2VsZWN0b3ItbW9kYWwvZGF0YXBvaW50LXNlbGVjdG9yLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhcG9pbnRTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vZGF0YXBvaW50LXNlbGVjdG9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhcG9pbnRUZW1wbGF0ZVBvcG92ZXJDb21wb25lbnQgfSBmcm9tICcuL2RhdGFwb2ludC10ZW1wbGF0ZS1wb3BvdmVyL2RhdGFwb2ludC10ZW1wbGF0ZS1wb3BvdmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhcG9pbnRMYWJlbFBpcGUgfSBmcm9tICcuL3BpcGVzL2RhdGFwb2ludC1sYWJlbC5waXBlJztcbmltcG9ydCB7IEZpbHRlckRhdGFwb2ludHNQaXBlIH0gZnJvbSAnLi9waXBlcy9maWx0ZXItZGF0YXBvaW50cy5waXBlJztcbmltcG9ydCB7IEluY2x1ZGVzRGF0YXBvaW50UGlwZSB9IGZyb20gJy4vcGlwZXMvaW5jbHVkZXMtZGF0YXBvaW50LnBpcGUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQXNzZXRTZWxlY3Rvck1vZHVsZSxcbiAgICBDb2xsYXBzZU1vZHVsZSxcbiAgICBDb3JlTW9kdWxlLFxuICAgIEJzRHJvcGRvd25Nb2R1bGUsXG4gICAgTW9kYWxNb2R1bGUsXG4gICAgUG9wb3Zlck1vZHVsZSxcbiAgICBEcmFnRHJvcE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBEYXRhcG9pbnRTZWxlY3RvckNvbXBvbmVudCxcbiAgICBEYXRhcG9pbnRTZWxlY3Rvck1vZGFsQ29tcG9uZW50LFxuICAgIERhdGFwb2ludFNlbGVjdG9yTGlzdEl0ZW1Db21wb25lbnQsXG4gICAgRGF0YXBvaW50U2VsZWN0aW9uTGlzdENvbXBvbmVudCxcbiAgICBEYXRhcG9pbnRUZW1wbGF0ZVBvcG92ZXJDb21wb25lbnQsXG4gICAgSW5jbHVkZXNEYXRhcG9pbnRQaXBlLFxuICAgIERhdGFwb2ludExhYmVsUGlwZSxcbiAgICBGaWx0ZXJEYXRhcG9pbnRzUGlwZSxcbiAgICBEYXRhcG9pbnRBdHRyaWJ1dGVzRm9ybUNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgRGF0YXBvaW50U2VsZWN0b3JDb21wb25lbnQsXG4gICAgRGF0YXBvaW50U2VsZWN0b3JNb2RhbENvbXBvbmVudCxcbiAgICBEYXRhcG9pbnRTZWxlY3Rvckxpc3RJdGVtQ29tcG9uZW50LFxuICAgIERhdGFwb2ludFNlbGVjdGlvbkxpc3RDb21wb25lbnQsXG4gICAgRGF0YXBvaW50VGVtcGxhdGVQb3BvdmVyQ29tcG9uZW50LFxuICAgIEluY2x1ZGVzRGF0YXBvaW50UGlwZSxcbiAgICBEYXRhcG9pbnRMYWJlbFBpcGUsXG4gICAgRGF0YXBvaW50QXR0cmlidXRlc0Zvcm1Db21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEYXRhcG9pbnRTZWxlY3Rvck1vZHVsZSB7fVxuIl19