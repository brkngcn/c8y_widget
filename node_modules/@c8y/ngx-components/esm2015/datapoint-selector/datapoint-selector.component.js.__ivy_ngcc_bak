import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, combineLatest, from } from 'rxjs';
import { debounceTime, distinctUntilChanged, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { DatapointLibraryService } from './datapoint-library.service';
export class DatapointSelectorComponent {
    constructor(datapointService) {
        this.datapointService = datapointService;
        this.allowChangingContext = true;
        this.allowDatapointsFromMultipleAssets = true;
        this.selectedDatapoints = new Array();
        this.defaultActiveState = true;
        this.ignoreDatapointTemplates = false;
        this.guessDatapointUnit = true;
        this.allowSearch = true;
        this.searchString = '';
        this.maxNumberOfDatapoints = 50;
        this.loadingDatapoints = false;
        this.assetSelection = new BehaviorSubject(null);
        this.searchString$ = new BehaviorSubject('');
        this.touched = false;
        this.setupObservables();
    }
    ngOnInit() {
        if (!this.ignoreDatapointTemplates) {
            this.datapointLibraryEntries = from(this.datapointService.getFirstDatapointLibraryPage());
        }
        if (this.contextAsset) {
            this.selectionChanged(this.contextAsset);
        }
    }
    writeValue(obj) {
        this.selectedDatapoints = obj;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    datapointAdded(dp) {
        this.markAsTouched();
        dp.__active = this.defaultActiveState;
        if (this.guessDatapointUnit && !dp.unit) {
            this.datapointService.guessUnitOfDatapoint(dp.fragment, dp.series, dp.__target).then(unit => {
                dp.unit = unit;
            });
        }
        this.selectedDatapoints = [...this.selectedDatapoints, dp];
        this.emitCurrentSelection();
    }
    datapointRemoved(dp) {
        this.markAsTouched();
        this.selectedDatapoints = this.selectedDatapoints.filter(tmp => {
            var _a, _b;
            return tmp.fragment !== dp.fragment ||
                tmp.series !== dp.series ||
                ((_a = tmp.__target) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = dp.__target) === null || _b === void 0 ? void 0 : _b.id);
        });
        this.emitCurrentSelection();
    }
    selectionChanged(evt) {
        if (Array.isArray(evt) && evt.length !== 0) {
            return this.selectAsset(evt[0]);
        }
        if (!Array.isArray(evt) && evt.items) {
            return this.selectionChanged(evt.items);
        }
        if (!Array.isArray(evt) && evt.id) {
            return this.selectAsset(evt);
        }
        // reset selection
        this.assetSelection.next(null);
    }
    trackByFn(_index, item) {
        var _a;
        return `${item.fragment}-${(_a = item.__target) === null || _a === void 0 ? void 0 : _a.id}-${item.series}`;
    }
    searchStringChanged(newValue = '') {
        this.searchString$.next(newValue);
        this.searchString = newValue;
    }
    setupObservables() {
        this.datapoints$ = this.assetSelection.pipe(tap(() => {
            this.loadingDatapoints = true;
        }), switchMap(asset => (asset === null || asset === void 0 ? void 0 : asset.id)
            ? this.datapointService.getDatapointsOfAsset(asset, this.ignoreDatapointTemplates)
            : []), tap(() => (this.loadingDatapoints = false)), shareReplay(1));
        this.searchStringChanges$ = this.searchString$.pipe(distinctUntilChanged(), debounceTime(500), shareReplay(1));
        this.filteredDatapoints$ = combineLatest([this.searchStringChanges$, this.datapoints$]).pipe(map(([searchString, datapoints]) => {
            if (!searchString) {
                return datapoints;
            }
            const lowerCaseSearchString = searchString.toLowerCase();
            return datapoints.filter(datapoint => this.includesSearchString(datapoint, lowerCaseSearchString));
        }), map(filtered => filtered.slice(0, this.maxNumberOfDatapoints)));
    }
    selectAsset(asset) {
        this.assetSelection.next(asset);
        this.searchStringChanged();
        if (!this.allowDatapointsFromMultipleAssets) {
            this.clearSelection();
        }
    }
    clearSelection() {
        this.selectedDatapoints = [];
        this.emitCurrentSelection();
    }
    emitCurrentSelection() {
        this.onChange(this.selectedDatapoints);
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched();
            this.touched = true;
        }
    }
    includesSearchString(datapoint, lowerCaseSearchString) {
        var _a, _b, _c;
        const label = (_a = datapoint.label) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (label && label.includes(lowerCaseSearchString)) {
            return true;
        }
        const fragment = (_b = datapoint.fragment) === null || _b === void 0 ? void 0 : _b.toLowerCase();
        if (fragment && fragment.includes(lowerCaseSearchString)) {
            return true;
        }
        const series = (_c = datapoint.series) === null || _c === void 0 ? void 0 : _c.toLowerCase();
        if (series && series.includes(lowerCaseSearchString)) {
            return true;
        }
        return false;
    }
}
DatapointSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-datapoint-selector',
                template: "<div class=\"d-grid grid__row--1 fit-h\" [ngClass]=\"allowChangingContext ? 'grid__col--3-6-3--md' : 'grid__col--8-4--md'\">\n  <div class=\"d-flex d-col p-relative bg-gray-white\" *ngIf=\"allowChangingContext\">\n    <c8y-asset-selector-miller\n      [(ngModel)]=\"contextAsset\"\n      [asset]=\"contextAsset\"\n      (onSelected)=\"selectionChanged($event)\"\n      [container]=\"''\"\n      [config]=\"{\n        view: 'miller',\n        groupsSelectable: true,\n        columnHeaders: true,\n        showChildDevices: true,\n        showUnassignedDevices: true,\n        singleColumn: true,\n        search: allowSearch\n      }\"\n      class=\"d-contents\"\n    ></c8y-asset-selector-miller>\n  </div>\n  <!-- center column -->\n  <div class=\"inner-scroll bg-component\">\n    <ng-template #noDeviceEmptyState>\n      <div class=\"p-16\">\n        <div class=\"c8y-empty-state text-left\">\n          <h1 class=\"c8y-icon c8y-icon-data-points c8y-icon-duocolor\"></h1>\n          <div>\n            <p>\n              <strong translate>No data points to display.</strong>\n            </p>\n            <small translate>Select an asset from the list.</small>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template #loadingData>\n      <div class=\"p-16 text-center\">\n        <c8y-loading></c8y-loading>\n      </div>\n    </ng-template>\n    <div *ngIf=\"assetSelection | async as asset; else noDeviceEmptyState\" class=\"bg-inherit\">\n      <div class=\"p-l-16 p-r-16 p-t-8 p-b-8 sticky-top bg-inherit separator-bottom\">\n        <p\n          class=\"text-medium text-truncate\"\n          [title]=\"'Available data points' | translate\"\n        >\n          {{ 'Available data points' | translate }}\n        </p>\n        <div *ngIf=\"!loadingDatapoints\" id=\"search\" class=\"input-group input-group-search m-t-4\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"Search\u2026\"\n            [ngModel]=\"searchString\"\n            (ngModelChange)=\"searchStringChanged($event)\"\n          />\n          <span class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"!searchString; else clearSearchString\"></i>\n            <ng-template #clearSearchString>\n                <i\n                  c8yIcon=\"times\"\n                  class=\"text-muted\"\n                  *ngIf=\"searchString\"\n                  (click)=\"searchString = ''\"\n                ></i>\n            </ng-template>\n          </span>\n        </div>\n      </div>\n      <ng-container *ngIf=\"filteredDatapoints$ | async as filteredDatapoints; else loadingData\">\n        <ng-container *ngIf=\"!loadingDatapoints; else loadingData\">\n          <ng-container *ngIf=\"datapoints$ | async as datapoints\">\n            <div class=\"p-16\" *ngIf=\"!filteredDatapoints.length\">\n              <c8y-ui-empty-state\n                [icon]=\"'c8y-data-points'\"\n                [title]=\"'No data points to display.' | translate\"\n                [subtitle]=\"datapoints.length ? ('Try another search term.' | translate) : ('Select an asset with data points from the list.' | translate)\"\n                [horizontal]=\"true\"\n              ></c8y-ui-empty-state>\n            </div>\n\n\n\n            <c8y-list-group>\n              <c8y-list-item *ngIf=\"datapoints.length > maxNumberOfDatapoints && filteredDatapoints.length >= maxNumberOfDatapoints\"\n                class=\"sticky-top\"\n                style=\"top: 72px\"\n                translate\n              >\n                <div class=\"alert alert-warning m-b-0\">\n                  {{ 'Due to the large number, only a subset of data points are displayed. Use search to narrow down the number of results.' | translate}}\n                </div>\n              </c8y-list-item>\n              <c8y-datapoint-selector-list-item\n                [ngModel]=\"dp\"\n                [isSelected]=\"selectedDatapoints | includesDatapoint: dp\"\n                [datapointLibraryEntries]=\"datapointLibraryEntries\"\n                [disableTypeaheadIfSelected]=\"true\"\n                (added)=\"datapointAdded($event)\"\n                (removed)=\"datapointRemoved($event)\"\n                [highlightText]=\"searchStringChanges$ | async\"\n                class=\"d-contents\"\n                *ngFor=\"let dp of filteredDatapoints; trackBy: trackByFn\"\n              ></c8y-datapoint-selector-list-item>\n            </c8y-list-group>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n  <!-- last column  -->\n  <div class=\"inner-scroll bg-gray-white\">\n    <p\n      class=\"text-medium m-b-4 p-l-16 p-r-16 p-t-8 p-b-8 separator-bottom sticky-top text-truncate\"\n      [title]=\"'Selected data points' | translate\"\n      translate\n    >\n      Selected data points\n    </p>\n    <div class=\"d-flex flex-wrap gap-8 p-l-16 p-r-16 p-b-16\">\n      <div class=\"c8y-datapoint-pill\" *ngFor=\"let selectedDp of selectedDatapoints\">\n        <button\n          [title]=\"'Remove' | translate\"\n          type=\"button\"\n          class=\"c8y-datapoint-pill__btn\"\n          (click)=\"datapointRemoved(selectedDp)\"\n        >\n          <i c8yIcon=\"remove\" class=\"icon-14\"></i>\n        </button>\n        <div\n          class=\"c8y-datapoint-pill__label\"\n          [title]=\"selectedDp | datapointLabel: { doNotUseLabel: true, includeDevice: true }\"\n        >\n          <i\n            c8yIcon=\"circle\"\n            class=\"m-r-4 icon-14\"\n            [style.color]=\"selectedDp.color\"\n          ></i>\n          <span class=\"text-truncate\">\n            <span class=\"text-truncate\">{{ selectedDp | datapointLabel }}</span>\n            <small class=\"text-muted text-10\" *ngIf=\"selectedDp?.__target?.name\">\n              {{ selectedDp?.__target?.name }}\n            </small>\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"p-16\" *ngIf=\"!selectedDatapoints || !selectedDatapoints.length\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 class=\"c8y-icon c8y-icon-data-points c8y-icon-duocolor\"></h1>\n        <p>\n          <strong translate>No data points selected.</strong>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => DatapointSelectorComponent)
                    }
                ]
            },] }
];
DatapointSelectorComponent.ctorParameters = () => [
    { type: DatapointLibraryService }
];
DatapointSelectorComponent.propDecorators = {
    contextAsset: [{ type: Input }],
    allowChangingContext: [{ type: Input }],
    allowDatapointsFromMultipleAssets: [{ type: Input }],
    defaultActiveState: [{ type: Input }],
    ignoreDatapointTemplates: [{ type: Input }],
    guessDatapointUnit: [{ type: Input }],
    allowSearch: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,