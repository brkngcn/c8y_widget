import { Injectable } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { C8yValidators } from '@c8y/ngx-components';
import { AXIS_TYPES, CHART_LINE_TYPES, CHART_RENDER_TYPES } from './datapoint-attributes.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
export class DatapointAttributesFormValidationService {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
    }
    getDefaultFormGroup(fieldsToRemove = []) {
        const formFields = {
            __active: [true, []],
            __target: this.getTargetFormGroup(),
            __template: [undefined, []],
            color: ['', this.getColorValidators()],
            label: ['', this.getLabelValidators()],
            description: ['', this.getDescriptionValidators()],
            fragment: ['', this.getFragmentValidators()],
            series: ['', this.getSeriesValidators()],
            range: this.getMinMaxFormGroup(),
            unit: [undefined, this.getUnitValidators()],
            target: [undefined, this.getTargetValidators()],
            redRange: this.getMinMaxFormGroup(),
            yellowRange: this.getMinMaxFormGroup(),
            chart: this.getChartFormGroup()
        };
        if (fieldsToRemove.length) {
            for (const field of fieldsToRemove) {
                delete formFields[field];
            }
        }
        return this.formBuilder.group(formFields, {
            validators: this.getOverallValidators()
        });
    }
    convertToBackendFormat(formDataStructure) {
        if (!formDataStructure) {
            return {};
        }
        const { __active, __target, __template, color, label, description, fragment, series, range, unit, target, redRange, yellowRange, chart } = formDataStructure;
        const obj = {
            __active,
            __target,
            __template,
            color,
            label,
            description,
            fragment,
            series,
            min: range === null || range === void 0 ? void 0 : range.min,
            max: range === null || range === void 0 ? void 0 : range.max,
            unit,
            target,
            redRangeMin: redRange === null || redRange === void 0 ? void 0 : redRange.min,
            redRangeMax: redRange === null || redRange === void 0 ? void 0 : redRange.max,
            yellowRangeMin: yellowRange === null || yellowRange === void 0 ? void 0 : yellowRange.min,
            yellowRangeMax: yellowRange === null || yellowRange === void 0 ? void 0 : yellowRange.max,
            renderType: chart === null || chart === void 0 ? void 0 : chart.renderType,
            lineType: chart === null || chart === void 0 ? void 0 : chart.lineType,
            yAxisType: chart === null || chart === void 0 ? void 0 : chart.yAxisType
        };
        return obj;
    }
    convertToFormGroupFormat(backendDataStructure) {
        if (!backendDataStructure) {
            return {};
        }
        const { __active, __target, __template, color, label, description, fragment, series, min, max, unit, target, redRangeMin, redRangeMax, yellowRangeMin, yellowRangeMax, renderType, lineType, yAxisType } = backendDataStructure;
        const obj = {
            __active,
            __target,
            __template,
            color,
            label,
            description,
            fragment,
            series,
            range: {
                min: this.convertStringToNumber(min),
                max: this.convertStringToNumber(max)
            },
            unit,
            target: this.convertStringToNumber(target),
            redRange: {
                min: this.convertStringToNumber(redRangeMin),
                max: this.convertStringToNumber(redRangeMax)
            },
            yellowRange: {
                min: this.convertStringToNumber(yellowRangeMin),
                max: this.convertStringToNumber(yellowRangeMax)
            },
            chart: renderType || lineType || yAxisType ? { renderType, lineType, yAxisType } : undefined
        };
        return obj;
    }
    getColorValidators() {
        return [Validators.required, Validators.minLength(4)];
    }
    getLabelValidators() {
        return [Validators.required, Validators.minLength(1), Validators.maxLength(120)];
    }
    getDescriptionValidators() {
        return [];
    }
    getFragmentValidators() {
        return [
            Validators.required,
            Validators.minLength(1),
            Validators.maxLength(120),
            Validators.pattern(/^[^.]*$/)
        ];
    }
    getSeriesValidators() {
        return [
            Validators.required,
            Validators.minLength(1),
            Validators.maxLength(120),
            Validators.pattern(/^[^.]*$/)
        ];
    }
    getMinMaxValidators() {
        return [C8yValidators.minMaxValidator(), C8yValidators.requireBothMinAndMax()];
    }
    getUnitValidators() {
        return [];
    }
    getTargetValidators() {
        return [];
    }
    getOverallValidators() {
        return [
            C8yValidators.withinScale('redRange.min'),
            C8yValidators.withinScale('redRange.max'),
            C8yValidators.withinScale('yellowRange.min'),
            C8yValidators.withinScale('yellowRange.max'),
            C8yValidators.withinScale('target')
        ];
    }
    getMinMaxFormGroup() {
        return this.formBuilder.group({ min: [undefined, []], max: [undefined, []] }, { validators: this.getMinMaxValidators() });
    }
    getChartFormGroup() {
        return this.formBuilder.group({
            renderType: [CHART_RENDER_TYPES[0].val, []],
            lineType: [CHART_LINE_TYPES[0].val, []],
            yAxisType: [AXIS_TYPES[0].val, []]
        });
    }
    getTargetFormGroup() {
        return this.formBuilder.group({
            id: [undefined, []],
            name: [undefined, []]
        });
    }
    convertStringToNumber(possibleString) {
        if (typeof possibleString === 'string') {
            try {
                return Number.parseFloat(possibleString);
            }
            catch (_a) {
                return undefined;
            }
        }
        else {
            return possibleString;
        }
    }
}
DatapointAttributesFormValidationService.ɵfac = function DatapointAttributesFormValidationService_Factory(t) { return new (t || DatapointAttributesFormValidationService)(ɵngcc0.ɵɵinject(ɵngcc1.FormBuilder)); };
DatapointAttributesFormValidationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DatapointAttributesFormValidationService_Factory() { return new DatapointAttributesFormValidationService(i0.ɵɵinject(i1.FormBuilder)); }, token: DatapointAttributesFormValidationService, providedIn: "root" });
DatapointAttributesFormValidationService.ctorParameters = () => [
    { type: FormBuilder }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatapointAttributesFormValidationService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,