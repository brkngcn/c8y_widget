import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService, MeasurementService } from '@c8y/client';
import { AppStateService, ColorService, MAX_PAGE_SIZE } from '@c8y/ngx-components';
import { get, sortBy, uniq } from 'lodash-es';
import { filter } from 'rxjs/operators';
import { DATAPOINT_LIBRARY_FRAGMENT } from './datapoint-selection.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@c8y/client/lib/src/measurement/MeasurementService";
export class DatapointLibraryService {
    constructor(inventory, appState, measurements, color) {
        this.inventory = inventory;
        this.appState = appState;
        this.measurements = measurements;
        this.color = color;
        this.appState.currentUser.pipe(filter(user => !user)).subscribe(() => {
            this.cache = undefined;
        });
    }
    getAllDatapointLibraryEntriesCached(forceCacheRenew = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (forceCacheRenew) {
                this.cache = undefined;
            }
            if (!this.cache) {
                this.cache = this.getAllDatapointLibraryEntries();
            }
            return this.cache;
        });
    }
    getFirstDatapointLibraryPage() {
        return __awaiter(this, void 0, void 0, function* () {
            const filterObj = {
                currentPage: 1,
                pageSize: 50,
                fragmentType: DATAPOINT_LIBRARY_FRAGMENT,
                withTotalPages: true
            };
            return (yield this.inventory.list(filterObj));
        });
    }
    getAllDatapointLibraryItemsCached() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.cache) {
                this.cache = this.getAllDatapointLibraryEntries();
            }
            const res = yield this.cache;
            return res.map(tmp => tmp[DATAPOINT_LIBRARY_FRAGMENT]);
        });
    }
    updateDatapoints(datapoints, skipUpdatingTarget = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(datapoints)) {
                return datapoints;
            }
            const currentTargetsPromise = !skipUpdatingTarget ? this.getCurrentVersionOfTargetsFromDatapoints(datapoints) : Promise.resolve([]);
            const [currentTemplates, currentTargets] = yield Promise.all([
                this.getCurrentTemplatesFromDatapoints(datapoints),
                currentTargetsPromise
            ]);
            const currentTemplateVersions = currentTemplates
                .map(tmp => this.mapDatapointLibraryEntry(tmp))
                .filter(tmp => !!tmp);
            for (const datapoint of datapoints) {
                const { fragment, series, __active, __target, color, label, __template } = datapoint;
                const foundCurrentTemplateVersion = currentTemplateVersions.find(tmp => tmp.__template === datapoint.__template);
                if (foundCurrentTemplateVersion) {
                    Object.assign(datapoint, foundCurrentTemplateVersion);
                    Object.assign(datapoint, {
                        fragment,
                        series,
                        __active,
                        __target,
                        color,
                        label,
                        __template
                    });
                }
                const foundCurrentTarget = currentTargets.find(target => target.id === (__target === null || __target === void 0 ? void 0 : __target.id));
                if (foundCurrentTarget) {
                    const { id, name } = foundCurrentTarget;
                    datapoint.__target = { id, name };
                }
            }
            return datapoints;
        });
    }
    getDatapointsOfAsset(parentReference, ignoreDatapointTemplates) {
        return __awaiter(this, void 0, void 0, function* () {
            const [kpiResponse, details] = yield Promise.all([
                (ignoreDatapointTemplates
                    ? Promise.resolve(null)
                    : this.inventory.assetKPIsList(parentReference, { pageSize: MAX_PAGE_SIZE })),
                this.inventory.getMeasurementsAndSeries(parentReference)
            ]);
            const kpis = kpiResponse && kpiResponse.data ? kpiResponse.data : [];
            const sortedDetails = sortBy(details, ['fragment', 'series']);
            return yield this.combineFragmentSeriesTuplesWithDetails(sortedDetails, parentReference, kpis);
        });
    }
    /**
     * Requests the last measurement with the given fragment and series to extract it's unit.
     * If the source attribute is provided, it will check the last measurement for this specific source.
     * @returns found unit or an empty string instead
     */
    guessUnitOfDatapoint(fragment, series, source) {
        return __awaiter(this, void 0, void 0, function* () {
            const measurementfilter = {
                valueFragmentSeries: series,
                valueFragmentType: fragment,
                pageSize: 1,
                revert: true,
                dateFrom: '1970-01-01'
            };
            if (source === null || source === void 0 ? void 0 : source.id) {
                measurementfilter.source = source === null || source === void 0 ? void 0 : source.id;
            }
            try {
                const { data: lastMeasurements } = yield this.measurements.list(measurementfilter);
                const measurement = lastMeasurements[0];
                if (measurement) {
                    const pathToUnit = `${fragment}.${series}.unit`;
                    const unit = get(measurement, pathToUnit);
                    if ((unit === null || unit === void 0 ? void 0 : unit.length) && typeof unit === 'string') {
                        return unit;
                    }
                }
            }
            catch (_a) {
                // nothing to do
            }
            return '';
        });
    }
    combineFragmentSeriesTuplesWithDetails(tuples, target, kpis) {
        return __awaiter(this, void 0, void 0, function* () {
            const datapoints = tuples.map(tuple => {
                var _a;
                const foundDatapointLibraryEntry = kpis.find(kpi => kpi[DATAPOINT_LIBRARY_FRAGMENT] &&
                    kpi[DATAPOINT_LIBRARY_FRAGMENT].fragment === tuple.fragment &&
                    kpi[DATAPOINT_LIBRARY_FRAGMENT].series === tuple.series);
                const datapoint = this.mapDatapointLibraryEntry(foundDatapointLibraryEntry) || tuple;
                if (!datapoint.label) {
                    datapoint.label = `${datapoint.fragment} â†’ ${datapoint.series}`;
                }
                if (!((_a = datapoint.unit) === null || _a === void 0 ? void 0 : _a.length)) {
                    datapoint.unit = '';
                }
                datapoint.__target = target;
                return datapoint;
            });
            yield this.assignColorToDatapoints(datapoints);
            return datapoints;
        });
    }
    assignColorToDatapoints(datapoints) {
        return __awaiter(this, void 0, void 0, function* () {
            const datapointsWithoutColor = datapoints.filter(datapoint => !datapoint.color);
            yield Promise.all(datapointsWithoutColor.map(datapoint => this.color.generateColorForDatapoint(datapoint.fragment, datapoint.series).then(color => (datapoint.color = color))));
        });
    }
    getAllDatapointLibraryEntries() {
        return __awaiter(this, void 0, void 0, function* () {
            const entries = new Array();
            const filterObj = {
                currentPage: 1,
                pageSize: MAX_PAGE_SIZE,
                fragmentType: DATAPOINT_LIBRARY_FRAGMENT
            };
            let res = yield this.inventory.list(filterObj);
            while (res.data.length) {
                entries.push(...res.data);
                if (res.data.length < res.paging.pageSize) {
                    break;
                }
                res = yield res.paging.next();
            }
            return entries;
        });
    }
    mapDatapointLibraryEntry(entry) {
        if (!entry || !entry[DATAPOINT_LIBRARY_FRAGMENT]) {
            return null;
        }
        const datapoint = entry[DATAPOINT_LIBRARY_FRAGMENT];
        datapoint.__template = entry.id;
        return datapoint;
    }
    getCurrentTemplatesFromDatapoints(datapoints) {
        return __awaiter(this, void 0, void 0, function* () {
            const datapointsWithTemplateId = datapoints.filter(dp => !!dp.__template);
            const usedTemplateIds = datapointsWithTemplateId.map(dp => dp.__template);
            return yield this.getMOsByIds(usedTemplateIds);
        });
    }
    getCurrentVersionOfTargetsFromDatapoints(datapoints) {
        return __awaiter(this, void 0, void 0, function* () {
            const datapointsWithTarget = datapoints.filter(dp => { var _a; return !!((_a = dp.__target) === null || _a === void 0 ? void 0 : _a.id); });
            const usedTargetIds = datapointsWithTarget.map(dp => dp.__target.id);
            return yield this.getMOsByIds(usedTargetIds);
        });
    }
    getMOsByIds(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const uniqManagedObjectIds = uniq(ids);
            if (!uniqManagedObjectIds.length) {
                return [];
            }
            try {
                const { data: managedObjects } = yield this.inventory.list({
                    ids: uniqManagedObjectIds.join(),
                    pageSize: MAX_PAGE_SIZE
                });
                return managedObjects;
            }
            catch (_a) {
                // Fail silently in case we are not able to talk to the inventory API.
                // Should only be reached in case of an server side error.
                // instead of failing, pretend like we didn't receive any items.
                console.warn(`Failed to get the current version of the following managedObjects: ${uniqManagedObjectIds.join()}.`);
                return [];
            }
        });
    }
}
DatapointLibraryService.Éµprov = i0.ÉµÉµdefineInjectable({ factory: function DatapointLibraryService_Factory() { return new DatapointLibraryService(i0.ÉµÉµinject(i1.InventoryService), i0.ÉµÉµinject(i2.AppStateService), i0.ÉµÉµinject(i3.MeasurementService), i0.ÉµÉµinject(i2.ColorService)); }, token: DatapointLibraryService, providedIn: "root" });
DatapointLibraryService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
DatapointLibraryService.ctorParameters = () => [
    { type: InventoryService },
    { type: AppStateService },
    { type: MeasurementService },
    { type: ColorService }
];
//# sourceMappingURL=data:application/json;base64,