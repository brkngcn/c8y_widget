import { Pipe } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class FilterDatapointsPipe {
    transform(datapoints, searchString) {
        if (!searchString || !datapoints || !Array.isArray(datapoints)) {
            return datapoints;
        }
        const lowerCaseSearchString = searchString.toLowerCase().trim();
        return datapoints.filter(datapoint => this.includesSearchStringIgnoringCasing(datapoint, lowerCaseSearchString));
    }
    includesSearchStringIgnoringCasing(datapoint, lowerCaseSearchString) {
        var _a, _b, _c;
        const label = (_a = datapoint.label) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (label && label.includes(lowerCaseSearchString)) {
            return true;
        }
        const fragment = (_b = datapoint.fragment) === null || _b === void 0 ? void 0 : _b.toLowerCase();
        if (fragment && fragment.includes(lowerCaseSearchString)) {
            return true;
        }
        const series = (_c = datapoint.series) === null || _c === void 0 ? void 0 : _c.toLowerCase();
        if (series && series.includes(lowerCaseSearchString)) {
            return true;
        }
        return false;
    }
}
FilterDatapointsPipe.ɵfac = function FilterDatapointsPipe_Factory(t) { return new (t || FilterDatapointsPipe)(); };
FilterDatapointsPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "filterDatapoints", type: FilterDatapointsPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilterDatapointsPipe, [{
        type: Pipe,
        args: [{
                name: 'filterDatapoints'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWRhdGFwb2ludHMucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGF0YXBvaW50LXNlbGVjdG9yL3BpcGVzL2ZpbHRlci1kYXRhcG9pbnRzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBTXBELE1BQU0sT0FBTyxvQkFBb0I7QUFBRyxJQUVsQyxTQUFTLENBQUMsVUFBd0IsRUFBRSxZQUFvQjtBQUFJLFFBQzFELElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ3BFLFlBQU0sT0FBTyxVQUFVLENBQUM7QUFDeEIsU0FBSztBQUNMLFFBQUksTUFBTSxxQkFBcUIsR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDcEUsUUFBSSxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsU0FBUyxFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQztBQUNySCxJQUFFLENBQUM7QUFDSCxJQUNVLGtDQUFrQyxDQUFDLFNBQXFCLEVBQUUscUJBQTZCO0FBQUk7QUFDdEYsUUFBWCxNQUFNLEtBQUssR0FBRyxNQUFBLFNBQVMsQ0FBQyxLQUFLLDBDQUFFLFdBQVcsRUFBRSxDQUFDO0FBQ2pELFFBQUksSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0FBQ3hELFlBQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsU0FBSztBQUNMLFFBQ0ksTUFBTSxRQUFRLEdBQUcsTUFBQSxTQUFTLENBQUMsUUFBUSwwQ0FBRSxXQUFXLEVBQUUsQ0FBQztBQUN2RCxRQUFJLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsRUFBRTtBQUM5RCxZQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLFNBQUs7QUFDTCxRQUNJLE1BQU0sTUFBTSxHQUFHLE1BQUEsU0FBUyxDQUFDLE1BQU0sMENBQUUsV0FBVyxFQUFFLENBQUM7QUFDbkQsUUFBSSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7QUFDMUQsWUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixTQUFLO0FBQ0wsUUFDSSxPQUFPLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUM7QUFDSDtnREEvQkMsSUFBSSxTQUFDLGtCQUNKLElBQUksRUFBRSxrQkFBa0I7Q0FDekI7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgS1BJRGV0YWlscyB9IGZyb20gJy4uL2RhdGFwb2ludC1zZWxlY3Rpb24ubW9kZWwnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdmaWx0ZXJEYXRhcG9pbnRzJ1xufSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJEYXRhcG9pbnRzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIHRyYW5zZm9ybShkYXRhcG9pbnRzOiBLUElEZXRhaWxzW10sIHNlYXJjaFN0cmluZzogc3RyaW5nKTogS1BJRGV0YWlsc1tdIHtcbiAgICBpZiAoIXNlYXJjaFN0cmluZyB8fCAhZGF0YXBvaW50cyB8fCAhQXJyYXkuaXNBcnJheShkYXRhcG9pbnRzKSkge1xuICAgICAgcmV0dXJuIGRhdGFwb2ludHM7XG4gICAgfVxuICAgIGNvbnN0IGxvd2VyQ2FzZVNlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZy50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICByZXR1cm4gZGF0YXBvaW50cy5maWx0ZXIoZGF0YXBvaW50ID0+IHRoaXMuaW5jbHVkZXNTZWFyY2hTdHJpbmdJZ25vcmluZ0Nhc2luZyhkYXRhcG9pbnQsIGxvd2VyQ2FzZVNlYXJjaFN0cmluZykpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbmNsdWRlc1NlYXJjaFN0cmluZ0lnbm9yaW5nQ2FzaW5nKGRhdGFwb2ludDogS1BJRGV0YWlscywgbG93ZXJDYXNlU2VhcmNoU3RyaW5nOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBsYWJlbCA9IGRhdGFwb2ludC5sYWJlbD8udG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobGFiZWwgJiYgbGFiZWwuaW5jbHVkZXMobG93ZXJDYXNlU2VhcmNoU3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgZnJhZ21lbnQgPSBkYXRhcG9pbnQuZnJhZ21lbnQ/LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGZyYWdtZW50ICYmIGZyYWdtZW50LmluY2x1ZGVzKGxvd2VyQ2FzZVNlYXJjaFN0cmluZykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcmllcyA9IGRhdGFwb2ludC5zZXJpZXM/LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHNlcmllcyAmJiBzZXJpZXMuaW5jbHVkZXMobG93ZXJDYXNlU2VhcmNoU3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cbiJdfQ==