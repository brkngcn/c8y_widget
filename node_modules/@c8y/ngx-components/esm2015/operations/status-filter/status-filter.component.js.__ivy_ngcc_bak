import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
export class StatusFilterComponent {
    constructor() {
        this.statusOptions = [];
        this.onFilterChanged = new EventEmitter();
        this.isAllButtonSelected = true;
    }
    /** List of filter options to be displayed */
    set options(options) {
        this.statusOptions = (Object.values(options) || []).map(option => ({
            selected: false,
            option
        }));
    }
    /**
     * Allows multiple options to be active simultaneosly.
     */
    set _multiple(multiple) {
        this.multiple = coerceBooleanProperty(multiple);
    }
    /** Display the filter as a small button group */
    set _small(small) {
        this.small = coerceBooleanProperty(small);
    }
    get displaySmall() {
        return this.small;
    }
    changeFilter(option) {
        this.isAllButtonSelected = false;
        let emitNeeded = false;
        if (this.multiple) {
            option.selected = !option.selected;
            emitNeeded = true;
        }
        else if (!option.selected) {
            option.selected = true;
            this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));
            emitNeeded = true;
        }
        if (emitNeeded) {
            this.emitSelectedOptions();
        }
    }
    removeFilter() {
        this.isAllButtonSelected = true;
        this.statusOptions.forEach(op => (op.selected = false));
        this.emitSelectedOptions();
    }
    /**
     * Allows the filter to be initalliy displayed with some preset filters.
     *
     * @param filters An `StatusOption` array defining filter options to be preset.
     * @param emit  (optional) If `true` component will emit `onFilterChanged` event.
     */
    preset(filters, emit = true) {
        let firstSelected = false;
        this.statusOptions.forEach(option => (option.selected = false));
        this.statusOptions
            .filter(option => (filters || []).map(o => o.label).includes(option.option.label))
            .filter(() => {
            // only first option passed will be set in single selection mode
            const include = this.multiple || !firstSelected;
            if (include) {
                firstSelected = true;
            }
            return include;
        })
            .forEach(option => (option.selected = true));
        this.isAllButtonSelected = !(filters && filters.length);
        if (emit) {
            this.emitSelectedOptions();
        }
    }
    reset() {
        this.removeFilter();
    }
    activeFilters() {
        return this.statusOptions.filter(option => option.selected).map(option => option.option);
    }
    isFilterApplied() {
        return this.statusOptions.some(option => option.selected);
    }
    emitSelectedOptions() {
        this.onFilterChanged.emit(this.statusOptions.filter(option => option.selected).map(option => option.option));
    }
}
StatusFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-status-filter',
                template: "<div dropdown placement=\"bottom left\" class=\"dropdown c8y-child-assets-selector\">\n  <button\n    id=\"status-filter\"\n    dropdownToggle\n    type=\"button\"\n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    title=\"{{ 'Status filter' | translate }}\"\n    aria-controls=\"dropdown-status-filter\"\n  >\n    <span *ngFor=\"let option of statusOptions\" class=\"d-contents\">\n      <span class=\"text-truncate\" *ngIf=\"option.selected\">\n        <i [c8yIcon]=\"option.option.icon\" [ngClass]=\"option.option.styleClass\"></i>\n        <span class=\"m-l-4\">{{ option.option.label | translate }}</span>\n      </span>\n    </span>\n    <span class=\"text-truncate\" *ngIf=\"isAllButtonSelected\">\n      <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n      {{ 'All statuses' | translate }}\n    </span>\n  </button>\n  <ul\n    id=\"dropdown-status-filter\"\n    *dropdownMenu\n    class=\"dropdown-menu\"\n    role=\"menu\"\n    aria-labelledby=\"status-filter\"\n  >\n    <li *ngFor=\"let option of statusOptions\" [ngClass]=\"{ active: option.selected }\">\n      <button (click)=\"changeFilter(option)\">\n        <i [c8yIcon]=\"option.option.icon\" [ngClass]=\"option.option.styleClass\"></i>\n        <span class=\"m-l-4\">{{ option.option.label | translate }}</span>\n      </button>\n    </li>\n    <li [ngClass]=\"{ active: isAllButtonSelected }\">\n      <button title=\"{{ 'All' | translate }}\" (click)=\"removeFilter()\">\n        <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n        {{ 'All statuses' | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n"
            },] }
];
StatusFilterComponent.propDecorators = {
    options: [{ type: Input }],
    _multiple: [{ type: Input, args: ['multiple',] }],
    _small: [{ type: Input, args: ['small',] }],
    displaySmall: [{ type: HostBinding, args: ['class.btn-group-sm',] }],
    onFilterChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,