import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { OperationService } from '@c8y/client';
import { OperationDetailsModalComponent } from './operation-details-modal.component';
export class OperationDetailsService {
    constructor(operationService, modalService) {
        this.operationService = operationService;
        this.modalService = modalService;
    }
    /**
     * Opens a modal window with the details of given single operation.
     * @param operationOrOperationId Operation's object or id.
     * @param options Additional options:
     * - `collapsed`: boolean - whether the details pane should be initially collapsed
     * - `readOnly`: boolean - whether the details should be displayed in read-only mode
     */
    openDetails(operationOrOperationId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = operationOrOperationId.id
                ? operationOrOperationId
                : (yield this.operationService.detail(operationOrOperationId)).data;
            const initialState = Object.assign({ operation }, options);
            this.modalService.show(OperationDetailsModalComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
OperationDetailsService.decorators = [
    { type: Injectable }
];
OperationDetailsService.ctorParameters = () => [
    { type: OperationService },
    { type: BsModalService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLWRldGFpbHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvb3BlcmF0aW9uLWRldGFpbHMvb3BlcmF0aW9uLWRldGFpbHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFjLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBR3JGLE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBb0IsZ0JBQWtDLEVBQVUsWUFBNEI7UUFBeEUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtJQUFHLENBQUM7SUFFaEc7Ozs7OztPQU1HO0lBQ0csV0FBVyxDQUNmLHNCQUFvRCxFQUNwRCxPQUFxRDs7WUFFckQsTUFBTSxTQUFTLEdBQWdCLHNCQUFxQyxDQUFDLEVBQUU7Z0JBQ3JFLENBQUMsQ0FBRSxzQkFBcUM7Z0JBQ3hDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3RFLE1BQU0sWUFBWSxtQkFBSyxTQUFTLElBQUssT0FBTyxDQUFFLENBQUM7WUFFL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUU7Z0JBQ3JELFlBQVk7Z0JBQ1osS0FBSyxFQUFFLFVBQVU7YUFDbEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBOzs7WUF4QkYsVUFBVTs7O1lBSFUsZ0JBQWdCO1lBRDVCLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgSU9wZXJhdGlvbiwgT3BlcmF0aW9uU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IE9wZXJhdGlvbkRldGFpbHNNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vb3BlcmF0aW9uLWRldGFpbHMtbW9kYWwuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9wZXJhdGlvbkRldGFpbHNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcGVyYXRpb25TZXJ2aWNlOiBPcGVyYXRpb25TZXJ2aWNlLCBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgbW9kYWwgd2luZG93IHdpdGggdGhlIGRldGFpbHMgb2YgZ2l2ZW4gc2luZ2xlIG9wZXJhdGlvbi5cbiAgICogQHBhcmFtIG9wZXJhdGlvbk9yT3BlcmF0aW9uSWQgT3BlcmF0aW9uJ3Mgb2JqZWN0IG9yIGlkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnM6XG4gICAqIC0gYGNvbGxhcHNlZGA6IGJvb2xlYW4gLSB3aGV0aGVyIHRoZSBkZXRhaWxzIHBhbmUgc2hvdWxkIGJlIGluaXRpYWxseSBjb2xsYXBzZWRcbiAgICogLSBgcmVhZE9ubHlgOiBib29sZWFuIC0gd2hldGhlciB0aGUgZGV0YWlscyBzaG91bGQgYmUgZGlzcGxheWVkIGluIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICBhc3luYyBvcGVuRGV0YWlscyhcbiAgICBvcGVyYXRpb25Pck9wZXJhdGlvbklkOiBJT3BlcmF0aW9uIHwgc3RyaW5nIHwgbnVtYmVyLFxuICAgIG9wdGlvbnM/OiB7IGNvbGxhcHNlZD86IGJvb2xlYW47IHJlYWRPbmx5PzogYm9vbGVhbiB9XG4gICkge1xuICAgIGNvbnN0IG9wZXJhdGlvbjogSU9wZXJhdGlvbiA9IChvcGVyYXRpb25Pck9wZXJhdGlvbklkIGFzIElPcGVyYXRpb24pLmlkXG4gICAgICA/IChvcGVyYXRpb25Pck9wZXJhdGlvbklkIGFzIElPcGVyYXRpb24pXG4gICAgICA6IChhd2FpdCB0aGlzLm9wZXJhdGlvblNlcnZpY2UuZGV0YWlsKG9wZXJhdGlvbk9yT3BlcmF0aW9uSWQpKS5kYXRhO1xuICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHsgb3BlcmF0aW9uLCAuLi5vcHRpb25zIH07XG5cbiAgICB0aGlzLm1vZGFsU2VydmljZS5zaG93KE9wZXJhdGlvbkRldGFpbHNNb2RhbENvbXBvbmVudCwge1xuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgY2xhc3M6ICdtb2RhbC1sZydcbiAgICB9KTtcbiAgfVxufVxuIl19