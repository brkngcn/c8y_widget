import { __awaiter } from "tslib";
import { Location } from '@angular/common';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { flatten, has, isUndefined } from 'lodash-es';
import { Subject } from 'rxjs';
import { InventoryService, OperationBulkService, OperationService } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@angular/common';
export const baseUrl = 'devicecontrol/bulk/creation/';
export const HOOK_LIST_BULK_TYPE = new InjectionToken('LIST_BULK_TYPE');
export class BulkOperationsService {
    constructor(operationBulkService, operationService, inventoryService, location, bulkTypes) {
        this.operationBulkService = operationBulkService;
        this.operationService = operationService;
        this.inventoryService = inventoryService;
        this.location = location;
        this.DD_LOW_COUNT = 10;
        this.firmwareId = new Subject();
        this.bulkTypes = flatten(bulkTypes);
        this.bulkTypes = this.bulkTypes.map(type => {
            if (isUndefined(type.selected)) {
                type.selected = false;
            }
            return type;
        });
    }
    getBulkOperations(customFilter = {}) {
        const filter = Object.assign({ withTotalPages: true, withDeleted: true, pageSize: 50 }, customFilter);
        return this.operationBulkService.list(filter);
    }
    getBulkOperationById(bulkOperationId) {
        return this.operationBulkService.detail(bulkOperationId);
    }
    createBulkOperation(bulkOperation) {
        return this.operationBulkService.create(bulkOperation);
    }
    deleteBulkOperation(bulkOperationId) {
        return this.operationBulkService.delete(bulkOperationId);
    }
    updateBulkOperation(bulkOperation) {
        return this.operationBulkService.update(bulkOperation);
    }
    getOperation(id) {
        return this.operationService.detail(id);
    }
    returnToBulkOperationOverview() {
        this.location.back();
    }
    setBulkTypes(list) {
        this.bulkTypes = list;
    }
    getBulkTypes() {
        return this.bulkTypes;
    }
    setFirmwareId(id) {
        this.firmwareId.next(id);
    }
    createGroup(deviceQueryDataString) {
        const dynamicGroup = {
            name: 'Bulk operations group',
            type: 'c8y_DynamicGroup',
            c8y_IsDynamicGroup: { invisible: {} },
            c8y_DeviceQueryString: deviceQueryDataString
        };
        return this.inventoryService.create(dynamicGroup);
    }
    scheduleBulkOperation(deviceQueryString, details) {
        return __awaiter(this, void 0, void 0, function* () {
            const dynamicGroup = yield this.createGroup(deviceQueryString);
            const bulkOperation = {
                groupId: dynamicGroup.data.id,
                operationPrototype: details.prototype,
                creationRamp: details.schedule.delayInSeconds,
                startDate: details.schedule.scheduledDate.toISOString(),
                note: details.note
            };
            yield this.createBulkOperation(bulkOperation);
        });
    }
    getSingleOperationsByStatus(status, bulkOperationId) {
        const filter = {
            withTotalPages: true,
            bulkOperationId,
            status: (status && status.toUpperCase()) || ''
        };
        return this.operationService.list(filter);
    }
    updateSingleOperation(partialUpdateObject) {
        return this.operationService.update(partialUpdateObject);
    }
    retrieveBulkOperationType(operation) {
        let type;
        this.bulkTypes.some(t => {
            if (t.fragments.some(fragment => has(operation, fragment))) {
                type = t.type;
                return true;
            }
        });
        return type;
    }
}
BulkOperationsService.ɵfac = function BulkOperationsService_Factory(t) { return new (t || BulkOperationsService)(ɵngcc0.ɵɵinject(ɵngcc1.OperationBulkService), ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.Location), ɵngcc0.ɵɵinject(HOOK_LIST_BULK_TYPE, 8)); };
BulkOperationsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkOperationsService, factory: BulkOperationsService.ɵfac });
BulkOperationsService.ctorParameters = () => [
    { type: OperationBulkService },
    { type: OperationService },
    { type: InventoryService },
    { type: Location },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_LIST_BULK_TYPE,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.OperationBulkService }, { type: ɵngcc1.OperationService }, { type: ɵngcc1.InventoryService }, { type: ɵngcc2.Location }, { type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_LIST_BULK_TYPE]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,