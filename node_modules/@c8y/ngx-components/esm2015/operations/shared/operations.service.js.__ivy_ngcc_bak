import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { OperationService, OperationStatus } from '@c8y/client';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { assign, difference, has, includes, keys, pickBy, without } from 'lodash-es';
import { RESERVED_KEYS, STANDARD_KEYS } from './operations.model';
export class OperationsService {
    constructor(operationService, modal, alertService) {
        this.operationService = operationService;
        this.modal = modal;
        this.alertService = alertService;
    }
    getStandardKeys(operation) {
        return pickBy(STANDARD_KEYS, (_, key) => has(operation, key));
    }
    getNonStandardKeys(operation, excluding = []) {
        return without(difference(this.getKeys(operation), keys(this.getStandardKeys(operation))), ...excluding);
    }
    cancel(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Cancel operation'), gettext('You are about to cancel the operation. Do you want to proceed?'), Status.DANGER);
                const operationAfterUpdate = (yield this.operationService.update({
                    id: operation.id,
                    status: OperationStatus.FAILED,
                    failureReason: gettext('Operation cancelled by user.')
                })).data;
                assign(operation, operationAfterUpdate);
                this.alertService.success(gettext('Operation cancelled.'));
            }
            catch (er) {
                if (er) {
                    this.alertService.addServerFailure(er);
                }
            }
        });
    }
    getKeys(managedObject) {
        return Object.keys(Object.assign({}, managedObject)).filter(key => !includes(RESERVED_KEYS, key));
    }
}
OperationsService.decorators = [
    { type: Injectable }
];
OperationsService.ctorParameters = () => [
    { type: OperationService },
    { type: ModalService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9zaGFyZWQvb3BlcmF0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckYsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUdsRSxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQ1UsZ0JBQWtDLEVBQ2xDLEtBQW1CLEVBQ25CLFlBQTBCO1FBRjFCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUNqQyxDQUFDO0lBRUosZUFBZSxDQUFDLFNBQXFCO1FBQ25DLE9BQU8sTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsa0JBQWtCLENBQUMsU0FBcUIsRUFBRSxZQUFzQixFQUFFO1FBQ2hFLE9BQU8sT0FBTyxDQUNaLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFDMUUsR0FBRyxTQUFTLENBQ2IsQ0FBQztJQUNKLENBQUM7SUFFSyxNQUFNLENBQUMsU0FBOEI7O1lBQ3pDLElBQUk7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDdEIsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEVBQzNCLE9BQU8sQ0FBQyxnRUFBZ0UsQ0FBQyxFQUN6RSxNQUFNLENBQUMsTUFBTSxDQUNkLENBQUM7Z0JBRUYsTUFBTSxvQkFBb0IsR0FBRyxDQUMzQixNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7b0JBQ2pDLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRTtvQkFDaEIsTUFBTSxFQUFFLGVBQWUsQ0FBQyxNQUFNO29CQUM5QixhQUFhLEVBQUUsT0FBTyxDQUFDLDhCQUE4QixDQUFDO2lCQUN2RCxDQUFDLENBQ0gsQ0FBQyxJQUFJLENBQUM7Z0JBQ1AsTUFBTSxDQUFDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO2FBQzVEO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxFQUFFLEVBQUU7b0JBQ04sSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDeEM7YUFDRjtRQUNILENBQUM7S0FBQTtJQUVPLE9BQU8sQ0FBQyxhQUFhO1FBQzNCLE9BQU8sTUFBTSxDQUFDLElBQUksbUJBQU0sYUFBYSxFQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7O1lBN0NGLFVBQVU7OztZQUxVLGdCQUFnQjtZQUNMLFlBQVk7WUFBbkMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElPcGVyYXRpb24sIE9wZXJhdGlvblNlcnZpY2UsIE9wZXJhdGlvblN0YXR1cyB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCwgTW9kYWxTZXJ2aWNlLCBTdGF0dXMgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGFzc2lnbiwgZGlmZmVyZW5jZSwgaGFzLCBpbmNsdWRlcywga2V5cywgcGlja0J5LCB3aXRob3V0IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFJFU0VSVkVEX0tFWVMsIFNUQU5EQVJEX0tFWVMgfSBmcm9tICcuL29wZXJhdGlvbnMubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uc1NlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG9wZXJhdGlvblNlcnZpY2U6IE9wZXJhdGlvblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBtb2RhbDogTW9kYWxTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIGdldFN0YW5kYXJkS2V5cyhvcGVyYXRpb246IElPcGVyYXRpb24pIHtcbiAgICByZXR1cm4gcGlja0J5KFNUQU5EQVJEX0tFWVMsIChfLCBrZXkpID0+IGhhcyhvcGVyYXRpb24sIGtleSkpO1xuICB9XG5cbiAgZ2V0Tm9uU3RhbmRhcmRLZXlzKG9wZXJhdGlvbjogSU9wZXJhdGlvbiwgZXhjbHVkaW5nOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHdpdGhvdXQoXG4gICAgICBkaWZmZXJlbmNlKHRoaXMuZ2V0S2V5cyhvcGVyYXRpb24pLCBrZXlzKHRoaXMuZ2V0U3RhbmRhcmRLZXlzKG9wZXJhdGlvbikpKSxcbiAgICAgIC4uLmV4Y2x1ZGluZ1xuICAgICk7XG4gIH1cblxuICBhc3luYyBjYW5jZWwob3BlcmF0aW9uOiBQYXJ0aWFsPElPcGVyYXRpb24+KSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubW9kYWwuY29uZmlybShcbiAgICAgICAgZ2V0dGV4dCgnQ2FuY2VsIG9wZXJhdGlvbicpLFxuICAgICAgICBnZXR0ZXh0KCdZb3UgYXJlIGFib3V0IHRvIGNhbmNlbCB0aGUgb3BlcmF0aW9uLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPycpLFxuICAgICAgICBTdGF0dXMuREFOR0VSXG4gICAgICApO1xuXG4gICAgICBjb25zdCBvcGVyYXRpb25BZnRlclVwZGF0ZSA9IChcbiAgICAgICAgYXdhaXQgdGhpcy5vcGVyYXRpb25TZXJ2aWNlLnVwZGF0ZSh7XG4gICAgICAgICAgaWQ6IG9wZXJhdGlvbi5pZCxcbiAgICAgICAgICBzdGF0dXM6IE9wZXJhdGlvblN0YXR1cy5GQUlMRUQsXG4gICAgICAgICAgZmFpbHVyZVJlYXNvbjogZ2V0dGV4dCgnT3BlcmF0aW9uIGNhbmNlbGxlZCBieSB1c2VyLicpXG4gICAgICAgIH0pXG4gICAgICApLmRhdGE7XG4gICAgICBhc3NpZ24ob3BlcmF0aW9uLCBvcGVyYXRpb25BZnRlclVwZGF0ZSk7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKGdldHRleHQoJ09wZXJhdGlvbiBjYW5jZWxsZWQuJykpO1xuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICBpZiAoZXIpIHtcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRLZXlzKG1hbmFnZWRPYmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoeyAuLi5tYW5hZ2VkT2JqZWN0IH0pLmZpbHRlcihrZXkgPT4gIWluY2x1ZGVzKFJFU0VSVkVEX0tFWVMsIGtleSkpO1xuICB9XG59XG4iXX0=