import { OperationStatus } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
export const OPERATION_STATUS_LABELS = {
    PENDING: gettext('Pending'),
    EXECUTING: gettext('Executing'),
    FAILED: gettext('Failed'),
    SUCCESSFUL: gettext('Successful')
};
export const OPERATION_STATUS_OPTIONS_MAP = {
    PENDING: {
        label: OPERATION_STATUS_LABELS.PENDING,
        status: OperationStatus.PENDING,
        icon: 'clock-o',
        styleClass: ''
    },
    EXECUTING: {
        label: OPERATION_STATUS_LABELS.EXECUTING,
        status: OperationStatus.EXECUTING,
        icon: 'refresh',
        styleClass: 'text-info'
    },
    SUCCESSFUL: {
        label: OPERATION_STATUS_LABELS.SUCCESSFUL,
        status: OperationStatus.SUCCESSFUL,
        icon: 'check-circle',
        styleClass: 'text-success'
    },
    FAILED: {
        label: OPERATION_STATUS_LABELS.FAILED,
        status: OperationStatus.FAILED,
        icon: 'exclamation-circle',
        styleClass: 'text-danger'
    }
};
export const CLEAN_KEYS = ['creationTime', 'deviceExternalIDs', 'id', 'self'];
export const CLEAN_KEYS_UPDATE = ['deviceId', 'deviceName', 'bulkOperationId'];
export const RESERVED_KEYS = CLEAN_KEYS.concat(['deviceId', 'deviceName', 'bulkOperationId']);
export const STANDARD_KEYS = {
    failureReason: gettext('Failure reason'),
    description: gettext('Description'),
    status: gettext('Status')
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvc2hhcmVkL29wZXJhdGlvbnMubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHOUMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUc7SUFDckMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDM0IsU0FBUyxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFDL0IsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDekIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUM7Q0FDbEMsQ0FBQztBQU1GLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUE4QjtJQUNyRSxPQUFPLEVBQUU7UUFDUCxLQUFLLEVBQUUsdUJBQXVCLENBQUMsT0FBTztRQUN0QyxNQUFNLEVBQUUsZUFBZSxDQUFDLE9BQU87UUFDL0IsSUFBSSxFQUFFLFNBQVM7UUFDZixVQUFVLEVBQUUsRUFBRTtLQUNZO0lBQzVCLFNBQVMsRUFBRTtRQUNULEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxTQUFTO1FBQ3hDLE1BQU0sRUFBRSxlQUFlLENBQUMsU0FBUztRQUNqQyxJQUFJLEVBQUUsU0FBUztRQUNmLFVBQVUsRUFBRSxXQUFXO0tBQ0c7SUFDNUIsVUFBVSxFQUFFO1FBQ1YsS0FBSyxFQUFFLHVCQUF1QixDQUFDLFVBQVU7UUFDekMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxVQUFVO1FBQ2xDLElBQUksRUFBRSxjQUFjO1FBQ3BCLFVBQVUsRUFBRSxjQUFjO0tBQ0E7SUFDNUIsTUFBTSxFQUFFO1FBQ04sS0FBSyxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDckMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxNQUFNO1FBQzlCLElBQUksRUFBRSxvQkFBb0I7UUFDMUIsVUFBVSxFQUFFLGFBQWE7S0FDQztDQUM3QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsY0FBYyxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUUvRSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0FBRTlGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRztJQUMzQixhQUFhLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0lBQ3hDLFdBQVcsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO0NBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGVyYXRpb25TdGF0dXMgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBTdGF0dXNPcHRpb24gfSBmcm9tICcuL3N0YXR1cy1vcHRpb24ubW9kZWwnO1xuXG5leHBvcnQgY29uc3QgT1BFUkFUSU9OX1NUQVRVU19MQUJFTFMgPSB7XG4gIFBFTkRJTkc6IGdldHRleHQoJ1BlbmRpbmcnKSxcbiAgRVhFQ1VUSU5HOiBnZXR0ZXh0KCdFeGVjdXRpbmcnKSxcbiAgRkFJTEVEOiBnZXR0ZXh0KCdGYWlsZWQnKSxcbiAgU1VDQ0VTU0ZVTDogZ2V0dGV4dCgnU3VjY2Vzc2Z1bCcpXG59O1xuXG5leHBvcnQgdHlwZSBPcGVyYXRpb25TdGF0dXNPcHRpb25zTWFwID0ge1xuICBba2V5IGluIGtleW9mIHR5cGVvZiBPcGVyYXRpb25TdGF0dXNdPzogU3RhdHVzT3B0aW9uO1xufTtcblxuZXhwb3J0IGNvbnN0IE9QRVJBVElPTl9TVEFUVVNfT1BUSU9OU19NQVA6IE9wZXJhdGlvblN0YXR1c09wdGlvbnNNYXAgPSB7XG4gIFBFTkRJTkc6IHtcbiAgICBsYWJlbDogT1BFUkFUSU9OX1NUQVRVU19MQUJFTFMuUEVORElORyxcbiAgICBzdGF0dXM6IE9wZXJhdGlvblN0YXR1cy5QRU5ESU5HLFxuICAgIGljb246ICdjbG9jay1vJyxcbiAgICBzdHlsZUNsYXNzOiAnJ1xuICB9IGFzIHVua25vd24gYXMgU3RhdHVzT3B0aW9uLFxuICBFWEVDVVRJTkc6IHtcbiAgICBsYWJlbDogT1BFUkFUSU9OX1NUQVRVU19MQUJFTFMuRVhFQ1VUSU5HLFxuICAgIHN0YXR1czogT3BlcmF0aW9uU3RhdHVzLkVYRUNVVElORyxcbiAgICBpY29uOiAncmVmcmVzaCcsXG4gICAgc3R5bGVDbGFzczogJ3RleHQtaW5mbydcbiAgfSBhcyB1bmtub3duIGFzIFN0YXR1c09wdGlvbixcbiAgU1VDQ0VTU0ZVTDoge1xuICAgIGxhYmVsOiBPUEVSQVRJT05fU1RBVFVTX0xBQkVMUy5TVUNDRVNTRlVMLFxuICAgIHN0YXR1czogT3BlcmF0aW9uU3RhdHVzLlNVQ0NFU1NGVUwsXG4gICAgaWNvbjogJ2NoZWNrLWNpcmNsZScsXG4gICAgc3R5bGVDbGFzczogJ3RleHQtc3VjY2VzcydcbiAgfSBhcyB1bmtub3duIGFzIFN0YXR1c09wdGlvbixcbiAgRkFJTEVEOiB7XG4gICAgbGFiZWw6IE9QRVJBVElPTl9TVEFUVVNfTEFCRUxTLkZBSUxFRCxcbiAgICBzdGF0dXM6IE9wZXJhdGlvblN0YXR1cy5GQUlMRUQsXG4gICAgaWNvbjogJ2V4Y2xhbWF0aW9uLWNpcmNsZScsXG4gICAgc3R5bGVDbGFzczogJ3RleHQtZGFuZ2VyJ1xuICB9IGFzIHVua25vd24gYXMgU3RhdHVzT3B0aW9uXG59O1xuXG5leHBvcnQgY29uc3QgQ0xFQU5fS0VZUyA9IFsnY3JlYXRpb25UaW1lJywgJ2RldmljZUV4dGVybmFsSURzJywgJ2lkJywgJ3NlbGYnXTtcblxuZXhwb3J0IGNvbnN0IENMRUFOX0tFWVNfVVBEQVRFID0gWydkZXZpY2VJZCcsICdkZXZpY2VOYW1lJywgJ2J1bGtPcGVyYXRpb25JZCddO1xuXG5leHBvcnQgY29uc3QgUkVTRVJWRURfS0VZUyA9IENMRUFOX0tFWVMuY29uY2F0KFsnZGV2aWNlSWQnLCAnZGV2aWNlTmFtZScsICdidWxrT3BlcmF0aW9uSWQnXSk7XG5cbmV4cG9ydCBjb25zdCBTVEFOREFSRF9LRVlTID0ge1xuICBmYWlsdXJlUmVhc29uOiBnZXR0ZXh0KCdGYWlsdXJlIHJlYXNvbicpLFxuICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnRGVzY3JpcHRpb24nKSxcbiAgc3RhdHVzOiBnZXR0ZXh0KCdTdGF0dXMnKVxufTtcbiJdfQ==