import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { OperationService, OperationStatus } from '@c8y/client';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { assign, difference, has, includes, keys, pickBy, without } from 'lodash-es';
import { RESERVED_KEYS, STANDARD_KEYS } from './operations.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
export class OperationsService {
    constructor(operationService, modal, alertService) {
        this.operationService = operationService;
        this.modal = modal;
        this.alertService = alertService;
    }
    getStandardKeys(operation) {
        return pickBy(STANDARD_KEYS, (_, key) => has(operation, key));
    }
    getNonStandardKeys(operation, excluding = []) {
        return without(difference(this.getKeys(operation), keys(this.getStandardKeys(operation))), ...excluding);
    }
    cancel(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Cancel operation'), gettext('You are about to cancel the operation. Do you want to proceed?'), Status.DANGER);
                const operationAfterUpdate = (yield this.operationService.update({
                    id: operation.id,
                    status: OperationStatus.FAILED,
                    failureReason: gettext('Operation cancelled by user.')
                })).data;
                assign(operation, operationAfterUpdate);
                this.alertService.success(gettext('Operation cancelled.'));
            }
            catch (er) {
                if (er) {
                    this.alertService.addServerFailure(er);
                }
            }
        });
    }
    getKeys(managedObject) {
        return Object.keys(Object.assign({}, managedObject)).filter(key => !includes(RESERVED_KEYS, key));
    }
}
OperationsService.ɵfac = function OperationsService_Factory(t) { return new (t || OperationsService)(ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc2.ModalService), ɵngcc0.ɵɵinject(ɵngcc2.AlertService)); };
OperationsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OperationsService, factory: OperationsService.ɵfac });
OperationsService.ctorParameters = () => [
    { type: OperationService },
    { type: ModalService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.OperationService }, { type: ɵngcc2.ModalService }, { type: ɵngcc2.AlertService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL3NoYXJlZC9vcGVyYXRpb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNyRixPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBR2xFLE1BQU0sT0FBTyxpQkFBaUI7QUFDOUIsSUFBRSxZQUNVLGdCQUFrQyxFQUNsQyxLQUFtQixFQUNuQixZQUEwQjtBQUNuQyxRQUhTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxVQUFLLEdBQUwsS0FBSyxDQUFjO0FBQUMsUUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWM7QUFDdEMsSUFBSyxDQUFDO0FBQ04sSUFDRSxlQUFlLENBQUMsU0FBcUI7QUFDdkMsUUFBSSxPQUFPLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbEUsSUFBRSxDQUFDO0FBQ0gsSUFDRSxrQkFBa0IsQ0FBQyxTQUFxQixFQUFFLFlBQXNCLEVBQUU7QUFDcEUsUUFBSSxPQUFPLE9BQU8sQ0FDWixVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQzFFLEdBQUcsU0FBUyxDQUNiLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNRLE1BQU0sQ0FBQyxTQUE4QjtBQUM3QztBQUVvQixZQUZoQixJQUFJO0FBQ1IsZ0JBQU0sTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDdEIsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEVBQzNCLE9BQU8sQ0FBQyxnRUFBZ0UsQ0FBQyxFQUN6RSxNQUFNLENBQUMsTUFBTSxDQUNkLENBQUM7QUFDUixnQkFDTSxNQUFNLG9CQUFvQixHQUFHLENBQzNCLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztBQUMzQyxvQkFBVSxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQUU7QUFDMUIsb0JBQVUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxNQUFNO0FBQ3hDLG9CQUFVLGFBQWEsRUFBRSxPQUFPLENBQUMsOEJBQThCLENBQUM7QUFDaEUsaUJBQVMsQ0FBQyxDQUNILENBQUMsSUFBSSxDQUFDO0FBQ2IsZ0JBQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlDLGdCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7QUFDakUsYUFBSztBQUFDLFlBQUEsT0FBTyxFQUFFLEVBQUU7QUFDakIsZ0JBQU0sSUFBSSxFQUFFLEVBQUU7QUFDZCxvQkFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLGlCQUFPO0FBQ1AsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNVLE9BQU8sQ0FBQyxhQUFhO0FBQy9CLFFBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxtQkFBTSxhQUFhLEVBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxRixJQUFFLENBQUM7QUFDSDs2Q0E5Q0MsVUFBVTtpSUFDVDtBQUFDO0FBQ1UsWUFQUSxnQkFBZ0I7QUFBSSxZQUNULFlBQVk7QUFBSSxZQUF2QyxZQUFZO0FBQUc7OzsrSUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU9wZXJhdGlvbiwgT3BlcmF0aW9uU2VydmljZSwgT3BlcmF0aW9uU3RhdHVzIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0LCBNb2RhbFNlcnZpY2UsIFN0YXR1cyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgYXNzaWduLCBkaWZmZXJlbmNlLCBoYXMsIGluY2x1ZGVzLCBrZXlzLCBwaWNrQnksIHdpdGhvdXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUkVTRVJWRURfS0VZUywgU1RBTkRBUkRfS0VZUyB9IGZyb20gJy4vb3BlcmF0aW9ucy5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPcGVyYXRpb25zU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgb3BlcmF0aW9uU2VydmljZTogT3BlcmF0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsOiBNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZVxuICApIHt9XG5cbiAgZ2V0U3RhbmRhcmRLZXlzKG9wZXJhdGlvbjogSU9wZXJhdGlvbikge1xuICAgIHJldHVybiBwaWNrQnkoU1RBTkRBUkRfS0VZUywgKF8sIGtleSkgPT4gaGFzKG9wZXJhdGlvbiwga2V5KSk7XG4gIH1cblxuICBnZXROb25TdGFuZGFyZEtleXMob3BlcmF0aW9uOiBJT3BlcmF0aW9uLCBleGNsdWRpbmc6IHN0cmluZ1tdID0gW10pIHtcbiAgICByZXR1cm4gd2l0aG91dChcbiAgICAgIGRpZmZlcmVuY2UodGhpcy5nZXRLZXlzKG9wZXJhdGlvbiksIGtleXModGhpcy5nZXRTdGFuZGFyZEtleXMob3BlcmF0aW9uKSkpLFxuICAgICAgLi4uZXhjbHVkaW5nXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGNhbmNlbChvcGVyYXRpb246IFBhcnRpYWw8SU9wZXJhdGlvbj4pIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5tb2RhbC5jb25maXJtKFxuICAgICAgICBnZXR0ZXh0KCdDYW5jZWwgb3BlcmF0aW9uJyksXG4gICAgICAgIGdldHRleHQoJ1lvdSBhcmUgYWJvdXQgdG8gY2FuY2VsIHRoZSBvcGVyYXRpb24uIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/JyksXG4gICAgICAgIFN0YXR1cy5EQU5HRVJcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG9wZXJhdGlvbkFmdGVyVXBkYXRlID0gKFxuICAgICAgICBhd2FpdCB0aGlzLm9wZXJhdGlvblNlcnZpY2UudXBkYXRlKHtcbiAgICAgICAgICBpZDogb3BlcmF0aW9uLmlkLFxuICAgICAgICAgIHN0YXR1czogT3BlcmF0aW9uU3RhdHVzLkZBSUxFRCxcbiAgICAgICAgICBmYWlsdXJlUmVhc29uOiBnZXR0ZXh0KCdPcGVyYXRpb24gY2FuY2VsbGVkIGJ5IHVzZXIuJylcbiAgICAgICAgfSlcbiAgICAgICkuZGF0YTtcbiAgICAgIGFzc2lnbihvcGVyYXRpb24sIG9wZXJhdGlvbkFmdGVyVXBkYXRlKTtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoZ2V0dGV4dCgnT3BlcmF0aW9uIGNhbmNlbGxlZC4nKSk7XG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIGlmIChlcikge1xuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEtleXMobWFuYWdlZE9iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh7IC4uLm1hbmFnZWRPYmplY3QgfSkuZmlsdGVyKGtleSA9PiAhaW5jbHVkZXMoUkVTRVJWRURfS0VZUywga2V5KSk7XG4gIH1cbn1cbiJdfQ==