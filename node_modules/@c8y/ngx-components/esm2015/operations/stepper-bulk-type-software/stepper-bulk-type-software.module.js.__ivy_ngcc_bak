import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { StepperFramesModule } from '@c8y/ngx-components/operations/stepper-frames';
import { ConfirmSoftwareSelectionStepComponent } from './confirm-software-selection-step.component';
import { SelectSoftwareStepComponent } from './select-software-step.component';
import { StepperBulkTypeSoftwareComponent } from './stepper-bulk-type-software.component';
const ɵ0 = {
    type: BulkOperationType.SOFTWARE,
    c8yIcon: 'c8y-tools',
    name: gettext('Software update'),
    path: `${baseUrl}software`,
    component: StepperBulkTypeSoftwareComponent,
    fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],
    selected: false
};
/** Module for the 'Software update' operation type stepper */
export class StepperBulkTypeSoftwareModule {
}
StepperBulkTypeSoftwareModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    StepperBulkTypeSoftwareComponent,
                    ConfirmSoftwareSelectionStepComponent,
                    SelectSoftwareStepComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    SharedRepositoryModule,
                    StepperFramesModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeSoftwareComponent],
                exports: [StepperBulkTypeSoftwareComponent]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtc29mdHdhcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1zb2Z0d2FyZS9zdGVwcGVyLWJ1bGstdHlwZS1zb2Z0d2FyZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNuRyxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLE9BQU8sRUFDUCxpQkFBaUIsRUFDbEIsTUFBTSx3REFBd0QsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUVwRixPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNwRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztXQW9CMUU7SUFDUixJQUFJLEVBQUUsaUJBQWlCLENBQUMsUUFBUTtJQUNoQyxPQUFPLEVBQUUsV0FBVztJQUNwQixJQUFJLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLElBQUksRUFBRSxHQUFHLE9BQU8sVUFBVTtJQUMxQixTQUFTLEVBQUUsZ0NBQWdDO0lBQzNDLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDO0lBQ3JELFFBQVEsRUFBRSxLQUFLO0NBQ2hCO0FBMUJQLDhEQUE4RDtBQWlDOUQsTUFBTSxPQUFPLDZCQUE2Qjs7O1lBaEN6QyxRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLGdDQUFnQztvQkFDaEMscUNBQXFDO29CQUNyQywyQkFBMkI7aUJBQzVCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxVQUFVO29CQUNWLFdBQVc7b0JBQ1gsbUJBQW1CO29CQUNuQiwwQkFBMEI7b0JBQzFCLHNCQUFzQjtvQkFDdEIsbUJBQW1CO2lCQUNwQjtnQkFDRCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLG1CQUFtQjt3QkFDNUIsUUFBUSxJQVFQO3dCQUNELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2dCQUNELGVBQWUsRUFBRSxDQUFDLGdDQUFnQyxDQUFDO2dCQUNuRCxPQUFPLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQzthQUM1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBGb3Jtc01vZHVsZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgU2hhcmVkUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeS9zaGFyZWQnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvblN0ZXBwZXJNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb24tc3RlcHBlcic7XG5pbXBvcnQge1xuICBIT09LX0xJU1RfQlVMS19UWVBFLFxuICBiYXNlVXJsLFxuICBCdWxrT3BlcmF0aW9uVHlwZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuaW1wb3J0IHsgU3RlcHBlckZyYW1lc01vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zdGVwcGVyLWZyYW1lcyc7XG5cbmltcG9ydCB7IENvbmZpcm1Tb2Z0d2FyZVNlbGVjdGlvblN0ZXBDb21wb25lbnQgfSBmcm9tICcuL2NvbmZpcm0tc29mdHdhcmUtc2VsZWN0aW9uLXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7IFNlbGVjdFNvZnR3YXJlU3RlcENvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LXNvZnR3YXJlLXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7IFN0ZXBwZXJCdWxrVHlwZVNvZnR3YXJlQ29tcG9uZW50IH0gZnJvbSAnLi9zdGVwcGVyLWJ1bGstdHlwZS1zb2Z0d2FyZS5jb21wb25lbnQnO1xuXG4vKiogTW9kdWxlIGZvciB0aGUgJ1NvZnR3YXJlIHVwZGF0ZScgb3BlcmF0aW9uIHR5cGUgc3RlcHBlciAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgU3RlcHBlckJ1bGtUeXBlU29mdHdhcmVDb21wb25lbnQsXG4gICAgQ29uZmlybVNvZnR3YXJlU2VsZWN0aW9uU3RlcENvbXBvbmVudCxcbiAgICBTZWxlY3RTb2Z0d2FyZVN0ZXBDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSxcbiAgICBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlLFxuICAgIFN0ZXBwZXJGcmFtZXNNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgIHR5cGU6IEJ1bGtPcGVyYXRpb25UeXBlLlNPRlRXQVJFLFxuICAgICAgICBjOHlJY29uOiAnYzh5LXRvb2xzJyxcbiAgICAgICAgbmFtZTogZ2V0dGV4dCgnU29mdHdhcmUgdXBkYXRlJyksXG4gICAgICAgIHBhdGg6IGAke2Jhc2VVcmx9c29mdHdhcmVgLFxuICAgICAgICBjb21wb25lbnQ6IFN0ZXBwZXJCdWxrVHlwZVNvZnR3YXJlQ29tcG9uZW50LFxuICAgICAgICBmcmFnbWVudHM6IFsnYzh5X1NvZnR3YXJlTGlzdCcsICdjOHlfU29mdHdhcmVVcGRhdGUnXSxcbiAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1N0ZXBwZXJCdWxrVHlwZVNvZnR3YXJlQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW1N0ZXBwZXJCdWxrVHlwZVNvZnR3YXJlQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBTdGVwcGVyQnVsa1R5cGVTb2Z0d2FyZU1vZHVsZSB7fVxuIl19