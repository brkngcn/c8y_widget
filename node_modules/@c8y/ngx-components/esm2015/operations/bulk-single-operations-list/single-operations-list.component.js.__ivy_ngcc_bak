import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { OperationStatus } from '@c8y/client';
import { StatusFilterComponent } from '@c8y/ngx-components/operations/status-filter';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { OPERATION_STATUS_LABELS, OPERATION_STATUS_OPTIONS_MAP } from '@c8y/ngx-components/operations/shared';
export class SingleOperationsListComponent {
    constructor(bulkOperationsService) {
        this.bulkOperationsService = bulkOperationsService;
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.OPERATION_STATUS = Object.assign(Object.assign({}, OperationStatus), { ALL: gettext('ALL') });
        this.OPERATION_STATUS_LABELS = OPERATION_STATUS_LABELS;
        this.OPERATION_STATUS_OPTIONS_MAP = OPERATION_STATUS_OPTIONS_MAP;
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.statusFilter) {
                this.filterOperationsByType();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.filterOperationsByType();
        }
    }
    filterOperationsByType() {
        if (this.statusFilter) {
            const typeFilter = this.getFilterTypeOfSingleOperations();
            this.statusFilter.preset(typeFilter === this.OPERATION_STATUS.ALL
                ? []
                : [{ label: this.OPERATION_STATUS_LABELS[typeFilter] }]);
        }
        else {
            setTimeout(this.filterOperationsByType.bind(this));
        }
    }
    getFilterTypeOfSingleOperations() {
        const progress = this.bulkOperation.progress;
        if (progress.failed > 0) {
            return this.OPERATION_STATUS.FAILED;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
            return this.OPERATION_STATUS.EXECUTING;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
            return this.OPERATION_STATUS.PENDING;
        }
        else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
            return this.OPERATION_STATUS.SUCCESSFUL;
        }
        return this.OPERATION_STATUS.ALL;
    }
    getOperationsByStatus(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            this.singleOperations = yield this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id);
        });
    }
    retryBulkOperation() {
        this.onRetryFailedOperations.emit(this.bulkOperation);
    }
}
SingleOperationsListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-single-operations-list',
                template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block p-t-16 m-b-0\" translate>Operations</div>\n  <div class=\"d-flex a-i-center\">\n    <div class=\"d-flex a-i-center p-b-8\">\n      <span class=\"m-r-4 text-medium\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"OPERATION_STATUS_OPTIONS_MAP\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"m-l-auto p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i c8yIcon=\"repeat\" class=\"m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item [operation]=\"operation\" [readOnly]=\"readOnly\" class=\"d-contents\">\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
            },] }
];
SingleOperationsListComponent.ctorParameters = () => [
    { type: BulkOperationsService }
];
SingleOperationsListComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    readOnly: [{ type: Input }],
    onRetryFailedOperations: [{ type: Output }],
    statusFilter: [{ type: ViewChild, args: [StatusFilterComponent, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbnMtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL2J1bGstc2luZ2xlLW9wZXJhdGlvbnMtbGlzdC9zaW5nbGUtb3BlcmF0aW9ucy1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFFTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBMkMsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQy9GLE9BQU8sRUFHTCx1QkFBdUIsRUFDdkIsNEJBQTRCLEVBQzdCLE1BQU0sdUNBQXVDLENBQUM7QUFNL0MsTUFBTSxPQUFPLDZCQUE2QjtJQWV4QyxZQUFvQixxQkFBNEM7UUFBNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQVhoRSxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQ2hCLDRCQUF1QixHQUEwQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBSzlGLHFCQUFnQixtQ0FBUSxlQUFlLEtBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBRztRQUMvRCw0QkFBdUIsR0FBRyx1QkFBdUIsQ0FBQztRQUNsRCxpQ0FBNEIsR0FBOEIsNEJBQTRCLENBQUM7SUFHcEIsQ0FBQztJQUU5RCxlQUFlOztZQUNuQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2FBQy9CO1FBQ0gsQ0FBQztLQUFBO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLGFBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQy9ELElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELHNCQUFzQjtRQUNwQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLCtCQUErQixFQUFFLENBQUM7WUFDMUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQ3RCLFVBQVUsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRztnQkFDdEMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ0osQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FDMUQsQ0FBQztTQUNIO2FBQU07WUFDTCxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQztJQUVELCtCQUErQjtRQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztTQUNyQzthQUFNLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDdkYsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO1NBQ3hDO2FBQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsVUFBVSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsU0FBUyxLQUFLLENBQUMsRUFBRTtZQUN6RixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7U0FDdEM7YUFBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEtBQUssQ0FBQyxFQUFFO1lBQ3RGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztTQUN6QztRQUVELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztJQUNuQyxDQUFDO0lBRUsscUJBQXFCLENBQUMsTUFBc0I7O1lBQ2hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FDbEYsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUN0QixDQUFDO1FBQ0osQ0FBQztLQUFBO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7OztZQXZFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsdTNEQUFzRDthQUN2RDs7O1lBWFEscUJBQXFCOzs7NEJBYTNCLEtBQUs7dUJBRUwsS0FBSztzQ0FFTCxNQUFNOzJCQUVOLFNBQVMsU0FBQyxxQkFBcUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJT3BlcmF0aW9uLCBJT3BlcmF0aW9uQnVsaywgSVJlc3VsdExpc3QsIE9wZXJhdGlvblN0YXR1cyB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFN0YXR1c0ZpbHRlckNvbXBvbmVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zdGF0dXMtZmlsdGVyJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5pbXBvcnQge1xuICBTdGF0dXNPcHRpb24sXG4gIE9wZXJhdGlvblN0YXR1c09wdGlvbnNNYXAsXG4gIE9QRVJBVElPTl9TVEFUVVNfTEFCRUxTLFxuICBPUEVSQVRJT05fU1RBVFVTX09QVElPTlNfTUFQXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zaGFyZWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc2luZ2xlLW9wZXJhdGlvbnMtbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zaW5nbGUtb3BlcmF0aW9ucy1saXN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTaW5nbGVPcGVyYXRpb25zTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpXG4gIGJ1bGtPcGVyYXRpb246IFBhcnRpYWw8SU9wZXJhdGlvbkJ1bGs+O1xuICBASW5wdXQoKVxuICByZWFkT25seTogYm9vbGVhbiA9IGZhbHNlO1xuICBAT3V0cHV0KCkgb25SZXRyeUZhaWxlZE9wZXJhdGlvbnM6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsPElPcGVyYXRpb25CdWxrPj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQFZpZXdDaGlsZChTdGF0dXNGaWx0ZXJDb21wb25lbnQsIHsgc3RhdGljOiBmYWxzZSB9KVxuICBzdGF0dXNGaWx0ZXI6IFN0YXR1c0ZpbHRlckNvbXBvbmVudDtcblxuICBPUEVSQVRJT05fU1RBVFVTID0geyAuLi5PcGVyYXRpb25TdGF0dXMsIEFMTDogZ2V0dGV4dCgnQUxMJykgfTtcbiAgT1BFUkFUSU9OX1NUQVRVU19MQUJFTFMgPSBPUEVSQVRJT05fU1RBVFVTX0xBQkVMUztcbiAgT1BFUkFUSU9OX1NUQVRVU19PUFRJT05TX01BUDogT3BlcmF0aW9uU3RhdHVzT3B0aW9uc01hcCA9IE9QRVJBVElPTl9TVEFUVVNfT1BUSU9OU19NQVA7XG4gIHNpbmdsZU9wZXJhdGlvbnM6IElSZXN1bHRMaXN0PElPcGVyYXRpb24+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnVsa09wZXJhdGlvbnNTZXJ2aWNlOiBCdWxrT3BlcmF0aW9uc1NlcnZpY2UpIHt9XG5cbiAgYXN5bmMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLnN0YXR1c0ZpbHRlcikge1xuICAgICAgdGhpcy5maWx0ZXJPcGVyYXRpb25zQnlUeXBlKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmJ1bGtPcGVyYXRpb24gJiYgIWNoYW5nZXMuYnVsa09wZXJhdGlvbi5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5maWx0ZXJPcGVyYXRpb25zQnlUeXBlKCk7XG4gICAgfVxuICB9XG5cbiAgZmlsdGVyT3BlcmF0aW9uc0J5VHlwZSgpIHtcbiAgICBpZiAodGhpcy5zdGF0dXNGaWx0ZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVGaWx0ZXIgPSB0aGlzLmdldEZpbHRlclR5cGVPZlNpbmdsZU9wZXJhdGlvbnMoKTtcbiAgICAgIHRoaXMuc3RhdHVzRmlsdGVyLnByZXNldChcbiAgICAgICAgdHlwZUZpbHRlciA9PT0gdGhpcy5PUEVSQVRJT05fU1RBVFVTLkFMTFxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IFt7IGxhYmVsOiB0aGlzLk9QRVJBVElPTl9TVEFUVVNfTEFCRUxTW3R5cGVGaWx0ZXJdIH1dXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMuZmlsdGVyT3BlcmF0aW9uc0J5VHlwZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBnZXRGaWx0ZXJUeXBlT2ZTaW5nbGVPcGVyYXRpb25zKCkge1xuICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy5idWxrT3BlcmF0aW9uLnByb2dyZXNzO1xuXG4gICAgaWYgKHByb2dyZXNzLmZhaWxlZCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLk9QRVJBVElPTl9TVEFUVVMuRkFJTEVEO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MuZmFpbGVkID09PSAwICYmIHByb2dyZXNzLnN1Y2Nlc3NmdWwgPT09IDAgJiYgcHJvZ3Jlc3MucGVuZGluZyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuT1BFUkFUSU9OX1NUQVRVUy5FWEVDVVRJTkc7XG4gICAgfSBlbHNlIGlmIChwcm9ncmVzcy5mYWlsZWQgPT09IDAgJiYgcHJvZ3Jlc3Muc3VjY2Vzc2Z1bCA9PT0gMCAmJiBwcm9ncmVzcy5leGVjdXRpbmcgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLk9QRVJBVElPTl9TVEFUVVMuUEVORElORztcbiAgICB9IGVsc2UgaWYgKHByb2dyZXNzLmZhaWxlZCA9PT0gMCAmJiBwcm9ncmVzcy5wZW5kaW5nID09PSAwICYmIHByb2dyZXNzLmV4ZWN1dGluZyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuT1BFUkFUSU9OX1NUQVRVUy5TVUNDRVNTRlVMO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLk9QRVJBVElPTl9TVEFUVVMuQUxMO1xuICB9XG5cbiAgYXN5bmMgZ2V0T3BlcmF0aW9uc0J5U3RhdHVzKGZpbHRlcjogU3RhdHVzT3B0aW9uW10pIHtcbiAgICB0aGlzLnNpbmdsZU9wZXJhdGlvbnMgPSBhd2FpdCB0aGlzLmJ1bGtPcGVyYXRpb25zU2VydmljZS5nZXRTaW5nbGVPcGVyYXRpb25zQnlTdGF0dXMoXG4gICAgICBmaWx0ZXJbMF0gJiYgZmlsdGVyWzBdLmxhYmVsLFxuICAgICAgdGhpcy5idWxrT3BlcmF0aW9uLmlkXG4gICAgKTtcbiAgfVxuXG4gIHJldHJ5QnVsa09wZXJhdGlvbigpIHtcbiAgICB0aGlzLm9uUmV0cnlGYWlsZWRPcGVyYXRpb25zLmVtaXQodGhpcy5idWxrT3BlcmF0aW9uKTtcbiAgfVxufVxuIl19