import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { OperationStatus } from '@c8y/client';
import { StatusFilterComponent } from '@c8y/ngx-components/operations/status-filter';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { OPERATION_STATUS_LABELS, OPERATION_STATUS_OPTIONS_MAP } from '@c8y/ngx-components/operations/shared';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from '@c8y/ngx-components/operations/status-filter';
import * as ɵngcc5 from './single-operation-item.component';

function SingleOperationsListComponent_ng_container_0_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "button", 10);
    ɵngcc0.ɵɵlistener("click", function SingleOperationsListComponent_ng_container_0_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.retryBulkOperation(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵelementStart(4, "span", 12);
    ɵngcc0.ɵɵtext(5, "Retry failed operations");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Retry failed operations"));
} }
function SingleOperationsListComponent_ng_container_0_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "c8y-single-operation-item", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r6 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("operation", operation_r6)("readOnly", ctx_r2.readOnly);
} }
function SingleOperationsListComponent_ng_container_0_c8y_li_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-body");
    ɵngcc0.ɵɵelementStart(2, "div", 15);
    ɵngcc0.ɵɵelement(3, "h2", 16);
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵelementStart(5, "h3", 12);
    ɵngcc0.ɵɵtext(6, "No single operations of the selected status to display.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "p", 17);
    ɵngcc0.ɵɵtext(8, "Single operations will be displayed here");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SingleOperationsListComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtext(2, "Operations");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 2);
    ɵngcc0.ɵɵelementStart(4, "div", 3);
    ɵngcc0.ɵɵelementStart(5, "span", 4);
    ɵngcc0.ɵɵtext(6, "Filter by status");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-status-filter", 5);
    ɵngcc0.ɵɵlistener("onFilterChanged", function SingleOperationsListComponent_ng_container_0_Template_c8y_status_filter_onFilterChanged_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.getOperationsByStatus($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, SingleOperationsListComponent_ng_container_0_div_8_Template, 6, 3, "div", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 7);
    ɵngcc0.ɵɵelementStart(10, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(11, SingleOperationsListComponent_ng_container_0_div_11_Template, 2, 2, "div", 8);
    ɵngcc0.ɵɵtemplate(12, SingleOperationsListComponent_ng_container_0_c8y_li_12_Template, 9, 0, "c8y-li", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("options", ctx_r0.OPERATION_STATUS_OPTIONS_MAP);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.readOnly && ctx_r0.bulkOperation.progress.failed > 0);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r0.singleOperations)("c8yForLoadMore", "auto");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.singleOperations && ctx_r0.singleOperations.data.length === 0);
} }
export class SingleOperationsListComponent {
    constructor(bulkOperationsService) {
        this.bulkOperationsService = bulkOperationsService;
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.OPERATION_STATUS = Object.assign(Object.assign({}, OperationStatus), { ALL: gettext('ALL') });
        this.OPERATION_STATUS_LABELS = OPERATION_STATUS_LABELS;
        this.OPERATION_STATUS_OPTIONS_MAP = OPERATION_STATUS_OPTIONS_MAP;
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.statusFilter) {
                this.filterOperationsByType();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.filterOperationsByType();
        }
    }
    filterOperationsByType() {
        if (this.statusFilter) {
            const typeFilter = this.getFilterTypeOfSingleOperations();
            this.statusFilter.preset(typeFilter === this.OPERATION_STATUS.ALL
                ? []
                : [{ label: this.OPERATION_STATUS_LABELS[typeFilter] }]);
        }
        else {
            setTimeout(this.filterOperationsByType.bind(this));
        }
    }
    getFilterTypeOfSingleOperations() {
        const progress = this.bulkOperation.progress;
        if (progress.failed > 0) {
            return this.OPERATION_STATUS.FAILED;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
            return this.OPERATION_STATUS.EXECUTING;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
            return this.OPERATION_STATUS.PENDING;
        }
        else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
            return this.OPERATION_STATUS.SUCCESSFUL;
        }
        return this.OPERATION_STATUS.ALL;
    }
    getOperationsByStatus(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            this.singleOperations = yield this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id);
        });
    }
    retryBulkOperation() {
        this.onRetryFailedOperations.emit(this.bulkOperation);
    }
}
SingleOperationsListComponent.ɵfac = function SingleOperationsListComponent_Factory(t) { return new (t || SingleOperationsListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService)); };
SingleOperationsListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SingleOperationsListComponent, selectors: [["c8y-single-operations-list"]], viewQuery: function SingleOperationsListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(StatusFilterComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.statusFilter = _t.first);
    } }, inputs: { readOnly: "readOnly", bulkOperation: "bulkOperation" }, outputs: { onRetryFailedOperations: "onRetryFailedOperations" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], ["translate", "", 1, "legend", "form-block", "p-t-16", "m-b-0"], [1, "d-flex", "a-i-center"], [1, "d-flex", "a-i-center", "p-b-8"], ["translate", "", 1, "m-r-4", "text-medium"], ["small", "", 3, "options", "onFilterChanged"], ["class", "m-l-auto p-b-8", 4, "ngIf"], [1, "inner-scroll"], ["class", "d-contents", 4, "c8yFor", "c8yForOf", "c8yForLoadMore"], [1, "m-l-auto", "p-b-8"], [1, "btn", "btn-navbar", 3, "title", "click"], ["c8yIcon", "repeat", 1, "m-r-4"], ["translate", ""], [1, "d-contents"], [1, "d-contents", 3, "operation", "readOnly"], [1, "c8y-empty-state", "text-center"], [1, "c8y-icon", "c8y-icon-energy", "c8y-icon-duocolor", "m-b-16"], ["translate", "", 1, "m-b-16"]], template: function SingleOperationsListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SingleOperationsListComponent_ng_container_0_Template, 13, 5, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.failed || ctx.bulkOperation.progress.executing || ctx.bulkOperation.progress.pending || ctx.bulkOperation.progress.successful);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.C8yTranslateDirective, ɵngcc4.StatusFilterComponent, ɵngcc3.ListGroupComponent, ɵngcc3.ForOfDirective, ɵngcc3.IconDirective, ɵngcc5.SingleOperationItemComponent, ɵngcc3.ListItemComponent, ɵngcc3.ListItemBodyComponent], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
SingleOperationsListComponent.ctorParameters = () => [
    { type: BulkOperationsService }
];
SingleOperationsListComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    readOnly: [{ type: Input }],
    onRetryFailedOperations: [{ type: Output }],
    statusFilter: [{ type: ViewChild, args: [StatusFilterComponent, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SingleOperationsListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-single-operations-list',
                template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block p-t-16 m-b-0\" translate>Operations</div>\n  <div class=\"d-flex a-i-center\">\n    <div class=\"d-flex a-i-center p-b-8\">\n      <span class=\"m-r-4 text-medium\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"OPERATION_STATUS_OPTIONS_MAP\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"m-l-auto p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i c8yIcon=\"repeat\" class=\"m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item [operation]=\"operation\" [readOnly]=\"readOnly\" class=\"d-contents\">\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }]; }, { readOnly: [{
            type: Input
        }], onRetryFailedOperations: [{
            type: Output
        }], bulkOperation: [{
            type: Input
        }], statusFilter: [{
            type: ViewChild,
            args: [StatusFilterComponent, { static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,