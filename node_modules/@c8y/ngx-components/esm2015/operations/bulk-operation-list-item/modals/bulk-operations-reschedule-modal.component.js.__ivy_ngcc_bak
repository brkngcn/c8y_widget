import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { AlertService, gettext } from '@c8y/ngx-components';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { Subject } from 'rxjs';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
export class BulkOperationsRescheduleModalComponent {
    constructor(bsModalRef, bulkOperationsService, alert) {
        this.bsModalRef = bsModalRef;
        this.bulkOperationsService = bulkOperationsService;
        this.alert = alert;
        this.closeSubject = new Subject();
    }
    ngOnInit() {
        this.modalTitle = this.getTitle();
    }
    onDateAndDelaySelect($event) {
        this.dateAndDelay = $event;
    }
    getTitle() {
        return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');
    }
    onCancel() {
        this.bsModalRef.hide();
    }
    onSave() {
        return __awaiter(this, void 0, void 0, function* () {
            let newBulkOperation;
            this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();
            this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;
            if (this.isRetryOperation) {
                try {
                    newBulkOperation = yield this.bulkOperationsService.createBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled for a retry.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            else {
                try {
                    newBulkOperation = yield this.bulkOperationsService.updateBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            // send back to component from which modal was called
            this.closeSubject.next(newBulkOperation.data);
            this.bsModalRef.hide();
        });
    }
}
BulkOperationsRescheduleModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-bulk-operations-reschedule-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <div class=\"text-center\">\n        <c8y-operation-summary\n          [description]=\"bulkOperation.operationPrototype.description\"\n        ></c8y-operation-summary>\n      </div>\n      <div class=\"p-t-16 center-block\" style=\"max-width: 300px;\">\n        <c8y-operation-scheduler\n          [(ngModel)]=\"dateAndDelay\"\n          #scheduler=\"ngModel\"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"onCancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id=\"save-btn\"\n      (click)=\"onSave()\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      [disabled]=\"scheduler?.control?.errors\"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n"
            },] }
];
BulkOperationsRescheduleModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: BulkOperationsService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1vcGVyYXRpb25zLXJlc2NoZWR1bGUtbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1saXN0LWl0ZW0vbW9kYWxzL2J1bGstb3BlcmF0aW9ucy1yZXNjaGVkdWxlLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBTS9GLE1BQU0sT0FBTyxzQ0FBc0M7SUFPakQsWUFDUyxVQUFzQixFQUNyQixxQkFBNEMsRUFDNUMsS0FBbUI7UUFGcEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVDLFVBQUssR0FBTCxLQUFLLENBQWM7UUFUN0IsaUJBQVksR0FBNEIsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQVVuRCxDQUFDO0lBRUosUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxNQUFNO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFSyxNQUFNOztZQUNWLElBQUksZ0JBQWdCLENBQUM7WUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDN0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7WUFFbkUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3pCLElBQUk7b0JBQ0YsZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO29CQUM1RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQyxDQUFDO2lCQUN0RTtnQkFBQyxPQUFPLEVBQUUsRUFBRTtvQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNqQzthQUNGO2lCQUFNO2dCQUNMLElBQUk7b0JBQ0YsZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO29CQUM1RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDO2lCQUMxRDtnQkFBQyxPQUFPLEVBQUUsRUFBRTtvQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNqQzthQUNGO1lBRUQscURBQXFEO1lBQ3JELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekIsQ0FBQztLQUFBOzs7WUF6REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQ0FBc0M7Z0JBQ2hELHlzQ0FBOEQ7YUFDL0Q7OztZQVJRLFVBQVU7WUFHVixxQkFBcUI7WUFKckIsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJT3BlcmF0aW9uQnVsayB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT3BlcmF0aW9uU2NoZWR1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb24tc2NoZWR1bGVyJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1idWxrLW9wZXJhdGlvbnMtcmVzY2hlZHVsZS1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnYnVsay1vcGVyYXRpb25zLXJlc2NoZWR1bGUtbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJ1bGtPcGVyYXRpb25zUmVzY2hlZHVsZU1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgY2xvc2VTdWJqZWN0OiBTdWJqZWN0PElPcGVyYXRpb25CdWxrPiA9IG5ldyBTdWJqZWN0KCk7XG4gIGRhdGVBbmREZWxheTogT3BlcmF0aW9uU2NoZWR1bGU7XG4gIGJ1bGtPcGVyYXRpb246IFBhcnRpYWw8SU9wZXJhdGlvbkJ1bGs+O1xuICBpc1JldHJ5T3BlcmF0aW9uOiBib29sZWFuO1xuICBtb2RhbFRpdGxlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGJzTW9kYWxSZWY6IEJzTW9kYWxSZWYsXG4gICAgcHJpdmF0ZSBidWxrT3BlcmF0aW9uc1NlcnZpY2U6IEJ1bGtPcGVyYXRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubW9kYWxUaXRsZSA9IHRoaXMuZ2V0VGl0bGUoKTtcbiAgfVxuXG4gIG9uRGF0ZUFuZERlbGF5U2VsZWN0KCRldmVudCkge1xuICAgIHRoaXMuZGF0ZUFuZERlbGF5ID0gJGV2ZW50O1xuICB9XG5cbiAgZ2V0VGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSZXRyeU9wZXJhdGlvbiA/IGdldHRleHQoJ1JldHJ5IG9wZXJhdGlvbicpIDogZ2V0dGV4dCgnRWRpdCBzY2hlZHVsZScpO1xuICB9XG5cbiAgb25DYW5jZWwoKSB7XG4gICAgdGhpcy5ic01vZGFsUmVmLmhpZGUoKTtcbiAgfVxuXG4gIGFzeW5jIG9uU2F2ZSgpIHtcbiAgICBsZXQgbmV3QnVsa09wZXJhdGlvbjtcbiAgICB0aGlzLmJ1bGtPcGVyYXRpb24uc3RhcnREYXRlID0gdGhpcy5kYXRlQW5kRGVsYXkuc2NoZWR1bGVkRGF0ZS50b0lTT1N0cmluZygpO1xuICAgIHRoaXMuYnVsa09wZXJhdGlvbi5jcmVhdGlvblJhbXAgPSB0aGlzLmRhdGVBbmREZWxheS5kZWxheUluU2Vjb25kcztcblxuICAgIGlmICh0aGlzLmlzUmV0cnlPcGVyYXRpb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0J1bGtPcGVyYXRpb24gPSBhd2FpdCB0aGlzLmJ1bGtPcGVyYXRpb25zU2VydmljZS5jcmVhdGVCdWxrT3BlcmF0aW9uKHRoaXMuYnVsa09wZXJhdGlvbik7XG4gICAgICAgIHRoaXMuYWxlcnQuc3VjY2VzcyhnZXR0ZXh0KCdTdWNjZXNzZnVsbHkgcmVzY2hlZHVsZWQgZm9yIGEgcmV0cnkuJykpO1xuICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3QnVsa09wZXJhdGlvbiA9IGF3YWl0IHRoaXMuYnVsa09wZXJhdGlvbnNTZXJ2aWNlLnVwZGF0ZUJ1bGtPcGVyYXRpb24odGhpcy5idWxrT3BlcmF0aW9uKTtcbiAgICAgICAgdGhpcy5hbGVydC5zdWNjZXNzKGdldHRleHQoJ1N1Y2Nlc3NmdWxseSByZXNjaGVkdWxlZC4nKSk7XG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNlbmQgYmFjayB0byBjb21wb25lbnQgZnJvbSB3aGljaCBtb2RhbCB3YXMgY2FsbGVkXG4gICAgdGhpcy5jbG9zZVN1YmplY3QubmV4dChuZXdCdWxrT3BlcmF0aW9uLmRhdGEpO1xuICAgIHRoaXMuYnNNb2RhbFJlZi5oaWRlKCk7XG4gIH1cbn1cbiJdfQ==