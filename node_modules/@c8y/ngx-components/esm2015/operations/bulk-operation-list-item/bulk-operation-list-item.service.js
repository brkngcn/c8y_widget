import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc2 from 'ngx-bootstrap/modal';
export class BulkOperationListItemService {
    constructor(bulkOperationsService, modalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modalService = modalService;
    }
    openDetails(bulkOperationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const bulkOperation = (yield this.bulkOperationsService.getBulkOperationById(bulkOperationId)).data;
            const initialState = { bulkOperation };
            this.modalService.show(BulkOperationWrapperComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
BulkOperationListItemService.ɵfac = function BulkOperationListItemService_Factory(t) { return new (t || BulkOperationListItemService)(ɵngcc0.ɵɵinject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵinject(ɵngcc2.BsModalService)); };
BulkOperationListItemService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkOperationListItemService, factory: BulkOperationListItemService.ɵfac });
BulkOperationListItemService.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationListItemService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }, { type: ɵngcc2.BsModalService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1vcGVyYXRpb24tbGlzdC1pdGVtLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb24tbGlzdC1pdGVtL2J1bGstb3BlcmF0aW9uLWxpc3QtaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUUvRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7OztBQUduRixNQUFNLE9BQU8sNEJBQTRCO0FBQUcsSUFDMUMsWUFDVSxxQkFBNEMsRUFDNUMsWUFBNEI7QUFDckMsUUFGUywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0FBQUMsUUFDN0MsaUJBQVksR0FBWixZQUFZLENBQWdCO0FBQ3hDLElBQUssQ0FBQztBQUNOLElBQ1EsV0FBVyxDQUFDLGVBQWdDO0FBQ3BEO0FBQ2tCLFlBRGQsTUFBTSxhQUFhLEdBQW1CLENBQ3BDLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUN2RSxDQUFDLElBQUksQ0FBQztBQUNYLFlBQUksTUFBTSxZQUFZLEdBQUcsRUFBRSxhQUFhLEVBQUUsQ0FBQztBQUMzQyxZQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDZCQUE2QixFQUFFO0FBQzFELGdCQUFNLFlBQVk7QUFDbEIsZ0JBQU0sS0FBSyxFQUFFLFVBQVU7QUFDdkIsYUFBSyxDQUFDLENBQUM7QUFDUCxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7d0RBakJDLFVBQVU7a0tBQ1Q7QUFBQztBQUFzRCxZQUxoRCxxQkFBcUI7QUFBSSxZQUR6QixjQUFjO0FBQUc7Ozt1SEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU9wZXJhdGlvbkJ1bGsgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25Nb2RhbERldGFpbHNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9uLW1vZGFsLWRldGFpbHMnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvbldyYXBwZXJDb21wb25lbnQgfSBmcm9tICcuL2J1bGstb3BlcmF0aW9uLXdyYXBwZXIuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJ1bGtPcGVyYXRpb25MaXN0SXRlbVNlcnZpY2UgaW1wbGVtZW50cyBCdWxrT3BlcmF0aW9uTW9kYWxEZXRhaWxzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYnVsa09wZXJhdGlvbnNTZXJ2aWNlOiBCdWxrT3BlcmF0aW9uc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBvcGVuRGV0YWlscyhidWxrT3BlcmF0aW9uSWQ6IHN0cmluZyB8IG51bWJlcikge1xuICAgIGNvbnN0IGJ1bGtPcGVyYXRpb246IElPcGVyYXRpb25CdWxrID0gKFxuICAgICAgYXdhaXQgdGhpcy5idWxrT3BlcmF0aW9uc1NlcnZpY2UuZ2V0QnVsa09wZXJhdGlvbkJ5SWQoYnVsa09wZXJhdGlvbklkKVxuICAgICkuZGF0YTtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7IGJ1bGtPcGVyYXRpb24gfTtcbiAgICB0aGlzLm1vZGFsU2VydmljZS5zaG93KEJ1bGtPcGVyYXRpb25XcmFwcGVyQ29tcG9uZW50LCB7XG4gICAgICBpbml0aWFsU3RhdGUsXG4gICAgICBjbGFzczogJ21vZGFsLWxnJ1xuICAgIH0pO1xuICB9XG59XG4iXX0=