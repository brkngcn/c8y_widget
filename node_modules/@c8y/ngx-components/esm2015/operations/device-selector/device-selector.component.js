import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { AlarmsDeviceGridColumn, DeviceGridComponent, GroupDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, StatusDeviceGridColumn, TypeDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { FilteringActionType } from '@c8y/ngx-components';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/device-grid';
import * as ɵngcc2 from '@c8y/ngx-components';
export class DeviceSelectorComponent {
    constructor() {
        this.GRID_CONFIG_KEY = 'device-grid-bulk';
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe((types) => {
                this.deviceGrid.updateFiltering([this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    }
}
DeviceSelectorComponent.ɵfac = function DeviceSelectorComponent_Factory(t) { return new (t || DeviceSelectorComponent)(); };
DeviceSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceSelectorComponent, selectors: [["c8y-device-selector"]], viewQuery: function DeviceSelectorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DeviceGridComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.deviceGrid = _t.first);
    } }, inputs: { deviceTypes: "deviceTypes" }, outputs: { onDeviceQueryStringChange: "onDeviceQueryStringChange" }, decls: 2, vars: 6, consts: [[3, "title", "columnsConfigKey", "columns", "infiniteScroll", "onDeviceQueryStringChange"]], template: function DeviceSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-device-grid", 0);
        ɵngcc0.ɵɵlistener("onDeviceQueryStringChange", function DeviceSelectorComponent_Template_c8y_device_grid_onDeviceQueryStringChange_0_listener($event) { return ctx.onDeviceQueryStringChange.emit($event); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 4, "Target devices"))("columnsConfigKey", ctx.GRID_CONFIG_KEY)("columns", ctx.columns)("infiniteScroll", "auto");
    } }, directives: [ɵngcc1.DeviceGridComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
DeviceSelectorComponent.propDecorators = {
    deviceGrid: [{ type: ViewChild, args: [DeviceGridComponent, { static: true },] }],
    deviceTypes: [{ type: Input }],
    onDeviceQueryStringChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-selector',
                template: "<c8y-device-grid\n  [title]=\"'Target devices' | translate\"\n  [columnsConfigKey]=\"GRID_CONFIG_KEY\"\n  [columns]=\"columns\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n></c8y-device-grid>\n"
            }]
    }], function () { return []; }, { onDeviceQueryStringChange: [{
            type: Output
        }], deviceGrid: [{
            type: ViewChild,
            args: [DeviceGridComponent, { static: true }]
        }], deviceTypes: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9kZXZpY2Utc2VsZWN0b3IvZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLG9CQUFvQixFQUNwQixnQ0FBZ0MsRUFDaEMsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNyQixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBVSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBTWpFLE1BQU0sT0FBTyx1QkFBdUI7QUFBRyxJQUp2QztBQUNHLFFBSVEsb0JBQWUsR0FBRyxrQkFBa0IsQ0FBQztBQUNoRCxRQU9FLGVBQVUsR0FBVyxJQUFJLG9CQUFvQixFQUFFLENBQUM7QUFDbEQsUUFFRSw4QkFBeUIsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztBQUMvRSxRQUNFLFlBQU8sR0FBYTtBQUN0QixZQUFJLElBQUksc0JBQXNCLEVBQUU7QUFDaEMsWUFBSSxJQUFJLG9CQUFvQixFQUFFO0FBQzlCLFlBQUksSUFBSSxDQUFDLFVBQVU7QUFDbkIsWUFBSSxJQUFJLHFCQUFxQixFQUFFO0FBQy9CLFlBQUksSUFBSSxxQkFBcUIsRUFBRTtBQUMvQixZQUFJLElBQUksZ0NBQWdDLEVBQUU7QUFDMUMsWUFBSSxJQUFJLHNCQUFzQixFQUFFO0FBQ2hDLFNBQUcsQ0FBQztBQUNKLFFBQ1UsaUJBQVksR0FBcUIsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUN6RCxJQTZCQSxDQUFDO0FBQ0QsSUE3QkUsUUFBUTtBQUFLLFFBQ1gsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzFCLFlBQU0sSUFBSSxDQUFDLFdBQVc7QUFDdEIsaUJBQVMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNuRSxpQkFBUyxTQUFTLENBQUMsQ0FBQyxLQUFlLEVBQUUsRUFBRTtBQUN2QyxnQkFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbEUsb0JBQVksSUFBSSxFQUNGLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTTtBQUNuQyx3QkFBZ0IsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFdBQVc7QUFDakQsd0JBQWdCLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXO0FBQ2pELG9CQUFZLE9BQU8sRUFBRSxLQUFLO0FBQzFCLHdCQUFjLENBQUMsQ0FBQztBQUNoQiw0QkFBa0IsaUJBQWlCLEVBQUU7QUFDckMsZ0NBQW9CLG1CQUFtQixFQUFFO0FBQ3pDLG9DQUFzQixLQUFLO0FBQzNCLGlDQUFxQjtBQUNyQiw2QkFBbUI7QUFDbkIseUJBQWlCO0FBQ2pCLHdCQUFjLENBQUMsQ0FBQyxTQUFTO0FBQ3pCLGlCQUFXLENBQUMsQ0FBQztBQUNiLFlBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQUssUUFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDakMsSUFBRSxDQUFDO0FBQ0g7bURBMURDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUscUJBQXFCO1dBQy9COztVQUE2QztJQUM5Qzs7Ozs7Ozs7O3lHQUNJO0FBQUM7QUFBMkMseUJBRzlDLFNBQVMsU0FBQyxtQkFBbUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDN0MsMEJBRUYsS0FBSztBQUNOLHdDQUlDLE1BQU07QUFDUjs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWxhcm1zRGV2aWNlR3JpZENvbHVtbixcbiAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgR3JvdXBEZXZpY2VHcmlkQ29sdW1uLFxuICBNb2RlbERldmljZUdyaWRDb2x1bW4sXG4gIE5hbWVEZXZpY2VHcmlkQ29sdW1uLFxuICBSZWdpc3RyYXRpb25EYXRlRGV2aWNlR3JpZENvbHVtbixcbiAgU3RhdHVzRGV2aWNlR3JpZENvbHVtbixcbiAgVHlwZURldmljZUdyaWRDb2x1bW5cbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBDb2x1bW4sIEZpbHRlcmluZ0FjdGlvblR5cGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1kZXZpY2Utc2VsZWN0b3InLFxuICB0ZW1wbGF0ZVVybDogJ2RldmljZS1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlU2VsZWN0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHJlYWRvbmx5IEdSSURfQ09ORklHX0tFWSA9ICdkZXZpY2UtZ3JpZC1idWxrJztcblxuICBAVmlld0NoaWxkKERldmljZUdyaWRDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pXG4gIGRldmljZUdyaWQ6IERldmljZUdyaWRDb21wb25lbnQ7XG5cbiAgQElucHV0KClcbiAgZGV2aWNlVHlwZXM6IE9ic2VydmFibGU8c3RyaW5nW10+O1xuXG4gIHR5cGVDb2x1bW46IENvbHVtbiA9IG5ldyBUeXBlRGV2aWNlR3JpZENvbHVtbigpO1xuXG4gIEBPdXRwdXQoKVxuICBvbkRldmljZVF1ZXJ5U3RyaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGNvbHVtbnM6IENvbHVtbltdID0gW1xuICAgIG5ldyBTdGF0dXNEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IE5hbWVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgdGhpcy50eXBlQ29sdW1uLFxuICAgIG5ldyBNb2RlbERldmljZUdyaWRDb2x1bW4oKSxcbiAgICBuZXcgR3JvdXBEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IFJlZ2lzdHJhdGlvbkRhdGVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IEFsYXJtc0RldmljZUdyaWRDb2x1bW4oKVxuICBdO1xuXG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZXZpY2VUeXBlcykge1xuICAgICAgdGhpcy5kZXZpY2VUeXBlc1xuICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCB0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKVxuICAgICAgICAuc3Vic2NyaWJlKCh0eXBlczogc3RyaW5nW10pID0+IHtcbiAgICAgICAgICB0aGlzLmRldmljZUdyaWQudXBkYXRlRmlsdGVyaW5nKFt0aGlzLnR5cGVDb2x1bW4ubmFtZV0sIHtcbiAgICAgICAgICAgIHR5cGU6XG4gICAgICAgICAgICAgIHR5cGVzICYmIHR5cGVzLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gRmlsdGVyaW5nQWN0aW9uVHlwZS5BcHBseUZpbHRlclxuICAgICAgICAgICAgICAgIDogRmlsdGVyaW5nQWN0aW9uVHlwZS5SZXNldEZpbHRlcixcbiAgICAgICAgICAgIHBheWxvYWQ6IHR5cGVzXG4gICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgZmlsdGVyaW5nTW9kaWZpZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxGaWx0ZXJRdWVyeToge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGVzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQodHJ1ZSk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19