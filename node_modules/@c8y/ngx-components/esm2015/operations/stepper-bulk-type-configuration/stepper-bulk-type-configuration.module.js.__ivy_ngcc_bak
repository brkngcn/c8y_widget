import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { StepperFramesModule } from '@c8y/ngx-components/operations/stepper-frames';
import { StepperBulkTypeConfigurationComponent } from './stepper-bulk-type-configuration.component';
const ɵ0 = {
    type: BulkOperationType.CONFIGURATION,
    c8yIcon: 'cogs',
    name: gettext('Configuration update'),
    path: `${baseUrl}configuration`,
    component: StepperBulkTypeConfigurationComponent,
    fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],
    selected: false
};
/** Module for the 'Configuration update' operation type stepper */
export class StepperBulkTypeConfigurationModule {
}
StepperBulkTypeConfigurationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [StepperBulkTypeConfigurationComponent],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    SharedRepositoryModule,
                    StepperFramesModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeConfigurationComponent],
                exports: [StepperBulkTypeConfigurationComponent]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL3N0ZXBwZXItYnVsay10eXBlLWNvbmZpZ3VyYXRpb24vc3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNuRyxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLE9BQU8sRUFDUCxpQkFBaUIsRUFDbEIsTUFBTSx3REFBd0QsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUVwRixPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztXQWdCcEY7SUFDUixJQUFJLEVBQUUsaUJBQWlCLENBQUMsYUFBYTtJQUNyQyxPQUFPLEVBQUUsTUFBTTtJQUNmLElBQUksRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7SUFDckMsSUFBSSxFQUFFLEdBQUcsT0FBTyxlQUFlO0lBQy9CLFNBQVMsRUFBRSxxQ0FBcUM7SUFDaEQsU0FBUyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsbUJBQW1CLENBQUM7SUFDMUQsUUFBUSxFQUFFLEtBQUs7Q0FDaEI7QUF0QlAsbUVBQW1FO0FBNkJuRSxNQUFNLE9BQU8sa0NBQWtDOzs7WUE1QjlDLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxxQ0FBcUMsQ0FBQztnQkFDckQsT0FBTyxFQUFFO29CQUNQLFVBQVU7b0JBQ1YsV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLDBCQUEwQjtvQkFDMUIsc0JBQXNCO29CQUN0QixtQkFBbUI7aUJBQ3BCO2dCQUNELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsbUJBQW1CO3dCQUM1QixRQUFRLElBUVA7d0JBQ0QsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7Z0JBQ0QsZUFBZSxFQUFFLENBQUMscUNBQXFDLENBQUM7Z0JBQ3hELE9BQU8sRUFBRSxDQUFDLHFDQUFxQyxDQUFDO2FBQ2pEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IENvcmVNb2R1bGUsIEZvcm1zTW9kdWxlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBvc2l0b3J5L3NoYXJlZCc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1zdGVwcGVyJztcbmltcG9ydCB7XG4gIEhPT0tfTElTVF9CVUxLX1RZUEUsXG4gIGJhc2VVcmwsXG4gIEJ1bGtPcGVyYXRpb25UeXBlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5pbXBvcnQgeyBTdGVwcGVyRnJhbWVzTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL3N0ZXBwZXItZnJhbWVzJztcblxuaW1wb3J0IHsgU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vc3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi5jb21wb25lbnQnO1xuXG4vKiogTW9kdWxlIGZvciB0aGUgJ0NvbmZpZ3VyYXRpb24gdXBkYXRlJyBvcGVyYXRpb24gdHlwZSBzdGVwcGVyICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSxcbiAgICBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlLFxuICAgIFN0ZXBwZXJGcmFtZXNNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgIHR5cGU6IEJ1bGtPcGVyYXRpb25UeXBlLkNPTkZJR1VSQVRJT04sXG4gICAgICAgIGM4eUljb246ICdjb2dzJyxcbiAgICAgICAgbmFtZTogZ2V0dGV4dCgnQ29uZmlndXJhdGlvbiB1cGRhdGUnKSxcbiAgICAgICAgcGF0aDogYCR7YmFzZVVybH1jb25maWd1cmF0aW9uYCxcbiAgICAgICAgY29tcG9uZW50OiBTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uQ29tcG9uZW50LFxuICAgICAgICBmcmFnbWVudHM6IFsnYzh5X0Rvd25sb2FkQ29uZmlnRmlsZScsICdjOHlfQ29uZmlndXJhdGlvbiddLFxuICAgICAgICBzZWxlY3RlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbkNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uTW9kdWxlIHt9XG4iXX0=