import { __awaiter } from "tslib";
import { Injectable, Optional } from '@angular/core';
import { OperationService, SmartRulesService } from '@c8y/client';
import { Ng1SmartRulesService } from '@c8y/ngx-components/upgrade';
export class OperationsListService {
    constructor(operationService, smartRulesService, ng1SmartRulesService) {
        this.operationService = operationService;
        this.smartRulesService = smartRulesService;
        this.ng1SmartRulesService = ng1SmartRulesService;
    }
    getOperations(customFilter = {}) {
        const filter = Object.assign({ withTotalPages: true, withDeleted: true, pageSize: 50, dateFrom: new Date(0).toISOString(), revert: true }, customFilter);
        return this.operationService.list(filter);
    }
    isSmartRulesMicroserviceAvailable() {
        return this.smartRulesService.isMicroserviceAvailable();
    }
    getSmartRulesCreatePermissions() {
        if (this.ng1SmartRulesService && this.ng1SmartRulesService.permissionsCfgs) {
            return this.ng1SmartRulesService.permissionsCfgs.create;
        }
    }
    createSmartRule(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.ng1SmartRulesService) {
                return yield this.ng1SmartRulesService.addNewForOutputOperationWithUI(operation);
            }
        });
    }
}
OperationsListService.decorators = [
    { type: Injectable }
];
OperationsListService.ctorParameters = () => [
    { type: OperationService },
    { type: SmartRulesService },
    { type: Ng1SmartRulesService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL29wZXJhdGlvbnMtbGlzdC9vcGVyYXRpb25zLWxpc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFjLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR25FLE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsWUFDVSxnQkFBa0MsRUFDbEMsaUJBQW9DLEVBQ3hCLG9CQUEwQztRQUZ0RCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDeEIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtJQUM3RCxDQUFDO0lBRUosYUFBYSxDQUFDLFlBQVksR0FBRyxFQUFFO1FBQzdCLE1BQU0sTUFBTSxtQkFDVixjQUFjLEVBQUUsSUFBSSxFQUNwQixXQUFXLEVBQUUsSUFBSSxFQUNqQixRQUFRLEVBQUUsRUFBRSxFQUNaLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFDbkMsTUFBTSxFQUFFLElBQUksSUFDVCxZQUFZLENBQ2hCLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFpQztRQUMvQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCw4QkFBOEI7UUFDNUIsSUFBSSxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsRUFBRTtZQUMxRSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztJQUVLLGVBQWUsQ0FBQyxTQUE4Qjs7WUFDbEQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7Z0JBQzdCLE9BQU8sTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsOEJBQThCLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDbEY7UUFDSCxDQUFDO0tBQUE7OztZQW5DRixVQUFVOzs7WUFIVSxnQkFBZ0I7WUFBRSxpQkFBaUI7WUFDL0Msb0JBQW9CLHVCQU94QixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElPcGVyYXRpb24sIE9wZXJhdGlvblNlcnZpY2UsIFNtYXJ0UnVsZXNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgTmcxU21hcnRSdWxlc1NlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uc0xpc3RTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBvcGVyYXRpb25TZXJ2aWNlOiBPcGVyYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgc21hcnRSdWxlc1NlcnZpY2U6IFNtYXJ0UnVsZXNTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbmcxU21hcnRSdWxlc1NlcnZpY2U6IE5nMVNtYXJ0UnVsZXNTZXJ2aWNlXG4gICkge31cblxuICBnZXRPcGVyYXRpb25zKGN1c3RvbUZpbHRlciA9IHt9KSB7XG4gICAgY29uc3QgZmlsdGVyID0ge1xuICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWUsXG4gICAgICB3aXRoRGVsZXRlZDogdHJ1ZSxcbiAgICAgIHBhZ2VTaXplOiA1MCxcbiAgICAgIGRhdGVGcm9tOiBuZXcgRGF0ZSgwKS50b0lTT1N0cmluZygpLFxuICAgICAgcmV2ZXJ0OiB0cnVlLFxuICAgICAgLi4uY3VzdG9tRmlsdGVyXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm9wZXJhdGlvblNlcnZpY2UubGlzdChmaWx0ZXIpO1xuICB9XG5cbiAgaXNTbWFydFJ1bGVzTWljcm9zZXJ2aWNlQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNtYXJ0UnVsZXNTZXJ2aWNlLmlzTWljcm9zZXJ2aWNlQXZhaWxhYmxlKCk7XG4gIH1cblxuICBnZXRTbWFydFJ1bGVzQ3JlYXRlUGVybWlzc2lvbnMoKSB7XG4gICAgaWYgKHRoaXMubmcxU21hcnRSdWxlc1NlcnZpY2UgJiYgdGhpcy5uZzFTbWFydFJ1bGVzU2VydmljZS5wZXJtaXNzaW9uc0NmZ3MpIHtcbiAgICAgIHJldHVybiB0aGlzLm5nMVNtYXJ0UnVsZXNTZXJ2aWNlLnBlcm1pc3Npb25zQ2Zncy5jcmVhdGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlU21hcnRSdWxlKG9wZXJhdGlvbjogUGFydGlhbDxJT3BlcmF0aW9uPikge1xuICAgIGlmICh0aGlzLm5nMVNtYXJ0UnVsZXNTZXJ2aWNlKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5uZzFTbWFydFJ1bGVzU2VydmljZS5hZGROZXdGb3JPdXRwdXRPcGVyYXRpb25XaXRoVUkob3BlcmF0aW9uKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==