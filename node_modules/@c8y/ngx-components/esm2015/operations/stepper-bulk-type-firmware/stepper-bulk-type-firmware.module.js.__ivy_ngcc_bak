import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { StepperFramesModule } from '@c8y/ngx-components/operations/stepper-frames';
import { SelectFirmwareComponent } from './select-firmware.component';
import { VersionOrPatchComponent } from './version-or-patch.component';
import { StepperBulkTypeFirmwareComponent } from './stepper-bulk-type-firmware.component';
const ɵ0 = {
    type: BulkOperationType.FIRMWARE,
    c8yIcon: 'c8y-firmware',
    name: gettext('Firmware update'),
    path: `${baseUrl}firmware`,
    component: StepperBulkTypeFirmwareComponent,
    fragments: ['c8y_Firmware'],
    selected: false
};
/** Module for the 'Firmware update' operation type stepper */
export class StepperBulkTypeFirmwareModule {
}
StepperBulkTypeFirmwareModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    StepperBulkTypeFirmwareComponent,
                    VersionOrPatchComponent,
                    SelectFirmwareComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    StepperFramesModule,
                    SharedRepositoryModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeFirmwareComponent],
                exports: [StepperBulkTypeFirmwareComponent]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtZmlybXdhcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNuRyxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLE9BQU8sRUFDUCxpQkFBaUIsRUFDbEIsTUFBTSx3REFBd0QsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUVwRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztXQW9CMUU7SUFDUixJQUFJLEVBQUUsaUJBQWlCLENBQUMsUUFBUTtJQUNoQyxPQUFPLEVBQUUsY0FBYztJQUN2QixJQUFJLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLElBQUksRUFBRSxHQUFHLE9BQU8sVUFBVTtJQUMxQixTQUFTLEVBQUUsZ0NBQWdDO0lBQzNDLFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQztJQUMzQixRQUFRLEVBQUUsS0FBSztDQUNoQjtBQTFCUCw4REFBOEQ7QUFpQzlELE1BQU0sT0FBTyw2QkFBNkI7OztZQWhDekMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixnQ0FBZ0M7b0JBQ2hDLHVCQUF1QjtvQkFDdkIsdUJBQXVCO2lCQUN4QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsVUFBVTtvQkFDVixXQUFXO29CQUNYLG1CQUFtQjtvQkFDbkIsMEJBQTBCO29CQUMxQixtQkFBbUI7b0JBQ25CLHNCQUFzQjtpQkFDdkI7Z0JBQ0QsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxtQkFBbUI7d0JBQzVCLFFBQVEsSUFRUDt3QkFDRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjtnQkFDRCxlQUFlLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQztnQkFDbkQsT0FBTyxFQUFFLENBQUMsZ0NBQWdDLENBQUM7YUFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgQ29yZU1vZHVsZSwgRm9ybXNNb2R1bGUsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFNoYXJlZFJlcG9zaXRvcnlNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnkvc2hhcmVkJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25TdGVwcGVyTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9uLXN0ZXBwZXInO1xuaW1wb3J0IHtcbiAgSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAgYmFzZVVybCxcbiAgQnVsa09wZXJhdGlvblR5cGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcbmltcG9ydCB7IFN0ZXBwZXJGcmFtZXNNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvc3RlcHBlci1mcmFtZXMnO1xuXG5pbXBvcnQgeyBTZWxlY3RGaXJtd2FyZUNvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LWZpcm13YXJlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBWZXJzaW9uT3JQYXRjaENvbXBvbmVudCB9IGZyb20gJy4vdmVyc2lvbi1vci1wYXRjaC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVDb21wb25lbnQgfSBmcm9tICcuL3N0ZXBwZXItYnVsay10eXBlLWZpcm13YXJlLmNvbXBvbmVudCc7XG5cbi8qKiBNb2R1bGUgZm9yIHRoZSAnRmlybXdhcmUgdXBkYXRlJyBvcGVyYXRpb24gdHlwZSBzdGVwcGVyICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTdGVwcGVyQnVsa1R5cGVGaXJtd2FyZUNvbXBvbmVudCxcbiAgICBWZXJzaW9uT3JQYXRjaENvbXBvbmVudCxcbiAgICBTZWxlY3RGaXJtd2FyZUNvbXBvbmVudFxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIEJ1bGtPcGVyYXRpb25TdGVwcGVyTW9kdWxlLFxuICAgIFN0ZXBwZXJGcmFtZXNNb2R1bGUsXG4gICAgU2hhcmVkUmVwb3NpdG9yeU1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX0xJU1RfQlVMS19UWVBFLFxuICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgdHlwZTogQnVsa09wZXJhdGlvblR5cGUuRklSTVdBUkUsXG4gICAgICAgIGM4eUljb246ICdjOHktZmlybXdhcmUnLFxuICAgICAgICBuYW1lOiBnZXR0ZXh0KCdGaXJtd2FyZSB1cGRhdGUnKSxcbiAgICAgICAgcGF0aDogYCR7YmFzZVVybH1maXJtd2FyZWAsXG4gICAgICAgIGNvbXBvbmVudDogU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVDb21wb25lbnQsXG4gICAgICAgIGZyYWdtZW50czogWydjOHlfRmlybXdhcmUnXSxcbiAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1N0ZXBwZXJCdWxrVHlwZUZpcm13YXJlQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW1N0ZXBwZXJCdWxrVHlwZUZpcm13YXJlQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBTdGVwcGVyQnVsa1R5cGVGaXJtd2FyZU1vZHVsZSB7fVxuIl19