import { Component } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { BsModalRef } from 'ngx-bootstrap/modal';
export class IconSelectorModalComponent {
    constructor(bsModal) {
        this.bsModal = bsModal;
        this.title = gettext('Select icon');
        this.saveButtonLabel = gettext('Select');
        this.iconCategoriesToExclude = [];
        this.showIconClass = true;
        this.result = new Promise((resolve, reject) => {
            this.save = resolve;
            this.cancel = reject;
        });
    }
    close() {
        this.bsModal.hide();
        this.cancel();
    }
    saveChanges() {
        this.bsModal.hide();
        this.save(this.currentSelection);
    }
    selectionChange(newSelection) {
        this.currentSelection = newSelection;
    }
}
IconSelectorModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-icon-selector-modal',
                template: "<div class=\"modal-header\">\n  <h4 class=\"modal-title pull-left\">{{ title | translate }}</h4>\n</div>\n<div class=\"modal-body\">\n  <c8y-icon-selector\n    (onSelect)=\"selectionChange($event)\"\n    [selectedIcon]=\"currentSelection\"\n    [iconCategoriesToExclude]=\"iconCategoriesToExclude\"\n    [showIconClass]=\"showIconClass\"\n  ></c8y-icon-selector>\n</div>\n<div class=\"modal-footer separator text-center\">\n  <button class=\"btn btn-default\" (click)=\"close()\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button class=\"btn btn-primary\" [disabled]=\"!currentSelection\" (click)=\"saveChanges()\">\n    {{ saveButtonLabel | translate }}\n  </button>\n</div>\n"
            },] }
];
IconSelectorModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1zZWxlY3Rvci1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9pY29uLXNlbGVjdG9yL2ljb24tc2VsZWN0b3ItbW9kYWwvaWNvbi1zZWxlY3Rvci1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTWpELE1BQU0sT0FBTywwQkFBMEI7SUFlckMsWUFBb0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQWR2QyxVQUFLLEdBQVcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXZDLG9CQUFlLEdBQVcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLDRCQUF1QixHQUFhLEVBQUUsQ0FBQztRQUN2QyxrQkFBYSxHQUFHLElBQUksQ0FBQztRQUVaLFdBQU0sR0FBb0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDakUsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7WUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFLdUMsQ0FBQztJQUUzQyxLQUFLO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGVBQWUsQ0FBQyxZQUFvQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO0lBQ3ZDLENBQUM7OztZQWpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsd3JCQUFtRDthQUNwRDs7O1lBTFEsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktaWNvbi1zZWxlY3Rvci1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLXNlbGVjdG9yLW1vZGFsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJY29uU2VsZWN0b3JNb2RhbENvbXBvbmVudCB7XG4gIHRpdGxlOiBzdHJpbmcgPSBnZXR0ZXh0KCdTZWxlY3QgaWNvbicpO1xuICBjdXJyZW50U2VsZWN0aW9uOiBzdHJpbmc7XG4gIHNhdmVCdXR0b25MYWJlbDogc3RyaW5nID0gZ2V0dGV4dCgnU2VsZWN0Jyk7XG4gIGljb25DYXRlZ29yaWVzVG9FeGNsdWRlOiBzdHJpbmdbXSA9IFtdO1xuICBzaG93SWNvbkNsYXNzID0gdHJ1ZTtcblxuICByZWFkb25seSByZXN1bHQ6IFByb21pc2U8c3RyaW5nPiA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0aGlzLnNhdmUgPSByZXNvbHZlO1xuICAgIHRoaXMuY2FuY2VsID0gcmVqZWN0O1xuICB9KTtcblxuICBwcml2YXRlIHNhdmU6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICBwcml2YXRlIGNhbmNlbDogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJzTW9kYWw6IEJzTW9kYWxSZWYpIHt9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5ic01vZGFsLmhpZGUoKTtcbiAgICB0aGlzLmNhbmNlbCgpO1xuICB9XG5cbiAgc2F2ZUNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy5ic01vZGFsLmhpZGUoKTtcbiAgICB0aGlzLnNhdmUodGhpcy5jdXJyZW50U2VsZWN0aW9uKTtcbiAgfVxuXG4gIHNlbGVjdGlvbkNoYW5nZShuZXdTZWxlY3Rpb246IHN0cmluZykge1xuICAgIHRoaXMuY3VycmVudFNlbGVjdGlvbiA9IG5ld1NlbGVjdGlvbjtcbiAgfVxufVxuIl19