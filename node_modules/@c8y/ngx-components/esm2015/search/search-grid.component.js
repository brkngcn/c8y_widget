import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DataGridComponent, FilteringActionType, gettext, InventorySearchService } from '@c8y/ngx-components';
import { SmartGroupsService } from '@c8y/client';
import { AssetSearchService } from './search.service';
import { AssetTypeGridColumn, DeleteAssetsModalComponent, SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AlarmsDeviceGridColumn, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from './search.service';
import * as ɵngcc3 from 'ngx-bootstrap/modal';
import * as ɵngcc4 from '@c8y/client';
import * as ɵngcc5 from '@c8y/ngx-components/sub-assets';
import * as ɵngcc6 from '@angular/common';

function SearchGridComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-column", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", column_r1.name);
} }
export class SearchGridComponent {
    constructor(coreSearchService, searchService, bsModalService, smartGroupsService, subAssetsGridService) {
        this.coreSearchService = coreSearchService;
        this.searchService = searchService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.subAssetsGridService = subAssetsGridService;
        this.title = '';
        this.loadingItemsLabel = gettext('Loading results…');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.searchText = '';
        this.pagination = this.searchService.getDefaultPagination();
        this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
        this.refresh = new EventEmitter();
        this.sizeCount = 0;
    }
    set _columns(value) {
        if (value) {
            this.columns = value;
        }
        else {
            this.columns = this.searchService.getDefaultColumns();
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.searchService.getDefaultPagination();
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.searchService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
        }
    }
    ngOnInit() {
        if (!this.filteringName) {
            this.columns = this.searchService.getDefaultColumns();
        }
        else {
            this.columns = [
                new AssetTypeGridColumn({ sortOrder: 'desc' }),
                new NameDeviceGridColumn({
                    sortOrder: 'asc',
                    filter: { externalFilterQuery: { names: [this.filteringName] } }
                }),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn({ visible: false }),
                new RegistrationDateDeviceGridColumn({ visible: false }),
                new SystemIdDeviceGridColumn({ visible: false }),
                new ImeiDeviceGridColumn({ visible: false }),
                new AlarmsDeviceGridColumn()
            ];
        }
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.setActionControls();
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            if (dataSourceModifier.searchText) {
                response = yield this.coreSearchService.search(dataSourceModifier.searchText, dataSourceModifier.pagination);
            }
            else {
                response = yield this.searchService.getData(dataSourceModifier.columns, dataSourceModifier.pagination);
            }
            const { res, data, paging } = response;
            const filteredData = this.coreSearchService.filterOnlyAssets(data);
            if (paging.currentPage === 1) {
                this.sizeCount = 0;
            }
            this.sizeCount += filteredData.length;
            this.onColumnsChange.emit(dataSourceModifier.columns);
            return {
                res,
                data: filteredData,
                paging,
                filteredSize: this.sizeCount,
                size: undefined
            };
        });
    }
    setActionControls() {
        const actionControls = [];
        const deleteAction = {
            type: "DELETE" /* Delete */,
            callback: (asset) => this.onDeleteAsset(asset, this.parentGroup)
        };
        actionControls.push(deleteAction);
        if (!this.actionControls) {
            this.actionControls = actionControls;
        }
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action, false);
        }
    }
    configChange(config) {
        this.searchService.saveConfig(config);
    }
    onDeleteAsset(asset, parentRef) {
        const initialState = {
            showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
            asset,
            showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)
        };
        const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe((result) => __awaiter(this, void 0, void 0, function* () {
            if (result) {
                yield this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                this.refresh.emit();
            }
        }));
    }
}
SearchGridComponent.ɵfac = function SearchGridComponent_Factory(t) { return new (t || SearchGridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InventorySearchService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AssetSearchService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.SmartGroupsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.SubAssetsService)); };
SearchGridComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchGridComponent, selectors: [["c8y-search-grid"]], viewQuery: function SearchGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DataGridComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataGrid = _t.first);
    } }, inputs: { title: "title", loadingItemsLabel: "loadingItemsLabel", selectable: "selectable", searchText: "searchText", _columns: ["columns", "_columns"], _pagination: ["pagination", "_pagination"], _actionControls: ["actionControls", "_actionControls"], _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], parentGroup: ["parent-group", "parentGroup"], filteringName: "filteringName" }, outputs: { onColumnsChange: "onColumnsChange" }, decls: 7, vars: 24, consts: [[1, "card--grid--fullpage"], [3, "title", "loadingItemsLabel", "columns", "pagination", "actionControls", "selectable", "bulkActionControls", "serverSideDataCallback", "infiniteScroll", "showSearch", "searchText", "refresh", "onConfigChange"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "icon", "title", "subtitle", "horizontal"], [3, "name"]], template: function SearchGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-data-grid", 1);
        ɵngcc0.ɵɵlistener("onConfigChange", function SearchGridComponent_Template_c8y_data_grid_onConfigChange_1_listener($event) { return ctx.configChange($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, SearchGridComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelement(4, "c8y-ui-empty-state", 3);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 18, "Search results"))("loadingItemsLabel", ctx.loadingItemsLabel)("columns", ctx.columns)("pagination", ctx.pagination)("actionControls", ctx.actionControls)("selectable", ctx.selectable)("bulkActionControls", ctx.bulkActionControls)("serverSideDataCallback", ctx.serverSideDataCallback)("infiniteScroll", "auto")("showSearch", true)("searchText", ctx.searchText)("refresh", ctx.refresh);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns)("ngForTrackBy", ctx.trackByName);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("icon", "search")("title", ɵngcc0.ɵɵpipeBind1(5, 20, "No results to display."))("subtitle", ɵngcc0.ɵɵpipeBind1(6, 22, "Refine your search terms or check your spelling."))("horizontal", true);
    } }, directives: [ɵngcc1.DataGridComponent, ɵngcc6.NgForOf, ɵngcc1.EmptyStateComponent, ɵngcc1.ColumnDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
SearchGridComponent.ctorParameters = () => [
    { type: InventorySearchService },
    { type: AssetSearchService },
    { type: BsModalService },
    { type: SmartGroupsService },
    { type: SubAssetsService }
];
SearchGridComponent.propDecorators = {
    parentGroup: [{ type: Input, args: ['parent-group',] }],
    title: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    _columns: [{ type: Input, args: ['columns',] }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    selectable: [{ type: Input }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    onColumnsChange: [{ type: Output }],
    searchText: [{ type: Input }],
    filteringName: [{ type: Input }],
    dataGrid: [{ type: ViewChild, args: [DataGridComponent, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchGridComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search-grid',
                template: "<div class=\"card--grid--fullpage\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onConfigChange)=\"configChange($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n\n    <c8y-ui-empty-state\n      [icon]=\"'search'\"\n      [title]=\"'No results to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.InventorySearchService }, { type: ɵngcc2.AssetSearchService }, { type: ɵngcc3.BsModalService }, { type: ɵngcc4.SmartGroupsService }, { type: ɵngcc5.SubAssetsService }]; }, { title: [{
            type: Input
        }], loadingItemsLabel: [{
            type: Input
        }], selectable: [{
            type: Input
        }], onColumnsChange: [{
            type: Output
        }], searchText: [{
            type: Input
        }], _columns: [{
            type: Input,
            args: ['columns']
        }], _pagination: [{
            type: Input,
            args: ['pagination']
        }], _actionControls: [{
            type: Input,
            args: ['actionControls']
        }], _bulkActionControls: [{
            type: Input,
            args: ['bulkActionControls']
        }], parentGroup: [{
            type: Input,
            args: ['parent-group']
        }], filteringName: [{
            type: Input
        }], dataGrid: [{
            type: ViewChild,
            args: [DataGridComponent, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,