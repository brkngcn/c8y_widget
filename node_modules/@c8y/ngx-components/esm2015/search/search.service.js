import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { SubAssetsService } from '@c8y/ngx-components/sub-assets';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i3 from "@c8y/client/lib/src/user/UserService";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "@c8y/ngx-components/assets-navigator";
import * as i6 from "@c8y/client/lib/src/smart-groups/SmartGroupsService";
import * as i7 from "@c8y/client/lib/src/smart-rules/SmartRulesService";
import * as ɵngcc0 from '@angular/core';
export class AssetSearchService extends SubAssetsService {
    constructor() {
        super(...arguments);
        this.GRID_CONFIG_STORAGE_KEY = 'search-grid-config';
        this.DEFAULT_PAGE_SIZE = 50;
    }
    buildCombinedRootQueryFilter(columns, pagination) {
        const rootQuery = {
            __filter: {
                __and: { __not: { __has: `c8y_IsBinary` } }
            }
        };
        const userQuery = this.getQueryObj(columns, pagination);
        const queryPart = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        const fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    getData(columns, pagination) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = this.buildCombinedRootQueryFilter(columns, pagination);
            return this.assetNodeService.getAllInventories(Object.assign(Object.assign({}, pagination), { query }));
        });
    }
}
AssetSearchService.ɵfac = /*@__PURE__*/ function () { let ɵAssetSearchService_BaseFactory; return function AssetSearchService_Factory(t) { return (ɵAssetSearchService_BaseFactory || (ɵAssetSearchService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AssetSearchService)))(t || AssetSearchService); }; }();
AssetSearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetSearchService_Factory() { return new AssetSearchService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.InventoryService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.AppStateService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i5.AssetNodeService), i0.ɵɵinject(i6.SmartGroupsService), i0.ɵɵinject(i7.SmartRulesService), i0.ɵɵinject(i4.AlertService), i0.ɵɵinject(i4.Permissions), i0.ɵɵinject(i4.ModalService), i0.ɵɵinject(i4.AssetTypesService), i0.ɵɵinject(i4.UserPreferencesService), i0.ɵɵinject(i4.GainsightService, 8)); }, token: AssetSearchService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetSearchService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlYXJjaC9zZWFyY2guc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRTtBQUdDO0FBQ3dDO0FBQ1c7QUFHckM7QUFDWDtBQUVrQjtBQUdROztBQVY5QixNQUFNLE9BQU8sa0JBQW1CLFNBQVEsZ0JBQWdCO0FBQ3hELElBSkE7QUFDRTtBQUVLLFFBQ0ssNEJBQXVCLEdBQUcsb0JBQW9CLENBQUM7QUFDM0QsUUFBWSxzQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFDbkMsS0FpQkM7QUFDRCxJQWpCRSw0QkFBNEIsQ0FBQyxPQUFPLEVBQUUsVUFBVTtBQUNsRCxRQUFJLE1BQU0sU0FBUyxHQUFHO0FBQ3RCLFlBQU0sUUFBUSxFQUFFO0FBQ2hCLGdCQUFRLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsRUFBRTtBQUNuRCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sUUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1RCxRQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdGLFFBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuRixRQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEQsSUFBRSxDQUFDO0FBQ0gsSUFDUSxPQUFPLENBQUMsT0FBMkIsRUFBRSxVQUFzQjtBQUNuRTtBQUE4RCxZQUExRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3pFLFlBQUksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLGlDQUFNLFVBQVUsS0FBRSxLQUFLLElBQUcsQ0FBQztBQUM3RSxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7NlNBQUM7QUFDRDs4Q0F4QkMsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNO0NBQ25COzs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBTdWJBc3NldHNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9zdWItYXNzZXRzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXNzZXRTZWFyY2hTZXJ2aWNlIGV4dGVuZHMgU3ViQXNzZXRzU2VydmljZSB7XG4gIHByb3RlY3RlZCBHUklEX0NPTkZJR19TVE9SQUdFX0tFWSA9ICdzZWFyY2gtZ3JpZC1jb25maWcnO1xuICBwcm90ZWN0ZWQgREVGQVVMVF9QQUdFX1NJWkUgPSA1MDtcblxuICBidWlsZENvbWJpbmVkUm9vdFF1ZXJ5RmlsdGVyKGNvbHVtbnMsIHBhZ2luYXRpb24pIHtcbiAgICBjb25zdCByb290UXVlcnkgPSB7XG4gICAgICBfX2ZpbHRlcjoge1xuICAgICAgICBfX2FuZDogeyBfX25vdDogeyBfX2hhczogYGM4eV9Jc0JpbmFyeWAgfSB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1c2VyUXVlcnkgPSB0aGlzLmdldFF1ZXJ5T2JqKGNvbHVtbnMsIHBhZ2luYXRpb24pO1xuICAgIGNvbnN0IHF1ZXJ5UGFydCA9IHRoaXMucXVlcmllc1V0aWwuYWRkT3JkZXJieXMocm9vdFF1ZXJ5LCB1c2VyUXVlcnkuX19vcmRlcmJ5LCAnYXBwZW5kJyk7XG4gICAgY29uc3QgZnVsbFF1ZXJ5ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIocXVlcnlQYXJ0LCB1c2VyUXVlcnkuX19maWx0ZXIpO1xuICAgIHJldHVybiB0aGlzLnF1ZXJpZXNVdGlsLmJ1aWxkUXVlcnkoZnVsbFF1ZXJ5KTtcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEoY29sdW1uczogRGV2aWNlR3JpZENvbHVtbltdLCBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uKSB7XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLmJ1aWxkQ29tYmluZWRSb290UXVlcnlGaWx0ZXIoY29sdW1ucywgcGFnaW5hdGlvbik7XG4gICAgcmV0dXJuIHRoaXMuYXNzZXROb2RlU2VydmljZS5nZXRBbGxJbnZlbnRvcmllcyh7IC4uLnBhZ2luYXRpb24sIHF1ZXJ5IH0pO1xuICB9XG59XG4iXX0=