import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryBinaryService, InventoryService } from '@c8y/client';
import { AlertService, AssetTypesService, ContextRouteService, gettext } from '@c8y/ngx-components';
export class AssetPropertiesComponent {
    constructor(assetTypes, inventory, inventoryBinary, alert, contextRouteService, activatedRoute) {
        this.assetTypes = assetTypes;
        this.inventory = inventory;
        this.inventoryBinary = inventoryBinary;
        this.alert = alert;
        this.contextRouteService = contextRouteService;
        this.activatedRoute = activatedRoute;
        this.properties = [];
        this.customProperties = [];
        this.isEdit = false;
        this.isLoading = false;
    }
    ngOnChanges(changes) {
        if (changes.asset) {
            // Back button handling, as component is not destroyed
            this.assetType = undefined;
            this.customProperties = [];
            this.loadAsset();
        }
    }
    loadAsset() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.assetType = this.assetTypes.getAssetTypeByName(this.asset.type);
            this.customProperties = yield this.resolveCustomProperties(this.properties);
            this.isLoading = false;
        });
    }
    resolveCustomProperties(managedObjects) {
        return __awaiter(this, void 0, void 0, function* () {
            const properties = [];
            for (const mo of managedObjects) {
                if (mo.c8y_JsonSchema) {
                    const items = yield this.parseItem(mo, mo.c8y_JsonSchema.properties, this.asset);
                    properties.push(items[0]);
                }
            }
            return properties;
        });
    }
    parseItem(mo, properties, asset) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!asset) {
                return [];
            }
            const keys = Object.keys(properties);
            const items = [];
            for (const key of keys) {
                let value = asset[key];
                const type = properties[key].type;
                const title = properties[key].title;
                let file;
                if (type === 'file' && value) {
                    const fileId = typeof value === 'object' ? (_b = (_a = value[0]) === null || _a === void 0 ? void 0 : _a.file) === null || _b === void 0 ? void 0 : _b.id : value;
                    const fileData = yield this.getFileManagedObject(fileId);
                    file = fileData;
                    value = [fileData];
                }
                items.push({
                    key,
                    value,
                    label: title || mo.label,
                    type,
                    description: mo.description,
                    file,
                    complex: type === 'object'
                        ? yield this.parseItem(mo, properties[key].properties, asset[key])
                        : undefined,
                    isEdit: false,
                    jsonSchema: mo.c8y_JsonSchema
                });
            }
            return items;
        });
    }
    toggleEdit(prop) {
        prop.isEdit = !prop.isEdit;
    }
    getFileManagedObject(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.inventory.detail(id);
                return data;
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
        });
    }
    save(model, prop) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (prop.type === 'object') {
                    model[prop.key] = yield this.uploadFiles(model[prop.key], prop.value);
                }
                else {
                    model = yield this.uploadFiles(model, prop.value);
                }
                const updatedAsset = Object.assign({ id: this.asset.id }, model);
                const { data } = yield this.inventory.update(updatedAsset);
                this.toggleEdit(prop);
                this.asset = data;
                yield this.loadAsset();
                this.contextRouteService.refreshContext();
                this.alert.success(gettext('Asset properties updated.'));
                this.contextRouteService.setContext(this.activatedRoute, data);
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
        });
    }
    uploadFiles(model, moId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const keys = Object.keys(model);
            for (const key of keys) {
                if (Array.isArray(model[key]) && ((_a = model[key][0]) === null || _a === void 0 ? void 0 : _a.file) instanceof File) {
                    try {
                        const upload = yield this.inventoryBinary.create(model[key][0].file);
                        try {
                            if (moId && moId[0]) {
                                yield this.inventory.childAdditionsRemove(moId[0], this.asset.id);
                            }
                        }
                        catch (ex) {
                            this.alert.addServerFailure(ex);
                        }
                        model[key] = upload.data.id;
                        yield this.inventory.childAdditionsAdd(upload.data.id, this.asset.id);
                    }
                    catch (ex) {
                        this.alert.addServerFailure(ex);
                    }
                }
            }
            return model;
        });
    }
}
AssetPropertiesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-asset-properties',
                template: "<ng-container>\n  <div class=\"card-header bg-inherit separator sticky-top\">\n    <h4\n      class=\"card-title p-t-4 p-b-4\"\n      ngNonBindable\n      translate\n      [translateParams]=\"{ label: (assetType?.label || '') | humanize }\"\n    >\n      {{ label }} properties\n    </h4>\n  </div>\n  <div class=\"card-block\">\n    <div class=\"text-center\" *ngIf=\"isLoading\">\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <ng-container *ngIf=\"!isLoading\">\n      <div\n        class=\"card m-b-8\"\n        *ngFor=\"let prop of customProperties\"\n        [ngClass]=\"{ 'card-highlight': prop.isEdit }\"\n        title=\"{{ prop.description | translate }}\"\n      >\n        <div class=\"card-block \" [ngClass]=\"{'p-b-0': prop.isEdit}\">\n          <div class=\"d-flex p-b-8\" *ngIf=\"!prop.isEdit\">\n            <p class=\"text-medium\">{{ prop?.label | humanize }}</p>\n            <button\n              class=\"btn btn-clean text-primary m-l-auto text-12\"\n              title=\"{{ 'Edit' | translate }}\"\n              (click)=\"toggleEdit(prop)\"\n            >\n              <i c8yIcon=\"pencil\"></i>\n            </button>\n          </div>\n          <c8y-asset-properties-item\n            #assetProps\n            [file]=\"prop.file\"\n            [key]=\"prop.key\"\n            [type]=\"prop.type\"\n            [value]=\"prop.value\"\n            [complex]=\"prop.complex\"\n            [isEdit]=\"prop.isEdit\"\n            [jsonSchema]=\"prop.jsonSchema\"\n          ></c8y-asset-properties-item>\n        </div>\n        <div class=\"card-footer p-t-0\" *ngIf=\"prop.isEdit\">\n          <button type=\"button\" class=\"btn btn-default btn-sm\" translate (click)=\"toggleEdit(prop)\">\n            Cancel\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-primary btn-sm\"\n            translate\n            [disabled]=\"!assetProps?.form?.valid\"\n            (click)=\"save(assetProps.model, prop)\"\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n"
            },] }
];
AssetPropertiesComponent.ctorParameters = () => [
    { type: AssetTypesService },
    { type: InventoryService },
    { type: InventoryBinaryService },
    { type: AlertService },
    { type: ContextRouteService },
    { type: ActivatedRoute }
];
AssetPropertiesComponent.propDecorators = {
    asset: [{ type: Input }],
    properties: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,