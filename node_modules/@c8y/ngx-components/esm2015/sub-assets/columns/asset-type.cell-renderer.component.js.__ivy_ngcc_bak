import { Component } from '@angular/core';
import { CellRendererContext, gettext } from '@c8y/ngx-components';
import { AssetNodeService } from '@c8y/ngx-components/assets-navigator';
export class AssetTypeCellRendererComponent {
    constructor(context, assetNodeService) {
        this.context = context;
        this.assetNodeService = assetNodeService;
    }
    ngOnInit() {
        this.isAnyGroup = this.assetNodeService.isAnyGroup(this.context.item);
        this.groupIcon = this.assetNodeService.icon(this.context.item);
        this.isDevice = this.assetNodeService.isDevice(this.context.item);
        this.isAsset = this.assetNodeService.isAsset(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    }
    getIconTitle(icon) {
        if (this.isAsset) {
            return this.context.item.type;
        }
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            case 'exchange':
                return gettext('Device');
            default:
                return gettext('Asset');
        }
    }
}
AssetTypeCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<device-status class=\"m-l-8\" [mo]=\"context.item\" *ngIf=\"isDevice\"></device-status>\n<i\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  class=\"m-l-8 c8y-icon-duocolor\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n"
            },] }
];
AssetTypeCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: AssetNodeService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N1Yi1hc3NldHMvY29sdW1ucy9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBS3hFLE1BQU0sT0FBTyw4QkFBOEI7SUFNekMsWUFBbUIsT0FBNEIsRUFBWSxnQkFBa0M7UUFBMUUsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFBWSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUksQ0FBQztJQUVsRyxRQUFRO1FBQ04sSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQVk7UUFDL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQy9CO1FBRUQsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLFdBQVc7Z0JBQ2QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsS0FBSyxpQkFBaUI7Z0JBQ3BCLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hDLEtBQUssMkJBQTJCO2dCQUM5QixPQUFPLHVCQUF1QixDQUFDO1lBQ2pDLEtBQUssa0JBQWtCO2dCQUNyQixPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNqQyxLQUFLLFVBQVU7Z0JBQ2IsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0I7Z0JBQ0UsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7WUF0Q0YsU0FBUyxTQUFDO2dCQUNULCtQQUF3RDthQUN6RDs7O1lBTFEsbUJBQW1CO1lBQ25CLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0LCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBc3NldE5vZGVTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGdyb3VwSWNvbjogc3RyaW5nO1xuICBpc0FueUdyb3VwOiBib29sZWFuO1xuICBpc0RldmljZTogYm9vbGVhbjtcbiAgaXNBc3NldDogYm9vbGVhbjtcbiAgaWNvblRpdGxlOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZXh0OiBDZWxsUmVuZGVyZXJDb250ZXh0LCBwcm90ZWN0ZWQgYXNzZXROb2RlU2VydmljZTogQXNzZXROb2RlU2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pc0FueUdyb3VwID0gdGhpcy5hc3NldE5vZGVTZXJ2aWNlLmlzQW55R3JvdXAodGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuZ3JvdXBJY29uID0gdGhpcy5hc3NldE5vZGVTZXJ2aWNlLmljb24odGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuaXNEZXZpY2UgPSB0aGlzLmFzc2V0Tm9kZVNlcnZpY2UuaXNEZXZpY2UodGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuaXNBc3NldCA9IHRoaXMuYXNzZXROb2RlU2VydmljZS5pc0Fzc2V0KHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmljb25UaXRsZSA9IHRoaXMuZ2V0SWNvblRpdGxlKHRoaXMuZ3JvdXBJY29uKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SWNvblRpdGxlKGljb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuaXNBc3NldCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5pdGVtLnR5cGU7XG4gICAgfVxuXG4gICAgc3dpdGNoIChpY29uKSB7XG4gICAgICBjYXNlICdjOHktZ3JvdXAnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnR3JvdXAnKTtcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1zbWFydCc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdTbWFydCBncm91cCcpO1xuICAgICAgY2FzZSAnYzh5LWdyb3VwLXJlbW90ZS1pbmFjdGl2ZSc6XG4gICAgICAgIHJldHVybiAnSW5hY3RpdmUgcmVtb3RlIGdyb3VwJztcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1yZW1vdGUnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnUmVtb3RlIGdyb3VwJyk7XG4gICAgICBjYXNlICdleGNoYW5nZSc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdEZXZpY2UnKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdBc3NldCcpO1xuICAgIH1cbiAgfVxufVxuIl19