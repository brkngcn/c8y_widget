import { gettext, getBasicInputArrayFormFieldConfig } from '@c8y/ngx-components';
import { AssetTypeCellRendererComponent } from './asset-type.cell-renderer.component';
import { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';
export class AssetTypeGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'type';
        this.header = gettext('Type');
        this.dataType = "icon" /* Icon */;
        this.cellRendererComponent = AssetTypeCellRendererComponent;
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: `c8y_IsDeviceGroup` }]
        };
        this.filterable = true;
        this.filteringConfig = {
            fields: getBasicInputArrayFormFieldConfig({
                key: 'types',
                label: gettext('Show items with type'),
                addText: gettext('Add next`type`'),
                tooltip: gettext('Use * as a wildcard character'),
                placeholder: gettext('building`e.g. house`')
            }),
            getFilter(model) {
                const filter = {};
                if (model.types.length) {
                    filter.type = { __in: model.types };
                }
                return filter;
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N1Yi1hc3NldHMvY29sdW1ucy9hc3NldC10eXBlLWdyaWQtY29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxPQUFPLEVBR1AsaUNBQWlDLEVBQ2xDLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFdkUsTUFBTSxPQUFPLG1CQUFvQixTQUFRLG9CQUFvQjtJQUMzRCxZQUFZLG1CQUFrQztRQUM1QyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxvQkFBc0IsQ0FBQztRQUNwQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsOEJBQThCLENBQUM7UUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixrQkFBa0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUM7U0FDcEQsQ0FBQztRQUVGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUc7WUFDckIsTUFBTSxFQUFFLGlDQUFpQyxDQUFDO2dCQUN4QyxHQUFHLEVBQUUsT0FBTztnQkFDWixLQUFLLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUN0QyxPQUFPLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO2dCQUNsQyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO2dCQUNqRCxXQUFXLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO2FBQzdDLENBQUM7WUFDRixTQUFTLENBQUMsS0FBVTtnQkFDbEIsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO2dCQUN2QixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUN0QixNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDckM7Z0JBQ0QsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBnZXR0ZXh0LFxuICBDb2x1bW5EYXRhVHlwZSxcbiAgQ29sdW1uQ29uZmlnLFxuICBnZXRCYXNpY0lucHV0QXJyYXlGb3JtRmllbGRDb25maWdcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmFzZURldmljZUdyaWRDb2x1bW4gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcblxuZXhwb3J0IGNsYXNzIEFzc2V0VHlwZUdyaWRDb2x1bW4gZXh0ZW5kcyBCYXNlRGV2aWNlR3JpZENvbHVtbiB7XG4gIGNvbnN0cnVjdG9yKGluaXRpYWxDb2x1bW5Db25maWc/OiBDb2x1bW5Db25maWcpIHtcbiAgICBzdXBlcihpbml0aWFsQ29sdW1uQ29uZmlnKTtcbiAgICB0aGlzLm5hbWUgPSAndHlwZSc7XG4gICAgdGhpcy5oZWFkZXIgPSBnZXR0ZXh0KCdUeXBlJyk7XG4gICAgdGhpcy5kYXRhVHlwZSA9IENvbHVtbkRhdGFUeXBlLkljb247XG4gICAgdGhpcy5jZWxsUmVuZGVyZXJDb21wb25lbnQgPSBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG4gICAgdGhpcy5zb3J0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgcGF0aFNvcnRpbmdDb25maWdzOiBbeyBwYXRoOiBgYzh5X0lzRGV2aWNlR3JvdXBgIH1dXG4gICAgfTtcblxuICAgIHRoaXMuZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBmaWVsZHM6IGdldEJhc2ljSW5wdXRBcnJheUZvcm1GaWVsZENvbmZpZyh7XG4gICAgICAgIGtleTogJ3R5cGVzJyxcbiAgICAgICAgbGFiZWw6IGdldHRleHQoJ1Nob3cgaXRlbXMgd2l0aCB0eXBlJyksXG4gICAgICAgIGFkZFRleHQ6IGdldHRleHQoJ0FkZCBuZXh0YHR5cGVgJyksXG4gICAgICAgIHRvb2x0aXA6IGdldHRleHQoJ1VzZSAqIGFzIGEgd2lsZGNhcmQgY2hhcmFjdGVyJyksXG4gICAgICAgIHBsYWNlaG9sZGVyOiBnZXR0ZXh0KCdidWlsZGluZ2BlLmcuIGhvdXNlYCcpXG4gICAgICB9KSxcbiAgICAgIGdldEZpbHRlcihtb2RlbDogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgaWYgKG1vZGVsLnR5cGVzLmxlbmd0aCkge1xuICAgICAgICAgIGZpbHRlci50eXBlID0geyBfX2luOiBtb2RlbC50eXBlcyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIl19