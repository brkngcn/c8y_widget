import { NgModule } from '@angular/core';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { AddGroupModule } from './add-group/add-group.module';
import { AssetTypeCellRendererComponent } from './columns/asset-type.cell-renderer.component';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { GroupInfoComponent } from './group-info.component';
import { GroupsComponent } from './groups.component';
import { SubAssetsGridComponent } from './sub-assets-grid.component';
import { SubAssetsComponent } from './sub-assets.component';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
import { AssignDevicesComponent } from './assign-devices/assign-devices.component';
import { AssignChildDevicesComponent } from './assign-devices/assign-child-devices.component';
import { AssetPropertiesComponent } from './asset-properties.component';
import { AssetPropertiesItemComponent } from './asset-properties-item.component';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = [
    {
        context: ViewContext.Group,
        path: 'subassets',
        priority: 1000,
        icon: 'c8y-group-open',
        label: gettext('Subassets'),
        component: SubAssetsComponent,
        featureId: 'subassets'
    },
    {
        path: 'group',
        component: GroupsComponent
    }
];
export class SubAssetsModule {
}
SubAssetsModule.ɵfac = function SubAssetsModule_Factory(t) { return new (t || SubAssetsModule)(); };
SubAssetsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SubAssetsModule });
SubAssetsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        SubAssetsService
    ], imports: [[CoreModule, DeviceGridModule, AddGroupModule, PopoverModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SubAssetsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    SubAssetsComponent,
                    SubAssetsGridComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    GroupInfoComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent,
                    AssignDevicesComponent,
                    AssignChildDevicesComponent,
                    AssetPropertiesComponent,
                    AssetPropertiesItemComponent
                ],
                imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule],
                entryComponents: [
                    SubAssetsComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent
                ],
                exports: [],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    SubAssetsService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SubAssetsModule, { declarations: function () { return [SubAssetsComponent,
        SubAssetsGridComponent,
        AssetTypeCellRendererComponent,
        GroupsComponent,
        GroupInfoComponent,
        DeleteAssetsModalComponent,
        UnassignModalComponent,
        AssignDevicesComponent,
        AssignChildDevicesComponent,
        AssetPropertiesComponent,
        AssetPropertiesItemComponent]; }, imports: function () { return [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWFzc2V0cy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3N1Yi1hc3NldHMvc3ViLWFzc2V0cy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFnQixNQUFNLHFCQUFxQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDOUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDakcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOztBQUNqRixXQTJCZ0I7QUFDaEIsSUFBUTtBQUNSLFFBQVUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxLQUFLO0FBQ3BDLFFBQVUsSUFBSSxFQUFFLFdBQVc7QUFDM0IsUUFBVSxRQUFRLEVBQUUsSUFBSTtBQUN4QixRQUFVLElBQUksRUFBRSxnQkFBZ0I7QUFDaEMsUUFBVSxLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNyQyxRQUFVLFNBQVMsRUFBRSxrQkFBa0I7QUFDdkMsUUFBVSxTQUFTLEVBQUUsV0FBVztBQUNoQyxLQUFTO0FBQ1QsSUFBUTtBQUNSLFFBQVUsSUFBSSxFQUFFLE9BQU87QUFDdkIsUUFBVSxTQUFTLEVBQUUsZUFBZTtBQUNwQyxLQUFTO0FBQ1QsQ0FBTztBQU1QLE1BQU0sT0FBTyxlQUFlO0FBQUc7MkNBOUM5QixRQUFRLFNBQUMsa0JBQ1IsWUFBWSxFQUFFO2FBQ1osa0JBQWtCLHNCQUNsQixzQkFBc0I7UUFDdEIsOEJBQThCLHNCQUM5QixlQUFlOztXQUNmLGtCQUFrQjtrQkFDbEI7a0JBQTBCOztLQUMxQjtFQUFzQixzQkFDdEIsc0JBQXNCLHNCQUN0QjtXQUEyQixzQkFDM0Isd0JBQXdCLHNCQUN4Qiw0QkFBNEI7Y0FDN0I7UUFDRCxPQUFPO0FBQUUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUU7YUFBYyxFQUFFLGFBQWEsQ0FBQztPQUN0RSxlQUFlLEVBQUU7RUFDZixrQkFBa0Isc0JBQ2xCO29CQUE4QjtLQUM5QixlQUFlO0VBQ2YsMEJBQTBCO0VBQzFCLHNCQUFzQixrQkFDdkI7Z0JBQ0QsT0FBTyxFQUFFLEVBQUU7Q0FDWCxTQUFTLEVBQUUsc0JBQ1Q7V0FDRSxPQUFPLEVBQUUsVUFBVTtVQUNuQixRQUFRLElBY1AsMEJBQ0Q7SUFBSyxFQUFFLElBQUk7YUFDWixzQkFDRCxnQkFBZ0Isa0JBQ2pCLGNBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tKQUNJO0FBQUM7QUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBnZXR0ZXh0LCBIT09LX1JPVVRFLCBWaWV3Q29udGV4dCwgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBQb3BvdmVyTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3BvdmVyJztcbmltcG9ydCB7IEFkZEdyb3VwTW9kdWxlIH0gZnJvbSAnLi9hZGQtZ3JvdXAvYWRkLWdyb3VwLm1vZHVsZSc7XG5pbXBvcnQgeyBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZWxldGVBc3NldHNNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vZGVsZXRlLWFzc2V0cy1tb2RhbC9kZWxldGUtYXNzZXRzLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHcm91cEluZm9Db21wb25lbnQgfSBmcm9tICcuL2dyb3VwLWluZm8uY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3Vwc0NvbXBvbmVudCB9IGZyb20gJy4vZ3JvdXBzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJBc3NldHNHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9zdWItYXNzZXRzLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IFN1YkFzc2V0c0NvbXBvbmVudCB9IGZyb20gJy4vc3ViLWFzc2V0cy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3ViQXNzZXRzU2VydmljZSB9IGZyb20gJy4vc3ViLWFzc2V0cy5zZXJ2aWNlJztcbmltcG9ydCB7IFVuYXNzaWduTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3VuYXNzaWduLWFzc2V0cy1tb2RhbC91bmFzc2lnbi1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXNzaWduRGV2aWNlc0NvbXBvbmVudCB9IGZyb20gJy4vYXNzaWduLWRldmljZXMvYXNzaWduLWRldmljZXMuY29tcG9uZW50JztcbmltcG9ydCB7IEFzc2lnbkNoaWxkRGV2aWNlc0NvbXBvbmVudCB9IGZyb20gJy4vYXNzaWduLWRldmljZXMvYXNzaWduLWNoaWxkLWRldmljZXMuY29tcG9uZW50JztcbmltcG9ydCB7IEFzc2V0UHJvcGVydGllc0NvbXBvbmVudCB9IGZyb20gJy4vYXNzZXQtcHJvcGVydGllcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXNzZXRQcm9wZXJ0aWVzSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vYXNzZXQtcHJvcGVydGllcy1pdGVtLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFN1YkFzc2V0c0NvbXBvbmVudCxcbiAgICBTdWJBc3NldHNHcmlkQ29tcG9uZW50LFxuICAgIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cHNDb21wb25lbnQsXG4gICAgR3JvdXBJbmZvQ29tcG9uZW50LFxuICAgIERlbGV0ZUFzc2V0c01vZGFsQ29tcG9uZW50LFxuICAgIFVuYXNzaWduTW9kYWxDb21wb25lbnQsXG4gICAgQXNzaWduRGV2aWNlc0NvbXBvbmVudCxcbiAgICBBc3NpZ25DaGlsZERldmljZXNDb21wb25lbnQsXG4gICAgQXNzZXRQcm9wZXJ0aWVzQ29tcG9uZW50LFxuICAgIEFzc2V0UHJvcGVydGllc0l0ZW1Db21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIERldmljZUdyaWRNb2R1bGUsIEFkZEdyb3VwTW9kdWxlLCBQb3BvdmVyTW9kdWxlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgU3ViQXNzZXRzQ29tcG9uZW50LFxuICAgIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cHNDb21wb25lbnQsXG4gICAgRGVsZXRlQXNzZXRzTW9kYWxDb21wb25lbnQsXG4gICAgVW5hc3NpZ25Nb2RhbENvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5Hcm91cCxcbiAgICAgICAgICBwYXRoOiAnc3ViYXNzZXRzJyxcbiAgICAgICAgICBwcmlvcml0eTogMTAwMCxcbiAgICAgICAgICBpY29uOiAnYzh5LWdyb3VwLW9wZW4nLFxuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdTdWJhc3NldHMnKSxcbiAgICAgICAgICBjb21wb25lbnQ6IFN1YkFzc2V0c0NvbXBvbmVudCxcbiAgICAgICAgICBmZWF0dXJlSWQ6ICdzdWJhc3NldHMnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXRoOiAnZ3JvdXAnLFxuICAgICAgICAgIGNvbXBvbmVudDogR3JvdXBzQ29tcG9uZW50XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAgU3ViQXNzZXRzU2VydmljZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFN1YkFzc2V0c01vZHVsZSB7fVxuIl19