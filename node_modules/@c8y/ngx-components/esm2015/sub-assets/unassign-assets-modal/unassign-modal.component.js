import { __awaiter } from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { GainsightService, gettext, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '@c8y/ngx-components';

const _c0 = ["modalRef"];
export class UnassignModalComponent {
    constructor(translateService, gainsightService) {
        this.translateService = translateService;
        this.gainsightService = gainsightService;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Unassign'), cancel: gettext('Cancel') };
        this.title = gettext('Unassign asset');
        this.status = Status.WARNING;
    }
    ngOnInit() {
        this.message = this.translateService.instant(gettext('You are about to unassign asset "{{name}}". Do you want to proceed?'), { name: this.asset.name });
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalRef.result;
                this.onClose();
            }
            catch (error) {
                this.onDismiss();
            }
        });
    }
    onClose() {
        this.gainsightService.triggerEvent('unassignAssetModal:AssetUnassigned');
        this.closeSubject.next(true);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.gainsightService.triggerEvent('unassignAssetModal:Cancel');
        this.closeSubject.complete();
    }
}
UnassignModalComponent.ɵfac = function UnassignModalComponent_Factory(t) { return new (t || UnassignModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.GainsightService)); };
UnassignModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UnassignModalComponent, selectors: [["c8y-unassign-modal"]], viewQuery: function UnassignModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalRef = _t.first);
    } }, inputs: { asset: "asset" }, decls: 5, vars: 6, consts: [[3, "title", "status", "labels"], ["modalRef", ""]], template: function UnassignModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-confirm-modal", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("status", ctx.status)("labels", ctx.labels);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, ctx.message));
    } }, directives: [ɵngcc2.ConfirmModalComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
UnassignModalComponent.ctorParameters = () => [
    { type: TranslateService },
    { type: GainsightService }
];
UnassignModalComponent.propDecorators = {
    asset: [{ type: Input }],
    modalRef: [{ type: ViewChild, args: ['modalRef', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UnassignModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-unassign-modal',
                template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc1.TranslateService }, { type: ɵngcc2.GainsightService }]; }, { asset: [{
            type: Input
        }], modalRef: [{
            type: ViewChild,
            args: ['modalRef', { static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hc3NpZ24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zdWItYXNzZXRzL3VuYXNzaWduLWFzc2V0cy1tb2RhbC91bmFzc2lnbi1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBRUwsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFFUCxNQUFNLEVBRVAsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFNL0IsTUFBTSxPQUFPLHNCQUFzQjtBQUNuQyxJQVFFLFlBQ1UsZ0JBQWtDLEVBQ2xDLGdCQUFrQztBQUMzQyxRQUZTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQzlDLFFBUkUsaUJBQVksR0FBcUIsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUNqRCxRQUFFLFdBQU0sR0FBZ0IsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUMvRSxRQUFFLFVBQUssR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwQyxRQUFFLFdBQU0sR0FBZSxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3RDLElBS0UsQ0FBQztBQUNILElBQ0UsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUMxQyxPQUFPLENBQUMscUVBQXFFLENBQUMsRUFDOUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FDMUIsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ1EsZUFBZTtBQUN2QjtBQUVrQixZQUZkLElBQUk7QUFDUixnQkFBTSxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQ2pDLGdCQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQixhQUFLO0FBQUMsWUFBQSxPQUFPLEtBQUssRUFBRTtBQUNwQixnQkFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDdkIsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFLE9BQU87QUFDVCxRQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUM3RSxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNqQyxJQUFFLENBQUM7QUFDSCxJQUNFLFNBQVM7QUFDWCxRQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUNwRSxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDakMsSUFBRSxDQUFDO0FBQ0g7a0RBN0NDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsb0JBQW9CLGtCQUM5Qjs2RUFBOEMsY0FDL0M7Ozs7Ozs7Ozs7Ozs7Ozs7MkdBQ0k7QUFBQztBQUNVLFlBUlAsZ0JBQWdCO0FBQUksWUFOM0IsZ0JBQWdCO0FBQ2pCO0FBQUc7QUFHTSxvQkFVUCxLQUFLO0FBQUssdUJBQ1YsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFBTTs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQ29uZmlybU1vZGFsQ29tcG9uZW50LFxuICBHYWluc2lnaHRTZXJ2aWNlLFxuICBnZXR0ZXh0LFxuICBNb2RhbExhYmVscyxcbiAgU3RhdHVzLFxuICBTdGF0dXNUeXBlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdW5hc3NpZ24tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFVuYXNzaWduTW9kYWxDb21wb25lbnQge1xuICBASW5wdXQoKSBhc3NldDogSU1hbmFnZWRPYmplY3Q7XG4gIEBWaWV3Q2hpbGQoJ21vZGFsUmVmJywgeyBzdGF0aWM6IGZhbHNlIH0pIG1vZGFsUmVmOiBDb25maXJtTW9kYWxDb21wb25lbnQ7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgY2xvc2VTdWJqZWN0OiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcbiAgbGFiZWxzOiBNb2RhbExhYmVscyA9IHsgb2s6IGdldHRleHQoJ1VuYXNzaWduJyksIGNhbmNlbDogZ2V0dGV4dCgnQ2FuY2VsJykgfTtcbiAgdGl0bGUgPSBnZXR0ZXh0KCdVbmFzc2lnbiBhc3NldCcpO1xuICBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuV0FSTklORztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBnYWluc2lnaHRTZXJ2aWNlOiBHYWluc2lnaHRTZXJ2aWNlXG4gICkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICBnZXR0ZXh0KCdZb3UgYXJlIGFib3V0IHRvIHVuYXNzaWduIGFzc2V0IFwie3tuYW1lfX1cIi4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD8nKSxcbiAgICAgIHsgbmFtZTogdGhpcy5hc3NldC5uYW1lIH1cbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsUmVmLnJlc3VsdDtcbiAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRGlzbWlzcygpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xvc2UoKSB7XG4gICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnRyaWdnZXJFdmVudCgndW5hc3NpZ25Bc3NldE1vZGFsOkFzc2V0VW5hc3NpZ25lZCcpO1xuICAgIHRoaXMuY2xvc2VTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgdGhpcy5jbG9zZVN1YmplY3QuY29tcGxldGUoKTtcbiAgfVxuXG4gIG9uRGlzbWlzcygpIHtcbiAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UudHJpZ2dlckV2ZW50KCd1bmFzc2lnbkFzc2V0TW9kYWw6Q2FuY2VsJyk7XG4gICAgdGhpcy5jbG9zZVN1YmplY3QuY29tcGxldGUoKTtcbiAgfVxufVxuIl19