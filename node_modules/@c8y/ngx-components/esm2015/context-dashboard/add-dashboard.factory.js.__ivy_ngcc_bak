import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ContextRouteService, Permissions, ViewContext } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AddDashboardComponent } from './add-dashboard.component';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardDetailComponent } from './dashboard-detail.component';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "./context-dashboard.service";
import * as i3 from "ngx-bootstrap/modal";
export class AddDashboardFactory {
    constructor(permissions, contextDashboardService, bsModal, contextRoute) {
        this.permissions = permissions;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.contextRoute = contextRoute;
    }
    get(activatedRoute) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.currentContext = this.contextRoute.getContextData(activatedRoute);
            if ([ViewContext.Device, ViewContext.Group].includes((_a = this.currentContext) === null || _a === void 0 ? void 0 : _a.context) &&
                (yield this.hasPermission(this.currentContext.contextData))) {
                return [
                    {
                        label: 'Add dashboard',
                        component: AddDashboardComponent,
                        priority: -Infinity
                    }
                ];
            }
            return [];
        });
    }
    addDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            let initialState;
            if (this.currentContext.context === ViewContext.Device) {
                initialState = {
                    deviceType: this.currentContext.contextData.type
                };
            }
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardCfg = yield modal.result;
                const dashboardMO = yield this.contextDashboardService.create(dashboardCfg, this.currentContext);
                yield this.contextDashboardService.navigateToDashboard(dashboardMO);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    hasPermission(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context === null || context === void 0 ? void 0 : context.id) {
                return yield this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context);
            }
            return (this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']));
        });
    }
}
AddDashboardFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function AddDashboardFactory_Factory() { return new AddDashboardFactory(i0.ɵɵinject(i1.Permissions), i0.ɵɵinject(i2.ContextDashboardService), i0.ɵɵinject(i3.BsModalService), i0.ɵɵinject(i1.ContextRouteService)); }, token: AddDashboardFactory, providedIn: "root" });
AddDashboardFactory.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AddDashboardFactory.ctorParameters = () => [
    { type: Permissions },
    { type: ContextDashboardService },
    { type: BsModalService },
    { type: ContextRouteService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWRhc2hib2FyZC5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29udGV4dC1kYXNoYm9hcmQvYWRkLWRhc2hib2FyZC5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFFTCxtQkFBbUIsRUFFbkIsV0FBVyxFQUVYLFdBQVcsRUFDWixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7Ozs7QUFLeEUsTUFBTSxPQUFPLG1CQUFtQjtJQUc5QixZQUNVLFdBQXdCLEVBQ3hCLHVCQUFnRCxFQUNoRCxPQUF1QixFQUN2QixZQUFpQztRQUhqQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4Qiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQ3ZCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtJQUN4QyxDQUFDO0lBRUUsR0FBRyxDQUFDLGNBQStCOzs7WUFDdkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN2RSxJQUNFLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQUEsSUFBSSxDQUFDLGNBQWMsMENBQUUsT0FBTyxDQUFDO2dCQUM5RSxDQUFDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQzNEO2dCQUNBLE9BQU87b0JBQ0w7d0JBQ0UsS0FBSyxFQUFFLGVBQWU7d0JBQ3RCLFNBQVMsRUFBRSxxQkFBcUI7d0JBQ2hDLFFBQVEsRUFBRSxDQUFDLFFBQVE7cUJBQ3BCO2lCQUNGLENBQUM7YUFDSDtZQUNELE9BQU8sRUFBRSxDQUFDOztLQUNYO0lBRUssWUFBWTs7WUFDaEIsSUFBSSxZQUFvQyxDQUFDO1lBRXpDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDLE1BQU0sRUFBRTtnQkFDdEQsWUFBWSxHQUFHO29CQUNiLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJO2lCQUNqRCxDQUFDO2FBQ0g7WUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtnQkFDeEQsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLFlBQVk7Z0JBQ1osbUJBQW1CLEVBQUUsSUFBSTthQUMxQixDQUFDLENBQUMsT0FBbUMsQ0FBQztZQUN2QyxJQUFJO2dCQUNGLE1BQU0sWUFBWSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQztnQkFDeEMsTUFBTSxXQUFXLEdBQWtDLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FDMUYsWUFBWSxFQUNaLElBQUksQ0FBQyxjQUFjLENBQ3BCLENBQUM7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3BFLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNmO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsaUJBQWlCO2FBQ2xCO1FBQ0gsQ0FBQztLQUFBO0lBRWEsYUFBYSxDQUFDLE9BQW9COztZQUM5QyxJQUFJLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxFQUFFLEVBQUU7Z0JBQ2YsT0FBTyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUNuQyxDQUFDLHNCQUFzQixFQUFFLHVCQUF1QixDQUFDLEVBQ2pELE9BQU8sQ0FDUixDQUFDO2FBQ0g7WUFDRCxPQUFPLENBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLENBQy9FLENBQUM7UUFDSixDQUFDO0tBQUE7Ozs7WUFuRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFaQyxXQUFXO1lBT0osdUJBQXVCO1lBSHZCLGNBQWM7WUFOckIsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSUlkZW50aWZpZWQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQge1xuICBDb250ZXh0RGF0YSxcbiAgQ29udGV4dFJvdXRlU2VydmljZSxcbiAgRXh0ZW5zaW9uRmFjdG9yeSxcbiAgUGVybWlzc2lvbnMsXG4gIFRhYixcbiAgVmlld0NvbnRleHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgQWRkRGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9hZGQtZGFzaGJvYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdCB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQubW9kZWwnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi9kYXNoYm9hcmQtZGV0YWlsLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFkZERhc2hib2FyZEZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PFRhYj4ge1xuICBjdXJyZW50Q29udGV4dDogQ29udGV4dERhdGE7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBwZXJtaXNzaW9uczogUGVybWlzc2lvbnMsXG4gICAgcHJpdmF0ZSBjb250ZXh0RGFzaGJvYXJkU2VydmljZTogQ29udGV4dERhc2hib2FyZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBic01vZGFsOiBCc01vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIGNvbnRleHRSb3V0ZTogQ29udGV4dFJvdXRlU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgZ2V0KGFjdGl2YXRlZFJvdXRlPzogQWN0aXZhdGVkUm91dGUpOiBQcm9taXNlPFRhYiB8IFRhYltdPiB7XG4gICAgdGhpcy5jdXJyZW50Q29udGV4dCA9IHRoaXMuY29udGV4dFJvdXRlLmdldENvbnRleHREYXRhKGFjdGl2YXRlZFJvdXRlKTtcbiAgICBpZiAoXG4gICAgICBbVmlld0NvbnRleHQuRGV2aWNlLCBWaWV3Q29udGV4dC5Hcm91cF0uaW5jbHVkZXModGhpcy5jdXJyZW50Q29udGV4dD8uY29udGV4dCkgJiZcbiAgICAgIChhd2FpdCB0aGlzLmhhc1Blcm1pc3Npb24odGhpcy5jdXJyZW50Q29udGV4dC5jb250ZXh0RGF0YSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6ICdBZGQgZGFzaGJvYXJkJyxcbiAgICAgICAgICBjb21wb25lbnQ6IEFkZERhc2hib2FyZENvbXBvbmVudCxcbiAgICAgICAgICBwcmlvcml0eTogLUluZmluaXR5XG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGFzeW5jIGFkZERhc2hib2FyZCgpIHtcbiAgICBsZXQgaW5pdGlhbFN0YXRlOiB7IGRldmljZVR5cGU6IHN0cmluZyB9O1xuXG4gICAgaWYgKHRoaXMuY3VycmVudENvbnRleHQuY29udGV4dCA9PT0gVmlld0NvbnRleHQuRGV2aWNlKSB7XG4gICAgICBpbml0aWFsU3RhdGUgPSB7XG4gICAgICAgIGRldmljZVR5cGU6IHRoaXMuY3VycmVudENvbnRleHQuY29udGV4dERhdGEudHlwZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RhbCA9IHRoaXMuYnNNb2RhbC5zaG93KERhc2hib2FyZERldGFpbENvbXBvbmVudCwge1xuICAgICAgY2xhc3M6ICdtb2RhbC1sZycsXG4gICAgICBpbml0aWFsU3RhdGUsXG4gICAgICBpZ25vcmVCYWNrZHJvcENsaWNrOiB0cnVlXG4gICAgfSkuY29udGVudCBhcyBEYXNoYm9hcmREZXRhaWxDb21wb25lbnQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhc2hib2FyZENmZyA9IGF3YWl0IG1vZGFsLnJlc3VsdDtcbiAgICAgIGNvbnN0IGRhc2hib2FyZE1POiBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdCA9IGF3YWl0IHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UuY3JlYXRlKFxuICAgICAgICBkYXNoYm9hcmRDZmcsXG4gICAgICAgIHRoaXMuY3VycmVudENvbnRleHRcbiAgICAgICk7XG4gICAgICBhd2FpdCB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLm5hdmlnYXRlVG9EYXNoYm9hcmQoZGFzaGJvYXJkTU8pO1xuICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gaW50ZW5kZWQgZW1wdHlcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhc1Blcm1pc3Npb24oY29udGV4dDogSUlkZW50aWZpZWQpIHtcbiAgICBpZiAoY29udGV4dD8uaWQpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBlcm1pc3Npb25zLmNhbkVkaXQoXG4gICAgICAgIFsnUk9MRV9JTlZFTlRPUllfQURNSU4nLCAnUk9MRV9JTlZFTlRPUllfQ1JFQVRFJ10sXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnBlcm1pc3Npb25zLmhhc0FueVJvbGUoWydST0xFX0lOVkVOVE9SWV9BRE1JTicsICdST0xFX0lOVkVOVE9SWV9DUkVBVEUnXSlcbiAgICApO1xuICB9XG59XG4iXX0=