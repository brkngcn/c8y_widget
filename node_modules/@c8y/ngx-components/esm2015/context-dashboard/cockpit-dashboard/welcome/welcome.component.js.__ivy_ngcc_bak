import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { gettext, DocsService, NavigatorService } from '@c8y/ngx-components';
import { Router } from '@angular/router';
import { TenantService, ApplicationService } from '@c8y/client';
export class WelcomeToCockpit {
    constructor(tenantService, docs, router, navigator, applicationService) {
        this.tenantService = tenantService;
        this.docs = docs;
        this.router = router;
        this.navigator = navigator;
        this.applicationService = applicationService;
        this.quickLinks = [];
        this.CONFIGURATION_NODE = 'Configuration';
        this.TRIAL = 'TRIAL';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.tenantType = yield this.tenantService.currentTenantType();
            this.setMessage();
            this.navSubscription = this.navigator.items$.subscribe(nodes => {
                this.navNodes = nodes;
                this.configurationNode = nodes.find((node) => node.label === this.CONFIGURATION_NODE);
            });
            this.docsSubscription = this.docs.items$.subscribe(links => {
                this.links = links;
            });
            // <---TRIAL & REGULAR TENANT --->
            this.createConnectSmartphoneQuickLink();
            yield this.createQuicklinkRegisterDevice();
            // <--- TRIAL TENANT --->
            if (this.tenantType === this.TRIAL) {
                this.createQuicklinkUserGuide();
                return;
            }
            // <--- REGULAR TENANT --->
            this.createQuicklinkAddGroup();
            this.createQuickLinkReports();
            this.createQuickLinkExports();
            this.createQuicklinkSmartRules();
        });
    }
    ngOnDestroy() {
        if (this.docsSubscription && !this.docsSubscription.closed) {
            this.docsSubscription.unsubscribe();
        }
        if (this.navSubscription && !this.navSubscription.closed) {
            this.navSubscription.unsubscribe();
        }
    }
    setMessage() {
        if (this.tenantType === this.TRIAL) {
            this.welcomeMessage = gettext(`
        The Cockpit application allows you to build IoT applications in minutes.
        To get started, connect any device to the platform.
        If you do not have an IoT device to hand, you can start by connecting your smartphone.
        Click below to be guided through the process.
      `);
        }
        else {
            this.welcomeMessage = gettext(`
        The Cockpit application provides you with options to manage
        and monitor Internet of Things assets and data from business perspective.
      `);
        }
    }
    createQuicklinkAddGroup() {
        // comes from angularJS factory c8yQuickLinks
        const addGroup = this.links.find(link => link.label === 'Add group');
        if (addGroup) {
            this.quickLinks.push(addGroup);
        }
    }
    createConnectSmartphoneQuickLink() {
        // Provider in SensorPhoneModule defines the
        // 'Connect smartphone' quicklink.
        const connectSmartphone = this.links.find(link => link.label === 'Connect smartphone');
        if (connectSmartphone) {
            this.quickLinks.push(connectSmartphone);
        }
    }
    createQuickLinkReports() {
        const label = gettext('Reports');
        const reports = {
            icon: 'th',
            label,
            url: '/reports'
        };
        const reportsNode = this.findNavigatorNode(label, this.navNodes);
        if (reportsNode) {
            reports.click = () => {
                reportsNode.open = true;
                this.router.navigateByUrl(reports.url);
            };
            this.quickLinks.push(reports);
        }
    }
    createQuickLinkExports() {
        const label = gettext('Exports');
        const exports = {
            icon: 'c8y-reports',
            label,
            url: '/export'
        };
        if (this.isConfigChildNodeShown(label)) {
            exports.click = () => {
                this.configurationNode.open = true;
                this.router.navigateByUrl(exports.url);
            };
            this.quickLinks.push(exports);
        }
    }
    createQuicklinkSmartRules() {
        const label = gettext('Smart rules');
        const smartRules = {
            icon: 'c8y-smart-rules',
            label,
            url: '/rules'
        };
        if (this.isConfigChildNodeShown('Global smart rules')) {
            smartRules.click = () => {
                this.configurationNode.open = true;
                this.router.navigateByUrl(smartRules.url);
            };
            this.quickLinks.push(smartRules);
        }
    }
    createQuicklinkRegisterDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser(undefined, { pageSize: 2000 });
            if (data) {
                const deviceManagement = data.find(app => app.contextPath === 'devicemanagement');
                if (deviceManagement) {
                    const deviceMgmtUrl = this.applicationService.getHref(deviceManagement);
                    const registerDevice = {
                        icon: 'c8y-device-connect',
                        label: gettext('Register device'),
                        click: () => window.open(`${deviceMgmtUrl}/#/deviceregistration`, '_self')
                    };
                    this.quickLinks.push(registerDevice);
                }
            }
        });
    }
    createQuicklinkUserGuide() {
        const userGuide = {
            icon: 'c8y-user',
            label: gettext('User guide'),
            url: '/users-guide/getting-started',
            click: () => {
                const userGuideURL = this.docs.getUserGuideLink(userGuide.url);
                window.open(userGuideURL);
            }
        };
        this.quickLinks.push(userGuide);
    }
    isConfigChildNodeShown(nodeName) {
        if (this.configurationNode && this.configurationNode.show) {
            const navNode = this.findNavigatorNode(nodeName, this.configurationNode.children);
            return !!navNode && navNode.show;
        }
        return false;
    }
    findNavigatorNode(nodeName, navNodes) {
        if (navNodes && navNodes.length > 0) {
            return navNodes.find((node) => node.label === nodeName);
        }
        return undefined;
    }
}
WelcomeToCockpit.decorators = [
    { type: Component, args: [{
                selector: 'c8y-welcome-to-cockpit',
                template: "<div class=\"welcome-widget welcome-cockpit\">\n  <div class=\"flex-row\">\n    <div class=\"col-xs-12 col-md-5 flex-item-v-stretch p-24\">\n      <h2 class=\"text-light\">{{ 'Welcome to Cockpit' | translate }}</h2>\n      <p class=\"text-16 text-light p-t-16 p-b-24\">{{ welcomeMessage | translate }}</p>\n      <div class=\"card-group interact-grid tight-grid\">\n        <div *ngFor=\"let link of quickLinks\" class=\"col-sm-4 col-xs-6\">\n          <c8y-quick-link\n            (click)=\"link.click ? link.click() : false\"\n            [icon]=\"link.icon\"\n            [label]=\"link.label\"\n            class=\"card\"\n            c8yProductExperience\n            [actionName]=\"'welcomeWidgetClicked'\"\n            [actionData]=\"{ link: link.label }\"\n          >\n          </c8y-quick-link>\n        </div>\n      </div>\n    </div>\n    <!-- <div class=\"col-sm-6 welcome-illustration flex-item-v-stretch\"></div> -->\n  </div>\n</div>\n"
            },] }
];
WelcomeToCockpit.ctorParameters = () => [
    { type: TenantService },
    { type: DocsService },
    { type: Router },
    { type: NavigatorService },
    { type: ApplicationService }
];
WelcomeToCockpit.propDecorators = {
    config: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VsY29tZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9jb2NrcGl0LWRhc2hib2FyZC93ZWxjb21lL3dlbGNvbWUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUNMLE9BQU8sRUFDUCxXQUFXLEVBRVgsZ0JBQWdCLEVBRWpCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQWdCLE1BQU0sYUFBYSxDQUFDO0FBTTlFLE1BQU0sT0FBTyxnQkFBZ0I7SUFjM0IsWUFDVSxhQUE0QixFQUM1QixJQUFpQixFQUNqQixNQUFjLEVBQ2QsU0FBMkIsRUFDM0Isa0JBQXNDO1FBSnRDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFoQmhELGVBQVUsR0FBRyxFQUFFLENBQUM7UUFFQyx1QkFBa0IsR0FBVyxlQUFlLENBQUM7UUFDN0MsVUFBSyxHQUFXLE9BQU8sQ0FBQztJQWN0QyxDQUFDO0lBRUUsUUFBUTs7WUFDWixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQy9ELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDN0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQzdGLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDekQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDckIsQ0FBQyxDQUFDLENBQUM7WUFFSCxrQ0FBa0M7WUFDbEMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7WUFDeEMsTUFBTSxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztZQUUzQyx5QkFBeUI7WUFDekIsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO2dCQUNoQyxPQUFPO2FBQ1I7WUFFRCwyQkFBMkI7WUFDM0IsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7UUFDbkMsQ0FBQztLQUFBO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtZQUMxRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDckM7UUFFRCxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUN4RCxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVPLFVBQVU7UUFDaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7Ozs7O09BSzdCLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQzs7O09BRzdCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVPLHVCQUF1QjtRQUM3Qiw2Q0FBNkM7UUFDN0MsTUFBTSxRQUFRLEdBQXFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsQ0FBQztRQUN2RixJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVPLGdDQUFnQztRQUN0Qyw0Q0FBNEM7UUFDNUMsa0NBQWtDO1FBQ2xDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLG9CQUFvQixDQUFDLENBQUM7UUFDdkYsSUFBSSxpQkFBaUIsRUFBRTtZQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQztJQUVPLHNCQUFzQjtRQUM1QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsTUFBTSxPQUFPLEdBQXFCO1lBQ2hDLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSztZQUNMLEdBQUcsRUFBRSxVQUFVO1NBQ2hCLENBQUM7UUFDRixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqRSxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFO2dCQUNuQixXQUFXLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pDLENBQUMsQ0FBQztZQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVPLHNCQUFzQjtRQUM1QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsTUFBTSxPQUFPLEdBQXFCO1lBQ2hDLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUs7WUFDTCxHQUFHLEVBQUUsU0FBUztTQUNmLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QyxPQUFPLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QyxDQUFDLENBQUM7WUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFTyx5QkFBeUI7UUFDL0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sVUFBVSxHQUFxQjtZQUNuQyxJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLEtBQUs7WUFDTCxHQUFHLEVBQUUsUUFBUTtTQUNkLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQ3JELFVBQVUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFO2dCQUN0QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLENBQUMsQ0FBQztZQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVhLDZCQUE2Qjs7WUFDekMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN6RixJQUFJLElBQUksRUFBRTtnQkFDUixNQUFNLGdCQUFnQixHQUFpQixJQUFJLENBQUMsSUFBSSxDQUM5QyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEtBQUssa0JBQWtCLENBQzlDLENBQUM7Z0JBQ0YsSUFBSSxnQkFBZ0IsRUFBRTtvQkFDcEIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUN4RSxNQUFNLGNBQWMsR0FBcUI7d0JBQ3ZDLElBQUksRUFBRSxvQkFBb0I7d0JBQzFCLEtBQUssRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUM7d0JBQ2pDLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsYUFBYSx1QkFBdUIsRUFBRSxPQUFPLENBQUM7cUJBQzNFLENBQUM7b0JBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQ3RDO2FBQ0Y7UUFDSCxDQUFDO0tBQUE7SUFFTyx3QkFBd0I7UUFDOUIsTUFBTSxTQUFTLEdBQXFCO1lBQ2xDLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDO1lBQzVCLEdBQUcsRUFBRSw4QkFBOEI7WUFDbkMsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDVixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQVcsQ0FBQztnQkFDekUsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QixDQUFDO1NBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxRQUFRO1FBQ3JDLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUU7WUFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEYsT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUM7U0FDbEM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxRQUFnQixFQUFFLFFBQXlCO1FBQ25FLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25DLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxRQUFRLENBQVEsQ0FBQztTQUNyRTtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7OztZQS9MRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMscThCQUF1QzthQUN4Qzs7O1lBTFEsYUFBYTtZQVBwQixXQUFXO1lBS0osTUFBTTtZQUhiLGdCQUFnQjtZQUtNLGtCQUFrQjs7O3FCQU92QyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGdldHRleHQsXG4gIERvY3NTZXJ2aWNlLFxuICBEb2NMaW5rLFxuICBOYXZpZ2F0b3JTZXJ2aWNlLFxuICBOYXZpZ2F0b3JOb2RlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVGVuYW50U2VydmljZSwgQXBwbGljYXRpb25TZXJ2aWNlLCBJQXBwbGljYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS13ZWxjb21lLXRvLWNvY2twaXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vd2VsY29tZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgV2VsY29tZVRvQ29ja3BpdCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgY29uZmlnO1xuICB3ZWxjb21lTWVzc2FnZTtcbiAgcXVpY2tMaW5rcyA9IFtdO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgQ09ORklHVVJBVElPTl9OT0RFOiBzdHJpbmcgPSAnQ29uZmlndXJhdGlvbic7XG4gIHByaXZhdGUgcmVhZG9ubHkgVFJJQUw6IHN0cmluZyA9ICdUUklBTCc7XG4gIHByaXZhdGUgdGVuYW50VHlwZTogc3RyaW5nO1xuICBwcml2YXRlIG5hdk5vZGVzOiBOYXZpZ2F0b3JOb2RlW107XG4gIHByaXZhdGUgY29uZmlndXJhdGlvbk5vZGU6IGFueTtcbiAgcHJpdmF0ZSBsaW5rczogRG9jTGlua1tdO1xuICBwcml2YXRlIGRvY3NTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBuYXZTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbmFudFNlcnZpY2U6IFRlbmFudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkb2NzOiBEb2NzU2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgbmF2aWdhdG9yOiBOYXZpZ2F0b3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXBwbGljYXRpb25TZXJ2aWNlOiBBcHBsaWNhdGlvblNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIHRoaXMudGVuYW50VHlwZSA9IGF3YWl0IHRoaXMudGVuYW50U2VydmljZS5jdXJyZW50VGVuYW50VHlwZSgpO1xuICAgIHRoaXMuc2V0TWVzc2FnZSgpO1xuICAgIHRoaXMubmF2U3Vic2NyaXB0aW9uID0gdGhpcy5uYXZpZ2F0b3IuaXRlbXMkLnN1YnNjcmliZShub2RlcyA9PiB7XG4gICAgICB0aGlzLm5hdk5vZGVzID0gbm9kZXM7XG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb25Ob2RlID0gbm9kZXMuZmluZCgobm9kZTogYW55KSA9PiBub2RlLmxhYmVsID09PSB0aGlzLkNPTkZJR1VSQVRJT05fTk9ERSk7XG4gICAgfSk7XG4gICAgdGhpcy5kb2NzU3Vic2NyaXB0aW9uID0gdGhpcy5kb2NzLml0ZW1zJC5zdWJzY3JpYmUobGlua3MgPT4ge1xuICAgICAgdGhpcy5saW5rcyA9IGxpbmtzO1xuICAgIH0pO1xuXG4gICAgLy8gPC0tLVRSSUFMICYgUkVHVUxBUiBURU5BTlQgLS0tPlxuICAgIHRoaXMuY3JlYXRlQ29ubmVjdFNtYXJ0cGhvbmVRdWlja0xpbmsoKTtcbiAgICBhd2FpdCB0aGlzLmNyZWF0ZVF1aWNrbGlua1JlZ2lzdGVyRGV2aWNlKCk7XG5cbiAgICAvLyA8LS0tIFRSSUFMIFRFTkFOVCAtLS0+XG4gICAgaWYgKHRoaXMudGVuYW50VHlwZSA9PT0gdGhpcy5UUklBTCkge1xuICAgICAgdGhpcy5jcmVhdGVRdWlja2xpbmtVc2VyR3VpZGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyA8LS0tIFJFR1VMQVIgVEVOQU5UIC0tLT5cbiAgICB0aGlzLmNyZWF0ZVF1aWNrbGlua0FkZEdyb3VwKCk7XG4gICAgdGhpcy5jcmVhdGVRdWlja0xpbmtSZXBvcnRzKCk7XG4gICAgdGhpcy5jcmVhdGVRdWlja0xpbmtFeHBvcnRzKCk7XG4gICAgdGhpcy5jcmVhdGVRdWlja2xpbmtTbWFydFJ1bGVzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kb2NzU3Vic2NyaXB0aW9uICYmICF0aGlzLmRvY3NTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICB0aGlzLmRvY3NTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uYXZTdWJzY3JpcHRpb24gJiYgIXRoaXMubmF2U3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgdGhpcy5uYXZTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldE1lc3NhZ2UoKSB7XG4gICAgaWYgKHRoaXMudGVuYW50VHlwZSA9PT0gdGhpcy5UUklBTCkge1xuICAgICAgdGhpcy53ZWxjb21lTWVzc2FnZSA9IGdldHRleHQoYFxuICAgICAgICBUaGUgQ29ja3BpdCBhcHBsaWNhdGlvbiBhbGxvd3MgeW91IHRvIGJ1aWxkIElvVCBhcHBsaWNhdGlvbnMgaW4gbWludXRlcy5cbiAgICAgICAgVG8gZ2V0IHN0YXJ0ZWQsIGNvbm5lY3QgYW55IGRldmljZSB0byB0aGUgcGxhdGZvcm0uXG4gICAgICAgIElmIHlvdSBkbyBub3QgaGF2ZSBhbiBJb1QgZGV2aWNlIHRvIGhhbmQsIHlvdSBjYW4gc3RhcnQgYnkgY29ubmVjdGluZyB5b3VyIHNtYXJ0cGhvbmUuXG4gICAgICAgIENsaWNrIGJlbG93IHRvIGJlIGd1aWRlZCB0aHJvdWdoIHRoZSBwcm9jZXNzLlxuICAgICAgYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2VsY29tZU1lc3NhZ2UgPSBnZXR0ZXh0KGBcbiAgICAgICAgVGhlIENvY2twaXQgYXBwbGljYXRpb24gcHJvdmlkZXMgeW91IHdpdGggb3B0aW9ucyB0byBtYW5hZ2VcbiAgICAgICAgYW5kIG1vbml0b3IgSW50ZXJuZXQgb2YgVGhpbmdzIGFzc2V0cyBhbmQgZGF0YSBmcm9tIGJ1c2luZXNzIHBlcnNwZWN0aXZlLlxuICAgICAgYCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVRdWlja2xpbmtBZGRHcm91cCgpIHtcbiAgICAvLyBjb21lcyBmcm9tIGFuZ3VsYXJKUyBmYWN0b3J5IGM4eVF1aWNrTGlua3NcbiAgICBjb25zdCBhZGRHcm91cDogUGFydGlhbDxEb2NMaW5rPiA9IHRoaXMubGlua3MuZmluZChsaW5rID0+IGxpbmsubGFiZWwgPT09ICdBZGQgZ3JvdXAnKTtcbiAgICBpZiAoYWRkR3JvdXApIHtcbiAgICAgIHRoaXMucXVpY2tMaW5rcy5wdXNoKGFkZEdyb3VwKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUNvbm5lY3RTbWFydHBob25lUXVpY2tMaW5rKCkge1xuICAgIC8vIFByb3ZpZGVyIGluIFNlbnNvclBob25lTW9kdWxlIGRlZmluZXMgdGhlXG4gICAgLy8gJ0Nvbm5lY3Qgc21hcnRwaG9uZScgcXVpY2tsaW5rLlxuICAgIGNvbnN0IGNvbm5lY3RTbWFydHBob25lID0gdGhpcy5saW5rcy5maW5kKGxpbmsgPT4gbGluay5sYWJlbCA9PT0gJ0Nvbm5lY3Qgc21hcnRwaG9uZScpO1xuICAgIGlmIChjb25uZWN0U21hcnRwaG9uZSkge1xuICAgICAgdGhpcy5xdWlja0xpbmtzLnB1c2goY29ubmVjdFNtYXJ0cGhvbmUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUXVpY2tMaW5rUmVwb3J0cygpIHtcbiAgICBjb25zdCBsYWJlbCA9IGdldHRleHQoJ1JlcG9ydHMnKTtcbiAgICBjb25zdCByZXBvcnRzOiBQYXJ0aWFsPERvY0xpbms+ID0ge1xuICAgICAgaWNvbjogJ3RoJyxcbiAgICAgIGxhYmVsLFxuICAgICAgdXJsOiAnL3JlcG9ydHMnXG4gICAgfTtcbiAgICBjb25zdCByZXBvcnRzTm9kZSA9IHRoaXMuZmluZE5hdmlnYXRvck5vZGUobGFiZWwsIHRoaXMubmF2Tm9kZXMpO1xuICAgIGlmIChyZXBvcnRzTm9kZSkge1xuICAgICAgcmVwb3J0cy5jbGljayA9ICgpID0+IHtcbiAgICAgICAgcmVwb3J0c05vZGUub3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwocmVwb3J0cy51cmwpO1xuICAgICAgfTtcbiAgICAgIHRoaXMucXVpY2tMaW5rcy5wdXNoKHJlcG9ydHMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUXVpY2tMaW5rRXhwb3J0cygpIHtcbiAgICBjb25zdCBsYWJlbCA9IGdldHRleHQoJ0V4cG9ydHMnKTtcbiAgICBjb25zdCBleHBvcnRzOiBQYXJ0aWFsPERvY0xpbms+ID0ge1xuICAgICAgaWNvbjogJ2M4eS1yZXBvcnRzJyxcbiAgICAgIGxhYmVsLFxuICAgICAgdXJsOiAnL2V4cG9ydCdcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuaXNDb25maWdDaGlsZE5vZGVTaG93bihsYWJlbCkpIHtcbiAgICAgIGV4cG9ydHMuY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvbk5vZGUub3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoZXhwb3J0cy51cmwpO1xuICAgICAgfTtcbiAgICAgIHRoaXMucXVpY2tMaW5rcy5wdXNoKGV4cG9ydHMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUXVpY2tsaW5rU21hcnRSdWxlcygpIHtcbiAgICBjb25zdCBsYWJlbCA9IGdldHRleHQoJ1NtYXJ0IHJ1bGVzJyk7XG4gICAgY29uc3Qgc21hcnRSdWxlczogUGFydGlhbDxEb2NMaW5rPiA9IHtcbiAgICAgIGljb246ICdjOHktc21hcnQtcnVsZXMnLFxuICAgICAgbGFiZWwsXG4gICAgICB1cmw6ICcvcnVsZXMnXG4gICAgfTtcbiAgICBpZiAodGhpcy5pc0NvbmZpZ0NoaWxkTm9kZVNob3duKCdHbG9iYWwgc21hcnQgcnVsZXMnKSkge1xuICAgICAgc21hcnRSdWxlcy5jbGljayA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uTm9kZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybChzbWFydFJ1bGVzLnVybCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5xdWlja0xpbmtzLnB1c2goc21hcnRSdWxlcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVRdWlja2xpbmtSZWdpc3RlckRldmljZSgpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBwbGljYXRpb25TZXJ2aWNlLmxpc3RCeVVzZXIodW5kZWZpbmVkLCB7IHBhZ2VTaXplOiAyMDAwIH0pO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBjb25zdCBkZXZpY2VNYW5hZ2VtZW50OiBJQXBwbGljYXRpb24gPSBkYXRhLmZpbmQoXG4gICAgICAgIGFwcCA9PiBhcHAuY29udGV4dFBhdGggPT09ICdkZXZpY2VtYW5hZ2VtZW50J1xuICAgICAgKTtcbiAgICAgIGlmIChkZXZpY2VNYW5hZ2VtZW50KSB7XG4gICAgICAgIGNvbnN0IGRldmljZU1nbXRVcmwgPSB0aGlzLmFwcGxpY2F0aW9uU2VydmljZS5nZXRIcmVmKGRldmljZU1hbmFnZW1lbnQpO1xuICAgICAgICBjb25zdCByZWdpc3RlckRldmljZTogUGFydGlhbDxEb2NMaW5rPiA9IHtcbiAgICAgICAgICBpY29uOiAnYzh5LWRldmljZS1jb25uZWN0JyxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnUmVnaXN0ZXIgZGV2aWNlJyksXG4gICAgICAgICAgY2xpY2s6ICgpID0+IHdpbmRvdy5vcGVuKGAke2RldmljZU1nbXRVcmx9LyMvZGV2aWNlcmVnaXN0cmF0aW9uYCwgJ19zZWxmJylcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5xdWlja0xpbmtzLnB1c2gocmVnaXN0ZXJEZXZpY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUXVpY2tsaW5rVXNlckd1aWRlKCkge1xuICAgIGNvbnN0IHVzZXJHdWlkZTogUGFydGlhbDxEb2NMaW5rPiA9IHtcbiAgICAgIGljb246ICdjOHktdXNlcicsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnVXNlciBndWlkZScpLFxuICAgICAgdXJsOiAnL3VzZXJzLWd1aWRlL2dldHRpbmctc3RhcnRlZCcsXG4gICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyR3VpZGVVUkwgPSB0aGlzLmRvY3MuZ2V0VXNlckd1aWRlTGluayh1c2VyR3VpZGUudXJsKSBhcyBzdHJpbmc7XG4gICAgICAgIHdpbmRvdy5vcGVuKHVzZXJHdWlkZVVSTCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnF1aWNrTGlua3MucHVzaCh1c2VyR3VpZGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0NvbmZpZ0NoaWxkTm9kZVNob3duKG5vZGVOYW1lKSB7XG4gICAgaWYgKHRoaXMuY29uZmlndXJhdGlvbk5vZGUgJiYgdGhpcy5jb25maWd1cmF0aW9uTm9kZS5zaG93KSB7XG4gICAgICBjb25zdCBuYXZOb2RlID0gdGhpcy5maW5kTmF2aWdhdG9yTm9kZShub2RlTmFtZSwgdGhpcy5jb25maWd1cmF0aW9uTm9kZS5jaGlsZHJlbik7XG4gICAgICByZXR1cm4gISFuYXZOb2RlICYmIG5hdk5vZGUuc2hvdztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kTmF2aWdhdG9yTm9kZShub2RlTmFtZTogc3RyaW5nLCBuYXZOb2RlczogTmF2aWdhdG9yTm9kZVtdKSB7XG4gICAgaWYgKG5hdk5vZGVzICYmIG5hdk5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBuYXZOb2Rlcy5maW5kKChub2RlOiBhbnkpID0+IG5vZGUubGFiZWwgPT09IG5vZGVOYW1lKSBhcyBhbnk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==