import { NgModule } from '@angular/core';
import { CoreModule, HOOK_ACTION_BAR, HOOK_ROUTE, ViewContext, HOOK_TABS } from '@c8y/ngx-components';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { AddDashboardComponent } from './add-dashboard.component';
import { AddDashboardFactory } from './add-dashboard.factory';
import { AppearanceSettingsComponent } from './appearance-settings.component';
import { ContextDashboardComponent } from './context-dashboard.component';
import { CONTEXT_DASHBOARD_CONFIG } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardActionBarFactory } from './dashboard-action-bar.factory';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { DeviceDashboardGuard } from './device-dashboard.guard';
import { GroupDashboardGuard } from './group-dashboard.guard';
import { PasteDashboardActionComponent } from './paste-dashboard-action.component';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetPreviewComponent } from './widget-preview.component';
import { WidgetService } from './widget.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/dropdown';
const defaultConfig = {
    allowFullscreen: true,
    widgetFilter({ data }) {
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
const ɵ0 = defaultConfig;
export class ContextDashboardModule {
    static config(config = {}) {
        return {
            ngModule: ContextDashboardModule,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config)
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                {
                    provide: HOOK_ROUTE,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config).routes,
                    multi: true
                },
                {
                    provide: HOOK_TABS,
                    useExisting: AddDashboardFactory,
                    multi: true
                },
                {
                    provide: HOOK_ACTION_BAR,
                    useClass: DashboardActionBarFactory,
                    multi: true
                }
            ]
        };
    }
}
ContextDashboardModule.ɵfac = function ContextDashboardModule_Factory(t) { return new (t || ContextDashboardModule)(); };
ContextDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ContextDashboardModule });
ContextDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        WidgetService,
        {
            provide: CONTEXT_DASHBOARD_CONFIG,
            useValue: ɵ0
        }
    ], imports: [[
            CoreModule,
            TooltipModule,
            PopoverModule,
            AssetSelectorModule,
            BsDropdownModule.forRoot()
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    AppearanceSettingsComponent,
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    WidgetPreviewComponent,
                    DashboardDetailComponent,
                    AddDashboardComponent,
                    PasteDashboardActionComponent
                ],
                imports: [
                    CoreModule,
                    TooltipModule,
                    PopoverModule,
                    AssetSelectorModule,
                    BsDropdownModule.forRoot()
                ],
                exports: [ContextDashboardComponent, WidgetConfigComponent],
                entryComponents: [
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    DashboardDetailComponent,
                    PasteDashboardActionComponent
                ],
                providers: [
                    WidgetService,
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: ɵ0
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContextDashboardModule, { declarations: function () { return [AppearanceSettingsComponent,
        ContextDashboardComponent,
        WidgetConfigComponent,
        WidgetPreviewComponent,
        DashboardDetailComponent,
        AddDashboardComponent,
        PasteDashboardActionComponent]; }, imports: function () { return [CoreModule,
        TooltipModule,
        PopoverModule,
        AssetSelectorModule, ɵngcc1.BsDropdownModule]; }, exports: function () { return [ContextDashboardComponent, WidgetConfigComponent]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,