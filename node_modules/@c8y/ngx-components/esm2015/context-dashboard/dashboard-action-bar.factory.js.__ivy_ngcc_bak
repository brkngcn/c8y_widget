import { Injectable } from '@angular/core';
import { ViewContext } from '@c8y/ngx-components';
import { ContextDashboardService } from './context-dashboard.service';
import { PasteDashboardActionComponent } from './paste-dashboard-action.component';
import * as i0 from "@angular/core";
import * as i1 from "./context-dashboard.service";
export class DashboardActionBarFactory {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    get(activeRoute) {
        const actions = [];
        const data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        const { contextData } = data;
        const canPaste = contextData &&
            [ViewContext.Device, ViewContext.Group].includes(data.context) &&
            this.contextDashboardService.copyClipboard;
        if (canPaste) {
            actions.push({
                priority: -10,
                placement: 'more',
                template: PasteDashboardActionComponent
            });
        }
        return actions;
    }
}
DashboardActionBarFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function DashboardActionBarFactory_Factory() { return new DashboardActionBarFactory(i0.ɵɵinject(i1.ContextDashboardService)); }, token: DashboardActionBarFactory, providedIn: "root" });
DashboardActionBarFactory.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DashboardActionBarFactory.ctorParameters = () => [
    { type: ContextDashboardService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbi1iYXIuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL2Rhc2hib2FyZC1hY3Rpb24tYmFyLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsV0FBVyxFQUFtQyxNQUFNLHFCQUFxQixDQUFDO0FBRW5GLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7QUFLbkYsTUFBTSxPQUFPLHlCQUF5QjtJQUVwQyxZQUFvQix1QkFBZ0Q7UUFBaEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUFHLENBQUM7SUFDeEUsR0FBRyxDQUFDLFdBQTJCO1FBQzdCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixNQUFNLElBQUksR0FDUixDQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTztZQUN0RCxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJO1lBQzNCLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkMsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUM3QixNQUFNLFFBQVEsR0FDWixXQUFXO1lBQ1gsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM5RCxJQUFJLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBRTdDLElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxRQUFRLEVBQUUsQ0FBQyxFQUFFO2dCQUNiLFNBQVMsRUFBRSxNQUFNO2dCQUNqQixRQUFRLEVBQUUsNkJBQTZCO2FBQ3ZCLENBQUMsQ0FBQztTQUNyQjtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Ozs7WUEzQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFMUSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBWaWV3Q29udGV4dCwgQWN0aW9uQmFyRmFjdG9yeSwgQWN0aW9uQmFySXRlbSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFzdGVEYXNoYm9hcmRBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3Bhc3RlLWRhc2hib2FyZC1hY3Rpb24uY29tcG9uZW50JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGFzaGJvYXJkQWN0aW9uQmFyRmFjdG9yeSBpbXBsZW1lbnRzIEFjdGlvbkJhckZhY3Rvcnkge1xuICByb3V0ZUNoYW5nZXMkOiBPYnNlcnZhYmxlPGFueT47XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGV4dERhc2hib2FyZFNlcnZpY2U6IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlKSB7fVxuICBnZXQoYWN0aXZlUm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGRhdGEgPVxuICAgICAgIWFjdGl2ZVJvdXRlLnBhcmVudCB8fCBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhLmNvbnRleHRcbiAgICAgICAgPyBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhXG4gICAgICAgIDogYWN0aXZlUm91dGUucGFyZW50LnNuYXBzaG90LmRhdGE7XG4gICAgY29uc3QgeyBjb250ZXh0RGF0YSB9ID0gZGF0YTtcbiAgICBjb25zdCBjYW5QYXN0ZSA9XG4gICAgICBjb250ZXh0RGF0YSAmJlxuICAgICAgW1ZpZXdDb250ZXh0LkRldmljZSwgVmlld0NvbnRleHQuR3JvdXBdLmluY2x1ZGVzKGRhdGEuY29udGV4dCkgJiZcbiAgICAgIHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UuY29weUNsaXBib2FyZDtcblxuICAgIGlmIChjYW5QYXN0ZSkge1xuICAgICAgYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IC0xMCxcbiAgICAgICAgcGxhY2VtZW50OiAnbW9yZScsXG4gICAgICAgIHRlbXBsYXRlOiBQYXN0ZURhc2hib2FyZEFjdGlvbkNvbXBvbmVudFxuICAgICAgfSBhcyBBY3Rpb25CYXJJdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9ucztcbiAgfVxufVxuIl19