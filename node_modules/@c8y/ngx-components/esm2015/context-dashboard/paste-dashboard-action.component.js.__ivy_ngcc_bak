import { __awaiter } from "tslib";
import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { InventoryService } from '@c8y/client';
import { ViewContext } from '@c8y/ngx-components';
import { ContextDashboardService } from './context-dashboard.service';
export class PasteDashboardActionComponent {
    constructor(vcRef, router, contextDashboardService, inventoryService) {
        this.vcRef = vcRef;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.inventoryService = inventoryService;
        this.dashboardName = '';
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templatePaste);
        const clipboard = this.contextDashboardService.copyClipboard;
        if (clipboard) {
            this.dashboardName = clipboard.dashboard.name;
        }
    }
    pasteDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            let context;
            const currentUrl = this.router.url;
            const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
            const isGroup = new RegExp(/group\/\d+/).test(currentUrl);
            const id = currentUrl.match(/\d+/)[0];
            if (isDevice) {
                context = {
                    context: ViewContext.Device,
                    contextData: yield this.getContextMo(id)
                };
            }
            else if (isGroup) {
                context = {
                    context: ViewContext.Group,
                    contextData: yield this.getContextMo(id)
                };
            }
            this.contextDashboardService.pasteDashboard(context);
        });
    }
    getContextMo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.inventoryService.detail(id)).data;
        });
    }
}
PasteDashboardActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-paste-dashboard-action',
                template: `
    <ng-template #templatePaste>
      <li>
        <button title="{{ 'Paste dashboard' | translate }}" (click)="pasteDashboard()">
          <i class="m-r-4" c8yIcon="clipboard"></i><span translate>Paste dashboard</span>&nbsp;<span
            >"{{ dashboardName }}"</span
          >
        </button>
      </li>
    </ng-template>
  `
            },] }
];
PasteDashboardActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router },
    { type: ContextDashboardService },
    { type: InventoryService }
];
PasteDashboardActionComponent.propDecorators = {
    templatePaste: [{ type: ViewChild, args: ['templatePaste', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzdGUtZGFzaGJvYXJkLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9wYXN0ZS1kYXNoYm9hcmQtYWN0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQWtCLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQWdCdEUsTUFBTSxPQUFPLDZCQUE2QjtJQUl4QyxZQUNVLEtBQXVCLEVBQ3ZCLE1BQWMsRUFDZCx1QkFBZ0QsRUFDaEQsZ0JBQWtDO1FBSGxDLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFONUMsa0JBQWEsR0FBRyxFQUFFLENBQUM7SUFPaEIsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNsRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDO1FBQzdELElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztTQUMvQztJQUNILENBQUM7SUFFSyxjQUFjOztZQUNsQixJQUFJLE9BQXlCLENBQUM7WUFDOUIsTUFBTSxVQUFVLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0MsTUFBTSxRQUFRLEdBQVksSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sT0FBTyxHQUFZLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuRSxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXRDLElBQUksUUFBUSxFQUFFO2dCQUNaLE9BQU8sR0FBRztvQkFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07b0JBQzNCLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2lCQUN6QyxDQUFDO2FBQ0g7aUJBQU0sSUFBSSxPQUFPLEVBQUU7Z0JBQ2xCLE9BQU8sR0FBRztvQkFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLEtBQUs7b0JBQzFCLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2lCQUN6QyxDQUFDO2FBQ0g7WUFDRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELENBQUM7S0FBQTtJQUVhLFlBQVksQ0FBQyxFQUFVOztZQUNuQyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZELENBQUM7S0FBQTs7O1lBeERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNEJBQTRCO2dCQUN0QyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7R0FVVDthQUNGOzs7WUFwQm1ELGdCQUFnQjtZQUMzRCxNQUFNO1lBSU4sdUJBQXVCO1lBSFAsZ0JBQWdCOzs7NEJBb0J0QyxTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFZpZXdDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEYXNoYm9hcmRDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5tb2RlbCc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wYXN0ZS1kYXNoYm9hcmQtYWN0aW9uJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctdGVtcGxhdGUgI3RlbXBsYXRlUGFzdGU+XG4gICAgICA8bGk+XG4gICAgICAgIDxidXR0b24gdGl0bGU9XCJ7eyAnUGFzdGUgZGFzaGJvYXJkJyB8IHRyYW5zbGF0ZSB9fVwiIChjbGljayk9XCJwYXN0ZURhc2hib2FyZCgpXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJtLXItNFwiIGM4eUljb249XCJjbGlwYm9hcmRcIj48L2k+PHNwYW4gdHJhbnNsYXRlPlBhc3RlIGRhc2hib2FyZDwvc3Bhbj4mbmJzcDs8c3BhblxuICAgICAgICAgICAgPlwie3sgZGFzaGJvYXJkTmFtZSB9fVwiPC9zcGFuXG4gICAgICAgICAgPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvbGk+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBQYXN0ZURhc2hib2FyZEFjdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUGFzdGUnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgdGVtcGxhdGVQYXN0ZTtcbiAgZGFzaGJvYXJkTmFtZSA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlOiBDb250ZXh0RGFzaGJvYXJkU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmNSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVQYXN0ZSk7XG4gICAgY29uc3QgY2xpcGJvYXJkID0gdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5jb3B5Q2xpcGJvYXJkO1xuICAgIGlmIChjbGlwYm9hcmQpIHtcbiAgICAgIHRoaXMuZGFzaGJvYXJkTmFtZSA9IGNsaXBib2FyZC5kYXNoYm9hcmQubmFtZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwYXN0ZURhc2hib2FyZCgpIHtcbiAgICBsZXQgY29udGV4dDogRGFzaGJvYXJkQ29udGV4dDtcbiAgICBjb25zdCBjdXJyZW50VXJsOiBzdHJpbmcgPSB0aGlzLnJvdXRlci51cmw7XG4gICAgY29uc3QgaXNEZXZpY2U6IGJvb2xlYW4gPSBuZXcgUmVnRXhwKC9kZXZpY2VcXC9cXGQrLykudGVzdChjdXJyZW50VXJsKTtcbiAgICBjb25zdCBpc0dyb3VwOiBib29sZWFuID0gbmV3IFJlZ0V4cCgvZ3JvdXBcXC9cXGQrLykudGVzdChjdXJyZW50VXJsKTtcbiAgICBjb25zdCBpZCA9IGN1cnJlbnRVcmwubWF0Y2goL1xcZCsvKVswXTtcblxuICAgIGlmIChpc0RldmljZSkge1xuICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlLFxuICAgICAgICBjb250ZXh0RGF0YTogYXdhaXQgdGhpcy5nZXRDb250ZXh0TW8oaWQpXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNHcm91cCkge1xuICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuR3JvdXAsXG4gICAgICAgIGNvbnRleHREYXRhOiBhd2FpdCB0aGlzLmdldENvbnRleHRNbyhpZClcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UucGFzdGVEYXNoYm9hcmQoY29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldENvbnRleHRNbyhpZDogc3RyaW5nKTogUHJvbWlzZTxJTWFuYWdlZE9iamVjdD4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChpZCkpLmRhdGE7XG4gIH1cbn1cbiJdfQ==