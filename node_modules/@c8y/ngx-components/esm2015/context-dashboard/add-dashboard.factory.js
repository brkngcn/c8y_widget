import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ContextRouteService, Permissions, ViewContext } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AddDashboardComponent } from './add-dashboard.component';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardDetailComponent } from './dashboard-detail.component';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "./context-dashboard.service";
import * as i3 from "ngx-bootstrap/modal";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from './context-dashboard.service';
import * as ɵngcc3 from 'ngx-bootstrap/modal';
export class AddDashboardFactory {
    constructor(permissions, contextDashboardService, bsModal, contextRoute) {
        this.permissions = permissions;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.contextRoute = contextRoute;
    }
    get(activatedRoute) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.currentContext = this.contextRoute.getContextData(activatedRoute);
            if ([ViewContext.Device, ViewContext.Group].includes((_a = this.currentContext) === null || _a === void 0 ? void 0 : _a.context) &&
                (yield this.hasPermission(this.currentContext.contextData))) {
                return [
                    {
                        label: 'Add dashboard',
                        component: AddDashboardComponent,
                        priority: -Infinity
                    }
                ];
            }
            return [];
        });
    }
    addDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            let initialState;
            if (this.currentContext.context === ViewContext.Device) {
                initialState = {
                    deviceType: this.currentContext.contextData.type
                };
            }
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardCfg = yield modal.result;
                const dashboardMO = yield this.contextDashboardService.create(dashboardCfg, this.currentContext);
                yield this.contextDashboardService.navigateToDashboard(dashboardMO);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    hasPermission(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context === null || context === void 0 ? void 0 : context.id) {
                return yield this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context);
            }
            return (this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']));
        });
    }
}
AddDashboardFactory.ɵfac = function AddDashboardFactory_Factory(t) { return new (t || AddDashboardFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Permissions), ɵngcc0.ɵɵinject(ɵngcc2.ContextDashboardService), ɵngcc0.ɵɵinject(ɵngcc3.BsModalService), ɵngcc0.ɵɵinject(ɵngcc1.ContextRouteService)); };
AddDashboardFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function AddDashboardFactory_Factory() { return new AddDashboardFactory(i0.ɵɵinject(i1.Permissions), i0.ɵɵinject(i2.ContextDashboardService), i0.ɵɵinject(i3.BsModalService), i0.ɵɵinject(i1.ContextRouteService)); }, token: AddDashboardFactory, providedIn: "root" });
AddDashboardFactory.ctorParameters = () => [
    { type: Permissions },
    { type: ContextDashboardService },
    { type: BsModalService },
    { type: ContextRouteService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddDashboardFactory, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Permissions }, { type: ɵngcc2.ContextDashboardService }, { type: ɵngcc3.BsModalService }, { type: ɵngcc1.ContextRouteService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWRhc2hib2FyZC5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9hZGQtZGFzaGJvYXJkLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUVMLG1CQUFtQixFQUVuQixXQUFXLEVBRVgsV0FBVyxFQUNaLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFO0FBR0M7QUFDd0M7QUFDakI7Ozs7O0FBRHhCLE1BQU0sT0FBTyxtQkFBbUI7QUFBRyxJQUdqQyxZQUNVLFdBQXdCLEVBQ3hCLHVCQUFnRCxFQUNoRCxPQUF1QixFQUN2QixZQUFpQztBQUMxQyxRQUpTLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0FBQUMsUUFDekIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtBQUFDLFFBQ2pELFlBQU8sR0FBUCxPQUFPLENBQWdCO0FBQUMsUUFDeEIsaUJBQVksR0FBWixZQUFZLENBQXFCO0FBQzdDLElBQUssQ0FBQztBQUNOLElBQ1EsR0FBRyxDQUFDLGNBQStCO0FBQUk7QUFBZ0I7QUFDUCxZQUFwRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzNFLFlBQUksSUFDRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFBLElBQUksQ0FBQyxjQUFjLDBDQUFFLE9BQU8sQ0FBQztBQUNwRixnQkFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQzNEO0FBQ04sZ0JBQU0sT0FBTztBQUNiLG9CQUFRO0FBQ1Isd0JBQVUsS0FBSyxFQUFFLGVBQWU7QUFDaEMsd0JBQVUsU0FBUyxFQUFFLHFCQUFxQjtBQUMxQyx3QkFBVSxRQUFRLEVBQUUsQ0FBQyxRQUFRO0FBQzdCLHFCQUFTO0FBQ1QsaUJBQU8sQ0FBQztBQUNSLGFBQUs7QUFDTCxZQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ2Q7QUFFTyxLQUZKO0FBQ0gsSUFDUSxZQUFZO0FBQ3BCO0FBRWUsWUFGWCxJQUFJLFlBQW9DLENBQUM7QUFDN0MsWUFDSSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQyxNQUFNLEVBQUU7QUFDNUQsZ0JBQU0sWUFBWSxHQUFHO0FBQ3JCLG9CQUFRLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJO0FBQ3hELGlCQUFPLENBQUM7QUFDUixhQUFLO0FBQ0wsWUFDSSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtBQUM5RCxnQkFBTSxLQUFLLEVBQUUsVUFBVTtBQUN2QixnQkFBTSxZQUFZO0FBQ2xCLGdCQUFNLG1CQUFtQixFQUFFLElBQUk7QUFDL0IsYUFBSyxDQUFDLENBQUMsT0FBbUMsQ0FBQztBQUMzQyxZQUFJLElBQUk7QUFDUixnQkFBTSxNQUFNLFlBQVksR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDOUMsZ0JBQU0sTUFBTSxXQUFXLEdBQWtDLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FDMUYsWUFBWSxFQUNaLElBQUksQ0FBQyxjQUFjLENBQ3BCLENBQUM7QUFDUixnQkFBTSxNQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxRSxnQkFBTSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDcEIsYUFBSztBQUFDLFlBQUEsT0FBTyxFQUFFLEVBQUU7QUFDakIsZ0JBQU0saUJBQWlCO0FBQ3ZCLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDZ0IsYUFBYSxDQUFDLE9BQW9CO0FBQ2xEO0FBQ3VDLFlBRG5DLElBQUksT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLEVBQUUsRUFBRTtBQUNyQixnQkFBTSxPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQ25DLENBQUMsc0JBQXNCLEVBQUUsdUJBQXVCLENBQUMsRUFDakQsT0FBTyxDQUNSLENBQUM7QUFDUixhQUFLO0FBQ0wsWUFBSSxPQUFPLENBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLENBQy9FLENBQUM7QUFDTixRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7eVJBQUM7QUFDRCxzVUFsRUs7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFHdUMsWUFiakQsV0FBVztZQVdYLFVBQVUsRUFBRSxNQUFNLDlCQVZsQixZQU1PLHVCQUF1QjtLQUsvQixMQUxtQyxZQUgzQixjQUFjO0FBQUksWUFOekIsbUJBQW1CO0FBQ3BCOzs7Ozs7NkxBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IElJZGVudGlmaWVkIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQ29udGV4dERhdGEsXG4gIENvbnRleHRSb3V0ZVNlcnZpY2UsXG4gIEV4dGVuc2lvbkZhY3RvcnksXG4gIFBlcm1pc3Npb25zLFxuICBUYWIsXG4gIFZpZXdDb250ZXh0XG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IEFkZERhc2hib2FyZENvbXBvbmVudCB9IGZyb20gJy4vYWRkLWRhc2hib2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QgfSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLm1vZGVsJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IERhc2hib2FyZERldGFpbENvbXBvbmVudCB9IGZyb20gJy4vZGFzaGJvYXJkLWRldGFpbC5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBZGREYXNoYm9hcmRGYWN0b3J5IGltcGxlbWVudHMgRXh0ZW5zaW9uRmFjdG9yeTxUYWI+IHtcbiAgY3VycmVudENvbnRleHQ6IENvbnRleHREYXRhO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zLFxuICAgIHByaXZhdGUgY29udGV4dERhc2hib2FyZFNlcnZpY2U6IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgYnNNb2RhbDogQnNNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb250ZXh0Um91dGU6IENvbnRleHRSb3V0ZVNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIGdldChhY3RpdmF0ZWRSb3V0ZT86IEFjdGl2YXRlZFJvdXRlKTogUHJvbWlzZTxUYWIgfCBUYWJbXT4ge1xuICAgIHRoaXMuY3VycmVudENvbnRleHQgPSB0aGlzLmNvbnRleHRSb3V0ZS5nZXRDb250ZXh0RGF0YShhY3RpdmF0ZWRSb3V0ZSk7XG4gICAgaWYgKFxuICAgICAgW1ZpZXdDb250ZXh0LkRldmljZSwgVmlld0NvbnRleHQuR3JvdXBdLmluY2x1ZGVzKHRoaXMuY3VycmVudENvbnRleHQ/LmNvbnRleHQpICYmXG4gICAgICAoYXdhaXQgdGhpcy5oYXNQZXJtaXNzaW9uKHRoaXMuY3VycmVudENvbnRleHQuY29udGV4dERhdGEpKVxuICAgICkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiAnQWRkIGRhc2hib2FyZCcsXG4gICAgICAgICAgY29tcG9uZW50OiBBZGREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgICAgICAgcHJpb3JpdHk6IC1JbmZpbml0eVxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBhc3luYyBhZGREYXNoYm9hcmQoKSB7XG4gICAgbGV0IGluaXRpYWxTdGF0ZTogeyBkZXZpY2VUeXBlOiBzdHJpbmcgfTtcblxuICAgIGlmICh0aGlzLmN1cnJlbnRDb250ZXh0LmNvbnRleHQgPT09IFZpZXdDb250ZXh0LkRldmljZSkge1xuICAgICAgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICBkZXZpY2VUeXBlOiB0aGlzLmN1cnJlbnRDb250ZXh0LmNvbnRleHREYXRhLnR5cGVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgbW9kYWwgPSB0aGlzLmJzTW9kYWwuc2hvdyhEYXNoYm9hcmREZXRhaWxDb21wb25lbnQsIHtcbiAgICAgIGNsYXNzOiAnbW9kYWwtbGcnLFxuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgaWdub3JlQmFja2Ryb3BDbGljazogdHJ1ZVxuICAgIH0pLmNvbnRlbnQgYXMgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXNoYm9hcmRDZmcgPSBhd2FpdCBtb2RhbC5yZXN1bHQ7XG4gICAgICBjb25zdCBkYXNoYm9hcmRNTzogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QgPSBhd2FpdCB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLmNyZWF0ZShcbiAgICAgICAgZGFzaGJvYXJkQ2ZnLFxuICAgICAgICB0aGlzLmN1cnJlbnRDb250ZXh0XG4gICAgICApO1xuICAgICAgYXdhaXQgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5uYXZpZ2F0ZVRvRGFzaGJvYXJkKGRhc2hib2FyZE1PKTtcbiAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIGludGVuZGVkIGVtcHR5XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYXNQZXJtaXNzaW9uKGNvbnRleHQ6IElJZGVudGlmaWVkKSB7XG4gICAgaWYgKGNvbnRleHQ/LmlkKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wZXJtaXNzaW9ucy5jYW5FZGl0KFxuICAgICAgICBbJ1JPTEVfSU5WRU5UT1JZX0FETUlOJywgJ1JPTEVfSU5WRU5UT1JZX0NSRUFURSddLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5wZXJtaXNzaW9ucy5oYXNBbnlSb2xlKFsnUk9MRV9JTlZFTlRPUllfQURNSU4nLCAnUk9MRV9JTlZFTlRPUllfQ1JFQVRFJ10pXG4gICAgKTtcbiAgfVxufVxuIl19