import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { NavigatorNode, NavigatorService, gettext } from '@c8y/ngx-components';
import { ReportDashboardService } from './report-dashboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from './report-dashboard.service';
const REPORTS_NAVIGATOR_NODE_PRIORITY = 40;
export const REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY = 30;
export class ReportDashboardNavigationFactory {
    constructor(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.loaded) {
                this.loaded = true;
                this.navigatorService.add(new NavigatorNode({
                    label: gettext('Reports'),
                    path: 'reports',
                    icon: 'c8y-reports',
                    featureId: 'reports',
                    priority: REPORTS_NAVIGATOR_NODE_PRIORITY
                }));
                const reports = (yield this.reportDashboardService.listReports({
                    filter: { __has: 'c8y_IsNavigatorNode' },
                    pageSize: 2000
                })).data;
                reports.forEach(report => {
                    const node = new NavigatorNode({
                        label: report.name,
                        path: `reports/${report.id}`,
                        icon: report.icon,
                        priority: report.priority,
                        routerLinkExact: false
                    });
                    this.navigatorService.add(node);
                });
            }
        });
    }
}
ReportDashboardNavigationFactory.ɵfac = function ReportDashboardNavigationFactory_Factory(t) { return new (t || ReportDashboardNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc3.ReportDashboardService)); };
ReportDashboardNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardNavigationFactory, factory: ReportDashboardNavigationFactory.ɵfac });
ReportDashboardNavigationFactory.ctorParameters = () => [
    { type: NavigatorService },
    { type: InventoryService },
    { type: ReportDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NavigatorService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc3.ReportDashboardService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL3JlcG9ydC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC1uYXZpZ2F0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFrQixnQkFBZ0IsRUFBZSxNQUFNLGFBQWEsQ0FBQztBQUM1RSxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7OztBQUVwRSxNQUFNLCtCQUErQixHQUFHLEVBQUUsQ0FBQztBQUMzQyxNQUFNLENBQUMsTUFBTSx1Q0FBdUMsR0FBRyxFQUFFLENBQUM7QUFHMUQsTUFBTSxPQUFPLGdDQUFnQztBQUM3QyxJQUVFLFlBQ1UsZ0JBQWtDLEVBQ2xDLGdCQUFrQyxFQUNsQyxzQkFBOEM7QUFDdkQsUUFIUyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFDbkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ25DLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7QUFDMUQsUUFORSxXQUFNLEdBQVksS0FBSyxDQUFDO0FBQzFCLElBS0ssQ0FBQztBQUNOLElBQ1EsR0FBRztBQUNYO0FBR1csWUFIUCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUN0QixnQkFBTSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUN6QixnQkFDTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUN2QixJQUFJLGFBQWEsQ0FBQztBQUMxQixvQkFBVSxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNuQyxvQkFBVSxJQUFJLEVBQUUsU0FBUztBQUN6QixvQkFBVSxJQUFJLEVBQUUsYUFBYTtBQUM3QixvQkFBVSxTQUFTLEVBQUUsU0FBUztBQUM5QixvQkFBVSxRQUFRLEVBQUUsK0JBQStCO0FBQ25ELGlCQUFTLENBQUMsQ0FDSCxDQUFDO0FBQ1IsZ0JBQ00sTUFBTSxPQUFPLEdBQXFCLENBQUMsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDO0FBQ3ZGLG9CQUFRLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBRTtBQUNoRCxvQkFBUSxRQUFRLEVBQUUsSUFBSTtBQUN0QixpQkFBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDZixnQkFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQy9CLG9CQUFRLE1BQU0sSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDO0FBQ3ZDLHdCQUFVLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSTtBQUM1Qix3QkFBVSxJQUFJLEVBQUUsV0FBVyxNQUFNLENBQUMsRUFBRSxFQUFFO0FBQ3RDLHdCQUFVLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtBQUMzQix3QkFBVSxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7QUFDbkMsd0JBQVUsZUFBZSxFQUFFLEtBQUs7QUFDaEMscUJBQVMsQ0FBQyxDQUFDO0FBQ1gsb0JBQVEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxnQkFBTSxDQUFDLENBQUMsQ0FBQztBQUNULGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7NERBeENDLFVBQVU7OEtBQ1Q7QUFBQztBQUNVLFlBUlcsZ0JBQWdCO0FBQUksWUFEbkIsZ0JBQWdCO0FBQUksWUFFcEMsc0JBQXNCO0FBQUc7Ozs2SkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIEludmVudG9yeVNlcnZpY2UsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yU2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vcmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlJztcblxuY29uc3QgUkVQT1JUU19OQVZJR0FUT1JfTk9ERV9QUklPUklUWSA9IDQwO1xuZXhwb3J0IGNvbnN0IFJFUE9SVF9ERUZBVUxUX05BVklHQVRJT05fTk9ERV9QUklPUklUWSA9IDMwO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3Rvcnkge1xuICBsb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5hdmlnYXRvclNlcnZpY2U6IE5hdmlnYXRvclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVwb3J0RGFzaGJvYXJkU2VydmljZTogUmVwb3J0RGFzaGJvYXJkU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgZ2V0KCkge1xuICAgIGlmICghdGhpcy5sb2FkZWQpIHtcbiAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcblxuICAgICAgdGhpcy5uYXZpZ2F0b3JTZXJ2aWNlLmFkZChcbiAgICAgICAgbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdSZXBvcnRzJyksXG4gICAgICAgICAgcGF0aDogJ3JlcG9ydHMnLFxuICAgICAgICAgIGljb246ICdjOHktcmVwb3J0cycsXG4gICAgICAgICAgZmVhdHVyZUlkOiAncmVwb3J0cycsXG4gICAgICAgICAgcHJpb3JpdHk6IFJFUE9SVFNfTkFWSUdBVE9SX05PREVfUFJJT1JJVFlcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydHM6IElNYW5hZ2VkT2JqZWN0W10gPSAoYXdhaXQgdGhpcy5yZXBvcnREYXNoYm9hcmRTZXJ2aWNlLmxpc3RSZXBvcnRzKHtcbiAgICAgICAgZmlsdGVyOiB7IF9faGFzOiAnYzh5X0lzTmF2aWdhdG9yTm9kZScgfSxcbiAgICAgICAgcGFnZVNpemU6IDIwMDBcbiAgICAgIH0pKS5kYXRhO1xuICAgICAgcmVwb3J0cy5mb3JFYWNoKHJlcG9ydCA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgICAgbGFiZWw6IHJlcG9ydC5uYW1lLFxuICAgICAgICAgIHBhdGg6IGByZXBvcnRzLyR7cmVwb3J0LmlkfWAsXG4gICAgICAgICAgaWNvbjogcmVwb3J0Lmljb24sXG4gICAgICAgICAgcHJpb3JpdHk6IHJlcG9ydC5wcmlvcml0eSxcbiAgICAgICAgICByb3V0ZXJMaW5rRXhhY3Q6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hdmlnYXRvclNlcnZpY2UuYWRkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=