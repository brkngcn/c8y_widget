import { Injectable } from '@angular/core';
import { ContextDashboardType } from '../context-dashboard.model';
import { ContextDashboardService } from '../context-dashboard.service';
import { tap } from 'rxjs/operators';
import { from, of } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../context-dashboard.service';
export class ReportDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        const reportId = route.data.contextData && route.data.contextData.id;
        return from(this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Named])).pipe(tap(res => {
            return Array.isArray(res) && res.length === 0
                ? this.createDashboardIfNotExist(reportId)
                : of(true);
        }));
    }
    createDashboardIfNotExist(reportId) {
        const dashboardCfg = {};
        return this.contextDashboardService
            .create(dashboardCfg, undefined, `report_${reportId}`)
            .then(() => true);
    }
}
ReportDashboardGuard.ɵfac = function ReportDashboardGuard_Factory(t) { return new (t || ReportDashboardGuard)(ɵngcc0.ɵɵinject(ɵngcc1.ContextDashboardService)); };
ReportDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardGuard, factory: ReportDashboardGuard.ɵfac });
ReportDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ContextDashboardService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5ndWFyZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29udGV4dC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxJQUFJLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFJNUMsTUFBTSxPQUFPLG9CQUFvQjtBQUNqQyxJQUFFLFlBQW9CLHVCQUFnRDtBQUFJLFFBQXBELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7QUFBQyxJQUFFLENBQUM7QUFDMUUsSUFDRSxXQUFXLENBQUMsS0FBNkI7QUFBSSxRQUMzQyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7QUFDekUsUUFBSSxPQUFPLElBQUksQ0FDVCxJQUFJLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDckYsQ0FBQyxJQUFJLENBQ0osR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ2hCLFlBQVEsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQztBQUNyRCxnQkFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQztBQUNwRCxnQkFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3JCLFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0UseUJBQXlCLENBQUMsUUFBUTtBQUNwQyxRQUFJLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUM1QixRQUFJLE9BQU8sSUFBSSxDQUFDLHVCQUF1QjtBQUN2QyxhQUFPLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLFVBQVUsUUFBUSxFQUFFLENBQUM7QUFDNUQsYUFBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0g7Z0RBdkJDLFVBQVU7MElBQ1Q7QUFBQztBQUNVLFlBUEosdUJBQXVCO0FBQUc7Ozt3RkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkVHlwZSB9IGZyb20gJy4uL2NvbnRleHQtZGFzaGJvYXJkLm1vZGVsJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vY29udGV4dC1kYXNoYm9hcmQuc2VydmljZSc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVGFiIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSZXBvcnREYXNoYm9hcmRHdWFyZCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGV4dERhc2hib2FyZFNlcnZpY2U6IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlKSB7fVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxib29sZWFuIHwgVGFiW10+IHtcbiAgICBjb25zdCByZXBvcnRJZCA9IHJvdXRlLmRhdGEuY29udGV4dERhdGEgJiYgcm91dGUuZGF0YS5jb250ZXh0RGF0YS5pZDtcbiAgICByZXR1cm4gZnJvbShcbiAgICAgIHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UuYWN0aXZhdGVEYXNoYm9hcmRzKHJvdXRlLCBbQ29udGV4dERhc2hib2FyZFR5cGUuTmFtZWRdKVxuICAgICkucGlwZShcbiAgICAgIHRhcChyZXMgPT4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXMpICYmIHJlcy5sZW5ndGggPT09IDBcbiAgICAgICAgICA/IHRoaXMuY3JlYXRlRGFzaGJvYXJkSWZOb3RFeGlzdChyZXBvcnRJZClcbiAgICAgICAgICA6IG9mKHRydWUpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlRGFzaGJvYXJkSWZOb3RFeGlzdChyZXBvcnRJZCkge1xuICAgIGNvbnN0IGRhc2hib2FyZENmZyA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlXG4gICAgICAuY3JlYXRlKGRhc2hib2FyZENmZywgdW5kZWZpbmVkLCBgcmVwb3J0XyR7cmVwb3J0SWR9YClcbiAgICAgIC50aGVuKCgpID0+IHRydWUpO1xuICB9XG59XG4iXX0=