import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { ContextDashboardModule } from '../context-dashboard.module';
import { ContextDashboardComponent } from '../context-dashboard.component';
import { ReportDashboardGuard } from './report-dashboard.guard';
import { ReportDashboardNavigationFactory } from './report-dashboard-navigation.factory';
import { ReportDashboardListComponent } from './report-dashboard-list.component';
import { ReportDashboardService } from './report-dashboard.service';
import { PopoverModule } from 'ngx-bootstrap/popover';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
const ɵ0 = [
    {
        path: 'dashboard/:dashboardId',
        component: ContextDashboardComponent,
        canActivate: [ReportDashboardGuard],
        context: ViewContext.Report
    }
];
export class ReportDashboardModule {
}
ReportDashboardModule.ɵfac = function ReportDashboardModule_Factory(t) { return new (t || ReportDashboardModule)(); };
ReportDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ReportDashboardModule });
ReportDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ReportDashboardGuard,
        ReportDashboardNavigationFactory,
        ReportDashboardService,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: ReportDashboardNavigationFactory,
            multi: true
        }
    ], imports: [[
            CoreModule,
            ContextDashboardModule,
            RouterModule.forChild([
                {
                    path: 'reports',
                    component: ReportDashboardListComponent
                }
            ]),
            PopoverModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [ReportDashboardListComponent],
                entryComponents: [],
                imports: [
                    CoreModule,
                    ContextDashboardModule,
                    RouterModule.forChild([
                        {
                            path: 'reports',
                            component: ReportDashboardListComponent
                        }
                    ]),
                    PopoverModule
                ],
                providers: [
                    ReportDashboardGuard,
                    ReportDashboardNavigationFactory,
                    ReportDashboardService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: ReportDashboardNavigationFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReportDashboardModule, { declarations: function () { return [ReportDashboardListComponent]; }, imports: function () { return [CoreModule,
        ContextDashboardModule, ɵngcc1.RouterModule, PopoverModule]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL3JlcG9ydC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLFVBQVUsRUFDVixvQkFBb0IsRUFDcEIsVUFBVSxFQUNWLFdBQVcsRUFDWixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBQ3RELFdBcUJnQjtBQUNoQixJQUFRO0FBQ1IsUUFBVSxJQUFJLEVBQUUsd0JBQXdCO0FBQ3hDLFFBQVUsU0FBUyxFQUFFLHlCQUF5QjtBQUM5QyxRQUFVLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDO0FBQzdDLFFBQVUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNO0FBQ3JDLEtBQVM7QUFDVCxDQUFPO0FBVVAsTUFBTSxPQUFPLHFCQUFxQjtBQUFHO2lEQXJDcEMsUUFBUSxTQUFDLGtCQUNSLFlBQVksRUFBRSxDQUFDO1FBQTRCLENBQUMsa0JBQzVDLGVBQWUsRUFBRSxFQUFFLGtCQUNuQixPQUFPLEVBQUUsc0JBQ1A7SUFBVSxzQkFDVixzQkFBc0Isc0JBQ3RCO0FBQVksQ0FBQyxRQUFRLENBQUM7TUFDcEIsOEJBQ0UsSUFBSTtBQUFFLFNBQVM7T0FDZjtNQUFTLEVBQUU7R0FBNEI7R0FDeEM7Q0FDRixDQUFDOztHQUNGLGFBQWEsa0JBQ2Q7U0FDRCxTQUFTLEVBQUUsc0JBQ1Q7TUFBb0I7SUFDcEI7O09BQWdDO0tBQ2hDLHNCQUFzQjthQUN0QjtHQUNFLE9BQU8sRUFBRTtJQUFVLDBCQUNuQjtDQUFRLElBT1AsMEJBQ0QsS0FBSyxFQUFFLElBQUk7SUFDWjtRQUNEO2tCQUNFLE9BQU87Q0FBRTtNQUFvQiwwQkFDN0IsUUFBUSxFQUFFLGdDQUFnQywwQkFDMUMsS0FBSyxFQUFFLElBQUk7Z0JBQ1o7VUFDRjtPQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dGQUNJO0FBQUM7QUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgQ29yZU1vZHVsZSxcbiAgSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gIEhPT0tfUk9VVEUsXG4gIFZpZXdDb250ZXh0XG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZE1vZHVsZSB9IGZyb20gJy4uL2NvbnRleHQtZGFzaGJvYXJkLm1vZHVsZSc7XG5cbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICcuLi9jb250ZXh0LWRhc2hib2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkR3VhcmQgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQuZ3VhcmQnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnkgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQtbmF2aWdhdGlvbi5mYWN0b3J5JztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZExpc3RDb21wb25lbnQgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vcmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtSZXBvcnREYXNoYm9hcmRMaXN0Q29tcG9uZW50XSxcbiAgZW50cnlDb21wb25lbnRzOiBbXSxcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgQ29udGV4dERhc2hib2FyZE1vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQoW1xuICAgICAge1xuICAgICAgICBwYXRoOiAncmVwb3J0cycsXG4gICAgICAgIGNvbXBvbmVudDogUmVwb3J0RGFzaGJvYXJkTGlzdENvbXBvbmVudFxuICAgICAgfVxuICAgIF0pLFxuICAgIFBvcG92ZXJNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgUmVwb3J0RGFzaGJvYXJkR3VhcmQsXG4gICAgUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnksXG4gICAgUmVwb3J0RGFzaGJvYXJkU2VydmljZSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdkYXNoYm9hcmQvOmRhc2hib2FyZElkJyxcbiAgICAgICAgICBjb21wb25lbnQ6IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgICAgICAgY2FuQWN0aXZhdGU6IFtSZXBvcnREYXNoYm9hcmRHdWFyZF0sXG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuUmVwb3J0XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBSZXBvcnREYXNoYm9hcmRNb2R1bGUge31cbiJdfQ==