import { Injectable } from '@angular/core';
import { ViewContext } from '@c8y/ngx-components';
import { ContextDashboardService } from './context-dashboard.service';
import { PasteDashboardActionComponent } from './paste-dashboard-action.component';
import * as i0 from "@angular/core";
import * as i1 from "./context-dashboard.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './context-dashboard.service';
export class DashboardActionBarFactory {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    get(activeRoute) {
        const actions = [];
        const data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        const { contextData } = data;
        const canPaste = contextData &&
            [ViewContext.Device, ViewContext.Group].includes(data.context) &&
            this.contextDashboardService.copyClipboard;
        if (canPaste) {
            actions.push({
                priority: -10,
                placement: 'more',
                template: PasteDashboardActionComponent
            });
        }
        return actions;
    }
}
DashboardActionBarFactory.ɵfac = function DashboardActionBarFactory_Factory(t) { return new (t || DashboardActionBarFactory)(ɵngcc0.ɵɵinject(ɵngcc1.ContextDashboardService)); };
DashboardActionBarFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function DashboardActionBarFactory_Factory() { return new DashboardActionBarFactory(i0.ɵɵinject(i1.ContextDashboardService)); }, token: DashboardActionBarFactory, providedIn: "root" });
DashboardActionBarFactory.ctorParameters = () => [
    { type: ContextDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardActionBarFactory, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ContextDashboardService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbi1iYXIuZmFjdG9yeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29udGV4dC1kYXNoYm9hcmQvZGFzaGJvYXJkLWFjdGlvbi1iYXIuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQW1DLE1BQU0scUJBQXFCLENBQUM7QUFFbkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkY7QUFHQzs7O0FBQ0QsTUFBTSxPQUFPLHlCQUF5QjtBQUFHLElBRXZDLFlBQW9CLHVCQUFnRDtBQUFJLFFBQXBELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7QUFBQyxJQUFFLENBQUM7QUFDMUUsSUFBRSxHQUFHLENBQUMsV0FBMkI7QUFDakMsUUFBSSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDdkIsUUFBSSxNQUFNLElBQUksR0FDUixDQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUM5RCxZQUFRLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUk7QUFDbkMsWUFBUSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBQzNDLFFBQUksTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUNqQyxRQUFJLE1BQU0sUUFBUSxHQUNaLFdBQVc7QUFDakIsWUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3BFLFlBQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztBQUNqRCxRQUNJLElBQUksUUFBUSxFQUFFO0FBQ2xCLFlBQU0sT0FBTyxDQUFDLElBQUksQ0FBQztBQUNuQixnQkFBUSxRQUFRLEVBQUUsQ0FBQyxFQUFFO0FBQ3JCLGdCQUFRLFNBQVMsRUFBRSxNQUFNO0FBQ3pCLGdCQUFRLFFBQVEsRUFBRSw2QkFBNkI7QUFDL0MsYUFBd0IsQ0FBQyxDQUFDO0FBQzFCLFNBQUs7QUFDTCxRQUNJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLElBQUUsQ0FBQztBQUNIO2lMQUFDO0FBQ0QsNFBBMUJLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBRzZDLFlBTmhELHVCQUF1QjtDQUk5QixEQUppQztRQUl2QixFQUFFLE1BQU0sY0FDbkI7Ozs7O3dGQUxvQztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVmlld0NvbnRleHQsIEFjdGlvbkJhckZhY3RvcnksIEFjdGlvbkJhckl0ZW0gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IFBhc3RlRGFzaGJvYXJkQWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9wYXN0ZS1kYXNoYm9hcmQtYWN0aW9uLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZEFjdGlvbkJhckZhY3RvcnkgaW1wbGVtZW50cyBBY3Rpb25CYXJGYWN0b3J5IHtcbiAgcm91dGVDaGFuZ2VzJDogT2JzZXJ2YWJsZTxhbnk+O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlOiBDb250ZXh0RGFzaGJvYXJkU2VydmljZSkge31cbiAgZ2V0KGFjdGl2ZVJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBkYXRhID1cbiAgICAgICFhY3RpdmVSb3V0ZS5wYXJlbnQgfHwgYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YS5jb250ZXh0XG4gICAgICAgID8gYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YVxuICAgICAgICA6IGFjdGl2ZVJvdXRlLnBhcmVudC5zbmFwc2hvdC5kYXRhO1xuICAgIGNvbnN0IHsgY29udGV4dERhdGEgfSA9IGRhdGE7XG4gICAgY29uc3QgY2FuUGFzdGUgPVxuICAgICAgY29udGV4dERhdGEgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhkYXRhLmNvbnRleHQpICYmXG4gICAgICB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLmNvcHlDbGlwYm9hcmQ7XG5cbiAgICBpZiAoY2FuUGFzdGUpIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiAtMTAsXG4gICAgICAgIHBsYWNlbWVudDogJ21vcmUnLFxuICAgICAgICB0ZW1wbGF0ZTogUGFzdGVEYXNoYm9hcmRBY3Rpb25Db21wb25lbnRcbiAgICAgIH0gYXMgQWN0aW9uQmFySXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbnM7XG4gIH1cbn1cbiJdfQ==