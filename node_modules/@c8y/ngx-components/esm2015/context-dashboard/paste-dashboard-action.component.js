import { __awaiter } from "tslib";
import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { InventoryService } from '@c8y/client';
import { ViewContext } from '@c8y/ngx-components';
import { ContextDashboardService } from './context-dashboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './context-dashboard.service';
import * as ɵngcc3 from '@c8y/client';
import * as ɵngcc4 from '@c8y/ngx-components';

const _c0 = ["templatePaste"];
function PasteDashboardActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function PasteDashboardActionComponent_ng_template_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.pasteDashboard(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵelementStart(4, "span", 3);
    ɵngcc0.ɵɵtext(5, "Paste dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(6, "\u00A0");
    ɵngcc0.ɵɵelementStart(7, "span");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Paste dashboard"));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1("\"", ctx_r1.dashboardName, "\"");
} }
export class PasteDashboardActionComponent {
    constructor(vcRef, router, contextDashboardService, inventoryService) {
        this.vcRef = vcRef;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.inventoryService = inventoryService;
        this.dashboardName = '';
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templatePaste);
        const clipboard = this.contextDashboardService.copyClipboard;
        if (clipboard) {
            this.dashboardName = clipboard.dashboard.name;
        }
    }
    pasteDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            let context;
            const currentUrl = this.router.url;
            const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
            const isGroup = new RegExp(/group\/\d+/).test(currentUrl);
            const id = currentUrl.match(/\d+/)[0];
            if (isDevice) {
                context = {
                    context: ViewContext.Device,
                    contextData: yield this.getContextMo(id)
                };
            }
            else if (isGroup) {
                context = {
                    context: ViewContext.Group,
                    contextData: yield this.getContextMo(id)
                };
            }
            this.contextDashboardService.pasteDashboard(context);
        });
    }
    getContextMo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.inventoryService.detail(id)).data;
        });
    }
}
PasteDashboardActionComponent.ɵfac = function PasteDashboardActionComponent_Factory(t) { return new (t || PasteDashboardActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.InventoryService)); };
PasteDashboardActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasteDashboardActionComponent, selectors: [["c8y-paste-dashboard-action"]], viewQuery: function PasteDashboardActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templatePaste = _t.first);
    } }, decls: 2, vars: 0, consts: [["templatePaste", ""], [3, "title", "click"], ["c8yIcon", "clipboard", 1, "m-r-4"], ["translate", ""]], template: function PasteDashboardActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PasteDashboardActionComponent_ng_template_0_Template, 9, 4, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc4.IconDirective, ɵngcc4.C8yTranslateDirective], pipes: [ɵngcc4.C8yTranslatePipe], encapsulation: 2 });
PasteDashboardActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router },
    { type: ContextDashboardService },
    { type: InventoryService }
];
PasteDashboardActionComponent.propDecorators = {
    templatePaste: [{ type: ViewChild, args: ['templatePaste', { read: TemplateRef, static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasteDashboardActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-paste-dashboard-action',
                template: `
    <ng-template #templatePaste>
      <li>
        <button title="{{ 'Paste dashboard' | translate }}" (click)="pasteDashboard()">
          <i class="m-r-4" c8yIcon="clipboard"></i><span translate>Paste dashboard</span>&nbsp;<span
            >"{{ dashboardName }}"</span
          >
        </button>
      </li>
    </ng-template>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.Router }, { type: ɵngcc2.ContextDashboardService }, { type: ɵngcc3.InventoryService }]; }, { templatePaste: [{
            type: ViewChild,
            args: ['templatePaste', { read: TemplateRef, static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzdGUtZGFzaGJvYXJkLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL3Bhc3RlLWRhc2hib2FyZC1hY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBa0IsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0J0RSxNQUFNLE9BQU8sNkJBQTZCO0FBQUcsSUFJM0MsWUFDVSxLQUF1QixFQUN2QixNQUFjLEVBQ2QsdUJBQWdELEVBQ2hELGdCQUFrQztBQUMzQyxRQUpTLFVBQUssR0FBTCxLQUFLLENBQWtCO0FBQUMsUUFDeEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2YsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtBQUFDLFFBQ2pELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFDOUMsUUFQRSxrQkFBYSxHQUFHLEVBQUUsQ0FBQztBQUNyQixJQU1LLENBQUM7QUFDTixJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RELFFBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztBQUNqRSxRQUFJLElBQUksU0FBUyxFQUFFO0FBQ25CLFlBQU0sSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztBQUNwRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDUSxjQUFjO0FBQ3RCO0FBQzJCLFlBRHZCLElBQUksT0FBeUIsQ0FBQztBQUNsQyxZQUFJLE1BQU0sVUFBVSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQy9DLFlBQUksTUFBTSxRQUFRLEdBQVksSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pFLFlBQUksTUFBTSxPQUFPLEdBQVksSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3ZFLFlBQUksTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxZQUNJLElBQUksUUFBUSxFQUFFO0FBQ2xCLGdCQUFNLE9BQU8sR0FBRztBQUNoQixvQkFBUSxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07QUFDbkMsb0JBQVEsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7QUFDaEQsaUJBQU8sQ0FBQztBQUNSLGFBQUs7QUFBQyxpQkFBSyxJQUFJLE9BQU8sRUFBRTtBQUN4QixnQkFBTSxPQUFPLEdBQUc7QUFDaEIsb0JBQVEsT0FBTyxFQUFFLFdBQVcsQ0FBQyxLQUFLO0FBQ2xDLG9CQUFRLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO0FBQ2hELGlCQUFPLENBQUM7QUFDUixhQUFLO0FBQ0wsWUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pELFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNnQixZQUFZLENBQUMsRUFBVTtBQUFJO0FBQ04sWUFBakMsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN6RCxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7eURBekRDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsNEJBQTRCLGtCQUN0QyxRQUFRLEVBQUU7NkpBVVQsY0FDRjs7Ozs7OztpSUFDSTtBQUFDO0FBQXVELFlBckJULGdCQUFnQjtBQUFJLFlBQy9ELE1BQU07QUFBSSxZQUlWLHVCQUF1QjtBQUFJLFlBSFgsZ0JBQWdCO0FBQUc7QUFBRztBQUNmLDRCQW1CN0IsU0FBUyxTQUFDLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtBQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFZpZXdDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEYXNoYm9hcmRDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5tb2RlbCc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wYXN0ZS1kYXNoYm9hcmQtYWN0aW9uJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctdGVtcGxhdGUgI3RlbXBsYXRlUGFzdGU+XG4gICAgICA8bGk+XG4gICAgICAgIDxidXR0b24gdGl0bGU9XCJ7eyAnUGFzdGUgZGFzaGJvYXJkJyB8IHRyYW5zbGF0ZSB9fVwiIChjbGljayk9XCJwYXN0ZURhc2hib2FyZCgpXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJtLXItNFwiIGM4eUljb249XCJjbGlwYm9hcmRcIj48L2k+PHNwYW4gdHJhbnNsYXRlPlBhc3RlIGRhc2hib2FyZDwvc3Bhbj4mbmJzcDs8c3BhblxuICAgICAgICAgICAgPlwie3sgZGFzaGJvYXJkTmFtZSB9fVwiPC9zcGFuXG4gICAgICAgICAgPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvbGk+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBQYXN0ZURhc2hib2FyZEFjdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUGFzdGUnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgdGVtcGxhdGVQYXN0ZTtcbiAgZGFzaGJvYXJkTmFtZSA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlOiBDb250ZXh0RGFzaGJvYXJkU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmNSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVQYXN0ZSk7XG4gICAgY29uc3QgY2xpcGJvYXJkID0gdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5jb3B5Q2xpcGJvYXJkO1xuICAgIGlmIChjbGlwYm9hcmQpIHtcbiAgICAgIHRoaXMuZGFzaGJvYXJkTmFtZSA9IGNsaXBib2FyZC5kYXNoYm9hcmQubmFtZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwYXN0ZURhc2hib2FyZCgpIHtcbiAgICBsZXQgY29udGV4dDogRGFzaGJvYXJkQ29udGV4dDtcbiAgICBjb25zdCBjdXJyZW50VXJsOiBzdHJpbmcgPSB0aGlzLnJvdXRlci51cmw7XG4gICAgY29uc3QgaXNEZXZpY2U6IGJvb2xlYW4gPSBuZXcgUmVnRXhwKC9kZXZpY2VcXC9cXGQrLykudGVzdChjdXJyZW50VXJsKTtcbiAgICBjb25zdCBpc0dyb3VwOiBib29sZWFuID0gbmV3IFJlZ0V4cCgvZ3JvdXBcXC9cXGQrLykudGVzdChjdXJyZW50VXJsKTtcbiAgICBjb25zdCBpZCA9IGN1cnJlbnRVcmwubWF0Y2goL1xcZCsvKVswXTtcblxuICAgIGlmIChpc0RldmljZSkge1xuICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlLFxuICAgICAgICBjb250ZXh0RGF0YTogYXdhaXQgdGhpcy5nZXRDb250ZXh0TW8oaWQpXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNHcm91cCkge1xuICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuR3JvdXAsXG4gICAgICAgIGNvbnRleHREYXRhOiBhd2FpdCB0aGlzLmdldENvbnRleHRNbyhpZClcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UucGFzdGVEYXNoYm9hcmQoY29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldENvbnRleHRNbyhpZDogc3RyaW5nKTogUHJvbWlzZTxJTWFuYWdlZE9iamVjdD4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChpZCkpLmRhdGE7XG4gIH1cbn1cbiJdfQ==