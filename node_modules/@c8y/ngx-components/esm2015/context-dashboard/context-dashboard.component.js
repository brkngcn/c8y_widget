import { __awaiter, __rest } from "tslib";
import { Component, HostBinding, Inject, Input, Renderer2 } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ActionBarService, AlertService, DashboardChildChange, GainsightService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { cloneDeep, findIndex, keyBy, omit, values, some, kebabCase, every } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { CONTEXT_DASHBOARD_CONFIG, WIDGET_HEADER_CLASSES } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetService } from './widget.service';
import { InventoryService } from '@c8y/client';
/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './context-dashboard.service';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from './widget.service';
import * as ɵngcc5 from 'ngx-bootstrap/modal';
import * as ɵngcc6 from '@c8y/client';
import * as ɵngcc7 from '@ngx-translate/core';
import * as ɵngcc8 from '@angular/common';

function ContextDashboardComponent_c8y_action_bar_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 2);
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function ContextDashboardComponent_c8y_action_bar_item_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.restore(); });
    ɵngcc0.ɵɵelement(2, "i", 4);
    ɵngcc0.ɵɵtext(3, "\u00A0");
    ɵngcc0.ɵɵelementStart(4, "span", 5);
    ɵngcc0.ɵɵtext(5, "Restore dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "more");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", (ctx_r0.dashboard == null ? null : ctx_r0.dashboard.isFrozen) || ctx_r0.disabled);
} }
const _c0 = function (a0, a1, a2, a3, a4, a5, a6, a7, a8) { return { isLoading: a0, isFrozen: a1, isDisabled: a2, canDelete: a3, translateWidgetTitle: a4, allowFullscreen: a5, title: a6, widgetMargin: a7, canCopy: a8 }; };
export class ContextDashboardComponent {
    constructor(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal, inventory, gainsightService, actionBarService, translateService, modal) {
        this.route = route;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.alert = alert;
        this.renderer = renderer;
        this.moduleConfig = moduleConfig;
        this.widgetService = widgetService;
        this.bsModal = bsModal;
        this.inventory = inventory;
        this.gainsightService = gainsightService;
        this.actionBarService = actionBarService;
        this.translateService = translateService;
        this.modal = modal;
        this.childrenClasses = '';
        this.setTitle = false;
        this.disabled = false;
        this.defaultWidgets = [];
        this.canCopy = true;
        this.canDelete = true;
        this.isLoading = true;
        this.class = '';
        this.widgets = [];
    }
    ngOnInit() {
        if (!this.name) {
            this.loadContextDashboard();
            return;
        }
        this.loadNamedDashboard();
    }
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    applyDeviceTarget(widget) {
        if (widget.config.device) {
            widget.config.device = { id: this.context.id, name: this.context.name };
        }
    }
    /**
     * Removes the route listener.
     */
    ngOnDestroy() {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    }
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    restore() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
            yield this.contextDashboardService.update(this.mo);
            this.onLoad();
        });
    }
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    updateDashboardChildren(child) {
        return __awaiter(this, void 0, void 0, function* () {
            const { children } = child;
            const dashboardMO = this.mo;
            const mappedChildren = keyBy(children.map(c => this.componentToWidget(c)), 'id');
            dashboardMO.c8y_Dashboard.children = mappedChildren;
            return this.contextDashboardService.update(dashboardMO);
        });
    }
    /**
     * Copies the dashboard and current context to a clipboard.
     */
    copyDashboard() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const viewContext = (_a = this.route.parent.snapshot.data) === null || _a === void 0 ? void 0 : _a.context;
            if (this.canCopyDashboard(viewContext)) {
                this.contextDashboardService.copyClipboard = {
                    dashboard: cloneDeep(this.mo.c8y_Dashboard),
                    context: {
                        context: viewContext,
                        contextData: this.context
                    }
                };
                if (viewContext) {
                    const ctx = viewContext.split('/').shift();
                    const msg = this.translateService.instant('Dashboard copied. Navigate to the desired {{ ctx }} and select "Paste dashboard"', { ctx });
                    this.alert.success(msg);
                }
                this.actionBarService.refresh();
            }
        });
    }
    /**
     * Remove the complete dashboard and navigate away.
     */
    deleteDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.contextDashboardService.delete(this.mo);
            if (this.route.parent) {
                const route = this.route.parent.snapshot.url.map(segment => segment.path).join('/');
                this.router.navigateByUrl(route);
            }
        });
    }
    /**
     * Edits the current dashboard
     */
    editDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            const isReport = this.contextDashboardService.isReport(this.mo);
            if (isReport) {
                const { name, icon, priority, c8y_IsNavigatorNode, description } = this.context;
                Object.assign(this.dashboard, { name, icon, priority, c8y_IsNavigatorNode, description });
            }
            const initialState = {
                dashboard: this.dashboard,
                deviceType: this.context.type,
                isDeviceType: this.contextDashboardService.isDeviceType(this.mo),
                isNamedDashboard: this.contextDashboardService.isNamed(this.mo),
                isReport
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardMO = cloneDeep(this.mo);
                const cfg = yield modal.result;
                if (isReport) {
                    const { name, icon, c8y_IsNavigatorNode, priority, description } = cfg, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                    dashboardMO.c8y_Dashboard = dashboardCfg;
                    this.updateReport({
                        id: this.context.id,
                        name,
                        icon,
                        c8y_IsNavigatorNode,
                        priority,
                        description
                    });
                }
                else {
                    dashboardMO.c8y_Dashboard = cfg;
                }
                yield this.contextDashboardService.update(dashboardMO);
                yield this.contextDashboardService.refreshTabs(dashboardMO);
                this.onLoad();
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    get isDeviceTypeDashboard() {
        var _a;
        return !!((_a = this.dashboard) === null || _a === void 0 ? void 0 : _a.deviceType) && !!this.dashboard.deviceTypeValue;
    }
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    editWidget(change) {
        return __awaiter(this, void 0, void 0, function* () {
            const { x, y, width, height } = change.source;
            const component = yield this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId);
            if (!component) {
                this.addWidget();
                return;
            }
            yield this.addWidget(Object.assign(Object.assign({}, component), { data: Object.assign(Object.assign(Object.assign({}, component.data), change.widget), { _x: x, _y: y, _width: width, _height: height }) }));
        });
    }
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    addWidget(selected) {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                mo: this.mo,
                context: this.context.c8y_Report ? {} : this.context,
                selected: cloneDeep(selected)
            };
            const modal = this.bsModal.show(WidgetConfigComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const newWidget = yield modal.result;
                if (!this.mo.c8y_Dashboard.children) {
                    this.mo.c8y_Dashboard.children = {};
                }
                this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                this.contextDashboardService.update(this.mo);
                newWidget.classes = this.mergeWidgetClasses(newWidget);
                yield this.updateWidget(newWidget);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    updateWidget(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = findIndex(this.widgets, { id: widget.id });
            const isNew = index === -1;
            const mappedWidget = yield this.widgetService.mapLegacy(widget);
            if (isNew) {
                this.widgets.push(mappedWidget);
            }
            else {
                this.widgets.splice(index, 1, mappedWidget);
            }
        });
    }
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    deleteWidget(change) {
        return __awaiter(this, void 0, void 0, function* () {
            const widgetTitle = change.widget.title;
            try {
                yield this.modal.confirm(gettext('Remove widget'), this.translateService.instant(gettext('You are about to remove widget "{{ widgetTitle }}" from your dashboard. Do you want to proceed?'), { widgetTitle }), Status.DANGER, {
                    ok: gettext('Remove'),
                    cancel: gettext('Cancel')
                });
            }
            catch (e) {
                // on cancel: do nothing
                return;
            }
            try {
                const { widget, source } = change;
                delete this.mo.c8y_Dashboard.children[widget.id];
                const removed = this.widgets.find(({ id }) => id === widget.id);
                this.widgets.splice(this.widgets.indexOf(removed), 1);
                const { dashboard } = source;
                dashboard.children = dashboard.children.filter(c => c.data.id !== widget.id);
                // using setTimeout to give the component the chance to remove it.
                const sleep = timeout => new Promise(resolve => setTimeout(resolve, timeout));
                yield sleep(0);
                const child = new DashboardChildChange(source);
                child.collapseUpAll();
                yield this.updateDashboardChildren(child);
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    addDashboardClassToBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.addClass(document.body, cssClass);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    removeDashboardClassFromBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.removeClass(document.body, cssClass);
        });
    }
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    toggleFreeze(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleIsFrozenFlag(settings);
            try {
                yield this.contextDashboardService.update(this.mo);
                if (this.dashboard.isFrozen) {
                    this.alert.success(gettext('Your dashboard is locked now.'));
                }
                else {
                    this.alert.success(gettext('Your dashboard is unlocked now.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                this.toggleIsFrozenFlag(settings);
            }
        });
    }
    updateReport(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.inventory.update(mo);
            this.context = res.data;
            if (this.route.parent) {
                this.route.parent.snapshot.data.contextData = this.context;
            }
            this.contextDashboardService.updateNavigatorItem(res.data);
        });
    }
    toggleIsFrozenFlag(settings) {
        settings.isFrozen = !settings.isFrozen;
        this.dashboard.isFrozen = settings.isFrozen;
    }
    loadContextDashboard() {
        this.dataSub = this.route.data.subscribe(({ dashboard }) => {
            var _a;
            this.context = this.route.parent.snapshot.data.contextData;
            this.title = (_a = this.context) === null || _a === void 0 ? void 0 : _a.name;
            this.mo = dashboard;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    loadNamedDashboard() {
        this.dataSub = this.contextDashboardService
            .getNamedDashboardOrCreate(this.name, this.defaultWidgets, this.context)
            .subscribe(mo => {
            this.context = this.context || {};
            this.mo = mo;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    onLoad(trackExperience) {
        return __awaiter(this, void 0, void 0, function* () {
            const canEditDashboard = yield this.contextDashboardService.canEditDashboard(this.mo);
            this.disabled = !canEditDashboard;
            this.canCopy =
                this.contextDashboardService.isDeviceDashboard(this.mo) ||
                    this.contextDashboardService.isDeviceType(this.mo) ||
                    this.contextDashboardService.isGroupDashboard(this.mo);
            const dashboardChildren = cloneDeep(this.mo.c8y_Dashboard.children);
            const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            const isReport = this.contextDashboardService.isReport(this.mo);
            const dashboardClasses = Object.assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
            this.widgets = yield Promise.all(values(dashboardChildren).map(widget => {
                widget.classes = this.mergeWidgetClasses(widget);
                if (isDeviceType) {
                    this.applyDeviceTarget(widget);
                }
                if (trackExperience) {
                    this.gainsightService.triggerEvent('loadWidget', {
                        widgetName: widget.componentId || widget.name
                    });
                }
                return this.widgetService.mapLegacy(widget);
            }));
            this.class = Object.keys(dashboardClasses).join(' ');
            if (isReport) {
                this.addReportDashboardSettings();
            }
            this.isLoading = false;
        });
    }
    mergeWidgetClasses(widget) {
        const hasHeaderClass = WIDGET_HEADER_CLASSES.find(el => widget.classes && widget.classes[el.class]);
        const widgetClasses = hasHeaderClass
            ? Object.assign({}, widget.classes) : Object.assign(Object.assign({}, this.dashboard.widgetClasses), widget.classes);
        return Object.assign({ card: true, 'card-dashboard': true, [kebabCase(widget.componentId || widget.name)]: true }, widgetClasses);
    }
    componentToWidget(child) {
        return Object.assign(Object.assign({}, omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext'])), {
            _x: child.x,
            _y: child.y,
            _width: child.width,
            _height: child.height
        });
    }
    addReportDashboardSettings() {
        this.setTitle = true;
        this.title = this.context.name;
        this.breadcrumbSettings = {
            icon: 'th',
            label: 'Reports',
            path: 'reports'
        };
        this.canDelete = false;
    }
    canCopyDashboard(viewContext) {
        if (!this.validDashboardChildren() && viewContext) {
            const ctx = viewContext.split('/').shift();
            const msg = this.translateService.instant('Only dashboards with widgets referencing the current {{ ctx }} can be copied.', { ctx });
            this.alert.warning(msg);
            return false;
        }
        return true;
    }
    validDashboardChildren() {
        return every(this.mo.c8y_Dashboard.children, child => {
            const config = child.config || {};
            const dataPoints = config.datapoints || [];
            return !((config.device && config.device.id !== this.context.id) ||
                some(dataPoints, dataPoint => dataPoint.__target.id !== this.context.id));
        });
    }
}
ContextDashboardComponent.ɵfac = function ContextDashboardComponent_Factory(t) { return new (t || ContextDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(CONTEXT_DASHBOARD_CONFIG), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.GainsightService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ActionBarService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ModalService)); };
ContextDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ContextDashboardComponent, selectors: [["c8y-context-dashboard"]], hostAttrs: [1, "dashboard", "c8y-grid-dashboard", 2, "display", "block"], hostVars: 2, hostBindings: function ContextDashboardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.class);
    } }, inputs: { childrenClasses: "childrenClasses", setTitle: "setTitle", disabled: "disabled", defaultWidgets: "defaultWidgets", canCopy: "canCopy", canDelete: "canDelete", isLoading: "isLoading", context: "context", breadcrumbSettings: "breadcrumbSettings", name: "name" }, decls: 4, vars: 17, consts: [[3, "placement", 4, "ngIf"], [3, "context", "contextDashboard", "widgets", "settings", "breadcrumb", "onFreeze", "onChangeDashboard", "onAddWidget", "onEditWidget", "onDeleteWidget", "onChangeStart", "onChangeEnd", "onEditDashboard", "onCopyDashboard", "onDeleteDashboard"], [3, "placement"], ["px-event", "Restore dashboard", 3, "disabled", "click"], ["c8yIcon", "undo"], ["translate", ""]], template: function ContextDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, ContextDashboardComponent_c8y_action_bar_item_2_Template, 6, 2, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(3, "c8y-widgets-dashboard", 1);
        ɵngcc0.ɵɵlistener("onFreeze", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onFreeze_3_listener($event) { return ctx.toggleFreeze($event); })("onChangeDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeDashboard_3_listener($event) { return ctx.updateDashboardChildren($event); })("onAddWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onAddWidget_3_listener() { return ctx.addWidget(); })("onEditWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onEditWidget_3_listener($event) { return ctx.editWidget($event); })("onDeleteWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onDeleteWidget_3_listener($event) { return ctx.deleteWidget($event); })("onChangeStart", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeStart_3_listener() { return ctx.addDashboardClassToBody(); })("onChangeEnd", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeEnd_3_listener() { return ctx.removeDashboardClassFromBody(); })("onEditDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onEditDashboard_3_listener() { return ctx.editDashboard(); })("onCopyDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onCopyDashboard_3_listener() { return ctx.copyDashboard(); })("onDeleteDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onDeleteDashboard_3_listener() { return ctx.deleteDashboard(); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.title, "\n");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.defaultWidgets.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context)("contextDashboard", ctx.dashboard)("widgets", ctx.widgets)("settings", ɵngcc0.ɵɵpureFunctionV(7, _c0, [ctx.isLoading, ctx.dashboard == null ? null : ctx.dashboard.isFrozen, ctx.disabled, ctx.canDelete, ctx.dashboard == null ? null : ctx.dashboard.translateWidgetTitle, ctx.moduleConfig.allowFullscreen, ctx.setTitle ? ctx.dashboard.name || ctx.title : undefined, ctx.dashboard == null ? null : ctx.dashboard.widgetMargin, ctx.canCopy]))("breadcrumb", ctx.breadcrumbSettings);
    } }, directives: [ɵngcc3.TitleComponent, ɵngcc8.NgIf, ɵngcc3.WidgetsDashboardComponent, ɵngcc3.ActionBarItemComponent, ɵngcc3.IconDirective, ɵngcc3.C8yTranslateDirective], encapsulation: 2 });
ContextDashboardComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: ContextDashboardService },
    { type: AlertService },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
    { type: WidgetService },
    { type: BsModalService },
    { type: InventoryService },
    { type: GainsightService },
    { type: ActionBarService },
    { type: TranslateService },
    { type: ModalService }
];
ContextDashboardComponent.propDecorators = {
    name: [{ type: Input }],
    childrenClasses: [{ type: Input }],
    context: [{ type: Input }],
    setTitle: [{ type: Input }],
    disabled: [{ type: Input }],
    defaultWidgets: [{ type: Input }],
    canCopy: [{ type: Input }],
    canDelete: [{ type: Input }],
    isLoading: [{ type: Input }],
    breadcrumbSettings: [{ type: Input }],
    class: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-context-dashboard',
                template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" px-event=\"Restore dashboard\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin,\n    canCopy: canCopy\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onCopyDashboard)=\"copyDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
                host: {
                    style: `
      display: block;
    `,
                    class: 'dashboard c8y-grid-dashboard'
                }
            }]
    }], function () { return [{ type: ɵngcc1.ActivatedRoute }, { type: ɵngcc1.Router }, { type: ɵngcc2.ContextDashboardService }, { type: ɵngcc3.AlertService }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: Inject,
                args: [CONTEXT_DASHBOARD_CONFIG]
            }] }, { type: ɵngcc4.WidgetService }, { type: ɵngcc5.BsModalService }, { type: ɵngcc6.InventoryService }, { type: ɵngcc3.GainsightService }, { type: ɵngcc3.ActionBarService }, { type: ɵngcc7.TranslateService }, { type: ɵngcc3.ModalService }]; }, { childrenClasses: [{
            type: Input
        }], setTitle: [{
            type: Input
        }], disabled: [{
            type: Input
        }], defaultWidgets: [{
            type: Input
        }], canCopy: [{
            type: Input
        }], canDelete: [{
            type: Input
        }], isLoading: [{
            type: Input
        }], class: [{
            type: HostBinding,
            args: ['class']
        }], context: [{
            type: Input
        }], breadcrumbSettings: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,