import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DataGridComponent, FilteringActionType, gettext } from '@c8y/ngx-components';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { concatMap, filter as filterRxJS, first, map, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { DeviceGridService } from './device-grid.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './device-grid.service';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@angular/common';

function DeviceGridComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-column", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", column_r1.name);
} }
export class DeviceGridComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        /** Takes an event emitter. When an event is emitted, the grid will be reloaded. */
        this.refresh = new EventEmitter();
        /** The title for the data grid, it's displayed in the grid's header. */
        this.title = gettext('Devices');
        /** The label for load more button. */
        this.loadMoreItemsLabel = gettext('Load more devices');
        /** The label for loading indicator. */
        this.loadingItemsLabel = gettext('Loading devices…');
        /** Determines whether items can be selected by clicking a checkbox in the first column. */
        this.selectable = false;
        /** Sets the base query which is appended to the request for data. */
        this.baseQuery = {};
        this.childDeviceGrid = false;
        /** Sets the withChildren query which is appended to the request. */
        this.withChildren = false;
        /** Emits an event when columns configuration changes. */
        this.onColumnsChange = new EventEmitter();
        this.onFilterChange = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        /** Emits an event when items selection changes. The array contains ids of selected items. */
        this.itemsSelect = new EventEmitter();
        this.configureColumnsEnabled = true;
        this.actionControls = [];
        this.columns$ = of(this.deviceGridService.getDefaultColumns());
        this.appliedFilters = [];
        this.pagination = this.deviceGridService.getDefaultPagination();
        this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
        /**
         * Manages the requests to the DeviceGridService.saveConfig$() method:
         * 0 - Semaphore is in initial state, request can be executed;
         * 1 - Semaphore is blocked, further requests need to wait for lock to get released;
         * 2 - Semaphore is "green", requests can be done;
         */
        this.saveGridConfigSemaphore$ = new BehaviorSubject(0);
        this.destroyed$ = new Subject();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    /** Pagination settings, e.g. allows for setting current page or page size. If not given, defaults to standard settings. */
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.deviceGridService.getDefaultPagination();
        }
    }
    /** Sets load more mode. */
    set _infiniteScroll(infiniteScroll) {
        this.infiniteScroll = infiniteScroll;
        if (infiniteScroll) {
            this.pagination = this.deviceGridService.getInfiniteScrollPagination();
        }
    }
    /** Sets action controls (actions available for individual items). If not given, it defaults to standard actions. */
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.deviceGridService.getDefaultActionControls();
        }
    }
    /** Sets bulk action controls (actions available for items selected by user). If not given, it defaults to standard bulk actions. */
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        }
    }
    /** Sets header action controls (actions available from the grid header). If not given, it defaults to empty list of actions. */
    set _headerActionControls(value) {
        if (value) {
            this.headerActionControls = value;
        }
        else {
            this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
        }
    }
    ngOnInit() {
        this.setActionControls();
        if (this.columnsConfig && !this.columnsConfigKey) {
            this.columns$ = of(this.columnsConfig);
            this.configureColumnsEnabled = false;
            console.warn('Device grid expects columnsConfigKey to be set if setting customized columns list. Without it the changes to the grid wll not be saved anywhere.');
        }
        else {
            this.columns$ = this.deviceGridService.getUserConfiguredColumns$(this.columnsConfig ? this.columnsConfig : this.deviceGridService.getDefaultColumns(), this.columnsConfigKey);
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverSideDataResult;
            let filteredSize;
            let size;
            if (this.childDeviceGrid) {
                const { res, data, paging } = yield this.deviceGridService.getChildDeviceData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren, this.parentDeviceId);
                filteredSize = yield this.deviceGridService.getCountChildDevices(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.parentDeviceId);
                size = yield this.deviceGridService.getTotalChildDevices(this.baseQuery, this.parentDeviceId);
                serverSideDataResult = {
                    res,
                    data,
                    paging,
                    filteredSize,
                    size
                };
            }
            else {
                const { res, data, paging } = yield this.deviceGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren);
                filteredSize = yield this.deviceGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery);
                size = yield this.deviceGridService.getTotal(this.baseQuery);
                serverSideDataResult = {
                    res,
                    data,
                    paging,
                    filteredSize,
                    size
                };
            }
            this.onColumnsChange.emit(dataSourceModifier.columns);
            this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns, this.baseQuery));
            if (this.dataCallback) {
                serverSideDataResult = this.dataCallback(serverSideDataResult);
            }
            return serverSideDataResult;
        });
    }
    filterChange({ columnName, filteringModifier }) {
        const index = this.appliedFilters.findIndex(el => el.columnName === columnName);
        if (index > -1) {
            this.appliedFilters[index].filteringModifier = filteringModifier;
        }
        else {
            this.appliedFilters.push({ columnName, filteringModifier });
        }
        this.onFilterChange.emit(this.appliedFilters);
        this.updateFilterConfig(columnName, filteringModifier);
    }
    updateFilterConfig(columnName, filteringModifier) {
        // Here I needed to take the current columns because if there isn't any stored config
        // and custom columns are provided through parent element we need to use them.
        combineLatest([this.deviceGridService.getConfig$(this.columnsConfigKey), this.columns$])
            .pipe(tap(([config, columns]) => {
            var _a;
            const columnsConfig = (((_a = config === null || config === void 0 ? void 0 : config.columns) === null || _a === void 0 ? void 0 : _a.length) > 0 ? config.columns : columns).map(({ name, visible, sortOrder, filter, custom, header, path }) => ({
                name,
                visible: visible !== null && visible !== void 0 ? visible : true,
                sortOrder,
                custom,
                header,
                path,
                filter: columnName && columnName !== name ? filter : filteringModifier
            }));
            if (!columnsConfig.filter) {
                delete columnsConfig.filter;
            }
            this.configChange({ columns: columnsConfig, pagination: config.pagination });
        }), take(1), takeUntil(this.destroyed$))
            .subscribe();
    }
    setActionControls() {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteAction = {
                type: "DELETE" /* Delete */,
                callback: (device) => this.onDeleteDevice(device)
            };
            this.actionControls.push(deleteAction);
        });
    }
    onDeleteDevice(device) {
        this.deviceGridService
            .delete(device)
            .then(() => this.refresh.emit())
            .catch(() => ({}));
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action);
        }
    }
    configChange(config) {
        /* Semaphore ensures that the first request to DeviceGridService.saveConfig$() is completed
         * before the next requests are sent out. This prevents multiple configuration objects to be
         * created in Inventory in case a config does not yet exist.
         */
        this.saveGridConfigSemaphore$
            .pipe(filterRxJS(semaphore => semaphore !== 1), tap(() => {
            if (this.saveGridConfigSemaphore$.value < 1) {
                this.saveGridConfigSemaphore$.next(this.saveGridConfigSemaphore$.value + 1);
            }
        }), concatMap(() => this.deviceGridService.saveConfig$(config, this.columnsConfigKey)), tap(() => {
            if (this.saveGridConfigSemaphore$.value < 2) {
                this.saveGridConfigSemaphore$.next(this.saveGridConfigSemaphore$.value + 1);
            }
        }), take(1), takeUntil(this.destroyed$))
            .subscribe();
    }
    addCustomColumn(columnConfig) {
        this.deviceGridService
            .getConfig$(this.columnsConfigKey)
            .pipe(tap(config => (config.columns = [
            ...(config.columns.length === 0 ? this.getDefalultConfigColumns() : config.columns),
            columnConfig
        ])), concatMap(config => this.deviceGridService.saveConfig$(config, this.columnsConfigKey)), switchMap(() => this.deviceGridService.getUserConfiguredColumns$(this.columns$, this.columnsConfigKey)), 
        // Let data-grid re-render with new columns;
        // Columns are set in a separate step in the pipe to avoid flickering
        // in the grid in the time where get config request is executing
        tap(columns => (this.columns$ = of(columns))), take(1), takeUntil(this.destroyed$))
            .subscribe();
    }
    removeCustomColumn(columnToRemove) {
        this.deviceGridService
            .getConfig$(this.columnsConfigKey)
            .pipe(first(), tap(config => (config.columns = config.columns.filter(column => column.name !== columnToRemove.name))), concatMap(config => this.deviceGridService.saveConfig$(config, this.columnsConfigKey)), switchMap(() => this.deviceGridService.getUserConfiguredColumns$(this.columns$.pipe(map(columns => columns.filter(column => column.name !== columnToRemove.name))), this.columnsConfigKey)), 
        // Let data-grid re-render with new columns;
        // Columns are set in a separate step in the pipe to avoid flickering
        // in the grid in the time where get config request is executing
        tap(columns => (this.columns$ = of(columns))), take(1), takeUntil(this.destroyed$))
            .subscribe();
    }
    getDefalultConfigColumns() {
        return this.deviceGridService
            .getDefaultColumns()
            .map(column => ({ name: column.name, visible: true }));
    }
}
DeviceGridComponent.ɵfac = function DeviceGridComponent_Factory(t) { return new (t || DeviceGridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DeviceGridService)); };
DeviceGridComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceGridComponent, selectors: [["c8y-device-grid"]], viewQuery: function DeviceGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DataGridComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataGrid = _t.first);
    } }, inputs: { refresh: "refresh", title: "title", loadMoreItemsLabel: "loadMoreItemsLabel", loadingItemsLabel: "loadingItemsLabel", selectable: "selectable", baseQuery: "baseQuery", childDeviceGrid: "childDeviceGrid", withChildren: "withChildren", _pagination: ["pagination", "_pagination"], _infiniteScroll: ["infiniteScroll", "_infiniteScroll"], _actionControls: ["actionControls", "_actionControls"], _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], _headerActionControls: ["headerActionControls", "_headerActionControls"], dataCallback: "dataCallback", columnsConfigKey: "columnsConfigKey", columnsConfig: ["columns", "columnsConfig"], parentDeviceId: "parentDeviceId" }, outputs: { onColumnsChange: "onColumnsChange", onFilterChange: "onFilterChange", onDeviceQueryStringChange: "onDeviceQueryStringChange", itemsSelect: "itemsSelect" }, decls: 7, vars: 27, consts: [[3, "title", "loadMoreItemsLabel", "loadingItemsLabel", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "bulkActionControls", "serverSideDataCallback", "refresh", "headerActionControls", "configureColumnsEnabled", "itemsSelect", "onConfigChange", "onAddCustomColumn", "onRemoveCustomColumn", "onFilter"], [3, "icon", "title", "subtitle", "horizontal"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "name"]], template: function DeviceGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-data-grid", 0);
        ɵngcc0.ɵɵlistener("itemsSelect", function DeviceGridComponent_Template_c8y_data_grid_itemsSelect_0_listener($event) { return ctx.itemsSelect.emit($event); })("onConfigChange", function DeviceGridComponent_Template_c8y_data_grid_onConfigChange_0_listener($event) { return ctx.configChange($event); })("onAddCustomColumn", function DeviceGridComponent_Template_c8y_data_grid_onAddCustomColumn_0_listener($event) { return ctx.addCustomColumn($event); })("onRemoveCustomColumn", function DeviceGridComponent_Template_c8y_data_grid_onRemoveCustomColumn_0_listener($event) { return ctx.removeCustomColumn($event); })("onFilter", function DeviceGridComponent_Template_c8y_data_grid_onFilter_0_listener($event) { return ctx.filterChange($event); });
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelement(2, "c8y-ui-empty-state", 1);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, DeviceGridComponent_ng_container_5_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("loadMoreItemsLabel", ctx.loadMoreItemsLabel)("loadingItemsLabel", ctx.loadingItemsLabel)("columns", ɵngcc0.ɵɵpipeBind1(1, 19, ctx.columns$))("pagination", ctx.pagination)("infiniteScroll", ctx.infiniteScroll)("actionControls", ctx.actionControls)("selectable", ctx.selectable)("bulkActionControls", ctx.bulkActionControls)("serverSideDataCallback", ctx.serverSideDataCallback)("refresh", ctx.refresh)("headerActionControls", ctx.headerActionControls)("configureColumnsEnabled", ctx.configureColumnsEnabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "search")("title", ɵngcc0.ɵɵpipeBind1(3, 21, "No matching devices."))("subtitle", ɵngcc0.ɵɵpipeBind1(4, 23, "Refine your search terms"))("horizontal", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(6, 25, ctx.columns$))("ngForTrackBy", ctx.trackByName);
    } }, directives: [ɵngcc2.DataGridComponent, ɵngcc2.EmptyStateComponent, ɵngcc3.NgForOf, ɵngcc2.ColumnDirective], pipes: [ɵngcc3.AsyncPipe, ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
DeviceGridComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
DeviceGridComponent.propDecorators = {
    dataCallback: [{ type: Input }],
    refresh: [{ type: Input }],
    title: [{ type: Input }],
    loadMoreItemsLabel: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    columnsConfigKey: [{ type: Input }],
    columnsConfig: [{ type: Input, args: ['columns',] }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _infiniteScroll: [{ type: Input, args: ['infiniteScroll',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    selectable: [{ type: Input }],
    baseQuery: [{ type: Input }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    _headerActionControls: [{ type: Input, args: ['headerActionControls',] }],
    childDeviceGrid: [{ type: Input }],
    parentDeviceId: [{ type: Input }],
    withChildren: [{ type: Input }],
    onColumnsChange: [{ type: Output }],
    onFilterChange: [{ type: Output }],
    onDeviceQueryStringChange: [{ type: Output }],
    itemsSelect: [{ type: Output }],
    dataGrid: [{ type: ViewChild, args: [DataGridComponent, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-grid',
                template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns$ | async\"\n  [pagination]=\"pagination\"\n  [infiniteScroll]=\"infiniteScroll\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  (onConfigChange)=\"configChange($event)\"\n  (onAddCustomColumn)=\"addCustomColumn($event)\"\n  (onRemoveCustomColumn)=\"removeCustomColumn($event)\"\n  (onFilter)=\"filterChange($event)\"\n  [refresh]=\"refresh\"\n  [headerActionControls]=\"headerActionControls\"\n  [configureColumnsEnabled]=\"configureColumnsEnabled\"\n>\n  <c8y-ui-empty-state\n    [icon]=\"'search'\"\n    [title]=\"'No matching devices.' | translate\"\n    [subtitle]=\"'Refine your search terms' | translate\"\n    [horizontal]=\"true\"\n  >\n  </c8y-ui-empty-state>\n\n  <ng-container *ngFor=\"let column of columns$ | async; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
            }]
    }], function () { return [{ type: ɵngcc1.DeviceGridService }]; }, { refresh: [{
            type: Input
        }], title: [{
            type: Input
        }], loadMoreItemsLabel: [{
            type: Input
        }], loadingItemsLabel: [{
            type: Input
        }], selectable: [{
            type: Input
        }], baseQuery: [{
            type: Input
        }], childDeviceGrid: [{
            type: Input
        }], withChildren: [{
            type: Input
        }], onColumnsChange: [{
            type: Output
        }], onFilterChange: [{
            type: Output
        }], onDeviceQueryStringChange: [{
            type: Output
        }], itemsSelect: [{
            type: Output
        }], _pagination: [{
            type: Input,
            args: ['pagination']
        }], _infiniteScroll: [{
            type: Input,
            args: ['infiniteScroll']
        }], _actionControls: [{
            type: Input,
            args: ['actionControls']
        }], _bulkActionControls: [{
            type: Input,
            args: ['bulkActionControls']
        }], _headerActionControls: [{
            type: Input,
            args: ['headerActionControls']
        }], dataCallback: [{
            type: Input
        }], columnsConfigKey: [{
            type: Input
        }], columnsConfig: [{
            type: Input,
            args: ['columns']
        }], parentDeviceId: [{
            type: Input
        }], dataGrid: [{
            type: ViewChild,
            args: [DataGridComponent, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,