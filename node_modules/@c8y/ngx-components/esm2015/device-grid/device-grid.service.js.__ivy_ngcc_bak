import { __awaiter, __decorate } from "tslib";
import { Injectable, Optional } from '@angular/core';
import { InventoryService, QueriesUtil, UserService } from '@c8y/client';
import { AlertService, GainsightService, gettext, ModalService, Status, UserPreferencesService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { assign, forEach, get, identity, transform } from 'lodash-es';
import { from, isObservable, of } from 'rxjs';
import { map, share, take, withLatestFrom } from 'rxjs/operators';
import { CustomDeviceGridColumn } from './columns';
import { AlarmsDeviceGridColumn } from './columns/alarms.device-grid-column';
import { ColumnUtilService } from './columns/column-util.service';
import { GroupDeviceGridColumn } from './columns/group.device-grid-column';
import { ImeiDeviceGridColumn } from './columns/imei.device-grid-column';
import { ModelDeviceGridColumn } from './columns/model.device-grid-column';
import { NameDeviceGridColumn } from './columns/name.device-grid-column';
import { RegistrationDateDeviceGridColumn } from './columns/registration-date.device-grid-column';
import { SerialNumberDeviceGridColumn } from './columns/serial-number.device-grid-column';
import { StatusDeviceGridColumn } from './columns/status.device-grid-column';
import { SystemIdDeviceGridColumn } from './columns/system-id.device-grid-column';
import { mapLegacyGridConfiguration } from './map-legacy-grid-configuration.decorator';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i2 from "@c8y/client/lib/src/user/UserService";
import * as i3 from "@ngx-translate/core";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "./columns/column-util.service";
export class DeviceGridService {
    constructor(inventoryService, userService, translateService, alertService, modal, columnUtilService, userPreferencesService, gainsightService) {
        this.inventoryService = inventoryService;
        this.userService = userService;
        this.translateService = translateService;
        this.alertService = alertService;
        this.modal = modal;
        this.columnUtilService = columnUtilService;
        this.userPreferencesService = userPreferencesService;
        this.gainsightService = gainsightService;
        this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'device-grid-config';
        this.DEFAULT_PAGE_SIZE = 20;
        this.queriesUtil = new QueriesUtil();
    }
    getDefaultColumns() {
        const defaultColumns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    }
    getChildDeviceGridColumns() {
        const childDeviceGridColumn = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        return childDeviceGridColumn;
    }
    getDefaultPagination() {
        return {
            pageSize: 10,
            currentPage: 1
        };
    }
    getInfiniteScrollPagination() {
        return {
            pageSize: 50,
            currentPage: 1
        };
    }
    getDefaultActionControls() {
        return [
            {
                type: "DELETE" /* Delete */,
                callback: (item) => this.delete(item)
            }
        ];
    }
    getDefaultBulkActionControls() {
        return [];
    }
    getDefaultHeaderActionControls() {
        return [];
    }
    getProperName(device) {
        return this.columnUtilService.getProperName(device);
    }
    getModel(device) {
        return this.columnUtilService.getModel(device);
    }
    getSerialNumber(device) {
        return this.columnUtilService.getSerialNumber(device);
    }
    getParentsNames(device, featuredParentId) {
        return this.columnUtilService.getParentsNames(device, featuredParentId);
    }
    getHref(groupOrDevice, prefix = '#/') {
        return this.columnUtilService.getHref(groupOrDevice, prefix);
    }
    getAlarmsHref(device) {
        return this.columnUtilService.getAlarmsHref(device);
    }
    /**
     * @deprecated Use getUserConfiguredColumns$(Column[] | Observable<Column[]>, string) instead.
     */
    getUserConfiguredColumns(columns, storageKey) {
        return this.applyConfigToColumns(this.getConfig2(storageKey), columns, storageKey);
    }
    getUserConfiguredColumns$(columns, storageKey) {
        return this.getConfig$(storageKey).pipe(withLatestFrom(isObservable(columns) ? columns : of(columns)), map(([config, cols]) => this.applyConfigToColumns(config, cols, storageKey)), take(1), share());
    }
    delete(device) {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const deviceWithChildren = yield (yield this.inventoryService.detail(device, { withChildren: true })).data;
                const hasChildDevices = ((_b = (_a = deviceWithChildren.childDevices) === null || _a === void 0 ? void 0 : _a.references) === null || _b === void 0 ? void 0 : _b.length) > 0;
                const hasChildAdditions = ((_d = (_c = deviceWithChildren.childAdditions) === null || _c === void 0 ? void 0 : _c.references) === null || _d === void 0 ? void 0 : _d.length) > 0;
                const hasChildAssets = ((_f = (_e = deviceWithChildren.childAssets) === null || _e === void 0 ? void 0 : _e.references) === null || _f === void 0 ? void 0 : _f.length) > 0;
                const showDeleteChildren = () => hasChildAdditions || hasChildDevices || hasChildAssets;
                const modalResult = yield this.modal.confirm(gettext('Delete device'), this.translateService.instant(gettext(`You are about to delete device "{{ name }}". Do you want to proceed?`), device), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') }, {
                    cascade: {
                        text: gettext('Also delete child hierarchy of this device.'),
                        checked: showDeleteChildren(),
                        showIf: showDeleteChildren,
                        disabledByKey: 'withDeviceUser'
                    },
                    withDeviceUser: {
                        text: this.translateService.instant(gettext('Also delete associated device owner "{{ owner }}".'), device),
                        checked: false,
                        showIf: () => {
                            const isRootDevice = device.c8y_IsDevice;
                            const hasDeviceUserAsOwner = device.owner &&
                                this.userService.isDeviceUser({ id: device.owner });
                            return Boolean(isRootDevice && hasDeviceUserAsOwner);
                        },
                        disabledByKey: 'cascade'
                    }
                });
                yield this.inventoryService.delete(device, modalResult.confirmOptions);
                this.alertService.success(gettext('Device deleted.'));
                if (this.gainsightService) {
                    this.gainsightService.triggerEvent('deviceGrid:EntryDeleted');
                }
                return Promise.resolve();
            }
            catch (ex) {
                // only if not cancel from modal
                if (this.gainsightService && !ex) {
                    this.gainsightService.triggerEvent('deviceGrid:EntryDeletionCancelled');
                }
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
                return Promise.reject();
            }
        });
    }
    getData(columns, pagination, query = {}, withChildren = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query)), { withGroups: true, withChildren });
            return this.inventoryService.list(filters);
        });
    }
    getChildDeviceData(columns, pagination, query = {}, withChildren = false, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const childDeviceFilters = true;
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query, childDeviceFilters)), { withGroups: true, withChildren });
            return this.inventoryService.childDevicesList(id, filters);
        });
    }
    getCount(columns, pagination, query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query)), { pageSize: 1, currentPage: 1 });
            return (yield this.inventoryService.list(filters)).paging.totalPages;
        });
    }
    getCountChildDevices(columns, pagination, query = {}, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const childDeviceFilters = true;
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query, childDeviceFilters)), { pageSize: 1, currentPage: 1 });
            return (yield this.inventoryService.childDevicesList(id, filters)).paging.totalPages;
        });
    }
    getTotalChildDevices(query = {}, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                q: this.queriesUtil.buildQuery(query),
                pageSize: 1,
                withTotalPages: true
            };
            return (yield this.inventoryService.childDevicesList(id, filters)).paging.totalPages;
        });
    }
    getTotal(query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                q: this.queriesUtil.buildQuery(query),
                pageSize: 1,
                withTotalPages: true
            };
            return (yield this.inventoryService.list(filters)).paging.totalPages;
        });
    }
    getDeviceQueryString(columns, query) {
        let fullQuery = this.getQueryObj(columns);
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, query);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    getQueryObj(columns, defaultFilter = {}) {
        return transform(columns, (query, column) => this.extendQueryByColumn(query, column), Object.assign({ __filter: {}, __orderby: [] }, defaultFilter));
    }
    /**
     * @deprecated Use getConfig$(key: string): Observable<GridConfig> instead.
     */
    getConfig(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        return this.getConfig2(key);
    }
    /**
     * @deprecated Use saveConfig$(config: GridConfig, key: string): Promise<GridConfig> instead.
     */
    saveConfig(config, key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        localStorage.setItem(key, JSON.stringify(config));
    }
    clearConfig(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        localStorage.removeItem(key);
    }
    getConfig$(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        return this.userPreferencesService.get(key).pipe(map(config => config || {
            columns: [],
            pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 }
        }));
    }
    saveConfig$(config, key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        return from(this.userPreferencesService.set(key, config));
    }
    applyConfigToColumns(config, columns, storageKey) {
        if (config.columns.length > 0) {
            const reOrderedColumns = [];
            let noConfigColumns = [];
            try {
                const customColumns = config.columns
                    .filter(col => col.custom)
                    .map((col) => new CustomDeviceGridColumn(col));
                const allColumns = [...columns, ...customColumns];
                noConfigColumns = allColumns.filter(col => !config.columns.some(configCol => col.name === configCol.name));
                config.columns.forEach(({ visible, name, sortOrder, filter }) => {
                    const columnToReorder = allColumns.find(col => col.name === name);
                    if (columnToReorder) {
                        columnToReorder.visible = visible;
                        columnToReorder.sortOrder = sortOrder;
                        columnToReorder.externalFilterQuery = filter === null || filter === void 0 ? void 0 : filter.externalFilterQuery;
                        reOrderedColumns.push(columnToReorder);
                    }
                });
            }
            catch (ex) {
                this.clearConfig(storageKey);
            }
            return [...reOrderedColumns, ...noConfigColumns];
        }
        return columns;
    }
    // TODO: REMOVE ME
    // Added because usage of getConfig breaks JSdoc deprecations, otherwise compodoc build fails
    getConfig2(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        const config = JSON.parse(localStorage.getItem(key));
        if (config === null) {
            return { columns: [], pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 } };
        }
        return config;
    }
    getHardware(device) {
        const hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    }
    isVendme(device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    }
    getDevicesFilters(columns, pagination, query, childDeviceFilters) {
        return Object.assign(Object.assign({}, (childDeviceFilters
            ? { query: this.getDeviceQueryString(columns, query) }
            : { q: this.getDeviceQueryString(columns, query) })), { pageSize: pagination.pageSize, currentPage: pagination.currentPage, withChildren: false, withTotalPages: true });
    }
    extendQueryByColumn(query, column) {
        if (column.filterable && column.externalFilterQuery) {
            const getFilter = column.filteringConfig.getFilter || identity;
            const queryObj = getFilter(column.externalFilterQuery);
            if (queryObj.__or) {
                query.__filter.__and = query.__filter.__and || [];
                query.__filter.__and.push(queryObj);
            }
            else if (queryObj.__and && get(query, '__filter.__and')) {
                queryObj.__and.map(obj => query.__filter.__and.push(obj));
            }
            else {
                assign(query.__filter, queryObj);
            }
        }
        if (column.sortable && column.sortOrder) {
            const cs = {};
            forEach(column.sortingConfig.pathSortingConfigs, pathSortingConfig => {
                cs[pathSortingConfig.path] =
                    (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
            });
            query.__orderby.push(cs);
        }
        return query;
    }
}
DeviceGridService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DeviceGridService_Factory() { return new DeviceGridService(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.TranslateService), i0.ɵɵinject(i4.AlertService), i0.ɵɵinject(i4.ModalService), i0.ɵɵinject(i5.ColumnUtilService), i0.ɵɵinject(i4.UserPreferencesService), i0.ɵɵinject(i4.GainsightService, 8)); }, token: DeviceGridService, providedIn: "root" });
DeviceGridService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DeviceGridService.ctorParameters = () => [
    { type: InventoryService },
    { type: UserService },
    { type: TranslateService },
    { type: AlertService },
    { type: ModalService },
    { type: ColumnUtilService },
    { type: UserPreferencesService },
    { type: GainsightService, decorators: [{ type: Optional }] }
];
__decorate([
    mapLegacyGridConfiguration()
], DeviceGridService.prototype, "getConfig$", null);
//# sourceMappingURL=data:application/json;base64,