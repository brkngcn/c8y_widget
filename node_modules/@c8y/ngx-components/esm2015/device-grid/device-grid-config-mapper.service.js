import { Injectable } from '@angular/core';
import { UserPreferencesService } from '@c8y/ngx-components';
import { isNil, omitBy, isEmpty } from 'lodash-es';
import { combineLatest, of } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
import { DeviceGridService } from './device-grid.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "./device-grid.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from './device-grid.service';
export class DeviceGridConfigMapperService {
    constructor(userPreferencesService, deviceGridService) {
        this.userPreferencesService = userPreferencesService;
        this.deviceGridService = deviceGridService;
    }
    getMappedGridConfig(key) {
        key = key || this.deviceGridService.GRID_CONFIG_DEFAULT_STORAGE_KEY;
        const legacyAllDevicesGridKey = 'all-devices-columns-meta_';
        const legacyAllDevicesGridFilterKey = 'all-devices-columns-config';
        return combineLatest([
            this.userPreferencesService.get(legacyAllDevicesGridKey),
            this.userPreferencesService.get(legacyAllDevicesGridFilterKey)
        ]).pipe(map(([legacyConfig, legacyFilterConfig]) => this.mapLegacyToDeviceGridConfig(legacyConfig, legacyFilterConfig)), concatMap(mappedLegacyConfig => {
            if (mappedLegacyConfig) {
                return Promise.all([
                    this.userPreferencesService.set(legacyAllDevicesGridKey, null),
                    this.userPreferencesService.set(legacyAllDevicesGridFilterKey, null)
                ]).then(() => mappedLegacyConfig);
            }
            else {
                return of(null);
            }
        }), concatMap(mappedLegacyConfig => mappedLegacyConfig
            ? this.userPreferencesService.set(key, mappedLegacyConfig).then(() => mappedLegacyConfig)
            : this.userPreferencesService.get(key)), map(config => config || {
            columns: [],
            pagination: {
                pageSize: this.deviceGridService.DEFAULT_PAGE_SIZE,
                currentPage: 1
            }
        }));
    }
    mapLegacyToDeviceGridConfig(legacyConfig, legacyFilterConfig) {
        if (Array.isArray(legacyConfig) || !isEmpty(legacyFilterConfig)) {
            return {
                columns: this.getConfigColumns(legacyConfig, legacyFilterConfig),
                pagination: {
                    pageSize: this.deviceGridService.DEFAULT_PAGE_SIZE,
                    currentPage: 1
                }
            };
        }
    }
    getConfigColumns(legacyConfig, legacyFilterConfig) {
        const legacyFilterConfigArray = legacyFilterConfig
            ? Object.keys(legacyFilterConfig).map(key => ({
                key,
                filter: {
                    externalFilterQuery: legacyFilterConfig[key].filtering
                },
                sorting: legacyFilterConfig[key].sorting
            }))
            : [];
        const config = this.mergeLegacyConfigs(legacyConfig ||
            this.deviceGridService.getDefaultColumns().map(column => ({ key: column.name })), legacyFilterConfigArray);
        return config
            .filter(column => column.key !== 'removalColumn')
            .map(this.mapLegacyColumnConfig.bind(this));
    }
    mergeLegacyConfigs(columnConfig, filterConfig) {
        return columnConfig.map(column => (Object.assign(Object.assign({}, filterConfig.find(item => item.key === column.key)), column)));
    }
    mapLegacyColumnConfig(legacy) {
        const { active, key, custom, headerName, fragmentPath, filter, sorting } = legacy;
        const sortOrder = sorting ? this.migrateSortOrder(sorting) : '';
        return omitBy({
            visible: active !== null && active !== void 0 ? active : true,
            name: DeviceGridConfigMapperService.deviceGridLegacyKeyToName[key] || key,
            sortOrder,
            custom,
            header: custom ? headerName : null,
            path: fragmentPath,
            filter
        }, isNil);
    }
    migrateSortOrder(sorting) {
        switch (sorting.order) {
            case 0:
                return '';
            case -1:
                return 'desc';
            case 1:
                return 'asc';
        }
    }
}
DeviceGridConfigMapperService.ɵfac = function DeviceGridConfigMapperService_Factory(t) { return new (t || DeviceGridConfigMapperService)(ɵngcc0.ɵɵinject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵinject(ɵngcc2.DeviceGridService)); };
DeviceGridConfigMapperService.deviceGridLegacyKeyToName = {
    status: 'status',
    name: 'name',
    model: 'model',
    serialNumber: 'serialNumber',
    group: 'group',
    registrationDate: 'registrationDate',
    systemId: 'systemId',
    imei: 'imei',
    alarms: 'alarms'
};
DeviceGridConfigMapperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DeviceGridConfigMapperService_Factory() { return new DeviceGridConfigMapperService(i0.ɵɵinject(i1.UserPreferencesService), i0.ɵɵinject(i2.DeviceGridService)); }, token: DeviceGridConfigMapperService, providedIn: "root" });
DeviceGridConfigMapperService.ctorParameters = () => [
    { type: UserPreferencesService },
    { type: DeviceGridService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridConfigMapperService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.UserPreferencesService }, { type: ɵngcc2.DeviceGridService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,