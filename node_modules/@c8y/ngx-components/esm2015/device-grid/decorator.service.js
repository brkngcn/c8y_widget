import { Injectable } from '@angular/core';
import { DeviceGridConfigMapperService } from './device-grid-config-mapper.service';
import * as i0 from "@angular/core";
import * as i1 from "./device-grid-config-mapper.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './device-grid-config-mapper.service';
export class DecoratorService {
    constructor(service) {
        DecoratorService.mapperService = service;
    }
    static getMapperService() {
        if (!DecoratorService.mapperService) {
            throw new Error('DecoratorService not initialized');
        }
        return DecoratorService.mapperService;
    }
}
DecoratorService.ɵfac = function DecoratorService_Factory(t) { return new (t || DecoratorService)(ɵngcc0.ɵɵinject(ɵngcc1.DeviceGridConfigMapperService)); };
DecoratorService.mapperService = undefined;
DecoratorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DecoratorService_Factory() { return new DecoratorService(i0.ɵɵinject(i1.DeviceGridConfigMapperService)); }, token: DecoratorService, providedIn: "root" });
DecoratorService.ctorParameters = () => [
    { type: DeviceGridConfigMapperService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DecoratorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.DeviceGridConfigMapperService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldmljZS1ncmlkL2RlY29yYXRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDcEY7QUFHQzs7O0FBQ0QsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QixJQVNFLFlBQVksT0FBc0M7QUFDcEQsUUFBSSxnQkFBZ0IsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUNILElBWkUsTUFBTSxDQUFDLGdCQUFnQjtBQUFLLFFBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUU7QUFDekMsWUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDMUQsU0FBSztBQUNMLFFBQUksT0FBTyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7QUFDMUMsSUFBRSxDQUFDO0FBQ0g7NEpBQ0E7QUFBaUIsOEJBQWEsR0FBOEMsU0FBUyxDQUFDO0FBQ3RGLDhOQVRLO0FBQUM7RUFITCxVQUFVLFNBQUMsa0JBQ1YsdkNBR2MsWUFOUCw2QkFBNkI7QUFBRztFQUc3QixFQUFFLE1BQU0sY0FDbkI7Ozs7OzhGQUowQztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZENvbmZpZ01hcHBlclNlcnZpY2UgfSBmcm9tICcuL2RldmljZS1ncmlkLWNvbmZpZy1tYXBwZXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERlY29yYXRvclNlcnZpY2Uge1xuICBzdGF0aWMgZ2V0TWFwcGVyU2VydmljZSgpOiBEZXZpY2VHcmlkQ29uZmlnTWFwcGVyU2VydmljZSB7XG4gICAgaWYgKCFEZWNvcmF0b3JTZXJ2aWNlLm1hcHBlclNlcnZpY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVjb3JhdG9yU2VydmljZSBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIERlY29yYXRvclNlcnZpY2UubWFwcGVyU2VydmljZTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG1hcHBlclNlcnZpY2U6IERldmljZUdyaWRDb25maWdNYXBwZXJTZXJ2aWNlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHNlcnZpY2U6IERldmljZUdyaWRDb25maWdNYXBwZXJTZXJ2aWNlKSB7XG4gICAgRGVjb3JhdG9yU2VydmljZS5tYXBwZXJTZXJ2aWNlID0gc2VydmljZTtcbiAgfVxufVxuIl19