import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { map, remove, sortBy } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/**
 * Service contains logic extracted from the device-grid service to avoid circular dependency MTM-40239.
 */
export class ColumnUtilService {
    constructor(translateService) {
        this.translateService = translateService;
    }
    getAlarmsHref(device) {
        return `${this.getHref(device)}/alarms`;
    }
    getHref(groupOrDevice, prefix = '#/') {
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return `${prefix}group/${groupOrDevice.id}`;
        }
        return `${prefix}device/${groupOrDevice.id}`;
    }
    getParentsNames(device, featuredParentId) {
        const assetParentsReferences = device.assetParents.references;
        const assetParents = map(assetParentsReferences, 'managedObject');
        const sortedByName = sortBy(assetParents, ['name']);
        const featuredItems = remove(sortedByName, { id: featuredParentId });
        const items = featuredItems.concat(sortedByName);
        const names = map(items, 'name');
        return names.join(', ');
    }
    getModel(device) {
        const hardware = this.getHardware(device);
        return hardware && hardware.model;
    }
    getProperName(device) {
        const { id, name } = device;
        return name ? name : this.translateService.instant('Device {{id}}', { id });
    }
    getSerialNumber(device) {
        const hardware = this.getHardware(device);
        const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    }
    getHardware(device) {
        const hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    }
    isVendme(device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    }
}
ColumnUtilService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ColumnUtilService_Factory() { return new ColumnUtilService(i0.ɵɵinject(i1.TranslateService)); }, token: ColumnUtilService, providedIn: "root" });
ColumnUtilService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ColumnUtilService.ctorParameters = () => [
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldmljZS1ncmlkL2NvbHVtbnMvY29sdW1uLXV0aWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQzs7O0FBRWhEOztHQUVHO0FBR0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUFzQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUFHLENBQUM7SUFFNUQsYUFBYSxDQUFDLE1BQXNCO1FBQ2xDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDMUMsQ0FBQztJQUVELE9BQU8sQ0FBQyxhQUE2QixFQUFFLE1BQU0sR0FBRyxJQUFJO1FBQ2xELElBQUksYUFBYSxDQUFDLGlCQUFpQixJQUFJLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRTtZQUN2RSxPQUFPLEdBQUcsTUFBTSxTQUFTLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUM3QztRQUNELE9BQU8sR0FBRyxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxlQUFlLENBQUMsTUFBc0IsRUFBRSxnQkFBa0M7UUFDeEUsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUM5RCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDbEUsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDcEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQXNCO1FBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBRUQsYUFBYSxDQUFDLE1BQXNCO1FBQ2xDLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsZUFBZSxDQUFDLE1BQXNCO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUM3RSxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU8sV0FBVyxDQUFDLE1BQXNCO1FBQ3hDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDaEQsQ0FBQyxDQUFDLDBEQUEwRDtZQUM1RCxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQ25CLE9BQU8sTUFBTSxJQUFJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTyxRQUFRLENBQUMsTUFBc0I7UUFDckMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLHdDQUF3QyxDQUFDO0lBQ2xFLENBQUM7Ozs7WUFsREYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBUHpCLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgbWFwLCByZW1vdmUsIHNvcnRCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbi8qKlxuICogU2VydmljZSBjb250YWlucyBsb2dpYyBleHRyYWN0ZWQgZnJvbSB0aGUgZGV2aWNlLWdyaWQgc2VydmljZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5IE1UTS00MDIzOS5cbiAqL1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIENvbHVtblV0aWxTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cbiAgZ2V0QWxhcm1zSHJlZihkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5nZXRIcmVmKGRldmljZSl9L2FsYXJtc2A7XG4gIH1cblxuICBnZXRIcmVmKGdyb3VwT3JEZXZpY2U6IElNYW5hZ2VkT2JqZWN0LCBwcmVmaXggPSAnIy8nKTogc3RyaW5nIHtcbiAgICBpZiAoZ3JvdXBPckRldmljZS5jOHlfSXNEZXZpY2VHcm91cCB8fCBncm91cE9yRGV2aWNlLmM4eV9Jc0R5bmFtaWNHcm91cCkge1xuICAgICAgcmV0dXJuIGAke3ByZWZpeH1ncm91cC8ke2dyb3VwT3JEZXZpY2UuaWR9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3ByZWZpeH1kZXZpY2UvJHtncm91cE9yRGV2aWNlLmlkfWA7XG4gIH1cblxuICBnZXRQYXJlbnRzTmFtZXMoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCwgZmVhdHVyZWRQYXJlbnRJZD86IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgYXNzZXRQYXJlbnRzUmVmZXJlbmNlcyA9IGRldmljZS5hc3NldFBhcmVudHMucmVmZXJlbmNlcztcbiAgICBjb25zdCBhc3NldFBhcmVudHMgPSBtYXAoYXNzZXRQYXJlbnRzUmVmZXJlbmNlcywgJ21hbmFnZWRPYmplY3QnKTtcbiAgICBjb25zdCBzb3J0ZWRCeU5hbWUgPSBzb3J0QnkoYXNzZXRQYXJlbnRzLCBbJ25hbWUnXSk7XG4gICAgY29uc3QgZmVhdHVyZWRJdGVtcyA9IHJlbW92ZShzb3J0ZWRCeU5hbWUsIHsgaWQ6IGZlYXR1cmVkUGFyZW50SWQgfSk7XG4gICAgY29uc3QgaXRlbXMgPSBmZWF0dXJlZEl0ZW1zLmNvbmNhdChzb3J0ZWRCeU5hbWUpO1xuICAgIGNvbnN0IG5hbWVzID0gbWFwKGl0ZW1zLCAnbmFtZScpO1xuICAgIHJldHVybiBuYW1lcy5qb2luKCcsICcpO1xuICB9XG5cbiAgZ2V0TW9kZWwoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgaGFyZHdhcmUgPSB0aGlzLmdldEhhcmR3YXJlKGRldmljZSk7XG4gICAgcmV0dXJuIGhhcmR3YXJlICYmIGhhcmR3YXJlLm1vZGVsO1xuICB9XG5cbiAgZ2V0UHJvcGVyTmFtZShkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGlkLCBuYW1lIH0gPSBkZXZpY2U7XG4gICAgcmV0dXJuIG5hbWUgPyBuYW1lIDogdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoJ0RldmljZSB7e2lkfX0nLCB7IGlkIH0pO1xuICB9XG5cbiAgZ2V0U2VyaWFsTnVtYmVyKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhhcmR3YXJlID0gdGhpcy5nZXRIYXJkd2FyZShkZXZpY2UpO1xuICAgIGNvbnN0IHNlcmlhbFByb3BlcnR5TmFtZSA9IHRoaXMuaXNWZW5kbWUoZGV2aWNlKSA/ICdzZXJpYWwnIDogJ3NlcmlhbE51bWJlcic7XG4gICAgcmV0dXJuIGhhcmR3YXJlICYmIGhhcmR3YXJlW3NlcmlhbFByb3BlcnR5TmFtZV07XG4gIH1cblxuICBwcml2YXRlIGdldEhhcmR3YXJlKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBhbnkge1xuICAgIGNvbnN0IGhhcmR3YXJlUHJvcGVydHlOYW1lID0gdGhpcy5pc1ZlbmRtZShkZXZpY2UpXG4gICAgICA/ICdjb21fbnNuX3N0YXJ0dXBzX3ZlbmRtZV9mcmFnbWVudHNfVmVuZGluZ01hY2hpbmVUeXBlSW5mbydcbiAgICAgIDogJ2M4eV9IYXJkd2FyZSc7XG4gICAgcmV0dXJuIGRldmljZSAmJiBkZXZpY2VbaGFyZHdhcmVQcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1ZlbmRtZShkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgcmV0dXJuIGRldmljZS50eXBlID09PSAnY29tX25zbl9zdGFydHVwc192ZW5kbWVfVmVuZGluZ01hY2hpbmUnO1xuICB9XG59XG4iXX0=