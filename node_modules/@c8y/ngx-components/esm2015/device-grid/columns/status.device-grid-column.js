import { BaseDeviceGridColumn } from './base.device-grid-column';
import { StatusCellRendererComponent } from './status.cell-renderer.component';
import { PushStatus, SendStatus, gettext } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
export class StatusDeviceGridColumn extends BaseDeviceGridColumn {
    constructor() {
        super();
        const responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';
        const responseIntervalLessThanOrEqualTo0 = { [responseIntervalPath]: { __le: 0 } };
        const responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };
        const availabilityStatusPath = 'c8y_Availability.status';
        const availabilityStatusAvailable = { [availabilityStatusPath]: SendStatus.AVAILABLE };
        const availabilityStatusUnavailable = { [availabilityStatusPath]: SendStatus.UNAVAILABLE };
        const availabilityStatusMaintenance = { [availabilityStatusPath]: SendStatus.MAINTENANCE };
        const availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };
        const connectionStatusPath = 'c8y_Connection.status';
        const connectionStatusConnected = { [connectionStatusPath]: PushStatus.CONNECTED };
        const connectionStatusDisconnected = { [connectionStatusPath]: PushStatus.DISCONNECTED };
        const connectionStatusMaintenance = { [connectionStatusPath]: PushStatus.MAINTENANCE };
        const deviceUnderMaintenance = {
            __or: [
                responseIntervalLessThanOrEqualTo0,
                availabilityStatusMaintenance,
                connectionStatusMaintenance
            ]
        };
        const deviceNotUnderMaintenance = {
            // using __and of __nots because backend does not support __not with __ors
            __and: [
                { __not: responseIntervalLessThanOrEqualTo0 },
                { __not: availabilityStatusMaintenance },
                { __not: connectionStatusMaintenance }
            ]
        };
        this.name = 'status';
        this.header = gettext('Status');
        this.dataType = "icon" /* Icon */;
        this.cellRendererComponent = StatusCellRendererComponent;
        this.resizable = false;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    sendStatus: {
                        title: gettext('Show devices with send status'),
                        type: 'object',
                        properties: {
                            sendOnline: {
                                type: 'switch',
                                title: gettext('Online')
                            },
                            sendOffline: {
                                type: 'switch',
                                title: gettext('Offline')
                            },
                            sendUnknown: {
                                type: 'switch',
                                title: gettext('Unknown')
                            },
                            sendNotMonitored: {
                                type: 'switch',
                                title: gettext('Not monitored')
                            },
                        }
                    },
                    pushStatus: {
                        title: gettext('Show devices with push status'),
                        type: 'object',
                        properties: {
                            pushOnline: {
                                type: 'switch',
                                title: gettext('Online')
                            },
                            pushOffline: {
                                type: 'switch',
                                title: gettext('Offline')
                            },
                            pushNotMonitored: {
                                type: 'switch',
                                title: gettext('Not monitored')
                            },
                        }
                    },
                    maintenanceStatus: {
                        title: gettext('Show devices with maintenance status'),
                        type: 'object',
                        properties: {
                            maintenance: {
                                type: 'switch',
                                title: gettext('Device is under maintenance')
                            }
                        }
                    }
                }
            },
            formGroup: new FormGroup({}),
            getFilter(model) {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                const filter = {};
                const ors = [];
                if ((_a = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _a === void 0 ? void 0 : _a.sendOnline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]
                    });
                }
                if ((_b = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _b === void 0 ? void 0 : _b.sendOffline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]
                    });
                }
                if ((_c = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _c === void 0 ? void 0 : _c.sendUnknown) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]
                    });
                }
                if (((_d = model === null || model === void 0 ? void 0 : model.sendStatus) === null || _d === void 0 ? void 0 : _d.sendNotMonitored) || ((_e = model === null || model === void 0 ? void 0 : model.pushStatus) === null || _e === void 0 ? void 0 : _e.pushNotMonitored)) {
                    ors.push(responseIntervalNotDefined);
                }
                if ((_f = model === null || model === void 0 ? void 0 : model.pushStatus) === null || _f === void 0 ? void 0 : _f.pushOnline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, connectionStatusConnected]
                    });
                }
                if ((_g = model === null || model === void 0 ? void 0 : model.pushStatus) === null || _g === void 0 ? void 0 : _g.pushOffline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]
                    });
                }
                if ((_h = model === null || model === void 0 ? void 0 : model.maintenanceStatus) === null || _h === void 0 ? void 0 : _h.maintenance) {
                    ors.push(deviceUnderMaintenance);
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: availabilityStatusPath }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,