import { Component, HostListener } from '@angular/core';
import { cloneDeep } from 'lodash-es';
import { C8yJSONSchema, FilteringFormRendererContext } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
export class BaseFilteringFormRendererComponent {
    constructor(context, jsonschema) {
        this.context = context;
        this.jsonschema = jsonschema;
    }
    onEnterKeyDown(event) {
        event.stopPropagation();
        this.applyFilter();
    }
    onEscapeKeyDown(event) {
        event.stopPropagation();
        this.resetFilter();
    }
    ngOnInit() {
        const column = this.context.property;
        if (column.filteringConfig.fields) {
            this.fields = cloneDeep(column.filteringConfig.fields);
        }
        else if (!column.filteringConfig.fields && column.filteringConfig.schema) {
            this.schema = cloneDeep(column.filteringConfig.schema);
            this.fields = [this.jsonschema.toFieldConfig(this.schema)];
        }
        else {
            throw new Error(`Neither fields nor schema configuration provided for Formly.`);
        }
        this.form = column.filteringConfig.formGroup || new FormGroup({});
        this.model = column.externalFilterQuery || column.filteringConfig.model || {};
        this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.form.value
        });
    }
    resetFilter() {
        this.context.resetFilter();
    }
}
BaseFilteringFormRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\"></formly-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"(form.pristine && form.untouched) || form.invalid\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
            },] }
];
BaseFilteringFormRendererComponent.ctorParameters = () => [
    { type: FilteringFormRendererContext },
    { type: C8yJSONSchema }
];
BaseFilteringFormRendererComponent.propDecorators = {
    onEnterKeyDown: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['keydown.escape', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZpY2UtZ3JpZC9jb2x1bW5zL2Jhc2UuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSw0QkFBNEIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRWpGLE9BQU8sRUFBYSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU10RCxNQUFNLE9BQU8sa0NBQWtDO0lBUTdDLFlBQ1MsT0FBcUMsRUFDckMsVUFBeUI7UUFEekIsWUFBTyxHQUFQLE9BQU8sQ0FBOEI7UUFDckMsZUFBVSxHQUFWLFVBQVUsQ0FBZTtJQUMvQixDQUFDO0lBRXVDLGNBQWMsQ0FBQyxLQUFvQjtRQUM1RSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFDMkMsZUFBZSxDQUFDLEtBQW9CO1FBQzlFLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLE1BQU0sR0FBcUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFFdkQsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hEO2FBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFO1lBQzFFLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7U0FDakY7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxJQUFJLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxJQUFLLEVBQUUsQ0FBQztRQUMvRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsWUFBWSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUN6RSxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQ3ZCLG1CQUFtQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztTQUNyQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7O1lBbERGLFNBQVMsU0FBQztnQkFDVCxxbEJBQTREO2FBQzdEOzs7WUFQdUIsNEJBQTRCO1lBQTNDLGFBQWE7Ozs2QkFxQm5CLFlBQVksU0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7OEJBSXhDLFlBQVksU0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBDOHlKU09OU2NoZW1hLCBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb250ZXh0fSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuLi9kZXZpY2UtZ3JpZC5tb2RlbCc7XG5pbXBvcnQgeyBGb3JtQXJyYXksIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZVVybDogJy4vYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQmFzZUZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHNjaGVtYTtcbiAgZm9ybTogRm9ybUdyb3VwO1xuICBtb2RlbDtcbiAgb3B0aW9ucztcblxuICBmaWVsZHM6IEZvcm1seUZpZWxkQ29uZmlnW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNvbnRleHQ6IEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbnRleHQsXG4gICAgcHVibGljIGpzb25zY2hlbWE6IEM4eUpTT05TY2hlbWEsXG4gICkge31cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVudGVyJywgWyckZXZlbnQnXSkgb25FbnRlcktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmFwcGx5RmlsdGVyKCk7XG4gIH1cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5lc2NhcGUnLCBbJyRldmVudCddKSBvbkVzY2FwZUtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnJlc2V0RmlsdGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBjb2x1bW46IERldmljZUdyaWRDb2x1bW4gPSB0aGlzLmNvbnRleHQucHJvcGVydHk7XG5cbiAgICBpZiAoY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5maWVsZHMpIHtcbiAgICAgIHRoaXMuZmllbGRzID0gY2xvbmVEZWVwKGNvbHVtbi5maWx0ZXJpbmdDb25maWcuZmllbGRzKTtcbiAgICB9IGVsc2UgaWYgKCFjb2x1bW4uZmlsdGVyaW5nQ29uZmlnLmZpZWxkcyAmJiBjb2x1bW4uZmlsdGVyaW5nQ29uZmlnLnNjaGVtYSkge1xuICAgICAgdGhpcy5zY2hlbWEgPSBjbG9uZURlZXAoY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5zY2hlbWEpO1xuICAgICAgdGhpcy5maWVsZHMgPSBbdGhpcy5qc29uc2NoZW1hLnRvRmllbGRDb25maWcodGhpcy5zY2hlbWEpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBOZWl0aGVyIGZpZWxkcyBub3Igc2NoZW1hIGNvbmZpZ3VyYXRpb24gcHJvdmlkZWQgZm9yIEZvcm1seS5gKTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm0gPSBjb2x1bW4uZmlsdGVyaW5nQ29uZmlnLmZvcm1Hcm91cCB8fCBuZXcgRm9ybUdyb3VwKHt9KTtcbiAgICB0aGlzLm1vZGVsID0gY29sdW1uLmV4dGVybmFsRmlsdGVyUXVlcnkgfHwgY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5tb2RlbCB8fCAge307XG4gICAgdGhpcy5vcHRpb25zID0geyBmb3JtRGVmYXVsdHM6IHsgbmdNb2RlbE9wdGlvbnM6IHsgZGVib3VuY2U6IDEwMCB9IH0gfTtcbiAgfVxuXG4gIGFwcGx5RmlsdGVyKCkge1xuICAgIHRoaXMuY29udGV4dC5hcHBseUZpbHRlcih7XG4gICAgICBleHRlcm5hbEZpbHRlclF1ZXJ5OiB0aGlzLmZvcm0udmFsdWVcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0RmlsdGVyKCkge1xuICAgIHRoaXMuY29udGV4dC5yZXNldEZpbHRlcigpO1xuICB9XG59XG4iXX0=