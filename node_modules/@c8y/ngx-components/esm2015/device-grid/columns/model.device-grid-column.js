import { BaseDeviceGridColumn } from './base.device-grid-column';
import { ModelCellRendererComponent } from './model.cell-renderer.component';
import { gettext, getBasicInputArrayFormFieldConfig } from '@c8y/ngx-components';
export class ModelDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const hardwareModelPath = 'c8y_Hardware.model';
        const vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';
        this.name = 'model';
        this.header = gettext('Model');
        this.cellRendererComponent = ModelCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            fields: getBasicInputArrayFormFieldConfig({
                key: 'models',
                label: gettext('Show items with model'),
                addText: gettext('Add next`model`'),
                tooltip: gettext('Use * as a wildcard character'),
                placeholder: 'NTC-220'
            }),
            getFilter(model) {
                const filter = {};
                if (model.models.length) {
                    filter.__or = {
                        [hardwareModelPath]: { __in: model.models },
                        [vendingModelPath]: { __in: model.models }
                    };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuZGV2aWNlLWdyaWQtY29sdW1uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2aWNlLWdyaWQvY29sdW1ucy9tb2RlbC5kZXZpY2UtZ3JpZC1jb2x1bW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsaUNBQWlDLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRixNQUFNLE9BQU8scUJBQXNCLFNBQVEsb0JBQW9CO0lBQzdELFlBQVksbUJBQWtDO1FBQzVDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTNCLE1BQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQUM7UUFDL0MsTUFBTSxnQkFBZ0IsR0FBRyxnRUFBZ0UsQ0FBQztRQUUxRixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMscUJBQXFCLEdBQUcsMEJBQTBCLENBQUM7UUFFeEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUUsaUNBQWlDLENBQUM7Z0JBQ3hDLEdBQUcsRUFBRSxRQUFRO2dCQUNiLEtBQUssRUFBRSxPQUFPLENBQUMsdUJBQXVCLENBQUM7Z0JBQ3ZDLE9BQU8sRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUM7Z0JBQ25DLE9BQU8sRUFBRSxPQUFPLENBQUMsK0JBQStCLENBQUM7Z0JBQ2pELFdBQVcsRUFBRSxTQUFTO2FBQ3ZCLENBQUM7WUFDRixTQUFTLENBQUMsS0FBVTtnQkFDbEIsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO2dCQUN2QixJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUN2QixNQUFNLENBQUMsSUFBSSxHQUFHO3dCQUNaLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFO3dCQUMzQyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRTtxQkFDM0MsQ0FBQztpQkFDSDtnQkFDRCxPQUFPLE1BQU0sQ0FBQztZQUNoQixDQUFDO1NBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLENBQUM7U0FDOUUsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9iYXNlLmRldmljZS1ncmlkLWNvbHVtbic7XG5pbXBvcnQgeyBNb2RlbENlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vbW9kZWwuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgQ29sdW1uQ29uZmlnLCBnZXRCYXNpY0lucHV0QXJyYXlGb3JtRmllbGRDb25maWcgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuZXhwb3J0IGNsYXNzIE1vZGVsRGV2aWNlR3JpZENvbHVtbiBleHRlbmRzIEJhc2VEZXZpY2VHcmlkQ29sdW1uIHtcbiAgY29uc3RydWN0b3IoaW5pdGlhbENvbHVtbkNvbmZpZz86IENvbHVtbkNvbmZpZykge1xuICAgIHN1cGVyKGluaXRpYWxDb2x1bW5Db25maWcpO1xuXG4gICAgY29uc3QgaGFyZHdhcmVNb2RlbFBhdGggPSAnYzh5X0hhcmR3YXJlLm1vZGVsJztcbiAgICBjb25zdCB2ZW5kaW5nTW9kZWxQYXRoID0gJ2NvbV9uc25fc3RhcnR1cHNfdmVuZG1lX2ZyYWdtZW50c19WZW5kaW5nTWFjaGluZVR5cGVJbmZvLm1vZGVsJztcblxuICAgIHRoaXMubmFtZSA9ICdtb2RlbCc7XG4gICAgdGhpcy5oZWFkZXIgPSBnZXR0ZXh0KCdNb2RlbCcpO1xuICAgIHRoaXMuY2VsbFJlbmRlcmVyQ29tcG9uZW50ID0gTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuICAgIHRoaXMuZmlsdGVyaW5nQ29uZmlnID0ge1xuICAgICAgZmllbGRzOiBnZXRCYXNpY0lucHV0QXJyYXlGb3JtRmllbGRDb25maWcoe1xuICAgICAgICBrZXk6ICdtb2RlbHMnLFxuICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU2hvdyBpdGVtcyB3aXRoIG1vZGVsJyksXG4gICAgICAgIGFkZFRleHQ6IGdldHRleHQoJ0FkZCBuZXh0YG1vZGVsYCcpLFxuICAgICAgICB0b29sdGlwOiBnZXR0ZXh0KCdVc2UgKiBhcyBhIHdpbGRjYXJkIGNoYXJhY3RlcicpLFxuICAgICAgICBwbGFjZWhvbGRlcjogJ05UQy0yMjAnXG4gICAgICB9KSxcbiAgICAgIGdldEZpbHRlcihtb2RlbDogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgaWYgKG1vZGVsLm1vZGVscy5sZW5ndGgpIHtcbiAgICAgICAgICBmaWx0ZXIuX19vciA9IHtcbiAgICAgICAgICAgIFtoYXJkd2FyZU1vZGVsUGF0aF06IHsgX19pbjogbW9kZWwubW9kZWxzIH0sXG4gICAgICAgICAgICBbdmVuZGluZ01vZGVsUGF0aF06IHsgX19pbjogbW9kZWwubW9kZWxzIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc29ydGFibGUgPSB0cnVlO1xuICAgIHRoaXMuc29ydGluZ0NvbmZpZyA9IHtcbiAgICAgIHBhdGhTb3J0aW5nQ29uZmlnczogW3sgcGF0aDogaGFyZHdhcmVNb2RlbFBhdGggfSwgeyBwYXRoOiB2ZW5kaW5nTW9kZWxQYXRoIH1dXG4gICAgfTtcbiAgfVxufVxuIl19