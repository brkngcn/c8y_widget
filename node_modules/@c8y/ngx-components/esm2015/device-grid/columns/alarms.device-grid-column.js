import { BaseDeviceGridColumn } from './base.device-grid-column';
import { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
import { map } from 'lodash-es';
export class AlarmsDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'alarms';
        this.header = gettext('Alarms');
        this.cellRendererComponent = AlarmsCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    alarm: {
                        type: 'object',
                        title: gettext('Show items'),
                        properties: {
                            critical: {
                                type: 'switch',
                                title: gettext('With active critical alarms')
                            },
                            major: {
                                type: 'switch',
                                title: gettext('With active major alarms')
                            },
                            minor: {
                                type: 'switch',
                                title: gettext('With active minor alarms')
                            },
                            warning: {
                                type: 'switch',
                                title: gettext('With active warnings')
                            },
                            none: {
                                type: 'switch',
                                title: gettext('With no active alarms or warnings')
                            }
                        }
                    },
                }
            },
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model.alarm.critical) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                }
                if (model.alarm.major) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                }
                if (model.alarm.minor) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                }
                if (model.alarm.warning) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                }
                if (model.alarm.none) {
                    ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                    ors.push({
                        __and: map(['critical', 'major', 'minor', 'warning'], sev => {
                            const zero = {};
                            const has = { __not: { __has: undefined } };
                            const key = `c8y_ActiveAlarmsStatus.${sev}`;
                            zero[key] = 0;
                            has.__not.__has = key;
                            return { __or: [zero, has] };
                        })
                    });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [
                { path: 'c8y_ActiveAlarmsStatus.critical' },
                { path: 'c8y_ActiveAlarmsStatus.major' },
                { path: 'c8y_ActiveAlarmsStatus.minor' },
                { path: 'c8y_ActiveAlarmsStatus.warning' }
            ]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldmljZS1ncmlkL2NvbHVtbnMvYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLHFCQUFxQixDQUFDO0FBQzVELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFaEMsTUFBTSxPQUFPLHNCQUF1QixTQUFRLG9CQUFvQjtJQUM5RCxZQUFZLG1CQUFrQztRQUM1QyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsMkJBQTJCLENBQUM7UUFFekQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLEtBQUssRUFBRTt3QkFDTCxJQUFJLEVBQUUsUUFBUTt3QkFDZCxLQUFLLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQzt3QkFDNUIsVUFBVSxFQUFFOzRCQUNWLFFBQVEsRUFBRTtnQ0FDUixJQUFJLEVBQUUsUUFBUTtnQ0FDZCxLQUFLLEVBQUUsT0FBTyxDQUFDLDZCQUE2QixDQUFDOzZCQUM5Qzs0QkFDRCxLQUFLLEVBQUU7Z0NBQ0wsSUFBSSxFQUFFLFFBQVE7Z0NBQ2QsS0FBSyxFQUFFLE9BQU8sQ0FB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Z0NBQWdDLEVBQUU7YUFDM0M7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZURldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuL2Jhc2UuZGV2aWNlLWdyaWQtY29sdW1uJztcbmltcG9ydCB7IEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vYWxhcm1zLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IGdldHRleHQsIENvbHVtbkNvbmZpZyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuZXhwb3J0IGNsYXNzIEFsYXJtc0RldmljZUdyaWRDb2x1bW4gZXh0ZW5kcyBCYXNlRGV2aWNlR3JpZENvbHVtbiB7XG4gIGNvbnN0cnVjdG9yKGluaXRpYWxDb2x1bW5Db25maWc/OiBDb2x1bW5Db25maWcpIHtcbiAgICBzdXBlcihpbml0aWFsQ29sdW1uQ29uZmlnKTtcbiAgICB0aGlzLm5hbWUgPSAnYWxhcm1zJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ0FsYXJtcycpO1xuICAgIHRoaXMuY2VsbFJlbmRlcmVyQ29tcG9uZW50ID0gQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50O1xuXG4gICAgdGhpcy5maWx0ZXJhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHtcbiAgICAgIHNjaGVtYToge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGFsYXJtOiB7XG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdTaG93IGl0ZW1zJyksXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIGNyaXRpY2FsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1dpdGggYWN0aXZlIGNyaXRpY2FsIGFsYXJtcycpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1ham9yOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1dpdGggYWN0aXZlIG1ham9yIGFsYXJtcycpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1pbm9yOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1dpdGggYWN0aXZlIG1pbm9yIGFsYXJtcycpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHdhcm5pbmc6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnV2l0aCBhY3RpdmUgd2FybmluZ3MnKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBub25lOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1dpdGggbm8gYWN0aXZlIGFsYXJtcyBvciB3YXJuaW5ncycpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXRGaWx0ZXIobW9kZWwpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgY29uc3Qgb3JzID0gW107XG4gICAgICAgIGlmIChtb2RlbC5hbGFybS5jcml0aWNhbCkge1xuICAgICAgICAgIG9ycy5wdXNoKHsgJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMuY3JpdGljYWwnOiB7IF9fZ3Q6IDAgfSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwuYWxhcm0ubWFqb3IpIHtcbiAgICAgICAgICBvcnMucHVzaCh7ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1ham9yJzogeyBfX2d0OiAwIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLmFsYXJtLm1pbm9yKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5taW5vcic6IHsgX19ndDogMCB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlbC5hbGFybS53YXJuaW5nKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy53YXJuaW5nJzogeyBfX2d0OiAwIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLmFsYXJtLm5vbmUpIHtcbiAgICAgICAgICBvcnMucHVzaCh7IF9fbm90OiB7IF9faGFzOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cycgfSB9KTtcbiAgICAgICAgICBvcnMucHVzaCh7XG4gICAgICAgICAgICBfX2FuZDogbWFwKFsnY3JpdGljYWwnLCAnbWFqb3InLCAnbWlub3InLCAnd2FybmluZyddLCBzZXYgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB6ZXJvID0ge307XG4gICAgICAgICAgICAgIGNvbnN0IGhhcyA9IHsgX19ub3Q6IHsgX19oYXM6IHVuZGVmaW5lZCB9IH07XG4gICAgICAgICAgICAgIGNvbnN0IGtleSA9IGBjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLiR7c2V2fWA7XG4gICAgICAgICAgICAgIHplcm9ba2V5XSA9IDA7XG4gICAgICAgICAgICAgIGhhcy5fX25vdC5fX2hhcyA9IGtleTtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgX19vcjogW3plcm8sIGhhc10gfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBmaWx0ZXIuX19vciA9IG9ycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFtcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5jcml0aWNhbCcgfSxcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5tYWpvcicgfSxcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5taW5vcicgfSxcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy53YXJuaW5nJyB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19