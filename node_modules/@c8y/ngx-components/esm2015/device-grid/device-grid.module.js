import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule, DataGridModule, DeviceStatusModule, DynamicFormsModule, FormsModule } from '@c8y/ngx-components';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';
import { BaseFilteringFormRendererComponent } from './columns/base.filtering-form-renderer.component';
import { GroupCellRendererComponent } from './columns/group.cell-renderer.component';
import { GroupFilteringFormRendererComponent } from './columns/group.filtering-form-renderer.component';
import { ModelCellRendererComponent } from './columns/model.cell-renderer.component';
import { NameCellRendererComponent } from './columns/name.cell-renderer.component';
import { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';
import { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';
import { StatusCellRendererComponent } from './columns/status.cell-renderer.component';
import { DecoratorService } from './decorator.service';
import { DeviceGridComponent } from './device-grid.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './decorator.service';
export class DeviceGridModule {
    constructor(service) {
        this.service = service;
    }
}
DeviceGridModule.ɵfac = function DeviceGridModule_Factory(t) { return new (t || DeviceGridModule)(ɵngcc0.ɵɵinject(ɵngcc1.DecoratorService)); };
DeviceGridModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceGridModule });
DeviceGridModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule,
            DeviceStatusModule,
            DataGridModule,
            AssetSelectorModule,
            DynamicFormsModule,
            RouterModule
        ]] });
DeviceGridModule.ctorParameters = () => [
    { type: DecoratorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    DeviceStatusModule,
                    DataGridModule,
                    AssetSelectorModule,
                    DynamicFormsModule,
                    RouterModule
                ],
                declarations: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                exports: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                entryComponents: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ]
            }]
    }], function () { return [{ type: ɵngcc1.DecoratorService }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceGridModule, { declarations: function () { return [DeviceGridComponent,
        BaseFilteringFormRendererComponent,
        GroupFilteringFormRendererComponent,
        StatusCellRendererComponent,
        NameCellRendererComponent,
        ModelCellRendererComponent,
        SerialNumberCellRendererComponent,
        GroupCellRendererComponent,
        RegistrationDateCellRendererComponent,
        AlarmsCellRendererComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        DeviceStatusModule,
        DataGridModule,
        AssetSelectorModule,
        DynamicFormsModule,
        RouterModule]; }, exports: function () { return [DeviceGridComponent,
        BaseFilteringFormRendererComponent,
        GroupFilteringFormRendererComponent,
        StatusCellRendererComponent,
        NameCellRendererComponent,
        ModelCellRendererComponent,
        SerialNumberCellRendererComponent,
        GroupCellRendererComponent,
        RegistrationDateCellRendererComponent,
        AlarmsCellRendererComponent]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZpY2UtZ3JpZC9kZXZpY2UtZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLFlBQVksRUFDWixjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixXQUFXLEVBQ1osTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RixPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUN4RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNuRixPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM1RyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNwRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBaUQ5RCxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBQUUsWUFBbUIsT0FBeUI7QUFBSSxRQUE3QixZQUFPLEdBQVAsT0FBTyxDQUFrQjtBQUFDLElBQUUsQ0FBQztBQUNsRDs0Q0FqREMsUUFBUSxTQUFDLGtCQUNSLE9BQU8sRUFBRSxzQkFDUCxZQUFZO0FBQ1osV0FBVyxzQkFDWCxrQkFBa0Isc0JBQ2xCLGNBQWM7a0JBQ2QsbUJBQW1CLHNCQUNuQjtDQUFrQixzQkFDbEI7U0FBWTtFQUNiLGtCQUNEO0FBQVksRUFBRSxzQkFDWjtlQUFtQjtJQUNuQjtNQUFrQztHQUNsQyxXQWtDQzt1QkFsQ2tDLHZCQWtDakM7R0FqQ0YsMkJBQTJCLDlCQWtDZixZQW5EUCxnQkFBZ0I7QUFBRztrQkFrQnhCLHlCQUF5QixzQkFDekIsMEJBQTBCO0NBQzFCO1VBQWlDO2VBQ2pDO2NBQTBCO0VBQzFCO01BQXFDLHNCQUNyQztlQUEyQixrQkFDNUI7ZUFDRCxPQUFPLEVBQUU7S0FDUCxtQkFBbUI7TUFDbkI7T0FBa0M7VUFDbEM7YUFBbUMsc0JBQ25DO3FCQUEyQixzQkFDM0I7WUFBeUIsc0JBQ3pCO0dBQTBCLHNCQUMxQjtTQUFpQyxzQkFDakM7VUFBMEIsc0JBQzFCO3FCQUFxQyxzQkFDckM7ZUFBMkIsa0JBQzVCO0dBQ0QsZUFBZSxFQUFFLHNCQUNmO0VBQW1CLHNCQUNuQjtVQUFrQzthQUNsQztxQkFBbUM7RUFDbkMsMkJBQTJCLHNCQUMzQjtvQkFBeUIsc0JBQ3pCO1dBQTBCLHNCQUMxQjtpQkFBaUMsc0JBQ2pDO2tCQUEwQixzQkFDMUI7NkJBQXFDLHNCQUNyQzt1QkFBMkIsa0JBQzVCO09BQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lEQWpENkI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgQ29tbW9uTW9kdWxlLFxuICBEYXRhR3JpZE1vZHVsZSxcbiAgRGV2aWNlU3RhdHVzTW9kdWxlLFxuICBEeW5hbWljRm9ybXNNb2R1bGUsXG4gIEZvcm1zTW9kdWxlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQXNzZXRTZWxlY3Rvck1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvcic7XG5pbXBvcnQgeyBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvYWxhcm1zLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvZ3JvdXAuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvZ3JvdXAuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL21vZGVsLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvbmFtZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL3JlZ2lzdHJhdGlvbi1kYXRlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9zZXJpYWwtbnVtYmVyLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9zdGF0dXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGVjb3JhdG9yU2VydmljZSB9IGZyb20gJy4vZGVjb3JhdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZENvbXBvbmVudCB9IGZyb20gJy4vZGV2aWNlLWdyaWQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBEZXZpY2VTdGF0dXNNb2R1bGUsXG4gICAgRGF0YUdyaWRNb2R1bGUsXG4gICAgQXNzZXRTZWxlY3Rvck1vZHVsZSxcbiAgICBEeW5hbWljRm9ybXNNb2R1bGUsXG4gICAgUm91dGVyTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIERldmljZUdyaWRDb21wb25lbnQsXG4gICAgQmFzZUZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBNb2RlbENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgUmVnaXN0cmF0aW9uRGF0ZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIERldmljZUdyaWRDb21wb25lbnQsXG4gICAgQmFzZUZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBNb2RlbENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgUmVnaXN0cmF0aW9uRGF0ZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnRcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgICBCYXNlRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIERldmljZUdyaWRNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2VydmljZTogRGVjb3JhdG9yU2VydmljZSkge31cbn1cbiJdfQ==