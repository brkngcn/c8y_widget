import { NgModule } from '@angular/core';
import { CoreModule, gettext, HOOK_COMPONENTS } from '@c8y/ngx-components';
import { DatapointSelectorModule } from '@c8y/ngx-components/datapoint-selector';
import { IconSelectorModule } from '@c8y/ngx-components/icon-selector';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { KpiWidgetConfigComponent } from './kpi-widget-config/kpi-widget-config.component';
import { KpiWidgetViewComponent } from './kpi-widget-view/kpi-widget-view.component';
// import for the preview img to get into the build.
let previewImage = '';
try {
    // tslint:disable-next-line: no-var-requires
    previewImage = require('@c8y/style/img/kpi-widget.png');
}
catch (ex) {
    // intended empty
}
const ɵ0 = [
    {
        id: 'kpi.widget',
        label: gettext('KPI Widget'),
        description: gettext('Displays the last measurement value of a device.'),
        component: KpiWidgetViewComponent,
        configComponent: KpiWidgetConfigComponent,
        previewImage,
        data: {
            settings: {
                noNewWidgets: false,
                widgetDefaults: {
                    _width: 2,
                    _height: 2
                },
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
];
export class KpiWidgetModule {
}
KpiWidgetModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule],
                declarations: [KpiWidgetViewComponent, KpiWidgetConfigComponent],
                providers: [
                    {
                        provide: HOOK_COMPONENTS,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3BpLXdpZGdldC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi93aWRnZXRzL2twaS13aWRnZXQva3BpLXdpZGdldC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsVUFBVSxFQUVWLE9BQU8sRUFDUCxlQUFlLEVBQ2hCLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDakYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRXJGLG9EQUFvRDtBQUNwRCxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDdEIsSUFBSTtJQUNGLDRDQUE0QztJQUM1QyxZQUFZLEdBQUcsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7Q0FDekQ7QUFBQyxPQUFPLEVBQUUsRUFBRTtJQUNYLGlCQUFpQjtDQUNsQjtXQVFlO0lBQ1I7UUFDRSxFQUFFLEVBQUUsWUFBWTtRQUNoQixLQUFLLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUM1QixXQUFXLEVBQUUsT0FBTyxDQUFDLGtEQUFrRCxDQUFDO1FBQ3hFLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsZUFBZSxFQUFFLHdCQUF3QjtRQUN6QyxZQUFZO1FBQ1osSUFBSSxFQUFFO1lBQ0osUUFBUSxFQUFFO2dCQUNSLFlBQVksRUFBRSxLQUFLO2dCQUNuQixjQUFjLEVBQUU7b0JBQ2QsTUFBTSxFQUFFLENBQUM7b0JBQ1QsT0FBTyxFQUFFLENBQUM7aUJBQ1g7Z0JBQ0QsR0FBRyxFQUFFO29CQUNILE9BQU8sRUFBRTt3QkFDUCxjQUFjLEVBQUUsSUFBSTt3QkFDcEIsZ0JBQWdCLEVBQUUsS0FBSztxQkFDeEI7aUJBQ0Y7YUFDRjtTQUNxQjtLQUN6QjtDQUM4QjtBQUt2QyxNQUFNLE9BQU8sZUFBZTs7O1lBbkMzQixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLHVCQUF1QixFQUFFLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztnQkFDakYsWUFBWSxFQUFFLENBQUMsc0JBQXNCLEVBQUUsd0JBQXdCLENBQUM7Z0JBQ2hFLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsZUFBZTt3QkFDeEIsUUFBUSxJQXdCeUI7d0JBQ2pDLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ29yZU1vZHVsZSxcbiAgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24sXG4gIGdldHRleHQsXG4gIEhPT0tfQ09NUE9ORU5UU1xufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvbnRleHRXaWRnZXRDb25maWcgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkJztcbmltcG9ydCB7IERhdGFwb2ludFNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kYXRhcG9pbnQtc2VsZWN0b3InO1xuaW1wb3J0IHsgSWNvblNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9pY29uLXNlbGVjdG9yJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgS3BpV2lkZ2V0Q29uZmlnQ29tcG9uZW50IH0gZnJvbSAnLi9rcGktd2lkZ2V0LWNvbmZpZy9rcGktd2lkZ2V0LWNvbmZpZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgS3BpV2lkZ2V0Vmlld0NvbXBvbmVudCB9IGZyb20gJy4va3BpLXdpZGdldC12aWV3L2twaS13aWRnZXQtdmlldy5jb21wb25lbnQnO1xuXG4vLyBpbXBvcnQgZm9yIHRoZSBwcmV2aWV3IGltZyB0byBnZXQgaW50byB0aGUgYnVpbGQuXG5sZXQgcHJldmlld0ltYWdlID0gJyc7XG50cnkge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXZhci1yZXF1aXJlc1xuICBwcmV2aWV3SW1hZ2UgPSByZXF1aXJlKCdAYzh5L3N0eWxlL2ltZy9rcGktd2lkZ2V0LnBuZycpO1xufSBjYXRjaCAoZXgpIHtcbiAgLy8gaW50ZW5kZWQgZW1wdHlcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIERhdGFwb2ludFNlbGVjdG9yTW9kdWxlLCBJY29uU2VsZWN0b3JNb2R1bGUsIFBvcG92ZXJNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtLcGlXaWRnZXRWaWV3Q29tcG9uZW50LCBLcGlXaWRnZXRDb25maWdDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX0NPTVBPTkVOVFMsXG4gICAgICB1c2VWYWx1ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdrcGkud2lkZ2V0JyxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnS1BJIFdpZGdldCcpLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdEaXNwbGF5cyB0aGUgbGFzdCBtZWFzdXJlbWVudCB2YWx1ZSBvZiBhIGRldmljZS4nKSxcbiAgICAgICAgICBjb21wb25lbnQ6IEtwaVdpZGdldFZpZXdDb21wb25lbnQsXG4gICAgICAgICAgY29uZmlnQ29tcG9uZW50OiBLcGlXaWRnZXRDb25maWdDb21wb25lbnQsXG4gICAgICAgICAgcHJldmlld0ltYWdlLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgIG5vTmV3V2lkZ2V0czogZmFsc2UsXG4gICAgICAgICAgICAgIHdpZGdldERlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgX3dpZHRoOiAyLFxuICAgICAgICAgICAgICAgIF9oZWlnaHQ6IDJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbmcxOiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgbm9EZXZpY2VUYXJnZXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICBncm91cHNTZWxlY3RhYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gYXMgQ29udGV4dFdpZGdldENvbmZpZ1xuICAgICAgICB9XG4gICAgICBdIGFzIER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uW10sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBLcGlXaWRnZXRNb2R1bGUge31cbiJdfQ==