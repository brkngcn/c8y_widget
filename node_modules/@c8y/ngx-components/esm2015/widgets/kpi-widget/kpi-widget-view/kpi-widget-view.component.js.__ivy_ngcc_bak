import { __awaiter } from "tslib";
import { Component, Input, Optional } from '@angular/core';
import { MeasurementRealtimeService } from '@c8y/ngx-components';
import { DatapointLibraryService } from '@c8y/ngx-components/datapoint-selector';
import { combineLatest, from, NEVER } from 'rxjs';
import { distinctUntilChanged, filter, map, pairwise, startWith, tap } from 'rxjs/operators';
import { ContextDashboardComponent } from '@c8y/ngx-components/context-dashboard';
var ColorClass;
(function (ColorClass) {
    ColorClass["danger"] = "text-danger";
    ColorClass["warning"] = "text-warning";
    ColorClass["unknown"] = "";
})(ColorClass || (ColorClass = {}));
export class KpiWidgetViewComponent {
    constructor(measurementRealtime, datapointLib, dashboard) {
        this.measurementRealtime = measurementRealtime;
        this.datapointLib = datapointLib;
        this.dashboard = dashboard;
        this.config = { datapoints: [] };
        this.state$ = NEVER;
        // used to differentiate between loading state and empty state
        this.noDataInitiallyInDB = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const datapoints = this.config.datapoints || [];
            const datapoint = datapoints.find(tmp => tmp.__active);
            if (!datapoint) {
                return;
            }
            this.state$ = this.setupObservable(datapoint);
        });
    }
    setupObservable(datapoint) {
        this.assignContextFromContextDashboard(datapoint);
        const latestMeasurement$ = this.getLatestMeasurement$(datapoint);
        const lastTwoValues$ = this.getLastTwoValuesOfObservable$(latestMeasurement$);
        const previousValue$ = lastTwoValues$.pipe(map(res => res[0]), startWith(undefined));
        const datapointUpdate$ = this.getDatapointLibraryEntry$(datapoint);
        const combineMeasurementAndDatapointLibEntry$ = combineLatest([
            latestMeasurement$,
            datapointUpdate$
        ]);
        const unit$ = combineMeasurementAndDatapointLibEntry$.pipe(map(([latestMeasurementValue, currentDatapoint]) => currentDatapoint.unit || latestMeasurementValue.unit || ''), startWith(''), distinctUntilChanged());
        return combineLatest([
            latestMeasurement$,
            previousValue$,
            this.getTrendOfLatestMeasurements$(lastTwoValues$),
            unit$,
            this.getColorClass$(combineMeasurementAndDatapointLibEntry$)
        ]).pipe(map(([latestMeasurement, previousValue, trend, unit, colorClass]) => {
            return {
                latestMeasurement,
                previousValue,
                trend,
                unit,
                colorClass
            };
        }));
    }
    getLatestMeasurement$(datapoint) {
        return this.measurementRealtime
            .latestValueOfSpecificMeasurement$(datapoint.fragment, datapoint.series, datapoint.__target, 
        // we only need the last two values in case we want to show a trend
        this.config.showTrend ? 2 : 1, 
        // null will be emitted in case no measurement was found initially
        true)
            .pipe(tap(measurement => {
            if (!measurement) {
                this.noDataInitiallyInDB = true;
            }
        }), filter(measurement => !!measurement), map(measurement => {
            return {
                unit: measurement[datapoint.fragment][datapoint.series].unit,
                value: measurement[datapoint.fragment][datapoint.series].value,
                date: measurement.time
            };
        }));
    }
    getDatapointLibraryEntry$(datapoint) {
        return from(this.datapointLib.updateDatapoints([datapoint], true)).pipe(map(tmp => tmp[0]), filter(tmp => !!tmp), startWith(datapoint));
    }
    getColorClass$(measurementAndDatapointCombination$) {
        return measurementAndDatapointCombination$.pipe(map(([latestMeasurementValue, currentDatapoint]) => {
            if (this.inRangeOf(currentDatapoint, latestMeasurementValue.value, 'redRangeMin', 'redRangeMax')) {
                return ColorClass.danger;
            }
            if (this.inRangeOf(currentDatapoint, latestMeasurementValue.value, 'yellowRangeMin', 'yellowRangeMax')) {
                return ColorClass.warning;
            }
            return ColorClass.unknown;
        }), startWith(ColorClass.unknown), distinctUntilChanged());
    }
    getLastTwoValuesOfObservable$(input$) {
        return input$.pipe(pairwise());
    }
    getTrendOfLatestMeasurements$(latestMeasurement$) {
        return latestMeasurement$.pipe(map(res => {
            if (res.length === 2) {
                const oldValue = res[0].value;
                const newValue = res[1].value;
                if (oldValue < newValue) {
                    return '45deg';
                }
                if (oldValue > newValue) {
                    return '135deg';
                }
            }
            return '90deg';
        }), startWith('90deg'), distinctUntilChanged());
    }
    inRangeOf(datapoint, measurementValue, minAttribute, maxAttribute) {
        if (typeof datapoint[minAttribute] === 'number' &&
            typeof datapoint[maxAttribute] === 'number') {
            if (measurementValue >= datapoint[minAttribute] &&
                measurementValue < datapoint[maxAttribute]) {
                return true;
            }
        }
        return false;
    }
    assignContextFromContextDashboard(datapoint) {
        var _a, _b;
        if (!((_a = this.dashboard) === null || _a === void 0 ? void 0 : _a.isDeviceTypeDashboard)) {
            return;
        }
        const context = (_b = this.dashboard) === null || _b === void 0 ? void 0 : _b.context;
        if (context === null || context === void 0 ? void 0 : context.id) {
            const { name, id } = context;
            datapoint.__target = { name, id };
        }
    }
}
KpiWidgetViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-kpi-widget-view',
                template: "<div\n  class=\"kpi-widget__container d-flex d-col fit-h fit-w a-i-center j-c-center\"\n  *ngIf=\"state$ | async as lastState; else noMeasurementFound\"\n>\n  <div class=\"d-flex a-i-center j-c-center fit-w\">\n    <div\n      class=\"m-r-16 flex-no-shrink text-muted\"\n      [ngClass]=\"lastState.colorClass\"\n      *ngIf=\"config.icon && config.showIcon\"\n    >\n      <i class=\"icon-32\" [c8yIcon]=\"config.icon\"></i>\n    </div>\n    <div class=\"text-truncate\">\n      <span\n        class=\"text-truncate text-medium\"\n        [ngClass]=\"lastState.colorClass\"\n        [ngStyle]=\"{ 'font-size': (config.fontSize || '36') + 'px' }\"\n        title=\"{{\n          lastState.colorClass === 'text-danger'\n            ? ('Within red range:' | translate)\n            : lastState.colorClass === 'text-warning'\n            ? ('Within yellow range:' | translate)\n            : ''\n        }} {{\n          lastState.latestMeasurement.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')\n        }} {{ lastState.unit || '' }}\"\n      >\n        {{\n          lastState.latestMeasurement.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')\n        }}\n        <small class=\"text-regular\">{{ lastState.unit || '' }}</small>\n      </span>\n    </div>\n    <div\n      class=\"dot dot-info dot-30 m-l-16 flex-no-shrink\"\n      *ngIf=\"config?.showTrend && lastState.previousValue as previousValue\"\n    >\n      <i\n        class=\"icon-20\"\n        [title]=\"\n          ('Previous value' | translate) +\n          ': ' +\n          (previousValue.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')) +\n          ' (' +\n          (previousValue.date | date: 'medium') +\n          ')'\n        \"\n        c8yIcon=\"arrow-dotted-up\"\n        [ngStyle]=\"{ transform: 'rotate(' + lastState.trend + ')' }\"\n      ></i>\n    </div>\n  </div>\n  <div class=\"d-flex j-c-center\">\n    <p *ngIf=\"config?.showTimestamp\" class=\"icon-flex text-center text-muted small\">\n      <i c8yIcon=\"calendar\"></i>\n      {{ lastState.latestMeasurement.date | date: 'medium' }}\n    </p>\n  </div>\n</div>\n\n<ng-template #noMeasurementFound>\n  <div class=\"d-flex fit-h fit-w j-c-center a-i-center\">\n    <c8y-ui-empty-state\n      *ngIf=\"noDataInitiallyInDB\"\n      class=\"fit-w\"\n      [icon]=\"'line-chart'\"\n      [title]=\"'No measurement to display.' | translate\"\n      [subtitle]=\"'Waiting for measurements to be created.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n    <c8y-loading *ngIf=\"!noDataInitiallyInDB\"></c8y-loading>\n  </div>\n</ng-template>\n",
                providers: [MeasurementRealtimeService]
            },] }
];
KpiWidgetViewComponent.ctorParameters = () => [
    { type: MeasurementRealtimeService },
    { type: DatapointLibraryService },
    { type: ContextDashboardComponent, decorators: [{ type: Optional }] }
];
KpiWidgetViewComponent.propDecorators = {
    config: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,