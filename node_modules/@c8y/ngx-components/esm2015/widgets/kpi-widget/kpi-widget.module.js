import { NgModule } from '@angular/core';
import { CoreModule, gettext, HOOK_COMPONENTS } from '@c8y/ngx-components';
import { DatapointSelectorModule } from '@c8y/ngx-components/datapoint-selector';
import { IconSelectorModule } from '@c8y/ngx-components/icon-selector';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { KpiWidgetConfigComponent } from './kpi-widget-config/kpi-widget-config.component';
import { KpiWidgetViewComponent } from './kpi-widget-view/kpi-widget-view.component';
// import for the preview img to get into the build.
import * as ɵngcc0 from '@angular/core';
let previewImage = '';
try {
    // tslint:disable-next-line: no-var-requires
    previewImage = require('@c8y/style/img/kpi-widget.png');
}
catch (ex) {
    // intended empty
}
const ɵ0 = [
    {
        id: 'kpi.widget',
        label: gettext('KPI Widget'),
        description: gettext('Displays the last measurement value of a device.'),
        component: KpiWidgetViewComponent,
        configComponent: KpiWidgetConfigComponent,
        previewImage,
        data: {
            settings: {
                noNewWidgets: false,
                widgetDefaults: {
                    _width: 2,
                    _height: 2
                },
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
];
export class KpiWidgetModule {
}
KpiWidgetModule.ɵfac = function KpiWidgetModule_Factory(t) { return new (t || KpiWidgetModule)(); };
KpiWidgetModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: KpiWidgetModule });
KpiWidgetModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_COMPONENTS,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KpiWidgetModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule],
                declarations: [KpiWidgetViewComponent, KpiWidgetConfigComponent],
                providers: [
                    {
                        provide: HOOK_COMPONENTS,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(KpiWidgetModule, { declarations: function () { return [KpiWidgetViewComponent, KpiWidgetConfigComponent]; }, imports: function () { return [CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3BpLXdpZGdldC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3dpZGdldHMva3BpLXdpZGdldC9rcGktd2lkZ2V0Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxVQUFVLEVBRVYsT0FBTyxFQUNQLGVBQWUsRUFDaEIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDM0YsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFckYsb0RBQW9EOztBQUNwRCxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDdEIsSUFBSTtBQUNKLElBQUUsNENBQTRDO0FBQzlDLElBQUUsWUFBWSxHQUFHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFBQyxPQUFPLEVBQUUsRUFBRTtBQUNiLElBQUUsaUJBQWlCO0FBQ25CLENBQUM7QUFDRCxXQU9nQjtBQUNoQixJQUFRO0FBQ1IsUUFBVSxFQUFFLEVBQUUsWUFBWTtBQUMxQixRQUFVLEtBQUssRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3RDLFFBQVUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxrREFBa0QsQ0FBQztBQUNsRixRQUFVLFNBQVMsRUFBRSxzQkFBc0I7QUFDM0MsUUFBVSxlQUFlLEVBQUUsd0JBQXdCO0FBQ25ELFFBQVUsWUFBWTtBQUN0QixRQUFVLElBQUksRUFBRTtBQUNoQixZQUFZLFFBQVEsRUFBRTtBQUN0QixnQkFBYyxZQUFZLEVBQUUsS0FBSztBQUNqQyxnQkFBYyxjQUFjLEVBQUU7QUFDOUIsb0JBQWdCLE1BQU0sRUFBRSxDQUFDO0FBQ3pCLG9CQUFnQixPQUFPLEVBQUUsQ0FBQztBQUMxQixpQkFBZTtBQUNmLGdCQUFjLEdBQUcsRUFBRTtBQUNuQixvQkFBZ0IsT0FBTyxFQUFFO0FBQ3pCLHdCQUFrQixjQUFjLEVBQUUsSUFBSTtBQUN0Qyx3QkFBa0IsZ0JBQWdCLEVBQUUsS0FBSztBQUN6QyxxQkFBaUI7QUFDakIsaUJBQWU7QUFDZixhQUFhO0FBQ2IsU0FBa0M7QUFDbEMsS0FBUztBQUNULENBQXVDO0FBS3ZDLE1BQU0sT0FBTyxlQUFlO0FBQUc7MkNBbkM5QixRQUFRLFNBQUMsa0JBQ1IsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO3NCQUF1QixFQUFFLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxrQkFDakYsWUFBWTtDQUFFLENBQUMsc0JBQXNCLEVBQUUsd0JBQXdCLENBQUMsa0JBQ2hFO0VBQVMsRUFBRTtnQkFDVDtJQUNFLE9BQU8sRUFBRTtFQUFlO0lBQ3hCO0VBQVEsSUF3QnlCLDBCQUNqQyxLQUFLLEVBQUUsSUFBSSxzQkFDWixrQkFDRjtFQUNGOzs7Ozs7Ozs7Ozs7Ozs0VEFDSTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ29yZU1vZHVsZSxcbiAgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24sXG4gIGdldHRleHQsXG4gIEhPT0tfQ09NUE9ORU5UU1xufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvbnRleHRXaWRnZXRDb25maWcgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkJztcbmltcG9ydCB7IERhdGFwb2ludFNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kYXRhcG9pbnQtc2VsZWN0b3InO1xuaW1wb3J0IHsgSWNvblNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9pY29uLXNlbGVjdG9yJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgS3BpV2lkZ2V0Q29uZmlnQ29tcG9uZW50IH0gZnJvbSAnLi9rcGktd2lkZ2V0LWNvbmZpZy9rcGktd2lkZ2V0LWNvbmZpZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgS3BpV2lkZ2V0Vmlld0NvbXBvbmVudCB9IGZyb20gJy4va3BpLXdpZGdldC12aWV3L2twaS13aWRnZXQtdmlldy5jb21wb25lbnQnO1xuXG4vLyBpbXBvcnQgZm9yIHRoZSBwcmV2aWV3IGltZyB0byBnZXQgaW50byB0aGUgYnVpbGQuXG5sZXQgcHJldmlld0ltYWdlID0gJyc7XG50cnkge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXZhci1yZXF1aXJlc1xuICBwcmV2aWV3SW1hZ2UgPSByZXF1aXJlKCdAYzh5L3N0eWxlL2ltZy9rcGktd2lkZ2V0LnBuZycpO1xufSBjYXRjaCAoZXgpIHtcbiAgLy8gaW50ZW5kZWQgZW1wdHlcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIERhdGFwb2ludFNlbGVjdG9yTW9kdWxlLCBJY29uU2VsZWN0b3JNb2R1bGUsIFBvcG92ZXJNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtLcGlXaWRnZXRWaWV3Q29tcG9uZW50LCBLcGlXaWRnZXRDb25maWdDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX0NPTVBPTkVOVFMsXG4gICAgICB1c2VWYWx1ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdrcGkud2lkZ2V0JyxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnS1BJIFdpZGdldCcpLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdEaXNwbGF5cyB0aGUgbGFzdCBtZWFzdXJlbWVudCB2YWx1ZSBvZiBhIGRldmljZS4nKSxcbiAgICAgICAgICBjb21wb25lbnQ6IEtwaVdpZGdldFZpZXdDb21wb25lbnQsXG4gICAgICAgICAgY29uZmlnQ29tcG9uZW50OiBLcGlXaWRnZXRDb25maWdDb21wb25lbnQsXG4gICAgICAgICAgcHJldmlld0ltYWdlLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgIG5vTmV3V2lkZ2V0czogZmFsc2UsXG4gICAgICAgICAgICAgIHdpZGdldERlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgX3dpZHRoOiAyLFxuICAgICAgICAgICAgICAgIF9oZWlnaHQ6IDJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbmcxOiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgbm9EZXZpY2VUYXJnZXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICBncm91cHNTZWxlY3RhYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gYXMgQ29udGV4dFdpZGdldENvbmZpZ1xuICAgICAgICB9XG4gICAgICBdIGFzIER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uW10sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBLcGlXaWRnZXRNb2R1bGUge31cbiJdfQ==