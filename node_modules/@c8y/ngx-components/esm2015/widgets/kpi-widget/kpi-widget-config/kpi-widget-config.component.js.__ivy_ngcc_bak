import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { ControlContainer, FormBuilder, NgForm, Validators } from '@angular/forms';
import { WidgetConfigComponent } from '@c8y/ngx-components/context-dashboard';
import { DatapointLibraryService } from '@c8y/ngx-components/datapoint-selector';
import { IconSelectorService } from '@c8y/ngx-components/icon-selector';
export function exactlyASingleDatapointActive() {
    return (control) => {
        const datapoints = control.value;
        if (!datapoints || !datapoints.length) {
            return null;
        }
        const activeDatapoints = datapoints.filter(datapoint => datapoint.__active);
        if (activeDatapoints.length === 1) {
            return null;
        }
        return { exactlyOneDatapointNeedsToBeActive: true };
    };
}
export class KpiWidgetConfigComponent {
    constructor(formBuilder, form, iconSelector, widgetConfig, datapointLibrary) {
        this.formBuilder = formBuilder;
        this.form = form;
        this.iconSelector = iconSelector;
        this.widgetConfig = widgetConfig;
        this.datapointLibrary = datapointLibrary;
        this.datapointSelectionConfig = {};
        this.defaultFormOptions = {
            showRedRange: true,
            showYellowRange: true
        };
        this.availableIcons = [];
        this.limits = {
            fontSizeMax: 72,
            fontSizeMin: 18,
            numberOfDecimalPlacesMax: 10,
            numberOfDecimalPlacesMin: 0
        };
    }
    onBeforeSave(config) {
        if (this.formGroup.valid) {
            Object.assign(config, this.formGroup.value);
            return true;
        }
        return false;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.widgetConfig.context) === null || _a === void 0 ? void 0 : _a.id) {
                this.datapointSelectionConfig.contextAsset = (_b = this.widgetConfig) === null || _b === void 0 ? void 0 : _b.context;
            }
            this.initForm();
            if ((_c = this.config) === null || _c === void 0 ? void 0 : _c.datapoints) {
                this.config.datapoints = yield this.datapointLibrary.updateDatapoints((_d = this.config) === null || _d === void 0 ? void 0 : _d.datapoints);
                this.formGroup.patchValue({ datapoints: this.config.datapoints });
            }
        });
    }
    openIconSelector() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const icon = yield this.iconSelector.selectIcon({
                    currentSelection: this.formGroup.value.icon
                });
                this.formGroup.patchValue({ icon });
            }
            catch (_a) {
                // nothing to do
            }
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            numberOfDecimalPlaces: [
                1,
                [
                    Validators.required,
                    Validators.min(this.limits.numberOfDecimalPlacesMin),
                    Validators.max(this.limits.numberOfDecimalPlacesMax)
                ]
            ],
            showTimestamp: [true, []],
            showTrend: [true, []],
            showIcon: [true, []],
            icon: ['water', [Validators.required, Validators.minLength(1)]],
            fontSize: [
                36,
                [
                    Validators.required,
                    Validators.min(this.limits.fontSizeMin),
                    Validators.max(this.limits.fontSizeMax)
                ]
            ],
            datapoints: [
                [],
                [Validators.required, Validators.minLength(1), exactlyASingleDatapointActive()]
            ]
        });
        this.form.form.addControl('config', this.formGroup);
        this.formGroup.patchValue(this.config);
    }
}
KpiWidgetConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-kpi-widget-config',
                template: "<form [formGroup]=\"formGroup\" class=\"row\">\n  <div class=\"col-sm-6\">\n    <c8y-datapoint-selection-list\n      [defaultFormOptions]=\"defaultFormOptions\"\n      [config]=\"datapointSelectionConfig\"\n      [minActiveCount]=\"1\"\n      [maxActiveCount]=\"1\"\n      formControlName=\"datapoints\"\n      name=\"datapoints\"\n    >\n    </c8y-datapoint-selection-list>\n  </div>\n  <div class=\"col-sm-6\">\n    <c8y-form-group>\n      <label translate>Icon</label>\n      <div class=\"d-flex a-i-center\">\n        <div class=\"p-r-8 icon-32 text-muted\">\n          <i [c8yIcon]=\"formGroup.value.icon\"></i>\n        </div>\n        <button class=\"btn btn-default btn-xs\" (click)=\"openIconSelector()\">\n          {{ 'Change' | translate }}\n        </button>\n      </div>\n    </c8y-form-group>\n    <c8y-form-group>\n      <label [title]=\"'Number of decimal places' | translate\" translate>\n        Number of decimal places\n      </label>\n      <input\n        class=\"form-control\"\n        formControlName=\"numberOfDecimalPlaces\"\n        name=\"numberOfDecimalPlaces\"\n        type=\"number\"\n        [placeholder]=\"'e.g. {{ example }}' | translate: { example: 1 }\"\n      />\n      <c8y-messages [show]=\"formGroup.controls?.numberOfDecimalPlaces?.touched && formGroup?.controls?.numberOfDecimalPlaces?.errors\">\n      </c8y-messages>\n    </c8y-form-group>\n    <div>\n      <label> {{ 'Display' | translate }}</label>\n      <div class=\"d-flex gap-16 flex-wrap\">\n        <c8y-form-group>\n          <label [title]=\"'Show timestamp' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showTimestamp\" name=\"showTimestamp\" />\n            <span></span>\n            <span translate>Show timestamp</span>\n          </label>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label [title]=\"'Show icon' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showIcon\" name=\"showIcon\" />\n            <span></span>\n            <span translate>Show icon</span>\n          </label>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label [title]=\"'Show trend icon' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showTrend\" name=\"showTrend\" />\n            <span></span>\n            <span translate>Show trend icon</span>\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{\n                'Indicates the trend between the last two measurement values.' | translate\n              }}\"\n              container=\"body\"\n              [outsideClick]=\"true\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n          </label>\n        </c8y-form-group>\n      </div>\n\n      <c8y-form-group>\n        <label [title]=\"'Font size of measurement value (px)' | translate\" translate>\n          Font size of measurement value (px)\n        </label>\n        <input\n          class=\"form-control\"\n          formControlName=\"fontSize\"\n          name=\"fontSize\"\n          type=\"number\"\n          [placeholder]=\"'e.g. {{ example }}' | translate: { example: 36 }\"\n        />\n        <c8y-messages [show]=\"formGroup.controls?.fontSize?.touched && formGroup?.controls?.fontSize?.errors\">\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n  </div>\n</form>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
KpiWidgetConfigComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: NgForm },
    { type: IconSelectorService },
    { type: WidgetConfigComponent },
    { type: DatapointLibraryService }
];
KpiWidgetConfigComponent.propDecorators = {
    config: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,