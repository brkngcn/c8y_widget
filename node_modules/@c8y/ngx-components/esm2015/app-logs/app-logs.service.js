import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class AppLogsService {
    constructor(application) {
        this.application = application;
    }
    getLogs$(appId, instanceName, params = {}) {
        const formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
        const formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
        const modifiedParams = Object.assign(Object.assign(Object.assign({}, params), (formattedDateFrom && { dateFrom: formattedDateFrom })), (formattedDateTo && { dateTo: formattedDateTo }));
        return from(this.application.getInstanceLog(appId, instanceName, modifiedParams)).pipe(map(res => res.data));
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
}
AppLogsService.ɵfac = function AppLogsService_Factory(t) { return new (t || AppLogsService)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
AppLogsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AppLogsService, factory: AppLogsService.ɵfac });
AppLogsService.ctorParameters = () => [
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppLogsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxvZ3Muc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXBwLWxvZ3MvYXBwLWxvZ3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQWMsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBU3JDLE1BQU0sT0FBTyxjQUFjO0FBQzNCLElBQ0UsWUFBb0IsV0FBK0I7QUFBSSxRQUFuQyxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7QUFBQyxJQUFFLENBQUM7QUFDekQsSUFDRSxRQUFRLENBQUMsS0FBYSxFQUFFLFlBQW9CLEVBQUUsU0FBd0IsRUFBRTtBQUFJLFFBQzFFLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN4RixRQUFJLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDbEYsUUFBSSxNQUFNLGNBQWMsaURBQ2YsTUFBTSxHQUNOLENBQUMsaUJBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxHQUN0RCxDQUFDLGVBQWUsSUFBSSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUNwRCxDQUFDO0FBQ04sUUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2pILElBQUUsQ0FBQztBQUNILElBQ0UsVUFBVSxDQUFDLFlBQW9CO0FBQUksUUFDakMsT0FBTyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNoRCxJQUFFLENBQUM7QUFDSDswQ0FwQkMsVUFBVTt3SEFDVDtBQUFDO0FBRVMsWUFiSCxrQkFBa0I7QUFBRzs7O21GQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2dzSlNPTiB9IGZyb20gJy4vbG9ncy5tb2RlbCc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmludGVyZmFjZSBSZXF1ZXN0UGFyYW1zIHtcbiAgZGF0ZUZyb20/O1xuICBkYXRlVG8/O1xuICBsaW1pdD87XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcHBMb2dzU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBsaWNhdGlvbjogQXBwbGljYXRpb25TZXJ2aWNlKSB7fVxuXG4gIGdldExvZ3MkKGFwcElkOiBzdHJpbmcsIGluc3RhbmNlTmFtZTogc3RyaW5nLCBwYXJhbXM6IFJlcXVlc3RQYXJhbXMgPSB7fSk6IE9ic2VydmFibGU8TG9nc0pTT04+IHtcbiAgICBjb25zdCBmb3JtYXR0ZWREYXRlRnJvbSA9IHBhcmFtcy5kYXRlRnJvbSA/IHRoaXMuZm9ybWF0RGF0ZShwYXJhbXMuZGF0ZUZyb20pIDogbnVsbDtcbiAgICBjb25zdCBmb3JtYXR0ZWREYXRlVG8gPSBwYXJhbXMuZGF0ZVRvID8gdGhpcy5mb3JtYXREYXRlKHBhcmFtcy5kYXRlVG8pIDogbnVsbDtcbiAgICBjb25zdCBtb2RpZmllZFBhcmFtcyA9IHtcbiAgICAgIC4uLnBhcmFtcyxcbiAgICAgIC4uLihmb3JtYXR0ZWREYXRlRnJvbSAmJiB7IGRhdGVGcm9tOiBmb3JtYXR0ZWREYXRlRnJvbSB9KSxcbiAgICAgIC4uLihmb3JtYXR0ZWREYXRlVG8gJiYgeyBkYXRlVG86IGZvcm1hdHRlZERhdGVUbyB9KVxuICAgIH07XG5cbiAgICByZXR1cm4gZnJvbSh0aGlzLmFwcGxpY2F0aW9uLmdldEluc3RhbmNlTG9nKGFwcElkLCBpbnN0YW5jZU5hbWUsIG1vZGlmaWVkUGFyYW1zKSkucGlwZShtYXAocmVzID0+IHJlcy5kYXRhKSk7XG4gIH1cblxuICBmb3JtYXREYXRlKGRhdGVUb0Zvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVRvRm9ybWF0KS50b0lTT1N0cmluZygpO1xuICB9XG59XG4iXX0=