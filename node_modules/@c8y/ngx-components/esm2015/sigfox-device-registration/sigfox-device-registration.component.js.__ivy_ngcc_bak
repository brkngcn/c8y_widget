import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { BehaviorSubject, defer, forkJoin, from, of, Subject, throwError } from 'rxjs';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { SigfoxProviderService, ErrorName } from './sigfox-provider.service';
import { catchError, map, switchMap, shareReplay, takeUntil, mergeMap } from 'rxjs/operators';
import { cloneDeep, uniq } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
export class SigfoxDeviceRegistrationComponent {
    constructor(bsModalRef, sigfoxService, translateService) {
        this.bsModalRef = bsModalRef;
        this.sigfoxService = sigfoxService;
        this.translateService = translateService;
        this.PAGING = {
            withTotalPages: true,
            pageSize: 10
        };
        this.form = new FormGroup({});
        this.model = {};
        this.protocols$ = this.getProtocols$();
        this.connections$ = this.getConnections$();
        this.unsubscribe$ = new Subject();
        this.load$ = this.connections$.pipe(catchError((error) => of(error)), switchMap(connections => {
            if (connections instanceof Error && connections.name === ErrorName.NoConnectivitySettingsError) {
                return of([connections]);
            }
            return forkJoin([
                of(connections),
                this.protocols$.pipe(catchError((error) => of(error)))
            ]);
        }), map(results => {
            return results.filter(result => {
                return result instanceof Error;
            });
        }), switchMap(errors => {
            return errors.length === 0 ? of([]) : throwError(errors);
        }));
        this.fields = [
            {
                key: 'id',
                type: 'string',
                templateOptions: {
                    placeholder: 'FED987',
                    label: gettext('ID'),
                    required: true,
                    pattern: '(0x){0,1}[0-9A-F]+(h){0,1}'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid hexadecimal number.')
                    }
                }
            },
            {
                key: 'pac',
                type: 'string',
                templateOptions: {
                    placeholder: 'FEDCBA9876543210',
                    label: gettext('PAC'),
                    required: true,
                    pattern: '^([a-fA-F0-9]{16})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 16 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'connection',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Connection'),
                    required: true,
                    c8yForOptions: this.connections$,
                    displayProperty: 'name',
                    valueProperties: ['name']
                }
            },
            {
                key: 'contract',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Contract'),
                    required: true,
                    placeholder: 'Free contract_25',
                    displayProperty: 'name',
                    valueProperties: ['id'],
                    description: gettext('Only active contracts with free slots are displayed.')
                },
                hooks: {
                    onInit: field => {
                        const connectionControl = field.form.get('connection');
                        connectionControl.valueChanges
                            .pipe(takeUntil(this.unsubscribe$), mergeMap(() => this.getContracts$(this.form.get('connection').value.name)))
                            .subscribe(profiles => {
                            field.templateOptions.c8yForOptions = of(profiles);
                            field.formControl.setValue(null);
                        }, error => {
                            field.form.controls.contract.setErrors({ contract: true });
                            field.validators.contract.message = error.message;
                        });
                    }
                },
                validators: {
                    contract: {
                        expression: (control) => {
                            return control.status === 'VALID';
                        },
                        message: () => '',
                    },
                }
            },
            {
                key: 'deviceType',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Device protocol'),
                    required: true,
                    c8yForOptions: this.protocols$,
                    displayProperty: 'name',
                    valueProperties: ['id', 'name']
                }
            },
            {
                key: 'productCertificate',
                type: 'string',
                templateOptions: {
                    placeholder: 'P_001F_EDCB_01',
                    label: gettext('Product certificate key'),
                    pattern: 'P_[0-9A-F]{4}_[0-9A-F]{4}_[0-9A-F]{2}',
                    description: gettext('If no product certificate key is specified, the device is considered a prototype.')
                },
                validation: {
                    messages: {
                        pattern: (error, field) => this.translateService.instant(gettext('Must be a valid product certificate key, for example, {{ example }}'), { example: 'P_001F_EDCB_01' })
                    }
                }
            }
        ];
        this.registrationStepLabels = {
            next: gettext('Register')
        };
        this.finalStepLabels = {
            back: gettext('Close')
        };
        this.state = 'loadPending';
        this.errors$ = new BehaviorSubject([]);
        this.errorMessages$ = this.errors$.pipe(map(errors => errors.map(error => error.message)), map(messages => uniq(messages)));
        this.load$.subscribe(() => {
            this.state = 'loadSuccess';
        }, errors => {
            this.state = 'loadError';
            this.errors$.next(errors);
        });
    }
    create(event) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'registrationPending';
            const sigfoxDevice = this.getSigfoxDeviceToSend();
            try {
                yield this.sigfoxService.createDevice(sigfoxDevice);
                this.state = 'registrationSuccess';
            }
            catch (error) {
                this.state = 'registrationError';
                this.errors$.next([error]);
            }
            event.stepper.next();
        });
    }
    getSigfoxDeviceToSend() {
        const sigfoxDevice = cloneDeep(this.model);
        sigfoxDevice.lnsConnectionName = this.model.connection.name;
        sigfoxDevice.contractId = this.model.contract.id;
        sigfoxDevice.prototype = !sigfoxDevice.productCertificate;
        delete sigfoxDevice.contract;
        delete sigfoxDevice.connection;
        return sigfoxDevice;
    }
    getContracts$(name) {
        return defer(() => from(this.sigfoxService.getContracts(name))).pipe(shareReplay(1));
    }
    getProtocols$() {
        return defer(() => from(this.sigfoxService.getAvailableProtocols())).pipe(shareReplay(1));
    }
    getConnections$() {
        return defer(() => from(this.sigfoxService.getConnections())).pipe(shareReplay(1));
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
SigfoxDeviceRegistrationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-sigfox-device-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Sigfox registration' | translate }}</h4>\n  </ng-container>\n  <ng-container *ngIf=\"state === 'loadPending'; else registrationForm\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </ng-container>\n\n  <!--Formly schema is rendered-->\n  <ng-template #registrationForm>\n    <c8y-stepper\n      [hideStepProgress]=\"true\"\n      linear\n      *ngIf=\"(errorMessages$ | async).length === 0; else errorMessagesPresent\"\n    >\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"p-b-16\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              sticky-top\n              separator-bottom\n              text-16 text-medium\n              text-center\n              bg-component\n            \"\n          >\n          {{ 'Register a single Sigfox device' | translate }}\n          </p>\n          <formly-form\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            class=\"d-block p-l-24 p-r-24 p-t-16\"\n          ></formly-form>\n        </div>\n        <c8y-stepper-buttons\n          [labels]=\"registrationStepLabels\"\n          (onNext)=\"create($event)\"\n          (onCancel)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [pending]=\"state === 'registrationPending'\"\n          [disabled]=\"!form.valid\"\n          class=\"modal-footer d-block sticky-bottom separator-top bg-white\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n      <cdk-step state=\"final\">\n        <!--success scenario-->\n        <div class=\"p-16 text-center\" *ngIf=\"state === 'registrationPending'\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <div class=\"m-24\">\n          <c8y-operation-result\n            *ngIf=\"state === 'registrationSuccess'\"\n            text=\"{{ 'Device registered' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead m-b-0\"\n          ></c8y-operation-result>\n        </div>\n\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          (onCustom)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ custom: true }\"\n          [labels]=\"finalStepLabels\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </c8y-stepper>\n  </ng-template>\n\n  <!--Failure scenario-->\n  <ng-template #errorMessagesPresent>\n    <div class=\"m-24\">\n      <c8y-operation-result\n        *ngIf=\"state === 'registrationError'\"\n        text=\"{{ 'Failed to register' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n      <div\n        *ngFor=\"let msg of errorMessages$ | async\"\n        class=\"m-b-8\"\n        [ngClass]=\"{\n          'text-center': state === 'registrationError',\n          'alert alert-danger': state === 'loadError'\n        }\"\n      >\n        <span [innerHTML]=\"msg | translate\"></span>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Close' | translate }}\"\n        (click)=\"bsModalRef.hide()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        translate\n      >\n        Close\n      </button>\n    </div>\n  </ng-template>\n</c8y-modal>"
            },] }
];
SigfoxDeviceRegistrationComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: SigfoxProviderService },
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,