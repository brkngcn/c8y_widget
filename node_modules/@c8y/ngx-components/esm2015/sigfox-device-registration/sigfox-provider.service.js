import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient, InventoryService, TenantOptionsService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/core/FetchClient";
import * as i2 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i3 from "@c8y/client/lib/src/tenant-options/TenantOptionsService";
import * as i4 from "@ngx-translate/core";
import * as i5 from "@c8y/client/lib/src/application/ApplicationService";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@ngx-translate/core';
export var ErrorName;
(function (ErrorName) {
    ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
    ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
    ErrorName["ContractError"] = "ContractError";
    ErrorName["NoContractsError"] = "NoContractsError";
    ErrorName["RegistrationError"] = "RegistrationError";
    ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
})(ErrorName || (ErrorName = {}));
export class SigfoxProviderService {
    constructor(client, inventoryService, tenantOptions, translateService, applicationService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.tenantOptions = tenantOptions;
        this.translateService = translateService;
        this.applicationService = applicationService;
        this.baseUrl = '/service/sigfox-agent/';
        this.registrationUrl = `${this.baseUrl}newDeviceRequest`;
        this.contractsUrl = `${this.baseUrl}contract`;
        this.header = { 'Content-Type': 'application/json' };
    }
    getConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.header
            };
            const res = yield this.client.fetch(`${this.baseUrl}lns-connection`, options);
            const data = yield res.json();
            if (res.status === 200) {
                if (data.length === 0) {
                    yield this.throwNoConnectivitySettingsError();
                }
            }
            else {
                yield this.throwNoConnectivitySettingsError();
            }
            return { res, data };
        });
    }
    /**
     * Gets contracts from Sigfox platform.
     * @param connectionName The name of connection for which contracts will be retrieved
     * @returns The result list with contract, or throws an error with exception.
     */
    getContracts(connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.header,
                params: {
                    sigfoxConnectionName: connectionName
                }
            };
            const res = yield this.client.fetch(this.contractsUrl, options);
            const data = yield res.json();
            if (res.status === 200) {
                if (data.length === 0) {
                    this.throwNoContractsError();
                }
            }
            else {
                this.throwContractError(data);
            }
            return { res, data };
        });
    }
    createDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(device)
            };
            const res = yield this.client.fetch(this.registrationUrl, options);
            const data = yield res.json();
            if (res.status !== 201) {
                this.throwRegistrationError(data);
            }
            return { res, data };
        });
    }
    getAvailableProtocols(filter = { withTotalPages: true }) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = {
                __filter: {
                    __and: [
                        { __has: 'c8y_IsDeviceType' },
                        {
                            type: { __in: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'] }
                        }
                    ]
                },
                __orderby: [{ name: 1 }]
            };
            const { res, data } = yield this.inventoryService.listQuery(query, filter);
            if (res.status === 200) {
                if (data.length === 0) {
                    this.throwNoDeviceProtocolsError();
                }
            }
            else {
                this.throwDeviceProtocolsFetchError();
            }
            return { res, data };
        });
    }
    hasConnectivitySettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const option = {
                category: 'sigfox-agent',
                key: 'provider.token'
            };
            try {
                yield this.tenantOptions.detail(option);
                return true;
            }
            catch (e) {
                yield this.throwNoConnectivitySettingsError();
            }
        });
    }
    throwNoConnectivitySettingsError() {
        return __awaiter(this, void 0, void 0, function* () {
            const error = new Error();
            error.name = ErrorName.NoConnectivitySettingsError;
            const hasAdminRight = (yield this.applicationService.isAvailable('administration')).data;
            if (hasAdminRight) {
                error.message = this.translateService.instant(gettext(`Connectivity settings are not configured. Configure them in the Administration app under <a href="{{ link }}">Settings</a>.`), {
                    link: '/apps/administration/index.html#/connectivitySettings/sigfox_provider_settings'
                });
            }
            else {
                error.message = gettext('Connectivity settings are not configured. Contact the administrator.');
            }
            throw error;
        });
    }
    throwRegistrationError(data) {
        const error = new Error();
        error.name = ErrorName.RegistrationError;
        error.message = data.message;
        throw error;
    }
    throwDeviceProtocolsFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProtocolsFetchError;
        error.message = gettext('Could not load device protocols.');
        throw error;
    }
    throwNoDeviceProtocolsError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProtocolsError;
        error.message = this.translateService.instant(gettext(`No device protocols configured. Create a Sigfox device protocol in <a href="{{ link }}">Device protocols</a>.`), {
            link: '/apps/devicemanagement/#/deviceprotocols'
        });
        throw error;
    }
    throwContractError(data) {
        const error = new Error();
        error.name = ErrorName.ContractError;
        error.message = data.message;
        throw error;
    }
    throwNoContractsError() {
        const error = new Error();
        error.name = ErrorName.NoContractsError;
        error.message = gettext('No contracts found. New contracts must be created via the Sigfox platform.');
        throw error;
    }
}
SigfoxProviderService.ɵfac = function SigfoxProviderService_Factory(t) { return new (t || SigfoxProviderService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.TenantOptionsService), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
SigfoxProviderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SigfoxProviderService_Factory() { return new SigfoxProviderService(i0.ɵɵinject(i1.FetchClient), i0.ɵɵinject(i2.InventoryService), i0.ɵɵinject(i3.TenantOptionsService), i0.ɵɵinject(i4.TranslateService), i0.ɵɵinject(i5.ApplicationService)); }, token: SigfoxProviderService, providedIn: "root" });
SigfoxProviderService.ctorParameters = () => [
    { type: FetchClient },
    { type: InventoryService },
    { type: TenantOptionsService },
    { type: TranslateService },
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SigfoxProviderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.FetchClient }, { type: ɵngcc1.InventoryService }, { type: ɵngcc1.TenantOptionsService }, { type: ɵngcc2.TranslateService }, { type: ɵngcc1.ApplicationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,