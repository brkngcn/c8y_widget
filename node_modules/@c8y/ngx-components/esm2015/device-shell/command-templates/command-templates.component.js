import { Component, EventEmitter } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
/* https://stackoverflow.com/a/65290658 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
import * as ɵngcc2 from './command-templates.directive';
export function rootScopeFactory($injector) {
    return $injector.get('$rootScope').$new();
}
export class CommandTemplatesComponent {
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.onTemplateSelected = new EventEmitter();
    }
}
CommandTemplatesComponent.ɵfac = function CommandTemplatesComponent_Factory(t) { return new (t || CommandTemplatesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef)); };
CommandTemplatesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CommandTemplatesComponent, selectors: [["c8y-command-templates"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                deps: ['$injector'],
                provide: '$scope',
                useFactory: rootScopeFactory
            }
        ])], decls: 1, vars: 0, consts: [[3, "close", "dismiss"]], template: function CommandTemplatesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-command-templates-directive", 0);
        ɵngcc0.ɵɵlistener("close", function CommandTemplatesComponent_Template_c8y_command_templates_directive_close_0_listener($event) { ctx.modalRef.hide(); return ctx.onTemplateSelected.next($event); })("dismiss", function CommandTemplatesComponent_Template_c8y_command_templates_directive_dismiss_0_listener() { return ctx.modalRef.hide(); });
        ɵngcc0.ɵɵelementEnd();
    } }, directives: [ɵngcc2.CommandTemplates], encapsulation: 2 });
CommandTemplatesComponent.ctorParameters = () => [
    { type: BsModalRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommandTemplatesComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-command-templates',
                template: `<c8y-command-templates-directive
    (close)="modalRef.hide(); onTemplateSelected.next($event)"
    (dismiss)="modalRef.hide()"
  ></c8y-command-templates-directive>`,
                providers: [
                    {
                        deps: ['$injector'],
                        provide: '$scope',
                        useFactory: rootScopeFactory
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.BsModalRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC10ZW1wbGF0ZXMuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZpY2Utc2hlbGwvY29tbWFuZC10ZW1wbGF0ZXMvY29tbWFuZC10ZW1wbGF0ZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRCwwQ0FBMEM7Ozs7QUFDMUMsTUFBTSxVQUFVLGdCQUFnQixDQUFDLFNBQW1CO0FBQ3BELElBQUUsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVDLENBQUM7QUFnQkQsTUFBTSxPQUFPLHlCQUF5QjtBQUN0QyxJQUVFLFlBQW1CLFFBQW9CO0FBQUksUUFBeEIsYUFBUSxHQUFSLFFBQVEsQ0FBWTtBQUFDLFFBRnhDLHVCQUFrQixHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2hFLElBQzRDLENBQUM7QUFDN0M7cURBbEJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsdUJBQXVCLGtCQUNqQyxRQUFRLEVBQUU7K0lBRzBCLGtCQUNwQyxTQUFTLEVBQUU7UUFDVDtvQkFDRSxJQUFJLEVBQUUsQ0FBQztDQUFXLENBQUMsMEJBQ25CO0FBQU8sRUFBRSxRQUFRLDBCQUNqQjtDQUFVLEVBQUU7S0FBZ0Isc0JBQzdCLGtCQUNGLGNBQ0Y7Ozs7b0VBQ0k7QUFBQztBQUNVLFlBdEJQLFVBQVU7QUFBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7MkVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuXG4vKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjUyOTA2NTggKi9cbmV4cG9ydCBmdW5jdGlvbiByb290U2NvcGVGYWN0b3J5KCRpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgcmV0dXJuICRpbmplY3Rvci5nZXQoJyRyb290U2NvcGUnKS4kbmV3KCk7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1jb21tYW5kLXRlbXBsYXRlcycsXG4gIHRlbXBsYXRlOiBgPGM4eS1jb21tYW5kLXRlbXBsYXRlcy1kaXJlY3RpdmVcbiAgICAoY2xvc2UpPVwibW9kYWxSZWYuaGlkZSgpOyBvblRlbXBsYXRlU2VsZWN0ZWQubmV4dCgkZXZlbnQpXCJcbiAgICAoZGlzbWlzcyk9XCJtb2RhbFJlZi5oaWRlKClcIlxuICA+PC9jOHktY29tbWFuZC10ZW1wbGF0ZXMtZGlyZWN0aXZlPmAsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIGRlcHM6IFsnJGluamVjdG9yJ10sXG4gICAgICBwcm92aWRlOiAnJHNjb3BlJyxcbiAgICAgIHVzZUZhY3Rvcnk6IHJvb3RTY29wZUZhY3RvcnlcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQ29tbWFuZFRlbXBsYXRlc0NvbXBvbmVudCB7XG4gIG9uVGVtcGxhdGVTZWxlY3RlZDogRXZlbnRFbWl0dGVyPG9iamVjdD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHVibGljIG1vZGFsUmVmOiBCc01vZGFsUmVmKSB7fVxufVxuIl19