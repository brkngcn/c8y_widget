import { Injectable } from '@angular/core';
import { OperationService } from '@c8y/client';
import { gettext, OptionsService } from '@c8y/ngx-components';
import { CommandDeliveryType } from './device-shell.model';
export class DeviceShellService {
    constructor(optionsService, operationService) {
        this.optionsService = optionsService;
        this.operationService = operationService;
    }
    getDeliveryTypes() {
        return [
            {
                name: gettext(CommandDeliveryType.DEFAULT),
                default: true
            },
            {
                name: gettext(CommandDeliveryType.SMS)
            }
        ];
    }
    canSendCommandsViaSMS() {
        return this.optionsService.getSystemOption('messaging', 'provider', false);
    }
    createCommandOperation(deviceId, command, deliveryType) {
        const operation = {
            deviceId,
            description: gettext('Execute shell command') + (command.name ? `: ${command.name}` : ''),
            deliveryType: deliveryType === CommandDeliveryType.SMS ? CommandDeliveryType.SMS : undefined,
            c8y_Command: {
                text: command.text
            }
        };
        return this.operationService.create(operation);
    }
}
DeviceShellService.decorators = [
    { type: Injectable }
];
DeviceShellService.ctorParameters = () => [
    { type: OptionsService },
    { type: OperationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNoZWxsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZpY2Utc2hlbGwvc2hhcmVkL2RldmljZS1zaGVsbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUF1QixnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwRSxPQUFPLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlELE9BQU8sRUFBVyxtQkFBbUIsRUFBZ0IsTUFBTSxzQkFBc0IsQ0FBQztBQUdsRixNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFlBQW9CLGNBQThCLEVBQVUsZ0JBQWtDO1FBQTFFLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUFVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBRWxHLGdCQUFnQjtRQUNkLE9BQU87WUFDTDtnQkFDRSxJQUFJLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQztnQkFDMUMsT0FBTyxFQUFFLElBQUk7YUFDZDtZQUNEO2dCQUNFLElBQUksRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDO2FBQ3ZDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxzQkFBc0IsQ0FDcEIsUUFBZ0IsRUFDaEIsT0FBZ0IsRUFDaEIsWUFBaUM7UUFFakMsTUFBTSxTQUFTLEdBQWU7WUFDNUIsUUFBUTtZQUNSLFdBQVcsRUFBRSxPQUFPLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDekYsWUFBWSxFQUFFLFlBQVksS0FBSyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUM1RixXQUFXLEVBQUU7Z0JBQ1gsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO2FBQ25CO1NBQ0YsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7WUFsQ0YsVUFBVTs7O1lBSE8sY0FBYztZQURGLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElPcGVyYXRpb24sIElSZXN1bHQsIE9wZXJhdGlvblNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBnZXR0ZXh0LCBPcHRpb25zU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29tbWFuZCwgQ29tbWFuZERlbGl2ZXJ5VHlwZSwgRGVsaXZlcnlUeXBlIH0gZnJvbSAnLi9kZXZpY2Utc2hlbGwubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGV2aWNlU2hlbGxTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zU2VydmljZTogT3B0aW9uc1NlcnZpY2UsIHByaXZhdGUgb3BlcmF0aW9uU2VydmljZTogT3BlcmF0aW9uU2VydmljZSkge31cblxuICBnZXREZWxpdmVyeVR5cGVzKCk6IERlbGl2ZXJ5VHlwZVtdIHtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICBuYW1lOiBnZXR0ZXh0KENvbW1hbmREZWxpdmVyeVR5cGUuREVGQVVMVCksXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IGdldHRleHQoQ29tbWFuZERlbGl2ZXJ5VHlwZS5TTVMpXG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIGNhblNlbmRDb21tYW5kc1ZpYVNNUygpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zU2VydmljZS5nZXRTeXN0ZW1PcHRpb24oJ21lc3NhZ2luZycsICdwcm92aWRlcicsIGZhbHNlKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbW1hbmRPcGVyYXRpb24oXG4gICAgZGV2aWNlSWQ6IHN0cmluZyxcbiAgICBjb21tYW5kOiBDb21tYW5kLFxuICAgIGRlbGl2ZXJ5VHlwZTogQ29tbWFuZERlbGl2ZXJ5VHlwZVxuICApOiBQcm9taXNlPElSZXN1bHQ8SU9wZXJhdGlvbj4+IHtcbiAgICBjb25zdCBvcGVyYXRpb246IElPcGVyYXRpb24gPSB7XG4gICAgICBkZXZpY2VJZCxcbiAgICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdFeGVjdXRlIHNoZWxsIGNvbW1hbmQnKSArIChjb21tYW5kLm5hbWUgPyBgOiAke2NvbW1hbmQubmFtZX1gIDogJycpLFxuICAgICAgZGVsaXZlcnlUeXBlOiBkZWxpdmVyeVR5cGUgPT09IENvbW1hbmREZWxpdmVyeVR5cGUuU01TID8gQ29tbWFuZERlbGl2ZXJ5VHlwZS5TTVMgOiB1bmRlZmluZWQsXG4gICAgICBjOHlfQ29tbWFuZDoge1xuICAgICAgICB0ZXh0OiBjb21tYW5kLnRleHRcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm9wZXJhdGlvblNlcnZpY2UuY3JlYXRlKG9wZXJhdGlvbik7XG4gIH1cbn1cbiJdfQ==