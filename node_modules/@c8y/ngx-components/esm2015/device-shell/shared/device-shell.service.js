import { Injectable } from '@angular/core';
import { OperationService } from '@c8y/client';
import { gettext, OptionsService } from '@c8y/ngx-components';
import { CommandDeliveryType } from './device-shell.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
export class DeviceShellService {
    constructor(optionsService, operationService) {
        this.optionsService = optionsService;
        this.operationService = operationService;
    }
    getDeliveryTypes() {
        return [
            {
                name: gettext(CommandDeliveryType.DEFAULT),
                default: true
            },
            {
                name: gettext(CommandDeliveryType.SMS)
            }
        ];
    }
    canSendCommandsViaSMS() {
        return this.optionsService.getSystemOption('messaging', 'provider', false);
    }
    createCommandOperation(deviceId, command, deliveryType) {
        const operation = {
            deviceId,
            description: gettext('Execute shell command') + (command.name ? `: ${command.name}` : ''),
            deliveryType: deliveryType === CommandDeliveryType.SMS ? CommandDeliveryType.SMS : undefined,
            c8y_Command: {
                text: command.text
            }
        };
        return this.operationService.create(operation);
    }
}
DeviceShellService.ɵfac = function DeviceShellService_Factory(t) { return new (t || DeviceShellService)(ɵngcc0.ɵɵinject(ɵngcc1.OptionsService), ɵngcc0.ɵɵinject(ɵngcc2.OperationService)); };
DeviceShellService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceShellService, factory: DeviceShellService.ɵfac });
DeviceShellService.ctorParameters = () => [
    { type: OptionsService },
    { type: OperationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceShellService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.OptionsService }, { type: ɵngcc2.OperationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNoZWxsLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldmljZS1zaGVsbC9zaGFyZWQvZGV2aWNlLXNoZWxsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXVCLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUQsT0FBTyxFQUFXLG1CQUFtQixFQUFnQixNQUFNLHNCQUFzQixDQUFDOzs7O0FBR2xGLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFBRSxZQUFvQixjQUE4QixFQUFVLGdCQUFrQztBQUFJLFFBQTlFLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUFDLFFBQVMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLElBQUUsQ0FBQztBQUNwRyxJQUNFLGdCQUFnQjtBQUFLLFFBQ25CLE9BQU87QUFDWCxZQUFNO0FBQ04sZ0JBQVEsSUFBSSxFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUM7QUFDbEQsZ0JBQVEsT0FBTyxFQUFFLElBQUk7QUFDckIsYUFBTztBQUNQLFlBQU07QUFDTixnQkFBUSxJQUFJLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQztBQUM5QyxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDRSxxQkFBcUI7QUFBSyxRQUN4QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0UsSUFBRSxDQUFDO0FBQ0gsSUFDRSxzQkFBc0IsQ0FDcEIsUUFBZ0IsRUFDaEIsT0FBZ0IsRUFDaEIsWUFBaUM7QUFDbEMsUUFDQyxNQUFNLFNBQVMsR0FBZTtBQUNsQyxZQUFNLFFBQVE7QUFDZCxZQUFNLFdBQVcsRUFBRSxPQUFPLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDL0YsWUFBTSxZQUFZLEVBQUUsWUFBWSxLQUFLLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQ2xHLFlBQU0sV0FBVyxFQUFFO0FBQ25CLGdCQUFRLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUMxQixhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sUUFBSSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkQsSUFBRSxDQUFDO0FBQ0g7OENBbkNDLFVBQVU7b0lBQ1Q7QUFBQztBQUNVLFlBTEssY0FBYztBQUFJLFlBRE4sZ0JBQWdCO0FBQUc7OztrSEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU9wZXJhdGlvbiwgSVJlc3VsdCwgT3BlcmF0aW9uU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldHRleHQsIE9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBDb21tYW5kLCBDb21tYW5kRGVsaXZlcnlUeXBlLCBEZWxpdmVyeVR5cGUgfSBmcm9tICcuL2RldmljZS1zaGVsbC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZXZpY2VTaGVsbFNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnNTZXJ2aWNlOiBPcHRpb25zU2VydmljZSwgcHJpdmF0ZSBvcGVyYXRpb25TZXJ2aWNlOiBPcGVyYXRpb25TZXJ2aWNlKSB7fVxuXG4gIGdldERlbGl2ZXJ5VHlwZXMoKTogRGVsaXZlcnlUeXBlW10ge1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IGdldHRleHQoQ29tbWFuZERlbGl2ZXJ5VHlwZS5ERUZBVUxUKSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogZ2V0dGV4dChDb21tYW5kRGVsaXZlcnlUeXBlLlNNUylcbiAgICAgIH1cbiAgICBdO1xuICB9XG5cbiAgY2FuU2VuZENvbW1hbmRzVmlhU01TKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnNTZXJ2aWNlLmdldFN5c3RlbU9wdGlvbignbWVzc2FnaW5nJywgJ3Byb3ZpZGVyJywgZmFsc2UpO1xuICB9XG5cbiAgY3JlYXRlQ29tbWFuZE9wZXJhdGlvbihcbiAgICBkZXZpY2VJZDogc3RyaW5nLFxuICAgIGNvbW1hbmQ6IENvbW1hbmQsXG4gICAgZGVsaXZlcnlUeXBlOiBDb21tYW5kRGVsaXZlcnlUeXBlXG4gICk6IFByb21pc2U8SVJlc3VsdDxJT3BlcmF0aW9uPj4ge1xuICAgIGNvbnN0IG9wZXJhdGlvbjogSU9wZXJhdGlvbiA9IHtcbiAgICAgIGRldmljZUlkLFxuICAgICAgZGVzY3JpcHRpb246IGdldHRleHQoJ0V4ZWN1dGUgc2hlbGwgY29tbWFuZCcpICsgKGNvbW1hbmQubmFtZSA/IGA6ICR7Y29tbWFuZC5uYW1lfWAgOiAnJyksXG4gICAgICBkZWxpdmVyeVR5cGU6IGRlbGl2ZXJ5VHlwZSA9PT0gQ29tbWFuZERlbGl2ZXJ5VHlwZS5TTVMgPyBDb21tYW5kRGVsaXZlcnlUeXBlLlNNUyA6IHVuZGVmaW5lZCxcbiAgICAgIGM4eV9Db21tYW5kOiB7XG4gICAgICAgIHRleHQ6IGNvbW1hbmQudGV4dFxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uU2VydmljZS5jcmVhdGUob3BlcmF0aW9uKTtcbiAgfVxufVxuIl19