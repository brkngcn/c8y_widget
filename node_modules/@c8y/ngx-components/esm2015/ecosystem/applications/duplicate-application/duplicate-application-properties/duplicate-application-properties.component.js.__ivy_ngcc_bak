import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { distinctUntilKeyChanged, map, tap } from 'rxjs/operators';
import { APP_STATE } from '../../../ecosystem.constants';
import { EcosystemService } from '../../../ecosystem.service';
import { ApplicationPropertiesFormComponent } from '../../../shared/application-properties-form.component';
export class DuplicateApplicationPropertiesComponent {
    constructor(bsModalRef, ecosystemService, applicationService) {
        this.bsModalRef = bsModalRef;
        this.ecosystemService = ecosystemService;
        this.applicationService = applicationService;
        this.isFirstStep = false;
        this.duplicatedApp = new EventEmitter();
        this.disableForm = false;
        this.inProgress = false;
    }
    ngOnInit() {
        this.isSubscribedApp$ = this.selectedApp.pipe(distinctUntilKeyChanged('id'), map(app => (app ? this.ecosystemService.getAppState(app) === APP_STATE.SUBSCRIBED : true)), tap(isSubscribed => {
            this.disableForm = isSubscribed;
            this.getAppConfig();
        }));
        this.getAppConfig();
    }
    duplicateApp() {
        return __awaiter(this, void 0, void 0, function* () {
            const formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
            this.inProgress = true;
            const clonedApp = (yield this.applicationService.clone(this.selectedApp.value)).data;
            Object.assign(clonedApp, formGroupValue);
            delete clonedApp.type;
            yield this.updateApp(clonedApp);
            this.inProgress = false;
        });
    }
    cancel() {
        this.bsModalRef.hide();
    }
    back() {
        this.stepper.previous();
    }
    getAppConfig() {
        if (this.disableForm) {
            const { name, key, contextPath } = this.selectedApp.value;
            this.newAppConfig = { name, key, contextPath };
        }
        else {
            this.newAppConfig = this.ecosystemService.getUniqueAppConfig(this.selectedApp.value, this.existingApps);
        }
    }
    updateApp(clonedAppConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data: app } = yield this.ecosystemService.updateApp(clonedAppConfig, true);
                const manifest = yield this.getAppManifest(app);
                if (manifest) {
                    yield this.updateManifest(app, manifest);
                }
                this.duplicatedApp.emit(app);
                this.stepper.next();
            }
            catch (err) {
                this.inProgress = false;
            }
        });
    }
    updateManifest(app, manifest) {
        return __awaiter(this, void 0, void 0, function* () {
            const keysToUpdate = ['name', 'key', 'contextPath'];
            const someKeyDiffers = keysToUpdate.some(key => app[key] !== manifest[key]);
            if (someKeyDiffers) {
                keysToUpdate.forEach(key => {
                    manifest[key] = app[key];
                });
                yield this.applicationService.storeAppManifest(app, manifest);
            }
        });
    }
    getAppManifest(app) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(app === null || app === void 0 ? void 0 : app.contextPath)) {
                return;
            }
            try {
                const manifest = yield this.applicationService.getAppManifest(app);
                return manifest;
            }
            catch (ex) {
                return;
            }
        });
    }
}
DuplicateApplicationPropertiesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-duplicate-application-properties',
                template: "<p\n  class=\"p-16 text-center text-medium separator-bottom sticky-top bg-white fit-w\"\n  *ngIf=\"!inProgress\"\n>\n  {{ 'Provide application details' | translate }}\n</p>\n\n<ng-container *ngIf=\"!inProgress\">\n  <label class=\"c8y-switch\" *ngIf=\"isSubscribedApp$ | async\">\n    <input type=\"checkbox\" [(ngModel)]=\"disableForm\" (change)=\"getAppConfig()\" />\n    <span></span> {{ 'Overrule subscribed application' | translate }}\n  </label>\n\n  <c8y-application-properties-form\n    [application]=\"newAppConfig\"\n    class=\"d-block fit-w\"\n    [disabled]=\"disableForm\"\n  ></c8y-application-properties-form>\n</ng-container>\n<c8y-progress-bar\n  *ngIf=\"inProgress\"\n  [message]=\"'Duplicating\u2026' | translate\"\n  class=\"text-center d-block\"\n></c8y-progress-bar>\n\n<c8y-wizard-footer>\n  <button\n    *ngIf=\"!isFirstStep\"\n    (click)=\"back()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-default\"\n    type=\"button\"\n    title=\"{{ 'Back' | translate }}\"\n  >\n    {{ 'Back' | translate }}\n  </button>\n  <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button\n    (click)=\"duplicateApp()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    title=\"{{ 'Duplicate' | translate }}\"\n  >\n    {{ 'Duplicate' | translate }}\n  </button>\n</c8y-wizard-footer>\n"
            },] }
];
DuplicateApplicationPropertiesComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: EcosystemService },
    { type: ApplicationService }
];
DuplicateApplicationPropertiesComponent.propDecorators = {
    stepper: [{ type: Input }],
    existingApps: [{ type: Input }],
    selectedApp: [{ type: Input }],
    isFirstStep: [{ type: Input }],
    duplicatedApp: [{ type: Output }],
    applicationPropertiesForm: [{ type: ViewChild, args: [ApplicationPropertiesFormComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,