import { ERROR_TYPE } from './ecosystem.model';
import { gettext } from '@c8y/ngx-components';
export const ERROR_MESSAGES = {
    [ERROR_TYPE.TYPE_VALIDATION]: gettext('Wrong file format. Expected a *.zip file with a valid manifest.'),
    [ERROR_TYPE.ALREADY_SUBSCRIBED]: gettext('Could not subscribe to the microservice because another application with the same context path is already subscribed.'),
    [ERROR_TYPE.NO_MANIFEST_FILE]: gettext('Could not find a manifest.'),
    [ERROR_TYPE.INVALID_PACKAGE]: gettext('You have not uploaded a valid package.'),
    [ERROR_TYPE.INVALID_APPLICATION]: gettext('You have not uploaded a valid application.'),
    [ERROR_TYPE.INTERNAL_ERROR]: gettext('An internal error occurred, try to upload again.')
};
export const APP_STATE = {
    SUBSCRIBED: {
        label: gettext('Subscribed`application`'),
        class: 'label-primary'
    },
    CUSTOM: {
        label: gettext('Custom`application`'),
        class: 'label-info'
    },
    EXTERNAL: {
        label: gettext('External`application`'),
        class: 'label-warning'
    },
    UNPACKED: {
        label: gettext('Unpacked`application`'),
        class: 'label-success'
    },
    PACKAGE_BLUEPRINT: {
        label: gettext('Blueprint'),
        class: 'label-success'
    },
    PACKAGE_PLUGIN: {
        label: gettext('Plugins'),
        class: 'label-info'
    }
};
const ɵ0 = (repository) => ((repository === null || repository === void 0 ? void 0 : repository.url) ? repository.url : repository), ɵ1 = (e, link) => window.open(link, '_blank', 'noopener,noreferrer'), ɵ2 = (e, link) => window.open(link, '_blank', 'noopener,noreferrer');
export const packageProperties = [
    {
        label: gettext('Version'),
        key: 'version'
    },
    {
        label: gettext('Author'),
        key: 'author'
    },
    {
        label: gettext('Keywords'),
        key: 'keywords'
    },
    {
        label: gettext('Source'),
        key: 'repository',
        transform: ɵ0,
        type: 'link',
        action: ɵ1
    },
    {
        label: gettext('Homepage'),
        key: 'homepage',
        type: 'link',
        action: ɵ2
    },
    {
        label: gettext('Required platform version'),
        key: 'requiredPlatformVersion'
    },
    {
        label: gettext('License'),
        key: 'license'
    }
];
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNvc3lzdGVtLmNvbnN0YW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Vjb3N5c3RlbS9lY29zeXN0ZW0uY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsT0FBTyxFQUFzQixNQUFNLHFCQUFxQixDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRztJQUM1QixDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLENBQ25DLGlFQUFpRSxDQUNsRTtJQUNELENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsT0FBTyxDQUN0Qyx1SEFBdUgsQ0FDeEg7SUFDRCxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQztJQUNwRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLENBQUMsd0NBQXdDLENBQUM7SUFDL0UsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRSxPQUFPLENBQUMsNENBQTRDLENBQUM7SUFDdkYsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsT0FBTyxDQUFDLGtEQUFrRCxDQUFDO0NBQ3pGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUc7SUFDdkIsVUFBVSxFQUFFO1FBQ1YsS0FBSyxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztRQUN6QyxLQUFLLEVBQUUsZUFBZTtLQUN2QjtJQUNELE1BQU0sRUFBRTtRQUNOLEtBQUssRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7UUFDckMsS0FBSyxFQUFFLFlBQVk7S0FDcEI7SUFDRCxRQUFRLEVBQUU7UUFDUixLQUFLLEVBQUUsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1FBQ3ZDLEtBQUssRUFBRSxlQUFlO0tBQ3ZCO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsS0FBSyxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztRQUN2QyxLQUFLLEVBQUUsZUFBZTtLQUN2QjtJQUNELGlCQUFpQixFQUFFO1FBQ2pCLEtBQUssRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQzNCLEtBQUssRUFBRSxlQUFlO0tBQ3ZCO0lBQ0QsY0FBYyxFQUFFO1FBQ2QsS0FBSyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDekIsS0FBSyxFQUFFLFlBQVk7S0FDcEI7Q0FDRixDQUFDO1dBa0JhLENBQUMsVUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUEsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLEdBQUcsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BRXZFLENBQUMsQ0FBQyxFQUFFLElBQVksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixDQUFDLE9BTXZFLENBQUMsQ0FBQyxFQUFFLElBQVksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixDQUFDO0FBeEJuRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBeUI7SUFDckQ7UUFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN6QixHQUFHLEVBQUUsU0FBUztLQUNmO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN4QixHQUFHLEVBQUUsUUFBUTtLQUNkO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUMxQixHQUFHLEVBQUUsVUFBVTtLQUNoQjtJQUNEO1FBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDeEIsR0FBRyxFQUFFLFlBQVk7UUFDakIsU0FBUyxJQUFzRTtRQUMvRSxJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sSUFBeUU7S0FDaEY7SUFDRDtRQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQzFCLEdBQUcsRUFBRSxVQUFVO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLElBQXlFO0tBQ2hGO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLDJCQUEyQixDQUFDO1FBQzNDLEdBQUcsRUFBRSx5QkFBeUI7S0FDL0I7SUFDRDtRQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3pCLEdBQUcsRUFBRSxTQUFTO0tBQ2Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVJST1JfVFlQRSB9IGZyb20gJy4vZWNvc3lzdGVtLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQsIFByb3BlcnRpZXNMaXN0SXRlbSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5leHBvcnQgY29uc3QgRVJST1JfTUVTU0FHRVMgPSB7XG4gIFtFUlJPUl9UWVBFLlRZUEVfVkFMSURBVElPTl06IGdldHRleHQoXG4gICAgJ1dyb25nIGZpbGUgZm9ybWF0LiBFeHBlY3RlZCBhICouemlwIGZpbGUgd2l0aCBhIHZhbGlkIG1hbmlmZXN0LidcbiAgKSxcbiAgW0VSUk9SX1RZUEUuQUxSRUFEWV9TVUJTQ1JJQkVEXTogZ2V0dGV4dChcbiAgICAnQ291bGQgbm90IHN1YnNjcmliZSB0byB0aGUgbWljcm9zZXJ2aWNlIGJlY2F1c2UgYW5vdGhlciBhcHBsaWNhdGlvbiB3aXRoIHRoZSBzYW1lIGNvbnRleHQgcGF0aCBpcyBhbHJlYWR5IHN1YnNjcmliZWQuJ1xuICApLFxuICBbRVJST1JfVFlQRS5OT19NQU5JRkVTVF9GSUxFXTogZ2V0dGV4dCgnQ291bGQgbm90IGZpbmQgYSBtYW5pZmVzdC4nKSxcbiAgW0VSUk9SX1RZUEUuSU5WQUxJRF9QQUNLQUdFXTogZ2V0dGV4dCgnWW91IGhhdmUgbm90IHVwbG9hZGVkIGEgdmFsaWQgcGFja2FnZS4nKSxcbiAgW0VSUk9SX1RZUEUuSU5WQUxJRF9BUFBMSUNBVElPTl06IGdldHRleHQoJ1lvdSBoYXZlIG5vdCB1cGxvYWRlZCBhIHZhbGlkIGFwcGxpY2F0aW9uLicpLFxuICBbRVJST1JfVFlQRS5JTlRFUk5BTF9FUlJPUl06IGdldHRleHQoJ0FuIGludGVybmFsIGVycm9yIG9jY3VycmVkLCB0cnkgdG8gdXBsb2FkIGFnYWluLicpXG59O1xuXG5leHBvcnQgY29uc3QgQVBQX1NUQVRFID0ge1xuICBTVUJTQ1JJQkVEOiB7XG4gICAgbGFiZWw6IGdldHRleHQoJ1N1YnNjcmliZWRgYXBwbGljYXRpb25gJyksXG4gICAgY2xhc3M6ICdsYWJlbC1wcmltYXJ5J1xuICB9LFxuICBDVVNUT006IHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnQ3VzdG9tYGFwcGxpY2F0aW9uYCcpLFxuICAgIGNsYXNzOiAnbGFiZWwtaW5mbydcbiAgfSxcbiAgRVhURVJOQUw6IHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnRXh0ZXJuYWxgYXBwbGljYXRpb25gJyksXG4gICAgY2xhc3M6ICdsYWJlbC13YXJuaW5nJ1xuICB9LFxuICBVTlBBQ0tFRDoge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdVbnBhY2tlZGBhcHBsaWNhdGlvbmAnKSxcbiAgICBjbGFzczogJ2xhYmVsLXN1Y2Nlc3MnXG4gIH0sXG4gIFBBQ0tBR0VfQkxVRVBSSU5UOiB7XG4gICAgbGFiZWw6IGdldHRleHQoJ0JsdWVwcmludCcpLFxuICAgIGNsYXNzOiAnbGFiZWwtc3VjY2VzcydcbiAgfSxcbiAgUEFDS0FHRV9QTFVHSU46IHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnUGx1Z2lucycpLFxuICAgIGNsYXNzOiAnbGFiZWwtaW5mbydcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHBhY2thZ2VQcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzTGlzdEl0ZW1bXSA9IFtcbiAge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdWZXJzaW9uJyksXG4gICAga2V5OiAndmVyc2lvbidcbiAgfSxcbiAge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdBdXRob3InKSxcbiAgICBrZXk6ICdhdXRob3InXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnS2V5d29yZHMnKSxcbiAgICBrZXk6ICdrZXl3b3JkcydcbiAgfSxcbiAge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdTb3VyY2UnKSxcbiAgICBrZXk6ICdyZXBvc2l0b3J5JyxcbiAgICB0cmFuc2Zvcm06IChyZXBvc2l0b3J5OiBhbnkpID0+IChyZXBvc2l0b3J5Py51cmwgPyByZXBvc2l0b3J5LnVybCA6IHJlcG9zaXRvcnkpLFxuICAgIHR5cGU6ICdsaW5rJyxcbiAgICBhY3Rpb246IChlLCBsaW5rOiBzdHJpbmcpID0+IHdpbmRvdy5vcGVuKGxpbmssICdfYmxhbmsnLCAnbm9vcGVuZXIsbm9yZWZlcnJlcicpXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnSG9tZXBhZ2UnKSxcbiAgICBrZXk6ICdob21lcGFnZScsXG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIGFjdGlvbjogKGUsIGxpbms6IHN0cmluZykgPT4gd2luZG93Lm9wZW4obGluaywgJ19ibGFuaycsICdub29wZW5lcixub3JlZmVycmVyJylcbiAgfSxcbiAge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdSZXF1aXJlZCBwbGF0Zm9ybSB2ZXJzaW9uJyksXG4gICAga2V5OiAncmVxdWlyZWRQbGF0Zm9ybVZlcnNpb24nXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnTGljZW5zZScpLFxuICAgIGtleTogJ2xpY2Vuc2UnXG4gIH1cbl07XG4iXX0=