import { __awaiter } from "tslib";
import { EventEmitter, Injectable } from '@angular/core';
import { ApplicationService, ApplicationType, TenantService } from '@c8y/client';
import { AlertService, AppStateService, gettext, HumanizeAppNamePipe, ModalService, Status, ZipService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { saveAs } from 'file-saver';
import { cloneDeep, get, groupBy, kebabCase, pick } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { debounceTime, take } from 'rxjs/operators';
import { APP_STATE } from './ecosystem.constants';
import { ERROR_TYPE } from './ecosystem.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@c8y/client/lib/src/application/ApplicationService";
import * as i4 from "@c8y/client/lib/src/tenant/TenantService";
const CUMULOCITY_JSON = 'cumulocity.json';
export class EcosystemService {
    constructor(modal, alertService, humanizeAppName, translateService, applicationService, appStateService, zipService, tenantService) {
        this.modal = modal;
        this.alertService = alertService;
        this.humanizeAppName = humanizeAppName;
        this.translateService = translateService;
        this.applicationService = applicationService;
        this.appStateService = appStateService;
        this.zipService = zipService;
        this.tenantService = tenantService;
        this.appDeleted = new EventEmitter();
        this.progress = new BehaviorSubject(null);
    }
    getUniqueAppConfig(srcApp, existingApps) {
        let app = {
            name: srcApp.name,
            key: srcApp.key,
            contextPath: srcApp.contextPath
        };
        for (let retryNo = 0; retryNo < 9;) {
            if (this.checkIfAppNameKeyPathExists(existingApps, app, retryNo)) {
                retryNo++;
                app = {
                    name: [srcApp.name, retryNo].join('-'),
                    key: [srcApp.key, retryNo].join('-'),
                    contextPath: [srcApp.contextPath, retryNo].join('-')
                };
            }
            else {
                return app;
            }
        }
        return app;
    }
    getApplication(appId) {
        return this.applicationService.detail(appId).then(res => res.data);
    }
    getApplications(customFilter = {}) {
        const filter = {
            pageSize: 2000,
            withTotalPages: true
        };
        Object.assign(filter, customFilter);
        const currentTenant = this.appStateService.currentTenant.value;
        return this.applicationService.listByTenant(currentTenant.name, filter);
    }
    getMicroservices() {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications()).data;
            const microservices = apps.filter(app => this.isMicroservice(app));
            return microservices.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    getWebApplications(customFilter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications(customFilter)).data;
            const webApps = apps.filter(app => this.isApplication(app));
            this.appsGroupedByContextPath = groupBy(webApps, 'contextPath');
            return webApps.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    getFeatureApplications(customFilter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications(customFilter)).data;
            const webApps = apps.filter(app => this.isFeature(app));
            return webApps.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    getPackageApplications(customFilter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications(customFilter)).data;
            const webApps = apps.filter(app => this.isPackage(app));
            return webApps.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    isMicroserviceHostingAllowed() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: apps } = yield this.applicationService.listByName('feature-microservice-hosting');
            return !!apps.filter(app => { var _a, _b; return ((_b = (_a = app.owner) === null || _a === void 0 ? void 0 : _a.tenant) === null || _b === void 0 ? void 0 : _b.id) === 'management'; }).length;
        });
    }
    canOpenAppInBrowser(app) {
        const isNotAFeature = !this.isFeature(app);
        const hasProperType = [
            ApplicationType.HOSTED,
            ApplicationType.EXTERNAL,
            ApplicationType.REPOSITORY
        ].includes(app.type);
        const isNotAPackage = !this.isPackage(app);
        return isNotAFeature && hasProperType && isNotAPackage;
    }
    canDeleteApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            return (this.isOwner(app) && ((yield this.hasSubscribedAppParent(app)) || !this.isCurrentApp(app)));
        });
    }
    isOwner(app) {
        const currentTenant = this.appStateService.currentTenant.value;
        const appOwner = get(app, 'owner.tenant.id');
        return currentTenant.name === appOwner;
    }
    isFeature(app) {
        return !!app.name.match(/feature-/);
    }
    isMicroservice(app) {
        return app.type === 'MICROSERVICE';
    }
    isExternal(app) {
        return app.type === 'EXTERNAL';
    }
    isPackage(app) {
        var _a;
        return ((_a = app.manifest) === null || _a === void 0 ? void 0 : _a.isPackage) === true;
    }
    cancelAppCreation(app) {
        if (this.xhr) {
            this.xhr.abort();
        }
        if (app) {
            this.applicationService.delete(app);
        }
    }
    updateUploadProgress(event) {
        if (event.lengthComputable) {
            const currentProgress = this.progress.value;
            this.progress.next(currentProgress + (event.loaded / event.total) * (95 - currentProgress));
        }
    }
    setAppActiveVersion(app, activeVersionId) {
        return this.applicationService.update({ id: app.id, activeVersionId });
    }
    getHumanizedAppName(app) {
        return this.humanizeAppName.transform(app.name).pipe(debounceTime(250), take(1)).toPromise();
    }
    createConfig(app, formGroupValue) {
        const { id, manifest } = app;
        let config = pick(formGroupValue, ['name', 'key', 'contextPath']);
        config = Object.assign(Object.assign({}, config), { setup: true, id, description: manifest.description });
        return config;
    }
    updateAppManifest(application, sourcePackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = application;
            const cleanedApp = this.removeAppProperties(application);
            cleanedApp.setup = true;
            cleanedApp.manifest.isPackage = false;
            cleanedApp.manifest.source = sourcePackage.id;
            return yield this.applicationService
                .binary(id)
                .updateFiles([{ path: CUMULOCITY_JSON, contents: JSON.stringify(cleanedApp) }]);
        });
    }
    listArchives(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                pageSize: 100
            };
            return (yield this.applicationService.binary(appId).list(filter)).data;
        });
    }
    deleteArchive(archive, app) {
        return __awaiter(this, void 0, void 0, function* () {
            const humanizedArchiveName = yield this.getHumanizedAppName(archive);
            try {
                yield this.modal.confirm(gettext('Delete archive'), this.translateService.instant(gettext(`You are about to delete archive "{{ humanizedArchiveName }}". Do you want to proceed?`), { humanizedArchiveName }), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
                yield this.applicationService.binary(app).delete(archive.id);
                this.alertService.success(gettext('Archive deleted.'));
            }
            catch (ex) {
                if (ex) {
                    this.alertService.danger(get(ex, 'data.message'), ex.data);
                }
                throw new Error('Cancelled');
            }
        });
    }
    downloadArchive(app, archive) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const binary = yield this.getBinary(app, archive);
                const fileBinary = new Blob([binary], { type: 'application/x-zip-compressed' });
                saveAs(fileBinary, archive.name);
            }
            catch (e) {
                // empty
            }
        });
    }
    updateApp(app, deleteOnFailure = false) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.applicationService.update(app);
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
                if (deleteOnFailure) {
                    yield this.applicationService.delete(app.id);
                    throw new Error('Application creation failed.');
                }
            }
        });
    }
    deleteApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const humanizedAppName = yield this.getHumanizedAppName(app);
            yield this.modal.confirm(gettext('Delete application'), this.translateService.instant(gettext(`You are about to delete application "{{ humanizedAppName }}". Do you want to proceed?`), { humanizedAppName }), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
            yield this.applicationService.delete(app.id);
            this.alertService.success(gettext('Application deleted.'));
            this.appDeleted.emit(app);
        });
    }
    checkIfSubscribed(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = yield this.tenantService.current();
            const subscribedApps = currentTenant.data.applications.references;
            return subscribedApps.some(application => application.application.id === app.id);
        });
    }
    subscribeApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appStateService.currentTenant.value;
            try {
                yield this.tenantService.subscribeApplication(currentTenant, app);
                this.alertService.success(gettext('Successfully subscribed to application.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    unsubscribeApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appStateService.currentTenant.value;
            try {
                yield this.tenantService.unsubscribeApplication(currentTenant, app);
                this.alertService.success(gettext('Successfully unsubscribed from application.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    isValidAppType(archive, appType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const currentType = yield this.getAppType(archive);
                if (currentType !== appType) {
                    throw new Error(ERROR_TYPE.TYPE_VALIDATION);
                }
                else {
                    this.progress.next(this.progress.value + 10);
                    return true;
                }
            }
            catch (ex) {
                throw new Error(ERROR_TYPE.TYPE_VALIDATION);
            }
        });
    }
    uploadArchiveToApp(archive, app) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryService = this.applicationService.binary(app);
            this.xhr = binaryService.uploadWithProgressXhr(archive, this.updateUploadProgress.bind(this));
            const binaryMo = yield binaryService.getXMLHttpResponse(this.xhr);
            return (yield this.setAppActiveVersion(app, binaryMo.id)).data;
        });
    }
    createAppForArchive(archive, isPackageTypeArchive = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let isPackage = false;
            const appType = yield this.getAppType(archive);
            let appModel = {};
            if (appType === ApplicationType.HOSTED) {
                try {
                    appModel = yield this.getCumulocityJson(archive).toPromise();
                    isPackage = appModel.isPackage;
                }
                catch (e) {
                    // do nothing, we allow having HOSTED applications without the manifest file
                }
            }
            const name = this.getBaseNameFromArchiveOrAppModel(archive, appType, appModel);
            const clearedName = this.removeForbiddenCharacters(name);
            const key = this.getAppKey(appModel, clearedName);
            const contextPath = this.getContextPath(appModel, name);
            const appToSave = {
                resourcesUrl: '/',
                type: appType,
                name,
                key,
                contextPath
            };
            if (isPackageTypeArchive && !isPackage) {
                throw new Error(ERROR_TYPE.INVALID_PACKAGE);
            }
            else if (!isPackageTypeArchive && isPackage) {
                throw new Error(ERROR_TYPE.INVALID_APPLICATION);
            }
            return (yield this.applicationService.create(Object.assign(Object.assign({}, appToSave), { manifest: { isPackage } }))).data;
        });
    }
    reactivateArchive(app) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.applicationService.reactivateArchive(app.id);
                this.alertService.success(gettext('Application reactivated.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    removeOldestArchive(app, archives) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Delete oldest archive and continue'), gettext('Up to 6 archives can be saved in the platform. If you upload a new archive, the oldest archive that is not active will be deleted. Do you want to proceed?'), Status.INFO, { ok: gettext('Delete and continue') });
                const archiveToDelete = archives[archives.length - 2];
                yield this.applicationService.binary(app).delete(archiveToDelete.id);
                this.alertService.success(gettext('Archive deleted.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getAppState(app) {
        if (!this.isOwner(app)) {
            return APP_STATE.SUBSCRIBED;
        }
        else if (this.isUnpacked(app)) {
            return APP_STATE.UNPACKED;
        }
        else if (app.type === ApplicationType.EXTERNAL) {
            return APP_STATE.EXTERNAL;
        }
        else if (this.isPackageBlueprint(app)) {
            return APP_STATE.PACKAGE_BLUEPRINT;
        }
        else if (this.isPluginsPackage(app)) {
            return APP_STATE.PACKAGE_PLUGIN;
        }
        return APP_STATE.CUSTOM;
    }
    isPackageBlueprint(app) {
        return this.isPackage(app) && app.manifest.package === 'blueprint';
    }
    isPluginsPackage(app) {
        return this.isPackage(app) && app.manifest.package === 'plugin';
    }
    isUnpacked(app) {
        var _a;
        return !!((_a = app.manifest) === null || _a === void 0 ? void 0 : _a.source);
    }
    hasExports(app) {
        var _a, _b;
        return !!((_b = (_a = app.manifest) === null || _a === void 0 ? void 0 : _a.exports) === null || _b === void 0 ? void 0 : _b.length);
    }
    isApplication(app) {
        return (app.type !== ApplicationType.MICROSERVICE && !this.isFeature(app) && !this.isPackage(app));
    }
    isCustomMicroservice(app) {
        return this.isOwner(app) && app.type === ApplicationType.MICROSERVICE;
    }
    isOverwrittenByCustomApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            return !this.isOwner(app) && (yield this.hasSubscribedAppParent(app));
        });
    }
    hasSubscribedAppParent(app) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.appsGroupedByContextPath) {
                yield this.getWebApplications();
            }
            return app.contextPath && ((_a = this.appsGroupedByContextPath[app.contextPath]) === null || _a === void 0 ? void 0 : _a.length) === 2;
        });
    }
    getAppKey(appModel, name) {
        let key = appModel === null || appModel === void 0 ? void 0 : appModel.key;
        if (!key) {
            key = `${kebabCase(name)}-key`;
        }
        return key;
    }
    getContextPath(appModel, name) {
        return (appModel === null || appModel === void 0 ? void 0 : appModel.contextPath) || name.toLowerCase();
    }
    removeForbiddenCharacters(str) {
        return str.replace(/[^a-zA-Z0-9-_]/g, '');
    }
    isCurrentApp(app) {
        const currentApp = this.appStateService.state.app;
        return currentApp.contextPath === app.contextPath;
    }
    getCumulocityJson(archive) {
        return this.zipService.getJsonData(archive, {
            filename: CUMULOCITY_JSON
        });
    }
    getAppType(archive) {
        return this.getCumulocityJson(archive)
            .toPromise()
            .then(data => get(data, 'type') ||
            (get(data, 'apiVersion') ? ApplicationType.MICROSERVICE : ApplicationType.HOSTED))
            .catch(() => ApplicationType.HOSTED);
    }
    getBinary(app, archive) {
        return __awaiter(this, void 0, void 0, function* () {
            let binary;
            try {
                const res = yield this.applicationService.binary(app).downloadArchive(archive.id);
                binary = yield res.arrayBuffer();
            }
            catch (ex) {
                const msg = gettext('Could not get the binary.');
                this.alertService.danger(msg);
            }
            return binary;
        });
    }
    getBaseNameFromArchiveOrAppModel(archive, appType, appModel) {
        let baseName = (appModel === null || appModel === void 0 ? void 0 : appModel.name) || archive.name.replace(/\.zip$/i, '');
        if (appType === 'MICROSERVICE') {
            baseName = baseName.replace(/-\d+\.\d+\.\d+(-SNAPSHOT)?$/, '');
        }
        return baseName;
    }
    checkIfAppNameKeyPathExists(existingApps, app, retryNo) {
        return existingApps.find(existingApp => existingApp.name === app.name ||
            existingApp.key === app.key ||
            existingApp.contextPath === app.contextPath ||
            existingApp.name === [app.name, retryNo].join('-') ||
            existingApp.key === [app.key, retryNo].join('-') ||
            existingApp.contextPath === [app.contextPath, retryNo].join('-'));
    }
    removeAppProperties(app) {
        const tempApp = cloneDeep(app);
        const propertiesToRemove = ['id', 'owner', 'activeVersionId'];
        propertiesToRemove.forEach(prop => delete tempApp[prop]);
        return tempApp;
    }
}
EcosystemService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EcosystemService_Factory() { return new EcosystemService(i0.ɵɵinject(i1.ModalService), i0.ɵɵinject(i1.AlertService), i0.ɵɵinject(i1.HumanizeAppNamePipe), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.ApplicationService), i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i1.ZipService), i0.ɵɵinject(i4.TenantService)); }, token: EcosystemService, providedIn: "root" });
EcosystemService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
EcosystemService.ctorParameters = () => [
    { type: ModalService },
    { type: AlertService },
    { type: HumanizeAppNamePipe },
    { type: TranslateService },
    { type: ApplicationService },
    { type: AppStateService },
    { type: ZipService },
    { type: TenantService }
];
//# sourceMappingURL=data:application/json;base64,