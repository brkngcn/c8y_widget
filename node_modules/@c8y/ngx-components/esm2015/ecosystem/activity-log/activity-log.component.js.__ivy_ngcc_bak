import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { AlertService } from '@c8y/ngx-components';
import { EcosystemService } from '../ecosystem.service';
export class ActivityLogComponent {
    constructor(ecosystemService, alertService) {
        this.ecosystemService = ecosystemService;
        this.alertService = alertService;
        this.hasAdminPermissions = false;
        this.archives = [];
        this.canReactivate = false;
    }
    get uploadProgress() {
        return this.ecosystemService.progress;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.canReactivate = this.showReactivate();
            this.refresh();
        });
    }
    isActive(archive) {
        return this.application.activeVersionId === archive.id;
    }
    toActivate(archive) {
        return this.toActivateVersionId === archive.id;
    }
    checkIfLast(archive) {
        return archive.id === this.last.id;
    }
    showReactivate() {
        return this.ecosystemService.isApplication(this.application);
    }
    setActive(archive) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = archive.id || archive;
            this.toActivateVersionId = id;
            this.isLoading = true;
            try {
                this.application = (yield this.ecosystemService.setAppActiveVersion(this.application, id)).data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            this.isLoading = false;
            this.refresh();
        });
    }
    deleteArchive(archive) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.deleteArchive(archive, this.application);
            this.refresh();
        });
    }
    downloadArchive(archive) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.downloadArchive(this.application, archive);
        });
    }
    reactivateArchive() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.reactivateArchive(this.application);
        });
    }
    onRefresh() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.refresh();
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.archives = yield this.ecosystemService.listArchives(this.application.id);
            this.archives.sort((a, b) => {
                return new Date(b.created) - new Date(a.created);
            });
            this.last = this.archives[this.archives.length - 1];
            this.isLoading = false;
        });
    }
}
ActivityLogComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-activity-log',
                template: "<div class=\"inner-scroll bg-gray-white flex-grow\">\n  <div class=\"card-block overflow-visible\">\n    <c8y-list-group>\n      <c8y-li-timeline *ngFor=\"let archive of archives\" [ngClass]=\"{ active: isActive(archive) }\">\n        {{ archive.created | date: 'd MMM YYYY' }}\n        {{ archive.created | date: 'shortTime' }}\n        <c8y-li>\n          <c8y-li-icon\n            [icon]=\"checkIfLast(archive) ? 'flag-checkered' : 'file-zip-o'\"\n          ></c8y-li-icon>\n          <c8y-li-body>\n            <div class=\"d-flex a-i-start\">\n              <div style=\"min-width: 0; flex: 1\">\n                <span class=\"text-truncate-wrap\" title=\" {{ archive.description || archive.name }}\">\n                  {{ archive.description || archive.name }}\n                </span>\n                <small *ngIf=\"archive.description\" class=\"text-muted\">{{\n                  archive.description\n                }}</small>\n              </div>\n              <i\n                *ngIf=\"isLoading && toActivate(archive)\"\n                [c8yIcon]=\"'circle-o-notch'\"\n                class=\"icon-spin\"\n                title=\"{{ 'Activating' | translate }}\"\n              ></i>\n\n              <span *ngIf=\"isActive(archive)\" class=\"label label-primary m-l-auto m-t-4\">{{\n                'Active' | translate\n              }}</span>\n            </div>\n          </c8y-li-body>\n          <c8y-li-action\n            (click)=\"setActive(archive)\"\n            *ngIf=\"hasAdminPermissions && !isLoading && !isActive(archive)\"\n            icon=\"check-square-o\"\n          >\n            {{ 'Set as active`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action (click)=\"downloadArchive(archive)\" icon=\"download\">\n            {{ 'Download`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action\n            (click)=\"deleteArchive(archive)\"\n            *ngIf=\"\n              hasAdminPermissions &&\n              archives.length > 1 &&\n              !checkIfLast(archive) &&\n              !isActive(archive)\n            \"\n            icon=\"trash\"\n          >\n            {{ 'Delete`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action\n            (click)=\"reactivateArchive()\"\n            *ngIf=\"hasAdminPermissions && canReactivate && isActive(archive)\"\n            icon=\"undo\"\n          >\n            {{ 'Reactivate archive' | translate }}\n          </c8y-li-action>\n        </c8y-li>\n      </c8y-li-timeline>\n    </c8y-list-group>\n  </div>\n</div>\n<div class=\"card-footer\">\n  <c8y-form-group *ngIf=\"!isLoading && hasAdminPermissions\" class=\"m-auto\">\n    <c8y-upload-archive [(application)]=\"application\" (refresh)=\"onRefresh()\"></c8y-upload-archive>\n  </c8y-form-group>\n</div>\n"
            },] }
];
ActivityLogComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: AlertService }
];
ActivityLogComponent.propDecorators = {
    application: [{ type: Input }],
    hasAdminPermissions: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZpdHktbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Vjb3N5c3RlbS9hY3Rpdml0eS1sb2cvYWN0aXZpdHktbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBTXhELE1BQU0sT0FBTyxvQkFBb0I7SUFTL0IsWUFBb0IsZ0JBQWtDLEVBQVUsWUFBMEI7UUFBdEUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBUGpGLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUNyQyxhQUFRLEdBQXlCLEVBQUUsQ0FBQztRQUlwQyxrQkFBYSxHQUFZLEtBQUssQ0FBQztJQUU4RCxDQUFDO0lBRTlGLElBQUksY0FBYztRQUNoQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7SUFDeEMsQ0FBQztJQUVLLFFBQVE7O1lBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDM0MsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLENBQUM7S0FBQTtJQUVELFFBQVEsQ0FBQyxPQUEyQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDekQsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUEyQjtRQUNwQyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFRCxXQUFXLENBQUMsT0FBMkI7UUFDckMsT0FBTyxPQUFPLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxjQUFjO1FBQ1osT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUssU0FBUyxDQUFDLE9BQU87O1lBQ3JCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsSUFBSTtnQkFDRixJQUFJLENBQUMsV0FBVyxHQUFHLENBQ2pCLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQ3RFLENBQUMsSUFBSSxDQUFDO2FBQ1I7WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3hDO1lBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLENBQUM7S0FBQTtJQUVLLGFBQWEsQ0FBQyxPQUEyQjs7WUFDN0MsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLENBQUM7S0FBQTtJQUVLLGVBQWUsQ0FBQyxPQUEyQjs7WUFDL0MsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekUsQ0FBQztLQUFBO0lBRUssaUJBQWlCOztZQUNyQixNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEUsQ0FBQztLQUFBO0lBRUssU0FBUzs7WUFDYixNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN2QixDQUFDO0tBQUE7SUFFYSxPQUFPOztZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixPQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQVMsR0FBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFTLENBQUM7WUFDckUsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQztLQUFBOzs7WUFoRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLGl5RkFBNEM7YUFDN0M7OztZQUxRLGdCQUFnQjtZQUZoQixZQUFZOzs7MEJBU2xCLEtBQUs7a0NBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUFwcGxpY2F0aW9uLCBJQXBwbGljYXRpb25CaW5hcnkgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRWNvc3lzdGVtU2VydmljZSB9IGZyb20gJy4uL2Vjb3N5c3RlbS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFjdGl2aXR5LWxvZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9hY3Rpdml0eS1sb2cuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFjdGl2aXR5TG9nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgYXBwbGljYXRpb246IElBcHBsaWNhdGlvbjtcbiAgQElucHV0KCkgaGFzQWRtaW5QZXJtaXNzaW9ucyA9IGZhbHNlO1xuICBhcmNoaXZlczogSUFwcGxpY2F0aW9uQmluYXJ5W10gPSBbXTtcbiAgdG9BY3RpdmF0ZVZlcnNpb25JZDogc3RyaW5nO1xuICBsYXN0OiBJQXBwbGljYXRpb25CaW5hcnk7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgY2FuUmVhY3RpdmF0ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWNvc3lzdGVtU2VydmljZTogRWNvc3lzdGVtU2VydmljZSwgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZSkge31cblxuICBnZXQgdXBsb2FkUHJvZ3Jlc3MoKTogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmVjb3N5c3RlbVNlcnZpY2UucHJvZ3Jlc3M7XG4gIH1cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNhblJlYWN0aXZhdGUgPSB0aGlzLnNob3dSZWFjdGl2YXRlKCk7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gIH1cblxuICBpc0FjdGl2ZShhcmNoaXZlOiBJQXBwbGljYXRpb25CaW5hcnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbi5hY3RpdmVWZXJzaW9uSWQgPT09IGFyY2hpdmUuaWQ7XG4gIH1cblxuICB0b0FjdGl2YXRlKGFyY2hpdmU6IElBcHBsaWNhdGlvbkJpbmFyeSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRvQWN0aXZhdGVWZXJzaW9uSWQgPT09IGFyY2hpdmUuaWQ7XG4gIH1cblxuICBjaGVja0lmTGFzdChhcmNoaXZlOiBJQXBwbGljYXRpb25CaW5hcnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gYXJjaGl2ZS5pZCA9PT0gdGhpcy5sYXN0LmlkO1xuICB9XG5cbiAgc2hvd1JlYWN0aXZhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZWNvc3lzdGVtU2VydmljZS5pc0FwcGxpY2F0aW9uKHRoaXMuYXBwbGljYXRpb24pO1xuICB9XG5cbiAgYXN5bmMgc2V0QWN0aXZlKGFyY2hpdmUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpZCA9IGFyY2hpdmUuaWQgfHwgYXJjaGl2ZTtcbiAgICB0aGlzLnRvQWN0aXZhdGVWZXJzaW9uSWQgPSBpZDtcbiAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuYXBwbGljYXRpb24gPSAoXG4gICAgICAgIGF3YWl0IHRoaXMuZWNvc3lzdGVtU2VydmljZS5zZXRBcHBBY3RpdmVWZXJzaW9uKHRoaXMuYXBwbGljYXRpb24sIGlkKVxuICAgICAgKS5kYXRhO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICB9XG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnJlZnJlc2goKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZUFyY2hpdmUoYXJjaGl2ZTogSUFwcGxpY2F0aW9uQmluYXJ5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLmRlbGV0ZUFyY2hpdmUoYXJjaGl2ZSwgdGhpcy5hcHBsaWNhdGlvbik7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gIH1cblxuICBhc3luYyBkb3dubG9hZEFyY2hpdmUoYXJjaGl2ZTogSUFwcGxpY2F0aW9uQmluYXJ5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLmRvd25sb2FkQXJjaGl2ZSh0aGlzLmFwcGxpY2F0aW9uLCBhcmNoaXZlKTtcbiAgfVxuXG4gIGFzeW5jIHJlYWN0aXZhdGVBcmNoaXZlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuZWNvc3lzdGVtU2VydmljZS5yZWFjdGl2YXRlQXJjaGl2ZSh0aGlzLmFwcGxpY2F0aW9uKTtcbiAgfVxuXG4gIGFzeW5jIG9uUmVmcmVzaCgpIHtcbiAgICBhd2FpdCB0aGlzLnJlZnJlc2goKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVmcmVzaCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgdGhpcy5hcmNoaXZlcyA9IGF3YWl0IHRoaXMuZWNvc3lzdGVtU2VydmljZS5saXN0QXJjaGl2ZXModGhpcy5hcHBsaWNhdGlvbi5pZCk7XG4gICAgdGhpcy5hcmNoaXZlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gKG5ldyBEYXRlKGIuY3JlYXRlZCkgYXMgYW55KSAtIChuZXcgRGF0ZShhLmNyZWF0ZWQpIGFzIGFueSk7XG4gICAgfSk7XG4gICAgdGhpcy5sYXN0ID0gdGhpcy5hcmNoaXZlc1t0aGlzLmFyY2hpdmVzLmxlbmd0aCAtIDFdO1xuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gIH1cbn1cbiJdfQ==