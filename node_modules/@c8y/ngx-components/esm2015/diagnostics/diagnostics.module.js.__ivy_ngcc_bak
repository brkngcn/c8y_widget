import { DiagnosticsTabGuard } from './diagnostics-tab.guard';
import { ListGroupModule } from '@c8y/ngx-components';
import { RouterModule } from '@angular/router';
import { DiagnosticsService } from './diagnostics.service';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DiagnosticsComponent } from './diagnostics.component';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { BsDropdownModule, BsDropdownConfig } from 'ngx-bootstrap/dropdown';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'diagnostics',
        component: DiagnosticsComponent,
        label: gettext('Diagnostics'),
        icon: 'stethoscope',
        canActivate: [DiagnosticsTabGuard],
        priority: 200
    }
];
export class DiagnosticsModule {
}
DiagnosticsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule,
                    RouterModule,
                    CommonModule,
                    ListGroupModule,
                    SharedRepositoryModule,
                    BsDropdownModule,
                    TooltipModule
                ],
                declarations: [DiagnosticsComponent],
                exports: [DiagnosticsComponent],
                providers: [
                    DiagnosticsService,
                    BsDropdownConfig,
                    DiagnosticsTabGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc3RpY3MubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGlhZ25vc3RpY3MvZGlhZ25vc3RpY3MubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFTLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztXQW9CL0Q7SUFDUjtRQUNFLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTTtRQUMzQixJQUFJLEVBQUUsYUFBYTtRQUNuQixTQUFTLEVBQUUsb0JBQW9CO1FBQy9CLEtBQUssRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzdCLElBQUksRUFBRSxhQUFhO1FBQ25CLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO1FBQ2xDLFFBQVEsRUFBRSxHQUFHO0tBQ2Q7Q0FDUztBQUtsQixNQUFNLE9BQU8saUJBQWlCOzs7WUFqQzdCLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsVUFBVTtvQkFDVixZQUFZO29CQUNaLFlBQVk7b0JBQ1osZUFBZTtvQkFDZixzQkFBc0I7b0JBQ3RCLGdCQUFnQjtvQkFDaEIsYUFBYTtpQkFDZDtnQkFDRCxZQUFZLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztnQkFDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7Z0JBQy9CLFNBQVMsRUFBRTtvQkFDVCxrQkFBa0I7b0JBQ2xCLGdCQUFnQjtvQkFDaEIsbUJBQW1CO29CQUNuQjt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxJQVVJO3dCQUNaLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWFnbm9zdGljc1RhYkd1YXJkIH0gZnJvbSAnLi9kaWFnbm9zdGljcy10YWIuZ3VhcmQnO1xuaW1wb3J0IHsgTGlzdEdyb3VwTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRGlhZ25vc3RpY3NTZXJ2aWNlIH0gZnJvbSAnLi9kaWFnbm9zdGljcy5zZXJ2aWNlJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIGdldHRleHQsIEhPT0tfUk9VVEUsIFJvdXRlLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGlhZ25vc3RpY3NDb21wb25lbnQgfSBmcm9tICcuL2RpYWdub3N0aWNzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSwgQnNEcm9wZG93bkNvbmZpZyB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgU2hhcmVkUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeS9zaGFyZWQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUsXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIExpc3RHcm91cE1vZHVsZSxcbiAgICBTaGFyZWRSZXBvc2l0b3J5TW9kdWxlLFxuICAgIEJzRHJvcGRvd25Nb2R1bGUsXG4gICAgVG9vbHRpcE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtEaWFnbm9zdGljc0NvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtEaWFnbm9zdGljc0NvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW1xuICAgIERpYWdub3N0aWNzU2VydmljZSxcbiAgICBCc0Ryb3Bkb3duQ29uZmlnLFxuICAgIERpYWdub3N0aWNzVGFiR3VhcmQsXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5EZXZpY2UsXG4gICAgICAgICAgcGF0aDogJ2RpYWdub3N0aWNzJyxcbiAgICAgICAgICBjb21wb25lbnQ6IERpYWdub3N0aWNzQ29tcG9uZW50LFxuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdEaWFnbm9zdGljcycpLFxuICAgICAgICAgIGljb246ICdzdGV0aG9zY29wZScsXG4gICAgICAgICAgY2FuQWN0aXZhdGU6IFtEaWFnbm9zdGljc1RhYkd1YXJkXSxcbiAgICAgICAgICBwcmlvcml0eTogMjAwXG4gICAgICAgIH1cbiAgICAgIF0gYXMgUm91dGVbXSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIERpYWdub3N0aWNzTW9kdWxlIHt9XG4iXX0=