import { DiagnosticsTabGuard } from './diagnostics-tab.guard';
import { ListGroupModule } from '@c8y/ngx-components';
import { RouterModule } from '@angular/router';
import { DiagnosticsService } from './diagnostics.service';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DiagnosticsComponent } from './diagnostics.component';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { BsDropdownModule, BsDropdownConfig } from 'ngx-bootstrap/dropdown';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'diagnostics',
        component: DiagnosticsComponent,
        label: gettext('Diagnostics'),
        icon: 'stethoscope',
        canActivate: [DiagnosticsTabGuard],
        priority: 200
    }
];
export class DiagnosticsModule {
}
DiagnosticsModule.ɵfac = function DiagnosticsModule_Factory(t) { return new (t || DiagnosticsModule)(); };
DiagnosticsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DiagnosticsModule });
DiagnosticsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        DiagnosticsService,
        BsDropdownConfig,
        DiagnosticsTabGuard,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            RouterModule,
            CommonModule,
            ListGroupModule,
            SharedRepositoryModule,
            BsDropdownModule,
            TooltipModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DiagnosticsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    RouterModule,
                    CommonModule,
                    ListGroupModule,
                    SharedRepositoryModule,
                    BsDropdownModule,
                    TooltipModule
                ],
                declarations: [DiagnosticsComponent],
                exports: [DiagnosticsComponent],
                providers: [
                    DiagnosticsService,
                    BsDropdownConfig,
                    DiagnosticsTabGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DiagnosticsModule, { declarations: function () { return [DiagnosticsComponent]; }, imports: function () { return [CoreModule,
        RouterModule,
        CommonModule,
        ListGroupModule,
        SharedRepositoryModule,
        BsDropdownModule,
        TooltipModule]; }, exports: function () { return [DiagnosticsComponent]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc3RpY3MubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9kaWFnbm9zdGljcy9kaWFnbm9zdGljcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQVMsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDOztBQUMvRSxXQW1CZ0I7QUFDaEIsSUFBUTtBQUNSLFFBQVUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNO0FBQ3JDLFFBQVUsSUFBSSxFQUFFLGFBQWE7QUFDN0IsUUFBVSxTQUFTLEVBQUUsb0JBQW9CO0FBQ3pDLFFBQVUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdkMsUUFBVSxJQUFJLEVBQUUsYUFBYTtBQUM3QixRQUFVLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO0FBQzVDLFFBQVUsUUFBUSxFQUFFLEdBQUc7QUFDdkIsS0FBUztBQUNULENBQWtCO0FBS2xCLE1BQU0sT0FBTyxpQkFBaUI7QUFBRzs2Q0FqQ2hDLFFBQVEsU0FBQyxrQkFDUixPQUFPLEVBQUU7SUFDUCxVQUFVLHNCQUNWLFlBQVksc0JBQ1osWUFBWTtXQUNaLGVBQWUsc0JBQ2Ysc0JBQXNCO2NBQ3RCO0VBQWdCLHNCQUNoQjtXQUFhO0FBQ2Q7UUFDRCxZQUFZLEVBQUUsQ0FBQztVQUFvQixDQUFDO0dBQ3BDLE9BQU8sRUFBRSxDQUFDO1NBQW9CO0FBQUMsa0JBQy9CO1FBQVMsRUFBRTtRQUNUO0FBQWtCLHNCQUNsQjtZQUFnQjtLQUNoQixtQkFBbUI7VUFDbkI7TUFDRSxPQUFPLEVBQUUsVUFBVTs7VUFDbkIsUUFBUSxJQVVJLDBCQUNaLEtBQUssRUFBRSxJQUFJLHNCQUNaLGtCQUNGO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEZBQ0k7QUFBQztBQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlhZ25vc3RpY3NUYWJHdWFyZCB9IGZyb20gJy4vZGlhZ25vc3RpY3MtdGFiLmd1YXJkJztcbmltcG9ydCB7IExpc3RHcm91cE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IERpYWdub3N0aWNzU2VydmljZSB9IGZyb20gJy4vZGlhZ25vc3RpY3Muc2VydmljZSc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBnZXR0ZXh0LCBIT09LX1JPVVRFLCBSb3V0ZSwgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERpYWdub3N0aWNzQ29tcG9uZW50IH0gZnJvbSAnLi9kaWFnbm9zdGljcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC90b29sdGlwJztcbmltcG9ydCB7IEJzRHJvcGRvd25Nb2R1bGUsIEJzRHJvcGRvd25Db25maWcgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Ryb3Bkb3duJztcbmltcG9ydCB7IFNoYXJlZFJlcG9zaXRvcnlNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnkvc2hhcmVkJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgUm91dGVyTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZSxcbiAgICBMaXN0R3JvdXBNb2R1bGUsXG4gICAgU2hhcmVkUmVwb3NpdG9yeU1vZHVsZSxcbiAgICBCc0Ryb3Bkb3duTW9kdWxlLFxuICAgIFRvb2x0aXBNb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbRGlhZ25vc3RpY3NDb21wb25lbnRdLFxuICBleHBvcnRzOiBbRGlhZ25vc3RpY3NDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICBEaWFnbm9zdGljc1NlcnZpY2UsXG4gICAgQnNEcm9wZG93bkNvbmZpZyxcbiAgICBEaWFnbm9zdGljc1RhYkd1YXJkLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICB1c2VWYWx1ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlLFxuICAgICAgICAgIHBhdGg6ICdkaWFnbm9zdGljcycsXG4gICAgICAgICAgY29tcG9uZW50OiBEaWFnbm9zdGljc0NvbXBvbmVudCxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnRGlhZ25vc3RpY3MnKSxcbiAgICAgICAgICBpY29uOiAnc3RldGhvc2NvcGUnLFxuICAgICAgICAgIGNhbkFjdGl2YXRlOiBbRGlhZ25vc3RpY3NUYWJHdWFyZF0sXG4gICAgICAgICAgcHJpb3JpdHk6IDIwMFxuICAgICAgICB9XG4gICAgICBdIGFzIFJvdXRlW10sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEaWFnbm9zdGljc01vZHVsZSB7fVxuIl19