import { EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { IManagedObject, IOperation } from '@c8y/client';
import { ISelectModalObject, IUpdateItemEvent } from '@c8y/ngx-components';
import { DeviceSoftware, DeviceSoftwareChange, FilterCriteria, RepositoryService } from '@c8y/ngx-components/repository/shared';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
export declare class InstalledSoftwareComponent implements OnDestroy, OnInit {
    private repository;
    private bsModal;
    device: IManagedObject;
    softwareList: DeviceSoftware[];
    deviceSoftwareChanges: DeviceSoftwareChange[];
    deviceSoftwareChangesOperation: IOperation;
    deviceSoftwareChangesInProgress: boolean;
    typesQuery: object;
    changes: EventEmitter<DeviceSoftwareChange[]>;
    showSoftwareChanges: EventEmitter<void>;
    alreadyInstalledWarningTemplate: TemplateRef<any>;
    alreadyInstalledMessage: any;
    loadingTemplate: TemplateRef<any>;
    softwareTypeTemplate: TemplateRef<any>;
    showFilter: boolean;
    supportsSoftwareOperations: boolean;
    textFilter$: BehaviorSubject<string>;
    softwareTypeFilter$: BehaviorSubject<string>;
    filterCriteria$: Observable<FilterCriteria>;
    private readonly operationTypes;
    private queriesUtil;
    private modalSearch;
    private destroyed$;
    constructor(repository: RepositoryService, bsModal: BsModalService);
    ngOnInit(): void;
    installSoftware(): void;
    updateSoftware(softwareToUpdate: any): void;
    removeSoftware(softwareToRemove: any): void;
    getInstallableSoftwareListWithVersions$(searchTerm$: BehaviorSubject<FilterCriteria>): Observable<IManagedObject[]>;
    getSingleSoftwareWithVersions$(software: DeviceSoftware): Observable<IManagedObject[]>;
    attachVersions(softwareList: IManagedObject[]): IManagedObject[];
    displaySoftwareSelectModal(initialStateOverrides: any): {
        resultEmitter: EventEmitter<import("@c8y/ngx-components/repository/shared").SelectedRepositoryBinary[]>;
        choiceEmitter: EventEmitter<ISelectModalObject>;
        updateInstallableList$: Subject<IUpdateItemEvent<any>>;
    };
    search(filterCriteria: FilterCriteria): void;
    emitSoftwareInstall(items: DeviceSoftware[]): void;
    emitSoftwareRemoval(items: DeviceSoftware[]): void;
    ngOnDestroy(): void;
    private isSoftwareInstalledOnDevicePipe;
}
