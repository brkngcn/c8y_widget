{"version":3,"file":"software-type.component.d.ts","sources":["software-type.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { TypeaheadComponent } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, UnaryFunction } from 'rxjs';\nimport { RepositoryService } from '../repository.service';\nexport declare class SoftwareTypeComponent implements OnInit, ControlValueAccessor, Validator {\n    private repositoryService;\n    changeDetectorRef: ChangeDetectorRef;\n    private translateService;\n    softwareTypeMO: IManagedObject;\n    disabled: boolean;\n    style: any;\n    required: boolean;\n    placeholder: string;\n    emitResultsOnly: boolean;\n    showBtnInNotFoundMessage: boolean;\n    allowFreeEntries: boolean;\n    showClearSelectionOption: boolean;\n    clearSelectionOptionLabel: string;\n    deviceSoftwareTypeModel: TypeaheadComponent;\n    notFoundTypeAddNewTemplate: TemplateRef<unknown>;\n    notFoundTypeTemplate: TemplateRef<unknown>;\n    onSelectSoftware: EventEmitter<IManagedObject>;\n    notFoundTemplateToUse: TemplateRef<unknown>;\n    filterPipe: UnaryFunction<unknown, unknown>;\n    softwaresResult$: Observable<IResultList<IManagedObject>>;\n    search$: BehaviorSubject<string>;\n    softwaresResult: IResultList<IManagedObject>;\n    private queriesUtil;\n    private softwareTypes;\n    constructor(repositoryService: RepositoryService, changeDetectorRef: ChangeDetectorRef, translateService: TranslateService);\n    ngOnInit(): void;\n    getSoftwareByTypeResult(searchString: string): Promise<IResultList<IManagedObject>>;\n    selectSoftware(software: any): void;\n    clearSoftware(): void;\n    resetInput(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    validate(control: AbstractControl): ValidationErrors;\n    private removeDuplicatesBySoftwareType;\n}\n"]}