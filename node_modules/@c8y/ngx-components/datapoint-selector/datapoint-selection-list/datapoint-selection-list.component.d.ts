import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormArray, FormBuilder, ValidationErrors, Validator } from '@angular/forms';
import { IResultList } from '@c8y/client';
import { WidgetConfigComponent } from '@c8y/ngx-components/context-dashboard';
import { Observable } from 'rxjs';
import { DatapointLibraryService } from '../datapoint-library.service';
import { DatapointAction, DatapointAttributesFormConfig, DatapointSelectorModalOptions, KPIDetails, ManagedObjectKPI } from '../datapoint-selection.model';
import { DatapointSelectorService } from '../datapoint-selector.service';
import * as ɵngcc0 from '@angular/core';
export declare class DatapointSelectionListComponent implements ControlValueAccessor, Validator, OnInit, OnChanges {
    private datapointSelector;
    private datapointLibrary;
    private formBuilder;
    private widgetComponent;
    actions: DatapointAction[];
    allowDragAndDrop: boolean;
    config: Partial<DatapointSelectorModalOptions>;
    defaultFormOptions: Partial<DatapointAttributesFormConfig>;
    maxActiveCount: number;
    minActiveCount: number;
    resolveContext: boolean;
    formArray: FormArray;
    datapointLibraryEntries: Observable<IResultList<ManagedObjectKPI>>;
    maxActiveCountReached: boolean;
    isValid: Observable<boolean>;
    change: Observable<any[]>;
    private usedValidators;
    constructor(datapointSelector: DatapointSelectorService, datapointLibrary: DatapointLibraryService, formBuilder: FormBuilder, widgetComponent: WidgetConfigComponent);
    ngOnChanges(changes: SimpleChanges): void;
    registerOnTouched(fn: any): void;
    validate(control: AbstractControl): ValidationErrors;
    ngOnInit(): void;
    writeValue(obj: KPIDetails[]): void;
    registerOnChange(fn: any): void;
    add(): void;
    onItemRemoved(index: number): void;
    drop(event: CdkDragDrop<KPIDetails[]>): void;
    private transformValue;
    private calculateMaxActiveCount;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DatapointSelectionListComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DatapointSelectionListComponent, "c8y-datapoint-selection-list", never, { "actions": "actions"; "allowDragAndDrop": "allowDragAndDrop"; "config": "config"; "defaultFormOptions": "defaultFormOptions"; "minActiveCount": "minActiveCount"; "resolveContext": "resolveContext"; "maxActiveCount": "maxActiveCount"; }, { "isValid": "isValid"; "change": "change"; }, never, [".alert"]>;
}

//# sourceMappingURL=datapoint-selection-list.component.d.ts.map