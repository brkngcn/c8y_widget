{"version":3,"file":"datapoint-selection-list.component.d.ts","sources":["datapoint-selection-list.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, FormArray, FormBuilder, ValidationErrors, Validator } from '@angular/forms';\nimport { IResultList } from '@c8y/client';\nimport { WidgetConfigComponent } from '@c8y/ngx-components/context-dashboard';\nimport { Observable } from 'rxjs';\nimport { DatapointLibraryService } from '../datapoint-library.service';\nimport { DatapointAction, DatapointAttributesFormConfig, DatapointSelectorModalOptions, KPIDetails, ManagedObjectKPI } from '../datapoint-selection.model';\nimport { DatapointSelectorService } from '../datapoint-selector.service';\nexport declare class DatapointSelectionListComponent implements ControlValueAccessor, Validator, OnInit, OnChanges {\n    private datapointSelector;\n    private datapointLibrary;\n    private formBuilder;\n    private widgetComponent;\n    actions: DatapointAction[];\n    allowDragAndDrop: boolean;\n    config: Partial<DatapointSelectorModalOptions>;\n    defaultFormOptions: Partial<DatapointAttributesFormConfig>;\n    maxActiveCount: number;\n    minActiveCount: number;\n    resolveContext: boolean;\n    formArray: FormArray;\n    datapointLibraryEntries: Observable<IResultList<ManagedObjectKPI>>;\n    maxActiveCountReached: boolean;\n    isValid: Observable<boolean>;\n    change: Observable<any[]>;\n    private usedValidators;\n    constructor(datapointSelector: DatapointSelectorService, datapointLibrary: DatapointLibraryService, formBuilder: FormBuilder, widgetComponent: WidgetConfigComponent);\n    ngOnChanges(changes: SimpleChanges): void;\n    registerOnTouched(fn: any): void;\n    validate(control: AbstractControl): ValidationErrors;\n    ngOnInit(): void;\n    writeValue(obj: KPIDetails[]): void;\n    registerOnChange(fn: any): void;\n    add(): void;\n    onItemRemoved(index: number): void;\n    drop(event: CdkDragDrop<KPIDetails[]>): void;\n    private transformValue;\n    private calculateMaxActiveCount;\n}\n"]}