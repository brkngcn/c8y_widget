{"version":3,"file":"datapoint-library.service.d.ts","sources":["datapoint-library.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { IIdentified, IManagedObject, InventoryService, IResultList, MeasurementService } from '@c8y/client';\nimport { AppStateService, ColorService } from '@c8y/ngx-components';\nimport { KPIDetails, ManagedObjectKPI } from './datapoint-selection.model';\nexport declare class DatapointLibraryService {\n    private inventory;\n    private appState;\n    private measurements;\n    private color;\n    protected cache: Promise<ManagedObjectKPI[]>;\n    constructor(inventory: InventoryService, appState: AppStateService, measurements: MeasurementService, color: ColorService);\n    getAllDatapointLibraryEntriesCached(forceCacheRenew?: boolean): Promise<ManagedObjectKPI[]>;\n    getFirstDatapointLibraryPage(): Promise<IResultList<ManagedObjectKPI>>;\n    getAllDatapointLibraryItemsCached(): Promise<KPIDetails[]>;\n    updateDatapoints(datapoints: KPIDetails[], skipUpdatingTarget?: boolean): Promise<KPIDetails[]>;\n    getDatapointsOfAsset(parentReference: IIdentified, ignoreDatapointTemplates?: boolean): Promise<KPIDetails[]>;\n    /**\n     * Requests the last measurement with the given fragment and series to extract it's unit.\n     * If the source attribute is provided, it will check the last measurement for this specific source.\n     * @returns found unit or an empty string instead\n     */\n    guessUnitOfDatapoint(fragment: string, series: string, source?: IIdentified): Promise<string>;\n    protected combineFragmentSeriesTuplesWithDetails(tuples: Array<{\n        fragment: string;\n        series: string;\n    }>, target: IIdentified, kpis: ManagedObjectKPI[]): Promise<KPIDetails[]>;\n    protected assignColorToDatapoints(datapoints: KPIDetails[]): Promise<void>;\n    protected getAllDatapointLibraryEntries(): Promise<ManagedObjectKPI[]>;\n    protected mapDatapointLibraryEntry(entry: ManagedObjectKPI): KPIDetails;\n    protected getCurrentTemplatesFromDatapoints(datapoints: KPIDetails[]): Promise<IManagedObject[]>;\n    protected getCurrentVersionOfTargetsFromDatapoints(datapoints: KPIDetails[]): Promise<IManagedObject[]>;\n    protected getMOsByIds(ids: Array<string | number>): Promise<IManagedObject[]>;\n}\n"]}