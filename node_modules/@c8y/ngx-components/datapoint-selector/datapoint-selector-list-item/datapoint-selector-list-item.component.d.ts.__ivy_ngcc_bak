import { EventEmitter } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormBuilder, FormGroup, ValidationErrors, Validator } from '@angular/forms';
import { IResultList } from '@c8y/client';
import { Observable } from 'rxjs';
import { ListItemDragHandleComponent } from '@c8y/ngx-components';
import { DatapointAction, DatapointAttributesFormConfig, KPIDetails, ManagedObjectKPI } from '../datapoint-selection.model';
export declare class DatapointSelectorListItemComponent implements ControlValueAccessor, Validator {
    private formBuilder;
    formGroup: FormGroup;
    defaultFormOptions: Partial<DatapointAttributesFormConfig>;
    isSelected: boolean;
    isCollapsed: boolean;
    showAddRemoveButton: boolean;
    editable: boolean;
    showActiveToggle: boolean;
    activeToggleDisabled: boolean;
    showOptions: boolean;
    datapointLibraryEntries: Observable<IResultList<ManagedObjectKPI>>;
    actions: DatapointAction[];
    optionToRemove: boolean;
    hasUnlinkTemplateOption: boolean;
    added: EventEmitter<KPIDetails>;
    removed: EventEmitter<KPIDetails>;
    colorPickerDisabled: boolean;
    disableTypeaheadIfSelected: boolean;
    highlightText: string;
    dragHandle: ListItemDragHandleComponent;
    pattern: string;
    filterPipe: any;
    isValid$: Observable<boolean>;
    constructor(formBuilder: FormBuilder);
    validate(control: AbstractControl): ValidationErrors;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    collapse(): void;
    addOrRemoveItem(): void;
    remove(dp: KPIDetails): void;
    setPipe(filterStr: string): void;
    unlinkDatapointTemplate(): void;
    dataPointTemplateSelected(template: ManagedObjectKPI): void;
    private resetUnusedProperties;
    private filterDatapointLabel;
    private transformFormValue;
}
