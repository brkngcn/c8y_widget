import { OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IIdentified, IResultList } from '@c8y/client';
import { BehaviorSubject, Observable } from 'rxjs';
import { DatapointLibraryService } from './datapoint-library.service';
import { KPIDetails, ManagedObjectKPI } from './datapoint-selection.model';
import * as ɵngcc0 from '@angular/core';
export declare class DatapointSelectorComponent implements OnInit, ControlValueAccessor {
    private datapointService;
    contextAsset: IIdentified;
    allowChangingContext: boolean;
    allowDatapointsFromMultipleAssets: boolean;
    selectedDatapoints: KPIDetails[];
    defaultActiveState: boolean;
    ignoreDatapointTemplates: boolean;
    guessDatapointUnit: boolean;
    allowSearch: boolean;
    searchString: string;
    maxNumberOfDatapoints: number;
    loadingDatapoints: boolean;
    assetSelection: BehaviorSubject<IIdentified>;
    datapoints$: Observable<KPIDetails[]>;
    filteredDatapoints$: Observable<KPIDetails[]>;
    searchStringChanges$: Observable<string>;
    datapointLibraryEntries: Observable<IResultList<ManagedObjectKPI>>;
    private searchString$;
    private touched;
    private onChange;
    private onTouched;
    constructor(datapointService: DatapointLibraryService);
    ngOnInit(): void;
    writeValue(obj: KPIDetails[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    datapointAdded(dp: KPIDetails): void;
    datapointRemoved(dp: KPIDetails): void;
    selectionChanged(evt: IIdentified | IIdentified[]): void;
    trackByFn(_index: number, item: KPIDetails): string;
    searchStringChanged(newValue?: string): void;
    private setupObservables;
    private selectAsset;
    private clearSelection;
    private emitCurrentSelection;
    private markAsTouched;
    private includesSearchString;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DatapointSelectorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DatapointSelectorComponent, "c8y-datapoint-selector", never, { "allowChangingContext": "allowChangingContext"; "allowDatapointsFromMultipleAssets": "allowDatapointsFromMultipleAssets"; "defaultActiveState": "defaultActiveState"; "ignoreDatapointTemplates": "ignoreDatapointTemplates"; "guessDatapointUnit": "guessDatapointUnit"; "allowSearch": "allowSearch"; "contextAsset": "contextAsset"; }, {}, never, never>;
}

//# sourceMappingURL=datapoint-selector.component.d.ts.map