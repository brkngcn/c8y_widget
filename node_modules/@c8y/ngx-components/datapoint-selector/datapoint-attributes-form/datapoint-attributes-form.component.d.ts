import { AbstractControl, ControlValueAccessor, FormGroup, ValidationErrors, Validator } from '@angular/forms';
import { DatapointAttributesFormValidationService } from './datapoint-attributes-form-validation.service';
import * as ɵngcc0 from '@angular/core';
export declare class DatapointAttributesFormComponent implements ControlValueAccessor, Validator {
    private formValidations;
    showTarget: boolean;
    showRange: boolean;
    showYellowRange: boolean;
    showRedRange: boolean;
    showChart: boolean;
    showFormIfTemplateWasSelected: boolean;
    formGroup: FormGroup;
    range: FormGroup;
    yellowRange: FormGroup;
    redRange: FormGroup;
    chart: FormGroup;
    rawValue: any;
    CHART_RENDER_TYPES: readonly [{
        readonly val: "min";
        readonly text: any;
    }, {
        readonly val: "max";
        readonly text: any;
    }, {
        readonly val: "area";
        readonly text: any;
    }];
    CHART_LINE_TYPES: readonly [{
        readonly val: "line";
        readonly text: any;
    }, {
        readonly val: "points";
        readonly text: any;
    }, {
        readonly val: "linePoints";
        readonly text: any;
    }, {
        readonly val: "bars";
        readonly text: any;
    }, {
        readonly val: "step-before";
        readonly text: any;
    }, {
        readonly val: "step-after";
        readonly text: any;
    }];
    AXIS_TYPES: readonly [{
        readonly val: any;
        readonly text: any;
    }, {
        readonly val: "left";
        readonly text: any;
    }, {
        readonly val: "right";
        readonly text: any;
    }];
    customValidationErrorMessages: {
        [formField: string]: {
            [validationError: string]: string;
        };
    };
    constructor(formValidations: DatapointAttributesFormValidationService);
    validate(control: AbstractControl): ValidationErrors;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private setSubForms;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DatapointAttributesFormComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DatapointAttributesFormComponent, "c8y-datapoint-attributes-form", never, { "showTarget": "showTarget"; "showRange": "showRange"; "showYellowRange": "showYellowRange"; "showRedRange": "showRedRange"; "showChart": "showChart"; "showFormIfTemplateWasSelected": "showFormIfTemplateWasSelected"; }, {}, never, never>;
}

//# sourceMappingURL=datapoint-attributes-form.component.d.ts.map