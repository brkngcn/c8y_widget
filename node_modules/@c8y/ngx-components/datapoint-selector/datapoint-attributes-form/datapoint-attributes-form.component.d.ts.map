{"version":3,"file":"datapoint-attributes-form.component.d.ts","sources":["datapoint-attributes-form.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AbstractControl, ControlValueAccessor, FormGroup, ValidationErrors, Validator } from '@angular/forms';\nimport { DatapointAttributesFormValidationService } from './datapoint-attributes-form-validation.service';\nexport declare class DatapointAttributesFormComponent implements ControlValueAccessor, Validator {\n    private formValidations;\n    showTarget: boolean;\n    showRange: boolean;\n    showYellowRange: boolean;\n    showRedRange: boolean;\n    showChart: boolean;\n    showFormIfTemplateWasSelected: boolean;\n    formGroup: FormGroup;\n    range: FormGroup;\n    yellowRange: FormGroup;\n    redRange: FormGroup;\n    chart: FormGroup;\n    rawValue: any;\n    CHART_RENDER_TYPES: readonly [{\n        readonly val: \"min\";\n        readonly text: any;\n    }, {\n        readonly val: \"max\";\n        readonly text: any;\n    }, {\n        readonly val: \"area\";\n        readonly text: any;\n    }];\n    CHART_LINE_TYPES: readonly [{\n        readonly val: \"line\";\n        readonly text: any;\n    }, {\n        readonly val: \"points\";\n        readonly text: any;\n    }, {\n        readonly val: \"linePoints\";\n        readonly text: any;\n    }, {\n        readonly val: \"bars\";\n        readonly text: any;\n    }, {\n        readonly val: \"step-before\";\n        readonly text: any;\n    }, {\n        readonly val: \"step-after\";\n        readonly text: any;\n    }];\n    AXIS_TYPES: readonly [{\n        readonly val: any;\n        readonly text: any;\n    }, {\n        readonly val: \"left\";\n        readonly text: any;\n    }, {\n        readonly val: \"right\";\n        readonly text: any;\n    }];\n    customValidationErrorMessages: {\n        [formField: string]: {\n            [validationError: string]: string;\n        };\n    };\n    constructor(formValidations: DatapointAttributesFormValidationService);\n    validate(control: AbstractControl): ValidationErrors;\n    writeValue(obj: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    private setSubForms;\n}\n"]}