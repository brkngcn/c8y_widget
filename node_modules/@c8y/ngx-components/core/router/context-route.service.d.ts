import { Injector } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ApiService, ApiCall } from '@c8y/ngx-components/api';
import { Observable } from 'rxjs';
import { ContextData } from './router.models';
import { TabsService } from '../tabs/tabs.service';
import { RouterTabsResolver } from './router-tabs.resolver';
import { IIdentified } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
export declare class ContextRouteService {
    private tabsResolver;
    private tabsService;
    private router;
    private apiService;
    private injector;
    private dataSubscription;
    private routerSubscription;
    private lastAddedTabs;
    private refreshTrigger;
    constructor(tabsResolver: RouterTabsResolver, tabsService: TabsService, router: Router, apiService: ApiService, injector: Injector);
    /**
     * Resolves the current context data. If no context was found, null is returned.
     *
     * @param activatedRoute The current activated route.
     */
    getContextData(activatedRoute: ActivatedRoute): ContextData;
    init(route: ActivatedRoute): void;
    destroy(): void;
    refreshContext(): void;
    /**
     * Sets a new contextData in the ActivatedRoute.
     * @param activatedRoute The current activated route.
     * @param contextData New contextData.
     */
    setContext(activatedRoute: ActivatedRoute, contextData: IIdentified): void;
    updatedContext(route: ActivatedRoute): Observable<ApiCall>;
    private updateTabs;
    private redirectToFirstTab;
    private needsRedirect;
    private getMatchingContextRoute;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ContextRouteService, never>;
}

//# sourceMappingURL=context-route.service.d.ts.map