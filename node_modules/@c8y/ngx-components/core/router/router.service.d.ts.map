{"version":3,"file":"router.service.d.ts","sources":["router.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RouteFactory, Route } from './router.models';\nimport { ContextRouteService } from './context-route.service';\nimport { IManagedObject } from '@c8y/client';\nimport { Observable, Subject } from 'rxjs';\nimport { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';\n/**\n * An extension HOOK can use either a pure value:\n * ```typescript\n *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }\n * ```\n *\n * Or an array to directly register multiple:\n * ```typescript\n *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }\n * ```\n *\n * Or an ExtensionFactory which allows to define a get() function. This function\n * gets called on each navigation with the current route and can return values\n * async (observable or promise).\n * ```typescript\n *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }\n * ```\n */\nexport declare type RouteExtension = Route | Route[] | ExtensionFactory<Route>;\n/**\n * A hook to use for Multi Provider extension.\n * @deprecated: Use HOOK_ROUTE\n */\nexport declare const HOOK_ONCE_ROUTE: InjectionToken<unknown>;\n/**\n * A hook to use for Multi Provider extension.\n */\nexport declare const HOOK_ROUTE: InjectionToken<RouteFactory>;\n/**\n * A service which defines routes\n */\nexport declare class RouterService implements ExtensionPoint<RouteExtension> {\n    private injector;\n    router: Router;\n    private contextRouteService;\n    items$: Observable<Route[]>;\n    readonly refreshTrigger: Subject<unknown>;\n    readonly state: Map<string, Route>;\n    factories: RouteExtension[];\n    constructor(injector: Injector, router: Router, contextRouteService: ContextRouteService);\n    /**\n     * Refresh the current context\n     */\n    refresh(): void;\n    /**\n     * Add a new route to the router configuration or a context.\n     * @param route The route to add\n     */\n    addRoute(route: Route | Route[]): void;\n    /**\n     * Determines if the given MO is an group or an device and returns\n     * the correct href to link correctly to that MO.\n     * @param groupOrDevice The MO of a group or the device.\n     * @param prefix How should the link be prefixed.\n     */\n    getHref(groupOrDevice: IManagedObject, prefix?: string): string;\n    private getComponentsViaDeprecatedHook;\n    private addRoutes;\n    private convertRoute;\n}\n"]}