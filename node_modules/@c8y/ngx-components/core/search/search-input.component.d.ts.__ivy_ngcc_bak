import { EventEmitter } from '@angular/core';
import { Router } from '@angular/router';
import { InventoryService, IManagedObject, IResultList } from '@c8y/client';
import { Observable } from 'rxjs';
import { InventorySearchService } from './inventory-search.service';
import { AssetTypesService } from '../asset-types/asset-types.service';
export declare class SearchInputComponent {
    private router;
    private inventory;
    private searchService;
    private assetTypesService;
    mode: 'search' | 'select';
    container: '' | 'body';
    filter: EventEmitter<string>;
    search: EventEmitter<string>;
    reset: EventEmitter<string>;
    onClick: EventEmitter<IManagedObject>;
    term: string;
    selected: any;
    filterPipe: import("rxjs").UnaryFunction<Observable<IManagedObject[]>, Observable<IManagedObject[]>>;
    results$: Observable<IResultList<IManagedObject>>;
    recentSearchResults: IManagedObject[];
    recentlyRegisteredResults$: Observable<IResultList<IManagedObject>>;
    isLoading: boolean;
    noMatch: boolean;
    private readonly RECENT_SEARCH_STORAGE_KEY;
    private readonly MAX_RECENT_SEARCH_RESULTS;
    private readonly DEFAULT_FILTER;
    private readonly KEYCODE_ENTER;
    private readonly KEYCODE_ESC;
    private typeahead;
    private dropdown;
    constructor(router: Router, inventory: InventoryService, searchService: InventorySearchService, assetTypesService: AssetTypesService);
    ngOnInit(): Promise<void>;
    onKeydownHandler(event: KeyboardEvent): void;
    getIcon(mo: IManagedObject): string;
    onOpenChange(isOpen: boolean): void;
    open(event: Event, mo: IManagedObject, term?: any): void;
    onReset(status: {
        icon: string;
        $event: MouseEvent;
    }): void;
    keyDown(event: KeyboardEvent): void;
    onSearch(search: string): void;
    onFilter(search: string): void;
    onOpenAssetTable(): void;
    private hideDropdown;
    private subscribeOnSearch;
    private navigate;
    private mergeRequest;
    private queryInventoryService;
    private onLoadingDone;
    private onTypingStarted;
}
