import { ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class TimePickerComponent implements ControlValueAccessor, OnDestroy {
    private cdRef;
    hours: string;
    minutes: string;
    lastValidHours: string;
    lastValidMinutes: string;
    minDate: string;
    maxDate: string;
    placeholder: string;
    dayForward: EventEmitter<any>;
    dayBackward: EventEmitter<any>;
    disabled: boolean;
    date: Date;
    onChange: (value: {
        hour: number;
        minute: number;
    }) => void;
    onTouched: () => void;
    private touched;
    private destroy$;
    private simulatedWheelUpEvent;
    private simulatedWheelDownEvent;
    constructor(cdRef: ChangeDetectorRef);
    parseValue(target: any, lastValid: any, limit: any): void;
    initializeMinutes(): void;
    initializeHours(): void;
    handleHourScroll(ev: any): void;
    handleMinuteScroll(ev: any): void;
    emitValue(): void;
    ngOnDestroy(): void;
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value: {
        hour: number;
        minute: number;
    }): void;
    registerOnChange(fn: any): void;
    registerOnTouched(onTouched: any): void;
    markAsTouched(): void;
    setDisabledState(disabled: boolean): void;
    private hasValue;
}
