{"version":3,"file":"time-picker.component.d.ts","sources":["time-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n    private cdRef;\n    hours: string;\n    minutes: string;\n    lastValidHours: string;\n    lastValidMinutes: string;\n    minDate: string;\n    maxDate: string;\n    placeholder: string;\n    dayForward: EventEmitter<any>;\n    dayBackward: EventEmitter<any>;\n    disabled: boolean;\n    date: Date;\n    onChange: (value: {\n        hour: number;\n        minute: number;\n    }) => void;\n    onTouched: () => void;\n    private touched;\n    private destroy$;\n    private simulatedWheelUpEvent;\n    private simulatedWheelDownEvent;\n    constructor(cdRef: ChangeDetectorRef);\n    parseValue(target: any, lastValid: any, limit: any): void;\n    initializeMinutes(): void;\n    initializeHours(): void;\n    handleHourScroll(ev: any): void;\n    handleMinuteScroll(ev: any): void;\n    emitValue(): void;\n    ngOnDestroy(): void;\n    /**\n     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.\n     */\n    writeValue(value: {\n        hour: number;\n        minute: number;\n    }): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(onTouched: any): void;\n    markAsTouched(): void;\n    setDisabledState(disabled: boolean): void;\n    private hasValue;\n}\n"]}