import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { Step } from './stepper.model';
/**
 * An extension HOOK can use either a pure value:
 * ```typescript
 *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }
 * ```
 *
 * Or an ExtensionFactory which allows to define a get() function. This function
 * gets called on each navigation with the current route and can return values
 * async (observable or promise).
 * ```typescript
 *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare type StepperExtension = Step | Step[] | ExtensionFactory<Step>;
/**
 * A hook to use for Multi Provider extension.
 */
export declare const HOOK_STEPPER: InjectionToken<StepperExtension[]>;
/**
 * A service which defines the steps in a stepper component.
 * A stepper hook needs an certain outlet which has an matching id
 * to display the steps.
 */
export declare class StepperService extends StateService implements ExtensionPoint<StepperExtension> {
    private injector;
    private translateService;
    items$: Observable<Step[]>;
    readonly refreshTrigger: Subject<unknown>;
    readonly state$: BehaviorSubject<Set<Step>>;
    factories: StepperExtension[];
    constructor(injector: Injector, router: Router, translateService: TranslateService);
    sortSteps(steps: Step[]): Step[];
    /**
     * Refresh the extension factories
     */
    refresh(): void;
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state(): Set<Step>;
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item: Step): void;
    /**
     * Removes a step and emits a state change.
     * @param item The item to remove.
     */
    remove(item: Step): void;
    /**
     * Returns the component by it's asssigned stepper id as an observable.
     * @param id The id of the stepper to hook into.
     */
    getById$(id: any): Observable<Step[]>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<StepperService, never>;
}

//# sourceMappingURL=stepper.service.d.ts.map