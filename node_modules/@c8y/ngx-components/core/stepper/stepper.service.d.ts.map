{"version":3,"file":"stepper.service.d.ts","sources":["stepper.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';\nimport { StateService } from '../common/state-service.abstract';\nimport { Step } from './stepper.model';\n/**\n * An extension HOOK can use either a pure value:\n * ```typescript\n *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }\n * ```\n *\n * Or an array to directly register multiple:\n * ```typescript\n *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }\n * ```\n *\n * Or an ExtensionFactory which allows to define a get() function. This function\n * gets called on each navigation with the current route and can return values\n * async (observable or promise).\n * ```typescript\n *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }\n * ```\n */\nexport declare type StepperExtension = Step | Step[] | ExtensionFactory<Step>;\n/**\n * A hook to use for Multi Provider extension.\n */\nexport declare const HOOK_STEPPER: InjectionToken<StepperExtension[]>;\n/**\n * A service which defines the steps in a stepper component.\n * A stepper hook needs an certain outlet which has an matching id\n * to display the steps.\n */\nexport declare class StepperService extends StateService implements ExtensionPoint<StepperExtension> {\n    private injector;\n    private translateService;\n    items$: Observable<Step[]>;\n    readonly refreshTrigger: Subject<unknown>;\n    readonly state$: BehaviorSubject<Set<Step>>;\n    factories: StepperExtension[];\n    constructor(injector: Injector, router: Router, translateService: TranslateService);\n    sortSteps(steps: Step[]): Step[];\n    /**\n     * Refresh the extension factories\n     */\n    refresh(): void;\n    /**\n     * Returns the current state.\n     * @readonly\n     * @returns The current set of actions.\n     */\n    get state(): Set<Step>;\n    /**\n     * Adds a new item to tabs and emits state change\n     * @param item The item to add.\n     */\n    add(item: Step): void;\n    /**\n     * Removes a step and emits a state change.\n     * @param item The item to remove.\n     */\n    remove(item: Step): void;\n    /**\n     * Returns the component by it's asssigned stepper id as an observable.\n     * @param id The id of the stepper to hook into.\n     */\n    getById$(id: any): Observable<Step[]>;\n}\n"]}