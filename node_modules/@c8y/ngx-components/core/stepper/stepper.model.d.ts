import { StepState } from '@angular/cdk/stepper';
import { Type } from '@angular/core';
export interface StepperButtonsVisibility {
    cancel?: boolean;
    back?: boolean;
    next?: boolean;
    custom?: boolean;
}
/**
 * Steps of a stepper component.
 *
 * *Example:*
 * ```ts
 * providers: [{
 *   provide: HOOK_STEPPER,
 *   useValue: {
 *      id: Steppers.SETUP,
 *      label: 'Register devices',
 *      component: YourRegisterDeviceForm,
 *      priority: -1000
 *   },
 *   multi: true
 * }]
 */
export interface Step {
    /**
     * The id of the stepper outlet where the step should be attached to.
     */
    stepperId: string;
    /**
     * The label to display.
     */
    label?: string;
    /**
     * The component to render. You can inject the C8yStepper to manage steps or use the
     * existing NgForm to validate the content of the form before the user can go on.
     *
     * *Example:*
     * ```js
     * viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
     * ```
     */
    component: Type<any>;
    /**
     * High priority will show the step sooner, low priority will show the step later. All
     * hooked step are ordered first by priority then by name.
     */
    priority?: number;
    /**
     * Marks the step as required to complete the stepper.
     */
    required?: boolean;
}
/**
 * Can be used to mark a step as completed and adds the current index to the step.
 */
export declare type IndexedStep = Step & {
    index: number;
    completed: boolean;
    state?: StepState;
};
/**
 * Default steppers used in the platform. Use this too hook into
 * certain steps.
 *
 * *Example:*
 * ```ts
 * providers: [{
 *   provide: HOOK_STEPPER,
 *   useValue: {
 *      id: Steppers.SETUP,
 *      label: 'Register devices',
 *      component: YourRegisterDeviceForm,
 *      priority: -1000
 *   },
 *   multi: true
 * }]
 * ```
 */
export declare enum Steppers {
    /**
     * Use this stepperId to hook a component into the application
     * setup step.
     */
    SETUP = "setup"
}
