{"version":3,"file":"drop-area.component.d.ts","sources":["drop-area.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit } from '@angular/core';\nimport { ControlValueAccessor, AbstractControl } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BytesPipe } from '../common/bytes.pipe';\nimport { FilesService } from '../common/files.service';\n/**\n * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.\n *\n * ## Example:\n *\n * ```html\n *  <div>\n *    <c8y-drop-area\n *      (dropped)=\"uploadFile($event)\"\n *      [icon]=\"'upload'\"\n *      [accept]=\"'.zip,.7z,video'\">\n *    </c8y-drop-area>\n *  </div>\n * ```\n */\nexport declare class DropAreaComponent implements OnInit, ControlValueAccessor {\n    private cd;\n    private filesService;\n    private translate;\n    private bytes;\n    formControl: AbstractControl;\n    title: any;\n    message: any;\n    icon: string;\n    loadingMessage: any;\n    forceHideList: boolean;\n    /** Affects displaying both the drop zone and the list of dropped files. */\n    alwaysShow: boolean;\n    clickToOpen: boolean;\n    loading: boolean;\n    /**\n     * Current progress of the upload as a percentage. If not given a spinner will be displayed.\n     */\n    progress: number;\n    dropped: EventEmitter<DroppedFile[]>;\n    maxAllowedFiles: number;\n    files: FileList;\n    /** Specifies a filter for what file types the user can pick from the file input dialog box.\n     * ## Example:\n     *\n     * Specify file types by extensions:\n     * ```html\n     *  ...\n     *  [accept]=\"'.zip,.7z'\"\n     *  ...\n     * ```\n     *\n     * Specify file types by extensions and generic types [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}:\n     * ```html\n     *  ...\n     *  [accept]=\"'.pdf,archive'\"\n     *  ...\n     * ```\n     *\n     * Specify file types by generic types [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}:\n     *  ```html\n     *  ...\n     *  [accept]=\"'archive,video'\"\n     *  ...\n     *\n     * ```\n     */\n    accept: string;\n    isOver: boolean;\n    errors: boolean;\n    errorMessage: string;\n    filesNameString: string;\n    acceptedExts: string[];\n    area: ElementRef;\n    zone: ElementRef;\n    picker: ElementRef;\n    constructor(cd: ChangeDetectorRef, filesService: FilesService, translate: TranslateService, bytes: BytesPipe);\n    onkeyup(event: KeyboardEvent): void;\n    ngOnInit(): void;\n    /**\n     * Toggles the style of the drop zone element when a file is dragged over the component.\n     */\n    toggle($event?: any): void;\n    /**\n     * Shows computer browser with files to drop into drop-area zone.\n     */\n    showPicker($event?: any): void;\n    /**\n     * Triggered when file is on over drop area, but not dropped.\n     */\n    onOver(): void;\n    /**\n     * Triggered when file is dropped.\n     */\n    onPick($event: any): void;\n    /**\n     * Handle file when it is dropped into drop-area.\n     */\n    onDrop($event: any): void;\n    /**\n     * Checks condition what should be displayed: drop-area zone or list of dropped files.\n     */\n    shouldShowFilesList(): boolean;\n    /**\n     * Triggered when file is picked over web application.\n     */\n    stopDragging(): void;\n    /**\n     * Delete files already dropped files.\n     */\n    onDelete(): void;\n    onChange: (value: any) => void;\n    onTouched: () => void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    private onFilesSelected;\n    private onFileInvalidNameLength;\n    private onFileInvalidType;\n    private onFileInvalidSize;\n    private getFilesNamesAsString;\n    private isFilesArrayEmpty;\n    private isTooManyFiles;\n    private isFilesAnObjectOrArray;\n    private hasEmptyFiles;\n    private isAnyFileEmpty;\n    private clearErrors;\n    private preventDefault;\n    private compose;\n    private read;\n    private onLoad;\n}\nexport interface DroppedFile {\n    file: File;\n    readAsText(): any;\n    readAsArrayBuffer(): any;\n    readAsBinaryString(): any;\n    readAsDataURL(): any;\n    readAsJson(): any;\n}\n"]}