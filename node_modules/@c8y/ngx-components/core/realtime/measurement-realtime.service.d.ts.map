{"version":3,"file":"measurement-realtime.service.d.ts","sources":["measurement-realtime.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IIdentified, IMeasurement, MeasurementService } from '@c8y/client';\nimport { Observable } from 'rxjs';\nimport { RealtimeSubjectService } from './realtime-subject.service';\nimport { RealtimeService } from './realtime.service';\nexport declare class MeasurementRealtimeService extends RealtimeService<IMeasurement> {\n    protected realtimeSubject: RealtimeSubjectService;\n    protected measurementService: MeasurementService;\n    constructor(realtimeSubject: RealtimeSubjectService, measurementService: MeasurementService);\n    /**\n     * Get an Observable of all measurements filtered by fragment and series.\n     *\n     * @param {string} fragment Measurement fragment\n     *\n     * @param {string} series Measurement series\n     *\n     * @param {string | number | IIdentified} entityOrId Entity object or id\n     *\n     * @returns An [[Observable]] of newly created entity objects.\n     */\n    onCreateOfSpecificMeasurement$(fragment: string, series: string, entityOrId?: string | number | IIdentified): Observable<IMeasurement>;\n    /**\n     * Get an Observable of all measurements filtered by fragment and series.\n     * Combines the latest value from measurement API and future values via realtime API.\n     *\n     * @param {string} fragment Measurement fragment\n     *\n     * @param {string} series Measurement series\n     *\n     * @param {string | number | IIdentified} entityOrId Entity object or id\n     *\n     * @param {number} pageSize Number of measurements to initially retrieve from backend\n     *\n     * @param {boolean} emitNullIfInitialValuesWereNotFound Flag that if set to true will initially emit value of null in case no measurement could have been retrieved from backend\n     *\n     * @returns An [[Observable]] of newly created entity objects.\n     */\n    latestValueOfSpecificMeasurement$(fragment: string, series: string, entityOrId: string | number | IIdentified, pageSize?: number, emitNullIfInitialValuesWereNotFound?: boolean): Observable<IMeasurement>;\n    protected lastMeasurement$(fragment: string, series: string, entityOrId: string | number | IIdentified, pageSize: number, emitNullIfInitialValuesWereNotFound?: boolean): Observable<IMeasurement>;\n    protected channel(): string;\n}\n"]}