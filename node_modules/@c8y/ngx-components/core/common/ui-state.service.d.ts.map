{"version":3,"file":"ui-state.service.d.ts","sources":["ui-state.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { StateService } from './state-service.abstract';\nimport { OptionsService } from './options.service';\nimport { FetchClient, IApplication, TenantLoginOptionsService } from '@c8y/client';\nimport { ApplicationService, IUser, ICurrentTenant } from '@c8y/client';\nimport { ApiService } from '@c8y/ngx-components/api';\nimport { ApplicationOptions } from './ApplicationOptions';\nexport declare class AppStateService extends StateService {\n    private applicationService;\n    apiService: ApiService;\n    private options;\n    private fetchClient;\n    private tenantLoginOptionsService;\n    state$: BehaviorSubject<any>;\n    currentSupportUserName: BehaviorSubject<string | null>;\n    currentUser: BehaviorSubject<IUser | null>;\n    currentTenant: BehaviorSubject<ICurrentTenant | null>;\n    currentApplication: BehaviorSubject<IApplication | null>;\n    currentApplicationConfig: BehaviorSubject<any>;\n    constructor(applicationService: ApplicationService, apiService: ApiService, options: OptionsService, fetchClient: FetchClient, tenantLoginOptionsService: TenantLoginOptionsService);\n    assignApplicationKeyToDefaultHeaders(): void;\n    /**\n     * Returns the current state.\n     */\n    get state(): any;\n    getLangs(): any;\n    /**\n     * Returns the correct UI version. In hybrid mode for angular and ngx.\n     */\n    get uiVersion(): any;\n    /**\n     * Loads the app manifest. If no access -> throw an error to verify app access.\n     */\n    loadManifest(): Promise<void>;\n    /**\n     * Dynamic options are stored on the API in a specific config: {} object. They can\n     * be used to configure the app dynamically.\n     *\n     * Note: To avoids conflicts with the default Config, it is recommended\n     * to use a certain namespace.\n     */\n    updateApplicationConfig<T = ApplicationOptions>(config: T): Promise<import(\"@c8y/client\").IResult<IApplication>>;\n    /**\n     * When this function called, it refreshes the values of loginOptions stored within ui state object.\n     * Function is throttled to execute the refresh once in a time specified by params of @throttled decorator,\n     * it should be called on leading edge of the timeout.\n     */\n    refreshLoginOptions(): Promise<void>;\n    /**\n     * Checks current users application list and matches it against given application name.\n     * Returns true if application is in the list.\n     * @param name application name\n     */\n    isApplicationAvailable(name: string): Promise<boolean>;\n    /**\n     * Sets current user (including support user).\n     * @param userInfo Info about current user and support user to be set.\n     */\n    setUser(userInfo: {\n        user: IUser;\n        supportUserName: string;\n    }): void;\n    /**\n     * Verifies if the current application is owned by the current tenant.\n     * @param app The application to verify.\n     * @returns true if it belongs to the current tenant.\n     */\n    isOwnerOfApplication(app?: IApplication): boolean;\n    getCurrentContextPath(): string;\n    private loadDefaultOptions;\n    private showIncompatibleVersionsError;\n}\n"]}