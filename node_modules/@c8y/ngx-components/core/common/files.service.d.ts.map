{"version":3,"file":"files.service.d.ts","sources":["files.service.d.ts"],"names":[],"mappingssourcesContent":["import { IManagedObjectBinary, InventoryBinaryService, SystemOptionsService } from '@c8y/client';\nexport declare enum GENERIC_FILE_TYPE {\n    ARCHIVE = \"archive\",\n    AUDIO = \"audio\",\n    CODE = \"code\",\n    EXCEL = \"excel\",\n    IMAGE = \"image\",\n    PDF = \"pdf\",\n    POWERPOINT = \"powerpoint\",\n    TEXT = \"text\",\n    VIDEO = \"video\",\n    WORD = \"word\",\n    EPL = \"epl\"\n}\nexport declare class FilesService {\n    private systemOptionsService;\n    private inventoryBinaryService;\n    readonly DEFAULT_BYTES_LIMIT = 52428800;\n    readonly FILENAME_MAX_LENGTH = 128;\n    fileTypeExtensionsMap: {\n        [key: string]: {\n            exts: string[];\n        };\n    };\n    private fileSizeLimitCfg;\n    constructor(systemOptionsService: SystemOptionsService, inventoryBinaryService: InventoryBinaryService);\n    /**\n     * Checks if files have valid size.\n     * @param files Files to check.\n     * @returns Returns true if each file has the correct size.\n     */\n    haveValidSizes(files: FileList): Promise<boolean>;\n    /**\n     * Checks the system file size limit, if not available returns the default value.\n     * Default limit: [DEFAULT_BYTES_LIMIT]{@link DEFAULT_BYTES_LIMIT}\n     * @returns Returns promise with the limit value.\n     */\n    loadBytesSizeLimit(): Promise<number>;\n    /**\n     * Checks the size of the file\n     * @param file File to check.\n     * @returns Returns size of the file in bytes.\n     */\n    size(file: File | IManagedObjectBinary): number;\n    /**\n     * Checks whether files have allowed extensions.\n     * If the accept parameter is not specified, all extensions are accepted.\n     * @param files Files to check.\n     * @param accept String of comma separated file extensions and generic types ([GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}), e.g. .zip,.7z,excel.\n     * @returns  Returns true if each file has allowed extension.\n     */\n    haveValidExtensions(files: FileList | File | File[], accept: string): boolean;\n    /**\n     * Checks if each file has a valid filename length.\n     * @param files Files to check.\n     * @returns Returns true if each file has a valid filename length.\n     */\n    checkMaxLength(files: FileList): boolean;\n    /**\n     * Extracts the file extension.\n     * @param file File from which the extension should be extracted.\n     * @returns Returns the file extension or undefined if the file has no extension.\n     */\n    getFileExtension(file: File): string | undefined;\n    /**\n     * List of file extensions.\n     * @returns Returns list of file extensions.\n     */\n    getFileExtensions(): string[];\n    /**\n     * The list of generic file types.\n     * @returns Returns the list of generic file types.\n     */\n    getGenericFileTypes(): GENERIC_FILE_TYPE[];\n    /**\n     * @ignore\n     */\n    mapGenericFileTypesToExtensions(genericFileTypes?: GENERIC_FILE_TYPE[]): string[];\n    /**\n     * Extracts a list of file extensions from a string.\n     * Can accept generic file types check: [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}.\n     *\n     * @param str String from which the file extensions are extracted (comma separated values).\n     * Accepted string format:\n     * * \".zip,.iso\",\n     * * \"zip,ISO\",\n     * * \"archive\".\n     * Important: generic types cannot contain a dot. All values with a dot are treated as a normal extension.\n     * @returns Returns a list of the file extensions.\n     */\n    extractFileExtensions(str: string): string[];\n    /**\n     * Converts a file to a base64 image string.\n     *\n     * @param file The file to convert to base 64.\n     * @returns The image string in base64 format.\n     */\n    toBase64(file: File): Promise<unknown>;\n    /**\n     * Allows to get a File representation of an managed object binary. Can be used\n     * to convert this file toBase64 to show it to the end-user.\n     * @param binary The binary managed object\n     * @returns The file representation.\n     */\n    getFile(binary: IManagedObjectBinary): Promise<File>;\n    /**\n     * Allows to download a file (opens the browser download prompt).\n     * @param binary The binary managed object.\n     */\n    download(binary: IManagedObjectBinary): Promise<void>;\n    private isGenericType;\n}\n"]}