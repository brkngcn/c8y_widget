import { IManagedObjectBinary, InventoryBinaryService, SystemOptionsService } from '@c8y/client';
export declare enum GENERIC_FILE_TYPE {
    ARCHIVE = "archive",
    AUDIO = "audio",
    CODE = "code",
    EXCEL = "excel",
    IMAGE = "image",
    PDF = "pdf",
    POWERPOINT = "powerpoint",
    TEXT = "text",
    VIDEO = "video",
    WORD = "word",
    EPL = "epl"
}
export declare class FilesService {
    private systemOptionsService;
    private inventoryBinaryService;
    readonly DEFAULT_BYTES_LIMIT = 52428800;
    readonly FILENAME_MAX_LENGTH = 128;
    fileTypeExtensionsMap: {
        [key: string]: {
            exts: string[];
        };
    };
    private fileSizeLimitCfg;
    constructor(systemOptionsService: SystemOptionsService, inventoryBinaryService: InventoryBinaryService);
    /**
     * Checks if files have valid size.
     * @param files Files to check.
     * @returns Returns true if each file has the correct size.
     */
    haveValidSizes(files: FileList): Promise<boolean>;
    /**
     * Checks the system file size limit, if not available returns the default value.
     * Default limit: [DEFAULT_BYTES_LIMIT]{@link DEFAULT_BYTES_LIMIT}
     * @returns Returns promise with the limit value.
     */
    loadBytesSizeLimit(): Promise<number>;
    /**
     * Checks the size of the file
     * @param file File to check.
     * @returns Returns size of the file in bytes.
     */
    size(file: File | IManagedObjectBinary): number;
    /**
     * Checks whether files have allowed extensions.
     * If the accept parameter is not specified, all extensions are accepted.
     * @param files Files to check.
     * @param accept String of comma separated file extensions and generic types ([GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}), e.g. .zip,.7z,excel.
     * @returns  Returns true if each file has allowed extension.
     */
    haveValidExtensions(files: FileList | File | File[], accept: string): boolean;
    /**
     * Checks if each file has a valid filename length.
     * @param files Files to check.
     * @returns Returns true if each file has a valid filename length.
     */
    checkMaxLength(files: FileList): boolean;
    /**
     * Extracts the file extension.
     * @param file File from which the extension should be extracted.
     * @returns Returns the file extension or undefined if the file has no extension.
     */
    getFileExtension(file: File): string | undefined;
    /**
     * List of file extensions.
     * @returns Returns list of file extensions.
     */
    getFileExtensions(): string[];
    /**
     * The list of generic file types.
     * @returns Returns the list of generic file types.
     */
    getGenericFileTypes(): GENERIC_FILE_TYPE[];
    /**
     * @ignore
     */
    mapGenericFileTypesToExtensions(genericFileTypes?: GENERIC_FILE_TYPE[]): string[];
    /**
     * Extracts a list of file extensions from a string.
     * Can accept generic file types check: [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}.
     *
     * @param str String from which the file extensions are extracted (comma separated values).
     * Accepted string format:
     * * ".zip,.iso",
     * * "zip,ISO",
     * * "archive".
     * Important: generic types cannot contain a dot. All values with a dot are treated as a normal extension.
     * @returns Returns a list of the file extensions.
     */
    extractFileExtensions(str: string): string[];
    /**
     * Converts a file to a base64 image string.
     *
     * @param file The file to convert to base 64.
     * @returns The image string in base64 format.
     */
    toBase64(file: File): Promise<unknown>;
    /**
     * Allows to get a File representation of an managed object binary. Can be used
     * to convert this file toBase64 to show it to the end-user.
     * @param binary The binary managed object
     * @returns The file representation.
     */
    getFile(binary: IManagedObjectBinary): Promise<File>;
    /**
     * Allows to download a file (opens the browser download prompt).
     * @param binary The binary managed object.
     */
    download(binary: IManagedObjectBinary): Promise<void>;
    private isGenericType;
}
