{"version":3,"file":"setup.component.d.ts","sources":["setup.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AlertService } from '../alert/alert.service';\nimport { Permissions } from '../common/permissions.service';\nimport { OptionsService } from '../common/options.service';\nimport { AppStateService } from '../common/ui-state.service';\nimport { Steppers } from '../stepper/stepper.model';\nimport { StepperService } from '../stepper/stepper.service';\nimport { SetupState, SetupStep } from './setup.model';\nimport { BootstrapComponent } from '../bootstrap/bootstrap.component';\n/**\n * This component is the parent of each setup and can be injected\n * into setup steps to control them.\n */\nexport declare class SetupComponent implements OnInit {\n    options: OptionsService;\n    private stepperService;\n    private appState;\n    private alert;\n    private permissions;\n    private bootstrapComponent;\n    /**\n     * A subject which can be used to exchange data between\n     * steps.\n     */\n    data$: BehaviorSubject<any>;\n    /**\n     * All current shown setup steps.\n     */\n    steps: SetupStep[];\n    /**\n     * The current state. SetupState.START shows an application overview\n     * while SetupState.WIZARD shows the steps.\n     */\n    currentSetupState: SetupState;\n    /**\n     * Emits when the setup is done. You can add certain operations before completing the setup that needed to be awaited. Return\n     * true if everything is fine, otherwise false.\n     * ```typescript\n     * const asyncOperation = delay(2000);\n     * this.setup.completed$ = this.setup.completed$.pipe(asyncOperation, map(() => true));\n     * ``\n     * Note: Remember that a step can be viewed multiple times. The step needs to ensure, to only add a completed operation ones.\n     */\n    completed$: Observable<boolean>;\n    /**\n     * @ignore\n     */\n    readonly stepperId = Steppers.SETUP;\n    /**\n     * @ignore\n     */\n    setupState: typeof SetupState;\n    /**\n     * @ignore\n     */\n    properties: any[];\n    /**\n     * @ignore\n     */\n    canSkip: boolean;\n    /**\n     * @ignore\n     */\n    hasRole: boolean;\n    /**\n     * @ignore\n     */\n    isOwner: boolean;\n    private readonly RELOAD_APP_TIMEOUT;\n    constructor(options: OptionsService, stepperService: StepperService, appState: AppStateService, alert: AlertService, permissions: Permissions, bootstrapComponent: BootstrapComponent);\n    /**\n     * Mark a step as completed. If the step is required, this is needed to fulfill\n     * the setup.\n     * @param stepIndex The index of the step you want to mark as completed\n     * @param isCompleted Defaults to true to mark it as completed but can be set to false to invalidate the step.\n     */\n    stepCompleted(stepIndex: any, isCompleted?: boolean): void;\n    /**\n     * Returns a step by it index position in the wizard.\n     * @param stepIndex The step index that you want to receive.\n     * @returns An indexed step definition.\n     */\n    getByIndex(stepIndex: any): SetupStep;\n    /**\n     * @ignore\n     */\n    ngOnInit(): Promise<void>;\n    /**\n     * Skips the current setup wizard\n     */\n    skip(): void;\n    /**\n     * Starts the wizards (or finish the setup if no steps are found)\n     */\n    start(): void;\n    /**\n     * Cancels the wizards and goes back to the start view.\n     */\n    cancel(): void;\n    /**\n     * Finish the wizard and will start the application.\n     */\n    finish(): void;\n    finalize(): Promise<void>;\n    /**\n     * Verifies every step and checks if all required are completed.\n     * Updates the icons to reflect the state of the steps (error, warning, done).\n     * @returns Returns true if no error was found.\n     */\n    verify(): boolean;\n    private reloadApp;\n    private hasRequiredSteps;\n    private getState;\n}\n"]}