{"version":3,"file":"asset-types.service.d.ts","sources":["asset-types.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { IManagedObject, InventoryService } from '@c8y/client';\nimport { ApiService } from '@c8y/ngx-components/api';\nimport { AppStateService } from '../common/ui-state.service';\n/**\n * AssetTypesService is being used to manage a cache of all existing asset types.\n * This service is injected in the AssetOverviewNavigationFactory class, which will trigger\n * the initialization of the cache as the contstructor is called.\n */\nexport declare class AssetTypesService {\n    private inventory;\n    private apiService;\n    private appStateService;\n    private readonly ASSET_TYPE_GROUP_QUERY;\n    private assetTypesCache;\n    private readonly DEFAULT_GROUP_ICON;\n    private readonly DEFAULT_GROUP_ICON_OPEN;\n    constructor(inventory: InventoryService, apiService: ApiService, appStateService: AppStateService);\n    /**\n     * Queries available asset types and adds every asset type to the local cache.\n     * @returns void.\n     */\n    initAssetTypesCache(): Promise<void>;\n    /**\n     * Returns an asset type from the cache based on the unique name property.\n     * @param name Name of the asset type.\n     * @returns IManagedObject which represents the asset type.\n     */\n    getAssetTypeByName(name: string): IManagedObject;\n    /**\n     * Returns an asset type from the cache based on the id.\n     * @param assetTypeId Id of the asset type.\n     * @returns IManagedObject which represents the asset type.\n     */\n    getAssetTypeById(assetTypeId: string): IManagedObject;\n    /**\n     * Extracts an icon from an asset type.\n     * @param type Type of the asset type.\n     * @param open Determines whether the method should return an alternative icon showing the open state.\n     * Defaults to false.\n     * @returns Returns an icon for a given asset type.\n     */\n    getIcon(type: string, open?: boolean): string;\n    private getDefaultGroupIcon;\n    /**\n     * Checks if the default asset type 'group' already exists and if it doesn't it will be created.\n     * @returns void.\n     */\n    private createAssetTypeGroupIfNotExists;\n    /**\n     * create the default asset type group in the Inventory.\n     */\n    private createDefaultAssetTypeGroup;\n    /**\n     * Add an asset type to the local cache.\n     * @param assetType Asset type which should be added to the cache.\n     * @returns void.\n     */\n    private addAssetType;\n    /**\n     * Delete an asset type from the local cache based on the given asset type id.\n     * @param assetTypeId Id of the asset type which should be deleted.\n     * @returns void.\n     */\n    private deleteAssetType;\n    /**\n     * Update an asset type in the local cache.\n     * @param assetType Asset type which should be updated in the cache.\n     * @returns void.\n     */\n    private updateAssetType;\n    /**\n     * Subscribes to api PUT, POST and DELETE requests interceptor to update local asset types cache.\n     * If a new asset type has been created it will be added to the local cache. If an asset\n     * type has been deleted it will be removed from the local cache.\n     */\n    private subscribeForAssetTypeUpdates;\n    /**\n     * Managed objects inventory api filter, allowing only PUT, POST and DELETE methods.\n     * @param call Api call to filter.\n     * @returns Returns true if api call meets the required criteria.\n     */\n    private checkIfInventoryMoApiCall;\n}\n"]}