import { IManagedObject, InventoryService } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
import { AppStateService } from '../common/ui-state.service';
/**
 * AssetTypesService is being used to manage a cache of all existing asset types.
 * This service is injected in the AssetOverviewNavigationFactory class, which will trigger
 * the initialization of the cache as the contstructor is called.
 */
export declare class AssetTypesService {
    private inventory;
    private apiService;
    private appStateService;
    private readonly ASSET_TYPE_GROUP_QUERY;
    private assetTypesCache;
    private readonly DEFAULT_GROUP_ICON;
    private readonly DEFAULT_GROUP_ICON_OPEN;
    constructor(inventory: InventoryService, apiService: ApiService, appStateService: AppStateService);
    /**
     * Queries available asset types and adds every asset type to the local cache.
     * @returns void.
     */
    initAssetTypesCache(): Promise<void>;
    /**
     * Returns an asset type from the cache based on the unique name property.
     * @param name Name of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeByName(name: string): IManagedObject;
    /**
     * Returns an asset type from the cache based on the id.
     * @param assetTypeId Id of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeById(assetTypeId: string): IManagedObject;
    /**
     * Extracts an icon from an asset type.
     * @param type Type of the asset type.
     * @param open Determines whether the method should return an alternative icon showing the open state.
     * Defaults to false.
     * @returns Returns an icon for a given asset type.
     */
    getIcon(type: string, open?: boolean): string;
    private getDefaultGroupIcon;
    /**
     * Checks if the default asset type 'group' already exists and if it doesn't it will be created.
     * @returns void.
     */
    private createAssetTypeGroupIfNotExists;
    /**
     * create the default asset type group in the Inventory.
     */
    private createDefaultAssetTypeGroup;
    /**
     * Add an asset type to the local cache.
     * @param assetType Asset type which should be added to the cache.
     * @returns void.
     */
    private addAssetType;
    /**
     * Delete an asset type from the local cache based on the given asset type id.
     * @param assetTypeId Id of the asset type which should be deleted.
     * @returns void.
     */
    private deleteAssetType;
    /**
     * Update an asset type in the local cache.
     * @param assetType Asset type which should be updated in the cache.
     * @returns void.
     */
    private updateAssetType;
    /**
     * Subscribes to api PUT, POST and DELETE requests interceptor to update local asset types cache.
     * If a new asset type has been created it will be added to the local cache. If an asset
     * type has been deleted it will be removed from the local cache.
     */
    private subscribeForAssetTypeUpdates;
    /**
     * Managed objects inventory api filter, allowing only PUT, POST and DELETE methods.
     * @param call Api call to filter.
     * @returns Returns true if api call meets the required criteria.
     */
    private checkIfInventoryMoApiCall;
}
