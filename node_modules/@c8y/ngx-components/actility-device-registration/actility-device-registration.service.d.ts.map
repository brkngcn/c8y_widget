{"version":3,"file":"actility-device-registration.service.d.ts","sources":["actility-device-registration.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { TranslateService } from '@ngx-translate/core';\nimport { FetchClient, ApplicationService, IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { OptionsService } from '@c8y/ngx-components';\nimport { ActilityDeviceRegistration, ConnectivityPlan, DeviceProfile } from './actility-device-registration.model';\nexport declare enum ErrorName {\n    NoConnectivityPlansError = \"NoConnectivityPlansError\",\n    NoFreeSlotsInConnectivityPlansError = \"NoFreeSlotsInConnectivityPlansError\",\n    NoConnectivitySettingsError = \"NoConnectivitySettingsError\",\n    NoDeviceProfilesError = \"NoDeviceProfilesError\",\n    DeviceProfilesFetchError = \"DeviceProfilesFetchError\",\n    NoDeviceProtocolsError = \"NoDeviceProtocolsError\",\n    DeviceProtocolsFetchError = \"DeviceProtocolsFetchError\",\n    RegistrationError = \"RegistrationError\"\n}\nexport declare class ActilityDeviceRegistrationService {\n    private inventoryService;\n    private client;\n    private translateService;\n    private applicationService;\n    private optionsService;\n    private baseUrl;\n    private registrationUrl;\n    private connectivityPlansUrl;\n    private deviceProfilesUrl;\n    private headers;\n    constructor(inventoryService: InventoryService, client: FetchClient, translateService: TranslateService, applicationService: ApplicationService, optionsService: OptionsService);\n    getConnections(): Promise<{\n        res: import(\"@c8y/client\").IFetchResponse;\n        data: any;\n    }>;\n    /**\n     * Gets connectivity plans from LoRa platform.\n     * @param connectionName The name of connection for which connectivity plans will be retrieved\n     * @returns The result list with connectivity plans, or throws an error with exception.\n     */\n    getConnectivityPlans(connectionName: string): Promise<IResultList<ConnectivityPlan>>;\n    /**\n     * Gets the device profiles from LoRa platform.\n     * @param connectionName The name of connection for which device profiles will be retrieved\n     * @returns The result list with device profiles, or throws an error with exception.\n     */\n    getDeviceProfiles(connectionName: string): Promise<IResultList<DeviceProfile>>;\n    /**\n     * Gets the device protocols\n     */\n    getDeviceProtocols(): Promise<IResultList<IManagedObject>>;\n    /**\n     * Creates device registration\n     */\n    register(registration: ActilityDeviceRegistration): Promise<{\n        res: import(\"@c8y/client\").IFetchResponse;\n        data: any;\n    }>;\n    /**\n     * checks if used connections is less then granted connections\n     */\n    private hasAvailableConnections;\n    private throwNoConnectivitySettingsError;\n    private throwNoConnectivityPlansError;\n    private throwNoFreeSlotsInConnectivityPlansError;\n    private throwDeviceProfilesFetchError;\n    private throwNoDeviceProfilesError;\n    private throwDeviceProtocolsFetchError;\n    private throwNoDeviceProtocolsError;\n    private throwRegistrationError;\n}\n"]}