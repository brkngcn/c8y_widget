import { TranslateService } from '@ngx-translate/core';
import { FetchClient, ApplicationService, IManagedObject, InventoryService, IResultList } from '@c8y/client';
import { OptionsService } from '@c8y/ngx-components';
import { ActilityDeviceRegistration, ConnectivityPlan, DeviceProfile } from './actility-device-registration.model';
export declare enum ErrorName {
    NoConnectivityPlansError = "NoConnectivityPlansError",
    NoFreeSlotsInConnectivityPlansError = "NoFreeSlotsInConnectivityPlansError",
    NoConnectivitySettingsError = "NoConnectivitySettingsError",
    NoDeviceProfilesError = "NoDeviceProfilesError",
    DeviceProfilesFetchError = "DeviceProfilesFetchError",
    NoDeviceProtocolsError = "NoDeviceProtocolsError",
    DeviceProtocolsFetchError = "DeviceProtocolsFetchError",
    RegistrationError = "RegistrationError"
}
export declare class ActilityDeviceRegistrationService {
    private inventoryService;
    private client;
    private translateService;
    private applicationService;
    private optionsService;
    private baseUrl;
    private registrationUrl;
    private connectivityPlansUrl;
    private deviceProfilesUrl;
    private headers;
    constructor(inventoryService: InventoryService, client: FetchClient, translateService: TranslateService, applicationService: ApplicationService, optionsService: OptionsService);
    getConnections(): Promise<{
        res: import("@c8y/client").IFetchResponse;
        data: any;
    }>;
    /**
     * Gets connectivity plans from LoRa platform.
     * @param connectionName The name of connection for which connectivity plans will be retrieved
     * @returns The result list with connectivity plans, or throws an error with exception.
     */
    getConnectivityPlans(connectionName: string): Promise<IResultList<ConnectivityPlan>>;
    /**
     * Gets the device profiles from LoRa platform.
     * @param connectionName The name of connection for which device profiles will be retrieved
     * @returns The result list with device profiles, or throws an error with exception.
     */
    getDeviceProfiles(connectionName: string): Promise<IResultList<DeviceProfile>>;
    /**
     * Gets the device protocols
     */
    getDeviceProtocols(): Promise<IResultList<IManagedObject>>;
    /**
     * Creates device registration
     */
    register(registration: ActilityDeviceRegistration): Promise<{
        res: import("@c8y/client").IFetchResponse;
        data: any;
    }>;
    /**
     * checks if used connections is less then granted connections
     */
    private hasAvailableConnections;
    private throwNoConnectivitySettingsError;
    private throwNoConnectivityPlansError;
    private throwNoFreeSlotsInConnectivityPlansError;
    private throwDeviceProfilesFetchError;
    private throwNoDeviceProfilesError;
    private throwDeviceProtocolsFetchError;
    private throwNoDeviceProtocolsError;
    private throwRegistrationError;
}
