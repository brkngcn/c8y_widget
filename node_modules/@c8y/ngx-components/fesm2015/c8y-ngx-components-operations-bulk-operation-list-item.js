import { Component, Input, Injectable, EventEmitter, Output, ViewChild, NgModule } from '@angular/core';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { gettext, AlertService, Status, ModalService, CoreModule } from '@c8y/ngx-components';
import { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';
import { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';
import { OperationsListItemDetailsModule } from '@c8y/ngx-components/operations/operations-list-item-details';
import { __awaiter } from 'tslib';
import { OperationBulkGeneralStatus } from '@c8y/client';
import { values, find, assign, cloneDeep } from 'lodash-es';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { Subject } from 'rxjs';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
import * as ɵngcc2 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from '@c8y/ngx-components/operations/operation-summary';
import * as ɵngcc5 from '@c8y/ngx-components/operations/bulk-operation-scheduler';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from 'ngx-bootstrap/tooltip';
import * as ɵngcc9 from 'ngx-bootstrap/popover';
import * as ɵngcc10 from '@c8y/ngx-components/operations/operations-list-item-details';

const _c0 = ["listItem"];
function BulkOperationListItemComponent_hr_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "hr", 23);
} }
function BulkOperationListItemComponent_ng_template_16_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "c8yNumber");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind3(2, 1, ctx_r11.progressBarStatus, "floor", "1.0-0"), "%");
} }
function BulkOperationListItemComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵpipe(1, "c8yNumber");
    ɵngcc0.ɵɵelementStart(2, "div", 25);
    ɵngcc0.ɵɵtemplate(3, BulkOperationListItemComponent_ng_template_16_span_3_Template, 3, 5, "span", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r3.progressBarClass);
    ɵngcc0.ɵɵpropertyInterpolate1("title", "", ɵngcc0.ɵɵpipeBind3(1, 8, ctx_r3.progressBarStatus, "floor", "1.0-0"), "%");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassMap(ctx_r3.progressBarColor);
    ɵngcc0.ɵɵstyleProp("width", ctx_r3.progressBarStatus, "%");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.progressBarStatus !== 0);
} }
const _c1 = function (a0) { return { bulkOperationsCountSuccessful: a0 }; };
function BulkOperationListItemComponent_small_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵelement(1, "i", 27);
    ɵngcc0.ɵɵelementStart(2, "span", 28);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountSuccessful }} successful ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c1, ctx_r4.bulkOperation.progress.successful));
} }
const _c2 = function (a0) { return { bulkOperationsCountFailed: a0 }; };
function BulkOperationListItemComponent_small_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵelement(1, "i", 29);
    ɵngcc0.ɵɵelementStart(2, "span", 28);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountFailed }} failed ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c2, ctx_r5.bulkOperation.progress.failed));
} }
const _c3 = function (a0) { return { bulkOperationsCountExecuting: a0 }; };
function BulkOperationListItemComponent_small_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵelement(1, "i", 30);
    ɵngcc0.ɵɵelementStart(2, "span", 28);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountExecuting }} executing ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c3, ctx_r6.bulkOperation.progress.executing));
} }
const _c4 = function (a0) { return { bulkOperationsCountPending: a0 }; };
function BulkOperationListItemComponent_small_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵelement(1, "i", 31);
    ɵngcc0.ɵɵelementStart(2, "span", 28);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountPending }} pending ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c4, ctx_r7.bulkOperation.progress.pending));
} }
function BulkOperationListItemComponent_div_33_a_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 33);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 34);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r12.finishDatePopoverText));
} }
function BulkOperationListItemComponent_div_33_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelementStart(1, "span", 16);
    ɵngcc0.ɵɵtext(2, "Finish");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "small", 17);
    ɵngcc0.ɵɵelement(4, "i", 18);
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "c8yDate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, BulkOperationListItemComponent_div_33_a_8_Template, 3, 3, "a", 32);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 2, ctx_r8.finishDate));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isStatusScheduled() || ctx_r8.isStatusExecutingOrExecutingWithError());
} }
function BulkOperationListItemComponent_ng_container_34_c8y_li_action_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 39);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_34_c8y_li_action_1_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.editSchedule(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Edit schedule"));
} }
function BulkOperationListItemComponent_ng_container_34_c8y_li_action_2_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 40);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_34_c8y_li_action_2_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.cancelBulkOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Cancel bulk operation"));
} }
function BulkOperationListItemComponent_ng_container_34_c8y_li_action_3_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 41);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_34_c8y_li_action_3_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.retryFailedOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Retry failed operations"));
} }
function BulkOperationListItemComponent_ng_container_34_c8y_li_action_4_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 42);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_34_c8y_li_action_4_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.setToSuccessful(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Set operation to SUCCESSFUL"));
} }
function BulkOperationListItemComponent_ng_container_34_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, BulkOperationListItemComponent_ng_container_34_c8y_li_action_1_Template, 2, 3, "c8y-li-action", 35);
    ɵngcc0.ɵɵtemplate(2, BulkOperationListItemComponent_ng_container_34_c8y_li_action_2_Template, 2, 3, "c8y-li-action", 36);
    ɵngcc0.ɵɵtemplate(3, BulkOperationListItemComponent_ng_container_34_c8y_li_action_3_Template, 2, 3, "c8y-li-action", 37);
    ɵngcc0.ɵɵtemplate(4, BulkOperationListItemComponent_ng_container_34_c8y_li_action_4_Template, 2, 3, "c8y-li-action", 38);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.isStatusScheduled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.isStatusScheduled() || ctx_r9.isStatusExecutingOrExecutingWithError() && !ctx_r9.allOperationsCreated());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.isStatusFailed());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.isStatusFailed());
} }
function BulkOperationListItemComponent_c8y_operation_details_tabs_36_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-operation-details-tabs", 43);
    ɵngcc0.ɵɵlistener("onRetryFailedOperations", function BulkOperationListItemComponent_c8y_operation_details_tabs_36_Template_c8y_operation_details_tabs_onRetryFailedOperations_0_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.retryFailedOperation(); })("showFailedOperation", function BulkOperationListItemComponent_c8y_operation_details_tabs_36_Template_c8y_operation_details_tabs_showFailedOperation_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.openFailedOperation($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("operation", ctx_r10.bulkOperation)("readOnly", ctx_r10.readOnly)("bulkOperationModalDetailsService", ctx_r10.bulkOperationListItemService);
} }
const _c5 = function (a0) { return { "c8y-list__item--no-expand": a0 }; };
const _c6 = function (a0, a1) { return { "content-flex-58": a0, "content-flex-50": a1 }; };
class BulkOperationsRescheduleModalComponent {
    constructor(bsModalRef, bulkOperationsService, alert) {
        this.bsModalRef = bsModalRef;
        this.bulkOperationsService = bulkOperationsService;
        this.alert = alert;
        this.closeSubject = new Subject();
    }
    ngOnInit() {
        this.modalTitle = this.getTitle();
    }
    onDateAndDelaySelect($event) {
        this.dateAndDelay = $event;
    }
    getTitle() {
        return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');
    }
    onCancel() {
        this.bsModalRef.hide();
    }
    onSave() {
        return __awaiter(this, void 0, void 0, function* () {
            let newBulkOperation;
            this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();
            this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;
            if (this.isRetryOperation) {
                try {
                    newBulkOperation = yield this.bulkOperationsService.createBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled for a retry.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            else {
                try {
                    newBulkOperation = yield this.bulkOperationsService.updateBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            // send back to component from which modal was called
            this.closeSubject.next(newBulkOperation.data);
            this.bsModalRef.hide();
        });
    }
}
BulkOperationsRescheduleModalComponent.ɵfac = function BulkOperationsRescheduleModalComponent_Factory(t) { return new (t || BulkOperationsRescheduleModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService)); };
BulkOperationsRescheduleModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationsRescheduleModalComponent, selectors: [["c8y-bulk-operations-reschedule-modal"]], decls: 22, vars: 12, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [1, "c8y-icon", "c8y-icon-energy"], [1, "modal-inner-scroll"], [1, "modal-body"], [1, "text-center"], [3, "description"], [1, "p-t-16", "center-block", 2, "max-width", "300px"], [3, "ngModel", "ngModelChange"], ["scheduler", "ngModel"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["translate", ""], ["id", "save-btn", "type", "button", 1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function BulkOperationsRescheduleModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "h1", 2);
        ɵngcc0.ɵɵelementStart(3, "h4");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵelement(9, "c8y-operation-summary", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵelementStart(11, "c8y-operation-scheduler", 8, 9);
        ɵngcc0.ɵɵlistener("ngModelChange", function BulkOperationsRescheduleModalComponent_Template_c8y_operation_scheduler_ngModelChange_11_listener($event) { return ctx.dateAndDelay = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 10);
        ɵngcc0.ɵɵelementStart(14, "button", 11);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsRescheduleModalComponent_Template_button_click_14_listener() { return ctx.onCancel(); });
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementStart(16, "span", 12);
        ɵngcc0.ɵɵtext(17, "Cancel");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "button", 13);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsRescheduleModalComponent_Template_button_click_18_listener() { return ctx.onSave(); });
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementStart(20, "span", 12);
        ɵngcc0.ɵɵtext(21, "Save");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(12);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, ctx.modalTitle));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("description", ctx.bulkOperation.operationPrototype.description);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.dateAndDelay);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 8, "Cancel"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 10, "Save"));
        ɵngcc0.ɵɵproperty("disabled", _r0 == null ? null : _r0.control == null ? null : _r0.control.errors);
    } }, directives: [ɵngcc4.OperationSummaryComponent, ɵngcc5.OperationSchedulerComponent, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc3.C8yTranslateDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
BulkOperationsRescheduleModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: BulkOperationsService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsRescheduleModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations-reschedule-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <div class=\"text-center\">\n        <c8y-operation-summary\n          [description]=\"bulkOperation.operationPrototype.description\"\n        ></c8y-operation-summary>\n      </div>\n      <div class=\"p-t-16 center-block\" style=\"max-width: 300px;\">\n        <c8y-operation-scheduler\n          [(ngModel)]=\"dateAndDelay\"\n          #scheduler=\"ngModel\"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"onCancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id=\"save-btn\"\n      (click)=\"onSave()\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      [disabled]=\"scheduler?.control?.errors\"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BsModalRef }, { type: ɵngcc2.BulkOperationsService }, { type: ɵngcc3.AlertService }]; }, null); })();

const BULK_OPERATION_STATUS_LABELS = {
    SCHEDULED: gettext('Scheduled'),
    EXECUTING: gettext('Executing'),
    CANCELED: gettext('Canceled'),
    FAILED: gettext('Completed with failures'),
    SUCCESSFUL: gettext('Completed successfully'),
    DELETED: gettext('Deleted')
};
const BULK_OPERATION_STATUS_OPTIONS = {
    SCHEDULED: {
        label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,
        generalStatuses: [OperationBulkGeneralStatus.SCHEDULED],
        icon: 'calendar',
        styleClass: 'text-info'
    },
    EXECUTING: {
        label: BULK_OPERATION_STATUS_LABELS.EXECUTING,
        generalStatuses: [
            OperationBulkGeneralStatus.EXECUTING,
            OperationBulkGeneralStatus.EXECUTING_WITH_ERROR
        ],
        icon: 'refresh',
        styleClass: 'text-primary'
    },
    DELETED: {
        label: BULK_OPERATION_STATUS_LABELS.DELETED,
        generalStatuses: [OperationBulkGeneralStatus.DELETED],
        icon: 'delete-document',
        styleClass: 'text-muted'
    },
    CANCELED: {
        label: BULK_OPERATION_STATUS_LABELS.CANCELED,
        generalStatuses: [OperationBulkGeneralStatus.CANCELED],
        icon: 'ban',
        styleClass: 'text-primary'
    },
    FAILED: {
        label: BULK_OPERATION_STATUS_LABELS.FAILED,
        generalStatuses: [OperationBulkGeneralStatus.FAILED],
        icon: 'exclamation-triangle',
        styleClass: 'text-danger'
    },
    SUCCESSFUL: {
        label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,
        generalStatuses: [OperationBulkGeneralStatus.SUCCESSFUL],
        icon: 'check-circle',
        styleClass: 'text-success'
    }
};

class BulkOperationWrapperComponent {
    constructor(bulkOperationsService, modalRef, modalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modalRef = modalRef;
        this.modalService = modalService;
    }
    // openDetails function needs to be defined in the both places (component and the service) to avoid circular dependency.
    openDetails(bulkOperationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const bulkOperation = (yield this.bulkOperationsService.getBulkOperationById(bulkOperationId)).data;
            const initialState = { bulkOperation };
            this.modalService.show(BulkOperationWrapperComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
BulkOperationWrapperComponent.ɵfac = function BulkOperationWrapperComponent_Factory(t) { return new (t || BulkOperationWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalService)); };
BulkOperationWrapperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationWrapperComponent, selectors: [["c8y-bulk-operations-wrapper"]], inputs: { bulkOperation: "bulkOperation" }, decls: 12, vars: 12, consts: [[1, "viewport-modal"], [1, "modal-header"], [1, "modal-inner-scroll"], [3, "bulkOperation", "detailsCollapsed", "readOnly", "showFailedOperation"], [1, "modal-footer"], [1, "btn", "btn-default", 3, "title", "click"]], template: function BulkOperationWrapperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h3");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "c8y-bulk-operation-list-item", 3);
        ɵngcc0.ɵɵlistener("showFailedOperation", function BulkOperationWrapperComponent_Template_c8y_bulk_operation_list_item_showFailedOperation_6_listener($event) { return ctx.openDetails($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelementStart(8, "button", 5);
        ɵngcc0.ɵɵlistener("click", function BulkOperationWrapperComponent_Template_button_click_8_listener() { return ctx.modalRef.hide(); });
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 6, "Bulk operation details"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("bulkOperation", ctx.bulkOperation)("detailsCollapsed", false)("readOnly", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(9, 8, "Close"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 10, "Close"), " ");
    } }, directives: function () { return [BulkOperationListItemComponent]; }, pipes: function () { return [ɵngcc3.C8yTranslatePipe]; }, encapsulation: 2 });
BulkOperationWrapperComponent.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: BsModalRef },
    { type: BsModalService }
];
BulkOperationWrapperComponent.propDecorators = {
    bulkOperation: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationWrapperComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations-wrapper',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header\">\n    <h3>{{ 'Bulk operation details' | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      [detailsCollapsed]=\"false\"\n      [readOnly]=\"true\"\n      (showFailedOperation)=\"openDetails($event)\"\n    ></c8y-bulk-operation-list-item>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Close' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc2.BulkOperationsService }, { type: ɵngcc1.BsModalRef }, { type: ɵngcc1.BsModalService }]; }, { bulkOperation: [{
            type: Input
        }] }); })();

class BulkOperationListItemService {
    constructor(bulkOperationsService, modalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modalService = modalService;
    }
    openDetails(bulkOperationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const bulkOperation = (yield this.bulkOperationsService.getBulkOperationById(bulkOperationId)).data;
            const initialState = { bulkOperation };
            this.modalService.show(BulkOperationWrapperComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
BulkOperationListItemService.ɵfac = function BulkOperationListItemService_Factory(t) { return new (t || BulkOperationListItemService)(ɵngcc0.ɵɵinject(ɵngcc2.BulkOperationsService), ɵngcc0.ɵɵinject(ɵngcc1.BsModalService)); };
BulkOperationListItemService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkOperationListItemService, factory: BulkOperationListItemService.ɵfac });
BulkOperationListItemService.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationListItemService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.BulkOperationsService }, { type: ɵngcc1.BsModalService }]; }, null); })();

class BulkOperationListItemComponent {
    constructor(bulkOperationListItemService, bulkOperationsService, modal, alert, bsModalService) {
        this.bulkOperationListItemService = bulkOperationListItemService;
        this.bulkOperationsService = bulkOperationsService;
        this.modal = modal;
        this.alert = alert;
        this.bsModalService = bsModalService;
        this.detailsCollapsed = true;
        this.readOnly = false;
        this.showFailedOperation = new EventEmitter();
        this.reload = new EventEmitter();
        this.refreshLoading = false;
        this.bulkOperationGeneralStatus = OperationBulkGeneralStatus;
        this.BULK_OPERATION_STATUS_OPTIONS = BULK_OPERATION_STATUS_OPTIONS;
        this.finishDatePopoverText = gettext('Approximate date, estimated based on the bulk operation settings.');
        this.progressBarClass = 'progress';
        this.progressBarStatus = 0;
    }
    ngOnInit() {
        this.finishDate = this.calculateFinishDateMs();
        this.setProgressBar();
    }
    getOperationStatusOptions() {
        const statusOptions = values(BULK_OPERATION_STATUS_OPTIONS);
        return find(statusOptions, options => options.generalStatuses.includes(this.bulkOperation.generalStatus));
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.setProgressBar();
        }
    }
    calculateFinishDateMs() {
        const startDateMs = new Date(this.bulkOperation.startDate).getTime();
        const creationRampMs = this.bulkOperation.creationRamp * 1000;
        return startDateMs + creationRampMs * this.bulkOperation.progress.all;
    }
    progressBarProgressFn() {
        return (((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /
            this.bulkOperation.progress.all) *
            100);
    }
    setProgressBar() {
        const staticContentOfClass = 'progress-bar progress-striped active progress-bar';
        const progressBarState = {
            EXECUTING: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: `${staticContentOfClass}-primary`,
                progressBarStatus: this.progressBarProgressFn()
            },
            EXECUTING_WITH_ERROR: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: `${staticContentOfClass}-danger`,
                progressBarStatus: this.progressBarProgressFn()
            },
            FAILED: {
                progressBarClass: 'progress',
                progressBarColor: `${staticContentOfClass}-danger`,
                progressBarStatus: 100
            },
            SUCCESSFUL: {
                progressBarClass: 'progress',
                progressBarColor: `${staticContentOfClass}-success`,
                progressBarStatus: 100
            }
        };
        assign(this, progressBarState[this.bulkOperation.generalStatus]);
    }
    editSchedule() {
        const rescheduledOperation = cloneDeep(this.bulkOperation);
        const initialState = {
            bulkOperation: rescheduledOperation
        };
        const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
    }
    cancelBulkOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Cancel bulk operation'), gettext('You are about to cancel the bulk operation. Do you want to proceed?'), Status.DANGER);
                yield this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);
                this.reload.emit();
                this.alert.success(gettext('Operation canceled.'));
            }
            catch (er) {
                this.alert.addServerFailure(er);
            }
        });
    }
    retryFailedOperation() {
        const clonedBulk = cloneDeep(this.bulkOperation);
        // change the id to failedparentId similar to the logic in deviceBulkControl.service.js
        delete clonedBulk.groupId;
        clonedBulk.failedParentId = this.bulkOperation.id;
        // show reschdedule modal:
        const initialState = {
            bulkOperation: clonedBulk,
            isRetryOperation: true
        };
        const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
        this.bsModalRef.content.closeSubject.subscribe(() => {
            this.reload.emit();
        });
    }
    setToSuccessful() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Set manually bulk operation to SUCCESSFUL'), gettext('You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'), Status.DANGER);
                yield this.bulkOperationsService.updateBulkOperation({
                    id: this.bulkOperation.id,
                    generalStatus: OperationBulkGeneralStatus.SUCCESSFUL
                });
                this.reload.emit();
                this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));
            }
            catch (er) {
                this.alert.addServerFailure(er);
            }
        });
    }
    openFailedOperation(failedParentId) {
        this.showFailedOperation.emit(failedParentId);
    }
    isStatusScheduled() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;
    }
    isStatusExecutingOrExecutingWithError() {
        return (this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||
            this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR);
    }
    allOperationsCreated() {
        return (this.bulkOperation.progress.all ===
            this.bulkOperation.progress.executing +
                this.bulkOperation.progress.failed +
                this.bulkOperation.progress.pending +
                this.bulkOperation.progress.successful);
    }
    isStatusCanceled() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;
    }
    isStatusFailed() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;
    }
}
BulkOperationListItemComponent.ɵfac = function BulkOperationListItemComponent_Factory(t) { return new (t || BulkOperationListItemComponent)(ɵngcc0.ɵɵdirectiveInject(BulkOperationListItemService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalService)); };
BulkOperationListItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationListItemComponent, selectors: [["c8y-bulk-operation-list-item"]], viewQuery: function BulkOperationListItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listItem = _t.first);
    } }, inputs: { detailsCollapsed: "detailsCollapsed", readOnly: "readOnly", bulkOperation: "bulkOperation" }, outputs: { showFailedOperation: "showFailedOperation", reload: "reload" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 37, vars: 34, consts: [[1, "c8y-list__item--double-actions", 3, "ngClass", "collapsed", "id"], ["listItem", ""], [3, "c8yIcon", "ngClass", "tooltip"], [3, "ngClass"], [1, "col-5"], [1, "text-truncate", 3, "title"], [1, "text-muted", "m-r-4"], [1, "flex-grow"], [1, "m-t-8", "visible-xs"], ["class", "m-t-16 m-b-0 visible-xs", 4, "ngIf", "ngIfElse"], ["statusNotCanceled", ""], [1, "col-4"], [1, "p-t-8", "visible-xs"], ["class", "m-r-8 icon-flex", 4, "ngIf"], [1, "c8y-list__item__footer"], [1, "m-r-16"], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "icon-flex"], ["c8yIcon", "calendar", 1, "m-r-4"], ["class", "m-r-16", 4, "ngIf"], [4, "ngIf"], [1, "m-b-16"], [3, "operation", "readOnly", "bulkOperationModalDetailsService", "onRetryFailedOperations", "showFailedOperation", 4, "ngIf"], [1, "m-t-16", "m-b-0", "visible-xs"], [3, "title"], ["role", "progressbar", "aria-valuenow", "0", "aria-valuemin", "0", "aria-valuemax", "100"], [1, "m-r-8", "icon-flex"], ["c8yIcon", "check-circle", 1, "text-success", "m-r-4"], ["translate", "", 3, "translateParams"], ["c8yIcon", "warning", 1, "text-danger", "m-r-4"], ["c8yIcon", "refresh", 1, "text-primary", "m-r-4"], ["c8yIcon", "clock-o", 1, "text-primary", "m-r-4"], ["container", "body", "class", "btn-clean m-l-4", "placement", "right", "outsideClick", "true", 3, "popover", 4, "ngIf"], ["container", "body", "placement", "right", "outsideClick", "true", 1, "btn-clean", "m-l-4", 3, "popover"], ["c8yIcon", "question-circle-o text-primary"], ["icon", "pencil", 3, "label", "click", 4, "ngIf"], ["icon", "remove", 3, "label", "click", 4, "ngIf"], ["icon", "repeat", 3, "label", "click", 4, "ngIf"], ["icon", "check-circle", 3, "label", "click", 4, "ngIf"], ["icon", "pencil", 3, "label", "click"], ["icon", "remove", 3, "label", "click"], ["icon", "repeat", 3, "label", "click"], ["icon", "check-circle", 3, "label", "click"], [3, "operation", "readOnly", "bulkOperationModalDetailsService", "onRetryFailedOperations", "showFailedOperation"]], template: function BulkOperationListItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-li", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "c8y-li-icon");
        ɵngcc0.ɵɵelement(3, "i", 2);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "span", 5);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementStart(9, "strong", 6);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 7);
        ɵngcc0.ɵɵelement(14, "div", 8);
        ɵngcc0.ɵɵtemplate(15, BulkOperationListItemComponent_hr_15_Template, 1, 0, "hr", 9);
        ɵngcc0.ɵɵtemplate(16, BulkOperationListItemComponent_ng_template_16_Template, 4, 12, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 11);
        ɵngcc0.ɵɵelement(19, "div", 12);
        ɵngcc0.ɵɵtemplate(20, BulkOperationListItemComponent_small_20_Template, 4, 3, "small", 13);
        ɵngcc0.ɵɵtemplate(21, BulkOperationListItemComponent_small_21_Template, 4, 3, "small", 13);
        ɵngcc0.ɵɵtemplate(22, BulkOperationListItemComponent_small_22_Template, 4, 3, "small", 13);
        ɵngcc0.ɵɵtemplate(23, BulkOperationListItemComponent_small_23_Template, 4, 3, "small", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "div", 14);
        ɵngcc0.ɵɵelementStart(25, "div", 15);
        ɵngcc0.ɵɵelementStart(26, "span", 16);
        ɵngcc0.ɵɵtext(27, "Start");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "small", 17);
        ɵngcc0.ɵɵelement(29, "i", 18);
        ɵngcc0.ɵɵelementStart(30, "span");
        ɵngcc0.ɵɵtext(31);
        ɵngcc0.ɵɵpipe(32, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(33, BulkOperationListItemComponent_div_33_Template, 9, 4, "div", 19);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(34, BulkOperationListItemComponent_ng_container_34_Template, 5, 4, "ng-container", 20);
        ɵngcc0.ɵɵelementStart(35, "c8y-li-collapse", 21);
        ɵngcc0.ɵɵtemplate(36, BulkOperationListItemComponent_c8y_operation_details_tabs_36_Template, 1, 3, "c8y-operation-details-tabs", 22);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        const _r2 = ɵngcc0.ɵɵreference(17);
        ɵngcc0.ɵɵpropertyInterpolate("id", ctx.bulkOperation.id);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(29, _c5, !ctx.detailsCollapsed))("collapsed", ctx.detailsCollapsed);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.getOperationStatusOptions().icon)("ngClass", ctx.getOperationStatusOptions().styleClass)("tooltip", ɵngcc0.ɵɵpipeBind1(4, 21, ctx.getOperationStatusOptions().label));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(31, _c6, !ctx.readOnly, ctx.readOnly));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate2("title", "", ctx.bulkOperation.id, " - ", ɵngcc0.ɵɵpipeBind1(8, 23, ctx.bulkOperation.operationPrototype.description), "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.bulkOperation.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 25, ctx.bulkOperation.operationPrototype.description), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isStatusCanceled())("ngIfElse", _r2);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.successful > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.failed > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.executing > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.pending > 0);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(32, 27, ctx.bulkOperation.startDate), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperationGeneralStatus.CANCELED !== ctx.bulkOperation.generalStatus);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.readOnly);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !_r0.collapsed);
    } }, directives: [ɵngcc3.ListItemComponent, ɵngcc7.NgClass, ɵngcc3.ListItemIconComponent, ɵngcc3.IconDirective, ɵngcc8.TooltipDirective, ɵngcc7.NgIf, ɵngcc3.C8yTranslateDirective, ɵngcc3.ListItemCollapseComponent, ɵngcc9.PopoverDirective, ɵngcc3.ListItemActionComponent, ɵngcc10.OperationDetailsTabsComponent], pipes: [ɵngcc3.C8yTranslatePipe, ɵngcc3.DatePipe, ɵngcc3.NumberPipe], encapsulation: 2 });
BulkOperationListItemComponent.ctorParameters = () => [
    { type: BulkOperationListItemService },
    { type: BulkOperationsService },
    { type: ModalService },
    { type: AlertService },
    { type: BsModalService }
];
BulkOperationListItemComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    detailsCollapsed: [{ type: Input }],
    readOnly: [{ type: Input }],
    showFailedOperation: [{ type: Output }],
    reload: [{ type: Output }],
    listItem: [{ type: ViewChild, args: ['listItem', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationListItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operation-list-item',
                template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !detailsCollapsed }\"\n  [collapsed]=\"detailsCollapsed\"\n  #listItem\n  id=\"{{ bulkOperation.id }}\"\n>\n  <c8y-li-icon>\n    <i\n      [c8yIcon]=\"getOperationStatusOptions().icon\"\n      [ngClass]=\"getOperationStatusOptions().styleClass\"\n      [tooltip]=\"getOperationStatusOptions().label | translate\"\n    ></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-58': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-5\">\n      <span\n        class=\"text-truncate\"\n        title=\"{{ bulkOperation.id }} - {{\n          bulkOperation.operationPrototype.description | translate\n        }}\"\n      >\n        <strong class=\"text-muted m-r-4\">{{ bulkOperation.id }}</strong>\n        {{ bulkOperation.operationPrototype.description | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\">\n      <div class=\"m-t-8 visible-xs\"></div>\n      <hr *ngIf=\"isStatusCanceled(); else statusNotCanceled\" class=\"m-t-16 m-b-0 visible-xs\" />\n      <ng-template #statusNotCanceled>\n        <div\n          [class]=\"progressBarClass\"\n          title=\"{{ progressBarStatus | c8yNumber: 'floor':'1.0-0' }}%\"\n        >\n          <div\n            [class]=\"progressBarColor\"\n            role=\"progressbar\"\n            aria-valuenow=\"0\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            [style.width.%]=\"progressBarStatus\"\n          >\n            <span *ngIf=\"progressBarStatus !== 0\"\n              >{{ progressBarStatus | c8yNumber: 'floor':'1.0-0' }}%</span\n            >\n          </div>\n        </div>\n      </ng-template>\n    </div>\n    <div class=\"col-4\">\n      <div class=\"p-t-8 visible-xs\"></div>\n      <small *ngIf=\"bulkOperation.progress.successful > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"check-circle\" class=\"text-success m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountSuccessful: bulkOperation.progress.successful }\"\n        >\n          {{ bulkOperationsCountSuccessful }} successful\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.failed > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"warning\" class=\"text-danger m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n        >\n          {{ bulkOperationsCountFailed }} failed\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.executing > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"refresh\" class=\"text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountExecuting: bulkOperation.progress.executing }\"\n        >\n          {{ bulkOperationsCountExecuting }} executing\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.pending > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"clock-o\" class=\"text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n        >\n          {{ bulkOperationsCountPending }} pending\n        </span>\n      </small>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <span class=\"text-label-small m-r-4\" translate>Start</span>\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>\n          {{ bulkOperation.startDate | c8yDate }}\n        </span>\n      </small>\n    </div>\n    <div class=\"m-r-16\" *ngIf=\"bulkOperationGeneralStatus.CANCELED !== bulkOperation.generalStatus\">\n      <span class=\"text-label-small m-r-4\" translate>Finish</span>\n\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>{{ finishDate | c8yDate }}</span>\n      </small>\n      <a\n        container=\"body\"\n        *ngIf=\"isStatusScheduled() || isStatusExecutingOrExecutingWithError()\"\n        class=\"btn-clean m-l-4\"\n        popover=\"{{ finishDatePopoverText | translate }}\"\n        placement=\"right\"\n        outsideClick=\"true\"\n      >\n        <i c8yIcon=\"question-circle-o text-primary\"></i>\n      </a>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!readOnly\">\n    <c8y-li-action\n      *ngIf=\"isStatusScheduled()\"\n      label=\"{{ 'Edit schedule' | translate }}\"\n      (click)=\"editSchedule()\"\n      icon=\"pencil\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"\n        isStatusScheduled() || (isStatusExecutingOrExecutingWithError() && !allOperationsCreated())\n      \"\n      label=\"{{ 'Cancel bulk operation' | translate }}\"\n      (click)=\"cancelBulkOperation()\"\n      icon=\"remove\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Retry failed operations' | translate }}\"\n      (click)=\"retryFailedOperation()\"\n      icon=\"repeat\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Set operation to SUCCESSFUL' | translate }}\"\n      (click)=\"setToSuccessful()\"\n      icon=\"check-circle\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <c8y-operation-details-tabs\n      *ngIf=\"!listItem.collapsed\"\n      [operation]=\"bulkOperation\"\n      [readOnly]=\"readOnly\"\n      (onRetryFailedOperations)=\"retryFailedOperation()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      [bulkOperationModalDetailsService]=\"bulkOperationListItemService\"\n    >\n    </c8y-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n"
            }]
    }], function () { return [{ type: BulkOperationListItemService }, { type: ɵngcc2.BulkOperationsService }, { type: ɵngcc3.ModalService }, { type: ɵngcc3.AlertService }, { type: ɵngcc1.BsModalService }]; }, { detailsCollapsed: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], showFailedOperation: [{
            type: Output
        }], reload: [{
            type: Output
        }], bulkOperation: [{
            type: Input
        }], listItem: [{
            type: ViewChild,
            args: ['listItem', { static: true }]
        }] }); })();

/**
 * This module allows for displaying the list item of a bulk operation with its details.
 */
class BulkOperationListItemModule {
}
BulkOperationListItemModule.ɵfac = function BulkOperationListItemModule_Factory(t) { return new (t || BulkOperationListItemModule)(); };
BulkOperationListItemModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BulkOperationListItemModule });
BulkOperationListItemModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [BulkOperationListItemService], imports: [[
            CoreModule,
            PopoverModule,
            TooltipModule,
            OperationSummaryModule,
            BulkOperationSchedulerModule,
            OperationsListItemDetailsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationListItemModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    PopoverModule,
                    TooltipModule,
                    OperationSummaryModule,
                    BulkOperationSchedulerModule,
                    OperationsListItemDetailsModule
                ],
                providers: [BulkOperationListItemService],
                declarations: [
                    BulkOperationListItemComponent,
                    BulkOperationsRescheduleModalComponent,
                    BulkOperationWrapperComponent
                ],
                entryComponents: [
                    BulkOperationListItemComponent,
                    BulkOperationsRescheduleModalComponent,
                    BulkOperationWrapperComponent
                ],
                exports: [
                    BulkOperationListItemComponent,
                    BulkOperationsRescheduleModalComponent,
                    BulkOperationWrapperComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BulkOperationListItemModule, { declarations: function () { return [BulkOperationListItemComponent, BulkOperationsRescheduleModalComponent, BulkOperationWrapperComponent]; }, imports: function () { return [CoreModule,
        PopoverModule,
        TooltipModule,
        OperationSummaryModule,
        BulkOperationSchedulerModule,
        OperationsListItemDetailsModule]; }, exports: function () { return [BulkOperationListItemComponent, BulkOperationsRescheduleModalComponent, BulkOperationWrapperComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { BULK_OPERATION_STATUS_LABELS, BULK_OPERATION_STATUS_OPTIONS, BulkOperationListItemComponent, BulkOperationListItemModule, BulkOperationListItemService, BulkOperationWrapperComponent, BulkOperationsRescheduleModalComponent };

//# sourceMappingURL=c8y-ngx-components-operations-bulk-operation-list-item.js.map