import { __awaiter } from 'tslib';
import { Component, Injectable, NgModule } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ManagedObjectRealtimeService, ViewContext, gettext, CoreModule, HOOK_ROUTE } from '@c8y/ngx-components';
import { DeviceGridService, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { InventoryService } from '@c8y/client';

class ChildDevicesComponent {
    constructor(route, deviceGridService) {
        this.route = route;
        this.deviceGridService = deviceGridService;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getAllDevices();
            this.columns = this.deviceGridService.getChildDeviceGridColumns();
        });
    }
    getAllDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            this.id = this.route.snapshot.parent.data.contextData;
        });
    }
}
ChildDevicesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-child-devices',
                template: "<c8y-device-grid\n  [title]=\"'Child devices' | translate\"\n  class=\"flex-grow col-xs-12 no-gutter\"\n  [childDeviceGrid]=\"true\"\n  [columns]=\"columns\"\n  [parentDeviceId]=\"id\"\n>\n</c8y-device-grid>\n",
                providers: [ManagedObjectRealtimeService]
            },] }
];
ChildDevicesComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: DeviceGridService }
];

class ChildDevicesTabGuard {
    constructor(inventory) {
        this.inventory = inventory;
    }
    canActivate(route) {
        return __awaiter(this, void 0, void 0, function* () {
            const contextData = route.data.contextData;
            const filter = {
                pageSize: 1
            };
            if (!contextData) {
                return true;
            }
            const device = yield this.inventory.childDevicesList(contextData.id, filter);
            const hasChildren = device.data.length;
            const isVendme = route.data.contextData.type === 'com_nsn_startups_vendme_VendingMachine';
            return hasChildren && !isVendme;
        });
    }
}
ChildDevicesTabGuard.decorators = [
    { type: Injectable }
];
ChildDevicesTabGuard.ctorParameters = () => [
    { type: InventoryService }
];

const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'child-devices',
        priority: 1000,
        icon: 'code-fork',
        label: gettext('Child devices'),
        component: ChildDevicesComponent,
        canActivate: [ChildDevicesTabGuard]
    }
];
class ChildDevicesModule {
}
ChildDevicesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ChildDevicesComponent],
                imports: [CoreModule, DeviceGridModule, PopoverModule],
                entryComponents: [ChildDevicesComponent],
                providers: [
                    ChildDevicesTabGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ChildDevicesComponent, ChildDevicesModule, ɵ0, ChildDevicesTabGuard as ɵa };
//# sourceMappingURL=c8y-ngx-components-child-devices.js.map
