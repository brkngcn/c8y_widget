import { __awaiter } from 'tslib';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';
import { SubAssetsService, AssetTypeGridColumn, DeleteAssetsModalComponent } from '@c8y/ngx-components/sub-assets';
import * as i1 from '@ngx-translate/core';
import * as i2 from '@c8y/client';
import * as i3 from '@c8y/client';
import * as i4 from '@c8y/ngx-components';
import { gettext, FilteringActionType, InventorySearchService, DataGridComponent, Status, AlertService, RouterService, CoreModule, SearchModule as SearchModule$1, HOOK_ROUTE, HOOK_SEARCH } from '@c8y/ngx-components';
import * as i5 from '@c8y/ngx-components/assets-navigator';
import * as i6 from '@c8y/client';
import * as i7 from '@c8y/client';
import { NameDeviceGridColumn, ModelDeviceGridColumn, SerialNumberDeviceGridColumn, RegistrationDateDeviceGridColumn, SystemIdDeviceGridColumn, ImeiDeviceGridColumn, AlarmsDeviceGridColumn, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { ActivatedRoute, Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SmartGroupsService } from '@c8y/client';
import { BsModalService } from 'ngx-bootstrap/modal';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from 'ngx-bootstrap/modal';
import * as ɵngcc3 from '@c8y/client';
import * as ɵngcc4 from '@c8y/ngx-components/sub-assets';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@angular/router';

function SearchGridComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-column", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", column_r1.name);
} }
const _c0 = function (a0) { return { searchHint: a0 }; };
function SearchResultsComponent_small_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 3);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(1, "searching \"{{ searchHint }}\"");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c0, ctx_r0.searchText));
} }
const _c1 = function (a0) { return { filterHint: a0 }; };
function SearchResultsComponent_small_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 3);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(1, "filtered by \"{{ filterHint }}\"");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c1, ctx_r1.filter));
} }
class AssetSearchService extends SubAssetsService {
    constructor() {
        super(...arguments);
        this.GRID_CONFIG_STORAGE_KEY = 'search-grid-config';
        this.DEFAULT_PAGE_SIZE = 50;
    }
    buildCombinedRootQueryFilter(columns, pagination) {
        const rootQuery = {
            __filter: {
                __and: { __not: { __has: `c8y_IsBinary` } }
            }
        };
        const userQuery = this.getQueryObj(columns, pagination);
        const queryPart = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        const fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    getData(columns, pagination) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = this.buildCombinedRootQueryFilter(columns, pagination);
            return this.assetNodeService.getAllInventories(Object.assign(Object.assign({}, pagination), { query }));
        });
    }
}
AssetSearchService.ɵfac = /*@__PURE__*/ function () { let ɵAssetSearchService_BaseFactory; return function AssetSearchService_Factory(t) { return (ɵAssetSearchService_BaseFactory || (ɵAssetSearchService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AssetSearchService)))(t || AssetSearchService); }; }();
AssetSearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetSearchService_Factory() { return new AssetSearchService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.InventoryService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.AppStateService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i5.AssetNodeService), i0.ɵɵinject(i6.SmartGroupsService), i0.ɵɵinject(i7.SmartRulesService), i0.ɵɵinject(i4.AlertService), i0.ɵɵinject(i4.Permissions), i0.ɵɵinject(i4.ModalService), i0.ɵɵinject(i4.AssetTypesService), i0.ɵɵinject(i4.UserPreferencesService), i0.ɵɵinject(i4.GainsightService, 8)); }, token: AssetSearchService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetSearchService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

class SearchGridComponent {
    constructor(coreSearchService, searchService, bsModalService, smartGroupsService, subAssetsGridService) {
        this.coreSearchService = coreSearchService;
        this.searchService = searchService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.subAssetsGridService = subAssetsGridService;
        this.title = '';
        this.loadingItemsLabel = gettext('Loading results…');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.searchText = '';
        this.pagination = this.searchService.getDefaultPagination();
        this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
        this.refresh = new EventEmitter();
        this.sizeCount = 0;
    }
    set _columns(value) {
        if (value) {
            this.columns = value;
        }
        else {
            this.columns = this.searchService.getDefaultColumns();
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.searchService.getDefaultPagination();
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.searchService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
        }
    }
    ngOnInit() {
        if (!this.filteringName) {
            this.columns = this.searchService.getDefaultColumns();
        }
        else {
            this.columns = [
                new AssetTypeGridColumn({ sortOrder: 'desc' }),
                new NameDeviceGridColumn({
                    sortOrder: 'asc',
                    filter: { externalFilterQuery: { names: [this.filteringName] } }
                }),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn({ visible: false }),
                new RegistrationDateDeviceGridColumn({ visible: false }),
                new SystemIdDeviceGridColumn({ visible: false }),
                new ImeiDeviceGridColumn({ visible: false }),
                new AlarmsDeviceGridColumn()
            ];
        }
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.setActionControls();
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            if (dataSourceModifier.searchText) {
                response = yield this.coreSearchService.search(dataSourceModifier.searchText, dataSourceModifier.pagination);
            }
            else {
                response = yield this.searchService.getData(dataSourceModifier.columns, dataSourceModifier.pagination);
            }
            const { res, data, paging } = response;
            const filteredData = this.coreSearchService.filterOnlyAssets(data);
            if (paging.currentPage === 1) {
                this.sizeCount = 0;
            }
            this.sizeCount += filteredData.length;
            this.onColumnsChange.emit(dataSourceModifier.columns);
            return {
                res,
                data: filteredData,
                paging,
                filteredSize: this.sizeCount,
                size: undefined
            };
        });
    }
    setActionControls() {
        const actionControls = [];
        const deleteAction = {
            type: "DELETE" /* Delete */,
            callback: (asset) => this.onDeleteAsset(asset, this.parentGroup)
        };
        actionControls.push(deleteAction);
        if (!this.actionControls) {
            this.actionControls = actionControls;
        }
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action, false);
        }
    }
    configChange(config) {
        this.searchService.saveConfig(config);
    }
    onDeleteAsset(asset, parentRef) {
        const initialState = {
            showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
            asset,
            showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)
        };
        const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe((result) => __awaiter(this, void 0, void 0, function* () {
            if (result) {
                yield this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                this.refresh.emit();
            }
        }));
    }
}
SearchGridComponent.ɵfac = function SearchGridComponent_Factory(t) { return new (t || SearchGridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InventorySearchService), ɵngcc0.ɵɵdirectiveInject(AssetSearchService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.SmartGroupsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.SubAssetsService)); };
SearchGridComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchGridComponent, selectors: [["c8y-search-grid"]], viewQuery: function SearchGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DataGridComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataGrid = _t.first);
    } }, inputs: { title: "title", loadingItemsLabel: "loadingItemsLabel", selectable: "selectable", searchText: "searchText", _columns: ["columns", "_columns"], _pagination: ["pagination", "_pagination"], _actionControls: ["actionControls", "_actionControls"], _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], parentGroup: ["parent-group", "parentGroup"], filteringName: "filteringName" }, outputs: { onColumnsChange: "onColumnsChange" }, decls: 7, vars: 24, consts: [[1, "card--grid--fullpage"], [3, "title", "loadingItemsLabel", "columns", "pagination", "actionControls", "selectable", "bulkActionControls", "serverSideDataCallback", "infiniteScroll", "showSearch", "searchText", "refresh", "onConfigChange"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "icon", "title", "subtitle", "horizontal"], [3, "name"]], template: function SearchGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-data-grid", 1);
        ɵngcc0.ɵɵlistener("onConfigChange", function SearchGridComponent_Template_c8y_data_grid_onConfigChange_1_listener($event) { return ctx.configChange($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, SearchGridComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelement(4, "c8y-ui-empty-state", 3);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 18, "Search results"))("loadingItemsLabel", ctx.loadingItemsLabel)("columns", ctx.columns)("pagination", ctx.pagination)("actionControls", ctx.actionControls)("selectable", ctx.selectable)("bulkActionControls", ctx.bulkActionControls)("serverSideDataCallback", ctx.serverSideDataCallback)("infiniteScroll", "auto")("showSearch", true)("searchText", ctx.searchText)("refresh", ctx.refresh);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns)("ngForTrackBy", ctx.trackByName);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("icon", "search")("title", ɵngcc0.ɵɵpipeBind1(5, 20, "No results to display."))("subtitle", ɵngcc0.ɵɵpipeBind1(6, 22, "Refine your search terms or check your spelling."))("horizontal", true);
    } }, directives: [ɵngcc1.DataGridComponent, ɵngcc5.NgForOf, ɵngcc1.EmptyStateComponent, ɵngcc1.ColumnDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
SearchGridComponent.ctorParameters = () => [
    { type: InventorySearchService },
    { type: AssetSearchService },
    { type: BsModalService },
    { type: SmartGroupsService },
    { type: SubAssetsService }
];
SearchGridComponent.propDecorators = {
    parentGroup: [{ type: Input, args: ['parent-group',] }],
    title: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    _columns: [{ type: Input, args: ['columns',] }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    selectable: [{ type: Input }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    onColumnsChange: [{ type: Output }],
    searchText: [{ type: Input }],
    filteringName: [{ type: Input }],
    dataGrid: [{ type: ViewChild, args: [DataGridComponent, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchGridComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search-grid',
                template: "<div class=\"card--grid--fullpage\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onConfigChange)=\"configChange($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n\n    <c8y-ui-empty-state\n      [icon]=\"'search'\"\n      [title]=\"'No results to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.InventorySearchService }, { type: AssetSearchService }, { type: ɵngcc2.BsModalService }, { type: ɵngcc3.SmartGroupsService }, { type: ɵngcc4.SubAssetsService }]; }, { title: [{
            type: Input
        }], loadingItemsLabel: [{
            type: Input
        }], selectable: [{
            type: Input
        }], onColumnsChange: [{
            type: Output
        }], searchText: [{
            type: Input
        }], _columns: [{
            type: Input,
            args: ['columns']
        }], _pagination: [{
            type: Input,
            args: ['pagination']
        }], _actionControls: [{
            type: Input,
            args: ['actionControls']
        }], _bulkActionControls: [{
            type: Input,
            args: ['bulkActionControls']
        }], parentGroup: [{
            type: Input,
            args: ['parent-group']
        }], filteringName: [{
            type: Input
        }], dataGrid: [{
            type: ViewChild,
            args: [DataGridComponent, { static: true }]
        }] }); })();

class SearchResultsComponent {
    constructor(route, alert) {
        this.route = route;
        this.alert = alert;
        this.filter = '';
        this.searchText = '';
        this.WARNING_TIMEOUT_TIME = 3000;
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        this.route.queryParams.pipe(takeUntil(this.unsubscribe$)).subscribe(params => {
            if (params.filter) {
                this.filteringName = params.filter;
            }
        });
    }
    ngAfterViewInit() {
        this.route.queryParams
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(({ filter, search }) => this.onQueryParamsChange(filter, search));
        this.searchGrid.dataGrid.onBeforeSearch.pipe(takeUntil(this.unsubscribe$)).subscribe(text => {
            if (text) {
                this.resetFilter();
            }
        });
        this.searchGrid.dataGrid.onBeforeFilter
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(() => this.resetSearch());
    }
    resetSearch() {
        if (this.searchGrid.dataGrid.searchText) {
            this.alert.add({
                text: gettext('Search reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: this.WARNING_TIMEOUT_TIME
            });
            this.searchText = '';
            this.searchGrid.dataGrid.searchText = '';
        }
    }
    resetFilter() {
        this.filter = '';
        if (this.searchGrid.dataGrid.filteringApplied) {
            this.alert.add({
                text: gettext('Filter reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: this.WARNING_TIMEOUT_TIME
            });
            this.searchGrid.dataGrid.clearFilters(false);
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    onQueryParamsChange(filter, searchTerm) {
        if (!this.shouldFilter(filter) && searchTerm) {
            this.searchText = searchTerm || '';
        }
    }
    shouldFilter(filter) {
        if (!filter) {
            return false;
        }
        this.resetSearch();
        this.filter = filter || '';
        this.searchGrid.updateFiltering(['name'], {
            type: FilteringActionType.ApplyFilter,
            payload: {
                filteringModifier: {
                    externalFilterQuery: {
                        names: [this.filter]
                    }
                }
            }
        });
        return true;
    }
}
SearchResultsComponent.ɵfac = function SearchResultsComponent_Factory(t) { return new (t || SearchResultsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService)); };
SearchResultsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchResultsComponent, selectors: [["c8y-search-results"]], viewQuery: function SearchResultsComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(SearchGridComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchGrid = _t.first);
    } }, decls: 6, vars: 4, consts: [["translate", "", 1, "p-r-4"], ["ngNonBindable", "", "translate", "", 3, "translateParams", 4, "ngIf"], [3, "searchText", "filteringName"], ["translate", "", 3, "translateParams"]], template: function SearchResultsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵelementStart(1, "span", 0);
        ɵngcc0.ɵɵtext(2, "Search");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, SearchResultsComponent_small_3_Template, 2, 3, "small", 1);
        ɵngcc0.ɵɵtemplate(4, SearchResultsComponent_small_4_Template, 2, 3, "small", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "c8y-search-grid", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.filter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("searchText", ctx.searchText)("filteringName", ctx.filteringName);
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.C8yTranslateDirective, ɵngcc5.NgIf, SearchGridComponent], encapsulation: 2 });
SearchResultsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: AlertService }
];
SearchResultsComponent.propDecorators = {
    searchGrid: [{ type: ViewChild, args: [SearchGridComponent, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchResultsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search-results',
                template: "<c8y-title>\n  <span translate class=\"p-r-4\">Search</span>\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"searchText\"\n    [translateParams]=\"{\n      searchHint: searchText\n    }\"\n    >searching \"{{ searchHint }}\"</small\n  >\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"filter\"\n    [translateParams]=\"{\n      filterHint: filter\n    }\"\n    >filtered by \"{{ filterHint }}\"</small\n  >\n</c8y-title>\n\n<c8y-search-grid [searchText]=\"searchText\" [filteringName]=\"filteringName\"></c8y-search-grid>\n"
            }]
    }], function () { return [{ type: ɵngcc6.ActivatedRoute }, { type: ɵngcc1.AlertService }]; }, { searchGrid: [{
            type: ViewChild,
            args: [SearchGridComponent, { static: true }]
        }] }); })();

class SearchActionComponent {
    constructor(c8yRouter, router) {
        this.c8yRouter = c8yRouter;
        this.router = router;
    }
    onSearch(on) {
        this.navigate(['/assetsearch'], {
            queryParams: { search: on },
            replaceUrl: true
        });
    }
    onFilter(on) {
        this.navigate(['/assetsearch'], {
            queryParams: { filter: on },
            replaceUrl: true
        });
    }
    onClick(mo) {
        this.router.navigateByUrl(this.c8yRouter.getHref(mo, '/'));
    }
    navigate(commands, extras) {
        this.router
            .navigateByUrl('/', { skipLocationChange: true })
            .then(() => this.router.navigate(commands, extras));
    }
}
SearchActionComponent.ɵfac = function SearchActionComponent_Factory(t) { return new (t || SearchActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RouterService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.Router)); };
SearchActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchActionComponent, selectors: [["c8y-search-action"]], decls: 1, vars: 0, consts: [[3, "filter", "search", "onClick"]], template: function SearchActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-search-input", 0);
        ɵngcc0.ɵɵlistener("filter", function SearchActionComponent_Template_c8y_search_input_filter_0_listener($event) { return ctx.onFilter($event); })("search", function SearchActionComponent_Template_c8y_search_input_search_0_listener($event) { return ctx.onSearch($event); })("onClick", function SearchActionComponent_Template_c8y_search_input_onClick_0_listener($event) { return ctx.onClick($event); });
        ɵngcc0.ɵɵelementEnd();
    } }, directives: [ɵngcc1.SearchInputComponent], encapsulation: 2 });
SearchActionComponent.ctorParameters = () => [
    { type: RouterService },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search-action',
                template: "<c8y-search-input\n  (filter)=\"onFilter($event)\"\n  (search)=\"onSearch($event)\"\n  (onClick)=\"onClick($event)\"\n></c8y-search-input>\n"
            }]
    }], function () { return [{ type: ɵngcc1.RouterService }, { type: ɵngcc6.Router }]; }, null); })();

const ɵ0 = [
    {
        path: 'assetsearch',
        component: SearchResultsComponent
    }
], ɵ1 = [
    {
        template: SearchActionComponent
    }
];
class SearchModule {
}
SearchModule.ɵfac = function SearchModule_Factory(t) { return new (t || SearchModule)(); };
SearchModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SearchModule });
SearchModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        AssetSearchService,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        {
            provide: HOOK_SEARCH,
            useValue: ɵ1,
            multi: true
        }
    ], imports: [[CoreModule, DeviceGridModule, SearchModule$1]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchModule, [{
        type: NgModule,
        args: [{
                declarations: [SearchResultsComponent, SearchGridComponent, SearchActionComponent],
                imports: [CoreModule, DeviceGridModule, SearchModule$1],
                entryComponents: [SearchResultsComponent, SearchActionComponent],
                exports: [SearchResultsComponent, SearchGridComponent],
                providers: [
                    AssetSearchService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: HOOK_SEARCH,
                        useValue: ɵ1,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SearchModule, { declarations: function () { return [SearchResultsComponent, SearchGridComponent, SearchActionComponent]; }, imports: function () { return [CoreModule, DeviceGridModule, SearchModule$1]; }, exports: function () { return [SearchResultsComponent, SearchGridComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AssetSearchService, SearchGridComponent, SearchModule, SearchResultsComponent, ɵ0, ɵ1, SearchActionComponent as ɵa };

//# sourceMappingURL=c8y-ngx-components-search.js.map