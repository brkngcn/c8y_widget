import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Injector, Component, Input, ViewChild, Optional, Inject, isDevMode, EventEmitter, Directive, ElementRef, ChangeDetectorRef, Pipe, NgModule, LOCALE_ID, Renderer2, HostListener, Output, HostBinding, TemplateRef, ViewContainerRef, ComponentFactoryResolver, forwardRef, APP_INITIALIZER, ContentChild, Attribute, NgModuleFactory, InjectFlags, Compiler, ContentChildren, ViewChildren, NgZone, Host, ChangeDetectionStrategy, Type } from '@angular/core';
import * as i1 from '@angular/router';
import { NavigationEnd, Router, RouterModule as RouterModule$1, PRIMARY_OUTLET, RouterLinkActive, ActivatedRoute } from '@angular/router';
import { merge, of, defer, combineLatest, race, isObservable, from, Subject, BehaviorSubject, pipe, fromEvent, Observable, throwError, timer, NEVER, empty, EMPTY, fromEventPattern, ReplaySubject, forkJoin } from 'rxjs';
import { filter, startWith, switchMap, map, distinctUntilChanged, shareReplay, scan, tap, catchError, takeUntil, first as first$1, debounceTime, concatMap, take, delay, retryWhen, combineLatest as combineLatest$1, mergeMap, every as every$1, toArray, merge as merge$1, debounce, expand, finalize, share } from 'rxjs/operators';
import { castArray, flatten, isFunction, sortBy, camelCase, isUndefined, throttle as throttle$1, keys, get, each, mapValues, mapKeys, isString, isNaN as isNaN$1, isFinite, forEach, every, first, uniq, map as map$1, assign, upperFirst, memoize as memoize$1, property, entries, omitBy, filter as filter$1, isEqual, snakeCase, matches, isEmpty, escape as escape$1, escapeRegExp, set, findIndex, some, find as find$1, isEqualWith, clone, omit, includes, orderBy, pick, flow, isNil, chunk, union, without, indexOf, uniqBy, parseInt as parseInt$1, kebabCase, forOwn } from 'lodash-es';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDropdownModule, BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { VIRTUAL_SCROLL_STRATEGY, ScrollingModule } from '@angular/cdk/scrolling';
import { formatDate, registerLocaleData, DatePipe as DatePipe$1, DecimalPipe, CommonModule as CommonModule$1, LocationStrategy, Location } from '@angular/common';
import * as i4$1 from '@c8y/ngx-components/api';
import { SystemOptionsService, TenantOptionsService, ApiService, DataModule, ApplicationService as ApplicationService$1, InventoryService as InventoryService$1 } from '@c8y/ngx-components/api';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import * as i2 from '@ngx-translate/core';
import { TranslateParser, TranslateDefaultParser, TranslateDirective, TranslateService as TranslateService$1, TranslatePipe, TranslateModule, TranslateLoader, TranslateCompiler, TranslateFakeCompiler, MissingTranslationHandler, TranslateStore, USE_STORE, USE_DEFAULT_LANG, USE_EXTEND, DEFAULT_LANGUAGE } from '@ngx-translate/core';
import { __awaiter, __decorate } from 'tslib';
import { ApplicationService, FetchClient, TenantLoginOptionsService, SystemOptionsService as SystemOptionsService$1, InventoryBinaryService, InventoryService, UserService, TenantLoginOptionType, UserManagementSource, GrantType, ApplicationType, OperationStatus, TenantService, BasicAuth, CookieAuth, Realtime, Client, PasswordStrength, AuditService, Service, MeasurementService } from '@c8y/client';
import * as i4 from 'ngx-bootstrap/datepicker';
import { BsDatepickerModule, BsLocaleService } from 'ngx-bootstrap/datepicker';
import { defineLocale, enGbLocale, zhCnLocale, ruLocale, ptBrLocale, plLocale, nlLocale, koLocale, jaLocale, frLocale, esLocale, deLocale } from 'ngx-bootstrap/chronos';
import { saveAs } from 'file-saver';
import * as i1$1 from '@c8y/client';
import * as i2$1 from '@c8y/client';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { get as get$1, find, negate, isUndefined as isUndefined$1, isEmpty as isEmpty$1, sortBy as sortBy$1 } from 'lodash';
import * as i1$2 from 'ngx-bootstrap/modal';
import { BsModalRef, BsModalService, ModalModule as ModalModule$1 } from 'ngx-bootstrap/modal';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxControlValueAccessor, Validators, FormControl, NgModel, FormControlName, NgControl, FormsModule as FormsModule$1, ReactiveFormsModule, ControlContainer, NgForm, FormGroup, FormArray, FormBuilder } from '@angular/forms';
import { PopoverDirective, PopoverModule } from 'ngx-bootstrap/popover';
import * as i1$3 from '@c8y/client';
import { parsePhoneNumberFromString } from 'libphonenumber-js/max';
import { QRCodeModule } from 'angularx-qrcode';
import { CdkStepper, STEP_STATE, CdkStep, CdkStepperModule, STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';
import { Directionality } from '@angular/cdk/bidi';
import { FieldArrayType, FieldType, FieldWrapper, FormlyModule, FORMLY_CONFIG, ɵdefineHiddenProp } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { FormlyJsonschema } from '@ngx-formly/core/json-schema';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { DomSanitizer } from '@angular/platform-browser';
import { CdkHeaderCell, CdkTableModule } from '@angular/cdk/table';
import { PaginationModule } from 'ngx-bootstrap/pagination';
import * as i1$4 from '@c8y/client';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@c8y/ngx-components/api';
import * as ɵngcc3 from '@c8y/client';
import * as ɵngcc4 from '@ngx-translate/core';
import * as ɵngcc5 from '@angular/common/http';
import * as ɵngcc6 from 'ngx-bootstrap/datepicker';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '@angular/cdk/scrolling';
import * as ɵngcc9 from 'ngx-bootstrap/dropdown';
import * as ɵngcc10 from 'ngx-bootstrap/modal';
import * as ɵngcc11 from 'ngx-bootstrap/tooltip';
import * as ɵngcc12 from 'ngx-bootstrap/popover';
import * as ɵngcc13 from 'ngx-bootstrap/collapse';
import * as ɵngcc14 from '@angular/forms';
import * as ɵngcc15 from 'angularx-qrcode';
import * as ɵngcc16 from '@angular/cdk/bidi';
import * as ɵngcc17 from '@angular/cdk/stepper';
import * as ɵngcc18 from '@ngx-formly/core';
import * as ɵngcc19 from '@ngx-formly/core/select';
import * as ɵngcc20 from '@angular/platform-browser';
import * as ɵngcc21 from '@angular/cdk/drag-drop';
import * as ɵngcc22 from '@angular/cdk/table';
import * as ɵngcc23 from 'ngx-bootstrap/pagination';

const _c0 = ["template"];
function ActionBarItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r1.itemClass);
} }
const _c1 = ["*"];
function EmptyStateComponent_ng_container_2_p_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r4.subtitle));
} }
function EmptyStateComponent_ng_container_2_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function EmptyStateComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵelementStart(2, "h3", 4);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, EmptyStateComponent_ng_container_2_p_5_Template, 3, 3, "p", 2);
    ɵngcc0.ɵɵelementStart(6, "div", 5);
    ɵngcc0.ɵɵtemplate(7, EmptyStateComponent_ng_container_2_ng_container_7_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(5);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 3, ctx_r0.title));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.subtitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function EmptyStateComponent_ng_container_3_p_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r6.subtitle));
} }
function EmptyStateComponent_ng_container_3_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function EmptyStateComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵelementStart(2, "p");
    ɵngcc0.ɵɵelementStart(3, "strong");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, EmptyStateComponent_ng_container_3_p_6_Template, 3, 3, "p", 7);
    ɵngcc0.ɵɵelementStart(7, "div", 8);
    ɵngcc0.ɵɵtemplate(8, EmptyStateComponent_ng_container_3_ng_container_8_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(5);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 3, ctx_r1.title));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.subtitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function EmptyStateComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
const _c2 = function (a0) { return { "c8y-empty-state--horizontal": a0 }; };
function LoadMoreComponent_button_0_ng_container_2_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 6);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("innerHTML", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r7.loadNextLabel), ɵngcc0.ɵɵsanitizeHtml);
} }
const _c3 = function (a0) { return { pageNo: a0 }; };
function LoadMoreComponent_button_0_ng_container_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(1, " Load page {{ pageNo }}");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c3, ctx_r9.paging.currentPage + 1));
} }
function LoadMoreComponent_button_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, LoadMoreComponent_button_0_ng_container_2_span_1_Template, 2, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(2, LoadMoreComponent_button_0_ng_container_2_ng_template_2_Template, 2, 3, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(3);
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.loadNextLabel)("ngIfElse", _r8);
} }
function LoadMoreComponent_button_0_ng_container_3_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 6);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("innerHTML", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r10.loadingLabel), ɵngcc0.ɵɵsanitizeHtml);
} }
function LoadMoreComponent_button_0_ng_container_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(1, " Page {{ pageNo }} is loading\u2026 ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c3, ctx_r12.paging.currentPage + 1));
} }
function LoadMoreComponent_button_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, LoadMoreComponent_button_0_ng_container_3_span_1_Template, 2, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(2, LoadMoreComponent_button_0_ng_container_3_ng_template_2_Template, 2, 3, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r11 = ɵngcc0.ɵɵreference(3);
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.loadingLabel)("ngIfElse", _r11);
} }
const _c4 = function (a0) { return { "btn-pending": a0 }; };
function LoadMoreComponent_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function LoadMoreComponent_button_0_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.loadMore($event); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, LoadMoreComponent_button_0_ng_container_2_Template, 4, 2, "ng-container", 1);
    ɵngcc0.ɵɵtemplate(3, LoadMoreComponent_button_0_ng_container_3_Template, 4, 2, "ng-container", 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("visibility", ctx_r0.hidden ? "hidden" : "visible")("height", ctx_r0.hidden ? "1px" : null);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 8, "Load more"));
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c4, ctx_r0.isLoading));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isLoading);
} }
function LoadMoreComponent_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function LoadMoreComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, LoadMoreComponent_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.noMoreDataHint || _r2);
} }
function LoadMoreComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Last record"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "circle");
} }
function LoadMoreComponent_ng_container_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function LoadMoreComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, LoadMoreComponent_ng_container_4_ng_container_1_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.loadingTemplate);
} }
function VirtualScrollerWrapperComponent_ng_container_0_ng_container_1_div_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c5 = function (a0, a1) { return { $implicit: a0, index: a1 }; };
function VirtualScrollerWrapperComponent_ng_container_0_ng_container_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, VirtualScrollerWrapperComponent_ng_container_0_ng_container_1_div_2_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const i_r6 = ctx.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c5, item_r5, i_r6));
} }
function VirtualScrollerWrapperComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "cdk-virtual-scroll-viewport", 3);
    ɵngcc0.ɵɵtemplate(2, VirtualScrollerWrapperComponent_ng_container_0_ng_container_1_div_2_Template, 2, 5, "div", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const items_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("itemSizePx", ctx_r2.itemHeight);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("cdkVirtualForOf", items_r1)("cdkVirtualForTrackBy", ctx_r2.trackByFn);
} }
function VirtualScrollerWrapperComponent_ng_container_0_ng_container_2_div_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function VirtualScrollerWrapperComponent_ng_container_0_ng_container_2_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, VirtualScrollerWrapperComponent_ng_container_0_ng_container_2_div_2_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r10 = ctx.$implicit;
    const i_r11 = ctx.index;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r9.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c5, item_r10, i_r11));
} }
function VirtualScrollerWrapperComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "cdk-virtual-scroll-viewport", 6);
    ɵngcc0.ɵɵtemplate(2, VirtualScrollerWrapperComponent_ng_container_0_ng_container_2_div_2_Template, 2, 5, "div", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const items_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("height", ctx_r3.containerHeight + "px");
    ɵngcc0.ɵɵproperty("itemSize", ctx_r3.itemHeight);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("cdkVirtualForOf", items_r1)("cdkVirtualForTrackBy", ctx_r3.trackByFn);
} }
function VirtualScrollerWrapperComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 1);
    ɵngcc0.ɵɵtemplate(1, VirtualScrollerWrapperComponent_ng_container_0_ng_container_1_Template, 3, 3, "ng-container", 2);
    ɵngcc0.ɵɵtemplate(2, VirtualScrollerWrapperComponent_ng_container_0_ng_container_2_Template, 3, 5, "ng-container", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r0.strategy);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "window");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "fixed");
} }
const _c6 = function (a0) { return { "max-width.px": a0 }; };
function OperationResultComponent__svg_svg_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g", 4);
    ɵngcc0.ɵɵelement(2, "polyline", 5);
    ɵngcc0.ɵɵelement(3, "path", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(1, _c6, ctx_r0.size || 64));
} }
function OperationResultComponent__svg_svg_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g", 7);
    ɵngcc0.ɵɵelement(2, "line", 8);
    ɵngcc0.ɵɵelement(3, "line", 9);
    ɵngcc0.ɵɵelement(4, "circle", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(1, _c6, ctx_r1.size || 64));
} }
function OperationResultComponent__svg_svg_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g", 11);
    ɵngcc0.ɵɵelement(2, "line", 12);
    ɵngcc0.ɵɵelement(3, "line", 13);
    ɵngcc0.ɵɵelementStart(4, "g", 14);
    ɵngcc0.ɵɵelement(5, "path", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(1, _c6, ctx_r2.size || 64));
} }
function OperationResultComponent_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.text, " ");
} }
const _c7 = function (a0) { return { "d-col j-c-center": a0 }; };
function ProgressBarComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelement(1, "div", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("width", ctx_r0.progress + "%");
    ɵngcc0.ɵɵattribute("aria-valuenow", ctx_r0.progress);
} }
function ProgressBarComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
} }
function ProgressBarComponent_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r2.message), " ");
} }
function ActionBarComponent_ng_container_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ActionBarComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ActionBarComponent_ng_container_7_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r3.template);
} }
function ActionBarComponent_ng_container_10_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ActionBarComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ActionBarComponent_ng_container_10_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r5.template);
} }
function ActionBarComponent_li_12_ng_container_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ActionBarComponent_li_12_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ActionBarComponent_li_12_ng_container_8_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r9.template);
} }
function ActionBarComponent_li_12_ul_10_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ActionBarComponent_li_12_ul_10_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ActionBarComponent_li_12_ul_10_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r12 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r12.template);
} }
function ActionBarComponent_li_12_ul_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 16);
    ɵngcc0.ɵɵtemplate(1, ActionBarComponent_li_12_ul_10_ng_container_1_Template, 2, 1, "ng-container", 5);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r8.more$));
} }
function ActionBarComponent_li_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelementStart(2, "button", 11);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "span", 12);
    ɵngcc0.ɵɵtext(5, "More\u2026");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "i", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "ul", 14);
    ɵngcc0.ɵɵtemplate(8, ActionBarComponent_li_12_ng_container_8_Template, 2, 1, "ng-container", 5);
    ɵngcc0.ɵɵpipe(9, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, ActionBarComponent_li_12_ul_10_Template, 3, 3, "ul", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("title", "", ɵngcc0.ɵɵpipeBind1(3, 3, "More"), "\u2026");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", "caret-down");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(9, 5, ctx_r2.more$));
} }
function ActionOutletComponent_div_0_ul_4_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ActionOutletComponent_div_0_ul_4_ng_container_1_li_2_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 11);
} if (rf & 2) {
    const item_r3 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("c8yIcon", item_r3.icon);
} }
function ActionOutletComponent_div_0_ul_4_ng_container_1_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ActionOutletComponent_div_0_ul_4_ng_container_1_li_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r10); const item_r3 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(3); return ctx_r8.invoke(item_r3); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ActionOutletComponent_div_0_ul_4_ng_container_1_li_2_i_3_Template, 1, 1, "i", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, item_r3.label));
    ɵngcc0.ɵɵattribute("disabled", item_r3.disabled ? "disabled" : null);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", item_r3.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(5, 6, item_r3.label), " ");
} }
function ActionOutletComponent_div_0_ul_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ActionOutletComponent_div_0_ul_4_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, ActionOutletComponent_div_0_ul_4_ng_container_1_li_2_Template, 6, 8, "li", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r3.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r3.label);
} }
function ActionOutletComponent_div_0_ul_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 5);
    ɵngcc0.ɵɵtemplate(1, ActionOutletComponent_div_0_ul_4_ng_container_1_Template, 3, 2, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.getByPriority());
} }
function ActionOutletComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "button", 2);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, ActionOutletComponent_div_0_ul_4_Template, 2, 1, "ul", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Actions"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "plus-circle");
} }
function ActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
const _c8 = ["detailedData"];
const _c9 = ["text"];
function AlertComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
    ɵngcc0.ɵɵprojection(1, 1);
} }
function AlertComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 2);
} }
const _c10 = [[["c8y-alert-text"]], "*", [["c8y-alert-details"]]];
const _c11 = ["c8y-alert-text", "*", "c8y-alert-details"];
function AlertOutletComponent_div_0_div_8_strong_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "strong", 10);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const alert_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("textContent", ɵngcc0.ɵɵpipeBind1(1, 1, alert_r1.text));
} }
function AlertOutletComponent_div_0_div_8_strong_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "strong", 11);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const alert_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("innerHTML", ɵngcc0.ɵɵpipeBind1(1, 1, alert_r1.text), ɵngcc0.ɵɵsanitizeHtml);
} }
function AlertOutletComponent_div_0_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, AlertOutletComponent_div_0_div_8_strong_1_Template, 2, 3, "strong", 8);
    ɵngcc0.ɵɵtemplate(2, AlertOutletComponent_div_0_div_8_strong_2_Template, 2, 3, "strong", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const alert_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !alert_r1.allowHtml);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", alert_r1.allowHtml);
} }
function AlertOutletComponent_div_0_p_9_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p", 12);
    ɵngcc0.ɵɵelementStart(1, "button", 13);
    ɵngcc0.ɵɵlistener("click", function AlertOutletComponent_div_0_p_9_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const alert_r1 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.showDetails(alert_r1); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 14);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Show details"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, "Show details"), " ");
} }
function AlertOutletComponent_div_0_p_10_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p", 12);
    ɵngcc0.ɵɵelementStart(1, "button", 13);
    ɵngcc0.ɵɵlistener("click", function AlertOutletComponent_div_0_p_10_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.closeDetails(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 15);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Hide details"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, "Hide details"), " ");
} }
function AlertOutletComponent_div_0_div_11_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "pre");
    ɵngcc0.ɵɵelement(2, "code", 16);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("textContent", ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r16.detailDisplayedAlert.contents));
} }
function AlertOutletComponent_div_0_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, AlertOutletComponent_div_0_div_11_div_1_Template, 4, 3, "div", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const alert_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isTemplateRef(ctx_r5.detailDisplayedAlert.contents))("ngIfElse", ctx_r5.template(alert_r1.detailedData));
} }
const _c12 = function (a0, a1) { return [a0, a1]; };
function AlertOutletComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "button", 2);
    ɵngcc0.ɵɵlistener("click", function AlertOutletComponent_div_0_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r19); const alert_r1 = restoredCtx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.close(alert_r1); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "span", 3);
    ɵngcc0.ɵɵtext(4, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 4);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, AlertOutletComponent_div_0_div_8_Template, 3, 2, "div", 5);
    ɵngcc0.ɵɵtemplate(9, AlertOutletComponent_div_0_p_9_Template, 6, 6, "p", 6);
    ɵngcc0.ɵɵtemplate(10, AlertOutletComponent_div_0_p_10_Template, 6, 6, "p", 6);
    ɵngcc0.ɵɵtemplate(11, AlertOutletComponent_div_0_div_11_Template, 2, 2, "div", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const alert_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(12, _c12, ctx_r0.getClass(alert_r1), ctx_r0.isDetailsShow(alert_r1) ? "expanded" : ""));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 8, "Close"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 10, "Close"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isTemplateRef(alert_r1.text))("ngIfElse", ctx_r0.template(alert_r1.text));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasDetails(alert_r1) && !ctx_r0.isDetailsShow(alert_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasDetails(alert_r1) && ctx_r0.isDetailsShow(alert_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDetailsShow(alert_r1));
} }
const _c13 = ["headerRef"];
const _c14 = ["bodyRef"];
const _c15 = ["footerRef"];
function WizardComponent_1_ng_template_0_Template(rf, ctx) { }
function WizardComponent_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, WizardComponent_1_ng_template_0_Template, 0, 0, "ng-template");
} }
function WizardComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "h1", 7);
    ɵngcc0.ɵɵelementStart(2, "h4");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r2.wizardConfig.headerIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 2, ctx_r2.wizardConfig.headerText));
} }
function WizardComponent_5_ng_template_0_Template(rf, ctx) { }
function WizardComponent_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, WizardComponent_5_ng_template_0_Template, 0, 0, "ng-template");
} }
function WizardComponent_ng_template_7_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelement(2, "i", 7);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r11.wizardConfig.bodyHeaderIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 2, ctx_r11.wizardConfig.bodyHeaderText));
} }
function WizardComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, WizardComponent_ng_template_7_div_0_Template, 6, 4, "div", 8);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.wizardConfig.bodyHeaderText);
} }
function WizardComponent_10_ng_template_0_Template(rf, ctx) { }
function WizardComponent_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, WizardComponent_10_ng_template_0_Template, 0, 0, "ng-template");
} }
function WizardComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function WizardComponent_ng_template_12_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.close(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "span", 13);
    ɵngcc0.ɵɵtext(4, "Cancel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Cancel"));
} }
function BootstrapComponent_c8y_login_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-login");
} }
function BootstrapComponent_div_2_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelementStart(1, "p", 16);
    ɵngcc0.ɵɵtext(2, "powered by Cumulocity");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c16 = function (a0, a1, a2, a3, a4, a5) { return { open: a0, "no-apps-margin": a1, "horizontal-tabs": a2, "vertical-tabs": a3, "has-tabs": a4, "has-action-bar": a5 }; };
function BootstrapComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "c8y-header-bar", null, 2);
    ɵngcc0.ɵɵelementStart(3, "c8y-navigator-outlet", 3);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵpipe(5, "async");
    ɵngcc0.ɵɵelementStart(6, "header", 4);
    ɵngcc0.ɵɵelement(7, "div", 5);
    ɵngcc0.ɵɵelement(8, "c8y-app-icon", 6);
    ɵngcc0.ɵɵpipe(9, "async");
    ɵngcc0.ɵɵpipe(10, "async");
    ɵngcc0.ɵɵelementStart(11, "span");
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "async");
    ɵngcc0.ɵɵpipe(14, "humanizeAppName");
    ɵngcc0.ɵɵpipe(15, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(16, BootstrapComponent_div_2_div_16_Template, 3, 0, "div", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "div", 8);
    ɵngcc0.ɵɵelement(18, "c8y-alert-outlet");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(19, "c8y-tabs-outlet", 9, 10);
    ɵngcc0.ɵɵpipe(21, "async");
    ɵngcc0.ɵɵpipe(22, "async");
    ɵngcc0.ɵɵpipe(23, "async");
    ɵngcc0.ɵɵelement(24, "c8y-action-bar", 11, 12);
    ɵngcc0.ɵɵpipe(26, "async");
    ɵngcc0.ɵɵelementStart(27, "div", 13);
    ɵngcc0.ɵɵpipe(28, "async");
    ɵngcc0.ɵɵpipe(29, "async");
    ɵngcc0.ɵɵelementStart(30, "div", 14);
    ɵngcc0.ɵɵelement(31, "router-outlet");
    ɵngcc0.ɵɵprojection(32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r5 = ɵngcc0.ɵɵreference(20);
    const _r6 = ɵngcc0.ɵɵreference(25);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("head-open", ctx_r1.headerService.headerOpen);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("nodes", ɵngcc0.ɵɵpipeBind1(4, 16, ctx_r1.navigator.items$))("open", ɵngcc0.ɵɵpipeBind1(5, 18, ctx_r1.headerService.navigatorOpen$));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("name", ɵngcc0.ɵɵpipeBind1(9, 20, ctx_r1.ui.state$).app.name)("contextPath", ɵngcc0.ɵɵpipeBind1(10, 22, ctx_r1.ui.state$).app.contextPath);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(13, 24, ɵngcc0.ɵɵpipeBind1(14, 26, ɵngcc0.ɵɵpipeBind1(15, 28, ctx_r1.ui.state$).app)));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showPoweredBy);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("tabs", ɵngcc0.ɵɵpipeBind1(21, 30, ctx_r1.tabs.items$))("navigatorOpen", ɵngcc0.ɵɵpipeBind1(22, 32, ctx_r1.headerService.navigatorOpen$))("orientation", ɵngcc0.ɵɵpipeBind1(23, 34, ctx_r1.tabs.orientation$));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("navigatorOpen", ɵngcc0.ɵɵpipeBind1(26, 36, ctx_r1.headerService.navigatorOpen$))("hasTabs", _r5.hasTabs)("isTabsHorizontal", _r5 == null ? null : _r5.isHorizontal)("items$", ctx_r1.actionBar.items$);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction6(42, _c16, ɵngcc0.ɵɵpipeBind1(28, 38, ctx_r1.headerService.navigatorOpen$), ɵngcc0.ɵɵpipeBind1(29, 40, ctx_r1.noAppsMargin$), _r5.isHorizontal, !_r5.isHorizontal, _r5.hasTabs, !(_r6 == null ? null : _r6.hidden)));
} }
function BootstrapComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "c8y-header-bar", 17);
    ɵngcc0.ɵɵelementStart(2, "div", 18);
    ɵngcc0.ɵɵelementStart(3, "div", 14);
    ɵngcc0.ɵɵelement(4, "c8y-setup");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("simple", true);
} }
const _c17 = [[["", "id", "c8y-legacy-view"]]];
const _c18 = ["#c8y-legacy-view"];
function BreadcrumbItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
function BreadcrumbOutletComponent_div_0_button_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 6);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "Show all breadcrumbs"));
    ɵngcc0.ɵɵproperty("c8yIcon", "caret-right");
} }
function BreadcrumbOutletComponent_div_0_button_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 6);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "Collapse breadcrumbs"));
    ɵngcc0.ɵɵproperty("c8yIcon", "caret-down");
} }
function BreadcrumbOutletComponent_div_0_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbOutletComponent_div_0_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.showAll = !ctx_r5.showAll; });
    ɵngcc0.ɵɵtemplate(1, BreadcrumbOutletComponent_div_0_button_1_i_1_Template, 2, 4, "i", 5);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbOutletComponent_div_0_button_1_i_2_Template, 2, 4, "i", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.showAll);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showAll);
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, " > ");
    ɵngcc0.ɵɵelementEnd();
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_3_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 14);
} if (rf & 2) {
    const item_r11 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("c8yIcon", item_r11.icon);
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "a", 12);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_3_i_3_Template, 1, 1, "i", 13);
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext();
    const item_r11 = ctx_r19.$implicit;
    const firstItem_r12 = ctx_r19.first;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, item_r11.label));
    ɵngcc0.ɵɵproperty("routerLink", ctx_r15.normalizePath(item_r11.path));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", firstItem_r12);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 6, item_r11.label));
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_4_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 14);
} if (rf & 2) {
    const item_r11 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("c8yIcon", item_r11.icon);
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_4_i_1_Template, 1, 1, "i", 13);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext();
    const firstItem_r12 = ctx_r22.first;
    const item_r11 = ctx_r22.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", firstItem_r12);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 2, item_r11.label));
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 10);
    ɵngcc0.ɵɵtemplate(1, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_span_1_Template, 2, 0, "span", 8);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_2_Template, 1, 0, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(3, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_3_Template, 7, 8, "ng-container", 8);
    ɵngcc0.ɵɵtemplate(4, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_ng_container_4_Template, 5, 4, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r11 = ctx.$implicit;
    const firstItem_r12 = ctx.first;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !firstItem_r12);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r11.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r11.label && item_r11.path);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r11.label && !item_r11.path);
} }
function BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_li_1_Template, 5, 4, "li", 9);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const breadcrumb_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", breadcrumb_r7.items);
} }
function BreadcrumbOutletComponent_div_0_ul_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 7);
    ɵngcc0.ɵɵtemplate(1, BreadcrumbOutletComponent_div_0_ul_2_ng_container_1_Template, 2, 1, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const first_r8 = ctx.first;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", first_r8 || ctx_r2.showAll);
} }
const _c19 = function (a0, a1) { return { multiple: a0, open: a1 }; };
function BreadcrumbOutletComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, BreadcrumbOutletComponent_div_0_button_1_Template, 3, 2, "button", 2);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbOutletComponent_div_0_ul_2_Template, 2, 1, "ul", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c19, ctx_r0.breadcrumbs.length > 1, ctx_r0.showAll));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.breadcrumbs.length > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.breadcrumbs);
} }
function BreadcrumbComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
function PopoverConfirmComponent_ng_template_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 5);
    ɵngcc0.ɵɵlistener("click", function PopoverConfirmComponent_ng_template_2_ng_container_4_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const button_r3 = restoredCtx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.click(button_r3.action); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const button_r3 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, button_r3.label));
    ɵngcc0.ɵɵproperty("ngClass", ctx_r2.buttonStatus(button_r3.status));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 5, button_r3.label), " ");
} }
function PopoverConfirmComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 3);
    ɵngcc0.ɵɵtemplate(4, PopoverConfirmComponent_ng_template_2_ng_container_4_Template, 5, 7, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r1.message), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.buttons);
} }
const _c20 = ["icon"];
function NavigatorNodeComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function NavigatorNodeComponent_div_5_c8y_navigator_node_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-navigator-node", 7);
    ɵngcc0.ɵɵlistener("nodeClick", function NavigatorNodeComponent_div_5_c8y_navigator_node_1_Template_c8y_navigator_node_nodeClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.nodeClick.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const childNode_r5 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("node", childNode_r5);
} }
function NavigatorNodeComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵtemplate(1, NavigatorNodeComponent_div_5_c8y_navigator_node_1_Template, 1, 1, "c8y-navigator-node", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("collapse", !ctx_r1.node.open)("isAnimated", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.node.children);
} }
function NavigatorNodeComponent_ng_template_6_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 12);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "circle-o-notch");
} }
function NavigatorNodeComponent_ng_template_6_i_7_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 13);
    ɵngcc0.ɵɵlistener("click", function NavigatorNodeComponent_ng_template_6_i_7_Template_i_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.click("expander", $event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r10.expandTitle);
    ɵngcc0.ɵɵproperty("c8yIcon", "chevron-down");
} }
function NavigatorNodeComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, NavigatorNodeComponent_ng_template_6_i_0_Template, 1, 1, "i", 8);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵelementContainer(2, null, 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, NavigatorNodeComponent_ng_template_6_i_7_Template, 1, 2, "i", 10);
    ɵngcc0.ɵɵelement(8, "c8y-popover-confirm", 11);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.node.loading && !ctx_r3.isRoot);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 3, ctx_r3.node.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.node.hasChildren);
} }
const _c21 = function (a0, a1) { return { dragged: a0, disabled: a1 }; };
const _c22 = function (a0) { return { exact: a0 }; };
const _c23 = function (a0, a1, a2, a3) { return { "root-link": a0, open: a1, parent: a2, "dragged-hover": a3 }; };
function NavigatorOutletComponent_nav_0_c8y_navigator_node_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-navigator-node", 4);
    ɵngcc0.ɵɵlistener("nodeClick", function NavigatorOutletComponent_nav_0_c8y_navigator_node_3_Template_c8y_navigator_node_nodeClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.collapseNavigator($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("node", node_r2)("isRoot", true);
} }
const _c24 = function (a0) { return { open: a0 }; };
function NavigatorOutletComponent_nav_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "nav", 1);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementStart(2, "ul", 2);
    ɵngcc0.ɵɵtemplate(3, NavigatorOutletComponent_nav_0_c8y_navigator_node_3_Template, 1, 2, "c8y-navigator-node", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵprojection(4, 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c24, ctx_r0.open));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.nodes)("ngForTrackBy", ctx_r0.trackByPathOrLabel);
} }
const _c25 = [[["", 8, "navigator-slot-top"]], [["", 8, "navigator-slot-bottom"]]];
const _c26 = [".navigator-slot-top", ".navigator-slot-bottom"];
function ConfirmModalComponent_h3_1_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r3.title));
} }
const _c27 = function (a0) { return [a0]; };
function ConfirmModalComponent_h3_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 7);
    ɵngcc0.ɵɵelement(1, "i", 8);
    ɵngcc0.ɵɵtemplate(2, ConfirmModalComponent_h3_1_span_2_Template, 3, 3, "span", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c27, ctx_r0.classIcon));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.title);
} }
function ConfirmModalComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "label", 11);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "input", 12);
    ɵngcc0.ɵɵlistener("change", function ConfirmModalComponent_div_5_Template_input_change_3_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const co_r4 = restoredCtx.$implicit; return co_r4.value.checked = !co_r4.value.checked; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "span", 13);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const co_r4 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 4, co_r4.value.text));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("checked", co_r4.value.checked)("disabled", ctx_r1.confirmOptions[co_r4.value.disabledByKey] == null ? null : ctx_r1.confirmOptions[co_r4.value.disabledByKey].checked);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 6, co_r4.value.text));
} }
function ConfirmModalComponent_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 14);
    ɵngcc0.ɵɵlistener("click", function ConfirmModalComponent_button_11_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.dismiss(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r2.labels.cancel));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r2.labels.cancel), " ");
} }
function ModalComponent_p_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.body, " ");
} }
function ModalComponent_div_10_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function ModalComponent_div_10_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4._dismiss(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r2.labels.cancel));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r2.labels.cancel), " ");
} }
function ModalComponent_div_10_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function ModalComponent_div_10_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6._close(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r3.labels.ok));
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.disabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, ctx_r3.labels.ok), " ");
} }
function ModalComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵprojection(1, 2);
    ɵngcc0.ɵɵtemplate(2, ModalComponent_div_10_button_2_Template, 4, 6, "button", 8);
    ɵngcc0.ɵɵtemplate(3, ModalComponent_div_10_button_3_Template, 4, 7, "button", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.labels.cancel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.labels.ok);
} }
const _c28 = [[["", "c8y-modal-title", ""]], "*", [["", "c8y-modal-footer", ""]]];
const _c29 = function (a0) { return { separator: a0 }; };
const _c30 = function (a0, a1) { return { "modal-body": a0, "d-contents": a1 }; };
const _c31 = ["[c8y-modal-title]", "*", "[c8y-modal-footer]"];
function SearchOutletComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SearchOutletComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchOutletComponent_ng_container_0_ng_container_1_Template, 1, 0, "ng-container", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r1.template);
} }
function SearchComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
function ListItemActionComponent_ng_template_0_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 4);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r2.icon);
} }
function ListItemActionComponent_ng_template_0_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r3.label));
} }
function ListItemActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function ListItemActionComponent_ng_template_0_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.click.emit($event); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ListItemActionComponent_ng_template_0_i_3_Template, 1, 1, "i", 2);
    ɵngcc0.ɵɵtext(4, "\u00A0 ");
    ɵngcc0.ɵɵtemplate(5, ListItemActionComponent_ng_template_0_span_5_Template, 3, 3, "span", 3);
    ɵngcc0.ɵɵprojection(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r1.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.label);
} }
function ListItemFooterComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.footer);
} }
function ListItemComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵprojection(1, 6);
    ɵngcc0.ɵɵelementEnd();
} }
function ListItemComponent_div_10_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function ListItemComponent_div_10_button_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.toggleCollapsed($event); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Expand"));
    ɵngcc0.ɵɵattribute("aria-expanded", !ctx_r3.collapsed);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "chevron-down");
} }
function ListItemComponent_div_10_div_2_ul_4_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ListItemComponent_div_10_div_2_ul_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ListItemComponent_div_10_div_2_ul_4_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const action_r10 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", action_r10.template);
} }
function ListItemComponent_div_10_div_2_ul_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 16);
    ɵngcc0.ɵɵprojection(1, 7);
    ɵngcc0.ɵɵtemplate(2, ListItemComponent_div_10_div_2_ul_4_ng_container_2_Template, 2, 1, "ng-container", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.actions);
} }
function ListItemComponent_div_10_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵlistener("onShown", function ListItemComponent_div_10_div_2_Template_div_onShown_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.showDropdownUp(); });
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, ListItemComponent_div_10_div_2_ul_4_Template, 3, 1, "ul", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("dropup", ctx_r4.dropdownUp);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Actions"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "ellipsis-v");
} }
function ListItemComponent_div_10_ng_content_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 8, ["*ngIf", "showActions"]);
} }
function ListItemComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, ListItemComponent_div_10_button_1_Template, 3, 5, "button", 8);
    ɵngcc0.ɵɵtemplate(2, ListItemComponent_div_10_div_2_Template, 5, 5, "div", 9);
    ɵngcc0.ɵɵtemplate(3, ListItemComponent_div_10_ng_content_3_Template, 1, 0, "ng-content", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showCollapse && ctx_r1.itemCollapse.collapseWay === "button");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showActions);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showActions);
} }
function ListItemComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵprojection(2, 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("collapse", ctx_r2.collapsed)("isAnimated", true);
} }
const _c32 = [[["c8y-list-item-drag-handle"], ["c8y-li-drag-handle"]], [["c8y-list-item-radio"], ["c8y-li-radio"]], [["c8y-list-item-checkbox"], ["c8y-li-checkbox"]], [["c8y-list-item-icon"], ["c8y-li-icon"]], [["c8y-list-item-body"], ["c8y-li-body"]], "*", [["c8y-list-item-footer"], ["c8y-li-footer"]], [["c8y-list-item-action"], ["c8y-li-action"]], [["c8y-list-item-action"], ["c8y-li-action"]], [["c8y-list-item-collapse"], ["c8y-li-collapse"]]];
const _c33 = function (a0, a1) { return { "expanded": a0, interact: a1 }; };
const _c34 = ["c8y-list-item-drag-handle, c8y-li-drag-handle", "c8y-list-item-radio, c8y-li-radio", "c8y-list-item-checkbox, c8y-li-checkbox", "c8y-list-item-icon, c8y-li-icon", "c8y-list-item-body, c8y-li-body", "*", "c8y-list-item-footer, c8y-li-footer", "c8y-list-item-action, c8y-li-action", "c8y-list-item-action, c8y-li-action", "c8y-list-item-collapse, c8y-li-collapse"];
const _c35 = ["searchControl"];
const _c36 = ["searchControlModel"];
const _c37 = ["dropdown"];
function TypeaheadComponent_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵtext(1, " New ");
    ɵngcc0.ɵɵelementEnd();
} }
function TypeaheadComponent_c8y_list_group_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-list-group", 11);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵstyleProp("width", ctx_r4.container === "body" ? _r1.clientWidth + "px" : undefined);
} }
const _c38 = [[["div"], ["c8y-li"], ["c8y-list-item"], ["button"], ["a"]]];
const _c39 = function (a0, a1) { return { "p-r-80": a0, "p-r-40": a1 }; };
const _c40 = ["div, c8y-li, c8y-list-item, button, a"];
function SearchInputComponent_div_0_div_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SearchInputComponent_div_0_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, SearchInputComponent_div_0_div_5_ng_container_1_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function SearchInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3, 4);
    ɵngcc0.ɵɵlistener("isOpenChange", function SearchInputComponent_div_0_Template_div_isOpenChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onOpenChange($event); });
    ɵngcc0.ɵɵelementStart(2, "button", 5);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelement(4, "i", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, SearchInputComponent_div_0_div_5_Template, 2, 1, "div", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("insideClick", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(3, 2, "Search"));
} }
function SearchInputComponent_div_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SearchInputComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵtemplate(1, SearchInputComponent_div_1_ng_container_1_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function SearchInputComponent_ng_template_2_c8y_li_4_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelementStart(1, "p", 26);
    ɵngcc0.ɵɵelementStart(2, "em", 27);
    ɵngcc0.ɵɵtext(3, "Searching by exact match. Click for other search options:");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 28);
    ɵngcc0.ɵɵelementStart(5, "button", 29);
    ɵngcc0.ɵɵlistener("click", function SearchInputComponent_ng_template_2_c8y_li_4_div_1_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(3); return ctx_r25.onFilter(ctx_r25.term + "*"); });
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "button", 29);
    ɵngcc0.ɵɵlistener("click", function SearchInputComponent_ng_template_2_c8y_li_4_div_1_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r27 = ɵngcc0.ɵɵnextContext(3); return ctx_r27.onFilter("*" + ctx_r27.term + "*"); });
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "button", 29);
    ɵngcc0.ɵɵlistener("click", function SearchInputComponent_ng_template_2_c8y_li_4_div_1_Template_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r28 = ɵngcc0.ɵɵnextContext(3); return ctx_r28.onFilter("*" + ctx_r28.term); });
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 6, "Starts with"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 8, "Starts with"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 10, "Contains"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 12, "Contains"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(14, 14, "Ends with"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 16, "Ends with"), " ");
} }
function SearchInputComponent_ng_template_2_c8y_li_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 23);
    ɵngcc0.ɵɵtemplate(1, SearchInputComponent_ng_template_2_c8y_li_4_div_1_Template, 17, 18, "div", 24);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.mode === "search");
} }
function SearchInputComponent_ng_template_2_c8y_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 30);
    ɵngcc0.ɵɵelementStart(1, "div", 31);
    ɵngcc0.ɵɵelementStart(2, "span", 27);
    ɵngcc0.ɵɵtext(3, "Recent search views");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("selectable", false);
} }
function SearchInputComponent_ng_template_2_c8y_li_6_device_status_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "device-status", 35);
} if (rf & 2) {
    const result_r29 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("mo", result_r29);
} }
function SearchInputComponent_ng_template_2_c8y_li_6_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 36);
} if (rf & 2) {
    const result_r29 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r31 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r31.getIcon(result_r29));
} }
function SearchInputComponent_ng_template_2_c8y_li_6_Template(rf, ctx) { if (rf & 1) {
    const _r35 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 32);
    ɵngcc0.ɵɵlistener("click", function SearchInputComponent_ng_template_2_c8y_li_6_Template_c8y_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r35); const result_r29 = restoredCtx.$implicit; const ctx_r34 = ɵngcc0.ɵɵnextContext(2); return ctx_r34.open($event, result_r29, result_r29.name); });
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵtemplate(2, SearchInputComponent_ng_template_2_c8y_li_6_device_status_2_Template, 1, 1, "device-status", 33);
    ɵngcc0.ɵɵtemplate(3, SearchInputComponent_ng_template_2_c8y_li_6_i_3_Template, 1, 1, "i", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const result_r29 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !result_r29.c8y_IsDeviceGroup);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", result_r29.c8y_IsDeviceGroup);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", result_r29.name || "--", " ");
} }
function SearchInputComponent_ng_template_2_c8y_li_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 30);
    ɵngcc0.ɵɵelementStart(1, "div", 31);
    ɵngcc0.ɵɵelementStart(2, "span", 27);
    ɵngcc0.ɵɵtext(3, "Recently registered devices");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("selectable", false);
} }
function SearchInputComponent_ng_template_2_c8y_li_9_device_status_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "device-status", 35);
} if (rf & 2) {
    const result_r36 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("mo", result_r36);
} }
function SearchInputComponent_ng_template_2_c8y_li_9_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 36);
} if (rf & 2) {
    const result_r36 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r38 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r38.getIcon(result_r36));
} }
function SearchInputComponent_ng_template_2_c8y_li_9_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 32);
    ɵngcc0.ɵɵlistener("click", function SearchInputComponent_ng_template_2_c8y_li_9_Template_c8y_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r42); const result_r36 = restoredCtx.$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(2); return ctx_r41.open($event, result_r36, result_r36.name); });
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵtemplate(2, SearchInputComponent_ng_template_2_c8y_li_9_device_status_2_Template, 1, 1, "device-status", 33);
    ɵngcc0.ɵɵtemplate(3, SearchInputComponent_ng_template_2_c8y_li_9_i_3_Template, 1, 1, "i", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const result_r36 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !result_r36.c8y_IsDeviceGroup);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", result_r36.c8y_IsDeviceGroup);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", result_r36.name || "--", " ");
} }
function SearchInputComponent_ng_template_2_c8y_li_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 30);
    ɵngcc0.ɵɵelementStart(1, "div", 31);
    ɵngcc0.ɵɵelementStart(2, "span", 27);
    ɵngcc0.ɵɵtext(3, "Search results");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("selectable", false);
} }
function SearchInputComponent_ng_template_2_c8y_li_11_device_status_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "device-status", 35);
} if (rf & 2) {
    const result_r43 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("mo", result_r43);
} }
function SearchInputComponent_ng_template_2_c8y_li_11_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 36);
} if (rf & 2) {
    const result_r43 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r45 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r45.getIcon(result_r43));
} }
function SearchInputComponent_ng_template_2_c8y_li_11_Template(rf, ctx) { if (rf & 1) {
    const _r49 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 37);
    ɵngcc0.ɵɵlistener("click", function SearchInputComponent_ng_template_2_c8y_li_11_Template_c8y_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r49); const result_r43 = restoredCtx.$implicit; const ctx_r48 = ɵngcc0.ɵɵnextContext(2); return ctx_r48.open($event, result_r43, result_r43.name); });
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵtemplate(2, SearchInputComponent_ng_template_2_c8y_li_11_device_status_2_Template, 1, 1, "device-status", 33);
    ɵngcc0.ɵɵtemplate(3, SearchInputComponent_ng_template_2_c8y_li_11_i_3_Template, 1, 1, "i", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const result_r43 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("title", result_r43.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !result_r43.c8y_IsDeviceGroup);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", result_r43.c8y_IsDeviceGroup);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", result_r43.name || "--", " ");
} }
function SearchInputComponent_ng_template_2_ng_template_12_c8y_li_0_small_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 27);
    ɵngcc0.ɵɵtext(1, " Try to filter or open the asset grid to show all devices and groups. ");
    ɵngcc0.ɵɵelementEnd();
} }
function SearchInputComponent_ng_template_2_ng_template_12_c8y_li_0_small_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 27);
    ɵngcc0.ɵɵtext(1, " Try to rephrase your search word. ");
    ɵngcc0.ɵɵelementEnd();
} }
function SearchInputComponent_ng_template_2_ng_template_12_c8y_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 39);
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 40);
    ɵngcc0.ɵɵelementStart(2, "p");
    ɵngcc0.ɵɵelementStart(3, "strong", 27);
    ɵngcc0.ɵɵtext(4, "No match found.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, SearchInputComponent_ng_template_2_ng_template_12_c8y_li_0_small_5_Template, 2, 0, "small", 41);
    ɵngcc0.ɵɵtemplate(6, SearchInputComponent_ng_template_2_ng_template_12_c8y_li_0_small_6_Template, 2, 0, "small", 41);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r50 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("selectable", false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "search");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r50.mode === "search");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r50.mode === "select");
} }
function SearchInputComponent_ng_template_2_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, SearchInputComponent_ng_template_2_ng_template_12_c8y_li_0_Template, 7, 4, "c8y-li", 38);
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r19.noMatch);
} }
function SearchInputComponent_ng_template_2_c8y_li_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 42);
    ɵngcc0.ɵɵelementStart(1, "div", 43);
    ɵngcc0.ɵɵelement(2, "div", 44);
    ɵngcc0.ɵɵelement(3, "div", 45);
    ɵngcc0.ɵɵelement(4, "div", 46);
    ɵngcc0.ɵɵelement(5, "div", 47);
    ɵngcc0.ɵɵelement(6, "div", 48);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SearchInputComponent_ng_template_2_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 49);
    ɵngcc0.ɵɵelementStart(1, "div", 43);
    ɵngcc0.ɵɵelement(2, "div", 44);
    ɵngcc0.ɵɵelement(3, "div", 45);
    ɵngcc0.ɵɵelement(4, "div", 46);
    ɵngcc0.ɵɵelement(5, "div", 47);
    ɵngcc0.ɵɵelement(6, "div", 48);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SearchInputComponent_ng_template_2_c8y_li_17_Template(rf, ctx) { if (rf & 1) {
    const _r54 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 50);
    ɵngcc0.ɵɵelementStart(1, "div", 25);
    ɵngcc0.ɵɵelement(2, "i", 51);
    ɵngcc0.ɵɵelementStart(3, "p", 52);
    ɵngcc0.ɵɵtext(4, "Need more filter possibilities?");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 53);
    ɵngcc0.ɵɵlistener("mousedown", function SearchInputComponent_ng_template_2_c8y_li_17_Template_button_mousedown_5_listener() { ɵngcc0.ɵɵrestoreView(_r54); const ctx_r53 = ɵngcc0.ɵɵnextContext(2); return ctx_r53.onOpenAssetTable(); });
    ɵngcc0.ɵɵtext(6, " Go to the asset data table ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("selectable", false);
} }
const _c41 = function (a0) { return { "c8y-search-form": a0 }; };
const _c42 = function () { return []; };
const _c43 = function (a0) { return { data: a0 }; };
function SearchInputComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r56 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 11, 12);
    ɵngcc0.ɵɵelementStart(2, "c8y-typeahead", 13);
    ɵngcc0.ɵɵlistener("ngModelChange", function SearchInputComponent_ng_template_2_Template_c8y_typeahead_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r56); const ctx_r55 = ɵngcc0.ɵɵnextContext(); return ctx_r55.selected = $event; })("keydown", function SearchInputComponent_ng_template_2_Template_c8y_typeahead_keydown_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r56); const ctx_r57 = ɵngcc0.ɵɵnextContext(); return ctx_r57.keyDown($event); })("onIconClick", function SearchInputComponent_ng_template_2_Template_c8y_typeahead_onIconClick_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r56); const ctx_r58 = ɵngcc0.ɵɵnextContext(); return ctx_r58.onReset($event); });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, SearchInputComponent_ng_template_2_c8y_li_4_Template, 2, 1, "c8y-li", 14);
    ɵngcc0.ɵɵtemplate(5, SearchInputComponent_ng_template_2_c8y_li_5_Template, 4, 1, "c8y-li", 15);
    ɵngcc0.ɵɵtemplate(6, SearchInputComponent_ng_template_2_c8y_li_6_Template, 5, 3, "c8y-li", 16);
    ɵngcc0.ɵɵtemplate(7, SearchInputComponent_ng_template_2_c8y_li_7_Template, 4, 1, "c8y-li", 15);
    ɵngcc0.ɵɵpipe(8, "async");
    ɵngcc0.ɵɵtemplate(9, SearchInputComponent_ng_template_2_c8y_li_9_Template, 5, 3, "c8y-li", 17);
    ɵngcc0.ɵɵtemplate(10, SearchInputComponent_ng_template_2_c8y_li_10_Template, 4, 1, "c8y-li", 15);
    ɵngcc0.ɵɵtemplate(11, SearchInputComponent_ng_template_2_c8y_li_11_Template, 5, 4, "c8y-li", 18);
    ɵngcc0.ɵɵtemplate(12, SearchInputComponent_ng_template_2_ng_template_12_Template, 1, 1, "ng-template", null, 19, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(14, SearchInputComponent_ng_template_2_c8y_li_14_Template, 7, 0, "c8y-li", 20);
    ɵngcc0.ɵɵtemplate(15, SearchInputComponent_ng_template_2_ng_template_15_Template, 7, 0, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(17, SearchInputComponent_ng_template_2_c8y_li_17_Template, 7, 1, "c8y-li", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r18 = ɵngcc0.ɵɵreference(13);
    const _r21 = ɵngcc0.ɵɵreference(16);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    let tmp_9_0;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(26, _c41, ctx_r3.mode === "search"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 22, "Search for groups or assets\u2026"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.selected)("icon", ctx_r3.term ? "times" : "search")("allowFreeEntries", false)("container", ctx_r3.container);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.term.length !== 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.term.length === 0 && ctx_r3.recentSearchResults.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.term.length === 0 ? ctx_r3.recentSearchResults : ɵngcc0.ɵɵpureFunction0(28, _c42));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.term.length === 0 && ((tmp_9_0 = ɵngcc0.ɵɵpipeBind1(8, 24, ctx_r3.recentlyRegisteredResults$)) == null ? null : tmp_9_0.data == null ? null : tmp_9_0.data.length) > 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r3.term.length === 0 ? ctx_r3.recentlyRegisteredResults$ : ɵngcc0.ɵɵpureFunction1(30, _c43, ɵngcc0.ɵɵpureFunction0(29, _c42)))("c8yForLoadMore", "none")("c8yForPipe", ctx_r3.filterPipe);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.term.length !== 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r3.results$)("c8yForLoadMore", "auto")("c8yForPipe", ctx_r3.filterPipe)("c8yForNotFound", _r18)("c8yForLoadingTemplate", _r21)("c8yForLoadNextLabel", "Find more\u2026");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isLoading);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.mode === "search");
} }
function SelectComponent_span_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "All"));
} }
function SelectComponent_span_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.labelText));
} }
function SelectComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵtemplate(1, SelectComponent_span_4_ng_container_1_Template, 3, 3, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, SelectComponent_span_4_ng_container_2_Template, 3, 3, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showAllLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.showAllLabel);
} }
function SelectComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r2.placeholder), " ");
} }
function SelectComponent_ul_6_ng_container_2_li_1_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 26);
} }
function SelectComponent_ul_6_ng_container_2_li_1_i_6_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 27);
    ɵngcc0.ɵɵlistener("click", function SelectComponent_ul_6_ng_container_2_li_1_i_6_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(4); return ctx_r11.textFilter = ""; });
    ɵngcc0.ɵɵelementEnd();
} }
function SelectComponent_ul_6_ng_container_2_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 11);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵelementStart(2, "input", 22);
    ɵngcc0.ɵɵlistener("keyup", function SelectComponent_ul_6_ng_container_2_li_1_Template_input_keyup_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(3); return ctx_r13.updateFiltered($event.target.value); })("ngModelChange", function SelectComponent_ul_6_ng_container_2_li_1_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r15 = ɵngcc0.ɵɵnextContext(3); return ctx_r15.searchFilter = $event; });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 23);
    ɵngcc0.ɵɵtemplate(5, SelectComponent_ul_6_ng_container_2_li_1_i_5_Template, 1, 0, "i", 24);
    ɵngcc0.ɵɵtemplate(6, SelectComponent_ul_6_ng_container_2_li_1_i_6_Template, 1, 0, "i", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(3, 4, "Filter"), "\u2026");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r7.searchFilter);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.textFilter);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.textFilter);
} }
function SelectComponent_ul_6_ng_container_2_li_12_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 11);
    ɵngcc0.ɵɵelementStart(1, "label", 28);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "input", 29);
    ɵngcc0.ɵɵlistener("change", function SelectComponent_ul_6_ng_container_2_li_12_Template_input_change_3_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r18); const item_r16 = restoredCtx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(3); return ctx_r17.onChangeItem($event.target.checked, item_r16); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "span", 14);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r16 = ctx.$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, item_r16.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("checked", ctx_r8.isSelected(item_r16));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 5, item_r16.name), " ");
} }
function SelectComponent_ul_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SelectComponent_ul_6_ng_container_2_li_1_Template, 7, 6, "li", 10);
    ɵngcc0.ɵɵelementStart(2, "li", 11);
    ɵngcc0.ɵɵelementStart(3, "label", 12);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementStart(5, "input", 13);
    ɵngcc0.ɵɵlistener("change", function SelectComponent_ul_6_ng_container_2_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.selectAll($event.target.checked); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "span");
    ɵngcc0.ɵɵelementStart(7, "span", 14);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "li", 15);
    ɵngcc0.ɵɵelementStart(11, "ul", 16);
    ɵngcc0.ɵɵtemplate(12, SelectComponent_ul_6_ng_container_2_li_12_Template, 8, 7, "li", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(13, "li", 18);
    ɵngcc0.ɵɵelementStart(14, "li", 19);
    ɵngcc0.ɵɵelementStart(15, "button", 20);
    ɵngcc0.ɵɵlistener("click", function SelectComponent_ul_6_ng_container_2_Template_button_click_15_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.applyChanges(); });
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.items.length > ctx_r6.sizeToShowFilter);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(4, 9, ctx_r6.getSelectAllToggleStatus().label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("checked", ctx_r6.getSelectAllToggleStatus().checked)("indeterminate", ctx_r6.getSelectAllToggleStatus().indeterminate);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 11, ctx_r6.getSelectAllToggleStatus().label), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r6.filteredItems);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(16, 13, ctx_r6.applyLabel));
    ɵngcc0.ɵɵproperty("disabled", ctx_r6.disableApplyOnNoSelection && ctx_r6.isNoItemSelected());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 15, ctx_r6.applyLabel), " ");
} }
function SelectComponent_ul_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 9);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵtemplate(2, SelectComponent_ul_6_ng_container_2_Template, 19, 17, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.liChildren.length === 0);
} }
const _c44 = [[["c8y-li"]]];
const _c45 = ["c8y-li"];
const _c46 = ["*", [["c8y-li"], ["c8y-list-item"]]];
const _c47 = ["*", "c8y-li, c8y-list-item"];
function ListItemIconComponent_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 1);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r0.icon)("ngClass", ctx_r0.status);
} }
function ListItemBodyComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.body);
} }
const _c48 = ["radio"];
function MessagesComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const msg_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, msg_r1), " ");
} }
function FormGroupComponent_c8y_messages_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-messages", 1);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("show", ctx_r0.errors);
} }
function InputGroupListComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function InputGroupListComponent_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.remove(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "Remove"));
} }
function InputGroupListComponent_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function InputGroupListComponent_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.add(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "Add"));
} }
function IpRangeInputListComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 3);
    ɵngcc0.ɵɵelementStart(1, "c8y-input-group-list", 4);
    ɵngcc0.ɵɵlistener("onAdd", function IpRangeInputListComponent_li_2_Template_c8y_input_group_list_onAdd_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.add(); })("onRemove", function IpRangeInputListComponent_li_2_Template_c8y_input_group_list_onRemove_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.remove($event); });
    ɵngcc0.ɵɵelementStart(2, "input", 5, 6);
    ɵngcc0.ɵɵlistener("ngModelChange", function IpRangeInputListComponent_li_2_Template_input_ngModelChange_2_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const item_r1 = restoredCtx.$implicit; return item_r1.ip = $event; });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 7, 8);
    ɵngcc0.ɵɵlistener("ngModelChange", function IpRangeInputListComponent_li_2_Template_input_ngModelChange_5_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const item_r1 = restoredCtx.$implicit; return item_r1.cidr = $event; });
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("index", i_r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(4, 8, "IP range start, e.g."), " 192.168.0.1");
    ɵngcc0.ɵɵproperty("ngModel", item_r1.ip)("required", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(7, 10, "e.g."), " 20");
    ɵngcc0.ɵɵproperty("min", 0)("ngModel", item_r1.cidr)("required", true);
} }
const _c49 = ["c8yRangeValue"];
function RangeComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.value);
} }
function RangeComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DeviceStatusComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 4);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r0.status().sendStatus.icon)("ngClass", ctx_r0.status().sendStatus.class);
} }
function DeviceStatusComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 5);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r1.status().pushStatus.icon)("ngClass", ctx_r1.status().pushStatus.class);
} }
function DeviceStatusComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r2.status().maintenanceStatus.tooltip));
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r2.status().maintenanceStatus.icon)("ngClass", ctx_r2.status().maintenanceStatus.class);
} }
function UserMenuItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 1);
    ɵngcc0.ɵɵlistener("click", function UserMenuItemComponent_ng_template_0_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onClick(); });
    ɵngcc0.ɵɵelementStart(1, "a", 2);
    ɵngcc0.ɵɵelement(2, "i", 3);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵprojection(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("href", ctx_r1.link, ɵngcc0.ɵɵsanitizeUrl)("target", ctx_r1.target);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r1.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r1.label), " ");
} }
const _c50 = ["modal"];
function UserEditComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵtext(1, " Some of the user settings are not editable here because they are managed via your authorization server. ");
    ɵngcc0.ɵɵelementEnd();
} }
function UserEditComponent_option_41_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 31);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const lang_r7 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", lang_r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.translate.getNativeLanguage(lang_r7), " ");
} }
function UserEditComponent_c8y_form_group_43_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group", 32);
    ɵngcc0.ɵɵelementStart(1, "strong", 33);
    ɵngcc0.ɵɵtext(2, "Product experience");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "label", 34);
    ɵngcc0.ɵɵelementStart(4, "input", 35);
    ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_c8y_form_group_43_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.isUsageTrackingEnabled = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r4.isUsageTrackingEnabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 2, "Enable anonymous tracking to enhance the product experience"), " ");
} }
function UserEditComponent_div_44_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 28);
    ɵngcc0.ɵɵlistener("click", function UserEditComponent_div_44_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.setupTotp(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Set up two-factor authentication"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Set up two-factor authentication"), " ");
} }
function UserEditComponent_div_44_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 36);
    ɵngcc0.ɵɵelementStart(1, "label", 37);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-new-password", 38);
    ɵngcc0.ɵɵlistener("password", function UserEditComponent_div_44_Template_c8y_new_password_password_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onNewPasswordChanged($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, UserEditComponent_div_44_button_5_Template, 4, 6, "button", 39);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 2, "Login options"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.userCanSetupTotp && !ctx_r5.userHasActiveTotp && ctx_r5.isTfaEnabled);
} }
function UserEditComponent_c8y_form_group_45_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(1, "label", 33);
    ɵngcc0.ɵɵtext(2, "Newsletter");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "label", 40);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementStart(5, "input", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_c8y_form_group_45_Template_input_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.user.newsletter = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "span");
    ɵngcc0.ɵɵelementStart(7, "span");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 4, "Send me information about outages, maintenance or updates."));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r6.user.newsletter)("disabled", ctx_r6.userIsExternal);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 6, "Send me information about outages, maintenance or updates."), " ");
} }
function UserMenuOutletComponent_ul_9_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function UserMenuOutletComponent_ul_9_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, UserMenuOutletComponent_ul_9_ng_container_1_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r7.template);
} }
function UserMenuOutletComponent_ul_9_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "li", 15);
    ɵngcc0.ɵɵlistener("click", function UserMenuOutletComponent_ul_9_ng_container_1_ng_container_2_Template_li_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r14); const item_r7 = ɵngcc0.ɵɵnextContext().$implicit; return item_r7.click(); });
    ɵngcc0.ɵɵelementStart(2, "a", 16);
    ɵngcc0.ɵɵelement(3, "i", 17);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("href", item_r7.link, ɵngcc0.ɵɵsanitizeUrl)("target", item_r7.target);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", item_r7.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, item_r7.label), " ");
} }
function UserMenuOutletComponent_ul_9_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, UserMenuOutletComponent_ul_9_ng_container_1_ng_container_1_Template, 2, 1, "ng-container", 13);
    ɵngcc0.ɵɵtemplate(2, UserMenuOutletComponent_ul_9_ng_container_1_ng_container_2_Template, 6, 6, "ng-container", 13);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r7 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r7.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !item_r7.template);
} }
function UserMenuOutletComponent_ul_9_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "li", 18);
} }
function UserMenuOutletComponent_ul_9_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 19);
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵelement(2, "i", 21);
    ɵngcc0.ɵɵelementStart(3, "span", 22);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementStart(6, "strong");
    ɵngcc0.ɵɵelementStart(7, "span", 23);
    ɵngcc0.ɵɵlistener("click", function UserMenuOutletComponent_ul_9_li_4_Template_span_click_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); $event.stopPropagation(); return ctx_r16.copyIt(ctx_r16.ui.currentTenant.value.name); });
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelement(9, "i", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "br");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementStart(13, "strong");
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(16, "br");
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementStart(19, "strong");
    ɵngcc0.ɵɵtext(20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "info-circle");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 8, "Tenant ID"), ": ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r6.ui.currentTenant.value.name, "\u00A0 ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "clipboard");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 10, "Backend"), ": ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 12, ctx_r6.ui.state$).versions.backend);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 14, "UI"), ": ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.ui.uiVersion);
} }
function UserMenuOutletComponent_ul_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 9);
    ɵngcc0.ɵɵtemplate(1, UserMenuOutletComponent_ul_9_ng_container_1_Template, 3, 2, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(2, UserMenuOutletComponent_ul_9_li_2_Template, 1, 0, "li", 11);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵtemplate(4, UserMenuOutletComponent_ul_9_li_4_Template, 21, 16, "li", 12);
    ɵngcc0.ɵɵpipe(5, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.getSortedItems());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(3, 3, ctx_r0.ui.state$).hidePowered);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(5, 5, ctx_r0.ui.state$).hidePowered);
} }
function UserMenuOutletComponent_c8y_user_menu_item_14_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-user-menu-item", 6);
    ɵngcc0.ɵɵlistener("click", function UserMenuOutletComponent_c8y_user_menu_item_14_Template_c8y_user_menu_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.activateSupportAccess(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("icon", "c8y-c8y-support")("label", ɵngcc0.ɵɵpipeBind1(1, 2, "Activate support"));
} }
function UserMenuOutletComponent_c8y_user_menu_item_17_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-user-menu-item", 6);
    ɵngcc0.ɵɵlistener("click", function UserMenuOutletComponent_c8y_user_menu_item_17_Template_c8y_user_menu_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.deactivateSupportAccess(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("icon", "c8y-c8y-support")("label", ɵngcc0.ɵɵpipeBind1(1, 2, "Deactivate support"));
} }
function UserMenuOutletComponent_c8y_user_menu_item_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-user-menu-item", 24);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("icon", "question-circle")("link", ɵngcc0.ɵɵpipeBind1(1, 4, ctx_r3.ui.state$).supportUrl)("target", "_blank")("label", ɵngcc0.ɵɵpipeBind1(2, 6, "Request support"));
} }
function PasswordCheckListComponent_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 0);
    ɵngcc0.ɵɵelement(1, "i", 3);
    ɵngcc0.ɵɵelement(2, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const requirement_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", requirement_r1.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("small ", requirement_r1.contextualColor, "");
    ɵngcc0.ɵɵproperty("translate", requirement_r1.label)("translateParams", ctx_r0.translateParams);
} }
function NewPasswordComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Change password"), " ");
} }
function NewPasswordComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Cancel password change"), " ");
} }
function NewPasswordComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(3, "label", 6);
    ɵngcc0.ɵɵtext(4, "Password");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 7, 8);
    ɵngcc0.ɵɵlistener("ngModelChange", function NewPasswordComponent_div_4_Template_input_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.model.newPassword = $event; })("change", function NewPasswordComponent_div_4_Template_input_change_5_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.newPasswordChanged(); })("input", function NewPasswordComponent_div_4_Template_input_input_5_listener() { ɵngcc0.ɵɵrestoreView(_r6); const _r4 = ɵngcc0.ɵɵreference(11); return _r4.control.updateValueAndValidity(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(8, "label", 9);
    ɵngcc0.ɵɵtext(9, "Confirm password");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "input", 10, 11);
    ɵngcc0.ɵɵlistener("ngModelChange", function NewPasswordComponent_div_4_Template_input_ngModelChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.model.newPasswordConfirm = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 12);
    ɵngcc0.ɵɵelementStart(13, "c8y-password-strength", 13);
    ɵngcc0.ɵɵlistener("strength", function NewPasswordComponent_div_4_Template_c8y_password_strength_strength_13_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.model.strength = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(14, "c8y-password-check-list", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.model.newPassword);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.model.newPasswordConfirm);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("password", ctx_r2.model.newPassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("password", ctx_r2.model.newPassword)("hidden", !ctx_r2.passwordEnforced);
} }
function TotpChallengeComponent_c8y_message_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-message", 13);
    ɵngcc0.ɵɵtext(1, " Invalid verification code. In case of key loss, please contact your platform administrator. ");
    ɵngcc0.ɵɵelementEnd();
} }
function TotpChallengeComponent_p_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 14);
    ɵngcc0.ɵɵtext(1, " In case of key loss, please contact your platform administrator. ");
    ɵngcc0.ɵɵelementEnd();
} }
function TotpChallengeComponent_button_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Verify"));
    ɵngcc0.ɵɵproperty("disabled", !_r0.form.valid);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "Verify"), " ");
} }
function TotpChallengeComponent_button_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Verifying\u2026"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Verifying\u2026"), " ");
} }
function SmsChallengeComponent_p_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 11);
    ɵngcc0.ɵɵtext(1, " Insert the code received via SMS. ");
    ɵngcc0.ɵɵelementEnd();
} }
const _c51 = function (a0) { return { disabled: a0 }; };
function TotpSetupComponent_qrcode_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "qrcode", 4);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("width", 180)("qrdata", ctx_r0.qrData)("errorCorrectionLevel", "M");
} }
function UserTotpRevokeComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p", 4);
    ɵngcc0.ɵɵtext(1, " This action will revoke the user's stored TOTP secret which will require a new setup. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "button", 5);
    ɵngcc0.ɵɵlistener("click", function UserTotpRevokeComponent_ng_template_6_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r4); ɵngcc0.ɵɵnextContext(); const _r0 = ɵngcc0.ɵɵreference(1); return _r0.hide(); });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtext(4, " Cancel ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 6);
    ɵngcc0.ɵɵlistener("click", function UserTotpRevokeComponent_ng_template_6_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); const _r0 = ɵngcc0.ɵɵreference(1); ctx_r5.revoke(); return _r0.hide(); });
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7, " Revoke ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 2, "Cancel"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 4, "Revoke"));
} }
function AppIconComponent_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.model.iconClass)("ngStyle", ctx_r0.model.iconStyle);
} }
function AppIconComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.model.appNameAbbr, "");
} }
const _c52 = function (a0) { return { applicationName: a0 }; };
function AppSwitcherComponent_div_4_div_1_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 10);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵpipe(2, "humanizeAppName");
    ɵngcc0.ɵɵelement(3, "c8y-app-icon", 11);
    ɵngcc0.ɵɵelementStart(4, "span", 12);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵpipe(7, "humanizeAppName");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const app_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 8, ɵngcc0.ɵɵpipeBind1(2, 10, app_r4.name)));
    ɵngcc0.ɵɵproperty("href", ctx_r3.getHref(app_r4), ɵngcc0.ɵɵsanitizeUrl)("actionName", "appSwitched")("actionData", ɵngcc0.ɵɵpureFunction1(16, _c52, app_r4 && app_r4.name));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("app", app_r4)("name", app_r4.name)("contextPath", app_r4.contextPath);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 12, ɵngcc0.ɵɵpipeBind1(7, 14, app_r4)));
} }
function AppSwitcherComponent_div_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, AppSwitcherComponent_div_4_div_1_a_1_Template, 8, 18, "a", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.oneCloudApps);
} }
function AppSwitcherComponent_div_4_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 13);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵpipe(2, "humanizeAppName");
    ɵngcc0.ɵɵelement(3, "c8y-app-icon", 11);
    ɵngcc0.ɵɵelementStart(4, "span", 12);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵpipe(7, "humanizeAppName");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const app_r5 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 9, ɵngcc0.ɵɵpipeBind1(2, 11, app_r5.name)));
    ɵngcc0.ɵɵproperty("ngClass", ctx_r2.isActive(app_r5) ? "active" : "")("href", ctx_r2.getHref(app_r5), ɵngcc0.ɵɵsanitizeUrl)("actionName", "appSwitched")("actionData", ɵngcc0.ɵɵpureFunction1(17, _c52, app_r5 && app_r5.name));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("app", app_r5)("name", app_r5.name)("contextPath", app_r5.contextPath);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 13, ɵngcc0.ɵɵpipeBind1(7, 15, app_r5)));
} }
function AppSwitcherComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵtemplate(1, AppSwitcherComponent_div_4_div_1_Template, 2, 1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "div", 6);
    ɵngcc0.ɵɵtemplate(3, AppSwitcherComponent_div_4_a_3_Template, 8, 19, "a", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.oneCloudApps && ctx_r0.oneCloudApps.length > 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.apps);
} }
function HeaderBarComponent_button_3_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 14);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "outdent");
} }
function HeaderBarComponent_button_3_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 14);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "dedent-right");
} }
function HeaderBarComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function HeaderBarComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.headerService.toggleNavigator(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, HeaderBarComponent_button_3_i_2_Template, 1, 1, "i", 18);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵtemplate(4, HeaderBarComponent_button_3_i_4_Template, 1, 1, "i", 18);
    ɵngcc0.ɵɵpipe(5, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Toggle navigator"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(3, 5, ctx_r0.headerService.navigatorOpen$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(5, 7, ctx_r0.headerService.navigatorOpen$));
} }
function HeaderBarComponent_c8y_breadcrumb_outlet_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-breadcrumb-outlet", 19);
    ɵngcc0.ɵɵpipe(1, "async");
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("breadcrumbs", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r1.breadcrumbService.items$));
} }
function HeaderBarComponent_c8y_search_outlet_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-search-outlet", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "async");
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Search"));
    ɵngcc0.ɵɵproperty("search", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r2.searchService.items$));
} }
function HeaderBarComponent_c8y_action_outlet_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-action-outlet", 21);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "async");
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Add"));
    ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r3.actionService.items$));
} }
function HeaderBarComponent_button_18_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 14);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "indent");
} }
function HeaderBarComponent_button_18_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 14);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "dedent");
} }
function HeaderBarComponent_button_18_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵlistener("click", function HeaderBarComponent_button_18_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.drawerOpen = !ctx_r12.drawerOpen; });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, HeaderBarComponent_button_18_i_2_Template, 1, 1, "i", 18);
    ɵngcc0.ɵɵtemplate(3, HeaderBarComponent_button_18_i_3_Template, 1, 1, "i", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Toggle side drawer"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.drawerOpen);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.drawerOpen);
} }
function HeaderBarComponent_c8y_right_drawer_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-right-drawer", 23);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵpipe(3, "async");
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("app", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r5.appState$).app)("quickLinks", ɵngcc0.ɵɵpipeBind1(2, 5, ctx_r5.docs.items$))("helpAndSupport", ɵngcc0.ɵɵpipeBind1(3, 7, ctx_r5.docs.items$));
} }
const _c53 = function (a0, a1) { return { open: a0, drawerOpen: a1 }; };
const _c54 = function (a0) { return { active: a0 }; };
function RightDrawerComponent_div_7_ng_container_4_h2_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h2");
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const quickLink_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(quickLink_r3.icon);
} }
function RightDrawerComponent_div_7_ng_container_4_img_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 9);
} if (rf & 2) {
    const quickLink_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("src", quickLink_r3.iconSrc, ɵngcc0.ɵɵsanitizeUrl);
} }
function RightDrawerComponent_div_7_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "a", 7);
    ɵngcc0.ɵɵlistener("click", function RightDrawerComponent_div_7_ng_container_4_Template_a_click_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const quickLink_r3 = restoredCtx.$implicit; quickLink_r3.click && $event.preventDefault(); return quickLink_r3.click && quickLink_r3.click(); });
    ɵngcc0.ɵɵtemplate(2, RightDrawerComponent_div_7_ng_container_4_h2_2_Template, 2, 3, "h2", 3);
    ɵngcc0.ɵɵtemplate(3, RightDrawerComponent_div_7_ng_container_4_img_3_Template, 1, 1, "img", 8);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const quickLink_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("href", quickLink_r3.url || "#", ɵngcc0.ɵɵsanitizeUrl)("actionName", "quickLinkRightDrawer:" + quickLink_r3.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", quickLink_r3.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", quickLink_r3.iconSrc);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 5, quickLink_r3.label), " ");
} }
function RightDrawerComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵtext(2, "Quick links");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵtemplate(4, RightDrawerComponent_div_7_ng_container_4_Template, 6, 7, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.quickLinks);
} }
function RightDrawerComponent_div_8_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "a", 13);
    ɵngcc0.ɵɵelement(2, "i", 14);
    ɵngcc0.ɵɵelementStart(3, "span", 15);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const link_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("href", link_r11.url, ɵngcc0.ɵɵsanitizeUrl)("actionName", "quickLinkRightDrawer:" + link_r11.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", link_r11.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 5, link_r11.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 7, link_r11.label), " ");
} }
function RightDrawerComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵtext(2, "Help & support");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, RightDrawerComponent_div_8_div_3_Template, 7, 9, "div", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.helpAndSupport);
} }
function TitleOutletComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 2);
} }
function TitleComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h1", 1);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function ChangePasswordComponent_c8y_form_group_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group", 19);
    ɵngcc0.ɵɵelementStart(1, "label", 4);
    ɵngcc0.ɵɵtext(2, "Tenant ID");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "input", 20, 21);
    ɵngcc0.ɵɵlistener("ngModelChange", function ChangePasswordComponent_c8y_form_group_4_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.model.tenantId = $event; });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 2, "Tenant ID"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.model.tenantId);
} }
function CredentialsComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function CredentialsComponent_div_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.redirectToOauth(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.oauthOptions.buttonName));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "sign-in");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 5, ctx_r0.oauthOptions.buttonName), " ");
} }
function CredentialsComponent_form_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 21);
    ɵngcc0.ɵɵtext(1, " Login ");
    ɵngcc0.ɵɵelementEnd();
} }
function CredentialsComponent_form_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵtext(1, "or");
    ɵngcc0.ɵɵelementEnd();
} }
function CredentialsComponent_form_1_c8y_form_group_6_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group", 22);
    ɵngcc0.ɵɵelementStart(1, "label", 23);
    ɵngcc0.ɵɵtext(2, "Tenant ID");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "input", 24, 25);
    ɵngcc0.ɵɵlistener("ngModelChange", function CredentialsComponent_form_1_c8y_form_group_6_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.model.tenant = $event; });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(5, 3, "e.g."), " t12345");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r8.model.tenant)("readonly", ctx_r8.loginViewParams.disableTenant);
} }
function CredentialsComponent_form_1_div_18_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 26);
    ɵngcc0.ɵɵelementStart(1, "label", 27);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "input", 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function CredentialsComponent_form_1_div_18_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.loginService.rememberMe = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Remember me"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r11.loginService.rememberMe);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 5, "Remember me"));
} }
function CredentialsComponent_form_1_div_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "a", 29);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r12.ui.state$).loginExtraLink.label);
    ɵngcc0.ɵɵproperty("href", ɵngcc0.ɵɵpipeBind1(3, 5, ctx_r12.ui.state$).loginExtraLink.url, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 7, ctx_r12.ui.state$).loginExtraLink.label, " ");
} }
function CredentialsComponent_form_1_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 5, 6);
    ɵngcc0.ɵɵlistener("ngSubmit", function CredentialsComponent_form_1_Template_form_ngSubmit_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.login(); });
    ɵngcc0.ɵɵelementStart(2, "h1");
    ɵngcc0.ɵɵtemplate(3, CredentialsComponent_form_1_span_3_Template, 2, 0, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, CredentialsComponent_form_1_ng_template_4_Template, 2, 0, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(6, CredentialsComponent_form_1_c8y_form_group_6_Template, 6, 5, "c8y-form-group", 9);
    ɵngcc0.ɵɵelementStart(7, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(8, "label", 10);
    ɵngcc0.ɵɵtext(9, "Username");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "input", 11, 12);
    ɵngcc0.ɵɵlistener("ngModelChange", function CredentialsComponent_form_1_Template_input_ngModelChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.model.user = $event; });
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(14, "label", 13);
    ɵngcc0.ɵɵtext(15, "Password");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "input", 14, 15);
    ɵngcc0.ɵɵlistener("ngModelChange", function CredentialsComponent_form_1_Template_input_ngModelChange_16_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.model.password = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(18, CredentialsComponent_form_1_div_18_Template, 8, 7, "div", 16);
    ɵngcc0.ɵɵelementStart(19, "button", 17);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵtext(21);
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "div", 18);
    ɵngcc0.ɵɵelementStart(24, "button", 19);
    ɵngcc0.ɵɵlistener("click", function CredentialsComponent_form_1_Template_button_click_24_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onChangeView.emit({ view: ctx_r22.LOGIN_VIEWS.RecoverPassword }); });
    ɵngcc0.ɵɵpipe(25, "translate");
    ɵngcc0.ɵɵtext(26);
    ɵngcc0.ɵɵpipe(27, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(28, CredentialsComponent_form_1_div_28_Template, 6, 9, "div", 20);
    ɵngcc0.ɵɵpipe(29, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(1);
    const _r6 = ɵngcc0.ɵɵreference(5);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r1.oauthOptions.initRequest && ctx_r1.oauthOptions.visibleOnLoginPage))("ngIfElse", _r6);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showTenant);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(12, 13, "e.g. joe or joe.doe@example.com`LOCALIZE`"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.model.user);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.model.password);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showBasicAuth);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 15, "Log in"));
    ɵngcc0.ɵɵproperty("disabled", !_r4.form.valid || ctx_r1.isLoading);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(22, 17, "Log in"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(25, 19, "Forgot password?"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(27, 21, "Forgot password?"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !!ɵngcc0.ɵɵpipeBind1(29, 23, ctx_r1.ui.state$).loginExtraLink);
} }
function LoginComponent_div_0_c8y_credentials_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-credentials", 11);
    ɵngcc0.ɵɵlistener("onChangeView", function LoginComponent_div_0_c8y_credentials_3_Template_c8y_credentials_onChangeView_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.handleLoginTemplate($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("loginViewParams", ctx_r1.loginViewParams);
} }
function LoginComponent_div_0_c8y_recover_password_4_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-recover-password", 12);
    ɵngcc0.ɵɵlistener("onChangeView", function LoginComponent_div_0_c8y_recover_password_4_Template_c8y_recover_password_onChangeView_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.handleLoginTemplate($event); });
    ɵngcc0.ɵɵelementEnd();
} }
function LoginComponent_div_0_c8y_change_password_5_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-change-password", 13);
    ɵngcc0.ɵɵlistener("onChangeView", function LoginComponent_div_0_c8y_change_password_5_Template_c8y_change_password_onChangeView_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.handleLoginTemplate($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("credentials", ctx_r3.credentials);
} }
function LoginComponent_div_0_c8y_totp_auth_6_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-totp-auth", 14);
    ɵngcc0.ɵɵlistener("onCancel", function LoginComponent_div_0_c8y_totp_auth_6_Template_c8y_totp_auth_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.reset(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("view", ctx_r4.currentView)("credentials", ctx_r4.credentials);
} }
function LoginComponent_div_0_c8y_totp_auth_7_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-totp-auth", 14);
    ɵngcc0.ɵɵlistener("onCancel", function LoginComponent_div_0_c8y_totp_auth_7_Template_c8y_totp_auth_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.reset(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("view", ctx_r5.currentView)("credentials", ctx_r5.credentials);
} }
function LoginComponent_div_0_c8y_sms_challenge_8_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-sms-challenge", 15);
    ɵngcc0.ɵɵlistener("onCancel", function LoginComponent_div_0_c8y_sms_challenge_8_Template_c8y_sms_challenge_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.reset(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("credentials", ctx_r6.credentials);
} }
function LoginComponent_div_0_c8y_provide_phone_number_9_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-provide-phone-number", 16);
    ɵngcc0.ɵɵlistener("onCancel", function LoginComponent_div_0_c8y_provide_phone_number_9_Template_c8y_provide_phone_number_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.reset(); })("onChangeView", function LoginComponent_div_0_c8y_provide_phone_number_9_Template_c8y_provide_phone_number_onChangeView_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.handleLoginTemplate($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("credentials", ctx_r7.credentials);
} }
function LoginComponent_div_0_c8y_tenant_id_setup_10_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-tenant-id-setup", 12);
    ɵngcc0.ɵɵlistener("onChangeView", function LoginComponent_div_0_c8y_tenant_id_setup_10_Template_c8y_tenant_id_setup_onChangeView_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.handleLoginTemplate($event); });
    ɵngcc0.ɵɵelementEnd();
} }
function LoginComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelement(2, "img", 3);
    ɵngcc0.ɵɵtemplate(3, LoginComponent_div_0_c8y_credentials_3_Template, 1, 1, "c8y-credentials", 4);
    ɵngcc0.ɵɵtemplate(4, LoginComponent_div_0_c8y_recover_password_4_Template, 1, 0, "c8y-recover-password", 5);
    ɵngcc0.ɵɵtemplate(5, LoginComponent_div_0_c8y_change_password_5_Template, 1, 1, "c8y-change-password", 6);
    ɵngcc0.ɵɵtemplate(6, LoginComponent_div_0_c8y_totp_auth_6_Template, 1, 2, "c8y-totp-auth", 7);
    ɵngcc0.ɵɵtemplate(7, LoginComponent_div_0_c8y_totp_auth_7_Template, 1, 2, "c8y-totp-auth", 7);
    ɵngcc0.ɵɵtemplate(8, LoginComponent_div_0_c8y_sms_challenge_8_Template, 1, 1, "c8y-sms-challenge", 8);
    ɵngcc0.ɵɵtemplate(9, LoginComponent_div_0_c8y_provide_phone_number_9_Template, 1, 1, "c8y-provide-phone-number", 9);
    ɵngcc0.ɵɵtemplate(10, LoginComponent_div_0_c8y_tenant_id_setup_10_Template, 1, 0, "c8y-tenant-id-setup", 5);
    ɵngcc0.ɵɵelement(11, "c8y-alert-outlet", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r0.currentView);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.Credentials);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.RecoverPassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.ChangePassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.TotpChallenge);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.TotpSetup);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.SmsChallenge);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.ProvidePhoneNumber);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r0.LOGIN_VIEWS.TenantIdSetup);
} }
function RecoverPasswordComponent_c8y_form_group_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group", 10);
    ɵngcc0.ɵɵelementStart(1, "label", 4);
    ɵngcc0.ɵɵtext(2, "Tenant ID");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "input", 11, 12);
    ɵngcc0.ɵɵlistener("ngModelChange", function RecoverPasswordComponent_c8y_form_group_4_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.model.tenantId = $event; });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 2, "Tenant ID"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.model.tenantId);
} }
function TotpAuthComponent_c8y_totp_setup_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-totp-setup");
} }
function PropertiesListComponent_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 5);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r0.icon);
} }
function PropertiesListComponent_li_6_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const prop_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(prop_r2.value);
} }
function PropertiesListComponent_li_6_a_6_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 13);
    ɵngcc0.ɵɵlistener("click", function PropertiesListComponent_li_6_a_6_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const prop_r2 = ɵngcc0.ɵɵnextContext().$implicit; return prop_r2.action($event, prop_r2); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const prop_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(prop_r2.value);
} }
const _c55 = function (a0) { return { pointer: a0 }; };
function PropertiesListComponent_li_6_span_7_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵlistener("click", function PropertiesListComponent_li_6_span_7_span_1_Template_span_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r16); const propTag_r13 = restoredCtx.$implicit; const prop_r2 = ɵngcc0.ɵɵnextContext(2).$implicit; return prop_r2.action && prop_r2.action($event, propTag_r13); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propTag_r13 = ctx.$implicit;
    const prop_r2 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c55, prop_r2.action));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(propTag_r13);
} }
function PropertiesListComponent_li_6_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, PropertiesListComponent_li_6_span_7_span_1_Template, 2, 4, "span", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const prop_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", prop_r2.value);
} }
const _c56 = function (a0, a1) { return { "separator-top-bottom": a0, "separator-bottom": a1 }; };
const _c57 = function (a0, a1, a2, a3, a4) { return { "m-l-16": a0, legend: a1, "form-block": a2, "m-b-0": a3, "m-t-4": a4 }; };
function PropertiesListComponent_li_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 6);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 8);
    ɵngcc0.ɵɵtemplate(5, PropertiesListComponent_li_6_span_5_Template, 2, 1, "span", 9);
    ɵngcc0.ɵɵtemplate(6, PropertiesListComponent_li_6_a_6_Template, 2, 1, "a", 10);
    ɵngcc0.ɵɵtemplate(7, PropertiesListComponent_li_6_span_7_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const prop_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(9, _c56, i_r3 === 0, i_r3 > 0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction5(12, _c57, ctx_r1.hasGroup(prop_r2), prop_r2.type === "group", prop_r2.type === "group", prop_r2.type === "group", prop_r2.type === "group"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, prop_r2.label), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngSwitch", prop_r2.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "string");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "link");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "array");
} }
const _c58 = function (a0) { return { "active": a0 }; };
function C8yStepper_ul_0_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "c8y-stepper-progress", 4);
    ɵngcc0.ɵɵlistener("onStepClicked", function C8yStepper_ul_0_li_1_Template_c8y_stepper_progress_onStepClicked_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.setIndex($event); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 9, step_r2.label));
    ɵngcc0.ɵɵproperty("iconOverrides", ctx_r1._iconOverrides)("state", ctx_r1.getIndicatorType(i_r3, step_r2.state))("index", i_r3)("selected", ctx_r1.selectedIndex === i_r3)("disabled", ctx_r1.disableProgressButtons)("ngClass", ɵngcc0.ɵɵpureFunction1(15, _c58, ctx_r1.selectedIndex === i_r3));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 11, step_r2.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 13, step_r2.label), " ");
} }
function C8yStepper_ul_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 2);
    ɵngcc0.ɵɵtemplate(1, C8yStepper_ul_0_li_1_Template, 7, 17, "li", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.customClasses);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.steps);
} }
function C8yStepperProgress_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 3);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.iconOverrides[ctx_r0.state]);
} }
function C8yStepperProgress_ng_container_2_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelement(1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "edit");
} }
function C8yStepperProgress_ng_container_2_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelement(1, "span", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "check");
} }
function C8yStepperProgress_ng_container_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.index + 1, " ");
} }
function C8yStepperProgress_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 4);
    ɵngcc0.ɵɵtemplate(1, C8yStepperProgress_ng_container_2_span_1_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵtemplate(2, C8yStepperProgress_ng_container_2_span_2_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵtemplate(3, C8yStepperProgress_ng_container_2_span_3_Template, 2, 1, "span", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r1.state);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "edit");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "done");
} }
const _c59 = function (a0, a1, a2, a3) { return { active: a0, "step-done": a1, "step-error": a2, "step-warning": a3 }; };
function C8yStepperButtons_button_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r4.labels == null ? null : ctx_r4.labels.cancel));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r4.labels == null ? null : ctx_r4.labels.cancel));
} }
function C8yStepperButtons_button_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Cancel"));
} }
function C8yStepperButtons_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function C8yStepperButtons_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.cancel(); });
    ɵngcc0.ɵɵtemplate(1, C8yStepperButtons_button_1_span_1_Template, 4, 6, "span", 6);
    ɵngcc0.ɵɵtemplate(2, C8yStepperButtons_button_1_ng_template_2_Template, 4, 6, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r5 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.labels == null ? null : ctx_r0.labels.cancel)("ngIfElse", _r5);
} }
function C8yStepperButtons_button_2_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r9.labels == null ? null : ctx_r9.labels.back));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r9.labels == null ? null : ctx_r9.labels.back));
} }
function C8yStepperButtons_button_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Back"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Back"));
} }
function C8yStepperButtons_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function C8yStepperButtons_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.back(); });
    ɵngcc0.ɵɵtemplate(1, C8yStepperButtons_button_2_span_1_Template, 4, 6, "span", 6);
    ɵngcc0.ɵɵtemplate(2, C8yStepperButtons_button_2_ng_template_2_Template, 4, 6, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r10 = ɵngcc0.ɵɵreference(3);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.pending);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.labels == null ? null : ctx_r1.labels.back)("ngIfElse", _r10);
} }
function C8yStepperButtons_button_3_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r14.labels == null ? null : ctx_r14.labels.custom));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r14.labels == null ? null : ctx_r14.labels.custom));
} }
function C8yStepperButtons_button_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Complete"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Complete"));
} }
const _c60 = function (a0, a1, a2) { return { "btn-default": a0, "btn-primary": a1, "btn-pending": a2 }; };
function C8yStepperButtons_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function C8yStepperButtons_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.custom(); });
    ɵngcc0.ɵɵtemplate(1, C8yStepperButtons_button_3_span_1_Template, 4, 6, "span", 6);
    ɵngcc0.ɵɵtemplate(2, C8yStepperButtons_button_3_ng_template_2_Template, 4, 6, "ng-template", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r15 = ɵngcc0.ɵɵreference(3);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(4, _c60, ctx_r2.showBtns.next, !ctx_r2.showBtns.next, ctx_r2.pending))("disabled", ctx_r2.pending || ctx_r2.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.labels == null ? null : ctx_r2.labels.custom)("ngIfElse", _r15);
} }
function C8yStepperButtons_button_4_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r19.labels == null ? null : ctx_r19.labels.next));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r19.labels == null ? null : ctx_r19.labels.next));
} }
function C8yStepperButtons_button_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Next"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Next"));
} }
function C8yStepperButtons_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function C8yStepperButtons_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.next(); });
    ɵngcc0.ɵɵtemplate(1, C8yStepperButtons_button_4_span_1_Template, 4, 6, "span", 6);
    ɵngcc0.ɵɵtemplate(2, C8yStepperButtons_button_4_ng_template_2_Template, 4, 6, "ng-template", null, 14, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r20 = ɵngcc0.ɵɵreference(3);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c4, ctx_r3.pending))("disabled", ctx_r3.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.labels == null ? null : ctx_r3.labels.next)("ngIfElse", _r20);
} }
function StepperOutletComponent_cdk_step_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function StepperOutletComponent_cdk_step_1_c8y_stepper_buttons_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-stepper-buttons");
} }
function StepperOutletComponent_cdk_step_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 8);
} }
function StepperOutletComponent_cdk_step_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 9);
} }
function StepperOutletComponent_cdk_step_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 10);
} }
function StepperOutletComponent_cdk_step_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "cdk-step", 2);
    ɵngcc0.ɵɵtemplate(1, StepperOutletComponent_cdk_step_1_ng_container_1_Template, 1, 0, "ng-container", 3);
    ɵngcc0.ɵɵtemplate(2, StepperOutletComponent_cdk_step_1_c8y_stepper_buttons_2_Template, 1, 0, "c8y-stepper-buttons", 4);
    ɵngcc0.ɵɵtemplate(3, StepperOutletComponent_cdk_step_1_ng_template_3_Template, 1, 0, "ng-template", 5);
    ɵngcc0.ɵɵtemplate(4, StepperOutletComponent_cdk_step_1_ng_template_4_Template, 1, 0, "ng-template", 6);
    ɵngcc0.ɵɵtemplate(5, StepperOutletComponent_cdk_step_1_ng_template_5_Template, 1, 0, "ng-template", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("label", step_r1.label)("state", step_r1.state)("completed", step_r1.completed)("optional", !step_r1.required);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngComponentOutlet", step_r1.component);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showDefaultButtons);
} }
const _c61 = function () { return ["p-t-32", "p-b-32", "m-l-48", "m-r-48"]; };
const _c62 = function () { return { edit: true, done: false }; };
function SetupComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelement(1, "c8y-stepper-outlet", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("showDefaultButtons", false)("steps", ctx_r0.steps);
} }
function SetupComponent_div_5_p_39_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 46);
    ɵngcc0.ɵɵtext(1, " This application (or any plugin that you added recently) has pre-requirements that needs to be configured first. This wizard will guide you through the steps that are necessary to get your application up and running. ");
    ɵngcc0.ɵɵelementEnd();
} }
function SetupComponent_div_5_div_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 47);
    ɵngcc0.ɵɵelement(1, "c8y-properties-list", 48);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("properties", ctx_r3.properties)("data", ctx_r3.options)("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Application properties"));
} }
function SetupComponent_div_5_div_41_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 49);
    ɵngcc0.ɵɵelementStart(1, "strong", 50);
    ɵngcc0.ɵɵtext(2, "No permission");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 50);
    ɵngcc0.ɵɵtext(4, " You don't have sufficient rights to setup this application. Please contact an application administrator to setup the required steps. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SetupComponent_div_5_div_42_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 49);
    ɵngcc0.ɵɵelementStart(1, "strong", 50);
    ɵngcc0.ɵɵtext(2, "Not the owner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 50);
    ɵngcc0.ɵɵtext(4, " The current application is not owned by this tenant. Please clone the application before running the setup. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SetupComponent_div_5_button_44_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 51);
    ɵngcc0.ɵɵlistener("click", function SetupComponent_div_5_button_44_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.skip(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, " Skip ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 1, "You can skip the setup now. It will be shown again as soon as you restart the application."));
} }
const _c63 = function (a0) { return { appName: a0 }; };
function SetupComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "div", 6);
    ɵngcc0.ɵɵelementStart(3, "div", 7);
    ɵngcc0.ɵɵelementStart(4, "div", 8);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(5, "svg", 9);
    ɵngcc0.ɵɵelementStart(6, "g", 10);
    ɵngcc0.ɵɵelementStart(7, "g", 11);
    ɵngcc0.ɵɵelementStart(8, "g", 12);
    ɵngcc0.ɵɵelement(9, "path", 13);
    ɵngcc0.ɵɵelement(10, "ellipse", 14);
    ɵngcc0.ɵɵelement(11, "ellipse", 15);
    ɵngcc0.ɵɵelementStart(12, "g", 16);
    ɵngcc0.ɵɵelement(13, "path", 17);
    ɵngcc0.ɵɵelement(14, "path", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "ellipse", 19);
    ɵngcc0.ɵɵelement(16, "ellipse", 20);
    ɵngcc0.ɵɵelement(17, "ellipse", 21);
    ɵngcc0.ɵɵelement(18, "ellipse", 22);
    ɵngcc0.ɵɵelement(19, "ellipse", 23);
    ɵngcc0.ɵɵelement(20, "ellipse", 24);
    ɵngcc0.ɵɵelementStart(21, "g", 25);
    ɵngcc0.ɵɵelement(22, "path", 26);
    ɵngcc0.ɵɵelement(23, "path", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(24, "rect", 28);
    ɵngcc0.ɵɵelement(25, "polygon", 29);
    ɵngcc0.ɵɵelement(26, "polygon", 30);
    ɵngcc0.ɵɵelement(27, "polygon", 31);
    ɵngcc0.ɵɵelement(28, "polygon", 32);
    ɵngcc0.ɵɵelement(29, "path", 33);
    ɵngcc0.ɵɵelement(30, "path", 34);
    ɵngcc0.ɵɵelement(31, "line", 35);
    ɵngcc0.ɵɵelement(32, "line", 36);
    ɵngcc0.ɵɵelement(33, "line", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(34, "polygon", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(35, "h1", 39);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(36, "async");
    ɵngcc0.ɵɵpipe(37, "humanizeAppName");
    ɵngcc0.ɵɵtext(38, " Welcome to {{ appName }} ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(39, SetupComponent_div_5_p_39_Template, 2, 0, "p", 40);
    ɵngcc0.ɵɵtemplate(40, SetupComponent_div_5_div_40_Template, 3, 5, "div", 41);
    ɵngcc0.ɵɵtemplate(41, SetupComponent_div_5_div_41_Template, 5, 0, "div", 42);
    ɵngcc0.ɵɵtemplate(42, SetupComponent_div_5_div_42_Template, 5, 0, "div", 42);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(43, "div", 43);
    ɵngcc0.ɵɵtemplate(44, SetupComponent_div_5_button_44_Template, 3, 3, "button", 44);
    ɵngcc0.ɵɵelementStart(45, "button", 45);
    ɵngcc0.ɵɵlistener("click", function SetupComponent_div_5_Template_button_click_45_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.start(); });
    ɵngcc0.ɵɵpipe(46, "translate");
    ɵngcc0.ɵɵtext(47, " Start ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(35);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(14, _c63, ɵngcc0.ɵɵpipeBind1(36, 8, ɵngcc0.ɵɵpipeBind1(37, 10, ctx_r1.options.name))));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.hasRole);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.properties.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.hasRole);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isOwner);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.canSkip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.hasRole || !ctx_r1.isOwner)("title", ɵngcc0.ɵɵpipeBind1(46, 12, "Start the setup wizard."));
} }
function SetupCompletedComponent_c8y_operation_result_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 19);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, "Setup completed"));
    ɵngcc0.ɵɵproperty("size", 120)("vertical", true);
} }
function SetupCompletedComponent_c8y_operation_result_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, "Setup completed with warnings"));
    ɵngcc0.ɵɵproperty("size", 120)("vertical", true);
} }
function SetupCompletedComponent_c8y_operation_result_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 21);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, "Setup not completed"));
    ɵngcc0.ɵɵproperty("size", 120)("vertical", true);
} }
const _c64 = function (a0, a1, a2) { return { "dot-success": a0, "dot-error": a1, "dot-warning": a2 }; };
function SetupCompletedComponent_li_16_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 28);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(5, _c64, step_r8.completed, !step_r8.completed && step_r8.required, !step_r8.completed && !step_r8.required));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", step_r8.index + 1, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", step_r8.label || ɵngcc0.ɵɵpipeBind1(4, 3, ctx_r9.STEP_LABEL) + " ", " ");
} }
function SetupCompletedComponent_li_16_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 29);
    ɵngcc0.ɵɵtext(2, "Step");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1("", " " + (step_r8.index + 1), " ");
} }
function SetupCompletedComponent_li_16_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 30);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "success")("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Completed"));
} }
function SetupCompletedComponent_li_16_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 31);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "error")("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Not completed and required. Please go to the step and fulfil the setup."));
} }
function SetupCompletedComponent_li_16_i_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 32);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("c8yIcon", "warning")("title", ɵngcc0.ɵɵpipeBind1(1, 2, "This step was not completed but it is also not required."));
} }
function SetupCompletedComponent_li_16_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 22);
    ɵngcc0.ɵɵlistener("click", function SetupCompletedComponent_li_16_Template_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r17); const step_r8 = restoredCtx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.gotoStep(step_r8.index); });
    ɵngcc0.ɵɵtemplate(1, SetupCompletedComponent_li_16_span_1_Template, 5, 9, "span", 23);
    ɵngcc0.ɵɵtemplate(2, SetupCompletedComponent_li_16_span_2_Template, 4, 1, "span", 23);
    ɵngcc0.ɵɵelementStart(3, "span", 24);
    ɵngcc0.ɵɵtemplate(4, SetupCompletedComponent_li_16_i_4_Template, 2, 4, "i", 25);
    ɵngcc0.ɵɵtemplate(5, SetupCompletedComponent_li_16_i_5_Template, 2, 4, "i", 26);
    ɵngcc0.ɵɵtemplate(6, SetupCompletedComponent_li_16_i_6_Template, 2, 4, "i", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r8 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", step_r8.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !step_r8.label);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", step_r8.completed);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !step_r8.completed && step_r8.required);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !step_r8.completed && !step_r8.required);
} }
function SetupCompletedComponent_button_18_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 33);
    ɵngcc0.ɵɵlistener("click", function SetupCompletedComponent_button_18_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.back(); });
    ɵngcc0.ɵɵtext(1, " Back ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.setup.currentSetupState === ctx_r4.setup.setupState.FINALIZING || ctx_r4.setup.currentSetupState === ctx_r4.setup.setupState.RELOADING);
} }
function SetupCompletedComponent_span_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 29);
    ɵngcc0.ɵɵtext(1, "Save and reload");
    ɵngcc0.ɵɵelementEnd();
} }
function SetupCompletedComponent_span_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 29);
    ɵngcc0.ɵɵtext(1, "Getting things ready\u2026");
    ɵngcc0.ɵɵelementEnd();
} }
function SetupCompletedComponent_span_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 29);
    ɵngcc0.ɵɵtext(1, "Done. Reloading the application.");
    ɵngcc0.ɵɵelementEnd();
} }
const _c65 = ["tpl"];
function TabComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
const _c66 = ["container"];
const _c67 = ["left"];
const _c68 = ["right"];
const _c69 = ["tabsContainer"];
function TabsOutletComponent_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12, 13);
    ɵngcc0.ɵɵlistener("click", function TabsOutletComponent_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.scroll("left"); });
    ɵngcc0.ɵɵelement(2, "i", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "chevron-left");
} }
function TabsOutletComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15, 16);
    ɵngcc0.ɵɵlistener("click", function TabsOutletComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.scroll("right"); });
    ɵngcc0.ɵɵelement(2, "i", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "chevron-right");
} }
function TabsOutletComponent_ng_container_6_li_1_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 14);
} if (rf & 2) {
    const tab_r14 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("c8yIcon", tab_r14 == null ? null : tab_r14.icon);
} }
function TabsOutletComponent_ng_container_6_li_1_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 25);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r14 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, tab_r14 == null ? null : tab_r14.label));
} }
function TabsOutletComponent_ng_container_6_li_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function TabsOutletComponent_ng_container_6_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 19);
    ɵngcc0.ɵɵelementStart(1, "a", 20, 21);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, TabsOutletComponent_ng_container_6_li_1_i_4_Template, 1, 1, "i", 22);
    ɵngcc0.ɵɵtemplate(5, TabsOutletComponent_ng_container_6_li_1_span_5_Template, 3, 3, "span", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, TabsOutletComponent_ng_container_6_li_1_ng_container_6_Template, 1, 0, "ng-container", 24);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r17 = ɵngcc0.ɵɵreference(2);
    const tab_r14 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c54, _r17 == null ? null : _r17.isActive));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 6, tab_r14 == null ? null : tab_r14.label));
    ɵngcc0.ɵɵproperty("routerLink", tab_r14.path);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !tab_r14.template && (tab_r14 == null ? null : tab_r14.icon));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !tab_r14.template && !tab_r14.component);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", tab_r14.template);
} }
function TabsOutletComponent_ng_container_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function TabsOutletComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, TabsOutletComponent_ng_container_6_li_1_Template, 7, 10, "li", 17);
    ɵngcc0.ɵɵtemplate(2, TabsOutletComponent_ng_container_6_ng_container_2_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r14 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !tab_r14.component);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngComponentOutlet", tab_r14.component);
} }
function TabsOutletComponent_ng_container_12_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r24 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r25 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", tab_r24.path)("selected", ctx_r25.isActive(tab_r24));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, tab_r24 == null ? null : tab_r24.label), " ");
} }
function TabsOutletComponent_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, TabsOutletComponent_ng_container_12_option_1_Template, 3, 5, "option", 26);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r24 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !tab_r24.component);
} }
function TabsOutletComponent_ng_container_13_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function TabsOutletComponent_ng_container_13_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, TabsOutletComponent_ng_container_13_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r27 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngComponentOutlet", tab_r27.component);
} }
function TabsOutletComponent_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, TabsOutletComponent_ng_container_13_ng_container_1_Template, 2, 1, "ng-container", 28);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r27 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", tab_r27.component);
} }
const _c70 = ["modalRef"];
function CookieBannerPreferencesModalComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵelementStart(3, "label", 6);
    ɵngcc0.ɵɵelementStart(4, "input", 7);
    ɵngcc0.ɵɵlistener("ngModelChange", function CookieBannerPreferencesModalComponent_div_2_Template_input_ngModelChange_4_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const item_r2 = restoredCtx.$implicit; return item_r2.value = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 8);
    ɵngcc0.ɵɵelementStart(7, "h4", 9);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "humanize");
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "p");
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("name", item_r2.name);
    ɵngcc0.ɵɵproperty("ngModel", item_r2.value)("disabled", item_r2.isReadonly);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 5, ɵngcc0.ɵɵpipeBind1(10, 7, item_r2.name)), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 9, ctx_r1.getCookieDescription(item_r2.name)), " ");
} }
function CookieBannerComponent_div_2_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "h3");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "div", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r1.settings.cookieBannerTitle));
} }
function CookieBannerComponent_div_2_a_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("href", ctx_r2.settings.policyUrl, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "See also our Privacy Notice."), " ");
} }
function CookieBannerComponent_div_2_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "div", 16);
    ɵngcc0.ɵɵelementStart(2, "button", 12);
    ɵngcc0.ɵɵlistener("click", function CookieBannerComponent_div_2_div_14_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.rejectCookies(); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.shouldDisable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "Reject all"), " ");
} }
function CookieBannerComponent_div_2_div_15_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "div", 16);
    ɵngcc0.ɵɵelementStart(2, "button", 17);
    ɵngcc0.ɵɵlistener("click", function CookieBannerComponent_div_2_div_15_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onConfigurePreferences(); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.shouldDisable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "Configure preferences"), " ");
} }
function CookieBannerComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, CookieBannerComponent_div_2_div_1_Template, 5, 3, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵtemplate(6, CookieBannerComponent_div_2_a_6_Template, 3, 4, "a", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 8);
    ɵngcc0.ɵɵelementStart(8, "div", 9);
    ɵngcc0.ɵɵelementStart(9, "div", 10);
    ɵngcc0.ɵɵelement(10, "div", 11);
    ɵngcc0.ɵɵelementStart(11, "button", 12);
    ɵngcc0.ɵɵlistener("click", function CookieBannerComponent_div_2_Template_button_click_11_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.acceptCookies(); });
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, CookieBannerComponent_div_2_div_14_Template, 5, 4, "div", 13);
    ɵngcc0.ɵɵtemplate(15, CookieBannerComponent_div_2_div_15_Template, 5, 4, "div", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.settings.cookieBannerTitle);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 7, ctx_r0.settings.cookieBannerText), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.settings.policyUrl);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.shouldDisable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 9, "Agree and proceed"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !!ctx_r0.cookiePreferences);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !!ctx_r0.cookiePreferences);
} }
const _c71 = ["area"];
const _c72 = ["zone"];
const _c73 = ["picker"];
function DropAreaComponent_div_0_div_3_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelement(1, "div", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("width", ctx_r7.progress + "%");
} }
function DropAreaComponent_div_0_div_3_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 16);
} }
function DropAreaComponent_div_0_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵtemplate(1, DropAreaComponent_div_0_div_3_div_1_Template, 2, 2, "div", 11);
    ɵngcc0.ɵɵtemplate(2, DropAreaComponent_div_0_div_3_div_2_Template, 1, 0, "div", 12);
    ɵngcc0.ɵɵelementStart(3, "p", 13);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.progress !== -1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.progress === -1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 3, ctx_r5.loadingMessage), " ");
} }
function DropAreaComponent_div_0_div_4_p_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 21);
    ɵngcc0.ɵɵtext(1, "or click to browse your file system.");
    ɵngcc0.ɵɵelementEnd();
} }
function DropAreaComponent_div_0_div_4_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p");
    ɵngcc0.ɵɵelementStart(1, "b");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵtemplate(5, DropAreaComponent_div_0_div_4_p_2_span_5_Template, 2, 0, "span", 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 2, ctx_r9.message));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.alwaysShow && ctx_r9.clickToOpen);
} }
function DropAreaComponent_div_0_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelementStart(1, "p", 23);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r10.errorMessage), " ");
} }
function DropAreaComponent_div_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵtemplate(2, DropAreaComponent_div_0_div_4_p_2_Template, 6, 4, "p", 18);
    ɵngcc0.ɵɵtemplate(3, DropAreaComponent_div_0_div_4_div_3_Template, 4, 3, "div", 19);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("dlt-c8y-icon-", ctx_r6.icon, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r6.errors);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.errors);
} }
const _c74 = function (a0) { return { "has-errors": a0 }; };
const _c75 = function (a0) { return { "drag-over": a0 }; };
function DropAreaComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5, 6);
    ɵngcc0.ɵɵlistener("dragleave", function DropAreaComponent_div_0_Template_div_dragleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.stopDragging(); })("drop", function DropAreaComponent_div_0_Template_div_drop_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onDrop($event); })("dragover", function DropAreaComponent_div_0_Template_div_dragover_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.onOver(); })("click", function DropAreaComponent_div_0_Template_div_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.showPicker($event); });
    ɵngcc0.ɵɵelementStart(2, "div", 7);
    ɵngcc0.ɵɵtemplate(3, DropAreaComponent_div_0_div_3_Template, 6, 5, "div", 8);
    ɵngcc0.ɵɵtemplate(4, DropAreaComponent_div_0_div_4_Template, 4, 5, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("pointer-events", ctx_r0.loading ? "none" : "auto")("display", ctx_r0.isOver || ctx_r0.alwaysShow || ctx_r0.loading ? "block" : "none");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c74, ctx_r0.errors));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c75, ctx_r0.isOver));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.loading);
} }
function DropAreaComponent_div_1_div_1_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 31);
    ɵngcc0.ɵɵelement(1, "div", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("width", ctx_r19.progress + "%");
} }
function DropAreaComponent_div_1_div_1_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelement(1, "div", 33);
    ɵngcc0.ɵɵelement(2, "div", 34);
    ɵngcc0.ɵɵelement(3, "div", 35);
    ɵngcc0.ɵɵelement(4, "div", 36);
    ɵngcc0.ɵɵelement(5, "div", 37);
    ɵngcc0.ɵɵelementEnd();
} }
function DropAreaComponent_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 27);
    ɵngcc0.ɵɵelementStart(1, "p", 28);
    ɵngcc0.ɵɵelementStart(2, "strong");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, DropAreaComponent_div_1_div_1_div_5_Template, 2, 2, "div", 29);
    ɵngcc0.ɵɵtemplate(6, DropAreaComponent_div_1_div_1_div_6_Template, 6, 0, "div", 30);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 3, ctx_r17.loadingMessage), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r17.progress !== -1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r17.progress === -1);
} }
function DropAreaComponent_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 38);
    ɵngcc0.ɵɵelementStart(1, "div", 39);
    ɵngcc0.ɵɵelement(2, "i", 40);
    ɵngcc0.ɵɵelementStart(3, "span", 41);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 42);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementStart(7, "i", 43);
    ɵngcc0.ɵɵlistener("click", function DropAreaComponent_div_1_div_2_Template_i_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onDelete(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r18.filesNameString);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r18.filesNameString, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 3, "Remove"));
} }
function DropAreaComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵtemplate(1, DropAreaComponent_div_1_div_1_Template, 7, 5, "div", 25);
    ɵngcc0.ɵɵtemplate(2, DropAreaComponent_div_1_div_2_Template, 8, 5, "div", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("display", ctx_r1.isOver || ctx_r1.alwaysShow || ctx_r1.loading ? "block" : "none");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.loading);
} }
function DropAreaComponent_input_2_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 44, 45);
    ɵngcc0.ɵɵlistener("change", function DropAreaComponent_input_2_Template_input_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onPick($event); })("click", function DropAreaComponent_input_2_Template_input_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const _r23 = ɵngcc0.ɵɵreference(1); return _r23.focus(); })("blur", function DropAreaComponent_input_2_Template_input_blur_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.onTouched(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("accept", ctx_r2.acceptedExts)("multiple", ctx_r2.maxAllowedFiles > 1);
} }
function FilePickerComponent_button_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r2.fileUrlPopover));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
} }
function DatePickerComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "date");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 2, "From`date`"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, ctx_r1.dateFrom), " ");
} }
function DatePickerComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "date");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 2, "To`date`"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, ctx_r2.dateTo), " ");
} }
function DatePickerComponent_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Filter by date"), " ");
} }
const _c76 = function () { return { customTodayClass: "today", returnFocusToInput: true }; };
function DatePickerComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelementStart(1, "form", 9);
    ɵngcc0.ɵɵelementStart(2, "span", 10);
    ɵngcc0.ɵɵtext(3, "Date from");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-form-group", 11);
    ɵngcc0.ɵɵelementStart(5, "input", 12);
    ɵngcc0.ɵɵlistener("bsValueChange", function DatePickerComponent_div_9_Template_input_bsValueChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.dateFrom = $event; });
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "span", 10);
    ɵngcc0.ɵɵtext(8, "Date to");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "c8y-form-group", 13);
    ɵngcc0.ɵɵelementStart(10, "input", 14);
    ɵngcc0.ɵɵlistener("bsValueChange", function DatePickerComponent_div_9_Template_input_bsValueChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.dateTo = $event; });
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 15);
    ɵngcc0.ɵɵelementStart(13, "button", 16);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_div_9_Template_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); const _r0 = ɵngcc0.ɵɵreference(1); ctx_r8.clearFilter(); return _r0.isOpen = !_r0.isOpen; });
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "button", 17);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_div_9_Template_button_click_17_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); const _r0 = ɵngcc0.ɵɵreference(1); ctx_r9.filter(); return _r0.isOpen = !_r0.isOpen; });
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r4.fgDatePicker);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(6, 12, "Date from"));
    ɵngcc0.ɵɵproperty("maxDate", ctx_r4.dateTo)("bsConfig", ɵngcc0.ɵɵpureFunction0(24, _c76));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(11, 14, "Date to"));
    ɵngcc0.ɵɵproperty("minDate", ctx_r4.dateFrom)("bsConfig", ɵngcc0.ɵɵpureFunction0(25, _c76));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(14, 16, "Clear selection"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 18, "Clear`selection`"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(18, 20, "Apply selection"));
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.fgDatePicker.get("dateFrom").value && !ctx_r4.fgDatePicker.get("dateTo").value);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 22, "Apply`selection`"), " ");
} }
const _c77 = ["c8y-guide-docs", ""];
function GuideDocsComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ArrayTypeComponent_div_1_button_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵelement(1, "i", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("popover", ctx_r5.to.description)("outsideClick", true);
} }
function ArrayTypeComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "humanize");
    ɵngcc0.ɵɵtemplate(3, ArrayTypeComponent_div_1_button_3_Template, 2, 2, "button", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", ctx_r0.id + "-fieldset");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.to.label), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.description);
} }
function ArrayTypeComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "formly-validation-message", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", ctx_r1.field);
} }
const _c78 = function (a0) { return { "m-t-24": a0 }; };
function ArrayTypeComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "formly-field", 14);
    ɵngcc0.ɵɵelementStart(2, "div", 16);
    ɵngcc0.ɵɵelementStart(3, "button", 17);
    ɵngcc0.ɵɵlistener("click", function ArrayTypeComponent_div_3_Template_button_click_3_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const i_r7 = restoredCtx.index; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.remove(i_r7); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "i", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ifield_r6 = ctx.$implicit;
    const i_r7 = ctx.index;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", ifield_r6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c78, i_r7 === 0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 4, "Delete"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.to.disabled || ctx_r2.field.fieldGroup.length === 1);
} }
function ArrayTypeComponent_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(1, " Add {{ label }} ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("translateParams", ctx_r3.field == null ? null : ctx_r3.field.fieldArray == null ? null : ctx_r3.field.fieldArray.templateOptions);
} }
function ArrayTypeComponent_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r4.field.templateOptions == null ? null : ctx_r4.field.templateOptions.addText), " ");
} }
function FieldCheckbox_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "em", 3);
    ɵngcc0.ɵɵtext(2, "(required)");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FieldCheckbox_button_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵelement(1, "i", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("popover", ctx_r1.to.description);
} }
function FieldDate_label_1_button_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵelement(1, "i", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("popover", ctx_r1.to.description);
} }
function FieldDate_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "humanize");
    ɵngcc0.ɵɵtemplate(3, FieldDate_label_1_button_3_Template, 2, 1, "button", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", ctx_r0.id + "-fieldset");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.to.label), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.description);
} }
const _c79 = function () { return { customTodayClass: "today", dateInputFormat: "YYYY-MM-DD" }; };
const _c80 = ["dropArea"];
function FieldFile_label_1_button_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵelement(1, "i", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("popover", ctx_r2.to.description)("outsideClick", true);
} }
function FieldFile_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "humanize");
    ɵngcc0.ɵɵtemplate(3, FieldFile_label_1_button_3_Template, 2, 2, "button", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", ctx_r0.id + "-fieldset");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.to.label), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.description);
} }
function WrapperFormField_label_1_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 7);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r5.to.tooltip));
} }
function WrapperFormField_label_1_button_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("popover", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r6.to.description));
} }
function WrapperFormField_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "humanize");
    ɵngcc0.ɵɵtemplate(3, WrapperFormField_label_1_i_3_Template, 2, 3, "i", 5);
    ɵngcc0.ɵɵtemplate(4, WrapperFormField_label_1_button_4_Template, 3, 3, "button", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("for", ctx_r0.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r0.to.label), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.description && ctx_r0.showDescriptionAsPopup);
} }
function WrapperFormField_ng_template_2_Template(rf, ctx) { }
function WrapperFormField_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "formly-validation-message", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", ctx_r3.field);
} }
function WrapperFormField_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r4.to.description), " ");
} }
function FieldInput_input_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-invalid", ctx_r0.showError);
    ɵngcc0.ɵɵproperty("type", ctx_r0.type)("formControl", ctx_r0.formControl)("formlyAttributes", ctx_r0.field)("required", ctx_r0.to.required);
    ɵngcc0.ɵɵattribute("autocomplete", ctx_r0.to.autocomplete ? ctx_r0.to.autocomplete : null);
} }
function FieldInput_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-invalid", ctx_r2.showError);
    ɵngcc0.ɵɵproperty("formControl", ctx_r2.formControl)("formlyAttributes", ctx_r2.field)("required", ctx_r2.to.required);
    ɵngcc0.ɵɵattribute("autocomplete", ctx_r2.to.autocomplete ? ctx_r2.to.autocomplete : null);
} }
function ObjectTypeComponent_p_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "humanize");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", ctx_r0.id + "-fieldset");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r0.to.label), " ");
} }
function ObjectTypeComponent_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.to.description, " ");
} }
function ObjectTypeComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelement(1, "formly-validation-message", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", ctx_r2.field);
} }
function ObjectTypeComponent_formly_field_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "formly-field", 8);
} if (rf & 2) {
    const f_r4 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("field", f_r4);
} }
function FieldRadio_label_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 1);
    ɵngcc0.ɵɵelement(1, "input", 2);
    ɵngcc0.ɵɵelement(2, "span");
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "humanize");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", option_r1.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("name", ctx_r0.field.name || ctx_r0.id)("value", option_r1.value)("formControl", ctx_r0.formControl)("formlyAttributes", ctx_r0.field);
    ɵngcc0.ɵɵattribute("value", option_r1.value)("disabled", option_r1.disabled || ctx_r0.formControl.disabled ? true : null);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 9, option_r1.label));
} }
function TypeaheadTypeComponent_c8y_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 4);
    ɵngcc0.ɵɵlistener("click", function TypeaheadTypeComponent_c8y_li_2_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const opt_r5 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); ctx_r6.selectOption(opt_r5); return ctx_r6.setPipe(""); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const opt_r5 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", opt_r5[ctx_r0.labelProp])("pattern", ctx_r0.pattern);
} }
function TypeaheadTypeComponent_ng_template_3_c8y_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 7);
    ɵngcc0.ɵɵelementStart(1, "p");
    ɵngcc0.ɵɵelementStart(2, "strong", 8);
    ɵngcc0.ɵɵtext(3, "No match found.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function TypeaheadTypeComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TypeaheadTypeComponent_ng_template_3_c8y_li_0_Template, 4, 0, "c8y-li", 6);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.pattern.length > 0 && !ctx_r2.match);
} }
function TypeaheadTypeComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 9);
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementEnd();
} }
const _c81 = ["host"];
function DynamicComponentComponent_ng_template_0_Template(rf, ctx) { }
function DynamicComponentComponent_div_2_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1, "Show details");
    ɵngcc0.ɵɵelementEnd();
} }
function DynamicComponentComponent_div_2_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1, "Hide details");
    ɵngcc0.ɵɵelementEnd();
} }
function DynamicComponentComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "strong", 3);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 4);
    ɵngcc0.ɵɵelementStart(5, "button", 5);
    ɵngcc0.ɵɵlistener("click", function DynamicComponentComponent_div_2_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.expandErrorDetails = !ctx_r5.expandErrorDetails; });
    ɵngcc0.ɵɵelement(6, "i", 6);
    ɵngcc0.ɵɵtemplate(7, DynamicComponentComponent_div_2_span_7_Template, 2, 0, "span", 7);
    ɵngcc0.ɵɵtemplate(8, DynamicComponentComponent_div_2_span_8_Template, 2, 0, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 8);
    ɵngcc0.ɵɵelementStart(10, "pre");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(3, 7, "This widget cannot be rendered because the current application does not support the following component:"), " ", ctx_r2.componentId, ". ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.expandErrorDetails);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.expandErrorDetails);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("collapse", !ctx_r2.expandErrorDetails)("isAnimated", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("      ", ctx_r2.error, "\n    ");
} }
function DashboardChildActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function DashboardChildComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 9);
} }
function DashboardChildComponent_div_5_ul_5_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DashboardChildComponent_div_5_ul_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DashboardChildComponent_div_5_ul_5_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const action_r7 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", action_r7.template);
} }
function DashboardChildComponent_div_5_ul_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 15);
    ɵngcc0.ɵɵtemplate(1, DashboardChildComponent_div_5_ul_5_ng_container_1_Template, 2, 1, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r5.actions);
} }
function DashboardChildComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "div", 11);
    ɵngcc0.ɵɵelementStart(2, "a", 12);
    ɵngcc0.ɵɵlistener("click", function DashboardChildComponent_div_5_Template_a_click_2_listener() { return false; });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelement(4, "i", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, DashboardChildComponent_div_5_ul_5_Template, 2, 1, "ul", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 2, "Settings"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "cog");
} }
function DashboardChildComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵlistener("cdkDragStarted", function DashboardChildComponent_div_8_Template_div_cdkDragStarted_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.resizeStarted($event); })("cdkDragEnded", function DashboardChildComponent_div_8_Template_div_cdkDragEnded_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.reset($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("cdkDragDisabled", ctx_r2.isFrozen);
} }
function DashboardChildComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 19);
} }
function DashboardChildComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 9);
} }
const _c82 = [[["c8y-dashboard-child-title"]], "*"];
const _c83 = function (a0, a1) { return { width: a0, height: a1 }; };
const _c84 = function (a0, a1) { return { "drag-handle": a0, draggableCursor: a1 }; };
const _c85 = ["c8y-dashboard-child-title", "*"];
function WidgetsDashboardComponent_c8y_title_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-title");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.settings.title), "\n");
} }
function WidgetsDashboardComponent_c8y_breadcrumb_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-breadcrumb");
    ɵngcc0.ɵɵelement(1, "c8y-breadcrumb-item", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", ctx_r1.breadcrumb.icon)("label", ctx_r1.breadcrumb.label)("path", ctx_r1.breadcrumb.path);
} }
function WidgetsDashboardComponent_c8y_action_bar_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 8);
    ɵngcc0.ɵɵelementStart(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_action_bar_item_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onAddWidget.emit(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, "Add widget"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.settings.isFrozen || ctx_r2.settings.isDisabled);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 6, "Add widget"), " ");
} }
function WidgetsDashboardComponent_c8y_action_bar_item_3_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 8);
    ɵngcc0.ɵɵelementStart(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_action_bar_item_3_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onEditDashboard.emit(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, "Edit"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.settings.isFrozen || ctx_r3.settings.isDisabled);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 6, "Edit"), " ");
} }
function WidgetsDashboardComponent_c8y_action_bar_item_4_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 8);
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_action_bar_item_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.toggleFullscreen(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 13);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, "Full screen"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r4.fullScreen() ? "compress" : "expand");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 6, "Full screen"), " ");
} }
function WidgetsDashboardComponent_c8y_action_bar_item_5_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 14);
    ɵngcc0.ɵɵelementStart(1, "button", 15);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_action_bar_item_5_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.onFreeze.emit(ctx_r17.settings); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 5, "Lock/unlock this dashboard"));
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c54, ctx_r5.settings.isFrozen))("disabled", ctx_r5.settings.isDisabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r5.settings.isFrozen ? "lock" : "unlock");
} }
function WidgetsDashboardComponent_c8y_action_bar_item_6_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 16);
    ɵngcc0.ɵɵelementStart(1, "button", 17);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_action_bar_item_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.onCopyDashboard.emit(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 18);
    ɵngcc0.ɵɵelementStart(4, "span", 19);
    ɵngcc0.ɵɵtext(5, "Copy dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("placement", "more")("priority", -2000);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Copy dashboard"));
} }
function WidgetsDashboardComponent_c8y_action_bar_item_7_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 16);
    ɵngcc0.ɵɵelementStart(1, "button", 20);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_action_bar_item_7_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onDeleteDashboard.emit(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 21);
    ɵngcc0.ɵɵelementStart(4, "span", 19);
    ɵngcc0.ɵɵtext(5, "Delete dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "more")("priority", -3000);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, "Delete dashboard"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r7.settings.isFrozen || ctx_r7.settings.isDisabled);
} }
function WidgetsDashboardComponent_div_8_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "p", 24);
    ɵngcc0.ɵɵtext(2, "Add widgets to this dashboard.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div");
    ɵngcc0.ɵɵelementStart(4, "button", 25);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_div_8_div_4_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.onAddWidget.emit(); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵtext(6, " Add widget ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "p", 26);
    ɵngcc0.ɵɵelementStart(8, "small", 24);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(9, " Find out more in the ");
    ɵngcc0.ɵɵelementStart(10, "a", 27);
    ɵngcc0.ɵɵtext(11, " User guide`KEEP_ORIGINAL` ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(12, ". ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 2, "Add widget"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r23.settings.isFrozen || ctx_r23.settings.isDisabled);
} }
function WidgetsDashboardComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelement(1, "h1", 23);
    ɵngcc0.ɵɵelementStart(2, "h3", 24);
    ɵngcc0.ɵɵtext(3, "No widgets to display.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, WidgetsDashboardComponent_div_8_div_4_Template, 13, 4, "div", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r8.settings.isFrozen && ctx_r8.onAddWidget.observers.length);
} }
function WidgetsDashboardComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵelementStart(1, "div", 29);
    ɵngcc0.ɵɵelement(2, "div", 30);
    ɵngcc0.ɵɵelement(3, "div", 31);
    ɵngcc0.ɵɵelement(4, "div", 32);
    ɵngcc0.ɵɵelement(5, "div", 33);
    ɵngcc0.ɵɵelement(6, "div", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const widget_r28 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, widget_r28.title), " ");
} }
function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const widget_r28 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", widget_r28.title, " ");
} }
function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dashboard_child_action_5_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-dashboard-child-action");
    ɵngcc0.ɵɵelementStart(1, "button", 17);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dashboard_child_action_5_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r39); const widget_r28 = ɵngcc0.ɵɵnextContext().$implicit; const _r29 = ɵngcc0.ɵɵreference(1); ɵngcc0.ɵɵnextContext(); const _r26 = ɵngcc0.ɵɵreference(1); const ctx_r37 = ɵngcc0.ɵɵnextContext(); return ctx_r37.onEditWidget.emit({ widget: widget_r28, source: _r29, dashboard: _r26 }); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵelementStart(4, "span", 19);
    ɵngcc0.ɵɵtext(5, "Edit");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Edit widget"));
} }
function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dashboard_child_action_6_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-dashboard-child-action");
    ɵngcc0.ɵɵelementStart(1, "button", 17);
    ɵngcc0.ɵɵlistener("click", function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dashboard_child_action_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r42); const widget_r28 = ɵngcc0.ɵɵnextContext().$implicit; const _r29 = ɵngcc0.ɵɵreference(1); ɵngcc0.ɵɵnextContext(); const _r26 = ɵngcc0.ɵɵreference(1); const ctx_r40 = ɵngcc0.ɵɵnextContext(); return ctx_r40.onDeleteWidget.emit({ widget: widget_r28, source: _r29, dashboard: _r26 }); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 21);
    ɵngcc0.ɵɵelementStart(4, "span", 19);
    ɵngcc0.ɵɵtext(5, "Remove");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Remove widget"));
} }
const _c86 = function (a0, a1, a2) { return { child: a0, dashboard: a1, context: a2 }; };
function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dynamic_component_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-dynamic-component", 41);
} if (rf & 2) {
    const widget_r28 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r34 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("componentId", widget_r28.componentId || widget_r28.name)("config", widget_r28.templateUrl || widget_r28.widgetComponent ? ɵngcc0.ɵɵpureFunction3(2, _c86, widget_r28, ctx_r34.contextDashboard, ctx_r34.context) : widget_r28.config);
} }
function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-dashboard-child", 38, 39);
    ɵngcc0.ɵɵlistener("changeStart", function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_Template_c8y_dashboard_child_changeStart_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r45); const widget_r28 = restoredCtx.$implicit; const _r29 = ɵngcc0.ɵɵreference(1); ɵngcc0.ɵɵnextContext(); const _r26 = ɵngcc0.ɵɵreference(1); const ctx_r44 = ɵngcc0.ɵɵnextContext(); return ctx_r44.onChangeStart.emit({ widget: widget_r28, source: _r29, dashboard: _r26 }); })("changeEnd", function WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_Template_c8y_dashboard_child_changeEnd_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r45); const widget_r28 = restoredCtx.$implicit; const _r29 = ɵngcc0.ɵɵreference(1); ɵngcc0.ɵɵnextContext(); const _r26 = ɵngcc0.ɵɵreference(1); const ctx_r46 = ɵngcc0.ɵɵnextContext(); return ctx_r46.onChangeEnd.emit({ widget: widget_r28, source: _r29, dashboard: _r26 }); });
    ɵngcc0.ɵɵelementStart(2, "c8y-dashboard-child-title");
    ɵngcc0.ɵɵtemplate(3, WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_span_3_Template, 3, 3, "span", 0);
    ɵngcc0.ɵɵtemplate(4, WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_span_4_Template, 2, 1, "span", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dashboard_child_action_5_Template, 6, 3, "c8y-dashboard-child-action", 0);
    ɵngcc0.ɵɵtemplate(6, WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dashboard_child_action_6_Template, 6, 3, "c8y-dashboard-child-action", 0);
    ɵngcc0.ɵɵtemplate(7, WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_c8y_dynamic_component_7_Template, 1, 6, "c8y-dynamic-component", 40);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const widget_r28 = ctx.$implicit;
    const _r29 = ɵngcc0.ɵɵreference(1);
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(widget_r28.classes);
    ɵngcc0.ɵɵproperty("x", widget_r28._x)("y", widget_r28._y)("width", widget_r28._width || ctx_r27.settings.defaultWidth)("height", widget_r28._height || ctx_r27.settings.defaultHeight)("margin", ctx_r27.settings.widgetMargin)("isFrozen", ctx_r27.settings.isFrozen || ctx_r27.settings.isDisabled)("data", widget_r28)("useIntersection", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r27.settings.translateWidgetTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r27.settings.translateWidgetTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r27.onEditWidget.observers.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r27.onDeleteWidget.observers.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r29.intersected);
} }
function WidgetsDashboardComponent_c8y_dashboard_10_Template(rf, ctx) { if (rf & 1) {
    const _r48 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-dashboard", 35, 36);
    ɵngcc0.ɵɵlistener("dashboardChange", function WidgetsDashboardComponent_c8y_dashboard_10_Template_c8y_dashboard_dashboardChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r48); const ctx_r47 = ɵngcc0.ɵɵnextContext(); return ctx_r47.onChangeDashboard.emit($event); });
    ɵngcc0.ɵɵtemplate(2, WidgetsDashboardComponent_c8y_dashboard_10_c8y_dashboard_child_2_Template, 8, 15, "c8y-dashboard-child", 37);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r10.widgets);
} }
function AuditLogComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 3);
    ɵngcc0.ɵɵelementStart(1, "small", 4);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "c8yDate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 5);
    ɵngcc0.ɵɵelementStart(6, "div", 6);
    ɵngcc0.ɵɵelementStart(7, "div", 7);
    ɵngcc0.ɵɵelementStart(8, "div", 8);
    ɵngcc0.ɵɵelementStart(9, "span", 9);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "small", 10);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "div", 11);
    ɵngcc0.ɵɵelementStart(15, "div", 12);
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const record_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, record_r1.time));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 6, record_r1.activity));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(record_r1.user);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 8, record_r1.text));
} }
const _c87 = function (a0) { return { $implicit: a0 }; };
function CellRendererComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.spec.renderer)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c87, ctx_r2.spec.context));
} }
function CellRendererComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 4);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngComponentOutlet", ctx_r3.spec.renderer)("ngComponentOutletInjector", ctx_r3.rendererInjector);
} }
function CellRendererComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, CellRendererComponent_ng_container_0_ng_container_1_Template, 1, 4, "ng-container", 1);
    ɵngcc0.ɵɵtemplate(2, CellRendererComponent_ng_container_0_ng_container_2_Template, 1, 2, "ng-container", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.rendererType === "TEMPLATE");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.rendererType === "COMPONENT");
} }
function CellRendererComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 5);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r1.spec.context.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.spec.context.value, " ");
} }
function FilteringFormRendererComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.spec.renderer)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c87, ctx_r2.spec.context));
} }
function FilteringFormRendererComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 4);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngComponentOutlet", ctx_r3.spec.renderer)("ngComponentOutletInjector", ctx_r3.rendererInjector);
} }
function FilteringFormRendererComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FilteringFormRendererComponent_ng_container_0_ng_container_1_Template, 1, 4, "ng-container", 1);
    ɵngcc0.ɵɵtemplate(2, FilteringFormRendererComponent_ng_container_0_ng_container_2_Template, 1, 2, "ng-container", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.rendererType === "TEMPLATE");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.rendererType === "COMPONENT");
} }
function FilteringFormRendererComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "label");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 6);
    ɵngcc0.ɵɵlistener("ngModelChange", function FilteringFormRendererComponent_ng_container_1_Template_input_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.defaultRendererFilterText = $event; })("keyup.enter", function FilteringFormRendererComponent_ng_container_1_Template_input_keyup_enter_5_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.spec.context.applyFilter({ filterPredicate: ctx_r6.defaultRendererFilterText }); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 7);
    ɵngcc0.ɵɵelementStart(7, "button", 8);
    ɵngcc0.ɵɵlistener("click", function FilteringFormRendererComponent_ng_container_1_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); ctx_r7.defaultRendererFilterText = ""; return ctx_r7.spec.context.resetFilter(); });
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 9);
    ɵngcc0.ɵɵlistener("click", function FilteringFormRendererComponent_ng_container_1_Template_button_click_11_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.spec.context.applyFilter({ filterPredicate: ctx_r8.defaultRendererFilterText }); });
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 7, "Filter text"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.defaultRendererFilterText)("actionName", "dataGrid:filteringForm:InputTextField");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(8, 9, "Reset"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 11, "Reset"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 13, "Apply"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 15, "Apply"), " ");
} }
const _c88 = ["columnConfigForm"];
const _c89 = function () { return { example: "c8y_Agent.name" }; };
const _c90 = ["scroll"];
const _c91 = ["infiniteScrollContainer"];
function DataGridComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵelement(2, "c8y-progress-bar", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("message", ctx_r1.loadingItemsLabel);
} }
function DataGridComponent_div_5_ng_container_4_span_1_small_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 33);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(1, " {{ filteredItemsCount }} of {{ allItemsCount }} items ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("translateParams", ctx_r18.filteringLabelsParams);
} }
function DataGridComponent_div_5_ng_container_4_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 31);
    ɵngcc0.ɵɵtext(2, "No filters");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_div_5_ng_container_4_span_1_small_3_Template, 2, 1, "small", 32);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !!ctx_r15.filteringLabelsParams.allItemsCount);
} }
function DataGridComponent_div_5_ng_container_4_span_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 35);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "small", 36);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(5, " of {{ allItemsCount }} items ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, ctx_r19.dataSource.stats$).filteredSize, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ctx_r19.filteringLabelsParams);
} }
function DataGridComponent_div_5_ng_container_4_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_div_5_ng_container_4_span_2_ng_container_1_Template, 6, 4, "ng-container", 18);
    ɵngcc0.ɵɵelementStart(2, "button", 34);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_ng_container_4_span_2_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20.clearFilters(); });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !!ctx_r16.filteringLabelsParams.allItemsCount);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("title", " ", ɵngcc0.ɵɵpipeBind1(3, 3, "Clear filters"), "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 5, "Clear filters"), " ");
} }
function DataGridComponent_div_5_ng_container_4_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 27);
    ɵngcc0.ɵɵelementStart(1, "button", 37);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(2, 1, "The counter for the total number of items might be inaccurate."));
} }
function DataGridComponent_div_5_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_div_5_ng_container_4_span_1_Template, 4, 1, "span", 18);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_div_5_ng_container_4_span_2_Template, 6, 7, "span", 18);
    ɵngcc0.ɵɵelementStart(3, "span", 27);
    ɵngcc0.ɵɵelementStart(4, "button", 28);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelement(6, "i", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, DataGridComponent_div_5_ng_container_4_span_7_Template, 4, 3, "span", 30);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r10.filteringApplied);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.filteringApplied);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(5, 5, "Click the column headers to apply filters."));
    ɵngcc0.ɵɵproperty("actionName", "dataGrid:ApplyFilterInfo");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.showCounterWarning);
} }
const _c92 = function (a0) { return { type: a0 }; };
function DataGridComponent_div_5_ng_container_7_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 41);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_ng_container_7_ng_container_1_ng_container_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r29); const headerActionControl_r22 = ɵngcc0.ɵɵnextContext(2).$implicit; return headerActionControl_r22.callback(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 42);
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const headerActionControl_r22 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, headerActionControl_r22.text));
    ɵngcc0.ɵɵproperty("actionName", "dataGrid:" + headerActionControl_r22.text)("actionData", ɵngcc0.ɵɵpureFunction1(8, _c92, headerActionControl_r22.type));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 6, headerActionControl_r22.text));
} }
function DataGridComponent_div_5_ng_container_7_ng_container_1_ng_template_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c93 = function (a0) { return { headerActionControl: a0 }; };
function DataGridComponent_div_5_ng_container_7_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DataGridComponent_div_5_ng_container_7_ng_container_1_ng_template_2_ng_container_0_Template, 1, 0, "ng-container", 43);
} if (rf & 2) {
    const headerActionControl_r22 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", headerActionControl_r22.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c93, headerActionControl_r22));
} }
function DataGridComponent_div_5_ng_container_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_div_5_ng_container_7_ng_container_1_ng_container_1_Template, 7, 10, "ng-container", 39);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_div_5_ng_container_7_ng_container_1_ng_template_2_Template, 1, 4, "ng-template", null, 40, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r25 = ɵngcc0.ɵɵreference(3);
    const headerActionControl_r22 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !headerActionControl_r22.template)("ngIfElse", _r25);
} }
function DataGridComponent_div_5_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_div_5_ng_container_7_ng_container_1_Template, 4, 2, "ng-container", 18);
    ɵngcc0.ɵɵpipe(2, "isControlVisible");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const headerActionControl_r22 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 1, headerActionControl_r22));
} }
function DataGridComponent_div_5_div_8_ul_8_div_3_ng_container_1_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r43 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 58);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_8_ul_8_div_3_ng_container_1_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r43); const _r41 = ɵngcc0.ɵɵreference(3); const column_r38 = ɵngcc0.ɵɵnextContext(2).$implicit; ɵngcc0.ɵɵnextContext(2); const _r34 = ɵngcc0.ɵɵreference(1); const ctx_r42 = ɵngcc0.ɵɵnextContext(2); return ctx_r42.removeCustomColumn(_r41, column_r38, _r34); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "c8y-popover-confirm", 59, 60);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "i", 61);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(1, 4, "Remove`column,verb`"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placement", "left")("title", ɵngcc0.ɵɵpipeBind1(4, 6, "Confirm removal"))("outsideClick", true);
} }
function DataGridComponent_div_5_div_8_ul_8_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r47 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 54);
    ɵngcc0.ɵɵelementStart(2, "label", 55);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "input", 56);
    ɵngcc0.ɵɵlistener("ngModelChange", function DataGridComponent_div_5_div_8_ul_8_div_3_ng_container_1_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r47); const column_r38 = ɵngcc0.ɵɵnextContext().$implicit; return column_r38.visible = $event; })("change", function DataGridComponent_div_5_div_8_ul_8_div_3_ng_container_1_Template_input_change_4_listener() { ɵngcc0.ɵɵrestoreView(_r47); const ctx_r48 = ɵngcc0.ɵɵnextContext(5); ctx_r48.updateGridColumnsSize(); return ctx_r48.emitConfigChange(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "span");
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, DataGridComponent_div_5_div_8_ul_8_div_3_ng_container_1_button_9_Template, 6, 8, "button", 57);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r38 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 5, column_r38.header) || column_r38.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", column_r38.visible)("actionName", "dataGrid:ConfigureColumns:" + (column_r38.header || column_r38.name));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 7, column_r38.header) || column_r38.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", column_r38.custom);
} }
function DataGridComponent_div_5_div_8_ul_8_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 53);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_div_5_div_8_ul_8_div_3_ng_container_1_Template, 10, 9, "ng-container", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r38 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !column_r38.positionFixed);
} }
function DataGridComponent_div_5_div_8_ul_8_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r51 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 62);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_8_ul_8_li_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r51); ɵngcc0.ɵɵnextContext(2); const _r34 = ɵngcc0.ɵɵreference(1); const ctx_r50 = ɵngcc0.ɵɵnextContext(2); ctx_r50.openCustomColumnModal(); return _r34.hide(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 63);
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Add custom column"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 4, "Add custom column"));
} }
function DataGridComponent_div_5_div_8_ul_8_Template(rf, ctx) { if (rf & 1) {
    const _r54 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ul", 49);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_8_ul_8_Template_ul_click_0_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(1, "li", 50);
    ɵngcc0.ɵɵelementStart(2, "div", 51);
    ɵngcc0.ɵɵlistener("cdkDropListDropped", function DataGridComponent_div_5_div_8_ul_8_Template_div_cdkDropListDropped_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r54); const ctx_r53 = ɵngcc0.ɵɵnextContext(3); return ctx_r53.onColumnDrop($event); });
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_div_5_div_8_ul_8_div_3_Template, 2, 1, "div", 52);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_div_5_div_8_ul_8_li_4_Template, 7, 6, "li", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r35.columns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r35.onAddCustomColumn == null ? null : ctx_r35.onAddCustomColumn.observers == null ? null : ctx_r35.onAddCustomColumn.observers.length);
} }
function DataGridComponent_div_5_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 44, 45);
    ɵngcc0.ɵɵelementStart(2, "button", 46);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelement(4, "i", 47);
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, DataGridComponent_div_5_div_8_ul_8_Template, 5, 2, "ul", 48);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("insideClick", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 4, "Configure columns"));
    ɵngcc0.ɵɵproperty("actionName", "dataGrid:ConfigureColumns");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 6, "Configure columns"));
} }
function DataGridComponent_div_5_div_16_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 69);
} }
function DataGridComponent_div_5_div_16_i_5_Template(rf, ctx) { if (rf & 1) {
    const _r58 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 70);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_16_i_5_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r58); const ctx_r57 = ɵngcc0.ɵɵnextContext(3); ctx_r57.searchText = ""; return ctx_r57.searchText$.emit(""); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("actionName", "dataGrid:SearchInputClear");
} }
function DataGridComponent_div_5_div_16_Template(rf, ctx) { if (rf & 1) {
    const _r60 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 64);
    ɵngcc0.ɵɵelementStart(1, "input", 65);
    ɵngcc0.ɵɵlistener("input", function DataGridComponent_div_5_div_16_Template_input_input_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r60); const ctx_r59 = ɵngcc0.ɵɵnextContext(2); return ctx_r59.searchText$.emit($event.target.value); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 66);
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_div_5_div_16_i_4_Template, 1, 0, "i", 67);
    ɵngcc0.ɵɵtemplate(5, DataGridComponent_div_5_div_16_i_5_Template, 1, 1, "i", 68);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, "Search\u2026"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r13.searchText)("actionName", "dataGrid:SearchInput");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r13.searchText.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r13.searchText.length > 0);
} }
const _c94 = function (a0) { return { count: a0 }; };
function DataGridComponent_div_5_div_17_small_5_Template(rf, ctx) { if (rf & 1) {
    const _r64 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵelementStart(1, "a", 76);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_17_small_5_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r64); const ctx_r63 = ɵngcc0.ɵɵnextContext(3); return ctx_r63.setAllItemsSelected(true); });
    ɵngcc0.ɵɵelementStart(2, "span", 36);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵtext(4, " Select all {{ count }} items ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r61 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(3, _c94, ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r61.dataSource.stats$).filteredSize));
} }
function DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r71 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 80);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r71); const bulkActionControl_r65 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r70 = ɵngcc0.ɵɵnextContext(3); return bulkActionControl_r65.callback(ctx_r70.selectedItemIds, ctx_r70.reload.bind(ctx_r70)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 81);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Export"));
    ɵngcc0.ɵɵproperty("actionName", "dataGrid:BulkExport");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, "Export"));
} }
function DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r74 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 80);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r74); const bulkActionControl_r65 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r73 = ɵngcc0.ɵɵnextContext(3); return bulkActionControl_r65.callback(ctx_r73.selectedItemIds, ctx_r73.reload.bind(ctx_r73)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 82);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Delete"));
    ɵngcc0.ɵɵproperty("actionName", "dataGrid:BulkDelete");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, "Delete"));
} }
function DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r77 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 80);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r77); const bulkActionControl_r65 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r76 = ɵngcc0.ɵɵnextContext(3); return bulkActionControl_r65.callback(ctx_r76.selectedItemIds, ctx_r76.reload.bind(ctx_r76)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 83);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const bulkActionControl_r65 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 4, bulkActionControl_r65.text));
    ɵngcc0.ɵɵproperty("actionName", "dataGrid:Bulk:" + bulkActionControl_r65.text);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("c8yIcon", bulkActionControl_r65.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, bulkActionControl_r65.text));
} }
function DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_1_Template, 6, 7, "button", 78);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_2_Template, 6, 7, "button", 78);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_button_3_Template, 6, 8, "button", 79);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r66 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r66.builtInActionType.Export);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r66.builtInActionType.Delete);
} }
function DataGridComponent_div_5_div_17_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 77);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_div_5_div_17_ng_container_8_ng_container_1_Template, 4, 2, "ng-container", 18);
    ɵngcc0.ɵɵpipe(2, "isControlVisible");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const bulkActionControl_r65 = ctx.$implicit;
    const ctx_r62 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngSwitch", bulkActionControl_r65.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind2(2, 2, bulkActionControl_r65, ctx_r62.selectedItemIds));
} }
function DataGridComponent_div_5_div_17_Template(rf, ctx) { if (rf & 1) {
    const _r81 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 71);
    ɵngcc0.ɵɵelementStart(1, "h4");
    ɵngcc0.ɵɵelementStart(2, "span", 36);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ count }} selected items. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "br", 72);
    ɵngcc0.ɵɵtemplate(5, DataGridComponent_div_5_div_17_small_5_Template, 5, 5, "small", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 19);
    ɵngcc0.ɵɵelementStart(7, "div", 20);
    ɵngcc0.ɵɵtemplate(8, DataGridComponent_div_5_div_17_ng_container_8_Template, 3, 5, "ng-container", 73);
    ɵngcc0.ɵɵelementStart(9, "button", 74);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_div_17_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r81); const ctx_r80 = ɵngcc0.ɵɵnextContext(2); return ctx_r80.cancel(); });
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelement(11, "i", 75);
    ɵngcc0.ɵɵelementStart(12, "span");
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(9, _c94, ctx_r14.selectedItemIds.length));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r14.serverSideDataCallback && ctx_r14.selectedItemIds.length >= ctx_r14.pagination.pageSize);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r14.bulkActionControls);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 5, "Cancel"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 7, "Cancel"));
} }
const _c95 = function (a0) { return { "m-r-16": a0 }; };
function DataGridComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r83 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelementStart(1, "h4", 17);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_div_5_ng_container_4_Template, 8, 7, "ng-container", 18);
    ɵngcc0.ɵɵelementStart(5, "div", 19);
    ɵngcc0.ɵɵelementStart(6, "div", 20);
    ɵngcc0.ɵɵtemplate(7, DataGridComponent_div_5_ng_container_7_Template, 3, 3, "ng-container", 21);
    ɵngcc0.ɵɵtemplate(8, DataGridComponent_div_5_div_8_Template, 9, 8, "div", 22);
    ɵngcc0.ɵɵelementStart(9, "button", 23);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_div_5_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r83); const ctx_r82 = ɵngcc0.ɵɵnextContext(); return ctx_r82.clickReload(); });
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵpipe(11, "async");
    ɵngcc0.ɵɵelement(12, "i", 24);
    ɵngcc0.ɵɵelementStart(13, "span");
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(16, DataGridComponent_div_5_div_16_Template, 6, 7, "div", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(17, DataGridComponent_div_5_div_17_Template, 15, 11, "div", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(18, _c95, !!ctx_r2.title));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 10, ctx_r2.title));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.displayOptions.filter);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.headerActionControls);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.configureColumnsEnabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 12, "Reload"));
    ɵngcc0.ɵɵproperty("disabled", ɵngcc0.ɵɵpipeBind1(11, 14, ctx_r2.dataSource.loading$));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 16, "Reload"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.serverSideDataCallback || ctx_r2.showSearch);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.selectedItemIds.length !== 0);
} }
function DataGridComponent_ng_container_7_ng_container_2_th_1_Template(rf, ctx) { if (rf & 1) {
    const _r92 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "th", 89);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵelementStart(2, "label", 90);
    ɵngcc0.ɵɵelementStart(3, "input", 91);
    ɵngcc0.ɵɵlistener("change", function DataGridComponent_ng_container_7_ng_container_2_th_1_Template_input_change_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r92); const ctx_r91 = ɵngcc0.ɵɵnextContext(3); return ctx_r91.setAllItemsInCurrentPageSelected($event.target.checked); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r89 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("checked", ctx_r89.currentPageSelectionState.allSelected)("indeterminate", !(ctx_r89.currentPageSelectionState.allSelected || ctx_r89.currentPageSelectionState.allDeselected));
} }
function DataGridComponent_ng_container_7_ng_container_2_td_2_Template(rf, ctx) { if (rf & 1) {
    const _r95 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 92);
    ɵngcc0.ɵɵelementStart(1, "label", 90);
    ɵngcc0.ɵɵelementStart(2, "input", 93);
    ɵngcc0.ɵɵlistener("change", function DataGridComponent_ng_container_7_ng_container_2_td_2_Template_input_change_2_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r95); const row_r93 = restoredCtx.$implicit; const ctx_r94 = ɵngcc0.ɵɵnextContext(3); return ctx_r94.setItemsSelected([row_r93], $event.target.checked); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r93 = ctx.$implicit;
    const ctx_r90 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("checked", ctx_r90.isItemSelected(row_r93));
} }
function DataGridComponent_ng_container_7_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_2_th_1_Template, 5, 2, "th", 87);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_2_td_2_Template, 4, 1, "td", 88);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DataGridComponent_ng_container_7_ng_container_3_th_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "th", 89);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r109 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 98);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r109); const actionControl_r102 = ɵngcc0.ɵɵnextContext(2).$implicit; const row_r98 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r107 = ɵngcc0.ɵɵnextContext(3); return actionControl_r102.callback(row_r98, ctx_r107.reload.bind(ctx_r107)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 99);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "Edit"));
    ɵngcc0.ɵɵproperty("actionName", "dataGridEntry:Edit");
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r113 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 100);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r113); const actionControl_r102 = ɵngcc0.ɵɵnextContext(2).$implicit; const row_r98 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r111 = ɵngcc0.ɵɵnextContext(3); return actionControl_r102.callback(row_r98, ctx_r111.reload.bind(ctx_r111)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 61);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "Delete"));
    ɵngcc0.ɵɵproperty("actionName", "dataGridEntry:Delete");
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_3_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 83);
} if (rf & 2) {
    const actionControl_r102 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("c8yIcon", actionControl_r102.icon);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_3_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const actionControl_r102 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, actionControl_r102.text));
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r121 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 101);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r121); const actionControl_r102 = ɵngcc0.ɵɵnextContext(2).$implicit; const row_r98 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r119 = ɵngcc0.ɵɵnextContext(3); return actionControl_r102.callback(row_r98, ctx_r119.reload.bind(ctx_r119)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_3_i_2_Template, 1, 1, "i", 102);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_3_span_3_Template, 3, 3, "span", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const actionControl_r102 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(1, 4, actionControl_r102.icon ? actionControl_r102.text : ""));
    ɵngcc0.ɵɵproperty("actionName", "dataGridEntry:" + actionControl_r102.text);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", actionControl_r102.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !actionControl_r102.icon);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_1_Template, 3, 4, "button", 95);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_2_Template, 3, 4, "button", 96);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_button_3_Template, 4, 6, "button", 97);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r103 = ɵngcc0.ɵɵnextContext(6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r103.builtInActionType.Edit);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r103.builtInActionType.Delete);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 77);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_ng_container_1_Template, 4, 2, "ng-container", 18);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const actionControl_r102 = ctx.$implicit;
    const row_r98 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("ngSwitch", actionControl_r102.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", actionControl_r102.showIf ? actionControl_r102.showIf(row_r98) : true);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_ng_container_1_Template, 2, 2, "ng-container", 73);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r99 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r99.actionControls);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r135 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 110);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r135); const actionControl_r127 = ɵngcc0.ɵɵnextContext(2).$implicit; const row_r98 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r133 = ɵngcc0.ɵɵnextContext(3); return actionControl_r127.callback(row_r98, ctx_r133.reload.bind(ctx_r133)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 99);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Edit"));
    ɵngcc0.ɵɵproperty("actionName", "dataGridActions:Edit");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 5, "Edit"), " ");
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r139 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 110);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r139); const actionControl_r127 = ɵngcc0.ɵɵnextContext(2).$implicit; const row_r98 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r137 = ɵngcc0.ɵɵnextContext(3); return actionControl_r127.callback(row_r98, ctx_r137.reload.bind(ctx_r137)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 82);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Delete"));
    ɵngcc0.ɵɵproperty("actionName", "dataGridActions:Delete");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 5, "Delete"), " ");
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r143 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 110);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r143); const actionControl_r127 = ɵngcc0.ɵɵnextContext(2).$implicit; const row_r98 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r141 = ɵngcc0.ɵɵnextContext(3); return actionControl_r127.callback(row_r98, ctx_r141.reload.bind(ctx_r141)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 111);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Export"));
    ɵngcc0.ɵɵproperty("actionName", "dataGridActions:Export");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 5, "Export"), " ");
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r147 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 112);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r147); const actionControl_r127 = ɵngcc0.ɵɵnextContext(2).$implicit; const row_r98 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r145 = ɵngcc0.ɵɵnextContext(3); return actionControl_r127.callback(row_r98, ctx_r145.reload.bind(ctx_r145)); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 83);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const actionControl_r127 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 5, actionControl_r127.text));
    ɵngcc0.ɵɵproperty("actionName", "dataGridActions:" + actionControl_r127.text)("actionData", ɵngcc0.ɵɵpureFunction1(9, _c92, actionControl_r127.type));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("c8yIcon", actionControl_r127.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 7, actionControl_r127.text), " ");
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_1_Template, 5, 7, "button", 108);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_2_Template, 5, 7, "button", 108);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_3_Template, 5, 7, "button", 108);
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_button_4_Template, 5, 11, "button", 109);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r128 = ɵngcc0.ɵɵnextContext(7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r128.builtInActionType.Edit);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r128.builtInActionType.Delete);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r128.builtInActionType.Export);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 77);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_ng_container_1_Template, 5, 3, "ng-container", 18);
    ɵngcc0.ɵɵpipe(2, "isControlVisible");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const actionControl_r127 = ctx.$implicit;
    const row_r98 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("ngSwitch", actionControl_r127.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind2(2, 2, actionControl_r127, row_r98));
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 107);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_li_1_Template, 3, 5, "li", 73);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r125 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r125.actionControls);
} }
function DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 103);
    ɵngcc0.ɵɵelementStart(1, "button", 104);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 105);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_ul_4_Template, 2, 1, "ul", 106);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Actions"));
    ɵngcc0.ɵɵproperty("actionName", "dataGridEntry:Actions");
} }
const _c96 = function (a0) { return { "m-l-auto overflow-visible": a0 }; };
function DataGridComponent_ng_container_7_ng_container_3_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 92);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_td_2_ng_container_1_Template, 2, 1, "ng-container", 18);
    ɵngcc0.ɵɵelementStart(2, "div", 17);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_ng_container_7_ng_container_3_td_2_div_3_Template, 5, 4, "div", 94);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r97 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r97.actionControls.length <= 2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c96, ctx_r97.actionControls.length > 2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r97.actionControls.length > 2);
} }
function DataGridComponent_ng_container_7_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_3_th_1_Template, 1, 0, "th", 87);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_3_td_2_Template, 4, 5, "td", 88);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_div_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-cell-renderer", 121);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const cellRendererSpec_r158 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("spec", cellRendererSpec_r158);
} }
const _c97 = function (a0, a1) { return { columnName: a0, value: a1 }; };
function DataGridComponent_ng_container_7_ng_container_4_th_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 120);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_4_th_1_div_2_ng_container_2_Template, 2, 1, "ng-container", 18);
    ɵngcc0.ɵɵpipe(3, "map");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r84 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r153 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, column_r84.header) || column_r84.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind3(3, 4, ɵngcc0.ɵɵpureFunction1(13, _c27, ɵngcc0.ɵɵpureFunction2(10, _c97, column_r84.name, ɵngcc0.ɵɵpipeBind1(4, 8, column_r84.header) || column_r84.name)), ctx_r153.getHeaderCellRendererSpec, ctx_r153));
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-cell-renderer", 121);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const cellRendererSpec_r163 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("spec", cellRendererSpec_r163);
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_ul_9_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-filtering-form-renderer", 121);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const filteringFormRendererSpec_r165 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("spec", filteringFormRendererSpec_r165);
} }
const _c98 = function (a0) { return { "dropdown-menu-right-grid": a0 }; };
const _c99 = function (a0, a1) { return { column: a0, dropdown: a1 }; };
function DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_ul_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 127);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_ul_9_Template_ul_click_0_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(1, "li", 128);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_ul_9_ng_container_2_Template, 2, 1, "ng-container", 18);
    ɵngcc0.ɵɵpipe(3, "map");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r160 = ɵngcc0.ɵɵreference(1);
    const column_r84 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r162 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c98, ctx_r162.isDropDownPlacedRight(column_r84)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind3(3, 2, ɵngcc0.ɵɵpureFunction1(11, _c27, ɵngcc0.ɵɵpureFunction2(8, _c99, column_r84, _r160)), ctx_r162.getFilteringFormRendererSpec, ctx_r162));
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 122, 123);
    ɵngcc0.ɵɵelementStart(2, "button", 124);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_ng_container_4_Template, 2, 1, "ng-container", 18);
    ɵngcc0.ɵɵpipe(5, "map");
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelement(7, "i", 125);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_ul_9_Template, 4, 13, "ul", 126);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r84 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r154 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate1("placement", "bottom ", ctx_r154.isDropDownPlacedRight(column_r84) ? "right" : "left", " ");
    ɵngcc0.ɵɵproperty("insideClick", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(3, 6, column_r84.header) || column_r84.name)("actionName", "dataGridFilterColumn:" + (column_r84.header || column_r84.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind3(5, 8, ɵngcc0.ɵɵpureFunction1(19, _c27, ɵngcc0.ɵɵpureFunction2(16, _c97, column_r84.name, ɵngcc0.ɵɵpipeBind1(6, 12, column_r84.header) || column_r84.name)), ctx_r154.getHeaderCellRendererSpec, ctx_r154));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(8, 14, "Filter"));
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 133);
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 134);
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 135);
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r174 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 129);
    ɵngcc0.ɵɵlistener("click", function DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r174); const column_r84 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r172 = ɵngcc0.ɵɵnextContext(); return ctx_r172.changeSortOrder(column_r84.name); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementContainerStart(2, 77);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_i_3_Template, 1, 0, "i", 130);
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_i_4_Template, 1, 0, "i", 131);
    ɵngcc0.ɵɵtemplate(5, DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_i_5_Template, 1, 0, "i", 132);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r84 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 4, "Sort"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngSwitch", column_r84.sortOrder);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "asc");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "desc");
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_span_5_Template(rf, ctx) { if (rf & 1) {
    const _r178 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 136);
    ɵngcc0.ɵɵlistener("mousedown", function DataGridComponent_ng_container_7_ng_container_4_th_1_span_5_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r178); const column_r84 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r176 = ɵngcc0.ɵɵnextContext(); return ctx_r176.resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column_r84.name }); });
    ɵngcc0.ɵɵelementEnd();
} }
function DataGridComponent_ng_container_7_ng_container_4_th_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 115);
    ɵngcc0.ɵɵpipe(1, "map");
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_4_th_1_div_2_Template, 5, 15, "div", 116);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_ng_container_7_ng_container_4_th_1_div_3_Template, 10, 21, "div", 117);
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_ng_container_7_ng_container_4_th_1_button_4_Template, 6, 6, "button", 118);
    ɵngcc0.ɵɵtemplate(5, DataGridComponent_ng_container_7_ng_container_4_th_1_span_5_Template, 1, 0, "span", 119);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r84 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r151 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("sorted", column_r84.sortOrder)("filtered", ɵngcc0.ɵɵpipeBind2(1, 12, column_r84, ctx_r151.isColumnFilteringApplied))("hidden", !column_r84.visible);
    ɵngcc0.ɵɵproperty("ngClass", column_r84.headerCSSClassName);
    ɵngcc0.ɵɵattribute("data-type", column_r84.dataType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !column_r84.filterable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r84.filterable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r84.sortable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r84.resizable);
} }
function DataGridComponent_ng_container_7_ng_container_4_td_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-cell-renderer", 121);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const cellRendererSpec_r182 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("spec", cellRendererSpec_r182);
} }
const _c100 = function (a0, a1, a2) { return { value: a0, row: a1, columnName: a2 }; };
function DataGridComponent_ng_container_7_ng_container_4_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 137);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_4_td_2_ng_container_2_Template, 2, 1, "ng-container", 18);
    ɵngcc0.ɵɵpipe(3, "map");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r180 = ctx.$implicit;
    const column_r84 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r152 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("hidden", !column_r84.visible);
    ɵngcc0.ɵɵproperty("ngClass", column_r84.cellCSSClassName);
    ɵngcc0.ɵɵattribute("data-cell-title", ɵngcc0.ɵɵpipeBind1(1, 6, column_r84.header))("data-type", column_r84.dataType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind3(3, 8, ɵngcc0.ɵɵpureFunction1(16, _c27, ɵngcc0.ɵɵpureFunction3(12, _c100, ctx_r152.resolveCellValue(row_r180, column_r84.path), row_r180, column_r84.name)), ctx_r152.getCellRendererSpec, ctx_r152));
} }
function DataGridComponent_ng_container_7_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DataGridComponent_ng_container_7_ng_container_4_th_1_Template, 6, 15, "th", 113);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_4_td_2_Template, 4, 18, "td", 114);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DataGridComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 84);
    ɵngcc0.ɵɵelementContainerStart(1, 77);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_ng_container_7_ng_container_2_Template, 3, 0, "ng-container", 85);
    ɵngcc0.ɵɵtemplate(3, DataGridComponent_ng_container_7_ng_container_3_Template, 3, 0, "ng-container", 85);
    ɵngcc0.ɵɵtemplate(4, DataGridComponent_ng_container_7_ng_container_4_Template, 3, 0, "ng-container", 86);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r84 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("cdkColumnDef", column_r84.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitch", column_r84.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "checkbox");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "actions");
} }
function DataGridComponent_td_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 138);
    ɵngcc0.ɵɵelement(1, "template", null, 139);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("grid-column", ctx_r4.styles.gridInfiniteScrollColumn);
} }
function DataGridComponent_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 140);
} }
function DataGridComponent_tr_11_Template(rf, ctx) { if (rf & 1) {
    const _r187 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tr", 141);
    ɵngcc0.ɵɵlistener("mouseover", function DataGridComponent_tr_11_Template_tr_mouseover_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r187); const row_r185 = restoredCtx.$implicit; const ctx_r186 = ɵngcc0.ɵɵnextContext(); return ctx_r186.rowMouseOver.emit(row_r185); })("mouseleave", function DataGridComponent_tr_11_Template_tr_mouseleave_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r187); const row_r185 = restoredCtx.$implicit; const ctx_r188 = ɵngcc0.ɵɵnextContext(); return ctx_r188.rowMouseLeave.emit(row_r185); })("click", function DataGridComponent_tr_11_Template_tr_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r187); const row_r185 = restoredCtx.$implicit; const ctx_r189 = ɵngcc0.ɵɵnextContext(); return ctx_r189.rowClick.emit(row_r185); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c101 = function (a0) { return { hidden: a0 }; };
function DataGridComponent_tr_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 142);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c101, !ctx_r7.infiniteScroll));
} }
function DataGridComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 143);
    ɵngcc0.ɵɵelementStart(1, "div", 144);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function DataGridComponent_div_17_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 152);
    ɵngcc0.ɵɵelementStart(1, "span", 153);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(2, " {{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }} ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r190 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("translateParams", ctx_r190.paginationLabelParams);
} }
function DataGridComponent_div_17_div_5_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 159);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const pageSize_r194 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", pageSize_r194);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", pageSize_r194, " ");
} }
function DataGridComponent_div_17_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r196 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 154);
    ɵngcc0.ɵɵelementStart(1, "label", 155);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 156);
    ɵngcc0.ɵɵelementStart(5, "select", 157);
    ɵngcc0.ɵɵlistener("ngModelChange", function DataGridComponent_div_17_div_5_Template_select_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r196); const ctx_r195 = ɵngcc0.ɵɵnextContext(2); return ctx_r195.updatePagination({ itemsPerPage: $event, page: ctx_r195.pagination.currentPage }); });
    ɵngcc0.ɵɵtemplate(6, DataGridComponent_div_17_div_5_option_6_Template, 2, 2, "option", 158);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r191 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, "Items per page"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r191.pagination.pageSize);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r191.possiblePageSizes);
} }
function DataGridComponent_div_17_pagination_8_Template(rf, ctx) { if (rf & 1) {
    const _r198 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "pagination", 160);
    ɵngcc0.ɵɵlistener("pageChanged", function DataGridComponent_div_17_pagination_8_Template_pagination_pageChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r198); const ctx_r197 = ɵngcc0.ɵɵnextContext(2); return ctx_r197.updatePagination($event); })("numPages", function DataGridComponent_div_17_pagination_8_Template_pagination_numPages_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r198); const ctx_r199 = ɵngcc0.ɵɵnextContext(2); return ctx_r199.totalPagesCount$.next($event); });
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r192 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("hidden", ɵngcc0.ɵɵpipeBind1(1, 7, ctx_r192.hidePagination$));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r192.pagination.currentPage)("totalItems", ɵngcc0.ɵɵpipeBind1(2, 9, ctx_r192.dataSource.stats$).filteredSize)("itemsPerPage", ctx_r192.pagination.pageSize)("maxSize", 5)("boundaryLinks", false);
} }
function DataGridComponent_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 145);
    ɵngcc0.ɵɵelementStart(1, "div", 146);
    ɵngcc0.ɵɵtemplate(2, DataGridComponent_div_17_div_2_Template, 3, 1, "div", 147);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 148);
    ɵngcc0.ɵɵtemplate(5, DataGridComponent_div_17_div_5_Template, 7, 5, "div", 149);
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 150);
    ɵngcc0.ɵɵtemplate(8, DataGridComponent_div_17_pagination_8_Template, 3, 11, "pagination", 151);
    ɵngcc0.ɵɵpipe(9, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(3, 3, ctx_r9.dataSource.stats$).currentPageSize > 0);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(6, 5, ctx_r9.dataSource.stats$).filteredSize > ctx_r9.minPossiblePageSize);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(9, 7, ctx_r9.dataSource.stats$).filteredSize > 0);
} }
const _c102 = [[["c8y-ui-empty-state"], ["", 8, "c8y-empty-state"]]];
const _c103 = function (a0) { return { "table-data-grid__overlay": a0 }; };
const _c104 = function () { return ["infiniteScrollFooter"]; };
const _c105 = ["c8y-ui-empty-state, .c8y-empty-state"];
const _c106 = function (a0) { return { src: a0 }; };
function HelpComponent_c8y_action_bar_item_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 6);
    ɵngcc0.ɵɵelementStart(1, "button", 7);
    ɵngcc0.ɵɵlistener("click", function HelpComponent_c8y_action_bar_item_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.toggle(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "right")("priority", ctx_r0.priority);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 7, "Open help"))("actionName", ctx_r0.isCollapsed ? "helpOpened" : "helpClosed")("actionData", ɵngcc0.ɵɵpureFunction1(9, _c106, ctx_r0.src));
    ɵngcc0.ɵɵattribute("aria-expanded", !ctx_r0.isCollapsed);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
} }
function HelpComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementEnd();
} }
function HelpComponent_div_6_div_3_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "button", 18);
    ɵngcc0.ɵɵlistener("click", function HelpComponent_div_6_div_3_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(3); ctx_r10.showLangWarning = !ctx_r10.showLangWarning; return ctx_r10.helpService.isWarningAlertViewed = !ctx_r10.helpService.isWarningAlertViewed; });
    ɵngcc0.ɵɵelementStart(2, "span", 19);
    ɵngcc0.ɵɵtext(3, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 20);
    ɵngcc0.ɵɵtext(5, "Close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "p");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 1, "Help content is only available in English."), " ");
} }
function HelpComponent_div_6_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵtemplate(1, HelpComponent_div_6_div_3_div_1_Template, 9, 3, "div", 14);
    ɵngcc0.ɵɵelementStart(2, "h4", 15);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "div", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.helpService.isSupportedLanguage() && !ctx_r7.showLangWarning && !ctx_r7.helpService.isWarningAlertViewed);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r7.title, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r7.sectionContent, ɵngcc0.ɵɵsanitizeHtml);
} }
function HelpComponent_div_6_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵelementStart(1, "h4", 22);
    ɵngcc0.ɵɵtext(2, "Sorry, that didn't work");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 23);
    ɵngcc0.ɵɵelementStart(4, "p", 24);
    ɵngcc0.ɵɵtext(5, "The content couldn't be loaded.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c107 = function (a0, a1) { return { "text-warning": a0, "text-muted": a1 }; };
function HelpComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelement(2, "i", 10);
    ɵngcc0.ɵɵtemplate(3, HelpComponent_div_6_div_3_Template, 5, 3, "div", 11);
    ɵngcc0.ɵɵtemplate(4, HelpComponent_div_6_div_4_Template, 6, 0, "div", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", !ctx_r3.hasError ? ctx_r3.icon : "unlink")("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c107, ctx_r3.hasError, !ctx_r3.hasError));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.hasError);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.hasError);
} }
function HelpComponent_div_7_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 24);
    ɵngcc0.ɵɵtext(1, " Open the ");
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3, "User guide`KEEP_ORIGINAL`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function HelpComponent_div_7_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 24);
    ɵngcc0.ɵɵtext(1, " Check the ");
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3, "User guide`KEEP_ORIGINAL`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function HelpComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelementStart(1, "button", 26);
    ɵngcc0.ɵɵlistener("click", function HelpComponent_div_7_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.toggle(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3, " Close ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "a", 27);
    ɵngcc0.ɵɵtemplate(5, HelpComponent_div_7_span_5_Template, 4, 0, "span", 28);
    ɵngcc0.ɵɵtemplate(6, HelpComponent_div_7_span_6_Template, 4, 0, "span", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 5, "Close help"));
    ɵngcc0.ɵɵattribute("aria-expanded", !ctx_r4.isCollapsed);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("href", ctx_r4.hasError ? ctx_r4.getUrl() : ctx_r4.getUrl(ctx_r4.src), ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.hasError);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.hasError);
} }
const _c108 = function (a0) { return { "c8y-help-drawer-block": a0 }; };
const _c109 = function (a0, a1) { return { active: a0, inactive: a1 }; };
const _c110 = function (a0, a1) { return { "col-xs-6": a0, "col-xs-12": a1 }; };
function SelectModalComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelementStart(1, "c8y-filter", 17);
    ɵngcc0.ɵɵlistener("onSearch", function SelectModalComponent_div_11_Template_c8y_filter_onSearch_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.updatePipe($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c110, ctx_r0.showFilter && ctx_r0.additionalFilterTemplate, !ctx_r0.showFilter || !ctx_r0.additionalFilterTemplate));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "search");
} }
function SelectModalComponent_div_12_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SelectModalComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtemplate(1, SelectModalComponent_div_12_ng_container_1_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c110, ctx_r1.showFilter && ctx_r1.additionalFilterTemplate, !ctx_r1.showFilter || !ctx_r1.additionalFilterTemplate));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.additionalFilterTemplate);
} }
function SelectModalComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵelement(2, "h1", 21);
    ɵngcc0.ɵɵelementStart(3, "p");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    let tmp_1_0;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("c8yIcon", "", ctx_r2.icon, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 2, (tmp_1_0 = ɵngcc0.ɵɵpipeBind1(6, 4, ctx_r2.noItemsMessage)) !== null && tmp_1_0 !== undefined ? tmp_1_0 : "No items to display."));
} }
function SelectModalComponent_c8y_li_17_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const bodyPart_r13 = ctx.$implicit;
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", bodyPart_r13.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", bodyPart_r13.value)("pattern", ctx_r10.filterTerm)("text", bodyPart_r13.value);
} }
function SelectModalComponent_c8y_li_17_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 27);
    ɵngcc0.ɵɵelementStart(1, "div", 16);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", item_r9.additionalInformation.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r9.additionalInformation.value, " ");
} }
function SelectModalComponent_c8y_li_17_c8y_li_9_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 31);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const optionPart_r18 = ctx.$implicit;
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngClass", optionPart_r18.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("pattern", ctx_r16.filterTerm)("text", optionPart_r18.value);
} }
const _c111 = function (a0, a1) { return { $implicit: a0, option: a1 }; };
function SelectModalComponent_c8y_li_17_c8y_li_9_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 32);
} if (rf & 2) {
    const option_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const item_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", option_r15.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c111, item_r9, option_r15));
} }
function SelectModalComponent_c8y_li_17_c8y_li_9_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-radio", 28);
    ɵngcc0.ɵɵlistener("onSelect", function SelectModalComponent_c8y_li_17_c8y_li_9_Template_c8y_li_radio_onSelect_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r24); const option_r15 = restoredCtx.$implicit; const item_r9 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.updateChoice({ item: item_r9, id: option_r15.obj.id }); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "c8y-li-body", 29);
    ɵngcc0.ɵɵtemplate(3, SelectModalComponent_c8y_li_17_c8y_li_9_div_3_Template, 2, 3, "div", 24);
    ɵngcc0.ɵɵtemplate(4, SelectModalComponent_c8y_li_17_c8y_li_9_ng_container_4_Template, 1, 5, "ng-container", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r15 = ctx.$implicit;
    const item_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", ctx_r12.mode === "single" ? "single" : item_r9.groupId)("disabled", option_r15.disabled)("selected", option_r15.selected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", option_r15.body);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", option_r15.template);
} }
function SelectModalComponent_c8y_li_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 22);
    ɵngcc0.ɵɵelementStart(4, "div", 23);
    ɵngcc0.ɵɵtemplate(5, SelectModalComponent_c8y_li_17_div_5_Template, 2, 4, "div", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, SelectModalComponent_c8y_li_17_div_6_Template, 3, 2, "div", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(8, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(9, SelectModalComponent_c8y_li_17_c8y_li_9_Template, 5, 5, "c8y-li", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("c8yIcon", ctx_r3.icon);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", item_r9.body);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r9.additionalInformation);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", item_r9.options);
} }
function SelectModalComponent_div_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵtext(2, " Some entries might not be shown. Try narrowing search criteria. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectModalComponent_button_21_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 34);
    ɵngcc0.ɵɵlistener("click", function SelectModalComponent_button_21_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.dismiss(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r5.labels.cancel));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r5.labels.cancel), " ");
} }
function RangeDisplayComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 11);
} }
function RangeDisplayComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 12);
} }
function RangeDisplayComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 13);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattributeInterpolate2("data-label", "", ctx_r2.config.target, " ", ctx_r2.config.unit, "");
    ɵngcc0.ɵɵpropertyInterpolate3("title", "", ɵngcc0.ɵɵpipeBind1(1, 5, "Target"), ": ", ctx_r2.config.target, " ", ctx_r2.config.unit, "");
} }
function RangeDisplayComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 14);
    ɵngcc0.ɵɵpipe(1, "c8yDate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "c8yDate");
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattributeInterpolate3("data-label", "", ctx_r3.config.current, " ", ctx_r3.config.unit, " \n ", ɵngcc0.ɵɵpipeBind1(1, 7, ctx_r3.config.time), "");
    ɵngcc0.ɵɵpropertyInterpolate4("title", "", ɵngcc0.ɵɵpipeBind1(2, 9, "Current"), ": ", ctx_r3.config.current, " ", ctx_r3.config.unit, " | ", ɵngcc0.ɵɵpipeBind1(3, 11, ctx_r3.config.time), "");
} }
function RangeDisplayComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 10);
} if (rf & 2) {
    const index_r6 = ctx.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-label", ctx_r4.rulerCalc(index_r6));
} }
const _c112 = function (a0, a1, a2) { return { "range-display--vertical": a0, "range-display--compact": a1, "range-display--inline": a2 }; };
function ListDisplaySwitchComponent_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", option_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, option_r1.label));
} }
const _c113 = ["bodyContent"];
function WizardBodyComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
const _c114 = ["footerContent"];
function WizardFooterComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
const _c115 = ["headerContent"];
function WizardHeaderComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function WizardOutletComponent_div_1_div_4_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function WizardOutletComponent_div_1_div_4_button_1_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8); const entry_r6 = restoredCtx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(3); return ctx_r7.handleEntry(entry_r6); });
    ɵngcc0.ɵɵelementStart(1, "div", 11);
    ɵngcc0.ɵɵelement(2, "i", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 13);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r6 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", entry_r6.c8yIcon || "cogs");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 3, entry_r6.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, entry_r6.name), " ");
} }
function WizardOutletComponent_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, WizardOutletComponent_div_1_div_4_button_1_Template, 7, 7, "button", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.entries);
} }
function WizardOutletComponent_div_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "p");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "No options available."));
} }
function WizardOutletComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "p", 4);
    ɵngcc0.ɵɵelementStart(2, "span", 5);
    ɵngcc0.ɵɵtext(3, "Select method");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, WizardOutletComponent_div_1_div_4_Template, 2, 1, "div", 6);
    ɵngcc0.ɵɵtemplate(5, WizardOutletComponent_div_1_ng_template_5_Template, 4, 3, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(6);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.entries.length > 0)("ngIfElse", _r3);
} }
function ProviderConfigurationComponent_p_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    let tmp_0_0;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(3, 3, ctx_r0.layout$)) == null ? null : tmp_0_0.description), " ");
} }
function ProviderConfigurationComponent_c8y_li_26_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 15);
    ɵngcc0.ɵɵlistener("click", function ProviderConfigurationComponent_c8y_li_26_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const provider_r4 = restoredCtx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(); ctx_r5.changeProvider$.next(provider_r4); return ctx_r5.providerInput$.next(""); });
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵelement(2, "c8y-highlight", 16);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const provider_r4 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("active", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r1.selectedProvider$) === provider_r4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("text", provider_r4.displayName || "--")("pattern", ɵngcc0.ɵɵpipeBind1(3, 5, ctx_r1.providerInput$));
} }
function ProviderConfigurationComponent_formly_form_32_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "formly-form", 17);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("form", ctx_r2.form)("fields", ctx_r2.fields)("model", ctx_r2.model)("options", ctx_r2.options);
} }
function ProviderConfigurationComponent_div_34_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 21);
    ɵngcc0.ɵɵlistener("click", function ProviderConfigurationComponent_div_34_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.deleteProviderConfiguration(); });
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵpipe(7, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    let tmp_0_0;
    let tmp_1_0;
    let tmp_2_0;
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 7, (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(4, 9, ctx_r7.layout$)) == null ? null : tmp_0_0.deleteBtnLabel));
    ɵngcc0.ɵɵproperty("disabled", !((tmp_1_0 = ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r7.configuration$)) == null ? null : tmp_1_0.provider) && !((tmp_1_0 = ɵngcc0.ɵɵpipeBind1(2, 5, ctx_r7.configuration$)) == null ? null : tmp_1_0.providerName));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 11, (tmp_2_0 = ɵngcc0.ɵɵpipeBind1(7, 13, ctx_r7.layout$)) == null ? null : tmp_2_0.deleteBtnLabel), " ");
} }
function ProviderConfigurationComponent_div_34_button_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵpipe(5, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    let tmp_0_0;
    let tmp_2_0;
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(2, 5, ctx_r8.layout$)) == null ? null : tmp_0_0.saveBtnLabel));
    ɵngcc0.ɵɵproperty("disabled", ctx_r8.form.invalid || ctx_r8.form.pristine);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 7, (tmp_2_0 = ɵngcc0.ɵɵpipeBind1(5, 9, ctx_r8.layout$)) == null ? null : tmp_2_0.saveBtnLabel), " ");
} }
function ProviderConfigurationComponent_div_34_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtemplate(1, ProviderConfigurationComponent_div_34_button_1_Template, 8, 15, "button", 19);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, ProviderConfigurationComponent_div_34_button_3_Template, 6, 11, "button", 20);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    let tmp_0_0;
    let tmp_1_0;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIfAllowed", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r3.layout$)) == null ? null : tmp_0_0.deleteRoles);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIfAllowed", (tmp_1_0 = ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r3.layout$)) == null ? null : tmp_1_0.saveRoles);
} }
function fromTrigger(router, refresh, factories) {
    return merge(router.events.pipe(filter(evt => evt instanceof NavigationEnd)), ...castArray(refresh)).pipe(startWith(1), switchMap(() => fromFactories(factories, router)));
}
function fromTriggerOnce(router, refresh, factories) {
    return merge(...castArray(refresh)).pipe(startWith(1), switchMap(() => fromFactories(factories, router)));
}
function fromFactories(factories, router, withFirstEmpty = true) {
    return !Array.isArray(factories) || factories.length < 1
        ? of([])
        : defer(() => {
            const factoryObservables = resolveInjectedFactories(factories).map(f => {
                return toObservableOfArrays(Array.isArray(f) ? f : f && isFunction(f.get) ? f.get(getActivatedRoute(router)) : [f], withFirstEmpty);
            });
            return combineLatest(...factoryObservables);
        }).pipe(map(results => sortByPriority([].concat(...results))));
}
function resolveInjectedFactories(factories) {
    return flatten(factories.map(f => (isFunction(f) ? f() : [f])));
}
function stateToFactory(componentsState) {
    const components$ = componentsState.pipe(map((componentSet) => [...componentSet]));
    return { get: () => components$ };
}
function sortByPriority(items) {
    return sortBy(items, 'priority');
}
function toObservableOfArrays(factoryResult, withFirstEmpty) {
    let observable;
    if (!factoryResult) {
        return of([]);
    }
    else {
        observable = toObservable(factoryResult);
        if (withFirstEmpty) {
            const withEmptyFirst = observable.pipe(startWith([]));
            observable = race(observable, withEmptyFirst);
        }
    }
    return observable.pipe(map(result => (Array.isArray(result) ? result : [result]).filter(item => !!item)));
}
function isPromise(obj) {
    return !!obj && typeof obj.then === 'function';
}
/**
 * Converts any value provided to an Observable that emits this value once and then completes.
 * A convienience method to represent all the data as Observables rather than
 * a mixture of Observables and other types.
 *
 * @param value The value the resulting Observable will emit.
 */
function toObservable(value) {
    if (isObservable(value)) {
        return value;
    }
    if (isPromise(value)) {
        return from(value);
    }
    return of(value);
}
/**
 * Helper function to get the activated route in
 * a service (as ActivatedRoute injection only
 * works in components). Works as long as we only use
 * a tree and no child is active at the same time.
 *
 * @param router The current router
 */
function getActivatedRoute(router) {
    if (router && router.routerState && router.routerState.root) {
        let route = router.routerState.root;
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    }
}

/**
 * A abstract state which should be included in each state.
 * @abstract
 */
class StateService {
    /**
     * Maps to a property and just returns that property.
     * @param mappedProperty The property to map to.
     */
    map(mappedProperty) {
        return this.state$.pipe(map(mappedProperty), distinctUntilChanged());
    }
    /**
     * Emits a new state.
     */
    emitNewState() {
        this.state$.next(this.state);
    }
}

/**
 * A hook to add ActionBarItems using the multi provider extension concept.
 *
 * @example
 * ```typescript
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 * ```
 *
 */
const HOOK_ACTION_BAR = new InjectionToken('ActionBarFactory');
/**
 * A service which defines action-bar items via the multi provider concept.
 *
 * @example
 * ```typescript
 * // preferred way, multi provider concept:
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 *
 * // use services:
 * this.actionBarService.add({ template: SomeComponent, priority: 10, placement: 'left' });
 * ```
 */
class ActionBarService extends StateService {
    /**
     * @ignore
     */
    constructor(injector, router) {
        super();
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_ACTION_BAR, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map((items) => sortByPriority(items)), shareReplay(1));
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Refreshes the current store.
     */
    refresh() {
        this.refreshTrigger.next();
    }
    /**
     * Adds a new item to the action bar in the header and emits a state change.
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes an action bar item from the header and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
}
ActionBarService.ɵfac = function ActionBarService_Factory(t) { return new (t || ActionBarService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
ActionBarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActionBarService_Factory() { return new ActionBarService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: ActionBarService, providedIn: "root" });
ActionBarService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

/**
 * A <c8y-action-bar-item> can be added with content projection.
 * It allows to show items in three positions (left, right
 * or more).
 *
 * @example
 * ```html
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i c8yIcon="plus-circle"></i> Add random</button>
 * </c8y-action-bar-item>
 * ```
 */
class ActionBarItemComponent {
    /**
     * @ignore
     */
    constructor(actionBarService) {
        this.actionBarService = actionBarService;
        /**
         * Where the item should be shown. Use "more" to place
         * it in a dropdown on the right.
         */
        this.placement = 'left';
        /**
         * Priority for sorting the list. Higher priority means
         * an earlier position in the list.
         */
        this.priority = 0;
        /**
         * Adds additional classes to the item.
         */
        this.itemClass = '';
    }
    /**
     * @ignore
     */
    ngAfterViewInit() {
        this.viewInitTimeout = setTimeout(() => this.actionBarService.add(this));
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.actionBarService.remove(this);
    }
}
ActionBarItemComponent.ɵfac = function ActionBarItemComponent_Factory(t) { return new (t || ActionBarItemComponent)(ɵngcc0.ɵɵdirectiveInject(ActionBarService)); };
ActionBarItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActionBarItemComponent, selectors: [["c8y-action-bar-item"]], viewQuery: function ActionBarItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { placement: "placement", priority: "priority", itemClass: "itemClass" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""]], template: function ActionBarItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ActionBarItemComponent_ng_template_0_Template, 2, 3, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
ActionBarItemComponent.ctorParameters = () => [
    { type: ActionBarService }
];
ActionBarItemComponent.propDecorators = {
    placement: [{ type: Input }],
    priority: [{ type: Input }],
    itemClass: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: false },] }]
};

/*
 * -----------------------------WARNING---------------------------------
 * This file has an *exact* copy in packages/cli/src/webpack/.
 * Any changes to this file must be reflected there, too.
 */
class ApplicationOptions {
}

const HOOK_OPTIONS = new InjectionToken('App options');
/**
 * A service that allows to set or get application options
 * which configure the default behavior of the UI.
 */
class OptionsService extends ApplicationOptions {
    constructor(options, systemOptionsService, tenantOptionService) {
        super();
        this.systemOptionsService = systemOptionsService;
        this.tenantOptionService = tenantOptionService;
        this.setupOptions(options);
    }
    /**
     * Returns an application option used to configure the UI.
     * @param optionKey The application options key.
     * @param defaultValue A value to return if non is set.
     * @param attemptParse Indicates whether the value should be parsed with JSON.parse.
     */
    get(optionKey, defaultValue, attemptParse) {
        let value = this[optionKey];
        if (typeof value === 'undefined') {
            value = this[camelCase(optionKey)];
        }
        if (attemptParse) {
            return this.parseOptionRawValue(value, defaultValue);
        }
        return typeof value !== 'undefined' ? value : defaultValue;
    }
    /**
     * Sets an application option.
     * @param key The key to set.
     * @param value The value to set.
     */
    set(key, value) {
        this[camelCase(key)] = value;
    }
    /**
     * Gets support url from tenant options.
     * If response returns '404 not found' it gets the support url from application options.
     * If the support link within application options is not provided the UI will use the system options.
     * Is the support link explicitly set to false it will be hidden.
     *
     * @returns Returns support url or false.
     */
    getSupportUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            let url = yield this.getTenantOption('configuration', 'system.support.url');
            if (isUndefined(url)) {
                url = this.supportUrl;
            }
            this.supportUrl = isUndefined(url)
                ? (yield this.getSystemOption('support', 'url')) || false
                : url;
            return this.supportUrl;
        });
    }
    /**
     * Returns if the tenant allows to show the activate-support user menu entry.
     * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.
     */
    getActivateSupportUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const option = yield this.getSystemOption('support-user', 'enabled', true);
            return !option;
        });
    }
    /**
     * Gets a value from the system service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getSystemOption(category, key, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getOptionFromService(category, key, this.systemOptionsService, defaultValue);
        });
    }
    /**
     * Gets a value from the tenant service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getTenantOption(category, key, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getOptionFromService(category, key, this.tenantOptionService, defaultValue);
        });
    }
    setupOptions(options) {
        if (options) {
            if (!Array.isArray(options)) {
                options = [options];
            }
            options.forEach(optionMap => {
                if (optionMap) {
                    Object.keys(optionMap).forEach(key => {
                        this[camelCase(key)] = optionMap[key];
                    });
                }
            });
        }
    }
    getOptionFromService(category, key, service, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield service.detail({ category, key });
                return this.parseOptionRawValue(data.value, defaultValue);
            }
            catch (ex) {
                return defaultValue;
            }
        });
    }
    parseOptionRawValue(rawValue, defaultValue) {
        let value;
        try {
            value = JSON.parse(rawValue);
        }
        catch (e) {
            value = isUndefined(rawValue) ? defaultValue : rawValue;
        }
        return value;
    }
}
OptionsService.ɵfac = function OptionsService_Factory(t) { return new (t || OptionsService)(ɵngcc0.ɵɵinject(HOOK_OPTIONS, 8), ɵngcc0.ɵɵinject(ɵngcc2.SystemOptionsService), ɵngcc0.ɵɵinject(ɵngcc2.TenantOptionsService)); };
OptionsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OptionsService, factory: OptionsService.ɵfac });
OptionsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_OPTIONS,] }] },
    { type: SystemOptionsService },
    { type: TenantOptionsService }
];

/**
 * Decorator to throttle functions call.
 * @param wait throttle time.
 * @param options set triggers, eg on trailing edge or falling edge,
 * see lodash documentation for details
 */
function throttle(wait, options) {
    return (target, fnName, descriptor) => {
        const fn = descriptor.value;
        descriptor.value = function (...args) {
            const throttledFnName = `_${fnName}Throttled`;
            if (!this[throttledFnName]) {
                this[throttledFnName] = throttle$1(fn, wait, options);
            }
            return this[throttledFnName].apply(this, args);
        };
    };
}

class AppStateService extends StateService {
    constructor(applicationService, apiService, options, fetchClient, tenantLoginOptionsService) {
        super();
        this.applicationService = applicationService;
        this.apiService = apiService;
        this.options = options;
        this.fetchClient = fetchClient;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.state$ = new BehaviorSubject({
            app: {
                name: this.options.name,
                contextPath: this.getCurrentContextPath() || this.options.contextPath
            },
            supportUrl: this.options.supportUrl,
            lang: this.options.get('defaultLanguage', 'en'),
            langs: this.getLangs(),
            langsDetail: this.options.languages,
            loginOptions: this.options.loginOptions,
            activateSupportUserAvailable: undefined,
            versions: {
                backend: undefined,
                ui: this.options.versions || { ngx: undefined }
            },
            hidePowered: this.options.hidePowered,
            isLoading: false,
            showRightDrawer: this.options.rightDrawer,
            loginExtraLink: this.options.get('login_extra_link'),
            newsletter: this.options.newsletter
        });
        this.currentSupportUserName = new BehaviorSubject(null);
        this.currentUser = new BehaviorSubject(null);
        this.currentTenant = new BehaviorSubject(null);
        this.currentApplication = new BehaviorSubject(null);
        this.currentApplicationConfig = new BehaviorSubject(null);
        this.apiService.calls
            .pipe(filter(({ url }) => !/notification\/realtime/.test(url)), map(({ phase }) => (phase === 'start' ? 1 : -1)), scan((count, item) => count + item, 0), map(count => count > 0), distinctUntilChanged())
            .subscribe(isLoading => (this.state.isLoading = isLoading));
        this.assignApplicationKeyToDefaultHeaders();
    }
    assignApplicationKeyToDefaultHeaders() {
        if (!isDevMode()) {
            this.fetchClient.defaultHeaders = Object.assign(Object.assign({}, (this.fetchClient.defaultHeaders || {})), { 'X-Cumulocity-Application-Key': this.options.key });
        }
    }
    /**
     * Returns the current state.
     */
    get state() {
        return this.state$.value;
    }
    getLangs() {
        const { languages } = this.options;
        return languages ? keys(languages).filter(k => languages[k]) : [];
    }
    /**
     * Returns the correct UI version. In hybrid mode for angular and ngx.
     */
    get uiVersion() {
        const version = this.state.versions.ui;
        return version.ngx || version.ng1;
    }
    /**
     * Loads the app manifest. If no access -> throw an error to verify app access.
     */
    loadManifest() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { application } = (yield this.applicationService.detail(`${this.state.app.contextPath}/manifest`)).data;
                this.state.app.manifest = application;
                this.state.app.id = application.id;
                const { data } = yield this.applicationService.detail(application.id);
                this.currentApplication.next(data);
                this.currentApplicationConfig.next(data.config);
                yield this.loadDefaultOptions();
            }
            catch (ex) {
                throw ex;
            }
        });
    }
    /**
     * Dynamic options are stored on the API in a specific config: {} object. They can
     * be used to configure the app dynamically.
     *
     * Note: To avoids conflicts with the default Config, it is recommended
     * to use a certain namespace.
     */
    updateApplicationConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: currentApp } = yield this.applicationService.detail(this.state.app.id);
            const currentConfig = (currentApp === null || currentApp === void 0 ? void 0 : currentApp.config) || {};
            const newConfig = Object.assign(Object.assign({}, currentConfig), config);
            this.currentApplicationConfig.next(newConfig);
            return this.applicationService.update({
                id: this.state.app.id,
                config: newConfig
            });
        });
    }
    /**
     * When this function called, it refreshes the values of loginOptions stored within ui state object.
     * Function is throttled to execute the refresh once in a time specified by params of @throttled decorator,
     * it should be called on leading edge of the timeout.
     */
    refreshLoginOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const loginOptions = (yield this.tenantLoginOptionsService.listForCurrentTenant()).data;
            this.state$.next(Object.assign(Object.assign({}, this.state), { loginOptions }));
        });
    }
    /**
     * Checks current users application list and matches it against given application name.
     * Returns true if application is in the list.
     * @param name application name
     */
    isApplicationAvailable(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser(undefined, { pageSize: 100 });
            return data.some(app => app.name === name);
        });
    }
    /**
     * Sets current user (including support user).
     * @param userInfo Info about current user and support user to be set.
     */
    setUser(userInfo) {
        this.currentSupportUserName.next(userInfo.supportUserName || null);
        this.currentUser.next(userInfo.user);
    }
    /**
     * Verifies if the current application is owned by the current tenant.
     * @param app The application to verify.
     * @returns true if it belongs to the current tenant.
     */
    isOwnerOfApplication(app) {
        if (!app) {
            app = this.currentApplication.value;
        }
        const currentTenant = this.currentTenant.value;
        const appOwner = get(app, 'owner.tenant.id');
        return currentTenant.name === appOwner;
    }
    getCurrentContextPath() {
        const match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
        return match && match[2];
    }
    loadDefaultOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            this.state.supportUrl = yield this.options.getSupportUrl();
            this.state.activateSupportUserAvailable = yield this.options.getActivateSupportUser();
            this.state.versions.backend = yield this.options.getSystemOption('system', 'version');
            try {
                this.showIncompatibleVersionsError();
            }
            catch (ex) {
                // ignore this
            }
            this.emitNewState();
        });
    }
    showIncompatibleVersionsError() {
        const uiVersion = this.state.versions.ui.ngx;
        const backendVersion = this.state.versions.backend;
        const uiVersionArray = uiVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        const beVersionArray = backendVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        const multiplier = Math.pow(10, Math.ceil(Math.log10(Math.max(...uiVersionArray, ...beVersionArray) + 1)));
        const sumReducer = (acc, cur) => acc + cur;
        const calculateVersionMapper = (curr, idx) => curr * (multiplier / Math.pow(10, idx));
        const uiVersionNumber = uiVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        const beVersionNumber = beVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        const showError = uiVersionNumber > beVersionNumber;
        if (showError) {
            const errorContent = `You are running version ${uiVersion} of the UI and version ${backendVersion} of backend!`;
            console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
        }
    }
}
AppStateService.ɵfac = function AppStateService_Factory(t) { return new (t || AppStateService)(ɵngcc0.ɵɵinject(ɵngcc3.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc2.ApiService), ɵngcc0.ɵɵinject(OptionsService), ɵngcc0.ɵɵinject(ɵngcc3.FetchClient), ɵngcc0.ɵɵinject(ɵngcc3.TenantLoginOptionsService)); };
AppStateService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AppStateService, factory: AppStateService.ɵfac });
AppStateService.ctorParameters = () => [
    { type: ApplicationService },
    { type: ApiService },
    { type: OptionsService },
    { type: FetchClient },
    { type: TenantLoginOptionsService }
];
__decorate([
    throttle(600, { trailing: false })
], AppStateService.prototype, "refreshLoginOptions", null);

const LANGUAGES = new InjectionToken('Languages');

const LOCALE_PATH = new InjectionToken('Locale path');

const HOOK_PATTERN_MESSAGES = new InjectionToken('Pattern Messages');

/**
 * A service to translate messages by using regexp patterns.
 */
class PatternMessagesService {
    constructor(patterns) {
        this.patterns = {};
        this.pipes = {
            absoluteDate: (date) => formatDate(date, 'medium', this.translateService.currentLang),
            translate: (key) => this.translateService.instant(key)
        };
        each(patterns, (pattern) => {
            Object.assign(this.patterns, pattern);
        });
    }
    translate(message) {
        const translation = this.translateWithPatterns(message);
        return (translation !== message) ? translation : '';
    }
    translateWithPatterns(message, patterns = this.patterns) {
        let translatedMessage = message;
        each(patterns, (patternCfg, pattern) => {
            const globalRegExp = new RegExp(pattern, 'g');
            let globalMatch;
            if (!globalRegExp.test(translatedMessage)) {
                return;
            }
            globalRegExp.test(''); // reset the regexp
            globalMatch = globalRegExp.exec(translatedMessage);
            while (globalMatch !== null) {
                const [localMatch] = globalMatch;
                const placeholderValues = mapValues(patternCfg.placeholders, (placeholder) => {
                    const expr = placeholder.capture || placeholder;
                    let replacement = localMatch.replace(new RegExp(pattern, 'g'), expr);
                    if (placeholder.translate) {
                        replacement = this.translateWithPatterns(replacement, placeholder.translate);
                    }
                    return replacement;
                });
                translatedMessage = translatedMessage.replace(localMatch, this.translateWithParams(patternCfg, placeholderValues));
                globalMatch = globalRegExp.exec(translatedMessage);
            }
        });
        return translatedMessage;
    }
    translateWithParams(patternCfg, params = {}) {
        const { defaultLang, currentLang, compiler } = this.translateService;
        const translations = this.translateService.store.translations[currentLang];
        const defaultTranslations = this.translateService.store.translations[defaultLang];
        const originalKey = patternCfg.gettext;
        let originalValue = originalKey;
        if (translations) {
            if (translations[originalKey]) {
                originalValue = translations[originalKey];
            }
            else if (defaultTranslations) {
                if (defaultTranslations[originalKey]) {
                    originalValue = defaultTranslations[originalKey];
                }
            }
        }
        let key = originalKey;
        let value = originalValue;
        const interpolateParams = Object.assign(Object.assign({}, params), { noPatternMessages: true });
        let match;
        const pipeRegex = RegExp('{{\\s*([^\\s]+)\\s*\\|\\s*([^\\s]+)\\s*}}', 'g');
        // tslint:disable-next-line:no-conditional-assignment
        while ((match = pipeRegex.exec(originalKey)) !== null) {
            const [placeholder, paramName, pipeName] = match;
            if (this.pipes[pipeName]) {
                key = key.replace(placeholder, `{{${paramName}}}`);
                value = value.replace(placeholder, `{{${paramName}}}`);
                interpolateParams[paramName] = this.pipes[pipeName](params[paramName]);
            }
        }
        if (translations) {
            translations[key] = compiler.compile(value, currentLang);
        }
        return this.translateService.instant(key, interpolateParams);
    }
}
PatternMessagesService.ɵfac = function PatternMessagesService_Factory(t) { return new (t || PatternMessagesService)(ɵngcc0.ɵɵinject(HOOK_PATTERN_MESSAGES)); };
PatternMessagesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PatternMessagesService_Factory() { return new PatternMessagesService(i0.ɵɵinject(HOOK_PATTERN_MESSAGES)); }, token: PatternMessagesService, providedIn: "root" });
PatternMessagesService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HOOK_PATTERN_MESSAGES,] }] }
];

class MissingTranslationCustomHandler {
    constructor(parser, patternMessagesService) {
        this.parser = parser;
        this.patternMessagesService = patternMessagesService;
        this.cache = {};
    }
    handle(params) {
        const { key: messageKey, interpolateParams, translateService } = params;
        this.translateService = translateService;
        let translation = this.getFromCache(messageKey, interpolateParams);
        if (!translation) {
            const patternMessageTranslation = this.getPatternMessageTranslation(messageKey, interpolateParams);
            if (patternMessageTranslation) {
                translation = patternMessageTranslation;
            }
            else {
                translation = this.parser.interpolate(messageKey, interpolateParams);
            }
            this.addToCache(messageKey, interpolateParams, translation);
        }
        return translation;
    }
    getFromCache(messageKey, interpolateParams) {
        const { currentLang } = this.translateService;
        const currentCache = this.cache[currentLang] || {};
        const cacheKey = this.getCacheKey(messageKey, interpolateParams);
        return currentCache[cacheKey];
    }
    addToCache(messageKey, interpolateParams, translation) {
        const { currentLang } = this.translateService;
        const currentCache = this.cache[currentLang] = this.cache[currentLang] || {};
        const cacheKey = this.getCacheKey(messageKey, interpolateParams);
        currentCache[cacheKey] = translation;
    }
    getCacheKey(messageKey, interpolateParams) {
        return interpolateParams ? `${messageKey} ${JSON.stringify(interpolateParams)}` : messageKey;
    }
    getPatternMessageTranslation(messageKey, interpolateParams) {
        const shouldTryPatternMessages = !interpolateParams || !(interpolateParams.noPatternMessages);
        if (shouldTryPatternMessages) {
            if (!this.patternMessagesService.translateService) {
                this.patternMessagesService.translateService = this.translateService;
            }
            return this.patternMessagesService.translate(messageKey);
        }
        return undefined;
    }
}
MissingTranslationCustomHandler.ɵfac = function MissingTranslationCustomHandler_Factory(t) { return new (t || MissingTranslationCustomHandler)(ɵngcc0.ɵɵinject(ɵngcc4.TranslateParser), ɵngcc0.ɵɵinject(PatternMessagesService)); };
MissingTranslationCustomHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MissingTranslationCustomHandler, factory: MissingTranslationCustomHandler.ɵfac });
MissingTranslationCustomHandler.ctorParameters = () => [
    { type: TranslateParser },
    { type: PatternMessagesService }
];

// Just for translation annotation
// Note: Own file because of conflicts if put in barrel directly.
const _ = (str) => str;
function gettext(str) {
    return str;
}

/* tslint:disable:max-line-length */
const bulkOperationAuditLogTextPlaceholders = {
    updatesList: {
        capture: '$1',
        translate: {
            "status='(.+?)'": {
                gettext: gettext('status: "{{ status | translate }}"'),
                placeholders: {
                    status: '$1'
                }
            },
            "generalStatus='(.+?)'": {
                gettext: gettext('general status: "{{ generalStatus | translate }}"'),
                placeholders: {
                    generalStatus: '$1'
                }
            },
            "progress='(.+?)'": {
                gettext: gettext('progress: "{{ progress }}"'),
                placeholders: {
                    progress: '$1'
                }
            },
            'note=(.+?)': {
                gettext: gettext('note: "{{ note }}"'),
                placeholders: {
                    note: '$1'
                }
            }
        }
    }
};
const MESSAGES = {
    '^Access is denied$': {
        gettext: gettext('Access denied.')
    },
    '^Alarm created$': {
        gettext: gettext('Alarm created')
    },
    '^Alarm updated$': {
        gettext: gettext('Alarm updated')
    },
    '^API is not available with the new domain$': {
        gettext: gettext('Could not activate custom domain. DNS setup is incorrect.')
    },
    '^Application with given name already exist$': {
        gettext: gettext('Application with given name already exists.')
    },
    '^Application with id (.+?) is already assigned to the tenant (.+?)$': {
        gettext: gettext('This application is already assigned to tenant "{{tenant}}".'),
        placeholders: {
            tenant: '$2'
        }
    },
    '^Apply software changes: (.+?)\\.?$': {
        gettext: gettext('Apply software changes: {{ softwareChanges }}'),
        placeholders: {
            softwareChanges: {
                capture: '$1',
                translate: {
                    'install "(.+?)" \\(version: (.+?)\\)': {
                        gettext: gettext('install "{{ softwareName }}" (version: {{ softwareVersion }})'),
                        placeholders: {
                            softwareName: '$1',
                            softwareVersion: '$2'
                        }
                    },
                    'install "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: gettext('install "{{ softwareName }}"'),
                        placeholders: {
                            softwareName: '$1'
                        }
                    },
                    'delete "(.+?)" \\(version: (.+?)\\)': {
                        gettext: gettext('delete "{{ softwareName }}" (version: {{ softwareVersion }})'),
                        placeholders: {
                            softwareName: '$1',
                            softwareVersion: '$2'
                        }
                    },
                    'delete "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: gettext('delete "{{ softwareName }}"'),
                        placeholders: {
                            softwareName: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Assign device profile (.+?) to device (.+?)$': {
        gettext: gettext('Assign device profile {{profileName}} to device {{deviceName}}'),
        placeholders: {
            profileName: '$1',
            deviceName: '$2'
        }
    },
    '^(.+)pplication for tenant (.+) with properties \\( (.+?) \\) already exists$': {
        gettext: gettext('Application for tenant "{{tenant}}" with the following values ({{valuesList}}) already exists.'),
        placeholders: {
            tenant: '$2',
            valuesList: '$3'
        }
    },
    '^Authentication failed! : User account is locked$': {
        gettext: gettext('Authentication failed due to: user account is locked.')
    },
    '^Availability monitoring record$': {
        gettext: gettext('Availability monitoring record')
    },
    '^Can not activate a certificate which is either expired or not yet valid$': {
        gettext: gettext('Cannot activate a certificate which is either expired or not yet valid.')
    },
    '^Cannot add certificate - certificate with (.+?) fingerprint already exists. : Certificate with (.+?) fingerprint already exists.': {
        gettext: gettext('Could not add certificate. Certificate with {{fingerprint}} fingerprint already exists.'),
        placeholders: {
            fingerprint: '$1'
        }
    },
    '^Cannot change password. : Provided token does not exist.$': {
        gettext: gettext('Cannot change password: provided token is invalid.')
    },
    '^Cannot deploy module (.*)$': {
        gettext: gettext('Cannot deploy module due to error: "{{ errorMessage | translate }}".'),
        placeholders: {
            errorMessage: '$1'
        }
    },
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}.'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6'
        }
    },
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}} near reserved keyword "{{keyword}}".'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6',
            keyword: '$7'
        }
    },
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+), please check the where clause \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}, check "where" clause.'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6'
        }
    },
    "^Cannot deploy module (.+?)! : Deployment failed in module '(.+?)' in expression '(.+?)' : Exception compiling script '(.+?)' of dialect '(.+?)': missing (.+?) before statement \\((.+?)\\) \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": exception compiling script "{{scriptName}}" of dialect "{{scriptDialect}}": missing "{{missingSyntax}}" before statement "{{affectedStatement}}".'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            scriptName: '$4',
            scriptDialect: '$5',
            missingSyntax: '$6',
            affectedStatement: '$7'
        }
    },
    "^Cannot execute bulk operation on empty group. Group with id='(\\d+?)' doesn't have child assets.$": {
        gettext: gettext('Could not execute bulk operation on an empty group. Group with ID "{{groupId}}" has no child assets.'),
        placeholders: {
            groupId: '$1'
        }
    },
    "^Cannot execute bulk operation on empty group. DynamicGroup with id='(\\d+?)' doesn't have child assets$": {
        gettext: gettext('Could not execute bulk operation on an empty group. Smart group with ID "{{groupId}}" has no child assets.'),
        placeholders: {
            groupId: '$1'
        }
    },
    '^Cannot parse X509 certificate. : Could not parse certificate: (.+?)$': {
        gettext: gettext('Could not parse X.509 certificate: {{ failureReason | translate }}.'),
        placeholders: {
            failureReason: '$1'
        }
    },
    '^Cannot reschedule bulk operation. All its operations are successful$': {
        gettext: gettext('Cannot reschedule bulk operation. All its operations are already successful.')
    },
    '^Cannot reset user password : Cannot find user with such email.$': {
        gettext: gettext('Cannot reset password for user with such email: email not found.')
    },
    '^Cannot update/delete application binary via this endpoint$': {
        gettext: gettext('Cannot update/delete application binary via this endpoint')
    },
    "^Can't delete user because it is used by another managed object$": {
        gettext: gettext('Cannot delete device with associated device owner because this owner is still assigned to other device(s). Try to remove only the device.')
    },
    '^Cep module created$': {
        gettext: gettext('CEP module created')
    },
    '^Cep module updated$': {
        gettext: gettext('CEP module updated')
    },
    '^Cep module deleted$': {
        gettext: gettext('CEP module deleted')
    },
    '^Cep module "(.+?)" created$': {
        gettext: gettext('CEP module "{{name}}" created'),
        placeholders: {
            name: '$1'
        }
    },
    '^Cep module "(.+?)" updated$': {
        gettext: gettext('CEP module "{{name}}" updated'),
        placeholders: {
            name: '$1'
        }
    },
    '^Cep module "(.+?)" deleted$': {
        gettext: gettext('CEP module "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^Command state is invalid: (.+)$': {
        gettext: gettext('Command state is invalid: {{violations}}'),
        placeholders: {
            violations: {
                capture: '$1',
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: gettext('"{{field}}" must not be null'),
                        placeholders: {
                            field: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Could not connect to endpoint (.+)\\. Could not verify `(.+)` host key with fingerprint `(.+)` for `(.+)` on port (.+)\\. If you expected that key, please remove the previous one from configuration to allow for connection\\.$': {
        gettext: gettext('Could not connect to endpoint "{{endpointName}}". Could not verify {{keyType}} host key with fingerprint {{fingerprint}} for host {{host}} on port {{port}}. If you expected this key, please remove the previous one from configuration to allow for connection.'),
        placeholders: {
            endpointName: '$1',
            keyType: '$2',
            fingerprint: '$3',
            host: '$4',
            port: '$5'
        }
    },
    '^Could not login to ssh server on endpoint "(.+)"\\. Provided credential for user "(.+)" is incorrect\\.$': {
        gettext: gettext('Could not access SSH server on endpoint "{{endpointName}}". Provided credentials for user "{{userName}}" are incorrect.'),
        placeholders: {
            endpointName: '$1',
            userName: '$2'
        }
    },
    '^Could not save object remoteAccessUpdate: (.+)$': {
        gettext: '{{errorMessages}}',
        placeholders: {
            errorMessages: {
                capture: '$1',
                translate: {
                    'Could not recognize host-key format': {
                        gettext: gettext('Could not recognize "Host key" format')
                    },
                    'Could not recognize key-pair format': {
                        gettext: gettext('Could not recognize the format of "Public key" or "Private key"')
                    }
                }
            }
        }
    },
    '^Could not update user. : Error persisting user (.+?)!$': {
        gettext: gettext('Could not update user "{{username}}".'),
        placeholders: {
            username: '$1'
        }
    },
    '^Create bulk operation$': {
        gettext: gettext('Create bulk operation')
    },
    '^Create bulk operation: (.+)$': {
        gettext: gettext('Create bulk operation: {{updatesList}}'),
        placeholders: bulkOperationAuditLogTextPlaceholders
    },
    '^Creation ramp must be greater than (\\d+?)$': {
        gettext: gettext('Bulk operation delay must be greater than {{minSeconds}} seconds.'),
        placeholders: {
            minSeconds: '$1'
        }
    },
    '^Created container$': {
        gettext: gettext('Container created.')
    },
    '^Created pod: (.+)$': {
        gettext: gettext('Pod "{{imageName}}" created.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Creating device on LoRa platform failed$': {
        gettext: gettext('Could not create the device in the LoRa platform.')
    },
    '^CSV file contained empty dataset$': {
        gettext: gettext('No entries found in uploaded CSV file.')
    },
    '^Cycle detected for route (.+?)!$': {
        gettext: gettext('Cycle detected for route {{route}}.'),
        placeholders: {
            route: '$1'
        }
    },
    '^Data broker processing is currently overloaded and may stop forwarding your data\\. Please contact support\\.$': {
        gettext: gettext('Data broker processing is currently overloaded and may stop forwarding your data. Please contact support.')
    },
    '^Data broker processing is not able to connect do destination tenant, thus data forwarding is not working\\. Please contact support\\.$': {
        gettext: gettext('Data broker processing is not able to connect to destination tenant, thus data forwarding is not working. Please contact support.')
    },
    // DataHub global roles' names:
    '^DATAHUB_ADMINISTRATOR$': {
        gettext: gettext('DataHub Administrator')
    },
    '^DATAHUB_MANAGER$': {
        gettext: gettext('DataHub Manager')
    },
    '^DATAHUB_READER$': {
        gettext: gettext('DataHub Reader')
    },
    '^Delete bulk operation$': {
        gettext: gettext('Delete bulk operation')
    },
    '^Delete bulk operation: (.+)$': {
        gettext: gettext('Delete bulk operation: {{updatesList}}'),
        placeholders: bulkOperationAuditLogTextPlaceholders
    },
    "^Device id '(.+?)' contains '(.+?)' character which is not permitted.$": {
        gettext: gettext('ID "{{deviceId}}" contains invalid character: "{{invalidCharacter}}".'),
        placeholders: {
            deviceId: '$1',
            invalidCharacter: '$2'
        }
    },
    "^Device name: '(.+?)', alarm text: '(.+?)'$": {
        gettext: gettext('Device name: "{{deviceName}}", alarm text: "{{alarmText | translate}}"'),
        placeholders: {
            deviceName: '$1',
            alarmText: '$2'
        }
    },
    '^Device (.+?) already registered to a tenant.$': {
        gettext: gettext('Device {{ devEUI }} is already registered in your tenant or in another tenant in the platform.'),
        placeholders: {
            devEUI: '$1'
        }
    },
    '^Display name$': {
        gettext: gettext('Login alias')
    },
    '^Domain name in uploaded certificate differs from the one in use$': {
        gettext: gettext('Domain name in uploaded certificate differs from the one in use. Please deactivate the custom domain before uploading new certificate.')
    },
    '^Domain name is already in use by another tenant!$': {
        gettext: gettext('Domain name is already used by another tenant.')
    },
    '^Duplicated connector for instanceUrl (.+?)!$': {
        gettext: gettext('Target URL {{targetUrl}} already used by another connector.'),
        placeholders: {
            targetUrl: '$1'
        }
    },
    '^Duplicated connector for name (.+?)!$': {
        gettext: gettext('Connector name "{{name}}" already used by another connector.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Entry is outside of the target dir: (.+)$': {
        gettext: gettext('File entry outside of the target directory: "{{path}}".'),
        placeholders: {
            path: '$1'
        }
    },
    '^Error during password validation. : Password must have at least (\\d+?) characters and no more than (\\d+?) and must contain only Latin1 characters.$': {
        gettext: gettext('Password is invalid. It must have at least {{minCharactersCount}} and no more than {{maxCharactersCount}} characters.'),
        placeholders: {
            minCharactersCount: '$1',
            maxCharactersCount: '$2'
        }
    },
    '^Error during password validation. : Your password has been used already. Choose another.$': {
        gettext: gettext('This password has already been used earlier. Use a different one.')
    },
    "^Error in statement (.+?):(.+?)! : Incorrect syntax near '(.+?)' near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Error in statement {{moduleName}}:{{statementNumber}}. Incorrect syntax near expression "{{expression}}" near reserved keyword "{{keyword}}".'),
        placeholders: {
            moduleName: '$1',
            statementNumber: '$2',
            expression: '$3',
            keyword: '$4'
        }
    },
    '^External id not found; external id = ID \\[type=(.+?), value=(.+?)\\]$': {
        gettext: gettext('External ID not found for type "{{type}}" and value "{{value}}".'),
        placeholders: {
            type: '$1',
            value: '$2'
        }
    },
    '^Error occurred when trying to find an Application for id ID (.+) : Could not find application by ID (\\d+)$': {
        gettext: gettext('Could not find application by ID {{applicationId}}.'),
        placeholders: {
            applicationId: '$2'
        }
    },
    '^Http status code: 404\n{error="options/Not Found",message="Unable to find option by given key: sigfox-agent/provider.token",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"}': {
        gettext: gettext('Unable to find option by given key: sigfox-agent/provider.token')
    },
    '^Failed to delete application.  : Cannot remove application assigned to other tenants.$': {
        gettext: gettext('Could not delete application assigned to other tenants.')
    },
    '^Failed to extract certificate from PKCS12$': {
        gettext: gettext('Failed to extract certificate from PKCS12.')
    },
    '^Failed to update domain at the platform$': {
        gettext: gettext('Failed to update domain at the platform.')
    },
    "^Finding device data from database failed : No managedObject for id '(.+?)'!$": {
        gettext: gettext('Could not find managed object with ID "{{deviceId}}".'),
        placeholders: {
            deviceId: '$1'
        }
    },
    '^Following mandatory fields should be included: (.+?)$': {
        gettext: gettext('Following mandatory fields should be included: {{fields}}'),
        placeholders: {
            fields: '$1'
        }
    },
    '^Global Role updated$': {
        gettext: gettext('Global role updated')
    },
    '^Global Role (.+?) updated$': {
        gettext: gettext('Global role "{{name}}" updated'),
        placeholders: {
            name: '$1'
        }
    },
    '^Global Role (.+?) updated: (.+)$': {
        gettext: gettext('Global role "{{name}}" updated: {{updatesList}}'),
        placeholders: {
            name: '$1',
            updatesList: {
                capture: '$2',
                translate: {
                    'applications \\[([^\\]]+?)\\] added': {
                        gettext: gettext('applications {{list}} added'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'applications \\[([^\\]]+?)\\] removed': {
                        gettext: gettext('applications {{list}} removed'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'roles \\[([^\\]]+?)\\] added': {
                        gettext: gettext('roles {{list}} added'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'roles \\[([^\\]]+?)\\] removed': {
                        gettext: gettext('roles {{list}} removed'),
                        placeholders: {
                            list: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Global Roles$': {
        gettext: gettext('Global roles')
    },
    '^Operation updated: (.+)$': {
        gettext: gettext('Operation updated: {{updatesList}}'),
        placeholders: {
            updatesList: {
                capture: '$1',
                translate: {
                    "status='(.+?)'": {
                        gettext: gettext('status: "{{ status | translate }}"'),
                        placeholders: {
                            status: '$1'
                        }
                    },
                    "description='(.+?)'": {
                        gettext: gettext('description: "{{ description | translate }}"'),
                        placeholders: {
                            description: '$1'
                        }
                    },
                    "device name='(.+?)'": {
                        gettext: gettext('device name: "{{ deviceName }}"'),
                        placeholders: {
                            deviceName: '$1'
                        }
                    },
                    "failure reason='(.+?)'": {
                        gettext: gettext('failure reason: "{{ failureReason | translate }}"'),
                        placeholders: {
                            failureReason: '$1'
                        }
                    }
                }
            }
        }
    },
    '^ID \\[type=(.+?), value=(.+?)\\] was already bound to different Global ID.$': {
        gettext: gettext('External ID "{{value}}" of the type "{{type}}" already exists.'),
        placeholders: {
            type: '$1',
            value: '$2'
        }
    },
    '^Invalid credentials! : Bad credentials$': {
        gettext: gettext('Invalid credentials.')
    },
    '^Invalid credentials! : No phone number provided$': {
        gettext: gettext('Log into the management tenant first and enter your phone number.')
    },
    '^Inventory Role removed$': {
        gettext: gettext('Inventory role removed')
    },
    '^Inventory Role (.+?) removed': {
        gettext: gettext('Inventory role "{{name}}" deleted.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Inventory Role updated$': {
        gettext: gettext('Inventory role updated')
    },
    '^Inventory Role (.+?) updated': {
        gettext: gettext('Inventory role "{{name}}" updated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^I/O error: Connection refused; nested exception is Connection refused : Connection refused': {
        gettext: gettext('Connection refused')
    },
    '^I/O error: Read timed out; nested exception is Read timed out : Read timed out': {
        gettext: gettext('Read timed out')
    },
    '^Log file requested$': {
        gettext: gettext('Log file requested.')
    },
    '^Managed object deleted$': {
        gettext: gettext('Managed object deleted')
    },
    '^Managed object "(.+?)" deleted$': {
        gettext: gettext('Managed object "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^Maximum file size exceeded$': {
        gettext: gettext('Maximum file size exceeded.')
    },
    "^Message with ID (.+?) doesn't exist in smart rest template (.+?)$": {
        gettext: gettext('Message with ID "{{messageId}}" doesn\'t exist in SmartREST template with ID "{{templateId}}"'),
        placeholders: {
            messageId: '$1',
            templateId: '$2'
        }
    },
    '^name of Application cannot start with \'(.+)\' prefix.$': {
        gettext: gettext('Application name must not start with "{{ prefix }}".'),
        placeholders: {
            prefix: '$1'
        }
    },
    '^NewDeviceRequest for id = (.+?) already exists.$': {
        gettext: gettext('Device registration request with ID {{id}} already exists.'),
        placeholders: {
            id: '$1'
        }
    },
    '^NewDeviceRequest for device id (.+?) is in state BLOCKED, not PENDING_ACCEPTANCE.$': {
        gettext: gettext('Device registration request with ID "{{deviceId}}" is in state "Blocked", not "Pending acceptance". Remove this registration request and start over.'),
        placeholders: {
            deviceId: '$1'
        }
    },
    '^No communication with device since (.+?)$': {
        gettext: gettext('No communication with device since {{timestamp | absoluteDate}}.'),
        placeholders: {
            timestamp: '$1'
        }
    },
    '^No data received from device within required interval.$': {
        gettext: gettext('No data received from device within required interval.')
    },
    '^No LoRa provider settings are found. Please configure the connectivity settings.$': {
        gettext: gettext('No LoRa provider settings are found. Please configure the connectivity settings.')
    },
    '^Not within any context!$': {
        gettext: gettext('A problem occurred with microservice subscription.')
    },
    '^Maximum age cannot be bigger than 10 years.$': {
        gettext: gettext('Maximum age cannot be bigger than 10 years.')
    },
    '^Microservice application name incorrect. Please use only lower-case letters, digits and dashes. Maximum length is (\\d+) characters.$': {
        gettext: gettext('Microservice application name is incorrect: only lower case letters, digits and dashes allowed. Maximum length: {{maxLength}}.'),
        placeholders: {
            maxLength: '$1'
        }
    },
    '^Microservice not available.*$': {
        gettext: gettext('Microservice is not available.')
    },
    '^Operation created$': {
        gettext: gettext('Operation created.')
    },
    '^Operation updated$': {
        gettext: gettext('Operation updated.')
    },
    "^Operation created: status='(.+?)'.": {
        gettext: gettext('Operation created: status: "{{ status | translate }}".'),
        placeholders: {
            status: '$1'
        }
    },
    '^Option created$': {
        gettext: gettext('Option created.')
    },
    '^Option "(.+?)" created$': {
        gettext: gettext('Option "{{option}}" created.'),
        placeholders: {
            option: '$1'
        }
    },
    '^Option deleted$': {
        gettext: gettext('Option deleted.')
    },
    '^Option "(.+?)" deleted$': {
        gettext: gettext('Option "{{option}}" deleted.'),
        placeholders: {
            option: '$1'
        }
    },
    '^Owner field error. : Cannot introduce cyclic dependency.': {
        gettext: gettext('Could not introduce cyclic ownership dependency.')
    },
    '^Password change is temporary blocked.$': {
        gettext: gettext('Password change is temporarily blocked.')
    },
    '^Password cipher does not match': {
        gettext: gettext('Password cipher does not match.')
    },
    '^Platform application cannot be added to, nor removed from any tenant.$': {
        gettext: gettext('Platform application cannot be added to, nor removed from any tenant.')
    },
    '^Private key must be provided in KEY_PAIR credentials$': {
        gettext: gettext('Private key must be provided when "Public/private keys" option is selected.')
    },
    '^Private key cipher does not match': {
        gettext: gettext('Private key cipher does not match')
    },
    '^Protocol "(.+?)" does not support "(.+?)" credentials type$': {
        gettext: gettext('Protocol "{{protocol}}" does not support "{{credentialsType}}" credentials type.'),
        placeholders: {
            protocol: '$1',
            credentialsType: '$2'
        }
    },
    '^Provided security key does not match key stored for device (.+?).$': {
        gettext: gettext('Provided security token does not match the security token stored for this device "{{deviceId}}".'),
        placeholders: {
            deviceId: '$1'
        }
    },
    '^Provided security key does not match key stored for device (.+?).Reached maximum number of failed attempts while trying to register this device. Request will now be blocked and has to be removed manually to restart the process.$': {
        gettext: gettext('The provided security token does not match the token stored for device "{{deviceId}}". You have reached the maximum number of failed attempts while trying to register this device. The request will now be blocked and must be removed manually to restart the process.'),
        placeholders: {
            deviceId: '$1'
        }
    },
    '^pulling image "(.+)"$': {
        gettext: gettext('Pulling image: "{{imageName}}".'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Real-time event processing is currently overloaded and may stop processing your events\\. Please contact support\\.$': {
        gettext: gettext('Real-time event processing is currently overloaded and may stop processing your events. Please contact support.')
    },
    '^Resource ID \\[type=com_cumulocity_model_idtype_GId, value=(.+?)\\] for this request not found.$': {
        gettext: gettext('Could not find the resource with ID "{{id}}".'),
        placeholders: {
            id: '$1'
        }
    },
    '^Retrieve configuration snapshot from device (.+?)': {
        gettext: gettext('Retrieve configuration snapshot from device {{deviceName}}'),
        placeholders: {
            deviceName: '$1'
        }
    },
    '^Retrieve (.+?) configuration snapshot from device (.+?)': {
        gettext: gettext('Retrieve {{configurationType}} configuration snapshot from device {{deviceName}}'),
        placeholders: {
            configurationType: '$1',
            deviceName: '$2'
        }
    },
    '^Scaled up replica set (.+) to (\\d+)$': {
        gettext: gettext('Replica set "{{replicaSetName}}" scaled up to "{{scaleNumber}}".'),
        placeholders: {
            replicaSetName: '$1',
            scaleNumber: '$2'
        }
    },
    '^Send configuration snapshot (.+?) of configuration type (.+?) to device (.+?)': {
        gettext: gettext('Send configuration snapshot {{snapshotName}} of configuration type {{configurationType}} to device {{deviceName}}'),
        placeholders: {
            snapshotName: '$1',
            configurationType: '$2',
            deviceName: '$3'
        }
    },
    '^Send configuration snapshot (.+?) to device (.+?)': {
        gettext: gettext('Send configuration snapshot {{snapshotName}} to device {{deviceName}}'),
        placeholders: {
            snapshotName: '$1',
            deviceName: '$2'
        }
    },
    '^Simulator state is invalid: (.+)$': {
        gettext: gettext('Simulator state is invalid: {{violations}}'),
        placeholders: {
            violations: {
                capture: '$1',
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: gettext('"{{field}}" should not be null'),
                        placeholders: {
                            field: '$1'
                        }
                    },
                    '(\\w+?) - must be less than or equal to (\\d+)': {
                        gettext: gettext('"{{field}}" must be less than or equal to {{maxValue}}'),
                        placeholders: {
                            field: '$1',
                            maxValue: '$2'
                        }
                    },
                    '(\\w+?) - should not contain null values': {
                        gettext: gettext('"{{field}}" should not contain null values'),
                        placeholders: {
                            field: '$1'
                        }
                    }
                }
            }
        }
    },
    "^Smart rest template (.+?) doesn't exist$": {
        gettext: gettext('SmartREST template with id "{{templateId}}" doesn\'t exist.'),
        placeholders: {
            templateId: '$1'
        }
    },
    '^Smart rule created$': {
        gettext: gettext('Smart rule created.')
    },
    '^Smart rule updated$': {
        gettext: gettext('Smart rule updated.')
    },
    '^Smart rule enabled$': {
        gettext: gettext('Smart rule activated.')
    },
    '^Smart rule disabled$': {
        gettext: gettext('Smart rule deactivated.')
    },
    '^Smart rule deleted$': {
        gettext: gettext('Smart rule deleted.')
    },
    '^Smart rule "(.+?)" created$': {
        gettext: gettext('Smart rule "{{name}}" created.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" updated$': {
        gettext: gettext('Smart rule "{{name}}" updated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" enabled$': {
        gettext: gettext('Smart rule "{{name}}" activated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" disabled$': {
        gettext: gettext('Smart rule "{{name}}" deactivated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" deleted$': {
        gettext: gettext('Smart rule "{{name}}" deleted.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Started container$': {
        gettext: gettext('Container started.')
    },
    '^Successfully assigned (.+) to (.+)$': {
        gettext: gettext('"{{imageName}}" assigned to "{{address}}".'),
        placeholders: {
            imageName: '$1',
            address: '$2'
        }
    },
    '^Successfully pulled image "(.+)"$': {
        gettext: gettext('Image "{{imageName}}" pulled.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Tenant creation failed. : Tenant with given id already exists.$': {
        gettext: gettext('Could not create a tenant. Tenant with given domain/URL already exists.')
    },
    '^Tenant id cannot be a reserved sql keyword "(.+?)".$': {
        gettext: gettext('Could not use a reserved SQL keyword "{{tenantId}}" as a domain name.'),
        placeholders: {
            tenantId: '$1'
        }
    },
    '^Tenant "(.+?)" activated$': {
        gettext: gettext('Tenant "{{tenant}}" activated.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant (.+?) has sub-tenants, please remove them first!$': {
        gettext: gettext('Could not remove tenant "{{tenant}}". Remove its subtenants first.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant activated$': {
        gettext: gettext('Tenant activated.')
    },
    '^Tenant "(.+?)" created$': {
        gettext: gettext('Tenant "{{tenant}}" created.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant created$': {
        gettext: gettext('Tenant created.')
    },
    '^Tenant "(.+?)" deleted$': {
        gettext: gettext('Tenant "{{tenant}}" deleted.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant deleted$': {
        gettext: gettext('Tenant deleted.')
    },
    '^Tenant "(.+?)" suspended$': {
        gettext: gettext('Tenant "{{tenant}}" suspended.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant suspended$': {
        gettext: gettext('Tenant suspended')
    },
    '^Tenant "(.+?)" updated: (.+?)$': {
        gettext: gettext('Tenant "{{tenant}}" updated: {{properties}}.'),
        placeholders: {
            tenant: '$1',
            properties: '$2'
        }
    },
    '^Tenant updated$': {
        gettext: gettext('Tenant updated.')
    },
    '^Too Many Requests$': {
        gettext: gettext('Too many requests. Try again later.')
    },
    "^User alias equals username '(.+)'$": {
        gettext: gettext('Username and login alias must be different.')
    },
    '^User created$': {
        gettext: gettext('User created')
    },
    '^User (.+?) created$': {
        gettext: gettext('User "{{name}}" created'),
        placeholders: {
            name: '$1'
        }
    },
    '^User deleted$': {
        gettext: gettext('User deleted')
    },
    '^User (.+?) deleted$': {
        gettext: gettext('User "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^User logout$': {
        gettext: gettext('User logout')
    },
    '^(.+?) user logout$': {
        gettext: gettext('"{{name}}" user logout'),
        placeholders: {
            name: '$1'
        }
    },
    '^(.+?) user logged in to the platform with OAuth internal login mode$': {
        gettext: gettext('"{{name}}" user logged in to the platform with OAI-Secure login mode'),
        placeholders: {
            name: '$1'
        }
    },
    '^(.+?) user login with OAuth internal mode failed$': {
        gettext: gettext('"{{name}}" user login with OAI-Secure mode failed'),
        placeholders: {
            name: '$1'
        }
    },
    '^User updated$': {
        gettext: gettext('User updated')
    },
    '^User (.+?) updated: (.+)$': {
        gettext: gettext('User "{{name}}" updated: {{updatesList}}'),
        placeholders: {
            name: '$1',
            updatesList: {
                capture: '$2',
                translate: {
                    "delegatedBy='(.+?)'": {
                        gettext: gettext('delegated by: "{{delegate}}"'),
                        placeholders: {
                            delegate: '$1'
                        }
                    },
                    "owner='(.+?)'": {
                        gettext: gettext('owner: "{{owner}}"'),
                        placeholders: {
                            owner: '$1'
                        }
                    },
                    'inventory assignment \\[(.+?)\\] added': {
                        gettext: gettext('inventory assignment [{{inventoryAssignment}}] added'),
                        placeholders: {
                            inventoryAssignment: '$1'
                        }
                    },
                    'inventory assignment \\[(.+?)\\] removed': {
                        gettext: gettext('inventory assignment [{{inventoryAssignment}}] removed'),
                        placeholders: {
                            inventoryAssignment: '$1'
                        }
                    },
                    'applications \\[(.+?)\\] added$': {
                        gettext: gettext('applications [{{applicationsList}}] added'),
                        placeholders: {
                            applicationsList: '$1'
                        }
                    },
                    'applications \\[(.+?)\\] removed$': {
                        gettext: gettext('applications [{{applicationsList}}] removed'),
                        placeholders: {
                            applicationsList: '$1'
                        }
                    },
                    'global roles \\[(.+?)\\] added$': {
                        gettext: gettext('global roles [{{globalRolesList}}] added'),
                        placeholders: {
                            globalRolesList: '$1'
                        }
                    },
                    'global roles \\[(.+?)\\] removed$': {
                        gettext: gettext('global roles [{{globalRolesList}}] removed'),
                        placeholders: {
                            globalRolesList: '$1'
                        }
                    }
                }
            }
        }
    },
    "^User with username '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: gettext('User "{{username}}" already exists.'),
        placeholders: {
            username: '$1'
        }
    },
    "^User with username or alias '(.+)' already exists! : Duplicated: (.+)$": {
        gettext: gettext('User with username or login alias "{{usernameOrAlias}}" already exists.'),
        placeholders: {
            usernameOrAlias: '$1'
        }
    },
    "^User with email '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: gettext('User with email "{{email}}" already exists.'),
        placeholders: {
            email: '$1'
        }
    },
    '^unable to find option with given key (.+?) : Could not find entity Option by ID (.+?)!$': {
        gettext: gettext('Unable to get tenant option: "{{option}}".'),
        placeholders: {
            option: '$2'
        }
    },
    '^unable to find option with given key (.+?) : There is no system property for key (.+?)$': {
        gettext: gettext('Unable to get system option: "{{option}}".'),
        placeholders: {
            option: '$2'
        }
    },
    '^Write failed with error code 16733 and error message \'trying to index text where term list is too big, max is 4mb _id: "(.+?)"\'$': {
        gettext: gettext('The uploaded image cannot be bigger than 4 MB. Please upload a smaller one.')
    },
    '^Write failed with error code 17280 and error message \'WiredTigerIndex::insert: key too large to index, failing (.+?) { : "(.+?)" }\'$': {
        gettext: gettext('The selected name is too long. Please try a shorter one.')
    },
    '^You have reached devices limit. No more devices can be registered.$': {
        gettext: gettext('You reached devices limit. No more devices can be registered.')
    },
    '^(.+) succeeded for volume "(.+)"': {
        gettext: gettext('Operation "{{operation}}" succeeded for volume "{{volume}}".'),
        placeholders: {
            operation: '$1',
            volume: '$2'
        }
    },
    "^Exception on tenant (.+) in statement '(.+)': Invocation exception when invoking method '(.+)' of class '(.+)' passing parameters \\[(.+)\\] for statement '(.+)': (.+) : (.+)$": {
        gettext: gettext('Exception on tenant {{tenantId}} in statement "{{moduleName}}": Invocation exception when invoking method "{{methodName}}" of class "{{classPath}}" passing parameters [{{parameters}}] for statement "{{statement}}": {{exceptionType}} : {{exceptionMessage}}.'),
        placeholders: {
            tenantId: '$1',
            moduleName: '$2',
            methodName: '$3',
            classPath: '$4',
            parameters: '$5',
            statement: '$6',
            exceptionType: '$7',
            exceptionMessage: '$8'
        }
    },
    '^No nodes are available that match all of the predicates: (.+).$': {
        gettext: gettext('No nodes are available that match all of the predicates: [{{predicates}}].'),
        placeholders: {
            predicates: '$1'
        }
    },
    '^Readiness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: gettext('Readiness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
        placeholders: {
            requestMethod: '$1',
            uri: '$2',
            protocol: '$3'
        }
    },
    '^Liveness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: gettext('Liveness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
        placeholders: {
            requestMethod: '$1',
            uri: '$2',
            protocol: '$3'
        }
    },
    '^Error syncing pod$': {
        gettext: gettext('Pod synchronization error.')
    },
    '^Failed create pod sandbox.$': {
        gettext: gettext('Pod sandbox creation failed.')
    },
    '^Exception on tenant (.+) in statement \'(.+)\': Http status code: (\\d+) \\{error="alarm/Unprocessable Entity",message="(.+)",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"\\}$': {
        gettext: gettext('Exception on tenant {{tenantId}} in statement "{{statement}}": HTTP status code: {{httpStatusCode}} : {{message | translate}}'),
        placeholders: {
            tenantId: '$1',
            statement: '$2',
            httpStatusCode: '$3',
            message: '$4'
        }
    },
    "^User '(.+)' is managed by a remote identity management service defined by an administrator, direct update is forbidden$": {
        gettext: gettext('User "{{userName}}" is managed by a remote identity management service defined by an administrator, direct update is forbidden.'),
        placeholders: {
            userName: '$1'
        }
    },
    '^Added new child device to "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Added new child device to "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
        placeholders: {
            parentDeviceName: '$1',
            parentDeviceId: '$2'
        }
    },
    '^Updated child device of "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Updated child device of "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
        placeholders: {
            parentDeviceName: '$1',
            parentDeviceId: '$2'
        }
    },
    '^Added child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Added child device "{{name}}" (ID: {{id}}).'),
        placeholders: {
            name: '$1',
            id: '$2'
        }
    },
    '^Removed child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Removed child device "{{name}}" (ID: {{id}}).'),
        placeholders: {
            name: '$1',
            id: '$2'
        }
    },
    '^Change value of "(.+)" to (.+) (.+).$': {
        gettext: gettext('Change value of "{{name}}" to {{value}}{{unit}}.'),
        placeholders: {
            name: '$1',
            value: '$2',
            unit: '$3'
        }
    },
    '^Change value of "(.+)" to (.+).$': {
        gettext: gettext('Change value of "{{name}}" to {{value}}.'),
        placeholders: {
            name: '$1',
            value: '$2'
        }
    },
    '^Change status of "(.+)" to "(.+)".$': {
        gettext: gettext('Change status of "{{name}}" to "{{label}}".'),
        placeholders: {
            name: '$1',
            label: '$2'
        }
    },
    '^Send message "(.+)".$': {
        gettext: gettext('Send message "{{str}}".'),
        placeholders: {
            str: '$1'
        }
    },
    '^Close relay (.+).$': {
        gettext: gettext('Close relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Open relay (.+).$': {
        gettext: gettext('Open relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Change trace status to (.+).$': {
        gettext: gettext('Change trace status to {{state | translate}}.'),
        placeholders: {
            state: '$1'
        }
    },
    '^Change relay status to (.+).$': {
        gettext: gettext('Change relay status to {{status | translate}}.'),
        placeholders: {
            status: '$1'
        }
    },
    '^Closing relay (.+).$': {
        gettext: gettext('Closing relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Opening relay (.+).$': {
        gettext: gettext('Opening relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Update bulk operation$': {
        gettext: gettext('Update bulk operation')
    },
    '^Update bulk operation: (.+)$': {
        gettext: gettext('Update bulk operation: {{updatesList}}'),
        placeholders: bulkOperationAuditLogTextPlaceholders
    },
    '^Update firmware to: "?(.+?)"? \\(version: (.+)\\)\\.?$': {
        gettext: gettext('Update firmware to: "{{ name }}" (version: {{ version }})'),
        placeholders: {
            name: '$1',
            version: '$2'
        }
    },
    '^Update firmware to: "?(.+?)"?\\.?$': {
        gettext: gettext('Update firmware to: "{{ name }}"'),
        placeholders: {
            name: '$1'
        }
    },
    '^Update configuration to (.+).$': {
        gettext: gettext('Update configuration to: {{ name }}.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Apply device profile: (.+).?$': {
        gettext: gettext('Apply device profile: {{ name }}'),
        placeholders: {
            name: '$1'
        }
    },
    '^Execute generic command: (.+).?$': {
        gettext: gettext('Execute generic command: {{command}}'),
        placeholders: {
            command: '$1'
        }
    },
    '^Failed to refresh application. : Cannot refresh non local-hosted application.$': {
        gettext: gettext('Could not reactivate the application as it is not hosted locally.')
    },
    '^Failed to refresh application. : Cannot refresh application without active version id.$': {
        gettext: gettext('Could not reactivate the application as it has no active version.')
    },
    // TODO: remove if we decide not to translate such messages:
    // '^Killing container with id (.+):Need to kill Pod$': {
    //   gettext: gettext('Killing container with ID "{{containerId}}". Need to kill Pod.'),
    //   placeholders: {
    //     containerId: '$1'
    //   }
    // },
    '^Scaled down replica set (.+) to (\\d+)$': {
        gettext: gettext('Replica set "{{replicaSetName}}" scaled down to "{{scaleNumber}}".'),
        placeholders: {
            replicaSetName: '$1',
            scaleNumber: '$2'
        }
    },
    '^Deleted pod: (.+)$': {
        gettext: gettext('Pod "{{imageName}}" deleted.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Container image "(.+)" already present on machine$': {
        gettext: gettext('Container image "{{imageName}}" already exists.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Error updating tenant! Cannot insert second configuration for Password code grant internal/Bad Request$': {
        gettext: gettext('This login mode was already set by another administrator. Refresh the page to update the data.')
    },
    '^Authentication with id: (.+?) configuration updated.$': {
        gettext: gettext('Authentication configuration with id "{{id}}" updated.'),
        placeholders: {
            id: '$1'
        }
    },
    '^Authentication configuration with id: (.+?) added.$': {
        gettext: gettext('Authentication configuration with id "{{id}}" added.'),
        placeholders: {
            id: '$1'
        }
    },
    '^Configuration type: basic.$': {
        gettext: gettext('Configuration type: Basic Auth.')
    },
    '^Configuration type: oauth2_internal.$': {
        gettext: gettext('Configuration type: OAI-Secure.')
    },
    '^Configuration type: oauth2.$': {
        gettext: gettext('Configuration type: Single sign-on.')
    },
    '^Application activated$': {
        gettext: gettext('Application activated')
    },
    '^Hosted application \"(.+?)\" activated: activeVersionId \\[(.+?)\\] added$': {
        gettext: gettext('Hosted application "{{appName}}" activated: activeVersionId "{{activeVersionId}}" added'),
        placeholders: {
            appName: '$1',
            activeVersionId: '$2'
        }
    },
    '^Application deleted$': {
        gettext: gettext('Application deleted')
    },
    '^Hosted application \"(.+?)\" deleted for tenant \"(.+?)\"$': {
        gettext: gettext('Hosted application "{{appName}}" deleted from tenant "{{tenant}}"'),
        placeholders: {
            appName: '$1',
            tenant: '$2'
        }
    },
    // LWM2M strings (move to submodule when it's migrated from ng1)
    '^LWM2M device type$': {
        gettext: gettext('LWM2M device type')
    },
    '^LWM2M server URI$': {
        gettext: gettext('LWM2M server URI')
    },
    '^coaps://<LWM2M-server-domain>:<coaps-port>$': {
        gettext: gettext('coaps://<LWM2M-server-domain>:<coaps-port>')
    },
    '^CREATE$': {
        gettext: gettext('CREATE')
    },
    '^DELETE$': {
        gettext: gettext('DELETE')
    },
    '^Endpoint client ID$': {
        gettext: gettext('Endpoint client ID')
    },
    '^Server public key$': {
        gettext: gettext('Server public key')
    },
    '^Generate bootstrap server config$': {
        gettext: gettext('Generate bootstrap server config')
    },
    '^LWM2M bootstrap short server ID$': {
        gettext: gettext('LWM2M bootstrap short server ID')
    },
    '^LWM2M short server ID$': {
        gettext: gettext('LWM2M short server ID')
    },
    '^Registration lifetime$': {
        gettext: gettext('Registration lifetime')
    },
    '^in seconds$': {
        gettext: gettext('in seconds')
    },
    '^Security instance offset$': {
        gettext: gettext('Security instance offset')
    },
    '^Default minimum period$': {
        gettext: gettext('Default minimum period')
    },
    '^Default maximum period$': {
        gettext: gettext('Default maximum period')
    },
    '^Binding mode$': {
        gettext: gettext('Binding mode')
    },
    '^applicable for LWM2M 1\\.0$': {
        gettext: gettext('applicable for LWM2M 1.0')
    },
    '^Awake time registration parameter$': {
        gettext: gettext('Awake time registration parameter')
    },
    '^in milliseconds, 0 means device is always online$': {
        gettext: gettext('in milliseconds, 0 means device is always online')
    },
    '^Use common timestamp resources 5518 and 6050 or object specific timestamp for object 6 reported by the device if available$': {
        gettext: gettext('Use common timestamp resources 5518 and 6050 or object specific timestamp for object 6 reported by the device if available')
    },
    '^Notification storing when disabled or offline$': {
        gettext: gettext('Notification storing when disabled or offline')
    },
    '^Disable timeout$': {
        gettext: gettext('Disable timeout')
    },
    '^LWM2M request timeout$': {
        gettext: gettext('LWM2M request timeout')
    },
    '^in milliseconds$': {
        gettext: gettext('in milliseconds')
    },
    '^Binary delivery encoding$': {
        gettext: gettext('Binary delivery encoding')
    },
    '^Firmware update delivery method$': {
        gettext: gettext('Firmware update delivery method')
    },
    '^Firmware update supported device protocol$': {
        gettext: gettext('Firmware update supported device protocol')
    },
    '^Firmware update reset mechanism$': {
        gettext: gettext('Firmware update reset mechanism')
    },
    '^Firmware update URL$': {
        gettext: gettext('Firmware update URL')
    },
    '^Failed to find operation data in the internal memory store\\. Try again!$': {
        gettext: gettext('Failed to find operation data in the internal memory store. Try again!')
    },
    '^Security mode$': {
        gettext: gettext('Security mode')
    },
    '^Bootstrap PSK ID$': {
        gettext: gettext('Bootstrap PSK ID')
    },
    '^Bootstrap pre-shared key$': {
        gettext: gettext('Bootstrap pre-shared key')
    },
    '^LWM2M PSK ID$': {
        gettext: gettext('LWM2M PSK ID')
    },
    '^LWM2M pre-shared key$': {
        gettext: gettext('LWM2M pre-shared key')
    },
    '^LWM2M bulk device upload operation$': {
        gettext: gettext('LWM2M bulk device upload operation')
    },
    '^This operation is only triggered by the agent when user uploads a CSV file with all required information to register new LWM2M devices\\. The source of the operation is the LWM2M device connector\\. Users are not able to trigger this operation using the shell command\\.$': {
        gettext: gettext('This operation is only triggered by the agent when user uploads a CSV file with all required information to register new LWM2M devices. The source of the operation is the LWM2M device connector. Users are not able to trigger this operation using the shell command.')
    },
    '^Write$': {
        gettext: gettext('Write')
    },
    '^Execute$': {
        gettext: gettext('Execute')
    },
    '^Execute with parameters$': {
        gettext: gettext('Execute with parameters')
    },
    '^Delete Instance$': {
        gettext: gettext('Delete instance')
    },
    '^Create Instance$': {
        gettext: gettext('Create instance')
    },
    '^Read Object$': {
        gettext: gettext('Read object')
    },
    '^Read Instance$': {
        gettext: gettext('Read instance')
    },
    '^LWM2M bulk device removal operation$': {
        gettext: gettext('LWM2M bulk device removal operation')
    },
    '^This operation is only triggered by the agent when user uploads a CSV file with a list of endpoint IDs to delete from C8Y\\.The source of the operation is the LWM2M device connector\\. Users are not able to trigger this operation using the shell command\\.$': {
        gettext: gettext('This operation is only triggered by the agent when user uploads a CSV file with a list of endpoint IDs to delete from the platform. The source of the operation is the LWM2M device connector. Users are not able to trigger this operation using the shell command.')
    },
    '^Could not find device$': {
        gettext: gettext('Could not find device')
    },
    '^Exception occurred while removing device (.+?)$': {
        gettext: gettext('Exception occurred while removing device: {{ exceptionMessage }}'),
        placeholders: {
            exceptionMessage: '$1'
        }
    },
    '^This command can be used to migrate LWM2M devices which are created in a non-standard way\\. It can take comma-separated device managed object IDs as parameters\\. If the IDs are specified then the migration will be done only for those devices\\. If the command is sent without any parameters then the agent will look up for possible Lwm2m devices that are not created in a standard way and try to migrate them\\. Usage: migrateLwm2mDevices 1122,3344 or migrateLwm2mDevices$': {
        gettext: gettext('This command can be used to migrate LWM2M devices which are created in a non-standard way. It can take comma-separated device managed object IDs as parameters. If the IDs are specified then the migration will be done only for those devices. If the command is sent without any parameters then the agent will look up for possible LWM2M devices that are not created in a standard way and try to migrate them. Usage: migrateLwm2mDevices 1122,3344 or migrateLwm2mDevices')
    },
    '^Unable to migrate devices$': {
        gettext: gettext('Unable to migrate devices')
    },
    '^Error while processing report$': {
        gettext: gettext('Error while processing report')
    },
    '^Expected 1 endpointId argument$': {
        gettext: gettext('Expected 1 endpointId argument')
    },
    '^LWM2M device registration$': {
        gettext: gettext('LWM2M device registration')
    },
    '^The required and optional properties to register and setup LWM2M Devices$': {
        gettext: gettext('The required and optional properties to register and setup LWM2M devices')
    },
    '^Bootstrap$': {
        gettext: gettext('Bootstrap')
    },
    '^Advanced$': {
        gettext: gettext('Advanced')
    },
    '^Bulk LWM2M device registration$': {
        gettext: gettext('Bulk LWM2M device registration')
    },
    '^This command returns a list of shell commands with description that can be created for the Lwm2m device connector\\.$': {
        gettext: gettext('This command returns a list of shell commands with description that can be created for the LWM2M device connector.')
    },
    '^The following operations are supported:': {
        gettext: gettext('The following operations are supported:')
    },
    '^PSK template$': {
        gettext: gettext('PSK template')
    },
    '^A bulk registration CSV template showing all mandatory fields$': {
        gettext: gettext('A bulk registration CSV template showing all mandatory fields')
    },
    '^Mandatory fields template$': {
        gettext: gettext('Mandatory fields template')
    },
    '^General template$': {
        gettext: gettext('General template')
    },
    '^A bulk registration CSV template for NO_SEC devices with all optional fields$': {
        gettext: gettext('A bulk registration CSV template for NO_SEC devices with all optional fields')
    },
    '^A general bulk registration CSV template showing all possible fields$': {
        gettext: gettext('A general bulk registration CSV template showing all possible fields')
    },
    '^A bulk registration CSV template for PSK devices with all optional fields$': {
        gettext: gettext('A bulk registration CSV template for PSK devices with all optional fields')
    },
    '^NO_SEC template$': {
        gettext: gettext('NO_SEC template')
    }
};

/**
 * A service to provide unmodified, cached translations for angular.
 */
class CachedLocaleDictionaryService {
    constructor() {
        this.cachedDictionary = {};
    }
}
CachedLocaleDictionaryService.ɵfac = function CachedLocaleDictionaryService_Factory(t) { return new (t || CachedLocaleDictionaryService)(); };
CachedLocaleDictionaryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CachedLocaleDictionaryService_Factory() { return new CachedLocaleDictionaryService(); }, token: CachedLocaleDictionaryService, providedIn: "root" });

class TranslateCustomLoader {
    constructor(http, optionsService, cachedLocaleDictionaryService, path = null, languages = null) {
        this.http = http;
        this.optionsService = optionsService;
        this.cachedLocaleDictionaryService = cachedLocaleDictionaryService;
        this.path = path;
        this.languages = languages;
    }
    getTranslation(lang) {
        const path = this.path || '';
        let url = `${path}${lang}.json`;
        if (this.languages && this.languages[lang] && this.languages[lang].url) {
            url = this.languages[lang].url;
        }
        return this.http.get(url).pipe(map(d => {
            if (this.optionsService.langsDetails && this.optionsService.langsDetails[lang]) {
                return Object.assign(Object.assign({}, d[lang]), this.optionsService.langsDetails[lang]);
            }
            return d[lang];
        }), tap(dictionary => {
            this.cachedLocaleDictionaryService.cachedDictionary[lang] = dictionary;
        }), map(dictionary => this.getDictionaryWithTrimmedKeys(dictionary)), catchError(() => of({})));
    }
    /**
     * We want to have translation keys unified, so they don't contain unnecessary spaces and line breaks.
     * This way we can dynamically build keys from HTML, and match them to extracted string, that might be HTML as well.
     */
    getDictionaryWithTrimmedKeys(dictionary) {
        return mapKeys(dictionary, (value, key) => trimTranslationKey(key));
    }
}
TranslateCustomLoader.ɵfac = function TranslateCustomLoader_Factory(t) { return new (t || TranslateCustomLoader)(ɵngcc0.ɵɵinject(ɵngcc5.HttpClient), ɵngcc0.ɵɵinject(OptionsService), ɵngcc0.ɵɵinject(CachedLocaleDictionaryService), ɵngcc0.ɵɵinject(LOCALE_PATH), ɵngcc0.ɵɵinject(LANGUAGES)); };
TranslateCustomLoader.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateCustomLoader, factory: TranslateCustomLoader.ɵfac });
TranslateCustomLoader.ctorParameters = () => [
    { type: HttpClient },
    { type: OptionsService },
    { type: CachedLocaleDictionaryService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_PATH,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LANGUAGES,] }] }
];
function trimTranslationKey(key) {
    return key.replace(/(\r\n|\n|\r)/gm, '').replace(/\s{2,}/g, ' ').trim();
}

class TranslateParserCustom extends TranslateDefaultParser {
    getValue(target, key) {
        const trimmedKey = trimTranslationKey(key);
        let translated = get(target, [trimmedKey]);
        if (!translated) {
            const keys = key.split('.');
            if (keys.length > 1) {
                translated = get(target, key);
            }
        }
        return translated;
    }
}
TranslateParserCustom.ɵfac = /*@__PURE__*/ function () { let ɵTranslateParserCustom_BaseFactory; return function TranslateParserCustom_Factory(t) { return (ɵTranslateParserCustom_BaseFactory || (ɵTranslateParserCustom_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateParserCustom)))(t || TranslateParserCustom); }; }();
TranslateParserCustom.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateParserCustom, factory: TranslateParserCustom.ɵfac });

class C8yTranslateDirective extends TranslateDirective {
    constructor(translateService, element, _ref) {
        super(translateService, element, _ref);
        /**
         * Used to trigger events when html is replaced by directive.
         */
        this.htmlUpdateEvent = new EventEmitter();
    }
    /**
     * Used to get private element property from TranslateDirective, so it doesn't throw tsErrors
     */
    get _elementRef() {
        return this.element;
    }
    /**
     * Used to get private translateService property from TranslateDirective, so it doesn't throw tsErrors
     */
    get _translateService() {
        return this.translateService;
    }
    /**
     * Overridden method from original directive.
     * For simple text nodes, it just invokes the base method.
     * For complex nodes, it builds translation key from whole inner HTML
     * and replaces it with its translation.
     * This prevents splitting HTML into pieces and attempting to translate each one separately
     * which doesn't work, because we extract strings in whole.
     */
    checkNodes(forceUpdate = false, translations) {
        if (!this.htmlMode && (this.isElementSimpleTextType() || this.isElementInnerHtmlEmpty())) {
            /**
             * If element does not contain complex html, then fallBack to default logic.
             */
            super.checkNodes(forceUpdate, translations);
        }
        else {
            this.htmlMode = true;
            if (this.isLookupKeyMissing()) {
                this._elementRef.nativeElement.lookupKey = this.getLookupKey();
            }
            if (this.lookupKeyExist()) {
                const newTranslation = this.getNewTranslation();
                if (!this.lastTranslation || this.lastTranslation !== newTranslation) {
                    this.lastTranslation = newTranslation;
                    this.updateHtmlContent();
                    this.htmlUpdateEvent.emit();
                }
            }
        }
    }
    ngOnDestroy() {
        this.htmlUpdateEvent.complete();
        super.ngOnDestroy();
    }
    /**
     * Builds lookup key from innerHTML, removes comments (that might be added by Angular) and trims it.
     */
    getLookupKey() {
        return this._elementRef.nativeElement.innerHTML.replace(/<!--.*?-->/gs, '').trim();
    }
    isElementSimpleTextType() {
        return this._elementRef.nativeElement.childNodes.length === 1 && this._elementRef.nativeElement.childNodes[0].nodeType === 3;
    }
    isElementInnerHtmlEmpty() {
        return !this._elementRef.nativeElement.innerHTML;
    }
    isLookupKeyMissing() {
        return !this._elementRef.nativeElement.lookupKey;
    }
    lookupKeyExist() {
        return this._elementRef.nativeElement.lookupKey;
    }
    getNewTranslation() {
        return this._translateService.instant(this._elementRef.nativeElement.lookupKey, this.currentParams || {});
    }
    updateHtmlContent() {
        this._elementRef.nativeElement.innerHTML = this.lastTranslation;
    }
}
C8yTranslateDirective.ɵfac = function C8yTranslateDirective_Factory(t) { return new (t || C8yTranslateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
C8yTranslateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: C8yTranslateDirective, selectors: [["", "translate", ""], ["", "ngx-translate", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
C8yTranslateDirective.ctorParameters = () => [
    { type: TranslateService$1 },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];

/**
 * Provides copy of original pipe for C8yTranslateModule
 */
class C8yTranslatePipe extends TranslatePipe {
}
C8yTranslatePipe.ɵfac = /*@__PURE__*/ function () { let ɵC8yTranslatePipe_BaseFactory; return function C8yTranslatePipe_Factory(t) { return (ɵC8yTranslatePipe_BaseFactory || (ɵC8yTranslatePipe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(C8yTranslatePipe)))(t || C8yTranslatePipe); }; }();
C8yTranslatePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "translate", type: C8yTranslatePipe, pure: false });
C8yTranslatePipe.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: C8yTranslatePipe, factory: C8yTranslatePipe.ɵfac });

/**
 * Module must be redeclared, as Components cant be declared by two modules.
 */
class C8yTranslateModule extends TranslateModule {
}
C8yTranslateModule.ɵfac = /*@__PURE__*/ function () { let ɵC8yTranslateModule_BaseFactory; return function C8yTranslateModule_Factory(t) { return (ɵC8yTranslateModule_BaseFactory || (ɵC8yTranslateModule_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(C8yTranslateModule)))(t || C8yTranslateModule); }; }();
C8yTranslateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: C8yTranslateModule });
C8yTranslateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});

const angularLocalesLanguageMap = { en: 'en-GB', 'en-EN': 'en-GB' };
// AoT requires an exported function for factories
function translateLoaderFactory(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages) {
    return new TranslateCustomLoader(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages);
}
function localePathFactory(options) {
    return options.localePath;
}
function languagesFactory(options) {
    return options.languages;
}
function localeId(appStateService) {
    return {
        get lang() {
            return getAngularLocalesLanguageString(appStateService.state.lang || 'en');
        },
        toLowerCase() {
            return this.lang.toLowerCase();
        },
        toString() {
            return this.lang;
        }
    };
}
function getAngularLocalesLanguageString(language) {
    return angularLocalesLanguageMap[language] || language;
}
/**
 * The angular module definition for i18n (translation).
 * @exports I18nModule
 */
class I18nModule$1 {
    static providers() {
        return [
            { provide: LOCALE_ID, useFactory: localeId, deps: [AppStateService] },
            { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true },
            { provide: LOCALE_PATH, useFactory: localePathFactory, deps: [OptionsService] },
            { provide: LANGUAGES, useFactory: languagesFactory, deps: [OptionsService] },
            // Extracted from projects/ngx-translate/core/src/public_api.ts
            {
                provide: TranslateLoader,
                useFactory: translateLoaderFactory,
                deps: [HttpClient, OptionsService, CachedLocaleDictionaryService, LOCALE_PATH, LANGUAGES]
            },
            { provide: TranslateCompiler, useClass: TranslateFakeCompiler },
            { provide: TranslateParser, useClass: TranslateParserCustom },
            { provide: MissingTranslationHandler, useClass: MissingTranslationCustomHandler },
            TranslateStore,
            TranslateService$1,
            { provide: USE_STORE, useValue: undefined },
            { provide: USE_DEFAULT_LANG, useValue: undefined },
            { provide: USE_EXTEND, useValue: false },
            { provide: DEFAULT_LANGUAGE, useValue: undefined }
        ];
    }
    static forRoot() {
        return {
            ngModule: I18nModule$1,
            providers: I18nModule$1.providers()
        };
    }
}
I18nModule$1.ɵfac = function I18nModule$1_Factory(t) { return new (t || I18nModule$1)(); };
I18nModule$1.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: I18nModule$1 });
I18nModule$1.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[HttpClientModule, BsDatepickerModule], C8yTranslateModule] });

function parse(moduleSrc) {
    const src = moduleSrc.split(/\n/)
        .map((l) => l.trim())
        .filter(Boolean)
        .filter((l) => !l.match(/^\/?\*/) && !l.match(/^\/\//))
        .join('\n');
    const fn = new Function(`var exports = {};
var module = { exports: exports };
${src}
return exports;`);
    return fn();
}

const cache = new Map();
/**
 * @ignore
 */
function loadLocale(moduleLang) {
    return new Promise((resolve, reject) => {
        if (cache.has(moduleLang)) {
            resolve(cache.get(moduleLang));
        }
        else {
            fetch(`assets/locales/angular/${moduleLang}.js`)
                .then((res) => res.text())
                .then((src) => {
                const module = parse(src);
                cache.set(moduleLang, module);
                resolve(module);
            })
                .catch(reject);
        }
    });
}

/**
 * A service to manage the language of the application.
 */
class TranslateService {
    constructor(ngxTranslate, ui, options, bsLocaleService) {
        this.ngxTranslate = ngxTranslate;
        this.ui = ui;
        this.options = options;
        this.bsLocaleService = bsLocaleService;
        this.langsDetail = this.options.get('languages', {});
        this.langs = keys(this.langsDetail).filter(k => this.langsDetail[k]);
        this.DEFAULT_SEPARATOR = '_';
        const queryStringLang = this.queryStringLang();
        if (queryStringLang) {
            this.saveInLocalStorage(queryStringLang);
        }
    }
    static defaultLang() {
        return window.localStorage.getItem(TranslateService.SAVE_LANGUAGE_KEY);
    }
    /**
     * Switches to given language.
     * @param lang The language as two-letter code.
     */
    switchToLanguage(lang) {
        return __awaiter(this, void 0, void 0, function* () {
            const moduleLang = lang.replace('_', '-');
            try {
                yield this.loadLocales(moduleLang);
                this.setBsLocale(moduleLang);
            }
            catch (e) {
                const lessSpecificModuleLang = moduleLang.split('-').shift();
                if (lessSpecificModuleLang !== moduleLang) {
                    yield this.loadLocales(lessSpecificModuleLang);
                    this.setBsLocale(lessSpecificModuleLang);
                }
                else {
                    throw e;
                }
            }
            this.setLanguage(lang);
        });
    }
    loadLocales(moduleLang) {
        return __awaiter(this, void 0, void 0, function* () {
            const module = yield loadLocale(getAngularLocalesLanguageString(moduleLang));
            registerLocaleData(module.default);
        });
    }
    setLanguage(lang) {
        this.ngxTranslate.setDefaultLang(this.options.get('defaultLanguage', 'en'));
        this.ngxTranslate.use(lang).subscribe(() => {
            this.ui.state$.next(Object.assign(Object.assign({}, this.ui.state), { lang }));
        });
    }
    /**
     * Finds the first supported language
     */
    firstSupportedLanguage() {
        const languages = [this.queryStringLang(), this.localStorageLang()]
            .concat([this.options.get('defaultLanguage')])
            .concat(this.browserLangs())
            .concat(['en'])
            .filter(Boolean)
            .map(lang => lang.toLowerCase());
        const preferredLanguage = languages.find(lang => this.getSupported(lang));
        return this.getSupported(preferredLanguage);
    }
    /**
     * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
     * @param lang The iso language code.
     */
    convertToLanguageCodePO(lang) {
        const sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
        const [langMain, langSpecific] = lang.split(sep);
        const langLast = langSpecific ? `${this.DEFAULT_SEPARATOR}${langSpecific}` : '';
        return `${langMain}${langLast}`;
    }
    /**
     * Returns the language in the native language.
     * @param lang The language two-letter code.
     * @return The native name.
     */
    getNativeLanguage(lang) {
        const langData = (this.langsDetail || {})[lang] || {};
        return langData.nativeName || lang;
    }
    saveInLocalStorage(lang) {
        window.localStorage.setItem(TranslateService.SAVE_LANGUAGE_KEY, lang);
    }
    getSupported(lang) {
        const exact = this.langs.find(l => l.toLowerCase() === lang);
        if (exact) {
            return exact;
        }
        return this.langs.find(l => this.getLessSpecific(l.toLowerCase()) === this.getLessSpecific(lang) || l.startsWith(lang));
    }
    /**
     * Gets the language from the query parameter.
     * @return The language two-letter code.
     */
    queryStringLang() {
        return this.getQueryParameter('lang');
    }
    getLessSpecific(lang) {
        return isString(lang)
            ? lang.replace('-', this.DEFAULT_SEPARATOR).split(this.DEFAULT_SEPARATOR)[0]
            : '';
    }
    /**
     * Gets the language from local storage.
     * @return The language two-letter code.
     */
    localStorageLang() {
        return window.localStorage.getItem(TranslateService.SAVE_LANGUAGE_KEY);
    }
    /**
     * Determines which language is set in the browser.
     * @return The languages the browser supports as string array.
     */
    browserLangs() {
        const { navigator } = window;
        const browserLanguagePropertyKeys = [
            'languages',
            'language',
            'browserLanguage',
            'systemLanguage',
            'userLanguage'
        ];
        return browserLanguagePropertyKeys.reduce((languages, property) => {
            const propertyLanguages = navigator[property];
            if (typeof propertyLanguages === 'string') {
                languages.push(propertyLanguages);
            }
            else if (Array.isArray(propertyLanguages)) {
                languages = languages.concat(propertyLanguages);
            }
            return languages;
        }, []);
    }
    getQueryParameter(queryKey) {
        // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
        const query = window.location.search.substring(1);
        let result;
        query.split('&').find(pair => {
            const [key, value] = pair.split('=');
            if (key === queryKey) {
                result = value;
            }
            return result;
        });
        return result;
    }
    setBsLocale(lang) {
        switch (lang) {
            case ('de'): {
                defineLocale(lang, deLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('en'): {
                // 'en-gb' is created because overwriting default 'en' breaks date-picker somehow
                defineLocale('en-gb', enGbLocale);
                this.bsLocaleService.use('en-gb');
                break;
            }
            case ('es'): {
                defineLocale(lang, esLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('fr'): {
                defineLocale(lang, frLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('ja'): {
                defineLocale(lang, jaLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('ko'): {
                defineLocale(lang, koLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('nl'): {
                defineLocale(lang, nlLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('pl'): {
                defineLocale(lang, plLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('pt'): {
                defineLocale(lang, ptBrLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('ru'): {
                defineLocale(lang, ruLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case ('zh'): {
                defineLocale(lang, zhCnLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            default: {
                defineLocale('en-gb', enGbLocale);
                this.bsLocaleService.use('en-gb');
            }
        }
    }
}
TranslateService.ɵfac = function TranslateService_Factory(t) { return new (t || TranslateService)(ɵngcc0.ɵɵinject(ɵngcc4.TranslateService), ɵngcc0.ɵɵinject(AppStateService), ɵngcc0.ɵɵinject(OptionsService), ɵngcc0.ɵɵinject(ɵngcc6.BsLocaleService, 8)); };
TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
TranslateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(AppStateService), i0.ɵɵinject(OptionsService), i0.ɵɵinject(i4.BsLocaleService, 8)); }, token: TranslateService, providedIn: "root" });
TranslateService.ctorParameters = () => [
    { type: TranslateService$1 },
    { type: AppStateService },
    { type: OptionsService },
    { type: BsLocaleService, decorators: [{ type: Optional }] }
];

/*
 * Converts the file size to a readable format.
 * Usage:
 *
 * ```html
 *  {{ myData | bytes }} <!-- e.g. 100.1 MB -->
 *
 * ```
 * Default precision is set to 1 decimal place.
 * To change the precision, pass an additional argument to pipe.

 * ```html
 * {{ myData | bytes: 5 }} <!-- e.g. 100.12345 MB -->
 * ```
 *
 */
class BytesPipe {
    static bytes(bytes, precision) {
        if (isNaN$1(bytes) || !isFinite(bytes)) {
            return '-';
        }
        if (bytes === 0) {
            return 0;
        }
        const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];
        const num = Math.floor(Math.log(bytes) / Math.log(1000));
        // eslint-disable-next-line no-mixed-operators
        const result = (bytes / Math.pow(1000, Math.floor(num))).toFixed(precision);
        return `${result} ${units[num]}`;
    }
    transform(value, precision = 1) {
        return BytesPipe.bytes(value, precision);
    }
}
BytesPipe.ɵfac = function BytesPipe_Factory(t) { return new (t || BytesPipe)(); };
BytesPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "bytes", type: BytesPipe, pure: true });

/**
 * The range of times supported by ECMAScript Date objects in milliseconds.
 * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1
 */
const ES_MAX_TIME_MILLISECONDS = 8640000000000000;
/**
 * Formats a date value according to locale rules. If no other format specified it defaults to `medium`
 * used as standard date/time format.
 *
 * Extends Angular's DatePipe in a way so that date values exceeding the range supported by ECMAScript
 * are displayed as earliest/latest supported point in time printed in the desired format pre- or postfixed
 * by the word `before` or `after`, respectively.
 * In all other cases the pipe behaves as the standard [DatePipe]{@link https://angular.io/api/common/DatePipe}.
 *
 * ```html
 * <span class="highlight">{{ deadline | c8yDate }}</span> <!-- e.g. 7 May 2020, 17:45:19 (en-GB) or 07.05.2020, 17:45:19 (de) -->
 * <span>{{ lastUpdated | c8yDate: 'a h:MM:ss' }}</span> <!-- e.g. pm 5:45:19 -->
 * <span>{{ 8640000000000000 + 1 | c8yDate }}</span> <!-- e.g. after 13 Sep 275760, 03:00:00 --> ```
 */
class DatePipe extends DatePipe$1 {
    constructor(locale, translateService) {
        super(locale);
        this.translateService = translateService;
    }
    transform(value, format = 'medium', timezone, locale) {
        let valueInBounds = value;
        let valueBefore = false;
        let valueBeyond = false;
        if (typeof value === 'number' && !isNaN(value)) {
            valueInBounds = Math.min(value, ES_MAX_TIME_MILLISECONDS);
            valueInBounds = Math.max(valueInBounds, -ES_MAX_TIME_MILLISECONDS);
            valueBefore = value < -ES_MAX_TIME_MILLISECONDS;
            valueBeyond = value > ES_MAX_TIME_MILLISECONDS;
        }
        let result = super.transform(valueInBounds, format, timezone, locale);
        if (valueBefore) {
            result = this.translateService.instant(gettext(`before {{date}}`), { date: result });
        }
        else if (valueBeyond) {
            result = this.translateService.instant(gettext(`after {{date}}`), { date: result });
        }
        return result;
    }
}
DatePipe.ɵfac = function DatePipe_Factory(t) { return new (t || DatePipe)(ɵngcc0.ɵɵdirectiveInject(LOCALE_ID, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService, 16)); };
DatePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "c8yDate", type: DatePipe, pure: true });
DatePipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: TranslateService$1 }
];

/**
 * A directive to determine if a dropdown should open to the top or as usual to the bottom.
 * This directive has a direct dependency to the bootstrap dropdown (!)
 *
 * Preconditions:
 *  - Bootstrap dropdown is used
 *  - Bootstrap dropdown is not used with container="body"
 *  - Bootstrap dropdown is used like it is intended and documented for e.g.
 * ```html
 * <div dropdown class="dropdown">
 *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
 *  <ul class="dropdown-menu" *dropdownMenu>
 *    <!-- Content here -->
 *  </ul>
 * </div>
 * ```
 *
 * Example:
 * ```html
 * <div dropdown c8yBsDropdownDirection class="dropdown">
 *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
 *  <ul class="dropdown-menu" *dropdownMenu>
 *    <!-- Content here -->
 *  </ul>
 * </div>
 * ```
 * You make use of the bootstrap dropdown as usual and additionally add the direction directive to it.
 */
class DropdownDirectionDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.MARGIN_BOTTOM = 10;
        this.VISIBILITY = 'visibility';
        this.DROPUP = 'dropup';
    }
    onClick() {
        const open = this.elementRef.nativeElement.classList.contains('open');
        if (open) {
            let menu;
            let toggle;
            forEach(this.elementRef.nativeElement.children, (element) => {
                if (element.classList.contains('dropdown-menu')) {
                    menu = element;
                }
                if (element.classList.contains('dropdown-toggle')) {
                    toggle = element;
                }
            });
            if (menu && toggle) {
                this.renderer.setStyle(menu, this.VISIBILITY, 'hidden');
                this.shouldDropup(menu, toggle);
                this.renderer.removeStyle(menu, this.VISIBILITY);
            }
        }
    }
    shouldDropup(container, position) {
        const containerHeight = container.getBoundingClientRect().height;
        const containerDropPosition = position.getBoundingClientRect().bottom;
        const layoutViewport = window.innerHeight;
        const sum = containerHeight + containerDropPosition + this.MARGIN_BOTTOM;
        if (sum >= layoutViewport) {
            this.renderer.addClass(this.elementRef.nativeElement, this.DROPUP);
        }
        else if (this.elementRef.nativeElement.classList.contains(this.DROPUP)) {
            this.renderer.removeClass(this.elementRef.nativeElement, this.DROPUP);
        }
    }
}
DropdownDirectionDirective.ɵfac = function DropdownDirectionDirective_Factory(t) { return new (t || DropdownDirectionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
DropdownDirectionDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DropdownDirectionDirective, selectors: [["", "dropdown", "", "c8yBsDropdownDirection", ""], ["", "dropdown", "", "c8yDropdownDirection", ""]], hostBindings: function DropdownDirectionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DropdownDirectionDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } } });
DropdownDirectionDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
DropdownDirectionDirective.propDecorators = {
    onClick: [{ type: HostListener, args: ['click',] }]
};

/**
 * A component to show generic empty state.
 * Title and subtitle should be used with translate pipe to mark strings for translation.
 * Component can be displayed vertically (default) or horizontally.
 * Additional markup elements can be placed inside the tag.
 *
 * Example:
 * ```html
 * <c8y-ui-empty-state
 *   [icon]="'c8y-icon'"
 *   [title]="'Place your title here' | translate"
 *   [subtitle]="'Place your subtitle here' | translate"
 *   [horizontal]="true"
 * >
 *   (...)
 * </c8y-ui-empty-state>
 * ```
 */
class EmptyStateComponent {
}
EmptyStateComponent.ɵfac = function EmptyStateComponent_Factory(t) { return new (t || EmptyStateComponent)(); };
EmptyStateComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: EmptyStateComponent, selectors: [["c8y-ui-empty-state"]], inputs: { icon: "icon", title: "title", subtitle: "subtitle", horizontal: "horizontal" }, ngContentSelectors: _c1, decls: 6, vars: 6, consts: [[1, "c8y-empty-state", 3, "ngClass"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], [4, "ngIf"], ["content", ""], [1, "text-medium", "p-b-4"], [1, "p-t-16"], [4, "ngTemplateOutlet"], ["class", "small", 4, "ngIf"], [1, "small", "m-t-8"], [1, "small"]], template: function EmptyStateComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "i", 1);
        ɵngcc0.ɵɵtemplate(2, EmptyStateComponent_ng_container_2_Template, 8, 5, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, EmptyStateComponent_ng_container_3_Template, 9, 5, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(4, EmptyStateComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c2, ctx.horizontal));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.icon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.horizontal);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.horizontal);
    } }, directives: function () { return [ɵngcc7.NgClass, IconDirective, ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
EmptyStateComponent.propDecorators = {
    icon: [{ type: Input }],
    title: [{ type: Input }],
    subtitle: [{ type: Input }],
    horizontal: [{ type: Input }]
};

var GENERIC_FILE_TYPE;
(function (GENERIC_FILE_TYPE) {
    GENERIC_FILE_TYPE["ARCHIVE"] = "archive";
    GENERIC_FILE_TYPE["AUDIO"] = "audio";
    GENERIC_FILE_TYPE["CODE"] = "code";
    GENERIC_FILE_TYPE["EXCEL"] = "excel";
    GENERIC_FILE_TYPE["IMAGE"] = "image";
    GENERIC_FILE_TYPE["PDF"] = "pdf";
    GENERIC_FILE_TYPE["POWERPOINT"] = "powerpoint";
    GENERIC_FILE_TYPE["TEXT"] = "text";
    GENERIC_FILE_TYPE["VIDEO"] = "video";
    GENERIC_FILE_TYPE["WORD"] = "word";
    GENERIC_FILE_TYPE["EPL"] = "epl";
})(GENERIC_FILE_TYPE || (GENERIC_FILE_TYPE = {}));
class FilesService {
    constructor(systemOptionsService, inventoryBinaryService) {
        this.systemOptionsService = systemOptionsService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.DEFAULT_BYTES_LIMIT = 52428800;
        this.FILENAME_MAX_LENGTH = 128;
        this.fileTypeExtensionsMap = {
            [GENERIC_FILE_TYPE.ARCHIVE]: {
                exts: ['7z', 'apk', 'cab', 'gz', 'iso', 'jar', 'rar', 'tar', 'zip']
            },
            [GENERIC_FILE_TYPE.AUDIO]: {
                exts: ['3gp', 'aiff', 'aac', 'amr', 'm4a', 'm4p', 'mp3', 'oga', 'ogg', 'raw', 'wav', 'wma']
            },
            [GENERIC_FILE_TYPE.CODE]: {
                exts: ['aspx', 'exe', 'htm', 'html', 'jad', 'js', 'json', 'jsp', 'php', 'xml']
            },
            [GENERIC_FILE_TYPE.EXCEL]: {
                exts: ['xls', 'xlsx']
            },
            [GENERIC_FILE_TYPE.IMAGE]: {
                exts: ['bmp', 'gif', 'jpeg', 'jpg', 'png', 'tiff', 'svg', 'ico']
            },
            [GENERIC_FILE_TYPE.PDF]: {
                exts: ['pdf']
            },
            [GENERIC_FILE_TYPE.POWERPOINT]: {
                exts: ['ppt', 'pptx']
            },
            [GENERIC_FILE_TYPE.TEXT]: {
                exts: ['txt']
            },
            [GENERIC_FILE_TYPE.VIDEO]: {
                exts: ['asf', 'avi', 'flv', 'mov', 'mp4', 'ogv', 'qt', 'rm', 'rmvb', 'wmv', '3gp']
            },
            [GENERIC_FILE_TYPE.WORD]: {
                exts: ['doc', 'docx']
            },
            [GENERIC_FILE_TYPE.EPL]: {
                exts: ['mon']
            }
        };
        this.fileSizeLimitCfg = {
            systemOption: {
                category: 'files',
                key: 'max.size'
            },
            defaultBytesLimit: this.DEFAULT_BYTES_LIMIT,
            actualBytesLimit: undefined
        };
    }
    /**
     * Checks if files have valid size.
     * @param files Files to check.
     * @returns Returns true if each file has the correct size.
     */
    haveValidSizes(files) {
        return __awaiter(this, void 0, void 0, function* () {
            const limit = yield this.loadBytesSizeLimit();
            return every(files, (f) => {
                return this.size(f) <= limit;
            });
        });
    }
    /**
     * Checks the system file size limit, if not available returns the default value.
     * Default limit: [DEFAULT_BYTES_LIMIT]{@link DEFAULT_BYTES_LIMIT}
     * @returns Returns promise with the limit value.
     */
    loadBytesSizeLimit() {
        return __awaiter(this, void 0, void 0, function* () {
            let bytesLimit = this.DEFAULT_BYTES_LIMIT;
            if (this.fileSizeLimitCfg.actualBytesLimit) {
                return this.fileSizeLimitCfg.actualBytesLimit;
            }
            const { systemOption } = this.fileSizeLimitCfg;
            try {
                const { data: { value: actualBytesLimit } } = yield this.systemOptionsService.detail(systemOption);
                if (!actualBytesLimit) {
                    return bytesLimit;
                }
                const parsedActualBytesLimit = parseInt(actualBytesLimit, 10);
                if (isNaN$1(parsedActualBytesLimit)) {
                    return bytesLimit;
                }
                this.fileSizeLimitCfg.actualBytesLimit = parsedActualBytesLimit;
                bytesLimit = parsedActualBytesLimit;
            }
            catch (error) {
                // do nothing
            }
            return bytesLimit;
        });
    }
    /**
     * Checks the size of the file
     * @param file File to check.
     * @returns Returns size of the file in bytes.
     */
    size(file) {
        const fileLength = get(file, 'length') || get(file, 'size');
        const attachments = get(file, '_attachments');
        const attachmentsObj = get(attachments, first(keys(attachments)));
        return isUndefined(fileLength) ? get(attachmentsObj, 'length') : fileLength;
    }
    /**
     * Checks whether files have allowed extensions.
     * If the accept parameter is not specified, all extensions are accepted.
     * @param files Files to check.
     * @param accept String of comma separated file extensions and generic types ([GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}), e.g. .zip,.7z,excel.
     * @returns  Returns true if each file has allowed extension.
     */
    haveValidExtensions(files, accept) {
        if (!accept) {
            return true;
        }
        const filesArray = files.item
            ? Array.from(files)
            : Array.isArray(files)
                ? files
                : [files];
        const filesExts = filesArray.map((file) => { var _a; return (_a = this.getFileExtension(file)) === null || _a === void 0 ? void 0 : _a.toLowerCase(); });
        const allowedExts = this.extractFileExtensions(accept);
        return filesExts.every(ext => allowedExts.includes(ext));
    }
    /**
     * Checks if each file has a valid filename length.
     * @param files Files to check.
     * @returns Returns true if each file has a valid filename length.
     */
    checkMaxLength(files) {
        return every(files, (f) => {
            return this.FILENAME_MAX_LENGTH > f.name.length;
        });
    }
    /**
     * Extracts the file extension.
     * @param file File from which the extension should be extracted.
     * @returns Returns the file extension or undefined if the file has no extension.
     */
    getFileExtension(file) {
        const fileNameAndFileExt = file.name.split('.');
        if (fileNameAndFileExt.length === 1) {
            // no file ext
            return undefined;
        }
        return fileNameAndFileExt.pop();
    }
    /**
     * List of file extensions.
     * @returns Returns list of file extensions.
     */
    getFileExtensions() {
        return uniq(flatten(map$1(this.fileTypeExtensionsMap, ({ exts }) => exts)));
    }
    /**
     * The list of generic file types.
     * @returns Returns the list of generic file types.
     */
    getGenericFileTypes() {
        return Object.keys(this.fileTypeExtensionsMap);
    }
    /**
     * @ignore
     */
    mapGenericFileTypesToExtensions(genericFileTypes = []) {
        const fileExts = genericFileTypes.map(gT => {
            const { exts } = this.fileTypeExtensionsMap[gT];
            return exts;
        });
        return uniq(flatten(fileExts));
    }
    /**
     * Extracts a list of file extensions from a string.
     * Can accept generic file types check: [GENERIC_FILE_TYPE]{@link GENERIC_FILE_TYPE}.
     *
     * @param str String from which the file extensions are extracted (comma separated values).
     * Accepted string format:
     * * ".zip,.iso",
     * * "zip,ISO",
     * * "archive".
     * Important: generic types cannot contain a dot. All values with a dot are treated as a normal extension.
     * @returns Returns a list of the file extensions.
     */
    extractFileExtensions(str) {
        if (!str) {
            return [];
        }
        const types = str.split(',').map(t => t.toLowerCase().trim());
        const genericTypes = types.filter((t) => this.isGenericType(t));
        const defaultFileExts = types.filter((t) => !this.isGenericType(t));
        const allTypes = [
            ...this.mapGenericFileTypesToExtensions(genericTypes),
            ...defaultFileExts
        ].map(t => t.replace('.', ''));
        return uniq(allTypes);
    }
    /**
     * Converts a file to a base64 image string.
     *
     * @param file The file to convert to base 64.
     * @returns The image string in base64 format.
     */
    toBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }
    /**
     * Allows to get a File representation of an managed object binary. Can be used
     * to convert this file toBase64 to show it to the end-user.
     * @param binary The binary managed object
     * @returns The file representation.
     */
    getFile(binary) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.inventoryBinaryService.download(binary.id);
            const arrayBuffer = yield res.arrayBuffer();
            return new File([arrayBuffer], binary.name, { type: binary.contentType });
        });
    }
    /**
     * Allows to download a file (opens the browser download prompt).
     * @param binary The binary managed object.
     */
    download(binary) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.getFile(binary);
            saveAs(file);
        });
    }
    isGenericType(type) {
        return Object.values(GENERIC_FILE_TYPE).includes(type);
    }
}
FilesService.ɵfac = function FilesService_Factory(t) { return new (t || FilesService)(ɵngcc0.ɵɵinject(ɵngcc3.SystemOptionsService), ɵngcc0.ɵɵinject(ɵngcc3.InventoryBinaryService)); };
FilesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FilesService_Factory() { return new FilesService(i0.ɵɵinject(i1$1.SystemOptionsService), i0.ɵɵinject(i2$1.InventoryBinaryService)); }, token: FilesService, providedIn: "root" });
FilesService.ctorParameters = () => [
    { type: SystemOptionsService$1 },
    { type: InventoryBinaryService }
];

class LoadMoreComponent {
    constructor(element, cdRef) {
        this.element = element;
        this.cdRef = cdRef;
        this.useIntersection = true;
        this.hidden = false;
        this.class = 'c8y-list__item p-0';
        this.maxIterations = 10;
        this.hideNoMoreDataHint = false;
        this.onLoad = new EventEmitter();
        this.isLoading = false;
        this.counter = 0;
        this.hasNoMoreData = false;
        this.LOAD_SAME_PAGE_THRESHOLD = 50;
        this.destroyed = false;
    }
    get hostClass() {
        return this.hidden || (!this.hasMore && !this.hasNoMoreData) ? '' : this.class;
    }
    get hasMore() {
        return (this.paging && (this.paging.totalPages > this.paging.currentPage || !!this.paging.nextPage));
    }
    ngAfterContentInit() {
        this.destroyed = false;
        if (this.useIntersection && 'IntersectionObserver' in window) {
            this.intersectionObserver = new IntersectionObserver(event => this.buttonInView(event[0]), {
                root: this.container ? this.container.nativeElement : null
            });
            this.intersectionObserver.observe(this.element.nativeElement);
        }
        this.hasNoMoreData = this.shouldShowNoMoreDataHint();
    }
    ngOnDestroy() {
        this.destroyed = true;
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
            this.intersectionObserver.unobserve(this.element.nativeElement);
            clearTimeout(this.loadUntilIntersected);
        }
    }
    loadMore(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.destroyed) {
                this.isLoading = true;
                this.cdRef.detectChanges();
                if (event) {
                    event.stopPropagation();
                }
                if (this.hasMore) {
                    const result = yield this.paging.next();
                    this.paging = result.paging;
                    this.onLoad.emit(result.data);
                    this.intersectionLoading();
                    this.hasNoMoreData = this.shouldShowNoMoreDataHint();
                }
                else {
                    this.counter = 0;
                    this.isLoading = false;
                }
                this.cdRef.detectChanges();
            }
        });
    }
    intersectionLoading() {
        if (this.useIntersection && this.hasMore && this.loadUntilIntersected !== null) {
            this.loadUntilIntersected = setTimeout(() => this.loadMore(), this.getLoadingThreshold());
            this.useIntersection = this.shouldSwitchMode();
        }
        else {
            this.isLoading = false;
            this.loadUntilIntersected = undefined;
            this.cdRef.detectChanges();
        }
    }
    getLoadingThreshold() {
        return this.LOAD_SAME_PAGE_THRESHOLD * this.counter++;
    }
    shouldShowNoMoreDataHint() {
        return (this.counter !== 0 || this.noMoreDataHint) && !this.hasMore && !this.hidden;
    }
    shouldSwitchMode() {
        return this.counter < this.maxIterations || this.hidden;
    }
    buttonInView(event) {
        if (event.isIntersecting) {
            this.loadMore();
        }
        else if (this.loadUntilIntersected) {
            clearTimeout(this.loadUntilIntersected);
            this.loadUntilIntersected = null;
            this.isLoading = false;
            this.cdRef.detectChanges();
        }
        else {
            // avoiding a race condition when timeout is faster
            // cleared then set
            this.loadUntilIntersected = null;
        }
    }
}
LoadMoreComponent.ɵfac = function LoadMoreComponent_Factory(t) { return new (t || LoadMoreComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
LoadMoreComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LoadMoreComponent, selectors: [["c8y-load-more"]], hostVars: 2, hostBindings: function LoadMoreComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.hostClass);
    } }, inputs: { useIntersection: "useIntersection", hidden: "hidden", class: "class", maxIterations: "maxIterations", hideNoMoreDataHint: "hideNoMoreDataHint", paging: "paging", container: "container", noMoreDataHint: "noMoreDataHint", loadingTemplate: "loadingTemplate", loadNextLabel: "loadNextLabel", loadingLabel: "loadingLabel" }, outputs: { onLoad: "onLoad" }, decls: 5, vars: 3, consts: [["class", "btn btn-default btn-block text-center", 3, "ngClass", "visibility", "height", "title", "click", 4, "ngIf"], [4, "ngIf"], ["finishHint", ""], [1, "btn", "btn-default", "btn-block", "text-center", 3, "ngClass", "title", "click"], [3, "innerHTML", 4, "ngIf", "ngIfElse"], ["loadPage", ""], [3, "innerHTML"], ["translate", "", 3, "translateParams"], ["loading", ""], [4, "ngTemplateOutlet"], [1, "legend", "form-block", "center", "last-record", 3, "title"], [3, "c8yIcon"]], template: function LoadMoreComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, LoadMoreComponent_button_0_Template, 4, 12, "button", 0);
        ɵngcc0.ɵɵtemplate(1, LoadMoreComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, LoadMoreComponent_ng_template_2_Template, 3, 4, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, LoadMoreComponent_ng_container_4_Template, 2, 1, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMore && !(ctx.loadingTemplate && ctx.isLoading));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasNoMoreData && !ctx.hideNoMoreDataHint && !ctx.isLoading);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loadingTemplate && ctx.isLoading);
    } }, directives: function () { return [ɵngcc7.NgIf, ɵngcc7.NgClass, C8yTranslateDirective, ɵngcc7.NgTemplateOutlet, IconDirective]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
LoadMoreComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
LoadMoreComponent.propDecorators = {
    paging: [{ type: Input }],
    useIntersection: [{ type: Input }],
    hidden: [{ type: Input }],
    container: [{ type: Input }],
    class: [{ type: Input }],
    maxIterations: [{ type: Input }],
    noMoreDataHint: [{ type: Input }],
    loadingTemplate: [{ type: Input }],
    hideNoMoreDataHint: [{ type: Input }],
    loadNextLabel: [{ type: Input }],
    loadingLabel: [{ type: Input }],
    onLoad: [{ type: Output }],
    hostClass: [{ type: HostBinding, args: ['class',] }]
};

class VirtualScrollerWrapperComponent {
    constructor() {
        this.filterPipe = pipe(tap());
        this.trackByFn = (i, item) => {
            return item.id;
        };
    }
    apply() {
        this.items$ = of(this.items).pipe(src => this.filterPipe(src), map(item => item));
    }
}
VirtualScrollerWrapperComponent.ɵfac = function VirtualScrollerWrapperComponent_Factory(t) { return new (t || VirtualScrollerWrapperComponent)(); };
VirtualScrollerWrapperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: VirtualScrollerWrapperComponent, selectors: [["c8y-virtual-scroller-wrapper"]], inputs: { filterPipe: "filterPipe", trackByFn: "trackByFn", items: "items", itemHeight: "itemHeight", containerHeight: "containerHeight", template: "template", strategy: "strategy" }, decls: 2, vars: 3, consts: [[3, "ngSwitch", 4, "ngIf"], [3, "ngSwitch"], [4, "ngSwitchCase"], ["windowVirtualScrollStrategy", "", 3, "itemSizePx"], [4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "itemSize"]], template: function VirtualScrollerWrapperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, VirtualScrollerWrapperComponent_ng_container_0_Template, 3, 3, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.items$));
    } }, directives: function () { return [ɵngcc7.NgIf, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc8.CdkVirtualScrollViewport, VirtualScrollWindowDirective, ɵngcc8.CdkVirtualForOf, ɵngcc7.NgTemplateOutlet, ɵngcc8.CdkFixedSizeVirtualScroll]; }, pipes: function () { return [ɵngcc7.AsyncPipe]; }, encapsulation: 2 });
VirtualScrollerWrapperComponent.propDecorators = {
    items: [{ type: Input }],
    itemHeight: [{ type: Input }],
    containerHeight: [{ type: Input }],
    template: [{ type: Input }],
    filterPipe: [{ type: Input }],
    strategy: [{ type: Input }],
    trackByFn: [{ type: Input }]
};

/**
 * A directive to iterate over IResultList<T> data from @c8y/client.
 * Depending on the [c8yForLoadMore] a load more button is:
 *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
 *          change with maxIterations settings).
 *  - show: Shows a load more button for the user to decide
 *  - none: Doesn't perform any load more action.
 *  - hidden: Loads more data automatically but with no visible button for the user.
 *
 * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
 * filter the data displayed currently as well as the data loaded by subsequent requests.
 *
 * Example:
 * ```html
 * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
 *  {{ i + 1 }}. {{device.name}}
 * </div>
 * ```
 * The above example will list all entities that are applied to `devices`:
 * ```typescript
 * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
 * ```
 * It will display the first 10 items, if there is more space left on the screen, and there are more
 * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
 * it will stop and switch to `show` mode.
 *
 * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
 * request done by the load more component:
 * ```typescript
 * this.filterPipe = pipe(
 *    map((data: []) => {
 *     return data.filter(
 *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
 *    );
 *  })
 * );
 * ```
 * The pipe must be an rxjs pipe and can take any operator.
 *
 * Example with realtime support and items count output (e.g. for handling empty state and header):
 *
 * ```html
 * <c8y-list-group>
 *   <div class="c8y-empty-state" *ngIf="count === 0">
 *     (...)
 *   </div>
 *
 *   <div class="page-sticky-header hidden-xs c8y-list__item c8y-list--timeline" *ngIf="count > 0">
 *     (...)
 *   </div>
 *
 *   <ng-template
 *     c8yFor
 *     let-operation
 *     [c8yForOf]="items$"
 *     [c8yForPipe]="filterPipe"
 *     [c8yForRealtime]="realtime"
 *     [c8yForRealtimeOptions]="realtimeOptions"
 *     (c8yForCount)="count = $event"
 *   >
 *     <c8y-li-timeline>
 *       (...)
 *     </c8y-li-timeline>
 *   </ng-template>
 * </c8y-list-group>
 * ```
 *
 * ```typescript
 * @Component({
 *   (...)
 * })
 * export class ExampleComponent {
 *   @Input() deviceId: IIdentified;
 *   items$ = this.operationService.list({
 *     deviceId: this.deviceId,
 *     fragmentType: 'c8y_MyOperation',
 *     dateFrom: new Date(0).toISOString(),
 *     dateTo: new Date(Date.now()).toISOString(),
 *     revert: true,
 *     withTotalPages: true
 *   });
 *   filterPipe = pipe(map((ops: IOperation[]) => ops.filter(op => op.c8y_MyOperation)));
 *   realtimeOptions: ForOfRealtimeOptions = {
 *     entityOrId: this.deviceId,
 *     removeOnUpdate: true,
 *     insertOnUpdate: true
 *   } as ForOfRealtimeOptions;
 *   count: number;
 *
 *   constructor(
 *     private operationService: OperationService,
 *     public realtime: OperationRealtimeService
 *   ) {}
 * }
 * ```
 */
class ForOfDirective {
    constructor(tpl, vcr, componentFactoryResolver, cdRef) {
        this.tpl = tpl;
        this.vcr = vcr;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cdRef = cdRef;
        this.cachedData = [];
        this.loadMoreMode = 'auto';
        this.dataPipe = pipe(tap());
        this.itemDataPipe = pipe(map(item => [item]), src => this.dataPipe(src), map(([item]) => item));
        this.maxIterations = 10;
        this.realtimeOptions = {};
        this.unsubscribe$ = new Subject();
        /**
         * Enable virtual scroll rendering method.
         */
        this.c8yForEnableVirtualScroll = false;
        /**
         * Sets mode of virtual scroller instance.
         * window is used for case when whole viewport is scrolled.
         * fixed can be used on inner-scroll containers.
         */
        this.c8yForVirtualScrollStrategy = 'window';
        /**
         * The number of items currently loaded in the list.
         */
        this.c8yForCount = new EventEmitter();
        this.count = 0;
    }
    get shouldUseLoadMoreButton() {
        return (this.loadMoreMode === 'auto' || this.loadMoreMode === 'show' || this.loadMoreMode === 'hidden');
    }
    get hasMoreData() {
        return this.loadMore && this.loadMore.hasMore;
    }
    get length() {
        return this.cachedData.length;
    }
    /**
     * The data setter. Must be a response from @c8y/data or an observable.
     * You can pass an observable with null to explicitly clear the list.
     */
    set c8yForOf(fetchData) {
        if (fetchData) {
            this.obs$ = (isObservable(fetchData) ? fetchData : of(fetchData)).pipe(map(result => {
                if (result === null) {
                    this.paging = null;
                    return [];
                }
                const { paging, data } = result;
                this.paging = paging;
                return data;
            }));
        }
    }
    /**
     * The mode setter:
     *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
     *          change with maxIterations settings).
     *  - show: Shows a load more button for the user to decide
     *  - none: Doesn't perform any load more action.
     *  - hidden: Loads more data automatically but with no visible button for the user.
     */
    set c8yForLoadMore(type) {
        this.loadMoreMode = type;
    }
    /**
     * The pipe setter to attach any rxjs pipe to the current and more loaded data.
     */
    set c8yForPipe(dataPipe) {
        if (dataPipe) {
            this.dataPipe = dataPipe;
        }
    }
    /**
     * A template to use if no data is found at all (e.g. if you apply a filter pipe).
     */
    set c8yForNotFound(notFoundTemplate) {
        this.notFoundTemplate = notFoundTemplate;
        if (this.loadMore) {
            this.loadMore.noMoreDataHint = notFoundTemplate;
        }
    }
    /**
     * The maximum numbers of iterations to call data from the api.
     */
    set c8yForMaxIterations(maxIterations) {
        this.maxIterations = maxIterations;
    }
    /**
     * A custom loading component.
     */
    set c8yForLoadingTemplate(loadingTemplate) {
        this.loadingTemplate = loadingTemplate;
    }
    /**
     * Load next text label.
     */
    set c8yForLoadNextLabel(loadNextLabel) {
        this.loadNextLabel = loadNextLabel;
    }
    /**
     * A RealtimeService instance.
     */
    set c8yForRealtime(source) {
        this.realtime = source;
    }
    /**
     * Realtime options.
     */
    set c8yForRealtimeOptions(realtimeOptions) {
        this.realtimeOptions = realtimeOptions;
    }
    /**
     * A comparator function for comparing list items. Used to determine
     * the position at which a new element should be added to the list.
     */
    set c8yForComparator(comparator) {
        this.comparator = comparator;
    }
    ngOnInit() {
        this.handleRealtime();
    }
    ngOnChanges(changes) {
        if (this.obs$ && (changes.c8yForPipe || changes.c8yForOf)) {
            this.unsubscribePaging();
            if (this.virtualScrollInstance) {
                this.virtualScrollInstance.filterPipe = this.dataPipe;
                window.scrollTo({ top: 0 });
            }
            // only re-rendering  on filtering if all data is already loaded
            // from the backend
            const reRender = !this.hasMoreData && !!changes.c8yForPipe && !changes.c8yForOf;
            if (reRender) {
                this.obs$ = of(this.cachedData);
            }
            this.pagingSub = this.obs$
                .pipe(tap(data => {
                if (!reRender) {
                    this.cachedData = data;
                }
            }))
                .pipe(src => this.dataPipe(src))
                .subscribe((data) => {
                this.updateCount(data.length);
                this.render(data, reRender);
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribePaging();
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    handleRealtime() {
        if (this.realtime) {
            this.handleRealtimeCreate();
            this.handleRealtimeUpdate();
            this.handleRealtimeDelete();
        }
    }
    /**
     * On create notification:
     * - if item passes data pipe, then insert it.
     * @private
     */
    handleRealtimeCreate() {
        const { entityOrId } = this.realtimeOptions;
        this.realtime
            .onCreate$(entityOrId)
            .pipe(item$ => this.itemDataPipe(item$), filter(item => item), takeUntil(this.unsubscribe$))
            .subscribe(item => this.insert(item));
    }
    /**
     * On update notification:
     * - if item is displayed and passes data pipe, then update it,
     * - if item is displayed and doesn't pass data pipe, then remove it (if `removeOnUpdate` is true),
     * - if item is not displayed and passes data pipe, then insert it (if `insertOnUpdate` is true),
     * - if item is not displayed and doesn't pass data pipe, then ignore it.
     * @private
     */
    handleRealtimeUpdate() {
        const { entityOrId } = this.realtimeOptions;
        this.realtime
            .onUpdate$(entityOrId)
            .pipe(item$ => combineLatest([
            item$,
            item$.pipe(src => this.itemDataPipe(src), map(item => item !== undefined))
        ]), takeUntil(this.unsubscribe$))
            .subscribe(([item, passesDataPipe]) => {
            const { insertOnUpdate, removeOnUpdate } = this.realtimeOptions;
            const displayed = this.isDisplayed(coerceNumberProperty(item.id));
            if (displayed) {
                if (passesDataPipe) {
                    this.update(item);
                }
                else if (removeOnUpdate) {
                    this.remove(coerceNumberProperty(item.id));
                }
            }
            else if (passesDataPipe && insertOnUpdate) {
                this.insert(item);
            }
        });
    }
    /**
     * On delete notification:
     * - remove item from the list (if not there, it will be just ignored).
     * @private
     */
    handleRealtimeDelete() {
        const { entityOrId } = this.realtimeOptions;
        this.realtime
            .onDelete$(entityOrId)
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(id => this.remove(coerceNumberProperty(id)));
    }
    render(data, reRender = false) {
        if (this.c8yForEnableVirtualScroll) {
            if (!this.virtualScrollInstance) {
                this.virtualScrollInstance = this.createVirtualScrollWrapperComponent();
                if (this.shouldUseLoadMoreButton) {
                    this.loadMore = this.createLoadMoreButtonComponent(false);
                }
            }
            this.setVirtualScrollContents(data);
            return;
        }
        this.vcr.clear();
        data.forEach((item, index) => {
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData,
                loadMoreComponent: this.loadMore
            };
            this.vcr.createEmbeddedView(this.tpl, context);
        });
        if (this.shouldUseLoadMoreButton) {
            this.loadMore = this.createLoadMoreButtonComponent(reRender);
        }
    }
    append(data) {
        if (this.c8yForEnableVirtualScroll) {
            this.appendVirtualScrollContent(data);
            return;
        }
        data.forEach(item => {
            const index = this.shouldUseLoadMoreButton ? this.vcr.length - 1 : this.vcr.length;
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData,
                loadMoreComponent: this.loadMore
            };
            this.vcr.createEmbeddedView(this.tpl, context, index);
        });
    }
    loadMoreData(data) {
        if (data.length > 0) {
            this.updateCount(data.length);
            this.append(data);
        }
        this.cdRef.detectChanges();
    }
    createLoadMoreButtonComponent(reRender) {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(LoadMoreComponent);
        const componentRef = this.vcr.createComponent(componentFactory);
        const instance = componentRef.instance;
        instance.paging = this.paging;
        instance.useIntersection = this.loadMoreMode === 'auto' || this.loadMoreMode === 'hidden';
        instance.hidden = this.loadMoreMode === 'hidden';
        instance.maxIterations = this.maxIterations;
        instance.noMoreDataHint = this.notFoundTemplate;
        instance.loadingTemplate = this.loadingTemplate;
        instance.loadNextLabel = this.loadNextLabel;
        this.pagingSub = instance.onLoad
            .pipe(map((data) => this.checkForDuplicates(data)), tap((data) => {
            this.cachedData = this.cachedData.concat(data);
        }))
            .pipe(src => this.dataPipe(src))
            .subscribe(data => this.loadMoreData(data));
        if (reRender) {
            assign(instance, this.loadMore);
        }
        return instance;
    }
    createVirtualScrollWrapperComponent() {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(VirtualScrollerWrapperComponent);
        const componentRef = this.vcr.createComponent(componentFactory);
        const instance = componentRef.instance;
        instance.items = this.cachedData;
        instance.itemHeight = this.c8yForVirtualScrollElementSize;
        instance.template = this.tpl;
        instance.strategy = this.c8yForVirtualScrollStrategy;
        instance.containerHeight = this.c8yForVirtualScrollContainerHeight;
        return instance;
    }
    insert(item) {
        let index = 0;
        if (this.comparator && this.cachedData.length) {
            let comparisionResult;
            do {
                const view = this.vcr.get(index);
                const itemB = get(view, 'context.$implicit');
                comparisionResult = item && itemB ? this.comparator(item, itemB) : 0;
                if (comparisionResult <= 0) {
                    index++;
                }
            } while (comparisionResult <= 0 && index < this.cachedData.length);
        }
        // Do not append elements after the last one currently loaded,
        // as it may belong further down there on the list and will
        // be eventually loaded with one of the next pages.
        if (index < this.cachedData.length || this.cachedData.length === 0) {
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData
            };
            this.cachedData.splice(index, 0, item);
            const viewRef = this.tpl.createEmbeddedView(context);
            this.vcr.insert(viewRef, index);
            this.updateCount(1);
        }
    }
    update(updatedItem) {
        this.forMatchingEmbeddedViewRef((item) => item && updatedItem && item.id === updatedItem.id, (view) => {
            view.context.$implicit = updatedItem;
            view.markForCheck();
        });
    }
    remove(idToRemove) {
        if (this.isDisplayed(idToRemove)) {
            this.updateCount(-1);
        }
        this.forMatchingEmbeddedViewRef((item) => item && coerceNumberProperty(item.id, NaN) === idToRemove, (view) => view.destroy());
    }
    updateCount(countChange) {
        this.count += countChange;
        this.c8yForCount.emit(this.count);
    }
    isDisplayed(idToCheck) {
        let displayed = false;
        this.forMatchingEmbeddedViewRef((item) => item && coerceNumberProperty(item.id, NaN) === idToCheck, () => { displayed = true; });
        return displayed;
    }
    forMatchingEmbeddedViewRef(filterFn, callbackFn) {
        for (let i = 0; i < this.vcr.length; i++) {
            const view = this.vcr.get(i);
            const item = get(view, 'context.$implicit');
            if (filterFn(item)) {
                callbackFn(view);
            }
        }
    }
    checkForDuplicates(data) {
        return this.realtime
            ? data.filter(item => !this.cachedData.some(cached => cached.id === item.id))
            : data;
    }
    unsubscribePaging() {
        if (this.pagingSub) {
            this.pagingSub.unsubscribe();
        }
    }
    setVirtualScrollContents(items) {
        if (this.c8yForEnableVirtualScroll && this.virtualScrollInstance) {
            this.virtualScrollInstance.items = items;
            this.virtualScrollInstance.apply();
        }
    }
    appendVirtualScrollContent(items) {
        if (this.c8yForEnableVirtualScroll && this.virtualScrollInstance) {
            this.virtualScrollInstance.items = this.virtualScrollInstance.items.concat(items);
            this.virtualScrollInstance.apply();
        }
    }
}
ForOfDirective.ɵfac = function ForOfDirective_Factory(t) { return new (t || ForOfDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ForOfDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ForOfDirective, selectors: [["", "c8yFor", ""]], inputs: { c8yForEnableVirtualScroll: "c8yForEnableVirtualScroll", c8yForVirtualScrollStrategy: "c8yForVirtualScrollStrategy", c8yForOf: "c8yForOf", c8yForLoadMore: "c8yForLoadMore", c8yForPipe: "c8yForPipe", c8yForNotFound: "c8yForNotFound", c8yForMaxIterations: "c8yForMaxIterations", c8yForLoadingTemplate: "c8yForLoadingTemplate", c8yForLoadNextLabel: "c8yForLoadNextLabel", c8yForRealtime: "c8yForRealtime", c8yForRealtimeOptions: "c8yForRealtimeOptions", c8yForComparator: "c8yForComparator", c8yForVirtualScrollElementSize: "c8yForVirtualScrollElementSize", c8yForVirtualScrollContainerHeight: "c8yForVirtualScrollContainerHeight" }, outputs: { c8yForCount: "c8yForCount" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
ForOfDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
ForOfDirective.propDecorators = {
    c8yForOf: [{ type: Input }],
    c8yForLoadMore: [{ type: Input }],
    c8yForPipe: [{ type: Input }],
    c8yForNotFound: [{ type: Input }],
    c8yForMaxIterations: [{ type: Input }],
    c8yForLoadingTemplate: [{ type: Input }],
    c8yForLoadNextLabel: [{ type: Input }],
    c8yForRealtime: [{ type: Input }],
    c8yForRealtimeOptions: [{ type: Input }],
    c8yForComparator: [{ type: Input }],
    c8yForEnableVirtualScroll: [{ type: Input }],
    c8yForVirtualScrollElementSize: [{ type: Input }],
    c8yForVirtualScrollStrategy: [{ type: Input }],
    c8yForVirtualScrollContainerHeight: [{ type: Input }],
    c8yForCount: [{ type: Output }]
};

/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
*/
class HumanizeAppNamePipe {
    constructor(translateService) {
        this.translateService = translateService;
        this.internalApps = {
            administration: 'Administration',
            cockpit: 'Cockpit',
            devicemanagement: 'Device management'
        };
    }
    transform(appNameOrApp = 'Cumulocity') {
        const appName = this.getAppName(appNameOrApp);
        let text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName });
    }
    getAppName(appNameOrApp) {
        const appName = this.getFirstDefined([
            get$1(appNameOrApp, 'name'),
            get$1(appNameOrApp, 'contextPath'),
            appNameOrApp
        ]) || '';
        return this.internalApps[appName] || this.humanize(appName);
    }
    getFirstDefined(values) {
        return find(values, negate(isUndefined$1));
    }
    isPublicApp(appNameOrApp) {
        return Boolean(get$1(appNameOrApp, 'public'));
    }
    humanize(str = '') {
        const result = str.replace(/_/g, ' ').split('');
        result[0] = (result[0] || '').toUpperCase();
        return result.join('');
    }
}
HumanizeAppNamePipe.ɵfac = function HumanizeAppNamePipe_Factory(t) { return new (t || HumanizeAppNamePipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService, 16)); };
HumanizeAppNamePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "humanizeAppName", type: HumanizeAppNamePipe, pure: true });
HumanizeAppNamePipe.ctorParameters = () => [
    { type: TranslateService$1 }
];

/*
 * Humanize any string
 * Usage:
 *   'something' | humanize
*/
class HumanizePipe {
    static humanize(str = '') {
        str = str
            .replace(/\./g, ' ')
            .replace(/c8y[\s,_]*/gi, '')
            .replace(/_/g, ' ')
            .replace(/([A-Z][a-z])/g, ' $1')
            .replace(/^\$\.?/, '')
            .replace(/^\s*/, '')
            .replace(/\s*$/, '')
            .replace(/\s+/g, ' ');
        return upperFirst(str);
    }
    transform(str) {
        return HumanizePipe.humanize(str);
    }
}
HumanizePipe.ɵfac = function HumanizePipe_Factory(t) { return new (t || HumanizePipe)(); };
HumanizePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "humanize", type: HumanizePipe, pure: true });

/**
 * Allows to set a icon. Switches between c8y default icons
 * and font awesome icons
 * @example <i [c8yIcon]="'clock'">
 */
class IconDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.c8yMatch = /^c8y-/;
        this.klasses = [];
        this.currentClasses = '';
    }
    set c8yIcon(icon) {
        this.updateIcon(icon);
    }
    isC8y(icon) {
        return this.c8yMatch.test(icon);
    }
    getClasses(icon = '') {
        let classes = '';
        if (icon) {
            const _icon = icon.trim();
            const isC8y = this.isC8y(_icon);
            const iconClass = isC8y ? _icon.replace(this.c8yMatch, 'c8y-icon-') : `dlt-c8y-icon-${_icon}`;
            classes = `${isC8y ? 'c8y-icon' : ''} ${iconClass}`;
        }
        return classes;
    }
    updateIcon(icon) {
        const newClasses = this.getClasses(icon);
        if (newClasses !== this.currentClasses) {
            this.currentClasses.split(/\s/).filter((c) => c).forEach((klass) => {
                this.renderer.removeClass(this.el.nativeElement, klass);
            });
            newClasses.split(/\s/).filter((c) => c).forEach((klass) => {
                this.renderer.addClass(this.el.nativeElement, klass);
            });
            this.currentClasses = newClasses;
        }
    }
}
IconDirective.ɵfac = function IconDirective_Factory(t) { return new (t || IconDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
IconDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: IconDirective, selectors: [["", "c8yIcon", ""]], inputs: { c8yIcon: "c8yIcon" } });
IconDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
IconDirective.propDecorators = {
    c8yIcon: [{ type: Input }]
};
const ICONS = [
    'home',
    'th',
    'bar-chart-o',
    'tasks',
    'tachometer',
    'bell',
    'puzzle-piece',
    'map-marker',
    'location-arrow',
    'globe',
    'power-off',
    'desktop',
    'laptop',
    'mobile',
    'signal',
    'qrcode',
    'file',
    'file-text',
    'folder',
    'folder-open',
    'archive',
    'ssd',
    'book',
    'bookmark',
    'tag',
    'flag',
    'search',
    'heart',
    'star',
    'bolt',
    'cog',
    'cogs',
    'wrench',
    'ban',
    'user',
    'users',
    'sign-in',
    'sign-out',
    'upload',
    'download',
    'cloud-upload',
    'cloud-download',
    'cloud',
    'hourglass',
    'refresh',
    'repeat',
    'undo',
    'lock',
    'unlock',
    'info',
    'question-circle',
    'exclamation-circle',
    'bug',
    'calendar',
    'random',
    'asterisk',
    'key',
    'link',
    'chain-broken',
    'external-link',
    'picture-o',
    'comment',
    'bullhorn',
    'phone',
    'lightbulb-o',
    'flask',
    'cloud-network',
    'exchange',
    'code-fork',
    'keyboard-o',
    'terminal',
    'code',
    'clipboard',
    'pencil',
    'envelope',
    'inbox',
    'reply',
    'share',
    'thumbs-up',
    'thumbs-down',
    'check',
    'plus',
    'expand',
    'compress',
    'arrows',
    'arrow-up',
    'arrow-down',
    'arrow-left',
    'arrow-right',
    'th-list',
    'bars',
    'table',
    'columns',
    'filter',
    'sort',
    'sort-up',
    'sort-down',
    'ellipsis-h',
    'ellipsis-v',
    'rss'
];

/**
 * Decorator to memoize function results.
 * @param resolver Cache key resolver function, used by memoize from lodash.
 */
function memoize(resolver) {
    return (target, fnName, descriptor) => {
        const fn = descriptor.value;
        descriptor.value = function (...args) {
            const memoizedFnName = `_${fnName}Memoized`;
            if (!this[memoizedFnName]) {
                this[memoizedFnName] = memoize$1(fn, resolver);
            }
            return this[memoizedFnName].apply(this, args);
        };
    };
}

class Permissions {
    constructor(appState, inventory, user) {
        this.appState = appState;
        this.inventory = inventory;
        this.user = user;
    }
    /**
     * Checks if the current user has write permissions for the given mo.
     * (either through global role, individual device permissions or via inventory roles).
     *
     * @param {array} roleIds Array of roles which the current user should have.
     * @param {IManagedObject | IIdentified} mo The managed object for which we are checking whether the user has access.
     */
    canEdit(roleIds, mo) {
        return this.checkIfCanEdit(roleIds, mo);
    }
    hasRole(roleId) {
        const currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasRole(currentUser, roleId);
    }
    hasAllRoles(roleIds) {
        const currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAllRoles(currentUser, roleIds);
    }
    hasAnyRole(roleIds) {
        const currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAnyRole(currentUser, roleIds);
    }
    checkIfOwner(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentUserName = yield this.appState.currentUser.value.userName;
            const { data, res } = yield this.inventory.detail(mo.id);
            return currentUserName === data.owner;
        });
    }
    checkWithRequest(mo) {
        const moName = mo.name;
        const moId = mo.id;
        const partialUpdateObject = {
            id: moId,
            name: moName
        };
        return this.inventory
            .update(partialUpdateObject)
            .then(success => {
            return true;
        })
            .catch(err => {
            return false;
        });
    }
    checkIfCanEdit(roleIds, mo) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.hasAnyRole(roleIds)) {
                return true;
            }
            else if (yield this.checkIfOwner(mo)) {
                return true;
            }
            else if (yield this.checkWithRequest(mo)) {
                return true;
            }
            return false;
        });
    }
}
Permissions.ɵfac = function Permissions_Factory(t) { return new (t || Permissions)(ɵngcc0.ɵɵinject(AppStateService), ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ɵngcc3.UserService)); };
Permissions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Permissions, factory: Permissions.ɵfac });
Permissions.ctorParameters = () => [
    { type: AppStateService },
    { type: InventoryService },
    { type: UserService }
];
__decorate([
    memoize(property('id'))
], Permissions.prototype, "checkIfOwner", null);
__decorate([
    memoize(property('id'))
], Permissions.prototype, "checkWithRequest", null);

/**
 * A structural directive that conditionally includes a template only if the user has
 * all or any of the roles passed as an input. By default the directive checks all roles:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * To check if the user has any of the required roles to view the element you need to use the `allowAny` input:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny: true" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * or use the shorter version
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 */
class IfAllowedDirective {
    constructor(template, container, permissions) {
        this.template = template;
        this.container = container;
        this.permissions = permissions;
        this.allowAny = false;
    }
    /**
     * One or many roles required for the element to be rendered
     */
    set c8yIfAllowed(roleIds) {
        this.rolesIds = Array.isArray(roleIds) ? roleIds : !!roleIds ? [roleIds] : [];
    }
    /**
     * Switches to the mode where at least one of the provided roles is sufficient for the element to be rendered
     */
    set c8yIfAllowedAllowAny(allowAny) {
        this.allowAny = allowAny === null || allowAny;
    }
    ngOnInit() {
        if (!this.rolesIds ||
            !this.rolesIds.length ||
            (this.allowAny
                ? this.permissions.hasAnyRole(this.rolesIds)
                : this.permissions.hasAllRoles(this.rolesIds))) {
            this.container.createEmbeddedView(this.template);
        }
    }
}
IfAllowedDirective.ɵfac = function IfAllowedDirective_Factory(t) { return new (t || IfAllowedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(Permissions)); };
IfAllowedDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: IfAllowedDirective, selectors: [["", "c8yIfAllowed", ""]], inputs: { c8yIfAllowed: "c8yIfAllowed", c8yIfAllowedAllowAny: "c8yIfAllowedAllowAny" } });
IfAllowedDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Permissions }
];
IfAllowedDirective.propDecorators = {
    c8yIfAllowed: [{ type: Input }],
    c8yIfAllowedAllowAny: [{ type: Input }]
};

class LoadingComponent {
}
LoadingComponent.ɵfac = function LoadingComponent_Factory(t) { return new (t || LoadingComponent)(); };
LoadingComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LoadingComponent, selectors: [["c8y-loading"]], decls: 7, vars: 0, consts: [[1, "p-24", "p-relative", "d-inline-block"], [1, "spinner"], [1, "rect1"], [1, "rect2"], [1, "rect3"], [1, "rect4"], [1, "rect5"]], template: function LoadingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "div", 3);
        ɵngcc0.ɵɵelement(4, "div", 4);
        ɵngcc0.ɵɵelement(5, "div", 5);
        ɵngcc0.ɵɵelement(6, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });

/*
 * Implementation of pure "Mapping" pipe based on
 * https://codeburst.io/angular-bad-practices-eab0e594ce92#389b
 */
class MapFunctionPipe {
    /*
     * This will be a universal pipe for array mappings. You may add more
     * type checkings and runtime checkings to make sure it works correctly everywhere.
     */
    transform(value, mappingFunction, thisArg) {
        return mappingFunction.apply(thisArg || this, Array.isArray(value) ? value : [value]);
    }
}
MapFunctionPipe.ɵfac = function MapFunctionPipe_Factory(t) { return new (t || MapFunctionPipe)(); };
MapFunctionPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "map", type: MapFunctionPipe, pure: true });

const NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
/**
 * Formats a value according to digit options and locale rules.
 * Extends the behavior of Angular's <code>number</code> pipe by
 * providing an option to define if a truncated value should be
 * rounded up or down (with the <code>number</code> pipe the
 * value will be rounded using the "to-nearest" method).
 *
 * ```html
 * <span>{{ 3.45612 | c8yNumber: 'ceil':'1.1-3' }}</span> <!-- 3.457 -->
 * <span>{{ 3.46 | c8yNumber: 'ceil':'1.3-3' }}</span> <!-- 3.460 -->
 * <span>{{ 3.45685 | c8yNumber: 'floor':'1.1-3' }}</span> <!-- 3.456 -->```
 */
class NumberPipe extends DecimalPipe {
    constructor(locale) {
        super(locale);
    }
    /**
     * @param value The value to be formatted.
     * @param round When the value needs to be truncated defines if it will be rounded up (='ceil') or down (='floor')
     * @param digitsInfo Sets digit and decimal representation.
     * @param locale Specifies what locale format rules to use.
     */
    transform(value, round, digitsInfo, locale) {
        if (round) {
            let maxFractionPart = 0;
            if (digitsInfo) {
                const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
                if (parts === null) {
                    throw new Error(`${digitsInfo} is not a valid digit info`);
                }
                maxFractionPart = Number.parseInt(parts[5], 10);
            }
            const multiplicator = Math.pow(10, maxFractionPart);
            value = strToNumber(value);
            value = Math[round](value * multiplicator) / multiplicator;
        }
        return super.transform(value, digitsInfo, locale);
    }
}
NumberPipe.ɵfac = function NumberPipe_Factory(t) { return new (t || NumberPipe)(ɵngcc0.ɵɵdirectiveInject(LOCALE_ID, 16)); };
NumberPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "c8yNumber", type: NumberPipe, pure: true });
NumberPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
/**
 * Transforms a string into a number (if needed).
 */
function strToNumber(value) {
    // Convert strings to numbers
    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
        return Number(value);
    }
    if (typeof value !== 'number') {
        throw new Error(`${value} is not a number`);
    }
    return value;
}

class OperationResultComponent {
}
OperationResultComponent.ɵfac = function OperationResultComponent_Factory(t) { return new (t || OperationResultComponent)(); };
OperationResultComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OperationResultComponent, selectors: [["c8y-operation-result"]], inputs: { text: "text", vertical: "vertical", size: "size", type: "type" }, decls: 5, vars: 7, consts: [[1, "d-flex", "a-i-center", "p-24", "m-24", "p-b-0", 3, "ngClass"], ["viewBox", "0 0 24 24", 3, "ngStyle", 4, "ngIf"], ["class", "text-center text-medium animated fadeIn delay-05 m-8", 4, "ngIf"], ["viewBox", "0 0 24 24", 3, "ngStyle"], ["stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd", "stroke-linecap", "round"], ["stroke", "var(--input-validation-success, #008800)", "stroke-width", "2", "stroke-linejoin", "round", "points", "7.8678862 11.508 11.9656988 15.984 20.2137797 7.44836856", "stroke-dasharray", "28", "stroke-dashoffset", "28", 1, "check-anim"], ["d", "M18.3656773,3.02795925 C16.5689809,1.75089408 14.3721808,1 12,1 C5.92486775,1 1,5.92486775 1,12 C1,18.0751322 5.92486775,23 12,23 C18.0751322,23 23,18.0751322 23,12", "id", "Path", "stroke", "var(--input-validation-success, #008800)", "stroke-width", "2", "stroke-dasharray", "60", "stroke-dashoffset", "60", 1, "stroke-anim"], ["id", "Artboard-Copy-3", "stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"], ["x1", "12", "y1", "13.5356315", "x2", "12", "y2", "7", "id", "Path-2", "stroke", "var(--input-validation-error, #E0000E)", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round", "stroke-dasharray", "7", "stroke-dashoffset", "7", 1, "symbol-anim"], ["x1", "12", "y1", "17.7678157", "x2", "12", "y2", "17.2321843", "id", "Path-2", "stroke", "var(--input-validation-error, #E0000E)", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round", "stroke-dasharray", "7", "stroke-dashoffset", "7", 1, "symbol-anim"], ["id", "Oval", "stroke", "var(--input-validation-error, #E0000E)", "stroke-width", "2", "cx", "12", "cy", "12", "r", "11", "stroke-dasharray", "70", "stroke-dashoffset", "70", "stroke-linejoin", "round", 1, "stroke-anim"], ["stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"], ["x1", "12", "y1", "13.5356315", "x2", "12", "y2", "7", "id", "Path-2", "stroke", "var(--input-validation-warning, #FF801F)", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round", "stroke-dasharray", "7", "stroke-dashoffset", "7", 1, "symbol-anim"], ["x1", "12", "y1", "17.7678157", "x2", "12", "y2", "17.2321843", "id", "Path-2", "stroke", "var(--input-validation-warning, #FF801F)", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round", "stroke-dasharray", "7", "stroke-dashoffset", "7", 1, "symbol-anim"], ["fill-rule", "nonzero", "stroke", "var(--input-validation-warning, #FF801F)", "stroke-width", "2", "stroke-dashoffset", "1000", "stroke-dasharray", "90", "stroke-linecap", "round", "stroke-linejoin", "round", "stroke-linejoin", "round", 1, "stroke-anim"], ["d", "M12,1 L23,21 L1,21 L12,1 Z", "id", "Path"], [1, "text-center", "text-medium", "animated", "fadeIn", "delay-05", "m-8"]], template: function OperationResultComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, OperationResultComponent__svg_svg_1_Template, 4, 3, "svg", 1);
        ɵngcc0.ɵɵtemplate(2, OperationResultComponent__svg_svg_2_Template, 5, 3, "svg", 1);
        ɵngcc0.ɵɵtemplate(3, OperationResultComponent__svg_svg_3_Template, 6, 3, "svg", 1);
        ɵngcc0.ɵɵtemplate(4, OperationResultComponent_p_4_Template, 2, 1, "p", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c7, ctx.vertical));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "success");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "error");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "warning");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.text);
    } }, directives: [ɵngcc7.NgClass, ɵngcc7.NgIf, ɵngcc7.NgStyle], styles: [".stroke-anim[_ngcontent-%COMP%] {\n    animation: stroke-anim 0.75s ease-in-out 0s 1 forwards;\n  }\n  .check-anim[_ngcontent-%COMP%] {\n    animation: check-anim 0.35s ease-in-out 0.5s 1 forwards;\n  }\n  .symbol-anim[_ngcontent-%COMP%] {\n    animation: symbol-anim 0.35s ease-in-out 0.5s 1 forwards;\n  }\n\n  @keyframes stroke-anim {\n    0% {\n      stroke-dashoffset: 60;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  @keyframes check-anim {\n    0% {\n      stroke-dashoffset: 28;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n  @keyframes symbol-anim {\n    0% {\n      stroke-dashoffset: 7;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  .delay-05[_ngcontent-%COMP%] {\n    animation-delay: 0.5s;\n  }"] });
OperationResultComponent.propDecorators = {
    text: [{ type: Input }],
    vertical: [{ type: Input }],
    size: [{ type: Input }],
    type: [{ type: Input }]
};

/**
 * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
 * @example
 * <div *c8yOutlet="template"></div>
 * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
 * <div *c8yOutlet="nodes"></div>
 *
 *
 * note: If template is instance of HTMLElement (for example, node compiled by angularJS) then there can be
 * only single instance rendered, as only one instance of HTMLElement can exist in DOM.
 * If there is need for displaying same element multiple times, please make sure to inject into
 * this element createCopy function, which should return another instance of given element.
 *
 */
class OutletDirective {
    constructor(viewContainer, resolver, renderer, el) {
        this.viewContainer = viewContainer;
        this.resolver = resolver;
        this.renderer = renderer;
        this.el = el;
        this.properties = {};
    }
    /**
     * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
     * @example
     * <div *c8yOutlet="template"></div>
     * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
     * <div *c8yOutlet="nodes"></div>
     */
    set c8yOutlet(template) {
        if (!template) {
            return;
        }
        if (this._element instanceof Element) {
            this.renderer.removeChild(this._element.parentElement, this._element);
        }
        this.viewContainer.clear();
        // case TemplateRef -> <div *c8yOutlet="template"></div>
        if (template instanceof TemplateRef) {
            this.viewContainer.createEmbeddedView(template);
            // case DOM Element -> <div *c8yOutlet="nodes"></div>
        }
        else if (template instanceof Element) {
            const parent = this.renderer.parentNode(this.el.nativeElement);
            this.destroy();
            /**
             * Because compiled element can be used only once, we need to create copy of it
             * in order to display it in multiple locations.
             * For example standard "More" menu, and its RWD version.
             */
            if (template.createCopy) {
                this._element = template.createCopy();
            }
            else {
                this._element = template;
            }
            this.renderer.insertBefore(parent, this._element, this.el.nativeElement);
            // case Component -> <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
        }
        else {
            const factory = this.resolver.resolveComponentFactory(template);
            const component = this.viewContainer.createComponent(factory);
            assign(component.instance, this.properties);
        }
    }
    set c8yOutletProperties(value) {
        this.properties = value;
    }
    ngOnDestroy() {
        this.destroy();
    }
    destroy() {
        if (this._element) {
            const _parent = this.renderer.parentNode(this._element);
            this.renderer.removeChild(_parent, this._element);
        }
    }
}
OutletDirective.ɵfac = function OutletDirective_Factory(t) { return new (t || OutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OutletDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OutletDirective, selectors: [["", "c8yOutlet", ""]], inputs: { c8yOutlet: "c8yOutlet", c8yOutletProperties: "c8yOutletProperties" } });
OutletDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ElementRef }
];
OutletDirective.propDecorators = {
    c8yOutlet: [{ type: Input }],
    c8yOutletProperties: [{ type: Input }]
};

class ProgressBarComponent {
    constructor() {
        this.message = gettext('Loading…');
        this.progress = null;
    }
}
ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(); };
ProgressBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ProgressBarComponent, selectors: [["c8y-progress-bar"]], inputs: { message: "message", progress: "progress" }, decls: 4, vars: 3, consts: [[1, "bg-inherit"], ["class", "progress progress-striped active", 4, "ngIf"], ["class", "spinner-snake", 4, "ngIf"], [4, "ngIf"], [1, "progress", "progress-striped", "active"], ["role", "progressbar", "aria-valuemin", "0", "aria-valuemax", "100", 1, "progress-bar"], [1, "spinner-snake"]], template: function ProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ProgressBarComponent_div_1_Template, 2, 3, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ProgressBarComponent_div_2_Template, 1, 0, "div", 2);
        ɵngcc0.ɵɵtemplate(3, ProgressBarComponent_p_3_Template, 3, 3, "p", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.progress !== null);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.progress === null);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.message);
    } }, directives: [ɵngcc7.NgIf], pipes: [C8yTranslatePipe], encapsulation: 2 });
ProgressBarComponent.propDecorators = {
    message: [{ type: Input }],
    progress: [{ type: Input }]
};

class ShortenUserNamePipe {
    transform({ firstName = '', lastName = '', userName = '' }) {
        let parsedFirstName = firstName.trim().split(/\s+/).shift().substr(0, 1);
        const parsedLastName = lastName.trim().split(/\s+/).pop();
        if (!parsedLastName) {
            parsedFirstName = firstName.split(/\s+/).shift();
        }
        else {
            parsedFirstName = parsedFirstName ? `${parsedFirstName}. ` : '';
        }
        return parsedFirstName || parsedLastName ? parsedFirstName + parsedLastName : userName;
    }
}
ShortenUserNamePipe.ɵfac = function ShortenUserNamePipe_Factory(t) { return new (t || ShortenUserNamePipe)(); };
ShortenUserNamePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "shortenUserName", type: ShortenUserNamePipe, pure: true });

class ShowIfFilterPipe {
    transform(value) {
        const observableShowIfMap = mapValues(value, val => {
            if (typeof val.showIf === 'boolean') {
                return of(val.showIf);
            }
            else if (typeof val.showIf === 'function') {
                return toObservable(val.showIf());
            }
            else {
                return of(true);
            }
        });
        return combineLatest(entries(observableShowIfMap).map(([key, val]) => val.pipe(map(showIf => ({ key, showIf }))))).pipe(map((allShowIfs) => {
            allShowIfs.forEach(showIf => (value[showIf.key].showIf = showIf.showIf));
            return omitBy(value, (v) => !v.showIf);
        }));
    }
}
ShowIfFilterPipe.ɵfac = function ShowIfFilterPipe_Factory(t) { return new (t || ShowIfFilterPipe)(); };
ShowIfFilterPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "showIfFilter", type: ShowIfFilterPipe, pure: true });

/** The helper UI service for tenant related methods built upon client services. */
class TenantUiService {
    constructor(userService, appStateService, applicationService) {
        this.userService = userService;
        this.appStateService = appStateService;
        this.applicationService = applicationService;
        this.MANAGEMENT = 'management';
        this.ROLE_TENANT_MANAGEMENT_READ = 'ROLE_TENANT_MANAGEMENT_READ';
    }
    /**
     * Returns current tenant
     */
    get currentTenant() {
        return this.appStateService.currentTenant.value;
    }
    /**
     * Checks whether current tenant is the management tenant.
     * @returns True if current tenant is the management tenant.
     */
    isManagementTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appStateService.currentTenant.value;
            return this.isManagement(currentTenant);
        });
    }
    /**
     * Checks whether current tenant is an enterprise tenant.
     * An enterprise tenant is a tenant which has subscribed:
     * - `branding` microservice or `feature-branding` feature app,
     * - `sslmanagement` microservice,
     * - `feature-user-hierarchy` feature app,
     * - `feature-broker` feature app.
     *
     * See https://cumulocity.com/guides/users-guide/enterprise-edition/ for details about such tenants.
     *
     * @returns True, if current tenant is an enterprise tenant.
     */
    isEnterpriseTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            const hasBranding = (yield this.hasApp({ name: 'branding' })) ||
                (yield this.hasApp({ name: 'feature-branding' }));
            const hasSslManagement = yield this.hasApp({ name: 'sslmanagement' });
            const hasUserHierarchy = yield this.hasApp({ name: 'feature-user-hierarchy' });
            const hasDataBroker = yield this.hasApp({ name: 'feature-broker' });
            return hasBranding && hasSslManagement && hasUserHierarchy && hasDataBroker;
        });
    }
    /**
     * Checks whether the current user has read access to tenants, i.e.:
     * - the current tenant can create subtenants or it's the management tenant,
     * - the current user has ROLE_TENANT_MANAGEMENT_READ role.
     * @returns True, if the current user has read access to tenants.
     */
    canReadTenants() {
        const currentTenant = this.appStateService.currentTenant.value;
        const currentUser = this.appStateService.currentUser.value;
        return ((this.isManagement(currentTenant) || currentTenant.allowCreateTenants) &&
            this.userService.hasRole(currentUser, this.ROLE_TENANT_MANAGEMENT_READ));
    }
    /**
     * Returns tenant login option which is preferred.
     *
     * @param All available tenant's login options.
     *
     * @returns Returns ITenantLoginOption.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const preferredLoginOption = tenantLoginOptionsService.getPreferredLoginOption(loginOptions);
     *   })();
     * ```
     */
    getPreferredLoginOption(loginOptions) {
        const defaultFallback = { type: TenantLoginOptionType.BASIC, userManagementSource: UserManagementSource.INTERNAL };
        if (!loginOptions) {
            return defaultFallback;
        }
        else {
            const visibleLoginOptions = loginOptions.filter(this.isVisibleOnLoginPage);
            return visibleLoginOptions.find(this.isOauthInternal)
                || visibleLoginOptions.find(this.isBasic)
                || visibleLoginOptions.find(this.isOauth2)
                || defaultFallback;
        }
    }
    /**
     * Returns Oauth2 login option if it can be used by UI.
     *
     * @param All available tenant's login options.
     *
     * @returns Returns ITenantLoginOption.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2 = tenantLoginOptionsService.getOauth2Option(loginOptions);
     *   })();
     * ```
     */
    getOauth2Option(loginOptions) {
        return loginOptions.find(loginOption => this.isVisibleOnLoginPage(loginOption) && this.isOauth2(loginOption));
    }
    /**
     * Callback which checks if login option is visible on login page.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const loginOptionsVisibleOnLoginPage = loginOptions.filter(tenantLoginOptionsService.isVisibleOnLoginPage);
     *   })();
     * ```
     */
    isVisibleOnLoginPage(loginOption) {
        return loginOption.visibleOnLoginPage;
    }
    /**
     * Callback which checks if login option type is 'OAUTH2_INTERNAL'.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2InternalLoginOptions = loginOptions.filter(tenantLoginOptionsService.isOauthInternal);
     *   })();
     * ```
     */
    isOauthInternal(loginOption) {
        return loginOption.type === TenantLoginOptionType.OAUTH2_INTERNAL;
    }
    /**
     * Callback which checks if login option type is 'BASIC'.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const basicLoginOptions = loginOptions.filter(tenantLoginOptionsService.isBasic);
     *   })();
     * ```
     */
    isBasic(loginOption) {
        return loginOption.type === TenantLoginOptionType.BASIC;
    }
    /**
     * Callback which checks if login option type is 'OAUTH2' and grantType is 'AUTHORIZATION_CODE'.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2LoginOptions = loginOptions.filter(tenantLoginOptionsService.OAUTH2);
     *   })();
     * ```
     */
    isOauth2(loginOption) {
        return loginOption.type === TenantLoginOptionType.OAUTH2 && loginOption.grantType === GrantType.AUTHORIZATION_CODE;
    }
    /**
     * Checks if application of type MICROSERVICE is subscribed to the current tenant.
     * It checks the application references of the currentTenant from the application state.
     * No additional request.
     * @param identifier application name or contextPath
     */
    isMicroserviceSubscribedInCurrentTenant(identifier) {
        if ((identifier === null || identifier === void 0 ? void 0 : identifier.length) > 0) {
            const microservices = this.getSubscribedMicroservicesInCurrentTenant();
            return microservices.some(({ name, contextPath }) => [name, contextPath].includes(identifier));
        }
        return false;
    }
    /**
     * Gets all application of type MICROSERVICE subscribed to the current tenant.
     * It checks the application references of the currentTenant from the application state.
     * No additional request.
     */
    getSubscribedMicroservicesInCurrentTenant() {
        const references = get(this.appStateService.currentTenant, 'value.applications.references', []);
        return references.map(appRef => appRef.application).filter(app => app.type === ApplicationType.MICROSERVICE);
    }
    hasApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.applicationService.isAvailable(app)).data;
        });
    }
    isManagement(currentTenant) {
        return currentTenant.name === this.MANAGEMENT;
    }
}
TenantUiService.ɵfac = function TenantUiService_Factory(t) { return new (t || TenantUiService)(ɵngcc0.ɵɵinject(ɵngcc3.UserService), ɵngcc0.ɵɵinject(AppStateService), ɵngcc0.ɵɵinject(ɵngcc3.ApplicationService)); };
TenantUiService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TenantUiService, factory: TenantUiService.ɵfac });
TenantUiService.ctorParameters = () => [
    { type: UserService },
    { type: AppStateService },
    { type: ApplicationService }
];

class TextareaAutoresizeDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.focused = false;
        this.resizeObserver = new window.ResizeObserver(() => !this.focused && this.resize());
    }
    onInput() {
        this.resize();
    }
    onFocus() {
        this.focused = true;
    }
    onBlur() {
        this.focused = false;
    }
    ngOnInit() {
        var _a;
        this.resizeObserver.observe((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement);
        setTimeout(() => this.resize());
    }
    ngOnDestroy() {
        var _a;
        this.resizeObserver.unobserve((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement);
    }
    resize() {
        var _a;
        this.elementRef.nativeElement.style.height = '32px';
        this.elementRef.nativeElement.style.height = ((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollHeight) + 'px';
    }
}
TextareaAutoresizeDirective.ɵfac = function TextareaAutoresizeDirective_Factory(t) { return new (t || TextareaAutoresizeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
TextareaAutoresizeDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TextareaAutoresizeDirective, selectors: [["", "c8y-textarea-autoresize", ""]], hostBindings: function TextareaAutoresizeDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function TextareaAutoresizeDirective_input_HostBindingHandler() { return ctx.onInput(); })("focus", function TextareaAutoresizeDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("blur", function TextareaAutoresizeDirective_blur_HostBindingHandler() { return ctx.onBlur(); });
    } } });
TextareaAutoresizeDirective.ctorParameters = () => [
    { type: ElementRef }
];
TextareaAutoresizeDirective.propDecorators = {
    onInput: [{ type: HostListener, args: [':input',] }],
    onFocus: [{ type: HostListener, args: [':focus',] }],
    onBlur: [{ type: HostListener, args: [':blur',] }]
};

class UserPreferencesStorageLocal {
    constructor() {
        this.LOCAL_STORAGE_KEY = 'userPreferences';
        this.store = {};
        try {
            const jsonStore = window.localStorage.getItem(this.LOCAL_STORAGE_KEY);
            if (jsonStore) {
                this.store = JSON.parse(jsonStore) || {};
            }
        }
        catch (e) {
            // do nothing
        }
    }
    get(key) {
        return of(this.store[key]);
    }
    set(key, value) {
        this.store[key] = value;
        return this.saveJsonStore();
    }
    saveJsonStore() {
        return window.localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(this.store));
    }
}

class UserPreferencesStorageInventory {
    constructor(inventory) {
        this.inventory = inventory;
        this.TYPE = 'c8y_UserPreference';
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.list({ fragmentType: key });
            return data.length ? data[0][key] : undefined;
        });
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.list({ fragmentType: key });
            const updateMo = { [key]: value, type: this.TYPE };
            let out;
            if (data.length) {
                updateMo.id = data[0].id;
                out = this.inventory.update(updateMo);
            }
            else {
                out = this.inventory.create(updateMo);
            }
            return out;
        });
    }
}

class UserPreferencesService {
    constructor(user, inventory, appState) {
        this.user = user;
        this.inventory = inventory;
        this.appState = appState;
        this.LOCAL_STORAGE_KEY = 'userPreferences';
        this.storage = {
            local: new UserPreferencesStorageLocal(),
            inventory: new UserPreferencesStorageInventory(this.inventory)
        };
        this.currentUser = this.appState.currentUser;
    }
    get(key) {
        return this.currentUser.pipe(first$1(), switchMap((user) => this.getForUser(key, user)));
    }
    set(key, value) {
        return new Promise((resolve, reject) => {
            this.currentUser.pipe(first$1()).subscribe((user) => {
                resolve(this.setForUser(key, value, user));
            }, reject);
        });
    }
    getForUser(key, user) {
        const rawKey = this.getRawKey(key, user);
        const storage = this.getStorage(user);
        return from(storage.get(rawKey));
    }
    setForUser(key, value, user) {
        const rawKey = this.getRawKey(key, user);
        const storage = this.getStorage(user);
        return Promise.resolve(storage.set(rawKey, value));
    }
    getRawKey(key, user) {
        const username = user.userName.replace(/\./g, '__');
        return `${key}${username}`;
    }
    getStorage(user) {
        return this.user.hasAllRoles(user, ['ROLE_INVENTORY_READ', 'ROLE_INVENTORY_ADMIN']) ?
            this.storage.inventory : this.storage.local;
    }
}
UserPreferencesService.ɵfac = function UserPreferencesService_Factory(t) { return new (t || UserPreferencesService)(ɵngcc0.ɵɵinject(ɵngcc3.UserService), ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(AppStateService)); };
UserPreferencesService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: UserPreferencesService, factory: UserPreferencesService.ɵfac });
UserPreferencesService.ctorParameters = () => [
    { type: UserService },
    { type: InventoryService },
    { type: AppStateService }
];

// This is an adapted version of the original FixedSizeVirtualScrollStrategy
// https://github.com/angular/components/blob/master/src/cdk/scrolling/fixed-size-virtual-scroll.ts
class VirtualScrollWindowStrategy {
    constructor(itemSizePx, offsetSizePx, minBufferPx, maxBufferPx) {
        this._viewport = null;
        this._scrolledIndexChange = new Subject();
        this.destroy = new Subject();
        this._itemSizePx = itemSizePx;
        this._offsetSizePx = offsetSizePx;
        this._minBufferPx = minBufferPx;
        this._maxBufferPx = maxBufferPx;
        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());
        this.destroy$ = this.destroy.asObservable();
    }
    /**
     * Attaches this scroll strategy to a viewport.
     * @param viewport The viewport to attach this strategy to.
     */
    attach(viewport) {
        this._viewport = viewport;
        this._updateTotalContentSize();
        this._updateRenderedRange();
        fromEvent(window, 'scroll')
            .pipe(takeUntil(this.destroy$), debounceTime(10))
            .subscribe(() => {
            this._updateRenderedRange();
        });
    }
    /** Detaches this scroll strategy from the currently attached viewport. */
    detach() {
        this._scrolledIndexChange.complete();
        this._viewport = null;
        this.destroy.next();
        this.destroy.complete();
    }
    /**
     * Update the item size and buffer size.
     * @param itemSize The size of the items in the virtually scrolling list.
     * @param offsetSizePx The size of the offset (in pixels)..
     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
     */
    updateItemAndBufferSize(itemSize, offsetSizePx, minBufferPx, maxBufferPx) {
        this._itemSizePx = itemSize;
        this._offsetSizePx = offsetSizePx;
        this._minBufferPx = minBufferPx;
        this._maxBufferPx = maxBufferPx;
        this._updateTotalContentSize();
        this._updateRenderedRange();
    }
    /** @docs-private Implemented as part of VirtualScrollStrategy. */
    onContentScrolled() {
        this._updateRenderedRange();
    }
    /** @docs-private Implemented as part of VirtualScrollStrategy. */
    onDataLengthChanged() {
        this._updateTotalContentSize();
        this._updateRenderedRange();
    }
    /** @docs-private Implemented as part of VirtualScrollStrategy. */
    onContentRendered() {
        /* no-op */
    }
    /** @docs-private Implemented as part of VirtualScrollStrategy. */
    onRenderedOffsetChanged() {
        /* no-op */
    }
    /**
     * Scroll to the offset for the given index.
     * @param index The index of the element to scroll to.
     * @param behavior The ScrollBehavior to use when scrolling.
     */
    scrollToIndex(index, behavior) {
        if (this._viewport) {
            this._viewport.scrollToOffset(index * this._itemSizePx, behavior);
        }
    }
    /** Update the viewport's total content size. */
    _updateTotalContentSize() {
        if (!this._viewport) {
            return;
        }
        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSizePx + this._offsetSizePx);
        this._viewport._changeDetectorRef.detectChanges();
        setTimeout(() => {
            var _a;
            const children = this._viewport.elementRef.nativeElement.children[0].children;
            if (children.length > 0) {
                this._itemSizePx = (_a = children[0]) === null || _a === void 0 ? void 0 : _a.clientHeight;
                this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSizePx + this._offsetSizePx);
            }
        }, 100);
    }
    /** Update the viewport's rendered range. */
    _updateRenderedRange() {
        if (!this._viewport) {
            return;
        }
        // Use the window as a reference for viewPort size and offset
        const viewportSize = window.innerHeight;
        let scrollOffset = window.pageYOffset;
        const renderedRange = this._viewport.getRenderedRange();
        const newRange = { start: renderedRange.start, end: renderedRange.end };
        const dataLength = this._viewport.getDataLength();
        // Prevent NaN as result when dividing by zero.
        let firstVisibleIndex = this._itemSizePx > 0 ? scrollOffset / this._itemSizePx : 0;
        // If user scrolls to the bottom of the list and data changes to a smaller list
        if (newRange.end > dataLength) {
            // We have to recalculate the first visible index based on new data length and viewport size.
            const maxVisibleItems = Math.ceil(viewportSize / this._itemSizePx);
            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));
            // If first visible index changed we must update scroll offset to handle start/end buffers
            // Current range must also be adjusted to cover the new position (bottom of new list).
            if (firstVisibleIndex !== newVisibleIndex) {
                firstVisibleIndex = newVisibleIndex;
                scrollOffset = newVisibleIndex * this._itemSizePx;
                newRange.start = Math.floor(firstVisibleIndex);
            }
            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));
        }
        const startBuffer = scrollOffset - newRange.start * this._itemSizePx;
        if (startBuffer < this._minBufferPx && newRange.start !== 0) {
            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSizePx);
            newRange.start = Math.max(0, newRange.start - expandStart);
            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex +
                (viewportSize + this._minBufferPx) / this._itemSizePx));
        }
        else {
            const endBuffer = newRange.end * this._itemSizePx - (scrollOffset + viewportSize);
            if (endBuffer < this._minBufferPx && newRange.end !== dataLength) {
                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSizePx);
                if (expandEnd > 0) {
                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);
                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSizePx));
                }
            }
        }
        this._viewport.setRenderedRange(newRange);
        this._viewport.setRenderedContentOffset(this._itemSizePx * newRange.start);
        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
    }
}

/**
 * Provider factory for `VirtualScrollWindowStrategy` that simply extracts the already created
 * `VirtualScrollWindowStrategy` from the given directive.
 * @param windowDir The instance of `VirtualScrollWindowDirective` to extract the
 *     `VirtualScrollWindowStrategy` from.
 */
function _virtualScrollWindowStrategyFactory(windowDir) {
    return windowDir._scrollStrategy;
}
// This is an adapted version of the original CdkFixedSizeVirtualScroll
// https://github.com/angular/components/blob/master/src/cdk/scrolling/fixed-size-virtual-scroll.ts
class VirtualScrollWindowDirective {
    constructor() {
        this._itemSizePx = 20;
        this._minBufferPx = 100;
        this._maxBufferPx = 200;
        this._offsetSizePx = 0;
        /** The scroll strategy used by this directive. */
        this._scrollStrategy = new VirtualScrollWindowStrategy(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
    }
    /** The size of the items in the list (in pixels). */
    get itemSizePx() { return this._itemSizePx; }
    set itemSizePx(value) { this._itemSizePx = coerceNumberProperty(value); }
    /**
     * The minimum amount of buffer rendered beyond the viewport (in pixels).
     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
     */
    get minBufferPx() { return this._minBufferPx; }
    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }
    /**
     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
     */
    get maxBufferPx() { return this._maxBufferPx; }
    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }
    /** The size of the offset (in pixels). */
    get offsetSizePx() { return this._offsetSizePx; }
    set offsetSizePx(value) { this._offsetSizePx = coerceNumberProperty(value); }
    ngOnChanges() {
        this._scrollStrategy.updateItemAndBufferSize(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
    }
}
VirtualScrollWindowDirective.ɵfac = function VirtualScrollWindowDirective_Factory(t) { return new (t || VirtualScrollWindowDirective)(); };
VirtualScrollWindowDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: VirtualScrollWindowDirective, selectors: [["cdk-virtual-scroll-viewport", "windowVirtualScrollStrategy", ""]], inputs: { itemSizePx: "itemSizePx", minBufferPx: "minBufferPx", maxBufferPx: "maxBufferPx", offsetSizePx: "offsetSizePx" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: VIRTUAL_SCROLL_STRATEGY,
                useFactory: _virtualScrollWindowStrategyFactory,
                deps: [forwardRef(() => VirtualScrollWindowDirective)]
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
VirtualScrollWindowDirective.propDecorators = {
    itemSizePx: [{ type: Input }],
    minBufferPx: [{ type: Input }],
    maxBufferPx: [{ type: Input }],
    offsetSizePx: [{ type: Input }]
};

class ZipService {
    getEntries(zipFile) {
        return new Observable(subscriber => {
            const reader = new zip.BlobReader(zipFile);
            zip.createReader(reader, zipReader => {
                zipReader.getEntries(entries => {
                    subscriber.next(entries);
                    subscriber.complete();
                });
            }, message => {
                subscriber.error({ message });
            });
        });
    }
    getData(entry) {
        const data = new Observable(subscriber => {
            const writer = new zip.BlobWriter();
            entry.getData(writer, blob => {
                subscriber.next(blob);
                subscriber.complete();
            });
        });
        return data;
    }
    getJsonData(zipFile, fileEntryFilter) {
        return this.getEntries(zipFile).pipe(map(entries => {
            const entryFile = entries.find(entry => entry.filename === fileEntryFilter.filename);
            if (!entryFile) {
                throwError(`File not found ${JSON.stringify(fileEntryFilter)}`);
            }
            return entryFile;
        }), concatMap(entry => this.getData(entry)), switchMap((blob) => __awaiter(this, void 0, void 0, function* () { return yield blob.text(); })), map(text => JSON.parse(text)));
    }
}

function initializeServices(translateService, state, userPreferences) {
    const initialize = () => {
        const queryStringLanguage = translateService.queryStringLang();
        const firstLanguage = translateService.firstSupportedLanguage();
        /*
          The ?lang parameter will prevent the user preference language from being activated
        */
        if (queryStringLanguage && translateService.getSupported(queryStringLanguage)) {
            translateService.switchToLanguage(queryStringLanguage);
        }
        else {
            state.currentUser
                .pipe(map(user => user && user.userName), filter(u => !!u), distinctUntilChanged(), switchMap(() => userPreferences.get('language')), startWith(firstLanguage), filter(lang => !!lang), distinctUntilChanged())
                .subscribe(lang => {
                translateService.switchToLanguage(lang);
            });
        }
    };
    return initialize;
}
const ICON_LIST = new InjectionToken('iconList');
/**
 * Commonly used directives, data access and translation. This module is the shared
 * module across all core components. It should be imported by default.
 *
 * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
 * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
 * @exports I18nModule Translation module.
 * @exports NgCommonModule Angular common module.
 * @exports DataModule The data layer to allow DI with @c8y/client
 * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher)
 * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`
 * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`
 * @exports ForOfDirective A forOf directive like ngFor but with load-more function
 * @exports LoadMoreComponent A component to load more data from a certain data-source
 * @exports ProgressBarComponent Displays either defined or undefined progress.
 * @exports DropdownDirectionDirective Determines if a dropdown opens to the bottom or to the top.
 * @exports TextareaAutoresizeDirective resizes a textarea height as the user inputs.
 * @exports OperationResultComponent displays an animated svg for success and error operations.
 */
class CommonModule {
    static providers() {
        return [
            ...DataModule.providers(),
            // TODO: maybe we can think of a way to remove this C8Y_APP global
            { provide: HOOK_OPTIONS, useValue: window.C8Y_APP || {}, multi: true },
            {
                provide: APP_INITIALIZER,
                useFactory: initializeServices,
                deps: [TranslateService, AppStateService, UserPreferencesService],
                multi: true
            },
            { provide: ICON_LIST, useValue: ICONS, multi: false },
            ...I18nModule$1.providers(),
            UserPreferencesService,
            OptionsService,
            AppStateService,
            Permissions,
            TenantUiService,
            HumanizePipe,
            HumanizeAppNamePipe,
            ShortenUserNamePipe,
            MapFunctionPipe,
            DatePipe,
            ZipService,
            FilesService,
            BytesPipe
        ];
    }
    static forRoot() {
        return {
            ngModule: CommonModule,
            providers: CommonModule.providers()
        };
    }
}
CommonModule.ɵfac = function CommonModule_Factory(t) { return new (t || CommonModule)(); };
CommonModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CommonModule });
CommonModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule$1, I18nModule$1, TooltipModule, ScrollingModule], I18nModule$1, CommonModule$1] });

/**
 * This service is handling the cookie banner and cookie preferences related logic.
 */
class CookieBannerService {
    constructor(options) {
        this.options = options;
        this.STORAGE_KEY = 'acceptCookieNotice';
        this.COOKIE_BANNER = 'cookieBanner';
        this.PREVIEW_COOKIE_BANNER = 'previewCookieBanner';
        this.IS_PREVIEW = 'preview';
        this.COOKIE_PREFERENCES_CONFIG = 'cookiePreferences';
        this.isCookieBannerShowed$ = new Subject();
        this.cookieDescriptions = {
            required: gettext("These cookies are required to enable core site functionality. They perform a task or operation without which a site's functionality would not be possible."),
            functional: gettext('These cookies are used to track site usage and to process my personal data to measure and improve usability and performance. We will neither forward this data to any third party nor use this data for direct marketing purposes. I recognize that I can opt in and out of these cookies at any time.'),
            marketing: gettext('These cookies are used to target advertising to a user.')
        };
    }
    /**
     * Returns Cookie preferences configuration.
     * @returns {object} Return an object with cookie preferences configuration defined in application options.
     */
    getCookiePreferencesConfig() {
        return this.options.get(this.COOKIE_PREFERENCES_CONFIG);
    }
    /**
     * Returns Cookie banner configuration.
     * @returns {object} Return an object with cookie banner configuration defined in application options.
     */
    getCookieBannerSettings() {
        let cookieSettings;
        if (this.isPreviewMode()) {
            cookieSettings = this.options.get(this.PREVIEW_COOKIE_BANNER);
            if (cookieSettings) {
                return cookieSettings;
            }
        }
        cookieSettings = this.options.get(this.COOKIE_BANNER) || {};
        return cookieSettings;
    }
    /**
     * Converts the cookie preferences to boolean. Sets the cookie preferences configuration in local storage.
     * @param {object} cookiePreferences Object with cookie preferences configuration
     */
    setCookies(cookiePreferences) {
        const cookiesToSet = Object.assign({}, cookiePreferences);
        Object.entries(cookiesToSet).forEach(([cookieName, cookieValue]) => {
            cookiesToSet[cookieName] = typeof cookieValue === 'string' ? true : cookieValue;
        });
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cookiesToSet));
    }
    /**
     * Verifies that cookie banner should be shown.
     * @returns {boolean} Returns if the cookie banner should be shown.
     */
    shouldShowCookieBanner() {
        const settings = this.getCookieBannerSettings();
        const shouldShowDefault = !!settings.cookieBannerText && !this.getUserCookiePreferences();
        if (this.isPreviewMode()) {
            return !(settings && settings.cookieBannerDisabled);
        }
        return shouldShowDefault;
    }
    /**
     * Gets the cookie preferences configuration from local storage.
     * @returns {object} Object with cookie preferences configuration.
     */
    getUserCookiePreferences() {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEY));
    }
    /**
     * Verifies that cookie preferences configuration is defined.
     * @returns {boolean} Returns if the cookie preferences configuration is defined.
     */
    isConfigCookiePreferencesDefined() {
        return !!this.getCookiePreferencesConfig();
    }
    /**
     * Verifies that functional cookies are enabled.
     * @returns {boolean} True when functional cookies are enabled.
     */
    isFunctionalCookieEnabled() {
        const { functional } = this.getUserCookiePreferences() || {};
        return functional === true;
    }
    /**
     * Description of cookies.
     * @param {'required' | 'functional' | 'marketing'} cookieType Takes one of the following options: 'required', 'functional', 'marketing'.
     * @returns {string} The default cookie description, if not explicitly defined in application options.
     */
    getCookieDescription(cookieType) {
        const cookieBannerConfigSettings = this.getCookiePreferencesConfig();
        return typeof cookieBannerConfigSettings[cookieType] === 'string'
            ? cookieBannerConfigSettings[cookieType]
            : this.cookieDescriptions[cookieType];
    }
    /**
     * Transforms cookie preferences configuration object to an array of cookie preferences objects. Each object in returned array contains cookie 'name', 'value' and 'isReadonly' property.
     * @param {object} cookiePreferences.
     * @returns {Array} Array shows if the cookie is Readonly.
     */
    transformCookiePreferencesToList(cookiePreferences) {
        return Object.entries(cookiePreferences).map(([name, value]) => {
            const isReadonly = name === 'required';
            return { name, value, isReadonly };
        });
    }
    /**
     * Transforms an array of cookie preferences objects to cookie preferences configuration object.
     * @param {Array} cookiePreferencesList Array of cookie preferences.
     * @returns {object} An object with cookie preferences configuration.
     */
    transformCookiePreferencesListToCookiePreferences(cookiePreferencesList) {
        return cookiePreferencesList.reduce((cookiePref, cookie) => {
            const key = cookie.name;
            cookiePref[key] = cookie.value;
            return cookiePref;
        }, {});
    }
    isPreviewMode() {
        // params from url are automatically resolved during bootstrap as string options, see: packages/cli/src/app-bootstrap/options.ts
        return this.options.get(this.IS_PREVIEW, false, true);
    }
}
CookieBannerService.ɵfac = function CookieBannerService_Factory(t) { return new (t || CookieBannerService)(ɵngcc0.ɵɵinject(OptionsService)); };
CookieBannerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CookieBannerService_Factory() { return new CookieBannerService(i0.ɵɵinject(OptionsService)); }, token: CookieBannerService, providedIn: "root" });
CookieBannerService.ctorParameters = () => [
    { type: OptionsService }
];

/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
class GainsightService {
    constructor(appState, options, cookieBannerService, userPreferencesService, translateService) {
        this.appState = appState;
        this.options = options;
        this.cookieBannerService = cookieBannerService;
        this.userPreferencesService = userPreferencesService;
        this.translateService = translateService;
        /**
         * A subject that emits the tag function as soon as a new tag is set.
         */
        this.tagFunction$ = new BehaviorSubject(null);
        this.USER_PREFERENCES_KEY = 'gainsightEnabled';
        this.GAINSIGHT_URL = 'web-sdk.aptrinsic.com/api/aptrinsic.js?a=';
        this.GAINSIGHT_GLOBAL_SCOPE = 'aptrinsic';
        this.SCRIPT_EXECUTION_WAIT_TIME = 500;
        this.OPTIONS_KEY_CATEGORY = 'gainsight';
        this.OPTIONS_KEY_NAME = 'api.key';
        this.isScriptLoaded = false;
    }
    isGainsightDisabledInUserPreferences() {
        return __awaiter(this, void 0, void 0, function* () {
            const userGainsightPref = yield this.userPreferencesService
                .get(this.USER_PREFERENCES_KEY)
                .toPromise();
            return userGainsightPref === false;
        });
    }
    setFunctionalCookie(value) {
        const cookies = this.cookieBannerService.getUserCookiePreferences();
        if (cookies) {
            Object.keys(cookies).forEach(cookieName => {
                if (cookieName === 'functional') {
                    cookies[cookieName] = value;
                    return;
                }
            });
            localStorage.setItem('acceptCookieNotice', JSON.stringify(cookies));
        }
    }
    getGainsightKey() {
        return __awaiter(this, void 0, void 0, function* () {
            this.gainsightKey =
                this.options.gainsightKey ||
                    (yield this.options.getSystemOption(this.OPTIONS_KEY_CATEGORY, this.OPTIONS_KEY_NAME));
            return this.gainsightKey;
        });
    }
    /**
     * Returns the tag global function which can be used to identify user
     * or add special events.
     */
    get tagFunction() {
        return window[this.GAINSIGHT_GLOBAL_SCOPE];
    }
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param currentTenant The current tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    loadTag(currentTenant, identify = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const scriptTag = document.createElement('script');
            const key = yield this.getGainsightKey();
            if (key && !this.isScriptLoaded) {
                this.loadScriptTag(scriptTag, key);
                combineLatest(this.appState.currentUser, fromEvent(scriptTag, 'load'), this.appState.state$.pipe(filter(({ versions }) => versions.backend), map(({ versions }) => versions), take(1)))
                    .pipe(delay(this.SCRIPT_EXECUTION_WAIT_TIME), filter(([user, scriptEvent]) => !!(scriptEvent && user)))
                    .subscribe(([user, scriptEvent, versions]) => {
                    const instanceId = this.getInstanceIdFromUrl();
                    if (identify) {
                        this.identify(user, currentTenant, instanceId, versions.ui.ngx, versions.backend);
                    }
                    this.isScriptLoaded = true;
                    this.tagFunction$.next(this.tagFunction);
                });
            }
        });
    }
    /**
     * Identifies the user/account at Gainsight.
     * @param user The user which is given to Gainsight.
     * @param tenant The tenant which is given to Gainsight.
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    identify(user, tenant, instanceId, versionUI, versionBE) {
        const windowRef = window;
        const { id: userId, email, userName, firstName, lastName } = user;
        const { name, customProperties, domainName } = tenant;
        const { externalReference } = customProperties || {};
        windowRef[this.GAINSIGHT_GLOBAL_SCOPE]('identify', {
            id: `${userId}_${name}_${instanceId}`,
            email,
            userName,
            firstName,
            lastName,
            domainName,
            versionUI,
            versionBE,
            userLanguage: this.translateService.currentLang,
            instanceId,
            externalReference
        }, {
            id: `${name}_${instanceId}`,
            instanceId
        });
    }
    triggerEvent(eventName, props) {
        if (this.tagFunction && eventName) {
            eventName = this.prepareEventName(eventName);
            this.tagFunction('track', eventName, props);
        }
    }
    translateToEnglish(textToTranslate) {
        const { currentLang } = this.translateService;
        if (currentLang === 'en') {
            return textToTranslate;
        }
        if (currentLang && currentLang !== this.cachedLanguage) {
            this.cachedRevertedTranslations = undefined;
        }
        if (!this.cachedRevertedTranslations) {
            this.cachedLanguage = currentLang;
            this.cachedRevertedTranslations = this.getRevertedTranslations(currentLang);
        }
        return this.getEnTranslation(textToTranslate, this.cachedRevertedTranslations);
    }
    /**
     * Checks if the Gainsight's tag should be loaded.
     * The decision to load Gainsight will depend on custom properties and functional cookies.
     * @param customProperties Tenant's customProperties.
     */
    shouldLoadGainsightTag(customProperties) {
        return (this.cookieBannerService.isConfigCookiePreferencesDefined() &&
            this.cookieBannerService.isFunctionalCookieEnabled() &&
            !this.isGainsightDisabled(customProperties) &&
            !this.isCustomBranding());
    }
    canEditProductExperienceSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appState.currentTenant.value;
            const { customProperties } = currentTenant;
            const gainsightKey = !!this.gainsightKey || !!(yield this.getGainsightKey());
            return (gainsightKey &&
                this.cookieBannerService.isConfigCookiePreferencesDefined() &&
                !this.isGainsightDisabled(customProperties) &&
                !!this.cookieBannerService.getUserCookiePreferences() &&
                !this.isCustomBranding());
        });
    }
    prepareEventName(baseEventName) {
        return baseEventName
            .split(':')
            .map(eventNamePart => camelCase(removeTranslationContext(eventNamePart)))
            .join(':');
        function removeTranslationContext(eventNamePart) {
            return eventNamePart.replace(/`[\w\W]*`/g, '');
        }
    }
    isGainsightDisabled(customProperties) {
        const gainsightEnabled = customProperties && customProperties.gainsightEnabled;
        return gainsightEnabled === false;
    }
    isCustomBranding() {
        const brandingCssVars = this.options.get('brandingCssVars') || {};
        return !!brandingCssVars['brand-logo-img'];
    }
    loadScriptTag(scriptTag, key) {
        try {
            const windowRef = window;
            const firstTag = document.getElementsByTagName('script')[0];
            const protocol = location.protocol;
            const gainsightGlobalScope = this.GAINSIGHT_GLOBAL_SCOPE;
            scriptTag.src = `${protocol}//${this.GAINSIGHT_URL}${key}`;
            (windowRef[this.GAINSIGHT_GLOBAL_SCOPE] =
                windowRef[this.GAINSIGHT_GLOBAL_SCOPE] ||
                    // tslint:disable-next-line:only-arrow-functions
                    function () {
                        (windowRef[gainsightGlobalScope].q = windowRef[gainsightGlobalScope].q || []).push(arguments);
                    }),
                (windowRef[gainsightGlobalScope].p = key);
            scriptTag.async = true;
            firstTag.parentNode.insertBefore(scriptTag, firstTag);
        }
        catch (ex) {
            console.warn('Failed to load Gainsight PX', ex);
        }
    }
    getInstanceIdFromUrl() {
        const hostName = location.hostname;
        return hostName.substring(hostName.indexOf('.') + 1);
    }
    /**
     * Reverses the translation object.
     *
     * **Example**
     * { Add widget: "Widget hinzufügen" }
     *
     * will be changed to:
     *
     * { Widget hinzufügen: "Add widget" }
     *
     * @param currentLang Language whose translated values are to be placed in the object key.
     * @returns Returns an inverted object where the keys have been swapped with the values.
     */
    getRevertedTranslations(currentLang) {
        const translations = this.translateService.store.translations[currentLang];
        const swappedKeysWithValues = {};
        Object.keys(translations).forEach(key => {
            swappedKeysWithValues[translations[key]] = key;
        });
        return swappedKeysWithValues;
    }
    /**Translates string back into English.
     * If the current application language is set to English, the string passed as an argument is returned.
     * @param textToTranslate string to translate.
     * @returns Returns the string translated into English.
     */
    getEnTranslation(textToTranslate, translations) {
        let enTranslation = translations[textToTranslate];
        if (!enTranslation) {
            return textToTranslate;
        }
        /** remove translation context */
        const regex = /\`(.*?)\`/;
        enTranslation = enTranslation.replace(regex, '');
        return enTranslation;
    }
}
GainsightService.ɵfac = function GainsightService_Factory(t) { return new (t || GainsightService)(ɵngcc0.ɵɵinject(AppStateService), ɵngcc0.ɵɵinject(OptionsService), ɵngcc0.ɵɵinject(CookieBannerService), ɵngcc0.ɵɵinject(UserPreferencesService), ɵngcc0.ɵɵinject(ɵngcc4.TranslateService)); };
GainsightService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GainsightService_Factory() { return new GainsightService(i0.ɵɵinject(AppStateService), i0.ɵɵinject(OptionsService), i0.ɵɵinject(CookieBannerService), i0.ɵɵinject(UserPreferencesService), i0.ɵɵinject(i2.TranslateService)); }, token: GainsightService, providedIn: "root" });
GainsightService.ctorParameters = () => [
    { type: AppStateService },
    { type: OptionsService },
    { type: CookieBannerService },
    { type: UserPreferencesService },
    { type: TranslateService$1 }
];

/**
 * This component is used as the outlet to show the action bars.
 * In a c8ycli app it is by default placed on the bootstrap component.
 */
class ActionBarComponent {
    constructor(gainsightService) {
        this.gainsightService = gainsightService;
        /**
         * Identifies if the navigator is opened. If yes, the action-bar
         * needs to move to the right.
         */
        this.navigatorOpen = false;
        /**
         * Identifies if the current view has tabs. If yes, the action bar needs
         * to move down.
         */
        this.hasTabs = false;
        /**
         * Identifies if the tabs are aligned horizontally. If yes, the tabs don't
         * need to move to the left.
         */
        this.isTabsHorizontal = false;
        /**
         * Identifies if in a mobile view the toolbar is expanded or not.
         */
        this.isPageToolbarExpanded = false;
        /**
         * Adds the default `c8y-ui-action-bar` class.
         */
        this.uiActionBar = true;
        /**
         * The current items to display in the ActionBar.
         */
        this.items$ = of([]);
        /**
         * Provides observable for right action items.
         */
        this.right$ = of([]);
        /**
         * Provides observable for left action items.
         */
        this.left$ = of([]);
        /**
         * Provides observable for more action items.
         */
        this.more$ = of([]);
        /**
         * Returns true if no items are present and hides the action bar.
         */
        this.hidden$ = of(true);
        /**
         * Binds hidden property to this component's native element
         */
        this.hidden = true;
        this.destroy$ = new Subject();
    }
    mouseDown(event) {
        if (event.getAttribute('id') === 'page-toolbar') {
            return;
        }
        const element = event.closest('[px-event]') || event.closest('[title]') || event.closest('[uib-tooltip]');
        if (!element) {
            return;
        }
        const eventName = element.getAttribute('px-event') || element.getAttribute('title') || element.getAttribute('uib-tooltip');
        const translatedEventName = this.gainsightService.translateToEnglish(eventName);
        this.gainsightService.triggerEvent(`actionBarItem:${translatedEventName}`, { url: element.baseURI });
    }
    ngOnInit() {
        this.right$ = this.items$.pipe(map(items => filter$1(items, { placement: 'right' })), map(items => sortBy(items, this.byPriority)));
        this.left$ = this.items$.pipe(map(items => filter$1(items, { placement: 'left' })), map(items => sortBy(items, this.byPriority)));
        this.more$ = this.items$.pipe(map(items => filter$1(items, { placement: 'more' })), map(items => sortBy(items, this.byPriority)));
        this.hidden$ = this.items$.pipe(map(items => {
            return !(items && items.length);
        }));
        this.hidden$
            .pipe(takeUntil(this.destroy$)).subscribe(hidden => {
            this.hidden = hidden;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    byPriority(item) {
        return -item.priority;
    }
}
ActionBarComponent.ɵfac = function ActionBarComponent_Factory(t) { return new (t || ActionBarComponent)(ɵngcc0.ɵɵdirectiveInject(GainsightService)); };
ActionBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActionBarComponent, selectors: [["c8y-action-bar"]], hostAttrs: [1, "c8y-ui-action-bar"], hostVars: 9, hostBindings: function ActionBarComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function ActionBarComponent_mousedown_HostBindingHandler($event) { return ctx.mouseDown($event.target); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("hidden", ctx.hidden);
        ɵngcc0.ɵɵclassProp("navigator-open", ctx.navigatorOpen)("has-tabs", ctx.hasTabs)("horizontal-tabs", ctx.isTabsHorizontal)("c8y-ui-action-bar", ctx.uiActionBar);
    } }, inputs: { navigatorOpen: "navigatorOpen", hasTabs: "hasTabs", isTabsHorizontal: "isTabsHorizontal", items$: "items$" }, decls: 14, vars: 12, consts: [[1, "navbar-header"], [1, "text-label-small", "p-l-16", "p-t-8", "p-b-8", "visible-xs"], [1, "text-primary"], ["id", "page-toolbar", 1, "navbar-collapse"], [1, "nav", "navbar-nav", "navbar-left"], [4, "ngFor", "ngForOf"], [1, "nav", "navbar-nav", "navbar-right"], ["class", "no-remove more-wrapper", 4, "ngIf"], [4, "c8yOutlet"], [1, "no-remove", "more-wrapper"], ["dropdown", "", 1, "dropdown"], ["dropdownToggle", "", "aria-haspopup", "true", "aria-expanded", "false", 1, "dropdown-toggle", "c8y-dropdown", "d-flex", 3, "title"], ["translate", "", 1, "text-truncate"], [3, "c8yIcon"], [1, "dropdown-menu", "visible-xs"], ["class", "dropdown-menu dropdown-menu-right hidden-xs", 4, "dropdownMenu"], [1, "dropdown-menu", "dropdown-menu-right", "hidden-xs"]], template: function ActionBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "p", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "ul", 4);
        ɵngcc0.ɵɵtemplate(7, ActionBarComponent_ng_container_7_Template, 2, 1, "ng-container", 5);
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "ul", 6);
        ɵngcc0.ɵɵtemplate(10, ActionBarComponent_ng_container_10_Template, 2, 1, "ng-container", 5);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵtemplate(12, ActionBarComponent_li_12_Template, 11, 7, "li", 7);
        ɵngcc0.ɵɵpipe(13, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, "Action bar"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(8, 6, ctx.left$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(11, 8, ctx.right$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(13, 10, ctx.more$).length > 0);
    } }, directives: [ɵngcc7.NgForOf, ɵngcc7.NgIf, OutletDirective, ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, C8yTranslateDirective, IconDirective, ɵngcc9.BsDropdownMenuDirective], pipes: [C8yTranslatePipe, ɵngcc7.AsyncPipe], encapsulation: 2 });
ActionBarComponent.ctorParameters = () => [
    { type: GainsightService }
];
ActionBarComponent.propDecorators = {
    navigatorOpen: [{ type: Input }, { type: HostBinding, args: ['class.navigator-open',] }],
    hasTabs: [{ type: Input }, { type: HostBinding, args: ['class.has-tabs',] }],
    isTabsHorizontal: [{ type: Input }, { type: HostBinding, args: ['class.horizontal-tabs',] }],
    uiActionBar: [{ type: HostBinding, args: ['class.c8y-ui-action-bar',] }],
    items$: [{ type: Input }],
    hidden: [{ type: HostBinding }],
    mouseDown: [{ type: HostListener, args: ['mousedown', ['$event.target'],] }]
};

/**
 * An action bar can be added with content projection or multi provider
 * extension. It allows to show them in three positions (left, right
 * or more). The actions placed here are always local actions to the
 * current route like "add device" or "lock dashboard".
 *
 * @example
 * ```html
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i c8yIcon="plus-circle"></i> Add random</button>
 * </c8y-action-bar-item>
 * ```
 * @exports ActionBarComponent The outlet component
 * @exports ActionBarItemComponent The items to add with cp.
 */
class ActionBarModule {
}
ActionBarModule.ɵfac = function ActionBarModule_Factory(t) { return new (t || ActionBarModule)(); };
ActionBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ActionBarModule });
ActionBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[BsDropdownModule, CommonModule, CollapseModule, RouterModule$1.forChild([])]] });

/**
 * A hook to add an action using the multi-provider extension concept.
 */
const HOOK_ACTION = new InjectionToken('ActionFactory');
/**
 * A service which defines global actions.
 */
class ActionService extends StateService {
    constructor(injector, router) {
        super();
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_ACTION, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map((items) => sortByPriority(items)), shareReplay(1));
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to the actions in the header and emits a state change.
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes an action from the header and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
}
ActionService.ɵfac = function ActionService_Factory(t) { return new (t || ActionService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
ActionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActionService_Factory() { return new ActionService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: ActionService, providedIn: "root" });
ActionService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

/**
 * This component is used as the outlet to show the action list.
 * In a c8ycli app it is by default placed on the header component near app-switcher.
 */
class ActionOutletComponent {
    constructor() {
        /**
         * Identifies if in a mobile view the toolbar is expanded or not.
         */
        this.isPageToolbarExpanded = false;
        /**
         * The current items to display in the action dropdown.
         */
        this.items = [];
    }
    /**
     * @ignore
     */
    get hasItems() {
        return !!this.items.length;
    }
    /**
     * Returns the items ordered by priority.
     */
    getByPriority() {
        return sortBy(this.items, this.byPriority);
    }
    /**
     * Invokes action after an action is clicked.
     */
    invoke(action) {
        if (action.action) {
            action.action.call();
        }
    }
    byPriority(item) {
        return -item.priority;
    }
}
ActionOutletComponent.ɵfac = function ActionOutletComponent_Factory(t) { return new (t || ActionOutletComponent)(); };
ActionOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActionOutletComponent, selectors: [["c8y-action-outlet"]], hostVars: 2, hostBindings: function ActionOutletComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("main-header-item", ctx.hasItems);
    } }, inputs: { items: "items" }, decls: 1, vars: 1, consts: [["class", "dropdown", "dropdown", "", 4, "ngIf"], ["dropdown", "", 1, "dropdown"], ["type", "button", "dropdownToggle", "", "aria-haspopup", "true", "aria-expanded", "true", 1, "main-header-button", "dropdown-toggle", "c8y-dropdown", 3, "title"], [1, "icon-2x", 3, "c8yIcon"], ["class", "dropdown-menu cog-dropdown", 4, "dropdownMenu"], [1, "dropdown-menu", "cog-dropdown"], [4, "ngFor", "ngForOf"], [4, "c8yOutlet"], [4, "ngIf"], [3, "title", "click"], [3, "c8yIcon", 4, "ngIf"], [3, "c8yIcon"]], template: function ActionOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ActionOutletComponent_div_0_Template, 5, 4, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.items && ctx.items.length > 0);
    } }, directives: [ɵngcc7.NgIf, ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, IconDirective, ɵngcc9.BsDropdownMenuDirective, ɵngcc7.NgForOf, OutletDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
ActionOutletComponent.propDecorators = {
    hasItems: [{ type: HostBinding, args: ['class.main-header-item',] }],
    items: [{ type: Input }]
};

/**
 * A <c8y-action> can be added with content projection.
 *
 * @example
 * ```html
 * <c8y-action>
 *   <button class="btn" (click)="myAction()">My action</button>
 * </c8y-action>
 * ```
 */
class ActionComponent {
    constructor(actionService) {
        this.actionService = actionService;
        /**
         * Is this action disabled.
         */
        this.disabled = false;
        /**
         * The priority of this action (the higher the number, the higher the action will be displayed; optional)
         */
        this.priority = 0;
    }
    /**
     * After page view is initialized, component adds itself to global action list.
     */
    ngAfterViewInit() {
        this.viewInitTimeout = setTimeout(() => this.actionService.add(this));
    }
    /**
     * Action is removed from global action list, if component is not used anymore.
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.actionService.remove(this);
    }
}
ActionComponent.ɵfac = function ActionComponent_Factory(t) { return new (t || ActionComponent)(ɵngcc0.ɵɵdirectiveInject(ActionService)); };
ActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActionComponent, selectors: [["c8y-action"]], viewQuery: function ActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { disabled: "disabled", priority: "priority", label: "label", icon: "icon" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""]], template: function ActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ActionComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
ActionComponent.ctorParameters = () => [
    { type: ActionService }
];
ActionComponent.propDecorators = {
    disabled: [{ type: Input }],
    label: [{ type: Input }],
    priority: [{ type: Input }],
    icon: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: false },] }]
};

/**
 * The angular module definition for actions.
 * @exports ActionComponent
 * @exports ActionOutletComponent
 */
class ActionModule {
}
ActionModule.ɵfac = function ActionModule_Factory(t) { return new (t || ActionModule)(); };
ActionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ActionModule });
ActionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            BsDropdownModule,
            RouterModule$1.forChild([])
        ]] });

/**
 * A service which allows to display alerts.
 */
class AlertService extends StateService {
    constructor() {
        super(...arguments);
        /**
         * @ignore
         */
        this.state$ = new BehaviorSubject([]);
        this.MAX_ALERTS = 3;
        this.ALERT_TIMEOUT = 3000;
    }
    /**
     * Returns all alerts.
     * @readonly
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new alert to the current state.
     */
    add(alert) {
        this.addAlert(alert);
    }
    /**
     * Adds a alert by text.
     */
    addByText(type, txt, detailedData) {
        this.addAlert({ text: txt, type, detailedData });
    }
    /**
     * Returns all alerts.
     * @deprecated Use alertService.alerts instead.
     */
    list() {
        return this.state;
    }
    /**
     * Remove an alert from the current state.
     */
    remove(alert) {
        this.changeAlerts(this.state.filter(item => !this.areSame(alert, item)));
    }
    /**
     * Updates matching alert with provided values.
     */
    update(alert, fieldsToUpdate) {
        this.changeAlerts(this.state.map(item => {
            if (this.areSame(alert, item)) {
                Object.assign(item, fieldsToUpdate);
            }
            return item;
        }));
    }
    /**
     * Removes last danger alert.
     * It can be used e.g. in the case of a failed request which triggered an alert, to hide it from user.
     *
     * ```js
     *  try {
     *    // something that might throw a danger server msg
     *  } catch (ex) {
     *   this.alertService.removeLastDanger();
     *  }
     * ```
     */
    removeLastDanger() {
        const firstDangerAlert = this.state.reverse().find(({ type }) => type === 'danger');
        this.changeAlerts(this.state.filter(alert => alert !== firstDangerAlert));
    }
    /**
     * Shorthand for a save successful alert.
     * @param savedObject The object which was saved.
     * @return A function that can be executed to show the msg.
     */
    saveSuccess(savedObject) {
        return () => {
            const text = `${savedObject} saved successfully`;
            this.addByText('success', text);
        };
    }
    /**
     * Shorthand for a create successful alert.
     * @param createdObject The object which was created.
     * @return A function that can be executed to show the msg.
     */
    createSuccess(createdObject) {
        return () => {
            const text = `${createdObject} created successfully`;
            this.addByText('success', text);
        };
    }
    /**
     * Clears all alerts.
     */
    clearAll() {
        this.changeAlerts([]);
    }
    /**
     * A shorthand to display a simple success message.
     * @param text The success text.
     * @param detailedData The text with additional information.
     */
    success(text, detailedData) {
        this.addByText('success', text, detailedData);
    }
    /**
     * A shorthand to display a simple danger message.
     * @param text The danger text.
     * @param detailedData The text with additional information.
     */
    danger(text, detailedData) {
        this.addByText('danger', text, detailedData);
    }
    /**
     * A shorthand to display a simple info message.
     * @param text The info text.
     * @param detailedData The text with additional information.
     */
    info(text, detailedData) {
        this.addByText('info', text, detailedData);
    }
    /**
     * A shorthand to display a simple warning message.
     * @param text The warning text.
     * @param detailedData The text with additional information.
     */
    warning(text, detailedData) {
        this.addByText('warning', text, detailedData);
    }
    /**
     * Creates alert from standard api errors.
     * Should be used for errors generated by @c8y/client services.
     * @param {IResult}  error The error from server.
     * @param {alertType} type The type of alert.
     */
    addServerFailure(error, type = 'danger') {
        const { data, res } = error;
        let text = (data === null || data === void 0 ? void 0 : data.message) || null;
        let detailedData;
        if (data) {
            if (typeof data === 'object') {
                detailedData = data.exceptionMessage;
            }
            else if (typeof data === 'string') {
                detailedData = data;
            }
        }
        const hasRelevantMessage = !!(text || detailedData);
        if (!text) {
            text = gettext('A server error occurred.');
        }
        if (res && !hasRelevantMessage) {
            detailedData = {
                status: res.status,
                statusText: res.statusText,
                url: res.url
            };
        }
        this.addAlert({
            type,
            text,
            detailedData
        });
    }
    /**
     * Compares two alert objects. Alerts are same if text, type, detailed data and callbacks are same.
     * Callbacks are same if they refer to the same function.
     */
    areSame(alert1, alert2) {
        return (alert1.text === alert2.text &&
            alert1.type === alert2.type &&
            isEqual(alert1.detailedData, alert2.detailedData) &&
            alert1.onClose === alert2.onClose &&
            alert1.onDetail === alert2.onDetail);
    }
    changeAlerts(newAlerts) {
        this.state$.next(newAlerts);
    }
    addAlert(alert) {
        if (!alert.text && !alert.type) {
            throw new Error('Cannot add empty alert');
        }
        const alertAlreadyAdded = this.state.find(item => this.areSame(alert, item));
        if (alertAlreadyAdded) {
            return;
        }
        this.changeAlerts([...this.state, alert]);
        this.hideAutomaticallyIfNeeded(alert);
        this.removeOldestIfMax();
    }
    hideAutomaticallyIfNeeded(alert) {
        const isSuccess = alert.type === 'success';
        const noDetails = !alert.detailedData;
        let alertTimeout = isSuccess && noDetails ? this.ALERT_TIMEOUT : 0;
        if (typeof alert.timeout !== 'undefined') {
            alertTimeout = alert.timeout;
        }
        if (alertTimeout) {
            setTimeout(() => this.remove(alert), alertTimeout);
        }
    }
    removeOldestIfMax() {
        if (this.state.length > this.MAX_ALERTS) {
            const [, ...firstRemoved] = this.state;
            this.changeAlerts(firstRemoved);
        }
    }
}
AlertService.ɵfac = /*@__PURE__*/ function () { let ɵAlertService_BaseFactory; return function AlertService_Factory(t) { return (ɵAlertService_BaseFactory || (ɵAlertService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AlertService)))(t || AlertService); }; }();
AlertService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AlertService_Factory() { return new AlertService(); }, token: AlertService, providedIn: "root" });

/**
 * The content of `c8y-alert-details` component will be displayed as alert's details.
 * This component must be placed inside `c8y-alert` component.
 */
class AlertDetailsComponent {
}
AlertDetailsComponent.ɵfac = function AlertDetailsComponent_Factory(t) { return new (t || AlertDetailsComponent)(); };
AlertDetailsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AlertDetailsComponent, selectors: [["c8y-alert-details"]], ngContentSelectors: _c1, decls: 1, vars: 0, template: function AlertDetailsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });

/**
 * Alert component allows creating alert with complex view.
 */
class AlertComponent {
    /**
     * @ignore
     */
    constructor(alertService) {
        this.alertService = alertService;
    }
    /**
     * AlertComponent adds new alert to collection stored in alertService after view init.
     */
    ngAfterViewInit() {
        if (!this.containDetailsComponent) {
            this.detailedData = null;
        }
        this.viewInitTimeout = setTimeout(() => this.alertService.add(this));
    }
    /**
     * AlertComponent removes alert from collection stored in alertService on destroy component.
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.alertService.remove(this);
    }
}
AlertComponent.ɵfac = function AlertComponent_Factory(t) { return new (t || AlertComponent)(ɵngcc0.ɵɵdirectiveInject(AlertService)); };
AlertComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AlertComponent, selectors: [["c8y-alert"]], contentQueries: function AlertComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, AlertDetailsComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containDetailsComponent = _t.first);
    } }, viewQuery: function AlertComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c8, 5);
        ɵngcc0.ɵɵviewQuery(_c9, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.detailedData = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.text = _t.first);
    } }, inputs: { type: "type", onDetail: "onDetail", onClose: "onClose" }, ngContentSelectors: _c11, decls: 4, vars: 0, consts: [["text", ""], ["detailedData", ""]], template: function AlertComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c10);
        ɵngcc0.ɵɵtemplate(0, AlertComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, AlertComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
AlertComponent.ctorParameters = () => [
    { type: AlertService }
];
AlertComponent.propDecorators = {
    type: [{ type: Input }],
    onDetail: [{ type: Input }],
    onClose: [{ type: Input }],
    detailedData: [{ type: ViewChild, args: ['detailedData', { static: false },] }],
    text: [{ type: ViewChild, args: ['text', { static: false },] }],
    containDetailsComponent: [{ type: ContentChild, args: [AlertDetailsComponent, { static: false },] }]
};

/**
 * Alert outlet component shows all added alerts. It is used in the application's `c8y-bootstrap` component.
 *
 * For applications which don’t use `c8y-bootstrap` component but want to display alerts via AlertService, a c8y-alert-outlet component needs to be added explicitly in the template.
 *
 * ## Example:
 * ```html
 *  <div class="alerts">
 *    <c8y-alert-outlet></c8y-alert-outlet>
 *  </div>
 * ```
 */
class AlertOutletComponent {
    /**
     * @ignore
     */
    constructor(position, alertService) {
        this.position = position;
        this.alertService = alertService;
        /**
         * Currently displayed details of an alert. Only one alert’s details can be displayed at a time.”
         */
        this.detailDisplayedAlert = {};
        /**
         * @ignore
         */
        this.isStatic = false;
        this.isStatic = this.position === 'static';
    }
    /**
     * The array of current alerts.
     */
    get alerts() {
        return this.alertService.state$;
    }
    /**
     * Returns a CSS class for an alert depending on its type to style the corresponding alert component.
     */
    getClass(alert) {
        const classes = [];
        if (alert.type !== 'danger') {
            classes.push('interact');
        }
        classes.push(`alert-${alert.type}`);
        return classes.join(' ');
    }
    /**
     * Executes alert’s onClose method, if provided, and closes the alert.
     * @param alert The alert which will be closed.
     */
    close(alert) {
        if (alert.onClose) {
            alert.onClose();
        }
        this.alertService.remove(alert);
    }
    /**
     * Expands details part of particular alert, and collapses details for another alerts.
     * @param alert The alert which details should be expanded.
     */
    showDetails(alert) {
        if (alert.onDetail) {
            return alert.onDetail();
        }
        this.detailDisplayedAlert = Object.assign({}, alert);
        this.detailDisplayedAlert.mode = 'raw';
        this.setDetailsContent(alert);
    }
    /**
     * Returns true if alert has extra detailedData or defines custom onDetail method.
     */
    hasDetails(alert) {
        return (alert.detailedData || alert.onDetail);
    }
    /**
     * Collapses alert's details.
     */
    closeDetails() {
        this.detailDisplayedAlert = {};
    }
    /**
     * Returns true if details part of alert is expanded.
     */
    isDetailsShow(alert) {
        return this.alertService.areSame(alert, this.detailDisplayedAlert);
    }
    /**
     * @ignore
     */
    isTemplateRef(value) {
        return value instanceof TemplateRef;
    }
    /**
     * @ignore
     */
    template(content) {
        return this.isTemplateRef(content) ? content : undefined;
    }
    setDetailsContent(alert) {
        if (this.isTemplateRef(alert.detailedData) || typeof alert.detailedData === 'string') {
            this.detailDisplayedAlert.contents = alert.detailedData;
        }
        else {
            this.detailDisplayedAlert.contents = JSON.stringify(alert.detailedData, null, 2);
        }
    }
}
AlertOutletComponent.ɵfac = function AlertOutletComponent_Factory(t) { return new (t || AlertOutletComponent)(ɵngcc0.ɵɵinjectAttribute('position'), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
AlertOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AlertOutletComponent, selectors: [["c8y-alert-outlet"]], hostVars: 2, hostBindings: function AlertOutletComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("static", ctx.isStatic);
    } }, decls: 2, vars: 3, consts: [["class", "alert animated fadeInRightBig m-t-16", 3, "ngClass", 4, "ngFor", "ngForOf"], [1, "alert", "animated", "fadeInRightBig", "m-t-16", 3, "ngClass"], ["type", "button", 1, "close", 3, "title", "click"], ["aria-hidden", "true"], [1, "sr-only"], [4, "ngIf", "ngIfElse"], ["class", "text-muted m-t-8", 4, "ngIf"], [4, "ngIf"], ["class", "message", 3, "textContent", 4, "ngIf"], ["class", "message", 3, "innerHTML", 4, "ngIf"], [1, "message", 3, "textContent"], [1, "message", 3, "innerHTML"], [1, "text-muted", "m-t-8"], [1, "btn", "btn-clean", 3, "title", "click"], ["c8yIcon", "chevron-down"], ["c8yIcon", "chevron-up"], [3, "textContent"]], template: function AlertOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AlertOutletComponent_div_0_Template, 12, 15, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.alerts));
    } }, directives: [ɵngcc7.NgForOf, ɵngcc7.NgClass, ɵngcc7.NgIf, IconDirective], pipes: [ɵngcc7.AsyncPipe, C8yTranslatePipe], encapsulation: 2 });
AlertOutletComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['position',] }] },
    { type: AlertService }
];
AlertOutletComponent.propDecorators = {
    isStatic: [{ type: HostBinding, args: ['class.static',] }]
};

/**
 * The content of `c8y-alert-text` component will be displayed as alert's text.
 * This component must be placed inside `c8y-alert` component.
 */
class AlertTextComponent {
}
AlertTextComponent.ɵfac = function AlertTextComponent_Factory(t) { return new (t || AlertTextComponent)(); };
AlertTextComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AlertTextComponent, selectors: [["c8y-alert-text"]], ngContentSelectors: _c1, decls: 1, vars: 0, template: function AlertTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });

/**
 * Alert module is used for displaying status messages to the user e.g. danger, success, warning and info alerts.
 */
class AlertModule {
}
AlertModule.ɵfac = function AlertModule_Factory(t) { return new (t || AlertModule)(); };
AlertModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AlertModule });
AlertModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });

/**
 * Base navigator node. Represents a single entry in the navigator menu.
 * Is considered to be the basic building block of the navigator.
 */
class NavigatorNode {
    /**
     * @ignore
     */
    constructor(data) {
        /**
         * Navigator node children (subentries).
         */
        this.children = [];
        /**
         * Navigator node parent nodes.
         */
        this.parents = [];
        /**
         * Indicates whether the navigator node should be active based on matching the node path and the URL path.
         * To match the URL exactly, set this option to true.
         *
         * routerLinkExact set to true:
         * When the URL path is set to /a/b/c and the node path to /a/b then the node will not be set active.
         *
         * routerLinkExact set to false:
         * When the URL path is set to /a/b/c and the node path to /a/b then the node will be set active.
         */
        this.routerLinkExact = true;
        /**
         * Indicates that the navigator node is expanded/collapsed.
         */
        this.open = false;
        /**
         * Indicates that the navigator node is visible/hidden.
         */
        this.hidden = false;
        /**
         * Indicates that the navigator node is draggable.
         */
        this.draggable = false;
        /**
         * Indicates that the navigator node is droppable.
         */
        this.droppable = false;
        /**
         * Indicates that the navigator node is dragged.
         */
        this.dragged = false;
        /**
         * Indicates that currently something is dragged over the node.
         */
        this.draggedHover = false;
        /**
         * Confirmation popover displayed at the end of the process of moving the navigator menu item.
         */
        this.confirm = undefined;
        this._priority = 0;
        this.update(data);
    }
    /**
     * Returns information whether a navigator node has children.
     * @readonly
     */
    get hasChildren() {
        return this.children.length > 0;
    }
    /**
     * Returns the ID of the navigator node.
     * @readonly
     */
    get id() {
        return 'navigator_node_' + snakeCase(this.label);
    }
    /**
     * Returns the priority value of the navigator node.
     * @readonly
     */
    get priority() {
        if (this._priority) {
            return this._priority;
        }
        else {
            const childrenPriorities = this.children.map(({ priority }) => priority || 0);
            if (childrenPriorities.length) {
                return childrenPriorities.length ? Math.max(...childrenPriorities) : 0;
            }
            return 0;
        }
    }
    /**
     * Sets the priority value of the navigator node.
     *
     * @param {number} priority Priority value.
     */
    set priority(priority) {
        this._priority = priority;
    }
    /**
     * @ignore
     */
    openOnStart(url) {
        return false;
    }
    /**
     * Adds a child navigator node to the node.
     *
     * @param {NavigatorNode} node Child node.
     */
    add(node) {
        if (node === this) {
            throw new Error('Adding node to itself');
        }
        if (this.children.indexOf(node) === -1) {
            this.children.push(node);
        }
        if (node.parents.indexOf(this) === -1) {
            node.parents.push(this);
        }
        this.updateChildren();
    }
    /**
     * Removes the child navigator node from the node.
     *
     * @param {NavigatorNode} node Child node.
     */
    remove(node) {
        const ix = this.children.indexOf(node);
        const pix = node.parents.indexOf(this);
        if (ix > -1) {
            this.children.splice(ix, 1);
        }
        if (pix > -1) {
            node.parents.splice(pix, 1);
        }
        this.updateChildren();
    }
    /**
     * Updates the navigator node.
     *
     * @param {NavigatorNodeData} data Data to be updated.
     */
    update(data) {
        if (data) {
            Object.assign(this, data);
            if (data.hidden !== undefined) {
                this.parents.forEach(p => {
                    p.updateHidden();
                });
            }
        }
    }
    /**
     * Returns a child navigator node based on the predicate.
     *
     * @param {string|object} predicate Filter criteria.
     * @param {string} findBy NavigatorNode field name to compare.
     *
     * @example
     * ```ts
     * // The function will compare the labels to the string and return a matching result.
     * // The capitalization of the characters does not matter (case insensitive).
     * const predicate = 'group1';
     * const childNode = parentNode.find(predicate);
     *
     * // Check: [lodash matches](https://lodash.com/docs/4.17.15#matches)
     * const predicate = { label: 'group2' };
     * const childNode = parentNode.find(predicate);
     * ```
     */
    find(predicate, findBy = 'label') {
        if (typeof predicate === 'string') {
            if (findBy === 'label') {
                const compareLabel = predicate.toLocaleLowerCase();
                predicate = ({ label }) => compareLabel === label.toLowerCase();
            }
            else {
                const compareId = predicate;
                predicate = ({ featureId }) => compareId === featureId;
            }
        }
        if (typeof predicate === 'object') {
            predicate = matches(predicate);
        }
        if (typeof predicate !== 'function') {
            throw new Error('Invalid search predicate');
        }
        return this.children.reduce((found, child) => found || child.find(predicate), this.children.find(predicate));
    }
    /**
     * Removes children nodes.
     */
    empty() {
        this.children.length = 0;
    }
    /**
     * @ignore
     */
    click(options = {}) {
        // do nothing
    }
    /**
     * This event is fired when an element is dropped on a valid drop target.
     * @param $event DOM event.
     */
    drop($event) {
        $event.stopPropagation();
        clearTimeout(this.expandDragTimeout);
    }
    /**
     * This event is fired when the user starts dragging an element.
     * @param $event DOM event.
     */
    dragStart($event) {
        $event.stopPropagation();
        // we can't pass a object to setData, so we do it via service
        // set data is still needed, to make the drag&drop work
        $event.dataTransfer.setData('node', 'node');
        this.dragged = true;
    }
    /**
     * This event is fired when a drag operation has ended.
     * @param $event DOM event.
     */
    dragEnd($event) {
        $event.stopPropagation();
        this.dragged = false;
    }
    /**
     * Returns information whether the navigator node is droppable.
     * @readonly
     */
    get canDrop() {
        return this.droppable;
    }
    /**
     * Returns information whether navigation is possible.
     * @readonly
     */
    get canNavigate() {
        return typeof this.path !== 'undefined';
    }
    /**
     * This event is fired when a dragged element enters a valid drop target.
     * @param $event DOM event.
     */
    dragEnter($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = true;
        if (!this.open) {
            this.expandDragTimeout = setTimeout(() => this.expand(), 1000);
        }
    }
    /**
     * This event is fired when a dragged element leaves a valid drop target.
     * @param $event DOM event.
     */
    dragLeave($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = false;
        clearTimeout(this.expandDragTimeout);
    }
    /**
     * Expands the navigator node if it is collapsed.
     */
    expand() {
        if (!this.open) {
            this.open = true;
            this.click({ open: true, expander: true });
        }
    }
    /**
     * Performs a callback function recursively on each of the navigator node's children down the hierarchy.
     * @param {function} callback Function to be called.
     *
     * @example
     * ```ts
     * const expandChild = (childNode) => childNode.expand();
     * parentNode.traverse(expandChild);
     * ```
     */
    traverse(callback) {
        if (this.children) {
            this.children.forEach(child => {
                callback(child);
                child.traverse(callback);
            });
        }
    }
    /**
     * @ignore
     */
    destroy() {
        // nothing todo here
    }
    /**
     * Counts the amount of children nodes.
     */
    countChildren() {
        return this.children.length;
    }
    /**
     * Identifies itself.
     */
    toString() {
        return NavigatorNode.NAME;
    }
    hasChildDevices() {
        return false;
    }
    /**
     * Updates the navigator node by sorting its children and also checking their visibility.
     */
    updateChildren() {
        this.sort();
        this.updateHidden();
    }
    /**
     * Sorts the children of the navigator node, by priority and name (ASC).
     * The higher the priority, the higher the position in the hierarchy.
     * For the same priority values, the alphabetical order will take precedence.
     */
    sort() {
        this.children.sort((a, b) => {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else if ((a.label || '').toLowerCase() < (b.label || '').toLowerCase()) {
                return -1;
            }
            else if ((a.label || '').toLowerCase() > (b.label || '').toLowerCase()) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
    /**
     * Checks if the navigator node should be hidden based on the visibility of its child nodes.
     */
    updateHidden() {
        if (typeof this.path === 'undefined') {
            this.hidden = !this.children.some(({ hidden }) => !hidden);
        }
    }
}
NavigatorNode.NAME = 'NavigatorNode';

/**
 * Root navigator node. Top node in the hierarchy.
 * The root node is used as an anchor point for the rest of the nodes.
 */
class NavigatorNodeRoot extends NavigatorNode {
    /**
     * Adds top nodes to the navigator tree structure. These nodes are the direct children of the root node.
     * In the case of the cockpit application, such a node is, for example, the "Home" menu entry.
     *
     * @example
     * ```ts
     * const nodeData: NavigatorNodeData = { label: 'Home' } ;
     * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
     *
     * // Based on the node data, a new node will be created and assigned to root.
     * root.addRoot(nodeData);
     *
     * const parentNode: NavigatorNode =  new NavigatorNode({ label: 'Configuration'...});
     * const nodeData: NavigatorNodeData = { label: 'Exports', parent: parentNode } ;
     * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
     *
     * // Based on the node data, parent node will be directly assigned to the root node, and newly created child node
     * // will be added to the parent node.
     * root.add(nodeData);
     *
     * ```
     *
     * @param {Partial<NavigatorNodeData>} nodeData Data on the basis of which a new node is created.
     */
    addRoot(nodeData) {
        let duplicate;
        if (nodeData.preventDuplicates) {
            duplicate = this.find(({ path, parents, label }) => {
                return (path === nodeData.path &&
                    label === nodeData.label &&
                    parents.some(p => p.label === nodeData.parent));
            });
            if (duplicate && !duplicate.hidden) {
                duplicate.routerLinkExact = false;
                return duplicate;
            }
        }
        const { parent } = nodeData;
        const node = this.createNode(nodeData);
        let localParent;
        if (parent) {
            if (typeof parent === 'object') {
                localParent = this.find(parent.label);
                if (localParent) {
                    localParent.update(parent);
                }
            }
            else if (typeof parent === 'string' || typeof parent === 'function') {
                localParent = this.find(parent);
            }
            if (!localParent) {
                localParent = this.createNode(parent);
                if (!this.find(n => localParent === n)) {
                    this.add(localParent);
                }
            }
        }
        (localParent || this).add(node);
        return node;
    }
    /**
     * Creates a new navigator node.
     * @param nodeData The data that serves as the basis for creating a new node.
     */
    createNode(nodeData) {
        if (nodeData instanceof NavigatorNode) {
            return nodeData;
        }
        if (typeof nodeData === 'string') {
            return new NavigatorNode({ label: nodeData });
        }
        if (typeof nodeData === 'object') {
            return new NavigatorNode(Object.assign(Object.assign({}, nodeData), { parent: undefined }));
        }
        throw new Error('Wrong type of node data');
    }
}

/**
 * A hook to use for Multi Provider extension.
 */
const HOOK_NAVIGATOR_NODES = new InjectionToken('NavigatorNodesFactory');
/**
 * A service which defines the navigator.
 */
class NavigatorService extends StateService {
    constructor(injector, router) {
        super();
        this.injector = injector;
        this.router = router;
        /**
         * Refresh the extension factories subject.
         * @readonly
         */
        this.refreshTrigger = new Subject();
        /**
         * @ignore
         */
        this.state$ = new BehaviorSubject(new Set());
        /**
         * Indicates whether the menu entry associated with the given URL should be expanded.
         */
        this.firstUrl = true;
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        const rootNode = new NavigatorNodeRoot();
        this.items$ = fromTriggerOnce(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_NAVIGATOR_NODES, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map((nodes) => {
            const noParent = nodes.filter(node => !node.parent);
            const withParent = nodes.filter(node => node.parent);
            // Based on the sortedNodes array, the nodes are sequentially created.
            // Nodes sorting is done in two steps to have the top-level nodes first.
            // This way, by the time we are adding a child node, the parent node is already present.
            const sortedNodes = sortByPriority(noParent).concat(sortByPriority(withParent));
            rootNode.empty();
            sortedNodes.forEach(node => rootNode.addRoot(node));
            return rootNode.children;
        }), shareReplay(1));
    }
    /**
     * Checks whenever a navigator entry associated with the given URL should be expanded.
     * @param {NavigatorNode} node Navigator node.
     */
    openOnFirstUrl(node) {
        if (this.firstUrl && !!node.path) {
            return (this.router.isActive(node.path, node.routerLinkExact) || node.openOnStart(this.router.url));
        }
        return false;
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Refresh the extension factories.
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Adds a new node to the navigator.
     * @param {NavigatorNode} node Navigator node to add.
     */
    add(node) {
        this.state.add(node);
        this.emitNewState();
    }
    /**
     * Removes a node from the navigator.
     * @param {NavigatorNode} node Navigator node to remove.
     */
    remove(node) {
        this.state.delete(node);
        this.emitNewState();
    }
}
NavigatorService.ɵfac = function NavigatorService_Factory(t) { return new (t || NavigatorService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
NavigatorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NavigatorService_Factory() { return new NavigatorService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: NavigatorService, providedIn: "root" });
NavigatorService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

class ColorService {
    generateColor(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const hashedString = yield this.sha256(data);
            return this.stringToColor(hashedString);
        });
    }
    generateColorForDatapoint(fragment, series) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.generateColor(JSON.stringify({ fragment, series }));
        });
    }
    sha256(message) {
        return __awaiter(this, void 0, void 0, function* () {
            // encode as UTF-8
            const msgBuffer = new TextEncoder().encode(message);
            // hash the message
            const hashBuffer = yield crypto.subtle.digest('SHA-256', msgBuffer);
            // convert ArrayBuffer to Array
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            // convert bytes to hex string
            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            return hashHex;
        });
    }
    stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            // tslint:disable-next-line: no-bitwise
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        let color = '#';
        for (let i = 0; i < 3; i++) {
            // tslint:disable-next-line: no-bitwise
            const value = (hash >> (i * 8)) & 0xff;
            color += value.toString(16).padStart(2, '0').substring(-2);
        }
        return color;
    }
}
ColorService.ɵfac = function ColorService_Factory(t) { return new (t || ColorService)(); };
ColorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ColorService_Factory() { return new ColorService(); }, token: ColorService, providedIn: "root" });

/**
 * The maximum pageSize used in API queries to c8y.
 */
const MAX_PAGE_SIZE = 2000;

function retryWithDelay(delayTime, count = 1) {
    return (input) => input.pipe(retryWhen((errors) => errors.pipe(scan((acc, error) => ({ count: acc.count + 1, error }), {
        count: 0,
        error: undefined,
    }), tap((current) => {
        if (current.count > count) {
            throw current.error;
        }
    }), delay(delayTime))));
}

var Status;
(function (Status) {
    Status["SUCCESS"] = "success";
    Status["WARNING"] = "warning";
    Status["DANGER"] = "danger";
    Status["INFO"] = "info";
})(Status || (Status = {}));
const statusIcons = {
    [Status.SUCCESS]: 'check-circle',
    [Status.WARNING]: 'exclamation-triangle',
    [Status.DANGER]: 'exclamation-circle',
    [Status.INFO]: 'info-circle'
};
const statusClasses = {
    [Status.SUCCESS]: `text-${Status.SUCCESS}`,
    [Status.WARNING]: `text-${Status.WARNING}`,
    [Status.DANGER]: `text-${Status.DANGER}`,
    [Status.INFO]: `text-${Status.INFO}`
};
const statusAlert = {
    [Status.SUCCESS]: `alert-${Status.SUCCESS}`,
    [Status.WARNING]: `alert-${Status.WARNING}`,
    [Status.DANGER]: `alert-${Status.DANGER}`,
    [Status.INFO]: `alert-${Status.INFO}`
};
const operationStatusIcons = {
    [OperationStatus.PENDING]: 'clock-o',
    [OperationStatus.EXECUTING]: 'refresh',
    [OperationStatus.SUCCESSFUL]: 'check-circle',
    [OperationStatus.FAILED]: 'exclamation-circle'
};
const operationStatusClasses = {
    [OperationStatus.PENDING]: 'text-info',
    [OperationStatus.EXECUTING]: 'text-info',
    [OperationStatus.SUCCESSFUL]: 'text-success',
    [OperationStatus.FAILED]: 'text-danger'
};

/**
 * A service which defines header functions.
 */
class HeaderService extends StateService {
    constructor(navigatorService, options, humanizeAppName) {
        super();
        this.navigatorService = navigatorService;
        this.options = options;
        this.humanizeAppName = humanizeAppName;
        this.headerOpen = false;
        this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES = 1000;
        this.hasItemsInNavigator$ = this.navigatorService.items$.pipe(delay(this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES), map(({ length }) => !!length), distinctUntilChanged());
        this.state$ = new BehaviorSubject({
            title: undefined,
            nav: {
                open: false
            }
        });
        this.title = undefined;
        this.header$ = this.map((header) => header);
        this.navigatorOpen$ = this.map(({ nav }) => nav.open).pipe(combineLatest$1(this.hasItemsInNavigator$), map(([open, hasItems]) => open && hasItems));
        const titleReference = document.querySelector('title');
        const isGlobalTitleValid = (!!options.globalTitle && typeof options.globalTitle === 'string' && options.globalTitle.length > 0);
        this.title = {
            elementRef: titleReference,
            titleSuffix: isGlobalTitleValid ? `${options.globalTitle} - ${options.name}` : options.name
        };
        this.humanizeAppName.transform(options.name)
            .subscribe(nameTranslated => {
            this.title.titleSuffix = isGlobalTitleValid ? `${options.globalTitle} - ${nameTranslated}` : nameTranslated;
        });
    }
    get state() {
        return this.state$.value;
    }
    get navigatorHiddenOnStartup() {
        return this.options.hideNavigator;
    }
    get largeWidth() {
        return document.documentElement.clientWidth > 1200;
    }
    get shouldToggle() {
        return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
    }
    /**
     * Toggles the main header menu in mobile view.
     */
    toggle() {
        this.headerOpen = !this.headerOpen;
    }
    /**
     * Toggles the navigator open status.
     */
    toggleNavigator() {
        this.state.nav.open = !this.state.nav.open;
        this.emitNewState();
    }
    /**
     * Force to close the navigator.
     */
    closeNavigator() {
        this.state.nav.open = false;
        this.emitNewState();
    }
    /**
     * Configures navigation options.
     * @param config Object with the properties:
     * - open: Boolean
     */
    configNavigator(config = {}) {
        this.state.nav = Object.assign(this.state.nav, config);
        this.emitNewState();
    }
    /**
     * Change the application title.
     * @param newTitle The new title of the application.
     */
    changeTitle(newTitle, pageTitleUpdate = true) {
        this.state.title = newTitle;
        this.state.pageTitleUpdate = pageTitleUpdate;
        this.emitNewState();
    }
    /**
     * Change the page title.
     * @param newTitle The new title of the page.
     */
    changePageTitle(newTitle) {
        this.title.elementRef.innerText = newTitle
            ? `${newTitle} / ${this.title.titleSuffix}`
            : `${this.title.titleSuffix}`;
    }
    /**
     * This methods checks if the navigator toggles on startup
     * or if an item is added to the navigator node.
     * Delay of 300ms is intended for animation purpose.
     */
    verifyIfNavOpen() {
        this.hasItemsInNavigator$
            .pipe(debounceTime(300))
            .subscribe(hasItems => hasItems && this.shouldToggle && this.toggleNavigator());
    }
    shouldShowBreadcrumbs() {
        return this.options.breadcrumbs;
    }
}
HeaderService.ɵfac = function HeaderService_Factory(t) { return new (t || HeaderService)(ɵngcc0.ɵɵinject(NavigatorService), ɵngcc0.ɵɵinject(OptionsService), ɵngcc0.ɵɵinject(HumanizeAppNamePipe)); };
HeaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HeaderService_Factory() { return new HeaderService(i0.ɵɵinject(NavigatorService), i0.ɵɵinject(OptionsService), i0.ɵɵinject(HumanizeAppNamePipe)); }, token: HeaderService, providedIn: "root" });
HeaderService.ctorParameters = () => [
    { type: NavigatorService },
    { type: OptionsService },
    { type: HumanizeAppNamePipe }
];

const HOOK_BREADCRUMB = new InjectionToken('BreadcrumbFactory');
class BreadcrumbService extends StateService {
    constructor(injector, router) {
        super();
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_BREADCRUMB, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map(breadcrumbs => this.sortByPreferredPath(breadcrumbs)), shareReplay(1));
    }
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to the action bar in the header.
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes an action bar item from the header.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Sets the crumb that contains that path to the top.
     * @param path The path to prefer.
     */
    selectPreferredByPath(path) {
        this.preferredPath = path;
        this.refresh();
    }
    sortByPreferredPath(breadcrumbs) {
        if (this.preferredPath) {
            return breadcrumbs.sort(bc => bc.items.find((item) => !!item.path.match(this.preferredPath)) ? -1 : 1);
        }
        return breadcrumbs;
    }
}
BreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) { return new (t || BreadcrumbService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
BreadcrumbService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: BreadcrumbService, providedIn: "root" });
BreadcrumbService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

const HOOK_DOCS = new InjectionToken('Hook docs');

const documentationItems = [
    {
        icon: 'c8y-c8y-data',
        label: gettext('Concepts guide`KEEP_ORIGINAL`'),
        url: '/concepts/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-user',
        label: gettext('User guide`KEEP_ORIGINAL`'),
        url: '/users-guide/getting-started',
        type: 'doc'
    },
    {
        icon: 'c8y-device-management',
        label: gettext('Device integration tutorial`KEEP_ORIGINAL`'),
        url: '/device-tutorials/tutorials-introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-book',
        label: gettext('Cumulocity IoT Edge`KEEP_ORIGINAL`'),
        url: '/edge/overview',
        type: 'doc'
    },
    {
        icon: 'c8y-tools',
        label: gettext('Microservice SDK guide`KEEP_ORIGINAL`'),
        url: '/microservice-sdk/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-tools',
        label: gettext('Device SDK guide`KEEP_ORIGINAL`'),
        url: '/device-sdk/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-smart-rest',
        label: gettext('Web SDK guide`KEEP_ORIGINAL`'),
        url: '/web/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-data-explorer',
        label: gettext('Streaming analytics guide`KEEP_ORIGINAL`'),
        url: '/apama/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-bookmark',
        label: gettext('Reference guide`KEEP_ORIGINAL`'),
        url: '/reference/rest-implementation',
        type: 'doc'
    },
    {
        icon: 'gavel',
        label: gettext('Legal notices'),
        url: 'https://documentation.softwareag.com/legal/',
        type: 'doc'
    }
];

class DocsService {
    constructor(options, app, injector, router) {
        this.options = options;
        this.app = app;
        this.injector = injector;
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        /**
         * Refresh the extension factories subject.
         * @readonly
         */
        this.refreshTrigger = new Subject();
        /**
         * Default documentation URL.
         */
        this.DEFAULT_DOCS_BASE_URL = 'https://www.cumulocity.com/guides/{{ version }}';
        const supportUrlRefreshTrigger = this.app.map(({ supportUrl }) => supportUrl);
        this.items$ = fromTriggerOnce(router, [supportUrlRefreshTrigger, this.refreshTrigger], [() => this.injector.get(HOOK_DOCS, []), () => this.factories, this]).pipe(startWith([]), shareReplay(1));
    }
    getBaseUrl(uiVersion) {
        const docsBaseUrl = this.options.get('docsBaseUrl', this.DEFAULT_DOCS_BASE_URL);
        return this.getUrlWithDocsVersion(docsBaseUrl, uiVersion);
    }
    /**
     * Takes a URL and replaces all `{{ version }}` placeholders with the relevant docs version
     * (the version is derived from the app state or from the provided parameter).
     * @param url Any URL that contains `{{ version }}` placeholders.
     * @param uiVersion A version string or object, defaults to the app state version.
     * @returns The URL with replaced `{{ version }}` placeholders.
     */
    getUrlWithDocsVersion(url, uiVersion = this.app.uiVersion) {
        const version = typeof uiVersion === 'string' ? uiVersion : get(uiVersion, 'ngx');
        let docsVersion = '';
        if (!(isUndefined(version) || version === '')) {
            docsVersion = this.getDocsVersionForUiVersion(version);
        }
        return url.replace(/{{\s*version\s*}}/g, docsVersion).replace(/\/+$/g, '');
    }
    get templateStr() {
        return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
    }
    getUserGuideLink(link) {
        if (/^https?:/.test(link)) {
            return link;
        }
        if (this.getBaseUrl === null) {
            return null;
        }
        return this.getLink(this.templateStr, link);
    }
    list() {
        return this.items$
            .pipe(filter(i => !!i.length), first$1())
            .toPromise();
    }
    refresh() {
        this.refreshTrigger.next(1);
    }
    get() {
        // use the function as a factory
        const { links, noDefault, excludeDefault = [] } = this.options.get('docs', {});
        const { supportUrl } = this.app.state;
        let staticLinks = noDefault
            ? []
            : documentationItems
                .map((item) => (Object.assign(Object.assign({}, item), { url: this.getUserGuideLink(item.url) })))
                .filter(({ url }) => !excludeDefault.some(e => new RegExp(e).test(url)));
        if (links) {
            // backwards compatibility
            links.map((lnk) => {
                if (isUndefined(lnk.type)) {
                    lnk.type = 'doc';
                    return lnk;
                }
            });
            staticLinks = staticLinks.concat(links);
        }
        if (supportUrl) {
            staticLinks.push({
                icon: 'comments',
                label: gettext('Forum support'),
                url: supportUrl,
                type: 'doc'
            });
        }
        return staticLinks;
    }
    getLink(templateStr, partialLink) {
        if (!templateStr) {
            return undefined;
        }
        return templateStr
            .replace(/\${docsBaseUrl}/, this.getBaseUrl())
            .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
    }
    prefixWithSlash(partialLink = '') {
        const shouldPrefix = !(partialLink && /^\//.test(partialLink));
        const prefix = shouldPrefix ? '/' : '';
        return `${prefix}${partialLink}`;
    }
    /**
     * Returns the most relevant version of documentation for the given version of UI.
     * For maintenance versions, it's the first version in the line, e.g. 1017.0.123 -> 10.17.0.
     * For develop versions, it's the next minor one, e.g. 1017.123.0-SNAPSHOT -> 10.18.0.
     *
     * @param uiVersion The version of UI.
     * @private
     */
    getDocsVersionForUiVersion(uiVersion) {
        const [majorMinorStr, patchStr] = uiVersion.split('.');
        const patchNumber = parseInt(patchStr, 10);
        const takeNextMinor = patchNumber > 0;
        const majorNumber = Math.floor(parseInt(majorMinorStr, 10) / 100);
        const minorNumber = parseInt(majorMinorStr, 10) - majorNumber * 100 + (takeNextMinor ? 1 : 0);
        return `${majorNumber}.${minorNumber}.0`;
    }
}
DocsService.ɵfac = function DocsService_Factory(t) { return new (t || DocsService)(ɵngcc0.ɵɵinject(OptionsService), ɵngcc0.ɵɵinject(AppStateService), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
DocsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(i0.ɵɵinject(OptionsService), i0.ɵɵinject(AppStateService), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: DocsService, providedIn: "root" });
DocsService.ctorParameters = () => [
    { type: OptionsService },
    { type: AppStateService },
    { type: Injector },
    { type: Router }
];

/**
 * Time the hook waits until it emits an undefined value.
 * Used for not defined widgets -> by default after 5s we
 * show an error that the widget could not be loaded.
 */
const RESOLVING_COMPONENT_WAIT_TIME = new InjectionToken('RESOLVING_COMPONENT_WAIT_TIME');
/**
 * A hook to add dynamic components to the UI (e.g. widgets).
 */
const HOOK_COMPONENTS = new InjectionToken('Hook Dynamic Component');

class DynamicComponentService extends StateService {
    constructor(injector, router, waitTimeout) {
        super();
        this.injector = injector;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        this.items$ = fromTriggerOnce(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_COMPONENTS, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(takeUntil(timer(waitTimeout)), shareReplay(1));
    }
    refresh() {
        this.refreshTrigger.next(1);
    }
    get state() {
        return this.state$.value;
    }
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    getById(id) {
        return this.items$
            .pipe(mergeMap((cmps) => cmps), filter((cmp) => cmp.id === id), take(1))
            .toPromise();
    }
    add(component) {
        this.state.add(component);
        this.emitNewState();
    }
    remove(component) {
        this.state.delete(component);
        this.emitNewState();
    }
}
DynamicComponentService.ɵfac = function DynamicComponentService_Factory(t) { return new (t || DynamicComponentService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(RESOLVING_COMPONENT_WAIT_TIME)); };
DynamicComponentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(RESOLVING_COMPONENT_WAIT_TIME)); }, token: DynamicComponentService, providedIn: "root" });
DynamicComponentService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: Number, decorators: [{ type: Inject, args: [RESOLVING_COMPONENT_WAIT_TIME,] }] }
];

var ViewContext;
(function (ViewContext) {
    ViewContext["Device"] = "device/:id";
    ViewContext["Group"] = "group/:id";
    ViewContext["User"] = "users/:id";
    ViewContext["Application"] = "ecosystem/application/:id";
    ViewContext["Microservice"] = "microservices/:id";
    ViewContext["SubscribedApplications"] = "subscribedApplications/:id";
    ViewContext["Tenant"] = "tenants/:id";
    ViewContext["Report"] = "reports/:id";
    ViewContext["Service"] = "service/:id";
    ViewContext["DatapointLibrary"] = "datapointlibrary/:id";
})(ViewContext || (ViewContext = {}));

/**
 * A hook to use for Multi Provider extension.
 */
const HOOK_TABS = new InjectionToken('TabsFactory');
/**
 * A service which defines the used tabs.
 */
class TabsService extends StateService {
    constructor(injector, router, translateService, options) {
        super();
        this.injector = injector;
        this.translateService = translateService;
        this.options = options;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_TABS, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map(tabs => this.prepareTabs(tabs)), shareReplay(1), distinctUntilChanged());
        this.orientation$ = this.items$.pipe(map((tabs) => {
            const firstTabWithDefinedOrientation = tabs.find(tab => tab.orientation);
            if (firstTabWithDefinedOrientation) {
                return firstTabWithDefinedOrientation.orientation;
            }
            return this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        }), distinctUntilChanged());
    }
    prepareTabs(tabs) {
        return this.sortTabs(tabs
            .map(tab => (Object.assign(Object.assign({}, tab), { template: tab.template instanceof ViewContainerRef ? tab.template : undefined })))
            .filter((tab, index, self) => index === self.findIndex(t => t.path === tab.path)));
    }
    sortTabs(tabs) {
        return tabs.sort((a, b) => {
            const priorityOrder = (b.priority || 0) - (a.priority || 0);
            const aTranslatedLabel = this.translateService.instant(a.label);
            const bTranslatedLabel = this.translateService.instant(b.label);
            const translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return priorityOrder || translatedLabelOrder;
        });
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes a tab and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    get firstTab$() {
        return this.items$.pipe(map(tabs => tabs[0]), filter(Boolean), first$1());
    }
}
TabsService.ɵfac = function TabsService_Factory(t) { return new (t || TabsService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc4.TranslateService), ɵngcc0.ɵɵinject(OptionsService)); };
TabsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TabsService_Factory() { return new TabsService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(OptionsService)); }, token: TabsService, providedIn: "root" });
TabsService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: TranslateService$1 },
    { type: OptionsService }
];

class RouterTabsResolver {
    constructor(injector, router) {
        this.injector = injector;
        this.router = router;
    }
    get routerStateSnapshot() {
        return this.router.routerState.snapshot;
    }
    resolve(route) {
        const latestChildren = this.router.config.find(r => route.routeConfig.path === r.path).children;
        return from(latestChildren || []).pipe(mergeMap((child) => from(this.getGuards(child)).pipe(map((guard) => guard.canActivate(route, this.routerStateSnapshot)), mergeMap((result) => {
            if (isObservable(result)) {
                return result;
            }
            if (result && typeof result.then === 'function') {
                return from(result);
            }
            return of(result);
        }), tap(result => {
            if (Array.isArray(result)) {
                child.tabs = result;
            }
        }), every$1(result => !!result), filter(result => result), mergeMap(() => (Array.isArray(child.tabs) ? from(child.tabs) : of(child))), map(result => result.label || result.path
            ? {
                label: result.label,
                icon: result.icon,
                path: `${decodeURIComponent(route.url.join('/'))}/${result.path}`,
                priority: result.priority,
                hide: result.hide,
                featureId: result.featureId
            }
            : undefined))), filter(tabs => !!tabs), toArray());
    }
    getGuards(child) {
        const guards = (child.canActivate || []).map(guard => {
            return this.injector.get(guard);
        });
        if (child.data && child.data.showIf) {
            guards.push({ canActivate: child.data.showIf });
        }
        return guards;
    }
}
RouterTabsResolver.ɵfac = function RouterTabsResolver_Factory(t) { return new (t || RouterTabsResolver)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
RouterTabsResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function RouterTabsResolver_Factory() { return new RouterTabsResolver(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: RouterTabsResolver, providedIn: "root" });
RouterTabsResolver.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

class ViewContextServices {
    static contextToService(context) {
        return ViewContextServices.services.get(context);
    }
}
ViewContextServices.services = new Map([
    [ViewContext.Device, InventoryService],
    [ViewContext.Group, InventoryService],
    [ViewContext.User, UserService],
    [ViewContext.Application, ApplicationService],
    [ViewContext.Microservice, ApplicationService],
    [ViewContext.SubscribedApplications, ApplicationService],
    [ViewContext.Tenant, TenantService],
    [ViewContext.Report, InventoryService],
    [ViewContext.Service, InventoryService],
    [ViewContext.DatapointLibrary, InventoryService]
]);

class ContextRouteService {
    constructor(tabsResolver, tabsService, router, apiService, injector) {
        this.tabsResolver = tabsResolver;
        this.tabsService = tabsService;
        this.router = router;
        this.apiService = apiService;
        this.injector = injector;
        this.lastAddedTabs = [];
        this.refreshTrigger = new Subject();
    }
    /**
     * Resolves the current context data. If no context was found, null is returned.
     *
     * @param activatedRoute The current activated route.
     */
    getContextData(activatedRoute) {
        const data = !activatedRoute.snapshot.parent || activatedRoute.snapshot.data.context
            ? activatedRoute.snapshot.data
            : activatedRoute.parent.snapshot.data;
        if (data.context) {
            return data;
        }
        return null;
    }
    init(route) {
        this.routerSubscription = this.router.events
            .pipe(filter(e => e instanceof NavigationEnd))
            .subscribe(() => this.redirectToFirstTab());
        this.dataSubscription = route.data
            .pipe(merge$1(this.updatedContext(route), this.refreshTrigger), switchMap(() => this.tabsResolver.resolve(route.snapshot)))
            .subscribe(tabs => this.updateTabs(tabs));
    }
    destroy() {
        this.dataSubscription.unsubscribe();
        this.routerSubscription.unsubscribe();
        this.lastAddedTabs.forEach(t => this.tabsService.remove(t));
    }
    refreshContext() {
        this.refreshTrigger.next();
    }
    /**
     * Sets a new contextData in the ActivatedRoute.
     * @param activatedRoute The current activated route.
     * @param contextData New contextData.
     */
    setContext(activatedRoute, contextData) {
        const data = !activatedRoute.snapshot.parent || activatedRoute.snapshot.data.context
            ? activatedRoute.snapshot.data
            : activatedRoute.parent.snapshot.data;
        if (!data) {
            return;
        }
        data.contextData = Object.assign({}, contextData);
    }
    updatedContext(route) {
        const { data } = route.snapshot;
        const serviceInstance = ViewContextServices.contextToService(data.context);
        if (serviceInstance) {
            const service = this.injector.get(serviceInstance);
            const detailsUrlRegex = service.getDetailUrl(data.contextData).replace(/\d+/g, '?\\d*');
            const contextRegex = new RegExp(detailsUrlRegex, 'i');
            const childrenRegex = new RegExp(`${detailsUrlRegex}/child`, 'i');
            const filterResponse = ({ url, method }) => {
                const contextChanged = contextRegex.test(url) && ['POST', 'PUT'].includes(method);
                const childrenAffected = childrenRegex.test(url) && ['POST', 'DELETE'].includes(method);
                return contextChanged || childrenAffected;
            };
            return this.apiService.hookResponse(filterResponse);
        }
        return NEVER;
    }
    updateTabs(tabs = []) {
        this.lastAddedTabs.forEach(t => this.tabsService.remove(t));
        this.lastAddedTabs = tabs;
        tabs.forEach(t => this.tabsService.add(t));
        this.redirectToFirstTab();
    }
    redirectToFirstTab() {
        if (this.needsRedirect()) {
            this.tabsService.firstTab$.subscribe((tab) => {
                if (tab && tab.path) {
                    this.router.navigateByUrl(tab.path, { replaceUrl: true });
                }
            });
        }
    }
    needsRedirect() {
        const tree = this.router.parseUrl(this.router.url);
        const groups = tree.root.children[PRIMARY_OUTLET];
        const context = this.getMatchingContextRoute(this.router.url);
        if (!context) {
            return groups.segments.length === 2;
        }
        else {
            return context.split('/').length === groups.segments.length;
        }
    }
    getMatchingContextRoute(url) {
        const viewContexts = Object.values(ViewContext);
        const urlWithoutId = url.replace(/\d(.*)/g, '');
        const id = viewContexts.findIndex(context => `/${context.replace(':id', '')}` === urlWithoutId);
        return viewContexts[id];
    }
}
ContextRouteService.ɵfac = function ContextRouteService_Factory(t) { return new (t || ContextRouteService)(ɵngcc0.ɵɵinject(RouterTabsResolver), ɵngcc0.ɵɵinject(TabsService), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.ApiService), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ContextRouteService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContextRouteService_Factory() { return new ContextRouteService(i0.ɵɵinject(RouterTabsResolver), i0.ɵɵinject(TabsService), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i4$1.ApiService), i0.ɵɵinject(i0.INJECTOR)); }, token: ContextRouteService, providedIn: "root" });
ContextRouteService.ctorParameters = () => [
    { type: RouterTabsResolver },
    { type: TabsService },
    { type: Router },
    { type: ApiService },
    { type: Injector }
];

/**
 * A hook to use for Multi Provider extension.
 * @deprecated: Use HOOK_ROUTE
 */
const HOOK_ONCE_ROUTE = new InjectionToken('RouteFactory');
/**
 * A hook to use for Multi Provider extension.
 */
const HOOK_ROUTE = new InjectionToken('HookRoute');
/**
 * A service which defines routes
 */
class RouterService {
    constructor(injector, router, contextRouteService) {
        this.injector = injector;
        this.router = router;
        this.contextRouteService = contextRouteService;
        this.refreshTrigger = new Subject();
        this.state = new Map();
        this.factories = [];
        this.refreshTrigger
            .pipe(startWith(1), switchMap(() => fromFactories([
            () => this.injector.get(HOOK_ROUTE, []),
            () => this.getComponentsViaDeprecatedHook(),
            () => this.factories
        ], router, false)))
            .subscribe((routes) => {
            const toAddRoutes = routes.filter(route => {
                const path = `${route.context || ''}${route.path}`;
                const isAlreadyAdded = this.state.has(path);
                if (!isAlreadyAdded) {
                    this.state.set(path, route);
                }
                return !isAlreadyAdded;
            });
            this.addRoute(toAddRoutes);
        });
    }
    /**
     * Refresh the current context
     */
    refresh() {
        this.refreshTrigger.next(1);
        this.contextRouteService.refreshContext();
    }
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    addRoute(route) {
        this.addRoutes(Array.isArray(route) ? route : [route]);
    }
    /**
     * Determines if the given MO is an group or an device and returns
     * the correct href to link correctly to that MO.
     * @param groupOrDevice The MO of a group or the device.
     * @param prefix How should the link be prefixed.
     */
    getHref(groupOrDevice, prefix = '#/') {
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return `${prefix}${ViewContext.Group.replace(':id', groupOrDevice.id)}`;
        }
        return `${prefix}${ViewContext.Device.replace(':id', groupOrDevice.id)}`;
    }
    getComponentsViaDeprecatedHook() {
        const componentsViaDeprecatedHook = this.injector.get(HOOK_ONCE_ROUTE, []);
        if (componentsViaDeprecatedHook &&
            componentsViaDeprecatedHook.length &&
            __MODE__ !== 'production') {
            console.warn('HOOK_ONCE_ROUTE is now deprecated. Use HOOK_ROUTE instead.');
        }
        return componentsViaDeprecatedHook;
    }
    addRoutes(routes) {
        const emptyRoute = this.router.config.find(r => r.path === '**');
        this.router.resetConfig([
            ...this.router.config.filter(r => r.path !== '**'),
            ...routes.map((r) => this.convertRoute(this.router.config, r)),
            emptyRoute
        ].filter(Boolean));
    }
    convertRoute(initialConfig, route) {
        if (route.context) {
            initialConfig.forEach((r) => {
                if (r.data && r.data.context === route.context) {
                    r.children = [route, ...(r.children || [])];
                }
            });
            return;
        }
        return route;
    }
}
RouterService.ɵfac = function RouterService_Factory(t) { return new (t || RouterService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ContextRouteService)); };
RouterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(ContextRouteService)); }, token: RouterService, providedIn: "root" });
RouterService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: ContextRouteService }
];

/**
 * A hook to use for Multi Provider extension.
 */
const HOOK_SEARCH = new InjectionToken('SearchFactory');
/**
 * A service which defines the search function.
 */
class SearchService extends StateService {
    constructor(injector, router) {
        super();
        this.injector = injector;
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_SEARCH, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map((items) => sortByPriority(items)), shareReplay(1));
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to the search in the header.
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes an search from the header.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
}
SearchService.ɵfac = function SearchService_Factory(t) { return new (t || SearchService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
SearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchService_Factory() { return new SearchService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: SearchService, providedIn: "root" });
SearchService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

/**
 * A generic component that is intended to serve as the building block of more wizards.
 *
 * **Example**
 * ```html
 * <button
 *    title="Add application"
 *    class="btn btn-primary"
 *    (click)="addApplication()"
 *  >
 *    Add application
 *  </button>
 * ```
 *
 * ```ts
 * import { Component } from '@angular/core';
 * import { WizardConfig, WizardService, Wizard } from '@c8y/ngx-components';
 * import { ModalOptions } from 'ngx-bootstrap/modal';
 *
 * @Component({
 *  selector: 'c8y-add-application-wizard',
 *  templateUrl: './templatePath'
 * })
 * export class AddApplicationWizardComponent {
 *   constructor(private wizardService: WizardService) {}
 *
 *   addApplication() {
 *     const wizardConfig: WizardConfig = {
 *       headerText: 'Add Application',
 *       headerIcon: 'c8y-icon-modules',
 *       bodyHeaderText: 'Select methods',
 *       bodyHeaderIcon: 'c8y-icon-modules'
 *     };
 *
 *     const initialState: Wizard = {
 *       wizardConfig,
 *       id: 'uploadApplication'
 *     };
 *
 *     const modalOptions: ModalOptions = { initialState };
 *
 *     this.wizardService.show(modalOptions);
 *   }
 * }
 * ```
 */
class WizardComponent {
    constructor(wizardService, bsModalRef) {
        this.wizardService = wizardService;
        this.bsModalRef = bsModalRef;
        /**
         * A configuration object that allows you to set header values, both text and icon.
         */
        this.wizardConfig = {};
        /**
         * A state that will be assigned to the actual component contained by the wizard.
         */
        this.componentInitialState = {};
        /**
         * The event that is emitted when the wizard is closed.
         */
        this.onClose = new EventEmitter();
        /**
         * The event that is emitted when the wizard is reseted.
         */
        this.onReset = new EventEmitter();
        /**
         * The event that is emitted when the wizard entry is clicked.
         */
        this.onSelect = new EventEmitter();
        this.headerTemplate$ = this.wizardService.headerTemplate$.pipe(filter(header => header.wizardId === this.id));
        this.bodyTemplate$ = this.wizardService.bodyTemplate$.pipe(filter(body => body.wizardId === this.id));
        this.footerTemplate$ = this.wizardService.footerTemplate$.pipe(filter(footer => footer.wizardId === this.id));
    }
    ngOnInit() {
        this.emitTemplates();
    }
    /**
     * Resets the wizard.
     * @param result Custom result object which will be emitted via onReset output.
     */
    reset(result) {
        this.onReset.emit(result);
        this.emitTemplates();
    }
    /**
     * Closes the wizard.
     * @param result Custom result object which will be emitted via onClose output.
     */
    close(result) {
        this.onClose.emit(result);
        this.onClose.complete();
        this.bsModalRef.hide();
    }
    emitTemplates() {
        setTimeout(() => {
            this.wizardService.headerTemplate$.next({ template: this.header, wizardId: this.id });
            this.wizardService.bodyTemplate$.next({ template: this.body, wizardId: this.id });
            this.wizardService.footerTemplate$.next({ template: this.footer, wizardId: this.id });
        });
    }
}
WizardComponent.ɵfac = function WizardComponent_Factory(t) { return new (t || WizardComponent)(ɵngcc0.ɵɵdirectiveInject(WizardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef)); };
WizardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardComponent, selectors: [["c8y-wizard"]], viewQuery: function WizardComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c13, 7);
        ɵngcc0.ɵɵviewQuery(_c14, 7);
        ɵngcc0.ɵɵviewQuery(_c15, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.header = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.body = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footer = _t.first);
    } }, inputs: { wizardConfig: "wizardConfig", id: "id" }, outputs: { onClose: "onClose", onReset: "onReset", onSelect: "onSelect" }, decls: 14, vars: 10, consts: [[1, "viewport-modal", "animated", "fadeIn"], [4, "ngTemplateOutlet"], ["headerRef", ""], ["bodyRef", ""], [3, "initialState", "onSelect"], ["footerRef", ""], [1, "modal-header", "dialog-header", "animated", "fadeIn"], [3, "c8yIcon"], ["class", "p-16 p-t-8 text-center", 4, "ngIf"], [1, "p-16", "p-t-8", "text-center"], [1, "c8y-wizard-nav"], [1, "modal-footer", "animated", "fadeIn"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["translate", ""]], template: function WizardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, WizardComponent_1_Template, 1, 0, undefined, 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtemplate(3, WizardComponent_ng_template_3_Template, 5, 4, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(5, WizardComponent_5_Template, 1, 0, undefined, 1);
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵtemplate(7, WizardComponent_ng_template_7_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(9, "c8y-wizard-outlet", 4);
        ɵngcc0.ɵɵlistener("onSelect", function WizardComponent_Template_c8y_wizard_outlet_onSelect_9_listener($event) { return ctx.onSelect.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, WizardComponent_10_Template, 1, 0, undefined, 1);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵtemplate(12, WizardComponent_ng_template_12_Template, 5, 3, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_0_0;
        let tmp_1_0;
        let tmp_3_0;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(2, 4, ctx.headerTemplate$)) == null ? null : tmp_0_0.template);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", (tmp_1_0 = ɵngcc0.ɵɵpipeBind1(6, 6, ctx.bodyTemplate$)) == null ? null : tmp_1_0.template);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("initialState", ctx.componentInitialState);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", (tmp_3_0 = ɵngcc0.ɵɵpipeBind1(11, 8, ctx.footerTemplate$)) == null ? null : tmp_3_0.template);
    } }, directives: function () { return [ɵngcc7.NgTemplateOutlet, WizardOutletComponent, IconDirective, ɵngcc7.NgIf, C8yTranslateDirective]; }, pipes: function () { return [ɵngcc7.AsyncPipe, C8yTranslatePipe]; }, encapsulation: 2 });
WizardComponent.ctorParameters = () => [
    { type: WizardService },
    { type: BsModalRef }
];
WizardComponent.propDecorators = {
    header: [{ type: ViewChild, args: ['headerRef', { static: true },] }],
    body: [{ type: ViewChild, args: ['bodyRef', { static: true },] }],
    footer: [{ type: ViewChild, args: ['footerRef', { static: true },] }],
    id: [{ type: Input }],
    wizardConfig: [{ type: Input }],
    onClose: [{ type: Output }],
    onReset: [{ type: Output }],
    onSelect: [{ type: Output }]
};

/**
 * A hook to add wizard entries.
 */
const HOOK_WIZARD = new InjectionToken('Generic wizard');

class WizardService extends StateService {
    constructor(bsModalService, injector, router) {
        super();
        this.bsModalService = bsModalService;
        this.injector = injector;
        this.router = router;
        /** Wizard header subject. It emits header template. */
        this.headerTemplate$ = new Subject();
        /** Wizard body subject. It emits body template. */
        this.bodyTemplate$ = new Subject();
        /** Wizard footer subject. It emits footer template. */
        this.footerTemplate$ = new Subject();
        /**
         * @ignore
         */
        this.state$ = new BehaviorSubject(new Set());
        /** Refresh the extension factories subject. */
        this.refreshTrigger = new Subject();
        /** Additional factories that can be added by plugins. */
        this.factories = [];
        this.items$ = fromTrigger(this.router, this.refreshTrigger, [
            () => this.injector.get(HOOK_WIZARD, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map(entries => this.getUniqueListBy(entries, 'name', 'wizardId')), shareReplay(1));
    }
    /**
     * Returns the current state.
     * @returns The current set of entries.
     * @readonly
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Refresh the extension factories.
     */
    refresh() {
        this.refreshTrigger.next();
    }
    /**
     * Adds a new entry in the wizard.
     * @param entry Wizard entry to add.
     */
    add(entry) {
        this.state.add(entry);
        this.emitNewState();
    }
    /**
     * Removes entry from the wizard.
     * @param entry Wizard entry to remove.
     */
    remove(entry) {
        this.state.delete(entry);
        this.emitNewState();
    }
    /**
     * List of wizard entries matching the given id.
     * @param id
     * @returns observable with list of wizard entries.
     */
    getEntriesListById(id) {
        return this.items$.pipe(map(entries => entries.filter(entry => entry.wizardId === id)));
    }
    /**
     * Shows a wizard modal.
     * @param modalOptions Modal options.
     * @returns a reference to the modal.
     */
    show(modalOptions = {}) {
        const options = Object.assign({ class: 'modal-sm', backdrop: 'static' }, modalOptions);
        return this.bsModalService.show(WizardComponent, options);
    }
    getUniqueListBy(entries, ...keys) {
        return [
            ...new Map(entries.map(item => [this.getUniqIdentifierForKeys(item, keys), item])).values()
        ];
    }
    getUniqIdentifierForKeys(entry, keys) {
        return keys.map(key => entry[key]).join('_');
    }
}
WizardService.ɵfac = function WizardService_Factory(t) { return new (t || WizardService)(ɵngcc0.ɵɵinject(ɵngcc10.BsModalService), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
WizardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WizardService_Factory() { return new WizardService(i0.ɵɵinject(i1$2.BsModalService), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: WizardService, providedIn: "root" });
WizardService.ctorParameters = () => [
    { type: BsModalService },
    { type: Injector },
    { type: Router }
];

class PluginsResolveService {
    constructor(tabs, navigator, action, actionBar, breadcrumb, dynamicComponent, search, c8yRouter, docs, wizard, compiler, injector) {
        this.tabs = tabs;
        this.navigator = navigator;
        this.action = action;
        this.actionBar = actionBar;
        this.breadcrumb = breadcrumb;
        this.dynamicComponent = dynamicComponent;
        this.search = search;
        this.c8yRouter = c8yRouter;
        this.docs = docs;
        this.wizard = wizard;
        this.compiler = compiler;
        this.injector = injector;
        this.allHooks = [
            { token: HOOK_ACTION, service: this.action, values: [] },
            { token: HOOK_ACTION_BAR, service: this.actionBar, values: [] },
            { token: HOOK_NAVIGATOR_NODES, service: this.navigator, values: [] },
            { token: HOOK_BREADCRUMB, service: this.breadcrumb, values: [] },
            { token: HOOK_COMPONENTS, service: this.dynamicComponent, values: [] },
            { token: HOOK_ONCE_ROUTE, service: this.c8yRouter, values: [] },
            { token: HOOK_ROUTE, service: this.c8yRouter, values: [] },
            { token: HOOK_SEARCH, service: this.search, values: [] },
            { token: HOOK_TABS, service: this.tabs, values: [] },
            { token: HOOK_DOCS, service: this.docs, values: [] },
            { token: HOOK_WIZARD, service: this.wizard, values: [] }
        ];
    }
    /**
     * Loads plugins by resolving the remote NgModules and injecting it. Also attaching
     * the hooks onto the root injector.
     * @param remoteModules The remote plugins to load as factory name mapping array.
     */
    resolveRemotePlugins(remoteModules) {
        return __awaiter(this, void 0, void 0, function* () {
            const remoteNgModules = remoteModules
                .filter(({ factory }) => factory)
                .map(({ name, factory }) => factory[name]);
            for (const remoteNgModule of remoteNgModules) {
                let factory;
                if (remoteNgModule instanceof NgModuleFactory) {
                    // AOT
                    factory = remoteNgModule;
                }
                else {
                    // JIT
                    factory = yield this.compiler.compileModuleAsync(remoteNgModule);
                }
                const moduleRef = factory.create(this.injector);
                this.allHooks.forEach(hook => {
                    hook.values = [...hook.values, ...moduleRef.injector.get(hook.token, [], InjectFlags.Self)];
                });
            }
            this.allHooks.forEach(hook => {
                if (hook.values.length) {
                    hook.service.factories = [...hook.service.factories, ...hook.values];
                    hook.service.refresh();
                }
            });
        });
    }
}
PluginsResolveService.ɵfac = function PluginsResolveService_Factory(t) { return new (t || PluginsResolveService)(ɵngcc0.ɵɵinject(TabsService), ɵngcc0.ɵɵinject(NavigatorService), ɵngcc0.ɵɵinject(ActionService), ɵngcc0.ɵɵinject(ActionBarService), ɵngcc0.ɵɵinject(BreadcrumbService), ɵngcc0.ɵɵinject(DynamicComponentService), ɵngcc0.ɵɵinject(SearchService), ɵngcc0.ɵɵinject(RouterService), ɵngcc0.ɵɵinject(DocsService), ɵngcc0.ɵɵinject(WizardService), ɵngcc0.ɵɵinject(ɵngcc0.Compiler), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
PluginsResolveService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PluginsResolveService_Factory() { return new PluginsResolveService(i0.ɵɵinject(TabsService), i0.ɵɵinject(NavigatorService), i0.ɵɵinject(ActionService), i0.ɵɵinject(ActionBarService), i0.ɵɵinject(BreadcrumbService), i0.ɵɵinject(DynamicComponentService), i0.ɵɵinject(SearchService), i0.ɵɵinject(RouterService), i0.ɵɵinject(DocsService), i0.ɵɵinject(WizardService), i0.ɵɵinject(i0.Compiler), i0.ɵɵinject(i0.INJECTOR)); }, token: PluginsResolveService, providedIn: "root" });
PluginsResolveService.ctorParameters = () => [
    { type: TabsService },
    { type: NavigatorService },
    { type: ActionService },
    { type: ActionBarService },
    { type: BreadcrumbService },
    { type: DynamicComponentService },
    { type: SearchService },
    { type: RouterService },
    { type: DocsService },
    { type: WizardService },
    { type: Compiler },
    { type: Injector }
];

/**
 * The state determines the current status of the wizard:
 * START: First view, showing application properties
 * WIZARD: Custom wizard to change configurations.
 * FINALIZING: Status between saving and finishing the setup.
 * RELOADING: Status between finishing and reloading the app.
 */
var SetupState;
(function (SetupState) {
    SetupState[SetupState["START"] = 0] = "START";
    SetupState[SetupState["WIZARD"] = 1] = "WIZARD";
    SetupState[SetupState["FINALIZING"] = 2] = "FINALIZING";
    SetupState[SetupState["RELOADING"] = 3] = "RELOADING";
})(SetupState || (SetupState = {}));
const NEEDED_ROLE_FOR_SETUP = 'ROLE_APPLICATION_MANAGEMENT_ADMIN';
const SETUP_FINISHED_STEP_ID = 'c8ySetupFinished';

/**
 * Default steppers used in the platform. Use this too hook into
 * certain steps.
 *
 * *Example:*
 * ```ts
 * providers: [{
 *   provide: HOOK_STEPPER,
 *   useValue: {
 *      id: Steppers.SETUP,
 *      label: 'Register devices',
 *      component: YourRegisterDeviceForm,
 *      priority: -1000
 *   },
 *   multi: true
 * }]
 * ```
 */
var Steppers;
(function (Steppers) {
    /**
     * Use this stepperId to hook a component into the application
     * setup step.
     */
    Steppers["SETUP"] = "setup";
})(Steppers || (Steppers = {}));

/**
 * A hook to use for Multi Provider extension.
 */
const HOOK_STEPPER = new InjectionToken('HookStepper');
/**
 * A service which defines the steps in a stepper component.
 * A stepper hook needs an certain outlet which has an matching id
 * to display the steps.
 */
class StepperService extends StateService {
    constructor(injector, router, translateService) {
        super();
        this.injector = injector;
        this.translateService = translateService;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.factories = [];
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_STEPPER, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(shareReplay(1), distinctUntilChanged());
    }
    sortSteps(steps) {
        return steps.sort((a, b) => {
            const priorityOrder = (b.priority || 0) - (a.priority || 0);
            const aTranslatedLabel = this.translateService.instant(a.label);
            const bTranslatedLabel = this.translateService.instant(b.label);
            const translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return priorityOrder || translatedLabelOrder;
        });
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes a step and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    /**
     * Returns the component by it's asssigned stepper id as an observable.
     * @param id The id of the stepper to hook into.
     */
    getById$(id) {
        return this.items$.pipe(filter((steps) => steps.length > 0), map((steps) => steps.filter((cmp) => cmp.stepperId === id)), take(1));
    }
}
StepperService.ɵfac = function StepperService_Factory(t) { return new (t || StepperService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc4.TranslateService)); };
StepperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StepperService_Factory() { return new StepperService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TranslateService)); }, token: StepperService, providedIn: "root" });
StepperService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: TranslateService$1 }
];

class BootstrapComponent {
    constructor(tabs, ui, navigator, actionBar, headerService, options, pluginsResolve, stepperService, permissions) {
        this.tabs = tabs;
        this.ui = ui;
        this.navigator = navigator;
        this.actionBar = actionBar;
        this.headerService = headerService;
        this.options = options;
        this.pluginsResolve = pluginsResolve;
        this.stepperService = stepperService;
        this.permissions = permissions;
        this.showPoweredBy = true;
        this.noAppsMargin$ = this.headerService.map(({ nav }) => !nav.open && nav.hiddenOnStartup);
        this.tabsOrientation = this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        this.ui
            .map(({ lang }) => lang)
            .pipe(distinctUntilChanged())
            .subscribe(() => {
            this.actionBar.refresh();
        });
        this.showPoweredBy = !this.options.get('hidePowered');
        this.isSetupNeeded$ = this.ui.currentApplication.pipe(map(app => this.ui.isOwnerOfApplication(app)), switchMap(isOwner => {
            if (!isOwner) {
                return of([]);
            }
            return this.stepperService.getById$(Steppers.SETUP);
        }), map((steps) => this.getNotCompletedSetupSteps(steps)), map(notCompletedSetupSteps => this.options.forceSetup || this.options.isSetup && this.needsSetup(notCompletedSetupSteps)));
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { remoteModules } = window.C8Y_APP;
            if (remoteModules.length) {
                yield this.pluginsResolve.resolveRemotePlugins(remoteModules);
            }
        });
    }
    needsSetup(notCompletedSetupSteps) {
        notCompletedSetupSteps = this.excludeSetupFinishStep(notCompletedSetupSteps);
        if (this.hasPermission()) {
            return notCompletedSetupSteps.length > 0;
        }
        // Show setup screen as there are required steps but the user
        // has no permission. The Setup screen will show an error to
        // the user.
        return this.hasRequiredSteps(notCompletedSetupSteps);
    }
    excludeSetupFinishStep(notCompletedSetupSteps) {
        return notCompletedSetupSteps.filter(({ setupId }) => setupId !== SETUP_FINISHED_STEP_ID);
    }
    hasRequiredSteps(notCompletedSetupSteps) {
        return notCompletedSetupSteps.some(step => step.required);
    }
    hasPermission() {
        return this.permissions.hasRole(NEEDED_ROLE_FOR_SETUP);
    }
    getNotCompletedSetupSteps(steps) {
        if (!this.ui.currentApplicationConfig.value) {
            return steps;
        }
        return steps.filter(step => step.setupId && !(this.ui.currentApplicationConfig.value.setup || []).includes(step.setupId));
    }
}
BootstrapComponent.ɵfac = function BootstrapComponent_Factory(t) { return new (t || BootstrapComponent)(ɵngcc0.ɵɵdirectiveInject(TabsService), ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(NavigatorService), ɵngcc0.ɵɵdirectiveInject(ActionBarService), ɵngcc0.ɵɵdirectiveInject(HeaderService), ɵngcc0.ɵɵdirectiveInject(OptionsService), ɵngcc0.ɵɵdirectiveInject(PluginsResolveService), ɵngcc0.ɵɵdirectiveInject(StepperService), ɵngcc0.ɵɵdirectiveInject(Permissions)); };
BootstrapComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BootstrapComponent, selectors: [["c8y-bootstrap"]], ngContentSelectors: _c18, decls: 9, vars: 13, consts: [[4, "ngIf"], [3, "head-open", 4, "ngIf"], ["header", ""], [3, "nodes", "open"], [1, "title", "navigator-slot-top"], [1, "tenant-brand"], [3, "name", "contextPath"], ["class", "powered-by navigator-slot-bottom", 4, "ngIf"], [1, "alerts"], [3, "tabs", "navigatorOpen", "orientation"], ["tabsComponent", ""], [3, "navigatorOpen", "hasTabs", "isTabsHorizontal", "items$"], ["actionBarComponent", ""], [1, "mcontainer", 3, "ngClass"], [1, "container-fluid"], [1, "powered-by", "navigator-slot-bottom"], ["translate", ""], [3, "simple"], [1, "mcontainer"]], template: function BootstrapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c17);
        ɵngcc0.ɵɵtemplate(0, BootstrapComponent_c8y_login_0_Template, 1, 0, "c8y-login", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, BootstrapComponent_div_2_Template, 33, 49, "div", 1);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵtemplate(5, BootstrapComponent_div_5_Template, 5, 1, "div", 0);
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelement(8, "c8y-cookie-banner");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(1, 3, ctx.ui.currentUser));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(3, 5, ctx.ui.currentUser) && !ɵngcc0.ɵɵpipeBind1(4, 7, ctx.isSetupNeeded$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(6, 9, ctx.ui.currentUser) && ɵngcc0.ɵɵpipeBind1(7, 11, ctx.isSetupNeeded$));
    } }, directives: function () { return [ɵngcc7.NgIf, CookieBannerComponent, LoginComponent, HeaderBarComponent, NavigatorOutletComponent, AppIconComponent, AlertOutletComponent, TabsOutletComponent, ActionBarComponent, ɵngcc7.NgClass, ɵngcc1.RouterOutlet, C8yTranslateDirective, SetupComponent]; }, pipes: function () { return [ɵngcc7.AsyncPipe, HumanizeAppNamePipe]; }, encapsulation: 2 });
BootstrapComponent.ctorParameters = () => [
    { type: TabsService },
    { type: AppStateService },
    { type: NavigatorService },
    { type: ActionBarService },
    { type: HeaderService },
    { type: OptionsService },
    { type: PluginsResolveService },
    { type: StepperService },
    { type: Permissions }
];

class BreadcrumbItemComponent {
}
BreadcrumbItemComponent.ɵfac = function BreadcrumbItemComponent_Factory(t) { return new (t || BreadcrumbItemComponent)(); };
BreadcrumbItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbItemComponent, selectors: [["c8y-breadcrumb-item"]], viewQuery: function BreadcrumbItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { icon: "icon", translate: "translate", label: "label", path: "path" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""]], template: function BreadcrumbItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, BreadcrumbItemComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
BreadcrumbItemComponent.propDecorators = {
    icon: [{ type: Input }],
    translate: [{ type: Input }],
    label: [{ type: Input }],
    path: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: false },] }]
};

class BreadcrumbOutletComponent {
    constructor() {
        this.showAll = false;
        this.breadcrumbs = [];
    }
    /**
     * For upgrade only. Old angularjs routes start with hash, new ones not.
     */
    normalizePath(path) {
        return path === null || path === void 0 ? void 0 : path.replace(/^#\/?/, '');
    }
}
BreadcrumbOutletComponent.ɵfac = function BreadcrumbOutletComponent_Factory(t) { return new (t || BreadcrumbOutletComponent)(); };
BreadcrumbOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbOutletComponent, selectors: [["c8y-breadcrumb-outlet"]], inputs: { breadcrumbs: "breadcrumbs" }, decls: 1, vars: 1, consts: [["class", "breadcrumbs-container", 3, "ngClass", 4, "ngIf"], [1, "breadcrumbs-container", 3, "ngClass"], ["class", "btn-show-all-breadcrumbs pull-left", 3, "click", 4, "ngIf"], ["class", "breadcrumbs text-muted", 4, "ngFor", "ngForOf"], [1, "btn-show-all-breadcrumbs", "pull-left", 3, "click"], ["container", "body", "placement", "top", 3, "c8yIcon", "tooltip", 4, "ngIf"], ["container", "body", "placement", "top", 3, "c8yIcon", "tooltip"], [1, "breadcrumbs", "text-muted"], [4, "ngIf"], ["class", "text-muted", 4, "ngFor", "ngForOf"], [1, "text-muted"], [4, "c8yOutlet"], [1, "word-break", 3, "routerLink", "title"], ["class", "m-r-4", 3, "c8yIcon", 4, "ngIf"], [1, "m-r-4", 3, "c8yIcon"]], template: function BreadcrumbOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BreadcrumbOutletComponent_div_0_Template, 3, 6, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.breadcrumbs && ctx.breadcrumbs.length > 0);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgClass, ɵngcc7.NgForOf, IconDirective, ɵngcc11.TooltipDirective, OutletDirective, ɵngcc1.RouterLinkWithHref], pipes: [C8yTranslatePipe], encapsulation: 2 });
BreadcrumbOutletComponent.propDecorators = {
    breadcrumbs: [{ type: Input }]
};

class BreadcrumbComponent {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
    }
    ngAfterViewInit() {
        this.items = this.contentChildItems.toArray();
        this.viewInitTimeout = setTimeout(() => this.breadcrumbService.add(this));
    }
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.breadcrumbService.remove(this);
    }
}
BreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) { return new (t || BreadcrumbComponent)(ɵngcc0.ɵɵdirectiveInject(BreadcrumbService)); };
BreadcrumbComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbComponent, selectors: [["c8y-breadcrumb"]], contentQueries: function BreadcrumbComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, BreadcrumbItemComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentChildItems = _t);
    } }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function BreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, BreadcrumbComponent_ng_template_0_Template, 1, 0, "ng-template");
    } }, encapsulation: 2 });
BreadcrumbComponent.ctorParameters = () => [
    { type: BreadcrumbService }
];
BreadcrumbComponent.propDecorators = {
    contentChildItems: [{ type: ContentChildren, args: [BreadcrumbItemComponent,] }]
};

/**
 * The angular module definition for breadcrumbs.
 * @exports BreadcrumbComponent
 * @exports BreadcrumbItemComponent
 * @exports BreadcrumbOutletComponent
 */
class BreadcrumbModule {
}
BreadcrumbModule.ɵfac = function BreadcrumbModule_Factory(t) { return new (t || BreadcrumbModule)(); };
BreadcrumbModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BreadcrumbModule });
BreadcrumbModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            RouterModule$1.forChild([]),
            CommonModule,
            TooltipModule.forRoot()
        ]] });

/**
 * Navigator node icon component.
 */
class NavigatorIconComponent {
    /**
     * Returns the navigator node icon.
     * If the icon is not defined, it returns the default icon (cog).
     */
    get icon() {
        const DEFAULT_ICON = 'cog';
        return this.node.icon || DEFAULT_ICON;
    }
    /**
     * Returns the navigator icon CSS class.
     */
    get iconClass() {
        return `dlt-c8y-icon-${this.icon}`;
    }
}
NavigatorIconComponent.ɵfac = function NavigatorIconComponent_Factory(t) { return new (t || NavigatorIconComponent)(); };
NavigatorIconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NavigatorIconComponent, selectors: [["c8y-navigator-icon"]], inputs: { node: "node" }, decls: 1, vars: 1, consts: [[1, "icon", 3, "c8yIcon"]], template: function NavigatorIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "i", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.icon);
    } }, directives: [IconDirective], encapsulation: 2 });
NavigatorIconComponent.propDecorators = {
    node: [{ type: Input }]
};

/**
 * A component to show a popover right next to the
 * user action. Add this component where the confirm modal
 * should be shown and toggle isOpen to display it. You
 * can use `await isShow()` to wait for a result on the
 * click action.
 */
class PopoverConfirmComponent {
    constructor() {
        this.buttons = [{ label: gettext('cancel'), action: () => Promise.reject() }];
        this.isOpen = false;
        this.containerClass = '';
        this.placement = 'right';
        this.outsideClick = false;
    }
    /**
     * Show the popover. Wait until an action is performed on it.
     */
    show(buttons) {
        return __awaiter(this, void 0, void 0, function* () {
            this.buttons = buttons || this.buttons;
            this.isOpen = true;
            let result;
            try {
                result = yield new Promise((resolve, reject) => {
                    return this.click = (action) => action().then(resolve).catch(reject);
                });
            }
            catch (ex) {
                throw (ex);
            }
            finally {
                this.isOpen = false;
            }
            return result;
        });
    }
    buttonStatus(status) {
        if (status) {
            return `btn-${status}`;
        }
        return 'btn-link btn-clean';
    }
    handleOutsideClick() {
        this.click(() => Promise.reject());
    }
}
PopoverConfirmComponent.ɵfac = function PopoverConfirmComponent_Factory(t) { return new (t || PopoverConfirmComponent)(); };
PopoverConfirmComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PopoverConfirmComponent, selectors: [["c8y-popover-confirm"]], viewQuery: function PopoverConfirmComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(PopoverDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popover = _t.first);
    } }, inputs: { buttons: "buttons", isOpen: "isOpen", containerClass: "containerClass", placement: "placement", outsideClick: "outsideClick", message: "message", title: "title" }, decls: 4, vars: 8, consts: [["container", "body", 3, "popover", "isOpen", "popoverTitle", "placement", "containerClass", "outsideClick", "onHidden"], ["popover", ""], [1, "m-b-8"], [1, "popover-footer"], [4, "ngFor", "ngForOf"], [1, "btn", "btn-sm", "m-r-16", 3, "title", "ngClass", "click"]], template: function PopoverConfirmComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("onHidden", function PopoverConfirmComponent_Template_span_onHidden_0_listener() { return ctx.handleOutsideClick(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, PopoverConfirmComponent_ng_template_2_Template, 5, 4, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("popover", _r0)("isOpen", ctx.isOpen)("popoverTitle", ɵngcc0.ɵɵpipeBind1(1, 6, ctx.title))("placement", ctx.placement)("containerClass", ctx.containerClass)("outsideClick", ctx.outsideClick);
    } }, directives: [ɵngcc12.PopoverDirective, ɵngcc7.NgForOf, ɵngcc7.NgClass], pipes: [C8yTranslatePipe], encapsulation: 2 });
PopoverConfirmComponent.propDecorators = {
    popover: [{ type: ViewChild, args: [PopoverDirective, { static: false },] }],
    buttons: [{ type: Input }],
    message: [{ type: Input }],
    title: [{ type: Input }],
    isOpen: [{ type: Input }],
    containerClass: [{ type: Input }],
    placement: [{ type: Input }],
    outsideClick: [{ type: Input }]
};

// tslint:disable-next-line:max-line-length
/**
 * Navigator node renderer.
 */
class NavigatorNodeComponent {
    constructor(componentFactoryResolver, navigator) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.navigator = navigator;
        /**
         * Event emitter responsible for broadcasting one of the following events: "icon", "expander" or "link" as string value.
         *
         * The type of event depends on where you click on the navigator node:
         * * clicking the icon will broadcast the event "icon",
         * * clicking the expander will broadcast the event "expander",
         * * clicking the label will broadcast the event "link".
         */
        this.nodeClick = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngAfterViewInit() {
        this.childrenNodes.forEach(n => (n.parentNode = this));
        this.viewInitTimeout = setTimeout(() => {
            this.updateIcon();
            this.openOnFirstUrl();
            this.expandParentIfActive();
            this.node.confirm = this.confirm;
        });
    }
    /**
     * Expands the navigator node when the URL matches the path provided in the node.
     */
    openOnFirstUrl() {
        if (this.navigator.openOnFirstUrl(this.node) && !this.node.open) {
            this.expandCollapse(true);
        }
    }
    /**
     * Returns the expander title.
     */
    get expandTitle() {
        return !this.node.open ? 'Expand' : 'Collapse';
    }
    /**
     * Click event handler.
     *
     * @param {string} from Source of the click event.
     * @param event DOM event.
     */
    click(from = 'link', $event) {
        let open;
        switch (from) {
            case "expander" /* EXPANDER */:
                if ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                }
                open = !this.node.open;
                break;
            case "icon" /* ICON */:
            case "link" /* LINK */:
                open = this.routerLinkActive && this.routerLinkActive.isActive ? true : !this.node.open;
                break;
        }
        this.handleExpandCollapse(open, from, $event);
        this.nodeClick.emit(from);
    }
    /**
     * Expands or collapses the navigator node and its children recursively.
     *
     * @param {boolean} open Open or close the node.
     * @param {boolean} recursive Open or close the children.
     * @param {ClickOptions} forNode Click options.
     */
    expandCollapse(open, recursive, forNode = {}) {
        this.node.open = open;
        if (recursive) {
            this.childrenNodes.forEach(n => n.expandCollapse(open, recursive));
        }
        forNode.open = open;
        this.node.click(forNode);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        if (this.node) {
            this.node.destroy();
        }
    }
    handleExpandCollapse(open, from, $event) {
        if (open === this.node.open ||
            (this.node.path && !open && from !== "expander" /* EXPANDER */)) {
            return;
        }
        this.expandCollapse(open, false, { [from]: true, $event });
    }
    expandParentIfActive() {
        if (this.routerLinkActive && this.routerLinkActive.isActive && this.parentNode) {
            this.parentNode.expandCollapse(true);
        }
    }
    updateIcon() {
        if (this.node.iconTemplate) {
            this.updateIconTemplate();
        }
        else {
            this.updateIconComponent();
        }
    }
    updateIconComponent() {
        let componentType = NavigatorIconComponent;
        if (this.node && this.node.iconComponent) {
            componentType = this.node.iconComponent;
        }
        this.iconSlot.clear();
        const iconComponentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        const componentRef = this.iconSlot.createComponent(iconComponentFactory);
        componentRef.instance.node = this.node;
    }
    updateIconTemplate() {
        this.iconSlot.clear();
        this.iconSlot.createEmbeddedView(this.node.iconTemplate);
    }
}
NavigatorNodeComponent.ɵfac = function NavigatorNodeComponent_Factory(t) { return new (t || NavigatorNodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(NavigatorService)); };
NavigatorNodeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NavigatorNodeComponent, selectors: [["c8y-navigator-node"]], viewQuery: function NavigatorNodeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c20, 5, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(RouterLinkActive, 5);
        ɵngcc0.ɵɵviewQuery(PopoverConfirmComponent, 5);
        ɵngcc0.ɵɵviewQuery(NavigatorNodeComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconSlot = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.routerLinkActive = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.confirm = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childrenNodes = _t);
    } }, inputs: { node: "node", isRoot: "isRoot" }, outputs: { nodeClick: "nodeClick" }, decls: 8, vars: 23, consts: [[1, "slot", 3, "hidden", "draggable", "ngClass", "dragstart", "dragend", "drop"], ["draggable", "false", 1, "link", 3, "title", "routerLink", "routerLinkActive", "routerLinkActiveOptions", "ngClass", "dragover", "dragenter", "dragleave", "click"], [4, "ngTemplateOutlet"], ["class", "children panel-expand expand", 3, "collapse", "isAnimated", 4, "ngIf"], ["inner", ""], [1, "children", "panel-expand", "expand", 3, "collapse", "isAnimated"], [3, "node", "nodeClick", 4, "ngFor", "ngForOf"], [3, "node", "nodeClick"], ["class", "icon-spin loadingIndicator", 3, "c8yIcon", 4, "ngIf"], ["icon", ""], ["class", "expander", 3, "c8yIcon", "title", "click", 4, "ngIf"], ["outsideClick", "true", "containerClass", "navigator-popover"], [1, "icon-spin", "loadingIndicator", 3, "c8yIcon"], [1, "expander", 3, "c8yIcon", "title", "click"]], template: function NavigatorNodeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("dragstart", function NavigatorNodeComponent_Template_div_dragstart_0_listener($event) { return ctx.node.dragStart($event); })("dragend", function NavigatorNodeComponent_Template_div_dragend_0_listener($event) { return ctx.node.dragEnd($event); })("drop", function NavigatorNodeComponent_Template_div_drop_0_listener($event) { return ctx.node.drop($event); });
        ɵngcc0.ɵɵelementContainerStart(1);
        ɵngcc0.ɵɵelementStart(2, "a", 1);
        ɵngcc0.ɵɵlistener("dragover", function NavigatorNodeComponent_Template_a_dragover_2_listener($event) { return ctx.node.canDrop && $event.preventDefault(); })("dragenter", function NavigatorNodeComponent_Template_a_dragenter_2_listener($event) { return ctx.node.canDrop && ctx.node.dragEnter($event); })("dragleave", function NavigatorNodeComponent_Template_a_dragleave_2_listener($event) { return ctx.node.canDrop && ctx.node.dragLeave($event); })("click", function NavigatorNodeComponent_Template_a_click_2_listener($event) { return ctx.click(ctx.node.canNavigate ? "link" : "expander", $event); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, NavigatorNodeComponent_ng_container_4_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(5, NavigatorNodeComponent_div_5_Template, 2, 3, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, NavigatorNodeComponent_ng_template_6_Template, 9, 5, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(7);
        ɵngcc0.ɵɵproperty("hidden", ctx.node.hidden)("draggable", ctx.node.draggable)("ngClass", ɵngcc0.ɵɵpureFunction2(13, _c21, ctx.node.dragged, ctx.node.loading));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 11, ctx.node.label));
        ɵngcc0.ɵɵproperty("routerLink", ctx.node.canNavigate ? ctx.node.path : undefined)("routerLinkActive", ctx.node.canNavigate ? "active" : "")("routerLinkActiveOptions", ɵngcc0.ɵɵpureFunction1(16, _c22, ctx.node.routerLinkExact))("ngClass", ɵngcc0.ɵɵpureFunction4(18, _c23, ctx.isRoot, ctx.node.open && ctx.node.hasChildren, ctx.node.hasChildren, ctx.node.draggedHover && !ctx.node.dragged));
        ɵngcc0.ɵɵattribute("id", ctx.isRoot ? ctx.node.id : undefined);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.node.children.length);
    } }, directives: [ɵngcc7.NgClass, ɵngcc1.RouterLinkWithHref, ɵngcc1.RouterLinkActive, ɵngcc7.NgTemplateOutlet, ɵngcc7.NgIf, ɵngcc13.CollapseDirective, ɵngcc7.NgForOf, NavigatorNodeComponent, PopoverConfirmComponent, IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
NavigatorNodeComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: NavigatorService }
];
NavigatorNodeComponent.propDecorators = {
    iconSlot: [{ type: ViewChild, args: ['icon', { read: ViewContainerRef, static: false },] }],
    node: [{ type: Input }],
    isRoot: [{ type: Input }],
    routerLinkActive: [{ type: ViewChild, args: [RouterLinkActive, { static: false },] }],
    childrenNodes: [{ type: ViewChildren, args: [NavigatorNodeComponent,] }],
    nodeClick: [{ type: Output }],
    confirm: [{ type: ViewChild, args: [PopoverConfirmComponent, { static: false },] }]
};

/**
 * The component shows all nodes that have been added to the navigator.
 * In addition, it allows you to add a header and a footer to the navigator.
 *
 * ## Example:
 * ```html
 * <c8y-navigator-outlet [nodes]="navigatorService.items$ | async" [open]="isOpen">
 *   <header class="navigator-slot-top"></header>
 *   <footer class="navigator-slot-bottom"></footer>
 * </c8y-navigator-outlet>
 * ```
 */
class NavigatorOutletComponent {
    constructor(headerService) {
        this.headerService = headerService;
        /**
         * Determines whether the navigator menu should be open/closed.
         */
        this.open = true;
        /**
         * Determines whether the navigator pane should be rendered.
         */
        this.isShown$ = new BehaviorSubject(false);
    }
    /**
     * @ignore
     */
    ngOnChanges() {
        this.isShown$.next(this.nodes && this.nodes.length > 0);
    }
    /**
     * Closes the navigator menu after clicking an item in the menu, in case of insufficient screen width.
     */
    collapseNavigator(from) {
        if (from === 'link' && !this.headerService.largeWidth) {
            this.headerService.closeNavigator();
        }
    }
    /**
     * @ignore
     */
    trackByPathOrLabel(index, node) {
        return node.path ? node.path : node.label;
    }
}
NavigatorOutletComponent.ɵfac = function NavigatorOutletComponent_Factory(t) { return new (t || NavigatorOutletComponent)(ɵngcc0.ɵɵdirectiveInject(HeaderService)); };
NavigatorOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NavigatorOutletComponent, selectors: [["c8y-navigator-outlet"], ["c8y-ui-navigator"]], inputs: { open: "open", nodes: "nodes" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c26, decls: 2, vars: 3, consts: [["class", "navigator", 3, "ngClass", 4, "ngIf"], [1, "navigator", 3, "ngClass"], [1, "navigatorContent"], [3, "node", "isRoot", "nodeClick", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "node", "isRoot", "nodeClick"]], template: function NavigatorOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c25);
        ɵngcc0.ɵɵtemplate(0, NavigatorOutletComponent_nav_0_Template, 5, 5, "nav", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.isShown$));
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgClass, ɵngcc7.NgForOf, NavigatorNodeComponent], pipes: [ɵngcc7.AsyncPipe], encapsulation: 2 });
NavigatorOutletComponent.ctorParameters = () => [
    { type: HeaderService }
];
NavigatorOutletComponent.propDecorators = {
    nodes: [{ type: Input }],
    open: [{ type: Input }]
};

class ConfirmModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.status = Status.INFO;
        this._labels = {
            ok: 'OK',
            cancel: 'Cancel'
        };
        this.result = new Promise((resolve, reject) => {
            this.dismiss = () => {
                reject();
                this.modal.hide();
            };
            this.close = () => {
                resolve(isEmpty(this.confirmOptions)
                    ? true
                    : {
                        confirmed: true,
                        confirmOptions: mapValues(this.confirmOptions, option => option.checked)
                    });
                this.modal.hide();
            };
        });
    }
    set labels(labels) {
        const { ok = 'OK', cancel = 'Cancel' } = labels || {};
        this._labels = { ok, cancel };
    }
    get labels() {
        return this._labels;
    }
    get classIcon() {
        return `dlt-c8y-icon-${statusIcons[this.status]}`;
    }
    get classAlert() {
        return statusAlert[this.status];
    }
    ngOnDestroy() {
        this.dismiss();
    }
}
ConfirmModalComponent.ɵfac = function ConfirmModalComponent_Factory(t) { return new (t || ConfirmModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef)); };
ConfirmModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfirmModalComponent, selectors: [["c8y-confirm-modal"]], inputs: { status: "status", labels: "labels", title: "title", body: "body", confirmOptions: "confirmOptions" }, ngContentSelectors: _c1, decls: 16, vars: 21, consts: [[1, "c8y-prompt", "alert", 3, "ngClass"], ["class", "m-b-16 d-flex a-i-center", 4, "ngIf"], [1, "text-break-word", "m-b-16"], ["class", "c8y-checkbox plain m-b-8", 4, "ngFor", "ngForOf"], [1, "alert-footer"], ["type", "button", "class", "btn btn-default", 3, "title", "click", 4, "ngIf"], ["type", "button", 1, "btn", "btn-primary", 3, "title", "click"], [1, "m-b-16", "d-flex", "a-i-center"], [1, "dlt-c8y-icon", 3, "ngClass"], [4, "ngIf"], [1, "c8y-checkbox", "plain", "m-b-8"], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", 3, "checked", "disabled", "change"], [1, "text-muted"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"]], template: function ConfirmModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ConfirmModalComponent_h3_1_Template, 3, 4, "h3", 1);
        ɵngcc0.ɵɵelementStart(2, "p", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, ConfirmModalComponent_div_5_Template, 8, 8, "div", 3);
        ɵngcc0.ɵɵpipe(6, "keyvalue");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵpipe(8, "showIfFilter");
        ɵngcc0.ɵɵprojection(9);
        ɵngcc0.ɵɵelementStart(10, "div", 4);
        ɵngcc0.ɵɵtemplate(11, ConfirmModalComponent_button_11_Template, 4, 6, "button", 5);
        ɵngcc0.ɵɵelementStart(12, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ConfirmModalComponent_Template_button_click_12_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(19, _c27, ctx.classAlert));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 7, ctx.body));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(6, 9, ɵngcc0.ɵɵpipeBind1(7, 11, ɵngcc0.ɵɵpipeBind1(8, 13, ctx.confirmOptions))));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngIf", ctx.labels.cancel !== null);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(13, 15, ctx.labels.ok));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 17, ctx.labels.ok), " ");
    } }, directives: [ɵngcc7.NgClass, ɵngcc7.NgIf, ɵngcc7.NgForOf], pipes: [C8yTranslatePipe, ɵngcc7.KeyValuePipe, ɵngcc7.AsyncPipe, ShowIfFilterPipe], encapsulation: 2 });
ConfirmModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
ConfirmModalComponent.propDecorators = {
    title: [{ type: Input }],
    body: [{ type: Input }],
    confirmOptions: [{ type: Input }],
    status: [{ type: Input }],
    labels: [{ type: Input }]
};

/**
 * C8y modal component.
 * ## Example:
 *
 * Creating custom modal:
 * ```typescript
 *  import { Component } from "@angular/core";
 *  import { Subject } from 'rxjs';
 *
 * @Component({
 *  selector: "my-modal",
 *  template: `
 *    <c8y-modal title="CustomTitle"
 *      (onClose)="onClose($event)"
 *      (onDismiss)="onDismiss($event)"
 *      [labels]="labels"
 *      [disabled]="true" <- will disable ok button
 *      >
 *        <span>I am body of modal</span>
 *        <span>For simple string use body="string"</span>
 *    </c8y-modal>`
 * })
 *
 * export class MyModalComponent {
 *
 *  closeSubject: Subject<boolean> = new Subject();
 *  labels : ModalLabels = {ok: "customOK", cancel: "customCancel"};
 *
 *  onDismiss(event){
 *    this.closeSubject.next(false);
 *  }
 *
 *  onClose(event) {
 *    this.closeSubject.next(true);
 *  }
 * }
 * ```
 * Showing modal:
 * ```typescript
 * import { BsModalService } from "ngx-bootstrap/modal";
 *
 * constructor(
 *  public bsModalService: BsModalService,
 * ) {}
 *
 * showModal() {
 *  const modalRef = this.bsModalService.show(MyModalComponent);
 *  modalRef.content.closeSubject.subscribe(result => {
 *    console.log('results:', result);
 *  });
 * }
 * ```
 */
class ModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.onDismiss = new EventEmitter();
        this.onClose = new EventEmitter();
        this.disabled = false;
        this.customFooter = false;
        this.headerClasses = '';
        this._labels = { ok: gettext('OK'), cancel: gettext('Cancel') };
    }
    set labels({ ok, cancel }) {
        this._labels = { ok, cancel };
    }
    get labels() { return this._labels; }
    _dismiss() {
        let fn = this.dismiss;
        if (!fn && this.modal) {
            fn = () => this.modal.hide();
        }
        if (fn) {
            fn();
        }
        this.onDismiss.emit(true);
    }
    _close() {
        let fn = this.close;
        if (!fn && this.modal) {
            fn = () => this.modal.hide();
        }
        if (fn) {
            fn();
        }
        this.onClose.emit(true);
    }
    onEnterKeyDown(event) {
        const hasOnlyOneButton = isEmpty$1(this.labels.ok) !== isEmpty$1(this.labels.cancel);
        const isCancelClickable = !this.customFooter && this.labels.cancel;
        const isOkClickable = !this.customFooter && !this.disabled && this.labels.ok;
        if (hasOnlyOneButton && isCancelClickable) {
            this._dismiss();
        }
        if (hasOnlyOneButton && isOkClickable) {
            this._close();
        }
    }
}
ModalComponent.ɵfac = function ModalComponent_Factory(t) { return new (t || ModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef, 8)); };
ModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ModalComponent, selectors: [["c8y-modal"]], hostBindings: function ModalComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.enter", function ModalComponent_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKeyDown($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { disabled: "disabled", customFooter: "customFooter", headerClasses: "headerClasses", labels: "labels", close: "close", dismiss: "dismiss", title: "title", body: "body" }, outputs: { onDismiss: "onDismiss", onClose: "onClose" }, ngContentSelectors: _c31, decls: 11, vars: 16, consts: [[1, "viewport-modal"], [3, "ngClass"], [3, "hidden"], [1, "modal-inner-scroll"], ["class", "text-center text-break-word", 4, "ngIf"], ["class", "modal-footer", 4, "ngIf"], [1, "text-center", "text-break-word"], [1, "modal-footer"], ["class", "btn btn-default", 3, "title", "click", 4, "ngIf"], ["class", "btn btn-primary", 3, "title", "disabled", "click", 4, "ngIf"], [1, "btn", "btn-default", 3, "title", "click"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function ModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c28);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementStart(3, "h3", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵelementStart(7, "div", 1);
        ɵngcc0.ɵɵtemplate(8, ModalComponent_p_8_Template, 2, 1, "p", 4);
        ɵngcc0.ɵɵprojection(9, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, ModalComponent_div_10_Template, 4, 2, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("modal-header ", ctx.headerClasses, "");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(11, _c29, ctx.title));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hidden", !ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 9, ctx.title), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(13, _c30, !ctx.customFooter, ctx.customFooter));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.customFooter);
    } }, directives: [ɵngcc7.NgClass, ɵngcc7.NgIf], pipes: [C8yTranslatePipe], encapsulation: 2 });
ModalComponent.ctorParameters = () => [
    { type: BsModalRef, decorators: [{ type: Optional }] }
];
ModalComponent.propDecorators = {
    onDismiss: [{ type: Output }],
    onClose: [{ type: Output }],
    disabled: [{ type: Input }],
    close: [{ type: Input }],
    dismiss: [{ type: Input }],
    title: [{ type: Input }],
    body: [{ type: Input }],
    customFooter: [{ type: Input }],
    headerClasses: [{ type: Input }],
    labels: [{ type: Input }],
    onEnterKeyDown: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }]
};

/**
 * Service to show a modal.
 */
class ModalService {
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     * @param confirmOptions Selection options to display as checkbox list.
     */
    confirm(title, body, status = Status.INFO, labels = {}, confirmOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = {
                ok: labels.ok || gettext('Confirm'),
                cancel: labels.cancel || gettext('Cancel')
            };
            const modalRef = this.modalService.show(ConfirmModalComponent, {
                initialState: { title, body, labels: modalLabels, status, confirmOptions },
                ignoreBackdropClick: true
            });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    acknowledge(title, body, status = Status.INFO, acknowledgeLabel = gettext('Confirm')) {
        return __awaiter(this, void 0, void 0, function* () {
            const labels = { ok: acknowledgeLabel, cancel: null };
            const modalRef = this.modalService.show(ConfirmModalComponent, {
                initialState: { title, body, labels, status },
                ignoreBackdropClick: true
            });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick logout confirmation modal.
     * @param body The text body to display. Default: 'You will be logged out to apply your changes. Do you want to proceed?'
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm and log out', cancel: 'Cancel' }
     */
    confirmLogout(body, status = Status.WARNING, labels = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = {
                ok: labels.ok || gettext('Confirm and log out'),
                cancel: labels.cancel || gettext('Cancel')
            };
            const modalBody = body || gettext('You must log out to apply your changes. Do you want to proceed?');
            return yield this.confirm(gettext('Logout required'), modalBody, status, modalLabels);
        });
    }
}
ModalService.ɵfac = function ModalService_Factory(t) { return new (t || ModalService)(ɵngcc0.ɵɵinject(ɵngcc10.BsModalService)); };
ModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1$2.BsModalService)); }, token: ModalService, providedIn: "root" });
ModalService.ctorParameters = () => [
    { type: BsModalService }
];

/**
 * The angular module definition for modal.
 * @exports ConfirmModalComponent
 * @exports ModalComponent
 * @exports PopoverConfirmComponent
 */
class ModalModule {
}
ModalModule.ɵfac = function ModalModule_Factory(t) { return new (t || ModalModule)(); };
ModalModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ModalModule });
ModalModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ModalService
    ], imports: [[
            ModalModule$1.forRoot(),
            CommonModule,
            PopoverModule.forRoot()
        ]] });

/**
 * The angular module definition for the navigator.
 * @exports NavigatorOutletComponent
 * @exports NavigatorNodeComponent
 */
class NavigatorModule {
}
NavigatorModule.ɵfac = function NavigatorModule_Factory(t) { return new (t || NavigatorModule)(); };
NavigatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NavigatorModule });
NavigatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            RouterModule$1,
            CollapseModule.forRoot(),
            CommonModule,
            ModalModule
        ]] });

class ProductExperienceDirective {
    constructor(gainsightService) {
        this.gainsightService = gainsightService;
    }
    onClick() {
        if (this.actionName) {
            this.gainsightService.triggerEvent(this.actionName, this.actionData);
        }
    }
}
ProductExperienceDirective.ɵfac = function ProductExperienceDirective_Factory(t) { return new (t || ProductExperienceDirective)(ɵngcc0.ɵɵdirectiveInject(GainsightService)); };
ProductExperienceDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ProductExperienceDirective, selectors: [["", "c8yProductExperience", ""]], hostBindings: function ProductExperienceDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ProductExperienceDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { actionName: "actionName", actionData: "actionData" } });
ProductExperienceDirective.ctorParameters = () => [
    { type: GainsightService }
];
ProductExperienceDirective.propDecorators = {
    actionName: [{ type: Input }],
    actionData: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};

/**
 * This module enables an tenant to activate the product experience
 * software [Gainsight](https://www.gainsight.com/product-experience/) to help
 * and track user actions. Gainsight is only activated, if the tenant custom
 * property `gainsightEnabled` is set to true.
 */
class ProductExperienceModule {
    constructor(appState, gainsightService, cookieBannerService) {
        this.appState = appState;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        combineLatest([
            this.appState.currentTenant.pipe(filter(Boolean)),
            this.cookieBannerService.isCookieBannerShowed$
        ]).subscribe(([currentTenant, isCookieBannerShowed]) => __awaiter(this, void 0, void 0, function* () {
            if (isCookieBannerShowed) {
                return;
            }
            const { customProperties, name } = currentTenant;
            if (this.gainsightService.shouldLoadGainsightTag(customProperties) &&
                !(yield this.gainsightService.isGainsightDisabledInUserPreferences())) {
                this.gainsightService.loadTag(currentTenant);
            }
        }));
    }
}
ProductExperienceModule.ɵfac = function ProductExperienceModule_Factory(t) { return new (t || ProductExperienceModule)(ɵngcc0.ɵɵinject(AppStateService), ɵngcc0.ɵɵinject(GainsightService), ɵngcc0.ɵɵinject(CookieBannerService)); };
ProductExperienceModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ProductExperienceModule });
ProductExperienceModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [GainsightService] });
ProductExperienceModule.ctorParameters = () => [
    { type: AppStateService },
    { type: GainsightService },
    { type: CookieBannerService }
];

class SearchOutletComponent {
    constructor(alertService) {
        this.alertService = alertService;
        this.search = [];
    }
    getByPriority() {
        return sortBy$1(this.search, this.byPriority);
    }
    byPriority(item) {
        return -item.priority;
    }
}
SearchOutletComponent.ɵfac = function SearchOutletComponent_Factory(t) { return new (t || SearchOutletComponent)(ɵngcc0.ɵɵdirectiveInject(AlertService)); };
SearchOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchOutletComponent, selectors: [["c8y-search-outlet"]], inputs: { search: "search" }, decls: 1, vars: 1, consts: [[4, "ngFor", "ngForOf"], [4, "c8yOutlet"]], template: function SearchOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SearchOutletComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.getByPriority());
    } }, directives: [ɵngcc7.NgForOf, OutletDirective], encapsulation: 2 });
SearchOutletComponent.ctorParameters = () => [
    { type: AlertService }
];
SearchOutletComponent.propDecorators = {
    search: [{ type: Input }]
};

class SearchComponent {
    constructor(searchService) {
        this.searchService = searchService;
        this.icon = 'search';
        this.priority = 0;
        this.search = new EventEmitter();
        this.term = '';
    }
    onSearch() {
        this.search.emit(this);
    }
    ngAfterViewInit() {
        this.template = undefined;
        this.viewInitTimeout = setTimeout(() => this.searchService.add(this));
    }
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.searchService.remove(this);
    }
}
SearchComponent.ɵfac = function SearchComponent_Factory(t) { return new (t || SearchComponent)(ɵngcc0.ɵɵdirectiveInject(SearchService)); };
SearchComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchComponent, selectors: [["c8y-search"]], viewQuery: function SearchComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { icon: "icon", priority: "priority", term: "term", name: "name" }, outputs: { search: "search" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""]], template: function SearchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, SearchComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
SearchComponent.ctorParameters = () => [
    { type: SearchService }
];
SearchComponent.propDecorators = {
    name: [{ type: Input }],
    icon: [{ type: Input }],
    priority: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: false },] }],
    search: [{ type: Output }],
    term: [{ type: Input }]
};

class HighlightComponent {
    constructor() {
        this.pattern = '';
        this.text = '';
        this.elementClass = 'text-info';
        this.shouldTrimPattern = false;
        this.highlightedText = '';
    }
    ngOnChanges() {
        var _a;
        const textNoHtml = escape$1(this.text || '');
        const patternEventuallyTrimmed = this.shouldTrimPattern
            ? (_a = this.pattern) === null || _a === void 0 ? void 0 : _a.trim()
            : this.pattern;
        const patternNoHtml = escape$1(patternEventuallyTrimmed || '');
        const patternForRegex = escapeRegExp(patternNoHtml).replace(/\\\*/g, '.*');
        this.highlightedText = textNoHtml.replace(new RegExp(patternForRegex, 'i'), `<strong class="${this.elementClass}">$&</strong>`);
    }
}
HighlightComponent.ɵfac = function HighlightComponent_Factory(t) { return new (t || HighlightComponent)(); };
HighlightComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HighlightComponent, selectors: [["c8y-highlight"]], viewQuery: function HighlightComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c9, 7, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, inputs: { pattern: "pattern", text: "text", elementClass: "elementClass", shouldTrimPattern: "shouldTrimPattern" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "innerHTML"]], template: function HighlightComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("innerHTML", ctx.highlightedText, ɵngcc0.ɵɵsanitizeHtml);
    } }, encapsulation: 2 });
HighlightComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['text', { read: ElementRef, static: true },] }],
    pattern: [{ type: Input }],
    text: [{ type: Input }],
    elementClass: [{ type: Input }],
    shouldTrimPattern: [{ type: Input }]
};

class SearchResultEmptyComponent {
    constructor() {
        this.NO_RESULT_FOUND = gettext('No results found.');
        this.msg = this.NO_RESULT_FOUND;
    }
    set _message(msg) {
        if (msg && msg.length > 0) {
            this.msg = msg;
        }
        else {
            this.msg = this.NO_RESULT_FOUND;
        }
    }
    get message() {
        return this.msg;
    }
}
SearchResultEmptyComponent.ɵfac = function SearchResultEmptyComponent_Factory(t) { return new (t || SearchResultEmptyComponent)(); };
SearchResultEmptyComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchResultEmptyComponent, selectors: [["c8y-search-result-empty"]], inputs: { _message: ["message", "_message"] }, decls: 10, vars: 3, consts: [[1, "no-results"], [1, "c8y-empty-state"], ["c8yIcon", "search"], [1, "p-t-8"], ["translate", ""]], template: function SearchResultEmptyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "h1", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "p");
        ɵngcc0.ɵɵelementStart(5, "strong");
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "small", 4);
        ɵngcc0.ɵɵtext(9, "Refine your search terms.");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 1, ctx.message));
    } }, directives: [IconDirective, C8yTranslateDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
SearchResultEmptyComponent.propDecorators = {
    _message: [{ type: Input, args: ['message',] }]
};

/**
 * Actions are functions that can be executed on the
 * current list item. They are displayed next to the
 * item and can be grouped in a dropdown.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *     Delete
 *   </c8y-li-action>
 *   <c8y-li-action (click)="(false)" icon="rocket">
 *     Launch to space
 *   </c8y-li-action>
 * </c8y-li>
 * ```
 */
class ListItemActionComponent {
    constructor() {
        /**
         * An EventEmitter to determine what to do if the
         * action is triggered.
         */
        this.click = new EventEmitter();
    }
}
ListItemActionComponent.ɵfac = function ListItemActionComponent_Factory(t) { return new (t || ListItemActionComponent)(); };
ListItemActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemActionComponent, selectors: [["c8y-list-item-action"], ["c8y-li-action"]], viewQuery: function ListItemActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { label: "label", icon: "icon" }, outputs: { click: "click" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""], [3, "title", "click"], [3, "c8yIcon", 4, "ngIf"], [4, "ngIf"], [3, "c8yIcon"]], template: function ListItemActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ListItemActionComponent_ng_template_0_Template, 7, 5, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc7.NgIf, IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
ListItemActionComponent.propDecorators = {
    template: [{ type: ViewChild, args: ['template', { static: false },] }],
    label: [{ type: Input }],
    icon: [{ type: Input }],
    click: [{ type: Output }]
};

/**
 * Display collapsed content on a list item. Can be
 * used for more detailed information. Use it with
 * content projection.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-collapsed>
 *     <strong>I am only visible if extended</strong>
 *   </c8y-collapsed>
 * </c8y-li>
 * ```
 */
class ListItemCollapseComponent {
    constructor() {
        /**
         * The way how to toggle collapse state.
         * button (default) - additional button for toggle collapse state
         * row - toggling collapse state by clicking to entire row.
         */
        this.collapseWay = 'button';
    }
}
ListItemCollapseComponent.ɵfac = function ListItemCollapseComponent_Factory(t) { return new (t || ListItemCollapseComponent)(); };
ListItemCollapseComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemCollapseComponent, selectors: [["c8y-list-item-collapse"], ["c8y-li-collapse"]], inputs: { collapseWay: "collapseWay" }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function ListItemCollapseComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ListItemCollapseComponent.propDecorators = {
    collapseWay: [{ type: Input }]
};

/**
 * The footer can be used with either content projection
 * or a simple string as an input.
 *
 * @example
 * ```html
 * <c8y-li>
 *   Content
 *   <c8y-li-footer>I am a footer</c8y-li-footer>
 * </c8y-li>
 * ```
 */
class ListItemFooterComponent {
}
ListItemFooterComponent.ɵfac = function ListItemFooterComponent_Factory(t) { return new (t || ListItemFooterComponent)(); };
ListItemFooterComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemFooterComponent, selectors: [["c8y-list-item-footer"], ["c8y-li-footer"]], inputs: { footer: "footer" }, ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[4, "ngIf"]], template: function ListItemFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ListItemFooterComponent_span_0_Template, 2, 1, "span", 0);
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.footer);
    } }, directives: [ɵngcc7.NgIf], encapsulation: 2 });
ListItemFooterComponent.propDecorators = {
    footer: [{ type: Input }]
};

/**
 * A list item is a representation of an item inside a list and
 * can be used to compose different styles in a list (mainly in a
 * <c8y-group-list>-component but also in others like the
 * <c8y-typeahead>-component):
 *  - a list with a footer
 *  - a list with one or multiple actions
 *  - an icon
 *  - a checkbox or radio input
 *
 * The item can be composed via content projection. The following
 * example shows a radio list with an icon, two actions
 * and a footer:
 * ```html
 * <c8y-list-group>
 *   <c8y-li
 *     *c8yFor="
 *       let device of devices;
 *       let i = index;
 *     "
 *   >
 *     <c8y-li-radio (onSelect)="updateSelected($event, device)"></c8y-li-radio>
 *     <c8y-li-icon [icon]="'rocket'"></c8y-li-icon>
 *     {{ i + 1 }}. {{ device.name || '-' }}
 *     <c8y-li-footer>
 *       Device id: <a [routerLink]="['/device', device.id]">{{ device.id }}</a>
 *     </c8y-li-footer>
 *     <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *       Delete
 *     </c8y-li-action>
 *     <c8y-li-action (click)="(false)" icon="rocket">
 *       Launch to space
 *     </c8y-li-action>
 *   </c8y-li>
 * </c8y-list-group>
 * ```
 */
class ListItemComponent {
    /**
     * @ignore
     */
    constructor(element) {
        this.element = element;
        /**
         * If set to true, the class "active" is added which
         * indicates that the current row is active.
         */
        this.active = false;
        /**
         * If set to true, the class "c8y-list__item--empty-actions" is added which adds
         * additional padding to compensate for the "actions" column in other list items.
         */
        this.emptyActions = false;
        /**
         * Indicates if the current list item is collapsed. You can trigger the collapsing from
         * any element event by toggling this value.
         *
         * @example
         * ```html
         * <c8y-li #li (click)="li.collapsed = !li.collapsed">
         *  Toggle
         *  <c8y-li-collapse>
         *    I can be toggled by clicking on the row.
         *  </c8y-li-collapse
         * </c8y-li>
         * ``
         */
        this.collapsed = true;
        /**
         * Indicates if the current list item is selectable.
         */
        this.selectable = true;
        /**
         * An event emitter which is triggered when the user collapses the content
         * via the chevron on the right.
         */
        this.collapsedChange = new EventEmitter();
        /**
         * @ignore
         */
        this.showFooter = false;
        /**
         * @ignore
         */
        this.showActions = false;
        /**
         * @ignore
         */
        this.showCollapse = false;
        /**
         * @ignore
         */
        this.dropdownUp = false;
        this.pulse$ = new Subject();
        this.destroy$ = new Subject();
        this.ACTION_ITEM_HEIGHT = 40;
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.pulse$
            .pipe(filter(apply => !!apply), tap(() => this.element.nativeElement.classList.remove('c8y-list--pulse')), delay(100), tap(() => this.element.nativeElement.classList.add('c8y-list--pulse')), takeUntil(this.destroy$))
            .subscribe();
    }
    /**
     * @ignore
     */
    ngAfterContentChecked() {
        this.actions = this.itemActions.toArray();
        this.showFooter = this.itemFooter != null;
        this.showActions = this.itemActions.length > 0;
        this.showCollapse = this.itemCollapse != null;
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * A helper function which helps to determine if the dropdown
     * should toggle up.
     */
    showDropdownUp() {
        const listItemRect = this.element.nativeElement.getBoundingClientRect();
        const dropdownTop = listItemRect.top;
        const dropdownHeightWithToggle = (1 + this.itemActions.length) * this.ACTION_ITEM_HEIGHT;
        const availableHeight = window.innerHeight;
        const dropdownDownFits = dropdownTop + dropdownHeightWithToggle <= availableHeight;
        this.dropdownUp = !dropdownDownFits;
    }
    /**
     * Toggles the collapse state and emits this state as
     * collapsedChange output as boolean.
     * @param $event Pass optional an event to stop propagation.
     */
    toggleCollapsed($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.collapsed = !this.collapsed;
        this.collapsedChange.emit(this.collapsed);
    }
    /**
     * Highlights the list-item. This method should be used to show the
     * user that something within this item was changed.
     */
    pulse() {
        this.pulse$.next(true);
    }
}
ListItemComponent.ɵfac = function ListItemComponent_Factory(t) { return new (t || ListItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ListItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemComponent, selectors: [["c8y-list-item"], ["c8y-li"]], contentQueries: function ListItemComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ListItemFooterComponent, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ListItemCollapseComponent, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ListItemActionComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemFooter = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemCollapse = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemActions = _t);
    } }, hostAttrs: [1, "c8y-list__item"], hostVars: 4, hostBindings: function ListItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active)("c8y-list__item--empty-actions", ctx.emptyActions);
    } }, inputs: { active: "active", emptyActions: "emptyActions", collapsed: "collapsed", selectable: "selectable" }, outputs: { collapsedChange: "collapsedChange" }, ngContentSelectors: _c34, decls: 12, vars: 7, consts: [[3, "ngClass"], [1, "c8y-list__item__block"], [1, "c8y-list__item__body", "text-truncate-wrap", 3, "click"], ["class", "c8y-list__item__footer", 4, "ngIf"], ["class", "c8y-list__item__actions", 4, "ngIf"], [3, "collapse", "isAnimated", 4, "ngIf"], [1, "c8y-list__item__footer"], [1, "c8y-list__item__actions"], ["class", "collapse-btn", "type", "button", 3, "title", "click", 4, "ngIf"], ["class", "dropdown", "dropdown", "", 3, "dropup", "onShown", 4, "ngIf"], [4, "ngIf"], ["type", "button", 1, "collapse-btn", 3, "title", "click"], [3, "c8yIcon"], ["dropdown", "", 1, "dropdown", 3, "dropup", "onShown"], ["dropdownToggle", "", "type", "button", "aria-haspopup", "true", 1, "dropdown-toggle", "c8y-dropdown", 3, "title"], ["class", "dropdown-menu dropdown-menu-right", 4, "dropdownMenu"], [1, "dropdown-menu", "dropdown-menu-right"], [4, "ngFor", "ngForOf"], [4, "ngTemplateOutlet"], [3, "collapse", "isAnimated"], [1, "c8y-list__item__collapse--container"]], template: function ListItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c32);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵprojection(3, 1);
        ɵngcc0.ɵɵprojection(4, 2);
        ɵngcc0.ɵɵprojection(5, 3);
        ɵngcc0.ɵɵelementStart(6, "div", 2);
        ɵngcc0.ɵɵlistener("click", function ListItemComponent_Template_div_click_6_listener() { return ctx.itemCollapse && ctx.itemCollapse.collapseWay === "row" && ctx.toggleCollapsed(); });
        ɵngcc0.ɵɵprojection(7, 4);
        ɵngcc0.ɵɵprojection(8, 5);
        ɵngcc0.ɵɵtemplate(9, ListItemComponent_div_9_Template, 2, 0, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, ListItemComponent_div_10_Template, 4, 3, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, ListItemComponent_div_11_Template, 3, 2, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c33, !ctx.collapsed, ctx.itemCollapse && ctx.itemCollapse.collapseWay === "row"));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showFooter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCollapse && (ctx.itemCollapse && ctx.itemCollapse.collapseWay === "button") || ctx.showActions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCollapse);
    } }, directives: [ɵngcc7.NgClass, ɵngcc7.NgIf, IconDirective, ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, ɵngcc9.BsDropdownMenuDirective, ɵngcc7.NgForOf, ɵngcc7.NgTemplateOutlet, ɵngcc13.CollapseDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
ListItemComponent.ctorParameters = () => [
    { type: ElementRef }
];
ListItemComponent.propDecorators = {
    active: [{ type: Input }, { type: HostBinding, args: ['class.active',] }],
    emptyActions: [{ type: Input }, { type: HostBinding, args: ['class.c8y-list__item--empty-actions',] }],
    collapsed: [{ type: Input }],
    selectable: [{ type: Input }],
    collapsedChange: [{ type: Output }],
    itemFooter: [{ type: ContentChild, args: [ListItemFooterComponent, { static: false },] }],
    itemActions: [{ type: ContentChildren, args: [ListItemActionComponent,] }],
    itemCollapse: [{ type: ContentChild, args: [ListItemCollapseComponent, { static: false },] }]
};

class TypeaheadComponent {
    constructor() {
        this.required = false;
        this.disabled = false;
        this.allowFreeEntries = true;
        this.displayProperty = 'name';
        this.icon = 'caret-down';
        this.name = this.displayProperty;
        this.autoClose = true;
        this.hideNew = false;
        this.container = '';
        this.selected = {
            id: null
        };
        this.onSearch = new EventEmitter();
        this.onIconClick = new EventEmitter();
        this.KEYCODE_UP = 38;
        this.KEYCODE_DOWN = 40;
        this.KEYCODE_TAB = 9;
        this.KEYCODE_ENTER = 13;
        this.KEYCODE_ESC = 27;
    }
    writeValue(value) {
        this.selected = value;
        if (value && this.searchControl) {
            this.searchControl.nativeElement.value = get(value, this.displayProperty, '');
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    doBlur() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    getDisplayProperty() {
        return get(this.selected, this.displayProperty, '');
    }
    onShown() {
        this.searchControl.nativeElement.focus();
    }
    /**
     * Resets the input field - clear value and clean field to be pristine and untouched.
     */
    reset() {
        this.searchControlModel.reset();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    ngAfterViewInit() {
        this.subscription = fromEvent(this.searchControl.nativeElement, 'keydown')
            .pipe(map((e) => this.handleKeyboard(e)), filter((e) => e), debounceTime(200), map((e) => e.target.value), distinctUntilChanged())
            .subscribe(value => {
            this.selected = {
                id: null
            };
            set(this.selected, this.displayProperty, value || '');
            if (typeof this.onChange === 'function') {
                this.onChange(this.selected);
            }
            this.onSearch.emit(value);
        });
    }
    handleKeyboard(event) {
        const keyCode = event.keyCode;
        if ([this.KEYCODE_ENTER, this.KEYCODE_DOWN, this.KEYCODE_TAB, this.KEYCODE_UP].includes(keyCode)) {
            const items = this.list.toArray();
            const index = findIndex(items, item => item.active);
            if (keyCode === this.KEYCODE_ENTER || keyCode === this.KEYCODE_TAB) {
                if (index > -1) {
                    event.preventDefault();
                    items[index].element.nativeElement.click();
                }
                this.dropdown.hide();
                this.searchControl.nativeElement.blur();
            }
            else {
                this.dropdown.show();
                const upOrDown = keyCode === this.KEYCODE_DOWN ? 1 : -1;
                if (index > -1) {
                    items[index].active = false;
                }
                this.selectNextItemOnKeyboardMove(items, index, upOrDown);
            }
            return;
        }
        else if (keyCode === this.KEYCODE_ESC && this.autoClose) {
            event.stopPropagation();
            this.dropdown.hide();
            this.searchControl.nativeElement.blur();
            return;
        }
        else {
            this.dropdown.show();
        }
        return event;
    }
    validate(ctrl) {
        if (this.required && !get(ctrl.value, this.displayProperty, '')) {
            return { required: true };
        }
        if (!this.allowFreeEntries && this.selected && this.selected.id === null && ctrl.value[this.displayProperty]) {
            return { notExisting: true };
        }
        return null;
    }
    selectNextItemOnKeyboardMove(items, index, upOrDown) {
        if (items[index + upOrDown]) {
            if (!items[index + upOrDown].selectable) {
                this.selectNextItemOnKeyboardMove(items, index + upOrDown, upOrDown);
                return;
            }
            items[index + upOrDown].active = true;
        }
    }
}
TypeaheadComponent.ɵfac = function TypeaheadComponent_Factory(t) { return new (t || TypeaheadComponent)(); };
TypeaheadComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TypeaheadComponent, selectors: [["c8y-typeahead"]], contentQueries: function TypeaheadComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ListItemComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.list = _t);
    } }, viewQuery: function TypeaheadComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c35, 5);
        ɵngcc0.ɵɵviewQuery(_c36, 5);
        ɵngcc0.ɵɵviewQuery(_c37, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchControl = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchControlModel = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, inputs: { required: "required", disabled: "disabled", allowFreeEntries: "allowFreeEntries", displayProperty: "displayProperty", icon: "icon", name: "name", autoClose: "autoClose", hideNew: "hideNew", container: "container", selected: "selected", maxlength: "maxlength", placeholder: "placeholder" }, outputs: { onSearch: "onSearch", onIconClick: "onIconClick" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => TypeaheadComponent)
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => TypeaheadComponent),
                multi: true
            }
        ])], ngContentSelectors: _c40, decls: 14, vars: 24, consts: [["dropdown", "", "placement", "bottom left", 1, "c8y-search-dropdown", "dropdown", "fit-w", 3, "container", "autoClose", "isDisabled", "onShown"], ["dropdown", "bs-dropdown"], ["dropdownToggle", "", 1, "input-group", "input-group-dropdown"], ["type", "text", 1, "form-control", "text-truncate", 3, "ngClass", "required", "ngModel", "placeholder", "name", "maxlength", "disabled", "title", "blur"], ["searchControl", "", "searchControlModel", "ngModel"], ["class", "label label-info p-absolute", "style", "top: 10px; right: 40px; z-index: 10", "translate", "", 4, "ngIf"], [1, "input-group-btn"], ["type", "button", 1, "btn", "btn-clean", 3, "title", "disabled", "click"], [1, "text-primary", 3, "c8yIcon"], ["class", "dropdown-menu dropdown-menu--modal", 3, "width", 4, "dropdownMenu"], ["translate", "", 1, "label", "label-info", "p-absolute", 2, "top", "10px", "right", "40px", "z-index", "10"], [1, "dropdown-menu", "dropdown-menu--modal"]], template: function TypeaheadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c38);
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("onShown", function TypeaheadComponent_Template_div_onShown_0_listener() { return ctx.onShown(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "input", 3, 4);
        ɵngcc0.ɵɵlistener("blur", function TypeaheadComponent_Template_input_blur_3_listener() { return ctx.doBlur(); });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, TypeaheadComponent_span_8_Template, 2, 0, "span", 5);
        ɵngcc0.ɵɵelementStart(9, "span", 6);
        ɵngcc0.ɵɵelementStart(10, "button", 7);
        ɵngcc0.ɵɵlistener("click", function TypeaheadComponent_Template_button_click_10_listener($event) { return ctx.onIconClick.emit({ icon: ctx.icon, $event: $event }); });
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelement(12, "i", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, TypeaheadComponent_c8y_list_group_13_Template, 2, 2, "c8y-list-group", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_4_0;
        let tmp_11_0;
        ɵngcc0.ɵɵproperty("container", ctx.container)("autoClose", true)("isDisabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 17, ctx.placeholder));
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(21, _c39, !ctx.hideNew && (ctx.selected ? ctx.selected.id === null && ((tmp_4_0 = ctx.getDisplayProperty()) == null ? null : tmp_4_0.length) > 0 && ctx.allowFreeEntries : false), ctx.hideNew || ((tmp_4_0 = ctx.getDisplayProperty()) == null ? null : tmp_4_0.length) === 0))("required", ctx.required)("ngModel", ctx.selected ? ctx.getDisplayProperty() : "")("placeholder", ɵngcc0.ɵɵpipeBind1(6, 15, ctx.placeholder))("name", ctx.name)("maxlength", ctx.maxlength)("disabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hideNew && (ctx.selected ? ctx.selected.id === null && ((tmp_11_0 = ctx.getDisplayProperty()) == null ? null : tmp_11_0.length) > 0 && ctx.allowFreeEntries : false));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 19, "Search"));
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.icon);
    } }, directives: function () { return [ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc7.NgClass, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc14.MaxLengthValidator, ɵngcc7.NgIf, IconDirective, ɵngcc9.BsDropdownMenuDirective, C8yTranslateDirective, ListGroupComponent]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
TypeaheadComponent.propDecorators = {
    searchControl: [{ type: ViewChild, args: ['searchControl', { static: false },] }],
    searchControlModel: [{ type: ViewChild, args: ['searchControlModel', { static: false },] }],
    dropdown: [{ type: ViewChild, args: ['dropdown', { static: false },] }],
    list: [{ type: ContentChildren, args: [ListItemComponent,] }],
    required: [{ type: Input }],
    maxlength: [{ type: Input }],
    disabled: [{ type: Input }],
    allowFreeEntries: [{ type: Input }],
    placeholder: [{ type: Input }],
    displayProperty: [{ type: Input }],
    icon: [{ type: Input }],
    name: [{ type: Input }],
    autoClose: [{ type: Input }],
    hideNew: [{ type: Input }],
    container: [{ type: Input }],
    selected: [{ type: Input }],
    onSearch: [{ type: Output }],
    onIconClick: [{ type: Output }]
};

class InventorySearchService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.FRAGMENTS_FOR_NO_DEVICE = [
            'c8y_Dashboard',
            'c8y_Report',
            'c8y_Kpi',
            'c8y_ExportConfiguration',
            'c8y_IsBinary',
            'c8y_NoDevice',
            'c8y_IsDeviceGroup',
            'c8y_Group',
            'com_cumulocity_model_smartrest_SmartRestTemplate',
            'com_cumulocity_model_devicesimulator_SensorTemplate',
            '_attachments',
            'c8y_IsDeviceType',
            'c8y_objectmapping_ObjectMapping',
            'c8y_IsAssetType'
        ];
        this.TYPES_FOR_NO_DEVICE = [
            'c8y_ConfigurationDump',
            'c8y_Firmware',
            'c8y_SmartRule',
            'c8y_Software',
            'impact_object_mapping',
            'c8y_UserPreference',
            'c8y_TenantPolicy',
            'c8y_PrivateSmartRule',
            'c8y_SmartRest2Template',
            'c8y_JsonSchema',
            'c8y_DeviceShellTemplate',
            'c8y_DemoStatus',
            'c8y_DataBroker',
            'c8y_Application_',
            'brandingVariables',
            'c8y_DeviceSimulator',
            'c8y_CertificateMetadata',
            'lwm2m_post_registration',
            'c8y_microservice_manifest_'
        ];
        this.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
        this.DEFAULT_PAGE_SIZE = 50;
    }
    /**
     * Returns the full-text search results.
     *
     * @param term The search term.
     * @param pagination The currently used pagination.
     */
    search(term, pagination = { currentPage: 1, pageSize: this.DEFAULT_PAGE_SIZE }) {
        return this.inventoryService.list({
            text: term,
            withTotalPages: true,
            pageSize: pagination.pageSize,
            withChildren: false,
            currentPage: pagination.currentPage || 1
        });
    }
    /**
     * Will return only valid assets (groups and devices) and filter out
     * none useful inventories (e.g. c8y_JsonSchema).
     * @param data All managed objects that should be filtered.
     */
    filterOnlyAssets(data) {
        return data.filter(mo => mo.c8y_IsDeviceGroup || this.isAnyDevice(mo));
    }
    isAnyDevice(mo) {
        const isDevice = this.isRootDevice(mo) || !this.hasFragmentOrTypeFromBlacklist(mo);
        return isDevice;
    }
    hasFragmentOrTypeFromBlacklist(mo) {
        return this.hasTypeFromBlacklist(mo) || this.hasFragmentFromBlacklist(mo);
    }
    hasTypeFromBlacklist(mo) {
        const moType = get(mo, 'type', '');
        return some(this.TYPES_FOR_NO_DEVICE, type => moType.includes(type));
    }
    hasFragmentFromBlacklist(mo) {
        return find$1(this.FRAGMENTS_FOR_NO_DEVICE, f => !isUndefined(mo[f]));
    }
    isRootDevice(mo) {
        return !!mo[this.DEVICE_FRAGMENT_TYPE];
    }
}
InventorySearchService.ɵfac = function InventorySearchService_Factory(t) { return new (t || InventorySearchService)(ɵngcc0.ɵɵinject(ɵngcc3.InventoryService)); };
InventorySearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function InventorySearchService_Factory() { return new InventorySearchService(i0.ɵɵinject(i1$3.InventoryService)); }, token: InventorySearchService, providedIn: "root" });
InventorySearchService.ctorParameters = () => [
    { type: InventoryService }
];

/**
 * AssetTypesService is being used to manage a cache of all existing asset types.
 * This service is injected in the AssetOverviewNavigationFactory class, which will trigger
 * the initialization of the cache as the contstructor is called.
 */
class AssetTypesService {
    constructor(inventory, apiService, appStateService) {
        this.inventory = inventory;
        this.apiService = apiService;
        this.appStateService = appStateService;
        this.ASSET_TYPE_GROUP_QUERY = {
            __filter: {
                __and: [{ __has: 'c8y_IsAssetType' }, { name: 'group' }]
            }
        };
        this.assetTypesCache = {};
        this.DEFAULT_GROUP_ICON = 'c8y-group';
        this.DEFAULT_GROUP_ICON_OPEN = 'c8y-group-open';
        this.appStateService.currentUser
            .pipe(map(user => user === null || user === void 0 ? void 0 : user.id), distinctUntilChanged(), switchMap(userId => {
            if (userId) {
                this.initAssetTypesCache();
                return this.subscribeForAssetTypeUpdates();
            }
            else {
                this.assetTypesCache = {};
                return NEVER;
            }
        }))
            .subscribe();
    }
    /**
     * Queries available asset types and adds every asset type to the local cache.
     * @returns void.
     */
    initAssetTypesCache() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.list({
                fragmentType: 'c8y_IsAssetType',
                withChildren: false,
                pageSize: 2000
            });
            data.forEach(assetType => this.addAssetType(assetType));
            return;
        });
    }
    /**
     * Returns an asset type from the cache based on the unique name property.
     * @param name Name of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeByName(name) {
        if (!this.assetTypesCache.hasOwnProperty(name)) {
            return undefined;
        }
        return this.assetTypesCache[name];
    }
    /**
     * Returns an asset type from the cache based on the id.
     * @param assetTypeId Id of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeById(assetTypeId) {
        if (!assetTypeId) {
            return;
        }
        return Object.values(this.assetTypesCache).find((assetType) => assetType.id === assetTypeId);
    }
    /**
     * Extracts an icon from an asset type.
     * @param type Type of the asset type.
     * @param open Determines whether the method should return an alternative icon showing the open state.
     * Defaults to false.
     * @returns Returns an icon for a given asset type.
     */
    getIcon(type, open = false) {
        var _a, _b;
        const assetType = this.getAssetTypeByName(type);
        const icon = ((_b = (_a = assetType === null || assetType === void 0 ? void 0 : assetType.c8y_IsAssetType) === null || _a === void 0 ? void 0 : _a.icon) === null || _b === void 0 ? void 0 : _b.name) || this.getDefaultGroupIcon(open);
        return icon;
    }
    getDefaultGroupIcon(open = false) {
        return open ? this.DEFAULT_GROUP_ICON_OPEN : this.DEFAULT_GROUP_ICON;
    }
    /**
     * Checks if the default asset type 'group' already exists and if it doesn't it will be created.
     * @returns void.
     */
    createAssetTypeGroupIfNotExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const managedObjects = (yield this.inventory.listQuery(this.ASSET_TYPE_GROUP_QUERY)).data;
            if (managedObjects.length > 0) {
                return;
            }
            // if default group asset type doesn't exit create it
            yield this.createDefaultAssetTypeGroup();
        });
    }
    /**
     * create the default asset type group in the Inventory.
     */
    createDefaultAssetTypeGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.inventory.create({
                label: 'Group',
                name: 'group',
                description: 'Default group asset type',
                c8y_IsAssetType: {
                    icon: 'folder',
                    propertyIds: [],
                    allowedAssetTypeIds: [],
                    isNoneChildAssetsAllowed: 'false'
                }
            });
        });
    }
    /**
     * Add an asset type to the local cache.
     * @param assetType Asset type which should be added to the cache.
     * @returns void.
     */
    addAssetType(assetType) {
        if (!assetType) {
            console.error('Asset type must not be null');
            return;
        }
        this.assetTypesCache[assetType.name] = assetType;
    }
    /**
     * Delete an asset type from the local cache based on the given asset type id.
     * @param assetTypeId Id of the asset type which should be deleted.
     * @returns void.
     */
    deleteAssetType(assetTypeId) {
        if (!assetTypeId) {
            console.error('Asset type ID must not be null');
            return;
        }
        const assetType = this.getAssetTypeById(assetTypeId);
        if (assetType) {
            delete this.assetTypesCache[assetType.name];
        }
    }
    /**
     * Update an asset type in the local cache.
     * @param assetType Asset type which should be updated in the cache.
     * @returns void.
     */
    updateAssetType(assetType) {
        if (!assetType) {
            console.error('Asset type must not be null');
            return;
        }
        const cachedAssetType = this.getAssetTypeById(assetType.id);
        if (cachedAssetType) {
            this.assetTypesCache[cachedAssetType.name] = Object.assign(cachedAssetType, assetType);
        }
    }
    /**
     * Subscribes to api PUT, POST and DELETE requests interceptor to update local asset types cache.
     * If a new asset type has been created it will be added to the local cache. If an asset
     * type has been deleted it will be removed from the local cache.
     */
    subscribeForAssetTypeUpdates() {
        return this.apiService
            .hookResponse(c => this.checkIfInventoryMoApiCall(c))
            .pipe(tap((call) => {
            var _a;
            if (!call && !call.method) {
                return;
            }
            const bodyToParse = (_a = call.options) === null || _a === void 0 ? void 0 : _a.body;
            if (bodyToParse) {
                try {
                    const mo = JSON.parse(bodyToParse);
                    if (call.method === 'DELETE') {
                        this.deleteAssetType(mo.id);
                        return;
                    }
                    if (!mo.hasOwnProperty('c8y_IsAssetType')) {
                        return;
                    }
                    if (call.method === 'PUT') {
                        this.updateAssetType(mo);
                        return;
                    }
                    this.addAssetType(mo);
                }
                catch (error) {
                    // do nothing
                }
            }
        }));
    }
    /**
     * Managed objects inventory api filter, allowing only PUT, POST and DELETE methods.
     * @param call Api call to filter.
     * @returns Returns true if api call meets the required criteria.
     */
    checkIfInventoryMoApiCall(call) {
        if (!call) {
            return false;
        }
        const hasRequiredMethod = call.method === 'POST' || call.method === 'DELETE' || call.method === 'PUT';
        const hasRequiredUrl = call.url.includes('managedObjects');
        return hasRequiredMethod && hasRequiredUrl;
    }
}
AssetTypesService.ɵfac = function AssetTypesService_Factory(t) { return new (t || AssetTypesService)(ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.ApiService), ɵngcc0.ɵɵinject(AppStateService)); };
AssetTypesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetTypesService_Factory() { return new AssetTypesService(i0.ɵɵinject(i1$3.InventoryService), i0.ɵɵinject(i4$1.ApiService), i0.ɵɵinject(AppStateService)); }, token: AssetTypesService, providedIn: "root" });
AssetTypesService.ctorParameters = () => [
    { type: InventoryService },
    { type: ApiService },
    { type: AppStateService }
];

class SearchInputComponent {
    constructor(router, inventory, searchService, assetTypesService) {
        this.router = router;
        this.inventory = inventory;
        this.searchService = searchService;
        this.assetTypesService = assetTypesService;
        this.mode = 'search';
        this.container = '';
        this.filter = new EventEmitter();
        this.search = new EventEmitter();
        this.reset = new EventEmitter();
        this.onClick = new EventEmitter();
        this.term = '';
        this.filterPipe = pipe(map((data) => {
            return this.searchService.filterOnlyAssets(data);
        }));
        this.recentSearchResults = [];
        this.isLoading = false;
        this.noMatch = false;
        this.RECENT_SEARCH_STORAGE_KEY = 'recent_search_view';
        this.MAX_RECENT_SEARCH_RESULTS = 5;
        this.DEFAULT_FILTER = {
            withTotalPages: true,
            pageSize: 5,
            withChildren: false
        };
        this.KEYCODE_ENTER = 'Enter';
        this.KEYCODE_ESC = 'Escape';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const recentSearchIds = JSON.parse(localStorage.getItem(this.RECENT_SEARCH_STORAGE_KEY));
            if (recentSearchIds && recentSearchIds.length > 0) {
                const { data } = yield this.inventory.list({ ids: recentSearchIds.join(',') });
                this.recentSearchResults = data;
                this.recentlyRegisteredResults$ = defer(() => this.inventory.list(Object.assign({ q: '$orderby=creationTime desc' }, this.DEFAULT_FILTER)));
            }
            if (this.mode === 'select') {
                requestAnimationFrame(() => {
                    this.subscribeOnSearch();
                });
            }
        });
    }
    onKeydownHandler(event) {
        if (event.key === this.KEYCODE_ESC) {
            this.hideDropdown();
        }
    }
    getIcon(mo) {
        return this.assetTypesService.getIcon(mo.type) || 'c8y-group-open';
    }
    onOpenChange(isOpen) {
        if (isOpen) {
            // needs to request an animation frame as
            // otherwise the typeahead is undefined
            requestAnimationFrame(() => {
                this.subscribeOnSearch();
                this.typeahead.dropdown.show();
                this.typeahead.searchControl.nativeElement.focus();
            });
        }
    }
    open(event, mo, term) {
        event.stopPropagation();
        const isAlreadyRecent = this.recentSearchResults.find(({ id }) => id === mo.id);
        if (!isAlreadyRecent) {
            this.recentSearchResults.unshift(mo);
            this.recentSearchResults = this.recentSearchResults.slice(0, this.MAX_RECENT_SEARCH_RESULTS);
        }
        const recentSearchIds = this.recentSearchResults.map(({ id }) => id);
        localStorage.setItem(this.RECENT_SEARCH_STORAGE_KEY, JSON.stringify(recentSearchIds));
        if (term) {
            this.selected = mo;
            this.term = term;
        }
        this.onClick.emit(mo);
        this.hideDropdown();
    }
    onReset(status) {
        status.$event.stopPropagation();
        this.reset.emit(this.term);
        this.typeahead.onSearch.emit('');
        this.selected = undefined;
        this.typeahead.searchControl.nativeElement.focus();
    }
    keyDown(event) {
        if (event.key === this.KEYCODE_ENTER) {
            // enter hit can be faster then typeahead debounce,
            // therefore we take the term from the DOM element
            // itself:
            const searchTerm = event.target.value;
            this.onSearch(searchTerm);
        }
    }
    onSearch(search) {
        this.search.emit(search);
        this.hideDropdown();
    }
    onFilter(search) {
        this.filter.emit(search);
        this.hideDropdown();
    }
    onOpenAssetTable() {
        this.router.navigateByUrl('/assetsearch');
        this.hideDropdown();
    }
    hideDropdown() {
        if (this.dropdown) {
            this.dropdown.hide();
            return;
        }
        if (this.typeahead && this.typeahead.dropdown) {
            this.typeahead.dropdown.hide();
            return;
        }
    }
    subscribeOnSearch() {
        if (!this.results$) {
            this.results$ = this.typeahead.onSearch.pipe(tap(term => this.onTypingStarted(term)), switchMap(term => this.mergeRequest(term)));
        }
    }
    navigate(commands, extras) {
        this.router
            .navigateByUrl('/', { skipLocationChange: true })
            .then(() => this.router.navigate(commands, extras));
    }
    mergeRequest(term) {
        return merge(of({ data: [] }), this.queryInventoryService(term).pipe(tap(({ data, paging }) => this.onLoadingDone(data, paging))));
    }
    queryInventoryService(term) {
        if (term) {
            return defer(() => this.searchService.search(term));
        }
        return empty();
    }
    onLoadingDone(data, paging) {
        this.isLoading = false;
        this.noMatch =
            paging && paging.nextPage === null && this.searchService.filterOnlyAssets(data).length === 0;
    }
    onTypingStarted(term) {
        this.noMatch = false;
        this.term = term;
        this.isLoading = term.length > 0;
    }
}
SearchInputComponent.ɵfac = function SearchInputComponent_Factory(t) { return new (t || SearchInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.InventoryService), ɵngcc0.ɵɵdirectiveInject(InventorySearchService), ɵngcc0.ɵɵdirectiveInject(AssetTypesService)); };
SearchInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchInputComponent, selectors: [["c8y-search-input"]], viewQuery: function SearchInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(TypeaheadComponent, 5);
        ɵngcc0.ɵɵviewQuery(_c37, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.typeahead = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, hostBindings: function SearchInputComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function SearchInputComponent_keydown_HostBindingHandler($event) { return ctx.onKeydownHandler($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { mode: "mode", container: "container" }, outputs: { filter: "filter", search: "search", reset: "reset", onClick: "onClick" }, decls: 4, vars: 2, consts: [["class", "dropdown", "dropdown", "", 3, "insideClick", "isOpenChange", 4, "ngIf"], ["class", "search-header-inline", 4, "ngIf"], ["form", ""], ["dropdown", "", 1, "dropdown", 3, "insideClick", "isOpenChange"], ["dropdown", "bs-dropdown"], ["dropdownToggle", "", "type", "button", "aria-controls", "searchDropdown", 1, "main-header-button", "dropdown-toggle", "c8y-dropdown", 3, "title"], ["c8yIcon", "search", 1, "icon-2x"], ["id", "searchDropdown", "class", "search-header-menu dropdown-menu dropdown-menu-center", 4, "dropdownMenu"], ["id", "searchDropdown", 1, "search-header-menu", "dropdown-menu", "dropdown-menu-center"], [4, "ngTemplateOutlet"], [1, "search-header-inline"], ["novalidate", "", 3, "ngClass"], ["searchForm", "ngForm"], ["name", "selected", 3, "ngModel", "placeholder", "icon", "allowFreeEntries", "container", "ngModelChange", "keydown", "onIconClick"], ["class", "p-l-16 p-r-16", 4, "ngIf"], ["class", "p-l-24 p-r-24", 3, "selectable", 4, "ngIf"], ["class", "c8y-list__item--link m-l-16 m-r-16", 3, "click", 4, "ngFor", "ngForOf"], ["class", "c8y-list__item--link m-l-16 m-r-16", 3, "click", 4, "c8yFor", "c8yForOf", "c8yForLoadMore", "c8yForPipe"], ["class", "c8y-list__item--link  m-l-16 m-r-16", 3, "title", "click", 4, "c8yFor", "c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForLoadingTemplate", "c8yForLoadNextLabel"], ["notFoundTemplate", ""], ["class", "p-t-32 p-b-0", "style", "position: relative;", 4, "ngIf"], ["loading", ""], ["class", "m-t-24 bg-gray-lighter p-t-16 p-b-16 p-l-24 p-r-24", 3, "selectable", 4, "ngIf"], [1, "p-l-16", "p-r-16"], ["class", "flex-row", 4, "ngIf"], [1, "flex-row"], [1, "m-r-4", "text-muted"], ["translate", ""], [1, "btn-group", "btn-group-sm"], [1, "btn", "btn-default", 3, "title", "click"], [1, "p-l-24", "p-r-24", 3, "selectable"], [1, "legend", "form-block"], [1, "c8y-list__item--link", "m-l-16", "m-r-16", 3, "click"], [3, "mo", 4, "ngIf"], ["class", "c8y-icon-duocolor", 3, "c8yIcon", 4, "ngIf"], [3, "mo"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], [1, "c8y-list__item--link", "m-l-16", "m-r-16", 3, "title", "click"], ["class", "p-16 c8y-empty-state", 3, "selectable", 4, "ngIf"], [1, "p-16", "c8y-empty-state", 3, "selectable"], [3, "icon"], ["translate", "", 4, "ngIf"], [1, "p-t-32", "p-b-0", 2, "position", "relative"], [1, "spinner", 2, "right", "0"], [1, "rect1"], [1, "rect2"], [1, "rect3"], [1, "rect4"], [1, "rect5"], [1, "text-center", "p-t-32", "p-b-0", 2, "position", "relative"], [1, "m-t-24", "bg-gray-lighter", "p-t-16", "p-b-16", "p-l-24", "p-r-24", 3, "selectable"], ["c8yIcon", "info-circle", 1, "text-info", "m-r-4"], ["translate", "", 1, "m-r-8"], ["type", "button", "translate", "", 1, "m-l-auto", "btn", "btn-default", "btn-sm", 3, "mousedown"]], template: function SearchInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SearchInputComponent_div_0_Template, 6, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SearchInputComponent_div_1_Template, 2, 1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, SearchInputComponent_ng_template_2_Template, 18, 32, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "search");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "select");
    } }, directives: function () { return [ɵngcc7.NgIf, ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, IconDirective, ɵngcc9.BsDropdownMenuDirective, ɵngcc7.NgTemplateOutlet, ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, ɵngcc7.NgClass, TypeaheadComponent, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc7.NgForOf, ForOfDirective, ListItemComponent, C8yTranslateDirective, ListItemIconComponent, DeviceStatusComponent]; }, pipes: function () { return [C8yTranslatePipe, ɵngcc7.AsyncPipe]; }, encapsulation: 2 });
SearchInputComponent.ctorParameters = () => [
    { type: Router },
    { type: InventoryService },
    { type: InventorySearchService },
    { type: AssetTypesService }
];
SearchInputComponent.propDecorators = {
    mode: [{ type: Input }],
    container: [{ type: Input }],
    filter: [{ type: Output }],
    search: [{ type: Output }],
    reset: [{ type: Output }],
    onClick: [{ type: Output }],
    typeahead: [{ type: ViewChild, args: [TypeaheadComponent, { static: false },] }],
    dropdown: [{ type: ViewChild, args: ['dropdown', { static: false },] }],
    onKeydownHandler: [{ type: HostListener, args: ['document:keydown', ['$event'],] }]
};
__decorate([
    memoize(property('id'))
], SearchInputComponent.prototype, "getIcon", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionBarService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionBarItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-action-bar-item',
                template: "<ng-template #template>\n  <li class=\"{{itemClass}}\">\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
            }]
    }], function () { return [{ type: ActionBarService }]; }, { placement: [{
            type: Input
        }], priority: [{
            type: Input
        }], itemClass: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptionsService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_OPTIONS]
            }] }, { type: ɵngcc2.SystemOptionsService }, { type: ɵngcc2.TenantOptionsService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppStateService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.ApplicationService }, { type: ɵngcc2.ApiService }, { type: OptionsService }, { type: ɵngcc3.FetchClient }, { type: ɵngcc3.TenantLoginOptionsService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PatternMessagesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [HOOK_PATTERN_MESSAGES]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MissingTranslationCustomHandler, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc4.TranslateParser }, { type: PatternMessagesService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CachedLocaleDictionaryService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateCustomLoader, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc5.HttpClient }, { type: OptionsService }, { type: CachedLocaleDictionaryService }, { type: String, decorators: [{
                type: Inject,
                args: [LOCALE_PATH]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [LANGUAGES]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateParserCustom, [{
        type: Injectable
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yTranslateDirective, [{
        type: Directive,
        args: [{
                selector: '[translate],[ngx-translate]'
            }]
    }], function () { return [{ type: ɵngcc4.TranslateService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yTranslatePipe, [{
        type: Injectable
    }, {
        type: Pipe,
        args: [{
                name: 'translate',
                pure: false // required to update the value when the promise is resolved
            }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yTranslateModule, [{
        type: NgModule,
        args: [{
                declarations: [C8yTranslatePipe, C8yTranslateDirective],
                exports: [C8yTranslatePipe, C8yTranslateDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(C8yTranslateModule, { declarations: [C8yTranslatePipe, C8yTranslateDirective], exports: [C8yTranslatePipe, C8yTranslateDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(I18nModule$1, [{
        type: NgModule,
        args: [{
                exports: [C8yTranslateModule],
                imports: [HttpClientModule, BsDatepickerModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(I18nModule$1, { imports: function () { return [HttpClientModule, BsDatepickerModule]; }, exports: function () { return [C8yTranslateModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.TranslateService }, { type: AppStateService }, { type: OptionsService }, { type: ɵngcc6.BsLocaleService, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BytesPipe, [{
        type: Pipe,
        args: [{ name: 'bytes' }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePipe, [{
        type: Pipe,
        args: [{ name: 'c8yDate' }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }, { type: ɵngcc4.TranslateService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownDirectionDirective, [{
        type: Directive,
        args: [{ selector: '[dropdown][c8yBsDropdownDirection],[dropdown][c8yDropdownDirection]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmptyStateComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-ui-empty-state',
                template: "<div class=\"c8y-empty-state\" [ngClass]=\"{ 'c8y-empty-state--horizontal': horizontal }\">\n  <i [c8yIcon]=\"icon\" class=\"c8y-icon-duocolor\"></i>\n\n  <ng-container *ngIf=\"!horizontal\">\n    <div>\n      <h3 class=\"text-medium p-b-4\">{{ title | translate }}</h3>\n      <p *ngIf=\"subtitle\">{{ subtitle | translate }}</p>\n      <div class=\"p-t-16\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"horizontal\">\n    <div>\n      <p>\n        <strong>{{ title | translate }}</strong>\n      </p>\n      <p *ngIf=\"subtitle\" class=\"small\">{{ subtitle | translate }}</p>\n      <div class=\"small m-t-8\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template #content>\n    <ng-content></ng-content>\n  </ng-template>\n</div>\n"
            }]
    }], null, { icon: [{
            type: Input
        }], title: [{
            type: Input
        }], subtitle: [{
            type: Input
        }], horizontal: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilesService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc3.SystemOptionsService }, { type: ɵngcc3.InventoryBinaryService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadMoreComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-load-more',
                template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  (click)=\"loadMore($event)\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  *ngIf=\"hasMore && !(loadingTemplate && isLoading)\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  title=\"{{ 'Load more' | translate }}\"\n>\n  <ng-container *ngIf=\"!isLoading\">\n    <span *ngIf=\"loadNextLabel; else loadPage\" [innerHTML]=\"loadNextLabel | translate\"></span>\n    <ng-template #loadPage>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Load page {{ pageNo }}</span\n      >\n    </ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"isLoading\">\n    <span *ngIf=\"loadingLabel; else loading\" [innerHTML]=\"loadingLabel | translate\"></span>\n    <ng-template #loading>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Page {{ pageNo }} is loading\u2026\n      </span>\n    </ng-template>\n  </ng-container>\n</button>\n\n<ng-container *ngIf=\"hasNoMoreData && !hideNoMoreDataHint && !isLoading\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center last-record\" title=\"{{ 'Last record' | translate }}\">\n    <i [c8yIcon]=\"'circle'\"></i>\n  </div>\n</ng-template>\n\n<ng-container *ngIf=\"loadingTemplate && isLoading\">\n  <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { useIntersection: [{
            type: Input
        }], hidden: [{
            type: Input
        }], class: [{
            type: Input
        }], maxIterations: [{
            type: Input
        }], hideNoMoreDataHint: [{
            type: Input
        }], onLoad: [{
            type: Output
        }], hostClass: [{
            type: HostBinding,
            args: ['class']
        }], paging: [{
            type: Input
        }], container: [{
            type: Input
        }], noMoreDataHint: [{
            type: Input
        }], loadingTemplate: [{
            type: Input
        }], loadNextLabel: [{
            type: Input
        }], loadingLabel: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VirtualScrollerWrapperComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-virtual-scroller-wrapper',
                template: "<ng-container *ngIf=\"items$ |async as items\" [ngSwitch]=\"strategy\">\n    <ng-container *ngSwitchCase=\"'window'\">\n      <cdk-virtual-scroll-viewport windowVirtualScrollStrategy [itemSizePx]=\"itemHeight\">\n        <div *cdkVirtualFor=\"let item of items; index as i; trackBy: trackByFn\">\n          <ng-container *ngTemplateOutlet=\"template; context: {$implicit: item, index: i}\"></ng-container>\n        </div>\n      </cdk-virtual-scroll-viewport>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'fixed'\">\n      <cdk-virtual-scroll-viewport [itemSize]=\"itemHeight\" [style.height]=\"containerHeight + 'px'\">\n        <div *cdkVirtualFor=\"let item of items; index as i; trackBy: trackByFn\" >\n          <ng-container *ngTemplateOutlet=\"template; context: {$implicit: item, index: i}\"></ng-container>\n        </div>\n      </cdk-virtual-scroll-viewport>\n    </ng-container>\n</ng-container>\n"
            }]
    }], function () { return []; }, { filterPipe: [{
            type: Input
        }], trackByFn: [{
            type: Input
        }], items: [{
            type: Input
        }], itemHeight: [{
            type: Input
        }], containerHeight: [{
            type: Input
        }], template: [{
            type: Input
        }], strategy: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ForOfDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yFor]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ChangeDetectorRef }]; }, { c8yForEnableVirtualScroll: [{
            type: Input
        }], c8yForVirtualScrollStrategy: [{
            type: Input
        }], c8yForCount: [{
            type: Output
        }], c8yForOf: [{
            type: Input
        }], c8yForLoadMore: [{
            type: Input
        }], c8yForPipe: [{
            type: Input
        }], c8yForNotFound: [{
            type: Input
        }], c8yForMaxIterations: [{
            type: Input
        }], c8yForLoadingTemplate: [{
            type: Input
        }], c8yForLoadNextLabel: [{
            type: Input
        }], c8yForRealtime: [{
            type: Input
        }], c8yForRealtimeOptions: [{
            type: Input
        }], c8yForComparator: [{
            type: Input
        }], c8yForVirtualScrollElementSize: [{
            type: Input
        }], c8yForVirtualScrollContainerHeight: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HumanizeAppNamePipe, [{
        type: Pipe,
        args: [{ name: 'humanizeAppName' }]
    }], function () { return [{ type: ɵngcc4.TranslateService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HumanizePipe, [{
        type: Pipe,
        args: [{ name: 'humanize' }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yIcon]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { c8yIcon: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Permissions, [{
        type: Injectable
    }], function () { return [{ type: AppStateService }, { type: ɵngcc3.InventoryService }, { type: ɵngcc3.UserService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IfAllowedDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yIfAllowed]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: Permissions }]; }, { c8yIfAllowed: [{
            type: Input
        }], c8yIfAllowedAllowAny: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-loading',
                template: `
    <div class="p-24 p-relative d-inline-block" >
      <div class="spinner">
        <div class="rect1"></div>
        <div class="rect2"></div>
        <div class="rect3"></div>
        <div class="rect4"></div>
        <div class="rect5"></div>
      </div>
    </div>
  `
            }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapFunctionPipe, [{
        type: Pipe,
        args: [{
                name: 'map'
            }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberPipe, [{
        type: Pipe,
        args: [{ name: 'c8yNumber' }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationResultComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-operation-result',
                template: "<style>\n  .stroke-anim {\n    animation: stroke-anim 0.75s ease-in-out 0s 1 forwards;\n  }\n  .check-anim {\n    animation: check-anim 0.35s ease-in-out 0.5s 1 forwards;\n  }\n  .symbol-anim {\n    animation: symbol-anim 0.35s ease-in-out 0.5s 1 forwards;\n  }\n\n  @keyframes stroke-anim {\n    0% {\n      stroke-dashoffset: 60;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  @keyframes check-anim {\n    0% {\n      stroke-dashoffset: 28;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n  @keyframes symbol-anim {\n    0% {\n      stroke-dashoffset: 7;\n    }\n    100% {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  .delay-05 {\n    animation-delay: 0.5s;\n  }\n</style>\n<div class=\"d-flex a-i-center p-24 m-24 p-b-0\" [ngClass]=\"{ 'd-col j-c-center': vertical }\">\n  <svg *ngIf=\"type === 'success'\" viewBox=\"0 0 24 24\" [ngStyle]=\"{ 'max-width.px': size || 64 }\">\n    <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n      <polyline\n        stroke=\"var(--input-validation-success, #008800)\"\n        stroke-width=\"2\"\n        stroke-linejoin=\"round\"\n        points=\"7.8678862 11.508 11.9656988 15.984 20.2137797 7.44836856\"\n        class=\"check-anim\"\n        stroke-dasharray=\"28\"\n        stroke-dashoffset=\"28\"\n      ></polyline>\n      <path\n        d=\"M18.3656773,3.02795925 C16.5689809,1.75089408 14.3721808,1 12,1 C5.92486775,1 1,5.92486775 1,12 C1,18.0751322 5.92486775,23 12,23 C18.0751322,23 23,18.0751322 23,12\"\n        id=\"Path\"\n        class=\"stroke-anim\"\n        stroke=\"var(--input-validation-success, #008800)\"\n        stroke-width=\"2\"\n        stroke-dasharray=\"60\"\n        stroke-dashoffset=\"60\"\n      ></path>\n    </g>\n  </svg>\n\n  <svg *ngIf=\"type === 'error'\" viewBox=\"0 0 24 24\" [ngStyle]=\"{ 'max-width.px': size || 64 }\">\n    <g id=\"Artboard-Copy-3\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n      <line\n        x1=\"12\"\n        y1=\"13.5356315\"\n        x2=\"12\"\n        y2=\"7\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-error, #E0000E)\"\n        class=\"symbol-anim\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n      ></line>\n      <line\n        x1=\"12\"\n        y1=\"17.7678157\"\n        x2=\"12\"\n        y2=\"17.2321843\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-error, #E0000E)\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n        class=\"symbol-anim\"\n      ></line>\n      <circle\n        id=\"Oval\"\n        stroke=\"var(--input-validation-error, #E0000E)\"\n        stroke-width=\"2\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"11\"\n        class=\"stroke-anim\"\n        stroke-dasharray=\"70\"\n        stroke-dashoffset=\"70\"\n        stroke-linejoin=\"round\"\n      ></circle>\n    </g>\n  </svg>\n\n  <svg *ngIf=\"type === 'warning'\" viewBox=\"0 0 24 24\" [ngStyle]=\"{ 'max-width.px': size || 64 }\">\n    <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n      <line\n        x1=\"12\"\n        y1=\"13.5356315\"\n        x2=\"12\"\n        y2=\"7\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-warning, #FF801F)\"\n        class=\"symbol-anim\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n      ></line>\n      <line\n        x1=\"12\"\n        y1=\"17.7678157\"\n        x2=\"12\"\n        y2=\"17.2321843\"\n        id=\"Path-2\"\n        stroke=\"var(--input-validation-warning, #FF801F)\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-dasharray=\"7\"\n        stroke-dashoffset=\"7\"\n        class=\"symbol-anim\"\n      ></line>\n\n      <g\n        fill-rule=\"nonzero\"\n        stroke=\"var(--input-validation-warning, #FF801F)\"\n        stroke-width=\"2\"\n        class=\"stroke-anim\"\n        stroke-dashoffset=\"1000\"\n        stroke-dasharray=\"90\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <path d=\"M12,1 L23,21 L1,21 L12,1 Z\" id=\"Path\"></path>\n      </g>\n    </g>\n  </svg>\n  <p *ngIf=\"text\" class=\"text-center text-medium animated fadeIn delay-05 m-8\">\n    {{ text }}\n  </p>\n</div>\n"
            }]
    }], null, { text: [{
            type: Input
        }], vertical: [{
            type: Input
        }], size: [{
            type: Input
        }], type: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OutletDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yOutlet]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { c8yOutlet: [{
            type: Input
        }], c8yOutletProperties: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProgressBarComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-progress-bar',
                template: "<div class=\"bg-inherit\">\n  <div class=\"progress progress-striped active\" *ngIf=\"progress !== null\">\n    <div\n    class=\"progress-bar\"\n    role=\"progressbar\"\n    [attr.aria-valuenow]=\"progress\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    [style.width]=\"progress + '%'\"\n    ></div>\n  </div>\n  <div class=\"spinner-snake\" *ngIf=\"progress === null\"></div>\n  <p *ngIf=\"message\">\n    {{ message | translate }}\n  </p>\n</div>\n"
            }]
    }], function () { return []; }, { message: [{
            type: Input
        }], progress: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShortenUserNamePipe, [{
        type: Pipe,
        args: [{ name: 'shortenUserName' }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShowIfFilterPipe, [{
        type: Pipe,
        args: [{ name: 'showIfFilter' }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantUiService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.UserService }, { type: AppStateService }, { type: ɵngcc3.ApplicationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextareaAutoresizeDirective, [{
        type: Directive,
        args: [{
                selector: '[c8y-textarea-autoresize]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onInput: [{
            type: HostListener,
            args: [':input']
        }], onFocus: [{
            type: HostListener,
            args: [':focus']
        }], onBlur: [{
            type: HostListener,
            args: [':blur']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserPreferencesService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.UserService }, { type: ɵngcc3.InventoryService }, { type: AppStateService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VirtualScrollWindowDirective, [{
        type: Directive,
        args: [{
                selector: 'cdk-virtual-scroll-viewport[windowVirtualScrollStrategy]',
                providers: [{
                        provide: VIRTUAL_SCROLL_STRATEGY,
                        useFactory: _virtualScrollWindowStrategyFactory,
                        deps: [forwardRef(() => VirtualScrollWindowDirective)]
                    }]
            }]
    }], function () { return []; }, { itemSizePx: [{
            type: Input
        }], minBufferPx: [{
            type: Input
        }], maxBufferPx: [{
            type: Input
        }], offsetSizePx: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule$1, I18nModule$1, TooltipModule, ScrollingModule],
                exports: [
                    EmptyStateComponent,
                    IconDirective,
                    OutletDirective,
                    I18nModule$1,
                    CommonModule$1,
                    HumanizeAppNamePipe,
                    HumanizePipe,
                    IfAllowedDirective,
                    ShortenUserNamePipe,
                    ForOfDirective,
                    LoadMoreComponent,
                    MapFunctionPipe,
                    ProgressBarComponent,
                    DatePipe,
                    NumberPipe,
                    LoadingComponent,
                    DropdownDirectionDirective,
                    TextareaAutoresizeDirective,
                    OperationResultComponent,
                    VirtualScrollerWrapperComponent,
                    VirtualScrollWindowDirective,
                    BytesPipe,
                    ShowIfFilterPipe
                ],
                declarations: [
                    EmptyStateComponent,
                    IconDirective,
                    OutletDirective,
                    HumanizePipe,
                    HumanizeAppNamePipe,
                    IfAllowedDirective,
                    ShortenUserNamePipe,
                    ForOfDirective,
                    LoadMoreComponent,
                    MapFunctionPipe,
                    ProgressBarComponent,
                    DatePipe,
                    NumberPipe,
                    LoadingComponent,
                    DropdownDirectionDirective,
                    TextareaAutoresizeDirective,
                    OperationResultComponent,
                    VirtualScrollerWrapperComponent,
                    VirtualScrollWindowDirective,
                    BytesPipe,
                    ShowIfFilterPipe
                ],
                entryComponents: [LoadMoreComponent, LoadingComponent, VirtualScrollerWrapperComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CommonModule, { declarations: function () { return [EmptyStateComponent, IconDirective, OutletDirective, HumanizePipe, HumanizeAppNamePipe, IfAllowedDirective, ShortenUserNamePipe, ForOfDirective, LoadMoreComponent, MapFunctionPipe, ProgressBarComponent, DatePipe, NumberPipe, LoadingComponent, DropdownDirectionDirective, TextareaAutoresizeDirective, OperationResultComponent, VirtualScrollerWrapperComponent, VirtualScrollWindowDirective, BytesPipe, ShowIfFilterPipe]; }, imports: function () { return [CommonModule$1, I18nModule$1, TooltipModule, ScrollingModule]; }, exports: function () { return [EmptyStateComponent, IconDirective, OutletDirective, I18nModule$1, CommonModule$1, HumanizeAppNamePipe, HumanizePipe, IfAllowedDirective, ShortenUserNamePipe, ForOfDirective, LoadMoreComponent, MapFunctionPipe, ProgressBarComponent, DatePipe, NumberPipe, LoadingComponent, DropdownDirectionDirective, TextareaAutoresizeDirective, OperationResultComponent, VirtualScrollerWrapperComponent, VirtualScrollWindowDirective, BytesPipe, ShowIfFilterPipe]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieBannerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: OptionsService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GainsightService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: AppStateService }, { type: OptionsService }, { type: CookieBannerService }, { type: UserPreferencesService }, { type: ɵngcc4.TranslateService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionBarComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-action-bar',
                template: "<div class=\"navbar-header\">\n  <p class=\"text-label-small p-l-16 p-t-8 p-b-8 visible-xs\">\n    <span class=\"text-primary\">{{ 'Action bar' | translate }}</span>\n  </p>\n</div>\n\n<div id=\"page-toolbar\" class=\"navbar-collapse\">\n  <ul class=\"nav navbar-nav navbar-left\">\n    <ng-container *ngFor=\"let item of left$ | async\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n  </ul>\n  <ul class=\"nav navbar-nav navbar-right\">\n    <ng-container *ngFor=\"let item of right$ | async\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n    <li class=\"no-remove more-wrapper\" *ngIf=\"(more$ | async).length > 0\">\n      <div class=\"dropdown\" dropdown>\n        <button\n          title=\"{{ 'More' | translate }}\u2026\"\n          class=\"dropdown-toggle c8y-dropdown d-flex\"\n          dropdownToggle\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          <span class=\"text-truncate\" translate>More\u2026</span>\n          <i [c8yIcon]=\"'caret-down'\"></i>\n        </button>\n        <ul class=\"dropdown-menu visible-xs\">\n          <ng-container *ngFor=\"let item of more$ | async\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n        <ul class=\"dropdown-menu dropdown-menu-right hidden-xs\" *dropdownMenu>\n          <ng-container *ngFor=\"let item of more$ | async\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n    </li>\n  </ul>\n</div>\n",
                host: { class: 'c8y-ui-action-bar' }
            }]
    }], function () { return [{ type: GainsightService }]; }, { navigatorOpen: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.navigator-open']
        }], hasTabs: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.has-tabs']
        }], isTabsHorizontal: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.horizontal-tabs']
        }], uiActionBar: [{
            type: HostBinding,
            args: ['class.c8y-ui-action-bar']
        }], items$: [{
            type: Input
        }], hidden: [{
            type: HostBinding
        }], mouseDown: [{
            type: HostListener,
            args: ['mousedown', ['$event.target']]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionBarModule, [{
        type: NgModule,
        args: [{
                declarations: [ActionBarComponent, ActionBarItemComponent],
                imports: [BsDropdownModule, CommonModule, CollapseModule, RouterModule$1.forChild([])],
                exports: [ActionBarComponent, ActionBarItemComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ActionBarModule, { declarations: function () { return [ActionBarComponent, ActionBarItemComponent]; }, imports: function () { return [BsDropdownModule, CommonModule, CollapseModule, ɵngcc1.RouterModule]; }, exports: function () { return [ActionBarComponent, ActionBarItemComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-action-outlet',
                template: "<div class=\"dropdown\" dropdown *ngIf=\"items && items.length > 0\">\n  <button\n    type=\"button\"\n    class=\"main-header-button dropdown-toggle c8y-dropdown\"\n    dropdownToggle\n    aria-haspopup=\"true\"\n    aria-expanded=\"true\"\n    title=\"{{'Actions' | translate}}\">\n    <i [c8yIcon]=\"'plus-circle'\" class=\"icon-2x\"></i>\n  </button>\n\n  <ul class=\"dropdown-menu cog-dropdown\" *dropdownMenu>\n    <ng-container *ngFor=\"let item of getByPriority()\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      <li *ngIf=\"item.label\">\n        <button title=\"{{ item.label | translate }}\" [attr.disabled]=\"item.disabled ? 'disabled' : null\" (click)=\"invoke(item)\">\n          <i *ngIf=\"item.icon\" [c8yIcon]=\"item.icon\"></i>{{item.label | translate}}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
            }]
    }], function () { return []; }, { items: [{
            type: Input
        }], hasItems: [{
            type: HostBinding,
            args: ['class.main-header-item']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-action',
                template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
            }]
    }], function () { return [{ type: ActionService }]; }, { disabled: [{
            type: Input
        }], priority: [{
            type: Input
        }], label: [{
            type: Input
        }], icon: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ActionOutletComponent,
                    ActionComponent
                ],
                imports: [
                    CommonModule,
                    BsDropdownModule,
                    RouterModule$1.forChild([])
                ],
                exports: [
                    ActionOutletComponent,
                    ActionComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ActionModule, { declarations: function () { return [ActionOutletComponent, ActionComponent]; }, imports: function () { return [CommonModule, BsDropdownModule, ɵngcc1.RouterModule]; }, exports: function () { return [ActionOutletComponent, ActionComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertDetailsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-alert-details',
                template: `<ng-content></ng-content>`
            }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-alert',
                template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>"
            }]
    }], function () { return [{ type: AlertService }]; }, { detailedData: [{
            type: ViewChild,
            args: ['detailedData', { static: false }]
        }], type: [{
            type: Input
        }], onDetail: [{
            type: Input
        }], onClose: [{
            type: Input
        }], text: [{
            type: ViewChild,
            args: ['text', { static: false }]
        }], containDetailsComponent: [{
            type: ContentChild,
            args: [AlertDetailsComponent, { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-alert-outlet',
                template: "<div\n  class=\"alert animated fadeInRightBig m-t-16\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [textContent]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i c8yIcon=\"chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i c8yIcon=\"chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [textContent]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Attribute,
                args: ['position']
            }] }, { type: AlertService }]; }, { isStatic: [{
            type: HostBinding,
            args: ['class.static']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertTextComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-alert-text',
                template: `<ng-content></ng-content>`
            }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                exports: [
                    AlertOutletComponent,
                    AlertComponent,
                    AlertDetailsComponent,
                    AlertTextComponent
                ],
                declarations: [
                    AlertOutletComponent,
                    AlertComponent,
                    AlertDetailsComponent,
                    AlertTextComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AlertModule, { declarations: [AlertOutletComponent, AlertComponent, AlertDetailsComponent, AlertTextComponent], imports: [CommonModule], exports: [AlertOutletComponent, AlertComponent, AlertDetailsComponent, AlertTextComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigatorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColorService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NavigatorService }, { type: OptionsService }, { type: HumanizeAppNamePipe }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DocsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: OptionsService }, { type: AppStateService }, { type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicComponentService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }, { type: Number, decorators: [{
                type: Inject,
                args: [RESOLVING_COMPONENT_WAIT_TIME]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }, { type: ɵngcc4.TranslateService }, { type: OptionsService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterTabsResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextRouteService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: RouterTabsResolver }, { type: TabsService }, { type: ɵngcc1.Router }, { type: ɵngcc2.ApiService }, { type: ɵngcc0.Injector }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }, { type: ContextRouteService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-wizard',
                template: "<div class=\"viewport-modal animated fadeIn\">\n  <ng-template *ngTemplateOutlet=\"(headerTemplate$ | async)?.template\"></ng-template>\n\n  <ng-template #headerRef>\n    <div class=\"modal-header dialog-header animated fadeIn\">\n      <h1 [c8yIcon]=\"wizardConfig.headerIcon\"></h1>\n      <h4>{{ wizardConfig.headerText | translate }}</h4>\n    </div>\n  </ng-template>\n\n  <ng-template *ngTemplateOutlet=\"(bodyTemplate$ | async)?.template\"></ng-template>\n\n  <ng-template #bodyRef>\n    <div class=\"p-16 p-t-8 text-center\" *ngIf=\"wizardConfig.bodyHeaderText\">\n      <div class=\"c8y-wizard-nav\">\n        <i [c8yIcon]=\"wizardConfig.bodyHeaderIcon\"></i>\n        <span>{{ wizardConfig.bodyHeaderText | translate }}</span>\n      </div>\n    </div>\n  </ng-template>\n  <c8y-wizard-outlet [initialState]=\"componentInitialState\" (onSelect)=\"onSelect.emit($event)\"></c8y-wizard-outlet>\n\n  <ng-template *ngTemplateOutlet=\"(footerTemplate$ | async)?.template\"></ng-template>\n  <ng-template #footerRef>\n    <div class=\"modal-footer animated fadeIn\">\n      <button\n        (click)=\"close()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Cancel' | translate }}\"\n      >\n        <span translate>Cancel</span>\n      </button>\n    </div>\n  </ng-template>\n</div>\n"
            }]
    }], function () { return [{ type: WizardService }, { type: ɵngcc10.BsModalRef }]; }, { wizardConfig: [{
            type: Input
        }], onClose: [{
            type: Output
        }], onReset: [{
            type: Output
        }], onSelect: [{
            type: Output
        }], header: [{
            type: ViewChild,
            args: ['headerRef', { static: true }]
        }], body: [{
            type: ViewChild,
            args: ['bodyRef', { static: true }]
        }], footer: [{
            type: ViewChild,
            args: ['footerRef', { static: true }]
        }], id: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc10.BsModalService }, { type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PluginsResolveService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: TabsService }, { type: NavigatorService }, { type: ActionService }, { type: ActionBarService }, { type: BreadcrumbService }, { type: DynamicComponentService }, { type: SearchService }, { type: RouterService }, { type: DocsService }, { type: WizardService }, { type: ɵngcc0.Compiler }, { type: ɵngcc0.Injector }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }, { type: ɵngcc4.TranslateService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BootstrapComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bootstrap',
                template: "<c8y-login *ngIf=\"!(ui.currentUser | async)\"></c8y-login>\n\n<div\n  *ngIf=\"(ui.currentUser | async) && !(isSetupNeeded$ | async)\"\n  [class.head-open]=\"headerService.headerOpen\"\n>\n  <c8y-header-bar #header></c8y-header-bar>\n  <c8y-navigator-outlet\n    [nodes]=\"navigator.items$ | async\"\n    [open]=\"headerService.navigatorOpen$ | async\"\n  >\n    <header class=\"title navigator-slot-top\">\n      <div class=\"tenant-brand\"></div>\n      <c8y-app-icon\n        [name]=\"(ui.state$ | async).app.name\"\n        [contextPath]=\"(ui.state$ | async).app.contextPath\"\n      ></c8y-app-icon>\n      <span>{{ (ui.state$ | async).app | humanizeAppName | async }}</span>\n    </header>\n    <div class=\"powered-by navigator-slot-bottom\" *ngIf=\"showPoweredBy\">\n      <p translate>powered by Cumulocity</p>\n    </div>\n  </c8y-navigator-outlet>\n\n  <div class=\"alerts\">\n    <c8y-alert-outlet></c8y-alert-outlet>\n  </div>\n  <c8y-tabs-outlet\n    #tabsComponent\n    [tabs]=\"tabs.items$ | async\"\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [orientation]=\"tabs.orientation$ | async\"\n  >\n  </c8y-tabs-outlet>\n  <c8y-action-bar\n    #actionBarComponent\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [hasTabs]=\"tabsComponent.hasTabs\"\n    [isTabsHorizontal]=\"tabsComponent?.isHorizontal\"\n    [items$]=\"actionBar.items$\"\n  >\n  </c8y-action-bar>\n\n  <div\n    class=\"mcontainer\"\n    [ngClass]=\"{\n      open: headerService.navigatorOpen$ | async,\n      'no-apps-margin': noAppsMargin$ | async,\n      'horizontal-tabs': tabsComponent.isHorizontal,\n      'vertical-tabs': !tabsComponent.isHorizontal,\n      'has-tabs': tabsComponent.hasTabs,\n      'has-action-bar': !actionBarComponent?.hidden\n    }\"\n  >\n    <div class=\"container-fluid\">\n      <router-outlet></router-outlet>\n      <ng-content select=\"#c8y-legacy-view\"></ng-content>\n      <!-- legacy ng-view, will not be migrated atm -->\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"(ui.currentUser | async) && (isSetupNeeded$ | async)\">\n  <c8y-header-bar [simple]=\"true\"></c8y-header-bar>\n  <div class=\"mcontainer\">\n    <div class=\"container-fluid\">\n      <c8y-setup></c8y-setup>\n    </div>\n  </div>\n</div>\n\n<c8y-cookie-banner></c8y-cookie-banner>\n"
            }]
    }], function () { return [{ type: TabsService }, { type: AppStateService }, { type: NavigatorService }, { type: ActionBarService }, { type: HeaderService }, { type: OptionsService }, { type: PluginsResolveService }, { type: StepperService }, { type: Permissions }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-breadcrumb-item',
                template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
            }]
    }], null, { icon: [{
            type: Input
        }], translate: [{
            type: Input
        }], label: [{
            type: Input
        }], path: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-breadcrumb-outlet',
                template: "<div\n  class=\"breadcrumbs-container\"\n  [ngClass]=\"{\n    multiple: breadcrumbs.length > 1,\n    open: showAll\n  }\"\n  *ngIf=\"breadcrumbs && breadcrumbs.length > 0\"\n>\n  <button\n    *ngIf=\"breadcrumbs.length > 1\"\n    class=\"btn-show-all-breadcrumbs pull-left\"\n    (click)=\"showAll = !showAll\"\n  >\n    <i\n      *ngIf=\"!showAll\"\n      [c8yIcon]=\"'caret-right'\"\n      tooltip=\"{{ 'Show all breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n    <i\n      *ngIf=\"showAll\"\n      [c8yIcon]=\"'caret-down'\"\n      tooltip=\"{{ 'Collapse breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n  </button>\n\n  <ul class=\"breadcrumbs text-muted\" *ngFor=\"let breadcrumb of breadcrumbs; let first = first\">\n    <ng-container *ngIf=\"first || showAll\">\n      <li class=\"text-muted\" *ngFor=\"let item of breadcrumb.items; let firstItem = first\">\n        <span *ngIf=\"!firstItem\"> > </span>\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n        <ng-container *ngIf=\"item.label && item.path\">\n          <a\n            [routerLink]=\"normalizePath(item.path)\"\n            class=\"word-break\"\n            title=\"{{ item.label | translate }}\"\n          >\n            <i [c8yIcon]=\"item.icon\" *ngIf=\"firstItem\" class=\"m-r-4\"></i>\n            <span>{{ item.label | translate }}</span>\n          </a>\n        </ng-container>\n        <ng-container *ngIf=\"item.label && !item.path\">\n          <i [c8yIcon]=\"item.icon\" *ngIf=\"firstItem\" class=\"m-r-4\"></i>\n          <span>{{ item.label | translate }}</span>\n        </ng-container>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
            }]
    }], function () { return []; }, { breadcrumbs: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-breadcrumb',
                template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>"
            }]
    }], function () { return [{ type: BreadcrumbService }]; }, { contentChildItems: [{
            type: ContentChildren,
            args: [BreadcrumbItemComponent]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    BreadcrumbComponent,
                    BreadcrumbItemComponent,
                    BreadcrumbOutletComponent
                ],
                imports: [
                    RouterModule$1.forChild([]),
                    CommonModule,
                    TooltipModule.forRoot()
                ],
                exports: [
                    BreadcrumbComponent,
                    BreadcrumbItemComponent,
                    BreadcrumbOutletComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BreadcrumbModule, { declarations: [BreadcrumbComponent, BreadcrumbItemComponent, BreadcrumbOutletComponent], imports: [ɵngcc1.RouterModule, CommonModule, ɵngcc11.TooltipModule], exports: [BreadcrumbComponent, BreadcrumbItemComponent, BreadcrumbOutletComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigatorIconComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-navigator-icon',
                template: `<i class="icon" [c8yIcon]="icon"></i>`
            }]
    }], null, { node: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PopoverConfirmComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-popover-confirm',
                template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"m-b-8\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        class=\"btn btn-sm m-r-16\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n"
            }]
    }], function () { return []; }, { buttons: [{
            type: Input
        }], isOpen: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], placement: [{
            type: Input
        }], outsideClick: [{
            type: Input
        }], popover: [{
            type: ViewChild,
            args: [PopoverDirective, { static: false }]
        }], message: [{
            type: Input
        }], title: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigatorNodeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-navigator-node',
                template: "<div\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged, disabled: node.loading }\"\n>\n  <ng-container>\n    <a\n      class=\"link\"\n      draggable=\"false\"\n      (dragover)=\"node.canDrop && $event.preventDefault()\"\n      (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n      (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n      title=\"{{node.label | translate}}\"\n      [attr.id]=\"isRoot ? node.id : undefined\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{exact:node.routerLinkExact}\"\n      (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n      [ngClass]=\"{'root-link':isRoot, open: node.open && node.hasChildren, parent: node.hasChildren, 'dragged-hover': node.draggedHover && !node.dragged}\"\n    >\n      <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n    </a>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    >\n    </c8y-navigator-node>\n  </div>\n</div>\n\n<ng-template #inner>\n  <!-- loader -->\n  <i\n    class=\"icon-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    *ngIf=\"node.loading && !isRoot\"\n  >\n  </i>\n\n  <!-- icon -->\n  <div>\n    <ng-container #icon></ng-container>\n  </div>\n\n  <!--title  -->\n  <span>{{node.label | translate}}</span>\n\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    title=\"{{expandTitle}}\"\n  >\n  </i>\n\n  <c8y-popover-confirm\n    outsideClick=\"true\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: NavigatorService }]; }, { nodeClick: [{
            type: Output
        }], iconSlot: [{
            type: ViewChild,
            args: ['icon', { read: ViewContainerRef, static: false }]
        }], node: [{
            type: Input
        }], isRoot: [{
            type: Input
        }], routerLinkActive: [{
            type: ViewChild,
            args: [RouterLinkActive, { static: false }]
        }], childrenNodes: [{
            type: ViewChildren,
            args: [NavigatorNodeComponent]
        }], confirm: [{
            type: ViewChild,
            args: [PopoverConfirmComponent, { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigatorOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-navigator-outlet, c8y-ui-navigator',
                template: "<nav class=\"navigator\" *ngIf=\"isShown$ | async\" [ngClass]=\"{ open: open }\">\n  <ng-content select=\".navigator-slot-top\"></ng-content>\n  <ul class=\"navigatorContent\">\n    <c8y-navigator-node (nodeClick)=\"collapseNavigator($event)\" [node]=\"node\" *ngFor=\"let node of nodes trackBy trackByPathOrLabel\" [isRoot]=\"true\"></c8y-navigator-node>\n  </ul>\n  <ng-content select=\".navigator-slot-bottom\"></ng-content>\n</nav>\n"
            }]
    }], function () { return [{ type: HeaderService }]; }, { open: [{
            type: Input
        }], nodes: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfirmModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-confirm-modal',
                template: "<div class=\"c8y-prompt alert\" [ngClass]=\"[classAlert]\">\n  <h3 class=\"m-b-16 d-flex a-i-center\" *ngIf=\"title\">\n    <i class=\"dlt-c8y-icon\" [ngClass]=\"[classIcon]\"></i>\n    <span *ngIf=\"title\">{{ title | translate }}</span>\n  </h3>\n  <p class=\"text-break-word m-b-16\">{{ body | translate }}</p>\n  <div\n    class=\"c8y-checkbox plain m-b-8\"\n    *ngFor=\"let co of confirmOptions | showIfFilter | async | keyvalue\"\n  >\n    <label [title]=\"co.value.text | translate\" class=\"c8y-checkbox\">\n      <input\n        type=\"checkbox\"\n        [checked]=\"co.value.checked\"\n        (change)=\"co.value.checked = !co.value.checked\"\n        [disabled]=\"confirmOptions[co.value.disabledByKey]?.checked\"\n      />\n      <span></span>\n      <span class=\"text-muted\">{{ co.value.text | translate }}</span>\n    </label>\n  </div>\n  <ng-content></ng-content>\n  <div class=\"alert-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      *ngIf=\"labels.cancel !== null\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      (click)=\"close()\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc10.BsModalRef }]; }, { status: [{
            type: Input
        }], labels: [{
            type: Input
        }], title: [{
            type: Input
        }], body: [{
            type: Input
        }], confirmOptions: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header {{ headerClasses }}\" [ngClass]=\"{ separator: title }\">\n    <ng-content select=\"[c8y-modal-title]\"></ng-content>\n    <h3 [hidden]=\"!title\">\n      {{ title | translate }}\n    </h3>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div [ngClass]=\"{ 'modal-body': !customFooter, 'd-contents': customFooter }\">\n      <p *ngIf=\"title\" class=\"text-center text-break-word\">\n        {{ body }}\n      </p>\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <div class=\"modal-footer\" *ngIf=\"!customFooter\">\n    <ng-content select=\"[c8y-modal-footer]\"></ng-content>\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      *ngIf=\"labels.cancel\"\n      class=\"btn btn-default\"\n      (click)=\"_dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      *ngIf=\"labels.ok\"\n      class=\"btn btn-primary\"\n      (click)=\"_close()\"\n      [disabled]=\"disabled\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc10.BsModalRef, decorators: [{
                type: Optional
            }] }]; }, { onDismiss: [{
            type: Output
        }], onClose: [{
            type: Output
        }], disabled: [{
            type: Input
        }], customFooter: [{
            type: Input
        }], headerClasses: [{
            type: Input
        }], labels: [{
            type: Input
        }], onEnterKeyDown: [{
            type: HostListener,
            args: ['document:keydown.enter', ['$event']]
        }], close: [{
            type: Input
        }], dismiss: [{
            type: Input
        }], title: [{
            type: Input
        }], body: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModalService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc10.BsModalService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModalModule, [{
        type: NgModule,
        args: [{
                imports: [
                    ModalModule$1.forRoot(),
                    CommonModule,
                    PopoverModule.forRoot()
                ],
                exports: [
                    ConfirmModalComponent,
                    ModalComponent,
                    PopoverConfirmComponent
                ],
                declarations: [
                    ConfirmModalComponent,
                    ModalComponent,
                    PopoverConfirmComponent
                ],
                providers: [
                    ModalService
                ],
                entryComponents: [
                    ConfirmModalComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ModalModule, { declarations: [ConfirmModalComponent, ModalComponent, PopoverConfirmComponent], imports: [ɵngcc10.ModalModule, CommonModule, ɵngcc12.PopoverModule], exports: [ConfirmModalComponent, ModalComponent, PopoverConfirmComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigatorModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NavigatorOutletComponent,
                    NavigatorNodeComponent,
                    NavigatorIconComponent
                ],
                imports: [
                    RouterModule$1,
                    CollapseModule.forRoot(),
                    CommonModule,
                    ModalModule
                ],
                exports: [
                    NavigatorOutletComponent,
                    NavigatorNodeComponent
                ],
                entryComponents: [
                    NavigatorIconComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NavigatorModule, { declarations: function () { return [NavigatorOutletComponent, NavigatorNodeComponent, NavigatorIconComponent]; }, imports: function () { return [RouterModule$1, ɵngcc13.CollapseModule, CommonModule, ModalModule]; }, exports: function () { return [NavigatorOutletComponent, NavigatorNodeComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProductExperienceDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yProductExperience]'
            }]
    }], function () { return [{ type: GainsightService }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }], actionName: [{
            type: Input
        }], actionData: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProductExperienceModule, [{
        type: NgModule,
        args: [{
                declarations: [ProductExperienceDirective],
                exports: [ProductExperienceDirective],
                providers: [GainsightService]
            }]
    }], function () { return [{ type: AppStateService }, { type: GainsightService }, { type: CookieBannerService }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProductExperienceModule, { declarations: [ProductExperienceDirective], exports: [ProductExperienceDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search-outlet',
                template: "<ng-container *ngFor=\"let item of getByPriority()\">\n  <ng-container *c8yOutlet=\"item.template\"></ng-container>\n</ng-container>\n"
            }]
    }], function () { return [{ type: AlertService }]; }, { search: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search',
                template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
            }]
    }], function () { return [{ type: SearchService }]; }, { icon: [{
            type: Input
        }], priority: [{
            type: Input
        }], search: [{
            type: Output
        }], term: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }], name: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-highlight',
                template: '<span [innerHTML]="highlightedText"></span>'
            }]
    }], function () { return []; }, { pattern: [{
            type: Input
        }], text: [{
            type: Input
        }], elementClass: [{
            type: Input
        }], shouldTrimPattern: [{
            type: Input
        }], container: [{
            type: ViewChild,
            args: ['text', { read: ElementRef, static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchResultEmptyComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search-result-empty',
                template: "<div class=\"no-results\">\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div class=\"p-t-8\">\n      <p><strong>{{ message | translate }}</strong></p>\n      <small translate>Refine your search terms.</small>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { _message: [{
            type: Input,
            args: ['message']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-action, c8y-li-action',
                template: "<ng-template #template>\n  <li>\n    <button title=\"{{ label | translate }}\" (click)=\"click.emit($event)\">\n      <i [c8yIcon]=\"icon\" *ngIf=\"icon\"></i>&nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n"
            }]
    }], function () { return []; }, { click: [{
            type: Output
        }], template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }], label: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemCollapseComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-collapse, c8y-li-collapse',
                template: "<ng-content></ng-content>\n"
            }]
    }], function () { return []; }, { collapseWay: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemFooterComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-footer, c8y-li-footer',
                template: "<span *ngIf=\"footer\">{{footer}}</span>\n<ng-content></ng-content>\n"
            }]
    }], null, { footer: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item, c8y-li',
                template: "<div [ngClass]=\"{ 'expanded': !collapsed, interact: (itemCollapse && itemCollapse.collapseWay === 'row')}\">\n  <div class=\"c8y-list__item__block\">\n    <ng-content select=\"c8y-list-item-drag-handle, c8y-li-drag-handle\"></ng-content>\n    <ng-content select=\"c8y-list-item-radio, c8y-li-radio\"></ng-content>\n    <ng-content select=\"c8y-list-item-checkbox, c8y-li-checkbox\"></ng-content>\n\n    <ng-content select=\"c8y-list-item-icon, c8y-li-icon\"></ng-content>\n\n    <div class=\"c8y-list__item__body text-truncate-wrap\" (click)=\"(itemCollapse && itemCollapse.collapseWay === 'row') && toggleCollapsed()\">\n      <ng-content select=\"c8y-list-item-body, c8y-li-body\"></ng-content>\n      <ng-content></ng-content>\n      <div class=\"c8y-list__item__footer\" *ngIf=\"showFooter\">\n        <ng-content select=\"c8y-list-item-footer, c8y-li-footer\"></ng-content>\n      </div>\n    </div>\n\n    <div class=\"c8y-list__item__actions\" *ngIf=\"(showCollapse && (itemCollapse && itemCollapse.collapseWay === 'button')) || showActions\">\n      <button\n        class=\"collapse-btn\"\n        title=\"{{ 'Expand' | translate }}\"\n        type=\"button\"\n        (click)=\"toggleCollapsed($event)\"\n        [attr.aria-expanded]=\"!collapsed\"\n        *ngIf=\"showCollapse && itemCollapse.collapseWay === 'button'\"\n      >\n        <i [c8yIcon]=\"'chevron-down'\"></i>\n      </button>\n      <div\n        class=\"dropdown\"\n        dropdown\n        [dropup]=\"dropdownUp\"\n        *ngIf=\"showActions\"\n        (onShown)=\"showDropdownUp()\"\n      >\n        <button\n          class=\"dropdown-toggle c8y-dropdown\"\n          dropdownToggle\n          title=\"{{ 'Actions' | translate }}\"\n          type=\"button\"\n          aria-haspopup=\"true\"\n        >\n          <i [c8yIcon]=\"'ellipsis-v'\"></i>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n          <ng-content select=\"c8y-list-item-action, c8y-li-action\"></ng-content>\n          <ng-container *ngFor=\"let action of actions\">\n            <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n\n      <ng-content select=\"c8y-list-item-action, c8y-li-action\" *ngIf=\"showActions\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"showCollapse\" [collapse]=\"collapsed\" [isAnimated]=\"true\">\n    <div class=\"c8y-list__item__collapse--container\">\n      <ng-content select=\"c8y-list-item-collapse, c8y-li-collapse\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                host: {
                    class: 'c8y-list__item'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { active: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.active']
        }], emptyActions: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.c8y-list__item--empty-actions']
        }], collapsed: [{
            type: Input
        }], selectable: [{
            type: Input
        }], collapsedChange: [{
            type: Output
        }], itemFooter: [{
            type: ContentChild,
            args: [ListItemFooterComponent, { static: false }]
        }], itemActions: [{
            type: ContentChildren,
            args: [ListItemActionComponent]
        }], itemCollapse: [{
            type: ContentChild,
            args: [ListItemCollapseComponent, { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TypeaheadComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-typeahead',
                template: "<div\n  class=\"c8y-search-dropdown dropdown fit-w\"\n  dropdown\n  [container]=\"container\"\n  placement=\"bottom left\"\n  #dropdown=\"bs-dropdown\"\n  [autoClose]=\"true\"\n  (onShown)=\"onShown()\"\n  [isDisabled]=\"disabled\"\n>\n  <div class=\"input-group input-group-dropdown\" dropdownToggle>\n    <input\n      #searchControl\n      #searchControlModel=\"ngModel\"\n      type=\"text\"\n      class=\"form-control text-truncate\"\n      [ngClass]=\"{'p-r-80': !hideNew &&\n      (selected\n        ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n        : false), \n        'p-r-40': hideNew || getDisplayProperty()?.length === 0\n        }\"\n      [required]=\"required\"\n      [ngModel]=\"selected ? getDisplayProperty() : ''\"\n      [placeholder]=\"placeholder | translate\"\n      (blur)=\"doBlur()\"\n      [name]=\"name\"\n      [maxlength]=\"maxlength\"\n      [disabled]=\"disabled\"\n      title=\"{{ placeholder | translate }}\"\n    />\n    <span\n      class=\"label label-info p-absolute\"\n      style=\"top: 10px; right: 40px; z-index: 10\"\n      translate\n      *ngIf=\"\n        !hideNew &&\n        (selected\n          ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n          : false)\n      \"\n    >\n      New\n    </span>\n\n    <span class=\"input-group-btn\">\n      <button\n        type=\"button\"\n        class=\"btn btn-clean\"\n        title=\"{{ 'Search' | translate }}\"\n        [disabled]=\"disabled\"\n        (click)=\"onIconClick.emit({ icon, $event });\"\n      >\n        <i [c8yIcon]=\"icon\" class=\"text-primary\"></i>\n      </button>\n    </span>\n  </div>\n\n  <c8y-list-group\n    class=\"dropdown-menu dropdown-menu--modal\"\n    *dropdownMenu\n    [style.width]=\"container === 'body' ? searchControl.clientWidth + 'px' : undefined\"\n  >\n    <ng-content select=\"div, c8y-li, c8y-list-item, button, a\"></ng-content>\n  </c8y-list-group>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => TypeaheadComponent)
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => TypeaheadComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, { required: [{
            type: Input
        }], disabled: [{
            type: Input
        }], allowFreeEntries: [{
            type: Input
        }], displayProperty: [{
            type: Input
        }], icon: [{
            type: Input
        }], name: [{
            type: Input
        }], autoClose: [{
            type: Input
        }], hideNew: [{
            type: Input
        }], container: [{
            type: Input
        }], selected: [{
            type: Input
        }], onSearch: [{
            type: Output
        }], onIconClick: [{
            type: Output
        }], searchControl: [{
            type: ViewChild,
            args: ['searchControl', { static: false }]
        }], searchControlModel: [{
            type: ViewChild,
            args: ['searchControlModel', { static: false }]
        }], dropdown: [{
            type: ViewChild,
            args: ['dropdown', { static: false }]
        }], list: [{
            type: ContentChildren,
            args: [ListItemComponent]
        }], maxlength: [{
            type: Input
        }], placeholder: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InventorySearchService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc3.InventoryService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetTypesService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc3.InventoryService }, { type: ɵngcc2.ApiService }, { type: AppStateService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchInputComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-search-input',
                template: "<div\n  class=\"dropdown\"\n  dropdown\n  #dropdown=\"bs-dropdown\"\n  [insideClick]=\"true\"\n  (isOpenChange)=\"onOpenChange($event)\"\n  *ngIf=\"mode === 'search'\"\n>\n  <button\n    class=\"main-header-button dropdown-toggle c8y-dropdown\"\n    dropdownToggle\n    type=\"button\"\n    [title]=\"'Search' | translate\"\n    aria-controls=\"searchDropdown\"\n  >\n    <i c8yIcon=\"search\" class=\"icon-2x\"></i>\n  </button>\n\n  <div\n    id=\"searchDropdown\"\n    *dropdownMenu\n    class=\"search-header-menu dropdown-menu dropdown-menu-center\"\n  >\n    <ng-container *ngTemplateOutlet=\"form\"></ng-container>\n  </div>\n</div>\n\n<div class=\"search-header-inline\" *ngIf=\"mode === 'select'\">\n  <ng-container *ngTemplateOutlet=\"form\"></ng-container>\n</div>\n\n<ng-template #form>\n  <form [ngClass]=\"{ 'c8y-search-form': mode === 'search' }\" novalidate #searchForm=\"ngForm\">\n    <c8y-typeahead\n      [(ngModel)]=\"selected\"\n      placeholder=\"{{ 'Search for groups or assets\u2026' | translate }}\"\n      (keydown)=\"keyDown($event)\"\n      (onIconClick)=\"onReset($event)\"\n      [icon]=\"term ? 'times' : 'search'\"\n      [allowFreeEntries]=\"false\"\n      [container]=\"container\"\n      name=\"selected\"\n    >\n      <!-- filter buttons -->\n      <c8y-li *ngIf=\"term.length !== 0\" class=\"p-l-16 p-r-16\">\n        <div class=\"flex-row\" *ngIf=\"mode === 'search'\">\n          <p class=\"m-r-4 text-muted\">\n            <em translate>Searching by exact match. Click for other search options:</em>\n          </p>\n          <div class=\"btn-group btn-group-sm\">\n            <button\n              class=\"btn btn-default\"\n              title=\"{{ 'Starts with' | translate }}\"\n              (click)=\"onFilter(term + '*')\"\n            >\n              {{ 'Starts with' | translate }}\n            </button>\n            <button\n              class=\"btn btn-default\"\n              title=\"{{ 'Contains' | translate }}\"\n              (click)=\"onFilter('*' + term + '*')\"\n            >\n              {{ 'Contains' | translate }}\n            </button>\n            <button\n              class=\"btn btn-default\"\n              title=\"{{ 'Ends with' | translate }}\"\n              (click)=\"onFilter('*' + term)\"\n            >\n              {{ 'Ends with' | translate }}\n            </button>\n          </div>\n        </div>\n      </c8y-li>\n\n      <!-- Recent search -->\n      <c8y-li\n        *ngIf=\"term.length === 0 && recentSearchResults.length > 0\"\n        [selectable]=\"false\"\n        class=\"p-l-24 p-r-24\"\n      >\n        <div class=\"legend form-block\">\n          <span translate>Recent search views</span>\n        </div>\n      </c8y-li>\n      <c8y-li\n        *ngFor=\"let result of term.length === 0 ? recentSearchResults : []\"\n        class=\"c8y-list__item--link m-l-16 m-r-16\"\n        (click)=\"open($event, result, result.name)\"\n      >\n        <c8y-li-icon>\n          <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n          <i\n            [c8yIcon]=\"getIcon(result)\"\n            class=\"c8y-icon-duocolor\"\n            *ngIf=\"result.c8y_IsDeviceGroup\"\n          ></i>\n        </c8y-li-icon>\n        {{ result.name || '--' }}\n      </c8y-li>\n\n      <!-- Recently registered devices -->\n      <c8y-li\n        *ngIf=\"term.length === 0 && (recentlyRegisteredResults$ | async)?.data?.length > 0\"\n        class=\"p-l-24 p-r-24\"\n        [selectable]=\"false\"\n      >\n        <div class=\"legend form-block\">\n          <span translate>Recently registered devices</span>\n        </div>\n      </c8y-li>\n      <c8y-li\n        *c8yFor=\"\n          let result of term.length === 0 ? recentlyRegisteredResults$ : { data: [] };\n          loadMore: 'none';\n          pipe: filterPipe\n        \"\n        class=\"c8y-list__item--link m-l-16 m-r-16\"\n        (click)=\"open($event, result, result.name)\"\n      >\n        <c8y-li-icon>\n          <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n          <i\n          [c8yIcon]=\"getIcon(result)\"\n            class=\"c8y-icon-duocolor\"\n            *ngIf=\"result.c8y_IsDeviceGroup\"\n          ></i>\n        </c8y-li-icon>\n        {{ result.name || '--' }}\n      </c8y-li>\n\n      <!-- Search results -->\n      <c8y-li *ngIf=\"term.length !== 0\" class=\"p-l-24 p-r-24\" [selectable]=\"false\">\n        <div class=\"legend form-block\">\n          <span translate>Search results</span>\n        </div>\n      </c8y-li>\n      <c8y-li\n        *c8yFor=\"\n          let result of results$;\n          loadMore: 'auto';\n          pipe: filterPipe;\n          notFound: notFoundTemplate;\n          loadingTemplate: loading;\n          loadNextLabel: 'Find more\u2026'\n        \"\n        class=\"c8y-list__item--link  m-l-16 m-r-16\"\n        (click)=\"open($event, result, result.name)\"\n        [title]=\"result.name\"\n      >\n        <c8y-li-icon>\n          <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n          <i\n            [c8yIcon]=\"getIcon(result)\"\n            class=\"c8y-icon-duocolor\"\n            *ngIf=\"result.c8y_IsDeviceGroup\"\n          ></i>\n        </c8y-li-icon>\n        {{ result.name || '--' }}\n      </c8y-li>\n\n      <!-- No search results found entry -->\n      <ng-template #notFoundTemplate>\n        <c8y-li *ngIf=\"noMatch\" class=\"p-16 c8y-empty-state\" [selectable]=\"false\">\n          <c8y-li-icon [icon]=\"'search'\"></c8y-li-icon>\n          <p><strong translate>No match found.</strong></p>\n          <small translate *ngIf=\"mode === 'search'\">\n            Try to filter or open the asset grid to show all devices and groups.\n          </small>\n          <small translate *ngIf=\"mode === 'select'\">\n            Try to rephrase your search word.\n          </small>\n        </c8y-li>\n      </ng-template>\n\n      <!-- loading bar first entries -->\n      <c8y-li *ngIf=\"isLoading\" class=\"p-t-32 p-b-0\" style=\"position: relative;\">\n        <div class=\"spinner\" style=\"right:0;\">\n          <div class=\"rect1\"></div>\n          <div class=\"rect2\"></div>\n          <div class=\"rect3\"></div>\n          <div class=\"rect4\"></div>\n          <div class=\"rect5\"></div>\n        </div>\n      </c8y-li>\n\n      <!-- loading bar for loading more entries (inventory roles) -->\n      <ng-template #loading>\n        <c8y-li class=\"text-center p-t-32 p-b-0\" style=\"position:relative;\">\n          <div class=\"spinner\" style=\"right:0;\">\n            <div class=\"rect1\"></div>\n            <div class=\"rect2\"></div>\n            <div class=\"rect3\"></div>\n            <div class=\"rect4\"></div>\n            <div class=\"rect5\"></div>\n          </div>\n        </c8y-li>\n      </ng-template>\n\n      <!-- more filter possibilities -->\n      <c8y-li\n        class=\"m-t-24 bg-gray-lighter p-t-16 p-b-16 p-l-24 p-r-24\"\n        [selectable]=\"false\"\n        *ngIf=\"mode === 'search'\"\n      >\n        <div class=\"flex-row\">\n          <i c8yIcon=\"info-circle\" class=\"text-info m-r-4\"></i>\n          <p translate class=\"m-r-8\">Need more filter possibilities?</p>\n          <button\n            type=\"button\"\n            class=\"m-l-auto btn btn-default btn-sm\"\n            translate\n            (mousedown)=\"onOpenAssetTable()\"\n          >\n            Go to the asset data table\n          </button>\n        </div>\n      </c8y-li>\n    </c8y-typeahead>\n  </form>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc3.InventoryService }, { type: InventorySearchService }, { type: AssetTypesService }]; }, { mode: [{
            type: Input
        }], container: [{
            type: Input
        }], filter: [{
            type: Output
        }], search: [{
            type: Output
        }], reset: [{
            type: Output
        }], onClick: [{
            type: Output
        }], onKeydownHandler: [{
            type: HostListener,
            args: ['document:keydown', ['$event']]
        }], typeahead: [{
            type: ViewChild,
            args: [TypeaheadComponent, { static: false }]
        }], dropdown: [{
            type: ViewChild,
            args: ['dropdown', { static: false }]
        }] }); })();

class SelectComponent {
    constructor() {
        this.placeholder = gettext('Select item');
        this.applyLabel = gettext('Apply');
        this.disableApplyOnNoSelection = false;
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.searchFilter = null;
        this.sizeToShowFilter = 5;
        this.labelsForSelectAll = {
            all: gettext('All'),
            allFiltered: gettext('All filtered')
        };
        this.showAllLabel = false;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    preventClick(evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    }
    isOpenChange(isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
            this.searchFilter = null;
        }
        else {
            this.stopClicks = false;
        }
    }
    outterSelected(item) {
        const { selected } = this;
        let isSelected = () => false;
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = (i) => selected.indexOf(i) > -1;
        }
        return isSelected(item);
    }
    isSelected(item) {
        return this.itemsSelected.has(item);
    }
    isAllItemsSelected() {
        return this.itemsSelected.size === this.items.length;
    }
    isAllFilteredSelected() {
        return this.itemsSelected.size === this.filteredItems.length;
    }
    isNoItemSelected() {
        return !this.itemsSelected.size;
    }
    applyChanges() {
        const selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    }
    selectAll(checked) {
        this.filteredItems.forEach(item => this.onChangeItem(checked, item));
    }
    ngOnInit() {
        if (this.updateItems) {
            this.updateItems.subscribe(() => {
                this.updateSelected();
                this.updateLabel();
                this.showAllLabel = this.isAllItemsSelected();
            });
        }
    }
    onChangeItem(checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    }
    updateFiltered(term) {
        if (term) {
            const search = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(({ name }) => search.test(name));
        }
        else {
            this.filteredItems = this.items;
        }
    }
    getSelectAllToggleStatus() {
        const label = this.getLabel();
        const checked = this.isAllSelected();
        const indeterminate = !checked && this.itemsSelected.size > 0;
        return { label, checked, indeterminate };
    }
    ngOnChanges(changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
            this.showAllLabel = this.isAllItemsSelected();
        }
    }
    ngOnDestroy() {
        if (this.updateItems && !this.updateItems.closed) {
            this.updateItems.unsubscribe();
        }
    }
    updateLabel() {
        const outterSelected = this.items.filter(i => this.outterSelected(i));
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(({ name }) => name).join(', ');
        }
    }
    updateSelected() {
        const { itemsSelected, items } = this;
        itemsSelected.clear();
        items.forEach(item => {
            if (this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    }
    isAllSelected() {
        if (this.getLabel() === this.labelsForSelectAll.allFiltered) {
            return this.isAllFilteredSelected();
        }
        else {
            return this.isAllItemsSelected();
        }
    }
    getLabel() {
        return this.searchFilter ? this.labelsForSelectAll.allFiltered : this.labelsForSelectAll.all;
    }
}
SelectComponent.ɵfac = function SelectComponent_Factory(t) { return new (t || SelectComponent)(); };
SelectComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectComponent, selectors: [["c8y-select"]], contentQueries: function SelectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ListItemComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.liChildren = _t);
    } }, viewQuery: function SelectComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(BsDropdownDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, hostBindings: function SelectComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SelectComponent_click_HostBindingHandler($event) { return ctx.preventClick($event); });
    } }, inputs: { placeholder: "placeholder", applyLabel: "applyLabel", disableApplyOnNoSelection: "disableApplyOnNoSelection", selectedLabel: "selectedLabel", items: "items", selected: "selected", updateItems: "updateItems" }, outputs: { onChange: "onChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c45, decls: 7, vars: 5, consts: [["dropdown", "", "c8yDropdownDirection", "", "px-event", "Select type", 1, "c8y-child-assets-selector", "dropdown", "fit-w", 3, "isOpenChange"], ["dropdown", ""], ["type", "button", "dropdownToggle", "", 1, "btn", "dropdown-toggle", "c8y-dropdown", 3, "title"], ["class", "text-truncate", 4, "ngIf"], ["class", "text-truncate text-muted", 4, "ngIf"], ["class", "dropdown-menu multiselect-container", 4, "dropdownMenu"], [1, "text-truncate"], [4, "ngIf"], [1, "text-truncate", "text-muted"], [1, "dropdown-menu", "multiselect-container"], ["class", "multiselect-item", 4, "ngIf"], [1, "multiselect-item"], ["ng-click", "vm.toggleSelectAll(); $event.preventDefault()", 1, "c8y-checkbox", "input-sm", 3, "title"], ["type", "checkbox", 1, "m-t-0", 3, "checked", "indeterminate", "change"], [1, "label-text"], [1, "multiselect-item-container"], [1, "list-unstyled"], ["class", "multiselect-item", 4, "ngFor", "ngForOf"], [1, "divider"], [1, "bg-white"], [1, "btn", "btn-primary", "btn-block", 3, "title", "disabled", "click"], [1, "input-group", "input-group-search"], ["type", "search", 1, "form-control", 3, "placeholder", "ngModel", "keyup", "ngModelChange"], [1, "input-group-addon"], ["c8yIcon", "search", 4, "ngIf"], ["c8yIcon", "times", "class", "text-muted", 3, "click", 4, "ngIf"], ["c8yIcon", "search"], ["c8yIcon", "times", 1, "text-muted", 3, "click"], [1, "c8y-checkbox", "input-sm", "text-truncate", 3, "title"], ["type", "checkbox", 1, "m-t-0", 3, "checked", "change"]], template: function SelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c44);
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("isOpenChange", function SelectComponent_Template_div_isOpenChange_0_listener($event) { return ctx.isOpenChange($event); });
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, SelectComponent_span_4_Template, 3, 2, "span", 3);
        ɵngcc0.ɵɵtemplate(5, SelectComponent_span_5_Template, 3, 3, "span", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, SelectComponent_ul_6_Template, 3, 1, "ul", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 3, ctx.labelText || ctx.placeholder));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.labelText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.labelText);
    } }, directives: [ɵngcc9.BsDropdownDirective, DropdownDirectionDirective, ɵngcc9.BsDropdownToggleDirective, ɵngcc7.NgIf, ɵngcc9.BsDropdownMenuDirective, ɵngcc7.NgForOf, ɵngcc14.DefaultValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
SelectComponent.propDecorators = {
    placeholder: [{ type: Input }],
    selectedLabel: [{ type: Input }],
    applyLabel: [{ type: Input }],
    items: [{ type: Input }],
    selected: [{ type: Input }],
    updateItems: [{ type: Input }],
    disableApplyOnNoSelection: [{ type: Input }],
    onChange: [{ type: Output }],
    dropdown: [{ type: ViewChild, args: [BsDropdownDirective, { static: false },] }],
    liChildren: [{ type: ContentChildren, args: [ListItemComponent,] }],
    preventClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-select',
                template: "<div\n  class=\"c8y-child-assets-selector dropdown fit-w\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n  c8yDropdownDirection\n  px-event=\"Select type\"\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">\n      <ng-container *ngIf=\"showAllLabel\">{{ 'All' | translate }}</ng-container>\n      <ng-container *ngIf=\"!showAllLabel\">{{ labelText | translate }}</ng-container>\n    </span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">\n      {{ placeholder | translate }}\n    </span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <ng-content select=\"c8y-li\"></ng-content>\n    <ng-container *ngIf=\"liChildren.length === 0\">\n      <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n        <div class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Filter' | translate }}\u2026\"\n            (keyup)=\"updateFiltered($event.target.value)\"\n            [(ngModel)]=\"searchFilter\"\n          />\n          <span class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"!textFilter\"></i>\n            <i c8yIcon=\"times\" class=\"text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n          </span>\n        </div>\n      </li>\n\n      <li class=\"multiselect-item\">\n        <label\n          [title]=\"getSelectAllToggleStatus().label | translate\"\n          class=\"c8y-checkbox input-sm\"\n          ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"getSelectAllToggleStatus().checked\"\n            (change)=\"selectAll($event.target.checked)\"\n            [indeterminate]=\"getSelectAllToggleStatus().indeterminate\"\n            class=\"m-t-0\"\n          />\n          <span></span>\n          <span class=\"label-text\">\n            {{ getSelectAllToggleStatus().label | translate }}\n          </span>\n        </label>\n      </li>\n\n      <li class=\"multiselect-item-container\">\n        <ul class=\"list-unstyled\">\n          <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n            <label title=\"{{ item.name | translate }}\" class=\"c8y-checkbox input-sm text-truncate\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isSelected(item)\"\n                (change)=\"onChangeItem($event.target.checked, item)\"\n                class=\"m-t-0\"\n              />\n              <span></span>\n              <span class=\"label-text\">\n                {{ item.name | translate }}\n              </span>\n            </label>\n          </li>\n        </ul>\n      </li>\n      <li class=\"divider\"></li>\n      <li class=\"bg-white\">\n        <button\n          title=\"{{ applyLabel | translate }}\"\n          class=\"btn btn-primary btn-block\"\n          [disabled]=\"disableApplyOnNoSelection && isNoItemSelected()\"\n          (click)=\"applyChanges()\"\n        >\n          {{ applyLabel | translate }}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
            }]
    }], function () { return []; }, { placeholder: [{
            type: Input
        }], applyLabel: [{
            type: Input
        }], disableApplyOnNoSelection: [{
            type: Input
        }], onChange: [{
            type: Output
        }], preventClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], selectedLabel: [{
            type: Input
        }], items: [{
            type: Input
        }], selected: [{
            type: Input
        }], updateItems: [{
            type: Input
        }], dropdown: [{
            type: ViewChild,
            args: [BsDropdownDirective, { static: false }]
        }], liChildren: [{
            type: ContentChildren,
            args: [ListItemComponent]
        }] }); })();

/**
 * Allows to display a timeline. Should be used with
 * content projection.
 *
 * @example
 * ```html
 * <c8y-list-group>
 *   <c8y-li-timeline>
 *     24.April 2020
 *     <c8y-li>
 *       Hello
 *     </c8y-li>
 *   </c8y-li-timeline>
 * </c8y-list-group>
 * ```
 */
class ListItemTimelineComponent {
    get expanded() {
        var _a;
        return !((_a = this.listItemComponent) === null || _a === void 0 ? void 0 : _a.collapsed);
    }
}
ListItemTimelineComponent.ɵfac = function ListItemTimelineComponent_Factory(t) { return new (t || ListItemTimelineComponent)(); };
ListItemTimelineComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemTimelineComponent, selectors: [["c8y-list-item-timeline"], ["c8y-li-timeline"]], contentQueries: function ListItemTimelineComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ListItemComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listItemComponent = _t.first);
    } }, hostAttrs: [1, "c8y-list--timeline__item"], hostVars: 2, hostBindings: function ListItemTimelineComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("expanded", ctx.expanded);
    } }, ngContentSelectors: _c47, decls: 3, vars: 0, consts: [[1, "c8y-list--timeline__item__date"]], template: function ListItemTimelineComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c46);
        ɵngcc0.ɵɵelementStart(0, "small", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(2, 1);
    } }, encapsulation: 2 });
ListItemTimelineComponent.propDecorators = {
    listItemComponent: [{ type: ContentChild, args: [ListItemComponent, { static: false },] }],
    expanded: [{ type: HostBinding, args: ['class.expanded',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemTimelineComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-timeline, c8y-li-timeline',
                template: "<small class=\"c8y-list--timeline__item__date\">\n  <ng-content></ng-content>\n</small>\n<ng-content select=\"c8y-li, c8y-list-item\"></ng-content>\n",
                host: {
                    class: 'c8y-list--timeline__item'
                }
            }]
    }], null, { expanded: [{
            type: HostBinding,
            args: ['class.expanded']
        }], listItemComponent: [{
            type: ContentChild,
            args: [ListItemComponent, { static: false }]
        }] }); })();

/**
 * List groups are flexible and powerful components for displaying
 * both simple lists of elements and complex ones with custom content.
 *
 * @example
 * ```html
 * <c8y-list-group>
 *   <c8y-li>
 *     Plain <strong>Text</strong>
 *   </c8y-li>
 *   <c8y-li>
 *     <c8y-li-icon [icon]="'rocket'"></c8y-li-icon>
 *     Icon
 *   </c8y-li>
 *   <c8y-li>
 *     <c8y-li-radio></c8y-li-radio>
 *     Radio
 *   </c8y-li>
 *   <c8y-li>
 *     <c8y-li-checkbox></c8y-li-checkbox>
 *     Checkbox
 *   </c8y-li>
 *   <c8y-li>
 *     Content
 *     <c8y-li-footer>
 *       Footer
 *     </c8y-li-footer>
 *   </c8y-li>
 *   <c8y-li>
 *     Content
 *     <c8y-li-action icon="rocket">
 *       Launch
 *     </c8y-li-action>
 *   </c8y-li>
 *   <c8y-li>
 *     Content
 *     <c8y-li-collapse>
 *       Collapsed content
 *     </c8y-li-collapse>
 *   </c8y-li>
 * </c8y-list-group>
 * ```
 */
class ListGroupComponent {
    constructor() {
        /**
         * @ignore
         */
        this.timeline = false;
    }
    /**
     * @ignore
     */
    ngAfterContentChecked() {
        this.timeline = !!this.timelineComponent;
    }
}
ListGroupComponent.ɵfac = function ListGroupComponent_Factory(t) { return new (t || ListGroupComponent)(); };
ListGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListGroupComponent, selectors: [["c8y-list-group"]], contentQueries: function ListGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ListItemTimelineComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.timelineComponent = _t.first);
    } }, hostAttrs: [1, "c8y-list__group"], hostVars: 2, hostBindings: function ListGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("c8y-list--timeline", ctx.timeline);
    } }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function ListGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ListGroupComponent.propDecorators = {
    timeline: [{ type: HostBinding, args: ['class.c8y-list--timeline',] }],
    timelineComponent: [{ type: ContentChild, args: [ListItemTimelineComponent, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListGroupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-group',
                template: "<ng-content></ng-content>\n\n",
                host: {
                    class: 'c8y-list__group'
                }
            }]
    }], function () { return []; }, { timeline: [{
            type: HostBinding,
            args: ['class.c8y-list--timeline']
        }], timelineComponent: [{
            type: ContentChild,
            args: [ListItemTimelineComponent, { static: false }]
        }] }); })();

/**
 * An icon to display on a list item. Use it with content projection.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-icon="rocket"></c8y-li-icon>
 * </c8y-li>
 * ```
 */
class ListItemIconComponent {
}
ListItemIconComponent.ɵfac = function ListItemIconComponent_Factory(t) { return new (t || ListItemIconComponent)(); };
ListItemIconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemIconComponent, selectors: [["c8y-list-item-icon"], ["c8y-li-icon"]], hostAttrs: [1, "c8y-list__item__icon"], inputs: { icon: "icon", status: "status" }, ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[3, "c8yIcon", "ngClass", 4, "ngIf"], [3, "c8yIcon", "ngClass"]], template: function ListItemIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ListItemIconComponent_i_0_Template, 1, 2, "i", 0);
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon);
    } }, directives: [ɵngcc7.NgIf, IconDirective, ɵngcc7.NgClass], encapsulation: 2 });
ListItemIconComponent.propDecorators = {
    icon: [{ type: Input }],
    status: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemIconComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-icon, c8y-li-icon',
                template: "<i [c8yIcon]=\"icon\" [ngClass]=\"status\" *ngIf=\"icon\"></i>\n<ng-content></ng-content>",
                host: {
                    class: 'c8y-list__item__icon'
                }
            }]
    }], null, { icon: [{
            type: Input
        }], status: [{
            type: Input
        }] }); })();

/**
 * The li-body component can be used to define the body.
 * Usually it doesn't need to be used, as it is the default
 * content projected to a <c8y-li>.
 */
class ListItemBodyComponent {
}
ListItemBodyComponent.ɵfac = function ListItemBodyComponent_Factory(t) { return new (t || ListItemBodyComponent)(); };
ListItemBodyComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemBodyComponent, selectors: [["c8y-list-item-body"], ["c8y-li-body"]], inputs: { body: "body" }, ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[4, "ngIf"]], template: function ListItemBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ListItemBodyComponent_span_0_Template, 2, 1, "span", 0);
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.body);
    } }, directives: [ɵngcc7.NgIf], encapsulation: 2 });
ListItemBodyComponent.propDecorators = {
    body: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemBodyComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-body, c8y-li-body',
                template: "<span *ngIf=\"body\">{{body}}</span>\n<ng-content></ng-content>\n"
            }]
    }], null, { body: [{
            type: Input
        }] }); })();

/**
 * A component to display checkboxes in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-checkbox></c8y-li-checkbox>
 * </c8y-li>
 * ```
 */
class ListItemCheckboxComponent extends CheckboxControlValueAccessor {
    constructor(renderer, elementRef) {
        super(renderer, elementRef);
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * Indicates if the checkbox is selected.
         */
        this.selected = false;
        /**
         * Indicates if the checkbox is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the checkbox is selected.
         */
        this.onSelect = new EventEmitter();
        this.displayAsSwitch = false;
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    }
    /**
     * Selects the checkbox.
     * @param value The value to pass.
     */
    select(value) {
        this.onSelect.emit(value);
        this.onChange(value);
        this.selected = value;
    }
    // default implementation (https://github.com/angular/angular/blob/main/packages/forms/src/directives/checkbox_value_accessor.ts#L54) not sufficient.
    // get overruled by our binding on checked..
    writeValue(value) {
        this.selected = value;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
ListItemCheckboxComponent.ɵfac = function ListItemCheckboxComponent_Factory(t) { return new (t || ListItemCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ListItemCheckboxComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemCheckboxComponent, selectors: [["c8y-list-item-checkbox"], ["c8y-li-checkbox"]], hostAttrs: [1, "c8y-list__item__check"], inputs: { selected: "selected", disabled: "disabled", displayAsSwitch: "displayAsSwitch" }, outputs: { onSelect: "onSelect" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => ListItemCheckboxComponent)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 4, vars: 3, consts: [[3, "ngClass"], ["type", "checkbox", 1, "form-control", 3, "disabled", "checked", "change"]], template: function ListItemCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1);
        ɵngcc0.ɵɵlistener("change", function ListItemCheckboxComponent_Template_input_change_1_listener($event) { ctx.select($event.target.checked); return false; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(3);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.displayAsSwitch ? "c8y-switch c8y-switch--inline" : "c8y-checkbox");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("checked", ctx.selected);
    } }, directives: [ɵngcc7.NgClass], encapsulation: 2 });
ListItemCheckboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ListItemCheckboxComponent.propDecorators = {
    selected: [{ type: Input }],
    disabled: [{ type: Input }],
    onSelect: [{ type: Output }],
    displayAsSwitch: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-checkbox, c8y-li-checkbox',
                template: "<label [ngClass]=\"displayAsSwitch ? 'c8y-switch c8y-switch--inline' : 'c8y-checkbox'\">\n  <input\n    type=\"checkbox\"\n    class=\"form-control\"\n    [disabled]=\"disabled\"\n    [checked]=\"selected\"\n    (change)=\"select($event.target.checked); (false)\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-list__item__check'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => ListItemCheckboxComponent)
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { selected: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], displayAsSwitch: [{
            type: Input
        }] }); })();

/**
 * A component to display a radio button in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-radio></c8y-li-radio>
 * </c8y-li>
 * ```
 */
class ListItemRadioComponent {
    constructor() {
        /**
         * Indicates if the radio is selected.
         */
        this.selected = false;
        /**
         * The name of the radio (use different names for different radio groups).
         */
        this.name = 'list_item_radio';
        /**
         * Indicates if the radio is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the radio is selected.
         */
        this.onSelect = new EventEmitter();
    }
    /**
     * Resets the native radio element.
     */
    reset() {
        this.radio.nativeElement.checked = false;
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    }
    /**
     * Triggered when the radio is changed.
     * @param checked Should it be checked or not?
     */
    change(checked) {
        this.onSelect.emit(checked);
        this.model = this.value;
        if (this.onChange) {
            this.onChange(this.model);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    }
    /**
     * Registers an onChange event.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers an onTouch event.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @ignore
     */
    writeValue(value) {
        this.model = value;
    }
}
ListItemRadioComponent.ɵfac = function ListItemRadioComponent_Factory(t) { return new (t || ListItemRadioComponent)(); };
ListItemRadioComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemRadioComponent, selectors: [["c8y-list-item-radio"], ["c8y-li-radio"]], viewQuery: function ListItemRadioComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c48, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radio = _t.first);
    } }, hostAttrs: [1, "c8y-list__item__radio"], inputs: { selected: "selected", name: "name", disabled: "disabled", value: "value" }, outputs: { onSelect: "onSelect" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => ListItemRadioComponent)
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 5, vars: 3, consts: [[1, "c8y-radio"], ["type", "radio", 3, "name", "checked", "disabled", "change"], ["radio", ""]], template: function ListItemRadioComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("change", function ListItemRadioComponent_Template_input_change_1_listener($event) { ctx.change($event.target.checked); return false; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(4);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("checked", ctx.selected)("disabled", ctx.disabled);
    } }, encapsulation: 2 });
ListItemRadioComponent.propDecorators = {
    radio: [{ type: ViewChild, args: ['radio', { static: true },] }],
    selected: [{ type: Input }],
    name: [{ type: Input }],
    disabled: [{ type: Input }],
    onSelect: [{ type: Output }],
    value: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemRadioComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-radio, c8y-li-radio',
                template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-list__item__radio'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => ListItemRadioComponent)
                    }
                ]
            }]
    }], function () { return []; }, { selected: [{
            type: Input
        }], name: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], radio: [{
            type: ViewChild,
            args: ['radio', { static: true }]
        }], value: [{
            type: Input
        }] }); })();

class ListItemDragHandleComponent {
}
ListItemDragHandleComponent.ɵfac = function ListItemDragHandleComponent_Factory(t) { return new (t || ListItemDragHandleComponent)(); };
ListItemDragHandleComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemDragHandleComponent, selectors: [["c8y-list-item-drag-handle"], ["c8y-li-drag-handle"]], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ListItemDragHandleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemDragHandleComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-drag-handle, c8y-li-drag-handle',
                template: `<ng-content></ng-content>`
            }]
    }], null, null); })();

/**
 * The list-group module allows you to compose different styles
 * of lists used in Cumulocity IoT. They can consist of plain
 * text, actions, icons and more.
 *
 * @example
 * ```html
 * <c8y-list-group>
 *   <c8y-li>Item 1<c8y-li>
 *   <c8y-li>Item 2<c8y-li>
 * </c8y-list-group>
 * ```
 */
class ListGroupModule {
}
ListGroupModule.ɵfac = function ListGroupModule_Factory(t) { return new (t || ListGroupModule)(); };
ListGroupModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ListGroupModule });
ListGroupModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, CollapseModule.forRoot(), BsDropdownModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListGroupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, CollapseModule.forRoot(), BsDropdownModule],
                declarations: [
                    ListGroupComponent,
                    ListItemComponent,
                    ListItemIconComponent,
                    ListItemBodyComponent,
                    ListItemFooterComponent,
                    ListItemActionComponent,
                    ListItemCollapseComponent,
                    ListItemCheckboxComponent,
                    ListItemRadioComponent,
                    ListItemTimelineComponent,
                    ListItemDragHandleComponent
                ],
                exports: [
                    ListGroupComponent,
                    ListItemComponent,
                    ListItemIconComponent,
                    ListItemBodyComponent,
                    ListItemFooterComponent,
                    ListItemActionComponent,
                    ListItemCollapseComponent,
                    ListItemCheckboxComponent,
                    ListItemRadioComponent,
                    ListItemTimelineComponent,
                    ListItemDragHandleComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListGroupModule, { declarations: function () { return [ListGroupComponent, ListItemComponent, ListItemIconComponent, ListItemBodyComponent, ListItemFooterComponent, ListItemActionComponent, ListItemCollapseComponent, ListItemCheckboxComponent, ListItemRadioComponent, ListItemTimelineComponent, ListItemDragHandleComponent]; }, imports: function () { return [CommonModule, ɵngcc13.CollapseModule, BsDropdownModule]; }, exports: function () { return [ListGroupComponent, ListItemComponent, ListItemIconComponent, ListItemBodyComponent, ListItemFooterComponent, ListItemActionComponent, ListItemCollapseComponent, ListItemCheckboxComponent, ListItemRadioComponent, ListItemTimelineComponent, ListItemDragHandleComponent]; } }); })();

// tslint:disable: max-line-length
var DatapointLibraryValidationErrors;
(function (DatapointLibraryValidationErrors) {
    DatapointLibraryValidationErrors["IS_REQUIRED"] = "required";
    DatapointLibraryValidationErrors["PATTERN"] = "pattern";
    DatapointLibraryValidationErrors["SHOULD_CONTAIN_NUMBER"] = "number";
    DatapointLibraryValidationErrors["SHOULD_BE_DEFINED"] = "should-be-defined";
    DatapointLibraryValidationErrors["GREATER_THAN_SCALE_MAX"] = "greater-than-scale-max";
    DatapointLibraryValidationErrors["LESS_THAN_SCALE_MIN"] = "less-than-scale-min";
    DatapointLibraryValidationErrors["GREATER_THAN_RANGE_MAX"] = "greater-than-range-max";
    DatapointLibraryValidationErrors["LESS_THAN_RANGE_MIN"] = "less-than-range-min";
    DatapointLibraryValidationErrors["MIN_ACTIVE_COUNT"] = "minActiveCount";
    DatapointLibraryValidationErrors["MAX_ACTIVE_COUNT"] = "maxActiveCount";
})(DatapointLibraryValidationErrors || (DatapointLibraryValidationErrors = {}));
// @dynamic
class ValidationPattern {
    static get(key) {
        const pattern = this.rules[key];
        return pattern;
    }
}
ValidationPattern.messages = {
    deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
    domain: gettext('Only lowercase letters, digits and hyphens allowed in the first part of the URI. ' +
        'Must start with a letter; hyphens only allowed in the middle. Must be a valid URI.'),
    email: gettext('Invalid email address.'),
    emails: gettext('Invalid email addresses.'),
    internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
    loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
    max: gettext('Max value: {{ max }}'),
    min: gettext('Min value: {{ min }}'),
    minLength: gettext('Should have at least {{ minLength }} characters'),
    minlength: gettext('Should have at least {{ requiredLength }} characters'),
    maxLength: gettext('Should have at most {{ maxLength }} characters'),
    maxlength: gettext('Should have at most {{ requiredLength }} characters'),
    pattern: gettext('Does not match pattern {{ requiredPattern }}'),
    opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
    password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
    passwordConfirm: gettext('Passwords do not match.'),
    passwordStrength: gettext('Password not good enough, password must be stronger (green).'),
    phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
    required: gettext('This field is required.'),
    tenantId: gettext('May contain lowercase letters, digits, and hyphens. ' +
        'Must start with a letter; hyphens only allowed in the middle; minimum 2 characters.'),
    urlSegment: gettext('Slash, single or double dots and white space not allowed.'),
    user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
    noDots: gettext('Dots not allowed.'),
    [DatapointLibraryValidationErrors.SHOULD_CONTAIN_NUMBER]: gettext('This field must contain a number.'),
    [DatapointLibraryValidationErrors.SHOULD_BE_DEFINED]: gettext('Value must be defined.'),
    [DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX]: gettext('Value must be less than scale maximum.'),
    [DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN]: gettext('Value must be greater than scale minimum.'),
    [DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]: gettext('Value must be less than respective maximum.'),
    [DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]: gettext('Value must be greater than respective minimum.')
};
ValidationPattern.rules = {
    deviceId: {
        pattern: /^[^\s/]*$/
    },
    domain: {
        pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+\.{1}.+$/
    },
    groupName: {
        maxLength: 254
    },
    hostname: {
        pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
    },
    ip: {
        pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
    },
    opcuaBrowsePath: {
        pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
    },
    password: {
        pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
    },
    phoneNumber: {
        pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
    },
    tenantId: {
        pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+$/
    },
    user: {
        pattern: /^[^\\/\s$:+]*$/
    },
    urlSegment: {
        pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
    },
    loginAlias: {
        pattern: /^[^\\/$:+]*$/
    },
    noDots: {
        pattern: /^[^.]*$/
    }
};

class DefaultValidationDirective {
    constructor() {
        this.c8yDefaultValidation = '';
    }
    validate(control) {
        if (!control.value) {
            return null;
        }
        const validation = ValidationPattern.get(this.c8yDefaultValidation);
        if (!validation) {
            throw new Error(`Pattern ${this.c8yDefaultValidation} not found.`);
        }
        let valid = true;
        if (validation.pattern) {
            valid = validation.pattern.test(control.value);
        }
        if (validation.maxLength) {
            valid = control.value.length < validation.maxLength;
        }
        if (validation.minLength) {
            valid = control.value.length >= validation.minLength;
        }
        return valid ? null : { [this.c8yDefaultValidation]: true };
    }
}
DefaultValidationDirective.ɵfac = function DefaultValidationDirective_Factory(t) { return new (t || DefaultValidationDirective)(); };
DefaultValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DefaultValidationDirective, selectors: [["", "c8yDefaultValidation", ""]], inputs: { c8yDefaultValidation: "c8yDefaultValidation" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective, multi: true }])] });
DefaultValidationDirective.propDecorators = {
    c8yDefaultValidation: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yDefaultValidation]',
                providers: [{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective, multi: true }]
            }]
    }], function () { return []; }, { c8yDefaultValidation: [{
            type: Input
        }] }); })();

/**
 * A directive that adds the `emails` validator to controls marked with the
 * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * **Example**
 *
 * ```html
 * <input type="text" name="emails" ngModel emails>
 * <input type="text" name="emails" ngModel emails="true">
 * <input type="text" name="emails" ngModel [emails]="true">
 * ```
 */
class EmailsValidatorDirective {
    constructor() {
        this._enabled = false;
        this.separator = ',';
    }
    /**
     * Tracks changes to the emails attribute bound to this directive.
     */
    set emails(value) {
        this._enabled = value === '' || value === true || value === 'true';
        if (this._onChange) {
            this._onChange();
        }
    }
    /**
     * Method that validates whether email addresses are valid.
     * Returns the validation result if enabled, otherwise null.
     */
    validate(control) {
        if (!this._enabled) {
            return null;
        }
        const value = control.value || '';
        const emails = value.split(this.separator).map(email => email.trim());
        const invalid = emails.some(email => Validators.email(new FormControl(email)));
        return invalid ? { emails: true } : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
}
EmailsValidatorDirective.ɵfac = function EmailsValidatorDirective_Factory(t) { return new (t || EmailsValidatorDirective)(); };
EmailsValidatorDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: EmailsValidatorDirective, selectors: [["", "emails", "", "formControlName", ""], ["", "emails", "", "formControl", ""], ["", "emails", "", "ngModel", ""]], inputs: { emails: "emails" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }])] });
EmailsValidatorDirective.propDecorators = {
    emails: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmailsValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[emails][formControlName],[emails][formControl],[emails][ngModel]',
                providers: [{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }]
            }]
    }], function () { return []; }, { emails: [{
            type: Input
        }] }); })();

class FilterInputComponent {
    constructor() {
        this.onSearch = new EventEmitter();
        this.filterChange$ = new Subject();
        this.filterTerm = '';
        this.CARRIAGE_RETURN_KEY = 13;
        this.CARRIAGE_RETURN_CODE = 'Enter';
    }
    ngOnInit() {
        this.reset();
        this.filterChange$
            .pipe(debounce((event) => event.code === this.CARRIAGE_RETURN_CODE || event.keyCode === this.CARRIAGE_RETURN_KEY
            ? timer(10)
            : timer(300)), map((e) => e.target.value), distinctUntilChanged())
            .subscribe(filterTerm => {
            this.filterTerm = filterTerm;
            this.onSearch.emit(filterTerm);
        });
    }
    reset() {
        this.filterTerm = '';
        this.onSearch.emit('');
    }
    ngOnDestroy() {
        this.filterChange$.complete();
    }
}
FilterInputComponent.ɵfac = function FilterInputComponent_Factory(t) { return new (t || FilterInputComponent)(); };
FilterInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FilterInputComponent, selectors: [["c8y-filter"]], inputs: { icon: "icon" }, outputs: { onSearch: "onSearch" }, decls: 6, vars: 5, consts: [[1, "input-group", "input-group-search"], ["type", "text", "px-event", "Filter\u2026", 1, "form-control", 3, "placeholder", "value", "keyup"], [1, "input-group-btn"], ["px-event", "Clear filtering", 1, "btn", "btn-clean", 3, "click"], [3, "c8yIcon"]], template: function FilterInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1);
        ɵngcc0.ɵɵlistener("keyup", function FilterInputComponent_Template_input_keyup_1_listener($event) { return ctx.filterChange$.next($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "span", 2);
        ɵngcc0.ɵɵelementStart(4, "button", 3);
        ɵngcc0.ɵɵlistener("click", function FilterInputComponent_Template_button_click_4_listener() { return ctx.reset(); });
        ɵngcc0.ɵɵelement(5, "i", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 3, "Filter\u2026"));
        ɵngcc0.ɵɵproperty("value", ctx.filterTerm);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.filterTerm.length === 0 ? "search" : "close");
    } }, directives: [IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
FilterInputComponent.propDecorators = {
    icon: [{ type: Input }],
    onSearch: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilterInputComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-filter',
                template: "<div class=\"input-group input-group-search\">\n  <input\n    class=\"form-control\"\n    placeholder=\"{{ 'Filter\u2026' | translate }}\"\n    type=\"text\"\n    [value]=\"filterTerm\"\n    (keyup)=\"filterChange$.next($event)\"\n    px-event=\"Filter\u2026\"\n  />\n  <span class=\"input-group-btn\">\n    <button class=\"btn btn-clean\" px-event=\"Clear filtering\" (click)=\"reset()\">\n      <i [c8yIcon]=\"filterTerm.length === 0 ? 'search' : 'close'\"></i>\n    </button>\n  </span>\n</div>\n"
            }]
    }], function () { return []; }, { onSearch: [{
            type: Output
        }], icon: [{
            type: Input
        }] }); })();

class MessageDirective {
}
MessageDirective.ɵfac = function MessageDirective_Factory(t) { return new (t || MessageDirective)(); };
MessageDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MessageDirective, selectors: [["c8y-message"]], inputs: { name: "name", text: "text" } });
MessageDirective.propDecorators = {
    name: [{ type: Input }],
    text: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MessageDirective, [{
        type: Directive,
        args: [{
                selector: 'c8y-message'
            }]
    }], null, { name: [{
            type: Input
        }], text: [{
            type: Input
        }] }); })();

class MessagesComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.show = {};
        this.defaults = ValidationPattern.messages;
        this.messages = [];
        this.messageMap = {};
    }
    ngAfterContentInit() {
        this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce((messages, directive) => {
            messages[directive.name] = directive.text;
            return messages;
        }, {}));
    }
    changVisibility(show) {
        this.show = show;
        this.ngOnChanges();
    }
    ngOnChanges() {
        if (this.show) {
            this.messages = Object.keys(this.show)
                .map((key) => this.toMessage(key, this.show[key]))
                // if an null message is returned, it will not be displayed
                .filter(message => message !== null);
        }
        else {
            this.messages = [];
        }
    }
    toMessage(key, value) {
        let message = this.messageMap[key];
        if ((!message || message === ValidationPattern.messages.pattern) && key === 'pattern' && typeof (value === null || value === void 0 ? void 0 : value.requiredPattern) === 'string') {
            const pattern = value.requiredPattern.replace(/^\//, '').replace(/\/$/, '');
            const foundPattern = Object.keys(ValidationPattern.rules).find(tmp => { var _a; return ((_a = ValidationPattern.rules[tmp].pattern) === null || _a === void 0 ? void 0 : _a.source) === pattern; });
            if (foundPattern) {
                key = foundPattern;
                message = this.messageMap[key];
            }
        }
        if (!message) {
            return null;
        }
        return this.translateService.instant(message, value);
    }
}
MessagesComponent.ɵfac = function MessagesComponent_Factory(t) { return new (t || MessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService)); };
MessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MessagesComponent, selectors: [["c8y-messages"]], contentQueries: function MessagesComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MessageDirective, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customMessages = _t);
    } }, inputs: { show: "show", defaults: "defaults" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 3, vars: 1, consts: [[1, "form-control-feedback-message"], ["class", "d-block", 4, "ngFor", "ngForOf"], [1, "d-block"]], template: function MessagesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "small", 0);
        ɵngcc0.ɵɵtemplate(1, MessagesComponent_div_1_Template, 3, 3, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.messages);
    } }, directives: [ɵngcc7.NgForOf], pipes: [C8yTranslatePipe], encapsulation: 2 });
MessagesComponent.ctorParameters = () => [
    { type: TranslateService$1 }
];
MessagesComponent.propDecorators = {
    show: [{ type: Input }],
    defaults: [{ type: Input }],
    customMessages: [{ type: ContentChildren, args: [MessageDirective,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MessagesComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-messages',
                template: "<small class=\"form-control-feedback-message\">\n  <div class=\"d-block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
            }]
    }], function () { return [{ type: ɵngcc4.TranslateService }]; }, { show: [{
            type: Input
        }], defaults: [{
            type: Input
        }], customMessages: [{
            type: ContentChildren,
            args: [MessageDirective]
        }] }); })();

/**
 * A form group helps to validate an input of a form element.
 *
 * ## Example:
 *
 * ```html
 *  <c8y-form-group [hasWarning]="user.email.length === 0">
 *   <label translate for="userEmail">Email</label>
 *   <input
 *     id="userEmail"
 *     class="form-control"
 *     type="email"
 *     name="email"
 *     [maxlength]="254"
 *     autocomplete="off"
 *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
 *     [(ngModel)]="user.email"
 *     email
 *     required
 *   >
 *   <c8y-messages>
 *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
 *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
 *   </c8y-messages>
 *  </c8y-form-group>
 * ```
 *
 * @param status The current status could be error, warning or success.
 * @param hasError Set this to true to display a error.
 * @param hasWarning Set this to true to display a warning.
 * @param hasSuccess Set this to true to display a success.
 * @param novalidation Set this to true to disable automatic validation by this component.
 */
class FormGroupComponent {
    constructor() {
        this.hasError = false;
        this.hasWarning = false;
        this.hasSuccess = false;
        this.novalidation = false;
        this.destroyed$ = new Subject();
        this.VALIDATION_DEBOUNCE_MS = 1000;
    }
    get error() {
        return this.status === 'error' || this.hasError;
    }
    get warning() {
        return this.status === 'warning' || this.hasWarning;
    }
    get success() {
        return this.status === 'success' || this.hasSuccess;
    }
    ngAfterContentInit() {
        this.initNgModel();
        this.initFormControl();
    }
    initNgModel() {
        if (this.model) {
            this.model.valueAccessor.registerOnTouched(() => {
                if (this.model.control && !this.model.control.dirty) {
                    this.model.control.markAsDirty();
                    this.model.control.updateValueAndValidity({ onlySelf: true });
                }
            });
            this.subscribeForChanges(this.model);
        }
    }
    initFormControl() {
        if (this.formControlName) {
            this.subscribeForChanges(this.formControlName.control);
        }
    }
    subscribeForChanges(control) {
        merge(control.valueChanges, control.statusChanges)
            .pipe(filter(() => control.dirty && !this.novalidation), debounce(() => (this.hasError ? timer(10) : timer(this.VALIDATION_DEBOUNCE_MS))), takeUntil(this.destroyed$))
            .subscribe(() => this.update(control));
    }
    update(control) {
        this.hasError = control.status === 'INVALID';
        if (this.customErrorMessage) {
            this.customErrorMessage.changVisibility(control.errors);
        }
        else {
            this.errors = control.errors;
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
FormGroupComponent.ɵfac = function FormGroupComponent_Factory(t) { return new (t || FormGroupComponent)(); };
FormGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormGroupComponent, selectors: [["c8y-form-group"]], contentQueries: function FormGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MessagesComponent, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgModel, 7);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FormControlName, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customErrorMessage = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.model = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formControlName = _t.first);
    } }, hostAttrs: [1, "form-group"], hostVars: 6, hostBindings: function FormGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-error", ctx.error)("has-warning", ctx.warning)("has-success", ctx.success);
    } }, inputs: { hasError: "hasError", hasWarning: "hasWarning", hasSuccess: "hasSuccess", novalidation: "novalidation", status: "status" }, ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[3, "show", 4, "ngIf"], [3, "show"]], template: function FormGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, FormGroupComponent_c8y_messages_1_Template, 1, 1, "c8y-messages", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.customErrorMessage);
    } }, directives: [ɵngcc7.NgIf, MessagesComponent], encapsulation: 2 });
FormGroupComponent.propDecorators = {
    hasError: [{ type: Input }],
    hasWarning: [{ type: Input }],
    hasSuccess: [{ type: Input }],
    novalidation: [{ type: Input }],
    status: [{ type: Input }],
    error: [{ type: HostBinding, args: ['class.has-error',] }],
    warning: [{ type: HostBinding, args: ['class.has-warning',] }],
    success: [{ type: HostBinding, args: ['class.has-success',] }],
    customErrorMessage: [{ type: ContentChild, args: [MessagesComponent, { static: false },] }],
    model: [{ type: ContentChild, args: [NgModel, { static: true },] }],
    formControlName: [{ type: ContentChild, args: [FormControlName, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormGroupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-form-group',
                template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
                host: {
                    class: 'form-group'
                }
            }]
    }], function () { return []; }, { hasError: [{
            type: Input
        }], hasWarning: [{
            type: Input
        }], hasSuccess: [{
            type: Input
        }], novalidation: [{
            type: Input
        }], error: [{
            type: HostBinding,
            args: ['class.has-error']
        }], warning: [{
            type: HostBinding,
            args: ['class.has-warning']
        }], success: [{
            type: HostBinding,
            args: ['class.has-success']
        }], status: [{
            type: Input
        }], customErrorMessage: [{
            type: ContentChild,
            args: [MessagesComponent, { static: false }]
        }], model: [{
            type: ContentChild,
            args: [NgModel, { static: true }]
        }], formControlName: [{
            type: ContentChild,
            args: [FormControlName, { static: true }]
        }] }); })();

class InputGroupListComponent {
    constructor() {
        this.plus = true;
        this.minus = true;
        this.onRemove = new EventEmitter();
        this.onAdd = new EventEmitter();
    }
    add() {
        this.onAdd.emit(this.index);
    }
    remove() {
        this.onRemove.emit(this.index);
    }
}
InputGroupListComponent.ɵfac = function InputGroupListComponent_Factory(t) { return new (t || InputGroupListComponent)(); };
InputGroupListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: InputGroupListComponent, selectors: [["c8y-input-group-list"]], inputs: { plus: "plus", minus: "minus", index: "index" }, outputs: { onRemove: "onRemove", onAdd: "onAdd" }, ngContentSelectors: _c1, decls: 6, vars: 2, consts: [[1, "input-group"], [1, "input-group-btn"], ["class", "btn btn-clean text-primary", 3, "title", "click", 4, "ngIf"], [1, "btn", "btn-clean", "text-primary", 3, "title", "click"], ["c8yIcon", "minus-circle", 1, "text-danger"], ["c8yIcon", "plus-circle"]], template: function InputGroupListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵtemplate(4, InputGroupListComponent_button_4_Template, 3, 3, "button", 2);
        ɵngcc0.ɵɵtemplate(5, InputGroupListComponent_button_5_Template, 3, 3, "button", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.minus);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.plus);
    } }, directives: [ɵngcc7.NgIf, IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
InputGroupListComponent.propDecorators = {
    plus: [{ type: Input }],
    minus: [{ type: Input }],
    index: [{ type: Input }],
    onRemove: [{ type: Output }],
    onAdd: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputGroupListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-input-group-list',
                template: "<ng-container>\n  <div class=\"input-group\">\n    <ng-content></ng-content>\n    <div class=\"input-group-btn\">\n      <button\n        *ngIf=\"minus\"\n        title=\"{{ 'Remove' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"remove()\"\n      >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n      </button>\n      <button\n        *ngIf=\"plus\"\n        title=\"{{ 'Add' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"add()\"\n      >\n        <i c8yIcon=\"plus-circle\"></i>\n      </button>\n    </div>\n  </div>\n</ng-container>\n"
            }]
    }], function () { return []; }, { plus: [{
            type: Input
        }], minus: [{
            type: Input
        }], onRemove: [{
            type: Output
        }], onAdd: [{
            type: Output
        }], index: [{
            type: Input
        }] }); })();

class InputGroupListContainerDirective {
    ngAfterContentInit() {
        this.listProjections.map(element => {
            if (element !== this.listProjections.last) {
                setTimeout(() => {
                    element.plus = false;
                });
            }
        });
        this.listProjections.changes.subscribe(elements => {
            if (elements.length === 1) {
                setTimeout(() => {
                    elements.first.plus = true;
                    elements.first.minus = false;
                });
                return;
            }
            elements.map(element => {
                setTimeout(() => {
                    element.minus = true;
                });
                if (element !== elements.last) {
                    setTimeout(() => {
                        element.plus = false;
                    });
                }
                if (element === elements.last) {
                    setTimeout(() => {
                        element.plus = true;
                    });
                }
            });
        });
    }
}
InputGroupListContainerDirective.ɵfac = function InputGroupListContainerDirective_Factory(t) { return new (t || InputGroupListContainerDirective)(); };
InputGroupListContainerDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: InputGroupListContainerDirective, selectors: [["", "c8yInputGroupListContainer", ""]], contentQueries: function InputGroupListContainerDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, InputGroupListComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listProjections = _t);
    } } });
InputGroupListContainerDirective.propDecorators = {
    listProjections: [{ type: ContentChildren, args: [InputGroupListComponent,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputGroupListContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yInputGroupListContainer]'
            }]
    }], null, { listProjections: [{
            type: ContentChildren,
            args: [InputGroupListComponent]
        }] }); })();

class IpRangeInputListComponent {
    set data(list) {
        this.ipRangeList = list;
        if (this.ipRangeList.length === 0) {
            this.add();
        }
    }
    get data() {
        return this.ipRangeList;
    }
    add() {
        this.ipRangeList.push({ ip: '', cidr: undefined });
    }
    remove(index) {
        this.ipRangeList.splice(index, 1);
    }
}
IpRangeInputListComponent.ɵfac = function IpRangeInputListComponent_Factory(t) { return new (t || IpRangeInputListComponent)(); };
IpRangeInputListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: IpRangeInputListComponent, selectors: [["c8y-ip-range-input-list"]], inputs: { data: "data" }, decls: 3, vars: 1, consts: [[1, "m-t-8", "m-b-8"], ["c8yInputGroupListContainer", "", 1, "list-unstyled"], ["class", "m-b-8", 4, "ngFor", "ngForOf"], [1, "m-b-8"], [3, "index", "onAdd", "onRemove"], ["type", "text", "name", "ipAddress", 1, "form-control", "m-r-4", 2, "flex-grow", "2", 3, "placeholder", "ngModel", "required", "ngModelChange"], ["ipAddress", ""], ["type", "number", "name", "cidr", 1, "form-control", 3, "min", "placeholder", "ngModel", "required", "ngModelChange"], ["cidr", ""]], template: function IpRangeInputListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-form-group", 0);
        ɵngcc0.ɵɵelementStart(1, "ul", 1);
        ɵngcc0.ɵɵtemplate(2, IpRangeInputListComponent_li_2_Template, 8, 12, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.data);
    } }, directives: function () { return [FormGroupComponent, InputGroupListContainerDirective, ɵngcc7.NgForOf, InputGroupListComponent, ɵngcc14.DefaultValueAccessor, RequiredInputPlaceholderDirective, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc14.RequiredValidator, ɵngcc14.MinValidator, ɵngcc14.NumberValueAccessor, MinValidationDirective]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
IpRangeInputListComponent.propDecorators = {
    data: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IpRangeInputListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-ip-range-input-list',
                template: "<c8y-form-group class=\"m-t-8 m-b-8\">\n  <ul c8yInputGroupListContainer class=\"list-unstyled\">\n    <li class=\"m-b-8\" *ngFor=\"let item of data; let i = index\">\n      <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n        <input\n          type=\"text\"\n          name=\"ipAddress\"\n          class=\"form-control m-r-4\"\n          placeholder=\"{{ 'IP range start, e.g.' | translate }} 192.168.0.1\"\n          style=\"flex-grow: 2\"\n          [(ngModel)]=\"item.ip\"\n          [required]=\"true\"\n          #ipAddress\n        />\n        <input\n          type=\"number\"\n          name=\"cidr\"\n          [min]=\"0\"\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 20\"\n          [(ngModel)]=\"item.cidr\"\n          [required]=\"true\"\n          #cidr\n        />\n      </c8y-input-group-list>\n    </li>\n  </ul>\n</c8y-form-group>\n"
            }]
    }], null, { data: [{
            type: Input
        }] }); })();

class JsonValidationPrettifierDirective {
    constructor(ngCtrl) {
        this.invalidJSON = new EventEmitter();
        this.message = gettext('Must be a valid JSON object.');
        this.debounceTimeInMs = 1000;
        this.abstractCtrl = ngCtrl.control;
    }
    ngOnInit() {
        this.subscription = this.abstractCtrl.valueChanges
            .pipe(tap(() => this.clearValidationMessage()), debounceTime(this.debounceTimeInMs), distinctUntilChanged())
            .subscribe(value => {
            this.validateInputAndPrettify(value);
        });
    }
    ngOnDestroy() {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    }
    validateInputAndPrettify(value) {
        if (value) {
            try {
                const validJsonObject = JSON.parse(value);
                const pretty = JSON.stringify(validJsonObject, undefined, 2);
                this.abstractCtrl.setValue(pretty);
            }
            catch (ex) {
                this.setErrorAndValidationMessage();
            }
        }
    }
    setErrorAndValidationMessage() {
        this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
        this.invalidJSON.emit(this.message);
    }
    clearValidationMessage() {
        this.invalidJSON.emit(undefined);
    }
}
JsonValidationPrettifierDirective.ɵfac = function JsonValidationPrettifierDirective_Factory(t) { return new (t || JsonValidationPrettifierDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc14.NgControl)); };
JsonValidationPrettifierDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: JsonValidationPrettifierDirective, selectors: [["textarea", "prettyValidJson", ""]], outputs: { invalidJSON: "invalidJSON" } });
JsonValidationPrettifierDirective.ctorParameters = () => [
    { type: NgControl }
];
JsonValidationPrettifierDirective.propDecorators = {
    invalidJSON: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonValidationPrettifierDirective, [{
        type: Directive,
        args: [{
                selector: 'textarea[prettyValidJson]'
            }]
    }], function () { return [{ type: ɵngcc14.NgControl }]; }, { invalidJSON: [{
            type: Output
        }] }); })();

class MaxValidationDirective {
    constructor() {
        this.max = '';
    }
    validate(control) {
        const parsedMax = typeof this.max === 'number' ? this.max : parseFloat(this.max);
        if (isUndefined(control.value) || !isFinite(parsedMax)) {
            return null;
        }
        const valid = !(control.value > parsedMax);
        return valid ? null : { max: { max: parsedMax, actual: control.value } };
    }
}
MaxValidationDirective.ɵfac = function MaxValidationDirective_Factory(t) { return new (t || MaxValidationDirective)(); };
MaxValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MaxValidationDirective, selectors: [["", "max", ""]], inputs: { max: "max" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: MaxValidationDirective, multi: true }])] });
MaxValidationDirective.propDecorators = {
    max: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaxValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[max]',
                providers: [{ provide: NG_VALIDATORS, useExisting: MaxValidationDirective, multi: true }]
            }]
    }], function () { return []; }, { max: [{
            type: Input
        }] }); })();

class MinValidationDirective {
    constructor() {
        this.min = '';
    }
    validate(control) {
        const parsedMin = typeof this.min === 'number' ? this.min : parseFloat(this.min);
        if (isUndefined(control.value) || !isFinite(parsedMin)) {
            return null;
        }
        const valid = (control.value !== null) ? !(control.value < parsedMin) : true;
        return valid ? null : { min: { min: parsedMin, actual: control.value } };
    }
}
MinValidationDirective.ɵfac = function MinValidationDirective_Factory(t) { return new (t || MinValidationDirective)(); };
MinValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MinValidationDirective, selectors: [["", "min", ""]], inputs: { min: "min" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: MinValidationDirective, multi: true }])] });
MinValidationDirective.propDecorators = {
    min: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MinValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[min]',
                providers: [{ provide: NG_VALIDATORS, useExisting: MinValidationDirective, multi: true }]
            }]
    }], function () { return []; }, { min: [{
            type: Input
        }] }); })();

class PhoneValidationDirective {
    validate(control) {
        const valid = this.validateInternationalPhoneNumber(control);
        return valid ? null : { internationalPhoneNumber: true };
    }
    validateInternationalPhoneNumber(control) {
        let numberValid;
        try {
            const phoneNumber = parsePhoneNumberFromString(control.value);
            numberValid = phoneNumber.isValid();
            if (numberValid && control.value !== phoneNumber.format('E.164')) {
                control.setValue(phoneNumber.format('E.164'), {
                    emitEvent: false,
                    emitModelToViewChange: false
                });
            }
        }
        catch (e) {
            numberValid = !control.value;
        }
        return numberValid;
    }
}
PhoneValidationDirective.ɵfac = function PhoneValidationDirective_Factory(t) { return new (t || PhoneValidationDirective)(); };
PhoneValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PhoneValidationDirective, selectors: [["", "c8yPhoneValidation", ""]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: PhoneValidationDirective, multi: true }])] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PhoneValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yPhoneValidation]',
                providers: [{ provide: NG_VALIDATORS, useExisting: PhoneValidationDirective, multi: true }]
            }]
    }], null, null); })();

class RangeDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
RangeDirective.ɵfac = function RangeDirective_Factory(t) { return new (t || RangeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
RangeDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: RangeDirective, selectors: [["input", "type", "range"]] });
RangeDirective.ctorParameters = () => [
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RangeDirective, [{
        type: Directive,
        args: [{
                selector: 'input[type="range"]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();

/**
 * An component which renders a range slider in Cumulocity layout. You need
 * to wrap the default range input in this component.
 *
 * Example:
 * ```
 * <c8y-range>
 *   <input id="range" type="range" min="0" max="100000" value="0" step="1">
 * </c8y-range>
 * ```
 */
class RangeComponent {
    constructor() {
        this.changeEventListener = () => this.setValue();
    }
    ngAfterContentInit() {
        this.setValue();
        this.range.elementRef.nativeElement.addEventListener('input', this.changeEventListener);
    }
    ngOnDestroy() {
        this.range.elementRef.nativeElement.removeEventListener('input', this.changeEventListener);
    }
    setValue() {
        const range = this.range.elementRef.nativeElement;
        const newValue = Number(((range.value - range.min) * 100) / (range.max - range.min));
        const newPosition = 12 - newValue * 0.24;
        this.value = range.value;
        this.left = `calc(${newValue}% + (${newPosition}px))`;
    }
}
RangeComponent.ɵfac = function RangeComponent_Factory(t) { return new (t || RangeComponent)(); };
RangeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RangeComponent, selectors: [["c8y-range"]], contentQueries: function RangeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, RangeDirective, 7);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c49, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.range = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rangeValue = _t.first);
    } }, ngContentSelectors: _c1, decls: 5, vars: 7, consts: [[1, "range-wrap"], [1, "range-value"], [4, "ngIf"], [4, "ngTemplateOutlet"]], template: function RangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, RangeComponent_span_2_Template, 2, 1, "span", 2);
        ɵngcc0.ɵɵtemplate(3, RangeComponent_ng_container_3_Template, 1, 0, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleMapInterpolate1("--track-width: ", ctx.left, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("left", ctx.left);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.rangeValue);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.rangeValue);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet], encapsulation: 2 });
RangeComponent.propDecorators = {
    range: [{ type: ContentChild, args: [RangeDirective, { static: true },] }],
    rangeValue: [{ type: ContentChild, args: ['c8yRangeValue', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RangeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-range',
                template: "<div class=\"range-wrap\" style=\"--track-width: {{left}}\">\n  <div class=\"range-value\" [style.left]=\"left\">\n    <span *ngIf=\"!rangeValue\">{{ value }}</span>\n    <ng-container *ngTemplateOutlet=\"rangeValue\"></ng-container>\n  </div>\n  <ng-content></ng-content>\n</div>\n"
            }]
    }], function () { return []; }, { range: [{
            type: ContentChild,
            args: [RangeDirective, { static: true }]
        }], rangeValue: [{
            type: ContentChild,
            args: ['c8yRangeValue', { static: true }]
        }] }); })();

class RequiredInputPlaceholderDirective {
    constructor(el, renderer, translationService, ngControl) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.ngControl = ngControl;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    ngAfterViewChecked() {
        var _a, _b, _c, _d, _e, _f, _g;
        if (((_b = (_a = this.el) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.required) !== undefined || ((_c = this.ngControl) === null || _c === void 0 ? void 0 : _c.control)) {
            const isRequired = ((_e = (_d = this.el) === null || _d === void 0 ? void 0 : _d.nativeElement) === null || _e === void 0 ? void 0 : _e.required) ||
                ((_g = (_f = this.ngControl) === null || _f === void 0 ? void 0 : _f.control) === null || _g === void 0 ? void 0 : _g.hasValidator(Validators.required));
            const willSetRequiredHint = isRequired && !this.shouldSkipRequiredHint;
            const placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== willSetRequiredHint) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, willSetRequiredHint));
            }
        }
    }
    getTextForPlaceholder(placeholder = '', required = false) {
        this.req = required;
        const requiredText = `(${this.translationService.instant(gettext('required'))})`;
        const requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? `${placeholder} ${requiredText}` : requiredText;
    }
    updatePlaceholder(placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    }
}
RequiredInputPlaceholderDirective.ɵfac = function RequiredInputPlaceholderDirective_Factory(t) { return new (t || RequiredInputPlaceholderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc14.NgControl, 8)); };
RequiredInputPlaceholderDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: RequiredInputPlaceholderDirective, selectors: [["input", "required", ""], ["input", "formControlName", ""]] });
RequiredInputPlaceholderDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TranslateService$1 },
    { type: NgControl, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RequiredInputPlaceholderDirective, [{
        type: Directive,
        args: [{
                selector: 'input[required], input[formControlName]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc4.TranslateService }, { type: ɵngcc14.NgControl, decorators: [{
                type: Optional
            }] }]; }, null); })();

class TextAreaRowHeightDirective {
    constructor(elem, renderer) {
        this.elem = elem;
        this.renderer = renderer;
        this.rows = 1;
        this.minHeightPerRow = 20;
    }
    ngAfterViewInit() {
        const convertedValue = Number(this.heightPerRow);
        if (this.heightPerRow && convertedValue && convertedValue > this.minHeightPerRow) {
            this.setHeight(`${this.rows * convertedValue}px`);
        }
        else {
            this.setHeight(`${this.rows * this.minHeightPerRow}px`);
        }
    }
    setHeight(value) {
        this.renderer.setStyle(this.elem.nativeElement, 'height', value);
    }
}
TextAreaRowHeightDirective.ɵfac = function TextAreaRowHeightDirective_Factory(t) { return new (t || TextAreaRowHeightDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
TextAreaRowHeightDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TextAreaRowHeightDirective, selectors: [["textarea", "heightPerRow", ""]], hostVars: 1, hostBindings: function TextAreaRowHeightDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("rows", ctx.rows);
    } }, inputs: { rows: "rows", heightPerRow: "heightPerRow" } });
TextAreaRowHeightDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TextAreaRowHeightDirective.propDecorators = {
    rows: [{ type: Input }, { type: HostBinding, args: ['rows',] }],
    heightPerRow: [{ type: Input, args: ['heightPerRow',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextAreaRowHeightDirective, [{
        type: Directive,
        args: [{
                selector: 'textarea[heightPerRow]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { rows: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['rows']
        }], heightPerRow: [{
            type: Input,
            args: ['heightPerRow']
        }] }); })();

class UniqueInCollectionByPathValidationDirective {
    validate(control) {
        const match = find$1(this.collection, element => isEqualWith(get(element, this.path), control.value, this.comparator));
        return !!match && !!control.value
            ? { uniqueByPath: { key: this.path, value: get(match, this.path) } }
            : null;
    }
}
UniqueInCollectionByPathValidationDirective.ɵfac = function UniqueInCollectionByPathValidationDirective_Factory(t) { return new (t || UniqueInCollectionByPathValidationDirective)(); };
UniqueInCollectionByPathValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: UniqueInCollectionByPathValidationDirective, selectors: [["", "uniqueByPath", ""]], inputs: { collection: "collection", path: "path", comparator: "comparator" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALIDATORS,
                useExisting: UniqueInCollectionByPathValidationDirective,
                multi: true
            }
        ])] });
UniqueInCollectionByPathValidationDirective.propDecorators = {
    collection: [{ type: Input }],
    path: [{ type: Input }],
    comparator: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UniqueInCollectionByPathValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[uniqueByPath]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: UniqueInCollectionByPathValidationDirective,
                        multi: true
                    }
                ]
            }]
    }], null, { collection: [{
            type: Input
        }], path: [{
            type: Input
        }], comparator: [{
            type: Input
        }] }); })();

/**
 * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
 * @exports PhoneValidationDirective Allows to validate international phone numbers.
 * @exports NewsletterDirective Allows to subscribe to the newsletter.
 * @exports DefaultValidationDirective Allows to validate some predefined patterns.
 * @exports MessageDirective A directive that allows to define messages.
 * @exports MessagesComponent Allows to display error messages.
 * @exports RangeComponent A component that allows to display a styled range slider.
 */
class FormsModule {
}
FormsModule.ɵfac = function FormsModule_Factory(t) { return new (t || FormsModule)(); };
FormsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FormsModule });
FormsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, FormsModule$1, ReactiveFormsModule, PopoverModule], FormsModule$1] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormsModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule$1, ReactiveFormsModule, PopoverModule],
                exports: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    FormsModule$1,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    FilterInputComponent,
                    EmailsValidatorDirective,
                    RangeDirective,
                    RangeComponent,
                    UniqueInCollectionByPathValidationDirective
                ],
                declarations: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    FilterInputComponent,
                    EmailsValidatorDirective,
                    RangeDirective,
                    RangeComponent,
                    UniqueInCollectionByPathValidationDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormsModule, { declarations: function () { return [PhoneValidationDirective, DefaultValidationDirective, MinValidationDirective, MaxValidationDirective, FormGroupComponent, MessageDirective, MessagesComponent, InputGroupListComponent, InputGroupListContainerDirective, JsonValidationPrettifierDirective, TextAreaRowHeightDirective, RequiredInputPlaceholderDirective, IpRangeInputListComponent, FilterInputComponent, EmailsValidatorDirective, RangeDirective, RangeComponent, UniqueInCollectionByPathValidationDirective]; }, imports: function () { return [CommonModule, FormsModule$1, ReactiveFormsModule, PopoverModule]; }, exports: function () { return [PhoneValidationDirective, DefaultValidationDirective, MinValidationDirective, MaxValidationDirective, FormsModule$1, FormGroupComponent, MessageDirective, MessagesComponent, InputGroupListComponent, InputGroupListContainerDirective, JsonValidationPrettifierDirective, TextAreaRowHeightDirective, RequiredInputPlaceholderDirective, IpRangeInputListComponent, FilterInputComponent, EmailsValidatorDirective, RangeDirective, RangeComponent, UniqueInCollectionByPathValidationDirective]; } }); })();

/**
 * The angular module definition for a select.
 * @exports SelectComponent
 */
class SelectModule {
}
SelectModule.ɵfac = function SelectModule_Factory(t) { return new (t || SelectModule)(); };
SelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SelectModule });
SelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            BsDropdownModule.forRoot(),
            CommonModule,
            ListGroupModule,
            FormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectModule, [{
        type: NgModule,
        args: [{
                imports: [
                    BsDropdownModule.forRoot(),
                    CommonModule,
                    ListGroupModule,
                    FormsModule
                ],
                exports: [
                    SelectComponent,
                    TypeaheadComponent
                ],
                declarations: [
                    SelectComponent,
                    TypeaheadComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SelectModule, { declarations: [SelectComponent, TypeaheadComponent], imports: [ɵngcc9.BsDropdownModule, CommonModule, ListGroupModule, FormsModule], exports: [SelectComponent, TypeaheadComponent] }); })();

// TODO remove  when c8y-icon will works
var SendStatus;
(function (SendStatus) {
    SendStatus["AVAILABLE"] = "AVAILABLE";
    SendStatus["UNAVAILABLE"] = "UNAVAILABLE";
    SendStatus["UNKNOWN"] = "UNKNOWN";
    SendStatus["MAINTENANCE"] = "MAINTENANCE";
    SendStatus["NOT_MONITORED"] = "NOT_MONITORED";
})(SendStatus || (SendStatus = {}));
var PushStatus;
(function (PushStatus) {
    PushStatus["CONNECTED"] = "CONNECTED";
    PushStatus["DISCONNECTED"] = "DISCONNECTED";
    PushStatus["UNKNOWN"] = "UNKNOWN";
    PushStatus["MAINTENANCE"] = "MAINTENANCE";
})(PushStatus || (PushStatus = {}));
var SendStatusLabels;
(function (SendStatusLabels) {
    SendStatusLabels[SendStatusLabels["AVAILABLE"] = gettext('Send connection: online')] = "AVAILABLE";
    SendStatusLabels[SendStatusLabels["NOT_MONITORED"] = gettext('Send connection: not monitored')] = "NOT_MONITORED";
    SendStatusLabels[SendStatusLabels["UNAVAILABLE"] = gettext('Send connection: offline')] = "UNAVAILABLE";
    SendStatusLabels[SendStatusLabels["UNKNOWN"] = gettext('Send connection status unknown')] = "UNKNOWN";
    SendStatusLabels[SendStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(SendStatusLabels || (SendStatusLabels = {}));
var PushStatusLabels;
(function (PushStatusLabels) {
    PushStatusLabels[PushStatusLabels["CONNECTED"] = gettext('Push connection: active')] = "CONNECTED";
    PushStatusLabels[PushStatusLabels["DISCONNECTED"] = gettext('Push connection: inactive')] = "DISCONNECTED";
    PushStatusLabels[PushStatusLabels["UNKNOWN"] = gettext('Push connection: inactive')] = "UNKNOWN";
    PushStatusLabels[PushStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(PushStatusLabels || (PushStatusLabels = {}));
const deviceAvailabilityIconMap = {
    sendData: {
        [SendStatus.AVAILABLE]: {
            icon: 'long-arrow-right',
            class: 'statusOk'
        },
        [SendStatus.UNAVAILABLE]: {
            icon: 'long-arrow-right',
            class: 'statusNok'
        },
        [SendStatus.UNKNOWN]: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        [SendStatus.NOT_MONITORED]: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        }
    },
    push: {
        [PushStatus.CONNECTED]: {
            icon: 'long-arrow-left',
            class: 'statusOk'
        },
        [PushStatus.DISCONNECTED]: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        [PushStatus.UNKNOWN]: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        [PushStatus.MAINTENANCE]: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    },
    device: {
        MAINTENANCE: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    }
};
const ɵ0$4 = (lastMessage, translateService) => {
    const date = formatDate(new Date(lastMessage), 'medium', translateService.currentLang || TranslateService.defaultLang());
    return translateService.instant(gettext('Device last request:\n{{date}}'), { date });
};
const tooltips = {
    sendStatusConnected: ɵ0$4,
    sendStatusDisconnected: gettext('Connection not monitored'),
    pushStatusConnected: gettext('Connection to device established'),
    pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
    maintenance: gettext('Device is under maintenance')
};

class DeviceStatusComponent {
    constructor(translateService) {
        this.translateService = translateService;
    }
    set node(value) {
        this._mo = value.mo || value;
    }
    get() {
        return this._mo;
    }
    ngOnChanges() {
        this.setStatusProperites();
    }
    ngAfterContentInit() {
        this.setStatusProperites();
    }
    setStatusProperites() {
        this.requiredAvailability = get(this._mo, 'c8y_RequiredAvailability');
        this.availabilityStatus = get(this._mo, 'c8y_Availability.status');
        this.pushStatus = get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
        this.sendStatus =
            this.availabilityStatus || (this.requiredAvailability ? 'UNKNOWN' : 'NOT_MONITORED');
    }
    status() {
        let statuses;
        if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
            statuses = this.getMaintenanceStatus();
        }
        else {
            statuses = this.getSendPushStatus();
        }
        return statuses;
    }
    getMaintenanceStatus() {
        return {
            sendStatus: false,
            pushStatus: false,
            maintenanceStatus: {
                icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                tooltip: tooltips.maintenance
            }
        };
    }
    getSendPushStatus() {
        return {
            sendStatus: {
                icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                status: this.sendStatus,
                label: SendStatusLabels[this.sendStatus],
                tooltip: this.getSendStatusTooltip(this._mo)
            },
            pushStatus: {
                icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                status: this.pushStatus,
                label: PushStatusLabels[this.pushStatus],
                tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
            },
            maintenanceStatus: false
        };
    }
    getSendStatusTooltip(device) {
        const availability = device && device.c8y_Availability;
        const lastMessage = availability && availability.lastMessage;
        if (lastMessage) {
            return tooltips.sendStatusConnected(lastMessage, this.translateService);
        }
        return tooltips.sendStatusDisconnected;
    }
    getPushStatusTooltip(isActive) {
        return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
    }
}
DeviceStatusComponent.ɵfac = function DeviceStatusComponent_Factory(t) { return new (t || DeviceStatusComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService)); };
DeviceStatusComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceStatusComponent, selectors: [["device-status"]], inputs: { node: ["mo", "node"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 6, vars: 9, consts: [["placement", "left", 1, "statusContainer", 3, "title"], ["class", "sendStatus", 3, "c8yIcon", "ngClass", 4, "ngIf"], ["class", "pushStatus", 3, "c8yIcon", "ngClass", 4, "ngIf"], ["class", "maintenanceStatus", "container", "body", "placement", "auto", 3, "tooltip", "c8yIcon", "ngClass", 4, "ngIf"], [1, "sendStatus", 3, "c8yIcon", "ngClass"], [1, "pushStatus", 3, "c8yIcon", "ngClass"], ["container", "body", "placement", "auto", 1, "maintenanceStatus", 3, "tooltip", "c8yIcon", "ngClass"]], template: function DeviceStatusComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, DeviceStatusComponent_div_3_Template, 1, 2, "div", 1);
        ɵngcc0.ɵɵtemplate(4, DeviceStatusComponent_div_4_Template, 1, 2, "div", 2);
        ɵngcc0.ɵɵtemplate(5, DeviceStatusComponent_div_5_Template, 2, 5, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate2("title", "", ɵngcc0.ɵɵpipeBind1(1, 5, ctx.status().sendStatus.tooltip), "\n", ɵngcc0.ɵɵpipeBind1(2, 7, ctx.status().pushStatus.tooltip), "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.status().sendStatus);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.status().pushStatus);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.status().maintenanceStatus);
    } }, directives: [ɵngcc7.NgIf, IconDirective, ɵngcc7.NgClass, ɵngcc11.TooltipDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
DeviceStatusComponent.ctorParameters = () => [
    { type: TranslateService$1 }
];
DeviceStatusComponent.propDecorators = {
    node: [{ type: Input, args: ['mo',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceStatusComponent, [{
        type: Component,
        args: [{
                selector: 'device-status',
                template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    title=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc4.TranslateService }]; }, { node: [{
            type: Input,
            args: ['mo']
        }] }); })();

/**
 * The angular module definition for a device-status.
 * @exports DeviceStatusComponent
 */
class DeviceStatusModule {
}
DeviceStatusModule.ɵfac = function DeviceStatusModule_Factory(t) { return new (t || DeviceStatusModule)(); };
DeviceStatusModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceStatusModule });
DeviceStatusModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            TooltipModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceStatusModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    TooltipModule
                ],
                exports: [
                    DeviceStatusComponent
                ],
                declarations: [
                    DeviceStatusComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceStatusModule, { declarations: function () { return [DeviceStatusComponent]; }, imports: function () { return [CommonModule, TooltipModule]; }, exports: function () { return [DeviceStatusComponent]; } }); })();

/**
 * The angular module definition for the search.
 * @exports SearchComponent
 * @exports SearchOutletComponent
 * @exports HighlightComponent A component to highlight search results.
 */
class SearchModule {
}
SearchModule.ɵfac = function SearchModule_Factory(t) { return new (t || SearchModule)(); };
SearchModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SearchModule });
SearchModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule$1,
            BsDropdownModule,
            CommonModule,
            SelectModule,
            ListGroupModule,
            DeviceStatusModule,
            RouterModule$1.forChild([])
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    SearchOutletComponent,
                    SearchComponent,
                    HighlightComponent,
                    SearchResultEmptyComponent,
                    SearchInputComponent
                ],
                imports: [
                    FormsModule$1,
                    BsDropdownModule,
                    CommonModule,
                    SelectModule,
                    ListGroupModule,
                    DeviceStatusModule,
                    RouterModule$1.forChild([])
                ],
                exports: [
                    SearchOutletComponent,
                    SearchComponent,
                    HighlightComponent,
                    SearchResultEmptyComponent,
                    SearchInputComponent
                ],
                entryComponents: [SearchInputComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SearchModule, { declarations: function () { return [SearchOutletComponent, SearchComponent, HighlightComponent, SearchResultEmptyComponent, SearchInputComponent]; }, imports: function () { return [FormsModule$1,
        BsDropdownModule, CommonModule, SelectModule, ListGroupModule, DeviceStatusModule, ɵngcc1.RouterModule]; }, exports: function () { return [SearchOutletComponent, SearchComponent, HighlightComponent, SearchResultEmptyComponent, SearchInputComponent]; } }); })();

class UserMenuService extends StateService {
    constructor() {
        super(...arguments);
        this.state$ = new BehaviorSubject({
            userMenuItems: new Set()
        });
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to the search in the header.
     * @param item The item to add.
     */
    add(item) {
        this.state.userMenuItems.add(item);
        this.emitNewState();
    }
    /**
     * Removes an search from the header.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.userMenuItems.delete(item);
        this.emitNewState();
    }
}
UserMenuService.ɵfac = /*@__PURE__*/ function () { let ɵUserMenuService_BaseFactory; return function UserMenuService_Factory(t) { return (ɵUserMenuService_BaseFactory || (ɵUserMenuService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(UserMenuService)))(t || UserMenuService); }; }();
UserMenuService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserMenuService_Factory() { return new UserMenuService(); }, token: UserMenuService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserMenuService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

class UserMenuItemComponent {
    constructor(userService) {
        this.userService = userService;
        this.priority = 0;
        this.click = new EventEmitter();
    }
    ngAfterViewInit() {
        this.viewInitTimeout = setTimeout(() => this.userService.add(this));
    }
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.userService.remove(this);
    }
    onClick() {
        this.click.emit(this);
    }
}
UserMenuItemComponent.ɵfac = function UserMenuItemComponent_Factory(t) { return new (t || UserMenuItemComponent)(ɵngcc0.ɵɵdirectiveInject(UserMenuService)); };
UserMenuItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UserMenuItemComponent, selectors: [["c8y-user-menu-item"]], viewQuery: function UserMenuItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { priority: "priority", icon: "icon", label: "label", link: "link", target: "target" }, outputs: { click: "click" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""], [3, "click"], [1, "interact"], [3, "c8yIcon"]], template: function UserMenuItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, UserMenuItemComponent_ng_template_0_Template, 6, 6, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
UserMenuItemComponent.ctorParameters = () => [
    { type: UserMenuService }
];
UserMenuItemComponent.propDecorators = {
    icon: [{ type: Input }],
    label: [{ type: Input }],
    link: [{ type: Input }],
    target: [{ type: Input }],
    priority: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: false },] }],
    click: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserMenuItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-user-menu-item',
                template: "<ng-template #template>\n  <li (click)=\"onClick()\">\n    <a class=\"interact\" [attr.href]=\"link\" [attr.target]=\"target\">\n      <i [c8yIcon]=\"icon\"></i>\n      {{ label | translate }}\n      <ng-content></ng-content>\n    </a>\n  </li>\n</ng-template>\n"
            }]
    }], function () { return [{ type: UserMenuService }]; }, { priority: [{
            type: Input
        }], click: [{
            type: Output
        }], icon: [{
            type: Input
        }], label: [{
            type: Input
        }], link: [{
            type: Input
        }], target: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }] }); })();

/**
 * Service to manage the login.
 */
class LoginService {
    constructor(injector, client, basicAuth, cookieAuth, ui, user, tenant, realtime, alert, api, tenantUiService, tenantLoginOptionsService, translateService, location) {
        this.injector = injector;
        this.client = client;
        this.basicAuth = basicAuth;
        this.cookieAuth = cookieAuth;
        this.ui = ui;
        this.user = user;
        this.tenant = tenant;
        this.realtime = realtime;
        this.alert = alert;
        this.api = api;
        this.tenantUiService = tenantUiService;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.translateService = translateService;
        this.location = location;
        this.rememberMe = false;
        this.TOKEN_KEY = '_tcy8';
        this.TFATOKEN_KEY = 'TFAToken';
        this.isFirstLogin = true;
        this.GREEN_MIN_LENGTH_DEFAULT = 8;
        // tslint:disable:max-line-length
        this.ERROR_MESSAGES = {
            minlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_missmatch: gettext('Password confirmation does not match.'),
            maxlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_strength: gettext('Your password is not strong enough. Please include numbers, lower and upper case characters'),
            remote_error: gettext('Server error occurred.'),
            email: gettext('Invalid email address.'),
            password_change: gettext('Your password is expired. Please set a new password.'),
            password_reset_token_expired: gettext('Password reset link expired. Please enter your email address to receive a new one.'),
            tfa_pin_invalid: gettext('The code you entered is invalid. Please try again.'),
            pattern_phonenumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
            pattern_newPassword: this.translateService.instant(gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: {{ symbols }}'), { symbols: '`~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/' }),
            international_number_required: gettext('International phone number required, in the format +49 9 876 543 210.'),
            phone_number_error: gettext('Could not update phone number.'),
            pinAlreadySent: gettext('The verification code was already sent. For a new verification code, please click on the link above.'),
            passwordConfirm: gettext('Password confirmation does not match.'),
            tfaExpired: gettext('Two-factor authentication token expired.')
        };
        // tslint:enable:max-line-length
        this.SUCCESS_MESSAGES = {
            password_changed: gettext('Password changed. You can now log in using new password.'),
            password_reset_requested: gettext('Password reset request has been sent. Please check your email.'),
            resend_sms: gettext('Verification code SMS resent.'),
            send_sms: gettext('Verification code SMS sent.')
        };
        this.passwordStrengthSetting = {
            enforcePasswordStrength: false,
            greenMinLength: this.GREEN_MIN_LENGTH_DEFAULT,
            passwordStrengthValidity: false
        };
        this.localhostRegExp = new RegExp('localhost');
        this.localhostIpRegExp = new RegExp('127.0.0.1');
        this.showTenantRegExp = new RegExp('showTenant');
        this.autoLogout();
        this.initLoginOptions();
    }
    /**
     * Returns the current tenant.
     * @return The tenant name.
     */
    getTenant() {
        return this.client.tenant;
    }
    initLoginOptions() {
        const loginOptions = this.ui.state.loginOptions || [];
        this.loginMode = this.tenantUiService.getPreferredLoginOption(loginOptions);
        this.oauthOptions =
            this.tenantUiService.getOauth2Option(loginOptions) || {};
    }
    redirectToOauth() {
        const { initRequest } = this.oauthOptions;
        const fullPath = (this.location ? this.location._platformLocation : window).location
            .href;
        const redirectUrl = encodeURIComponent(fullPath);
        const originUriParam = `${initRequest.includes('?') ? '&' : '?'}originUri=${redirectUrl}`;
        window.location.href = `${initRequest}${originUriParam}`;
    }
    autoLogout() {
        const errorPattern = /invalid\scredentials.*pin.*generate/i;
        const isTfaExpired = data => data && typeof data.message === 'string' && errorPattern.test(data.message);
        this.ui.currentUser
            .pipe(switchMap(u => u ? this.api.hookResponse(({ response }) => response.status === 401) : EMPTY))
            .subscribe((apiCall) => __awaiter(this, void 0, void 0, function* () {
            const { response } = apiCall;
            let willLogout = false;
            if (isTfaExpired(response.data)) {
                willLogout = true;
            }
            else {
                if (typeof response.json === 'function') {
                    const data = yield response.clone().json();
                    if (isTfaExpired(data)) {
                        willLogout = true;
                    }
                }
            }
            if (willLogout) {
                this.logout(false);
                setTimeout(() => this.alert.danger(this.ERROR_MESSAGES.tfaExpired), 500);
            }
        }));
    }
    /**
     * Gets the minimal number of characters that a password should have to be considered a “green” strong one.
     * @return The min length for password or default value.
     */
    getGreenMinLength() {
        return __awaiter(this, void 0, void 0, function* () {
            const { greenMinLength } = (yield this.getBasicAuthLoginOption()) || { greenMinLength: null };
            this.passwordStrengthSetting.greenMinLength = greenMinLength || this.GREEN_MIN_LENGTH_DEFAULT;
            return this.passwordStrengthSetting.greenMinLength;
        });
    }
    /**
     * Checks if password strength is enforced for system
     * by retrieving value of `enforceStrength` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    getEnforcePasswordStrength(refresh) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getBasicAuthLoginOption(refresh).then(loginOption => {
                const enforcePasswordStrength = get(loginOption, 'enforceStrength');
                if (isString(enforcePasswordStrength)) {
                    this.passwordStrengthSetting.enforcePasswordStrength =
                        enforcePasswordStrength === 'true' ? true : false;
                }
                else {
                    this.passwordStrengthSetting.enforcePasswordStrength = !!enforcePasswordStrength;
                }
                return this.passwordStrengthSetting.enforcePasswordStrength;
            });
        });
    }
    /**
     * Checks if password strength is enforced for particular tenant
     * by retrieving value of `strengthValidity` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    getPasswordStrengthValidity(refresh) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getBasicAuthLoginOption(refresh).then(loginOption => {
                const strengthValidity = get(loginOption, 'strengthValidity');
                if (isString(strengthValidity)) {
                    this.passwordStrengthSetting.passwordStrengthValidity =
                        strengthValidity === 'true' ? true : false;
                }
                else {
                    this.passwordStrengthSetting.passwordStrengthValidity = !!strengthValidity;
                }
                return this.passwordStrengthSetting.passwordStrengthValidity;
            });
        });
    }
    /**
     * Function determines if enforced strength checks should be enabled for current tenant
     * based on properties retrieved from loginOptions
     * @param options object containing specific options:
     *    - {refresh: true} - refreshes values of app state and returns fresh values as result of call
     * @return boolean value, true if strength is enforced for tenant, false otherwise.
     */
    getPasswordStrengthEnforced(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const refresh = options && options.refresh;
            return Promise.all([
                this.getEnforcePasswordStrength(refresh),
                this.getPasswordStrengthValidity(refresh)
            ]).then(values => {
                const [enforcePasswordStrength, passwordStrengthValidity] = values;
                return enforcePasswordStrength || passwordStrengthValidity;
            });
        });
    }
    /**
     * Clears all backend errors.
     */
    cleanMessages() {
        this.alert.clearAll();
    }
    /**
     * Adds a new success message
     * @param successKey The key of the success message as used in SUCCESS_MESSAGES
     */
    addSuccessMessage(successKey) {
        const successMessage = this.SUCCESS_MESSAGES[successKey];
        if (successMessage) {
            this.alert.add({
                text: successMessage,
                type: 'success',
                timeout: 0
            });
        }
    }
    /**
     * Returns the current strategy. Defaults to cookie, if a token
     * is found in local or session storage we switch to basic auth.
     * @returns The current auth strategy.
     */
    getAuthStrategy() {
        let authStrategy = this.cookieAuth;
        const token = this.getStoredToken();
        const tfa = this.getStoredTfaToken();
        if (token) {
            authStrategy = this.basicAuth;
            this.setCredentials({ token, tfa }, this.basicAuth);
        }
        return authStrategy;
    }
    /**
     * Forces the use of basic auth as strategy with this credentials.
     * @param credentials The credentials to use.
     */
    useBasicAuth(credentials) {
        this.setCredentials(credentials, this.basicAuth);
        return this.basicAuth;
    }
    /**
     * Tries to login a user with the given credentials.
     * If successful, the current tenant and user is set. If not an error
     * is thrown. It also verifies if the user is allowed to open the
     * current app.
     * @param auth The authentication strategy used.
     * @param credentials The credentials to try to login.
     */
    login(auth = this.getAuthStrategy(), credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.setAuth(auth);
            const tenantRes = yield this.tenant.current();
            const tenant = tenantRes.data;
            if (credentials) {
                credentials.tenant = tenant.name;
            }
            yield this.shouldRedirectDomain(credentials);
            if (yield this.switchLoginMode(credentials)) {
                auth = this.cookieAuth;
            }
            const userRes = yield this.user.current();
            const user = userRes.data;
            yield this.verifyAppAccess();
            const supportUserName = this.getSupportUserName(credentials);
            const token = this.setCredentials({
                tenant: tenant.name,
                user: (supportUserName ? `${supportUserName}$` : '') + user.userName
            }, auth);
            if (token) {
                this.storeBasicAuthToken(token);
            }
            yield this.authFulfilled(tenant, user, supportUserName);
        });
    }
    /**
     * Saves tenant, user and support user info to the app state.
     * @param tenant The current tenant object.
     * @param user The current user object.
     * @param supportUserName The current support user name.
     */
    authFulfilled(tenant, user, supportUserName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!tenant) {
                const { data } = yield this.tenant.current();
                tenant = data;
                this.client.tenant = tenant.name;
            }
            if (!user) {
                const { data } = yield this.user.current();
                user = data;
            }
            if (!supportUserName) {
                supportUserName = null;
            }
            this.ui.setUser({ user, supportUserName });
            this.ui.currentTenant.next(tenant);
        });
    }
    /**
     * Switch the login mode to CookieAuth if the
     * user has configured to use it in loginOptions.
     * @param credentials The credentials for that login
     */
    switchLoginMode(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            const isPasswordGrantLogin = yield this.isPasswordGrantLogin(credentials);
            if (isPasswordGrantLogin && credentials) {
                const res = yield this.generateOauthToken(credentials);
                if (!res.ok) {
                    try {
                        const data = yield res.json();
                        throw { res, data };
                    }
                    catch (ex) {
                        throw ex;
                    }
                }
                this.client.setAuth(this.cookieAuth);
                this.cleanLocalStorage();
                this.basicAuth.logout();
            }
            return isPasswordGrantLogin;
        });
    }
    generateOauthToken(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            if ((yield this.isPasswordGrantLogin(credentials)) && credentials) {
                const params = new URLSearchParams({
                    grant_type: 'PASSWORD',
                    username: credentials.user,
                    password: credentials.password,
                    tfa_code: credentials.tfa
                });
                return yield new FetchClient().fetch(this.getUrlForOauth(credentials), {
                    method: 'POST',
                    body: params.toString(),
                    headers: {
                        'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
                    }
                });
            }
        });
    }
    isPasswordGrantLogin(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            let loginMode = this.loginMode;
            if (this.isSupportUser(credentials)) {
                if (!this.managementLoginMode) {
                    this.managementLoginMode = yield this.getManagementLoginMode();
                }
                loginMode = this.managementLoginMode;
            }
            return this.tenantUiService.isOauthInternal(loginMode);
        });
    }
    /**
     * Verifies if the provided credentials use a support user to log in or not.
     * @param credentials Credentials to check.
     * @returns {boolean} Returns true if user is a support user.
     */
    isSupportUser(credentials) {
        return credentials && credentials.user.includes('$');
    }
    /**
     * Verifies if the tenant input field should be shown
     * or not.
     * @returns If true, show the tenant input.
     */
    showTenant() {
        return !this.ui.state.loginOptions || this.isLocal() || this.isShowTenant();
    }
    /**
     * Verifies if the tenant setup should be shown
     * or not.
     * @returns If true, show the tenant input.
     */
    showTenantSetup() {
        return !this.ui.state.loginOptions && !this.isLocal();
    }
    /**
     * Logs the user out
     * @param reload If set to false, the page will not reload
     */
    logout(reload = true) {
        return __awaiter(this, void 0, void 0, function* () {
            let resData = null;
            try {
                const [basicRes, cookieRes] = yield this.reset();
                resData = yield cookieRes.json();
            }
            catch (ex) {
                this.alert.removeLastDanger();
            }
            finally {
                if (resData && resData.url) {
                    this.redirect(resData.url);
                }
                else if (reload) {
                    this.location.replaceState({}, '', '', '');
                    window.location.reload();
                }
            }
        });
    }
    /**
     * Resets the stored auth-data
     */
    reset() {
        return __awaiter(this, void 0, void 0, function* () {
            this.cleanLocalStorage();
            this.cleanSessionStorage();
            this.realtime.disconnect();
            this.ui.currentUser.next(null);
            return Promise.all([this.basicAuth.logout(), this.cookieAuth.logout()]);
        });
    }
    /**
     * Saves the TFA token to local or session storage.
     * @param tfaToken The tfa token to save.
     * @param storage The storage to use (local or session).
     */
    saveTFAToken(tfaToken, storage) {
        storage.setItem(this.TFATOKEN_KEY, tfaToken);
    }
    /**
     * Request the manifest -> on 401 user has no access to that application
     * and we throw the error up to the login form.
     */
    verifyAppAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ui.loadManifest();
            }
            catch (ex) {
                if (!(ex.res && ex.res.status === 404 && this.isLocal())) {
                    throw ex;
                }
            }
        });
    }
    redirectToDomain(domain) {
        const originUrl = new URL(window.location.href);
        const redirectUrl = originUrl.href.replace(originUrl.hostname, domain);
        window.location.href = redirectUrl;
    }
    /**
     * Sets the tenant to the client and updates the credentials on the
     * auth strategy.
     * @param credentials The name of the tenant.
     * @param authStrategy The authentication strategy used.
     * @return Returns the token if basic auth, otherwise undefined.
     */
    setCredentials(credentials, authStrategy) {
        if (credentials.tenant) {
            this.client.tenant = credentials.tenant;
        }
        // Check if a token is already set (case for support user login)
        // if yes -> we just need to update the user, and reuse the token
        // of the support user.
        // Therefore we need to pass user and tenant, to get
        // just the stored token and nothing else (see BasicAuth.ts:31).
        const token = this.basicAuth.updateCredentials({
            tenant: credentials.tenant,
            user: credentials.user
        });
        const newCredentials = Object.assign({ token }, credentials);
        return authStrategy.updateCredentials(newCredentials);
    }
    /**
     * Verifies if the current user is a developer or not.
     * Running on localhost means development mode.
     */
    isLocal() {
        const hostname = window.location.hostname;
        return this.localhostIpRegExp.test(hostname) || this.localhostRegExp.test(hostname);
    }
    /**
     * Save the token to local or session storage.
     * @param token The token to save.
     * @param storage The storage to use (local or session).
     */
    saveToken(token, storage) {
        storage.setItem(this.TOKEN_KEY, token);
    }
    storeBasicAuthToken(token) {
        this.saveToken(token, sessionStorage);
        if (this.rememberMe) {
            this.saveToken(token, localStorage);
        }
    }
    cleanLocalStorage() {
        localStorage.removeItem(this.TOKEN_KEY);
        localStorage.removeItem(this.TFATOKEN_KEY);
    }
    cleanSessionStorage() {
        sessionStorage.removeItem(this.TOKEN_KEY);
        sessionStorage.removeItem(this.TFATOKEN_KEY);
    }
    isShowTenant() {
        return this.showTenantRegExp.test(window.location.href);
    }
    redirect(url) {
        window.location.href = url;
    }
    getBasicAuthLoginOption(refresh) {
        return __awaiter(this, void 0, void 0, function* () {
            if (refresh) {
                yield this.ui.refreshLoginOptions();
            }
            const loginOptions = this.ui.state.loginOptions || [];
            const basicAuthLoginOption = loginOptions.find(({ type }) => type === 'BASIC');
            return Promise.resolve(basicAuthLoginOption);
        });
    }
    /**
     * Gets support user name from credentials.
     * @param credentials Credentials object (defaults to the stored one).
     * @returns Support user name.
     */
    getSupportUserName(credentials = this.getStoredCredentials()) {
        if (!credentials) {
            return null;
        }
        const supportUserName = credentials.user.match(/^(.+\/)?((.+)\$)?(.+)?$/)[3];
        return supportUserName;
    }
    /**
     * Gets credentials object from the stored token.
     * @returns Credentials object.
     */
    getStoredCredentials() {
        const token = this.getStoredToken();
        if (!token) {
            return null;
        }
        return this.decodeToken(token);
    }
    /**
     * Gets stored token from local storage or session storage.
     * @returns Stored token.
     */
    getStoredToken() {
        return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);
    }
    /**
     * Gets stored TFA token from local storage or session storage.
     * @returns Stored TFA token.
     */
    getStoredTfaToken() {
        return localStorage.getItem(this.TFATOKEN_KEY) || sessionStorage.getItem(this.TFATOKEN_KEY);
    }
    /**
     * Decodes token to credentials object.
     * @param token Token to decode.
     * @returns Credentials object.
     */
    decodeToken(token) {
        const decoded = decodeURIComponent(escape(window.atob(token)));
        const split = decoded.match(/(([^/]*)\/)?([^/:]+):(.+)/);
        return {
            tenant: split[2],
            user: split[3],
            password: split[4]
        };
    }
    getUrlForOauth(credentials) {
        if (isEmpty(credentials.tenant) && this.loginMode.initRequest) {
            const urlParams = new URLSearchParams(this.loginMode.initRequest.split('?').pop());
            credentials.tenant = urlParams.get('tenant_id');
        }
        return !isEmpty(credentials.tenant)
            ? `tenant/oauth?tenant_id=${credentials.tenant}`
            : `tenant/oauth`;
    }
    getManagementLoginMode() {
        return __awaiter(this, void 0, void 0, function* () {
            const managementLoginOptions = (yield this.tenantLoginOptionsService.listForManagement()).data;
            return this.tenantUiService.getPreferredLoginOption(managementLoginOptions);
        });
    }
    shouldRedirectDomain(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            const isPasswordGrantLogin = yield this.isPasswordGrantLogin(credentials);
            if (this.isSupportUser(credentials) &&
                isPasswordGrantLogin &&
                this.managementLoginMode.loginRedirectDomain !== window.location.hostname &&
                !this.isLocal()) {
                const title = gettext('Redirect required');
                const body = gettext('Redirect to correct domain is required to log in as support user.');
                // avoids circular dependency NG0200 error when BsModalService is injected into APP_INITIALIZER (via LoginService -> ModalService -> BsModalService)
                const modalService = this.injector.get(ModalService);
                yield modalService.acknowledge(title, body, Status.INFO, gettext('Redirect'));
                this.redirectToDomain(this.managementLoginMode.loginRedirectDomain);
            }
        });
    }
}
LoginService.ɵfac = function LoginService_Factory(t) { return new (t || LoginService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc3.FetchClient), ɵngcc0.ɵɵinject(ɵngcc3.BasicAuth), ɵngcc0.ɵɵinject(ɵngcc3.CookieAuth), ɵngcc0.ɵɵinject(AppStateService), ɵngcc0.ɵɵinject(ɵngcc3.UserService), ɵngcc0.ɵɵinject(ɵngcc3.TenantService), ɵngcc0.ɵɵinject(ɵngcc3.Realtime), ɵngcc0.ɵɵinject(AlertService), ɵngcc0.ɵɵinject(ɵngcc2.ApiService), ɵngcc0.ɵɵinject(TenantUiService), ɵngcc0.ɵɵinject(ɵngcc3.TenantLoginOptionsService), ɵngcc0.ɵɵinject(ɵngcc4.TranslateService), ɵngcc0.ɵɵinject(ɵngcc7.LocationStrategy, 8)); };
LoginService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LoginService, factory: LoginService.ɵfac });
LoginService.ctorParameters = () => [
    { type: Injector },
    { type: FetchClient },
    { type: BasicAuth },
    { type: CookieAuth },
    { type: AppStateService },
    { type: UserService },
    { type: TenantService },
    { type: Realtime },
    { type: AlertService },
    { type: ApiService },
    { type: TenantUiService },
    { type: TenantLoginOptionsService },
    { type: TranslateService$1 },
    { type: LocationStrategy, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoginService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc3.FetchClient }, { type: ɵngcc3.BasicAuth }, { type: ɵngcc3.CookieAuth }, { type: AppStateService }, { type: ɵngcc3.UserService }, { type: ɵngcc3.TenantService }, { type: ɵngcc3.Realtime }, { type: AlertService }, { type: ɵngcc2.ApiService }, { type: TenantUiService }, { type: ɵngcc3.TenantLoginOptionsService }, { type: ɵngcc4.TranslateService }, { type: ɵngcc7.LocationStrategy, decorators: [{
                type: Optional
            }] }]; }, null); })();

class PasswordConfirmModalComponent {
    constructor(user, ui, client, alert, loginService) {
        this.user = user;
        this.ui = ui;
        this.client = client;
        this.alert = alert;
        this.loginService = loginService;
        this.passwordConfirmedEmitter = new EventEmitter();
        this.loading = false;
    }
    passwordConfirm() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.password) {
                const supportUserName = this.ui.currentSupportUserName.value;
                const userId = this.ui.currentUser.value.id;
                const credentials = {
                    password: this.password,
                    user: `${supportUserName ? `${supportUserName}$` : ''}${userId}`,
                    tenant: this.client.tenant
                };
                try {
                    this.loading = true;
                    const strategy = clone(this.loginService.useBasicAuth({}));
                    delete credentials.tfa;
                    strategy.updateCredentials(credentials);
                    const newClient = this.createNewClient(strategy, this.client.baseUrl);
                    yield newClient.user.current();
                    this.emitSuccessAndClose();
                }
                catch (e) {
                    if (e.res && e.res.status === 401 && e.data && /pin|totp/i.test(e.data.message)) {
                        this.emitSuccessAndClose();
                    }
                    else {
                        this.alert.danger(gettext("Provided password doesn't match your current one."));
                    }
                }
                finally {
                    this.loading = false;
                }
            }
        });
    }
    cancel() {
        this.passwordConfirmedEmitter.emit(false);
        this.modal._dismiss();
    }
    createNewClient(strategy, baseUrl) {
        return new Client(strategy, baseUrl);
    }
    emitSuccessAndClose() {
        this.passwordConfirmedEmitter.emit(true);
        this.modal._dismiss();
    }
}
PasswordConfirmModalComponent.ɵfac = function PasswordConfirmModalComponent_Factory(t) { return new (t || PasswordConfirmModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FetchClient), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(LoginService)); };
PasswordConfirmModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasswordConfirmModalComponent, selectors: [["c8y-password-confirm-modal"]], viewQuery: function PasswordConfirmModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c50, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modal = _t.first);
    } }, outputs: { passwordConfirmedEmitter: "passwordConfirmedEmitter" }, decls: 21, vars: 16, consts: [[3, "customFooter", "title"], ["modal", ""], [3, "ngSubmit"], ["confirmForm", "ngForm"], [1, "d-block", "p-24", "p-b-0"], [3, "hasWarning"], ["translate", "", "for", "currentPassword"], ["id", "currentPassword", "type", "password", "name", "password", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["translate", ""], [1, "modal-footer", "separator-top", "bg-white", "sticky-bottom"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", 3, "title", "disabled"]], template: function PasswordConfirmModalComponent_Template(rf, ctx) { if (rf & 1) {
        const _r2 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0, 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementStart(3, "form", 2, 3);
        ɵngcc0.ɵɵlistener("ngSubmit", function PasswordConfirmModalComponent_Template_form_ngSubmit_3_listener() { ɵngcc0.ɵɵrestoreView(_r2); const _r1 = ɵngcc0.ɵɵreference(4); return _r1.form.valid && ctx.passwordConfirm(); });
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "c8y-form-group", 5);
        ɵngcc0.ɵɵelementStart(7, "label", 6);
        ɵngcc0.ɵɵtext(8, "Enter your password");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "input", 7);
        ɵngcc0.ɵɵlistener("ngModelChange", function PasswordConfirmModalComponent_Template_input_ngModelChange_9_listener($event) { return ctx.password = $event; });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "c8y-messages");
        ɵngcc0.ɵɵelementStart(12, "c8y-message", 8);
        ɵngcc0.ɵɵtext(13, " Enter the password of the user that you are currently logged in with. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵelementStart(15, "button", 10);
        ɵngcc0.ɵɵlistener("click", function PasswordConfirmModalComponent_Template_button_click_15_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵtext(17, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "button", 11);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtext(20, " Confirm ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("customFooter", true)("title", ɵngcc0.ɵɵpipeBind1(2, 8, "Confirm your current password"));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("hasWarning", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 10, "Enter your password"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.password);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(16, 12, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 14, "Confirm"));
        ɵngcc0.ɵɵproperty("disabled", !_r1.form.valid || ctx.loading);
    } }, directives: [ModalComponent, ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, FormGroupComponent, C8yTranslateDirective, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, MessagesComponent, MessageDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
PasswordConfirmModalComponent.ctorParameters = () => [
    { type: UserService },
    { type: AppStateService },
    { type: FetchClient },
    { type: AlertService },
    { type: LoginService }
];
PasswordConfirmModalComponent.propDecorators = {
    passwordConfirmedEmitter: [{ type: Output }],
    modal: [{ type: ViewChild, args: ['modal', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordConfirmModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-password-confirm-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm your current password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <div class=\"d-block p-24 p-b-0\">\r\n      <c8y-form-group [hasWarning]=\"true\">\r\n        <label translate for=\"currentPassword\">Enter your password</label>\r\n        <input\r\n          id=\"currentPassword\"\r\n          [(ngModel)]=\"password\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          class=\"form-control\"\r\n          placeholder=\"{{ 'Enter your password' | translate }}\"\r\n          required\r\n        />\r\n        <c8y-messages>\r\n          <c8y-message translate>\r\n            Enter the password of the user that you are currently logged in with.\r\n          </c8y-message>\r\n        </c8y-messages>\r\n      </c8y-form-group>\r\n    </div>\r\n    <div class=\"modal-footer separator-top bg-white sticky-bottom\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Confirm' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
            }]
    }], function () { return [{ type: ɵngcc3.UserService }, { type: AppStateService }, { type: ɵngcc3.FetchClient }, { type: AlertService }, { type: LoginService }]; }, { passwordConfirmedEmitter: [{
            type: Output
        }], modal: [{
            type: ViewChild,
            args: ['modal', { static: false }]
        }] }); })();

class CurrentPasswordModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.currentPasswordEmitter = new EventEmitter();
    }
    passwordConfirm() {
        this.currentPasswordEmitter.emit(this.password);
        this.modal.hide();
    }
    cancel() {
        this.currentPasswordEmitter.emit(null);
        this.modal.hide();
    }
}
CurrentPasswordModalComponent.ɵfac = function CurrentPasswordModalComponent_Factory(t) { return new (t || CurrentPasswordModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef)); };
CurrentPasswordModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CurrentPasswordModalComponent, selectors: [["c8y-current-password-modal"]], outputs: { currentPasswordEmitter: "currentPasswordEmitter" }, decls: 20, vars: 13, consts: [[3, "customFooter", "title"], ["modal", ""], [3, "ngSubmit"], ["confirmForm", "ngForm"], [1, "d-block", "p-24"], [3, "hasWarning"], ["translate", "", "for", "currentPassword"], ["id", "currentPassword", "type", "password", "name", "password", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], ["translate", ""], [1, "modal-footer", "separator-top", "bg-white", "sticky-bottom"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", 3, "title", "disabled"]], template: function CurrentPasswordModalComponent_Template(rf, ctx) { if (rf & 1) {
        const _r2 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0, 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementStart(3, "form", 2, 3);
        ɵngcc0.ɵɵlistener("ngSubmit", function CurrentPasswordModalComponent_Template_form_ngSubmit_3_listener() { ɵngcc0.ɵɵrestoreView(_r2); const _r1 = ɵngcc0.ɵɵreference(4); return _r1.form.valid && ctx.passwordConfirm(); });
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "c8y-form-group", 5);
        ɵngcc0.ɵɵelementStart(7, "label", 6);
        ɵngcc0.ɵɵtext(8, "Enter your password");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "input", 7);
        ɵngcc0.ɵɵlistener("ngModelChange", function CurrentPasswordModalComponent_Template_input_ngModelChange_9_listener($event) { return ctx.password = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "c8y-messages");
        ɵngcc0.ɵɵelementStart(11, "c8y-message", 8);
        ɵngcc0.ɵɵtext(12, " The password of the user that you are currently logged in with. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 9);
        ɵngcc0.ɵɵelementStart(14, "button", 10);
        ɵngcc0.ɵɵlistener("click", function CurrentPasswordModalComponent_Template_button_click_14_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵtext(16, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "button", 11);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵtext(19, " Confirm ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("customFooter", true)("title", ɵngcc0.ɵɵpipeBind1(2, 7, "Confirm your current password"));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("hasWarning", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.password);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 9, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(18, 11, "Confirm"));
        ɵngcc0.ɵɵproperty("disabled", !_r1.form.valid);
    } }, directives: [ModalComponent, ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, FormGroupComponent, C8yTranslateDirective, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, MessagesComponent, MessageDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
CurrentPasswordModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
CurrentPasswordModalComponent.propDecorators = {
    currentPasswordEmitter: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CurrentPasswordModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-current-password-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm your current password' | translate\" #modal>\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\n    <div class=\"d-block p-24\">\n      <c8y-form-group [hasWarning]=\"true\">\n        <label translate for=\"currentPassword\">Enter your password</label>\n        <input\n          id=\"currentPassword\"\n          [(ngModel)]=\"password\"\n          type=\"password\"\n          name=\"password\"\n          class=\"form-control\"\n          required\n        />\n        <c8y-messages>\n          <c8y-message translate>\n            The password of the user that you are currently logged in with.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n    <div class=\"modal-footer separator-top bg-white sticky-bottom\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        translate\n      >\n        Cancel\n      </button>\n      <button\n        title=\"{{ 'Confirm' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [disabled]=\"!confirmForm.form.valid\"\n        translate\n      >\n        Confirm\n      </button>\n    </div>\n  </form>\n</c8y-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc10.BsModalRef }]; }, { currentPasswordEmitter: [{
            type: Output
        }] }); })();

class PasswordService {
    constructor(modalService) {
        this.modalService = modalService;
        this.DEFAULT_PASSWORD_MIN_LENGTH = 8;
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    confirmPassword() {
        const modalInstance = this.modalService.show(PasswordConfirmModalComponent);
        const passwordConfirmedEmitter = modalInstance.content.passwordConfirmedEmitter;
        return passwordConfirmedEmitter.pipe(take(1));
    }
    /**
     * Returns an observable with the password provided by user:
     * - `string` when user provided a value
     * - `null` when user cancelled the modal
     */
    currentPassword() {
        const modalInstance = this.modalService.show(CurrentPasswordModalComponent, { class: 'modal-sm' });
        const currentPasswordEmitter = modalInstance.content.currentPasswordEmitter;
        return currentPasswordEmitter.pipe(take(1));
    }
    hasLowerCase(password) {
        return (password.search(/[a-z]/) !== -1);
    }
    hasUpperCase(password) {
        return (password.search(/[A-Z]/) !== -1);
    }
    hasNumbers(password) {
        return (password.search(/[0-9]/) !== -1);
    }
    hasSpecialChars(password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    }
    getStrengthColor(password) {
        const passwordStrength = filter$1([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 3) {
            return this.GREEN;
        }
        else if (passwordStrength >= 3) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    }
    getDefaultPasswordMinLength() {
        return this.DEFAULT_PASSWORD_MIN_LENGTH;
    }
}
PasswordService.ɵfac = function PasswordService_Factory(t) { return new (t || PasswordService)(ɵngcc0.ɵɵinject(ɵngcc10.BsModalService)); };
PasswordService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PasswordService, factory: PasswordService.ɵfac });
PasswordService.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc10.BsModalService }]; }, null); })();

class UserEditModalComponent {
    constructor(modal, user, ui, auth, client, alert, translate, userPreferences, modalService, c8yModalService, gainsightService, cookieBannerService, loginService, passwordService) {
        this.modal = modal;
        this.user = user;
        this.ui = ui;
        this.auth = auth;
        this.client = client;
        this.alert = alert;
        this.translate = translate;
        this.userPreferences = userPreferences;
        this.modalService = modalService;
        this.c8yModalService = c8yModalService;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        this.loginService = loginService;
        this.passwordService = passwordService;
        this.loading = false;
        this.showProductUsageSetting = false;
        this.lang = this.ui.state.lang;
        this.modalService.onHide.pipe(take(1)).subscribe((reason) => {
            if (reason !== null && this.changedLang !== undefined) {
                this.translate.switchToLanguage(this.lang);
            }
        });
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.updateUserInAppState();
            this.showProductUsageSetting = yield this.gainsightService.canEditProductExperienceSettings();
            if (this.showProductUsageSetting) {
                this.currentUsageTrackingState =
                    !(yield this.gainsightService.isGainsightDisabledInUserPreferences()) &&
                        this.cookieBannerService.isFunctionalCookieEnabled();
            }
        });
    }
    onDismiss() {
        if (this.changedLang !== undefined) {
            this.translate.switchToLanguage(this.lang);
        }
        this.modal.hide();
    }
    onLanguage(lang) {
        this.changedLang = lang;
        this.translate.switchToLanguage(this.changedLang);
    }
    onProductExperience(option) {
        this.usageTrackingState = option;
    }
    updateAndClose(user) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            let reloadRequired = false;
            try {
                const passwordChanged = Boolean(user.password);
                const usesBasic = this.loginService.loginMode.type === TenantLoginOptionType.BASIC;
                const isExternalUser = user.customProperties.userOrigin === 'OAUTH2';
                if (!isExternalUser && passwordChanged) {
                    const currentPassword = yield this.passwordService.currentPassword().toPromise();
                    if (!currentPassword) {
                        return;
                    }
                    yield this.user.changeCurrentUserPassword(user.password, currentPassword);
                    if (usesBasic) {
                        this.updateCredentials(user.password);
                    }
                }
                if (this.changedLang && this.changedLang !== this.lang) {
                    reloadRequired = yield this.persistLanguage(this.changedLang);
                }
                if (this.currentUsageTrackingState !== this.usageTrackingState) {
                    yield this.userPreferences.set(this.gainsightService.USER_PREFERENCES_KEY, this.usageTrackingState);
                    this.gainsightService.setFunctionalCookie(this.usageTrackingState);
                    this.usageTrackingState
                        ? yield this.gainsightService.loadTag(this.client.tenant)
                        : yield this.gainsightTrackingAppReload();
                }
                if (user.customProperties.userOrigin !== 'OAUTH2') {
                    yield this.user.updateCurrent(omit(user, 'password'));
                    yield this.updateUserInAppState();
                }
                this.modal.hide();
                this.alert.success(gettext('User saved.'));
            }
            catch (e) {
                if (e) {
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.loading = false;
                if (reloadRequired) {
                    location.reload();
                }
            }
        });
    }
    persistLanguage(lang) {
        return __awaiter(this, void 0, void 0, function* () {
            let shouldReload;
            try {
                yield this.c8yModalService.confirm(gettext('Reload recommended'), gettext('To change the language in the entire application, we recommend you to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                this.lang = lang;
                shouldReload = true;
            }
            catch (ex) {
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                this.lang = lang;
                shouldReload = false;
            }
            return shouldReload;
        });
    }
    gainsightTrackingAppReload() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.c8yModalService.confirm(gettext('Reload required'), gettext('To change the tracking option in the entire application, you need to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                location.reload();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    updateUserInAppState() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentUserResult = yield this.user.current();
            this.ui.currentUser.next(currentUserResult.data);
        });
    }
    updateCredentials(password) {
        const newCredentials = {
            password,
            user: this.ui.currentUser.value.id,
            tenant: this.client.tenant
        };
        this.auth.updateCredentials(newCredentials);
    }
}
UserEditModalComponent.ɵfac = function UserEditModalComponent_Factory(t) { return new (t || UserEditModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BasicAuth), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FetchClient), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalService), ɵngcc0.ɵɵdirectiveInject(ModalService), ɵngcc0.ɵɵdirectiveInject(GainsightService), ɵngcc0.ɵɵdirectiveInject(CookieBannerService), ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(PasswordService)); };
UserEditModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UserEditModalComponent, selectors: [["c8y-user-edit-modal"]], decls: 4, vars: 11, consts: [[3, "customFooter", "title", "onDismiss"], [3, "lang", "user", "loading", "isUsageTrackingEnabled", "showProductUsageSetting", "onLanguage", "onProductExperience", "onUser", "onCancel"]], template: function UserEditModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵlistener("onDismiss", function UserEditModalComponent_Template_c8y_modal_onDismiss_0_listener() { return ctx.onDismiss(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementStart(2, "c8y-user-edit", 1);
        ɵngcc0.ɵɵlistener("onLanguage", function UserEditModalComponent_Template_c8y_user_edit_onLanguage_2_listener($event) { return ctx.onLanguage($event); })("onProductExperience", function UserEditModalComponent_Template_c8y_user_edit_onProductExperience_2_listener($event) { return ctx.onProductExperience($event); })("onUser", function UserEditModalComponent_Template_c8y_user_edit_onUser_2_listener($event) { return ctx.updateAndClose($event); })("onCancel", function UserEditModalComponent_Template_c8y_user_edit_onCancel_2_listener() { return ctx.onDismiss(); });
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("customFooter", true)("title", ɵngcc0.ɵɵpipeBind1(1, 7, "Edit user"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("lang", ctx.lang)("user", ɵngcc0.ɵɵpipeBind1(3, 9, ctx.ui.currentUser))("loading", ctx.loading)("isUsageTrackingEnabled", ctx.currentUsageTrackingState)("showProductUsageSetting", ctx.showProductUsageSetting);
    } }, directives: function () { return [ModalComponent, UserEditComponent]; }, pipes: function () { return [C8yTranslatePipe, ɵngcc7.AsyncPipe]; }, encapsulation: 2 });
UserEditModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: UserService },
    { type: AppStateService },
    { type: BasicAuth },
    { type: FetchClient },
    { type: AlertService },
    { type: TranslateService },
    { type: UserPreferencesService },
    { type: BsModalService },
    { type: ModalService },
    { type: GainsightService },
    { type: CookieBannerService },
    { type: LoginService },
    { type: PasswordService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserEditModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-user-edit-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Edit user' | translate\" (onDismiss)=\"onDismiss()\">\n  <c8y-user-edit\n    [lang]=\"lang\"\n    [user]=\"ui.currentUser | async\"\n    [loading]=\"loading\"\n    [isUsageTrackingEnabled]=\"currentUsageTrackingState\"\n    [showProductUsageSetting]=\"showProductUsageSetting\"\n    (onLanguage)=\"onLanguage($event)\"\n    (onProductExperience)=\"onProductExperience($event)\"\n    (onUser)=\"updateAndClose($event)\"\n    (onCancel)=\"onDismiss()\"\n  >\n  </c8y-user-edit>\n</c8y-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc10.BsModalRef }, { type: ɵngcc3.UserService }, { type: AppStateService }, { type: ɵngcc3.BasicAuth }, { type: ɵngcc3.FetchClient }, { type: AlertService }, { type: TranslateService }, { type: UserPreferencesService }, { type: ɵngcc10.BsModalService }, { type: ModalService }, { type: GainsightService }, { type: CookieBannerService }, { type: LoginService }, { type: PasswordService }]; }, null); })();

class UserTotpSetupComponent {
    constructor(user, modalService, modal, loginService) {
        this.user = user;
        this.modalService = modalService;
        this.modal = modal;
        this.loginService = loginService;
    }
    totpSetupVerified(token) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.user.activateTotp();
            this.modal.hide();
            try {
                yield this.modalService.acknowledge(gettext('Logout required'), gettext('You must log out in order to apply your changes'), Status.WARNING, gettext('Log out'));
                yield this.loginService.logout();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    close() {
        this.modal.hide();
    }
}
UserTotpSetupComponent.ɵfac = function UserTotpSetupComponent_Factory(t) { return new (t || UserTotpSetupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef), ɵngcc0.ɵɵdirectiveInject(LoginService)); };
UserTotpSetupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UserTotpSetupComponent, selectors: [["c8y-user-totp-setup"]], decls: 4, vars: 4, consts: [[3, "customFooter", "title"], [3, "onSuccess", "totpUnconfirmedEmitter"]], template: function UserTotpSetupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelement(2, "c8y-totp-setup");
        ɵngcc0.ɵɵelementStart(3, "c8y-totp-challenge", 1);
        ɵngcc0.ɵɵlistener("onSuccess", function UserTotpSetupComponent_Template_c8y_totp_challenge_onSuccess_3_listener($event) { return ctx.totpSetupVerified($event); })("totpUnconfirmedEmitter", function UserTotpSetupComponent_Template_c8y_totp_challenge_totpUnconfirmedEmitter_3_listener() { return ctx.close(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("customFooter", true)("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Set up two-factor authentication"));
    } }, directives: function () { return [ModalComponent, TotpSetupComponent, TotpChallengeComponent]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
UserTotpSetupComponent.ctorParameters = () => [
    { type: UserService },
    { type: ModalService },
    { type: BsModalRef },
    { type: LoginService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserTotpSetupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-user-totp-setup',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Set up two-factor authentication' | translate\">\n  <c8y-totp-setup></c8y-totp-setup>\n  <c8y-totp-challenge (onSuccess)=\"totpSetupVerified($event)\" (totpUnconfirmedEmitter)=\"close()\"></c8y-totp-challenge>\n</c8y-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc3.UserService }, { type: ModalService }, { type: ɵngcc10.BsModalRef }, { type: LoginService }]; }, null); })();

class UserEditComponent {
    constructor(state, translate, bsModalService, alert, userService, tenantLoginOptionsService, tenantService, userPreferencesService) {
        this.state = state;
        this.translate = translate;
        this.bsModalService = bsModalService;
        this.alert = alert;
        this.userService = userService;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.tenantService = tenantService;
        this.userPreferencesService = userPreferencesService;
        this.loading = false;
        this.showProductUsageSetting = false;
        this.isUsageTrackingEnabled = true;
        this.onUser = new EventEmitter();
        this.onLanguage = new EventEmitter();
        this.onProductExperience = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.userHasActiveTotp = false;
        this.userCanSetupTotp = false;
        this.isPhoneRequired = false;
    }
    set user(u) {
        if (u) {
            this._user = clone(u);
            this.userIsExternal = u.customProperties.userOrigin === 'OAUTH2';
            this.isPhoneRequired = this.isPhoneRequired && u.twoFactorAuthenticationEnabled;
        }
    }
    get user() {
        return this._user;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = (yield this.tenantService.current()).data;
            const { enabledOnSystemLevel, enabledOnTenantLevel } = yield this.tenantService.getTfaSettings(currentTenant);
            this.isTfaEnabled = enabledOnSystemLevel || enabledOnTenantLevel;
            yield this.initializeTotpSettings();
            if (this.user.twoFactorAuthenticationEnabled && !this.userCanSetupTotp) {
                this.isPhoneRequired = true;
            }
        });
    }
    get langs() {
        return this.state.state.langs;
    }
    setupTotp() {
        this.bsModalService.show(UserTotpSetupComponent, { class: 'modal-sm' });
        this.cancel(); // to close the user edit modal and prevent console errors on logout
    }
    cancel() {
        this.onCancel.emit();
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.loading) {
                return;
            }
            if (this.showProductUsageSetting) {
                this.onProductExperience.emit(this.isUsageTrackingEnabled);
                this.userPreferencesService.set('gainsightEnabled', this.isUsageTrackingEnabled);
            }
            this.onUser.emit(this._user);
        });
    }
    onNewPasswordChanged(newPassword) {
        this._user.password = newPassword.password;
    }
    initializeTotpSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.userCanSetupTotp = yield this.canUserSetupTotp();
                if (this.userCanSetupTotp) {
                    const { data: totpActivity } = yield this.userService.getActivityTotp();
                    this.userHasActiveTotp = totpActivity.isActive;
                }
            }
            catch (ex) {
                this.alert.removeLastDanger();
            }
        });
    }
    canUserSetupTotp() {
        return __awaiter(this, void 0, void 0, function* () {
            // we don't check for tenant options here due to permission restrictions on that end-point
            const loginOptions = (yield this.tenantLoginOptionsService.listForCurrentTenant()).data;
            return loginOptions.some(({ tfaStrategy = '' }) => tfaStrategy.toLowerCase() === 'totp');
        });
    }
}
UserEditComponent.ɵfac = function UserEditComponent_Factory(t) { return new (t || UserEditComponent)(ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantLoginOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantService), ɵngcc0.ɵɵdirectiveInject(UserPreferencesService)); };
UserEditComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UserEditComponent, selectors: [["c8y-user-edit"]], inputs: { loading: "loading", showProductUsageSetting: "showProductUsageSetting", isUsageTrackingEnabled: "isUsageTrackingEnabled", user: "user", lang: "lang" }, outputs: { onUser: "onUser", onLanguage: "onLanguage", onProductExperience: "onProductExperience", onCancel: "onCancel" }, decls: 56, vars: 49, consts: [[3, "ngSubmit"], ["userForm", "ngForm"], [1, "d-block", "p-24", "p-b-0"], ["class", "alert alert-warning", "role", "alert", "translate", "", 4, "ngIf"], ["translate", "", "for", "userName"], ["id", "userName", "name", "userName", "autocomplete", "off", "required", "", "maxlength", "254", "c8yDefaultValidation", "user", 1, "form-control", 3, "ngModel", "placeholder", "disabled", "ngModelChange"], ["translate", "", "for", "displayName"], ["id", "displayName", "name", "displayName", "autocomplete", "off", "maxlength", "254", "c8yDefaultValidation", "loginAlias", 1, "form-control", 3, "ngModel", "placeholder", "disabled", "ngModelChange"], [3, "hasWarning"], ["translate", "", "for", "userEmail"], ["id", "userEmail", "type", "email", "name", "email", "autocomplete", "off", "email", "", 1, "form-control", 3, "maxlength", "placeholder", "ngModel", "required", "disabled", "ngModelChange"], [1, "row"], [1, "col-sm-6"], ["translate", "", "for", "userFirstName"], ["id", "userFirstName", "autocomplete", "off", "maxlength", "50", "name", "firstName", 1, "form-control", 3, "ngModel", "disabled", "ngModelChange"], ["translate", "", "for", "userLastName"], ["id", "userLastName", "autocomplete", "off", "maxlength", "50", "name", "lastName", 1, "form-control", 3, "ngModel", "disabled", "ngModelChange"], ["translate", "", "for", "userTelephone"], ["id", "userTelephone", "autocomplete", "off", "name", "phone", "maxlength", "254", "c8yPhoneValidation", "", "c8yDefaultValidation", "phoneNumber", 1, "form-control", 3, "ngModel", "placeholder", "required", "disabled", "ngModelChange"], ["translate", "", "for", "userLang"], [1, "c8y-select-wrapper"], ["id", "userLang", "name", "lang", 1, "form-control", 3, "ngModel", "ngModelChange", "change"], ["selectLang", ""], [3, "value", 4, "ngFor", "ngForOf"], ["class", "p-t-8 p-b-8 separator-top", 4, "ngIf"], ["class", "form-group", 4, "ngIf"], [4, "ngIf"], [1, "modal-footer", "separator-top", "bg-white", "sticky-bottom"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "title", "disabled"], ["role", "alert", "translate", "", 1, "alert", "alert-warning"], [3, "value"], [1, "p-t-8", "p-b-8", "separator-top"], ["translate", ""], ["for", "productUsageTracking", 1, "c8y-switch"], ["id", "productUsageTracking", "name", "productUsageTracking", "type", "checkbox", 3, "ngModel", "ngModelChange"], [1, "form-group"], [1, "control-label"], [3, "password"], ["class", "btn btn-default", "type", "button", 3, "title", "click", 4, "ngIf"], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", "name", "newsletter", 3, "ngModel", "disabled", "ngModelChange"]], template: function UserEditComponent_Template(rf, ctx) { if (rf & 1) {
        const _r17 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function UserEditComponent_Template_form_ngSubmit_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const _r0 = ɵngcc0.ɵɵreference(1); return _r0.form.valid && ctx.save(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, UserEditComponent_div_3_Template, 2, 0, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(5, "label", 4);
        ɵngcc0.ɵɵtext(6, "Username (for example, email)");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_Template_input_ngModelChange_7_listener($event) { return ctx.user.userName = $event; });
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(10, "label", 6);
        ɵngcc0.ɵɵtext(11, "Login alias");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "input", 7);
        ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_Template_input_ngModelChange_12_listener($event) { return ctx.user.displayName = $event; });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "c8y-form-group", 8);
        ɵngcc0.ɵɵelementStart(15, "label", 9);
        ɵngcc0.ɵɵtext(16, "Email");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "input", 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_Template_input_ngModelChange_17_listener($event) { return ctx.user.email = $event; });
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "div", 11);
        ɵngcc0.ɵɵelementStart(20, "div", 12);
        ɵngcc0.ɵɵelementStart(21, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(22, "label", 13);
        ɵngcc0.ɵɵtext(23, "First name");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "input", 14);
        ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_Template_input_ngModelChange_24_listener($event) { return ctx.user.firstName = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 12);
        ɵngcc0.ɵɵelementStart(26, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(27, "label", 15);
        ɵngcc0.ɵɵtext(28, "Last name");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "input", 16);
        ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_Template_input_ngModelChange_29_listener($event) { return ctx.user.lastName = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(31, "label", 17);
        ɵngcc0.ɵɵtext(32, "Telephone");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(33, "input", 18);
        ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_Template_input_ngModelChange_33_listener($event) { return ctx.user.phone = $event; });
        ɵngcc0.ɵɵpipe(34, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(36, "label", 19);
        ɵngcc0.ɵɵtext(37, "Language");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "div", 20);
        ɵngcc0.ɵɵelementStart(39, "select", 21, 22);
        ɵngcc0.ɵɵlistener("ngModelChange", function UserEditComponent_Template_select_ngModelChange_39_listener($event) { return ctx.lang = $event; })("change", function UserEditComponent_Template_select_change_39_listener() { ɵngcc0.ɵɵrestoreView(_r17); const _r2 = ɵngcc0.ɵɵreference(40); return ctx.onLanguage.emit(_r2.value); });
        ɵngcc0.ɵɵtemplate(41, UserEditComponent_option_41_Template, 2, 2, "option", 23);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(42, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(43, UserEditComponent_c8y_form_group_43_Template, 8, 4, "c8y-form-group", 24);
        ɵngcc0.ɵɵtemplate(44, UserEditComponent_div_44_Template, 6, 4, "div", 25);
        ɵngcc0.ɵɵtemplate(45, UserEditComponent_c8y_form_group_45_Template, 10, 8, "c8y-form-group", 26);
        ɵngcc0.ɵɵpipe(46, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(47, "div", 27);
        ɵngcc0.ɵɵelementStart(48, "button", 28);
        ɵngcc0.ɵɵlistener("click", function UserEditComponent_Template_button_click_48_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(49, "translate");
        ɵngcc0.ɵɵtext(50);
        ɵngcc0.ɵɵpipe(51, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(52, "button", 29);
        ɵngcc0.ɵɵpipe(53, "translate");
        ɵngcc0.ɵɵtext(54);
        ɵngcc0.ɵɵpipe(55, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.userIsExternal);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 31, "e.g. joe.doe@example.com`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.user.userName)("disabled", ctx.user.id);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(13, 33, "e.g. joe.doe`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.user.displayName)("disabled", ctx.userIsExternal);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hasWarning", !ctx.user.email);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(18, 35, "e.g. joe.doe@example.com`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("maxlength", 254)("ngModel", ctx.user.email)("required", true)("disabled", ctx.userIsExternal);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("ngModel", ctx.user.firstName)("disabled", ctx.userIsExternal);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngModel", ctx.user.lastName)("disabled", ctx.userIsExternal);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(34, 37, "e.g. +49 9 876 543 210`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.user.phone)("required", ctx.isPhoneRequired)("disabled", ctx.userIsExternal);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngModel", ctx.lang);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.langs);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showProductUsageSetting);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.userIsExternal);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !!ɵngcc0.ɵɵpipeBind1(46, 39, ctx.state.state$).newsletter);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(49, 41, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(51, 43, "Cancel"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(53, 45, "Save"));
        ɵngcc0.ɵɵproperty("disabled", !_r0.form.valid || _r0.form.pristine || ctx.loading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(55, 47, "Save"), " ");
    } }, directives: function () { return [ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, ɵngcc7.NgIf, FormGroupComponent, C8yTranslateDirective, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, ɵngcc14.MaxLengthValidator, DefaultValidationDirective, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc14.EmailValidator, PhoneValidationDirective, ɵngcc14.SelectControlValueAccessor, ɵngcc7.NgForOf, ɵngcc14.NgSelectOption, ɵngcc14.ɵNgSelectMultipleOption, ɵngcc14.CheckboxControlValueAccessor, NewPasswordComponent]; }, pipes: function () { return [C8yTranslatePipe, ɵngcc7.AsyncPipe]; }, encapsulation: 2 });
UserEditComponent.ctorParameters = () => [
    { type: AppStateService },
    { type: TranslateService },
    { type: BsModalService },
    { type: AlertService },
    { type: UserService },
    { type: TenantLoginOptionsService },
    { type: TenantService },
    { type: UserPreferencesService }
];
UserEditComponent.propDecorators = {
    lang: [{ type: Input }],
    loading: [{ type: Input }],
    user: [{ type: Input }],
    showProductUsageSetting: [{ type: Input }],
    isUsageTrackingEnabled: [{ type: Input }],
    onUser: [{ type: Output }],
    onLanguage: [{ type: Output }],
    onProductExperience: [{ type: Output }],
    onCancel: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserEditComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-user-edit',
                template: "<form #userForm=\"ngForm\" (ngSubmit)=\"userForm.form.valid && save()\">\n  <div class=\"d-block p-24 p-b-0\">\n    <div class=\"alert alert-warning\" role=\"alert\" *ngIf=\"userIsExternal\" translate>\n      Some of the user settings are not editable here because they are managed via your\n      authorization server.\n    </div>\n    <c8y-form-group>\n      <label translate for=\"userName\">Username (for example, email)</label>\n      <input\n        id=\"userName\"\n        class=\"form-control\"\n        [(ngModel)]=\"user.userName\"\n        name=\"userName\"\n        autocomplete=\"off\"\n        required\n        maxlength=\"254\"\n        placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n        [disabled]=\"user.id\"\n        c8yDefaultValidation=\"user\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate for=\"displayName\">Login alias</label>\n      <input\n        id=\"displayName\"\n        class=\"form-control\"\n        [(ngModel)]=\"user.displayName\"\n        name=\"displayName\"\n        autocomplete=\"off\"\n        maxlength=\"254\"\n        placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n        [disabled]=\"userIsExternal\"\n        c8yDefaultValidation=\"loginAlias\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group [hasWarning]=\"!user.email\">\n      <label translate for=\"userEmail\">Email</label>\n      <input\n        id=\"userEmail\"\n        class=\"form-control\"\n        type=\"email\"\n        name=\"email\"\n        [maxlength]=\"254\"\n        autocomplete=\"off\"\n        placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n        [(ngModel)]=\"user.email\"\n        email\n        [required]=\"true\"\n        [disabled]=\"userIsExternal\"\n      />\n    </c8y-form-group>\n\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label translate for=\"userFirstName\">First name</label>\n          <input\n            id=\"userFirstName\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            maxlength=\"50\"\n            name=\"firstName\"\n            [(ngModel)]=\"user.firstName\"\n            [disabled]=\"userIsExternal\"\n          />\n        </c8y-form-group>\n      </div>\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label translate for=\"userLastName\">Last name</label>\n          <input\n            id=\"userLastName\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            maxlength=\"50\"\n            name=\"lastName\"\n            [(ngModel)]=\"user.lastName\"\n            [disabled]=\"userIsExternal\"\n          />\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <c8y-form-group>\n      <label translate for=\"userTelephone\">Telephone</label>\n      <input\n        id=\"userTelephone\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"phone\"\n        maxlength=\"254\"\n        [(ngModel)]=\"user.phone\"\n        placeholder=\"{{ 'e.g. +49 9 876 543 210`LOCALIZE`' | translate }}\"\n        c8yPhoneValidation\n        c8yDefaultValidation=\"phoneNumber\"\n        [required]=\"isPhoneRequired\"\n        [disabled]=\"userIsExternal\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate for=\"userLang\">Language</label>\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"userLang\"\n          class=\"form-control\"\n          #selectLang\n          name=\"lang\"\n          [(ngModel)]=\"lang\"\n          (change)=\"onLanguage.emit(selectLang.value)\"\n        >\n          <option *ngFor=\"let lang of langs\" [value]=\"lang\">\n            {{ translate.getNativeLanguage(lang) }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </c8y-form-group>\n\n    <c8y-form-group class=\"p-t-8 p-b-8 separator-top\" *ngIf=\"showProductUsageSetting\">\n      <strong translate>Product experience</strong>\n      <label class=\"c8y-switch\" for=\"productUsageTracking\">\n        <input\n          id=\"productUsageTracking\"\n          name=\"productUsageTracking\"\n          type=\"checkbox\"\n          [(ngModel)]=\"isUsageTrackingEnabled\"\n        />\n        <span></span>\n        {{ 'Enable anonymous tracking to enhance the product experience' | translate }}\n      </label>\n    </c8y-form-group>\n\n    <div class=\"form-group\" *ngIf=\"!userIsExternal\">\n      <label class=\"control-label\">{{ 'Login options' | translate }}</label>\n      <c8y-new-password (password)=\"onNewPasswordChanged($event)\"></c8y-new-password>\n      <button\n        title=\"{{ 'Set up two-factor authentication' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"setupTotp()\"\n        *ngIf=\"userCanSetupTotp && !userHasActiveTotp && isTfaEnabled\"\n      >\n        {{ 'Set up two-factor authentication' | translate }}\n      </button>\n    </div>\n\n    <c8y-form-group *ngIf=\"!!(state.state$ | async).newsletter\">\n      <label translate>Newsletter</label>\n      <label\n        title=\"{{ 'Send me information about outages, maintenance or updates.' | translate }}\"\n        class=\"c8y-checkbox\"\n      >\n        <input\n          type=\"checkbox\"\n          name=\"newsletter\"\n          [(ngModel)]=\"user.newsletter\"\n          [disabled]=\"userIsExternal\"\n        />\n        <span></span>\n        <span>\n          {{ 'Send me information about outages, maintenance or updates.' | translate }}\n        </span>\n      </label>\n    </c8y-form-group>\n  </div>\n  <div class=\"modal-footer separator-top bg-white sticky-bottom\">\n    <button\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      [disabled]=\"!userForm.form.valid || userForm.form.pristine || loading\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: AppStateService }, { type: TranslateService }, { type: ɵngcc10.BsModalService }, { type: AlertService }, { type: ɵngcc3.UserService }, { type: ɵngcc3.TenantLoginOptionsService }, { type: ɵngcc3.TenantService }, { type: UserPreferencesService }]; }, { loading: [{
            type: Input
        }], showProductUsageSetting: [{
            type: Input
        }], isUsageTrackingEnabled: [{
            type: Input
        }], onUser: [{
            type: Output
        }], onLanguage: [{
            type: Output
        }], onProductExperience: [{
            type: Output
        }], onCancel: [{
            type: Output
        }], user: [{
            type: Input
        }], lang: [{
            type: Input
        }] }); })();

class UserMenuOutletComponent {
    constructor(ui, bsModalService, modalService, loginService, translateService, tenantService, alertService, user, optionsService) {
        this.ui = ui;
        this.bsModalService = bsModalService;
        this.modalService = modalService;
        this.loginService = loginService;
        this.translateService = translateService;
        this.tenantService = tenantService;
        this.alertService = alertService;
        this.user = user;
        this.optionsService = optionsService;
    }
    copyIt(text) {
        const handler = {
            handleEvent: (e) => {
                e.clipboardData.setData('text/plain', text);
                e.preventDefault();
            }
        };
        document.addEventListener('copy', handler);
        let copied;
        try {
            copied = document.execCommand('copy');
        }
        catch (e) {
            copied = false;
        }
        if (copied) {
            this.alertService.addByText('success', gettext('Copied to clipboard.'));
        }
        else {
            this.alertService.addByText('danger', gettext('Could not copy to clipboard.'));
        }
        document.removeEventListener('copy', handler);
    }
    editUser() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bsModalService.show(UserEditModalComponent);
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginService.logout();
        });
    }
    activateSupportAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            const title = gettext('Activate support user access');
            const companyName = this.optionsService.get('companyName', 'Cumulocity');
            const textWithCompany = gettext(
            // tslint:disable-next-line:max-line-length
            'You are about to allow a support user from {{companyName}} to access your tenant to help you with your issue.');
            const textWithoutCompany = gettext(
            // tslint:disable-next-line:max-line-length
            'You are about to allow a support user to access your tenant to help you with your issue.');
            const finalQuestion = gettext('Do you want to proceed?');
            const body = [
                this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                    companyName
                }),
                this.translateService.instant(finalQuestion)
            ].join(' ');
            const labels = {
                ok: gettext('Activate access'),
                cancel: gettext('Cancel')
            };
            const successMsg = gettext('Support user access activated.');
            try {
                yield this.modalService.confirm(title, body, Status.DANGER, labels);
                yield this.tenantService.enableSupportUser();
                yield this.refreshCurrentUser();
                this.alertService.success(successMsg);
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    deactivateSupportAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            const title = gettext('Deactivate support user access');
            const companyName = this.optionsService.get('companyName', 'Cumulocity');
            const textWithCompany = gettext(
            // tslint:disable-next-line:max-line-length
            'You are about to block a support user from {{companyName}} from accessing your tenant to help you with your issue.');
            const textWithoutCompany = gettext(
            // tslint:disable-next-line:max-line-length
            'You are about to block a support user from accessing your tenant to help you with your issue.');
            const { data: currentUser } = yield this.user.current();
            const isTenantAdmin = yield this.user.hasRole(currentUser, 'ROLE_TENANT_ADMIN');
            const tenantAdminNote = gettext(
            // tslint:disable-next-line:max-line-length
            'Deactivating support access as tenant admin will disable all other support requests on your tenant.');
            const finalQuestion = gettext('Do you want to proceed?');
            const body = [
                this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                    companyName
                }),
                isTenantAdmin ? this.translateService.instant(tenantAdminNote) : '',
                this.translateService.instant(finalQuestion)
            ]
                .filter(Boolean)
                .join(' ');
            const labels = {
                ok: gettext('Deactivate access'),
                cancel: gettext('Cancel')
            };
            const successMsg = gettext('Support user access deactivated.');
            try {
                yield this.modalService.confirm(title, body, Status.DANGER, labels);
                yield this.tenantService.disableSupportUser();
                yield this.refreshCurrentUser();
                this.alertService.success(successMsg);
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    getSortedItems() {
        return sortBy(Array.from(this.items), this.byPriority);
    }
    refreshCurrentUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentUserResult = yield this.user.current();
            this.ui.currentUser.next(currentUserResult.data);
        });
    }
    byPriority(item) {
        return -item.priority;
    }
}
UserMenuOutletComponent.ɵfac = function UserMenuOutletComponent_Factory(t) { return new (t || UserMenuOutletComponent)(ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalService), ɵngcc0.ɵɵdirectiveInject(ModalService), ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(OptionsService)); };
UserMenuOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UserMenuOutletComponent, selectors: [["c8y-user-menu-outlet"]], inputs: { items: "items" }, decls: 22, vars: 33, consts: [["dropdown", "", 1, "dropdown"], ["dropdownToggle", "", 1, "main-header-button", "c8y-dropdown", "dropdown-toggle", "text-nowrap"], [1, "d-inline-block", "hidden-xs", "text-truncate", "m-r-8", 2, "vertical-align", "text-bottom", "max-width", "104px", 3, "title"], [1, "icon-2x", 3, "c8yIcon"], ["class", "dropdown-menu dropdown-menu-right", "style", "max-width: 240px;", 4, "dropdownMenu"], [3, "icon", "label", "priority", "click"], [3, "icon", "label", "click"], [3, "icon", "label", "click", 4, "ngIf"], [3, "icon", "link", "target", "label", 4, "ngIf"], [1, "dropdown-menu", "dropdown-menu-right", 2, "max-width", "240px"], [4, "ngFor", "ngForOf"], ["role", "separator", "class", "divider", 4, "ngIf"], ["class", "dropdown-header bg-gray-white text-pre-normal", "style", "margin-top: -1px;", 4, "ngIf"], [4, "ngIf"], [4, "c8yOutlet"], [3, "click"], [1, "interact"], [3, "c8yIcon"], ["role", "separator", 1, "divider"], [1, "dropdown-header", "bg-gray-white", "text-pre-normal", 2, "margin-top", "-1px"], [1, "flex-row"], [1, "text-info", "flex-item-v-start", "text-14", 2, "margin", "1px 6px 0 -3px", 3, "c8yIcon"], [1, "text-muted", "text-truncate"], [1, "text-primary", "interact", 3, "click"], [3, "icon", "link", "target", "label"]], template: function UserMenuOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵpipe(3, "shortenUserName");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "shortenUserName");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "i", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, UserMenuOutletComponent_ul_9_Template, 6, 7, "ul", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "c8y-user-menu-item", 5);
        ɵngcc0.ɵɵlistener("click", function UserMenuOutletComponent_Template_c8y_user_menu_item_click_10_listener() { return ctx.editUser(); });
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "c8y-user-menu-item", 6);
        ɵngcc0.ɵɵlistener("click", function UserMenuOutletComponent_Template_c8y_user_menu_item_click_12_listener() { return ctx.logout(); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(14, UserMenuOutletComponent_c8y_user_menu_item_14_Template, 2, 4, "c8y-user-menu-item", 7);
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵpipe(16, "async");
        ɵngcc0.ɵɵtemplate(17, UserMenuOutletComponent_c8y_user_menu_item_17_Template, 2, 4, "c8y-user-menu-item", 7);
        ɵngcc0.ɵɵpipe(18, "async");
        ɵngcc0.ɵɵpipe(19, "async");
        ɵngcc0.ɵɵtemplate(20, UserMenuOutletComponent_c8y_user_menu_item_20_Template, 3, 8, "c8y-user-menu-item", 8);
        ɵngcc0.ɵɵpipe(21, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 11, ɵngcc0.ɵɵpipeBind1(4, 13, ctx.ui.currentUser)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 15, ɵngcc0.ɵɵpipeBind1(7, 17, ctx.ui.currentUser)), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("c8yIcon", "c8y-user");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "user-menu-male")("label", ɵngcc0.ɵɵpipeBind1(11, 19, "User settings"))("priority", 20);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "sign-out")("label", ɵngcc0.ɵɵpipeBind1(13, 21, "Logout"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(15, 23, ctx.ui.currentUser).supportUserEnabled && ɵngcc0.ɵɵpipeBind1(16, 25, ctx.ui.state$).activateSupportUserAvailable);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(18, 27, ctx.ui.currentUser).supportUserEnabled && ɵngcc0.ɵɵpipeBind1(19, 29, ctx.ui.state$).activateSupportUserAvailable);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(21, 31, ctx.ui.state$).supportUrl);
    } }, directives: [ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, IconDirective, ɵngcc9.BsDropdownMenuDirective, UserMenuItemComponent, ɵngcc7.NgIf, ɵngcc7.NgForOf, OutletDirective], pipes: [ShortenUserNamePipe, ɵngcc7.AsyncPipe, C8yTranslatePipe], encapsulation: 2 });
UserMenuOutletComponent.ctorParameters = () => [
    { type: AppStateService },
    { type: BsModalService },
    { type: ModalService },
    { type: LoginService },
    { type: TranslateService$1 },
    { type: TenantService },
    { type: AlertService },
    { type: UserService },
    { type: OptionsService }
];
UserMenuOutletComponent.propDecorators = {
    items: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserMenuOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-user-menu-outlet',
                template: "<div\n  dropdown\n  class=\"dropdown\"\n>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle text-nowrap\"\n    dropdownToggle\n  >\n    <span\n      class=\"d-inline-block hidden-xs text-truncate m-r-8\"\n      style=\"vertical-align: text-bottom; max-width: 104px;\"\n      title=\"{{ui.currentUser | async | shortenUserName}}\"\n    >\n      {{ui.currentUser | async | shortenUserName}}\n    </span>\n    <i\n      [c8yIcon]=\"'c8y-user'\"\n      class=\"icon-2x\"\n    ></i>\n  </button>\n  <ul\n    *dropdownMenu\n    class=\"dropdown-menu dropdown-menu-right\"\n    style=\"max-width: 240px;\"\n  >\n    <ng-container *ngFor=\"let item of getSortedItems()\">\n      <ng-container *ngIf=\"item.template\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!item.template\">\n        <li (click)=\"item.click()\">\n          <a class=\"interact\" [attr.href]=\"item.link\" [attr.target]=\"item.target\">\n            <i [c8yIcon]=\"item.icon\"></i>\n            {{item.label | translate}}\n          </a>\n        </li>\n      </ng-container>\n    </ng-container>\n    <li\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n      role=\"separator\"\n      class=\"divider\"\n    ></li>\n    <li\n      class=\"dropdown-header bg-gray-white text-pre-normal\"\n      style=\"margin-top: -1px;\"\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n    >\n      <div class=\"flex-row\">\n        <i\n          [c8yIcon]=\"'info-circle'\"\n          class=\"text-info flex-item-v-start text-14\"\n          style=\"margin: 1px 6px 0 -3px;\"\n        ></i>\n        <span class=\"text-muted text-truncate\">\n          {{'Tenant ID' | translate}}: <strong>\n            <span class=\"text-primary interact\" (click)=\"$event.stopPropagation(); copyIt(ui.currentTenant.value.name)\">\n              {{ui.currentTenant.value.name}}&nbsp;\n              <i [c8yIcon]=\"'clipboard'\"></i>\n            </span>\n            </strong><br>\n          {{'Backend' | translate}}: <strong>{{(ui.state$ | async).versions.backend}}</strong><br>\n          {{'UI' | translate }}: <strong>{{ui.uiVersion}}</strong>\n        </span>\n      </div>\n    </li>\n  </ul>\n</div>\n\n<!-- the default items -->\n<c8y-user-menu-item\n  [icon]=\"'user-menu-male'\"\n  [label]=\"'User settings' | translate\"\n  [priority]=\"20\"\n  (click)=\"editUser()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  [icon]=\"'sign-out'\"\n  [label]=\"'Logout' | translate\"\n  (click)=\"logout()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"!(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'c8y-c8y-support'\"\n  [label]=\"'Activate support' | translate\"\n  (click)=\"activateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'c8y-c8y-support'\"\n  [label]=\"'Deactivate support' | translate\"\n  (click)=\"deactivateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.state$ | async).supportUrl\"\n  [icon]=\"'question-circle'\"\n  [link]=\"(ui.state$ | async).supportUrl\"\n  [target]=\"'_blank'\"\n  [label]=\"'Request support' | translate\"\n></c8y-user-menu-item>\n"
            }]
    }], function () { return [{ type: AppStateService }, { type: ɵngcc10.BsModalService }, { type: ModalService }, { type: LoginService }, { type: ɵngcc4.TranslateService }, { type: ɵngcc3.TenantService }, { type: AlertService }, { type: ɵngcc3.UserService }, { type: OptionsService }]; }, { items: [{
            type: Input
        }] }); })();

class PasswordCheckListComponent {
    constructor(loginService, passwordStrengthChecker, passwordService) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (for example, abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (for example, ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (for example, 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (for example, !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: password => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.minGreenLength = yield this.loginService.getGreenMinLength();
            if (!this.minGreenLength) {
                this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
            }
        });
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map$1(this.checklist, requirement => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
}
PasswordCheckListComponent.ɵfac = function PasswordCheckListComponent_Factory(t) { return new (t || PasswordCheckListComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(PasswordService), ɵngcc0.ɵɵdirectiveInject(PasswordService)); };
PasswordCheckListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasswordCheckListComponent, selectors: [["c8y-password-check-list"]], inputs: { password: "password" }, decls: 6, vars: 4, consts: [[1, "small"], [1, "list-unstyled"], ["class", "small", 4, "ngFor", "ngForOf"], [1, "text-success", 3, "c8yIcon"], [3, "translate", "translateParams"]], template: function PasswordCheckListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "span", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "ul", 1);
        ɵngcc0.ɵɵtemplate(5, PasswordCheckListComponent_li_5_Template, 3, 6, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(3, 2, "Please meet 5 out of the 5 conditions below"), ":");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.checklist);
    } }, directives: [ɵngcc7.NgForOf, IconDirective, C8yTranslateDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
PasswordCheckListComponent.ctorParameters = () => [
    { type: LoginService },
    { type: PasswordService },
    { type: PasswordService }
];
PasswordCheckListComponent.propDecorators = {
    password: [{ type: Input, args: ['password',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordCheckListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-password-check-list',
                template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n"
            }]
    }], function () { return [{ type: LoginService }, { type: PasswordService }, { type: PasswordService }]; }, { password: [{
            type: Input,
            args: ['password']
        }] }); })();

class PasswordConfirm {
    constructor(passwordConfirm) {
        this.passwordConfirm = passwordConfirm;
    }
    validate(abControl) {
        const value = abControl.value;
        const controlToCompareWith = abControl.root.get(this.passwordConfirm);
        if (controlToCompareWith && value !== controlToCompareWith.value) {
            return { passwordConfirm: true };
        }
        return null;
    }
}
PasswordConfirm.ɵfac = function PasswordConfirm_Factory(t) { return new (t || PasswordConfirm)(ɵngcc0.ɵɵinjectAttribute('passwordConfirm')); };
PasswordConfirm.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PasswordConfirm, selectors: [["", "passwordConfirm", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALIDATORS,
                useExisting: PasswordConfirm,
                multi: true
            }
        ])] });
PasswordConfirm.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['passwordConfirm',] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordConfirm, [{
        type: Directive,
        args: [{
                selector: '[passwordConfirm]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: PasswordConfirm,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Attribute,
                args: ['passwordConfirm']
            }] }]; }, null); })();

class PasswordStrengthCheckerService {
    constructor() {
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    hasLowerCase(password) {
        return (password.search(/[a-z]/) !== -1);
    }
    hasUpperCase(password) {
        return (password.search(/[A-Z]/) !== -1);
    }
    hasNumbers(password) {
        return (password.search(/[0-9]/) !== -1);
    }
    hasSpecialChars(password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    }
    getStrengthColor(password) {
        const passwordStrength = filter$1([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 3) {
            return this.GREEN;
        }
        else if (passwordStrength >= 3) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    }
}
PasswordStrengthCheckerService.ɵfac = function PasswordStrengthCheckerService_Factory(t) { return new (t || PasswordStrengthCheckerService)(); };
PasswordStrengthCheckerService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PasswordStrengthCheckerService, factory: PasswordStrengthCheckerService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordStrengthCheckerService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class PasswordStrengthComponent {
    constructor(passwordStrengthCheckerService) {
        this.passwordStrengthCheckerService = passwordStrengthCheckerService;
        this.strength = new EventEmitter();
        this.password = '';
    }
    set password(password) {
        if (typeof password === 'string') {
            this.model = this.passwordStrengthCheckerService.getStrengthColor(password);
            this.strength.emit(this.model);
        }
    }
}
PasswordStrengthComponent.ɵfac = function PasswordStrengthComponent_Factory(t) { return new (t || PasswordStrengthComponent)(ɵngcc0.ɵɵdirectiveInject(PasswordService)); };
PasswordStrengthComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasswordStrengthComponent, selectors: [["c8y-password-strength"]], inputs: { password: "password" }, outputs: { strength: "strength" }, decls: 8, vars: 6, consts: [["translate", "", 1, "password-strength-label", "small"], [1, "password-bar"], [1, "small"]], template: function PasswordStrengthComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2, " Password strength ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div");
        ɵngcc0.ɵɵelement(4, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "span", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("password-strength password-", ctx.model.colorName, "");
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 4, ctx.model.description), " ");
    } }, directives: [C8yTranslateDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
PasswordStrengthComponent.ctorParameters = () => [
    { type: PasswordService }
];
PasswordStrengthComponent.propDecorators = {
    password: [{ type: Input, args: ['password',] }],
    strength: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordStrengthComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-password-strength',
                template: "<div class=\"password-strength password-{{ model.colorName }}\">\r\n  <label class=\"password-strength-label small\" translate>\r\n    Password strength\r\n  </label>\r\n  <div>\r\n    <div class=\"password-bar\"></div>\r\n  </div>\r\n  <span class=\"small\">\r\n    {{ model.description | translate }}\r\n  </span>\r\n</div>\r\n"
            }]
    }], function () { return [{ type: PasswordService }]; }, { strength: [{
            type: Output
        }], password: [{
            type: Input,
            args: ['password']
        }] }); })();

class NewPasswordComponent {
    constructor(loginService) {
        this.loginService = loginService;
        this.password = new EventEmitter();
        this.model = {};
        this.changePassword = false;
        this.passwordEnforced = false;
    }
    ngOnInit() {
        this.loadPasswordStrengthSettings();
        this.loginService.getGreenMinLength().then(value => {
            this.minlength = value;
        });
    }
    newPasswordChanged() {
        this.password.emit({
            password: this.model.newPassword,
            passwordStrength: this.model.strength
        });
    }
    loadPasswordStrengthSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.passwordEnforced = yield this.loginService.getPasswordStrengthEnforced({ refresh: true });
        });
    }
    showPasswordStrength() {
        return this.model.newPassword && this.model.newPassword.length >= this.minlength;
    }
    toggleChangePassword() {
        this.changePassword = !this.changePassword;
        if (!this.changePassword) {
            this.password.emit({});
            this.model = {};
        }
    }
}
NewPasswordComponent.ɵfac = function NewPasswordComponent_Factory(t) { return new (t || NewPasswordComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService)); };
NewPasswordComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NewPasswordComponent, selectors: [["c8y-new-password"]], outputs: { password: "password" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgForm }])], decls: 5, vars: 3, consts: [[1, "form-group"], ["type", "button", 1, "btn", "btn-default", 3, "click"], [4, "ngIf"], ["class", "row content-flex-50", 4, "ngIf"], [1, "row", "content-flex-50"], [1, "col-7"], ["for", "newPassword", "translate", ""], ["id", "newPassword", "name", "newPassword", "type", "password", "required", "", "c8yDefaultValidation", "password", "autocomplete", "new-password", 1, "form-control", 3, "ngModel", "ngModelChange", "change", "input"], ["newPassword", "ngModel"], ["for", "newConfirmPassword", "translate", ""], ["id", "newConfirmPassword", "name", "newPasswordConfirm", "type", "password", "required", "", "passwordConfirm", "newPassword", "autocomplete", "new-password", 1, "form-control", 3, "ngModel", "ngModelChange"], ["newPasswordConfirm", "ngModel"], [1, "col-5"], [3, "password", "strength"], [1, "m-t-32", 3, "password", "hidden"]], template: function NewPasswordComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function NewPasswordComponent_Template_button_click_1_listener() { return ctx.toggleChangePassword(); });
        ɵngcc0.ɵɵtemplate(2, NewPasswordComponent_ng_container_2_Template, 3, 3, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, NewPasswordComponent_ng_container_3_Template, 3, 3, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, NewPasswordComponent_div_4_Template, 15, 5, "div", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.changePassword);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.changePassword);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.changePassword);
    } }, directives: [ɵngcc7.NgIf, FormGroupComponent, C8yTranslateDirective, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, DefaultValidationDirective, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, PasswordConfirm, PasswordStrengthComponent, PasswordCheckListComponent], pipes: [C8yTranslatePipe], encapsulation: 2 });
NewPasswordComponent.ctorParameters = () => [
    { type: LoginService }
];
NewPasswordComponent.propDecorators = {
    password: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NewPasswordComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-new-password',
                template: "<div class=\"form-group\">\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n    <ng-container *ngIf=\"!changePassword\">\n      {{ 'Change password' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"changePassword\">\n      {{ 'Cancel password change' | translate }}\n    </ng-container>\n  </button>\n</div>\n\n<div *ngIf=\"changePassword\" class=\"row content-flex-50\">\n  <div class=\"col-7\">\n    <c8y-form-group>\n      <label for=\"newPassword\" translate>Password</label>\n      <input\n        id=\"newPassword\"\n        name=\"newPassword\"\n        type=\"password\"\n        #newPassword=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPassword\"\n        (change)=\"newPasswordChanged()\"\n        (input)=\"newPasswordConfirm.control.updateValueAndValidity()\"\n        required\n        c8yDefaultValidation=\"password\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label for=\"newConfirmPassword\" translate>Confirm password</label>\n      <input\n        id=\"newConfirmPassword\"\n        name=\"newPasswordConfirm\"\n        type=\"password\"\n        #newPasswordConfirm=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPasswordConfirm\"\n        required\n        passwordConfirm=\"newPassword\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n  </div>\n  <div class=\"col-5\">\n    <c8y-password-strength\n      [password]=\"model.newPassword\"\n      (strength)=\"model.strength = $event\"\n    ></c8y-password-strength>\n\n    <c8y-password-check-list\n      class=\"m-t-32\"\n      [password]=\"model.newPassword\"\n      [hidden]=\"!passwordEnforced\"\n    ></c8y-password-check-list>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            }]
    }], function () { return [{ type: LoginService }]; }, { password: [{
            type: Output
        }] }); })();

class TotpChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        /**
         * Calls the verify endpoint if set to true (default true)
         */
        this.verify = true;
        /**
         * Emits the token on success.
         */
        this.onSuccess = new EventEmitter();
        /**
         * Emits if set up two-factor authentication is canceled.
         */
        this.totpUnconfirmedEmitter = new EventEmitter();
        this.loading = false;
        this.hasError = false;
        this.model = {
            token: ''
        };
    }
    verifyCode() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                if (this.verify) {
                    yield this.users.verifyTotpCode(this.model.token);
                }
                this.onSuccess.emit(this.model.token);
            }
            catch (e) {
                this.hasError = true;
                this.alert.removeLastDanger();
                this.loading = false;
            }
        });
    }
    cancel() {
        this.totpUnconfirmedEmitter.emit();
    }
}
TotpChallengeComponent.ɵfac = function TotpChallengeComponent_Factory(t) { return new (t || TotpChallengeComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
TotpChallengeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TotpChallengeComponent, selectors: [["c8y-totp-challenge"]], viewQuery: function TotpChallengeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c50, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modal = _t.first);
    } }, inputs: { verify: "verify", loading: "loading", hasError: "hasError" }, outputs: { onSuccess: "onSuccess", totpUnconfirmedEmitter: "totpUnconfirmedEmitter" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgForm }])], decls: 19, vars: 17, consts: [["novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["totpForm", "ngForm"], [1, "d-block", "p-24", "p-b-0"], [3, "hasError", "novalidation", "ngClass"], [1, "label", "p-0"], ["translate", "", "for", "totpToken"], ["id", "totpToken", "name", "totpToken", "type", "text", "autofocus", "", "autocapitalize", "off", "autocorrect", "off", "autocomplete", "off", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["translate", "", 4, "ngIf"], ["id", "helpinput", "class", "help-block", "translate", "", 4, "ngIf"], [1, "modal-footer", "separator-top", "bg-level-0", "sticky-bottom", "p-b-0"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["type", "submit", "class", "btn btn-primary form-group", 3, "title", "disabled", 4, "ngIf"], ["type", "submit", "class", "btn btn-primary btn-pending", 3, "title", 4, "ngIf"], ["translate", ""], ["id", "helpinput", "translate", "", 1, "help-block"], ["type", "submit", 1, "btn", "btn-primary", "form-group", 3, "title", "disabled"], ["type", "submit", 1, "btn", "btn-primary", "btn-pending", 3, "title"]], template: function TotpChallengeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function TotpChallengeComponent_Template_form_ngSubmit_0_listener() { return ctx.verifyCode(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "c8y-form-group", 3);
        ɵngcc0.ɵɵelementStart(4, "h1", 4);
        ɵngcc0.ɵɵelementStart(5, "label", 5);
        ɵngcc0.ɵɵtext(6, "Verification code");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function TotpChallengeComponent_Template_input_ngModelChange_7_listener($event) { return ctx.model.token = $event; });
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "c8y-messages");
        ɵngcc0.ɵɵtemplate(10, TotpChallengeComponent_c8y_message_10_Template, 2, 0, "c8y-message", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, TotpChallengeComponent_p_11_Template, 2, 0, "p", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "button", 10);
        ɵngcc0.ɵɵlistener("click", function TotpChallengeComponent_Template_button_click_13_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, TotpChallengeComponent_button_17_Template, 4, 7, "button", 11);
        ɵngcc0.ɵɵtemplate(18, TotpChallengeComponent_button_18_Template, 4, 6, "button", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("hasError", ctx.hasError)("novalidation", true)("ngClass", ctx.hasError ? "p-b-24" : "");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(8, 11, "e.g."), " 624327");
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.token);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasError);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(14, 13, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 15, "Cancel"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
    } }, directives: [ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, FormGroupComponent, ɵngcc7.NgClass, C8yTranslateDirective, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, MessagesComponent, ɵngcc7.NgIf, MessageDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
TotpChallengeComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
TotpChallengeComponent.propDecorators = {
    verify: [{ type: Input }],
    onSuccess: [{ type: Output }],
    totpUnconfirmedEmitter: [{ type: Output }],
    loading: [{ type: Input }],
    hasError: [{ type: Input }],
    modal: [{ type: ViewChild, args: ['modal', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TotpChallengeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-totp-challenge',
                template: "<form #totpForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"verifyCode()\" novalidate>\n  <div class=\"d-block p-24 p-b-0\">\n    <c8y-form-group\n      [hasError]=\"hasError\"\n      [novalidation]=\"true\"\n      [ngClass]=\"hasError ? 'p-b-24' : ''\"\n    >\n      <h1 class=\"label p-0\"><label translate for=\"totpToken\">Verification code</label></h1>\n\n      <input\n        id=\"totpToken\"\n        [(ngModel)]=\"model.token\"\n        name=\"totpToken\"\n        type=\"text\"\n        autofocus\n        autocapitalize=\"off\"\n        autocorrect=\"off\"\n        autocomplete=\"off\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g.' | translate }} 624327\"\n        required\n      />\n\n      <c8y-messages>\n        <c8y-message *ngIf=\"hasError\" translate>\n          Invalid verification code. In case of key loss, please contact your platform\n          administrator.\n        </c8y-message>\n      </c8y-messages>\n      <p id=\"helpinput\" *ngIf=\"!hasError\" class=\"help-block\" translate>\n        In case of key loss, please contact your platform administrator.\n      </p>\n    </c8y-form-group>\n  </div>\n  <div class=\"modal-footer separator-top bg-level-0 sticky-bottom p-b-0\">\n    <button\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      *ngIf=\"!loading\"\n      title=\"{{ 'Verify' | translate }}\"\n      [disabled]=\"!totpForm.form.valid\"\n      type=\"submit\"\n      class=\"btn btn-primary form-group\"\n    >\n      {{ 'Verify' | translate }}\n    </button>\n\n    <button\n      *ngIf=\"loading\"\n      title=\"{{ 'Verifying\u2026' | translate }}\"\n      type=\"submit\"\n      class=\"btn btn-primary btn-pending\"\n    >\n      {{ 'Verifying\u2026' | translate }}\n    </button>\n  </div>\n</form>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            }]
    }], function () { return [{ type: LoginService }, { type: ɵngcc3.UserService }, { type: AlertService }]; }, { verify: [{
            type: Input
        }], onSuccess: [{
            type: Output
        }], totpUnconfirmedEmitter: [{
            type: Output
        }], loading: [{
            type: Input
        }], hasError: [{
            type: Input
        }], modal: [{
            type: ViewChild,
            args: ['modal', { static: false }]
        }] }); })();

class SmsChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.model = {
            smsToken: ''
        };
        this.isLoading = false;
        this.resendTfa = '0';
    }
    verifyTFACode() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            if (yield this.usesOAuthInternal()) {
                yield this.verifyCodeWithOauth();
            }
            else {
                yield this.verifyCodeWithBasicAuth();
            }
            this.isLoading = false;
        });
    }
    resendTFASms() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.isLoading = true;
                yield this.users.verifyTFACode(this.resendTfa);
            }
            catch (e) {
                if (e.res.status === 403) {
                    this.loginService.cleanMessages();
                    this.loginService.addSuccessMessage('resend_sms');
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    usesOAuthInternal() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.loginService.isPasswordGrantLogin(this.credentials);
        });
    }
    verifyCodeWithOauth() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { credentials } = this;
                yield this.loginService.switchLoginMode(Object.assign(Object.assign({}, credentials), { tfa: this.model.smsToken }));
                yield this.loginService.verifyAppAccess();
                yield this.loginService.authFulfilled();
            }
            catch (e) {
                const resStatus = e.res && e.res.status;
                if (resStatus === 401) {
                    // it is assumed that the user and password are correct so it must be the tfa code
                    this.alert.danger(gettext('Invalid code'));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    verifyCodeWithBasicAuth() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { res } = yield this.users.verifyTFACode(this.model.smsToken);
                const tfaToken = res.headers.get('tfatoken');
                this.credentials.tfa = tfaToken;
                yield this.loginWithTFA(tfaToken);
            }
            catch (e) {
                const resStatus = e.res && e.res.status;
                // BE returns 403 in case of invalid tfa code
                if (resStatus === 403) {
                    this.alert.danger(gettext('Invalid code'));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    loginWithTFA(tfaToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loginService.login(this.loginService.useBasicAuth({ tfa: tfaToken }), this.credentials);
                this.loginService.saveTFAToken(tfaToken, sessionStorage);
                if (this.loginService.rememberMe) {
                    this.loginService.saveTFAToken(tfaToken, localStorage);
                }
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
        });
    }
}
SmsChallengeComponent.ɵfac = function SmsChallengeComponent_Factory(t) { return new (t || SmsChallengeComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
SmsChallengeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SmsChallengeComponent, selectors: [["c8y-sms-challenge"]], inputs: { credentials: "credentials" }, outputs: { onCancel: "onCancel" }, decls: 21, vars: 18, consts: [["novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["twoFactorForm", "ngForm"], ["translate", "", 1, "legend", "form-block", "center"], ["translate", ""], ["type", "text", "name", "sms_token", "autofocus", "", "autocapitalize", "off", "autocorrect", "off", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["sms_token", "ngModel"], ["class", "help-block", "translate", "", 4, "ngIf"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", "btn-lg", "btn-block", "form-group", 3, "title", "disabled"], [1, "d-flex", "m-t-8"], ["translate", "", 1, "small", "pointer", "m-r-auto", 3, "title", "ngClass", "click"], ["translate", "", 1, "small", "pointer", "m-l-auto", 3, "title", "click"], ["translate", "", 1, "help-block"]], template: function SmsChallengeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function SmsChallengeComponent_Template_form_ngSubmit_0_listener() { return ctx.verifyTFACode(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, " Two-factor authentication ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(5, "label", 3);
        ɵngcc0.ɵɵtext(6, "Verification code");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 4, 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function SmsChallengeComponent_Template_input_ngModelChange_7_listener($event) { return ctx.model.smsToken = $event; });
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, SmsChallengeComponent_p_10_Template, 2, 0, "p", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "button", 7);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵtext(13, " Verify ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 8);
        ɵngcc0.ɵɵelementStart(15, "a", 9);
        ɵngcc0.ɵɵlistener("click", function SmsChallengeComponent_Template_a_click_15_listener() { return ctx.resendTFASms(); });
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵtext(17, " Send new code ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "a", 10);
        ɵngcc0.ɵɵlistener("click", function SmsChallengeComponent_Template_a_click_18_listener() { return ctx.onCancel.emit(); });
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtext(20, " Log in ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(9, 8, "e.g."), " 624327");
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.smsToken);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !_r0.form.valid || ctx.isLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 10, "Verify"));
        ɵngcc0.ɵɵproperty("disabled", !_r0.form.valid || ctx.isLoading);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(16, 12, "Send new code"));
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(16, _c51, ctx.isLoading));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 14, "Log in"));
    } }, directives: [ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, C8yTranslateDirective, FormGroupComponent, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc7.NgIf, ɵngcc7.NgClass], pipes: [C8yTranslatePipe], encapsulation: 2 });
SmsChallengeComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
SmsChallengeComponent.propDecorators = {
    credentials: [{ type: Input }],
    onCancel: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SmsChallengeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-sms-challenge',
                template: "<form #twoFactorForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Two-factor authentication\n  </div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autofocus\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} 624327\"\n      required\n    />\n    <p *ngIf=\"!twoFactorForm.form.valid || isLoading \" class=\"help-block\" translate>\n      Insert the code received via SMS.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Verify\n  </button>\n\n  <div class=\"d-flex m-t-8\">\n    <a\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"small pointer m-r-auto\"\n      (click)=\"resendTFASms()\"\n      translate\n    >\n      Send new code\n    </a>\n    <a\n      title=\"{{ 'Log in' | translate }}\"\n      class=\"small pointer m-l-auto\"\n      (click)=\"onCancel.emit()\"\n      translate\n    >\n      Log in\n    </a>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: LoginService }, { type: ɵngcc3.UserService }, { type: AlertService }]; }, { onCancel: [{
            type: Output
        }], credentials: [{
            type: Input
        }] }); })();

class TotpSetupComponent {
    constructor(user, alert) {
        this.user = user;
        this.alert = alert;
    }
    get qrCodeImage() {
        return this.totpSecret ? this.totpSecret.secretQrUrl : '';
    }
    get secret() {
        return this.totpSecret ? this.totpSecret.rawSecret : '';
    }
    get qrData() {
        // TODO: waiting for BE:, now we need extract it from secretQrUrl
        // https://cumulocity.atlassian.net/browse/MTM-36387
        // return this.totpSecret ? this.totpSecret.qrData : '';
        const otpAuth = this.qrCodeImage.split('chl=')[1];
        if (!otpAuth) {
            this.alert.danger(gettext('Failed to generate a QR code.'));
            return '';
        }
        return decodeURIComponent(otpAuth);
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.user.generateTotpSecret();
                this.totpSecret = data;
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
        });
    }
}
TotpSetupComponent.ɵfac = function TotpSetupComponent_Factory(t) { return new (t || TotpSetupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
TotpSetupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TotpSetupComponent, selectors: [["c8y-totp-setup"]], decls: 6, vars: 2, consts: [[1, "text-center"], ["translate", "", 1, "m-24", "m-t-16", "m-b-0"], [3, "width", "qrdata", "errorCorrectionLevel", 4, "ngIf"], [1, "text-center", "text-muted"], [3, "width", "qrdata", "errorCorrectionLevel"]], template: function TotpSetupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "p", 1);
        ɵngcc0.ɵɵtext(2, " Scan this QR code with your smartphone using the Google Authenticator app. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, TotpSetupComponent_qrcode_3_Template, 1, 3, "qrcode", 2);
        ɵngcc0.ɵɵelementStart(4, "p", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.totpSecret);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.secret, " ");
    } }, directives: [C8yTranslateDirective, ɵngcc7.NgIf, ɵngcc15.QRCodeComponent], encapsulation: 2 });
TotpSetupComponent.ctorParameters = () => [
    { type: UserService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TotpSetupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-totp-setup',
                template: "<div class=\"text-center\">\n  <p class=\"m-24 m-t-16 m-b-0\" translate>\n    Scan this QR code with your smartphone using the Google Authenticator app.\n  </p>\n\n  <qrcode *ngIf=\"totpSecret\" [width]=\"180\" [qrdata]=\"qrData\" [errorCorrectionLevel]=\"'M'\"></qrcode>\n  <p class=\"text-center text-muted\">\n    {{ secret }}\n  </p>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.UserService }, { type: AlertService }]; }, null); })();

var LoginViews;
(function (LoginViews) {
    LoginViews[LoginViews["None"] = 0] = "None";
    LoginViews[LoginViews["Credentials"] = 1] = "Credentials";
    LoginViews[LoginViews["RecoverPassword"] = 2] = "RecoverPassword";
    LoginViews[LoginViews["SmsChallenge"] = 3] = "SmsChallenge";
    LoginViews[LoginViews["ChangePassword"] = 4] = "ChangePassword";
    LoginViews[LoginViews["TotpChallenge"] = 5] = "TotpChallenge";
    LoginViews[LoginViews["TotpSetup"] = 6] = "TotpSetup";
    LoginViews[LoginViews["ProvidePhoneNumber"] = 7] = "ProvidePhoneNumber";
    LoginViews[LoginViews["TenantIdSetup"] = 8] = "TenantIdSetup";
})(LoginViews || (LoginViews = {}));

class ProvidePhoneNumberComponent {
    constructor(loginService, alert, userService) {
        this.loginService = loginService;
        this.alert = alert;
        this.userService = userService;
        this.onCancel = new EventEmitter();
        this.onChangeView = new EventEmitter();
        this.requestInProgress = false;
        this.sendTfa = '0';
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.requestInProgress = true;
                yield this.userService.savePhoneNumber(this.phoneNumber);
                yield this.sendTFASms();
                this.onChangeView.emit({
                    view: LoginViews.SmsChallenge,
                    credentials: this.credentials
                });
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
            finally {
                this.requestInProgress = false;
            }
        });
    }
    sendTFASms() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.userService.verifyTFACode(this.sendTfa);
            }
            catch (e) {
                if (e.res.status === 403) {
                    this.loginService.cleanMessages();
                    this.loginService.addSuccessMessage('send_sms');
                }
                else {
                    throw e;
                }
            }
        });
    }
}
ProvidePhoneNumberComponent.ɵfac = function ProvidePhoneNumberComponent_Factory(t) { return new (t || ProvidePhoneNumberComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService)); };
ProvidePhoneNumberComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ProvidePhoneNumberComponent, selectors: [["c8y-provide-phone-number"]], inputs: { credentials: "credentials" }, outputs: { onCancel: "onCancel", onChangeView: "onChangeView" }, decls: 19, vars: 18, consts: [["role", "form", "novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["twoFactorForm", "ngForm"], ["translate", "", 1, "legend", "form-block", "center"], [3, "ngClass"], ["translate", ""], ["type", "text", "name", "phone", "autocomplete", "off", "c8yPhoneValidation", "", "c8yDefaultValidation", "phoneNumber", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["contactPhone", "ngModel"], ["type", "submit", 1, "btn", "btn-primary", "btn-lg", "btn-block", "form-group", 3, "title", "disabled"], [1, "d-flex", "m-t-8"], ["href", "#", 1, "small", "pointer", "m-l-auto", 3, "title", "click"]], template: function ProvidePhoneNumberComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function ProvidePhoneNumberComponent_Template_form_ngSubmit_0_listener() { return ctx.save(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, " Two-factor authentication ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-form-group", 3);
        ɵngcc0.ɵɵelementStart(5, "label", 4);
        ɵngcc0.ɵɵtext(6, "Provide your phone number");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 5, 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function ProvidePhoneNumberComponent_Template_input_ngModelChange_7_listener($event) { return ctx.phoneNumber = $event; });
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "button", 7);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 8);
        ɵngcc0.ɵɵelementStart(15, "a", 9);
        ɵngcc0.ɵɵlistener("click", function ProvidePhoneNumberComponent_Template_a_click_15_listener() { return ctx.onCancel.emit(); });
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngClass", ctx.requestInProgress || _r0.invalid ? "p-b-8" : "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 8, "e.g. +49 9 876 543 210`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.phoneNumber);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 10, "Save and continue"));
        ɵngcc0.ɵɵproperty("disabled", ctx.requestInProgress || _r0.invalid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 12, "Save and continue"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(16, 14, "Login"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 16, "Login"), " ");
    } }, directives: [ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, C8yTranslateDirective, FormGroupComponent, ɵngcc7.NgClass, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, PhoneValidationDirective, DefaultValidationDirective, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel], pipes: [C8yTranslatePipe], encapsulation: 2 });
ProvidePhoneNumberComponent.ctorParameters = () => [
    { type: LoginService },
    { type: AlertService },
    { type: UserService }
];
ProvidePhoneNumberComponent.propDecorators = {
    credentials: [{ type: Input }],
    onCancel: [{ type: Output }],
    onChangeView: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProvidePhoneNumberComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-provide-phone-number',
                template: "<form #twoFactorForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"save()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Two-factor authentication\n  </div>\n\n  <c8y-form-group [ngClass]=\"requestInProgress || twoFactorForm.invalid ? 'p-b-8' : ''\">\n    <label translate>Provide your phone number</label>\n\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"phoneNumber\"\n      #contactPhone=\"ngModel\"\n      type=\"text\"\n      name=\"phone\"\n      autocomplete=\"off\"\n      placeholder=\"{{ 'e.g. +49 9 876 543 210`LOCALIZE`' | translate }}\"\n      c8yPhoneValidation\n      c8yDefaultValidation=\"phoneNumber\"\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Save and continue' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"requestInProgress || twoFactorForm.invalid\"\n  >\n    {{ 'Save and continue' | translate }}\n  </button>\n\n  <div class=\"d-flex m-t-8\">\n    <a\n      title=\"{{ 'Login' | translate }}\"\n      class=\"small pointer m-l-auto\"\n      href=\"#\"\n      (click)=\"onCancel.emit()\"\n    >\n      {{ 'Login' | translate }}\n    </a>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: LoginService }, { type: AlertService }, { type: ɵngcc3.UserService }]; }, { onCancel: [{
            type: Output
        }], onChangeView: [{
            type: Output
        }], credentials: [{
            type: Input
        }] }); })();

/**
 * The angular module definition for new password.
 * @exports PasswordStrengthComponent
 * @exports PasswordCheckListComponent
 * @exports PasswordConfirm
 * @exports NewPasswordComponent
 * @exports PasswordConfirmModalComponent
 */
class AuthenticationModule {
}
AuthenticationModule.ɵfac = function AuthenticationModule_Factory(t) { return new (t || AuthenticationModule)(); };
AuthenticationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AuthenticationModule });
AuthenticationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [PasswordStrengthCheckerService, PasswordService], imports: [[FormsModule, TooltipModule, CommonModule, ModalModule, QRCodeModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthenticationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TotpChallengeComponent,
                    PasswordConfirm,
                    PasswordStrengthComponent,
                    PasswordCheckListComponent,
                    NewPasswordComponent,
                    PasswordConfirmModalComponent,
                    CurrentPasswordModalComponent,
                    SmsChallengeComponent,
                    TotpSetupComponent,
                    ProvidePhoneNumberComponent
                ],
                imports: [FormsModule, TooltipModule, CommonModule, ModalModule, QRCodeModule],
                exports: [
                    TotpChallengeComponent,
                    PasswordStrengthComponent,
                    PasswordCheckListComponent,
                    PasswordConfirm,
                    NewPasswordComponent,
                    PasswordConfirmModalComponent,
                    CurrentPasswordModalComponent,
                    SmsChallengeComponent,
                    TotpSetupComponent,
                    ProvidePhoneNumberComponent
                ],
                entryComponents: [PasswordConfirmModalComponent],
                providers: [PasswordStrengthCheckerService, PasswordService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AuthenticationModule, { declarations: function () { return [TotpChallengeComponent, PasswordConfirm, PasswordStrengthComponent, PasswordCheckListComponent, NewPasswordComponent, PasswordConfirmModalComponent, CurrentPasswordModalComponent, SmsChallengeComponent, TotpSetupComponent, ProvidePhoneNumberComponent]; }, imports: function () { return [FormsModule, TooltipModule, CommonModule, ModalModule, QRCodeModule]; }, exports: function () { return [TotpChallengeComponent, PasswordStrengthComponent, PasswordCheckListComponent, PasswordConfirm, NewPasswordComponent, PasswordConfirmModalComponent, CurrentPasswordModalComponent, SmsChallengeComponent, TotpSetupComponent, ProvidePhoneNumberComponent]; } }); })();

class UserTotpRevokeComponent {
    constructor(users, alert) {
        this.users = users;
        this.alert = alert;
        this.revokeEmitter = new EventEmitter();
    }
    revoke() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.users.totpRevokeSecret(this.user);
                this.alert.success(gettext('User TOTP secret revoked.'));
                this.revokeEmitter.next();
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
        });
    }
}
UserTotpRevokeComponent.ɵfac = function UserTotpRevokeComponent_Factory(t) { return new (t || UserTotpRevokeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
UserTotpRevokeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UserTotpRevokeComponent, selectors: [["c8y-user-totp-revoke"]], inputs: { user: "user" }, outputs: { revokeEmitter: "revoke" }, decls: 8, vars: 7, consts: [["type", "button", "placement", "bottom", 1, "btn", "btn-default", 3, "popover", "popoverTitle"], ["popover", "bs-popover"], ["c8yIcon", "key"], ["confirm", ""], ["translate", "", 1, "m-b-16"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["type", "button", "translate", "", 1, "btn", "btn-danger", 3, "title", "click"]], template: function UserTotpRevokeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelement(3, "i", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, UserTotpRevokeComponent_ng_template_6_Template, 8, 6, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(7);
        ɵngcc0.ɵɵproperty("popover", _r1)("popoverTitle", ɵngcc0.ɵɵpipeBind1(2, 3, "Revoke TOTP secret"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 5, "Revoke TOTP secret"), "\n");
    } }, directives: [ɵngcc12.PopoverDirective, IconDirective, C8yTranslateDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
UserTotpRevokeComponent.ctorParameters = () => [
    { type: UserService },
    { type: AlertService }
];
UserTotpRevokeComponent.propDecorators = {
    user: [{ type: Input }],
    revokeEmitter: [{ type: Output, args: ['revoke',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserTotpRevokeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-user-totp-revoke',
                template: "<button\n  type=\"button\"\n  class=\"btn btn-default\"\n  [popover]=\"confirm\"\n  [popoverTitle]=\"'Revoke TOTP secret' | translate\"\n  #popover=\"bs-popover\"\n  placement=\"bottom\"\n  \n\n>\n  <i c8yIcon=\"key\"></i> {{ 'Revoke TOTP secret' | translate }}\n</button>\n\n<ng-template #confirm>\n  <p class=\"m-b-16\" translate>\n    This action will revoke the user's stored TOTP secret which will require a new setup.\n  </p>\n  <button\n    title=\"{{ 'Cancel' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    (click)=\"popover.hide()\"\n    translate\n  >\n    Cancel\n  </button>\n    <button\n    title=\"{{ 'Revoke' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-danger\"\n    (click)=\"revoke(); popover.hide()\"\n    translate\n  >\n    Revoke\n  </button>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc3.UserService }, { type: AlertService }]; }, { revokeEmitter: [{
            type: Output,
            args: ['revoke']
        }], user: [{
            type: Input
        }] }); })();

/**
 * The angular module definition for the user menu.
 * @exports UserMenuComponent
 * @exports UserMenuItemComponent
 * @exports UserEditComponent
 * @exports UserEditModalComponent
 */
class UserModule {
}
UserModule.ɵfac = function UserModule_Factory(t) { return new (t || UserModule)(); };
UserModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: UserModule });
UserModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule,
            CommonModule,
            ModalModule,
            BsDropdownModule,
            AuthenticationModule,
            AlertModule,
            RouterModule$1,
            TooltipModule.forRoot(),
            PopoverModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    UserMenuOutletComponent,
                    UserEditComponent,
                    UserEditModalComponent,
                    UserMenuItemComponent,
                    UserTotpSetupComponent,
                    UserTotpRevokeComponent,
                ],
                imports: [
                    FormsModule,
                    CommonModule,
                    ModalModule,
                    BsDropdownModule,
                    AuthenticationModule,
                    AlertModule,
                    RouterModule$1,
                    TooltipModule.forRoot(),
                    PopoverModule
                ],
                exports: [
                    UserMenuOutletComponent,
                    UserMenuItemComponent,
                    UserEditComponent,
                    UserEditModalComponent,
                    UserTotpSetupComponent,
                    UserTotpRevokeComponent
                ],
                entryComponents: [
                    UserEditModalComponent,
                    UserTotpSetupComponent,
                    UserTotpRevokeComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UserModule, { declarations: function () { return [UserMenuOutletComponent, UserEditComponent, UserEditModalComponent, UserMenuItemComponent, UserTotpSetupComponent, UserTotpRevokeComponent]; }, imports: function () { return [FormsModule, CommonModule, ModalModule, BsDropdownModule, AuthenticationModule, AlertModule, RouterModule$1, ɵngcc11.TooltipModule, PopoverModule]; }, exports: function () { return [UserMenuOutletComponent, UserMenuItemComponent, UserEditComponent, UserEditModalComponent, UserTotpSetupComponent, UserTotpRevokeComponent]; } }); })();

class AppIconComponent {
    constructor(options) {
        this.options = options;
        this.name = '';
        this.model = {
            appIcon: '',
            showIcon: true,
            iconClass: ['c8y-icon'],
            appNameAbbr: '',
            iconStyle: {}
        };
        this.c8yAppIconsList = {
            analyticsbuilder: 'analytics-builder',
            'analytics-builder': 'analytics-builder',
            cockpit: 'cockpit',
            devicemanagement: 'device-management',
            administration: 'administration',
            apamaepl: 'apama-epl'
        };
        this.white = false;
        this.defaultIconStyle = {
            'background-repeat': 'no-repeat',
            'background-size': 'contain',
            height: '36px',
            width: '36px'
        };
    }
    ngOnInit() {
        this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
        const iconUrl = this.iconUrlFromAppDefinition();
        if (iconUrl) {
            this.model.iconStyle = assign(this.defaultIconStyle, {
                'background-image': iconUrl
            });
        }
        this.model.showIcon = !!this.model.appIcon || !isEmpty(this.model.iconStyle);
        this.model.iconClass = [
            'c8y-icon',
            this.mapFontAwesomeToDelightIcons(this.model.appIcon),
            this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
        ].filter(c => !!c);
        this.model.appNameAbbr = this.name.substr(0, 2);
    }
    findStaticIcon() {
        const contextPath = this.contextPath || this.name;
        const appContextPathNormalized = find$1(keys(this.c8yAppIconsList), cp => {
            return contextPath.indexOf(cp) > -1;
        });
        const appIcon = this.c8yAppIconsList[appContextPathNormalized];
        return appIcon ? `c8y-icon-${appIcon}` : undefined;
    }
    iconFromAppDefinition() {
        const app = this.app || this.options;
        const iconClassProperty = ['icon', 'class'];
        const iconClass = get(app, ['manifest', ...iconClassProperty]) || get(app, iconClassProperty);
        return iconClass;
    }
    iconUrlFromAppDefinition() {
        const app = this.app || this.options;
        const iconUrlProperty = ['icon', 'url'];
        const iconUrl = get(app, ['manifest', ...iconUrlProperty]) || get(app, iconUrlProperty);
        return iconUrl;
    }
    mapFontAwesomeToDelightIcons(iconClasses) {
        if (!iconClasses) {
            return;
        }
        const regex = /fa-/gi;
        return iconClasses.replace(regex, 'dlt-c8y-icon-');
    }
}
AppIconComponent.ɵfac = function AppIconComponent_Factory(t) { return new (t || AppIconComponent)(ɵngcc0.ɵɵdirectiveInject(OptionsService)); };
AppIconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AppIconComponent, selectors: [["c8y-app-icon"]], hostAttrs: [1, "c8y-app-icon"], inputs: { name: "name", contextPath: "contextPath", app: "app" }, decls: 2, vars: 2, consts: [[3, "ngClass", "ngStyle", 4, "ngIf"], ["class", "app-noicon", 4, "ngIf"], [3, "ngClass", "ngStyle"], [1, "app-noicon"]], template: function AppIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AppIconComponent_i_0_Template, 1, 2, "i", 0);
        ɵngcc0.ɵɵtemplate(1, AppIconComponent_span_1_Template, 2, 1, "span", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.model.showIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.model.showIcon);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgClass, ɵngcc7.NgStyle], encapsulation: 2 });
AppIconComponent.ctorParameters = () => [
    { type: OptionsService }
];
AppIconComponent.propDecorators = {
    contextPath: [{ type: Input }],
    name: [{ type: Input }],
    app: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppIconComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-app-icon',
                template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
                host: { class: 'c8y-app-icon' }
            }]
    }], function () { return [{ type: OptionsService }]; }, { name: [{
            type: Input
        }], contextPath: [{
            type: Input
        }], app: [{
            type: Input
        }] }); })();

class AppSwitcherComponent {
    constructor(ui, applications) {
        this.ui = ui;
        this.applications = applications;
        const { currentUser, currentTenant } = this.ui;
        combineLatest(currentUser, currentTenant)
            .pipe(first$1())
            .subscribe(([user, tenant]) => {
            this.tenant = tenant;
            this.listAppsForUser(user);
        });
    }
    get hideCloudApps() {
        return false; // this should be configurable from outside
    }
    isActive(app) {
        return app.contextPath === this.ui.state.app.contextPath;
    }
    getHref(app) {
        return this.applications.getHref(app);
    }
    listAppsForUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            if (user) {
                const { data } = yield this.applications.listByUser(user, { pageSize: 1000 });
                this.apps = this.orderApps(this.filterApps(data));
            }
        });
    }
    filterApps(apps) {
        apps = this.filterVisible(apps);
        apps = this.filterCloud(apps);
        apps = this.filterDuplicates(apps);
        return apps;
    }
    filterVisible(apps) {
        const visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
        return apps.filter(app => includes(visibleApplicationTypes, app.type) &&
            !app.noAppSwitcher &&
            !get(app, 'manifest.noAppSwitcher'));
    }
    filterCloud(apps) {
        const { hideCloudApps } = this;
        const filterFn = app => !!app.cloud;
        if (!hideCloudApps) {
            this.oneCloudApps = this.orderApps(apps.filter(filterFn));
        }
        return apps.filter(app => !filterFn(app));
    }
    filterDuplicates(apps) {
        // Filter out apps that have duplicate contextpaths and are not own owned but the current tenant;
        const filterFn = app => !apps.some(otherApp => app !== otherApp &&
            (app.contextPath && app.contextPath === otherApp.contextPath) &&
            app.owner.tenant.id !== this.tenant.name);
        return apps.filter(filterFn);
    }
    orderApps(apps) {
        return orderBy(apps, ({ name }) => name.toLowerCase());
    }
}
AppSwitcherComponent.ɵfac = function AppSwitcherComponent_Factory(t) { return new (t || AppSwitcherComponent)(ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ApplicationService)); };
AppSwitcherComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AppSwitcherComponent, selectors: [["c8y-app-switcher"]], decls: 5, vars: 3, consts: [["dropdown", "", 1, "app-switcher-dropdown"], ["id", "appSwitcherDropdown", "dropdownToggle", "", 1, "main-header-button", "c8y-dropdown", "dropdown-toggle", 3, "title"], ["c8yIcon", "th", 1, "icon-2x"], ["class", "app-switcher-dropdown-menu dropdown-menu", "aria-labelledby", "appSwitcherDropdown", 4, "dropdownMenu"], ["aria-labelledby", "appSwitcherDropdown", 1, "app-switcher-dropdown-menu", "dropdown-menu"], ["class", "app-switcher-sagcloud", 4, "ngIf"], [1, "app-switcher"], ["class", "appLink", "c8yProductExperience", "", 3, "title", "ngClass", "href", "actionName", "actionData", 4, "ngFor", "ngForOf"], [1, "app-switcher-sagcloud"], ["class", "appLink", "c8yProductExperience", "", 3, "title", "href", "actionName", "actionData", 4, "ngFor", "ngForOf"], ["c8yProductExperience", "", 1, "appLink", 3, "title", "href", "actionName", "actionData"], [3, "app", "name", "contextPath"], [1, "text-truncate-wrap"], ["c8yProductExperience", "", 1, "appLink", 3, "title", "ngClass", "href", "actionName", "actionData"]], template: function AppSwitcherComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelement(3, "i", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, AppSwitcherComponent_div_4_Template, 4, 2, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Application switcher"));
    } }, directives: [ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, IconDirective, ɵngcc9.BsDropdownMenuDirective, ɵngcc7.NgIf, ɵngcc7.NgForOf, ProductExperienceDirective, AppIconComponent, ɵngcc7.NgClass], pipes: [C8yTranslatePipe, ɵngcc7.AsyncPipe, HumanizeAppNamePipe], encapsulation: 2 });
AppSwitcherComponent.ctorParameters = () => [
    { type: AppStateService },
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppSwitcherComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-app-switcher',
                template: "<div class=\"app-switcher-dropdown\" dropdown>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    id=\"appSwitcherDropdown\"\n    dropdownToggle\n    title=\"{{ 'Application switcher' | translate }}\"\n  >\n    <i c8yIcon=\"th\" class=\"icon-2x\"></i>\n  </button>\n  <div\n    *dropdownMenu\n    class=\"app-switcher-dropdown-menu dropdown-menu\"\n    aria-labelledby=\"appSwitcherDropdown\"\n  >\n    <div class=\"app-switcher-sagcloud\" *ngIf=\"oneCloudApps && oneCloudApps.length > 0\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        *ngFor=\"let app of oneCloudApps\"\n        [href]=\"getHref(app)\"\n        c8yProductExperience\n        [actionName]=\"'appSwitched'\"\n        [actionData]=\"{ applicationName: app && app.name }\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n    <div class=\"app-switcher\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        [ngClass]=\"isActive(app) ? 'active' : ''\"\n        *ngFor=\"let app of apps\"\n        [href]=\"getHref(app)\"\n        c8yProductExperience\n        [actionName]=\"'appSwitched'\"\n        [actionData]=\"{ applicationName: app && app.name }\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: AppStateService }, { type: ɵngcc3.ApplicationService }]; }, null); })();

class HeaderBarComponent {
    constructor(headerService, actionService, breadcrumbService, searchService, appState, userMenuService, docs) {
        this.headerService = headerService;
        this.actionService = actionService;
        this.breadcrumbService = breadcrumbService;
        this.searchService = searchService;
        this.appState = appState;
        this.userMenuService = userMenuService;
        this.docs = docs;
        this.canToggle$ = this.headerService.hasItemsInNavigator$;
        this.appState$ = this.appState.state$;
        this.drawerOpen = false;
        this.headerOpen = false;
        /**
         * Can be set to show an header bar with only
         * title, app-switcher and user-menu
         */
        this.simple = false;
    }
    ngAfterViewInit() {
        this.headerService.verifyIfNavOpen();
    }
}
HeaderBarComponent.ɵfac = function HeaderBarComponent_Factory(t) { return new (t || HeaderBarComponent)(ɵngcc0.ɵɵdirectiveInject(HeaderService), ɵngcc0.ɵɵdirectiveInject(ActionService), ɵngcc0.ɵɵdirectiveInject(BreadcrumbService), ɵngcc0.ɵɵdirectiveInject(SearchService), ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(UserMenuService), ɵngcc0.ɵɵdirectiveInject(DocsService)); };
HeaderBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HeaderBarComponent, selectors: [["c8y-header-bar"]], inputs: { simple: "simple" }, decls: 28, vars: 39, consts: [[1, "app-main-header", 3, "ngClass"], [1, "header-bar"], ["type", "button", "class", "navigator-toggle main-header-button", 3, "title", "click", 4, "ngIf"], [1, "app-view"], [3, "name", "contextPath"], [1, "page-header"], ["class", "app-breadcrumbs", 3, "breadcrumbs", 4, "ngIf"], ["class", "main-header-item", 3, "title", "search", 4, "ngIf"], [3, "title", "items", 4, "ngIf"], [1, "main-header-item", 3, "title"], [1, "main-header-item", 3, "items"], ["class", "drawer-toggle main-header-button", 3, "title", "click", 4, "ngIf"], [1, "head-toggler"], ["type", "button", 3, "title", "click"], [3, "c8yIcon"], [3, "app", "quickLinks", "helpAndSupport", 4, "ngIf"], [1, "loading-bar", 3, "ngClass"], ["type", "button", 1, "navigator-toggle", "main-header-button", 3, "title", "click"], [3, "c8yIcon", 4, "ngIf"], [1, "app-breadcrumbs", 3, "breadcrumbs"], [1, "main-header-item", 3, "title", "search"], [3, "title", "items"], [1, "drawer-toggle", "main-header-button", 3, "title", "click"], [3, "app", "quickLinks", "helpAndSupport"]], template: function HeaderBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, HeaderBarComponent_button_3_Template, 6, 9, "button", 2);
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelement(6, "c8y-app-icon", 4);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementStart(9, "span", 5);
        ɵngcc0.ɵɵelement(10, "c8y-title-outlet");
        ɵngcc0.ɵɵtemplate(11, HeaderBarComponent_c8y_breadcrumb_outlet_11_Template, 2, 3, "c8y-breadcrumb-outlet", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, HeaderBarComponent_c8y_search_outlet_12_Template, 3, 6, "c8y-search-outlet", 7);
        ɵngcc0.ɵɵtemplate(13, HeaderBarComponent_c8y_action_outlet_13_Template, 3, 6, "c8y-action-outlet", 8);
        ɵngcc0.ɵɵelement(14, "c8y-app-switcher", 9);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelement(16, "c8y-user-menu-outlet", 10);
        ɵngcc0.ɵɵpipe(17, "async");
        ɵngcc0.ɵɵtemplate(18, HeaderBarComponent_button_18_Template, 4, 5, "button", 11);
        ɵngcc0.ɵɵpipe(19, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "div", 12);
        ɵngcc0.ɵɵelementStart(21, "button", 13);
        ɵngcc0.ɵɵlistener("click", function HeaderBarComponent_Template_button_click_21_listener() { return ctx.headerService.toggle(); });
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelement(23, "i", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(24, HeaderBarComponent_c8y_right_drawer_24_Template, 4, 9, "c8y-right-drawer", 15);
        ɵngcc0.ɵɵpipe(25, "async");
        ɵngcc0.ɵɵelement(26, "div", 16);
        ɵngcc0.ɵɵpipe(27, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(34, _c53, ɵngcc0.ɵɵpipeBind1(1, 14, ctx.headerService.navigatorOpen$) && !ctx.simple, ctx.drawerOpen));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(4, 16, ctx.canToggle$) && !ctx.simple);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("name", ɵngcc0.ɵɵpipeBind1(7, 18, ctx.appState$).app.name)("contextPath", ɵngcc0.ɵɵpipeBind1(8, 20, ctx.appState$).app.contextPath);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.simple);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.simple);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.simple);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 22, "Application switcher"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(17, 24, ctx.userMenuService.state$).userMenuItems);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(19, 26, ctx.appState$).showRightDrawer && !ctx.simple);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(22, 28, "Toggle"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "angle-right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(25, 30, ctx.appState$).showRightDrawer);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(37, _c54, ɵngcc0.ɵɵpipeBind1(27, 32, ctx.appState$).isLoading));
    } }, directives: function () { return [ɵngcc7.NgClass, ɵngcc7.NgIf, AppIconComponent, TitleOutletComponent, AppSwitcherComponent, UserMenuOutletComponent, IconDirective, BreadcrumbOutletComponent, SearchOutletComponent, ActionOutletComponent, RightDrawerComponent]; }, pipes: function () { return [ɵngcc7.AsyncPipe, C8yTranslatePipe]; }, encapsulation: 2 });
HeaderBarComponent.ctorParameters = () => [
    { type: HeaderService },
    { type: ActionService },
    { type: BreadcrumbService },
    { type: SearchService },
    { type: AppStateService },
    { type: UserMenuService },
    { type: DocsService }
];
HeaderBarComponent.propDecorators = {
    simple: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderBarComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-header-bar',
                template: "<div\n  class=\"app-main-header\"\n  [ngClass]=\"{\n    open: (headerService.navigatorOpen$ | async) && !simple,\n    drawerOpen: drawerOpen\n  }\"\n>\n  <div class=\"header-bar\">\n    <button\n      *ngIf=\"(canToggle$ | async) && !simple\"\n      type=\"button\"\n      class=\"navigator-toggle main-header-button\"\n      title=\"{{ 'Toggle navigator' | translate }}\"\n      (click)=\"headerService.toggleNavigator()\"\n    >\n      <i [c8yIcon]=\"'outdent'\" *ngIf=\"!(headerService.navigatorOpen$ | async)\"></i>\n      <i [c8yIcon]=\"'dedent-right'\" *ngIf=\"headerService.navigatorOpen$ | async\"></i>\n    </button>\n    <div class=\"app-view\">\n      <c8y-app-icon\n        [name]=\"(appState$ | async).app.name\"\n        [contextPath]=\"(appState$ | async).app.contextPath\"\n      ></c8y-app-icon>\n\n      <span class=\"page-header\">\n        <c8y-title-outlet></c8y-title-outlet>\n        <c8y-breadcrumb-outlet\n          *ngIf=\"!simple\"\n          [breadcrumbs]=\"breadcrumbService.items$ | async\"\n          class=\"app-breadcrumbs\"\n        ></c8y-breadcrumb-outlet>\n      </span>\n    </div>\n    <c8y-search-outlet\n      *ngIf=\"!simple\"\n      title=\"{{ 'Search' | translate }}\"\n      [search]=\"searchService.items$ | async\"\n      class=\"main-header-item\"\n    ></c8y-search-outlet>\n    <c8y-action-outlet\n      *ngIf=\"!simple\"\n      title=\"{{ 'Add' | translate }}\"\n      [items]=\"actionService.items$ | async\"\n    ></c8y-action-outlet>\n    <c8y-app-switcher\n      title=\"{{ 'Application switcher' | translate }}\"\n      class=\"main-header-item\"\n    ></c8y-app-switcher>\n    <c8y-user-menu-outlet\n      [items]=\"(userMenuService.state$ | async).userMenuItems\"\n      class=\"main-header-item\"\n    ></c8y-user-menu-outlet>\n\n    <button\n      title=\"{{ 'Toggle side drawer' | translate }}\"\n      class=\"drawer-toggle main-header-button\"\n      *ngIf=\"(appState$ | async).showRightDrawer && !simple\"\n      (click)=\"drawerOpen = !drawerOpen\"\n    >\n      <i [c8yIcon]=\"'indent'\" *ngIf=\"drawerOpen\"></i>\n      <i [c8yIcon]=\"'dedent'\" *ngIf=\"!drawerOpen\"></i>\n    </button>\n  </div>\n  <div class=\"head-toggler\">\n    <button title=\"{{ 'Toggle' | translate }}\" type=\"button\" (click)=\"headerService.toggle()\">\n      <i [c8yIcon]=\"'angle-right'\"></i>\n    </button>\n  </div>\n  <c8y-right-drawer\n    *ngIf=\"(appState$ | async).showRightDrawer\"\n    [app]=\"(appState$ | async).app\"\n    [quickLinks]=\"docs.items$ | async\"\n    [helpAndSupport]=\"docs.items$ | async\"\n  >\n  </c8y-right-drawer>\n  <div class=\"loading-bar\" [ngClass]=\"{ active: (appState$ | async).isLoading }\"></div>\n</div>\n"
            }]
    }], function () { return [{ type: HeaderService }, { type: ActionService }, { type: BreadcrumbService }, { type: SearchService }, { type: AppStateService }, { type: UserMenuService }, { type: DocsService }]; }, { simple: [{
            type: Input
        }] }); })();

class RightDrawerComponent {
    constructor() {
        this.quickLinks = [];
        this.helpAndSupport = [];
    }
    set _quickLinks(data) {
        if (data) {
            this.quickLinks = data.filter(d => d.type === 'quicklink');
        }
    }
    set _helpAndSupport(data) {
        if (data) {
            this.helpAndSupport = data.filter(d => d.type === 'doc');
        }
    }
}
RightDrawerComponent.ɵfac = function RightDrawerComponent_Factory(t) { return new (t || RightDrawerComponent)(); };
RightDrawerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RightDrawerComponent, selectors: [["c8y-right-drawer"]], inputs: { _quickLinks: ["quickLinks", "_quickLinks"], _helpAndSupport: ["helpAndSupport", "_helpAndSupport"], app: "app" }, decls: 9, vars: 10, consts: [[1, "c8y-right-drawer"], [1, "summary"], [1, "text-light"], [4, "ngIf"], ["translate", "", 1, "legend", "form-block"], [1, "quick-links-drawer"], [4, "ngFor", "ngForOf"], ["c8yProductExperience", "", 1, "quick-link", 3, "href", "actionName", "actionData", "click"], ["style", "max-width:50px;", "class", "img-responsive center-block", "onerror", "this.style.display = 'none'", 3, "src", 4, "ngIf"], ["onerror", "this.style.display = 'none'", 1, "img-responsive", "center-block", 2, "max-width", "50px", 3, "src"], ["translate", "", 1, "legend", "form-block", "m-t-24"], ["class", "help-support", 4, "ngFor", "ngForOf"], [1, "help-support"], ["target", "_blank", "rel", "noopener noreferrer", "c8yProductExperience", "", 1, "help-and-support-link", "text-truncate", 3, "href", "actionName", "actionData"], [3, "c8yIcon"], [1, "d-inline", 3, "title"]], template: function RightDrawerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h4", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "humanizeAppName");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, RightDrawerComponent_div_7_Template, 5, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(8, RightDrawerComponent_div_8_Template, 4, 1, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(4, 4, "Welcome to"), " ", ɵngcc0.ɵɵpipeBind1(5, 6, ɵngcc0.ɵɵpipeBind1(6, 8, ctx.app)), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.quickLinks.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helpAndSupport.length);
    } }, directives: [ɵngcc7.NgIf, C8yTranslateDirective, ɵngcc7.NgForOf, ProductExperienceDirective, IconDirective], pipes: [C8yTranslatePipe, ɵngcc7.AsyncPipe, HumanizeAppNamePipe], encapsulation: 2 });
RightDrawerComponent.propDecorators = {
    _quickLinks: [{ type: Input, args: ['quickLinks',] }],
    _helpAndSupport: [{ type: Input, args: ['helpAndSupport',] }],
    app: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RightDrawerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-right-drawer',
                template: "<div class=\"c8y-right-drawer\">\n  <div class=\"summary\">\n    <h4 class=\"text-light\">\n      {{ 'Welcome to' | translate }} {{ app | humanizeAppName | async }}\n    </h4>\n  </div>\n\n  <div *ngIf=\"quickLinks.length\">\n    <div class=\"legend form-block\" translate>Quick links</div>\n    <div class=\"quick-links-drawer\">\n      <ng-container *ngFor=\"let quickLink of quickLinks\">\n        <a\n          class=\"quick-link\"\n          [href]=\"quickLink.url || '#'\"\n          (click)=\"quickLink.click && $event.preventDefault(); quickLink.click && quickLink.click();\"\n          c8yProductExperience\n          [actionName]=\"'quickLinkRightDrawer:' + quickLink.label\"\n          [actionData]=\"\"\n        >\n          <h2 *ngIf=\"quickLink.icon\"><i class=\"{{ quickLink.icon }}\"></i></h2>\n          <img\n            *ngIf=\"quickLink.iconSrc\"\n            [src]=\"quickLink.iconSrc\"\n            style=\"max-width:50px;\"\n            class=\"img-responsive center-block\"\n            onerror=\"this.style.display = 'none'\">\n          {{ quickLink.label | translate }}\n        </a>\n      </ng-container>\n    </div>\n  </div>\n\n  <div *ngIf=\"helpAndSupport.length\">\n    <div class=\"legend form-block m-t-24\" translate>Help &amp; support</div>\n    <div class=\"help-support\" *ngFor=\"let link of helpAndSupport\">\n      <a\n        class=\"help-and-support-link text-truncate\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        [href]=\"link.url\"\n        c8yProductExperience\n        [actionName]=\"'quickLinkRightDrawer:' + link.label\"\n        [actionData]=\"\"\n      >\n        <i [c8yIcon]=\"link.icon\"></i>\n        <span title=\"{{ link.label | translate }}\" class=\"d-inline\">\n          {{ link.label | translate }}\n        </span>\n      </a>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { _quickLinks: [{
            type: Input,
            args: ['quickLinks']
        }], _helpAndSupport: [{
            type: Input,
            args: ['helpAndSupport']
        }], app: [{
            type: Input
        }] }); })();

class TitleOutletComponent {
    constructor(headerService, element, zone) {
        this.headerService = headerService;
        this.element = element;
        this.zone = zone;
        this.title = undefined;
        this.pageTitleUpdate = true;
        const title$ = this.headerService.map(state => state.title);
        title$.subscribe(title => (this.title = title));
        const pageTitleUpdate$ = this.headerService.map(state => state.pageTitleUpdate);
        pageTitleUpdate$.subscribe(pageTitleUpdate => (this.pageTitleUpdate = pageTitleUpdate));
        this.zone.runOutsideAngular(() => {
            this.headerService.state$.pipe(debounceTime(100), filter(state => state.pageTitleUpdate), debounceTime(100), map(() => this.element.nativeElement.querySelector('h1')), filter(el => el !== null), map(el => el.innerText), filter(Boolean))
                .subscribe((title) => headerService.changePageTitle(title));
        });
    }
}
TitleOutletComponent.ɵfac = function TitleOutletComponent_Factory(t) { return new (t || TitleOutletComponent)(ɵngcc0.ɵɵdirectiveInject(HeaderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
TitleOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TitleOutletComponent, selectors: [["c8y-title-outlet"]], decls: 2, vars: 1, consts: [[1, "c8y-ui-title"], ["class", "title", 4, "c8yOutlet"], [1, "title"]], template: function TitleOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, TitleOutletComponent_div_1_Template, 1, 0, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("c8yOutlet", ctx.title);
    } }, directives: [OutletDirective], encapsulation: 2 });
TitleOutletComponent.ctorParameters = () => [
    { type: HeaderService },
    { type: ElementRef },
    { type: NgZone }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TitleOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-title-outlet',
                template: "<div class=\"c8y-ui-title\">\n  <div class=\"title\" *c8yOutlet=\"title\"></div>\n</div>\n"
            }]
    }], function () { return [{ type: HeaderService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();

class TitleComponent {
    constructor(headerService) {
        this.headerService = headerService;
        this.pageTitleUpdate = true;
    }
    ngAfterViewInit() {
        this.viewInitTimeout = setTimeout(() => this.headerService.changeTitle(this.template, this.pageTitleUpdate));
    }
    ngOnDestroy() {
        if (this.headerService.state.title === this.template) {
            clearTimeout(this.viewInitTimeout);
            this.headerService.changeTitle();
        }
    }
}
TitleComponent.ɵfac = function TitleComponent_Factory(t) { return new (t || TitleComponent)(ɵngcc0.ɵɵdirectiveInject(HeaderService)); };
TitleComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TitleComponent, selectors: [["c8y-title"]], viewQuery: function TitleComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { pageTitleUpdate: "pageTitleUpdate" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""], [1, "text-truncate"]], template: function TitleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, TitleComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
TitleComponent.ctorParameters = () => [
    { type: HeaderService }
];
TitleComponent.propDecorators = {
    pageTitleUpdate: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TitleComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-title',
                template: "<ng-template #template>\n  <h1 class=\"text-truncate\">\n    <ng-content></ng-content>\n  </h1>\n</ng-template>\n\n"
            }]
    }], function () { return [{ type: HeaderService }]; }, { pageTitleUpdate: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['template', { static: true }]
        }] }); })();

/**
 * The angular module definition for the header of the application.
 * @exports HeaderBarComponent
 * @exports TitleComponent
 * @exports TitleOutletComponent
 * @exports AppIconComponent
 * @exports AppSwitcherComponent
 */
class HeaderModule {
}
HeaderModule.ɵfac = function HeaderModule_Factory(t) { return new (t || HeaderModule)(); };
HeaderModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HeaderModule });
HeaderModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            BsDropdownModule,
            UserModule,
            SearchModule,
            CommonModule,
            ActionModule,
            BreadcrumbModule,
            NavigatorModule,
            ProductExperienceModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TitleComponent,
                    HeaderBarComponent,
                    TitleOutletComponent,
                    AppIconComponent,
                    AppSwitcherComponent,
                    RightDrawerComponent
                ],
                imports: [
                    BsDropdownModule,
                    UserModule,
                    SearchModule,
                    CommonModule,
                    ActionModule,
                    BreadcrumbModule,
                    NavigatorModule,
                    ProductExperienceModule
                ],
                exports: [
                    HeaderBarComponent,
                    TitleComponent,
                    TitleOutletComponent,
                    AppIconComponent,
                    AppSwitcherComponent,
                    RightDrawerComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HeaderModule, { declarations: function () { return [TitleComponent, HeaderBarComponent, TitleOutletComponent, AppIconComponent, AppSwitcherComponent, RightDrawerComponent]; }, imports: function () { return [BsDropdownModule, UserModule, SearchModule, CommonModule, ActionModule, BreadcrumbModule, NavigatorModule, ProductExperienceModule]; }, exports: function () { return [HeaderBarComponent, TitleComponent, TitleOutletComponent, AppIconComponent, AppSwitcherComponent, RightDrawerComponent]; } }); })();

class ChangePasswordComponent {
    constructor(loginService, users, passwordStrengthCheckerService, options, alert) {
        this.loginService = loginService;
        this.users = users;
        this.passwordStrengthCheckerService = passwordStrengthCheckerService;
        this.options = options;
        this.alert = alert;
        this.onChangeView = new EventEmitter();
        this.passwordPattern = /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/;
        this.isLoading = false;
        this.model = {
            tenantId: '',
            email: '',
            newPassword: '',
            newPasswordConfirm: ''
        };
        this.emailReadOnly = false;
        this.passwordStrengthEnforced = false;
        this.TOKEN_PARAM = 'token';
        this.EMAIL_PARAM = 'email';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.model.tenantId = this.loginService.getTenant();
            this.model.email = this.options.get(this.EMAIL_PARAM, '');
            this.emailReadOnly = !!this.model.email;
            this.passwordStrengthEnforced = yield this.loginService.getPasswordStrengthEnforced();
        });
    }
    changePassword() {
        return __awaiter(this, void 0, void 0, function* () {
            const passwordStrengthColor = this.passwordStrengthCheckerService.getStrengthColor(this.model.newPassword);
            const resetPassword = {
                token: this.credentials.token,
                email: this.model.email,
                newPassword: this.model.newPassword,
                passwordStrength: passwordStrengthColor.passwordStrength
            };
            try {
                this.isLoading = true;
                const { res } = yield this.users.resetPassword(resetPassword, this.model.tenantId);
                if (res.status === 200) {
                    this.loginService.addSuccessMessage('password_changed');
                    this.credentials.token = undefined;
                    this.options.set(this.TOKEN_PARAM, undefined);
                    if (this.loginService.showTenantSetup()) {
                        this.onChangeView.emit({ view: LoginViews.TenantIdSetup });
                    }
                    else {
                        this.onChangeView.emit({ view: LoginViews.Credentials });
                    }
                }
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
            finally {
                this.loginService.reset();
                this.isLoading = false;
            }
        });
    }
}
ChangePasswordComponent.ɵfac = function ChangePasswordComponent_Factory(t) { return new (t || ChangePasswordComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(PasswordService), ɵngcc0.ɵɵdirectiveInject(OptionsService), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
ChangePasswordComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ChangePasswordComponent, selectors: [["c8y-change-password"]], inputs: { credentials: "credentials" }, outputs: { onChangeView: "onChangeView" }, decls: 35, vars: 26, consts: [["role", "form", "novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["changePasswordForm", "ngForm"], ["translate", "", 1, "legend", "form-block", "center"], ["class", "tenantField", "id", "tenantField", 4, "ngIf"], ["translate", ""], ["type", "text", "name", "email", "autocapitalize", "off", "autocorrect", "off", "email", "", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "readonly", "ngModelChange"], ["email", "ngModel"], [1, "row", "content-flex-50"], [1, "col-7"], ["type", "password", "name", "newPassword", "autocomplete", "new-password", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "pattern", "passwordStrengthEnforced", "ngModelChange"], ["newPassword", "ngModel"], ["name", "pattern", 3, "text"], ["type", "password", "name", "newPasswordConfirm", "passwordConfirm", "newPassword", "autocomplete", "new-password", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["newPasswordConfirm", "ngModel"], ["name", "passwordConfirm", 3, "text"], [1, "col-5"], [3, "password", "hidden"], [1, "m-t-32", 3, "password", "hidden"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", "btn-lg", "btn-block", "form-group", 3, "title", "disabled"], ["id", "tenantField", 1, "tenantField"], ["type", "text", "name", "tenantId", "autocapitalize", "off", "autocorrect", "off", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["tenantId", "ngModel"]], template: function ChangePasswordComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function ChangePasswordComponent_Template_form_ngSubmit_0_listener() { return ctx.changePassword(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, " Change password ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ChangePasswordComponent_c8y_form_group_4_Template, 6, 4, "c8y-form-group", 3);
        ɵngcc0.ɵɵelementStart(5, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(6, "label", 4);
        ɵngcc0.ɵɵtext(7, "Email address");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "input", 5, 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function ChangePasswordComponent_Template_input_ngModelChange_8_listener($event) { return ctx.model.email = $event; });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵelementStart(12, "div", 8);
        ɵngcc0.ɵɵelementStart(13, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(14, "label", 4);
        ɵngcc0.ɵɵtext(15, "New password");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "input", 9, 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function ChangePasswordComponent_Template_input_ngModelChange_16_listener($event) { return ctx.model.newPassword = $event; });
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "c8y-messages");
        ɵngcc0.ɵɵelement(20, "c8y-message", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(22, "label", 4);
        ɵngcc0.ɵɵtext(23, "Confirm password");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "input", 12, 13);
        ɵngcc0.ɵɵlistener("ngModelChange", function ChangePasswordComponent_Template_input_ngModelChange_24_listener($event) { return ctx.model.newPasswordConfirm = $event; });
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "c8y-messages");
        ɵngcc0.ɵɵelement(28, "c8y-message", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "div", 15);
        ɵngcc0.ɵɵelement(30, "c8y-password-strength", 16);
        ɵngcc0.ɵɵelement(31, "c8y-password-check-list", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "button", 18);
        ɵngcc0.ɵɵpipe(33, "translate");
        ɵngcc0.ɵɵtext(34, " Set password ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loginService.showTenant());
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 18, "Email address"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.email)("readonly", ctx.emailReadOnly);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(18, 20, "New password"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.newPassword)("pattern", ctx.passwordPattern)("passwordStrengthEnforced", ctx.passwordStrengthEnforced);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("text", ctx.loginService.ERROR_MESSAGES.pattern_newPassword);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(26, 22, "Confirm password"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.newPasswordConfirm);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("text", ctx.loginService.ERROR_MESSAGES.passwordConfirm);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("password", ctx.model.newPassword)("hidden", !ctx.model.newPassword);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("password", ctx.model.newPassword)("hidden", !ctx.model.newPassword || !ctx.passwordStrengthEnforced);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(33, 24, "Set password"));
        ɵngcc0.ɵɵproperty("disabled", !_r0.form.valid || ctx.isLoading);
    } }, directives: function () { return [ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, C8yTranslateDirective, ɵngcc7.NgIf, FormGroupComponent, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.EmailValidator, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc14.PatternValidator, PasswordStrengthValidatorDirective, MessagesComponent, MessageDirective, PasswordConfirm, PasswordStrengthComponent, PasswordCheckListComponent]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
ChangePasswordComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: PasswordService },
    { type: OptionsService },
    { type: AlertService }
];
ChangePasswordComponent.propDecorators = {
    credentials: [{ type: Input }],
    onChangeView: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChangePasswordComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-change-password',
                template: "<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"changePassword()\"\n  #changePasswordForm=\"ngForm\"\n  novalidate\n>\n\n  <div\n    class=\"legend form-block center\"\n    translate\n  >\n    Change password\n  </div>\n\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n      [readonly]=\"emailReadOnly\"\n    />\n  </c8y-form-group>\n\n  <div class=\"row content-flex-50\">\n    <div class=\"col-7\">\n      <c8y-form-group>\n        <label translate>New password</label>\n        <input\n          [(ngModel)]=\"model.newPassword\"\n          #newPassword=\"ngModel\"\n          type=\"password\"\n          name=\"newPassword\"\n          class=\"form-control\"\n          placeholder=\"{{ 'New password' | translate }}\"\n          [pattern]=\"passwordPattern\"\n          autocomplete=\"new-password\"\n          [passwordStrengthEnforced]='passwordStrengthEnforced'\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"pattern\"\n            [text]=\"loginService.ERROR_MESSAGES.pattern_newPassword\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label translate>Confirm password</label>\n        <input\n          [(ngModel)]=\"model.newPasswordConfirm\"\n          #newPasswordConfirm=\"ngModel\"\n          type=\"password\"\n          name=\"newPasswordConfirm\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Confirm password' | translate }}\"\n          passwordConfirm=\"newPassword\"\n          autocomplete=\"new-password\"\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"passwordConfirm\"\n            [text]=\"loginService.ERROR_MESSAGES.passwordConfirm\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n    <div class=\"col-5\">\n      <c8y-password-strength\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword\"\n      ></c8y-password-strength>\n      <c8y-password-check-list\n        class=\"m-t-32\"\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword || !passwordStrengthEnforced\"\n      ></c8y-password-check-list>\n    </div>\n  </div>\n\n  <button\n    title=\"{{ 'Set password' | translate }}\"\n    [disabled]=\"!changePasswordForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Set password\n  </button>\n</form>\n"
            }]
    }], function () { return [{ type: LoginService }, { type: ɵngcc3.UserService }, { type: PasswordService }, { type: OptionsService }, { type: AlertService }]; }, { onChangeView: [{
            type: Output
        }], credentials: [{
            type: Input
        }] }); })();

class CredentialsFromQueryParamsService {
    constructor() {
        this.queryParamsToHandle = ['tenant', 'user'];
    }
    /**
     * Retrieves any subset of credentials provided via queryParams
     * @return ICredentials found in queryParams.
     */
    getCredentialsFromQueryParams() {
        const credentials = {};
        try {
            const params = new URLSearchParams(window.location.search);
            this.queryParamsToHandle.forEach(param => {
                const value = this.getParameterFromQueryParams(params, param);
                if (value) {
                    credentials[param] = value;
                }
            });
        }
        catch (e) {
            // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
        }
        return credentials;
    }
    /**
     * Removes credentials from the queryParameters if any are present.
     * In case some credentials were present, this method will cause a page reload.
     * @return boolean if credentials were found.
     */
    removeCredentialsFromQueryParams() {
        try {
            const params = new URLSearchParams(window.location.search);
            const hasRemovedAtLeastOneParam = this.queryParamsToHandle.map(param => this.removeParameterFromQueryParameters(params, param)).reduceRight((prev, curr) => prev || curr, false);
            if (hasRemovedAtLeastOneParam) {
                window.location.search = params.toString();
                return true;
            }
        }
        catch (e) {
            // URLSearchParams probably not available in all browsers (https://caniuse.com/urlsearchparams)
        }
        return false;
    }
    /**
     * Looks for the specified key in the provided URLSearchParams.
     * If the specified key was found, it will be removed.
     * @return boolean if key was found.
     */
    removeParameterFromQueryParameters(params, key) {
        const keyAsString = `${key}`;
        if (!params.has(keyAsString)) {
            return false;
        }
        params.delete(keyAsString);
        return true;
    }
    /**
     * Looks for the specified key in the provided URLSearchParams.
     * If the specified key was found, it's value will be returned.
     * Otherwise null will be returned.
     * @return string/null.
     */
    getParameterFromQueryParams(params, key) {
        const keyAsString = `${key}`;
        if (!params.has(keyAsString)) {
            return null;
        }
        const value = params.get(keyAsString);
        if (!value) {
            return null;
        }
        return value;
    }
}
CredentialsFromQueryParamsService.ɵfac = function CredentialsFromQueryParamsService_Factory(t) { return new (t || CredentialsFromQueryParamsService)(); };
CredentialsFromQueryParamsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: CredentialsFromQueryParamsService, factory: CredentialsFromQueryParamsService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CredentialsFromQueryParamsService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class CredentialsComponent {
    constructor(loginService, alert, ui, credentialsFromQueryParamsService) {
        this.loginService = loginService;
        this.alert = alert;
        this.ui = ui;
        this.credentialsFromQueryParamsService = credentialsFromQueryParamsService;
        this.onChangeView = new EventEmitter();
        this.loginViewParams = {
            disableTenant: false,
            showTenant: false
        };
        this.LOGIN_VIEWS = LoginViews;
        this.model = {};
        this.isLoading = false;
        this.showLoginForm = false;
        this.showBasicAuth = false;
        this.oauthOptions = {};
        this.showTenant = false;
        this.PASSWORD_RESET_HEADER_NAME = 'passwordresettoken';
        this.NO_PHONE_HEADER_NAME = 'NoPhoneHeader';
    }
    ngOnInit() {
        const { oauthOptions, loginMode } = this.loginService;
        this.model.tenant = this.loginService.getTenant();
        this.showLoginForm =
            typeof loginMode.visibleOnLoginPage === 'undefined' || loginMode.visibleOnLoginPage;
        this.showBasicAuth = loginMode.type === 'BASIC';
        this.oauthOptions = oauthOptions;
        const credentialsFromQueryParams = this.credentialsFromQueryParamsService.getCredentialsFromQueryParams();
        Object.assign(this.model, credentialsFromQueryParams);
        this.showTenant = this.loginViewParams.showTenant || this.loginService.showTenant();
    }
    redirectToOauth() {
        this.loginService.redirectToOauth();
    }
    /**
     * Allows to login into the application using basic auth.
     * If successful logged in the client is set in shared/cumulocity.service.ts
     */
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.isLoading = true;
                const basicAuth = this.loginService.useBasicAuth(this.model);
                yield this.loginService.login(basicAuth, this.model);
            }
            catch (e) {
                if (e.res && e.res.headers && e.res.headers.get(this.PASSWORD_RESET_HEADER_NAME)) {
                    this.handlePasswordReset(e.res);
                }
                else if (e.res && e.res.status === 401 && /pin/i.test(e.data.message)) {
                    this.handleSmsChallenge(e.data.message);
                }
                else if (e.res && e.res.status === 401 && /TOTP/i.test(e.data.message)) {
                    this.handleTotpChallenge(e.data.message);
                }
                else if (e.res &&
                    e.res.headers &&
                    e.res.headers.get(this.NO_PHONE_HEADER_NAME) &&
                    !this.loginService.isSupportUser(this.model)) {
                    this.handleNoPhoneNumberProvided();
                }
                else {
                    this.loginService.generateOauthToken(this.model);
                    this.loginService.reset();
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    handlePasswordReset(e) {
        this.alert.removeLastDanger();
        this.model.token = e.headers.get(this.PASSWORD_RESET_HEADER_NAME);
        this.onChangeView.emit({ view: LoginViews.ChangePassword, credentials: this.model });
    }
    handleTotpChallenge(message) {
        if (/TOTP setup required/i.test(message)) {
            this.onChangeView.emit({ view: LoginViews.TotpSetup, credentials: this.model });
        }
        else {
            this.onChangeView.emit({ view: LoginViews.TotpChallenge, credentials: this.model });
        }
    }
    handleSmsChallenge(message) {
        if (/pin has already been generated/i.test(message)) {
            this.alert.warning(gettext('The verification code was already sent. For a new verification code, please click on the link above.'));
        }
        this.alert.removeLastDanger();
        this.onChangeView.emit({ view: LoginViews.SmsChallenge, credentials: this.model });
    }
    handleNoPhoneNumberProvided() {
        this.onChangeView.emit({ view: LoginViews.ProvidePhoneNumber, credentials: this.model });
        this.alert.warning(gettext('Two-factor authentication has been turned on for this account. Provide your phone number above to save it in your user profile and start receiving verification codes via SMS.'));
    }
}
CredentialsComponent.ɵfac = function CredentialsComponent_Factory(t) { return new (t || CredentialsComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(CredentialsFromQueryParamsService)); };
CredentialsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CredentialsComponent, selectors: [["c8y-credentials"]], inputs: { loginViewParams: "loginViewParams" }, outputs: { onChangeView: "onChangeView" }, decls: 2, vars: 2, consts: [["id", "oauth", 4, "ngIf"], ["class", "loginForm", "novalidate", "", 3, "ngSubmit", 4, "ngIf"], ["id", "oauth"], [1, "btn", "btn-block", "btn-lg", "form-group", 3, "title", "click"], [1, "pull-left", 3, "c8yIcon"], ["novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["loginForm", "ngForm"], ["class", "legend form-block center", "translate", "", 4, "ngIf", "ngIfElse"], ["orLegend", ""], ["class", "tenantField", "id", "tenantField", 4, "ngIf"], ["for", "user", "translate", ""], ["type", "text", "name", "user", "id", "user", "autocapitalize", "off", "autocorrect", "off", "placeholder-no-required-hint", "", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["user", "ngModel"], ["for", "password", "translate", ""], ["type", "password", "name", "password", "id", "password", "placeholder-no-required-hint", "", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], ["password", "ngModel"], ["class", "form-group", 4, "ngIf"], ["type", "submit", 1, "btn", "btn-primary", "btn-lg", "btn-block", "form-group", 3, "title", "disabled"], [1, "text-center", "m-t-8"], [1, "btn", "btn-link", "btn-sm", 3, "title", "click"], ["class", "text-center m-t-8", 4, "ngIf"], ["translate", "", 1, "legend", "form-block", "center"], ["id", "tenantField", 1, "tenantField"], ["for", "tenant", "translate", ""], ["type", "text", "name", "tenant", "id", "tenant", "autocapitalize", "off", "autocorrect", "off", "placeholder-no-required-hint", "", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "readonly", "ngModelChange"], ["tenant", "ngModel"], [1, "form-group"], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", "name", "remember", 3, "ngModel", "ngModelChange"], ["role", "button", 1, "btn", "btn-link", "btn-sm", 3, "title", "href"]], template: function CredentialsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CredentialsComponent_div_0_Template, 6, 7, "div", 0);
        ɵngcc0.ɵɵtemplate(1, CredentialsComponent_form_1_Template, 30, 25, "form", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.oauthOptions.initRequest && ctx.oauthOptions.visibleOnLoginPage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showLoginForm);
    } }, directives: [ɵngcc7.NgIf, IconDirective, ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, FormGroupComponent, C8yTranslateDirective, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc14.CheckboxControlValueAccessor], pipes: [C8yTranslatePipe, ɵngcc7.AsyncPipe], encapsulation: 2 });
CredentialsComponent.ctorParameters = () => [
    { type: LoginService },
    { type: AlertService },
    { type: AppStateService },
    { type: CredentialsFromQueryParamsService }
];
CredentialsComponent.propDecorators = {
    onChangeView: [{ type: Output }],
    loginViewParams: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CredentialsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-credentials',
                template: "<div id=\"oauth\" *ngIf=\"oauthOptions.initRequest && oauthOptions.visibleOnLoginPage\">\n  <button\n    title=\"{{ oauthOptions.buttonName | translate }}\"\n    (click)=\"redirectToOauth()\"\n    class=\"btn btn-block btn-lg form-group\"\n  >\n    <i [c8yIcon]=\"'sign-in'\" class=\"pull-left\"></i>\n    {{ oauthOptions.buttonName | translate }}\n  </button>\n</div>\n\n<form class=\"loginForm\" (ngSubmit)=\"login()\" #loginForm=\"ngForm\" *ngIf=\"showLoginForm\" novalidate>\n  <h1>\n    <span\n      class=\"legend form-block center\"\n      *ngIf=\"!(oauthOptions.initRequest && oauthOptions.visibleOnLoginPage); else orLegend\"\n      translate\n    >\n      Login\n    </span>\n  </h1>\n  <ng-template #orLegend>\n    <div class=\"legend form-block center\" translate>or</div>\n  </ng-template>\n\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"showTenant\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      [readonly]=\"loginViewParams.disableTenant\"\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"user\" translate>Username</label>\n    <input\n      [(ngModel)]=\"model.user\"\n      #user=\"ngModel\"\n      type=\"text\"\n      name=\"user\"\n      id=\"user\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. joe or joe.doe@example.com`LOCALIZE`' | translate }}\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"password\" translate>Password</label>\n    <input\n      [(ngModel)]=\"model.password\"\n      #password=\"ngModel\"\n      type=\"password\"\n      name=\"password\"\n      id=\"password\"\n      class=\"form-control\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <div class=\"form-group\" *ngIf=\"showBasicAuth\">\n    <label title=\"{{ 'Remember me' | translate }}\" class=\"c8y-checkbox\">\n      <input type=\"checkbox\" name=\"remember\" [(ngModel)]=\"loginService.rememberMe\" />\n      <span></span>\n      <span>{{ 'Remember me' | translate }}</span>\n    </label>\n  </div>\n  <button\n    title=\"{{ 'Log in' | translate }}\"\n    [disabled]=\"!loginForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Log in' | translate }}\n  </button>\n  <div class=\"text-center m-t-8\">\n    <button\n      title=\"{{ 'Forgot password?' | translate }}\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.RecoverPassword })\"\n    >\n      {{ 'Forgot password?' | translate }}\n    </button>\n  </div>\n  <div class=\"text-center m-t-8\" *ngIf=\"!!(ui.state$ | async).loginExtraLink\">\n    <a\n      role=\"button\"\n      title=\"{{ (ui.state$ | async).loginExtraLink.label }}\"\n      [href]=\"(ui.state$ | async).loginExtraLink.url\"\n      class=\"btn btn-link btn-sm\"\n    >\n      {{ (ui.state$ | async).loginExtraLink.label }}\n    </a>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: LoginService }, { type: AlertService }, { type: AppStateService }, { type: CredentialsFromQueryParamsService }]; }, { onChangeView: [{
            type: Output
        }], loginViewParams: [{
            type: Input
        }] }); })();

class LoginComponent {
    /**
     * Just DI.
     */
    constructor(loginService, options, alert, credentialsFromQueryParamsService) {
        this.loginService = loginService;
        this.options = options;
        this.alert = alert;
        this.credentialsFromQueryParamsService = credentialsFromQueryParamsService;
        this.currentView = LoginViews.None;
        this.LOGIN_VIEWS = LoginViews;
        this.disabled = false;
        this.credentials = {};
        this.loginViewParams = {};
        this.displayAlerts = false;
        this.TOKEN_PARAM = 'token';
    }
    ngOnInit() {
        const token = this.getResetPasswordToken();
        if (this.loginService.isFirstLogin) {
            if (!token) {
                this.loginAutomatically();
            }
            else {
                this.credentials.token = token;
                this.reset();
            }
        }
        this.loginService.isFirstLogin = false;
    }
    ngOnDestroy() {
        // make sure that we do not have any queryParameters related to credentials after logging in or even if we were already logged in.
        this.credentialsFromQueryParamsService.removeCredentialsFromQueryParams();
    }
    handleLoginTemplate(event) {
        this.currentView = event.view;
        this.credentials = event.credentials || {};
        this.loginViewParams = event.loginViewParams || {};
    }
    onkeyup(event) {
        if (event.key !== 'Enter') {
            this.loginService.cleanMessages();
        }
    }
    reset() {
        this.loginService.reset();
        this.setView();
        this.loginService.cleanMessages();
    }
    loginAutomatically() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loginService.login();
            }
            catch (e) {
                const preferredLoginOptionType = this.loginService.loginMode.type;
                if (preferredLoginOptionType === TenantLoginOptionType.OAUTH2) {
                    this.loginService.redirectToOauth();
                }
                else {
                    this.reset();
                    if (preferredLoginOptionType === TenantLoginOptionType.OAUTH2_INTERNAL && window.location.protocol !== 'https:') {
                        this.alert.danger(gettext('Current login mode only supports HTTPS.'));
                    }
                    else if (e.res && e.res.status === 403) {
                        this.alert.addServerFailure(e);
                    }
                }
            }
        });
    }
    setView() {
        if (this.credentials && this.credentials.token) {
            this.handleLoginTemplate({ view: LoginViews.ChangePassword, credentials: this.credentials });
        }
        else if (this.loginService.showTenantSetup()) {
            this.handleLoginTemplate({ view: LoginViews.TenantIdSetup });
        }
        else {
            this.handleLoginTemplate({ view: LoginViews.Credentials });
        }
    }
    getResetPasswordToken() {
        const token = this.options.get(this.TOKEN_PARAM);
        if (token) {
            this.options.set(this.TOKEN_PARAM, undefined); // only use once
        }
        return token;
    }
}
LoginComponent.ɵfac = function LoginComponent_Factory(t) { return new (t || LoginComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(OptionsService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(CredentialsFromQueryParamsService)); };
LoginComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LoginComponent, selectors: [["c8y-login"]], hostBindings: function LoginComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function LoginComponent_keyup_HostBindingHandler($event) { return ctx.onkeyup($event); });
    } }, inputs: { name: "name" }, decls: 1, vars: 1, consts: [["class", "loading card fadeInUp animated shadow5", 3, "ngSwitch", 4, "ngIf"], [1, "loading", "card", "fadeInUp", "animated", "shadow5", 3, "ngSwitch"], [1, "card-block", "p-b-0"], ["alt", "", 1, "mainlogo"], [3, "loginViewParams", "onChangeView", 4, "ngSwitchCase"], [3, "onChangeView", 4, "ngSwitchCase"], [3, "credentials", "onChangeView", 4, "ngSwitchCase"], [3, "view", "credentials", "onCancel", 4, "ngSwitchCase"], [3, "credentials", "onCancel", 4, "ngSwitchCase"], [3, "credentials", "onCancel", "onChangeView", 4, "ngSwitchCase"], ["position", "static"], [3, "loginViewParams", "onChangeView"], [3, "onChangeView"], [3, "credentials", "onChangeView"], [3, "view", "credentials", "onCancel"], [3, "credentials", "onCancel"], [3, "credentials", "onCancel", "onChangeView"]], template: function LoginComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, LoginComponent_div_0_Template, 12, 9, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentView !== ctx.LOGIN_VIEWS.None);
    } }, directives: function () { return [ɵngcc7.NgIf, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, AlertOutletComponent, CredentialsComponent, RecoverPasswordComponent, ChangePasswordComponent, TotpAuthComponent, SmsChallengeComponent, ProvidePhoneNumberComponent, TenantIdSetupComponent]; }, encapsulation: 2 });
LoginComponent.ctorParameters = () => [
    { type: LoginService },
    { type: OptionsService },
    { type: AlertService },
    { type: CredentialsFromQueryParamsService }
];
LoginComponent.propDecorators = {
    name: [{ type: Input }],
    onkeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoginComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-login',
                template: "<div\n  class=\"loading card fadeInUp animated shadow5\"\n  *ngIf=\"currentView !== LOGIN_VIEWS.None\"\n  [ngSwitch]=\"currentView\"\n>\n  <div class=\"card-block p-b-0\">\n    <img alt=\"\" class=\"mainlogo\">\n    <c8y-credentials\n      *ngSwitchCase=\"LOGIN_VIEWS.Credentials\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [loginViewParams]=\"loginViewParams\"\n    ></c8y-credentials>\n    <c8y-recover-password\n      *ngSwitchCase=\"LOGIN_VIEWS.RecoverPassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-recover-password>\n    <c8y-change-password\n      *ngSwitchCase=\"LOGIN_VIEWS.ChangePassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-change-password>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpChallenge\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpSetup\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-sms-challenge\n      *ngSwitchCase=\"LOGIN_VIEWS.SmsChallenge\"\n      (onCancel)=\"reset()\"\n      [credentials]=\"credentials\"\n    ></c8y-sms-challenge>\n\n    <c8y-provide-phone-number\n      *ngSwitchCase=\"LOGIN_VIEWS.ProvidePhoneNumber\"\n      (onCancel)=\"reset()\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-provide-phone-number>\n    <c8y-tenant-id-setup\n      *ngSwitchCase=\"LOGIN_VIEWS.TenantIdSetup\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-tenant-id-setup>\n\n    <c8y-alert-outlet position=\"static\"></c8y-alert-outlet>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: LoginService }, { type: OptionsService }, { type: AlertService }, { type: CredentialsFromQueryParamsService }]; }, { onkeyup: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], name: [{
            type: Input
        }] }); })();

class RecoverPasswordComponent {
    constructor(users, loginService) {
        this.users = users;
        this.loginService = loginService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.isLoading = false;
        this.model = {
            email: '',
            tenantId: ''
        };
    }
    ngOnInit() {
        this.model.tenantId = this.loginService.getTenant();
    }
    resetPassword() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.isLoading = true;
                const { res } = yield this.users.sendPasswordResetMail(this.model.email, this.model.tenantId);
                if (res.status === 200) {
                    this.loginService.addSuccessMessage('password_reset_requested');
                }
            }
            finally {
                this.loginService.reset();
                this.isLoading = false;
            }
        });
    }
}
RecoverPasswordComponent.ɵfac = function RecoverPasswordComponent_Factory(t) { return new (t || RecoverPasswordComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(LoginService)); };
RecoverPasswordComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RecoverPasswordComponent, selectors: [["c8y-recover-password"]], outputs: { onChangeView: "onChangeView" }, decls: 19, vars: 12, consts: [["novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["resetForm", "ngForm"], ["translate", "", 1, "legend", "form-block", "center"], ["class", "tenantField", "id", "tenantField", 4, "ngIf"], ["translate", ""], ["type", "text", "name", "email", "autocapitalize", "off", "autocorrect", "off", "email", "", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["email", "ngModel"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", "btn-lg", "btn-block", "form-group", 3, "title", "disabled"], [1, "text-center", "m-t-8"], ["translate", "", 1, "btn", "btn-link", "btn-sm", 3, "title", "click"], ["id", "tenantField", 1, "tenantField"], ["type", "text", "name", "tenantId", "autocapitalize", "off", "autocorrect", "off", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["tenantId", "ngModel"]], template: function RecoverPasswordComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function RecoverPasswordComponent_Template_form_ngSubmit_0_listener() { return ctx.resetPassword(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, "Forgot password?");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, RecoverPasswordComponent_c8y_form_group_4_Template, 6, 4, "c8y-form-group", 3);
        ɵngcc0.ɵɵelementStart(5, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(6, "label", 4);
        ɵngcc0.ɵɵtext(7, "Email address");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "input", 5, 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function RecoverPasswordComponent_Template_input_ngModelChange_8_listener($event) { return ctx.model.email = $event; });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "button", 7);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵtext(13, " Reset password ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 8);
        ɵngcc0.ɵɵelementStart(15, "p");
        ɵngcc0.ɵɵelementStart(16, "button", 9);
        ɵngcc0.ɵɵlistener("click", function RecoverPasswordComponent_Template_button_click_16_listener() { return ctx.onChangeView.emit({ view: ctx.LOGIN_VIEWS.Credentials }); });
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵtext(18, " Login ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loginService.showTenant());
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 6, "Email address"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.email);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 8, "Reset password"));
        ɵngcc0.ɵɵproperty("disabled", !_r0.form.valid || ctx.isLoading);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(17, 10, "Login"));
    } }, directives: [ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, C8yTranslateDirective, ɵngcc7.NgIf, FormGroupComponent, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.EmailValidator, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel], pipes: [C8yTranslatePipe], encapsulation: 2 });
RecoverPasswordComponent.ctorParameters = () => [
    { type: UserService },
    { type: LoginService }
];
RecoverPasswordComponent.propDecorators = {
    onChangeView: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RecoverPasswordComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-recover-password',
                template: "<form #resetForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n  <div class=\"legend form-block center\" translate>Forgot password?</div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Reset password' | translate }}\"\n    [disabled]=\"!resetForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Reset password\n  </button>\n  <div class=\"text-center m-t-8\">\n    <p>\n      <button\n        title=\"{{ 'Login' | translate }}\"\n        class=\"btn btn-link btn-sm\"\n        (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.Credentials })\"\n        translate\n      >\n        Login\n      </button>\n    </p>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: ɵngcc3.UserService }, { type: LoginService }]; }, { onChangeView: [{
            type: Output
        }] }); })();

class TotpAuthComponent {
    constructor(loginService, userService, alert) {
        this.loginService = loginService;
        this.userService = userService;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.loading = false;
        this.hasError = false;
        this.isSetup = false;
    }
    /**
     * In case of a setup we need the user to be authorized
     * first.
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.view === this.LOGIN_VIEWS.TotpSetup) {
                yield this.loginService.switchLoginMode(this.credentials);
                this.isSetup = true;
            }
        });
    }
    onTotpSuccess(code) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                this.credentials.tfa = code;
                if (this.isSetup) {
                    yield this.userService.activateTotp();
                }
                yield this.loginService.switchLoginMode(this.credentials);
                yield this.loginService.verifyAppAccess();
                yield this.loginService.authFulfilled();
            }
            catch (e) {
                this.alert.removeLastDanger();
                if (e.data && e.data.message === 'Access is denied') {
                    this.alert.addServerFailure(e);
                }
                if (e.data && e.data.message === 'Authentication failed! : User account is locked') {
                    this.alert.warning(gettext('Authentication failed due to: user account is locked.'));
                }
                else {
                    this.hasError = true;
                }
            }
            finally {
                this.loading = false;
            }
        });
    }
}
TotpAuthComponent.ɵfac = function TotpAuthComponent_Factory(t) { return new (t || TotpAuthComponent)(ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserService), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
TotpAuthComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TotpAuthComponent, selectors: [["c8y-totp-auth"]], inputs: { credentials: "credentials", view: "view" }, outputs: { onCancel: "onCancel" }, decls: 4, vars: 4, consts: [["translate", "", 1, "legend", "form-block", "center"], [4, "ngIf"], [3, "loading", "hasError", "verify", "onSuccess", "totpUnconfirmedEmitter"]], template: function TotpAuthComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1, " Two-factor authentication\n");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, TotpAuthComponent_c8y_totp_setup_2_Template, 1, 0, "c8y-totp-setup", 1);
        ɵngcc0.ɵɵelementStart(3, "c8y-totp-challenge", 2);
        ɵngcc0.ɵɵlistener("onSuccess", function TotpAuthComponent_Template_c8y_totp_challenge_onSuccess_3_listener($event) { return ctx.onTotpSuccess($event); })("totpUnconfirmedEmitter", function TotpAuthComponent_Template_c8y_totp_challenge_totpUnconfirmedEmitter_3_listener() { return ctx.onCancel.emit(); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSetup);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("loading", ctx.loading)("hasError", ctx.hasError)("verify", ctx.view === ctx.LOGIN_VIEWS.TotpSetup);
    } }, directives: [C8yTranslateDirective, ɵngcc7.NgIf, TotpChallengeComponent, TotpSetupComponent], encapsulation: 2 });
TotpAuthComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
TotpAuthComponent.propDecorators = {
    credentials: [{ type: Input }],
    view: [{ type: Input }],
    onCancel: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TotpAuthComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-totp-auth',
                template: "<div\n  class=\"legend form-block center\"\n  translate\n>\n  Two-factor authentication\n</div>\n\n<c8y-totp-setup *ngIf=\"isSetup\">\n</c8y-totp-setup>\n<c8y-totp-challenge\n  [loading]=\"loading\"\n  [hasError]=\"hasError\"\n  [verify]=\"view === LOGIN_VIEWS.TotpSetup\"\n  (onSuccess)=\"onTotpSuccess($event)\"\n  (totpUnconfirmedEmitter)=\"onCancel.emit()\"\n></c8y-totp-challenge>\n"
            }]
    }], function () { return [{ type: LoginService }, { type: ɵngcc3.UserService }, { type: AlertService }]; }, { onCancel: [{
            type: Output
        }], credentials: [{
            type: Input
        }], view: [{
            type: Input
        }] }); })();

class StrengthValidatorService {
    constructor(passwordService) {
        this.passwordService = passwordService;
    }
    isStrong(password) {
        return this.isPasswordGreen(this.passwordService.getStrengthColor(password).passwordStrength);
    }
    isPasswordGreen(strength) {
        return strength === PasswordStrength.GREEN;
    }
}
StrengthValidatorService.ɵfac = function StrengthValidatorService_Factory(t) { return new (t || StrengthValidatorService)(ɵngcc0.ɵɵinject(PasswordService)); };
StrengthValidatorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StrengthValidatorService_Factory() { return new StrengthValidatorService(i0.ɵɵinject(PasswordService)); }, token: StrengthValidatorService, providedIn: "root" });
StrengthValidatorService.ctorParameters = () => [
    { type: PasswordService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StrengthValidatorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: PasswordService }]; }, null); })();

class PasswordStrengthValidatorDirective {
    constructor(passwordService) {
        this.passwordService = passwordService;
    }
    set passwordStrengthEnforced(value) {
        this.forced = value;
    }
    validate(control) {
        const strengthFulfilled = this.passwordService.isStrong(control.value || '');
        const enforcementForcedAndNotFulfilled = this.forced && !strengthFulfilled;
        return enforcementForcedAndNotFulfilled ? { passwordStrength: true } : null;
    }
}
PasswordStrengthValidatorDirective.ɵfac = function PasswordStrengthValidatorDirective_Factory(t) { return new (t || PasswordStrengthValidatorDirective)(ɵngcc0.ɵɵdirectiveInject(StrengthValidatorService)); };
PasswordStrengthValidatorDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PasswordStrengthValidatorDirective, selectors: [["", "passwordStrengthEnforced", ""]], inputs: { passwordStrengthEnforced: "passwordStrengthEnforced" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: PasswordStrengthValidatorDirective, multi: true }])] });
PasswordStrengthValidatorDirective.ctorParameters = () => [
    { type: StrengthValidatorService }
];
PasswordStrengthValidatorDirective.propDecorators = {
    passwordStrengthEnforced: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordStrengthValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[passwordStrengthEnforced]',
                providers: [{ provide: NG_VALIDATORS, useExisting: PasswordStrengthValidatorDirective, multi: true }]
            }]
    }], function () { return [{ type: StrengthValidatorService }]; }, { passwordStrengthEnforced: [{
            type: Input
        }] }); })();

/**
 * `TenantIdSetupComponent` is intended to be shown when tenant's id cannot be determined based on the current URL.
 * It asks the user to provide target tenant's id and then it fetches login options for this tenant.
 * In case of OAI-Secure login mode, login options will contain `domain` property set by backend.
 * The component will redirect user to this domain, preserving URL path and params.
 */
class TenantIdSetupComponent {
    constructor(client, ui, loginService, alert, translateService) {
        this.client = client;
        this.ui = ui;
        this.loginService = loginService;
        this.alert = alert;
        this.translateService = translateService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.model = {
            tenant: ''
        };
    }
    /**
     * Sets up login mode for particular tenant. In case of OAI-Secure will redirect user to tenant domain.
     */
    setupLoginMode() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.tenant = this.model.tenant;
            try {
                yield this.ui.refreshLoginOptions();
                this.loginService.initLoginOptions();
                this.redirectToCorrectDomain();
            }
            catch (e) {
                if (e.res && e.res.status === 401) {
                    this.alert.danger(this.translateService.instant(gettext('Could not find tenant with ID "{{ tenantId }}".'), { tenantId: this.model.tenant }));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    /**
     * Redirects to tenant domain when login mode contains domain.
     */
    redirectToCorrectDomain() {
        const loginRedirectDomain = this.loginService.loginMode.loginRedirectDomain;
        if (loginRedirectDomain) {
            const alreadyOnCorrectDomain = window.location.href.includes(loginRedirectDomain);
            if (!alreadyOnCorrectDomain) {
                this.loginService.redirectToDomain(loginRedirectDomain);
            }
            else {
                this.onChangeView.emit({
                    view: LoginViews.Credentials,
                    loginViewParams: { showTenant: true, disableTenant: true }
                });
            }
        }
        else {
            this.onChangeView.emit({ view: LoginViews.Credentials });
        }
    }
}
TenantIdSetupComponent.ɵfac = function TenantIdSetupComponent_Factory(t) { return new (t || TenantIdSetupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FetchClient), ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(LoginService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService)); };
TenantIdSetupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TenantIdSetupComponent, selectors: [["c8y-tenant-id-setup"]], outputs: { onChangeView: "onChangeView" }, decls: 13, vars: 8, consts: [["role", "form", "novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["tenantIdSetupForm", "ngForm"], ["translate", "", 1, "legend", "form-block", "center"], ["id", "tenantField", 1, "tenantField"], ["for", "tenant", "translate", ""], ["type", "text", "name", "tenant", "id", "tenant", "autocapitalize", "off", "autocorrect", "off", "placeholder-no-required-hint", "", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["tenant", "ngModel"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", "btn-lg", "btn-block", "form-group", 3, "title", "disabled"]], template: function TenantIdSetupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function TenantIdSetupComponent_Template_form_ngSubmit_0_listener() { return ctx.setupLoginMode(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, " Tenant setup ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-form-group", 3);
        ɵngcc0.ɵɵelementStart(5, "label", 4);
        ɵngcc0.ɵɵtext(6, "Tenant ID");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 5, 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function TenantIdSetupComponent_Template_input_ngModelChange_7_listener($event) { return ctx.model.tenant = $event; });
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "button", 7);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵtext(12, " Apply ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(9, 4, "e.g."), " t12345");
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.tenant);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 6, "Apply"));
        ɵngcc0.ɵɵproperty("disabled", !_r0.form.valid);
    } }, directives: [ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, C8yTranslateDirective, FormGroupComponent, RequiredInputPlaceholderDirective, ɵngcc14.DefaultValueAccessor, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.NgModel], pipes: [C8yTranslatePipe], encapsulation: 2 });
TenantIdSetupComponent.ctorParameters = () => [
    { type: FetchClient },
    { type: AppStateService },
    { type: LoginService },
    { type: AlertService },
    { type: TranslateService$1 }
];
TenantIdSetupComponent.propDecorators = {
    onChangeView: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantIdSetupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-tenant-id-setup',
                template: "<form #tenantIdSetupForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"setupLoginMode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Tenant setup\n  </div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Apply' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"!tenantIdSetupForm.form.valid\"\n    translate\n  >\n    Apply\n  </button>\n</form>\n"
            }]
    }], function () { return [{ type: ɵngcc3.FetchClient }, { type: AppStateService }, { type: LoginService }, { type: AlertService }, { type: ɵngcc4.TranslateService }]; }, { onChangeView: [{
            type: Output
        }] }); })();

/**
 * The angular module definition for the login.
 * @exports LoginComponent
 */
class LoginModule {
    static forRoot() {
        return {
            ngModule: LoginModule,
            providers: LoginModule.providers()
        };
    }
    static providers() {
        return [LoginService, CredentialsFromQueryParamsService];
    }
}
LoginModule.ɵfac = function LoginModule_Factory(t) { return new (t || LoginModule)(); };
LoginModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LoginModule });
LoginModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule$1,
            TooltipModule,
            CommonModule,
            AuthenticationModule,
            AlertModule,
            FormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoginModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    LoginComponent,
                    RecoverPasswordComponent,
                    ChangePasswordComponent,
                    CredentialsComponent,
                    TotpAuthComponent,
                    PasswordStrengthValidatorDirective,
                    TenantIdSetupComponent
                ],
                imports: [
                    FormsModule$1,
                    TooltipModule,
                    CommonModule,
                    AuthenticationModule,
                    AlertModule,
                    FormsModule
                ],
                exports: [LoginComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoginModule, { declarations: function () { return [LoginComponent, RecoverPasswordComponent, ChangePasswordComponent, CredentialsComponent, TotpAuthComponent, PasswordStrengthValidatorDirective, TenantIdSetupComponent]; }, imports: function () { return [FormsModule$1,
        TooltipModule, CommonModule, AuthenticationModule, AlertModule, FormsModule]; }, exports: function () { return [LoginComponent]; } }); })();

class PluginsService {
    constructor(applicationService, appState) {
        this.applicationService = applicationService;
        this.appState = appState;
    }
    listPackages() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.list({ pageSize: 2000 });
            return data.filter((app) => app.exports || (app.manifest && app.manifest.exports));
        });
    }
    listVersions(forPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.binary(forPackage).listPlugins();
            return data
                .map(plugin => (Object.assign(Object.assign({}, plugin.pluginPackage), { version: plugin.pluginName })))
                .filter(plugin => plugin.exports);
        });
    }
    listInstalled(forApp, flat = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const app = yield this.getApplication(forApp);
            const c8yJson = yield this.getCumulocityJsonFile(app);
            if (flat) {
                let flatList = [];
                for (const key in c8yJson.imports) {
                    if (c8yJson.imports.hasOwnProperty(key)) {
                        flatList = [
                            ...flatList,
                            ...c8yJson.imports[key].map(imp => /@/.test(key) ? `${key}/${imp}` : `${key}@latest/${imp}`)
                        ];
                    }
                }
                return flatList;
            }
            return c8yJson.imports;
        });
    }
    addByName(addTo, pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = pluginName.split('//').pop();
            const contextPath = pluginName.split('//').shift();
            const pkg = {
                contextPath
            };
            return this.add(addTo, pkg, name);
        });
    }
    removeByName(removeFrom, pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = pluginName.split('/').pop();
            const contextPath = /@latest/.test(pluginName)
                ? pluginName.split('@').shift()
                : pluginName.split('/').shift();
            const pkg = {
                contextPath
            };
            return this.remove(removeFrom, pkg, name);
        });
    }
    add(addToApp, fromPackage, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.addOrRemove(addToApp, fromPackage, name, true);
        });
    }
    remove(removeFromApp, fromPackage, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.addOrRemove(removeFromApp, fromPackage, name, false);
        });
    }
    updateRemotesInCumulocityJson(app, remotes) {
        return __awaiter(this, void 0, void 0, function* () {
            const c8yJson = yield this.getCumulocityJsonFile(app);
            return this.applicationService.storeAppManifest(app, Object.assign(Object.assign({}, c8yJson), { remotes }));
        });
    }
    addOrRemove(addToApp, fromPackage, name, add = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const application = yield this.getApplication(addToApp);
            const pkg = yield this.getApplication(fromPackage);
            const c8yJson = yield this.getCumulocityJsonFile(application);
            // TODO: Versions?!!
            const pkgImport = new Set(c8yJson.imports[pkg.contextPath]);
            if (add) {
                pkgImport.add(name);
            }
            else {
                pkgImport.delete(name);
            }
            c8yJson.imports[pkg.contextPath] = Array.from(pkgImport);
            yield this.applicationService.storeAppManifest(application, c8yJson);
            return c8yJson;
        });
    }
    getCumulocityJsonFile(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const c8yJson = yield this.applicationService.getAppManifest(app);
            if (!c8yJson.imports) {
                c8yJson.imports = {};
            }
            return c8yJson;
        });
    }
    getApplication(app) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof app !== 'number' && app.contextPath) {
                return app;
            }
            const { data } = yield this.applicationService.detail(app);
            return data;
        });
    }
}
PluginsService.ɵfac = function PluginsService_Factory(t) { return new (t || PluginsService)(ɵngcc0.ɵɵinject(ɵngcc2.ApplicationService), ɵngcc0.ɵɵinject(AppStateService)); };
PluginsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PluginsService, factory: PluginsService.ɵfac });
PluginsService.ctorParameters = () => [
    { type: ApplicationService$1 },
    { type: AppStateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PluginsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.ApplicationService }, { type: AppStateService }]; }, null); })();

class PluginsModule {
}
PluginsModule.ɵfac = function PluginsModule_Factory(t) { return new (t || PluginsModule)(); };
PluginsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: PluginsModule });
PluginsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [PluginsService, PluginsResolveService] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PluginsModule, [{
        type: NgModule,
        args: [{
                providers: [PluginsService, PluginsResolveService]
            }]
    }], null, null); })();

/**
 * Renders a list of properties of an object.
 *
 * @example
 * ```html
 * <c8y-properties-list
 *   icon="info"
 *   [properties]="properties"
 *   [data]="options"
 *   [emptyLabel]="'-'"
 *   [title]="'Application properties' | translate"
 * ></c8y-properties-list>
 * ```
 */
class PropertiesListComponent {
    constructor() {
        /**
         * A string array of groups that are shown. If noParse is set to false,
         * each complex key will form a group.
         */
        this.groups = [];
        /**
         * The component tries to parse the properties and resolve keys and types. You can
         * avoid this by setting this property to true.
         */
        this.noParse = false;
        this._data = {};
    }
    /**
     * The properties that this list should display.
     */
    set properties(items) {
        this._properties = this.parseProperties(items);
    }
    /**
     * @ignore
     */
    get properties() {
        if (this.noParse) {
            return this._properties;
        }
        const propsWithGroups = [
            ...this._properties,
            ...this.groups.map(group => ({
                key: group,
                label: group,
                value: group,
                type: 'group'
            }))
        ].filter(item => !!item.value);
        return sortBy(propsWithGroups, ['key']);
    }
    /**
     * An object where the properties keys are resolved from.
     */
    set data(data) {
        this._data = data;
        this._properties = this.parseProperties(this._properties);
    }
    /**
     * Checks if a certain property has an group associated.
     * @param item The property to verify.
     */
    hasGroup(item) {
        if (!item.key) {
            return false;
        }
        const keyPath = item.key.split('.');
        return keyPath.length > 1 && this.groups.includes(keyPath[0]);
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this._properties = this.parseProperties(this._properties);
    }
    /**
     * Used in trackBy to avoid recalculation all the time.
     * @ignore
     */
    identity(index, item) {
        return item.value;
    }
    parseProperties(items = []) {
        return items.map(item => this.parsePropertyItem(item));
    }
    parsePropertyItem(item) {
        if (this.noParse) {
            return item;
        }
        item.value = this.resolveValueFromKey(item);
        item.value = item.transform && item.value ? item.transform(item.value) : item.value;
        item.type = this.resolveType(item);
        item.value = this.attachEmptyLabel(item);
        return item;
    }
    resolveValueFromKey(item) {
        if (item.key && this._data) {
            const keyPath = item.key.split('.');
            const rootGroup = keyPath[0];
            if (keyPath.length > 1 && !this.groups.includes(rootGroup)) {
                this.groups.push(rootGroup);
            }
            return get(this._data, item.key);
        }
        return item.value;
    }
    resolveType(item) {
        return Array.isArray(item.value) ? 'array' : item.action && item.value ? 'link' : 'string';
    }
    attachEmptyLabel(item) {
        if (!item.value) {
            return this.emptyLabel;
        }
        return item.value;
    }
}
PropertiesListComponent.ɵfac = function PropertiesListComponent_Factory(t) { return new (t || PropertiesListComponent)(); };
PropertiesListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PropertiesListComponent, selectors: [["c8y-properties-list"]], inputs: { groups: "groups", noParse: "noParse", properties: "properties", data: "data", title: "title", icon: "icon", emptyLabel: "emptyLabel" }, decls: 7, vars: 6, consts: [[1, "m-b-8"], ["class", "text-info m-r-8", 3, "c8yIcon", 4, "ngIf"], [1, "text-label-small"], [1, "list-unstyled", "small"], ["class", "p-t-4 p-b-4 d-flex", 3, "ngClass", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "text-info", "m-r-8", 3, "c8yIcon"], [1, "p-t-4", "p-b-4", "d-flex", 3, "ngClass"], [1, "small", "text-medium", "text-nowrap", "m-r-4", 3, "ngClass"], [1, "flex-item-right", 3, "ngSwitch"], ["class", "flex-item-right", 4, "ngSwitchCase"], ["class", "flex-item-right pointer text-truncate m-l-4", 3, "click", 4, "ngSwitchCase"], [4, "ngSwitchCase"], [1, "flex-item-right"], [1, "flex-item-right", "pointer", "text-truncate", "m-l-4", 3, "click"], ["class", "label label-default m-l-4 text-truncate-wrap", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "label", "label-default", "m-l-4", "text-truncate-wrap", 3, "ngClass", "click"]], template: function PropertiesListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p", 0);
        ɵngcc0.ɵɵtemplate(1, PropertiesListComponent_i_1_Template, 1, 1, "i", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "ul", 3);
        ɵngcc0.ɵɵtemplate(6, PropertiesListComponent_li_6_Template, 8, 18, "li", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, ctx.title));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.properties)("ngForTrackBy", ctx.identity);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgForOf, IconDirective, ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase], pipes: [C8yTranslatePipe], encapsulation: 2 });
PropertiesListComponent.propDecorators = {
    properties: [{ type: Input }],
    title: [{ type: Input }],
    icon: [{ type: Input }],
    data: [{ type: Input }],
    groups: [{ type: Input }],
    noParse: [{ type: Input }],
    emptyLabel: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PropertiesListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-properties-list',
                template: "<p class=\"m-b-8\">\n  <i *ngIf=\"icon\" [c8yIcon]=\"icon\" class=\"text-info m-r-8\"></i>\n  <span class=\"text-label-small\">{{ title | translate }}</span>\n</p>\n<ul class=\"list-unstyled small\">\n  <li\n    class=\"p-t-4 p-b-4 d-flex\"\n    *ngFor=\"let prop of properties; let i = index; trackBy: identity\"\n    [ngClass]=\"{ 'separator-top-bottom': i === 0, 'separator-bottom': i > 0 }\"\n  >\n    <div\n      [ngClass]=\"{\n        'm-l-16': hasGroup(prop),\n        legend: prop.type === 'group',\n        'form-block': prop.type === 'group',\n        'm-b-0': prop.type === 'group',\n        'm-t-4': prop.type === 'group'\n      }\"\n      class=\"small text-medium text-nowrap m-r-4\"\n    >\n      {{ prop.label | translate }}\n    </div>\n    <span [ngSwitch]=\"prop.type\" class=\"flex-item-right\">\n      <span *ngSwitchCase=\"'string'\" class=\"flex-item-right\">{{ prop.value }}</span>\n      <a\n        *ngSwitchCase=\"'link'\"\n        (click)=\"prop.action($event, prop)\"\n        class=\"flex-item-right pointer text-truncate m-l-4\"\n        >{{ prop.value }}</a\n      >\n      <span *ngSwitchCase=\"'array'\">\n        <span\n          class=\"label label-default m-l-4 text-truncate-wrap\"\n          *ngFor=\"let propTag of prop.value\"\n          (click)=\"prop.action && prop.action($event, propTag)\"\n          [ngClass]=\"{\n            pointer: prop.action\n          }\"\n          >{{ propTag }}</span\n        >\n      </span>\n    </span>\n  </li>\n</ul>\n"
            }]
    }], function () { return []; }, { groups: [{
            type: Input
        }], noParse: [{
            type: Input
        }], properties: [{
            type: Input
        }], data: [{
            type: Input
        }], title: [{
            type: Input
        }], icon: [{
            type: Input
        }], emptyLabel: [{
            type: Input
        }] }); })();

class PropertiesListModule {
}
PropertiesListModule.ɵfac = function PropertiesListModule_Factory(t) { return new (t || PropertiesListModule)(); };
PropertiesListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: PropertiesListModule });
PropertiesListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [], imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PropertiesListModule, [{
        type: NgModule,
        args: [{
                declarations: [PropertiesListComponent],
                imports: [CommonModule],
                exports: [PropertiesListComponent],
                providers: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PropertiesListModule, { declarations: [PropertiesListComponent], imports: [CommonModule], exports: [PropertiesListComponent] }); })();

/**
 * Template to be used to override the icons inside the step header.
 */
class C8yStepperIcon {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
C8yStepperIcon.ɵfac = function C8yStepperIcon_Factory(t) { return new (t || C8yStepperIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
C8yStepperIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: C8yStepperIcon, selectors: [["ng-template", "c8yStepperIcon", ""]], inputs: { name: ["c8yStepperIcon", "name"] } });
C8yStepperIcon.ctorParameters = () => [
    { type: TemplateRef }
];
C8yStepperIcon.propDecorators = {
    name: [{ type: Input, args: ['c8yStepperIcon',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yStepperIcon, [{
        type: Directive,
        args: [{
                selector: 'ng-template[c8yStepperIcon]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { name: [{
            type: Input,
            args: ['c8yStepperIcon']
        }] }); })();

/**
 * C8yStepper extends the CdkStepper. You can use cdk based functionality and inputs.
 * Additional to that you are able to modify the behavior and also the look and feel when
 * using the C8yStepper.
 *
 * The C8yStepper is used to present any step-based process to the user.
 * A stepper, C8yStepper and/or CdkStepper is the parent of cdk-steps.
 * Each cdk-step represents one step in the whole process that you want to provide to the user.
 *
 * The C8yStepper will create, based on the given cdk-steps, a kind of stepper-progress which looks like this:
 * (1)---(2)---(3)---(n)
 * The stepper will handle the state of each step and provides styles for active steps, done-steps or in edit-mode.
 * You are able to override icons for each step in the stepper-progress with a template. You are also able to activate
 * default-icons for states like 'edit' and 'done'.
 *
 * To force users through every provided step, set the stepper to 'linear'.
 * This will disable the possibility to move for example from step one to step three.
 *
 * Whenever it comes to validation try to use formGroups. It is possible to
 * assign a formGroup to a cdk-step input called [stepControl], which automatically respects the
 * validation-rules that you created for this formGroup. If fields are required but not filled or
 * any other validation, like a pattern, is not matched the formGroup will be invalid. In this case
 * stepping in a linear stepper to the next step gets impossible.
 *
 * If there is the need to execute asynchronous code you have at least two possibilities.
 * First: As you learned, a cdk-step works with formGroups and Validators, so you are able to use
 * asyncValidators as well.
 * Second: The C8yStepper provides an event-emitter onStepChange which is called whenever a step-button (1)--(2)--(n)
 * in the stepper-progress is clicked. The event of this emitter holds the index of the step as number. You can
 * use this EventEmitter to call for example a custom navigate-method which performs first any async-call and then moves
 * on to the given step.
 *
 * @example
 * ```
 * <c8y-stepper
 * (onStepChange)="navigate($event)"
 * [disableDefaultIcons]="{ edit: true, done: false }"
 * [customClasses]="['m-l-40', 'm-r-40', 'm-t-32']"
 * linear
 * >
 * <!-- override icons -->
 * <ng-template c8yStepperIcon="final">
 *   <span [c8yIcon]="'hand-peace-o'"></span>
 * </ng-template>
 *
 * <cdk-step [stepControl]="formGroupStepOne" label="Name of the hero">
 *   <div class="m-l-40 m-r-40 m-t-32">
 *     <h4 class="p-b-8" translate>What is the name of your hero?</h4>
 *     <c8y-form-group>
 *      <div [formGroup]="formGroupStepOne">
 *       <input
 *         class="form-control"
 *         type="text"
 *         formControlName="name"
 *         placeholder="Mister X"
 *         #nameRef
 *         required
 *       />
 *       <c8y-messages>
 *         <c8y-message *ngIf="!formGroupStepOne.untouched && !nameRef.value" translate
 *           >Enter the name of the Superhero</c8y-message
 *         >
 *       </c8y-messages>
 *      </div>
 *     </c8y-form-group>
 *   </div>
 *   <c8y-stepper-buttons></c8y-stepper-buttons>
 * </cdk-step>
 * <cdk-step>
 *  ...
 * </cdk-step state="final">
 * </c8y-stepper>
 * ```
 */
class C8yStepper extends CdkStepper {
    /**
     * @ignore
     */
    constructor(dir, changeDetectorRef, elementRef) {
        super(dir, changeDetectorRef, elementRef, document);
        this.dir = dir;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        /**
         * Optional
         * Indicator if icons for edit and done state should be shown in step-header buttons
         */
        this.disableDefaultIcons = { edit: true, done: true };
        /**
         * Optional
         * Possibility to hide the stepper progress completely.
         */
        this.hideStepProgress = false;
        /**
         * Will emit the step index number whenever a step-header button was clicked
         * It listens to the stepIndex Subject.
         */
        this.onStepChange = new EventEmitter();
        /** Consumer-specified template-refs to be used to override the header icons. */
        this._iconOverrides = {};
        this._stepIndex = new Subject();
    }
    /**
     * @ignore
     */
    ngAfterContentInit() {
        super.ngAfterContentInit();
        this._icons.forEach(({ name, templateRef }) => (this._iconOverrides[name] = templateRef));
        this._stepIndexSubscription = this._stepIndex.subscribe(index => this.onStepChange.emit(index));
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        if (this._stepIndexSubscription && !this._stepIndexSubscription.closed) {
            this._stepIndexSubscription.unsubscribe();
        }
    }
    /**
     * Manipulates the state based on the disabledDefaultIcons Input()
     * Changing edit or done to false will change the icons within step-header buttons
     * @param index step index
     * @param state step state, like 'done', 'edit', 'error'
     */
    getIndicatorType(index, state) {
        const stepState = this._getIndicatorType(index, state);
        let _state = state;
        switch (stepState) {
            case STEP_STATE.EDIT:
                if (!this.disableDefaultIcons.edit) {
                    _state = STEP_STATE.EDIT;
                }
                break;
            case STEP_STATE.DONE:
                if (!this.disableDefaultIcons.done) {
                    _state = STEP_STATE.DONE;
                }
                else {
                    _state = '_done';
                }
                break;
        }
        return _state;
    }
    /**
     * Pushes the step index to the subject
     * @param index step index
     */
    setIndex(index) {
        var _a, _b;
        const steps = this.steps.toArray();
        if (!((_b = (_a = steps[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.stepControl) === null || _b === void 0 ? void 0 : _b.invalid) || index < this.selectedIndex) {
            this.selectedIndex = index;
        }
    }
}
C8yStepper.ɵfac = function C8yStepper_Factory(t) { return new (t || C8yStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc16.Directionality), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
C8yStepper.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: C8yStepper, selectors: [["c8y-stepper"]], contentQueries: function C8yStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, C8yStepperIcon, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icons = _t);
    } }, inputs: { disableDefaultIcons: "disableDefaultIcons", hideStepProgress: "hideStepProgress", disableProgressButtons: "disableProgressButtons", customClasses: "customClasses" }, outputs: { onStepChange: "onStepChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkStepper, useExisting: C8yStepper }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [["class", "c8y-stepper", 3, "ngClass", 4, "ngIf"], [3, "ngTemplateOutlet"], [1, "c8y-stepper", 3, "ngClass"], [4, "ngFor", "ngForOf"], [3, "iconOverrides", "state", "index", "selected", "disabled", "title", "ngClass", "onStepClicked"], [1, "c8y-step__label", 3, "title"]], template: function C8yStepper_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, C8yStepper_ul_0_Template, 2, 2, "ul", 0);
        ɵngcc0.ɵɵelementContainer(1, 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hideStepProgress);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.selected.content);
    } }, directives: function () { return [ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet, ɵngcc7.NgClass, ɵngcc7.NgForOf, C8yStepperProgress]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
C8yStepper.ctorParameters = () => [
    { type: Directionality },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
C8yStepper.propDecorators = {
    disableDefaultIcons: [{ type: Input }],
    disableProgressButtons: [{ type: Input }],
    customClasses: [{ type: Input }],
    hideStepProgress: [{ type: Input }],
    onStepChange: [{ type: Output }],
    _icons: [{ type: ContentChildren, args: [C8yStepperIcon, { descendants: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yStepper, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper',
                template: "<ul *ngIf=\"!hideStepProgress\" class=\"c8y-stepper\" [ngClass]=\"customClasses\">\n  <li *ngFor=\"let step of steps; let i = index\">\n    <c8y-stepper-progress\n      [iconOverrides]=\"_iconOverrides\"\n      [state]=\"getIndicatorType(i, step.state)\"\n      [index]=\"i\"\n      [selected]=\"selectedIndex === i\"\n      [disabled]=\"disableProgressButtons\"\n      (onStepClicked)=\"setIndex($event)\"\n      title=\"{{ step.label | translate }}\"\n      [ngClass]=\"{'active': selectedIndex === i}\"\n    >\n    </c8y-stepper-progress>\n    <div class=\"c8y-step__label\"  title=\"{{ step.label | translate }}\">\n      {{ step.label | translate }}\n    </div>\n  </li>\n</ul>\n<ng-container [ngTemplateOutlet]=\"selected.content\"></ng-container>\n",
                providers: [{ provide: CdkStepper, useExisting: C8yStepper }]
            }]
    }], function () { return [{ type: ɵngcc16.Directionality }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { disableDefaultIcons: [{
            type: Input
        }], hideStepProgress: [{
            type: Input
        }], onStepChange: [{
            type: Output
        }], disableProgressButtons: [{
            type: Input
        }], customClasses: [{
            type: Input
        }], _icons: [{
            type: ContentChildren,
            args: [C8yStepperIcon, { descendants: true }]
        }] }); })();

class C8yStepperProgress {
    constructor() {
        /** Emits the index: number of the step which was clicked */
        this.onStepClicked = new EventEmitter();
    }
    /** Called on click and emits the step index */
    stepSelected() {
        this.onStepClicked.emit(this.index);
    }
}
C8yStepperProgress.ɵfac = function C8yStepperProgress_Factory(t) { return new (t || C8yStepperProgress)(); };
C8yStepperProgress.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: C8yStepperProgress, selectors: [["c8y-stepper-progress"]], inputs: { iconOverrides: "iconOverrides", index: "index", selected: "selected", state: "state", disabled: "disabled" }, outputs: { onStepClicked: "onStepClicked" }, decls: 3, vars: 9, consts: [["type", "button", 1, "c8y-step", 3, "ngClass", "disabled", "ngSwitch", "click"], [3, "ngTemplateOutlet", 4, "ngSwitchCase"], [3, "ngSwitch", 4, "ngSwitchDefault"], [3, "ngTemplateOutlet"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], [3, "c8yIcon"], [1, "m-t-4", 3, "c8yIcon"]], template: function C8yStepperProgress_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function C8yStepperProgress_Template_button_click_0_listener() { return ctx.stepSelected(); });
        ɵngcc0.ɵɵtemplate(1, C8yStepperProgress_ng_container_1_Template, 1, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, C8yStepperProgress_ng_container_2_Template, 4, 3, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(4, _c59, ctx.selected, ctx.state === "done" || ctx.state === "_done", ctx.state === "error", ctx.state === "warning"))("disabled", ctx.disabled)("ngSwitch", !!(ctx.iconOverrides && ctx.iconOverrides[ctx.state]));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", true);
    } }, directives: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc7.NgTemplateOutlet, IconDirective], encapsulation: 2 });
C8yStepperProgress.propDecorators = {
    iconOverrides: [{ type: Input }],
    index: [{ type: Input }],
    selected: [{ type: Input }],
    state: [{ type: Input }],
    disabled: [{ type: Input }],
    onStepClicked: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yStepperProgress, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper-progress',
                template: "<button\n  type=\"button\"\n  class=\"c8y-step\"\n  [ngClass]=\"{\n    active: selected,\n    'step-done': state === 'done' || state === '_done',\n    'step-error': state === 'error',\n    'step-warning': state === 'warning'\n  }\"\n  [disabled]=\"disabled\"\n  [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\"\n  (click)=\"stepSelected()\"\n>\n  <ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides[state]\"></ng-container>\n  <ng-container *ngSwitchDefault [ngSwitch]=\"state\">\n    <span *ngSwitchCase=\"'edit'\">\n      <span [c8yIcon]=\"'edit'\"></span>\n    </span>\n    <span *ngSwitchCase=\"'done'\">\n      <span class=\"m-t-4\" [c8yIcon]=\"'check'\"></span>\n    </span>\n    <span *ngSwitchDefault> {{ index + 1 }} </span>\n  </ng-container>\n</button>\n"
            }]
    }], function () { return []; }, { onStepClicked: [{
            type: Output
        }], iconOverrides: [{
            type: Input
        }], index: [{
            type: Input
        }], selected: [{
            type: Input
        }], state: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();

/**
 * C8yStepperButtons provides a convenient way to have, according to
 * the C8yStepper and each cdk-step, buttons to navigate between steps or to cancel the whole
 * step-process. Buttons rendered with the help of this component will use the branding css.
 *
 * By default all steps with this component in use will render a next button, expect the last step.
 * The other way around, every step using this component will render a back button, expect the first step.
 * To get a cancel button rendered you need to handle the onCancel event.
 * For next and back button you don't need to handle the available events onNext and onBack because default behavior
 * is implemented. The default will just call, according to the button, the stepper.next() or stepper.previous()
 * methods and moves the stepper forth or back. Using the EventEmitter onNext and onBack will emit for you the following
 * object: {stepper: C8yStepper, step: CdkStep}. This is useful if you need to implement custom logic before moving
 * to the next step or sending data to a backend. In this case you need to tell the stepper to move forward or back
 * on your own.
 *
 * With the component input [labels] you can change the label of each button in each step. It takes an object like this:
 * {next?: string, back?: string, cancel?: string}
 *
 * The [pending] input is of type boolean and will enable css animation for the next button when true.
 *
 * If the cdk-step provides a stepControl the component will set the next button disabled when the formGroup
 * behind it is invalid. As long as the [pending] input is true the back and next button is also disabled.
 * This will prevent multiple clicks while running a request or stepping back while a request is ongoing.
 *
 * **Example**
 * ```
 * <c8y-stepper>
 *  <cdk-step>
 *    <!--
 *      your html code
 *          ...
 *          ...    -->
 *    <c8y-stepper-buttons
 *     (onNext)="save()"
 *     [labels]="{ next: 'Save' }"
 *     [pending]="pendingStatus"
 *     ></c8y-stepper-buttons>
 *  </cdk-step>
 * </c8y-stepper>
 *
 * // in your component:
 * async save() {
 *   this.pendingStatus = true;
 *   // your async request goes here ...
 *   // await something();
 *   this.pendingStatus = false;
 *   this.stepper.next();
 * }
 * ```
 */
class C8yStepperButtons {
    constructor(stepper, step) {
        this.stepper = stepper;
        this.step = step;
        /**
         * Optional
         * Indicates if a request is pending and sets the next button
         * to disabled when true
         */
        this.pending = false;
        /**
         * Disabled state of a button
         */
        this.disabled = false;
        /**
         * EventEmitter which emits when cancel button is clicked
         */
        this.onCancel = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when next button is clicked.
         */
        this.onNext = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when back button is clicked.
         */
        this.onBack = new EventEmitter();
        /**
         * EventEmitter which emits when the optional custom button is clicked
         */
        this.onCustom = new EventEmitter();
        /**
         * Indicator which button should be shown.
         * Based on the cdk-steps within the c8y-stepper
         * next and back buttons are rendered.
         */
        this.showBtns = {
            cancel: false,
            back: false,
            next: false,
            custom: false
        };
        /**
         * Flag that indicates that the default settings defined in the showBtns have been overwritten.
         */
        this.forceShowBtns = false;
    }
    /**
     * This option forces the display of the buttons passed by the input.
     * It will override the default settings and take precedence over the standard settings.
     * @param btns An object that contains options for displaying buttons.
     *
     * **Example**
     * ```html
     *
     * <c8y-stepper-buttons
     *   [labels]="{ custom: 'Custom btn', cancel: 'Cancel btn' }"
     *   [showButtons]="{ custom: true, cancel: true }"
     * ></c8y-stepper-buttons>
     *
     * ```
     */
    set showButtons(btns) {
        if (btns) {
            this.showBtns = btns;
            this.forceShowBtns = true;
        }
    }
    /**
     * @ignore
     */
    ngAfterContentInit() {
        if (!this.forceShowBtns) {
            this.showBtns.cancel = this.onCancel.observers.length > 0;
            this.showBtns.custom = this.onCustom.observers.length > 0;
        }
        if (this.stepper && this.stepper._steps && this.step && !this.forceShowBtns) {
            this.showBtns.back = this.stepper._steps.first !== this.step;
            this.showBtns.next = this.stepper._steps.last !== this.step;
        }
        if (this.step && this.step.stepControl) {
            this.disabled = this.step.stepControl.invalid;
            this.statusChangeSubscription = this.step.stepControl.statusChanges.subscribe(status => {
                this.disabled = this.step.stepControl.invalid;
            });
        }
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        /**
         * Disable save/next button while the status is pending
         * This will prevent multiple clicks and therefore multiple requests
         */
        if (changes && changes.pending) {
            this.disabled = changes.pending.currentValue;
        }
    }
    ngOnDestroy() {
        if (this.statusChangeSubscription && !this.statusChangeSubscription.closed) {
            this.statusChangeSubscription.unsubscribe();
        }
    }
    /**
     * Gets called when cancel button is clicked.
     * It will emit immediate.
     */
    cancel() {
        this.onCancel.emit();
    }
    /**
     * Gets called when next button is clicked. When onNext EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.next() as default.
     */
    next() {
        if (this.onNext.observers.length > 0) {
            this.onNext.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.next();
        }
    }
    /**
     * Gets called when back button is clicked. When onBack EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.previous() as default.
     */
    back() {
        this.stepper.selected.completed = false;
        if (this.onBack.observers.length > 0) {
            this.onBack.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.previous();
        }
    }
    /**
     * Gets called when the custom button is clicked.
     * It will emit immediately.
     */
    custom() {
        this.onCustom.emit();
    }
}
C8yStepperButtons.ɵfac = function C8yStepperButtons_Factory(t) { return new (t || C8yStepperButtons)(ɵngcc0.ɵɵdirectiveInject(C8yStepper, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc17.CdkStep, 1)); };
C8yStepperButtons.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: C8yStepperButtons, selectors: [["c8y-stepper-buttons"]], inputs: { pending: "pending", disabled: "disabled", showButtons: "showButtons", labels: "labels" }, outputs: { onCancel: "onCancel", onNext: "onNext", onBack: "onBack", onCustom: "onCustom" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [[1, "text-center"], ["type", "button", "class", "btn btn-default", 3, "click", 4, "ngIf"], ["type", "button", "class", "btn btn-default", 3, "disabled", "click", 4, "ngIf"], ["type", "button", "class", "btn", 3, "ngClass", "disabled", "click", 4, "ngIf"], ["type", "button", "class", "btn btn-primary", 3, "ngClass", "disabled", "click", 4, "ngIf"], ["type", "button", 1, "btn", "btn-default", 3, "click"], [3, "title", 4, "ngIf", "ngIfElse"], ["cancelLabel", ""], [3, "title"], ["type", "button", 1, "btn", "btn-default", 3, "disabled", "click"], ["backLabel", ""], ["type", "button", 1, "btn", 3, "ngClass", "disabled", "click"], ["customLabel", ""], ["type", "button", 1, "btn", "btn-primary", 3, "ngClass", "disabled", "click"], ["nextLabel", ""]], template: function C8yStepperButtons_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, C8yStepperButtons_button_1_Template, 4, 2, "button", 1);
        ɵngcc0.ɵɵtemplate(2, C8yStepperButtons_button_2_Template, 4, 3, "button", 2);
        ɵngcc0.ɵɵtemplate(3, C8yStepperButtons_button_3_Template, 4, 8, "button", 3);
        ɵngcc0.ɵɵtemplate(4, C8yStepperButtons_button_4_Template, 4, 6, "button", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBtns.cancel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBtns.back);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBtns.custom);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBtns.next);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgClass], pipes: [C8yTranslatePipe], encapsulation: 2 });
C8yStepperButtons.ctorParameters = () => [
    { type: C8yStepper, decorators: [{ type: Host }] },
    { type: CdkStep, decorators: [{ type: Host }] }
];
C8yStepperButtons.propDecorators = {
    labels: [{ type: Input }],
    pending: [{ type: Input }],
    disabled: [{ type: Input }],
    onCancel: [{ type: Output }],
    onNext: [{ type: Output }],
    onBack: [{ type: Output }],
    onCustom: [{ type: Output }],
    showButtons: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yStepperButtons, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper-buttons',
                template: "<div class=\"text-center\">\n  <button *ngIf=\"showBtns.cancel\" (click)=\"cancel()\" type=\"button\" class=\"btn btn-default\">\n    <span *ngIf=\"labels?.cancel; else cancelLabel\" title=\"{{ labels?.cancel | translate }}\">{{\n      labels?.cancel | translate\n    }}</span>\n    <ng-template #cancelLabel>\n      <span title=\"{{ 'Cancel' | translate }}\">{{ 'Cancel' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    *ngIf=\"showBtns.back\"\n    type=\"button\"\n    (click)=\"back()\"\n    class=\"btn btn-default\"\n    [disabled]=\"pending\"\n  >\n    <span *ngIf=\"labels?.back; else backLabel\" title=\"{{ labels?.back | translate }}\">{{\n      labels?.back | translate\n    }}</span>\n    <ng-template #backLabel>\n      <span title=\"{{ 'Back' | translate }}\">{{ 'Back' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    *ngIf=\"showBtns.custom\"\n    (click)=\"custom()\"\n    type=\"button\"\n    class=\"btn\"\n    [ngClass]=\"{\n      'btn-default': showBtns.next,\n      'btn-primary': !showBtns.next,\n      'btn-pending': pending\n    }\"\n    [disabled]=\"pending || disabled\"\n  >\n    <span *ngIf=\"labels?.custom; else customLabel\" title=\"{{ labels?.custom | translate }}\">{{\n      labels?.custom | translate\n    }}</span>\n    <ng-template #customLabel>\n      <span title=\"{{ 'Complete' | translate }}\">{{ 'Complete' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    (click)=\"next()\"\n    *ngIf=\"showBtns.next\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pending }\"\n    [disabled]=\"disabled\"\n  >\n    <span *ngIf=\"labels?.next; else nextLabel\" title=\"{{ labels?.next | translate }}\">{{\n      labels?.next | translate\n    }}</span>\n    <ng-template #nextLabel>\n      <span title=\"{{ 'Next' | translate }}\">{{ 'Next' | translate }}</span>\n    </ng-template>\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: C8yStepper, decorators: [{
                type: Host
            }] }, { type: ɵngcc17.CdkStep, decorators: [{
                type: Host
            }] }]; }, { pending: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onCancel: [{
            type: Output
        }], onNext: [{
            type: Output
        }], onBack: [{
            type: Output
        }], onCustom: [{
            type: Output
        }], showButtons: [{
            type: Input
        }], labels: [{
            type: Input
        }] }); })();

class StepperOutletComponent {
    constructor() {
        this.showDefaultButtons = true;
    }
}
StepperOutletComponent.ɵfac = function StepperOutletComponent_Factory(t) { return new (t || StepperOutletComponent)(); };
StepperOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StepperOutletComponent, selectors: [["c8y-stepper-outlet"]], inputs: { showDefaultButtons: "showDefaultButtons", steps: "steps" }, decls: 2, vars: 5, consts: [[1, "d-flex", "d-col", "fit-h", 3, "customClasses", "disableDefaultIcons"], [3, "label", "state", "completed", "optional", 4, "ngFor", "ngForOf"], [3, "label", "state", "completed", "optional"], [4, "ngComponentOutlet"], [4, "ngIf"], ["c8yStepperIcon", "error"], ["c8yStepperIcon", "warning"], ["c8yStepperIcon", "done"], ["c8yIcon", "error"], ["c8yIcon", "warning"], ["c8yIcon", "check"]], template: function StepperOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-stepper", 0);
        ɵngcc0.ɵɵtemplate(1, StepperOutletComponent_cdk_step_1_Template, 6, 6, "cdk-step", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("customClasses", ɵngcc0.ɵɵpureFunction0(3, _c61))("disableDefaultIcons", ɵngcc0.ɵɵpureFunction0(4, _c62));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.steps);
    } }, directives: [C8yStepper, ɵngcc7.NgForOf, ɵngcc17.CdkStep, ɵngcc7.NgComponentOutlet, ɵngcc7.NgIf, C8yStepperIcon, C8yStepperButtons, IconDirective], encapsulation: 2 });
StepperOutletComponent.propDecorators = {
    steps: [{ type: Input }],
    showDefaultButtons: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper-outlet',
                template: "<c8y-stepper \n  [customClasses]=\"['p-t-32', 'p-b-32', 'm-l-48', 'm-r-48']\" \n  class=\"d-flex d-col fit-h\"\n  [disableDefaultIcons]=\"{ edit: true, done: false }\"\n>\n  <cdk-step\n    *ngFor=\"let step of steps\"\n    [label]=\"step.label\"\n    [state]=\"step.state\"\n    [completed]=\"step.completed\"\n    [optional]=\"!step.required\"\n  >\n    <ng-container *ngComponentOutlet=\"step.component\"></ng-container>\n    <c8y-stepper-buttons *ngIf=\"showDefaultButtons\"></c8y-stepper-buttons>\n    <ng-template c8yStepperIcon=\"error\">\n      <span c8yIcon=\"error\"></span>\n    </ng-template>\n    <ng-template c8yStepperIcon=\"warning\">\n      <span c8yIcon=\"warning\"></span>\n    </ng-template>\n    <ng-template c8yStepperIcon=\"done\">\n      <span c8yIcon=\"check\"></span>\n    </ng-template>\n  </cdk-step>\n</c8y-stepper>\n"
            }]
    }], function () { return []; }, { showDefaultButtons: [{
            type: Input
        }], steps: [{
            type: Input
        }] }); })();

const ɵ0$3 = { displayDefaultIndicatorType: false };
/**
 * The angular module definition for c8y-stepper (Wizard).
 * @exports C8yStepper
 * @exports C8yStepperIcon
 * @exports C8yStepperButtons
 * @exports CdkStep
 */
class StepperModule {
}
StepperModule.ɵfac = function StepperModule_Factory(t) { return new (t || StepperModule)(); };
StepperModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StepperModule });
StepperModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        StepperService,
        {
            /**
             * This enables additional states, like: edit, done and error
             * These states are used to display custom icons, if needed.
             * Any change in here will most probably result in not showing custom icons anymore
             */
            provide: STEPPER_GLOBAL_OPTIONS,
            useValue: ɵ0$3
        }
    ], imports: [[CommonModule, CdkStepperModule, TooltipModule, FormsModule$1]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, CdkStepperModule, TooltipModule, FormsModule$1],
                declarations: [
                    C8yStepper,
                    C8yStepperIcon,
                    C8yStepperProgress,
                    C8yStepperButtons,
                    StepperOutletComponent
                ],
                exports: [C8yStepper, CdkStep, C8yStepperIcon, C8yStepperButtons, StepperOutletComponent],
                providers: [
                    StepperService,
                    {
                        /**
                         * This enables additional states, like: edit, done and error
                         * These states are used to display custom icons, if needed.
                         * Any change in here will most probably result in not showing custom icons anymore
                         */
                        provide: STEPPER_GLOBAL_OPTIONS,
                        useValue: ɵ0$3
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StepperModule, { declarations: function () { return [C8yStepper, C8yStepperIcon, C8yStepperProgress, C8yStepperButtons, StepperOutletComponent]; }, imports: function () { return [CommonModule, CdkStepperModule, TooltipModule, FormsModule$1]; }, exports: function () { return [C8yStepper, CdkStep, C8yStepperIcon, C8yStepperButtons, StepperOutletComponent]; } }); })();

/**
 * This component is the parent of each setup and can be injected
 * into setup steps to control them.
 */
class SetupComponent {
    constructor(options, stepperService, appState, alert, permissions, bootstrapComponent) {
        this.options = options;
        this.stepperService = stepperService;
        this.appState = appState;
        this.alert = alert;
        this.permissions = permissions;
        this.bootstrapComponent = bootstrapComponent;
        /**
         * A subject which can be used to exchange data between
         * steps.
         */
        this.data$ = new BehaviorSubject({});
        /**
         * The current state. SetupState.START shows an application overview
         * while SetupState.WIZARD shows the steps.
         */
        this.currentSetupState = SetupState.START;
        /**
         * Emits when the setup is done. You can add certain operations before completing the setup that needed to be awaited. Return
         * true if everything is fine, otherwise false.
         * ```typescript
         * const asyncOperation = delay(2000);
         * this.setup.completed$ = this.setup.completed$.pipe(asyncOperation, map(() => true));
         * ``
         * Note: Remember that a step can be viewed multiple times. The step needs to ensure, to only add a completed operation ones.
         */
        this.completed$ = new Observable().pipe(startWith(true));
        /**
         * @ignore
         */
        this.stepperId = Steppers.SETUP;
        /**
         * @ignore
         */
        this.setupState = SetupState;
        /**
         * @ignore
         */
        this.properties = [];
        /**
         * @ignore
         */
        this.canSkip = false;
        /**
         * @ignore
         */
        this.hasRole = false;
        /**
         * @ignore
         */
        this.isOwner = true;
        this.RELOAD_APP_TIMEOUT = 2000;
    }
    /**
     * Mark a step as completed. If the step is required, this is needed to fulfill
     * the setup.
     * @param stepIndex The index of the step you want to mark as completed
     * @param isCompleted Defaults to true to mark it as completed but can be set to false to invalidate the step.
     */
    stepCompleted(stepIndex, isCompleted = true) {
        const step = this.getByIndex(stepIndex);
        step.completed = isCompleted;
    }
    /**
     * Returns a step by it index position in the wizard.
     * @param stepIndex The step index that you want to receive.
     * @returns An indexed step definition.
     */
    getByIndex(stepIndex) {
        return this.steps.find(({ index }) => index === stepIndex);
    }
    /**
     * @ignore
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.steps = (yield this.stepperService.getById$(this.stepperId).toPromise()).map((step, index) => (Object.assign(Object.assign({}, step), { index, completed: false })));
            if (!this.options.forceSetup) {
                const doneSetup = this.options.setup || [];
                this.steps = this.steps.filter(step => doneSetup.indexOf(step.setupId) === -1);
            }
            this.isOwner = this.appState.isOwnerOfApplication();
            this.canSkip = !this.hasRequiredSteps(this.steps);
            this.hasRole = this.permissions.hasRole(NEEDED_ROLE_FOR_SETUP);
            this.properties = [
                {
                    label: gettext('Description'),
                    key: 'description'
                },
                {
                    label: gettext('Keywords'),
                    key: 'keywords'
                },
                {
                    label: gettext('Source'),
                    key: 'repository'
                },
                {
                    label: gettext('Version'),
                    key: 'version'
                },
                {
                    label: gettext('Author'),
                    key: 'author'
                },
                {
                    label: gettext('Required platform version'),
                    key: 'requiredPlatformVersion'
                }
            ];
        });
    }
    /**
     * Skips the current setup wizard
     */
    skip() {
        this.bootstrapComponent.isSetupNeeded$ = of(false);
    }
    /**
     * Starts the wizards (or finish the setup if no steps are found)
     */
    start() {
        this.currentSetupState = SetupState.WIZARD;
    }
    /**
     * Cancels the wizards and goes back to the start view.
     */
    cancel() {
        this.currentSetupState = SetupState.START;
    }
    /**
     * Finish the wizard and will start the application.
     */
    finish() {
        this.currentSetupState = SetupState.FINALIZING;
        this.completed$.subscribe((status) => __awaiter(this, void 0, void 0, function* () {
            if (status) {
                this.finalize();
            }
            else {
                this.currentSetupState = SetupState.WIZARD;
            }
        }));
    }
    finalize() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const doneSetup = this.steps.filter(value => value.setupId).map(value => value.setupId);
                const currentConfig = this.appState.currentApplicationConfig.value;
                yield this.appState.updateApplicationConfig({
                    setup: uniq([...(currentConfig.setupDone || []), ...doneSetup])
                });
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                this.currentSetupState = SetupState.WIZARD;
            }
            finally {
                this.currentSetupState = SetupState.RELOADING;
                // To ensure proper setup, we reload the app when setup is ready.
                setTimeout(() => this.reloadApp(), this.RELOAD_APP_TIMEOUT);
            }
        });
    }
    /**
     * Verifies every step and checks if all required are completed.
     * Updates the icons to reflect the state of the steps (error, warning, done).
     * @returns Returns true if no error was found.
     */
    verify() {
        this.steps.forEach((step, index) => {
            if (this.steps.length - 1 !== index) {
                step.state = this.getState(step);
            }
        });
        return !!this.steps.find(step => step.state !== 'error');
    }
    reloadApp() {
        const removeUrlParams = location.href.split('?')[0];
        const removedHash = removeUrlParams.split('#')[0];
        location.href = removedHash;
    }
    hasRequiredSteps(notCompletedSetupSteps) {
        return notCompletedSetupSteps.some(step => step.required);
    }
    getState(step) {
        if (!step.completed && step.required) {
            return 'error';
        }
        if (!step.completed && !step.required) {
            return 'warning';
        }
        return 'done';
    }
}
SetupComponent.ɵfac = function SetupComponent_Factory(t) { return new (t || SetupComponent)(ɵngcc0.ɵɵdirectiveInject(OptionsService), ɵngcc0.ɵɵdirectiveInject(StepperService), ɵngcc0.ɵɵdirectiveInject(AppStateService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(Permissions), ɵngcc0.ɵɵdirectiveInject(BootstrapComponent)); };
SetupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SetupComponent, selectors: [["c8y-setup"]], decls: 6, vars: 7, consts: [["class", "card content-fullpage fadeInRightBig animated", 4, "ngIf"], ["class", "card content-fullpage d-flex d-col fadeInUpBig animated", 4, "ngIf"], [1, "card", "content-fullpage", "fadeInRightBig", "animated"], [1, "d-contents", 3, "showDefaultButtons", "steps"], [1, "card", "content-fullpage", "d-flex", "d-col", "fadeInUpBig", "animated"], [1, "inner-scroll", "flex-grow"], [1, "card-block"], [1, "row"], [1, "col-md-8", "col-md-offset-2", "col-lg-6", "col-lg-offset-3", "p-t-24"], ["viewBox", "0 0 360 190", 1, "p-t-32", 2, "max-width", "450px", "margin", "auto"], ["id", "ecosystem-welcome-illustration", "stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"], ["id", "medium-img"], ["id", "M---Nothing-found---illustration", "transform", "translate(27.000000, 0.000000)"], ["d", "M41.9882163,184.153177 C24.3512964,165.028818 14.796713,138.637202 18.0717117,113.128248 C21.3467105,87.6192947 38.0071399,63.7138452 61.8485298,52.9453596 C71.0829585,49.0513414 80.8096047,46.3893689 90.76767,45.0308169 C98.489456,43.8098001 118.605159,43.8098001 134.379236,43.8098001 C145.406066,43.8098001 181.235754,38.969866 207.015103,16.5355211 C213.745375,10.6511027 239.269332,-7.69357146 271.478495,5.11974949 C293.036399,13.6962892 308.780431,29.0693321 312.911736,38.3078689 C331.314825,79.4105311 320.017582,129.634042 291.233648,164.558065 C285.720232,171.251591 279.470694,177.592051 271.70384,181.608167 C268.726702,182.834918 265.624451,183.747258 262.449715,184.32971 L41.9882163,184.153177 Z", "id", "Path", "fill", "#CDE6F9", "fill-rule", "nonzero"], ["id", "Oval", "fill", "#5FAEEC", "fill-rule", "nonzero", "cx", "28.1633729", "cy", "162.880435", "rx", "2.68222598", "ry", "2.68115941"], ["id", "Oval", "fill", "#5FAEEC", "fill-rule", "nonzero", "cx", "65.7145367", "cy", "65.6884059", "rx", "4.02333899", "ry", "3.35144928"], ["id", "Group", "opacity", "0.8", "transform", "translate(8.046677, 16.757247)", "fill", "#7BCAEF", "fill-rule", "nonzero"], ["d", "M12.8344513,8.04347826 L2.50788129,8.04347826 C1.90488763,8.22105727 1.25665804,7.99364432 0.892621563,7.47681021 C0.528585083,6.95997611 0.528585083,6.26707703 0.892621563,5.75024293 C1.25665804,5.23340882 1.90488763,5.00599587 2.50788129,5.18357488 L12.8344513,5.18357488 C13.437445,5.00599587 14.0856746,5.23340882 14.4497111,5.75024293 C14.8137476,6.26707703 14.8137476,6.95997611 14.4497111,7.47681021 C14.0856746,7.99364432 13.437445,8.22105727 12.8344513,8.04347826 Z", "id", "Path"], ["d", "M7.64166184,13.2866345 C6.82691795,13.2866345 6.16643754,12.6197478 6.16643754,11.7971014 L6.16643754,1.37037037 C6.35002101,0.734836286 6.92699763,0.297906603 7.58265287,0.297906603 C8.2383081,0.297906603 8.81528471,0.734836286 8.99888356,1.37037037 L8.99888356,11.7971014 C9.00133839,12.5753731 8.40999101,13.2243764 7.64166184,13.2866345 Z", "id", "Path"], ["id", "Oval", "fill", "#5FAEEC", "fill-rule", "nonzero", "cx", "2.68222598", "cy", "90.4891305", "rx", "2.68222598", "ry", "2.68115941"], ["id", "Oval", "fill", "#5FAEEC", "fill-rule", "nonzero", "cx", "257.493695", "cy", "157.518116", "rx", "2.68222598", "ry", "2.68115941"], ["id", "Oval", "fill", "#14629F", "fill-rule", "nonzero", "cx", "299.738754", "cy", "155.507247", "rx", "2.01166949", "ry", "2.01086957"], ["id", "Oval", "fill", "#96CAF3", "fill-rule", "nonzero", "cx", "260.175921", "cy", "59.6557971", "rx", "2.68222598", "ry", "2.68115941"], ["id", "Oval", "stroke", "#5FAEEC", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round", "cx", "329.913796", "cy", "111.938406", "rx", "2.68222598", "ry", "2.68115941"], ["id", "Oval", "stroke", "#96CAF3", "cx", "95.2190226", "cy", "144.782609", "rx", "4.02333899", "ry", "3.35144928"], ["id", "Group", "opacity", "0.6", "transform", "translate(273.587050, 121.322464)", "fill", "#14629F", "fill-rule", "nonzero"], ["d", "M12.1263437,8.01368761 L1.79977363,8.01368761 C1.17034461,7.82832349 0.737612147,7.24575058 0.737612147,6.5837359 C0.737612147,5.92172124 1.17034461,5.33914833 1.79977363,5.15378421 L12.1263437,5.15378421 C12.7293374,4.97620521 13.3775669,5.20361817 13.7416034,5.72045226 C14.1056399,6.23728637 14.1056399,6.93018545 13.7416034,7.44701956 C13.3775669,7.96385365 12.7293374,8.19126661 12.1263437,8.01368761 L12.1263437,8.01368761 Z", "id", "Path"], ["d", "M6.94830642,13.2419485 C6.13356254,13.2419485 5.47308212,12.5750618 5.47308212,11.7524155 L5.47308212,1.32568438 C5.6566656,0.690150295 6.23364221,0.253220612 6.88929744,0.253220612 C7.54495269,0.253220612 8.1219293,0.690150295 8.30552815,1.32568438 L8.30552815,11.7524155 C8.30798297,12.5306871 7.71663558,13.1796904 6.94830642,13.2419485 Z", "id", "Path"], ["id", "Rectangle", "fill", "#5FAEEC", "fill-rule", "nonzero", "x", "107.28904", "y", "128.025362", "width", "109.971265", "height", "48.2608695"], ["id", "Path", "fill", "#5FAEEC", "fill-rule", "nonzero", "points", "205.744516 91.8297102 121.555988 91.8297102 107.28904 129.365942 217.260306 129.365942"], ["id", "Path", "fill", "#5FAEEC", "fill-rule", "nonzero", "points", "93.8779095 114.917472 103.478057 98.5326086 118.017943 121.471417 107.035845 128.025362"], ["id", "Path", "fill", "#5FAEEC", "fill-rule", "nonzero", "points", "209.213627 123.316736 216.813268 129.365942 232.012548 114.683402 221.373051 98.5326086"], ["id", "Path", "fill", "#96CAF3", "fill-rule", "nonzero", "points", "214.884986 105.235507 111.648803 105.235507 107.28904 129.365942 217.260306 129.365942"], ["d", "M91.6761446,30.3423163 C92.3222173,30.3423163 92.8459628,30.8537275 92.8459628,31.4845853 C92.8459628,32.1154431 92.3222173,32.6268545 91.6761446,32.6268545 C91.0300718,32.6268545 90.5063264,32.1154431 90.5063264,31.4845853 C90.5289441,30.8631053 91.0396757,30.3644014 91.6761446,30.3423163 Z M91.8662401,24.6309708 C92.4940745,24.6065819 93.1037929,24.8394323 93.5480901,25.2732662 C93.9923872,25.7071004 94.2308535,26.30246 94.2058764,26.9155089 L94.2058764,27.5152002 L89.5266036,27.5152002 L89.5266036,26.9155089 C89.4960305,26.2895723 89.7404154,25.6806341 90.1983788,25.2416359 C90.6563421,24.8026375 91.2843716,24.5752894 91.924731,24.6166924 L91.8662401,24.6309708 Z M91.8662401,23.4744232 C90.9292048,23.466734 90.0282593,23.8268063 89.3656519,24.4738094 C88.7030445,25.1208125 88.3342881,26.0005407 88.3421627,26.9155089 L88.3421627,27.5152002 L87.1723446,27.5152002 L87.1723446,35.5253623 L96.5601355,35.5253623 L96.5601355,27.5009219 L95.3903173,27.5009219 L95.3903173,26.9012306 C95.3981063,25.9961621 95.037351,25.1251451 94.3874206,24.4798095 C93.7374901,23.8344738 92.8516283,23.4676871 91.924731,23.460145 L91.8662401,23.4744232 Z", "id", "Shape", "fill", "#5FAEEC", "fill-rule", "nonzero"], ["d", "M254.811469,24.8007247 L248.113249,12.7355072 L241.400339,24.8007247 L254.811469,24.8007247 Z M248.7155,22.7874058 L247.466929,22.7874058 L247.466929,21.6411367 L248.671434,21.6411367 L248.7155,22.7874058 Z M248.7155,20.5095632 L247.466929,20.5095632 L247.466929,17.5704117 L248.671434,17.5704117 L248.7155,20.5095632 Z", "id", "Shape", "fill", "#5FAEEC", "fill-rule", "nonzero"], ["x1", "201.166949", "y1", "40.8876812", "x2", "187.755818", "y2", "60.9963769", "id", "Path", "stroke", "#5FAEEC", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["x1", "165.969438", "y1", "31.5036231", "x2", "165.285471", "y2", "55.6340579", "id", "Path", "stroke", "#5FAEEC", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["x1", "130.08796", "y1", "44.9094203", "x2", "146.181316", "y2", "63.6775362", "id", "Path", "stroke", "#5FAEEC", "stroke-width", "2", "stroke-linecap", "round", "stroke-linejoin", "round"], ["id", "Fill-56", "fill", "#A5D1FE", "fill-rule", "nonzero", "points", "0 185 335 185 335 175 0 175"], ["translate", "", 1, "p-t-16", "p-b-16", "text-center", "text-medium", 3, "translateParams"], ["class", "lead text-normal", "translate", "", 4, "ngIf"], ["class", "flex-grow", 4, "ngIf"], ["class", "alert alert-danger m-32", 4, "ngIf"], [1, "card-footer", "separator", "d-flex", "j-c-center"], ["class", "btn", "translate", "", 3, "title", "click", 4, "ngIf"], ["translate", "", 1, "btn", "btn-primary", 3, "disabled", "title", "click"], ["translate", "", 1, "lead", "text-normal"], [1, "flex-grow"], ["icon", "info", 3, "properties", "data", "title"], [1, "alert", "alert-danger", "m-32"], ["translate", ""], ["translate", "", 1, "btn", 3, "title", "click"]], template: function SetupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "humanizeAppName");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, SetupComponent_div_4_Template, 2, 2, "div", 0);
        ɵngcc0.ɵɵtemplate(5, SetupComponent_div_5_Template, 48, 16, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, ɵngcc0.ɵɵpipeBind1(3, 5, ctx.options.name)), "\n");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentSetupState !== ctx.setupState.START);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentSetupState === ctx.setupState.START);
    } }, directives: [TitleComponent, ɵngcc7.NgIf, StepperOutletComponent, C8yTranslateDirective, PropertiesListComponent], pipes: [ɵngcc7.AsyncPipe, HumanizeAppNamePipe, C8yTranslatePipe], encapsulation: 2 });
SetupComponent.ctorParameters = () => [
    { type: OptionsService },
    { type: StepperService },
    { type: AppStateService },
    { type: AlertService },
    { type: Permissions },
    { type: BootstrapComponent }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SetupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-setup',
                template: "<c8y-title>\n  {{ options.name | humanizeAppName | async }}\n</c8y-title>\n\n<div\n  class=\"card content-fullpage fadeInRightBig animated\"\n  *ngIf=\"currentSetupState !== setupState.START\"\n>\n  <c8y-stepper-outlet\n    [showDefaultButtons]=\"false\"\n    [steps]=\"steps\"\n    class=\"d-contents\"\n  ></c8y-stepper-outlet>\n</div>\n\n<div\n  class=\"card content-fullpage d-flex d-col fadeInUpBig animated\"\n  *ngIf=\"currentSetupState === setupState.START\"\n>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"card-block\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3 p-t-24\">\n          <svg class=\"p-t-32\" viewBox=\"0 0 360 190\" style=\"max-width: 450px; margin: auto\">\n            <g\n              id=\"ecosystem-welcome-illustration\"\n              stroke=\"none\"\n              stroke-width=\"1\"\n              fill=\"none\"\n              fill-rule=\"evenodd\"\n            >\n              <g id=\"medium-img\">\n                <g id=\"M---Nothing-found---illustration\" transform=\"translate(27.000000, 0.000000)\">\n                  <path\n                    d=\"M41.9882163,184.153177 C24.3512964,165.028818 14.796713,138.637202 18.0717117,113.128248 C21.3467105,87.6192947 38.0071399,63.7138452 61.8485298,52.9453596 C71.0829585,49.0513414 80.8096047,46.3893689 90.76767,45.0308169 C98.489456,43.8098001 118.605159,43.8098001 134.379236,43.8098001 C145.406066,43.8098001 181.235754,38.969866 207.015103,16.5355211 C213.745375,10.6511027 239.269332,-7.69357146 271.478495,5.11974949 C293.036399,13.6962892 308.780431,29.0693321 312.911736,38.3078689 C331.314825,79.4105311 320.017582,129.634042 291.233648,164.558065 C285.720232,171.251591 279.470694,177.592051 271.70384,181.608167 C268.726702,182.834918 265.624451,183.747258 262.449715,184.32971 L41.9882163,184.153177 Z\"\n                    id=\"Path\"\n                    fill=\"#CDE6F9\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"28.1633729\"\n                    cy=\"162.880435\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"65.7145367\"\n                    cy=\"65.6884059\"\n                    rx=\"4.02333899\"\n                    ry=\"3.35144928\"\n                  ></ellipse>\n                  <g\n                    id=\"Group\"\n                    opacity=\"0.8\"\n                    transform=\"translate(8.046677, 16.757247)\"\n                    fill=\"#7BCAEF\"\n                    fill-rule=\"nonzero\"\n                  >\n                    <path\n                      d=\"M12.8344513,8.04347826 L2.50788129,8.04347826 C1.90488763,8.22105727 1.25665804,7.99364432 0.892621563,7.47681021 C0.528585083,6.95997611 0.528585083,6.26707703 0.892621563,5.75024293 C1.25665804,5.23340882 1.90488763,5.00599587 2.50788129,5.18357488 L12.8344513,5.18357488 C13.437445,5.00599587 14.0856746,5.23340882 14.4497111,5.75024293 C14.8137476,6.26707703 14.8137476,6.95997611 14.4497111,7.47681021 C14.0856746,7.99364432 13.437445,8.22105727 12.8344513,8.04347826 Z\"\n                      id=\"Path\"\n                    ></path>\n                    <path\n                      d=\"M7.64166184,13.2866345 C6.82691795,13.2866345 6.16643754,12.6197478 6.16643754,11.7971014 L6.16643754,1.37037037 C6.35002101,0.734836286 6.92699763,0.297906603 7.58265287,0.297906603 C8.2383081,0.297906603 8.81528471,0.734836286 8.99888356,1.37037037 L8.99888356,11.7971014 C9.00133839,12.5753731 8.40999101,13.2243764 7.64166184,13.2866345 Z\"\n                      id=\"Path\"\n                    ></path>\n                  </g>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"2.68222598\"\n                    cy=\"90.4891305\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    cx=\"257.493695\"\n                    cy=\"157.518116\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#14629F\"\n                    fill-rule=\"nonzero\"\n                    cx=\"299.738754\"\n                    cy=\"155.507247\"\n                    rx=\"2.01166949\"\n                    ry=\"2.01086957\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    fill=\"#96CAF3\"\n                    fill-rule=\"nonzero\"\n                    cx=\"260.175921\"\n                    cy=\"59.6557971\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    cx=\"329.913796\"\n                    cy=\"111.938406\"\n                    rx=\"2.68222598\"\n                    ry=\"2.68115941\"\n                  ></ellipse>\n                  <ellipse\n                    id=\"Oval\"\n                    stroke=\"#96CAF3\"\n                    cx=\"95.2190226\"\n                    cy=\"144.782609\"\n                    rx=\"4.02333899\"\n                    ry=\"3.35144928\"\n                  ></ellipse>\n                  <g\n                    id=\"Group\"\n                    opacity=\"0.6\"\n                    transform=\"translate(273.587050, 121.322464)\"\n                    fill=\"#14629F\"\n                    fill-rule=\"nonzero\"\n                  >\n                    <path\n                      d=\"M12.1263437,8.01368761 L1.79977363,8.01368761 C1.17034461,7.82832349 0.737612147,7.24575058 0.737612147,6.5837359 C0.737612147,5.92172124 1.17034461,5.33914833 1.79977363,5.15378421 L12.1263437,5.15378421 C12.7293374,4.97620521 13.3775669,5.20361817 13.7416034,5.72045226 C14.1056399,6.23728637 14.1056399,6.93018545 13.7416034,7.44701956 C13.3775669,7.96385365 12.7293374,8.19126661 12.1263437,8.01368761 L12.1263437,8.01368761 Z\"\n                      id=\"Path\"\n                    ></path>\n                    <path\n                      d=\"M6.94830642,13.2419485 C6.13356254,13.2419485 5.47308212,12.5750618 5.47308212,11.7524155 L5.47308212,1.32568438 C5.6566656,0.690150295 6.23364221,0.253220612 6.88929744,0.253220612 C7.54495269,0.253220612 8.1219293,0.690150295 8.30552815,1.32568438 L8.30552815,11.7524155 C8.30798297,12.5306871 7.71663558,13.1796904 6.94830642,13.2419485 Z\"\n                      id=\"Path\"\n                    ></path>\n                  </g>\n                  <rect\n                    id=\"Rectangle\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    x=\"107.28904\"\n                    y=\"128.025362\"\n                    width=\"109.971265\"\n                    height=\"48.2608695\"\n                  ></rect>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    points=\"205.744516 91.8297102 121.555988 91.8297102 107.28904 129.365942 217.260306 129.365942\"\n                  ></polygon>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    points=\"93.8779095 114.917472 103.478057 98.5326086 118.017943 121.471417 107.035845 128.025362\"\n                  ></polygon>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                    points=\"209.213627 123.316736 216.813268 129.365942 232.012548 114.683402 221.373051 98.5326086\"\n                  ></polygon>\n                  <polygon\n                    id=\"Path\"\n                    fill=\"#96CAF3\"\n                    fill-rule=\"nonzero\"\n                    points=\"214.884986 105.235507 111.648803 105.235507 107.28904 129.365942 217.260306 129.365942\"\n                  ></polygon>\n                  <path\n                    d=\"M91.6761446,30.3423163 C92.3222173,30.3423163 92.8459628,30.8537275 92.8459628,31.4845853 C92.8459628,32.1154431 92.3222173,32.6268545 91.6761446,32.6268545 C91.0300718,32.6268545 90.5063264,32.1154431 90.5063264,31.4845853 C90.5289441,30.8631053 91.0396757,30.3644014 91.6761446,30.3423163 Z M91.8662401,24.6309708 C92.4940745,24.6065819 93.1037929,24.8394323 93.5480901,25.2732662 C93.9923872,25.7071004 94.2308535,26.30246 94.2058764,26.9155089 L94.2058764,27.5152002 L89.5266036,27.5152002 L89.5266036,26.9155089 C89.4960305,26.2895723 89.7404154,25.6806341 90.1983788,25.2416359 C90.6563421,24.8026375 91.2843716,24.5752894 91.924731,24.6166924 L91.8662401,24.6309708 Z M91.8662401,23.4744232 C90.9292048,23.466734 90.0282593,23.8268063 89.3656519,24.4738094 C88.7030445,25.1208125 88.3342881,26.0005407 88.3421627,26.9155089 L88.3421627,27.5152002 L87.1723446,27.5152002 L87.1723446,35.5253623 L96.5601355,35.5253623 L96.5601355,27.5009219 L95.3903173,27.5009219 L95.3903173,26.9012306 C95.3981063,25.9961621 95.037351,25.1251451 94.3874206,24.4798095 C93.7374901,23.8344738 92.8516283,23.4676871 91.924731,23.460145 L91.8662401,23.4744232 Z\"\n                    id=\"Shape\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                  <path\n                    d=\"M254.811469,24.8007247 L248.113249,12.7355072 L241.400339,24.8007247 L254.811469,24.8007247 Z M248.7155,22.7874058 L247.466929,22.7874058 L247.466929,21.6411367 L248.671434,21.6411367 L248.7155,22.7874058 Z M248.7155,20.5095632 L247.466929,20.5095632 L247.466929,17.5704117 L248.671434,17.5704117 L248.7155,20.5095632 Z\"\n                    id=\"Shape\"\n                    fill=\"#5FAEEC\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                  <line\n                    x1=\"201.166949\"\n                    y1=\"40.8876812\"\n                    x2=\"187.755818\"\n                    y2=\"60.9963769\"\n                    id=\"Path\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  ></line>\n                  <line\n                    x1=\"165.969438\"\n                    y1=\"31.5036231\"\n                    x2=\"165.285471\"\n                    y2=\"55.6340579\"\n                    id=\"Path\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  ></line>\n                  <line\n                    x1=\"130.08796\"\n                    y1=\"44.9094203\"\n                    x2=\"146.181316\"\n                    y2=\"63.6775362\"\n                    id=\"Path\"\n                    stroke=\"#5FAEEC\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  ></line>\n                </g>\n                <polygon\n                  id=\"Fill-56\"\n                  fill=\"#A5D1FE\"\n                  fill-rule=\"nonzero\"\n                  points=\"0 185 335 185 335 175 0 175\"\n                ></polygon>\n              </g>\n            </g>\n          </svg>\n          <h1\n            class=\"p-t-16 p-b-16 text-center text-medium\"\n            ngNonBindable\n            translate\n            [translateParams]=\"{ appName: options.name | humanizeAppName | async }\"\n          >\n            Welcome to {{ appName }}\n          </h1>\n          <p class=\"lead text-normal\" translate *ngIf=\"hasRole\">\n            This application (or any plugin that you added recently) has pre-requirements that needs\n            to be configured first. This wizard will guide you through the steps that are necessary\n            to get your application up and running.\n          </p>\n          <div class=\"flex-grow\" *ngIf=\"properties.length > 0\">\n            <c8y-properties-list\n              icon=\"info\"\n              [properties]=\"properties\"\n              [data]=\"options\"\n              [title]=\"'Application properties' | translate\"\n            ></c8y-properties-list>\n          </div>\n          <div class=\"alert alert-danger m-32\" *ngIf=\"!hasRole\">\n            <strong translate>No permission</strong>\n            <div translate>\n              You don't have sufficient rights to setup this application. Please contact an\n              application administrator to setup the required steps.\n            </div>\n          </div>\n          <div class=\"alert alert-danger m-32\" *ngIf=\"!isOwner\">\n            <strong translate>Not the owner</strong>\n            <div translate>\n              The current application is not owned by this tenant. Please clone the application\n              before running the setup.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      class=\"btn\"\n      (click)=\"skip()\"\n      translate\n      *ngIf=\"canSkip\"\n      [title]=\"\n        'You can skip the setup now. It will be shown again as soon as you restart the application.'\n          | translate\n      \"\n    >\n      Skip\n    </button>\n\n    <button\n      class=\"btn btn-primary\"\n      (click)=\"start()\"\n      translate\n      [disabled]=\"!hasRole || !isOwner\"\n      [title]=\"'Start the setup wizard.' | translate\"\n    >\n      Start\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: OptionsService }, { type: StepperService }, { type: AppStateService }, { type: AlertService }, { type: Permissions }, { type: BootstrapComponent }]; }, null); })();

class SetupCompletedComponent {
    constructor(stepper, step, setup) {
        this.stepper = stepper;
        this.step = step;
        this.setup = setup;
        this.status = 'done';
        this.STEP_LABEL = gettext('Step');
        this.isVerified = false;
    }
    ngOnInit() {
        this.stepperSelectionChangeSubscription = this.stepper.selectionChange.subscribe(({ selectedIndex }) => {
            this.verify(selectedIndex);
        });
    }
    ngOnDestroy() {
        this.stepperSelectionChangeSubscription.unsubscribe();
    }
    verify(selectedIndex) {
        const isLastStep = this.stepper.steps.length - 1 === selectedIndex;
        if (isLastStep || this.isVerified) {
            // set the last step to completed
            this.getOverallStatus();
            this.setup.verify();
            this.isVerified = true;
        }
    }
    start() {
        this.setup.finish();
    }
    back() {
        this.stepper.previous();
    }
    gotoStep(index) {
        this.stepper.selectedIndex = index;
    }
    getOverallStatus() {
        const validSteps = this.setup.steps.slice(0, this.setup.steps.length - 1);
        this.status = 'done';
        if (validSteps.find(step => !step.completed && step.required)) {
            this.status = 'error';
        }
        else if (validSteps.find(step => !step.completed && !step.required)) {
            this.status = 'warning';
        }
        this.step.state = this.status;
    }
}
SetupCompletedComponent.ɵfac = function SetupCompletedComponent_Factory(t) { return new (t || SetupCompletedComponent)(ɵngcc0.ɵɵdirectiveInject(C8yStepper), ɵngcc0.ɵɵdirectiveInject(ɵngcc17.CdkStep), ɵngcc0.ɵɵdirectiveInject(SetupComponent)); };
SetupCompletedComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SetupCompletedComponent, selectors: [["c8y-setup-completed"]], hostAttrs: [1, "d-contents"], decls: 23, vars: 13, consts: [[1, "container-fluid", "flex-no-shrink", "fit-w"], [1, "row", "separator-bottom"], [1, "col-md-8", "col-md-offset-2", "col-lg-6", "col-lg-offset-3", "p-t-24", "p-l-16", "p-r-16"], ["translate", "", 1, "text-medium", "l-h-base"], ["translate", "", 1, "lead", "text-normal", "p-t-8", "p-b-8"], [1, "inner-scroll", "flex-grow"], [1, "container-fluid", "fit-w", "p-t-16"], [1, "row"], [1, "col-md-8", "col-md-offset-2", "col-lg-6", "col-lg-offset-3"], [1, "text-center", 3, "ngSwitch"], ["type", "success", 3, "text", "size", "vertical", 4, "ngSwitchCase"], ["type", "warning", 3, "text", "size", "vertical", 4, "ngSwitchCase"], ["type", "error", 3, "text", "size", "vertical", 4, "ngSwitchCase"], [1, "list-unstyled", "m-t-16", "separator-top"], ["class", "p-t-4 p-b-4 d-flex a-i-center separator-bottom text-nowrap l-h-1", "style", "cursor: pointer", 3, "click", 4, "ngFor", "ngForOf"], [1, "card-footer", "separator", "d-flex", "j-c-center"], ["translate", "", "class", "btn btn-default", "type", "button", 3, "disabled", "click", 4, "ngIf"], ["type", "button", 1, "btn", "btn-primary", 3, "disabled", "ngClass", "click"], ["translate", "", 4, "ngIf"], ["type", "success", 3, "text", "size", "vertical"], ["type", "warning", 3, "text", "size", "vertical"], ["type", "error", 3, "text", "size", "vertical"], [1, "p-t-4", "p-b-4", "d-flex", "a-i-center", "separator-bottom", "text-nowrap", "l-h-1", 2, "cursor", "pointer", 3, "click"], [4, "ngIf"], [1, "m-l-auto", "icon-20", "l-h-1"], ["class", "text-success", 3, "c8yIcon", "title", 4, "ngIf"], ["class", "text-danger", 3, "c8yIcon", "title", 4, "ngIf"], ["class", "text-warning", 3, "c8yIcon", "title", 4, "ngIf"], [1, "dot", "small", "m-r-4", "l-h-1", 3, "ngClass"], ["translate", ""], [1, "text-success", 3, "c8yIcon", "title"], [1, "text-danger", 3, "c8yIcon", "title"], [1, "text-warning", 3, "c8yIcon", "title"], ["translate", "", "type", "button", 1, "btn", "btn-default", 3, "disabled", "click"]], template: function SetupCompletedComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h3", 3);
        ɵngcc0.ɵɵtext(4, "Summary");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "p", 4);
        ɵngcc0.ɵɵtext(6, " Please verify the setup result. If any step is not finished but required, you need to ensure that you have finished the step. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "div", 8);
        ɵngcc0.ɵɵelementStart(11, "div", 9);
        ɵngcc0.ɵɵtemplate(12, SetupCompletedComponent_c8y_operation_result_12_Template, 2, 5, "c8y-operation-result", 10);
        ɵngcc0.ɵɵtemplate(13, SetupCompletedComponent_c8y_operation_result_13_Template, 2, 5, "c8y-operation-result", 11);
        ɵngcc0.ɵɵtemplate(14, SetupCompletedComponent_c8y_operation_result_14_Template, 2, 5, "c8y-operation-result", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "ul", 13);
        ɵngcc0.ɵɵtemplate(16, SetupCompletedComponent_li_16_Template, 7, 5, "li", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div", 15);
        ɵngcc0.ɵɵtemplate(18, SetupCompletedComponent_button_18_Template, 2, 1, "button", 16);
        ɵngcc0.ɵɵelementStart(19, "button", 17);
        ɵngcc0.ɵɵlistener("click", function SetupCompletedComponent_Template_button_click_19_listener() { return ctx.start(); });
        ɵngcc0.ɵɵtemplate(20, SetupCompletedComponent_span_20_Template, 2, 0, "span", 18);
        ɵngcc0.ɵɵtemplate(21, SetupCompletedComponent_span_21_Template, 2, 0, "span", 18);
        ɵngcc0.ɵɵtemplate(22, SetupCompletedComponent_span_22_Template, 2, 0, "span", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.status);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "done");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "warning");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "error");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.setup.steps.slice(0, ctx.setup.steps.length - 1));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.stepper.selectedIndex !== 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.status === "error" || ctx.setup.currentSetupState === ctx.setup.setupState.FINALIZING || ctx.setup.currentSetupState === ctx.setup.setupState.RELOADING)("ngClass", ɵngcc0.ɵɵpureFunction1(11, _c4, ctx.setup.currentSetupState === ctx.setup.setupState.FINALIZING || ctx.setup.currentSetupState === ctx.setup.setupState.RELOADING));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.setup.currentSetupState === ctx.setup.setupState.WIZARD);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.setup.currentSetupState === ctx.setup.setupState.FINALIZING);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.setup.currentSetupState === ctx.setup.setupState.RELOADING);
    } }, directives: [C8yTranslateDirective, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgForOf, ɵngcc7.NgIf, ɵngcc7.NgClass, OperationResultComponent, IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
SetupCompletedComponent.ctorParameters = () => [
    { type: C8yStepper },
    { type: CdkStep },
    { type: SetupComponent }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SetupCompletedComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-setup-completed',
                template: "<div class=\"container-fluid flex-no-shrink fit-w\">\n  <div class=\"row separator-bottom\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3  p-t-24 p-l-16 p-r-16\">\n      <h3 translate class=\"text-medium l-h-base\">Summary</h3>\n      <p translate class=\"lead text-normal p-t-8 p-b-8\">\n        Please verify the setup result. If any step is not finished but required, you need to ensure\n        that you have finished the step.\n      </p>\n    </div>\n  </div>\n</div>\n<div class=\"inner-scroll flex-grow\">\n  <div class=\"container-fluid fit-w p-t-16\">\n    <div class=\"row\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n        <div class=\"text-center\" [ngSwitch]=\"status\">\n          <c8y-operation-result\n            *ngSwitchCase=\"'done'\"\n            text=\"{{ 'Setup completed' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"success\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngSwitchCase=\"'warning'\"\n            text=\"{{ 'Setup completed with warnings' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"warning\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngSwitchCase=\"'error'\"\n            text=\"{{ 'Setup not completed' | translate }}\"\n            [size]=\"120\"\n            [vertical]=\"true\"\n            type=\"error\"\n          ></c8y-operation-result>\n        </div>\n        <ul class=\"list-unstyled m-t-16 separator-top\">\n          <li\n            class=\"p-t-4 p-b-4 d-flex a-i-center separator-bottom text-nowrap l-h-1\"\n            *ngFor=\"let step of setup.steps.slice(0, setup.steps.length - 1)\"\n            (click)=\"gotoStep(step.index)\"\n            style=\"cursor: pointer\"\n          >\n            <span *ngIf=\"step.label\">\n              <span class=\"dot small m-r-4 l-h-1\"\n                [ngClass]=\"{ 'dot-success': step.completed, \n                            'dot-error' : !step.completed && step.required,\n                            'dot-warning' : !step.completed && !step.required }\"\n              >\n                {{step.index + 1}}\n              </span>\n              {{ step.label || (STEP_LABEL | translate) + ' ' }}\n            </span>\n            <span *ngIf=\"!step.label\">\n              <span translate>Step</span>{{ ' ' + (step.index + 1) }}\n            </span>\n            <span class=\"m-l-auto icon-20 l-h-1\">\n              <i\n                *ngIf=\"step.completed\"\n                [c8yIcon]=\"'success'\"\n                class=\"text-success\"\n                [title]=\"'Completed' | translate\"\n              ></i>\n              <i\n                *ngIf=\"!step.completed && step.required\"\n                [c8yIcon]=\"'error'\"\n                class=\"text-danger\"\n                [title]=\"\n                  'Not completed and required. Please go to the step and fulfil the setup.'\n                    | translate\n                \"\n              ></i>\n              <i\n                *ngIf=\"!step.completed && !step.required\"\n                [c8yIcon]=\"'warning'\"\n                class=\"text-warning\"\n                [title]=\"'This step was not completed but it is also not required.' | translate\"\n              ></i>\n            </span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"card-footer separator d-flex j-c-center\">\n  <button\n    translate\n    class=\"btn btn-default\"\n    type=\"button\"\n    (click)=\"back()\"\n    *ngIf=\"stepper.selectedIndex !== 0\"\n    [disabled]=\"\n      setup.currentSetupState === setup.setupState.FINALIZING ||\n      setup.currentSetupState === setup.setupState.RELOADING\n    \"\n  >\n    Back\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    type=\"button\"\n    (click)=\"start()\"\n    [disabled]=\"\n      status === 'error' ||\n      setup.currentSetupState === setup.setupState.FINALIZING ||\n      setup.currentSetupState === setup.setupState.RELOADING\n    \"\n    [ngClass]=\"{\n      'btn-pending':\n        setup.currentSetupState === setup.setupState.FINALIZING ||\n        setup.currentSetupState === setup.setupState.RELOADING\n    }\"\n  >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.WIZARD\" translate\n      >Save and reload</span\n    >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.FINALIZING\" translate\n      >Getting things ready\u2026</span\n    >\n    <span *ngIf=\"setup.currentSetupState === setup.setupState.RELOADING\" translate\n      >Done. Reloading the application.</span\n    >\n  </button>\n</div>\n",
                host: { class: 'd-contents' }
            }]
    }], function () { return [{ type: C8yStepper }, { type: ɵngcc17.CdkStep }, { type: SetupComponent }]; }, null); })();

const ɵ0$2 = {
    setupId: SETUP_FINISHED_STEP_ID,
    stepperId: Steppers.SETUP,
    component: SetupCompletedComponent,
    label: gettext('Summary'),
    priority: Infinity
};
class SetupModule {
}
SetupModule.ɵfac = function SetupModule_Factory(t) { return new (t || SetupModule)(); };
SetupModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SetupModule });
SetupModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_STEPPER,
            useValue: ɵ0$2,
            multi: true
        }
    ], imports: [[CommonModule, HeaderModule, StepperModule, PluginsModule, PropertiesListModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SetupModule, [{
        type: NgModule,
        args: [{
                declarations: [SetupComponent, SetupCompletedComponent],
                imports: [CommonModule, HeaderModule, StepperModule, PluginsModule, PropertiesListModule],
                exports: [SetupComponent, SetupCompletedComponent],
                entryComponents: [SetupCompletedComponent],
                providers: [
                    {
                        provide: HOOK_STEPPER,
                        useValue: ɵ0$2,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SetupModule, { declarations: [SetupComponent, SetupCompletedComponent], imports: [CommonModule, HeaderModule, StepperModule, PluginsModule, PropertiesListModule], exports: [SetupComponent, SetupCompletedComponent] }); })();

class TabComponent {
    constructor(tabs) {
        this.tabs = tabs;
        this.label = '';
    }
    ngAfterContentInit() {
        setTimeout(() => this.tabs.add(this));
    }
    ngOnDestroy() {
        this.tabs.remove(this);
    }
}
TabComponent.ɵfac = function TabComponent_Factory(t) { return new (t || TabComponent)(ɵngcc0.ɵɵdirectiveInject(TabsService)); };
TabComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TabComponent, selectors: [["c8y-tab"]], viewQuery: function TabComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c65, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { label: "label", path: "path", icon: "icon", priority: "priority", orientation: "orientation" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["tpl", ""]], template: function TabComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, TabComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
TabComponent.ctorParameters = () => [
    { type: TabsService }
];
TabComponent.propDecorators = {
    template: [{ type: ViewChild, args: ['tpl', { static: false },] }],
    path: [{ type: Input }],
    label: [{ type: Input }],
    icon: [{ type: Input }],
    priority: [{ type: Input }],
    orientation: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-tab',
                template: '<ng-template #tpl><ng-content></ng-content></ng-template>'
            }]
    }], function () { return [{ type: TabsService }]; }, { label: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['tpl', { static: false }]
        }], path: [{
            type: Input
        }], icon: [{
            type: Input
        }], priority: [{
            type: Input
        }], orientation: [{
            type: Input
        }] }); })();

class TabsOutletComponent {
    constructor(router, renderer, el, header) {
        this.router = router;
        this.renderer = renderer;
        this.el = el;
        this.header = header;
        this.tabs = [];
        this.orientation = 'vertical';
        this.navigatorOpen = false;
        this.showLeft = false;
        this.showRight = false;
    }
    get isNavigatorOpen() {
        return this.navigatorOpen;
    }
    get hasTabs() {
        let visibleTabs = [];
        if (this.tabs) {
            visibleTabs = this.tabs.filter(tab => tab.hide !== true);
        }
        return visibleTabs.length > 1;
    }
    get isHorizontal() {
        return this.orientation === 'horizontal';
    }
    get isVertical() {
        return this.orientation !== 'horizontal';
    }
    ngOnDestroy() {
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
    }
    ngAfterContentInit() {
        if (this.orientation === 'horizontal') {
            this.scrollSubscribe();
        }
    }
    isActive(tab) {
        if (tab && tab.path) {
            return this.router.isActive(tab.path, false);
        }
        else {
            return false;
        }
    }
    navigateTo(path) {
        this.header.toggle();
        this.router.navigate([path]);
    }
    scroll(direction = 'right') {
        const { widthScroll, width, scrollLeft } = this.getDimensions();
        const multiplier = direction === 'left' ? -1 : 1;
        let targetScroll = scrollLeft + width * multiplier;
        if (targetScroll < 0) {
            targetScroll = 0;
        }
        if (targetScroll > widthScroll - width) {
            targetScroll = widthScroll - width;
        }
        // TODO: we should animate this
        this.container.nativeElement.scrollLeft = targetScroll;
    }
    scrollSubscribe() {
        let unlisten;
        this.scrollSubscription = merge(fromEvent(this.container.nativeElement, 'scroll'), fromEventPattern((handler) => {
            unlisten = this.renderer.listen('window', 'resize', handler);
        }, () => unlisten())).pipe(debounceTime(250)).subscribe(() => this.updateScroll());
    }
    updateScroll() {
        const { widthScroll, width, scrollLeft } = this.getDimensions();
        this.showLeft = !!scrollLeft;
        this.showRight = widthScroll > width + scrollLeft;
    }
    getDimensions() {
        const elTabs = this.tabsContainer.nativeElement;
        const el = this.container.nativeElement;
        const widthScroll = elTabs.scrollWidth;
        const width = el.clientWidth;
        const scrollLeft = el.scrollLeft;
        return { widthScroll, width, scrollLeft };
    }
}
TabsOutletComponent.ɵfac = function TabsOutletComponent_Factory(t) { return new (t || TabsOutletComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(HeaderService)); };
TabsOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TabsOutletComponent, selectors: [["c8y-tabs-outlet"], ["c8y-ui-tabs"]], viewQuery: function TabsOutletComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c66, 7, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c67, 5, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c68, 5, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c69, 5, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.leftBtn = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rightBtn = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabsContainer = _t.first);
    } }, hostVars: 8, hostBindings: function TabsOutletComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("navigator-open", ctx.isNavigatorOpen)("page-tabs", ctx.hasTabs)("page-tabs-horizontal", ctx.isHorizontal)("page-tabs-vertical", ctx.isVertical);
    } }, inputs: { tabs: "tabs", orientation: "orientation", navigatorOpen: "navigatorOpen" }, decls: 14, vars: 5, consts: [[1, "tabContainer", "hidden-xs"], ["container", ""], ["class", "tabs-slider tabs-slider-left", 3, "click", 4, "ngIf"], ["class", "tabs-slider tabs-slider-right", 3, "click", 4, "ngIf"], [1, "nav", "nav-tabs", "nav-tabsc8y"], ["tabsContainer", ""], [4, "ngFor", "ngForOf"], [1, "visible-xs", "mobile-tabs"], [1, "list-unstyled", "d-flex", "m-b-0"], [1, "c8y-select-wrapper", "flex-grow"], [3, "change"], ["select", ""], [1, "tabs-slider", "tabs-slider-left", 3, "click"], ["left", ""], [3, "c8yIcon"], [1, "tabs-slider", "tabs-slider-right", 3, "click"], ["right", ""], [3, "ngClass", 4, "ngIf"], [4, "ngComponentOutlet"], [3, "ngClass"], ["routerLinkActive", "", 3, "routerLink", "title"], ["rla", "routerLinkActive"], [3, "c8yIcon", 4, "ngIf"], ["class", "txt", 4, "ngIf"], [4, "ngTemplateOutlet"], [1, "txt"], [3, "value", "selected", 4, "ngIf"], [3, "value", "selected"], [4, "ngIf"]], template: function TabsOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵtemplate(2, TabsOutletComponent_button_2_Template, 3, 1, "button", 2);
        ɵngcc0.ɵɵtemplate(3, TabsOutletComponent_button_3_Template, 3, 1, "button", 3);
        ɵngcc0.ɵɵelementStart(4, "ul", 4, 5);
        ɵngcc0.ɵɵtemplate(6, TabsOutletComponent_ng_container_6_Template, 3, 2, "ng-container", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 7);
        ɵngcc0.ɵɵelementStart(8, "ul", 8);
        ɵngcc0.ɵɵelementStart(9, "li", 9);
        ɵngcc0.ɵɵelementStart(10, "select", 10, 11);
        ɵngcc0.ɵɵlistener("change", function TabsOutletComponent_Template_select_change_10_listener($event) { return ctx.navigateTo($event.target.value); });
        ɵngcc0.ɵɵtemplate(12, TabsOutletComponent_ng_container_12_Template, 2, 1, "ng-container", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, TabsOutletComponent_ng_container_13_Template, 2, 1, "ng-container", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showLeft);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showRight);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabs);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabs);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgForOf, IconDirective, ɵngcc7.NgComponentOutlet, ɵngcc7.NgClass, ɵngcc1.RouterLinkWithHref, ɵngcc1.RouterLinkActive, ɵngcc7.NgTemplateOutlet], pipes: [C8yTranslatePipe], encapsulation: 2 });
TabsOutletComponent.ctorParameters = () => [
    { type: Router },
    { type: Renderer2 },
    { type: ElementRef },
    { type: HeaderService }
];
TabsOutletComponent.propDecorators = {
    tabs: [{ type: Input }],
    orientation: [{ type: Input }],
    navigatorOpen: [{ type: Input }],
    isNavigatorOpen: [{ type: HostBinding, args: ['class.navigator-open',] }],
    hasTabs: [{ type: HostBinding, args: ['class.page-tabs',] }],
    isHorizontal: [{ type: HostBinding, args: ['class.page-tabs-horizontal',] }],
    isVertical: [{ type: HostBinding, args: ['class.page-tabs-vertical',] }],
    container: [{ type: ViewChild, args: ['container', { read: ElementRef, static: true },] }],
    leftBtn: [{ type: ViewChild, args: ['left', { read: ElementRef, static: false },] }],
    rightBtn: [{ type: ViewChild, args: ['right', { read: ElementRef, static: false },] }],
    tabsContainer: [{ type: ViewChild, args: ['tabsContainer', { read: ElementRef, static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-tabs-outlet,c8y-ui-tabs',
                template: "<div #container class=\"tabContainer hidden-xs\">\n  <button class=\"tabs-slider tabs-slider-left\" #left *ngIf=\"showLeft\" (click)=\"scroll('left')\">\n    <i [c8yIcon]=\"'chevron-left'\"></i>\n  </button>\n  <button class=\"tabs-slider tabs-slider-right\" #right *ngIf=\"showRight\" (click)=\"scroll('right')\">\n    <i [c8yIcon]=\"'chevron-right'\"></i>\n  </button>\n  <ul class=\"nav nav-tabs nav-tabsc8y\" #tabsContainer>\n    <ng-container *ngFor=\"let tab of tabs\">\n      <li [ngClass]=\"{ active: rla?.isActive }\" *ngIf=\"!tab.component\">\n        <a\n          [routerLink]=\"tab.path\"\n          routerLinkActive\n          #rla=\"routerLinkActive\"\n          title=\"{{ tab?.label | translate }}\"\n        >\n          <i [c8yIcon]=\"tab?.icon\" *ngIf=\"!tab.template && tab?.icon\"></i>\n          <span class=\"txt\" *ngIf=\"!tab.template && !tab.component\">{{\n            tab?.label | translate\n          }}</span>\n        </a>\n        <ng-container *ngTemplateOutlet=\"tab.template\"></ng-container>\n      </li>\n      <ng-container *ngComponentOutlet=\"tab.component\"></ng-container>\n    </ng-container>\n  </ul>\n</div>\n\n<div class=\"visible-xs mobile-tabs\">\n  <ul class=\"list-unstyled d-flex m-b-0\">\n    <li class=\"c8y-select-wrapper flex-grow\">\n      <select (change)=\"navigateTo($event.target.value)\" #select>\n        <ng-container *ngFor=\"let tab of tabs\">\n          <option *ngIf=\"!tab.component\" [value]=\"tab.path\" [selected]=\"isActive(tab)\">\n            {{ tab?.label | translate }}\n          </option>\n        </ng-container>\n      </select>\n    </li>\n    <ng-container *ngFor=\"let tab of tabs\">\n      <ng-container *ngIf=\"tab.component\">\n        <ng-container *ngComponentOutlet=\"tab.component\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </ul>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: HeaderService }]; }, { tabs: [{
            type: Input
        }], orientation: [{
            type: Input
        }], navigatorOpen: [{
            type: Input
        }], isNavigatorOpen: [{
            type: HostBinding,
            args: ['class.navigator-open']
        }], hasTabs: [{
            type: HostBinding,
            args: ['class.page-tabs']
        }], isHorizontal: [{
            type: HostBinding,
            args: ['class.page-tabs-horizontal']
        }], isVertical: [{
            type: HostBinding,
            args: ['class.page-tabs-vertical']
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ElementRef, static: true }]
        }], leftBtn: [{
            type: ViewChild,
            args: ['left', { read: ElementRef, static: false }]
        }], rightBtn: [{
            type: ViewChild,
            args: ['right', { read: ElementRef, static: false }]
        }], tabsContainer: [{
            type: ViewChild,
            args: ['tabsContainer', { read: ElementRef, static: false }]
        }] }); })();

/**
 * Register this component on the parent route of a view with multiple tabs where the first tab
 * is displayed only conditionally.
 *
 * Given the following routes leading to a single view with multiple tabs:<br>
 * /yourpath/tab-a -> Tab A<br>
 * /yourpath/tab-b -> Tab B<br>
 * /yourpath/tab-c -> Tab C
 *
 * Your components will be registered like
 * ```typescript
 * export const routes: Route[] = [
 *   {
 *     path: 'yourpath/tab-a',
 *     component: TabAComponent
 *   },
 *   {
 *     path: 'yourpath/tab-b',
 *     component: TabBComponent
 *   },
 *   {
 *     path: 'yourpath/tab-c',
 *     component: TabCComponent
 *   }
 * ];
 * ```
 *
 * In the simple case where Tab A is the first tab on the view and it is always displayed, you can register
 * your view in the navigation with a similar navigator node:
 *
 * ```typescript
 * new NavigatorNode({
 *   label: gettext('My tabs'),
 *   path: 'yourpath/tab-a',
 *   icon: 'gears',
 *   parent: gettext('Some parent node'),
 *   priority: 100
 * })
 * ```
 *
 * This will navigate to the first tab's component and activate the first tab in the view.
 *
 * In case Tab A is displayed conditionally you cannot link it from a navigator node since it may not be available in some cases.
 * In this situation `ConditionalTabsOutletComponent` comes handy as it will forward users to the first available tab on your view:
 *
 * ```typescript
 * new NavigatorNode({
 *   label: gettext('My tabs'),
 *   path: 'yourpath', // note that here we use only the parent route
 *   icon: 'gears',
 *   parent: gettext('Some parent node'),
 *   priority: 100
 * })
 *
 * [...]
 *
 * export const routes: Route[] = [
 *   {
 *     path: 'yourpath',
 *     component: ConditionalTabsOutletComponent // we register ConditionalTabsOutletComponent for the parent path
 *   },
 *   {
 *     path: 'yourpath/tab-a',
 *     component: TabAComponent
 *   },
 *   {
 *     path: 'yourpath/tab-b',
 *     component: TabBComponent
 *   },
 *   {
 *     path: 'yourpath/tab-c',
 *     component: TabCComponent
 *   }
 * ];
 * ```
 */
class ConditionalTabsOutletComponent {
    constructor(tabsService, router) {
        this.tabsService = tabsService;
        this.router = router;
        this.endSubscriptions$ = new Subject();
    }
    ngOnInit() {
        this.tabsService.firstTab$.pipe(takeUntil(this.endSubscriptions$)).subscribe((tab) => {
            if (tab) {
                this.router.navigateByUrl(tab.path, { replaceUrl: true });
            }
        });
    }
    ngOnDestroy() {
        this.endSubscriptions$.next();
        this.endSubscriptions$.complete();
    }
}
ConditionalTabsOutletComponent.ɵfac = function ConditionalTabsOutletComponent_Factory(t) { return new (t || ConditionalTabsOutletComponent)(ɵngcc0.ɵɵdirectiveInject(TabsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router)); };
ConditionalTabsOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConditionalTabsOutletComponent, selectors: [["c8y-conditional-tabs-outlet"]], decls: 1, vars: 0, template: function ConditionalTabsOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "router-outlet");
    } }, directives: [ɵngcc1.RouterOutlet], encapsulation: 2 });
ConditionalTabsOutletComponent.ctorParameters = () => [
    { type: TabsService },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConditionalTabsOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-conditional-tabs-outlet',
                template: `
    <router-outlet></router-outlet>
  `
            }]
    }], function () { return [{ type: TabsService }, { type: ɵngcc1.Router }]; }, null); })();

class TabsModule {
}
TabsModule.ɵfac = function TabsModule_Factory(t) { return new (t || TabsModule)(); };
TabsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TabsModule });
TabsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            RouterModule$1.forChild([]),
            HeaderModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ConditionalTabsOutletComponent,
                    TabsOutletComponent,
                    TabComponent
                ],
                imports: [
                    CommonModule,
                    RouterModule$1.forChild([]),
                    HeaderModule
                ],
                exports: [
                    ConditionalTabsOutletComponent,
                    TabsOutletComponent,
                    TabComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TabsModule, { declarations: [ConditionalTabsOutletComponent, TabsOutletComponent, TabComponent], imports: [CommonModule, ɵngcc1.RouterModule, HeaderModule], exports: [ConditionalTabsOutletComponent, TabsOutletComponent, TabComponent] }); })();

class CookieBannerPreferencesModalComponent {
    constructor(cookieBannerService) {
        this.cookieBannerService = cookieBannerService;
        this.closeSubject = new Subject();
        this.title = gettext('Cookie preferences');
        this.labels = { ok: gettext('Save settings'), cancel: gettext('Cancel') };
        this.status = Status.INFO;
    }
    ngOnInit() {
        this.configCookiePreferencesList = this.cookieBannerService.transformCookiePreferencesToList(this.configCookiePreferences);
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalRef.result;
                this.onClose();
            }
            catch (error) {
                this.onDismiss();
            }
        });
    }
    onClose() {
        const cookiePref = this.cookieBannerService.transformCookiePreferencesListToCookiePreferences(this.configCookiePreferencesList);
        this.closeSubject.next(cookiePref);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.closeSubject.next(undefined);
        this.closeSubject.complete();
    }
    getCookieDescription(cookieType) {
        return this.cookieBannerService.getCookieDescription(cookieType);
    }
}
CookieBannerPreferencesModalComponent.ɵfac = function CookieBannerPreferencesModalComponent_Factory(t) { return new (t || CookieBannerPreferencesModalComponent)(ɵngcc0.ɵɵdirectiveInject(CookieBannerService)); };
CookieBannerPreferencesModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CookieBannerPreferencesModalComponent, selectors: [["c8y-cookie-banner-preferences-modal"]], viewQuery: function CookieBannerPreferencesModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c70, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalRef = _t.first);
    } }, decls: 3, vars: 4, consts: [[3, "title", "status", "labels"], ["modalRef", ""], ["class", "row p-t-8 p-b-8 separator-top", 4, "ngFor", "ngForOf"], [1, "row", "p-t-8", "p-b-8", "separator-top"], [1, "col-xs-2"], [1, "text-center"], [1, "c8y-switch"], ["type", "checkbox", 3, "name", "ngModel", "disabled", "ngModelChange"], [1, "col-xs-10"], [1, "text-medium"]], template: function CookieBannerPreferencesModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-confirm-modal", 0, 1);
        ɵngcc0.ɵɵtemplate(2, CookieBannerPreferencesModalComponent_div_2_Template, 14, 11, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("status", ctx.status)("labels", ctx.labels);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.configCookiePreferencesList);
    } }, directives: [ConfirmModalComponent, ɵngcc7.NgForOf, ɵngcc14.CheckboxControlValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.NgModel], pipes: [HumanizePipe, C8yTranslatePipe], encapsulation: 2 });
CookieBannerPreferencesModalComponent.ctorParameters = () => [
    { type: CookieBannerService }
];
CookieBannerPreferencesModalComponent.propDecorators = {
    modalRef: [{ type: ViewChild, args: ['modalRef', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieBannerPreferencesModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-cookie-banner-preferences-modal',
                template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n\n  <div *ngFor=\"let item of configCookiePreferencesList\" class=\"row p-t-8 p-b-8 separator-top\">\n    <div class=\"col-xs-2\">\n      <div class=\"text-center\">\n        <label class=\"c8y-switch\">\n          <input\n            name=\"{{ item.name }}\"\n            type=\"checkbox\"\n            [(ngModel)]=\"item.value\"\n            [disabled]=\"item.isReadonly\"\n          />\n          <span></span>\n        </label>\n      </div>\n    </div>\n    <div class=\"col-xs-10\">\n      <h4 class=\"text-medium\">\n        {{ item.name | translate | humanize }}\n      </h4>\n      <p>\n        {{ getCookieDescription(item.name) | translate }}\n      </p>\n    </div>\n  </div>\n</c8y-confirm-modal>\n"
            }]
    }], function () { return [{ type: CookieBannerService }]; }, { modalRef: [{
            type: ViewChild,
            args: ['modalRef', { static: false }]
        }] }); })();

class CookieBannerComponent {
    constructor(bsModalService, cookieBannerService) {
        this.bsModalService = bsModalService;
        this.cookieBannerService = cookieBannerService;
        this.shouldDisable = false;
    }
    ngOnInit() {
        this.settings = this.cookieBannerService.getCookieBannerSettings();
        this.cookiePreferences = this.cookieBannerService.getCookiePreferencesConfig();
        this.shouldShowCookieBanner();
    }
    onConfigurePreferences() {
        this.disableButtons(true);
        const initialState = {
            configCookiePreferences: this.cookiePreferences
        };
        const modalRef = this.bsModalService.show(CookieBannerPreferencesModalComponent, {
            initialState
        });
        modalRef.content.closeSubject.subscribe((userCookiePreferences) => {
            this.disableButtons(false);
            if (userCookiePreferences) {
                this.cookieBannerService.setCookies(userCookiePreferences);
                this.setCookieBannerVisibility(false);
            }
        });
    }
    acceptCookies() {
        this.cookieBannerService.setCookies(this.cookiePreferences || { required: true });
        this.setCookieBannerVisibility(false);
    }
    rejectCookies() {
        this.cookieBannerService.setCookies({
            required: true,
            functional: false,
            marketing: false
        });
        this.setCookieBannerVisibility(false);
    }
    shouldShowCookieBanner() {
        this.setCookieBannerVisibility(this.cookieBannerService.shouldShowCookieBanner());
    }
    disableButtons(shouldDisable) {
        this.shouldDisable = shouldDisable;
    }
    setCookieBannerVisibility(shouldShow) {
        this.showBanner = shouldShow;
        this.cookieBannerService.isCookieBannerShowed$.next(shouldShow);
    }
}
CookieBannerComponent.ɵfac = function CookieBannerComponent_Factory(t) { return new (t || CookieBannerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalService), ɵngcc0.ɵɵdirectiveInject(CookieBannerService)); };
CookieBannerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CookieBannerComponent, selectors: [["c8y-cookie-banner"]], decls: 3, vars: 1, consts: [[1, "c8y-cookie-banner"], [1, "container"], ["class", "row p-t-16 p-b-16", 4, "ngIf"], [1, "row", "p-t-16", "p-b-16"], ["class", "col-md-2", 4, "ngIf"], [1, "col-md-7"], [1, "cookie-banner-content", "text-pre-line"], ["target", "_blank", "class", "text-primary", 3, "href", 4, "ngIf"], [1, "col-md-3"], [1, "row"], [1, "col-sm-6", "col-md-12"], [1, "p-b-16", "visible-sm", "visible-xs"], [1, "btn", "btn-primary", "btn-block", 3, "disabled", "click"], ["class", "col-sm-6 col-md-12", 4, "ngIf"], [1, "col-md-2"], ["target", "_blank", 1, "text-primary", 3, "href"], [1, "p-b-16"], [1, "btn", "btn-default", "btn-block", 3, "disabled", "click"]], template: function CookieBannerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, CookieBannerComponent_div_2_Template, 16, 11, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBanner);
    } }, directives: [ɵngcc7.NgIf], pipes: [C8yTranslatePipe], encapsulation: 2 });
CookieBannerComponent.ctorParameters = () => [
    { type: BsModalService },
    { type: CookieBannerService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieBannerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-cookie-banner',
                template: "<div class=\"c8y-cookie-banner\">\n  <div class=\"container\">\n    <div class=\"row p-t-16 p-b-16\" *ngIf=\"showBanner\">\n      <div class=\"col-md-2\" *ngIf=\"settings.cookieBannerTitle\">\n        <h3>{{ settings.cookieBannerTitle | translate }}</h3>\n        <div class=\"p-b-16 visible-sm visible-xs\"></div>\n      </div>\n      <div class=\"col-md-7\">\n        <div class=\"cookie-banner-content text-pre-line\">\n          {{ settings.cookieBannerText | translate }}\n          <a href=\"{{ settings.policyUrl }}\" target=\"_blank\" *ngIf=\"settings.policyUrl\" class=\"text-primary\">\n            {{ 'See also our Privacy Notice.' | translate }}\n          </a>\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <div class=\"row\">\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16 visible-sm visible-xs\"></div>\n            <button\n              class=\"btn btn-primary btn-block\"\n              (click)=\"acceptCookies()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Agree and proceed' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\" *ngIf=\"!!cookiePreferences\">\n            <div class=\"p-b-16\"></div>\n            <button\n              class=\"btn btn-primary btn-block\"\n              (click)=\"rejectCookies()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Reject all' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\" *ngIf=\"!!cookiePreferences\">\n            <div class=\"p-b-16\"></div>\n            <button\n              class=\"btn btn-default btn-block\"\n              (click)=\"onConfigurePreferences()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Configure preferences' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc10.BsModalService }, { type: CookieBannerService }]; }, null); })();

/**
 * The module which allows to bootstrap a custom application.
 * Use it as `bootstrap: []` component in your main app module
 * or as `<c8y-bootstrap>` in your main app.
 */
class BootstrapModule {
}
BootstrapModule.ɵfac = function BootstrapModule_Factory(t) { return new (t || BootstrapModule)(); };
BootstrapModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BootstrapModule });
BootstrapModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [CookieBannerService], imports: [[
            FormsModule$1,
            CommonModule,
            HeaderModule,
            LoginModule,
            RouterModule$1,
            TabsModule,
            ActionBarModule,
            AlertModule,
            NavigatorModule,
            TooltipModule,
            ModalModule,
            SetupModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BootstrapModule, [{
        type: NgModule,
        args: [{
                declarations: [BootstrapComponent, CookieBannerComponent, CookieBannerPreferencesModalComponent],
                imports: [
                    FormsModule$1,
                    CommonModule,
                    HeaderModule,
                    LoginModule,
                    RouterModule$1,
                    TabsModule,
                    ActionBarModule,
                    AlertModule,
                    NavigatorModule,
                    TooltipModule,
                    ModalModule,
                    SetupModule
                ],
                exports: [BootstrapComponent],
                entryComponents: [BootstrapComponent, CookieBannerPreferencesModalComponent],
                providers: [CookieBannerService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BootstrapModule, { declarations: function () { return [BootstrapComponent, CookieBannerComponent, CookieBannerPreferencesModalComponent]; }, imports: function () { return [FormsModule$1, CommonModule, HeaderModule, LoginModule, RouterModule$1, TabsModule, ActionBarModule, AlertModule, NavigatorModule, TooltipModule, ModalModule, SetupModule]; }, exports: function () { return [BootstrapComponent]; } }); })();

/**
 * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.
 *
 * ## Example:
 *
 * ```html
 *  <div>
 *    <c8y-drop-area
 *      (dropped)="uploadFile($event)"
 *      [icon]="'upload'"
 *      [accept]="'.zip,.7z,video'">
 *    </c8y-drop-area>
 *  </div>
 * ```
 */
class DropAreaComponent {
    constructor(cd, filesService, translate, bytes) {
        this.cd = cd;
        this.filesService = filesService;
        this.translate = translate;
        this.bytes = bytes;
        this.title = gettext('Upload file');
        this.message = gettext('Drop file here');
        this.icon = 'plus-square';
        this.loadingMessage = gettext('Uploading…');
        this.forceHideList = false;
        /** Affects displaying both the drop zone and the list of dropped files. */
        this.alwaysShow = false;
        this.clickToOpen = true;
        this.loading = false;
        /**
         * Current progress of the upload as a percentage. If not given a spinner will be displayed.
         */
        this.progress = -1; // -1 = spinner
        this.dropped = new EventEmitter();
        this.maxAllowedFiles = Infinity;
        this.isOver = false;
        this.errors = false;
        this.onChange = _ => undefined;
        this.onTouched = () => undefined;
    }
    onkeyup(event) {
        if (event.key === 'Enter') {
            this.picker.nativeElement.click();
        }
    }
    ngOnInit() {
        this.acceptedExts = this.filesService.extractFileExtensions(this.accept).map(t => `.${t}`);
        this.alwaysShow = this.alwaysShow || this.area.nativeElement.children.length === 0;
        if (this.files && this.isFilesAnObjectOrArray() && this.files.length > 0) {
            this.onFilesSelected(this.files);
        }
    }
    /**
     * Toggles the style of the drop zone element when a file is dragged over the component.
     */
    toggle($event) {
        this.zone.nativeElement.style.height = this.area.nativeElement.offsetHeight + 'px';
        this.onOver();
    }
    /**
     * Shows computer browser with files to drop into drop-area zone.
     */
    showPicker($event) {
        this.preventDefault($event);
        this.picker.nativeElement.value = '';
        this.picker.nativeElement.click();
    }
    /**
     * Triggered when file is on over drop area, but not dropped.
     */
    onOver() {
        if (!this.isOver) {
            this.isOver = true;
            document.addEventListener('dragover', this.preventDefault);
            document.addEventListener('drop', this.preventDefault);
        }
    }
    /**
     * Triggered when file is dropped.
     */
    onPick($event) {
        this.errors = false;
        this.preventDefault($event);
        this.onFilesSelected($event.target.files);
    }
    /**
     * Handle file when it is dropped into drop-area.
     */
    onDrop($event) {
        this.preventDefault($event);
        this.onFilesSelected($event.dataTransfer.files);
        this.stopDragging();
    }
    /**
     * Checks condition what should be displayed: drop-area zone or list of dropped files.
     */
    shouldShowFilesList() {
        return (this.isFilesAnObjectOrArray() &&
            !this.forceHideList &&
            this.alwaysShow &&
            !this.isFilesArrayEmpty() &&
            !this.hasEmptyFiles() &&
            !this.isTooManyFiles());
    }
    /**
     * Triggered when file is picked over web application.
     */
    stopDragging() {
        document.removeEventListener('dragover', this.preventDefault);
        document.removeEventListener('drop', this.preventDefault);
        this.isOver = false;
    }
    /**
     * Delete files already dropped files.
     */
    onDelete() {
        delete this.files;
        delete this.filesNameString;
        this.clearErrors();
        this.dropped.emit(null);
        this.onChange(null);
        this.cd.markForCheck();
    }
    writeValue(value) {
        this.files = value;
        if (!value) {
            this.onDelete();
        }
        this.cd.detectChanges();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    onFilesSelected(files) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const hasValidNameLength = this.filesService.checkMaxLength(files);
            if (!hasValidNameLength) {
                this.onFileInvalidNameLength();
                return;
            }
            const haveValidTypes = this.filesService.haveValidExtensions(files, this.accept);
            if (!haveValidTypes) {
                this.onFileInvalidType();
                return;
            }
            const haveValidSizes = yield this.filesService.haveValidSizes(files);
            if (!haveValidSizes) {
                yield this.onFileInvalidSize();
                return;
            }
            this.files = files;
            this.filesNameString = this.getFilesNamesAsString(files);
            this.errors = false;
            if (this.isTooManyFiles()) {
                this.errors = true;
                (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ tooManyFiles: true });
                this.errorMessage = gettext('Too many files selected.');
                return;
            }
            if (this.hasEmptyFiles()) {
                this.errors = true;
                (_b = this.formControl) === null || _b === void 0 ? void 0 : _b.setErrors({ emptyFiles: true });
                this.errorMessage = gettext('File must not be empty, select another one.');
                return;
            }
            const droppedFiles = this.compose(files);
            this.dropped.emit(droppedFiles);
            this.onChange(droppedFiles);
            this.cd.markForCheck();
        });
    }
    onFileInvalidNameLength() {
        var _a;
        this.errors = true;
        (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidNameLength: true });
        this.errorMessage = gettext('The filename is too long.');
    }
    onFileInvalidType() {
        var _a;
        this.errors = true;
        (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidType: true });
        this.errorMessage = gettext('The selected file is not supported.');
    }
    onFileInvalidSize() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const msg = gettext('The selected file is too large. The size limit is {{ limit }}.');
            const limit = this.bytes.transform(yield this.filesService.loadBytesSizeLimit());
            this.errors = true;
            (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors({ invalidSize: true });
            this.errorMessage = this.translate.instant(msg, { limit });
        });
    }
    getFilesNamesAsString(files) {
        return map$1(files, ({ name }) => name).join(', ');
    }
    isFilesArrayEmpty() {
        return get(this, 'files.length', 0) === 0;
    }
    isTooManyFiles() {
        return get(this, 'files.length', 0) > this.maxAllowedFiles;
    }
    isFilesAnObjectOrArray() {
        return typeof this.files === 'object';
    }
    hasEmptyFiles() {
        let result = true;
        if (!this.isFilesArrayEmpty()) {
            result = this.isAnyFileEmpty();
        }
        return result;
    }
    isAnyFileEmpty() {
        return some(Array.from(this.files), ['size', 0]);
    }
    clearErrors() {
        var _a;
        delete this.errorMessage;
        this.errors = false;
        (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.setErrors(null);
    }
    preventDefault($event) {
        if ($event) {
            $event.preventDefault();
        }
    }
    compose(files) {
        return Array.from(files).map(file => ({
            file,
            readAsJson: () => __awaiter(this, void 0, void 0, function* () { return JSON.parse(yield this.read(file, ReadAsType.TEXT)); }),
            readAsText: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.TEXT); }),
            readAsArrayBuffer: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.ARRAY_BUFFER); }),
            readAsBinaryString: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.BINARY_STRING); }),
            readAsDataURL: () => __awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.DATA_URL); })
        }));
    }
    read(file, type) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                switch (type) {
                    case ReadAsType.TEXT: {
                        reader.readAsText(file);
                        break;
                    }
                    case ReadAsType.ARRAY_BUFFER: {
                        reader.readAsArrayBuffer(file);
                        break;
                    }
                    case ReadAsType.BINARY_STRING: {
                        reader.readAsBinaryString(file);
                        break;
                    }
                    case ReadAsType.DATA_URL: {
                        reader.readAsDataURL(file);
                        break;
                    }
                }
                reader.onload = () => this.onLoad(reader, resolve, reject);
            });
        });
    }
    onLoad(reader, resolve, reject) {
        if (reader.readyState !== 2) {
            return;
        }
        if (reader.error) {
            reject(reader.error);
        }
        resolve(reader.result);
    }
}
DropAreaComponent.ɵfac = function DropAreaComponent_Factory(t) { return new (t || DropAreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(FilesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService), ɵngcc0.ɵɵdirectiveInject(BytesPipe)); };
DropAreaComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DropAreaComponent, selectors: [["c8y-drop-area"]], viewQuery: function DropAreaComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c71, 7);
        ɵngcc0.ɵɵviewQuery(_c72, 5);
        ɵngcc0.ɵɵviewQuery(_c73, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.area = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.zone = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.picker = _t.first);
    } }, hostBindings: function DropAreaComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function DropAreaComponent_keyup_HostBindingHandler($event) { return ctx.onkeyup($event); });
    } }, inputs: { title: "title", message: "message", icon: "icon", loadingMessage: "loadingMessage", forceHideList: "forceHideList", alwaysShow: "alwaysShow", clickToOpen: "clickToOpen", loading: "loading", progress: "progress", maxAllowedFiles: "maxAllowedFiles", files: "files", formControl: "formControl", accept: "accept" }, outputs: { dropped: "dropped" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: DropAreaComponent, multi: true }])], ngContentSelectors: _c1, decls: 6, vars: 4, consts: [["class", "drop-zone", "tabindex", "0", 3, "ngClass", "pointerEvents", "display", "dragleave", "drop", "dragover", "click", 4, "ngIf"], ["class", "drop-zone", "tabindex", "0", 3, "display", 4, "ngIf"], ["type", "file", "style", "opacity: 0; filter: alpha(opacity = 0); height: 0px", 3, "accept", "multiple", "change", "click", "blur", 4, "ngIf"], [3, "hidden", "dragover"], ["area", ""], ["tabindex", "0", 1, "drop-zone", 3, "ngClass", "dragleave", "drop", "dragover", "click"], ["zone", ""], [1, "file-placeholder", 3, "ngClass"], ["class", "d-flex p-4 flex-center", 4, "ngIf"], ["class", "hint-placeholder pointer", 4, "ngIf"], [1, "d-flex", "p-4", "flex-center"], ["class", "progress progress-striped active m-0", "style", "min-width: 50%", 4, "ngIf"], ["class", "spinner-snake", 4, "ngIf"], [1, "flex-item-middle", "m-r-8"], [1, "progress", "progress-striped", "active", "m-0", 2, "min-width", "50%"], ["role", "progressbar", "aria-valuenow", "0", "aria-valuemin", "0", "aria-valuemax", "100", 1, "progress-bar"], [1, "spinner-snake"], [1, "hint-placeholder", "pointer"], [4, "ngIf"], ["class", "has-errors", 4, "ngIf"], ["translate", "", 4, "ngIf"], ["translate", ""], [1, "has-errors"], [1, "form-control-feedback-message"], ["tabindex", "0", 1, "drop-zone"], ["class", "p-absolute p-4 fit-w fit-h d-flex d-col j-c-center a-i-center", 4, "ngIf"], ["class", "file-placeholder p-4", 4, "ngIf"], [1, "p-absolute", "p-4", "fit-w", "fit-h", "d-flex", "d-col", "j-c-center", "a-i-center"], [1, "m-b-8"], ["class", "progress progress-striped active m-0", "style", "min-width: 80%", 4, "ngIf"], ["class", "spinner p-relative m-0", 4, "ngIf"], [1, "progress", "progress-striped", "active", "m-0", 2, "min-width", "80%"], [1, "spinner", "p-relative", "m-0"], [1, "rect1"], [1, "rect2"], [1, "rect3"], [1, "rect4"], [1, "rect5"], [1, "file-placeholder", "p-4"], [1, "flex-row", "p-4"], ["c8yIcon", "file-o", 1, "m-r-8"], [1, "text-truncate", 3, "title"], [1, "btn", "btn-clean", "showOnHover", "flex-item-right", 3, "title"], ["c8yIcon", "minus-circle", 1, "text-danger", 3, "click"], ["type", "file", 2, "opacity", "0", "filter", "alpha(opacity = 0)", "height", "0px", 3, "accept", "multiple", "change", "click", "blur"], ["picker", ""]], template: function DropAreaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, DropAreaComponent_div_0_Template, 5, 12, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DropAreaComponent_div_1_Template, 3, 4, "div", 1);
        ɵngcc0.ɵɵtemplate(2, DropAreaComponent_input_2_Template, 2, 2, "input", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3, 4);
        ɵngcc0.ɵɵlistener("dragover", function DropAreaComponent_Template_div_dragover_3_listener($event) { return ctx.toggle($event); });
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.shouldShowFilesList());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.shouldShowFilesList());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.clickToOpen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", ctx.isOver || ctx.loading);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgClass, C8yTranslateDirective, IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
DropAreaComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: FilesService },
    { type: TranslateService$1 },
    { type: BytesPipe }
];
DropAreaComponent.propDecorators = {
    formControl: [{ type: Input }],
    title: [{ type: Input }],
    message: [{ type: Input }],
    icon: [{ type: Input }],
    loadingMessage: [{ type: Input }],
    forceHideList: [{ type: Input }],
    alwaysShow: [{ type: Input }],
    clickToOpen: [{ type: Input }],
    loading: [{ type: Input }],
    progress: [{ type: Input }],
    dropped: [{ type: Output }],
    maxAllowedFiles: [{ type: Input }],
    files: [{ type: Input }],
    accept: [{ type: Input }],
    area: [{ type: ViewChild, args: ['area', { static: true },] }],
    zone: [{ type: ViewChild, args: ['zone', { static: false },] }],
    picker: [{ type: ViewChild, args: ['picker', { static: false },] }],
    onkeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropAreaComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-drop-area',
                template: "<div\n  class=\"drop-zone\"\n  *ngIf=\"!shouldShowFilesList()\"\n  [ngClass]=\"{ 'has-errors': errors }\"\n  [style.pointerEvents]=\"loading ? 'none' : 'auto'\"\n  #zone\n  (dragleave)=\"stopDragging()\"\n  (drop)=\"onDrop($event)\"\n  (dragover)=\"onOver()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  (click)=\"showPicker($event)\"\n  tabindex=\"0\"\n>\n  <div class=\"file-placeholder\" [ngClass]=\"{ 'drag-over': isOver }\">\n    <div *ngIf=\"loading\" class=\"d-flex p-4 flex-center\">\n      <div\n        class=\"progress progress-striped active m-0\"\n        *ngIf=\"progress !== -1\"\n        style=\"min-width: 50%\"\n      >\n        <div\n          class=\"progress-bar\"\n          role=\"progressbar\"\n          aria-valuenow=\"0\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          [style.width]=\"progress + '%'\"\n        ></div>\n      </div>\n      <div class=\"spinner-snake\" *ngIf=\"progress === -1\"></div>\n      <p class=\"flex-item-middle m-r-8\">\n        {{ loadingMessage | translate }}\n      </p>\n    </div>\n\n    <div *ngIf=\"!loading\" class=\"hint-placeholder pointer\">\n      <i class=\"dlt-c8y-icon-{{ icon }}\"></i>\n      <p *ngIf=\"!errors\">\n        <b>{{ message | translate }}</b>\n        <br />\n        <span *ngIf=\"alwaysShow && clickToOpen\" translate\n          >or click to browse your file system.</span\n        >\n      </p>\n      <div *ngIf=\"errors\" class=\"has-errors\">\n        <p class=\"form-control-feedback-message\">\n          {{ errorMessage | translate }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"drop-zone\"\n  *ngIf=\"shouldShowFilesList()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  tabindex=\"0\"\n>\n  <div *ngIf=\"loading\" class=\"p-absolute p-4 fit-w fit-h d-flex d-col j-c-center a-i-center\">\n    <p class=\"m-b-8\">\n      <strong>\n        {{ loadingMessage | translate }}\n      </strong>\n    </p>\n    <div\n      class=\"progress progress-striped active m-0\"\n      *ngIf=\"progress !== -1\"\n      style=\"min-width: 80%\"\n    >\n      <div\n        class=\"progress-bar\"\n        role=\"progressbar\"\n        aria-valuenow=\"0\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </div>\n    <div class=\"spinner p-relative m-0\" *ngIf=\"progress === -1\">\n      <div class=\"rect1\"></div>\n      <div class=\"rect2\"></div>\n      <div class=\"rect3\"></div>\n      <div class=\"rect4\"></div>\n      <div class=\"rect5\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!loading\" class=\"file-placeholder p-4\">\n    <div class=\"flex-row p-4\">\n      <i c8yIcon=\"file-o\" class=\"m-r-8\"></i>\n      <span title=\"{{ filesNameString }}\" class=\"text-truncate\">\n        {{ filesNameString }}\n      </span>\n      <button title=\"{{ 'Remove' | translate }}\" class=\"btn btn-clean showOnHover flex-item-right\">\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n\n<input\n  #picker\n  *ngIf=\"clickToOpen\"\n  (change)=\"onPick($event)\"\n  (click)=\"picker.focus()\"\n  (blur)=\"onTouched()\"\n  [accept]=\"acceptedExts\"\n  [multiple]=\"maxAllowedFiles > 1\"\n  type=\"file\"\n  style=\"opacity: 0; filter: alpha(opacity = 0); height: 0px\"\n/>\n<div #area [hidden]=\"isOver || loading\" (dragover)=\"toggle($event)\">\n  <ng-content></ng-content>\n</div>\n",
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: DropAreaComponent, multi: true }]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: FilesService }, { type: ɵngcc4.TranslateService }, { type: BytesPipe }]; }, { title: [{
            type: Input
        }], message: [{
            type: Input
        }], icon: [{
            type: Input
        }], loadingMessage: [{
            type: Input
        }], forceHideList: [{
            type: Input
        }], alwaysShow: [{
            type: Input
        }], clickToOpen: [{
            type: Input
        }], loading: [{
            type: Input
        }], progress: [{
            type: Input
        }], dropped: [{
            type: Output
        }], maxAllowedFiles: [{
            type: Input
        }], onkeyup: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], files: [{
            type: Input
        }], formControl: [{
            type: Input
        }], accept: [{
            type: Input
        }], area: [{
            type: ViewChild,
            args: ['area', { static: true }]
        }], zone: [{
            type: ViewChild,
            args: ['zone', { static: false }]
        }], picker: [{
            type: ViewChild,
            args: ['picker', { static: false }]
        }] }); })();
var ReadAsType;
(function (ReadAsType) {
    ReadAsType[ReadAsType["TEXT"] = 0] = "TEXT";
    ReadAsType[ReadAsType["DATA_URL"] = 1] = "DATA_URL";
    ReadAsType[ReadAsType["ARRAY_BUFFER"] = 2] = "ARRAY_BUFFER";
    ReadAsType[ReadAsType["BINARY_STRING"] = 3] = "BINARY_STRING";
})(ReadAsType || (ReadAsType = {}));

/**
 * The angular module definition for a drop-area.
 * @exports DropAreaComponent
 */
class DropAreaModule {
}
DropAreaModule.ɵfac = function DropAreaModule_Factory(t) { return new (t || DropAreaModule)(); };
DropAreaModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DropAreaModule });
DropAreaModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropAreaModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [DropAreaComponent],
                declarations: [DropAreaComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropAreaModule, { declarations: [DropAreaComponent], imports: [CommonModule], exports: [DropAreaComponent] }); })();

/**
 * User can upload a binary directly or use an URL.
 *
 * ## Usage Example:
 *
 * ```html
 * <div>
 * <c8y-file-picker [maxAllowedFiles]="1" (onFilesPicked)="onFile($event)">
 * </c8y-file-picker>
 * </div>
 * ```
 */
class FilePickerComponent {
    constructor() {
        this.onFilesPicked = new EventEmitter();
        this.maxAllowedFiles = Infinity;
        this.uploadChoice = 'uploadBinary';
        this.config = { maxlength: 2048 };
    }
    /**
     * @ignore
     */
    ngOnInit() {
        if (this.fileBinary) {
            this.droppedFiles = [this.fileBinary];
        }
    }
    /**
     * Triggered by dropped file in component and pass it into drop-area component.
     */
    onFileDropped(droppedFiles) {
        this.onFilesPicked.emit({
            droppedFiles
        });
    }
    /**
     * Triggered when user changes upload choice, from upload url to upload binary.
     */
    clearInputFromUrl() {
        delete this.fileUrl;
        this.fileToSave = {
            url: undefined
        };
        this.onFilesPicked.emit(this.fileToSave);
    }
    /**
     * Triggered when user changes upload choice, to avoid cumulation of droppedFiles.
     */
    clearSelectedFiles() {
        this.dropArea.onDelete();
        this.fileToSave = {
            droppedFiles: null
        };
        this.onFilesPicked.emit(this.fileToSave);
    }
    /**
     * Triggered when user puts binary's url to upload.
     */
    onFileUrlChange(urlStr) {
        this.fileToSave = {
            url: urlStr
        };
        this.onFilesPicked.emit(this.fileToSave);
    }
    /**
     * Checks if there is popover to display.
     */
    isPopoverUsed() {
        return !isEmpty(this.fileUrlPopover);
    }
}
FilePickerComponent.ɵfac = function FilePickerComponent_Factory(t) { return new (t || FilePickerComponent)(); };
FilePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FilePickerComponent, selectors: [["c8y-file-picker"]], viewQuery: function FilePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DropAreaComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropArea = _t.first);
    } }, inputs: { maxAllowedFiles: "maxAllowedFiles", uploadChoice: "uploadChoice", config: "config", fileUrl: "fileUrl", fileBinary: "fileBinary", fileUrlPopover: "fileUrlPopover" }, outputs: { onFilesPicked: "onFilesPicked" }, decls: 30, vars: 27, consts: [[1, "form-group"], [1, "c8y-radio", "radio-inline", 3, "title"], ["type", "radio", "value", "uploadBinary", "name", "uploadChoice", 3, "ngModel", "ngModelChange", "click"], ["radio", ""], [1, "c8y-radio", "radio-inline", "m-l-8", 3, "title"], ["type", "radio", "value", "uploadUrl", "name", "uploadChoice", 3, "ngModel", "ngModelChange", "click"], ["class", "btn btn-clean text-primary m-l-4", "type", "button", "triggers", "focus", "container", "body", "placement", "top", 3, "popover", 4, "ngIf"], [3, "hidden"], [1, "m-0"], [1, "drop-area-sm", 3, "title", "maxAllowedFiles", "files", "dropped"], [1, "m-b-4", "p-b-8"], [1, "input-group"], [1, "input-group-addon"], ["c8yIcon", "globe"], ["type", "text", "name", "fileUrl", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "maxlength", "ngModelChange"], ["type", "button", "triggers", "focus", "container", "body", "placement", "top", 1, "btn", "btn-clean", "text-primary", "m-l-4", 3, "popover"], [3, "c8yIcon"]], template: function FilePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "label", 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementStart(3, "input", 2, 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function FilePickerComponent_Template_input_ngModelChange_3_listener($event) { return ctx.uploadChoice = $event; })("click", function FilePickerComponent_Template_input_click_3_listener() { return ctx.clearInputFromUrl(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "span");
        ɵngcc0.ɵɵelementStart(6, "span");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "label", 4);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementStart(11, "input", 5, 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function FilePickerComponent_Template_input_ngModelChange_11_listener($event) { return ctx.uploadChoice = $event; })("click", function FilePickerComponent_Template_input_click_11_listener() { return ctx.clearSelectedFiles(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(13, "span");
        ɵngcc0.ɵɵelementStart(14, "span");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, FilePickerComponent_button_17_Template, 3, 4, "button", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 7);
        ɵngcc0.ɵɵelementStart(19, "c8y-form-group", 8);
        ɵngcc0.ɵɵelementStart(20, "c8y-drop-area", 9);
        ɵngcc0.ɵɵlistener("dropped", function FilePickerComponent_Template_c8y_drop_area_dropped_20_listener($event) { return ctx.onFileDropped($event); });
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 7);
        ɵngcc0.ɵɵelementStart(23, "c8y-form-group", 8);
        ɵngcc0.ɵɵelementStart(24, "div", 10);
        ɵngcc0.ɵɵelementStart(25, "div", 11);
        ɵngcc0.ɵɵelementStart(26, "span", 12);
        ɵngcc0.ɵɵelement(27, "i", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "input", 14);
        ɵngcc0.ɵɵlistener("ngModelChange", function FilePickerComponent_Template_input_ngModelChange_28_listener($event) { return ctx.fileUrl = $event; })("ngModelChange", function FilePickerComponent_Template_input_ngModelChange_28_listener($event) { return ctx.onFileUrlChange($event); });
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 15, "Upload a binary"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.uploadChoice);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 17, "Upload a binary"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 19, "Provide a file path"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.uploadChoice);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 21, "Provide a file path"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isPopoverUsed());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", ctx.uploadChoice !== "uploadBinary");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(21, 23, "Drop file or click to browse"))("maxAllowedFiles", ctx.maxAllowedFiles)("files", ctx.droppedFiles);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hidden", ctx.uploadChoice !== "uploadUrl");
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(29, 25, "e.g."), " http://example.com/binary.zip");
        ɵngcc0.ɵɵpropertyInterpolate("maxlength", ctx.config.maxlength);
        ɵngcc0.ɵɵproperty("ngModel", ctx.fileUrl);
    } }, directives: [ɵngcc14.RadioControlValueAccessor, ɵngcc14.DefaultValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc7.NgIf, FormGroupComponent, DropAreaComponent, IconDirective, RequiredInputPlaceholderDirective, ɵngcc14.RequiredValidator, ɵngcc14.MaxLengthValidator, ɵngcc12.PopoverDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
FilePickerComponent.propDecorators = {
    dropArea: [{ type: ViewChild, args: [DropAreaComponent, { static: true },] }],
    onFilesPicked: [{ type: Output }],
    maxAllowedFiles: [{ type: Input }],
    uploadChoice: [{ type: Input }],
    fileUrl: [{ type: Input }],
    fileBinary: [{ type: Input }],
    config: [{ type: Input }],
    fileUrlPopover: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilePickerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-file-picker',
                template: "<div class=\"form-group\">\n  <label title=\"{{ 'Upload a binary' | translate }}\" class=\"c8y-radio radio-inline\">\n    <input\n      #radio\n      type=\"radio\"\n      value=\"uploadBinary\"\n      name=\"uploadChoice\"\n      [(ngModel)]=\"uploadChoice\"\n      (click)=\"clearInputFromUrl()\"\n    />\n    <span></span>\n    <span>{{ 'Upload a binary' | translate }}</span>\n  </label>\n  <label title=\"{{ 'Provide a file path' | translate }}\" class=\"c8y-radio radio-inline m-l-8\">\n    <input\n      #radio\n      type=\"radio\"\n      value=\"uploadUrl\"\n      name=\"uploadChoice\"\n      [(ngModel)]=\"uploadChoice\"\n      (click)=\"clearSelectedFiles()\"\n    />\n    <span></span>\n    <span>\n      {{ 'Provide a file path' | translate }}\n    </span>\n    <button\n      *ngIf=\"isPopoverUsed()\"\n      class=\"btn btn-clean text-primary m-l-4\"\n      type=\"button\"\n      popover=\"{{ fileUrlPopover | translate }}\"\n      triggers=\"focus\"\n      container=\"body\"\n      placement=\"top\"\n    >\n      <i [c8yIcon]=\"'question-circle-o'\"></i>\n    </button>\n  </label>\n</div>\n\n<div [hidden]=\"uploadChoice !== 'uploadBinary'\">\n  <c8y-form-group class=\"m-0\">\n    <c8y-drop-area\n      class=\"drop-area-sm\"\n      (dropped)=\"onFileDropped($event)\"\n      [title]=\"'Drop file or click to browse' | translate\"\n      [maxAllowedFiles]=\"maxAllowedFiles\"\n      [files]=\"droppedFiles\"\n    >\n    </c8y-drop-area>\n  </c8y-form-group>\n</div>\n\n<div [hidden]=\"uploadChoice !== 'uploadUrl'\">\n  <c8y-form-group class=\"m-0\">\n    <div class=\"m-b-4 p-b-8\">\n      <div class=\"input-group\">\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"globe\"></i>\n        </span>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          name=\"fileUrl\"\n          [(ngModel)]=\"fileUrl\"\n          (ngModelChange)=\"onFileUrlChange($event)\"\n          placeholder=\"{{ 'e.g.' | translate }} http://example.com/binary.zip\"\n          maxlength=\"{{ config.maxlength }}\"\n          required\n        />\n      </div>\n    </div>\n  </c8y-form-group>\n</div>\n"
            }]
    }], function () { return []; }, { onFilesPicked: [{
            type: Output
        }], maxAllowedFiles: [{
            type: Input
        }], uploadChoice: [{
            type: Input
        }], config: [{
            type: Input
        }], dropArea: [{
            type: ViewChild,
            args: [DropAreaComponent, { static: true }]
        }], fileUrl: [{
            type: Input
        }], fileBinary: [{
            type: Input
        }], fileUrlPopover: [{
            type: Input
        }] }); })();

/**
 * The angular module definition for a drop-area.
 * @exports FilePickerComponent
 */
class FilePickerModule {
}
FilePickerModule.ɵfac = function FilePickerModule_Factory(t) { return new (t || FilePickerModule)(); };
FilePickerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FilePickerModule });
FilePickerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule,
            CommonModule$1,
            DropAreaModule,
            FormsModule$1,
            CommonModule,
            PopoverModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilePickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    CommonModule$1,
                    DropAreaModule,
                    FormsModule$1,
                    CommonModule,
                    PopoverModule
                ],
                exports: [FilePickerComponent],
                declarations: [FilePickerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FilePickerModule, { declarations: function () { return [FilePickerComponent]; }, imports: function () { return [FormsModule, CommonModule$1, DropAreaModule, FormsModule$1, CommonModule, PopoverModule]; }, exports: function () { return [FilePickerComponent]; } }); })();

class DatePickerComponent {
    constructor() {
        this.onDateSelected = new EventEmitter();
    }
    ngOnInit() {
        this.fgDatePicker = new FormGroup({
            dateFrom: new FormControl(),
            dateTo: new FormControl()
        });
    }
    filter() {
        this.onDateSelected.emit(this.fgDatePicker.value);
        this.dateFrom = this.fgDatePicker.get('dateFrom').value;
        this.dateTo = this.fgDatePicker.get('dateTo').value;
    }
    clearFilter() {
        this.fgDatePicker.setValue({
            dateFrom: null,
            dateTo: null
        });
        this.onDateSelected.emit(null);
        this.dateFrom = null;
        this.dateTo = null;
    }
}
DatePickerComponent.ɵfac = function DatePickerComponent_Factory(t) { return new (t || DatePickerComponent)(); };
DatePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DatePickerComponent, selectors: [["c8y-date-picker"]], outputs: { onDateSelected: "onDateSelected" }, decls: 10, vars: 7, consts: [["dropdown", "", "placement", "bottom left", 1, "c8y-child-assets-selector", 3, "autoClose"], ["datefilter", "bs-dropdown"], ["id", "date-range", "dropdownToggle", "", "type", "button", "aria-controls", "dropdown-date-range", 1, "btn", "dropdown-toggle", "d-flex", "a-i-center", "c8y-dropdown", 3, "title"], ["c8yIcon", "calendar-o", 1, "m-r-4", "text-primary"], [1, "text-truncate"], [4, "ngIf"], ["id", "dropdown-date-range", "class", "dropdown-menu", "role", "menu", "aria-labelledby", "date-range", 4, "dropdownMenu"], [1, "text-label-small"], ["id", "dropdown-date-range", "role", "menu", "aria-labelledby", "date-range", 1, "dropdown-menu"], [1, "dropdown-form", 3, "formGroup"], ["translate", "", 1, "text-medium", "m-b-4"], [1, "datepicker", "d-block", "m-b-16", 2, "max-height", "32px"], ["formControlName", "dateFrom", "bsDatepicker", "", 1, "form-control", "fit-w", "text-left", 3, "placeholder", "maxDate", "bsConfig", "bsValueChange"], [1, "datepicker", "m-l-0", "d-block", 2, "max-height", "32px"], ["name", "dateTo", "formControlName", "dateTo", "bsDatepicker", "", 1, "form-control", "fit-w", "text-left", 3, "placeholder", "minDate", "bsConfig", "bsValueChange"], [1, "p-t-24"], ["type", "button", 1, "btn", "btn-default", "btn-sm", 3, "title", "click"], ["type", "submit", 1, "btn", "btn-primary", "btn-sm", 3, "disabled", "title", "click"]], template: function DatePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelement(4, "i", 3);
        ɵngcc0.ɵɵelementStart(5, "span", 4);
        ɵngcc0.ɵɵtemplate(6, DatePickerComponent_span_6_Template, 6, 6, "span", 5);
        ɵngcc0.ɵɵtemplate(7, DatePickerComponent_span_7_Template, 6, 6, "span", 5);
        ɵngcc0.ɵɵtemplate(8, DatePickerComponent_span_8_Template, 3, 3, "span", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, DatePickerComponent_div_9_Template, 21, 26, "div", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("autoClose", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 5, "Date filter"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dateFrom);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dateTo);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.dateFrom && !ctx.dateTo);
    } }, directives: [ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, IconDirective, ɵngcc7.NgIf, ɵngcc9.BsDropdownMenuDirective, ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.FormGroupDirective, C8yTranslateDirective, FormGroupComponent, ɵngcc14.DefaultValueAccessor, RequiredInputPlaceholderDirective, ɵngcc6.BsDatepickerInputDirective, ɵngcc14.NgControlStatus, ɵngcc14.FormControlName, ɵngcc6.BsDatepickerDirective], pipes: [C8yTranslatePipe, ɵngcc7.DatePipe], encapsulation: 2 });
DatePickerComponent.propDecorators = {
    onDateSelected: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-date-picker',
                template: "<div\n  dropdown\n  class=\"c8y-child-assets-selector\"\n  #datefilter=\"bs-dropdown\"\n  placement=\"bottom left\"\n  [autoClose]=\"false\"\n>\n  <button\n    id=\"date-range\"\n    dropdownToggle\n    title=\"{{ 'Date filter' | translate }}\"\n    type=\"button\"\n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    aria-controls=\"dropdown-date-range\"\n  >\n    <i c8yIcon=\"calendar-o\" class=\"m-r-4 text-primary\"></i>\n    <span class=\"text-truncate\">\n      <span *ngIf=\"dateFrom\">\n        <span class=\"text-label-small\">{{ 'From`date`' | translate }}</span>\n        {{ dateFrom | date }}\n      </span>\n      <span *ngIf=\"dateTo\">\n        <span class=\"text-label-small\">{{ 'To`date`' | translate }}</span>\n        {{ dateTo | date }}\n      </span>\n      <span *ngIf=\"!dateFrom && !dateTo\">\n        {{ 'Filter by date' | translate }}\n      </span>\n    </span>\n  </button>\n  <div\n    id=\"dropdown-date-range\"\n    *dropdownMenu\n    class=\"dropdown-menu\"\n    role=\"menu\"\n    aria-labelledby=\"date-range\"\n  >\n    <form [formGroup]=\"fgDatePicker\" class=\"dropdown-form\">\n      <span class=\"text-medium m-b-4\" translate>Date from</span>\n      <c8y-form-group class=\"datepicker d-block m-b-16\" style=\"max-height: 32px\">\n        <input\n          formControlName=\"dateFrom\"\n          class=\"form-control fit-w text-left\"\n          placeholder=\"{{ 'Date from' | translate }}\"\n          bsDatepicker\n          [maxDate]=\"dateTo\"\n          (bsValueChange)=\"dateFrom = $event\"\n          [bsConfig]=\"{ customTodayClass: 'today', returnFocusToInput: true }\"\n        />\n      </c8y-form-group>\n      <span class=\"text-medium m-b-4\" translate>Date to</span>\n      <c8y-form-group class=\"datepicker m-l-0 d-block\" style=\"max-height: 32px\">\n        <input\n          name=\"dateTo\"\n          formControlName=\"dateTo\"\n          class=\"form-control fit-w text-left\"\n          placeholder=\"{{ 'Date to' | translate }}\"\n          bsDatepicker\n          [minDate]=\"dateFrom\"\n          (bsValueChange)=\"dateTo = $event\"\n          [bsConfig]=\"{ customTodayClass: 'today', returnFocusToInput: true }\"\n        />\n      </c8y-form-group>\n      <div class=\"p-t-24\">\n        <button\n          title=\"{{ 'Clear selection' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default btn-sm\"\n          (click)=\"clearFilter(); datefilter.isOpen = !datefilter.isOpen\"\n        >\n          {{ 'Clear`selection`' | translate }}\n        </button>\n        <button\n          [disabled]=\"!fgDatePicker.get('dateFrom').value && !fgDatePicker.get('dateTo').value\"\n          title=\"{{ 'Apply selection' | translate }}\"\n          type=\"submit\"\n          class=\"btn btn-primary btn-sm\"\n          (click)=\"filter(); datefilter.isOpen = !datefilter.isOpen\"\n        >\n          {{ 'Apply`selection`' | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { onDateSelected: [{
            type: Output
        }] }); })();

// @dynamic
class C8yValidators {
    static minMaxValidator() {
        return (control) => {
            const min = control.get(`min`);
            const max = control.get(`max`);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            // remove previous errors
            this.removeErrors(min, [DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]);
            this.removeErrors(max, [DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]);
            if (!minDefined || !maxDefined) {
                return null;
            }
            // sets errors
            if (min.value >= max.value) {
                const minError = { [DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]: true };
                const maxError = { [DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]: true };
                const errors = Object.assign({}, minError, maxError);
                min.setErrors(Object.assign(minError, min.errors || {}));
                max.setErrors(Object.assign(maxError, max.errors || {}));
                return errors;
            }
            return null;
        };
    }
    static requireBothMinAndMax() {
        const errorAttribute = DatapointLibraryValidationErrors.SHOULD_BE_DEFINED;
        return (control) => {
            const min = control.get(`min`);
            const max = control.get(`max`);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            const errors = {};
            if (minDefined && !maxDefined && max) {
                // sets error
                const error = { [errorAttribute]: true };
                max.setErrors(Object.assign({}, max.errors || {}, error));
                Object.assign(errors, error);
            }
            else {
                // remove previous error
                this.removeErrors(max, [errorAttribute]);
            }
            if (maxDefined && !minDefined && min) {
                // sets error
                const error = { [errorAttribute]: true };
                min.setErrors(Object.assign({}, min.errors || {}, error));
                Object.assign(errors, error);
            }
            else {
                // remove previous error
                this.removeErrors(min, [errorAttribute]);
            }
            return Object.keys(errors).length ? errors : null;
        };
    }
    static withinScale(field) {
        return (control) => {
            if (!field) {
                return null;
            }
            const min = control.get(`range.min`);
            const max = control.get(`range.max`);
            const fieldControl = control.get(field);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            const fieldDefined = fieldControl && fieldControl.value !== undefined && fieldControl.value !== null;
            // remove previous errors
            this.removeErrors(fieldControl, [
                DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX,
                DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN
            ]);
            if (!minDefined || !maxDefined || !fieldDefined) {
                return null;
            }
            const errors = {};
            // sets errors
            if (fieldControl.value < min.value) {
                const error = { [DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN]: true };
                fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                Object.assign(errors, error);
            }
            if (fieldControl.value > max.value) {
                const error = { [DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX]: true };
                fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                Object.assign(errors, error);
            }
            return Object.keys(errors).length ? errors : null;
        };
    }
    static maxActiveCount(maxActive, activeAttribute = 'details.__active') {
        return (control) => {
            if (!Number.isInteger(maxActive) || Number.isNaN(maxActive)) {
                return null;
            }
            if (!(control instanceof FormArray)) {
                return null;
            }
            const formArray = control;
            const value = formArray.value;
            if (!Array.isArray(value)) {
                return null;
            }
            const filteredActiveEntries = value.filter(tmp => tmp && !!get(tmp, activeAttribute));
            if (filteredActiveEntries.length <= maxActive) {
                return null;
            }
            return { [DatapointLibraryValidationErrors.MAX_ACTIVE_COUNT]: { maxActive, actualLength: filteredActiveEntries.length } };
        };
    }
    static minActiveCount(minActive, activeAttribute = 'details.__active') {
        return (control) => {
            if (!Number.isInteger(minActive) || Number.isNaN(minActive)) {
                return null;
            }
            if (!(control instanceof FormArray)) {
                return null;
            }
            const formArray = control;
            const value = formArray.value;
            if (!Array.isArray(value)) {
                return null;
            }
            const filteredActiveEntries = value.filter(tmp => tmp && !!get(tmp, activeAttribute));
            if (filteredActiveEntries.length >= minActive) {
                return null;
            }
            return { [DatapointLibraryValidationErrors.MIN_ACTIVE_COUNT]: { minActive, actualLength: filteredActiveEntries.length } };
        };
    }
    static removeErrors(control, errors) {
        if (!control || !control.errors) {
            return false;
        }
        let removedError = false;
        for (const error of errors) {
            if (control.errors[error]) {
                removedError = true;
                delete control.errors[error];
            }
        }
        if (removedError) {
            control.setErrors(Object.keys(control.errors).length ? Object.assign({}, control.errors) : null);
        }
        return removedError;
    }
}

/**
 * The angular module definition for a date picker - it allows you to pick either one date or a range of two.
 * @exports DatePickerComponent
 */
class DatePickerModule {
}
DatePickerModule.ɵfac = function DatePickerModule_Factory(t) { return new (t || DatePickerModule)(); };
DatePickerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DatePickerModule });
DatePickerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule,
            CommonModule$1,
            FormsModule$1,
            ReactiveFormsModule,
            BsDropdownModule.forRoot(),
            BsDatepickerModule.forRoot(),
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    CommonModule$1,
                    FormsModule$1,
                    ReactiveFormsModule,
                    BsDropdownModule.forRoot(),
                    BsDatepickerModule.forRoot(),
                    CommonModule
                ],
                exports: [DatePickerComponent],
                declarations: [DatePickerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DatePickerModule, { declarations: function () { return [DatePickerComponent]; }, imports: function () { return [FormsModule, CommonModule$1,
        FormsModule$1,
        ReactiveFormsModule, ɵngcc9.BsDropdownModule, ɵngcc6.BsDatepickerModule, CommonModule]; }, exports: function () { return [DatePickerComponent]; } }); })();

class ContextRouteComponent {
    constructor(route, contextRouteService) {
        this.route = route;
        this.contextRouteService = contextRouteService;
    }
    ngOnInit() {
        this.contextRouteService.init(this.route);
    }
    ngOnDestroy() {
        this.contextRouteService.destroy();
    }
    refreshTabs() {
        this.contextRouteService.refreshContext();
    }
}
ContextRouteComponent.ɵfac = function ContextRouteComponent_Factory(t) { return new (t || ContextRouteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ContextRouteService)); };
ContextRouteComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ContextRouteComponent, selectors: [["c8y-context-route"]], decls: 1, vars: 0, template: function ContextRouteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "router-outlet");
    } }, directives: [ɵngcc1.RouterOutlet], encapsulation: 2 });
ContextRouteComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: ContextRouteService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextRouteComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-context-route',
                template: "<router-outlet></router-outlet>\n"
            }]
    }], function () { return [{ type: ɵngcc1.ActivatedRoute }, { type: ContextRouteService }]; }, null); })();

class ContextRouteGuard {
    constructor(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    canActivate(route) {
        const id = route.paramMap.get('id');
        const service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap(contextData => (route.data = Object.assign(Object.assign({}, route.data), { contextData }))), map(() => true), catchError(ex => of(false)));
    }
    service(route) {
        const serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    }
    detailCached(service, id) {
        if (id === 'new') {
            return of(undefined);
        }
        const cache = this.getCache(service);
        let cached = cache[id];
        if (!cached) {
            const params = service instanceof InventoryService$1 ? { withChildren: false } : undefined;
            cached = from(service.detail(id, params)).pipe(map(({ data }) => data), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    }
    clearDetailCached(service, id) {
        const cache = this.getCache(service);
        delete cache[id];
    }
    getCache(service) {
        let cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    }
}
ContextRouteGuard.ɵfac = function ContextRouteGuard_Factory(t) { return new (t || ContextRouteGuard)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ContextRouteGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ContextRouteGuard, factory: ContextRouteGuard.ɵfac });
ContextRouteGuard.ctorParameters = () => [
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextRouteGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();

class EmptyComponent {
}
EmptyComponent.ɵfac = function EmptyComponent_Factory(t) { return new (t || EmptyComponent)(); };
EmptyComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: EmptyComponent, selectors: [["empty"]], decls: 0, vars: 0, template: function EmptyComponent_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmptyComponent, [{
        type: Component,
        args: [{ selector: 'empty', template: '' }]
    }], null, null); })();

const routes = [{
        path: 'users/new',
        component: EmptyComponent
    },
    {
        path: 'tenants/new',
        component: EmptyComponent
    }];
// tslint:disable-next-line: forin
for (const key in ViewContext) {
    const context = ViewContext[key];
    routes.push({
        path: context,
        component: ContextRouteComponent,
        canActivate: [ContextRouteGuard],
        data: { context, contextData: {} },
        resolve: {
            tabs: RouterTabsResolver,
        }
    });
}
class RouterModule {
    constructor(routerService) {
        // Declared but never used is intended: to always have a instance of RouterService.
    }
    static providers() {
        return [
            ContextRouteGuard,
            RouterTabsResolver,
            RouterService
        ];
    }
    static forRoot() {
        return {
            ngModule: RouterModule,
            providers: RouterModule.providers()
        };
    }
}
RouterModule.ɵfac = function RouterModule_Factory(t) { return new (t || RouterModule)(ɵngcc0.ɵɵinject(RouterService)); };
RouterModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: RouterModule });
RouterModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            RouterModule$1.forChild(routes),
            HeaderModule,
            CommonModule
        ]] });
RouterModule.ctorParameters = () => [
    { type: RouterService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterModule, [{
        type: NgModule,
        args: [{
                declarations: [ContextRouteComponent, EmptyComponent],
                imports: [
                    RouterModule$1.forChild(routes),
                    HeaderModule,
                    CommonModule
                ],
                entryComponents: [ContextRouteComponent, EmptyComponent]
            }]
    }], function () { return [{ type: RouterService }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RouterModule, { declarations: [ContextRouteComponent, EmptyComponent], imports: [ɵngcc1.RouterModule, HeaderModule, CommonModule] }); })();

class GuideHrefDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.htmlAnchor = this.elementRef.nativeElement;
        if (!this.htmlAnchor.hasAttribute('target')) {
            this.htmlAnchor.setAttribute('target', '_blank');
        }
    }
    set baseHref(href) {
        this.htmlAnchor.href = `${href}/${this.c8yGuideHref}`;
    }
}
GuideHrefDirective.ɵfac = function GuideHrefDirective_Factory(t) { return new (t || GuideHrefDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
GuideHrefDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: GuideHrefDirective, selectors: [["", "c8y-guide-href", ""]], inputs: { c8yGuideHref: ["c8y-guide-href", "c8yGuideHref"] } });
GuideHrefDirective.ctorParameters = () => [
    { type: ElementRef }
];
GuideHrefDirective.propDecorators = {
    c8yGuideHref: [{ type: Input, args: ['c8y-guide-href',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GuideHrefDirective, [{
        type: Directive,
        args: [{
                selector: '[c8y-guide-href]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { c8yGuideHref: [{
            type: Input,
            args: ['c8y-guide-href']
        }] }); })();

class GuideDocsComponent {
    constructor(docs, el, renderer, translateDirective) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
        this.translateDirective = translateDirective;
    }
    get translateDirective() {
        return this._translateDirective;
    }
    set translateDirective(value) {
        if (!value) {
            return;
        }
        this._translateDirective = value;
    }
    ngOnInit() {
        this.baseUrl = this.docs.getBaseUrl();
    }
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    ngAfterContentInit() {
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent
                .pipe(takeUntil(this.destroyed$))
                .subscribe(() => {
                this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
        this.links.forEach(guide => {
            guide.baseHref = this.baseUrl;
        });
    }
    /**
     * Find and modify anchor elements
     */
    replaceAnchorAttributes() {
        const anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(a => {
            const guideHref = `${this.baseUrl}/${a.getAttribute('c8y-guide-href')}`;
            this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    }
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    findGuideAnchors(el) {
        const isAnchor = () => el.nodeName === 'A';
        const hasGuideHrefAttr = () => !!el.attributes.getNamedItem('c8y-guide-href');
        const hasChildren = () => el.childNodes && el.childNodes.length > 0;
        let result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach((node) => {
                const searchResult = this.findGuideAnchors(node);
                if (searchResult) {
                    result = [...result, ...searchResult];
                }
            });
        }
        return result;
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
GuideDocsComponent.ɵfac = function GuideDocsComponent_Factory(t) { return new (t || GuideDocsComponent)(ɵngcc0.ɵɵdirectiveInject(DocsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(C8yTranslateDirective, 8)); };
GuideDocsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GuideDocsComponent, selectors: [["", "c8y-guide-docs", ""]], contentQueries: function GuideDocsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, C8yTranslateDirective, 7);
        ɵngcc0.ɵɵcontentQuery(dirIndex, GuideHrefDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.translateDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.links = _t);
    } }, attrs: _c77, ngContentSelectors: _c1, decls: 1, vars: 1, consts: [[4, "ngIf"]], template: function GuideDocsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, GuideDocsComponent_ng_container_0_Template, 2, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.baseUrl);
    } }, directives: [ɵngcc7.NgIf], encapsulation: 2 });
GuideDocsComponent.ctorParameters = () => [
    { type: DocsService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: C8yTranslateDirective, decorators: [{ type: Optional }] }
];
GuideDocsComponent.propDecorators = {
    links: [{ type: ContentChildren, args: [GuideHrefDirective, { descendants: true },] }],
    translateDirective: [{ type: ContentChild, args: [C8yTranslateDirective, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GuideDocsComponent, [{
        type: Component,
        args: [{
                selector: '[c8y-guide-docs]',
                template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
            }]
    }], function () { return [{ type: DocsService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: C8yTranslateDirective, decorators: [{
                type: Optional
            }] }]; }, { translateDirective: [{
            type: ContentChild,
            args: [C8yTranslateDirective, { static: true }]
        }], links: [{
            type: ContentChildren,
            args: [GuideHrefDirective, { descendants: true }]
        }] }); })();

class DocsModule {
}
DocsModule.ɵfac = function DocsModule_Factory(t) { return new (t || DocsModule)(); };
DocsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DocsModule });
DocsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [DocsService], imports: [[CommonModule$1]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DocsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    GuideHrefDirective,
                    GuideDocsComponent
                ],
                imports: [CommonModule$1],
                exports: [
                    GuideHrefDirective,
                    GuideDocsComponent
                ],
                providers: [DocsService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DocsModule, { declarations: function () { return [GuideHrefDirective, GuideDocsComponent]; }, imports: function () { return [CommonModule$1]; }, exports: function () { return [GuideHrefDirective, GuideDocsComponent]; } }); })();

class ArrayTypeComponent extends FieldArrayType {
    add() {
        this.formControl.markAsTouched();
        super.add();
    }
    remove(i) {
        this.formControl.markAsTouched();
        super.remove(i);
    }
    ngOnInit() {
        if (this.to.required && !this.field.fieldGroup.length) {
            this.add();
        }
    }
}
ArrayTypeComponent.ɵfac = /*@__PURE__*/ function () { let ɵArrayTypeComponent_BaseFactory; return function ArrayTypeComponent_Factory(t) { return (ɵArrayTypeComponent_BaseFactory || (ɵArrayTypeComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ArrayTypeComponent)))(t || ArrayTypeComponent); }; }();
ArrayTypeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ArrayTypeComponent, selectors: [["c8y-array-type"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 14, consts: [["role", "group"], ["class", "legend form-block", 3, "id", 4, "ngIf"], ["class", "form-control-feedback-message has-error", "role", "alert", 4, "ngIf"], ["class", "input-group-array", 4, "ngFor", "ngForOf"], [1, "p-t-8"], ["type", "button", 1, "btn", "btn-default", 3, "title", "disabled", "click"], ["c8yIcon", "plus-circle"], ["ngNonBindable", "", "translate", "", 3, "translateParams", 4, "ngIf"], [4, "ngIf"], [1, "legend", "form-block", 3, "id"], ["class", "btn-clean text-14 m-l-4 m-t-auto m-b-auto", "placement", "right", "type", "button", 3, "popover", "outsideClick", 4, "ngIf"], ["placement", "right", "type", "button", 1, "btn-clean", "text-14", "m-l-4", "m-t-auto", "m-b-auto", 3, "popover", "outsideClick"], ["c8yIcon", "question-circle-o", 1, "text-primary"], ["role", "alert", 1, "form-control-feedback-message", "has-error"], [3, "field"], [1, "input-group-array"], [1, "input-group-btn", 3, "ngClass"], ["type", "button", 1, "btn", "btn-clean", "m-l-auto", 3, "title", "disabled", "click"], ["c8yIcon", "minus-circle", 1, "text-danger"], ["translate", "", 3, "translateParams"]], template: function ArrayTypeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ArrayTypeComponent_div_1_Template, 4, 5, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ArrayTypeComponent_div_2_Template, 2, 1, "div", 2);
        ɵngcc0.ɵɵtemplate(3, ArrayTypeComponent_div_3_Template, 6, 8, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "button", 5);
        ɵngcc0.ɵɵlistener("click", function ArrayTypeComponent_Template_button_click_5_listener() { return ctx.add(); });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelement(8, "i", 6);
        ɵngcc0.ɵɵtemplate(9, ArrayTypeComponent_span_9_Template, 2, 1, "span", 7);
        ɵngcc0.ɵɵtemplate(10, ArrayTypeComponent_span_10_Template, 3, 3, "span", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.id + "-fieldset");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.label || ctx.to.description);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showError && ctx.formControl.errors);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.field.fieldGroup);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind2(6, 9, ɵngcc0.ɵɵpipeBind1(7, 12, ctx.field.templateOptions == null ? null : ctx.field.templateOptions.addText) || "Add {{ label }}", ctx.field == null ? null : ctx.field.fieldArray == null ? null : ctx.field.fieldArray.templateOptions));
        ɵngcc0.ɵɵproperty("disabled", ctx.to.disabled);
        ɵngcc0.ɵɵattribute("data-cy", (ctx.field.templateOptions == null ? null : ctx.field.templateOptions.addTextDataCy) || "add-array-item");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.field.templateOptions == null ? null : ctx.field.templateOptions.addText));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field.templateOptions == null ? null : ctx.field.templateOptions.addText);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgForOf, IconDirective, ɵngcc12.PopoverDirective, ɵngcc18.ɵc, ɵngcc18.FormlyField, ɵngcc7.NgClass, C8yTranslateDirective], pipes: [C8yTranslatePipe, HumanizePipe], encapsulation: 2 });
ArrayTypeComponent.CONFIG = {
    types: [{ name: 'array', component: ArrayTypeComponent }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ArrayTypeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-array-type',
                template: "<div role=\"group\" [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <div id=\"{{ id + '-fieldset' }}\" class=\"legend form-block\" *ngIf=\"to.label || to.description\">\n    {{ to.label | humanize }}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4 m-t-auto m-b-auto\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      [outsideClick]=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-primary\"></i>\n    </button>\n  </div>\n\n  <div\n    class=\"form-control-feedback-message has-error\"\n    role=\"alert\"\n    *ngIf=\"showError && formControl.errors\"\n  >\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n\n  <div *ngFor=\"let ifield of field.fieldGroup; let i = index\" class=\"input-group-array\">\n    <formly-field [field]=\"ifield\"></formly-field>\n    <div class=\"input-group-btn\" [ngClass]=\"{ 'm-t-24': i === 0 }\">\n      <button\n        type=\"button\"\n        class=\"btn btn-clean m-l-auto\"\n        title=\"{{ 'Delete' | translate }}\"\n        [disabled]=\"to.disabled || field.fieldGroup.length === 1\"\n        (click)=\"remove(i)\"\n      >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"p-t-8\">\n    <button\n      type=\"button\"\n      title=\"{{\n        (field.templateOptions?.addText | translate) || 'Add \\{\\{ label \\}\\}'\n          | translate: field?.fieldArray?.templateOptions\n      }}\"\n      class=\"btn btn-default\"\n      [disabled]=\"to.disabled\"\n      (click)=\"add()\"\n      [attr.data-cy]=\"field.templateOptions?.addTextDataCy || 'add-array-item'\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      <span\n        *ngIf=\"!field.templateOptions?.addText\"\n        ngNonBindable\n        translate\n        [translateParams]=\"field?.fieldArray?.templateOptions\"\n      >\n        Add {{ label }}\n      </span>\n      <span *ngIf=\"field.templateOptions?.addText\">\n        {{ field.templateOptions?.addText | translate }}\n      </span>\n    </button>\n  </div>\n</div>\n"
            }]
    }], null, null); })();

class FieldCheckbox extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                indeterminate: true,
                formCheck: 'custom' // 'custom' | 'custom-inline' | 'custom-switch' | 'stacked' | 'inline' | 'nolabel'
            }
        };
    }
}
FieldCheckbox.ɵfac = /*@__PURE__*/ function () { let ɵFieldCheckbox_BaseFactory; return function FieldCheckbox_Factory(t) { return (ɵFieldCheckbox_BaseFactory || (ɵFieldCheckbox_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldCheckbox)))(t || FieldCheckbox); }; }();
FieldCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FieldCheckbox, selectors: [["c8y-field-checkbox"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 22, consts: [["type", "checkbox", 3, "indeterminate", "formControl", "formlyAttributes"], [4, "ngIf"], ["class", "btn-clean m-l-4 flex-item-middle", "placement", "auto", "outsideClick", "true", "type", "button", 3, "popover", 4, "ngIf"], ["translate", "", 1, "m-l-4"], ["placement", "auto", "outsideClick", "true", "type", "button", 1, "btn-clean", "m-l-4", "flex-item-middle", 3, "popover"], ["c8yIcon", "question-circle-o", 1, "text-primary"]], template: function FieldCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label");
        ɵngcc0.ɵɵelement(1, "input", 0);
        ɵngcc0.ɵɵelement(2, "span");
        ɵngcc0.ɵɵelementStart(3, "span");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "humanize");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, FieldCheckbox_span_6_Template, 3, 0, "span", 1);
        ɵngcc0.ɵɵtemplate(7, FieldCheckbox_button_7_Template, 2, 1, "button", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("c8y-checkbox", !ctx.to.switchMode)("c8y-switch", ctx.to.switchMode)("has-error", ctx.showError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showError)("form-check-input", ctx.to.formCheck.indexOf("custom") === -1)("position-static", ctx.to.formCheck === "nolabel")("custom-control-input", ctx.to.formCheck.indexOf("custom") === 0);
        ɵngcc0.ɵɵproperty("indeterminate", ctx.to.indeterminate && ctx.formControl.value == null)("formControl", ctx.formControl)("formlyAttributes", ctx.field);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 20, ctx.to.label), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.required && ctx.to.hideRequiredMarker !== true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.to.description);
    } }, directives: [ɵngcc14.CheckboxControlValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective, ɵngcc18.FormlyAttributes, ɵngcc7.NgIf, C8yTranslateDirective, ɵngcc12.PopoverDirective, IconDirective], pipes: [HumanizePipe], encapsulation: 2, changeDetection: 0 });
FieldCheckbox.CONFIG = {
    types: [
        {
            name: 'checkbox',
            component: FieldCheckbox
        },
        {
            name: 'boolean',
            extends: 'checkbox'
        },
        {
            name: 'switch',
            extends: 'checkbox',
            defaultOptions: {
                templateOptions: {
                    switchMode: true,
                    indeterminate: false,
                }
            },
        }
    ]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldCheckbox, [{
        type: Component,
        args: [{
                selector: 'c8y-field-checkbox',
                template: "  <label\n    [class.c8y-checkbox]=\"!to.switchMode\"\n    [class.c8y-switch]=\"to.switchMode\"\n    [class.has-error]=\"showError\">\n    <input\n      type=\"checkbox\"\n      [class.is-invalid]=\"showError\"\n      [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n      [class.position-static]=\"to.formCheck === 'nolabel'\"\n      [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n      [indeterminate]=\"to.indeterminate && formControl.value == null\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n    /><span></span><span> {{ to.label | humanize}} </span>\n    <span *ngIf=\"to.required && to.hideRequiredMarker !== true\"><em class=\"m-l-4\" translate>(required)</em></span>\n    <button\n      *ngIf=\"!!to.description\"\n      class=\"btn-clean m-l-4 flex-item-middle\"\n      [popover]=\"to.description\"\n      placement=\"auto\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-primary\"></i>\n  </button>\n  </label>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

class FieldDate extends FieldType {
}
FieldDate.ɵfac = /*@__PURE__*/ function () { let ɵFieldDate_BaseFactory; return function FieldDate_Factory(t) { return (ɵFieldDate_BaseFactory || (ɵFieldDate_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldDate)))(t || FieldDate); }; }();
FieldDate.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FieldDate, selectors: [["c8y-field-date"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 10, consts: [[1, "form-group"], [3, "id", 4, "ngIf"], [1, "form-group", "datepicker"], ["placeholder", "Date", "placement", "top", "bsDatepicker", "", 1, "form-control", 3, "formControl", "formlyAttributes", "bsConfig", "placeholder", "required"], [3, "id"], ["class", "btn-clean text-14 m-l-4", "placement", "right", "outsideClick", "true", "type", "button", 3, "popover", 4, "ngIf"], ["placement", "right", "outsideClick", "true", "type", "button", 1, "btn-clean", "text-14", "m-l-4", 3, "popover"], ["c8yIcon", "question-circle-o", 1, "text-info"]], template: function FieldDate_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FieldDate_label_1_Template, 4, 5, "label", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "input", 3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.id + "-fieldset");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.label || ctx.to.description);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("formlyAttributes", ctx.field)("bsConfig", ɵngcc0.ɵɵpureFunction0(9, _c79))("placeholder", ɵngcc0.ɵɵpipeBind1(4, 7, "Select a date\u2026"))("required", ctx.to.required);
    } }, directives: [ɵngcc7.NgIf, ɵngcc6.BsDatepickerInputDirective, ɵngcc14.DefaultValueAccessor, RequiredInputPlaceholderDirective, ɵngcc6.BsDatepickerDirective, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective, ɵngcc18.FormlyAttributes, ɵngcc14.RequiredValidator, ɵngcc12.PopoverDirective, IconDirective], pipes: [C8yTranslatePipe, HumanizePipe], encapsulation: 2, changeDetection: 0 });
FieldDate.CONFIG = {
    types: [
        {
            name: 'date',
            component: FieldDate
        }
    ]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldDate, [{
        type: Component,
        args: [{
                selector: 'c8y-field-date',
                template: "<div class=\"form-group\"  [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <label id=\"{{ id + '-fieldset' }}\" *ngIf=\"to.label || to.description\">\n    {{ to.label | humanize}}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n    </button>\n  </label>\n  <div class=\"form-group datepicker\">\n    <input\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      class=\"form-control\"\n      placeholder=\"Date\"\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [placeholder]=\"'Select a date\u2026' | translate\"\n      placement=\"top\"\n      bsDatepicker\n      [required]=\"to.required\"\n    />\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

class FieldFile extends FieldType {
    constructor() {
        super(...arguments);
        this.dropAreaInputs = [
            'title',
            'message',
            'icon',
            'loadingMessage',
            'alwaysShow',
            'clickToOpen',
            'loading',
            'progress',
            'maxAllowedFiles',
            'files',
            'accept'
        ];
    }
    ngOnInit() {
        const keys = Array.isArray(this.key) ? this.key : [this.key];
        const path = keys.join('.');
        this.dropArea.files = get$1(this.model, path);
        this.dropAreaInputs
            .filter(input => this.to[input] !== undefined)
            .forEach(input => (this.dropArea[input] = this.to[input]));
    }
}
FieldFile.ɵfac = /*@__PURE__*/ function () { let ɵFieldFile_BaseFactory; return function FieldFile_Factory(t) { return (ɵFieldFile_BaseFactory || (ɵFieldFile_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldFile)))(t || FieldFile); }; }();
FieldFile.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FieldFile, selectors: [["c8y-field-file"]], viewQuery: function FieldFile_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c80, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropArea = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 3, consts: [["role", "group", 1, "form-group"], [3, "id", 4, "ngIf"], [1, "drop-area-sm", 3, "formControl"], ["dropArea", ""], [3, "id"], ["class", "btn-clean text-14 m-l-4", "placement", "right", "type", "button", 3, "popover", "outsideClick", 4, "ngIf"], ["placement", "right", "type", "button", 1, "btn-clean", "text-14", "m-l-4", 3, "popover", "outsideClick"], ["c8yIcon", "question-circle-o", 1, "text-info"]], template: function FieldFile_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FieldFile_label_1_Template, 4, 5, "label", 1);
        ɵngcc0.ɵɵelement(2, "c8y-drop-area", 2, 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.id + "-fieldset");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.label || ctx.to.description);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl);
    } }, directives: [ɵngcc7.NgIf, DropAreaComponent, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective, ɵngcc12.PopoverDirective, IconDirective], pipes: [HumanizePipe], encapsulation: 2, changeDetection: 0 });
FieldFile.CONFIG = {
    types: [
        {
            name: 'file',
            component: FieldFile
        }
    ]
};
FieldFile.propDecorators = {
    dropArea: [{ type: ViewChild, args: ['dropArea', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldFile, [{
        type: Component,
        args: [{
                selector: 'c8y-field-file',
                template: "<div class=\"form-group\" role=\"group\" [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <label id=\"{{ id + '-fieldset' }}\" *ngIf=\"to.label || to.description\">\n    {{ to.label | humanize }}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      [outsideClick]=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n    </button>\n  </label>\n\n  <c8y-drop-area #dropArea class=\"drop-area-sm\" [formControl]=\"formControl\"> </c8y-drop-area>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, { dropArea: [{
            type: ViewChild,
            args: ['dropArea', { static: true }]
        }] }); })();

class WrapperFormField extends FieldWrapper {
    constructor() {
        super(...arguments);
        this.maxHelpBlockLength = 64;
    }
    ngOnInit() {
        this.showDescriptionAsPopup =
            this.field.type === 'radio' || this.field.type === 'typeahead' ||
                (this.to.description && this.to.description.length > this.maxHelpBlockLength);
    }
}
WrapperFormField.ɵfac = /*@__PURE__*/ function () { let ɵWrapperFormField_BaseFactory; return function WrapperFormField_Factory(t) { return (ɵWrapperFormField_BaseFactory || (ɵWrapperFormField_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WrapperFormField)))(t || WrapperFormField); }; }();
WrapperFormField.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WrapperFormField, selectors: [["c8y-wrapper-form-field"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 5, consts: [[1, "form-group"], [4, "ngIf"], ["fieldComponent", ""], ["class", "c8y-messages", 4, "ngIf"], ["class", "help-block", 4, "ngIf"], ["class", "text-info", "c8yIcon", "info-circle", 3, "title", 4, "ngIf"], ["class", "btn-clean m-l-4 flex-item-middle", "placement", "auto", "outsideClick", "true", "type", "button", 3, "popover", 4, "ngIf"], ["c8yIcon", "info-circle", 1, "text-info", 3, "title"], ["placement", "auto", "outsideClick", "true", "type", "button", 1, "btn-clean", "m-l-4", "flex-item-middle", 3, "popover"], ["c8yIcon", "question-circle-o", 1, "text-info"], [1, "c8y-messages"], [1, "form-control-feedback-message", 3, "field"], [1, "help-block"]], template: function WrapperFormField_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, WrapperFormField_label_1_Template, 5, 6, "label", 1);
        ɵngcc0.ɵɵtemplate(2, WrapperFormField_ng_template_2_Template, 0, 0, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, WrapperFormField_div_4_Template, 2, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(5, WrapperFormField_div_5_Template, 3, 3, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-error", ctx.showError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.label && ctx.to.hideLabel !== true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.showError && ctx.to.description && !ctx.showDescriptionAsPopup);
    } }, directives: [ɵngcc7.NgIf, IconDirective, ɵngcc12.PopoverDirective, ɵngcc18.ɵc], pipes: [HumanizePipe, C8yTranslatePipe], encapsulation: 2, changeDetection: 0 });
WrapperFormField.CONFIG = {
    wrappers: [{ name: 'c8y-form-field', component: WrapperFormField }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WrapperFormField, [{
        type: Component,
        args: [{
                selector: 'c8y-wrapper-form-field',
                template: "<div class=\"form-group\" [class.has-error]=\"showError\">\n  <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n    {{ to.label | humanize }} <i\n      *ngIf=\"to.tooltip\"\n      class=\"text-info\"\n      c8yIcon=\"info-circle\"\n      title=\"{{ to.tooltip | translate }}\"\n    ></i>\n    <button\n      *ngIf=\"to.description && showDescriptionAsPopup\"\n      class=\"btn-clean m-l-4 flex-item-middle\"\n      [popover]=\"to.description | translate\"\n      placement=\"auto\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n    </button>\n  </label>\n\n  <ng-template #fieldComponent></ng-template>\n\n  <div *ngIf=\"showError\" class=\"c8y-messages\">\n    <formly-validation-message\n      class=\"form-control-feedback-message\"\n      [field]=\"field\"\n    ></formly-validation-message>\n  </div>\n\n  <div class=\"help-block\" *ngIf=\"!showError && to.description && !showDescriptionAsPopup\">\n    {{ to.description | translate }}\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

class FieldInput extends FieldType {
    get type() {
        return this.to.type || 'text';
    }
}
FieldInput.ɵfac = /*@__PURE__*/ function () { let ɵFieldInput_BaseFactory; return function FieldInput_Factory(t) { return (ɵFieldInput_BaseFactory || (ɵFieldInput_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldInput)))(t || FieldInput); }; }();
FieldInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FieldInput, selectors: [["c8y-field-input"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [["class", "form-control", 3, "type", "formControl", "formlyAttributes", "required", "is-invalid", 4, "ngIf", "ngIfElse"], ["numberTmp", ""], [1, "form-control", 3, "type", "formControl", "formlyAttributes", "required"], ["type", "number", 1, "form-control", 3, "formControl", "formlyAttributes", "required"]], template: function FieldInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FieldInput_input_0_Template, 1, 7, "input", 0);
        ɵngcc0.ɵɵtemplate(1, FieldInput_ng_template_1_Template, 1, 6, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "number")("ngIfElse", _r1);
    } }, directives: [ɵngcc7.NgIf, ɵngcc14.DefaultValueAccessor, RequiredInputPlaceholderDirective, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective, ɵngcc18.FormlyAttributes, ɵngcc14.RequiredValidator, ɵngcc14.NumberValueAccessor], encapsulation: 2, changeDetection: 0 });
FieldInput.CONFIG = {
    types: [
        {
            name: 'input',
            component: FieldInput,
            wrappers: ['c8y-form-field']
        },
        { name: 'string', extends: 'input' },
        { name: 'typeahead', extends: 'input' },
        {
            name: 'number',
            extends: 'input',
            defaultOptions: {
                templateOptions: {
                    type: 'number'
                }
            }
        },
        {
            name: 'integer',
            extends: 'input',
            defaultOptions: {
                templateOptions: {
                    type: 'number'
                }
            }
        }
    ]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldInput, [{
        type: Component,
        args: [{
                selector: 'c8y-field-input',
                template: "<input\n  *ngIf=\"type !== 'number'; else numberTmp\"\n  [type]=\"type\"\n  [formControl]=\"formControl\"\n  class=\"form-control\"\n  [formlyAttributes]=\"field\"\n  [required]=\"to.required\"\n  [attr.autocomplete]=\"to.autocomplete ? to.autocomplete : null\"\n  [class.is-invalid]=\"showError\"\n/>\n<ng-template #numberTmp>\n  <input\n    type=\"number\"\n    [formControl]=\"formControl\"\n    class=\"form-control\"\n    [formlyAttributes]=\"field\"\n    [required]=\"to.required\"\n    [attr.autocomplete]=\"to.autocomplete ? to.autocomplete : null\"\n    [class.is-invalid]=\"showError\"\n  />\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

class ObjectTypeComponent extends FieldType {
}
ObjectTypeComponent.ɵfac = /*@__PURE__*/ function () { let ɵObjectTypeComponent_BaseFactory; return function ObjectTypeComponent_Factory(t) { return (ɵObjectTypeComponent_BaseFactory || (ɵObjectTypeComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ObjectTypeComponent)))(t || ObjectTypeComponent); }; }();
ObjectTypeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ObjectTypeComponent, selectors: [["c8y-object-type"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 5, consts: [["role", "group"], ["class", "lead text-center m-b-16", 3, "id", 4, "ngIf"], ["class", "m-b-8", 4, "ngIf"], ["class", "form-control-feedback-message has-error", "role", "alert", 4, "ngIf"], [3, "field", 4, "ngFor", "ngForOf"], [1, "lead", "text-center", "m-b-16", 3, "id"], [1, "m-b-8"], ["role", "alert", 1, "form-control-feedback-message", "has-error"], [3, "field"]], template: function ObjectTypeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ObjectTypeComponent_p_1_Template, 3, 4, "p", 1);
        ɵngcc0.ɵɵtemplate(2, ObjectTypeComponent_p_2_Template, 2, 1, "p", 2);
        ɵngcc0.ɵɵtemplate(3, ObjectTypeComponent_div_3_Template, 2, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ObjectTypeComponent_formly_field_4_Template, 1, 1, "formly-field", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.id + "-fieldset");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.description);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showError && ctx.formControl.errors);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.field.fieldGroup);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgForOf, ɵngcc18.ɵc, ɵngcc18.FormlyField], pipes: [HumanizePipe], encapsulation: 2 });
ObjectTypeComponent.CONFIG = {
    types: [{ name: 'object', component: ObjectTypeComponent }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObjectTypeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-object-type',
                template: "<div role=\"group\" [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <p *ngIf=\"to.label\" class=\"lead text-center m-b-16\" id=\"{{ id + '-fieldset' }}\">\n    {{ to.label | humanize }}\n  </p>\n  <p *ngIf=\"to.description\" class=\"m-b-8\">\n    {{ to.description }}\n  </p>\n  <div\n    class=\"form-control-feedback-message has-error\"\n    role=\"alert\"\n    *ngIf=\"showError && formControl.errors\"\n  >\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n  <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n</div>\n"
            }]
    }], null, null); })();

class FieldRadio extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                options: [],
                formCheck: 'custom' // 'custom' | 'custom-inline' | 'stacked' | 'inline'
            }
        };
    }
}
FieldRadio.ɵfac = /*@__PURE__*/ function () { let ɵFieldRadio_BaseFactory; return function FieldRadio_Factory(t) { return (ɵFieldRadio_BaseFactory || (ɵFieldRadio_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldRadio)))(t || FieldRadio); }; }();
FieldRadio.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FieldRadio, selectors: [["c8y-field-radio"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [["class", "c8y-radio", 3, "title", 4, "ngFor", "ngForOf"], [1, "c8y-radio", 3, "title"], ["type", "radio", 3, "id", "name", "value", "formControl", "formlyAttributes"]], template: function FieldRadio_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FieldRadio_label_0_Template, 6, 11, "label", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵpipe(2, "formlySelectOptions");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc7.NgForOf, ɵngcc14.RadioControlValueAccessor, ɵngcc14.DefaultValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective, ɵngcc18.FormlyAttributes], pipes: [ɵngcc7.AsyncPipe, ɵngcc19.ɵa, HumanizePipe], encapsulation: 2, changeDetection: 0 });
FieldRadio.CONFIG = {
    types: [
        {
            name: 'radio',
            component: FieldRadio,
            wrappers: ['c8y-form-field']
        }
    ]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldRadio, [{
        type: Component,
        args: [{
                selector: 'c8y-field-radio',
                template: "<label\n  *ngFor=\"let option of to.options | formlySelectOptions: field | async; let i = index\"\n  [title]=\"option.label\"\n  class=\"c8y-radio\"\n>\n  <input\n    type=\"radio\"\n    [id]=\"id + '_' + i\"\n    [name]=\"field.name || id\"\n    [attr.value]=\"option.value\"\n    [value]=\"option.value\"\n    [formControl]=\"formControl\"\n    [formlyAttributes]=\"field\"\n    [attr.disabled]=\"option.disabled || formControl.disabled ? true : null\"\n  />\n  <span></span>\n  <span>{{ option.label | humanize }}</span>\n</label>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

class FieldDateTime extends FieldType {
}
FieldDateTime.ɵfac = /*@__PURE__*/ function () { let ɵFieldDateTime_BaseFactory; return function FieldDateTime_Factory(t) { return (ɵFieldDateTime_BaseFactory || (ɵFieldDateTime_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldDateTime)))(t || FieldDateTime); }; }();
FieldDateTime.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FieldDateTime, selectors: [["c8y-field-date-time"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 6, consts: [[3, "minDate", "maxDate", "placeholder", "formControl"]], template: function FieldDateTime_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "c8y-date-time-picker", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("minDate", ctx.to.minDate)("maxDate", ctx.to.maxDate)("placeholder", ɵngcc0.ɵɵpipeBind1(1, 4, ctx.to.placeholder))("formControl", ctx.formControl);
    } }, directives: function () { return [DateTimePickerComponent, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2, changeDetection: 0 });
FieldDateTime.CONFIG = {
    types: [
        {
            name: 'date-time',
            component: FieldDateTime,
            wrappers: ['c8y-form-field']
        }
    ]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldDateTime, [{
        type: Component,
        args: [{
                selector: 'c8y-field-date-time',
                template: "<c8y-date-time-picker\n  [minDate]=\"to.minDate\"\n  [maxDate]=\"to.maxDate\"\n  [placeholder]=\"(to.placeholder | translate)\"\n  [formControl]=\"formControl\"\n></c8y-date-time-picker>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

class DateTimePickerComponent {
    constructor() {
        this.defaultPlaceholder = gettext('Select a date…');
        this.destroy$ = new Subject();
        this.form = new FormGroup({});
        this.form.addControl('date', new FormControl(null));
        this.form.addControl('time', new FormControl(null));
        this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value) => {
            this.setDatetime(value);
            this.previousValue = value;
        });
        this.form.statusChanges
            .pipe(first$1())
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.onTouched();
        });
    }
    set _minDate(value) {
        this.minDate = value ? new Date(value) : undefined;
    }
    set _maxDate(value) {
        this.maxDate = value ? new Date(value) : undefined;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value) {
        if (typeof value === 'string' && value.length) {
            this.date = new Date(value);
            this.form.setValue({
                date: new Date(value),
                time: {
                    hour: this.date.getHours(),
                    minute: this.date.getMinutes()
                }
            }, { emitEvent: false });
        }
        else {
            this.form.setValue({ date: null, time: null }, { emitEvent: false });
        }
        this.previousValue = this.form.value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(disabled) {
        disabled ? this.form.disable() : this.form.enable();
    }
    validate(control) {
        var _a, _b;
        if (((_a = this.date) === null || _a === void 0 ? void 0 : _a.getTime()) < new Date(this.minDate).getTime()) {
            return { dateBeforeRangeMin: true };
        }
        else if (((_b = this.date) === null || _b === void 0 ? void 0 : _b.getTime()) > new Date(this.maxDate).getTime()) {
            return { dateAfterRangeMax: true };
        }
        else if (this.form.invalid) {
            return { invalidDateTime: true };
        }
        else {
            return null;
        }
    }
    previousDay() {
        this.date.setDate(this.date.getDate() - 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    nextDay() {
        this.date.setDate(this.date.getDate() + 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    /**
     * If internal form changes its value, then combine date and time into one Date and pass its ISO string value to onChange method
     * @param dateTime
     * @private
     */
    setDatetime(dateTime) {
        var _a, _b, _c;
        if (!dateTime.date && ((_a = this.previousValue) === null || _a === void 0 ? void 0 : _a.date)) {
            this.form.get('time').setValue({ hour: undefined, minute: undefined }, { emitEvent: false });
            this.onChange(null);
            return;
        }
        if (!dateTime.date) {
            dateTime.date = new Date();
            dateTime.date.setSeconds(0);
        }
        this.date = new Date(dateTime.date);
        if (typeof ((_b = dateTime.time) === null || _b === void 0 ? void 0 : _b.hour) === 'undefined' ||
            typeof ((_c = dateTime.time) === null || _c === void 0 ? void 0 : _c.minute) === 'undefined') {
            dateTime.time = { hour: 0, minute: 0 };
            this.form.get('time').setValue(dateTime.time, { emitEvent: false });
        }
        this.date.setHours(dateTime.time.hour, dateTime.time.minute);
        this.form.get('date').setValue(dateTime.date, { emitEvent: false });
        this.onChange(this.date.toISOString());
    }
}
DateTimePickerComponent.ɵfac = function DateTimePickerComponent_Factory(t) { return new (t || DateTimePickerComponent)(); };
DateTimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateTimePickerComponent, selectors: [["c8y-date-time-picker"]], inputs: { _minDate: ["minDate", "_minDate"], _maxDate: ["maxDate", "_maxDate"], placeholder: "placeholder" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => DateTimePickerComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => DateTimePickerComponent),
                multi: true
            }
        ])], decls: 5, vars: 9, consts: [[1, "datetime-picker"], [1, "form-group", "datepicker"], ["bsDatepicker", "", 1, "form-control", 3, "placeholder", "bsConfig", "formControl", "minDate", "maxDate", "blur"], [3, "formControl", "dayBackward", "dayForward"]], template: function DateTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2);
        ɵngcc0.ɵɵlistener("blur", function DateTimePickerComponent_Template_input_blur_2_listener() { return ctx.onTouched(); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-time-picker", 3);
        ɵngcc0.ɵɵlistener("dayBackward", function DateTimePickerComponent_Template_c8y_time_picker_dayBackward_4_listener() { return ctx.previousDay(); })("dayForward", function DateTimePickerComponent_Template_c8y_time_picker_dayForward_4_listener() { return ctx.nextDay(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(3, 6, ctx.placeholder || ctx.defaultPlaceholder))("bsConfig", ɵngcc0.ɵɵpureFunction0(8, _c79))("formControl", ctx.form.get("date"))("minDate", ctx.minDate)("maxDate", ctx.maxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.form.get("time"));
    } }, directives: function () { return [ɵngcc6.BsDatepickerInputDirective, ɵngcc14.DefaultValueAccessor, ɵngcc6.BsDatepickerDirective, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective, TimePickerComponent]; }, pipes: function () { return [C8yTranslatePipe]; }, encapsulation: 2 });
DateTimePickerComponent.ctorParameters = () => [];
DateTimePickerComponent.propDecorators = {
    _minDate: [{ type: Input, args: ['minDate',] }],
    _maxDate: [{ type: Input, args: ['maxDate',] }],
    placeholder: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateTimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-date-time-picker',
                template: "<div class=\"datetime-picker\">\n  <div class=\"form-group datepicker\">\n    <input\n      class=\"form-control\"\n      [placeholder]=\"placeholder || defaultPlaceholder | translate\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [formControl]=\"form.get('date')\"\n      (blur)=\"onTouched()\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n    />\n  </div>\n  <c8y-time-picker\n    [formControl]=\"form.get('time')\"\n    (dayBackward)=\"previousDay()\"\n    (dayForward)=\"nextDay()\"\n  ></c8y-time-picker>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => DateTimePickerComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => DateTimePickerComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, { _minDate: [{
            type: Input,
            args: ['minDate']
        }], _maxDate: [{
            type: Input,
            args: ['maxDate']
        }], placeholder: [{
            type: Input
        }] }); })();

class TimePickerComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.lastValidHours = '00';
        this.lastValidMinutes = '00';
        this.dayForward = new EventEmitter();
        this.dayBackward = new EventEmitter();
        this.disabled = false;
        this.date = new Date();
        this.touched = false;
        this.destroy$ = new Subject();
        this.simulatedWheelUpEvent = { wheelDeltaY: 1, preventDefault: () => null };
        this.simulatedWheelDownEvent = { wheelDeltaY: -1, preventDefault: () => null };
    }
    parseValue(target, lastValid, limit) {
        this.cdRef.detectChanges();
        if (this[target].length > 0 && !/^\d+$/.test(this[target])) {
            this[target] = this[lastValid];
            return;
        }
        if (this[target].length <= 1) {
            this[target] = this[target].padStart(2, '0');
        }
        if (this[target].length > 2 && this[target].startsWith('0')) {
            this[target] = this[target].slice(1, 3);
        }
        if (this[target].length > 2) {
            this[target] = this[lastValid];
            return;
        }
        if (Number(this[target]) > limit) {
            this[target] = limit;
        }
        this[lastValid] = this[target];
    }
    initializeMinutes() {
        if (!this.hasValue(this.minutes)) {
            this.minutes = '00';
        }
    }
    initializeHours() {
        if (!this.hasValue(this.hours)) {
            this.hours = '00';
        }
    }
    handleHourScroll(ev) {
        // up
        ev.preventDefault();
        if (ev.wheelDeltaY > 0) {
            if (Number(this.hours) === 23) {
                this.writeValue({ hour: 0, minute: Number(this.minutes) });
                this.dayForward.emit();
            }
            else {
                this.writeValue({ hour: Number(this.hours) + 1, minute: Number(this.minutes) });
            }
            this.emitValue();
        }
        // down
        if (ev.wheelDeltaY < 0) {
            if (Number(this.hours) === 0) {
                this.writeValue({ hour: 23, minute: Number(this.minutes) });
                this.dayBackward.emit();
            }
            else {
                this.writeValue({ hour: Number(this.hours) - 1, minute: Number(this.minutes) });
            }
            this.emitValue();
        }
    }
    handleMinuteScroll(ev) {
        // up
        ev.preventDefault();
        if (ev.wheelDeltaY > 0) {
            if (Number(this.minutes) === 59) {
                this.writeValue({ hour: Number(this.hours), minute: 0 });
                this.handleHourScroll(this.simulatedWheelUpEvent);
            }
            else {
                this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) + 1 });
            }
        }
        // down
        if (ev.wheelDeltaY < 0) {
            if (Number(this.minutes) === 0) {
                this.writeValue({ hour: Number(this.hours), minute: 59 });
                this.handleHourScroll(this.simulatedWheelDownEvent);
            }
            else {
                this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) - 1 });
            }
        }
        this.emitValue();
    }
    emitValue() {
        if (this.hasValue(this.hours) && this.hasValue(this.minutes)) {
            this.onChange({
                hour: Number(this.hours),
                minute: Number(this.minutes)
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value) {
        if (this.hasValue(value === null || value === void 0 ? void 0 : value.hour) && this.hasValue(value === null || value === void 0 ? void 0 : value.minute)) {
            this.hours = value.hour.toString();
            this.minutes = value.minute.toString();
            this.parseValue('hours', 'lastValidHours', 23);
            this.parseValue('minutes', 'lastValidMinutes', 59);
        }
        else {
            this.hours = undefined;
            this.minutes = undefined;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched();
            this.touched = true;
        }
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    hasValue(value) {
        return typeof value !== 'undefined';
    }
}
TimePickerComponent.ɵfac = function TimePickerComponent_Factory(t) { return new (t || TimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
TimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TimePickerComponent, selectors: [["c8y-time-picker"]], inputs: { minDate: "minDate", maxDate: "maxDate", placeholder: "placeholder" }, outputs: { dayForward: "dayForward", dayBackward: "dayBackward" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TimePickerComponent),
                multi: true
            }
        ])], decls: 11, vars: 10, consts: [[1, "form-group"], ["type", "text", 1, "form-control", "text-center", "bs-timepicker-field", 3, "disabled", "placeholder", "ngModel", "ngModelChange", "input", "change", "wheel", "focus"]], template: function TimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table");
        ɵngcc0.ɵɵelementStart(1, "tbody");
        ɵngcc0.ɵɵelementStart(2, "tr");
        ɵngcc0.ɵɵelementStart(3, "td", 0);
        ɵngcc0.ɵɵelementStart(4, "input", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function TimePickerComponent_Template_input_ngModelChange_4_listener($event) { return ctx.hours = $event; })("input", function TimePickerComponent_Template_input_input_4_listener() { ctx.parseValue("hours", "lastValidHours", 23); return ctx.initializeMinutes(); })("change", function TimePickerComponent_Template_input_change_4_listener() { return ctx.emitValue(); })("wheel", function TimePickerComponent_Template_input_wheel_4_listener($event) { return ctx.handleHourScroll($event); })("focus", function TimePickerComponent_Template_input_focus_4_listener() { return ctx.markAsTouched(); });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "td");
        ɵngcc0.ɵɵtext(7, "\u00A0:\u00A0");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "td", 0);
        ɵngcc0.ɵɵelementStart(9, "input", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function TimePickerComponent_Template_input_ngModelChange_9_listener($event) { return ctx.minutes = $event; })("input", function TimePickerComponent_Template_input_input_9_listener() { ctx.parseValue("minutes", "lastValidMinutes", 59); return ctx.initializeHours(); })("change", function TimePickerComponent_Template_input_change_9_listener() { return ctx.emitValue(); })("wheel", function TimePickerComponent_Template_input_wheel_9_listener($event) { return ctx.handleMinuteScroll($event); })("focus", function TimePickerComponent_Template_input_focus_9_listener() { return ctx.markAsTouched(); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("placeholder", ɵngcc0.ɵɵpipeBind1(5, 6, "HH`HOURS`"))("ngModel", ctx.hours);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("placeholder", ɵngcc0.ɵɵpipeBind1(10, 8, "MM`MINUTES`"))("ngModel", ctx.minutes);
    } }, directives: [ɵngcc14.DefaultValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.NgModel], pipes: [C8yTranslatePipe], encapsulation: 2 });
TimePickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
TimePickerComponent.propDecorators = {
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    placeholder: [{ type: Input }],
    dayForward: [{ type: Output }],
    dayBackward: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-time-picker',
                template: "<table>\n  <tbody>\n    <tr>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'HH`HOURS`' | translate\"\n          [(ngModel)]=\"hours\"\n          (input)=\"parseValue('hours', 'lastValidHours', 23); initializeMinutes()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleHourScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n      <td>&nbsp;:&nbsp;</td>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'MM`MINUTES`' | translate\"\n          [(ngModel)]=\"minutes\"\n          (input)=\"parseValue('minutes', 'lastValidMinutes', 59); initializeHours()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleMinuteScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TimePickerComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { dayForward: [{
            type: Output
        }], dayBackward: [{
            type: Output
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], placeholder: [{
            type: Input
        }] }); })();

/**
 * The angular module definition for a time picker - it provides FormControl that handles time.
 */
class TimePickerModule {
}
TimePickerModule.ɵfac = function TimePickerModule_Factory(t) { return new (t || TimePickerModule)(); };
TimePickerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TimePickerModule });
TimePickerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule,
            CommonModule$1,
            FormsModule$1,
            ReactiveFormsModule,
            BsDatepickerModule.forRoot(),
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    CommonModule$1,
                    FormsModule$1,
                    ReactiveFormsModule,
                    BsDatepickerModule.forRoot(),
                    CommonModule
                ],
                exports: [TimePickerComponent],
                declarations: [TimePickerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TimePickerModule, { declarations: function () { return [TimePickerComponent]; }, imports: function () { return [FormsModule, CommonModule$1,
        FormsModule$1,
        ReactiveFormsModule, ɵngcc6.BsDatepickerModule, CommonModule]; }, exports: function () { return [TimePickerComponent]; } }); })();

/**
 * The angular module definition for a date-time picker - it provides FormControl that handles date and time.
 * @exports DateTimePickerComponent
 */
class DateTimePickerModule {
}
DateTimePickerModule.ɵfac = function DateTimePickerModule_Factory(t) { return new (t || DateTimePickerModule)(); };
DateTimePickerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DateTimePickerModule });
DateTimePickerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule,
            CommonModule$1,
            FormsModule$1,
            ReactiveFormsModule,
            BsDatepickerModule.forRoot(),
            CommonModule,
            TimePickerModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateTimePickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    CommonModule$1,
                    FormsModule$1,
                    ReactiveFormsModule,
                    BsDatepickerModule.forRoot(),
                    CommonModule,
                    TimePickerModule,
                ],
                exports: [DateTimePickerComponent],
                declarations: [DateTimePickerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DateTimePickerModule, { declarations: function () { return [DateTimePickerComponent]; }, imports: function () { return [FormsModule, CommonModule$1,
        FormsModule$1,
        ReactiveFormsModule, ɵngcc6.BsDatepickerModule, CommonModule, TimePickerModule]; }, exports: function () { return [DateTimePickerComponent]; } }); })();

class TypeaheadTypeComponent extends FieldType {
    constructor(cdRef, translateService) {
        super();
        this.cdRef = cdRef;
        this.translateService = translateService;
        this.match = false;
        this.placeholder$ = defer(() => { var _a; return of((_a = this.to) === null || _a === void 0 ? void 0 : _a.placeholder); }).pipe(switchMap(placeholder => placeholder
            ? of(placeholder)
            : this.defaultPlaceholder$.pipe(startWith(this.translateService.instant(gettext('Start typing to search'))))));
        this.defaultPlaceholder$ = defer(() => { var _a, _b, _c; return isObservable((_a = this.to) === null || _a === void 0 ? void 0 : _a.c8yForOptions) ? (_b = this.to) === null || _b === void 0 ? void 0 : _b.c8yForOptions : of((_c = this.to) === null || _c === void 0 ? void 0 : _c.c8yForOptions); }).pipe(map(({ data }) => get(data[0], this.labelProp || 'name')), map(example => {
            return !!example
                ? this.translateService.instant(gettext('Start typing to search, for example, {{ example }}'), { example })
                : this.translateService.instant(gettext('No items'));
        }));
        this.excludeLabelProp = false;
    }
    ngOnInit() {
        if (this.to) {
            if (this.to.excludeDisplayProperty) {
                this.excludeLabelProp = this.to.excludeDisplayProperty;
            }
            if (this.to.displayProperty) {
                this.setPipe('');
                this.labelProp = this.to.displayProperty;
                this.valueProps = this.to.valueProperties;
            }
            else {
                console.error('To correctly use the typeahead select you need to specify displayProperty: string within templateOptions!');
            }
        }
    }
    selectOption(opt) {
        if (this.valueProps && this.valueProps.length > 0) {
            const pickList = this.excludeLabelProp
                ? this.valueProps
                : [...this.valueProps, this.labelProp];
            this.formControl.setValue(pick(opt, pickList));
            this.selected = { [this.labelProp]: opt[this.labelProp] };
        }
        else {
            this.formControl.setValue(opt);
        }
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterPipe = pipe(map((data) => {
            return data.filter((el) => el[this.labelProp] &&
                el[this.labelProp].toLowerCase().indexOf(filterStr.toLowerCase()) > -1);
        }), tap(data => {
            this.match = data.length > 0;
            this.cdRef.detectChanges();
        }));
    }
}
TypeaheadTypeComponent.ɵfac = function TypeaheadTypeComponent_Factory(t) { return new (t || TypeaheadTypeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService)); };
TypeaheadTypeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TypeaheadTypeComponent, selectors: [["c8y-typeahead-type"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 18, consts: [[3, "required", "placeholder", "displayProperty", "selected", "allowFreeEntries", "container", "disabled", "formControl", "formlyAttributes", "onSearch"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "click", 4, "c8yFor", "c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForLoadingTemplate"], ["notFoundTemplate", ""], ["loading", ""], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], [3, "text", "pattern"], ["class", "bg-gray-lighter p-8", 4, "ngIf"], [1, "bg-gray-lighter", "p-8"], ["translate", ""], [1, "text-center", "p-t-8", "p-relative"]], template: function TypeaheadTypeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-typeahead", 0);
        ɵngcc0.ɵɵlistener("onSearch", function TypeaheadTypeComponent_Template_c8y_typeahead_onSearch_0_listener($event) { return ctx.setPipe($event); });
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, TypeaheadTypeComponent_c8y_li_2_Template, 2, 2, "c8y-li", 1);
        ɵngcc0.ɵɵtemplate(3, TypeaheadTypeComponent_ng_template_3_Template, 1, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(5, TypeaheadTypeComponent_ng_template_5_Template, 2, 0, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(4);
        const _r3 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showError);
        ɵngcc0.ɵɵproperty("required", (ctx.to == null ? null : ctx.to.required) || false)("placeholder", ɵngcc0.ɵɵpipeBind1(1, 16, ctx.placeholder$))("displayProperty", ctx.to == null ? null : ctx.to.displayProperty)("selected", ctx.selected)("allowFreeEntries", (ctx.to == null ? null : ctx.to.allowFreeEntries) || false)("container", (ctx.to == null ? null : ctx.to.container) || "")("disabled", ctx.to == null ? null : ctx.to.disabled)("formControl", ctx.formControl)("formlyAttributes", ctx.field);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.to == null ? null : ctx.to.c8yForOptions)("c8yForLoadMore", (ctx.to == null ? null : ctx.to.loadMore) || "auto")("c8yForPipe", ctx.filterPipe)("c8yForNotFound", _r1)("c8yForLoadingTemplate", _r3);
    } }, directives: [TypeaheadComponent, ɵngcc14.RequiredValidator, ɵngcc14.NgControlStatus, ɵngcc14.FormControlDirective, ɵngcc18.FormlyAttributes, ForOfDirective, ListItemComponent, HighlightComponent, ɵngcc7.NgIf, C8yTranslateDirective, LoadingComponent], pipes: [ɵngcc7.AsyncPipe], encapsulation: 2, changeDetection: 0 });
TypeaheadTypeComponent.CONFIG = {
    types: [{ name: 'typeahead', component: TypeaheadTypeComponent }]
};
TypeaheadTypeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: TranslateService$1 }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TypeaheadTypeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-typeahead-type',
                template: "<c8y-typeahead\n  [required]=\"to?.required || false\"\n  [placeholder]=\"placeholder$ | async\"\n  [displayProperty]=\"to?.displayProperty\"\n  [selected]=\"selected\"\n  [allowFreeEntries]=\"to?.allowFreeEntries || false\"\n  [container]=\"to?.container || ''\"\n  [disabled]=\"to?.disabled\"\n  (onSearch)=\"setPipe($event)\"\n  [formControl]=\"formControl\"\n  [class.is-invalid]=\"showError\"\n  [formlyAttributes]=\"field\">\n\n  <c8y-li *c8yFor=\"let opt of to?.c8yForOptions; loadMore: to?.loadMore || 'auto'; pipe: filterPipe; notFound: notFoundTemplate; loadingTemplate: loading;\"\n          (click)=\"selectOption(opt); setPipe('')\"\n          class=\"p-l-8 p-r-8 c8y-list__item--link\">\n    <c8y-highlight [text]=\"opt[labelProp]\" [pattern]=\"pattern\"></c8y-highlight>\n  </c8y-li>\n  <ng-template #notFoundTemplate>\n    <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"pattern.length > 0 && !match\">\n      <p><strong translate>No match found.</strong></p>\n    </c8y-li>\n  </ng-template>\n  <ng-template #loading>\n    <c8y-li class=\"text-center p-t-8 p-relative\">\n      <c8y-loading></c8y-loading>\n    </c8y-li>\n  </ng-template>\n</c8y-typeahead>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc4.TranslateService }]; }, null); })();

const FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldFile,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent,
    FieldDate,
    FieldDateTime,
    TypeaheadTypeComponent
];
function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(type => type['CONFIG']).reduce((formlyConfig, typeConfig) => (Object.assign(Object.assign({}, formlyConfig), { types: [...formlyConfig.types, ...(typeConfig.types || [])], wrappers: [...formlyConfig.wrappers, ...(typeConfig.wrappers || [])] })), { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
class DynamicFormsUIThemeModule {
}
DynamicFormsUIThemeModule.ɵfac = function DynamicFormsUIThemeModule_Factory(t) { return new (t || DynamicFormsUIThemeModule)(); };
DynamicFormsUIThemeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DynamicFormsUIThemeModule });
DynamicFormsUIThemeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: FORMLY_CONFIG,
            useFactory: fieldTypeFactory,
            multi: true
        }
    ], imports: [[
            CommonModule$1,
            CommonModule,
            PopoverModule,
            ReactiveFormsModule,
            C8yTranslateModule,
            DropAreaModule,
            FormsModule,
            FormlyModule,
            FormlySelectModule,
            DateTimePickerModule,
            SelectModule,
            ListGroupModule,
            SearchModule,
            BsDatepickerModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicFormsUIThemeModule, [{
        type: NgModule,
        args: [{
                declarations: [...FIELD_TYPES],
                entryComponents: [...FIELD_TYPES],
                imports: [
                    CommonModule$1,
                    CommonModule,
                    PopoverModule,
                    ReactiveFormsModule,
                    C8yTranslateModule,
                    DropAreaModule,
                    FormsModule,
                    FormlyModule,
                    FormlySelectModule,
                    DateTimePickerModule,
                    SelectModule,
                    ListGroupModule,
                    SearchModule,
                    BsDatepickerModule
                ],
                providers: [
                    {
                        provide: FORMLY_CONFIG,
                        useFactory: fieldTypeFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicFormsUIThemeModule, { declarations: function () { return [FieldCheckbox, ArrayTypeComponent, WrapperFormField, FieldFile, FieldInput, FieldRadio, ObjectTypeComponent, FieldDate, FieldDateTime, TypeaheadTypeComponent]; }, imports: function () { return [CommonModule$1, CommonModule, PopoverModule,
        ReactiveFormsModule, C8yTranslateModule, DropAreaModule, FormsModule, FormlyModule,
        FormlySelectModule, DateTimePickerModule, SelectModule, ListGroupModule, SearchModule, BsDatepickerModule]; } }); })();

class TranslateExtension {
    constructor(translate, parser) {
        this.translate = translate;
        this.parser = parser;
    }
    prePopulate(field) {
        const to = field.templateOptions || {};
        if (!to.label || to._translated) {
            return;
        }
        to._translated = true;
        field.expressionProperties = Object.assign(Object.assign({}, (field.expressionProperties || {})), { 'templateOptions.label': to.label ? this.translate.stream(to.label) : to.label, 'templateOptions.description': to.description
                ? this.translate.stream(to.description)
                : to.description, 'templateOptions.placeholder': to.placeholder
                ? combineLatest([
                    this.translate.stream(to.placeholder),
                    this.translate.stream(gettext('e.g. {{ example }}'))
                ]).pipe(map(([placeholder, expression]) => this.parser.interpolate(expression, { example: placeholder })))
                : to.placeholder, 'templateOptions.options': (isObservable(to.options) ? to.options : of(to.options)).pipe(map((options) => (options || []).map(option => (Object.assign(Object.assign({}, option), { label: this.translate.instant(option.label) }))))) });
    }
}
function registerTranslateExtension(translate, parser) {
    return {
        extensions: [
            {
                name: 'translate',
                extension: new TranslateExtension(translate, parser)
            }
        ]
    };
}

const ɵ0$1 = registerTranslateExtension;
class I18nModule {
}
I18nModule.ɵfac = function I18nModule_Factory(t) { return new (t || I18nModule)(); };
I18nModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: I18nModule });
I18nModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: FORMLY_CONFIG,
            multi: true,
            useFactory: ɵ0$1,
            deps: [TranslateService$1, TranslateParser]
        }
    ], imports: [[FormlyModule, C8yTranslateModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(I18nModule, [{
        type: NgModule,
        args: [{
                imports: [FormlyModule, C8yTranslateModule],
                providers: [
                    {
                        provide: FORMLY_CONFIG,
                        multi: true,
                        useFactory: ɵ0$1,
                        deps: [TranslateService$1, TranslateParser]
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(I18nModule, { imports: function () { return [FormlyModule, C8yTranslateModule]; } }); })();

class C8yJSONSchema extends FormlyJsonschema {
    toFieldConfig(schema, options) {
        const config = super.toFieldConfig(schema, this.c8yOptions((options || {}).map));
        if (Array.isArray(config.fieldGroup)) {
            config.fieldGroup.forEach((field) => {
                if (field.type === 'array' && field.templateOptions.required) {
                    field.fieldArray.templateOptions.required = true;
                }
            });
        }
        return config;
    }
    c8yOptions(map) {
        return {
            map(mappedField, mapSource) {
                let result = mappedField;
                /** `const` type is represented as hidden input */
                if (mapSource.const) {
                    result = Object.assign(Object.assign({}, result), { defaultValue: mapSource.const, templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'hidden' }) });
                }
                /** `writeOnly` field represented as password input */
                if (mapSource.writeOnly) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'password', autocomplete: 'off' }) });
                }
                /** `examples` values used as placeholder */
                if (mapSource.examples) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { placeholder: mapSource.examples.join(', ') }) });
                }
                /** `enum` field represented as radio button group */
                if (mapSource.enum) {
                    result = Object.assign(Object.assign({}, result), { type: 'radio' });
                }
                /** fields with `contentMediaType` or `contentEncoding` are represented as file inputs */
                if (mapSource.contentMediaType || mapSource.contentEncoding) {
                    result = Object.assign(Object.assign({}, result), { type: 'file', templateOptions: Object.assign(Object.assign({}, result.templateOptions), { accept: mapSource.contentMediaType, maxAllowedFiles: 1, contentEncoding: mapSource.contentEncoding }) });
                }
                /** file extension validation for fields with `allowedFileTypes` */
                if (mapSource.allowedFileTypes) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), (mapSource.allowedFileTypes && {
                            accept: mapSource.allowedFileTypes.join(',')
                        })) });
                }
                /** Provides a way to use templateOptions in JSONSchema forms */
                if (mapSource.templateOptions) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, mapSource.templateOptions), result.templateOptions) });
                }
                return map ? map(result, mapSource) : result;
            }
        };
    }
}
C8yJSONSchema.ɵfac = /*@__PURE__*/ function () { let ɵC8yJSONSchema_BaseFactory; return function C8yJSONSchema_Factory(t) { return (ɵC8yJSONSchema_BaseFactory || (ɵC8yJSONSchema_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(C8yJSONSchema)))(t || C8yJSONSchema); }; }();
C8yJSONSchema.ɵprov = i0.ɵɵdefineInjectable({ factory: function C8yJSONSchema_Factory() { return new C8yJSONSchema(); }, token: C8yJSONSchema, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yJSONSchema, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

function c8yValidationConfigFactory(translate) {
    return {
        validationMessages: [
            {
                name: 'required',
                message() {
                    return translate.stream(ValidationPattern.messages.required);
                }
            },
            {
                name: 'notExisting',
                message() {
                    return translate.stream(gettext('No selection'));
                }
            },
            {
                name: 'pattern',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.pattern, error);
                }
            },
            {
                name: 'minlength',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.minLength, field.templateOptions);
                }
            },
            {
                name: 'min',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.min, field.templateOptions);
                }
            },
            {
                name: 'max',
                message(error, field) {
                    return translate.stream(ValidationPattern.messages.max, field.templateOptions);
                }
            },
            {
                name: 'invalidDateTime',
                message() {
                    return translate.stream(gettext('This date is invalid.'));
                }
            },
            {
                name: 'dateBeforeRangeMin',
                message() {
                    return translate.stream(gettext('This date is before the earliest allowed date.'));
                }
            },
            {
                name: 'dateAfterRangeMax',
                message() {
                    return translate.stream(gettext('This date is after the latest allowed date.'));
                }
            }
        ]
    };
}

const ɵ0 = c8yValidationConfigFactory;
class ValidationModule {
}
ValidationModule.ɵfac = function ValidationModule_Factory(t) { return new (t || ValidationModule)(); };
ValidationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ValidationModule });
ValidationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: FORMLY_CONFIG,
            multi: true,
            useFactory: ɵ0,
            deps: [TranslateService$1]
        }
    ], imports: [[C8yTranslateModule, FormlyModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ValidationModule, [{
        type: NgModule,
        args: [{
                imports: [C8yTranslateModule, FormlyModule],
                providers: [
                    {
                        provide: FORMLY_CONFIG,
                        multi: true,
                        useFactory: ɵ0,
                        deps: [TranslateService$1]
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ValidationModule, { imports: function () { return [C8yTranslateModule, FormlyModule]; } }); })();

class DynamicFormsModule {
}
DynamicFormsModule.ɵfac = function DynamicFormsModule_Factory(t) { return new (t || DynamicFormsModule)(); };
DynamicFormsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DynamicFormsModule });
DynamicFormsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [C8yJSONSchema], imports: [[
            CommonModule$1,
            ReactiveFormsModule,
            I18nModule,
            ValidationModule,
            DynamicFormsUIThemeModule,
            FormlyModule.forRoot()
        ], FormlyModule, ReactiveFormsModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicFormsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule$1,
                    ReactiveFormsModule,
                    I18nModule,
                    ValidationModule,
                    DynamicFormsUIThemeModule,
                    FormlyModule.forRoot()
                ],
                providers: [C8yJSONSchema],
                exports: [FormlyModule, ReactiveFormsModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicFormsModule, { imports: function () { return [CommonModule$1,
        ReactiveFormsModule, I18nModule, ValidationModule, DynamicFormsUIThemeModule, ɵngcc18.FormlyModule]; }, exports: function () { return [FormlyModule, ReactiveFormsModule]; } }); })();

/**
 *  Generates simple array formFieldConfig
 *   @returns FormlyFieldConfig[]
 */
function getBasicInputArrayFormFieldConfig(config) {
    return [
        {
            key: config.key,
            type: 'array',
            defaultValue: [''],
            templateOptions: {
                required: !config.optional,
                addText: config.addText,
            },
            fieldArray: {
                type: 'string',
                templateOptions: {
                    required: !config.optional,
                    label: config.label,
                    tooltip: config.tooltip,
                    placeholder: config.placeholder
                },
            },
        },
    ];
}

/**
 * C8y dynamic component.
 * ## Example:
 *
 * register component in HOOK in module:
 * ```typescript
 *  import { HOOK_COMPONENT } from '@c8y/ngx-components';
 *
 * @NgModule({
 *  ...,
 *  providers: [{
 *      provide: HOOK_COMPONENT,
 *      multi: true,
 *      useValue: [{
 *          id: 'test-component',
 *          label: 'My test component',
 *          description: 'this is test component',
 *          component: TestComponent
 *      }],
 *  ...
 *  }]
 *
 * ```
 * Showing dynamic component:
 * ```html
 * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
 * ```
 */
class DynamicComponentComponent {
    /**
     * @ignore only DI
     */
    constructor(componentFactoryResolver, dynamicComponentService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dynamicComponentService = dynamicComponentService;
        /**
         * DynamicComponents can have two modes, an edit (config) and an view (component) mode.
         * By default it is shown in the component mode.
         */
        this.mode = 'component';
        /**
         * Disable this to hide the error that is shown if the component was not found.
         */
        this.notFoundError = true;
        /**
         * @ignore
         */
        this.expandErrorDetails = false;
    }
    /**
     * Calls the dynamic component life cycle hook. Currently only
     * supporting onBeforeSave, a hook which is called before a config component
     * is saved.
     */
    callLifeCycleHooks() {
        return this.callOnBeforeSaveHook();
    }
    /**
     * @ignore
     */
    ngOnChanges() {
        return __awaiter(this, void 0, void 0, function* () {
            const cmp = yield this.dynamicComponentService.getById(this.componentId);
            this.loadComponent(cmp);
        });
    }
    loadComponent(dynamicComponent) {
        try {
            this.error = undefined;
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.mode === 'component' ? dynamicComponent.component : dynamicComponent.configComponent);
            this.host.clear();
            this.componentRef = this.host.createComponent(componentFactory);
            this.componentRef.instance.config = this.config;
        }
        catch (ex) {
            this.error = ex;
        }
    }
    callOnBeforeSaveHook() {
        if (!this.componentRef) {
            return of(true);
        }
        const hook = this.componentRef.instance.onBeforeSave;
        if (hook) {
            const result = hook.call(this.componentRef.instance, this.config);
            if (isUndefined(result)) {
                return of(true);
            }
            return isObservable(result) ? result : of(result);
        }
        return of(true);
    }
}
DynamicComponentComponent.ɵfac = function DynamicComponentComponent_Factory(t) { return new (t || DynamicComponentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(DynamicComponentService)); };
DynamicComponentComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DynamicComponentComponent, selectors: [["c8y-dynamic-component"]], viewQuery: function DynamicComponentComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c81, 7, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.host = _t.first);
    } }, inputs: { mode: "mode", notFoundError: "notFoundError", componentId: "componentId", config: "config" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 1, consts: [["host", ""], ["class", "alert alert-warning m-8", "role", "alert", 4, "ngIf"], ["role", "alert", 1, "alert", "alert-warning", "m-8"], [1, "message"], [1, "text-muted", "m-t-8"], [1, "btn", "btn-clean", 3, "click"], ["c8yIcon", "chevron-down"], ["translate", "", 4, "ngIf"], [3, "collapse", "isAnimated"], ["translate", ""]], template: function DynamicComponentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DynamicComponentComponent_ng_template_0_Template, 0, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, DynamicComponentComponent_div_2_Template, 12, 9, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.notFoundError && ctx.error);
    } }, directives: [ɵngcc7.NgIf, ɵngcc13.CollapseDirective, C8yTranslateDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
DynamicComponentComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: DynamicComponentService }
];
DynamicComponentComponent.propDecorators = {
    componentId: [{ type: Input }],
    config: [{ type: Input }],
    mode: [{ type: Input }],
    notFoundError: [{ type: Input }],
    host: [{ type: ViewChild, args: ['host', { read: ViewContainerRef, static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicComponentComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-dynamic-component',
                template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"notFoundError && error\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted m-t-8\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i c8yIcon=\"chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: DynamicComponentService }]; }, { mode: [{
            type: Input
        }], notFoundError: [{
            type: Input
        }], componentId: [{
            type: Input
        }], config: [{
            type: Input
        }], host: [{
            type: ViewChild,
            args: ['host', { read: ViewContainerRef, static: true }]
        }] }); })();

class DynamicComponentModule {
}
DynamicComponentModule.ɵfac = function DynamicComponentModule_Factory(t) { return new (t || DynamicComponentModule)(); };
DynamicComponentModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DynamicComponentModule });
DynamicComponentModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [DynamicComponentService, { provide: RESOLVING_COMPONENT_WAIT_TIME, useValue: 5000 }], imports: [[CommonModule$1, CollapseModule, RouterModule$1.forChild([]), I18nModule$1]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicComponentModule, [{
        type: NgModule,
        args: [{
                declarations: [DynamicComponentComponent],
                imports: [CommonModule$1, CollapseModule, RouterModule$1.forChild([]), I18nModule$1],
                exports: [DynamicComponentComponent],
                providers: [DynamicComponentService, { provide: RESOLVING_COMPONENT_WAIT_TIME, useValue: 5000 }]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicComponentModule, { declarations: function () { return [DynamicComponentComponent]; }, imports: function () { return [CommonModule$1, CollapseModule, ɵngcc1.RouterModule, I18nModule$1]; }, exports: function () { return [DynamicComponentComponent]; } }); })();

class DashboardChildActionComponent {
}
DashboardChildActionComponent.ɵfac = function DashboardChildActionComponent_Factory(t) { return new (t || DashboardChildActionComponent)(); };
DashboardChildActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DashboardChildActionComponent, selectors: [["c8y-dashboard-child-action"]], viewQuery: function DashboardChildActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""]], template: function DashboardChildActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, DashboardChildActionComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
DashboardChildActionComponent.propDecorators = {
    template: [{ type: ViewChild, args: ['template', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardChildActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-dashboard-child-action',
                template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>\n"
            }]
    }], null, { template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }] }); })();

class DashboardChildTitleComponent {
}
DashboardChildTitleComponent.ɵfac = function DashboardChildTitleComponent_Factory(t) { return new (t || DashboardChildTitleComponent)(); };
DashboardChildTitleComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DashboardChildTitleComponent, selectors: [["c8y-dashboard-child-title"]], ngContentSelectors: _c1, decls: 2, vars: 0, consts: [[1, "card-title"]], template: function DashboardChildTitleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardChildTitleComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-dashboard-child-title',
                template: "<div class=\"card-title\">\n  <ng-content></ng-content>\n</div>\n"
            }]
    }], null, null); })();

class DashboardChildChange {
    constructor(childToChange) {
        this.MIN_WIDTH = 2;
        this.MIN_HEIGHT = 1;
        this.PIXEL_SIZE_THRESHOLD = 10;
        this.diffX = 0;
        this.diffY = 0;
        this.dashboard = childToChange.dashboard;
        this.children = childToChange.dashboard.children
            ? childToChange.dashboard.children.filter(child => childToChange !== child)
            : [];
        this.child = childToChange;
    }
    get resize$() {
        return this.child.dragSource.moved.pipe(map(move => this.getPixelSize(move)), tap(resizeDimension => this.setPixelSize(resizeDimension)), map(resizeDimension => this.getDimensionSize(resizeDimension)), distinctUntilChanged((prev, next) => prev.width === next.width && prev.height === next.height), map(dimension => this.setDimension(dimension)), this.arrangePipe());
    }
    get drag$() {
        return this.child.dragSource.moved.pipe(map(move => this.getDimensionPosition(move)), filter(dimension => dimension.x >= 0 &&
            dimension.x <= this.dashboard.columns - this.child.width &&
            dimension.y >= 0), distinctUntilChanged((prev, next) => prev.x === next.x && prev.y === next.y), this.arrangePipe());
    }
    findFreeDimension() {
        let y = -1;
        let x = 0;
        let found = false;
        const { width, height } = this.child;
        if (width > this.dashboard.columns) {
            throw new Error('The child does not fit on the current dashboard.');
        }
        do {
            x = 0;
            y++;
            while (x + width <= this.dashboard.columns) {
                if (this.getCollided({ x, y, width, height }).length === 0) {
                    found = true;
                    break;
                }
                x++;
            }
        } while (!found);
        return { x, y, width, height };
    }
    collapseUpAll() {
        return sortBy([this.child, ...this.children], ['y']).forEach(w => {
            const ds = new DashboardChildChange(w);
            const newPosition = ds.collapseUp(w);
            ds.setDimension(newPosition);
        });
    }
    arrangeAll(arrange) {
        const { current, scan, spacing, origin } = arrange;
        const collided = this.getCollided(current, sortBy(scan, ['y']));
        return collided.map(child => {
            const ds = new DashboardChildChange(child);
            ds.setDimension(Object.assign(Object.assign({}, child), { y: spacing }));
            return {
                current: child,
                scan: scan.filter(w => w !== child),
                spacing: child.y + child.height,
                origin
            };
        });
    }
    arrangePipe() {
        return pipe(map((dimension) => ({
            current: dimension,
            scan: this.children,
            spacing: dimension.y + dimension.height,
            origin: Object.assign({}, dimension)
        })), expand((dimensions) => this.arrangeAll(dimensions)), map(({ origin }) => origin), map(dimension => this.setDimension(dimension, true)), tap(() => this.collapseUpAll()));
    }
    collapseUp(dimension) {
        let { y } = dimension;
        while (y > 0) {
            if (this.getCollided(Object.assign(Object.assign({}, dimension), { y: y - 1 })).length !== 0) {
                break;
            }
            y--;
        }
        return Object.assign(Object.assign({}, dimension), { y });
    }
    setDimension(dimension, notIfColliding = false) {
        if (notIfColliding && this.getCollided(dimension).length > 0) {
            return;
        }
        this.child.x = dimension.x;
        this.child.y = dimension.y;
        if (dimension.width >= this.MIN_WIDTH &&
            dimension.x + dimension.width <= this.dashboard.columns) {
            this.child.width = dimension.width;
        }
        else if (dimension.width < this.MIN_WIDTH) {
            dimension.width = this.MIN_WIDTH;
        }
        else {
            dimension.width = this.dashboard.columns - dimension.x;
        }
        if (dimension.height >= this.MIN_HEIGHT) {
            this.child.height = dimension.height;
        }
        else {
            dimension.height = this.MIN_WIDTH;
        }
        return dimension;
    }
    setPixelSize({ width, height }) {
        if (width >= this.dashboard.columnSize * this.MIN_WIDTH - this.dashboard.gap) {
            this.child.pxWidth = width + this.PIXEL_SIZE_THRESHOLD;
        }
        if (height >= this.dashboard.rowSize * this.MIN_HEIGHT - this.dashboard.gap) {
            this.child.pxHeight = height + this.PIXEL_SIZE_THRESHOLD;
        }
    }
    getPixelSize(moveEvent) {
        const draggedElement = this.child.element.nativeElement;
        if (!this.diffX) {
            const rect = draggedElement.getBoundingClientRect();
            this.diffX = rect.left;
            this.diffY = rect.top;
        }
        const { x, y } = moveEvent.pointerPosition;
        const width = Math.round(x - this.diffX);
        const height = Math.round(y - this.diffY);
        return { width, height, pointer: { x, y } };
    }
    getDimensionSize(resizePosition) {
        const { x, y } = this.child;
        const ds = this.dashboard.dashboardRect;
        const column = this.dashboard.columnSize;
        const row = this.dashboard.rowSize + this.dashboard.gap;
        const width = Math.round((resizePosition.pointer.x - ds.left + this.dashboard.gap) / column) - x;
        const height = Math.round((resizePosition.pointer.y - ds.top + this.dashboard.gap) / row) - y;
        return { x, y, width, height };
    }
    getDimensionPosition(moveEvent) {
        const draggedElement = moveEvent.source.element.nativeElement.nextElementSibling;
        if (!this.diffX) {
            const rect = draggedElement.getBoundingClientRect();
            this.diffX = moveEvent.pointerPosition.x - rect.left;
            this.diffY = moveEvent.pointerPosition.y - rect.top;
        }
        const left = moveEvent.pointerPosition.x - this.diffX;
        const top = moveEvent.pointerPosition.y - this.diffY;
        const { width, height } = this.child;
        const ds = this.dashboard.dashboardRect;
        const column = this.dashboard.columnSize;
        const row = this.dashboard.rowSize + this.dashboard.gap / 2;
        const x = Math.round((left - ds.left) / column);
        const y = Math.round((top - ds.top) / row);
        return { x, y, width, height };
    }
    doesCollide(a, b) {
        if (b.x === undefined) {
            return false;
        }
        return !(a.y + a.height - 1 < b.y ||
            a.y > b.y + b.height - 1 ||
            a.x + a.width - 1 < b.x ||
            a.x > b.x + b.width - 1);
    }
    getCollided(currentDimension, dimensions = this.children) {
        const collided = dimensions.filter(dimension => this.doesCollide(currentDimension, dimension));
        return collided;
    }
}

/**
 * Displays a CSS grid which is customizable by the customer. You can set
 * `c8y-dashboard-child`-components on it or position any element on it by
 * setting the grid CSS properties. On change (resize, or rearrange) the
 * component emits an change event.
 *
 * ## Example:
 *
 * ```html
 * <c8y-title>Hello from outlet</c8y-title>
 *
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i c8yIcon="plus-circle"></i> Add random</button>
 * </c8y-action-bar-item>
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="isFrozen = !isFrozen">
 *     <i [c8yIcon]="isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *   </button>
 * </c8y-action-bar-item>
 *
 * <c8y-dashboard (dashboardChange)="dashboardChange($event)">
 *   <c8y-dashboard-child
 *     [isFrozen]="isFrozen"
 *     title="dynamic"
 *     *ngFor="let widget of widgets"
 *     #current
 *   >
 *     x: {{ current.x }}<br />
 *     y: {{ current.y }}<br />
 *     width: {{ current.width }}<br />
 *     height: {{ current.height }}<br />
 *   </c8y-dashboard-child>
 *   <c8y-dashboard-child
 *     #cpWidget
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="1"
 *     [width]="3"
 *     [height]="2"
 *     [data]="widget"
 *     [class]="'card card-dashboard panel-title-regular panel-content-branded panel-title-overlay'"
 *   >
 *     <c8y-dashboard-child-title>
 *       <span>World!</span>
 *     </c8y-dashboard-child-title>
 *     x: {{ cpWidget.x }}<br />
 *     y: {{ cpWidget.y }}<br />
 *     width: {{ cpWidget.width }}<br />
 *     height: {{ cpWidget.height }}<br />
 *   </c8y-dashboard-child>
 *   <c8y-dashboard-child
 *     #cpWidget2
 *     [isFrozen]="isFrozen"
 *     [x]="8"
 *     [y]="1"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card card-dashboard panel-content-dark'"
 *   >
 *     <c8y-dashboard-child-title>
 *       <span>Hello!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget2.isFrozen = !cpWidget2.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget2.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget2.x }}<br />
 *     y: {{ cpWidget2.y }}<br />
 *     width: {{ cpWidget2.width }}<br />
 *     height: {{ cpWidget2.height }}<br />
 *   </c8y-dashboard-child>
 *
 *   <c8y-dashboard-child
 *     #cpWidget3
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="3"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card-dashboard panel-content-transparent'"
 *   >
 *     <c8y-dashboard-child-title *ngIf="showTitle">
 *       <span>Transparent!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="showTitle = !showTitle; (false)">
 *         <i [c8yIcon]="'heading'"></i> Hide/show title
 *       </a>
 *     </c8y-dashboard-child-action>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget3.x }}<br />
 *     y: {{ cpWidget3.y }}<br />
 *     width: {{ cpWidget3.width }}<br />
 *     height: {{ cpWidget3.height }}<br />
 *   </c8y-dashboard-child>
 * </c8y-dashboard>
 * ```
 */
class DashboardComponent {
    constructor(element, sanitizer) {
        this.element = element;
        this.sanitizer = sanitizer;
        /**
         * All children in that dashboard.
         */
        this.children = [];
        /**
         * The amount of columns on that dashboard.
         */
        this.columns = 12;
        /**
         * The spacing between each children in pixel.
         */
        this.gap = 12;
        /**
         * The amount of rows to dusplay. Set to auto to
         * auto extend the rows.
         */
        this.rows = 'auto';
        /**
         * An event fired if the dashboard was changed.
         */
        this.dashboardChange = new EventEmitter();
        this.lastRow = 1;
        this.DEFAULT_ROW_SIZE = 68;
    }
    /**
     * The current column size.
     */
    get columnSize() {
        return this.dashboardRect.width / this.columns;
    }
    /**
     * The current row size.
     */
    get rowSize() {
        return this.rows === 'auto' ? this.DEFAULT_ROW_SIZE : this.calculateRowSize();
    }
    /**
     * Returns all positioning styles. Nasty workaround for that issue:
     * https://github.com/angular/angular/issues/9343
     */
    get inlineStyle() {
        return this.sanitizer.bypassSecurityTrustStyle(`
        -ms-grid-columns: (1fr)[${this.columns}];
        grid-template-columns: repeat(${this.columns}, 1fr);
        ${this.rows !== 'auto' ? `grid-template-rows: repeat(${this.rows}, 1fr);` : ''}
        grid-auto-rows: ${this.rowSize + this.gap}px;
        -ms-grid-rows: (${this.rowSize + this.gap}px)[${this.rows === 'auto' ? this.lastRow : this.rows}];
        margin: -${this.gap}px -${this.gap}px 0;
      `);
    }
    ngAfterContentInit() {
        this.onResize();
    }
    onResize() {
        this.updateRectSize();
    }
    /**
     * Updates the current rect size of the dashboard.
     */
    updateRectSize() {
        const ele = this.element.nativeElement;
        this.dashboardRect = ele.getBoundingClientRect();
    }
    emitChange(widget) {
        this.dashboardChange.emit({ source: widget, children: this.children });
    }
    calculateRowSize() {
        return this.dashboardRect.height / this.rows;
    }
}
DashboardComponent.ɵfac = function DashboardComponent_Factory(t) { return new (t || DashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc20.DomSanitizer)); };
DashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DashboardComponent, selectors: [["c8y-dashboard"]], hostAttrs: [1, "c8y-grid-dashboard", "dashboard-grid"], hostVars: 1, hostBindings: function DashboardComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("resize", function DashboardComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, ɵngcc0.ɵɵresolveWindow);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("style", ctx.inlineStyle, ɵngcc0.ɵɵsanitizeStyle);
    } }, inputs: { columns: "columns", gap: "gap", rows: "rows" }, outputs: { dashboardChange: "dashboardChange" }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function DashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DashboardComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DomSanitizer }
];
DashboardComponent.propDecorators = {
    columns: [{ type: Input }],
    gap: [{ type: Input }],
    rows: [{ type: Input }],
    dashboardChange: [{ type: Output }],
    inlineStyle: [{ type: HostBinding, args: ['attr.style',] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-dashboard',
                template: "<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-grid-dashboard dashboard-grid'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc20.DomSanitizer }]; }, { columns: [{
            type: Input
        }], gap: [{
            type: Input
        }], rows: [{
            type: Input
        }], dashboardChange: [{
            type: Output
        }], inlineStyle: [{
            type: HostBinding,
            args: ['attr.style']
        }], onResize: [{
            type: HostListener,
            args: ['window:resize']
        }] }); })();

/**
 * A dashboard child allows to position elements
 * correctly on a grid. The user can then resize and
 * rearrange the elements, as long as they are not `frozen`.
 *
 * By setting `c8y-dashboard-child-actions` and
 * `c8y-dashboard-child-title` on the element you can add
 * custom actions or a custom title to the current child.
 *
 * By adding the correct branded classes, you can define
 * the look and feel of the child. By default it is displayed
 * as a card.
 *
 * Example:
 *
 * ```html
 *   <c8y-dashboard-child
 *     #cpWidget3
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="3"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card-dashboard panel-content-transparent'"
 *   >
 *     <c8y-dashboard-child-title *ngIf="showTitle">
 *       <span>Transparent!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="showTitle = !showTitle; (false)">
 *         <i [c8yIcon]="'heading'"></i> Hide/show title
 *       </a>
 *     </c8y-dashboard-child-action>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget3.x }}<br />
 *     y: {{ cpWidget3.y }}<br />
 *     width: {{ cpWidget3.width }}<br />
 *     height: {{ cpWidget3.height }}<br />
 *   </c8y-dashboard-child>
 * ```
 */
class DashboardChildComponent {
    constructor(dashboard, sanitizer, element) {
        this.dashboard = dashboard;
        this.sanitizer = sanitizer;
        this.element = element;
        this.actions = [];
        this.isResize = false;
        this.isDragging = false;
        this.klasses = {};
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        /**
         * The width of the component in grid-columns.
         */
        this.width = 1;
        /**
         * The height of the component in grid-rows.
         */
        this.height = 1;
        /**
         * The margin of the child in pixel.
         */
        this.margin = 12;
        /**
         * If a dashboard is frozen, all children cannot be moved
         * or resized.
         */
        this.isFrozen = false;
        /**
         * The child content is initialized, as soon it is scrolled into viewport
         */
        this.useIntersection = false;
        /**
         * An event fired if a child change is started (dragging or resizing)
         */
        this.changeStart = new EventEmitter();
        /**
         * An event fired if a child change is ended
         */
        this.changeEnd = new EventEmitter();
        /**
         * All classes added to this child
         */
        this.class = {};
        /**
         * An indicator if the child is intersected (that mean visible for the user)
         */
        this.intersected = false;
    }
    /**
     * Updates the pixel width of the child (used for resizing)
     */
    set pxWidth(value) {
        this._pxWidth = `${value}px`;
    }
    /**
     * Updates the pixel height of the child (used for resizing)
     */
    set pxHeight(value) {
        this._pxHeight = `${value}px`;
    }
    /**
     * nasty workaround for that issue:
     * https://github.com/angular/angular/issues/9343
     */
    get inlineStyle() {
        return this.sanitizer.bypassSecurityTrustStyle(`
    grid-column-start: ${this.x + 1};
    grid-row-start: ${this.y + 1};
    grid-column-end: span ${this.width};
    grid-row-end: span ${this.height};
    display: block;
    margin: ${this.margin || 12}px;
    order: ${this.getOrder()};
    `);
    }
    ngOnChanges() {
        this.klasses = Object.assign({ card: true, 'card-dashboard': true, disabled: this.isFrozen, 'on-resize': this.isResize }, this.class);
    }
    ngOnInit() {
        if (this.x === undefined || this.y === undefined) {
            setTimeout(() => this.setDynamicDimension());
        }
        if (this.useIntersection && 'IntersectionObserver' in window) {
            const intersectionObserver = new IntersectionObserver(event => (this.intersected = this.childInView(event[0], intersectionObserver)));
            intersectionObserver.observe(this.element.nativeElement);
        }
        else {
            this.intersected = true;
        }
    }
    ngAfterViewInit() {
        this.dashboard.children.push(this);
    }
    setDynamicDimension() {
        const ds = new DashboardChildChange(this);
        const { x, y } = ds.findFreeDimension();
        this.x = x;
        this.y = y;
        this.dashboard.emitChange(this);
    }
    resizeStarted($event) {
        this.isResize = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        const positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.resize$.subscribe();
        this.changeStart.emit(this);
        this.ngOnChanges();
    }
    dragStarted($event) {
        this.isDragging = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        const positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.drag$.subscribe();
        this.changeStart.emit(this);
    }
    reset($event) {
        this.isResize = false;
        this.isDragging = false;
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        this.ngOnChanges();
        if ($event) {
            $event.source.reset();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
            this.dashboard.emitChange(this);
            this.changeEnd.emit(this);
        }
    }
    ngOnDestroy() {
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
        this.removeSelfFromDashboard();
    }
    removeSelfFromDashboard() {
        const i = this.dashboard.children.indexOf(this);
        if (i >= 0) {
            this.dashboard.children.splice(i, 1);
        }
    }
    getOrder() {
        return `${Math.round((this.y + (this.x + 1) / 100) * 100)}`;
    }
    childInView(event, observer) {
        if (event.isIntersecting) {
            observer.unobserve(event.target);
            return true;
        }
        return false;
    }
}
DashboardChildComponent.ɵfac = function DashboardChildComponent_Factory(t) { return new (t || DashboardChildComponent)(ɵngcc0.ɵɵdirectiveInject(DashboardComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc20.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DashboardChildComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DashboardChildComponent, selectors: [["c8y-dashboard-child"]], contentQueries: function DashboardChildComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DashboardChildActionComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actions = _t);
    } }, hostAttrs: [1, "dashboard-grid-child"], hostVars: 1, hostBindings: function DashboardChildComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("style", ctx.inlineStyle, ɵngcc0.ɵɵsanitizeStyle);
    } }, inputs: { width: "width", height: "height", margin: "margin", isFrozen: "isFrozen", useIntersection: "useIntersection", class: "class", x: "x", y: "y", data: "data" }, outputs: { changeStart: "changeStart", changeEnd: "changeEnd" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c85, decls: 11, vars: 14, consts: [["cdkDropList", ""], ["class", "card-placeholder", 4, "ngIf"], ["cdkDrag", "", 3, "ngClass", "ngStyle", "cdkDragDisabled", "cdkDragStarted", "cdkDragEnded"], ["cdkDragHandle", "", 1, "card-header-actions", "card-header-grid", 3, "ngClass"], ["class", "header-actions", 4, "ngIf"], [1, "card-inner-scroll"], ["class", "resize-handle hidden-xs", "cdkDrag", "", 3, "cdkDragDisabled", "cdkDragStarted", "cdkDragEnded", 4, "ngIf"], ["class", "resize-icon hidden-xs", 4, "ngIf"], ["class", "card-placeholder", 4, "cdkDragPlaceholder"], [1, "card-placeholder"], [1, "header-actions"], ["dropdown", "", "container", "body", "placement", "bottom right", 1, "optionsBtn", "dropdown"], ["href", "", "dropdownToggle", "", 1, "btnIcon", "c8y-dropdown", 3, "title", "click"], [3, "c8yIcon"], ["class", "dropdown-menu dropdown-menu-right", "style", "right:-1px;", 4, "dropdownMenu"], [1, "dropdown-menu", "dropdown-menu-right", 2, "right", "-1px"], [4, "ngFor", "ngForOf"], [4, "ngTemplateOutlet"], ["cdkDrag", "", 1, "resize-handle", "hidden-xs", 3, "cdkDragDisabled", "cdkDragStarted", "cdkDragEnded"], [1, "resize-icon", "hidden-xs"]], template: function DashboardChildComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c82);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DashboardChildComponent_div_1_Template, 1, 0, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵlistener("cdkDragStarted", function DashboardChildComponent_Template_div_cdkDragStarted_2_listener($event) { return ctx.dragStarted($event); })("cdkDragEnded", function DashboardChildComponent_Template_div_cdkDragEnded_2_listener($event) { return ctx.reset($event); });
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵtemplate(5, DashboardChildComponent_div_5_Template, 6, 4, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵprojection(7, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, DashboardChildComponent_div_8_Template, 1, 1, "div", 6);
        ɵngcc0.ɵɵtemplate(9, DashboardChildComponent_div_9_Template, 1, 0, "div", 7);
        ɵngcc0.ɵɵtemplate(10, DashboardChildComponent_div_10_Template, 1, 0, "div", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isResize);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.klasses)("ngStyle", ɵngcc0.ɵɵpureFunction2(8, _c83, ctx._pxWidth, ctx._pxHeight))("cdkDragDisabled", ctx.isFrozen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(11, _c84, !ctx.isFrozen, !ctx.isFrozen));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isFrozen && ctx.actions.length > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isFrozen && !ctx.isDragging);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isFrozen && !ctx.isDragging);
    } }, directives: [ɵngcc21.CdkDropList, ɵngcc7.NgIf, ɵngcc21.CdkDrag, ɵngcc7.NgClass, ɵngcc7.NgStyle, ɵngcc21.CdkDragHandle, ɵngcc21.CdkDragPlaceholder, ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, IconDirective, ɵngcc9.BsDropdownMenuDirective, ɵngcc7.NgForOf, ɵngcc7.NgTemplateOutlet], pipes: [C8yTranslatePipe], encapsulation: 2 });
DashboardChildComponent.ctorParameters = () => [
    { type: DashboardComponent },
    { type: DomSanitizer },
    { type: ElementRef }
];
DashboardChildComponent.propDecorators = {
    actions: [{ type: ContentChildren, args: [DashboardChildActionComponent,] }],
    x: [{ type: Input }],
    y: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input }],
    margin: [{ type: Input }],
    isFrozen: [{ type: Input }],
    useIntersection: [{ type: Input }],
    changeStart: [{ type: Output }],
    changeEnd: [{ type: Output }],
    class: [{ type: Input }],
    inlineStyle: [{ type: HostBinding, args: ['attr.style',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardChildComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-dashboard-child',
                template: "<div cdkDropList>\n  <div *ngIf=\"isResize\" class=\"card-placeholder\"></div>\n  <div\n    [ngClass]=\"klasses\"\n    cdkDrag\n    [ngStyle]=\"{ width: _pxWidth, height: _pxHeight }\"\n    (cdkDragStarted)=\"dragStarted($event)\"\n    (cdkDragEnded)=\"reset($event)\"\n    [cdkDragDisabled]=\"isFrozen\"\n  >\n    <div\n      class=\"card-header-actions card-header-grid\"\n      [ngClass]=\"{ 'drag-handle': !isFrozen, draggableCursor: !isFrozen }\"\n      cdkDragHandle\n    >\n      <ng-content select=\"c8y-dashboard-child-title\"></ng-content>\n      <div class=\"header-actions\" *ngIf=\"!isFrozen && actions.length > 0\">\n        <div class=\"optionsBtn dropdown\" dropdown container=\"body\" placement=\"bottom right\">\n          <a\n            title=\"{{ 'Settings' | translate }}\"\n            href=\"\"\n            class=\"btnIcon c8y-dropdown\"\n            (click)=\"(false)\"\n            dropdownToggle\n          >\n            <i [c8yIcon]=\"'cog'\"></i>\n          </a>\n          <ul\n            class=\"dropdown-menu dropdown-menu-right\"\n            style=\"right:-1px;\"\n            *dropdownMenu\n          >\n            <ng-container *ngFor=\"let action of actions\">\n              <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-inner-scroll\">\n      <ng-content></ng-content>\n    </div>\n    <div\n      *ngIf=\"!isFrozen && !isDragging\"\n      class=\"resize-handle hidden-xs\"\n      cdkDrag\n      [cdkDragDisabled]=\"isFrozen\"\n      (cdkDragStarted)=\"resizeStarted($event)\"\n      (cdkDragEnded)=\"reset($event)\"\n    ></div>\n    <div class=\"resize-icon hidden-xs\" *ngIf=\"!isFrozen && !isDragging\"></div>\n\n    <div *cdkDragPlaceholder class=\"card-placeholder\"></div>\n  </div>\n</div>\n",
                host: {
                    class: 'dashboard-grid-child'
                }
            }]
    }], function () { return [{ type: DashboardComponent }, { type: ɵngcc20.DomSanitizer }, { type: ɵngcc0.ElementRef }]; }, { actions: [{
            type: ContentChildren,
            args: [DashboardChildActionComponent]
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], margin: [{
            type: Input
        }], isFrozen: [{
            type: Input
        }], useIntersection: [{
            type: Input
        }], changeStart: [{
            type: Output
        }], changeEnd: [{
            type: Output
        }], class: [{
            type: Input
        }], inlineStyle: [{
            type: HostBinding,
            args: ['attr.style']
        }], x: [{
            type: Input
        }], y: [{
            type: Input
        }], data: [{
            type: Input
        }] }); })();

class WidgetsDashboardComponent {
    constructor() {
        this.contextDashboard = { updateTarget: true };
        this.settings = {
            isFrozen: false,
            isDisabled: false,
            widgetMargin: 12,
            translateWidgetTitle: false,
            defaultHeight: 4,
            defaultWidth: 4,
            allowFullscreen: false,
            canCopy: true,
            canDelete: true,
            isLoading: false
        };
        this.onAddWidget = new EventEmitter();
        this.onEditWidget = new EventEmitter();
        this.onDeleteWidget = new EventEmitter();
        this.onChangeDashboard = new EventEmitter();
        this.onEditDashboard = new EventEmitter();
        this.onCopyDashboard = new EventEmitter();
        this.onDeleteDashboard = new EventEmitter();
        this.onFreeze = new EventEmitter();
        this.onChangeStart = new EventEmitter();
        this.onChangeEnd = new EventEmitter();
    }
    set _settings(settings) {
        this.settings = Object.assign(Object.assign({}, this.settings), settings);
    }
    toggleFullscreen() {
        const elem = document.body;
        const doc = document;
        if (!this.fullScreen()) {
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            }
            else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
            else if (elem.mozRequestFullScreen) {
                elem.mozRequestFullScreen();
            }
            else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
        }
        else if (doc.exitFullscreen) {
            doc.exitFullscreen();
        }
        else if (doc.msExitFullscreen) {
            doc.msExitFullscreen();
        }
        else if (doc.mozCancelFullScreen) {
            doc.mozCancelFullScreen();
        }
        else if (doc.webkitExitFullscreen) {
            doc.webkitExitFullscreen();
        }
    }
    fullScreen() {
        const doc = document;
        return !!(doc.fullscreenElement ||
            doc.mozFullScreenElement ||
            doc.webkitFullscreenElement ||
            doc.msFullscreenElement);
    }
}
WidgetsDashboardComponent.ɵfac = function WidgetsDashboardComponent_Factory(t) { return new (t || WidgetsDashboardComponent)(); };
WidgetsDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WidgetsDashboardComponent, selectors: [["c8y-widgets-dashboard"]], hostAttrs: [1, "dashboard", "c8y-grid-dashboard", 2, "display", "block"], inputs: { contextDashboard: "contextDashboard", _settings: ["settings", "_settings"], widgets: "widgets", context: "context", breadcrumb: "breadcrumb" }, outputs: { onAddWidget: "onAddWidget", onEditWidget: "onEditWidget", onDeleteWidget: "onDeleteWidget", onChangeDashboard: "onChangeDashboard", onEditDashboard: "onEditDashboard", onCopyDashboard: "onCopyDashboard", onDeleteDashboard: "onDeleteDashboard", onFreeze: "onFreeze", onChangeStart: "onChangeStart", onChangeEnd: "onChangeEnd" }, decls: 11, vars: 11, consts: [[4, "ngIf"], [3, "placement", 4, "ngIf"], ["itemClass", "navbar-form", 3, "placement", 4, "ngIf"], [3, "placement", "priority", 4, "ngIf"], ["class", "c8y-empty-state text-center", 4, "ngIf"], ["class", "col-xs-12 text-center", 4, "ngIf"], [3, "dashboardChange", 4, "ngIf"], [3, "icon", "label", "path"], [3, "placement"], [1, "btn", "btn-link", 3, "title", "disabled", "click"], ["c8yIcon", "plus-circle"], ["c8yIcon", "pencil"], [1, "btn", "btn-link", 3, "title", "click"], [3, "c8yIcon"], ["itemClass", "navbar-form", 3, "placement"], ["uib-btn-checkbox", "", 1, "btn", "btn-default", 3, "title", "ngClass", "disabled", "click"], [3, "placement", "priority"], [3, "title", "click"], ["c8yIcon", "clone"], ["translate", "", 1, "m-l-4"], [3, "title", "disabled", "click"], ["c8yIcon", "trash"], [1, "c8y-empty-state", "text-center"], [1, "c8y-icon", "c8y-icon-device", "c8y-icon-duocolor"], ["translate", ""], ["translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"], ["c8y-guide-docs", ""], ["c8y-guide-href", "users-guide/cockpit/#dashboards"], [1, "col-xs-12", "text-center"], [1, "spinner", "p-relative"], [1, "rect1"], [1, "rect2"], [1, "rect3"], [1, "rect4"], [1, "rect5"], [3, "dashboardChange"], ["dashboard", ""], [3, "x", "y", "width", "height", "margin", "isFrozen", "class", "data", "useIntersection", "changeStart", "changeEnd", 4, "ngFor", "ngForOf"], [3, "x", "y", "width", "height", "margin", "isFrozen", "data", "useIntersection", "changeStart", "changeEnd"], ["child", ""], [3, "componentId", "config", 4, "ngIf"], [3, "componentId", "config"]], template: function WidgetsDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, WidgetsDashboardComponent_c8y_title_0_Template, 3, 3, "c8y-title", 0);
        ɵngcc0.ɵɵtemplate(1, WidgetsDashboardComponent_c8y_breadcrumb_1_Template, 2, 3, "c8y-breadcrumb", 0);
        ɵngcc0.ɵɵtemplate(2, WidgetsDashboardComponent_c8y_action_bar_item_2_Template, 6, 8, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵtemplate(3, WidgetsDashboardComponent_c8y_action_bar_item_3_Template, 6, 8, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵtemplate(4, WidgetsDashboardComponent_c8y_action_bar_item_4_Template, 6, 8, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵtemplate(5, WidgetsDashboardComponent_c8y_action_bar_item_5_Template, 4, 9, "c8y-action-bar-item", 2);
        ɵngcc0.ɵɵtemplate(6, WidgetsDashboardComponent_c8y_action_bar_item_6_Template, 6, 5, "c8y-action-bar-item", 3);
        ɵngcc0.ɵɵtemplate(7, WidgetsDashboardComponent_c8y_action_bar_item_7_Template, 6, 6, "c8y-action-bar-item", 3);
        ɵngcc0.ɵɵtemplate(8, WidgetsDashboardComponent_div_8_Template, 5, 1, "div", 4);
        ɵngcc0.ɵɵtemplate(9, WidgetsDashboardComponent_div_9_Template, 7, 0, "div", 5);
        ɵngcc0.ɵɵtemplate(10, WidgetsDashboardComponent_c8y_dashboard_10_Template, 3, 1, "c8y-dashboard", 6);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.settings.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.breadcrumb);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.onAddWidget.observers.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.onEditDashboard.observers.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.settings.allowFullscreen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.onFreeze.observers.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.settings.canCopy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.settings.canDelete && ctx.onDeleteDashboard.observers.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.settings.isLoading && (ctx.widgets == null ? null : ctx.widgets.length) === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.settings.isLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.settings.isLoading);
    } }, directives: [ɵngcc7.NgIf, TitleComponent, BreadcrumbComponent, BreadcrumbItemComponent, ActionBarItemComponent, IconDirective, ɵngcc7.NgClass, C8yTranslateDirective, GuideDocsComponent, GuideHrefDirective, DashboardComponent, ɵngcc7.NgForOf, DashboardChildComponent, DashboardChildTitleComponent, DashboardChildActionComponent, DynamicComponentComponent], pipes: [C8yTranslatePipe], encapsulation: 2 });
WidgetsDashboardComponent.propDecorators = {
    widgets: [{ type: Input }],
    context: [{ type: Input }],
    contextDashboard: [{ type: Input }],
    _settings: [{ type: Input, args: ['settings',] }],
    breadcrumb: [{ type: Input }],
    onAddWidget: [{ type: Output }],
    onEditWidget: [{ type: Output }],
    onDeleteWidget: [{ type: Output }],
    onChangeDashboard: [{ type: Output }],
    onEditDashboard: [{ type: Output }],
    onCopyDashboard: [{ type: Output }],
    onDeleteDashboard: [{ type: Output }],
    onFreeze: [{ type: Output }],
    onChangeStart: [{ type: Output }],
    onChangeEnd: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetsDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-widgets-dashboard',
                template: "<c8y-title *ngIf=\"!!settings.title\">\n  {{ settings.title | translate }}\n</c8y-title>\n\n<c8y-breadcrumb *ngIf=\"!!breadcrumb\">\n  <c8y-breadcrumb-item\n    [icon]=\"breadcrumb.icon\"\n    [label]=\"breadcrumb.label\"\n    [path]=\"breadcrumb.path\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onAddWidget.observers.length\">\n  <button\n    title=\"{{ 'Add widget' | translate }}\"\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onAddWidget.emit()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add widget' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onEditDashboard.observers.length\">\n  <button\n    title=\"{{ 'Edit' | translate }}\"\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onEditDashboard.emit()\"\n  >\n    <i c8yIcon=\"pencil\"></i>\n    {{ 'Edit' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"settings.allowFullscreen\">\n  <button title=\"{{ 'Full screen' | translate }}\" class=\"btn btn-link\" (click)=\"toggleFullscreen()\">\n    <i [c8yIcon]=\"fullScreen() ? 'compress' : 'expand'\"></i>\n    {{ 'Full screen' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"navbar-form\"\n  *ngIf=\"onFreeze.observers.length\"\n>\n  <button\n    title=\"{{ 'Lock/unlock this dashboard' | translate }}\"\n    class=\"btn btn-default\"\n    [ngClass]=\"{ active: settings.isFrozen }\"\n    (click)=\"onFreeze.emit(settings)\"\n    [disabled]=\"settings.isDisabled\"\n    uib-btn-checkbox\n  >\n    <i [c8yIcon]=\"settings.isFrozen ? 'lock' : 'unlock'\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'more'\" [priority]=\"-2000\" *ngIf=\"settings.canCopy\">\n  <button title=\"{{ 'Copy dashboard' | translate }}\" (click)=\"onCopyDashboard.emit()\">\n    <i c8yIcon=\"clone\"></i>\n    <span class=\"m-l-4\" translate>Copy dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'more'\"\n  [priority]=\"-3000\"\n  *ngIf=\"settings.canDelete && onDeleteDashboard.observers.length\"\n>\n  <button\n    title=\"{{ 'Delete dashboard' | translate }}\"\n    (click)=\"onDeleteDashboard.emit()\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n  >\n    <i c8yIcon=\"trash\"></i>\n    <span class=\"m-l-4\" translate>Delete dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<!-- empty state -->\n<div class=\"c8y-empty-state text-center\" *ngIf=\"!settings.isLoading && widgets?.length === 0\">\n  <h1 class=\"c8y-icon c8y-icon-device c8y-icon-duocolor\"></h1>\n  <h3 translate>No widgets to display.</h3>\n  <div *ngIf=\"!settings.isFrozen && onAddWidget.observers.length\">\n    <p translate>Add widgets to this dashboard.</p>\n    <div>\n      <button\n        title=\"{{ 'Add widget' | translate }}\"\n        [disabled]=\"settings.isFrozen || settings.isDisabled\"\n        (click)=\"onAddWidget.emit()\"\n        class=\"btn btn-primary\"\n        translate\n      >\n        Add widget\n      </button>\n    </div>\n    <p c8y-guide-docs>\n      <small translate ngNonBindable>\n        Find out more in the\n        <a c8y-guide-href=\"users-guide/cockpit/#dashboards\"> User guide`KEEP_ORIGINAL` </a>.\n      </small>\n    </p>\n  </div>\n</div>\n<!-- /.empty settings -->\n\n<div class=\"col-xs-12 text-center\" *ngIf=\"settings.isLoading\">\n  <div class=\"spinner p-relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n\n<c8y-dashboard\n  (dashboardChange)=\"onChangeDashboard.emit($event)\"\n  #dashboard\n  *ngIf=\"!settings.isLoading\"\n>\n  <c8y-dashboard-child\n    *ngFor=\"let widget of widgets\"\n    [x]=\"widget._x\"\n    [y]=\"widget._y\"\n    [width]=\"widget._width || settings.defaultWidth\"\n    [height]=\"widget._height || settings.defaultHeight\"\n    [margin]=\"settings.widgetMargin\"\n    [isFrozen]=\"settings.isFrozen || settings.isDisabled\"\n    [class]=\"widget.classes\"\n    [data]=\"widget\"\n    [useIntersection]=\"true\"\n    (changeStart)=\"onChangeStart.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    (changeEnd)=\"onChangeEnd.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    #child\n  >\n    <c8y-dashboard-child-title>\n      <span *ngIf=\"settings.translateWidgetTitle\">\n        {{ widget.title | translate }}\n      </span>\n      <span *ngIf=\"!settings.translateWidgetTitle\">\n        {{ widget.title }}\n      </span>\n    </c8y-dashboard-child-title>\n    <c8y-dashboard-child-action *ngIf=\"onEditWidget.observers.length\">\n      <button\n        title=\"{{ 'Edit widget' | translate }}\"\n        (click)=\"onEditWidget.emit({ widget: widget, source: child, dashboard: dashboard })\"\n      >\n        <i c8yIcon=\"pencil\"></i>\n        <span class=\"m-l-4\" translate>Edit</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dashboard-child-action *ngIf=\"onDeleteWidget.observers.length\">\n      <button\n        title=\"{{ 'Remove widget' | translate }}\"\n        (click)=\"onDeleteWidget.emit({ widget: widget, source: child, dashboard: dashboard })\"\n      >\n        <i c8yIcon=\"trash\"></i>\n        <span class=\"m-l-4\" translate>Remove</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dynamic-component\n      [componentId]=\"widget.componentId || widget.name\"\n      [config]=\"\n        widget.templateUrl || widget.widgetComponent\n          ? { child: widget, dashboard: contextDashboard, context: context }\n          : widget.config\n      \"\n      *ngIf=\"child.intersected\"\n    ></c8y-dynamic-component>\n  </c8y-dashboard-child>\n</c8y-dashboard>\n",
                host: {
                    style: `
      display: block;
    `,
                    class: 'dashboard c8y-grid-dashboard'
                }
            }]
    }], function () { return []; }, { contextDashboard: [{
            type: Input
        }], onAddWidget: [{
            type: Output
        }], onEditWidget: [{
            type: Output
        }], onDeleteWidget: [{
            type: Output
        }], onChangeDashboard: [{
            type: Output
        }], onEditDashboard: [{
            type: Output
        }], onCopyDashboard: [{
            type: Output
        }], onDeleteDashboard: [{
            type: Output
        }], onFreeze: [{
            type: Output
        }], onChangeStart: [{
            type: Output
        }], onChangeEnd: [{
            type: Output
        }], _settings: [{
            type: Input,
            args: ['settings']
        }], widgets: [{
            type: Input
        }], context: [{
            type: Input
        }], breadcrumb: [{
            type: Input
        }] }); })();

class DashboardModule {
}
DashboardModule.ɵfac = function DashboardModule_Factory(t) { return new (t || DashboardModule)(); };
DashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DashboardModule });
DashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            ActionBarModule,
            DynamicComponentModule,
            DragDropModule,
            BsDropdownModule.forRoot(),
            HeaderModule,
            DocsModule,
            BreadcrumbModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DashboardChildComponent,
                    DashboardComponent,
                    DashboardChildTitleComponent,
                    DashboardChildActionComponent,
                    WidgetsDashboardComponent
                ],
                imports: [
                    CommonModule,
                    ActionBarModule,
                    DynamicComponentModule,
                    DragDropModule,
                    BsDropdownModule.forRoot(),
                    HeaderModule,
                    DocsModule,
                    BreadcrumbModule
                ],
                exports: [
                    DashboardComponent,
                    DashboardChildComponent,
                    DashboardChildTitleComponent,
                    DashboardChildActionComponent,
                    WidgetsDashboardComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DashboardModule, { declarations: function () { return [DashboardChildComponent, DashboardComponent, DashboardChildTitleComponent, DashboardChildActionComponent, WidgetsDashboardComponent]; }, imports: function () { return [CommonModule, ActionBarModule, DynamicComponentModule, DragDropModule, ɵngcc9.BsDropdownModule, HeaderModule, DocsModule, BreadcrumbModule]; }, exports: function () { return [DashboardComponent, DashboardChildComponent, DashboardChildTitleComponent, DashboardChildActionComponent, WidgetsDashboardComponent]; } }); })();

/**
 * Audit log component allows to show audits list. Component fetches audit records for the source object given as input.
 *
 * **Example**
 *
 * ```html
 *  <c8y-audit-log [source]="sourceId"></c8y-audit-log>
 * ```
 */
class AuditLogComponent {
    /**
     * @ignore
     */
    constructor(audit) {
        this.audit = audit;
    }
    /**
     * After page view is initialized, component gets audit records from auditRecords endpoint.
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.source) {
                this.records = yield this.audit.list({
                    withTotalPages: true,
                    source: this.source
                });
            }
        });
    }
}
AuditLogComponent.ɵfac = function AuditLogComponent_Factory(t) { return new (t || AuditLogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AuditService)); };
AuditLogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AuditLogComponent, selectors: [["c8y-audit-log"]], inputs: { source: "source" }, decls: 3, vars: 1, consts: [[1, "inner-scroll"], [1, "timeline-list", "list-condensed", "m-t-16"], ["class", "timeline-list-item flex-row", 4, "c8yFor", "c8yForOf"], [1, "timeline-list-item", "flex-row"], [1, "timeline-item-date", "text-right"], [1, "timeline-item-content", "flex-row"], [1, "list-item-body"], [1, "row", "text-break-word"], [1, "col-md-5"], [1, "text-truncate"], [1, "text-muted"], [1, "col-md-7"], [1, "small", "text-truncate-wrap"]], template: function AuditLogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "ul", 1);
        ɵngcc0.ɵɵtemplate(2, AuditLogComponent_li_2_Template, 18, 10, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.records);
    } }, directives: [ForOfDirective], pipes: [DatePipe, C8yTranslatePipe], encapsulation: 2 });
AuditLogComponent.ctorParameters = () => [
    { type: AuditService }
];
AuditLogComponent.propDecorators = {
    source: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuditLogComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-audit-log',
                template: "<div class=\"inner-scroll\">\n  <ul class=\"timeline-list list-condensed m-t-16\">\n    <li class=\"timeline-list-item flex-row\" *c8yFor=\"let record of records\">\n      <small class=\"timeline-item-date text-right\">\n        <span>{{ record.time | c8yDate }}</span>\n      </small>\n      <div class=\"timeline-item-content flex-row\">\n        <div class=\"list-item-body\">\n          <div class=\"row text-break-word\">\n            <div class=\"col-md-5\">\n              <span class=\"text-truncate\">{{ record.activity | translate }}</span>\n              <small class=\"text-muted\">{{ record.user }}</small>\n            </div>\n            <div class=\"col-md-7\">\n              <div class=\"small text-truncate-wrap\">{{ record.text | translate }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  </ul>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.AuditService }]; }, { source: [{
            type: Input
        }] }); })();

/** Audit module allows to show audits list. */
class AuditLogModule {
}
AuditLogModule.ɵfac = function AuditLogModule_Factory(t) { return new (t || AuditLogModule)(); };
AuditLogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AuditLogModule });
AuditLogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuditLogModule, [{
        type: NgModule,
        args: [{
                declarations: [AuditLogComponent],
                imports: [CommonModule],
                exports: [AuditLogComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AuditLogModule, { declarations: [AuditLogComponent], imports: [CommonModule], exports: [AuditLogComponent] }); })();

/* tslint:disable:max-classes-per-file */
class CellRendererContext {
}
class CellRendererDefDirective {
    constructor(template) {
        this.template = template;
    }
}
CellRendererDefDirective.ɵfac = function CellRendererDefDirective_Factory(t) { return new (t || CellRendererDefDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
CellRendererDefDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CellRendererDefDirective, selectors: [["", "c8yCellRendererDef", ""]] });
CellRendererDefDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CellRendererDefDirective, [{
        type: Directive,
        args: [{ selector: '[c8yCellRendererDef]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
class HeaderCellRendererDefDirective {
    constructor(template) {
        this.template = template;
    }
}
HeaderCellRendererDefDirective.ɵfac = function HeaderCellRendererDefDirective_Factory(t) { return new (t || HeaderCellRendererDefDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
HeaderCellRendererDefDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderCellRendererDefDirective, selectors: [["", "c8yHeaderCellRendererDef", ""]] });
HeaderCellRendererDefDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderCellRendererDefDirective, [{
        type: Directive,
        args: [{ selector: '[c8yHeaderCellRendererDef]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

class CellRendererComponent {
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
    }
    set _spec(spec) {
        this.spec = spec;
    }
    ngOnChanges() {
        if (!this.prevSpec) {
            this.prevSpec = this.spec;
        }
        const { renderer } = this.spec;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: CellRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
    }
    ngDoCheck() {
        if (!this.spec.context.value === this.prevSpec.context.value) {
            this.prevSpec = this.spec;
            this.cd.markForCheck();
        }
    }
}
CellRendererComponent.ɵfac = function CellRendererComponent_Factory(t) { return new (t || CellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
CellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CellRendererComponent, selectors: [["c8y-cell-renderer"]], inputs: { _spec: ["spec", "_spec"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "ngComponentOutlet", "ngComponentOutletInjector", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngComponentOutlet", "ngComponentOutletInjector"], [3, "title"]], template: function CellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CellRendererComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, CellRendererComponent_ng_container_1_Template, 3, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.spec.renderer);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.spec.renderer);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet, ɵngcc7.NgComponentOutlet], encapsulation: 2, changeDetection: 0 });
CellRendererComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
CellRendererComponent.propDecorators = {
    _spec: [{ type: Input, args: ['spec',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CellRendererComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-cell-renderer',
                template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <span title=\"{{ spec.context.value }}\">\n    {{ spec.context.value }}\n  </span>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _spec: [{
            type: Input,
            args: ['spec']
        }] }); })();

/* tslint:disable:max-classes-per-file */
class FilteringFormRendererContext {
}
class FilteringFormRendererDefDirective {
    constructor(template) {
        this.template = template;
    }
}
FilteringFormRendererDefDirective.ɵfac = function FilteringFormRendererDefDirective_Factory(t) { return new (t || FilteringFormRendererDefDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
FilteringFormRendererDefDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FilteringFormRendererDefDirective, selectors: [["", "c8yFilteringFormRendererDef", ""]] });
FilteringFormRendererDefDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilteringFormRendererDefDirective, [{
        type: Directive,
        args: [{ selector: '[c8yFilteringFormRendererDef]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

class ColumnDirective {
}
ColumnDirective.ɵfac = function ColumnDirective_Factory(t) { return new (t || ColumnDirective)(); };
ColumnDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ColumnDirective, selectors: [["c8y-column"]], contentQueries: function ColumnDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CellRendererDefDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderCellRendererDefDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FilteringFormRendererDefDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellRendererDef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCellRendererDef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filteringFormRendererDef = _t.first);
    } }, inputs: { name: "name" } });
ColumnDirective.propDecorators = {
    name: [{ type: Input }],
    cellRendererDef: [{ type: ContentChild, args: [CellRendererDefDirective, { static: false },] }],
    headerCellRendererDef: [{ type: ContentChild, args: [HeaderCellRendererDefDirective, { static: false },] }],
    filteringFormRendererDef: [{ type: ContentChild, args: [FilteringFormRendererDefDirective, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColumnDirective, [{
        type: Directive,
        args: [{ selector: 'c8y-column' }]
    }], null, { name: [{
            type: Input
        }], cellRendererDef: [{
            type: ContentChild,
            args: [CellRendererDefDirective, { static: false }]
        }], headerCellRendererDef: [{
            type: ContentChild,
            args: [HeaderCellRendererDefDirective, { static: false }]
        }], filteringFormRendererDef: [{
            type: ContentChild,
            args: [FilteringFormRendererDefDirective, { static: false }]
        }] }); })();

class FilteringFormRendererComponent {
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.defaultRendererFilterText = '';
    }
    set _spec(spec) {
        this.spec = spec;
    }
    ngOnChanges() {
        const { renderer, context } = this.spec;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: FilteringFormRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
        const { filterPredicate } = context.property;
        if (typeof filterPredicate === 'string') {
            this.defaultRendererFilterText = filterPredicate;
        }
    }
}
FilteringFormRendererComponent.ɵfac = function FilteringFormRendererComponent_Factory(t) { return new (t || FilteringFormRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
FilteringFormRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FilteringFormRendererComponent, selectors: [["c8y-filtering-form-renderer"]], inputs: { _spec: ["spec", "_spec"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "ngComponentOutlet", "ngComponentOutletInjector", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngComponentOutlet", "ngComponentOutletInjector"], [1, "form-group", "m-b-8", "p-t-8"], ["c8yProductExperience", "", 1, "form-control", 3, "ngModel", "actionName", "ngModelChange", "keyup.enter"], [1, "data-grid__dropdown__footer", "d-flex", "separator-top"], [1, "btn", "btn-default", "btn-sm", "flex-grow", "m-r-8", 3, "title", "click"], [1, "btn", "btn-primary", "btn-sm", "flex-grow", 3, "title", "click"]], template: function FilteringFormRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FilteringFormRendererComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, FilteringFormRendererComponent_ng_container_1_Template, 15, 17, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.spec.renderer);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.spec.renderer);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet, ɵngcc7.NgComponentOutlet, ɵngcc14.DefaultValueAccessor, ProductExperienceDirective, ɵngcc14.NgControlStatus, ɵngcc14.NgModel], pipes: [C8yTranslatePipe], encapsulation: 2, changeDetection: 0 });
FilteringFormRendererComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
FilteringFormRendererComponent.propDecorators = {
    _spec: [{ type: Input, args: ['spec',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilteringFormRendererComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-filtering-form-renderer',
                template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <div class=\"form-group m-b-8 p-t-8\">\n    <label>{{ 'Filter text' | translate }}</label>\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"defaultRendererFilterText\"\n      (keyup.enter)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n      c8yProductExperience\n      [actionName]=\"'dataGrid:filteringForm:InputTextField'\"\n    />\n  </div>\n\n  <div class=\"data-grid__dropdown__footer d-flex separator-top\">\n    <button\n      title=\"{{ 'Reset' | translate }}\"\n      class=\"btn btn-default btn-sm flex-grow m-r-8\"\n      (click)=\"defaultRendererFilterText = ''; spec.context.resetFilter()\"\n    >\n      {{ 'Reset' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Apply' | translate }}\"\n      class=\"btn btn-primary btn-sm flex-grow\"\n      (click)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n    >\n      {{ 'Apply' | translate }}\n    </button>\n  </div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _spec: [{
            type: Input,
            args: ['spec']
        }] }); })();

class ConfigureCustomColumnComponent {
    constructor(fb, modalRef) {
        this.fb = fb;
        this.modalRef = modalRef;
        this.SIMPLE_JSON_PATH_REGEX = /^[^.\s]+(\.\S+)*$/;
        this.onAddCustomColumn = new EventEmitter();
        this.formGroup = this.fb.group({
            header: [''],
            path: [''],
            addAnother: [false]
        });
    }
    comparator(val1, val2) {
        return camelCase(val1) === camelCase(val2);
    }
    addColumn() {
        const { header, path } = this.formGroup.value;
        this.onAddCustomColumn.emit({
            name: camelCase(header),
            header,
            path,
            custom: true,
            visible: true
        });
        if (this.formGroup.value.addAnother) {
            this.form.resetForm({ addAnother: true });
        }
        else {
            this.modalRef.hide();
        }
    }
}
ConfigureCustomColumnComponent.ɵfac = function ConfigureCustomColumnComponent_Factory(t) { return new (t || ConfigureCustomColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc14.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef)); };
ConfigureCustomColumnComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfigureCustomColumnComponent, selectors: [["c8y-configure-custom-column"]], viewQuery: function ConfigureCustomColumnComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c88, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.form = _t.first);
    } }, outputs: { onAddCustomColumn: "onAddCustomColumn" }, decls: 39, vars: 36, consts: [[1, "viewport-modal"], [1, "modal-header", "separator-bottom"], ["translate", ""], [1, "d-contents", 3, "formGroup"], ["columnConfigForm", "ngForm"], [1, "modal-inner-scroll"], [1, "modal-body"], ["for", "header", "translate", ""], ["id", "header", "formControlName", "header", "autocomplete", "off", "uniqueByPath", "", "path", "header", 1, "form-control", 3, "placeholder", "required", "collection", "comparator"], ["name", "uniqueByPath", 3, "text"], ["for", "fragmentPath", "translate", ""], ["id", "fragmentPath", "formControlName", "path", "autocomplete", "off", 1, "form-control", 3, "placeholder", "required", "pattern"], ["name", "pattern", 3, "text"], [1, "c8y-switch", 3, "title"], ["type", "checkbox", "formControlName", "addAnother", 1, "form-control"], [1, "modal-footer"], [1, "btn", "btn-default", 3, "title", "click"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function ConfigureCustomColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h3", 2);
        ɵngcc0.ɵɵtext(3, "Configure custom column");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "form", 3, 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "div", 6);
        ɵngcc0.ɵɵelementStart(8, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(9, "label", 7);
        ɵngcc0.ɵɵtext(10, "Header");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "input", 8);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementStart(13, "c8y-messages");
        ɵngcc0.ɵɵelement(14, "c8y-message", 9);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(17, "label", 10);
        ɵngcc0.ɵɵtext(18, "Fragment path");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(19, "input", 11);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementStart(21, "c8y-messages");
        ɵngcc0.ɵɵelement(22, "c8y-message", 12);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "label", 13);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelement(26, "input", 14);
        ɵngcc0.ɵɵelement(27, "span");
        ɵngcc0.ɵɵelementStart(28, "span", 2);
        ɵngcc0.ɵɵtext(29, "Add another column after saving this one");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "div", 15);
        ɵngcc0.ɵɵelementStart(31, "button", 16);
        ɵngcc0.ɵɵlistener("click", function ConfigureCustomColumnComponent_Template_button_click_31_listener() { return ctx.modalRef.hide(); });
        ɵngcc0.ɵɵpipe(32, "translate");
        ɵngcc0.ɵɵtext(33);
        ɵngcc0.ɵɵpipe(34, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "button", 17);
        ɵngcc0.ɵɵlistener("click", function ConfigureCustomColumnComponent_Template_button_click_35_listener() { return ctx.addColumn(); });
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵtext(37);
        ɵngcc0.ɵɵpipe(38, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.formGroup);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(12, 16, "e.g. Agent name"))("required", true)("collection", ctx.columns)("comparator", ctx.comparator);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(15, 18, "Column's header name must be unique"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(20, 20, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(35, _c89)))("required", true)("pattern", ctx.SIMPLE_JSON_PATH_REGEX);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(23, 23, "Must be a valid JSON path"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(25, 25, "Add another column after saving this one"));
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(32, 27, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(34, 29, "Cancel"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(36, 31, "Save"));
        ɵngcc0.ɵɵproperty("disabled", _r0.form.pristine || !_r0.form.valid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(38, 33, "Save"), " ");
    } }, directives: [C8yTranslateDirective, ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.FormGroupDirective, FormGroupComponent, ɵngcc14.DefaultValueAccessor, RequiredInputPlaceholderDirective, ɵngcc14.NgControlStatus, ɵngcc14.FormControlName, UniqueInCollectionByPathValidationDirective, ɵngcc14.RequiredValidator, MessagesComponent, MessageDirective, ɵngcc14.PatternValidator, ɵngcc14.CheckboxControlValueAccessor], pipes: [C8yTranslatePipe], encapsulation: 2 });
ConfigureCustomColumnComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: BsModalRef }
];
ConfigureCustomColumnComponent.propDecorators = {
    form: [{ type: ViewChild, args: ['columnConfigForm', { static: false },] }],
    onAddCustomColumn: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigureCustomColumnComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-configure-custom-column',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3 translate>Configure custom column</h3>\n  </div>\n\n  <form class=\"d-contents\" #columnConfigForm=\"ngForm\" [formGroup]=\"formGroup\">\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <c8y-form-group>\n          <label for=\"header\" translate>Header</label>\n          <input\n            id=\"header\"\n            formControlName=\"header\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            [placeholder]=\"'e.g. Agent name' | translate\"\n            [required]=\"true\"\n            uniqueByPath\n            [collection]=\"columns\"\n            path=\"header\"\n            [comparator]=\"comparator\"\n          />\n          <c8y-messages>\n            <c8y-message\n              name=\"uniqueByPath\"\n              [text]=\"'Column\\'s header name must be unique' | translate\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n        <c8y-form-group>\n          <label for=\"fragmentPath\" translate>Fragment path</label>\n          <input\n            id=\"fragmentPath\"\n            formControlName=\"path\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'c8y_Agent.name' }\"\n            [required]=\"true\"\n            [pattern]=\"SIMPLE_JSON_PATH_REGEX\"\n          />\n          <c8y-messages>\n            <c8y-message\n              name=\"pattern\"\n              [text]=\"'Must be a valid JSON path' | translate\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n        <label class=\"c8y-switch\" [title]=\"'Add another column after saving this one' | translate\">\n          <input type=\"checkbox\" formControlName=\"addAnother\" class=\"form-control\" />\n          <span></span>\n          <span translate>Add another column after saving this one</span>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n        {{ 'Cancel' | translate }}\n      </button>\n      <button\n        title=\"{{ 'Save' | translate }}\"\n        class=\"btn btn-primary\"\n        [disabled]=\"columnConfigForm.form.pristine || !columnConfigForm.form.valid\"\n        (click)=\"addColumn()\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </form>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc14.FormBuilder }, { type: ɵngcc10.BsModalRef }]; }, { onAddCustomColumn: [{
            type: Output
        }], form: [{
            type: ViewChild,
            args: ['columnConfigForm', { static: false }]
        }] }); })();

const minColumnGridTrackSize = 80;
/** Maps column types to relative widths. */
const ratiosByColumnTypes = {
    /** The width ration for icon column type. */
    icon: 1,
    /** The width ration for numeric column type. */
    numeric: 1,
    /** The width ration for short text column type. */
    'text-short': 1.67,
    /** The width ration for long text column type. */
    'text-long': 3.33
};
/** Filtering actions. */
var FilteringActionType;
(function (FilteringActionType) {
    /** Action invoked when filter settings are to be applied. */
    FilteringActionType["ApplyFilter"] = "APPLY_FILTER";
    /** Action invoked when filter settings are to be cleared. */
    FilteringActionType["ResetFilter"] = "RESET_FILTER";
})(FilteringActionType || (FilteringActionType = {}));

class GridDataSource {
    constructor() {
        this.loadingSubject = new BehaviorSubject(true);
        this.dataSourceSubject = new BehaviorSubject([]);
        this.dataStatsSubject = new BehaviorSubject({
            size: 0,
            filteredSize: 0,
            currentPage: 0,
            currentPageSize: 0,
            firstPageSize: 0
        });
        this.dataSelectionSubject = new BehaviorSubject({
            filteredDataIds: []
        });
        this.resultListSubject = new Subject();
        this.loading$ = this.loadingSubject.asObservable();
        this.data$ = this.dataSourceSubject.asObservable();
        this.stats$ = this.dataStatsSubject.asObservable();
        this.selection$ = this.dataSelectionSubject.asObservable();
        this.resultList$ = this.resultListSubject.asObservable();
    }
    connect(collectionViewer) {
        return this.data$;
    }
    disconnect(collectionViewer) {
        this.loadingSubject.complete();
        this.dataSourceSubject.complete();
        this.dataStatsSubject.complete();
        this.dataSelectionSubject.complete();
    }
    loadData({ rows, columns, pagination, searchText, serverSideDataCallback, selectable, selectionPrimaryKey, infiniteScroll, reload = false }) {
        const clientSideData$ = this.toObservable(rows).pipe(map(initialData => {
            let filteredSize = 0;
            let filteredDataIds = [];
            const transformedData = flow(data => this.doClientSideSearch({ data, columns, searchText }), data => this.doClientSideFiltering({ data, columns }), data => this.doClientSideSorting({ data, columns }), data => {
                filteredSize = data.length;
                filteredDataIds = selectable
                    ? data.map(item => item[selectionPrimaryKey])
                    : filteredDataIds;
                return data;
            }, data => this.doClientSidePagination({ data, pagination }))(initialData);
            this.dataStatsSubject.next({
                size: initialData.length,
                filteredSize,
                currentPage: pagination.currentPage,
                currentPageSize: transformedData.length,
                firstPageSize: pagination.pageSize
            });
            this.dataSelectionSubject.next({ filteredDataIds });
            return transformedData;
        }));
        const serverSideData$ = defer(() => this.toObservable(serverSideDataCallback({
            columns,
            searchText,
            pagination,
            selection: { enabled: selectable, primaryKey: selectionPrimaryKey }
        }))).pipe(map((result) => {
            const { data, paging, size, filteredSize, filteredDataIds } = result;
            this.dataStatsSubject.next({
                size,
                filteredSize,
                currentPage: paging.currentPage,
                currentPageSize: data.length,
                nextPage: paging.nextPage,
                firstPageSize: paging.pageSize
            });
            this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds || [] });
            this.resultListSubject.next(result);
            return data;
        }));
        const data$ = typeof serverSideDataCallback === 'function' ? serverSideData$ : clientSideData$;
        of([])
            .pipe(tap(() => this.loadingSubject.next(true)), switchMap(() => data$), catchError(err => {
            this.dataStatsSubject.next({
                size: 0,
                filteredSize: 0,
                currentPage: 0,
                currentPageSize: 0,
                firstPageSize: 0
            });
            this.dataSelectionSubject.next({ filteredDataIds: [] });
            return of([]);
        }), finalize(() => this.loadingSubject.next(false)))
            .subscribe(result => {
            const data = infiniteScroll && !reload ? [...this.dataSourceSubject.value, ...result] : result;
            this.dataSourceSubject.next(data);
        });
    }
    resolveValue(x, path) {
        return get(x, path);
    }
    resolveFunction(x) {
        return typeof x === 'function' ? x() : x;
    }
    normalizeNil(x) {
        return isNil(x) ? '' : x;
    }
    doClientSideFiltering({ data, columns }) {
        return columns.reduce((result, column) => {
            const { filterPredicate } = column;
            if (typeof filterPredicate === 'string') {
                return this.doClientSideSearch({
                    data: result,
                    columns: [column],
                    searchText: filterPredicate
                });
            }
            if (typeof filterPredicate === 'function') {
                return result.filter(item => filterPredicate(item, column.path));
            }
            return result;
        }, data);
    }
    doClientSideSearch({ data, columns, searchText }) {
        const propPaths = columns.map(({ path }) => path).filter(column => !isNil(column));
        const regexSearch = this.createRegexSearch(searchText);
        return data.filter(item => {
            const itemWithResolvedValues = flow(x => propPaths.map(propPath => get(x, propPath)), x => mapValues(x, this.resolveFunction), x => omitBy(x, isNil))(item);
            const cellValues = Object.values(itemWithResolvedValues);
            return cellValues.some(cellValue => regexSearch.test(cellValue.toString()));
        });
    }
    doClientSideSorting({ data, columns }) {
        const actives = columns.filter(({ sortOrder }) => !!sortOrder);
        const sortingState = {
            iteratees: actives.map(({ path }) => path).map(path => item => { var _a; return (_a = get(item, path)) !== null && _a !== void 0 ? _a : ''; }),
            orders: actives.map(({ sortOrder }) => sortOrder)
        };
        return orderBy(data, sortingState.iteratees, sortingState.orders);
    }
    doClientSidePagination({ data, pagination }) {
        return pagination
            ? get(chunk(data, pagination.pageSize), pagination.currentPage - 1, [])
            : data;
    }
    createRegexSearch(filterValue) {
        return RegExp(escapeRegExpPattern(filterValue), 'i');
    }
    toObservable(x) {
        return isObservable(x) ? x : x instanceof Promise ? from(x) : of(x);
    }
}
/**
 *
 * @param string pattern Regex pattern.
 * @return string The escaped regex.
 * @see https://stackoverflow.com/a/3561711/2013891
 */
function escapeRegExpPattern(pattern = '') {
    return pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

var SortingOrder;
(function (SortingOrder) {
    SortingOrder["ASC"] = "asc";
    SortingOrder["DESC"] = "desc";
})(SortingOrder || (SortingOrder = {}));
class DataGridComponent {
    constructor(sanitizer, hostRef, cd, cfr, gainsightService, bsModalService, alertService) {
        this.sanitizer = sanitizer;
        this.hostRef = hostRef;
        this.cd = cd;
        this.cfr = cfr;
        this.gainsightService = gainsightService;
        this.bsModalService = bsModalService;
        this.alertService = alertService;
        /** The title for the data grid, it's displayed in the grid's header. */
        this.title = gettext('Items');
        /** The label for load more button. */
        this.loadMoreItemsLabel = gettext('Load more items');
        /** The label for loading indicator. */
        this.loadingItemsLabel = gettext('Loading items…');
        /** Determines whether text search input is shown in the grid's header. */
        this.showSearch = false;
        this.dataSource = new GridDataSource();
        this.filteringLabelsParams = {
            filteredItemsCount: 0,
            allItemsCount: 0
        };
        this.paginationLabelParams = {
            pageFirstItemIdx: 0,
            pageLastItemIdx: 0,
            itemsTotal: 0
        };
        this.possiblePageSizes = [10, 15, 20, 30, 50];
        this.minPossiblePageSize = Math.min(...this.possiblePageSizes);
        this.selectable = false;
        this.selectionPrimaryKey = 'id';
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        /** Sets initial search text. */
        this.searchText = '';
        /** Determines if custom columns button will be enabled. */
        this.configureColumnsEnabled = true;
        /** Shows the warning for the sub-assets counter */
        this.showCounterWarning = false;
        /** Emits an event when mouse is over a row. */
        this.rowMouseOver = new EventEmitter();
        /** Emits an event when mouse leaves a row. */
        this.rowMouseLeave = new EventEmitter();
        /** Emits an event when a row is clicked. */
        this.rowClick = new EventEmitter();
        /** Emits an event when grid's configuration is changed. */
        this.onConfigChange = new EventEmitter();
        /** Emits an event before the filter is applied. */
        this.onBeforeFilter = new EventEmitter();
        /** Emits an event before the search is performed. */
        this.onBeforeSearch = new EventEmitter();
        /** Emits an event when a filter is applied in a column. */
        this.onFilter = new EventEmitter();
        /** Emits an event when items selection changes. The array contains keys of selected items (key property is defined by `selectionPrimaryKey`). */
        this.itemsSelect = new EventEmitter();
        /** Emits an event when reload button is clicked. */
        this.onReload = new EventEmitter();
        /** Emits an event when a custom column is added */
        this.onAddCustomColumn = new EventEmitter();
        /** Emits an event when a custom column is removed */
        this.onRemoveCustomColumn = new EventEmitter();
        this.columnNames = [];
        this.styles = {
            tableCursor: 'auto',
            gridTemplateColumns: undefined,
            gridInfiniteScrollColumn: undefined
        };
        this.searchText$ = new EventEmitter();
        this.filteringApplied = false;
        this.totalPagesCount$ = new BehaviorSubject(Infinity);
        this.hidePagination$ = this.totalPagesCount$.pipe(map(totalPagesCount => totalPagesCount <= 1), delay(0) // prevents ExpressionChangedAfterItHasBeenCheckedError
        );
        this.selectedItemIds = [];
        this.currentPageSelectionState = {
            allSelected: false,
            allDeselected: true
        };
        this.builtInActionType = {
            Edit: "EDIT" /* Edit */,
            Delete: "DELETE" /* Delete */,
            Export: "EXPORT" /* Export */
        };
        this.confirmRemoveColumnButtons = [
            {
                label: gettext('Cancel'),
                action: () => Promise.resolve(false)
            },
            {
                label: gettext('Remove`column,verb`'),
                status: 'danger',
                action: () => Promise.resolve(true)
            }
        ];
        this.resizeHandleMouseDown$ = new EventEmitter();
        this.resizeHandleContainerMouseMove$ = new EventEmitter();
        this.resizeHandleContainerMouseUp$ = new EventEmitter();
        this.columnsInitialized = false;
        this.unsubscribe$ = new Subject();
        this.SEARCH_DEBOUNCE_TIME = 500;
        /**
         * Event emitter, taking boolean values used for loading data grid data with debounce.
         * Default value is set to false. Set to true if data grid is using infinite scroll and page should be reloaded.
         * This is used to avoid having multiple this.loadData() function calls.
         */
        this.triggerLoadData = new EventEmitter();
        this.triggerLoadData.pipe(debounceTime(1), takeUntil(this.unsubscribe$)).subscribe(reload => {
            this.loadData(reload);
        });
    }
    /** The list of columns to be displayed in the grid. */
    set _columns(columns) {
        this.columns = columns || [];
        this.columnsInitialized = this.columnsInitialized || !!columns;
    }
    /** The list of rows to be displayed in the grid (used for client side data). */
    set _rows(rows) {
        this.rows = rows || [];
    }
    /** Pagination settings, e.g. allows for setting current page or page size. */
    set _pagination(pagination) {
        this.pagination = pagination;
        const pageSize = get(this.pagination, 'pageSize');
        if (pageSize &&
            !this.possiblePageSizes.find(possiblePageSize => possiblePageSize === pageSize)) {
            this.pagination = Object.assign(Object.assign({}, this.pagination), { pageSize: 10 });
        }
    }
    /** Sets load more mode. */
    set _infiniteScroll(infiniteScroll) {
        this.infiniteScroll = infiniteScroll;
    }
    /**
     * Sets a callback function which will be invoked whenever data needs to be loaded from server.
     * The function should take [[DataSourceModifier]] and return [[ServerSideDataResult]].
     */
    set _serverSideDataCallback(serverSideDataCallback) {
        this.serverSideDataCallback = serverSideDataCallback;
    }
    /** Determines whether items can be selected by clicking a checkbox in the first column. */
    set _selectable(selectable) {
        this.selectable = selectable;
    }
    /** Determines which item's property will be used to distinguish selection status. */
    set _selectionPrimaryKey(selectionPrimaryKey) {
        this.selectionPrimaryKey = selectionPrimaryKey;
    }
    /** Sets display options. */
    set _displayOptions(displayOptions) {
        this.displayOptions = Object.assign(Object.assign({}, this.displayOptions), displayOptions);
    }
    /** Sets action controls (actions available for individual items). */
    set _actionControls(actionControls) {
        this.actionControls = actionControls || [];
    }
    /** Sets bulk action controls (actions available for items selected by user). */
    set _bulkActionControls(bulkActionControls) {
        this.bulkActionControls = bulkActionControls || [];
    }
    /** Sets header action controls (actions available from data grid header). */
    set _headerActionControls(headerActionControls) {
        this.headerActionControls = headerActionControls || [];
    }
    ngOnInit() {
        this.searchText$
            .pipe(takeUntil(this.unsubscribe$), debounceTime(this.SEARCH_DEBOUNCE_TIME), distinctUntilChanged(), tap(searchText => {
            this.searchText = searchText;
            this.onBeforeSearch.emit(this.searchText);
        }))
            .subscribe(() => {
            this.reload();
        });
        if (this.selectable) {
            combineLatest(this.dataSource.data$, this.itemsSelect.asObservable())
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(([data]) => {
                const currentPageEmpty = data.length === 0;
                this.currentPageSelectionState = {
                    allSelected: currentPageEmpty ? false : data.every(item => this.isItemSelected(item)),
                    allDeselected: currentPageEmpty ? true : data.every(item => !this.isItemSelected(item))
                };
            });
        }
        this.dataSource.stats$.pipe(takeUntil(this.unsubscribe$)).subscribe(stats => {
            this.createLoadMoreComponent(stats);
            this.updateFilteringLabelsParams(stats);
            this.updatePaginationLabelParams(stats);
        });
        if (this.refresh) {
            this.refresh.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
                this.cancel(false);
                this.reload();
            });
        }
    }
    ngOnChanges(event) {
        var _a, _b, _c;
        if (((!event._actionControls && !event.searchText) || ((_a = event._actionControls) === null || _a === void 0 ? void 0 : _a.firstChange)) &&
            this.columnsInitialized) {
            const reload = !!((_b = event._infiniteScroll) === null || _b === void 0 ? void 0 : _b.currentValue) && !((_c = event._infiniteScroll) === null || _c === void 0 ? void 0 : _c.firstChange);
            this.triggerLoadData.emit(reload);
        }
        this.updateColumns();
    }
    ngAfterViewInit() {
        this.updateGridColumnsSize();
        this.updateThEls();
        this.setupResizeHandle();
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    openCustomColumnModal() {
        const modalRef = this.bsModalService.show(ConfigureCustomColumnComponent, {
            class: 'modal-sm',
            ignoreBackdropClick: true,
            initialState: {
                columns: this.columns
            }
        });
        modalRef.content.onAddCustomColumn
            .pipe(takeUntil(modalRef.onHidden))
            .subscribe(event => this.onAddCustomColumn.emit(event));
    }
    removeCustomColumn(poConfirm, column, ddConfigureColumns) {
        return __awaiter(this, void 0, void 0, function* () {
            ddConfigureColumns.autoClose = false;
            poConfirm.message = gettext('Do you want to remove this column?');
            try {
                const remove = yield poConfirm.show(this.confirmRemoveColumnButtons);
                if (remove) {
                    this.onRemoveCustomColumn.emit(column);
                }
            }
            catch (e) {
                this.alertService.addServerFailure(e);
            }
            setTimeout(() => (ddConfigureColumns.autoClose = true), 0);
        });
    }
    trackByName(index, item) {
        return item.name;
    }
    resolveCellValue(row, path) {
        return flow([
            x => this.dataSource.resolveValue(x, path),
            this.dataSource.resolveFunction,
            this.dataSource.normalizeNil
        ])(row);
    }
    changeSortOrder(columnName) {
        const column = this.columns.find(({ name }) => name === columnName);
        this.gainsightService.triggerEvent('dataGrid:ChangeSortOrder', {
            column: columnName,
            sortOrderBeforeChange: getPresentSortOrder(column === null || column === void 0 ? void 0 : column.sortOrder)
        });
        if (column) {
            const { sortOrder } = column;
            if (!sortOrder) {
                this.updateSorting([columnName], SortingOrder.ASC);
            }
            else if (sortOrder === SortingOrder.ASC) {
                this.updateSorting([columnName], SortingOrder.DESC);
            }
            else {
                this.updateSorting([columnName], '');
            }
        }
        function getPresentSortOrder(sortOrder) {
            switch (sortOrder) {
                case SortingOrder.ASC:
                    return 'descending';
                case SortingOrder.DESC:
                    return 'descending (Default)';
                default:
                    return 'ascending';
            }
        }
    }
    updateSorting(columnNames, sortOrder) {
        this.columns = this.columns.map((column) => {
            if (columnNames.includes(column.name)) {
                return Object.assign(Object.assign({}, column), { sortOrder });
            }
            return column;
        });
        this.emitConfigChange();
        this.reload();
    }
    applyFilter(columnName, dropdown, filteringModifier) {
        this.gainsightService.triggerEvent('dataGrid:ApplyFilter', { column: columnName });
        this.onBeforeFilter.emit({ columnName, dropdown, filteringModifier });
        this.updateFiltering([columnName], {
            type: FilteringActionType.ApplyFilter,
            payload: { filteringModifier }
        });
        dropdown.hide();
        this.onFilter.emit({ columnName, dropdown, filteringModifier });
    }
    resetFilter(columnName, dropdown) {
        this.gainsightService.triggerEvent('dataGrid:ResetFilter', { column: columnName });
        this.updateFiltering([columnName], { type: FilteringActionType.ResetFilter });
        dropdown.hide();
        this.onFilter.emit({ columnName });
    }
    clearFilters(reload = true) {
        this.gainsightService.triggerEvent('dataGrid:ClearFilters');
        this.updateFiltering(this.columns.map(({ name }) => name), {
            type: FilteringActionType.ResetFilter
        }, reload);
        this.onFilter.emit({});
    }
    updateFiltering(columnNames, action, reload = true) {
        this.columns = this.columns.map(column => {
            if (columnNames.includes(column.name)) {
                return Object.assign(Object.assign({}, column), (action.type === FilteringActionType.ApplyFilter
                    ? action.payload.filteringModifier
                    : { filterPredicate: undefined, externalFilterQuery: undefined }));
            }
            return column;
        });
        this.updateFilteringApplied();
        if (reload) {
            this.reload();
        }
    }
    updateFilteringApplied() {
        this.filteringApplied = this.columns.some(this.isColumnFilteringApplied);
    }
    isColumnFilteringApplied(column) {
        const { filterable, filterPredicate, externalFilterQuery } = column;
        return !!(filterable && (filterPredicate || externalFilterQuery));
    }
    updatePagination({ itemsPerPage, page }) {
        this.pagination = Object.assign(Object.assign({}, this.pagination), { pageSize: itemsPerPage, currentPage: page });
        this.loadData();
        this.emitConfigChange();
    }
    clickReload() {
        this.gainsightService.triggerEvent('dataGrid:Reload');
        this.searchText = '';
        this.reload();
        this.onReload.next();
    }
    reload() {
        this.pagination = Object.assign(Object.assign({}, this.pagination), { currentPage: 1 });
        this.recreateLoadMoreComponent = true;
        this.loadData(true);
        this.scrollToTop();
    }
    loadNextPage() {
        this.pagination = Object.assign(Object.assign({}, this.pagination), { currentPage: this.pagination.nextPage });
        this.loadData();
        return this.dataSource.resultList$
            .pipe(take(1)) // in order for `toPromise` to work, the observable needs to complete
            .toPromise()
            .then(result => {
            return Object.assign(Object.assign({}, result), { paging: Object.assign(Object.assign({}, result.paging), { next: this.loadNextPage.bind(this) }) });
        });
    }
    getCellRendererSpec({ value, row, columnName }) {
        return this._getCellRendererSpec({ type: 'CELL', value, row, columnName });
    }
    getHeaderCellRendererSpec({ value, columnName }) {
        return this._getCellRendererSpec({ type: 'HEADER', value, row: undefined, columnName });
    }
    getFilteringFormRendererSpec({ column, dropdown }) {
        return {
            renderer: get(this.getColumnRenderer(column), 'filteringFormRendererDef.template') ||
                column.filteringFormRendererComponent,
            context: {
                property: column,
                applyFilter: this.applyFilter.bind(this, column.name, dropdown),
                resetFilter: this.resetFilter.bind(this, column.name, dropdown)
            }
        };
    }
    setAllItemsSelected(selected) {
        this.dataSource.selection$
            .pipe(first$1())
            .subscribe(({ filteredDataIds }) => this.setItemsSelected(filteredDataIds, selected));
    }
    setAllItemsInCurrentPageSelected(selected) {
        this.dataSource.data$.pipe(first$1()).subscribe(data => this.setItemsSelected(data, selected));
    }
    setItemsSelected(items, selected) {
        const itemIds = items.map((item) => typeof item === 'object' ? item[this.selectionPrimaryKey] : item);
        this.selectedItemIds = selected
            ? union(this.selectedItemIds, itemIds)
            : without(this.selectedItemIds, ...itemIds);
        this.gainsightService.triggerEvent('dataGrid:ItemCheckboxClicked', { itemSelected: selected });
        this.itemsSelect.emit(this.selectedItemIds);
    }
    cancel(triggerCustomEvent = true) {
        if (triggerCustomEvent) {
            this.gainsightService.triggerEvent('dataGrid:CancelSelection');
        }
        this.selectedItemIds = [];
        this.itemsSelect.emit(this.selectedItemIds);
    }
    isItemSelected(item) {
        return this.selectedItemIds.includes(item[this.selectionPrimaryKey]);
    }
    onColumnDrop({ previousIndex, currentIndex }) {
        const differentIndex = previousIndex !== currentIndex;
        if (differentIndex) {
            this.gainsightService.triggerEvent('dataGrid:ColumnPositionChanged', {
                columnName: this.columnNames[previousIndex]
            });
            const column = this.columns.splice(previousIndex, 1);
            this.columns.splice(currentIndex, 0, column[0]);
            this.emitConfigChange();
        }
        this.updateColumnNames();
        this.updateGridColumnsSize();
    }
    updateGridColumnsSize() {
        this.styles = Object.assign(Object.assign({}, this.styles), { gridTemplateColumns: this.sanitizer.bypassSecurityTrustStyle(this.columns
                .filter(column => column.visible)
                .map(({ gridTrackSize }) => gridTrackSize)
                .join(' ')), gridInfiniteScrollColumn: this.sanitizer.bypassSecurityTrustStyle(`1 / span ${this.columns.filter(column => column.visible).length}`) });
    }
    updateThEls() {
        setTimeout(() => {
            this.thEls = this.thRefs
                ? this.thRefs.toArray().map(({ nativeElement }) => nativeElement)
                : [];
        }, 0);
    }
    // To be removed when columns are transformed to observables.
    isDropDownPlacedRight(column) {
        return (indexOf(this.columns.filter(c => c.visible), column) >
            this.columns.filter(c => c.visible).length / 2);
    }
    emitConfigChange() {
        if (this.columnsInitialized) {
            const columns = this.columns.map(column => {
                if (column.custom) {
                    const { visible, sortOrder, name, header, path } = column;
                    return { visible, sortOrder, name, header, path, custom: true };
                }
                else {
                    const { visible, sortOrder, name } = column;
                    return { visible, sortOrder, name };
                }
            });
            this.onConfigChange.emit({ columns, pagination: this.pagination });
        }
    }
    loadData(reload = false) {
        const { rows, columns, pagination, searchText, serverSideDataCallback, selectable, selectionPrimaryKey, infiniteScroll } = this;
        this.dataSource.loadData({
            rows,
            columns,
            pagination,
            searchText,
            serverSideDataCallback,
            selectable,
            selectionPrimaryKey,
            infiniteScroll,
            reload
        });
    }
    updateColumns() {
        const specialColumn = {
            sortable: false,
            positionFixed: true
        };
        const checkboxColumn = this.selectable
            ? Object.assign(Object.assign({}, specialColumn), { name: "checkbox" /* Checkbox */, gridTrackSize: '32px' }) : undefined;
        const actionsColumn = this.actionControls.length > 0
            ? Object.assign(Object.assign({}, specialColumn), { name: "actions" /* Actions */, gridTrackSize: this.actionControls.length > 2 ? '40px' : 'minmax(40px, auto)' }) : undefined;
        const columns = [checkboxColumn, ...this.columns, actionsColumn]
            .filter(Boolean)
            .map(this.withColumnDefaults);
        this.columns = uniqBy(columns, 'name');
        this.updateColumnNames();
        this.updateGridColumnsSize();
        this.updateThEls();
        this.updateFilteringApplied();
    }
    withColumnDefaults(column) {
        const dataType = column.dataType || "text-short" /* TextShort */;
        const { headerCSSClassName, cellCSSClassName } = column;
        return Object.assign(Object.assign({ visible: true, positionFixed: false, resizable: true, sortable: true, sortOrder: '', filterable: false }, column), { dataType, gridTrackSize: column.gridTrackSize ||
                `minmax(${minColumnGridTrackSize}px, ${ratiosByColumnTypes[dataType]}fr)`, headerCSSClassName: (typeof headerCSSClassName === 'string'
                ? headerCSSClassName.split(' ')
                : headerCSSClassName) || [], cellCSSClassName: (typeof cellCSSClassName === 'string' ? cellCSSClassName.split(' ') : cellCSSClassName) ||
                [] });
    }
    updateColumnNames() {
        this.columnNames = this.columns.map(({ name }) => name);
    }
    setupResizeHandle() {
        const resizeHandleDrag$ = this.resizeHandleMouseDown$.pipe(takeUntil(this.unsubscribe$), tap(() => this.clearMouseHighlights()), mergeMap(({ event, targetColumnName }) => {
            this.columns = this.columns.map(column => {
                if (column.name === targetColumnName) {
                    return Object.assign(Object.assign({}, column), { headerCSSClassName: union(column.headerCSSClassName, ['header--being-resized']) });
                }
                return column;
            });
            this.headerBeingResized = {
                columnName: targetColumnName,
                el: event.target.parentNode
            };
            this.styles = Object.assign(Object.assign({}, this.styles), { tableCursor: 'col-resize' });
            return this.resizeHandleContainerMouseMove$.pipe(tap(() => this.clearMouseHighlights()), takeUntil(this.resizeHandleContainerMouseUp$));
        }));
        resizeHandleDrag$.subscribe((event) => {
            requestAnimationFrame(() => {
                this.columns = this.columns.map((column, i) => {
                    if (this.headerBeingResized && column.name === this.headerBeingResized.columnName) {
                        const scrollContainerDiv = this.scrollContainer.nativeElement;
                        // Read scrollContainerEl's offset left relative to the document.
                        const horizontalOffset = scrollContainerDiv.getBoundingClientRect().left;
                        // Adjust with the scrollContainerEl horizontal scroll position.
                        const horizontalScrollOffset = scrollContainerDiv.scrollLeft - horizontalOffset;
                        // Read left offset of the resized header.
                        const headerOffsetLeft = this.headerBeingResized.el.offsetLeft || 0;
                        // Calculate the desired width.
                        const width = horizontalScrollOffset + event.clientX - headerOffsetLeft;
                        return Object.assign(Object.assign({}, column), { 
                            // Update the column object with the new size value, enforce our minimum size.
                            gridTrackSize: `${Math.max(minColumnGridTrackSize, width)}px` });
                    }
                    // For the other headers which don't have a set width, fix it to their computed width.
                    if (column.gridTrackSize.startsWith('minmax')) {
                        return Object.assign(Object.assign({}, column), { 
                            // isn't fixed yet (it would be a px value)
                            gridTrackSize: `${parseInt$1(this.thEls[i].clientWidth)}px` });
                    }
                    return column;
                });
                /*
                 * Update the column sizes.
                 * Note: grid-template-columns sets the width for all columns in one value.
                 */
                this.updateGridColumnsSize();
            });
        });
        this.resizeHandleContainerMouseUp$.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
            if (this.headerBeingResized) {
                this.columns = this.columns.map(column => {
                    if (column.name === this.headerBeingResized.columnName) {
                        return Object.assign(Object.assign({}, column), { headerCSSClassName: without(column.headerCSSClassName, 'header--being-resized') });
                    }
                    return column;
                });
                this.headerBeingResized = undefined;
                this.styles = Object.assign(Object.assign({}, this.styles), { tableCursor: 'auto' });
            }
        });
    }
    clearMouseHighlights() {
        if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    }
    _getCellRendererSpec({ type, value, row, columnName }) {
        const column = this.columns.find(({ name }) => name === columnName);
        const columnRenderer = this.getColumnRenderer(column);
        const rendererTemplate = get(columnRenderer, `${type === 'HEADER' ? 'headerCellRendererDef' : 'cellRendererDef'}.template`);
        const { cellRendererComponent, headerCellRendererComponent } = column;
        const rendererComponent = type === 'HEADER' ? headerCellRendererComponent : cellRendererComponent;
        return {
            renderer: rendererTemplate || rendererComponent,
            context: {
                value,
                item: row,
                property: column
            }
        };
    }
    getColumnRenderer(column) {
        return this.columnRenderers.toArray().find(({ name }) => name === column.name);
    }
    updateFilteringLabelsParams(stats) {
        this.filteringLabelsParams = {
            filteredItemsCount: stats.filteredSize,
            allItemsCount: stats.size
        };
    }
    updatePaginationLabelParams(stats) {
        this.pagination.nextPage = stats.nextPage;
        const pageFirstItemIdx = (stats.currentPage - 1) * stats.firstPageSize + 1;
        this.paginationLabelParams = {
            pageFirstItemIdx,
            pageLastItemIdx: pageFirstItemIdx + (stats.currentPageSize - 1),
            itemsTotal: stats.filteredSize
        };
    }
    createLoadMoreComponent(stats) {
        if (this.infiniteScroll &&
            stats &&
            stats.nextPage &&
            (!this.loadMoreComponent || this.recreateLoadMoreComponent)) {
            this.recreateLoadMoreComponent = false;
            this.infiniteScrollContainer.clear();
            const componentFactory = this.cfr.resolveComponentFactory(LoadMoreComponent);
            const componentRef = this.infiniteScrollContainer.createComponent(componentFactory);
            const instance = componentRef.instance;
            instance.useIntersection = this.infiniteScroll === 'auto' || this.infiniteScroll === 'hidden';
            instance.hidden = this.infiniteScroll === 'hidden';
            instance.paging = {
                nextPage: stats.nextPage,
                next: this.loadNextPage.bind(this)
            };
            instance.loadNextLabel = this.loadMoreItemsLabel;
            instance.loadingLabel = this.loadingItemsLabel;
            this.loadMoreComponent = instance;
        }
        else if (this.loadMoreComponent && !stats.nextPage) {
            this.loadMoreComponent.paging = {
                nextPage: null
            };
        }
    }
    scrollToTop() {
        if (this.infiniteScroll) {
            this.scrollContainer.nativeElement.scrollTop = 0;
        }
    }
}
DataGridComponent.ɵfac = function DataGridComponent_Factory(t) { return new (t || DataGridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc20.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(GainsightService), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalService), ɵngcc0.ɵɵdirectiveInject(AlertService)); };
DataGridComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataGridComponent, selectors: [["c8y-data-grid"]], contentQueries: function DataGridComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ColumnDirective, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnRenderers = _t);
    } }, viewQuery: function DataGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c90, 7);
        ɵngcc0.ɵɵviewQuery(_c91, 5, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(CdkHeaderCell, 5, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infiniteScrollContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thRefs = _t);
    } }, hostAttrs: [1, "d-contents"], inputs: { title: "title", loadMoreItemsLabel: "loadMoreItemsLabel", loadingItemsLabel: "loadingItemsLabel", showSearch: "showSearch", searchText: "searchText", configureColumnsEnabled: "configureColumnsEnabled", showCounterWarning: "showCounterWarning", _columns: ["columns", "_columns"], _rows: ["rows", "_rows"], _pagination: ["pagination", "_pagination"], _infiniteScroll: ["infiniteScroll", "_infiniteScroll"], _serverSideDataCallback: ["serverSideDataCallback", "_serverSideDataCallback"], _selectable: ["selectable", "_selectable"], _selectionPrimaryKey: ["selectionPrimaryKey", "_selectionPrimaryKey"], _displayOptions: ["displayOptions", "_displayOptions"], _actionControls: ["actionControls", "_actionControls"], _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], _headerActionControls: ["headerActionControls", "_headerActionControls"], refresh: "refresh" }, outputs: { rowMouseOver: "rowMouseOver", rowMouseLeave: "rowMouseLeave", rowClick: "rowClick", onConfigChange: "onConfigChange", onBeforeFilter: "onBeforeFilter", onBeforeSearch: "onBeforeSearch", onFilter: "onFilter", itemsSelect: "itemsSelect", onReload: "onReload", onAddCustomColumn: "onAddCustomColumn", onRemoveCustomColumn: "onRemoveCustomColumn" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c105, decls: 18, vars: 33, consts: [[1, "table-data-grid-scroll", 3, "ngClass"], ["scroll", ""], ["class", "table-data-grid__loading--wrapper", 4, "ngIf"], ["class", "table-data-grid-header separator large-padding", 4, "ngIf"], ["cdk-table", "", 1, "table", "table-hover", "table-filtered-sorted", "table-data-grid", "large-padding", 3, "dataSource", "trackBy", "mousemove", "mouseup"], [3, "cdkColumnDef", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["cdkColumnDef", "infiniteScrollFooter"], ["cdk-footer-cell", "", 3, "grid-column", 4, "cdkFooterCellDef"], ["cdk-header-row", "", 4, "cdkHeaderRowDef"], ["cdk-row", "", 3, "mouseover", "mouseleave", "click", 4, "cdkRowDef", "cdkRowDefColumns"], ["cdk-footer-row", "", 3, "ngClass", 4, "cdkFooterRowDef"], ["class", "row m-0 p-t-40 p-b-40", 4, "ngIf"], ["class", "table-data-grid-footer separator large-padding", 4, "ngIf"], [1, "table-data-grid__loading--wrapper"], [1, "table-data-grid__loading--loader"], [3, "message"], [1, "table-data-grid-header", "separator", "large-padding"], [3, "ngClass"], [4, "ngIf"], [1, "flex-item-right"], [1, "btnbar", "flex-row"], [4, "ngFor", "ngForOf"], ["class", "dropdown", "dropdown", "", "container", "body", "placement", "bottom left", 3, "insideClick", 4, "ngIf"], [1, "btnbar-btn", "btn-link", 3, "title", "disabled", "click"], ["c8yIcon", "refresh", 1, "m-r-4"], ["class", "input-group input-group-search m-l-sm-16", 4, "ngIf"], ["class", "table-data-grid-header-bulk-actions animated slideInDown fast", 4, "ngIf"], [1, "hidden-xs", "hidden-sm"], ["placement", "right", "triggers", "focus", "c8yProductExperience", "", 1, "btn-clean", "text-primary", 3, "popover", "actionName"], ["c8yIcon", "question-circle-o"], ["class", "hidden-xs hidden-sm", 4, "ngIf"], ["translate", "", 1, "label", "label-default", "m-r-4"], ["class", "m-r-4", "ngNonBindable", "", "translate", "", 3, "translateParams", 4, "ngIf"], ["translate", "", 1, "m-r-4", 3, "translateParams"], [1, "m-l-8", "btn", "btn-xs", "btn-default", "m-r-4", 3, "title", "click"], [1, "badge", "badge-info", "m-r-4"], ["translate", "", 3, "translateParams"], ["placement", "right", "triggers", "focus", 1, "btn-clean", "text-primary", 3, "popover"], ["c8yIcon", "warning"], [4, "ngIf", "ngIfElse"], ["customTemplate", ""], ["c8yProductExperience", "", 1, "btnbar-btn", "btn-link", 3, "title", "actionName", "actionData", "click"], ["c8yIcon", "headerActionControl.icon", 1, "m-r-4"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["dropdown", "", "container", "body", "placement", "bottom left", 1, "dropdown", 3, "insideClick"], ["ddConfigureColumns", "bs-dropdown"], ["dropdownToggle", "", "c8yProductExperience", "", 1, "btnbar-btn", "c8y-dropdown", 3, "title", "actionName"], ["c8yIcon", "columns", 1, "m-r-4"], ["class", "dropdown-menu", 3, "click", 4, "dropdownMenu"], [1, "dropdown-menu", 3, "click"], [1, "bg-white"], ["cdkDropList", "", 1, "list-group", "m-0", 3, "cdkDropListDropped"], ["cdkDrag", "", "cdkDragLockAxis", "y", 4, "ngFor", "ngForOf"], ["cdkDrag", "", "cdkDragLockAxis", "y"], [1, "list-group-item", "draggable-after", "p-0", "a-i-center"], [1, "c8y-checkbox", "p-l-16", 3, "title"], ["type", "checkbox", "c8yProductExperience", "", 3, "ngModel", "actionName", "ngModelChange", "change"], ["class", "btn btn-dot showOnHover max-width-fit a-i-center", "placement", "left", "container", "body", 3, "tooltip", "click", 4, "ngIf"], ["placement", "left", "container", "body", 1, "btn", "btn-dot", "showOnHover", "max-width-fit", "a-i-center", 3, "tooltip", "click"], [3, "placement", "title", "outsideClick"], ["poConfirm", ""], ["c8yIcon", "minus-circle", 1, "text-danger"], [1, "btn", "btn-add-block", "m-0", 3, "title", "click"], ["c8yIcon", "plus-circle"], [1, "input-group", "input-group-search", "m-l-sm-16"], ["type", "search", "c8yProductExperience", "", 1, "form-control", 3, "placeholder", "ngModel", "actionName", "input"], [1, "input-group-addon"], ["c8yIcon", "search", 4, "ngIf"], ["c8yIcon", "times", "class", "pointer", "c8yProductExperience", "", 3, "actionName", "click", 4, "ngIf"], ["c8yIcon", "search"], ["c8yIcon", "times", "c8yProductExperience", "", 1, "pointer", 3, "actionName", "click"], [1, "table-data-grid-header-bulk-actions", "animated", "slideInDown", "fast"], [1, "visible-xs"], [3, "ngSwitch", 4, "ngFor", "ngForOf"], [1, "btnbar-btn", 3, "title", "click"], ["c8yIcon", "times"], [1, "interact", 3, "click"], [3, "ngSwitch"], ["class", "btnbar-btn", "c8yProductExperience", "", 3, "title", "actionName", "click", 4, "ngSwitchCase"], ["class", "btnbar-btn", "c8yProductExperience", "", 3, "title", "actionName", "click", 4, "ngSwitchDefault"], ["c8yProductExperience", "", 1, "btnbar-btn", 3, "title", "actionName", "click"], ["c8yIcon", "sign-out"], ["c8yIcon", "trash"], [3, "c8yIcon"], [3, "cdkColumnDef"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["cdk-header-cell", "", "data-type", "icon", 4, "cdkHeaderCellDef"], ["cdk-cell", "", "data-type", "icon", 4, "cdkCellDef"], ["cdk-header-cell", "", "data-type", "icon"], [1, "c8y-checkbox"], ["type", "checkbox", 3, "checked", "indeterminate", "change"], ["cdk-cell", "", "data-type", "icon"], ["type", "checkbox", 3, "checked", "change"], ["class", "dropdown", "dropdown", "", "container", "body", "placement", "bottom right", 4, "ngIf"], ["class", "btn btn-icon btn-xs btn-default", "container", "body", "c8yProductExperience", "", 3, "tooltip", "actionName", "click", 4, "ngSwitchCase"], ["class", "btn btn-dot showOnHover", "container", "body", "c8yProductExperience", "", 3, "tooltip", "actionName", "click", 4, "ngSwitchCase"], ["class", "btn btn-icon btn-xs btn-default showOnHover", "container", "body", "c8yProductExperience", "", 3, "tooltip", "actionName", "click", 4, "ngSwitchDefault"], ["container", "body", "c8yProductExperience", "", 1, "btn", "btn-icon", "btn-xs", "btn-default", 3, "tooltip", "actionName", "click"], ["c8yIcon", "pencil"], ["container", "body", "c8yProductExperience", "", 1, "btn", "btn-dot", "showOnHover", 3, "tooltip", "actionName", "click"], ["container", "body", "c8yProductExperience", "", 1, "btn", "btn-icon", "btn-xs", "btn-default", "showOnHover", 3, "tooltip", "actionName", "click"], [3, "c8yIcon", 4, "ngIf"], ["dropdown", "", "container", "body", "placement", "bottom right", 1, "dropdown"], ["dropdownToggle", "", "c8yProductExperience", "", 1, "dropdown-toggle", "c8y-dropdown", 3, "title", "actionName"], ["c8yIcon", "ellipsis-v"], ["class", "dropdown-menu dropdown-menu-right", 4, "dropdownMenu"], [1, "dropdown-menu", "dropdown-menu-right"], ["c8yProductExperience", "", 3, "title", "actionName", "click", 4, "ngSwitchCase"], ["c8yProductExperience", "", 3, "title", "actionName", "actionData", "click", 4, "ngSwitchDefault"], ["c8yProductExperience", "", 3, "title", "actionName", "click"], ["c8yIcon", "download"], ["c8yProductExperience", "", 3, "title", "actionName", "actionData", "click"], ["cdk-header-cell", "", 3, "ngClass", "sorted", "filtered", "hidden", 4, "cdkHeaderCellDef"], ["cdk-cell", "", 3, "ngClass", "hidden", 4, "cdkCellDef"], ["cdk-header-cell", "", 3, "ngClass"], [3, "title", 4, "ngIf"], ["class", "dropdown", "dropdown", "", "container", "body", 3, "placement", "insideClick", 4, "ngIf"], ["class", "btn-sort", 3, "title", "click", 4, "ngIf"], ["class", "resize-handle", 3, "mousedown", 4, "ngIf"], [3, "title"], [3, "spec"], ["dropdown", "", "container", "body", 1, "dropdown", 3, "placement", "insideClick"], ["dropdown", "bs-dropdown"], ["dropdownToggle", "", "c8yProductExperience", "", 1, "btn-header", "c8y-dropdown", 3, "title", "actionName"], ["c8yIcon", "filter", 3, "title"], ["class", "dropdown-menu", 3, "ngClass", "click", 4, "dropdownMenu"], [1, "dropdown-menu", 3, "ngClass", "click"], [1, "data-grid__dropdown"], [1, "btn-sort", 3, "title", "click"], ["c8yIcon", "long-arrow-up", 4, "ngSwitchCase"], ["c8yIcon", "long-arrow-down", 4, "ngSwitchCase"], ["c8yIcon", "exchange", 4, "ngSwitchDefault"], ["c8yIcon", "long-arrow-up"], ["c8yIcon", "long-arrow-down"], ["c8yIcon", "exchange"], [1, "resize-handle", 3, "mousedown"], ["cdk-cell", "", 3, "ngClass"], ["cdk-footer-cell", ""], ["infiniteScrollContainer", ""], ["cdk-header-row", ""], ["cdk-row", "", 3, "mouseover", "mouseleave", "click"], ["cdk-footer-row", "", 3, "ngClass"], [1, "row", "m-0", "p-t-40", "p-b-40"], [1, "col-md-4", "col-md-offset-4"], [1, "table-data-grid-footer", "separator", "large-padding"], [1, "col-sm-4", "no-gutter"], ["class", "counter", 4, "ngIf"], [1, "col-sm-4", "no-gutter", "text-center"], ["class", "form-group form-inline", 4, "ngIf"], [1, "col-sm-4", "no-gutter", "text-right"], ["previousText", " ", "nextText", " ", 3, "hidden", "ngModel", "totalItems", "itemsPerPage", "maxSize", "boundaryLinks", "pageChanged", "numPages", 4, "ngIf"], [1, "counter"], ["translate", "", 1, "text-muted", 3, "translateParams"], [1, "form-group", "form-inline"], [1, "m-r-4"], [1, "c8y-select-wrapper"], [1, "form-control", 3, "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], [3, "ngValue"], ["previousText", " ", "nextText", " ", 3, "ngModel", "totalItems", "itemsPerPage", "maxSize", "boundaryLinks", "pageChanged", "numPages"]], template: function DataGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c102);
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtemplate(3, DataGridComponent_div_3_Template, 3, 1, "div", 2);
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵtemplate(5, DataGridComponent_div_5_Template, 18, 20, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "table", 4);
        ɵngcc0.ɵɵlistener("mousemove", function DataGridComponent_Template_table_mousemove_6_listener($event) { return ctx.resizeHandleContainerMouseMove$.emit($event); })("mouseup", function DataGridComponent_Template_table_mouseup_6_listener($event) { return ctx.resizeHandleContainerMouseUp$.emit($event); });
        ɵngcc0.ɵɵtemplate(7, DataGridComponent_ng_container_7_Template, 5, 4, "ng-container", 5);
        ɵngcc0.ɵɵelementContainerStart(8, 6);
        ɵngcc0.ɵɵtemplate(9, DataGridComponent_td_9_Template, 3, 2, "td", 7);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(10, DataGridComponent_tr_10_Template, 1, 0, "tr", 8);
        ɵngcc0.ɵɵtemplate(11, DataGridComponent_tr_11_Template, 1, 0, "tr", 9);
        ɵngcc0.ɵɵelementContainerStart(12);
        ɵngcc0.ɵɵtemplate(13, DataGridComponent_tr_13_Template, 1, 3, "tr", 10);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(14, DataGridComponent_div_14_Template, 3, 0, "div", 11);
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵpipe(16, "async");
        ɵngcc0.ɵɵtemplate(17, DataGridComponent_div_17_Template, 10, 9, "div", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(30, _c103, ɵngcc0.ɵɵpipeBind1(2, 22, ctx.dataSource.loading$) && !ctx.loadMoreComponent));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(4, 24, ctx.dataSource.loading$) && !ctx.loadMoreComponent);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayOptions.gridHeader);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("grid-template-columns", ctx.styles.gridTemplateColumns);
        ɵngcc0.ɵɵclassProp("table-striped", ctx.displayOptions.striped)("table-bordered", ctx.displayOptions.bordered)("table-data-grid-with-checkboxes", ctx.selectable)("table-data-grid-with-actions", ctx.actionControls.length > 0);
        ɵngcc0.ɵɵproperty("dataSource", ctx.dataSource)("trackBy", ctx.trackByName);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns)("ngForTrackBy", ctx.trackByName);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("cdkHeaderRowDef", ctx.columnNames);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("cdkRowDefColumns", ctx.columnNames);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("cdkFooterRowDef", ɵngcc0.ɵɵpureFunction0(32, _c104));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(15, 26, ctx.dataSource.loading$) && ɵngcc0.ɵɵpipeBind1(16, 28, ctx.dataSource.stats$).filteredSize === 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pagination && !ctx.infiniteScroll);
    } }, directives: function () { return [ɵngcc7.NgClass, ɵngcc7.NgIf, ɵngcc22.CdkTable, ɵngcc7.NgForOf, ɵngcc22.CdkColumnDef, ɵngcc22.CdkFooterCellDef, ɵngcc22.CdkHeaderRowDef, ɵngcc22.CdkRowDef, ɵngcc22.CdkFooterRowDef, ProgressBarComponent, IconDirective, ProductExperienceDirective, ɵngcc12.PopoverDirective, C8yTranslateDirective, ɵngcc7.NgTemplateOutlet, ɵngcc9.BsDropdownDirective, ɵngcc9.BsDropdownToggleDirective, ɵngcc9.BsDropdownMenuDirective, ɵngcc21.CdkDropList, ɵngcc21.CdkDrag, ɵngcc14.CheckboxControlValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc11.TooltipDirective, PopoverConfirmComponent, ɵngcc14.DefaultValueAccessor, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc22.CdkHeaderCellDef, ɵngcc22.CdkCellDef, ɵngcc22.CdkHeaderCell, ɵngcc22.CdkCell, CellRendererComponent, FilteringFormRendererComponent, ɵngcc22.CdkFooterCell, ɵngcc22.CdkHeaderRow, ɵngcc22.CdkRow, ɵngcc22.CdkFooterRow, ɵngcc14.SelectControlValueAccessor, ɵngcc14.NgSelectOption, ɵngcc14.ɵNgSelectMultipleOption, ɵngcc23.PaginationComponent]; }, pipes: function () { return [ɵngcc7.AsyncPipe, C8yTranslatePipe, IsControlVisiblePipe, MapFunctionPipe]; }, encapsulation: 2 });
DataGridComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: GainsightService },
    { type: BsModalService },
    { type: AlertService }
];
DataGridComponent.propDecorators = {
    title: [{ type: Input }],
    loadMoreItemsLabel: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    showSearch: [{ type: Input }],
    refresh: [{ type: Input }],
    _columns: [{ type: Input, args: ['columns',] }],
    _rows: [{ type: Input, args: ['rows',] }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _infiniteScroll: [{ type: Input, args: ['infiniteScroll',] }],
    _serverSideDataCallback: [{ type: Input, args: ['serverSideDataCallback',] }],
    _selectable: [{ type: Input, args: ['selectable',] }],
    _selectionPrimaryKey: [{ type: Input, args: ['selectionPrimaryKey',] }],
    _displayOptions: [{ type: Input, args: ['displayOptions',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    _headerActionControls: [{ type: Input, args: ['headerActionControls',] }],
    searchText: [{ type: Input }],
    configureColumnsEnabled: [{ type: Input }],
    showCounterWarning: [{ type: Input }],
    rowMouseOver: [{ type: Output }],
    rowMouseLeave: [{ type: Output }],
    rowClick: [{ type: Output }],
    onConfigChange: [{ type: Output }],
    onBeforeFilter: [{ type: Output }],
    onBeforeSearch: [{ type: Output }],
    onFilter: [{ type: Output }],
    itemsSelect: [{ type: Output }],
    onReload: [{ type: Output }],
    onAddCustomColumn: [{ type: Output }],
    onRemoveCustomColumn: [{ type: Output }],
    columnRenderers: [{ type: ContentChildren, args: [ColumnDirective,] }],
    scrollContainer: [{ type: ViewChild, args: ['scroll', { static: true },] }],
    infiniteScrollContainer: [{ type: ViewChild, args: ['infiniteScrollContainer', { static: false, read: ViewContainerRef },] }],
    thRefs: [{ type: ViewChildren, args: [CdkHeaderCell, { read: ElementRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataGridComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-data-grid',
                template: "<div\n  #scroll\n  class=\"table-data-grid-scroll\"\n  [ngClass]=\"{ 'table-data-grid__overlay': (dataSource.loading$ | async) && !loadMoreComponent }\"\n>\n  <div\n    class=\"table-data-grid__loading--wrapper\"\n    *ngIf=\"(dataSource.loading$ | async) && !loadMoreComponent\"\n  >\n    <div class=\"table-data-grid__loading--loader\">\n      <c8y-progress-bar [message]=\"loadingItemsLabel\"></c8y-progress-bar>\n    </div>\n  </div>\n\n  <div *ngIf=\"displayOptions.gridHeader\" class=\"table-data-grid-header separator large-padding\">\n    <h4 [ngClass]=\"{ 'm-r-16': !!title }\">{{ title | translate }}</h4>\n\n    <ng-container *ngIf=\"displayOptions.filter\">\n      <span *ngIf=\"!filteringApplied\">\n        <span class=\"label label-default m-r-4\" translate>No filters</span>\n        <small\n          *ngIf=\"!!filteringLabelsParams.allItemsCount\"\n          class=\"m-r-4\"\n          ngNonBindable\n          translate\n          [translateParams]=\"filteringLabelsParams\"\n        >\n          {{ filteredItemsCount }} of {{ allItemsCount }} items\n        </small>\n      </span>\n      <span *ngIf=\"filteringApplied\">\n        <ng-container *ngIf=\"!!filteringLabelsParams.allItemsCount\">\n          <span class=\"badge badge-info m-r-4\">\n            {{ (dataSource.stats$ | async).filteredSize }}\n          </span>\n          <small ngNonBindable translate [translateParams]=\"filteringLabelsParams\">\n            of {{ allItemsCount }} items\n          </small>\n        </ng-container>\n        <button\n          title=\" {{ 'Clear filters' | translate }}\"\n          class=\"m-l-8 btn btn-xs btn-default m-r-4\"\n          (click)=\"clearFilters()\"\n        >\n          {{ 'Clear filters' | translate }}\n        </button>\n      </span>\n\n      <span class=\"hidden-xs hidden-sm\">\n        <button\n          class=\"btn-clean text-primary\"\n          popover=\"{{ 'Click the column headers to apply filters.' | translate }}\"\n          placement=\"right\"\n          triggers=\"focus\"\n          c8yProductExperience\n          [actionName]=\"'dataGrid:ApplyFilterInfo'\"\n        >\n          <i c8yIcon=\"question-circle-o\"></i>\n        </button>\n      </span>\n\n      <span class=\"hidden-xs hidden-sm\" *ngIf=\"showCounterWarning\">\n        <button\n          class=\"btn-clean text-primary\"\n          popover=\"{{\n            'The counter for the total number of items might be inaccurate.' | translate\n          }}\"\n          placement=\"right\"\n          triggers=\"focus\"\n        >\n          <i c8yIcon=\"warning\"></i>\n        </button>\n      </span>\n    </ng-container>\n\n    <div class=\"flex-item-right\">\n      <div class=\"btnbar flex-row\">\n        <ng-container *ngFor=\"let headerActionControl of headerActionControls\">\n          <ng-container *ngIf=\"headerActionControl | isControlVisible\">\n            <ng-container *ngIf=\"!headerActionControl.template; else customTemplate\">\n              <button\n                title=\"{{ headerActionControl.text | translate }}\"\n                class=\"btnbar-btn btn-link\"\n                (click)=\"headerActionControl.callback()\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:' + headerActionControl.text\"\n                [actionData]=\"{ type: headerActionControl.type }\"\n              >\n                <i c8yIcon=\"headerActionControl.icon\" class=\"m-r-4\"></i>\n                <span>{{ headerActionControl.text | translate }}</span>\n              </button>\n            </ng-container>\n            <ng-template #customTemplate>\n              <ng-container\n                *ngTemplateOutlet=\"\n                  headerActionControl.template;\n                  context: { headerActionControl: headerActionControl }\n                \"\n              ></ng-container>\n            </ng-template>\n          </ng-container>\n        </ng-container>\n\n        <div\n          *ngIf=\"configureColumnsEnabled\"\n          class=\"dropdown\"\n          dropdown\n          #ddConfigureColumns=\"bs-dropdown\"\n          [insideClick]=\"true\"\n          container=\"body\"\n          placement=\"bottom left\"\n        >\n          <button\n            title=\"{{ 'Configure columns' | translate }}\"\n            class=\"btnbar-btn c8y-dropdown\"\n            dropdownToggle\n            c8yProductExperience\n            [actionName]=\"'dataGrid:ConfigureColumns'\"\n          >\n            <i c8yIcon=\"columns\" class=\"m-r-4\"></i>\n            <span>{{ 'Configure columns' | translate }}</span>\n          </button>\n\n          <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n            <li class=\"bg-white\">\n              <div cdkDropList (cdkDropListDropped)=\"onColumnDrop($event)\" class=\"list-group m-0\">\n                <div *ngFor=\"let column of columns\" cdkDrag cdkDragLockAxis=\"y\">\n                  <ng-container *ngIf=\"!column.positionFixed\">\n                    <div class=\"list-group-item draggable-after p-0 a-i-center\">\n                      <label\n                        title=\"{{ (column.header | translate) || column.name }}\"\n                        class=\"c8y-checkbox p-l-16\"\n                      >\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column.visible\"\n                          (change)=\"updateGridColumnsSize(); emitConfigChange()\"\n                          c8yProductExperience\n                          [actionName]=\"\n                            'dataGrid:ConfigureColumns:' + (column.header || column.name)\n                          \"\n                        />\n                        <span></span>\n                        <span>{{ (column.header | translate) || column.name }}</span>\n                      </label>\n                      <button\n                        *ngIf=\"column.custom\"\n                        class=\"btn btn-dot showOnHover max-width-fit a-i-center\"\n                        tooltip=\"{{ 'Remove`column,verb`' | translate }}\"\n                        placement=\"left\"\n                        container=\"body\"\n                        (click)=\"removeCustomColumn(poConfirm, column, ddConfigureColumns)\"\n                      >\n                        <c8y-popover-confirm\n                          [placement]=\"'left'\"\n                          [title]=\"'Confirm removal' | translate\"\n                          [outsideClick]=\"true\"\n                          #poConfirm\n                        ></c8y-popover-confirm>\n                        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n                      </button>\n                    </div>\n                  </ng-container>\n                </div>\n              </div>\n            </li>\n            <li *ngIf=\"onAddCustomColumn?.observers?.length\">\n              <button\n                title=\"{{ 'Add custom column' | translate }}\"\n                class=\"btn btn-add-block m-0\"\n                (click)=\"openCustomColumnModal(); ddConfigureColumns.hide()\"\n              >\n                <i c8yIcon=\"plus-circle\"></i>\n                <span>{{ 'Add custom column' | translate }}</span>\n              </button>\n            </li>\n          </ul>\n        </div>\n\n        <button\n          title=\"{{ 'Reload' | translate }}\"\n          class=\"btnbar-btn btn-link\"\n          [disabled]=\"dataSource.loading$ | async\"\n          (click)=\"clickReload()\"\n        >\n          <i c8yIcon=\"refresh\" class=\"m-r-4\"></i>\n          <span>{{ 'Reload' | translate }}</span>\n        </button>\n\n        <div\n          *ngIf=\"!serverSideDataCallback || showSearch\"\n          class=\"input-group input-group-search m-l-sm-16\"\n        >\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Search\u2026' | translate }}\"\n            [ngModel]=\"searchText\"\n            (input)=\"searchText$.emit($event.target.value)\"\n            c8yProductExperience\n            [actionName]=\"'dataGrid:SearchInput'\"\n          />\n          <div class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"searchText.length === 0\"></i>\n            <i\n              c8yIcon=\"times\"\n              class=\"pointer\"\n              *ngIf=\"searchText.length > 0\"\n              (click)=\"searchText = ''; searchText$.emit('')\"\n              c8yProductExperience\n              [actionName]=\"'dataGrid:SearchInputClear'\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"table-data-grid-header-bulk-actions animated slideInDown fast\"\n      *ngIf=\"selectedItemIds.length !== 0\"\n    >\n      <h4>\n        <span ngNonBindable translate [translateParams]=\"{ count: selectedItemIds.length }\">\n          {{ count }} selected items.\n        </span>\n        <br class=\"visible-xs\" />\n        <small *ngIf=\"!serverSideDataCallback && selectedItemIds.length >= pagination.pageSize\">\n          <a (click)=\"setAllItemsSelected(true)\" class=\"interact\">\n            <span\n              ngNonBindable\n              translate\n              [translateParams]=\"{ count: (dataSource.stats$ | async).filteredSize }\"\n            >\n              Select all {{ count }} items\n            </span>\n          </a>\n        </small>\n      </h4>\n      <div class=\"flex-item-right\">\n        <div class=\"btnbar flex-row\">\n          <ng-container\n            *ngFor=\"let bulkActionControl of bulkActionControls\"\n            [ngSwitch]=\"bulkActionControl.type\"\n          >\n            <ng-container *ngIf=\"bulkActionControl | isControlVisible: selectedItemIds\">\n              <button\n                title=\"{{ 'Export' | translate }}\"\n                *ngSwitchCase=\"builtInActionType.Export\"\n                class=\"btnbar-btn\"\n                (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:BulkExport'\"\n              >\n                <i c8yIcon=\"sign-out\"></i>\n                <span>{{ 'Export' | translate }}</span>\n              </button>\n\n              <button\n                title=\"{{ 'Delete' | translate }}\"\n                *ngSwitchCase=\"builtInActionType.Delete\"\n                class=\"btnbar-btn\"\n                (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:BulkDelete'\"\n              >\n                <i c8yIcon=\"trash\"></i>\n                <span>{{ 'Delete' | translate }}</span>\n              </button>\n\n              <button\n                title=\"{{ bulkActionControl.text | translate }}\"\n                *ngSwitchDefault\n                class=\"btnbar-btn\"\n                (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n                c8yProductExperience\n                [actionName]=\"'dataGrid:Bulk:' + bulkActionControl.text\"\n              >\n                <i c8yIcon=\"{{ bulkActionControl.icon }}\"></i>\n                <span>{{ bulkActionControl.text | translate }}</span>\n              </button>\n            </ng-container>\n          </ng-container>\n\n          <button title=\"{{ 'Cancel' | translate }}\" class=\"btnbar-btn\" (click)=\"cancel()\">\n            <i c8yIcon=\"times\"></i>\n            <span>{{ 'Cancel' | translate }}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <table\n    class=\"table table-hover table-filtered-sorted table-data-grid large-padding\"\n    cdk-table\n    [dataSource]=\"dataSource\"\n    [trackBy]=\"trackByName\"\n    [class.table-striped]=\"displayOptions.striped\"\n    [class.table-bordered]=\"displayOptions.bordered\"\n    [class.table-data-grid-with-checkboxes]=\"selectable\"\n    [class.table-data-grid-with-actions]=\"actionControls.length > 0\"\n    [style.grid-template-columns]=\"styles.gridTemplateColumns\"\n    (mousemove)=\"resizeHandleContainerMouseMove$.emit($event)\"\n    (mouseup)=\"resizeHandleContainerMouseUp$.emit($event)\"\n  >\n    <ng-container\n      *ngFor=\"let column of columns; let i = index; trackBy: trackByName\"\n      [cdkColumnDef]=\"column.name\"\n    >\n      <ng-container [ngSwitch]=\"column.name\">\n        <ng-container *ngSwitchCase=\"'checkbox'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\">\n            <div>\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [checked]=\"currentPageSelectionState.allSelected\"\n                  [indeterminate]=\"\n                    !(\n                      currentPageSelectionState.allSelected ||\n                      currentPageSelectionState.allDeselected\n                    )\n                  \"\n                  (change)=\"setAllItemsInCurrentPageSelected($event.target.checked)\"\n                />\n                <span></span>\n              </label>\n            </div>\n          </th>\n\n          <td cdk-cell *cdkCellDef=\"let row\" data-type=\"icon\">\n            <label class=\"c8y-checkbox\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isItemSelected(row)\"\n                (change)=\"setItemsSelected([row], $event.target.checked)\"\n              />\n              <span></span>\n            </label>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'actions'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\"></th>\n\n          <td cdk-cell *cdkCellDef=\"let row\" data-type=\"icon\">\n            <ng-container *ngIf=\"actionControls.length <= 2\">\n              <ng-container\n                *ngFor=\"let actionControl of actionControls\"\n                [ngSwitch]=\"actionControl.type\"\n              >\n                <ng-container *ngIf=\"actionControl.showIf ? actionControl.showIf(row) : true\">\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Edit\"\n                    class=\"btn btn-icon btn-xs btn-default\"\n                    tooltip=\"{{ 'Edit' | translate }}\"\n                    container=\"body\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    c8yProductExperience\n                    [actionName]=\"'dataGridEntry:Edit'\"\n                  >\n                    <i c8yIcon=\"pencil\"></i>\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Delete\"\n                    class=\"btn btn-dot showOnHover\"\n                    tooltip=\"{{ 'Delete' | translate }}\"\n                    container=\"body\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    c8yProductExperience\n                    [actionName]=\"'dataGridEntry:Delete'\"\n                  >\n                    <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n                  </button>\n                  <button\n                    *ngSwitchDefault\n                    class=\"btn btn-icon btn-xs btn-default showOnHover\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    tooltip=\"{{ (actionControl.icon ? actionControl.text : '') | translate }}\"\n                    container=\"body\"\n                    c8yProductExperience\n                    [actionName]=\"'dataGridEntry:' + actionControl.text\"\n                  >\n                    <i *ngIf=\"actionControl.icon\" c8yIcon=\"{{ actionControl.icon }}\"></i>\n                    <span *ngIf=\"!actionControl.icon\">{{ actionControl.text | translate }}</span>\n                  </button>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n\n            <div [ngClass]=\"{ 'm-l-auto overflow-visible': actionControls.length > 2 }\">\n              <div\n                *ngIf=\"actionControls.length > 2\"\n                class=\"dropdown\"\n                dropdown\n                container=\"body\"\n                placement=\"bottom right\"\n              >\n                <button\n                  title=\"{{ 'Actions' | translate }}\"\n                  class=\"dropdown-toggle c8y-dropdown\"\n                  dropdownToggle\n                  c8yProductExperience\n                  [actionName]=\"'dataGridEntry:Actions'\"\n                >\n                  <i c8yIcon=\"ellipsis-v\"></i>\n                </button>\n                <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                  <li *ngFor=\"let actionControl of actionControls\" [ngSwitch]=\"actionControl.type\">\n                    <ng-container *ngIf=\"actionControl | isControlVisible: row\">\n                      <button\n                        title=\"{{ 'Edit' | translate }}\"\n                        *ngSwitchCase=\"builtInActionType.Edit\"\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:Edit'\"\n                      >\n                        <i c8yIcon=\"pencil\"></i>\n                        {{ 'Edit' | translate }}\n                      </button>\n                      <button\n                        title=\"{{ 'Delete' | translate }}\"\n                        *ngSwitchCase=\"builtInActionType.Delete\"\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:Delete'\"\n                      >\n                        <i c8yIcon=\"trash\"></i>\n                        {{ 'Delete' | translate }}\n                      </button>\n                      <button\n                        title=\"{{ 'Export' | translate }}\"\n                        *ngSwitchCase=\"builtInActionType.Export\"\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:Export'\"\n                      >\n                        <i c8yIcon=\"download\"></i>\n                        {{ 'Export' | translate }}\n                      </button>\n                      <button\n                        title=\"{{ actionControl.text | translate }}\"\n                        *ngSwitchDefault\n                        (click)=\"actionControl.callback(row, reload.bind(this))\"\n                        c8yProductExperience\n                        [actionName]=\"'dataGridActions:' + actionControl.text\"\n                        [actionData]=\"{ type: actionControl.type }\"\n                      >\n                        <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                        {{ actionControl.text | translate }}\n                      </button>\n                    </ng-container>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <th\n            cdk-header-cell\n            *cdkHeaderCellDef\n            [ngClass]=\"column.headerCSSClassName\"\n            [attr.data-type]=\"column.dataType\"\n            [class.sorted]=\"column.sortOrder\"\n            [class.filtered]=\"column | map: isColumnFilteringApplied\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <div *ngIf=\"!column.filterable\" [title]=\"(column.header | translate) || column.name\">\n              <ng-container\n                *ngIf=\"\n                  [\n                    {\n                      columnName: column.name,\n                      value: (column.header | translate) || column.name\n                    }\n                  ] | map: getHeaderCellRendererSpec:this as cellRendererSpec\n                \"\n              >\n                <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n              </ng-container>\n            </div>\n\n            <!-- isDropDownPlacedRight to be removed when columns are transformed to observables. -->\n            <div\n              *ngIf=\"column.filterable\"\n              class=\"dropdown\"\n              dropdown\n              #dropdown=\"bs-dropdown\"\n              container=\"body\"\n              placement=\"bottom {{ isDropDownPlacedRight(column) ? 'right' : 'left' }} \"\n              [insideClick]=\"true\"\n            >\n              <button\n                class=\"btn-header c8y-dropdown\"\n                dropdownToggle\n                [title]=\"(column.header | translate) || column.name\"\n                c8yProductExperience\n                [actionName]=\"'dataGridFilterColumn:' + (column.header || column.name)\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    [\n                      {\n                        columnName: column.name,\n                        value: (column.header | translate) || column.name\n                      }\n                    ] | map: getHeaderCellRendererSpec:this as cellRendererSpec\n                  \"\n                >\n                  <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n                </ng-container>\n                <i c8yIcon=\"filter\" title=\"{{ 'Filter' | translate }}\"></i>\n              </button>\n\n              <!-- isDropDownPlacedRight to be removed when columns are transformed to observables. -->\n              <ul\n                *dropdownMenu\n                class=\"dropdown-menu\"\n                [ngClass]=\"{ 'dropdown-menu-right-grid': isDropDownPlacedRight(column) }\"\n                (click)=\"$event.stopPropagation()\"\n              >\n                <li class=\"data-grid__dropdown\">\n                  <ng-container\n                    *ngIf=\"\n                      [\n                        {\n                          column: column,\n                          dropdown: dropdown\n                        }\n                      ] | map: getFilteringFormRendererSpec:this as filteringFormRendererSpec\n                    \"\n                  >\n                    <c8y-filtering-form-renderer\n                      [spec]=\"filteringFormRendererSpec\"\n                    ></c8y-filtering-form-renderer>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n\n            <button\n              *ngIf=\"column.sortable\"\n              class=\"btn-sort\"\n              title=\"{{ 'Sort' | translate }}\"\n              (click)=\"changeSortOrder(column.name)\"\n            >\n              <ng-container [ngSwitch]=\"column.sortOrder\">\n                <i *ngSwitchCase=\"'asc'\" c8yIcon=\"long-arrow-up\"></i>\n                <i *ngSwitchCase=\"'desc'\" c8yIcon=\"long-arrow-down\"></i>\n                <i *ngSwitchDefault c8yIcon=\"exchange\"></i>\n              </ng-container>\n            </button>\n\n            <span\n              *ngIf=\"column.resizable\"\n              class=\"resize-handle\"\n              (mousedown)=\"\n                resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column.name })\n              \"\n            ></span>\n          </th>\n\n          <td\n            cdk-cell\n            *cdkCellDef=\"let row\"\n            [ngClass]=\"column.cellCSSClassName\"\n            [attr.data-cell-title]=\"column.header | translate\"\n            [attr.data-type]=\"column.dataType\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <ng-container\n              *ngIf=\"\n                [\n                  {\n                    value: resolveCellValue(row, column.path),\n                    row: row,\n                    columnName: column.name\n                  }\n                ] | map: getCellRendererSpec:this as cellRendererSpec\n              \"\n            >\n              <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n            </ng-container>\n          </td>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"infiniteScrollFooter\">\n      <td cdk-footer-cell *cdkFooterCellDef [style.grid-column]=\"styles.gridInfiniteScrollColumn\">\n        <template #infiniteScrollContainer></template>\n      </td>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"columnNames\"></tr>\n\n    <tr\n      cdk-row\n      *cdkRowDef=\"let row; columns: columnNames\"\n      (mouseover)=\"rowMouseOver.emit(row)\"\n      (mouseleave)=\"rowMouseLeave.emit(row)\"\n      (click)=\"rowClick.emit(row)\"\n    ></tr>\n\n    <ng-container>\n      <tr\n        [ngClass]=\"{ hidden: !infiniteScroll }\"\n        cdk-footer-row\n        *cdkFooterRowDef=\"['infiniteScrollFooter']\"\n      ></tr>\n    </ng-container>\n  </table>\n\n  <div\n    class=\"row m-0 p-t-40 p-b-40\"\n    *ngIf=\"!(dataSource.loading$ | async) && (dataSource.stats$ | async).filteredSize === 0\"\n  >\n    <div class=\"col-md-4 col-md-offset-4\">\n      <ng-content select=\"c8y-ui-empty-state, .c8y-empty-state\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"pagination && !infiniteScroll\" class=\"table-data-grid-footer separator large-padding\">\n    <div class=\"col-sm-4 no-gutter\">\n      <div *ngIf=\"(dataSource.stats$ | async).currentPageSize > 0\" class=\"counter\">\n        <span class=\"text-muted\" ngNonBindable translate [translateParams]=\"paginationLabelParams\">\n          {{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }}\n        </span>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-center\">\n      <div\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > minPossiblePageSize\"\n        class=\"form-group form-inline\"\n      >\n        <label class=\"m-r-4\">{{ 'Items per page' | translate }}</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"pagination.pageSize\"\n            (ngModelChange)=\"\n              updatePagination({ itemsPerPage: $event, page: pagination.currentPage })\n            \"\n          >\n            <option *ngFor=\"let pageSize of possiblePageSizes\" [ngValue]=\"pageSize\">\n              {{ pageSize }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-right\">\n      <pagination\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > 0\"\n        [class.hidden]=\"hidePagination$ | async\"\n        [ngModel]=\"pagination.currentPage\"\n        (pageChanged)=\"updatePagination($event)\"\n        [totalItems]=\"(dataSource.stats$ | async).filteredSize\"\n        [itemsPerPage]=\"pagination.pageSize\"\n        (numPages)=\"totalPagesCount$.next($event)\"\n        [maxSize]=\"5\"\n        [boundaryLinks]=\"false\"\n        previousText=\" \"\n        nextText=\" \"\n      ></pagination>\n    </div>\n  </div>\n</div>\n",
                host: { class: 'd-contents' }
            }]
    }], function () { return [{ type: ɵngcc20.DomSanitizer }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: GainsightService }, { type: ɵngcc10.BsModalService }, { type: AlertService }]; }, { title: [{
            type: Input
        }], loadMoreItemsLabel: [{
            type: Input
        }], loadingItemsLabel: [{
            type: Input
        }], showSearch: [{
            type: Input
        }], searchText: [{
            type: Input
        }], configureColumnsEnabled: [{
            type: Input
        }], showCounterWarning: [{
            type: Input
        }], rowMouseOver: [{
            type: Output
        }], rowMouseLeave: [{
            type: Output
        }], rowClick: [{
            type: Output
        }], onConfigChange: [{
            type: Output
        }], onBeforeFilter: [{
            type: Output
        }], onBeforeSearch: [{
            type: Output
        }], onFilter: [{
            type: Output
        }], itemsSelect: [{
            type: Output
        }], onReload: [{
            type: Output
        }], onAddCustomColumn: [{
            type: Output
        }], onRemoveCustomColumn: [{
            type: Output
        }], _columns: [{
            type: Input,
            args: ['columns']
        }], _rows: [{
            type: Input,
            args: ['rows']
        }], _pagination: [{
            type: Input,
            args: ['pagination']
        }], _infiniteScroll: [{
            type: Input,
            args: ['infiniteScroll']
        }], _serverSideDataCallback: [{
            type: Input,
            args: ['serverSideDataCallback']
        }], _selectable: [{
            type: Input,
            args: ['selectable']
        }], _selectionPrimaryKey: [{
            type: Input,
            args: ['selectionPrimaryKey']
        }], _displayOptions: [{
            type: Input,
            args: ['displayOptions']
        }], _actionControls: [{
            type: Input,
            args: ['actionControls']
        }], _bulkActionControls: [{
            type: Input,
            args: ['bulkActionControls']
        }], _headerActionControls: [{
            type: Input,
            args: ['headerActionControls']
        }], refresh: [{
            type: Input
        }], columnRenderers: [{
            type: ContentChildren,
            args: [ColumnDirective]
        }], scrollContainer: [{
            type: ViewChild,
            args: ['scroll', { static: true }]
        }], infiniteScrollContainer: [{
            type: ViewChild,
            args: ['infiniteScrollContainer', { static: false, read: ViewContainerRef }]
        }], thRefs: [{
            type: ViewChildren,
            args: [CdkHeaderCell, { read: ElementRef }]
        }] }); })();

class IsControlVisiblePipe {
    transform(actionControl, arg) {
        return !actionControl.showIf || actionControl.showIf(arg);
    }
}
IsControlVisiblePipe.ɵfac = function IsControlVisiblePipe_Factory(t) { return new (t || IsControlVisiblePipe)(); };
IsControlVisiblePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "isControlVisible", type: IsControlVisiblePipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IsControlVisiblePipe, [{
        type: Pipe,
        args: [{ name: 'isControlVisible' }]
    }], null, null); })();

class DataGridModule {
}
DataGridModule.ɵfac = function DataGridModule_Factory(t) { return new (t || DataGridModule)(); };
DataGridModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DataGridModule });
DataGridModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule$1,
            CdkTableModule,
            DragDropModule,
            FormsModule$1,
            ReactiveFormsModule,
            CommonModule,
            FormsModule,
            ModalModule,
            BsDropdownModule.forRoot(),
            PopoverModule.forRoot(),
            TooltipModule.forRoot(),
            PaginationModule.forRoot(),
            ProductExperienceModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataGridModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule$1,
                    CdkTableModule,
                    DragDropModule,
                    FormsModule$1,
                    ReactiveFormsModule,
                    CommonModule,
                    FormsModule,
                    ModalModule,
                    BsDropdownModule.forRoot(),
                    PopoverModule.forRoot(),
                    TooltipModule.forRoot(),
                    PaginationModule.forRoot(),
                    ProductExperienceModule
                ],
                declarations: [
                    CellRendererDefDirective,
                    HeaderCellRendererDefDirective,
                    CellRendererComponent,
                    FilteringFormRendererDefDirective,
                    FilteringFormRendererComponent,
                    ColumnDirective,
                    DataGridComponent,
                    IsControlVisiblePipe,
                    ConfigureCustomColumnComponent
                ],
                exports: [
                    CellRendererDefDirective,
                    HeaderCellRendererDefDirective,
                    FilteringFormRendererDefDirective,
                    ColumnDirective,
                    DataGridComponent,
                    IsControlVisiblePipe
                ],
                entryComponents: [DataGridComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DataGridModule, { declarations: function () { return [CellRendererDefDirective, HeaderCellRendererDefDirective, CellRendererComponent, FilteringFormRendererDefDirective, FilteringFormRendererComponent, ColumnDirective, DataGridComponent, IsControlVisiblePipe, ConfigureCustomColumnComponent]; }, imports: function () { return [CommonModule$1,
        CdkTableModule,
        DragDropModule,
        FormsModule$1,
        ReactiveFormsModule, CommonModule, FormsModule, ModalModule, ɵngcc9.BsDropdownModule, ɵngcc12.PopoverModule, ɵngcc11.TooltipModule, ɵngcc23.PaginationModule, ProductExperienceModule]; }, exports: function () { return [CellRendererDefDirective, HeaderCellRendererDefDirective, FilteringFormRendererDefDirective, ColumnDirective, DataGridComponent, IsControlVisiblePipe]; } }); })();

class HelpService {
    constructor(translateService, options) {
        this.translateService = translateService;
        this.options = options;
        this.contextHelp = new BehaviorSubject(false);
        this.isWarningAlertViewed = false;
        this.SUPPORTED_LANGUAGES = ['en'];
        this.handleContextHelp();
    }
    isSupportedLanguage() {
        return this.SUPPORTED_LANGUAGES.indexOf(this.translateService.currentLang) > -1;
    }
    handleContextHelp() {
        const option = this.getContextHelpOption();
        if (option) {
            this.contextHelp.next(option);
            return;
        }
        this.contextHelp.next(false);
    }
    getContextHelpOption() {
        return this.options.contextHelp;
    }
}
HelpService.ɵfac = function HelpService_Factory(t) { return new (t || HelpService)(ɵngcc0.ɵɵinject(ɵngcc4.TranslateService), ɵngcc0.ɵɵinject(OptionsService)); };
HelpService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HelpService_Factory() { return new HelpService(i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(OptionsService)); }, token: HelpService, providedIn: "root" });
HelpService.ctorParameters = () => [
    { type: TranslateService$1 },
    { type: OptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HelpService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc4.TranslateService }, { type: OptionsService }]; }, null); })();

/**
 * A component which shows a context help in
 * the action bar.
 *
 * @example
 * ```html
 * <c8y-help src="/users-guide/cockpit/#dashboards"></c8y-help>
 * ```
 */
class HelpComponent {
    /**
     * @ignore Only private DI
     */
    constructor(docsService, helpService) {
        this.docsService = docsService;
        this.helpService = helpService;
        /**
         * The source of the documentation. Used to link to the documentation as well as
         * to parse the source to display.
         */
        this.src = '';
        /**
         * Indicates if the help dialog is collapsed.
         */
        this.isCollapsed = true;
        /**
         * The priority where the help icon should be shown in the action bar
         */
        this.priority = Infinity;
        /**
         * A title. Set in open by passing the source.
         */
        this.title = '';
        /**
         * The section heading in the doc which is going to be displayed.
         */
        this.sectionHeading = '';
        /**
         * The section content in the doc which is going to be displayed.
         */
        this.sectionContent = '';
        /**
         * Indicates if the component is loading.
         */
        this.isLoading = true;
        /**
         * Indicates if the component failed loading the source.
         */
        this.hasError = false;
        /**
         * Indicates if a warning should be shown.
         */
        this.showLangWarning = false;
        /**
         * @ignore
         */
        this.isInit = false;
    }
    /**
     * The component is shown by default and therefore breaks e2e test. This is
     * to prevent the visibility on first navigation.
     * @ignore
     */
    onCollapsed() {
        this.isInit = true;
    }
    /**
     * Builds the URL based on the src. The Base URL can be set in the application options docBaseUrl.
     * @param src The source of the help on the guide.
     * @param index This flag is used to call the index.json content of a guide. For example, "https://www.cumulocity.com/guides/users-guide/cockpit/index.json".
     */
    getUrl(src = '', index = false) {
        let docsUrl;
        try {
            docsUrl =
                typeof this.helpService.contextHelp.value === 'string'
                    ? new URL(this.docsService.getUrlWithDocsVersion(this.helpService.contextHelp.value))
                    : new URL(this.docsService.getBaseUrl());
        }
        catch (error) {
            docsUrl = new URL(this.docsService.getBaseUrl());
            console.warn(error);
        }
        const [url, hashFragment] = src.split('#');
        this.sectionHeading = hashFragment;
        if (index) {
            src = `${url}index.json`;
        }
        return `${docsUrl.href}${src}`;
    }
    /**
     * Toggles the visibility of the help dialog.
     */
    toggle() {
        if (this.isCollapsed) {
            this.open();
            return;
        }
        this.close();
    }
    /**
     * Closes the help dialog.
     */
    close() {
        this.isCollapsed = true;
        this.clean();
    }
    /**
     * Opens the help dialog.
     */
    open() {
        this.isCollapsed = false;
        this.isLoading = true;
        this.requestContent();
        if (!this.icon) {
            this.icon = this.resolveIcon();
        }
    }
    requestContent() {
        const req = new XMLHttpRequest();
        req.onreadystatechange = () => this.render(req);
        req.addEventListener('load', () => this.render(req));
        req.open('GET', this.getUrl(this.src, true));
        req.responseType = 'json';
        req.setRequestHeader('Accept', 'text/html');
        req.send();
    }
    clean() {
        this.title = '';
        this.hasError = false;
        this.sectionContent = '';
    }
    resolveIcon() {
        try {
            const icon = Array.from(document.querySelector('nav .active i').classList).find(classes => classes.startsWith('c8y-icon-') || classes.startsWith('dlt-c8y-icon-'));
            return icon.replace('dlt-c8y-icon-', '').replace('c8y-icon-', 'c8y-');
        }
        catch (ex) {
            return 'life-saver';
        }
    }
    render(req) {
        if (req.readyState === 4) {
            this.isLoading = false;
            if (req.status === 200) {
                this.hasError = false;
                const sectionData = req.response[this.sectionHeading];
                if (sectionData) {
                    this.title = sectionData.title;
                    this.sectionContent = sectionData.helpcontent;
                }
            }
            else {
                this.hasError = true;
            }
        }
    }
}
HelpComponent.ɵfac = function HelpComponent_Factory(t) { return new (t || HelpComponent)(ɵngcc0.ɵɵdirectiveInject(DocsService), ɵngcc0.ɵɵdirectiveInject(HelpService)); };
HelpComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HelpComponent, selectors: [["c8y-help"]], inputs: { src: "src", isCollapsed: "isCollapsed", priority: "priority", icon: "icon" }, decls: 8, vars: 11, consts: [["itemClass", "pull-right", 3, "placement", "priority", 4, "ngIf"], ["id", "collapseHelp", 1, "c8y-help-drawer", 3, "collapse", "isAnimated", "collapsed"], [3, "ngClass"], ["docOutlet", ""], [4, "ngIf"], ["class", "c8y-help-drawer-footer", 4, "ngIf"], ["itemClass", "pull-right", 3, "placement", "priority"], ["aria-controls", "collapseHelp", "c8yProductExperience", "", 1, "btn", "btn-help", 3, "title", "actionName", "actionData", "click"], [1, "text-info", 3, "c8yIcon"], [1, "d-flex"], [1, "c8y-icon-duocolor", "icon-48", 3, "c8yIcon", "ngClass"], ["class", "p-l-16 flex-grow", 4, "ngIf"], ["class", "p-l-16 p-t-16 flex-grow", 4, "ngIf"], [1, "p-l-16", "flex-grow"], ["class", "alert alert-info m-b-16", 4, "ngIf"], [1, "text-bold", "text-primary", "p-t-16", "m-b-16"], ["id", "helpContent", 1, "help-content", 3, "innerHTML"], [1, "alert", "alert-info", "m-b-16"], ["type", "button", 1, "close", 3, "click"], ["aria-hidden", "true"], [1, "sr-only"], [1, "p-l-16", "p-t-16", "flex-grow"], ["translate", "", 1, "text-bold", "m-b-16"], [1, "help-content"], ["translate", ""], [1, "c8y-help-drawer-footer"], ["aria-controls", "collapseHelp", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["target", "_blank", "rel", "noopener noreferrer", 1, "btn", "btn-primary", 3, "href"], ["translate", "", 4, "ngIf"]], template: function HelpComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, HelpComponent_c8y_action_bar_item_0_Template, 4, 11, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵlistener("collapsed", function HelpComponent_Template_div_collapsed_2_listener() { return ctx.onCollapsed(); });
        ɵngcc0.ɵɵelementStart(3, "div", 2, 3);
        ɵngcc0.ɵɵtemplate(5, HelpComponent_div_5_Template, 2, 0, "div", 4);
        ɵngcc0.ɵɵtemplate(6, HelpComponent_div_6_Template, 5, 7, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, HelpComponent_div_7_Template, 7, 7, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !!ɵngcc0.ɵɵpipeBind1(1, 7, ctx.helpService.contextHelp));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("collapse", ctx.isCollapsed)("isAnimated", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(9, _c108, ctx.isInit));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading && !ctx.hasError);
    } }, directives: [ɵngcc7.NgIf, ɵngcc13.CollapseDirective, ɵngcc7.NgClass, ActionBarItemComponent, ProductExperienceDirective, IconDirective, LoadingComponent, C8yTranslateDirective], pipes: [ɵngcc7.AsyncPipe, C8yTranslatePipe], encapsulation: 2 });
HelpComponent.ctorParameters = () => [
    { type: DocsService },
    { type: HelpService }
];
HelpComponent.propDecorators = {
    src: [{ type: Input }],
    isCollapsed: [{ type: Input }],
    priority: [{ type: Input }],
    icon: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HelpComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-help',
                template: "<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"pull-right\"\n  [priority]=\"priority\"\n  *ngIf=\"!!(helpService.contextHelp | async)\"\n>\n  <button\n    class=\"btn btn-help\"\n    [title]=\"'Open help' | translate\"\n    (click)=\"toggle()\"\n    [attr.aria-expanded]=\"!isCollapsed\"\n    aria-controls=\"collapseHelp\"\n    c8yProductExperience\n    [actionName]=\"isCollapsed ? 'helpOpened' : 'helpClosed'\"\n    [actionData]=\"{ src: src }\"\n  >\n    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<div\n  id=\"collapseHelp\"\n  class=\"c8y-help-drawer\"\n  [collapse]=\"isCollapsed\"\n  [isAnimated]=\"true\"\n  (collapsed)=\"onCollapsed()\"\n>\n  <div [ngClass]=\"{ 'c8y-help-drawer-block': isInit }\" #docOutlet>\n    <div *ngIf=\"isLoading\">\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <div *ngIf=\"!isLoading\">\n      <div class=\"d-flex\">\n        <i\n          [c8yIcon]=\"!hasError ? icon : 'unlink'\"\n          [ngClass]=\"{ 'text-warning': hasError, 'text-muted': !hasError }\"\n          class=\"c8y-icon-duocolor icon-48\"\n        ></i>\n        <div class=\"p-l-16 flex-grow\" *ngIf=\"!hasError\">\n          <div\n            class=\"alert alert-info m-b-16\"\n            *ngIf=\"\n              !helpService.isSupportedLanguage() &&\n              !showLangWarning &&\n              !helpService.isWarningAlertViewed\n            \"\n          >\n            <button\n              class=\"close\"\n              type=\"button\"\n              (click)=\"\n                showLangWarning = !showLangWarning;\n                helpService.isWarningAlertViewed = !helpService.isWarningAlertViewed\n              \"\n            >\n              <span aria-hidden=\"true\">\u00D7</span>\n              <span class=\"sr-only\">Close</span>\n            </button>\n            <p>\n              {{ 'Help content is only available in English.' | translate }}\n            </p>\n          </div>\n          <h4 class=\"text-bold text-primary p-t-16 m-b-16\">\n            {{ title }}\n          </h4>\n          <div id=\"helpContent\" class=\"help-content\" [innerHTML]=\"sectionContent\"></div>\n        </div>\n\n        <div class=\"p-l-16 p-t-16 flex-grow\" *ngIf=\"hasError\">\n          <h4 class=\"text-bold m-b-16\" translate>Sorry, that didn't work</h4>\n          <div class=\"help-content\">\n            <p translate>The content couldn't be loaded.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"c8y-help-drawer-footer\" *ngIf=\"!isLoading && !hasError\">\n    <button\n      class=\"btn btn-default\"\n      (click)=\"toggle()\"\n      [title]=\"'Close help' | translate\"\n      [attr.aria-expanded]=\"!isCollapsed\"\n      aria-controls=\"collapseHelp\"\n      translate\n    >\n      Close\n    </button>\n    <a\n      href=\"{{ hasError ? getUrl() : getUrl(src) }}\"\n      class=\"btn btn-primary\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <span translate *ngIf=\"!hasError\"> Open the <span>User guide`KEEP_ORIGINAL`</span> </span>\n      <span translate *ngIf=\"hasError\"> Check the <span>User guide`KEEP_ORIGINAL`</span> </span>\n    </a>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: DocsService }, { type: HelpService }]; }, { src: [{
            type: Input
        }], isCollapsed: [{
            type: Input
        }], priority: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();

/**
 * Provides components which allow to display help elements
 * inside the app.
 * @exports HelpComponent A component which shows a context help in
 *                        the action bar.
 */
class HelpModule {
}
HelpModule.ɵfac = function HelpModule_Factory(t) { return new (t || HelpModule)(); };
HelpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HelpModule });
HelpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [HelpService], imports: [[CommonModule, CollapseModule.forRoot(), ActionBarModule, ProductExperienceModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HelpModule, [{
        type: NgModule,
        args: [{
                declarations: [HelpComponent],
                imports: [CommonModule, CollapseModule.forRoot(), ActionBarModule, ProductExperienceModule],
                exports: [HelpComponent],
                entryComponents: [HelpComponent],
                providers: [HelpService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HelpModule, { declarations: [HelpComponent], imports: [CommonModule, ɵngcc13.CollapseModule, ActionBarModule, ProductExperienceModule], exports: [HelpComponent] }); })();

class RealtimeButtonComponent {
    constructor() {
        this.label = gettext('Realtime');
        this.title = gettext('Toggle realtime');
    }
    get active() {
        return !!this.service && this.service.active;
    }
    toggle() {
        if (this.service) {
            this.active ? this.service.stop() : this.service.start();
        }
    }
}
RealtimeButtonComponent.ɵfac = function RealtimeButtonComponent_Factory(t) { return new (t || RealtimeButtonComponent)(); };
RealtimeButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RealtimeButtonComponent, selectors: [["c8y-realtime-btn"]], inputs: { label: "label", title: "title", service: "service" }, decls: 6, vars: 10, consts: [["type", "button", 1, "btn", "btn-link", "c8y-realtime", 3, "title", "click"], [1, "c8y-pulse", 3, "ngClass"]], template: function RealtimeButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function RealtimeButtonComponent_Template_button_click_0_listener() { return ctx.toggle(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelement(2, "span", 1);
        ɵngcc0.ɵɵelementStart(3, "span");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, ctx.title));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(7, _c109, ctx.active, !ctx.active));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, ctx.label));
    } }, directives: [ɵngcc7.NgClass], pipes: [C8yTranslatePipe], encapsulation: 2 });
RealtimeButtonComponent.propDecorators = {
    service: [{ type: Input }],
    label: [{ type: Input }],
    title: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RealtimeButtonComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-realtime-btn',
                template: "<button\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  title=\"{{ title | translate }}\"\n  (click)=\"toggle()\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"{ active: active, inactive: !active }\"></span>\n  <span>{{ label | translate }}</span>\n</button>\n"
            }]
    }], function () { return []; }, { label: [{
            type: Input
        }], title: [{
            type: Input
        }], service: [{
            type: Input
        }] }); })();

class RealtimeModule {
}
RealtimeModule.ɵfac = function RealtimeModule_Factory(t) { return new (t || RealtimeModule)(); };
RealtimeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: RealtimeModule });
RealtimeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RealtimeModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [RealtimeButtonComponent],
                exports: [RealtimeButtonComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RealtimeModule, { declarations: [RealtimeButtonComponent], imports: [CommonModule], exports: [RealtimeButtonComponent] }); })();

var ModalSelectionMode;
(function (ModalSelectionMode) {
    ModalSelectionMode["SINGLE"] = "single";
    ModalSelectionMode["MULTI"] = "multi";
})(ModalSelectionMode || (ModalSelectionMode = {}));

class SelectModalComponent {
    constructor(bsModalRef) {
        this.bsModalRef = bsModalRef;
        this.subTitle = gettext('Select from the list of items matching the device type');
        this.mode = ModalSelectionMode.MULTI;
        this.disableSelected = true;
        this.showFilter = true;
        this.areMoreEntries = false;
        this.result = new EventEmitter();
        this.search = new EventEmitter();
        this.onChoiceUpdated = new EventEmitter();
        this.selected = false;
        this.filterTerm = '';
        this.listItems = [];
        this.debouncer = new Subject();
        this._labels = { ok: gettext('Confirm'), cancel: gettext('Cancel') };
        this.debouncer.pipe(debounceTime(500)).subscribe(value => {
            this.search.emit(value);
        });
    }
    set labels(labels) {
        const { ok = this.labels.ok, cancel = this.labels.cancel } = labels || {};
        this._labels = { ok, cancel };
    }
    get labels() {
        return this._labels;
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes.items && changes.items.currentValue) {
                const itemsPromise = changes.items.currentValue.map((item) => __awaiter(this, void 0, void 0, function* () {
                    item.options = yield item.options;
                    const selected = item.options.find(option => option.selected);
                    if (selected) {
                        item.selectedId = selected.obj.id;
                        if (this.disableSelected) {
                            item.options.map(option => assign(option, { disabled: true }));
                        }
                    }
                    return item;
                }));
                this.listItems = yield Promise.all(itemsPromise);
            }
        });
    }
    updatePipe(filterTerm) {
        this.debouncer.next(filterTerm);
        this.filterTerm = filterTerm;
    }
    updateChoice({ item, id }) {
        if (this.mode === 'single') {
            this.listItems.map(value => (value.selectedId = undefined));
        }
        item.selectedId = id;
        this.selected = true;
        this.onChoiceUpdated.emit(item);
    }
    dismiss() {
        this.bsModalRef.hide();
    }
    select() {
        this.result.emit(this.getOutput());
        this.bsModalRef.hide();
    }
    ngOnDestroy() {
        this.debouncer.complete();
        this.result.complete();
        this.search.complete();
    }
    getOutput() {
        return this.listItems
            .filter(item => item.selectedId)
            .map(item => item.options.find(option => item.selectedId === option.obj.id))
            .filter(option => !option.selected)
            .map(selectedOption => selectedOption.obj);
    }
}
SelectModalComponent.ɵfac = function SelectModalComponent_Factory(t) { return new (t || SelectModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.BsModalRef)); };
SelectModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectModalComponent, selectors: [["c8y-select-modal"]], inputs: { subTitle: "subTitle", mode: "mode", disableSelected: "disableSelected", showFilter: "showFilter", areMoreEntries: "areMoreEntries", labels: "labels", icon: "icon", title: "title", items: "items", additionalFilterTemplate: "additionalFilterTemplate", noItemsMessage: "noItemsMessage" }, outputs: { result: "result", search: "search", onChoiceUpdated: "onChoiceUpdated" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 26, vars: 23, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [3, "c8yIcon"], [1, "text-uppercase"], [1, "p-16", "text-center", "separator-bottom", "min-height-fit"], [1, "m-b-8"], [1, "row"], [3, "ngClass", 4, "ngIf"], [1, "modal-inner-scroll"], [1, "p-l-16", "p-r-16"], ["class", "panel m-t-8 m-b-8", 4, "ngIf"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [1, "modal-footer"], ["class", "btn btn-default", 3, "title", "click", 4, "ngIf"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], [3, "ngClass"], [3, "icon", "onSearch"], [4, "ngTemplateOutlet"], [1, "panel", "m-t-8", "m-b-8"], [1, "c8y-empty-state", "text-left"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], [1, "content-flex-30"], [1, "col-9"], [3, "ngClass", 4, "ngFor", "ngForOf"], ["class", "col-3 text-right", 4, "ngIf"], [3, "title", "pattern", "text"], [1, "col-3", "text-right"], [3, "name", "disabled", "selected", "onSelect"], [1, "content-flex-20"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "pattern", "text"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["translate", "", 1, "alert", "alert-info", "m-t-16", "m-r-8", "m-l-8"], [1, "btn", "btn-default", 3, "title", "click"]], template: function SelectModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "p", 5);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 6);
        ɵngcc0.ɵɵtemplate(11, SelectModalComponent_div_11_Template, 2, 5, "div", 7);
        ɵngcc0.ɵɵtemplate(12, SelectModalComponent_div_12_Template, 2, 5, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 8);
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵtemplate(15, SelectModalComponent_div_15_Template, 7, 6, "div", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "c8y-list-group");
        ɵngcc0.ɵɵtemplate(17, SelectModalComponent_c8y_li_17_Template, 10, 4, "c8y-li", 11);
        ɵngcc0.ɵɵpipe(18, "selectModalFilterPipe");
        ɵngcc0.ɵɵtemplate(19, SelectModalComponent_div_19_Template, 3, 0, "div", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "div", 13);
        ɵngcc0.ɵɵtemplate(21, SelectModalComponent_button_21_Template, 4, 6, "button", 14);
        ɵngcc0.ɵɵelementStart(22, "button", 15);
        ɵngcc0.ɵɵlistener("click", function SelectModalComponent_Template_button_click_22_listener() { return ctx.select(); });
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("c8yIcon", ctx.icon);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 12, ctx.title), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 14, ctx.subTitle));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.additionalFilterTemplate);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.items || ctx.items.length === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind2(18, 16, ctx.listItems, ctx.filterTerm));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.areMoreEntries);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.labels.cancel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(23, 19, ctx.labels.ok));
        ɵngcc0.ɵɵproperty("disabled", !ctx.selected);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(25, 21, ctx.labels.ok), " ");
    } }, directives: function () { return [IconDirective, ɵngcc7.NgIf, ListGroupComponent, ɵngcc7.NgForOf, ɵngcc7.NgClass, FilterInputComponent, ɵngcc7.NgTemplateOutlet, ListItemComponent, ListItemIconComponent, ListItemBodyComponent, ListItemCollapseComponent, HighlightComponent, ListItemRadioComponent, C8yTranslateDirective]; }, pipes: function () { return [C8yTranslatePipe, SelectModalFilterPipe]; }, encapsulation: 2 });
SelectModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
SelectModalComponent.propDecorators = {
    icon: [{ type: Input }],
    title: [{ type: Input }],
    subTitle: [{ type: Input }],
    items: [{ type: Input }],
    mode: [{ type: Input }],
    disableSelected: [{ type: Input }],
    showFilter: [{ type: Input }],
    additionalFilterTemplate: [{ type: Input }],
    areMoreEntries: [{ type: Input }],
    labels: [{ type: Input }],
    noItemsMessage: [{ type: Input }],
    result: [{ type: Output }],
    search: [{ type: Output }],
    onChoiceUpdated: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-select-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <span c8yIcon=\"{{ icon }}\"></span>\n    <h4 class=\"text-uppercase\">\n      {{ title | translate }}\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom min-height-fit\">\n    <p class=\"m-b-8\">{{ subTitle | translate }}</p>\n    <div class=\"row\">\n      <div\n        *ngIf=\"showFilter\"\n        [ngClass]=\"{\n          'col-xs-6': showFilter && additionalFilterTemplate,\n          'col-xs-12': !showFilter || !additionalFilterTemplate\n        }\"\n      >\n        <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n      </div>\n      <div\n        *ngIf=\"additionalFilterTemplate\"\n        [ngClass]=\"{\n          'col-xs-6': showFilter && additionalFilterTemplate,\n          'col-xs-12': !showFilter || !additionalFilterTemplate\n        }\"\n      >\n        <ng-container *ngTemplateOutlet=\"additionalFilterTemplate\"></ng-container>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"panel m-t-8 m-b-8\" *ngIf=\"!items || items.length === 0\">\n        <div class=\"c8y-empty-state text-left\">\n          <h1 c8yIcon=\"{{ icon }} \" class=\"c8y-icon-duocolor\"></h1>\n          <p>{{ (noItemsMessage | translate) ?? 'No items to display.' | translate }}</p>\n        </div>\n      </div>\n    </div>\n    <c8y-list-group>\n      <c8y-li *ngFor=\"let item of listItems | selectModalFilterPipe: filterTerm\">\n        <c8y-li-icon>\n          <i c8yIcon=\"{{ icon }}\"></i>\n        </c8y-li-icon>\n\n        <c8y-li-body class=\"content-flex-30\">\n          <div class=\"col-9\">\n            <div *ngFor=\"let bodyPart of item.body\" [ngClass]=\"bodyPart.class\">\n              <c8y-highlight\n                [title]=\"bodyPart.value\"\n                [pattern]=\"filterTerm\"\n                [text]=\"bodyPart.value\"\n              ></c8y-highlight>\n            </div>\n          </div>\n\n          <div class=\"col-3 text-right\" *ngIf=\"item.additionalInformation\">\n            <div [ngClass]=\"item.additionalInformation.class\">\n              {{ item.additionalInformation.value }}\n            </div>\n          </div>\n        </c8y-li-body>\n\n        <c8y-li-collapse>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let option of item.options\">\n              <c8y-li-radio\n                [name]=\"mode === 'single' ? 'single' : item.groupId\"\n                (onSelect)=\"updateChoice({ item: item, id: option.obj.id })\"\n                [disabled]=\"option.disabled\"\n                [selected]=\"option.selected\"\n              >\n              </c8y-li-radio>\n              <c8y-li-body class=\"content-flex-20\">\n                <div\n                  *ngFor=\"let optionPart of option.body; let i = index\"\n                  [ngClass]=\"optionPart.class\"\n                >\n                  <c8y-highlight [pattern]=\"filterTerm\" [text]=\"optionPart.value\"></c8y-highlight>\n                </div>\n                <ng-container\n                  *ngIf=\"option.template\"\n                  [ngTemplateOutlet]=\"option.template\"\n                  [ngTemplateOutletContext]=\"{ $implicit: item, option: option }\"\n                ></ng-container>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </c8y-li-collapse>\n      </c8y-li>\n      <div *ngIf=\"areMoreEntries\">\n        <div class=\"alert alert-info m-t-16 m-r-8 m-l-8\" translate>\n          Some entries might not be shown. Try narrowing search criteria.\n        </div>\n      </div>\n    </c8y-list-group>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      *ngIf=\"labels.cancel\"\n      class=\"btn btn-default\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"select()\"\n      [disabled]=\"!selected\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc10.BsModalRef }]; }, { subTitle: [{
            type: Input
        }], mode: [{
            type: Input
        }], disableSelected: [{
            type: Input
        }], showFilter: [{
            type: Input
        }], areMoreEntries: [{
            type: Input
        }], result: [{
            type: Output
        }], search: [{
            type: Output
        }], onChoiceUpdated: [{
            type: Output
        }], labels: [{
            type: Input
        }], icon: [{
            type: Input
        }], title: [{
            type: Input
        }], items: [{
            type: Input
        }], additionalFilterTemplate: [{
            type: Input
        }], noItemsMessage: [{
            type: Input
        }] }); })();

class SelectModalFilterPipe {
    transform(items, filterTerm) {
        return filterTerm.trim().length === 0
            ? items
            : items.filter((item) => {
                const allValues = this.extractValues(item);
                const filteredValues = allValues.filter((value) => this.filterContainString(value, filterTerm));
                return filteredValues.length > 0;
            });
    }
    filterContainString(value, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return value && value.toLowerCase().indexOf(term) > -1;
    }
    extractValues(item) {
        let values = [];
        if (item.value) {
            values.push(item.value);
        }
        Object.keys(item).forEach((key) => {
            if (Array.isArray(item[key])) {
                item[key].forEach(obj => values.concat(this.extractValues(obj)));
            }
            if (item[key] instanceof Object) {
                values = values.concat(this.extractValues(item[key]));
            }
        });
        return values;
    }
}
SelectModalFilterPipe.ɵfac = function SelectModalFilterPipe_Factory(t) { return new (t || SelectModalFilterPipe)(); };
SelectModalFilterPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "selectModalFilterPipe", type: SelectModalFilterPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectModalFilterPipe, [{
        type: Pipe,
        args: [{
                name: 'selectModalFilterPipe'
            }]
    }], null, null); })();

class SelectModalModule {
}
SelectModalModule.ɵfac = function SelectModalModule_Factory(t) { return new (t || SelectModalModule)(); };
SelectModalModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SelectModalModule });
SelectModalModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            BsDropdownModule.forRoot(),
            CommonModule,
            ListGroupModule,
            SearchModule,
            FormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectModalModule, [{
        type: NgModule,
        args: [{
                imports: [
                    BsDropdownModule.forRoot(),
                    CommonModule,
                    ListGroupModule,
                    SearchModule,
                    FormsModule
                ],
                exports: [
                    SelectModalComponent,
                    SelectModalFilterPipe
                ],
                declarations: [
                    SelectModalComponent,
                    SelectModalFilterPipe
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SelectModalModule, { declarations: [SelectModalComponent, SelectModalFilterPipe], imports: [ɵngcc9.BsDropdownModule, CommonModule, ListGroupModule, SearchModule, FormsModule], exports: [SelectModalComponent, SelectModalFilterPipe] }); })();

class RangeDisplayComponent {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.config = {};
        this.display = 'full';
    }
    get inlineStyle() {
        this.config = this.config || {};
        if (!this.config.min) {
            this.config.min = 0;
        }
        if (!this.config.max) {
            this.config.max = 100;
        }
        if (this.config.fractionSize !== undefined) {
            this.config.current = parseFloat(this.config.current.toFixed(this.config.fractionSize));
        }
        return this.sanitizer.bypassSecurityTrustStyle(`
          --range-min: ${this.config.min};
          --range-max: ${this.config.max};
          --full-range: ${this.config.max - this.config.min};
          --measurement-target: ${((this.config.target - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --measurement-current: ${((this.config.current - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --range-y-min: ${((this.config.yellowRangeMin - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --range-y-max: ${((this.config.yellowRangeMax - this.config.min) /
            (this.config.max - this.config.min)) *
            100}%;
          --range-r-min: ${((this.config.redRangeMin - this.config.min) * 100) /
            (this.config.max - this.config.min)}%;
          --range-r-max: ${((this.config.redRangeMax - this.config.min) /
            (this.config.max - this.config.min)) *
            100}%;
        `);
    }
    checkTarget() {
        return (this.config.target !== undefined && this.config.target !== null &&
            (this.config.target >= this.config.min && this.config.target <= this.config.max));
    }
    rulerCalc(index) {
        const num = this.config.min + ((this.config.max - this.config.min) / 10) * index;
        if (this.config.fractionSize !== undefined) {
            return parseFloat(num.toFixed(this.config.fractionSize));
        }
        return parseFloat(num.toFixed(2));
    }
    trackByIndex(index, el) {
        return index;
    }
    isRedRangeDisplayed() {
        const { redRangeMin, redRangeMax } = this.config;
        return this.isRangeDisplayed(redRangeMin, redRangeMax);
    }
    isYellowRangeDisplayed() {
        const { yellowRangeMin, yellowRangeMax } = this.config;
        return this.isRangeDisplayed(yellowRangeMin, yellowRangeMax);
    }
    isRangeDisplayed(rangeMin, rangeMax) {
        return rangeMin === 0 || rangeMax === 0 || rangeMin && rangeMax;
    }
}
RangeDisplayComponent.ɵfac = function RangeDisplayComponent_Factory(t) { return new (t || RangeDisplayComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc20.DomSanitizer)); };
RangeDisplayComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RangeDisplayComponent, selectors: [["c8y-range-display"]], hostVars: 1, hostBindings: function RangeDisplayComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("style", ctx.inlineStyle, ɵngcc0.ɵɵsanitizeStyle);
    } }, inputs: { config: "config", display: "display" }, decls: 13, vars: 17, consts: [[3, "ngClass"], [1, "range-display"], [1, "range-display__range"], [1, "range-display__range__unit"], ["class", "range-display__range__min", 4, "ngIf"], ["class", "range-display__range__max", 4, "ngIf"], ["class", "range-display__range__target", 3, "title", 4, "ngIf"], ["class", "range-display__range__current", 3, "title", 4, "ngIf"], [1, "range-display__ruler"], ["class", "range-display__tick", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "range-display__tick"], [1, "range-display__range__min"], [1, "range-display__range__max"], [1, "range-display__range__target", 3, "title"], [1, "range-display__range__current", 3, "title"]], template: function RangeDisplayComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, RangeDisplayComponent_div_5_Template, 1, 0, "div", 4);
        ɵngcc0.ɵɵtemplate(6, RangeDisplayComponent_div_6_Template, 1, 0, "div", 5);
        ɵngcc0.ɵɵtemplate(7, RangeDisplayComponent_div_7_Template, 2, 7, "div", 6);
        ɵngcc0.ɵɵtemplate(8, RangeDisplayComponent_div_8_Template, 4, 13, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 8);
        ɵngcc0.ɵɵtemplate(10, RangeDisplayComponent_div_10_Template, 1, 1, "div", 9);
        ɵngcc0.ɵɵelement(11, "div", 10);
        ɵngcc0.ɵɵpipe(12, "number");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(12, _c112, ctx.config.orientation === "vertical", ctx.display === "compact", ctx.display === "inline"));
        ɵngcc0.ɵɵattribute("data-label", ctx.config.unit);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.config.unit, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isYellowRangeDisplayed());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRedRangeDisplayed());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.checkTarget());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.config.current != undefined && ctx.config.current >= ctx.config.min && ctx.config.current <= ctx.config.max);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpureFunction0(16, _c42).constructor(10))("ngForTrackBy", ctx.trackByIndex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("data-label", ɵngcc0.ɵɵpipeBind1(12, 10, ctx.config.max || 100));
    } }, directives: [ɵngcc7.NgClass, ɵngcc7.NgIf, ɵngcc7.NgForOf], pipes: [ɵngcc7.DecimalPipe, C8yTranslatePipe, DatePipe], encapsulation: 2 });
RangeDisplayComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
RangeDisplayComponent.propDecorators = {
    config: [{ type: Input }],
    display: [{ type: Input }],
    inlineStyle: [{ type: HostBinding, args: ['attr.style',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RangeDisplayComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-range-display',
                template: "<div [ngClass]=\"{ 'range-display--vertical': config.orientation === 'vertical',\n  'range-display--compact' : display ==='compact',\n  'range-display--inline' : display ==='inline' }\" \n  attr.data-label=\"{{ config.unit }}\"\n>\n  <div class=\"range-display\">\n    <div class=\"range-display__range\">\n      <div class=\"range-display__range__unit\">\n        {{ config.unit }}\n      </div>\n      <div *ngIf=\"isYellowRangeDisplayed()\" class=\"range-display__range__min\"></div>\n      <div *ngIf=\"isRedRangeDisplayed()\" class=\"range-display__range__max\"></div>\n      <div\n        *ngIf=\"checkTarget()\"\n        class=\"range-display__range__target\"\n        attr.data-label=\"{{ config.target }} {{ config.unit }}\"\n        title=\"{{ 'Target' | translate }}: {{ config.target }} {{ config.unit }}\"\n      ></div>\n      <div\n        *ngIf=\"\n          config.current != undefined &&\n          config.current >= config.min &&\n          config.current <= config.max\n        \"\n        class=\"range-display__range__current\"\n        attr.data-label=\"{{ config.current }} {{ config.unit }} &#xa; {{ config.time | c8yDate }}\"\n        title=\"{{ 'Current' | translate }}: {{ config.current }} {{ config.unit }} | {{\n          config.time | c8yDate\n        }}\"\n      ></div>\n    </div>\n    <div class=\"range-display__ruler\">\n      <div\n        *ngFor=\"let x of [].constructor(10); let index = index; trackBy: trackByIndex\"\n        attr.data-label=\"{{ rulerCalc(index) }}\"\n        class=\"range-display__tick\"\n      ></div>\n      <div attr.data-label=\"{{ config.max || 100 | number }}\" class=\"range-display__tick\"></div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc20.DomSanitizer }]; }, { config: [{
            type: Input
        }], display: [{
            type: Input
        }], inlineStyle: [{
            type: HostBinding,
            args: ['attr.style']
        }] }); })();

/**
 * The angular module definition for a range-display.
 * @exports RangeDisplayModule
 */
class RangeDisplayModule {
}
RangeDisplayModule.ɵfac = function RangeDisplayModule_Factory(t) { return new (t || RangeDisplayModule)(); };
RangeDisplayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: RangeDisplayModule });
RangeDisplayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RangeDisplayModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [RangeDisplayComponent],
                declarations: [RangeDisplayComponent],
                entryComponents: [RangeDisplayComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RangeDisplayModule, { declarations: [RangeDisplayComponent], imports: [CommonModule], exports: [RangeDisplayComponent] }); })();

class ListDisplaySwitchComponent {
    constructor(location) {
        this.location = location;
        this.filterPipe = pipe(tap());
        this.onListClassChange = new EventEmitter();
        this.DISPLAY_OPTIONS = [
            {
                name: 'AUTO',
                value: 'auto',
                label: gettext('Auto'),
                default: true,
                getListClass: () => {
                    const option = this._listLength > this.AUTO_GRID_ITEMS_LIMIT
                        ? this.DISPLAY_OPTIONS.find((opt) => opt.name === 'LIST')
                        : this.DISPLAY_OPTIONS.find((opt) => opt.name === 'GRID');
                    return option.getListClass();
                }
            },
            {
                name: 'GRID',
                value: 'grid',
                label: gettext('Grid'),
                getListClass: () => 'interact-grid'
            },
            {
                name: 'LIST',
                value: 'list',
                label: gettext('List'),
                getListClass: () => 'interact-list'
            }
        ];
        this.AUTO_GRID_ITEMS_LIMIT = 12;
    }
    set listLength(val) {
        this._listLength = val;
        this.loadSelectedOption();
    }
    ngOnInit() {
        this.loadSelectedOption();
    }
    onOptionSelect(option) {
        const localStorageKey = this.getLocalStorageKey();
        if (option.default) {
            localStorage.removeItem(localStorageKey);
        }
        else {
            localStorage.setItem(localStorageKey, option.value);
        }
        this.loadSelectedOption();
    }
    loadSelectedOption() {
        this.selectedOption = this.getLocalStorageOption() || this.getDefaultOption();
        this.onListClassChange.emit(this.selectedOption.getListClass());
    }
    getLocalStorageOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.value === localStorage.getItem(this.getLocalStorageKey()));
    }
    getDefaultOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.default);
    }
    getLocalStorageKey() {
        return `list-display-option[${this.getListKey()}]`;
    }
    getListKey() {
        return this.listKey || this.location.path();
    }
}
ListDisplaySwitchComponent.ɵfac = function ListDisplaySwitchComponent_Factory(t) { return new (t || ListDisplaySwitchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Location)); };
ListDisplaySwitchComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListDisplaySwitchComponent, selectors: [["c8y-list-display-switch"]], inputs: { filterPipe: "filterPipe", listLength: "listLength", listKey: "listKey" }, outputs: { onListClassChange: "onListClassChange" }, decls: 8, vars: 5, consts: [[1, "form-group"], [1, "m-r-8"], [1, "c8y-select-wrapper"], [1, "form-control", 3, "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], [3, "ngValue"]], template: function ListDisplaySwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "label", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "select", 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function ListDisplaySwitchComponent_Template_select_ngModelChange_5_listener($event) { return ctx.onOptionSelect($event); });
        ɵngcc0.ɵɵtemplate(6, ListDisplaySwitchComponent_option_6_Template, 3, 4, "option", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(7, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "Display as"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedOption);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.DISPLAY_OPTIONS);
    } }, directives: [ɵngcc14.SelectControlValueAccessor, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc7.NgForOf, ɵngcc14.NgSelectOption, ɵngcc14.ɵNgSelectMultipleOption], pipes: [C8yTranslatePipe], encapsulation: 2 });
ListDisplaySwitchComponent.ctorParameters = () => [
    { type: Location }
];
ListDisplaySwitchComponent.propDecorators = {
    listKey: [{ type: Input }],
    listLength: [{ type: Input, args: ['listLength',] }],
    filterPipe: [{ type: Input }],
    onListClassChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListDisplaySwitchComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-display-switch',
                template: "<div class=\"form-group\">\n  <label class=\"m-r-8\">\n    {{ 'Display as' | translate }}\n  </label>\n  <div class=\"c8y-select-wrapper\">\n    <select\n      class=\"form-control\"\n      [ngModel]=\"selectedOption\"\n      (ngModelChange)=\"onOptionSelect($event)\"\n    >\n      <option *ngFor=\"let option of DISPLAY_OPTIONS\" [ngValue]=\"option\">{{\n        option.label | translate\n      }}</option></select\n    >\n    <span></span>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc7.Location }]; }, { filterPipe: [{
            type: Input
        }], onListClassChange: [{
            type: Output
        }], listLength: [{
            type: Input,
            args: ['listLength']
        }], listKey: [{
            type: Input
        }] }); })();

/**
 * The angular module definition for the list display switcher.
 * It allows to switch between a list and a grid view.
 * @exports ListDisplaySwitchComponent
 */
class ListDisplaySwitchModule {
}
ListDisplaySwitchModule.ɵfac = function ListDisplaySwitchModule_Factory(t) { return new (t || ListDisplaySwitchModule)(); };
ListDisplaySwitchModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ListDisplaySwitchModule });
ListDisplaySwitchModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, FormsModule$1]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListDisplaySwitchModule, [{
        type: NgModule,
        args: [{
                declarations: [ListDisplaySwitchComponent],
                imports: [CommonModule, FormsModule$1],
                exports: [ListDisplaySwitchComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListDisplaySwitchModule, { declarations: function () { return [ListDisplaySwitchComponent]; }, imports: function () { return [CommonModule, FormsModule$1]; }, exports: function () { return [ListDisplaySwitchComponent]; } }); })();

class WizardBodyComponent {
    constructor(wizard, wizardService) {
        this.wizard = wizard;
        this.wizardService = wizardService;
    }
    ngOnInit() {
        setTimeout(() => {
            this.wizardService.bodyTemplate$.next({
                template: this.bodyContent,
                wizardId: this.wizard.id
            });
        });
    }
}
WizardBodyComponent.ɵfac = function WizardBodyComponent_Factory(t) { return new (t || WizardBodyComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent), ɵngcc0.ɵɵdirectiveInject(WizardService)); };
WizardBodyComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardBodyComponent, selectors: [["c8y-wizard-body"]], viewQuery: function WizardBodyComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c113, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bodyContent = _t.first);
    } }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["bodyContent", ""], [1, "modal-inner-scroll", "animated", "fadeIn"]], template: function WizardBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, WizardBodyComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
WizardBodyComponent.ctorParameters = () => [
    { type: WizardComponent },
    { type: WizardService }
];
WizardBodyComponent.propDecorators = {
    bodyContent: [{ type: ViewChild, args: ['bodyContent', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardBodyComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-wizard-body',
                template: `
    <ng-template #bodyContent>
      <div class="modal-inner-scroll animated fadeIn">
          <ng-content></ng-content>
      </div>
    </ng-template>
  `
            }]
    }], function () { return [{ type: WizardComponent }, { type: WizardService }]; }, { bodyContent: [{
            type: ViewChild,
            args: ['bodyContent', { static: true }]
        }] }); })();

class WizardFooterComponent {
    constructor(wizard, wizardService) {
        this.wizard = wizard;
        this.wizardService = wizardService;
    }
    ngOnInit() {
        setTimeout(() => {
            this.wizardService.footerTemplate$.next({
                template: this.footerContent,
                wizardId: this.wizard.id
            });
        });
    }
}
WizardFooterComponent.ɵfac = function WizardFooterComponent_Factory(t) { return new (t || WizardFooterComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent), ɵngcc0.ɵɵdirectiveInject(WizardService)); };
WizardFooterComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardFooterComponent, selectors: [["c8y-wizard-footer"]], viewQuery: function WizardFooterComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c114, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerContent = _t.first);
    } }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["footerContent", ""], [1, "modal-footer"]], template: function WizardFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, WizardFooterComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
WizardFooterComponent.ctorParameters = () => [
    { type: WizardComponent },
    { type: WizardService }
];
WizardFooterComponent.propDecorators = {
    footerContent: [{ type: ViewChild, args: ['footerContent', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardFooterComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-wizard-footer',
                template: `
    <ng-template #footerContent>
      <div class="modal-footer">
        <ng-content></ng-content>
      </div>
    </ng-template>
  `
            }]
    }], function () { return [{ type: WizardComponent }, { type: WizardService }]; }, { footerContent: [{
            type: ViewChild,
            args: ['footerContent', { static: true }]
        }] }); })();

class WizardHeaderComponent {
    constructor(wizard, wizardService) {
        this.wizard = wizard;
        this.wizardService = wizardService;
    }
    ngOnInit() {
        setTimeout(() => {
            this.wizardService.headerTemplate$.next({
                template: this.headerContent,
                wizardId: this.wizard.id
            });
        });
    }
}
WizardHeaderComponent.ɵfac = function WizardHeaderComponent_Factory(t) { return new (t || WizardHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent), ɵngcc0.ɵɵdirectiveInject(WizardService)); };
WizardHeaderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardHeaderComponent, selectors: [["c8y-wizard-header"]], viewQuery: function WizardHeaderComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c115, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerContent = _t.first);
    } }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["headerContent", ""], [1, "modal-header", "dialog-header", "animated", "fadeIn"]], template: function WizardHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, WizardHeaderComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
WizardHeaderComponent.ctorParameters = () => [
    { type: WizardComponent },
    { type: WizardService }
];
WizardHeaderComponent.propDecorators = {
    headerContent: [{ type: ViewChild, args: ['headerContent', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-wizard-header',
                template: `
    <ng-template #headerContent>
      <div class="modal-header dialog-header animated fadeIn">
        <ng-content></ng-content>
      </div>
    </ng-template>
  `
            }]
    }], function () { return [{ type: WizardComponent }, { type: WizardService }]; }, { headerContent: [{
            type: ViewChild,
            args: ['headerContent', { static: true }]
        }] }); })();

class WizardOutletComponent {
    constructor(wizardComponent, router, c8yWizardService, resolver) {
        this.wizardComponent = wizardComponent;
        this.router = router;
        this.c8yWizardService = c8yWizardService;
        this.resolver = resolver;
        /**
         * The event that is emitted when the wizard entry is clicked.
         */
        this.onSelect = new EventEmitter();
        /**
         * The initial state to be assigned to the created component.
         */
        this.initialState = {};
        /**
         * List of wizard entries.
         */
        this.entries = [];
        /**
         * @ignore
         */
        this.showList = true;
        /**
         * @ignore
         */
        this.destroy$ = new Subject();
    }
    ngAfterViewInit() {
        this.c8yWizardService
            .getEntriesListById(this.wizardComponent.id)
            .pipe(takeUntil(this.destroy$))
            .subscribe((entries) => {
            this.container.clear();
            this.entries = entries;
            this.onEntriesLoaded();
        });
        this.wizardComponent.onReset.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.componentInstance) {
                this.componentInstance = undefined;
                this.container.clear();
                this.showList = true;
            }
        });
    }
    /**
     * Handles the wizard entry, if the entry contains a path, the user will be redirected to it.
     * Otherwise, an attempt will be made to create a dynamic component provided in the entry.
     * @param entry Wizard menu entry.
     */
    handleEntry(entry = {}) {
        const { path, component } = entry;
        if (path) {
            this.handlePath(path);
            return;
        }
        if (component) {
            this.handleComponent(component);
            this.onSelect.emit(entry);
        }
    }
    ngOnDestroy() {
        if (this.componentInstance) {
            this.container.clear();
        }
        this.destroy$.next(true);
        this.destroy$.unsubscribe();
    }
    onEntriesLoaded() {
        const [firstEntry] = this.entries;
        const isSingleEntry = this.entries.length === 1;
        const shouldRedirectToPath = firstEntry && !!firstEntry.path;
        const shouldOmitListOfEntries = isSingleEntry && !shouldRedirectToPath;
        if (shouldOmitListOfEntries) {
            this.handleEntry(firstEntry);
        }
    }
    handlePath(path) {
        this.router.navigateByUrl(path);
        if (this.wizardComponent) {
            this.wizardComponent.close();
        }
    }
    handleComponent(component) {
        this.showList = false;
        const factory = this.resolver.resolveComponentFactory(component);
        const componentInstance = this.container.createComponent(factory);
        Object.assign(componentInstance.instance, this.initialState);
        this.componentInstance = componentInstance;
    }
}
WizardOutletComponent.ɵfac = function WizardOutletComponent_Factory(t) { return new (t || WizardOutletComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(WizardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
WizardOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardOutletComponent, selectors: [["c8y-wizard-outlet"]], viewQuery: function WizardOutletComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c66, 5, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, inputs: { initialState: "initialState" }, outputs: { onSelect: "onSelect" }, decls: 4, vars: 2, consts: [["class", "modal-inner-scroll animated fadeIn", 4, "ngIf"], [3, "hidden"], ["container", ""], [1, "modal-inner-scroll", "animated", "fadeIn"], [1, "p-16", "text-center", "text-medium", "separator-bottom"], ["translate", ""], ["class", "list-group list-group-links", 4, "ngIf", "ngIfElse"], ["emptyState", ""], [1, "list-group", "list-group-links"], ["type", "button", "class", "list-group-item d-flex a-i-center p-t-8 p-b-8", 3, "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "list-group-item", "d-flex", "a-i-center", "p-t-8", "p-b-8", 3, "click"], [1, "list-item-icon"], [3, "c8yIcon"], [1, "list-item-body", "text-truncate", 3, "title"], [1, "c8y-empty-state"]], template: function WizardOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, WizardOutletComponent_div_1_Template, 7, 2, "div", 0);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelement(2, "template", 1, 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", ctx.showList);
    } }, directives: [ɵngcc7.NgIf, C8yTranslateDirective, ɵngcc7.NgForOf, IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
WizardOutletComponent.ctorParameters = () => [
    { type: WizardComponent, decorators: [{ type: Host }] },
    { type: Router },
    { type: WizardService },
    { type: ComponentFactoryResolver }
];
WizardOutletComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    onSelect: [{ type: Output }],
    initialState: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-wizard-outlet',
                template: "<ng-container>\n  <div class=\"modal-inner-scroll animated fadeIn\" *ngIf=\"showList\">\n    <p class=\"p-16 text-center text-medium separator-bottom\">\n      <span translate>Select method</span>\n    </p>\n    <div class=\"list-group list-group-links\" *ngIf=\"entries.length > 0; else emptyState\">\n      <button\n        *ngFor=\"let entry of entries\"\n        type=\"button\"\n        class=\"list-group-item d-flex a-i-center p-t-8 p-b-8\"\n        (click)=\"handleEntry(entry)\"\n      >\n        <div class=\"list-item-icon\">\n          <i [c8yIcon]=\"entry.c8yIcon || 'cogs'\"></i>\n        </div>\n        <div title=\"{{ entry.name | translate }}\" class=\"list-item-body text-truncate\">\n          {{ entry.name | translate }}\n        </div>\n      </button>\n    </div>\n\n    <ng-template #emptyState>\n      <div class=\"c8y-empty-state\">\n        <p>{{ 'No options available.' | translate }}</p>\n      </div>\n    </ng-template>\n  </div>\n</ng-container>\n<template #container [hidden]=\"showList\"></template>\n"
            }]
    }], function () { return [{ type: WizardComponent, decorators: [{
                type: Host
            }] }, { type: ɵngcc1.Router }, { type: WizardService }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { onSelect: [{
            type: Output
        }], initialState: [{
            type: Input
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }] }); })();

class WizardModule {
}
WizardModule.ɵfac = function WizardModule_Factory(t) { return new (t || WizardModule)(); };
WizardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: WizardModule });
WizardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [WizardService, BsModalRef], imports: [[ModalModule$1, CommonModule$1, CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardModule, [{
        type: NgModule,
        args: [{
                imports: [ModalModule$1, CommonModule$1, CommonModule],
                exports: [
                    WizardComponent,
                    WizardOutletComponent,
                    WizardHeaderComponent,
                    WizardBodyComponent,
                    WizardFooterComponent
                ],
                declarations: [
                    WizardComponent,
                    WizardOutletComponent,
                    WizardHeaderComponent,
                    WizardBodyComponent,
                    WizardFooterComponent
                ],
                entryComponents: [
                    WizardComponent,
                    WizardHeaderComponent,
                    WizardBodyComponent,
                    WizardFooterComponent
                ],
                providers: [WizardService, BsModalRef]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WizardModule, { declarations: function () { return [WizardComponent, WizardOutletComponent, WizardHeaderComponent, WizardBodyComponent, WizardFooterComponent]; }, imports: function () { return [ModalModule$1, CommonModule$1, CommonModule]; }, exports: function () { return [WizardComponent, WizardOutletComponent, WizardHeaderComponent, WizardBodyComponent, WizardFooterComponent]; } }); })();

class AssetTypesModule {
}
AssetTypesModule.ɵfac = function AssetTypesModule_Factory(t) { return new (t || AssetTypesModule)(); };
AssetTypesModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AssetTypesModule });
AssetTypesModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [AssetTypesService] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetTypesModule, [{
        type: NgModule,
        args: [{
                providers: [AssetTypesService]
            }]
    }], null, null); })();

class CoreModule {
    static forRoot() {
        return {
            ngModule: CoreModule,
            providers: [...CommonModule.providers(), ...LoginModule.providers()]
        };
    }
}
CoreModule.ɵfac = function CoreModule_Factory(t) { return new (t || CoreModule)(); };
CoreModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CoreModule });
CoreModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [ActionBarModule, ActionModule, AlertModule, AuditLogModule, BootstrapModule, BreadcrumbModule, CommonModule, DataGridModule, DropAreaModule, HeaderModule, LoginModule, ModalModule, NavigatorModule, AuthenticationModule, SearchModule, SelectModule, TabsModule, UserModule, FormsModule, DeviceStatusModule, DocsModule, StepperModule, DynamicComponentModule, DashboardModule, ListGroupModule, SelectModalModule, FilePickerModule, DatePickerModule, ProductExperienceModule, HelpModule, RealtimeModule, RangeDisplayModule, ListDisplaySwitchModule, WizardModule, PluginsModule, DynamicFormsModule, PropertiesListModule, AssetTypesModule, DateTimePickerModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CoreModule, [{
        type: NgModule,
        args: [{
                exports: [
                    ActionBarModule,
                    ActionModule,
                    AlertModule,
                    AuditLogModule,
                    BootstrapModule,
                    BreadcrumbModule,
                    CommonModule,
                    DataGridModule,
                    DropAreaModule,
                    HeaderModule,
                    LoginModule,
                    ModalModule,
                    NavigatorModule,
                    AuthenticationModule,
                    SearchModule,
                    SelectModule,
                    TabsModule,
                    UserModule,
                    FormsModule,
                    DeviceStatusModule,
                    DocsModule,
                    StepperModule,
                    DynamicComponentModule,
                    DashboardModule,
                    ListGroupModule,
                    SelectModalModule,
                    FilePickerModule,
                    DatePickerModule,
                    ProductExperienceModule,
                    HelpModule,
                    RealtimeModule,
                    RangeDisplayModule,
                    ListDisplaySwitchModule,
                    WizardModule,
                    PluginsModule,
                    DynamicFormsModule,
                    PropertiesListModule,
                    AssetTypesModule,
                    DateTimePickerModule
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CoreModule, { exports: [ActionBarModule, ActionModule, AlertModule, AuditLogModule, BootstrapModule, BreadcrumbModule, CommonModule, DataGridModule, DropAreaModule, HeaderModule, LoginModule, ModalModule, NavigatorModule, AuthenticationModule, SearchModule, SelectModule, TabsModule, UserModule, FormsModule, DeviceStatusModule, DocsModule, StepperModule, DynamicComponentModule, DashboardModule, ListGroupModule, SelectModalModule, FilePickerModule, DatePickerModule, ProductExperienceModule, HelpModule, RealtimeModule, RangeDisplayModule, ListDisplaySwitchModule, WizardModule, PluginsModule, DynamicFormsModule, PropertiesListModule, AssetTypesModule, DateTimePickerModule] }); })();

class QuickLinkComponent {
    constructor() {
        this.classes = '';
    }
    ngOnInit() {
        this.classes = `card-block text-center ${kebabCase(this.label)}`;
    }
}
QuickLinkComponent.ɵfac = function QuickLinkComponent_Factory(t) { return new (t || QuickLinkComponent)(); };
QuickLinkComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: QuickLinkComponent, selectors: [["c8y-quick-link"]], inputs: { icon: "icon", label: "label" }, decls: 7, vars: 9, consts: [[3, "title"], [1, "text-gray-darker"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], [1, "text-muted"]], template: function QuickLinkComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementStart(2, "h1", 1);
        ɵngcc0.ɵɵelement(3, "i", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "p", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.classes);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 5, ctx.label));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.icon);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 7, ctx.label));
    } }, directives: [IconDirective], pipes: [C8yTranslatePipe], encapsulation: 2 });
QuickLinkComponent.propDecorators = {
    icon: [{ type: Input }],
    label: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuickLinkComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-quick-link',
                template: "<div [class]=\"classes\" title=\"{{ label | translate }}\">\r\n  <h1 class=\"text-gray-darker\">\r\n    <i [c8yIcon]=\"icon\" class=\"c8y-icon-duocolor\"></i>\r\n  </h1>\r\n  <p class=\"text-muted\">{{ label | translate }}</p>\r\n</div>\r\n"
            }]
    }], function () { return []; }, { icon: [{
            type: Input
        }], label: [{
            type: Input
        }] }); })();

class QuickLinkModule {
}
QuickLinkModule.ɵfac = function QuickLinkModule_Factory(t) { return new (t || QuickLinkModule)(); };
QuickLinkModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: QuickLinkModule });
QuickLinkModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [], imports: [[CoreModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuickLinkModule, [{
        type: NgModule,
        args: [{
                declarations: [QuickLinkComponent],
                imports: [CoreModule],
                exports: [QuickLinkComponent],
                providers: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuickLinkModule, { declarations: [QuickLinkComponent], imports: [CoreModule], exports: [QuickLinkComponent] }); })();

const HOOK_DYNAMIC_PROVIDER_CONFIG = new InjectionToken('Dynamic Provider Config');

class ProviderConfigurationNodeFactory {
    constructor(config, injector) {
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        if (!this.nodes) {
            const canActivate = this.config
                .map(this.getGuards.bind(this))
                .map(this.checkCanActivate.bind(this));
            return forkJoin(canActivate).pipe(map((canActivateResult) => this.config
                .map((c, index) => canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined)
                .filter(el => !!el)), tap(nodes => (this.nodes = nodes)));
        }
        return this.nodes;
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(toObservable);
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    getGuards(c) {
        let result = [];
        if (c.tab && c.tab.canActivate && c.tab.canActivate.length) {
            result = [...result, ...c.tab.canActivate.map(ca => this.injector.get(ca))];
        }
        if (c.navigation.canActivate && c.navigation.canActivate.length) {
            result = [...result, ...c.navigation.canActivate.map(ca => this.injector.get(ca))];
        }
        return result;
    }
}
ProviderConfigurationNodeFactory.ɵfac = function ProviderConfigurationNodeFactory_Factory(t) { return new (t || ProviderConfigurationNodeFactory)(ɵngcc0.ɵɵinject(HOOK_DYNAMIC_PROVIDER_CONFIG, 8), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ProviderConfigurationNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderConfigurationNodeFactory, factory: ProviderConfigurationNodeFactory.ɵfac });
ProviderConfigurationNodeFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
            }] }, { type: ɵngcc0.Injector }]; }, null); })();

class ProviderConfigurationService extends Service {
    constructor(client, activatedRoute) {
        super(client);
        this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.baseUrl');
        this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.listUrl');
    }
    detail() {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, ProviderConfigurationService.NO_DETAIL_ID);
        });
    }
    update(entity) {
        const _super = Object.create(null, {
            update: { get: () => super.update }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.update.call(this, entity);
        });
    }
    delete() {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.delete.call(this, ProviderConfigurationService.NO_DETAIL_ID);
        });
    }
    /** There is a single provider configuration per tenant and detail URL is not needed */
    getDetailUrl(_) {
        return this.listUrl;
    }
}
ProviderConfigurationService.ɵfac = function ProviderConfigurationService_Factory(t) { return new (t || ProviderConfigurationService)(ɵngcc0.ɵɵinject(ɵngcc3.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.ActivatedRoute)); };
ProviderConfigurationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderConfigurationService, factory: ProviderConfigurationService.ɵfac });
ProviderConfigurationService.NO_DETAIL_ID = null;
ProviderConfigurationService.ctorParameters = () => [
    { type: FetchClient },
    { type: ActivatedRoute }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.FetchClient }, { type: ɵngcc1.ActivatedRoute }]; }, null); })();

class ProviderDefinitionsService extends Service {
    constructor(client, activatedRoute) {
        super(client);
        this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.baseUrl');
        this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.listUrl');
    }
    list() {
        const _super = Object.create(null, {
            list: { get: () => super.list }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.list.call(this);
        });
    }
}
ProviderDefinitionsService.ɵfac = function ProviderDefinitionsService_Factory(t) { return new (t || ProviderDefinitionsService)(ɵngcc0.ɵɵinject(ɵngcc3.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.ActivatedRoute)); };
ProviderDefinitionsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderDefinitionsService, factory: ProviderDefinitionsService.ɵfac });
ProviderDefinitionsService.ctorParameters = () => [
    { type: FetchClient },
    { type: ActivatedRoute }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderDefinitionsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.FetchClient }, { type: ɵngcc1.ActivatedRoute }]; }, null); })();

class ProviderConfigurationComponent {
    constructor(permissions, activatedRoute, modalService, alertService, providerDefinitionsService, providerConfigurationService, jsonschema) {
        this.permissions = permissions;
        this.activatedRoute = activatedRoute;
        this.modalService = modalService;
        this.alertService = alertService;
        this.providerDefinitionsService = providerDefinitionsService;
        this.providerConfigurationService = providerConfigurationService;
        this.jsonschema = jsonschema;
        this.layout$ = this.activatedRoute.data.pipe(map((config) => config.layout), tap((layout) => (this.layout = layout)), tap((layout) => {
            this.options.formState.disabled = !this.permissions.hasAllRoles(layout.saveRoles || []);
            this.beforeSaveHook = layout.beforeSaveHook;
        }));
        this.allRoles$ = this.layout$.pipe(map((layout) => [
            ...(layout.deleteRoles || []),
            ...(layout.saveRoles || [])
        ]));
        this.changeProvider$ = new BehaviorSubject(null);
        this.providerInput$ = new BehaviorSubject('');
        this.form = new FormGroup({});
        this.fields = [];
        this.options = {
            formState: {
                disabled: false
            }
        };
        this.reload$ = new BehaviorSubject(null);
        this.updatedConfiguration$ = new Subject();
    }
    ngOnInit() {
        const allProviders$ = from(this.providerDefinitionsService.list()).pipe(map(result => result.data), shareReplay(1));
        this.providers$ = combineLatest(allProviders$, this.providerInput$).pipe(map(([providers, input]) => input
            ? providers.filter(el => el.displayName.toLowerCase().indexOf(input.toLowerCase()) >= 0)
            : providers), shareReplay(1));
        this.configuration$ = merge(this.updatedConfiguration$, this.reload$.pipe(switchMap(() => from(this.providerConfigurationService.detail()).pipe(catchError(() => of({})))), map(result => result.data))).pipe(map(this.removeEncryptedValues), shareReplay(1));
        this.selectedProvider$ = combineLatest(allProviders$, this.configuration$, this.changeProvider$).pipe(tap(([_, configuration, newProvider]) => (this.model = newProvider
            ? pick(this.model, 'sms.senderName', 'sms.senderAddress')
            : configuration)), map(([providers, configuration, newProvider]) => newProvider ||
            find$1(providers, (provider) => get(configuration, 'provider') === provider.id)), tap((provider) => {
            if (provider) {
                const config = this.jsonschema.toFieldConfig(get(provider, 'schema'));
                if (config.fieldGroup) {
                    config.fieldGroup.forEach((fieldConfig) => {
                        ɵdefineHiddenProp(fieldConfig, '_keyPath', {
                            key: fieldConfig.key,
                            path: [fieldConfig.key]
                        });
                        fieldConfig.expressionProperties = {
                            'templateOptions.disabled': 'formState.disabled'
                        };
                    });
                }
                this.fields = [config];
                this.form = new FormGroup({});
            }
        }), shareReplay(1));
    }
    saveProviderConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            const modelToSave = !!this.beforeSaveHook
                ? yield this.beforeSaveHook(this.model, this.fields)
                : this.model;
            forOwn(modelToSave, (value, key) => {
                if (Array.isArray(value)) {
                    modelToSave[key] = value.filter(item => !!item || item === 0);
                }
            });
            try {
                const res = yield this.providerConfigurationService.update(modelToSave);
                this.changeProvider$.next(null);
                this.updatedConfiguration$.next(res.data);
                this.alertService.success(this.layout.configurationUpdatedSuccessMsg);
                this.form.markAsPristine();
            }
            catch (err) {
                this.alertService.addServerFailure(err);
            }
        });
    }
    deleteProviderConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalService.confirm(this.layout.deleteConfigurationModalTitle, this.layout.deleteConfigurationModalBody, Status.DANGER, {
                    ok: this.layout.deleteConfigurationModalOkBtnLabel,
                    cancel: this.layout.deleteConfigurationModalCancelBtnLabel
                });
                yield this.providerConfigurationService.delete();
                this.reload$.next();
                this.alertService.success(this.layout.configurationDeletedSuccessMsg);
            }
            catch (err) {
                if (err) {
                    this.alertService.addServerFailure(err);
                }
            }
        });
    }
    removeEncryptedValues(configuration) {
        return mapValues(configuration, value => (value === '<<Encrypted>>' ? undefined : value));
    }
}
ProviderConfigurationComponent.ɵfac = function ProviderConfigurationComponent_Factory(t) { return new (t || ProviderConfigurationComponent)(ɵngcc0.ɵɵdirectiveInject(Permissions), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ModalService), ɵngcc0.ɵɵdirectiveInject(AlertService), ɵngcc0.ɵɵdirectiveInject(ProviderDefinitionsService), ɵngcc0.ɵɵdirectiveInject(ProviderConfigurationService), ɵngcc0.ɵɵdirectiveInject(C8yJSONSchema)); };
ProviderConfigurationComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ProviderConfigurationComponent, selectors: [["c8y-sms-gateway"]], features: [ɵngcc0.ɵɵProvidersFeature([ProviderConfigurationService, ProviderDefinitionsService])], decls: 36, vars: 48, consts: [[1, "row"], [1, "col-md-8", "col-xs-12"], [1, "card", "card--fullpage", 3, "ngSubmit"], [1, "card-header", "separator"], [1, "card-title"], [1, "inner-scroll"], [1, "card-block"], ["class", "m-b-8", 4, "ngIf"], ["for", "providerName"], ["name", "providerName", 3, "disabled", "ngModel", "displayProperty", "placeholder", "allowFreeEntries", "required", "container", "onSearch"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "active", "click", 4, "ngFor", "ngForOf"], ["name", "notExisting", 3, "text"], [3, "form", "fields", "model", "options", 4, "ngIf"], ["class", "card-footer separator", 4, "c8yIfAllowedAllowAny", "c8yIfAllowed"], [1, "m-b-8"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "active", "click"], [3, "text", "pattern"], [3, "form", "fields", "model", "options"], [1, "card-footer", "separator"], ["class", "btn btn-default", "type", "button", 3, "disabled", "title", "click", 4, "c8yIfAllowed"], ["class", "btn btn-primary", "type", "submit", 3, "disabled", "title", 4, "c8yIfAllowed"], ["type", "button", 1, "btn", "btn-default", 3, "disabled", "title", "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "title"]], template: function ProviderConfigurationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 0);
        ɵngcc0.ɵɵelementStart(5, "div", 1);
        ɵngcc0.ɵɵelementStart(6, "form", 2);
        ɵngcc0.ɵɵlistener("ngSubmit", function ProviderConfigurationComponent_Template_form_ngSubmit_6_listener() { return ctx.saveProviderConfiguration(); });
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵelementStart(8, "h4", 4);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 5);
        ɵngcc0.ɵɵelementStart(13, "div", 6);
        ɵngcc0.ɵɵtemplate(14, ProviderConfigurationComponent_p_14_Template, 4, 5, "p", 7);
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵelementStart(16, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(17, "label", 8);
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵpipe(20, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "c8y-typeahead", 9);
        ɵngcc0.ɵɵlistener("onSearch", function ProviderConfigurationComponent_Template_c8y_typeahead_onSearch_21_listener($event) { return ctx.providerInput$.next($event); });
        ɵngcc0.ɵɵpipe(22, "async");
        ɵngcc0.ɵɵpipe(23, "async");
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵpipe(25, "async");
        ɵngcc0.ɵɵtemplate(26, ProviderConfigurationComponent_c8y_li_26_Template, 4, 7, "c8y-li", 10);
        ɵngcc0.ɵɵpipe(27, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "c8y-messages");
        ɵngcc0.ɵɵelement(29, "c8y-message", 11);
        ɵngcc0.ɵɵpipe(30, "translate");
        ɵngcc0.ɵɵpipe(31, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(32, ProviderConfigurationComponent_formly_form_32_Template, 1, 4, "formly-form", 12);
        ɵngcc0.ɵɵpipe(33, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(34, ProviderConfigurationComponent_div_34_Template, 5, 6, "div", 13);
        ɵngcc0.ɵɵpipe(35, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_0_0;
        let tmp_1_0;
        let tmp_2_0;
        let tmp_3_0;
        let tmp_4_0;
        let tmp_5_0;
        let tmp_12_0;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 15, (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(3, 17, ctx.layout$)) == null ? null : tmp_0_0.pageTitle), "\n");
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 19, (tmp_1_0 = ɵngcc0.ɵɵpipeBind1(11, 21, ctx.layout$)) == null ? null : tmp_1_0.cardTitle), " ");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", !!((tmp_2_0 = ɵngcc0.ɵɵpipeBind1(15, 23, ctx.layout$)) == null ? null : tmp_2_0.description));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(19, 25, (tmp_3_0 = ɵngcc0.ɵɵpipeBind1(20, 27, ctx.layout$)) == null ? null : tmp_3_0.providerName));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(24, 33, (tmp_4_0 = ɵngcc0.ɵɵpipeBind1(25, 35, ctx.layout$)) == null ? null : tmp_4_0.providerNamePlaceholder));
        ɵngcc0.ɵɵproperty("disabled", !ctx.permissions.hasAllRoles(((tmp_5_0 = ɵngcc0.ɵɵpipeBind1(22, 29, ctx.layout$)) == null ? null : tmp_5_0.saveRoles) || ɵngcc0.ɵɵpureFunction0(47, _c42)))("ngModel", ɵngcc0.ɵɵpipeBind1(23, 31, ctx.selectedProvider$))("displayProperty", "displayName")("allowFreeEntries", false)("required", true)("container", "body");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(27, 37, ctx.providers$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(30, 39, (tmp_12_0 = ɵngcc0.ɵɵpipeBind1(31, 41, ctx.layout$)) == null ? null : tmp_12_0.providerNameNoMatchesHint));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(33, 43, ctx.selectedProvider$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIfAllowed", ɵngcc0.ɵɵpipeBind1(35, 45, ctx.allRoles$));
    } }, directives: [TitleComponent, ɵngcc14.ɵNgNoValidate, ɵngcc14.NgControlStatusGroup, ɵngcc14.NgForm, ɵngcc7.NgIf, FormGroupComponent, TypeaheadComponent, ɵngcc14.NgControlStatus, ɵngcc14.NgModel, ɵngcc14.RequiredValidator, ɵngcc7.NgForOf, MessagesComponent, MessageDirective, IfAllowedDirective, ListItemComponent, HighlightComponent, ɵngcc18.FormlyForm], pipes: [C8yTranslatePipe, ɵngcc7.AsyncPipe], encapsulation: 2 });
ProviderConfigurationComponent.ctorParameters = () => [
    { type: Permissions },
    { type: ActivatedRoute },
    { type: ModalService },
    { type: AlertService },
    { type: ProviderDefinitionsService },
    { type: ProviderConfigurationService },
    { type: C8yJSONSchema }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-sms-gateway',
                template: "<c8y-title>\n  {{ (layout$ | async)?.pageTitle | translate }}\n</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-md-8 col-xs-12\">\n    <form class=\"card card--fullpage\" (ngSubmit)=\"saveProviderConfiguration()\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">\n          {{ (layout$ | async)?.cardTitle | translate }}\n        </h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\">\n          <p *ngIf=\"!!(layout$ | async)?.description\" class=\"m-b-8\">\n            {{ (layout$ | async)?.description | translate }}\n          </p>\n          <c8y-form-group>\n            <label for=\"providerName\">{{ (layout$ | async)?.providerName | translate }}</label>\n            <c8y-typeahead\n              [disabled]=\"!permissions.hasAllRoles((layout$ | async)?.saveRoles || [])\"\n              [ngModel]=\"selectedProvider$ | async\"\n              [displayProperty]=\"'displayName'\"\n              name=\"providerName\"\n              placeholder=\"{{ (layout$ | async)?.providerNamePlaceholder | translate }}\"\n              (onSearch)=\"providerInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n              [container]=\"'body'\"\n            >\n              <c8y-li\n                *ngFor=\"let provider of providers$ | async\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"changeProvider$.next(provider); providerInput$.next('')\"\n                [active]=\"(selectedProvider$ | async) === provider\"\n              >\n                <c8y-highlight\n                  [text]=\"provider.displayName || '--'\"\n                  [pattern]=\"providerInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"(layout$ | async)?.providerNameNoMatchesHint | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <formly-form\n            *ngIf=\"selectedProvider$ | async\"\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            [options]=\"options\"\n          ></formly-form>\n        </div>\n      </div>\n      <div class=\"card-footer separator\" *c8yIfAllowed=\"allRoles$ | async; allowAny\">\n        <button\n          *c8yIfAllowed=\"(layout$ | async)?.deleteRoles\"\n          class=\"btn btn-default\"\n          type=\"button\"\n          (click)=\"deleteProviderConfiguration()\"\n          [disabled]=\"\n            !(configuration$ | async)?.provider && !(configuration$ | async)?.providerName\n          \"\n          title=\"{{ (layout$ | async)?.deleteBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async)?.deleteBtnLabel | translate }}\n        </button>\n        <button\n          *c8yIfAllowed=\"(layout$ | async)?.saveRoles\"\n          class=\"btn btn-primary\"\n          type=\"submit\"\n          [disabled]=\"form.invalid || form.pristine\"\n          title=\"{{ (layout$ | async)?.saveBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async)?.saveBtnLabel | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n",
                providers: [ProviderConfigurationService, ProviderDefinitionsService]
            }]
    }], function () { return [{ type: Permissions }, { type: ɵngcc1.ActivatedRoute }, { type: ModalService }, { type: AlertService }, { type: ProviderDefinitionsService }, { type: ProviderConfigurationService }, { type: C8yJSONSchema }]; }, null); })();

class ProviderConfigurationRouteFactory {
    constructor(config) {
        this.config = flatten(config);
    }
    get() {
        const navigationRoutes = uniqBy(this.config.filter(c => c.tab), 'navigation.path').map(c => {
            return {
                path: c.navigation.path,
                component: ConditionalTabsOutletComponent
            };
        });
        const navigationWithTabsRoutes = this.config.map(c => ({
            path: c.tab
                ? `${c.navigation.path.replace(/^\/|\/$/g, '')}/${c.tab.path.replace(/^\/|\/$/g, '')}`
                : c.navigation.path,
            component: ProviderConfigurationComponent,
            canActivate: [
                ...(c.navigation.canActivate || []),
                ...(get(c, 'tab.canActivate') || [])
            ].filter(g => !!g),
            data: {
                layout: c.layout,
                endpoint: c.endpoint
            }
        }));
        return [...navigationRoutes, ...navigationWithTabsRoutes];
    }
}
ProviderConfigurationRouteFactory.ɵfac = function ProviderConfigurationRouteFactory_Factory(t) { return new (t || ProviderConfigurationRouteFactory)(ɵngcc0.ɵɵinject(HOOK_DYNAMIC_PROVIDER_CONFIG, 8)); };
ProviderConfigurationRouteFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderConfigurationRouteFactory, factory: ProviderConfigurationRouteFactory.ɵfac });
ProviderConfigurationRouteFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationRouteFactory, [{
        type: Injectable
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
            }] }]; }, null); })();

class ProviderConfigurationTabFactory {
    constructor(config, router, injector) {
        this.router = router;
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        const configForRoute = this.config.find(c => c.tab
            ? this.router.url === '/' + this.getNodeTabPath(c.navigation.path, c.tab.path) ||
                this.router.url.startsWith('/' + c.navigation.path.replace(/^\/|\/$/g, ''))
            : false);
        const filteredRoutes = configForRoute
            ? this.config.filter(c => c.navigation.path.replace(/^\/|\/$/g, '') ===
                configForRoute.navigation.path.replace(/^\/|\/$/g, '') && c.tab)
            : [];
        const canActivate = filteredRoutes
            .map(c => c.tab.canActivate && c.tab.canActivate.length
            ? c.tab.canActivate.map(ca => this.injector.get(ca))
            : undefined)
            .map(this.checkCanActivate.bind(this));
        return canActivate.length > 0
            ? forkJoin(canActivate).pipe(map((canActivateResult) => filteredRoutes
                .map((c, index) => {
                const tab = Object.assign(Object.assign({}, c.tab), { path: this.getNodeTabPath(c.navigation.path, c.tab.path) });
                return canActivateResult[index] ? tab : undefined;
            })
                .filter(el => !!el)))
            : [];
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(toObservable);
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    getNodeTabPath(nodePath, tabPath) {
        return `${nodePath.replace(/^\/|\/$/g, '')}/${tabPath.replace(/^\/|\/$/g, '')}`;
    }
}
ProviderConfigurationTabFactory.ɵfac = function ProviderConfigurationTabFactory_Factory(t) { return new (t || ProviderConfigurationTabFactory)(ɵngcc0.ɵɵinject(HOOK_DYNAMIC_PROVIDER_CONFIG, 8), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ProviderConfigurationTabFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderConfigurationTabFactory, factory: ProviderConfigurationTabFactory.ɵfac });
ProviderConfigurationTabFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
    { type: Router },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationTabFactory, [{
        type: Injectable
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
            }] }, { type: ɵngcc1.Router }, { type: ɵngcc0.Injector }]; }, null); })();

class ProviderConfigurationModule {
    static config(config) {
        return {
            ngModule: ProviderConfigurationModule,
            providers: [{ provide: HOOK_DYNAMIC_PROVIDER_CONFIG, useValue: config, multi: true }]
        };
    }
}
ProviderConfigurationModule.ɵfac = function ProviderConfigurationModule_Factory(t) { return new (t || ProviderConfigurationModule)(); };
ProviderConfigurationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ProviderConfigurationModule });
ProviderConfigurationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ROUTE,
            useClass: forwardRef(() => ProviderConfigurationRouteFactory),
            multi: true
        },
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: forwardRef(() => ProviderConfigurationNodeFactory),
            multi: true
        },
        {
            provide: HOOK_TABS,
            useClass: forwardRef(() => ProviderConfigurationTabFactory),
            multi: true
        }
    ], imports: [[CoreModule, CommonModule, DynamicFormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationModule, [{
        type: NgModule,
        args: [{
                declarations: [ProviderConfigurationComponent],
                exports: [ProviderConfigurationComponent],
                imports: [CoreModule, CommonModule, DynamicFormsModule],
                entryComponents: [ProviderConfigurationComponent],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useClass: forwardRef(() => ProviderConfigurationRouteFactory),
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: forwardRef(() => ProviderConfigurationNodeFactory),
                        multi: true
                    },
                    {
                        provide: HOOK_TABS,
                        useClass: forwardRef(() => ProviderConfigurationTabFactory),
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProviderConfigurationModule, { declarations: [ProviderConfigurationComponent], imports: [CoreModule, CommonModule, DynamicFormsModule], exports: [ProviderConfigurationComponent] }); })();

/**
 * A wrapper class for handling realtime notifications in RxJS fashion.
 */
class RealtimeService {
    constructor(realtimeSubject) {
        this.realtimeSubject = realtimeSubject;
        this.isActive = new BehaviorSubject(true);
    }
    /**
     * A flag displaying if realtime notifications are currently active.
     */
    get active() {
        return this.isActive.value;
    }
    /**
     * Get an Observable of all realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of notifications wrapped as [[RealtimeMessage]]
     */
    onAll$(entityOrId) {
        const subject$ = this.realtimeSubject.getObservableForChannel(this.getChannel(entityOrId));
        return this.isActive.pipe(switchMap(active => (active ? subject$ : NEVER)));
    }
    /**
     * Subscribes again all realtime channels with active observers.
     */
    start() {
        if (!this.active) {
            this.isActive.next(true);
        }
    }
    /**
     * Stops realtime notifications and unsubscribes all realtime channels.
     */
    stop() {
        if (this.active) {
            this.isActive.next(false);
        }
    }
    /**
     * Get an Observable of all CREATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    onCreate$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'CREATE'), map(msg => msg.data));
    }
    /**
     * Get an Observable of all UPDATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of updated entity objects.
     */
    onUpdate$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'UPDATE'), map(msg => msg.data));
    }
    /**
     * Get an Observable of all DELETE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of deleted entity objects.
     */
    onDelete$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'DELETE'), map(msg => coerceNumberProperty(msg.data)));
    }
    getIdString(reference) {
        let id;
        if (typeof reference === 'object') {
            id = reference.id;
        }
        else {
            id = reference;
        }
        return String(id);
    }
    getChannel(entityOrId) {
        return entityOrId ? this.channel().replace('*', this.getIdString(entityOrId)) : this.channel();
    }
}

/**
 * Service (providedIn root) that ensures to only create a single realtime subscription for each channel
 */
class RealtimeSubjectService {
    constructor(realtime) {
        this.realtime = realtime;
        this.subjects$ = new Map();
    }
    getObservableForChannel(channel) {
        if (this.subjects$.has(channel)) {
            return this.subjects$.get(channel);
        }
        const observable$ = this.createObservableForChannel(channel, this.realtime);
        const sharedObservable$ = observable$.pipe(share());
        this.subjects$.set(channel, sharedObservable$);
        return sharedObservable$;
    }
    createObservableForChannel(channel, realtime) {
        return new Observable(observer => {
            const realtimeSubscription = realtime.subscribe(channel, msg => {
                const data = {
                    channel: msg.channel,
                    data: msg.data.data,
                    id: msg.id,
                    realtimeAction: msg.data.realtimeAction
                };
                observer.next(data);
            });
            return {
                unsubscribe() {
                    realtime.unsubscribe(realtimeSubscription);
                }
            };
        });
    }
}
RealtimeSubjectService.ɵfac = function RealtimeSubjectService_Factory(t) { return new (t || RealtimeSubjectService)(ɵngcc0.ɵɵinject(ɵngcc3.Realtime)); };
RealtimeSubjectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RealtimeSubjectService_Factory() { return new RealtimeSubjectService(i0.ɵɵinject(i1$4.Realtime)); }, token: RealtimeSubjectService, providedIn: "root" });
RealtimeSubjectService.ctorParameters = () => [
    { type: Realtime }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RealtimeSubjectService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc3.Realtime }]; }, null); })();

class AlarmRealtimeService extends RealtimeService {
    constructor(realtimeSubject) {
        super(realtimeSubject);
        this.realtimeSubject = realtimeSubject;
    }
    channel() {
        return '/alarms/*';
    }
}
AlarmRealtimeService.ɵfac = function AlarmRealtimeService_Factory(t) { return new (t || AlarmRealtimeService)(ɵngcc0.ɵɵinject(RealtimeSubjectService)); };
AlarmRealtimeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AlarmRealtimeService, factory: AlarmRealtimeService.ɵfac });
AlarmRealtimeService.ctorParameters = () => [
    { type: RealtimeSubjectService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlarmRealtimeService, [{
        type: Injectable
    }], function () { return [{ type: RealtimeSubjectService }]; }, null); })();

class EventRealtimeService extends RealtimeService {
    constructor(realtimeSubject) {
        super(realtimeSubject);
        this.realtimeSubject = realtimeSubject;
    }
    channel() {
        return '/events/*';
    }
}
EventRealtimeService.ɵfac = function EventRealtimeService_Factory(t) { return new (t || EventRealtimeService)(ɵngcc0.ɵɵinject(RealtimeSubjectService)); };
EventRealtimeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: EventRealtimeService, factory: EventRealtimeService.ɵfac });
EventRealtimeService.ctorParameters = () => [
    { type: RealtimeSubjectService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EventRealtimeService, [{
        type: Injectable
    }], function () { return [{ type: RealtimeSubjectService }]; }, null); })();

class ManagedObjectRealtimeService extends RealtimeService {
    constructor(realtimeSubject) {
        super(realtimeSubject);
        this.realtimeSubject = realtimeSubject;
    }
    /**
     * Get an Observable of all CREATE realtime notifications.
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    onCreate$() {
        return super.onCreate$();
    }
    channel() {
        return '/managedobjects/*';
    }
}
ManagedObjectRealtimeService.ɵfac = function ManagedObjectRealtimeService_Factory(t) { return new (t || ManagedObjectRealtimeService)(ɵngcc0.ɵɵinject(RealtimeSubjectService)); };
ManagedObjectRealtimeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ManagedObjectRealtimeService, factory: ManagedObjectRealtimeService.ɵfac });
ManagedObjectRealtimeService.ctorParameters = () => [
    { type: RealtimeSubjectService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ManagedObjectRealtimeService, [{
        type: Injectable
    }], function () { return [{ type: RealtimeSubjectService }]; }, null); })();

class MeasurementRealtimeService extends RealtimeService {
    constructor(realtimeSubject, measurementService) {
        super(realtimeSubject);
        this.realtimeSubject = realtimeSubject;
        this.measurementService = measurementService;
    }
    /**
     * Get an Observable of all measurements filtered by fragment and series.
     *
     * @param {string} fragment Measurement fragment
     *
     * @param {string} series Measurement series
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    onCreateOfSpecificMeasurement$(fragment, series, entityOrId) {
        return this.onCreate$(entityOrId).pipe(filter(msg => msg[fragment] && msg[fragment][series]));
    }
    /**
     * Get an Observable of all measurements filtered by fragment and series.
     * Combines the latest value from measurement API and future values via realtime API.
     *
     * @param {string} fragment Measurement fragment
     *
     * @param {string} series Measurement series
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @param {number} pageSize Number of measurements to initially retrieve from backend
     *
     * @param {boolean} emitNullIfInitialValuesWereNotFound Flag that if set to true will initially emit value of null in case no measurement could have been retrieved from backend
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    latestValueOfSpecificMeasurement$(fragment, series, entityOrId, pageSize = 1, emitNullIfInitialValuesWereNotFound = false) {
        const realtime$ = this.onCreateOfSpecificMeasurement$(fragment, series, entityOrId);
        const lastMeasurement$ = this.lastMeasurement$(fragment, series, entityOrId, pageSize, emitNullIfInitialValuesWereNotFound);
        return merge(lastMeasurement$, realtime$);
    }
    lastMeasurement$(fragment, series, entityOrId, pageSize, emitNullIfInitialValuesWereNotFound = false) {
        return from(this.measurementService.list({
            valueFragmentSeries: series,
            valueFragmentType: fragment,
            source: this.getIdString(entityOrId),
            dateFrom: '1970-01-01',
            revert: true,
            pageSize
        })).pipe(
        // emit null in case no value could have been retrieved so we are able to note that in certain cases.
        map(result => !emitNullIfInitialValuesWereNotFound || result.data.length ? result.data : [null]), 
        // reverse required, so that measurements are received ordered by time (ascending).
        // from ensures values are sent as single measurements and not a measurement array.
        switchMap(result => from(result.reverse())));
    }
    channel() {
        return '/measurements/*';
    }
}
MeasurementRealtimeService.ɵfac = function MeasurementRealtimeService_Factory(t) { return new (t || MeasurementRealtimeService)(ɵngcc0.ɵɵinject(RealtimeSubjectService), ɵngcc0.ɵɵinject(ɵngcc3.MeasurementService)); };
MeasurementRealtimeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MeasurementRealtimeService, factory: MeasurementRealtimeService.ɵfac });
MeasurementRealtimeService.ctorParameters = () => [
    { type: RealtimeSubjectService },
    { type: MeasurementService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MeasurementRealtimeService, [{
        type: Injectable
    }], function () { return [{ type: RealtimeSubjectService }, { type: ɵngcc3.MeasurementService }]; }, null); })();

/**
 * A service for handling bulk operation realtime notifications in RxJS fashion.
 */
class OperationBulkRealtimeService extends RealtimeService {
    constructor(realtimeSubject) {
        super(realtimeSubject);
        this.realtimeSubject = realtimeSubject;
    }
    /**
     * Get an Observable of all CREATE realtime notifications.
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    onCreate$() {
        return super.onCreate$();
    }
    channel() {
        return '/bulkOperations/*';
    }
}
OperationBulkRealtimeService.ɵfac = function OperationBulkRealtimeService_Factory(t) { return new (t || OperationBulkRealtimeService)(ɵngcc0.ɵɵinject(RealtimeSubjectService)); };
OperationBulkRealtimeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OperationBulkRealtimeService, factory: OperationBulkRealtimeService.ɵfac });
OperationBulkRealtimeService.ctorParameters = () => [
    { type: RealtimeSubjectService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationBulkRealtimeService, [{
        type: Injectable
    }], function () { return [{ type: RealtimeSubjectService }]; }, null); })();

/**
 * A service for handling bulk operation realtime notifications in RxJS fashion.
 */
class OperationRealtimeService extends RealtimeService {
    constructor(realtimeSubject) {
        super(realtimeSubject);
        this.realtimeSubject = realtimeSubject;
    }
    channel() {
        return '/operations/*';
    }
}
OperationRealtimeService.ɵfac = function OperationRealtimeService_Factory(t) { return new (t || OperationRealtimeService)(ɵngcc0.ɵɵinject(RealtimeSubjectService)); };
OperationRealtimeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OperationRealtimeService, factory: OperationRealtimeService.ɵfac });
OperationRealtimeService.ctorParameters = () => [
    { type: RealtimeSubjectService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationRealtimeService, [{
        type: Injectable
    }], function () { return [{ type: RealtimeSubjectService }]; }, null); })();

/**
 * A service for handling device bootstrap realtime notifications in RxJS fashion.
 */
class DeviceBootstrapRealtimeService extends RealtimeService {
    constructor(realtimeSubject) {
        super(realtimeSubject);
        this.realtimeSubject = realtimeSubject;
    }
    channel() {
        return '/bootstrap';
    }
}
DeviceBootstrapRealtimeService.ɵfac = function DeviceBootstrapRealtimeService_Factory(t) { return new (t || DeviceBootstrapRealtimeService)(ɵngcc0.ɵɵinject(RealtimeSubjectService)); };
DeviceBootstrapRealtimeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceBootstrapRealtimeService, factory: DeviceBootstrapRealtimeService.ɵfac });
DeviceBootstrapRealtimeService.ctorParameters = () => [
    { type: RealtimeSubjectService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceBootstrapRealtimeService, [{
        type: Injectable
    }], function () { return [{ type: RealtimeSubjectService }]; }, null); })();

class RealtimeMessage {
}

/**
 * Barrel to export /core
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ActionBarComponent, ActionBarItemComponent, ActionBarModule, ActionBarService, ActionComponent, ActionModule, ActionOutletComponent, ActionService, AlarmRealtimeService, AlertComponent, AlertDetailsComponent, AlertModule, AlertOutletComponent, AlertService, AlertTextComponent, AppIconComponent, AppStateService, AppSwitcherComponent, ApplicationOptions, AssetTypesModule, AssetTypesService, AuthenticationModule, BootstrapComponent, BootstrapModule, BreadcrumbComponent, BreadcrumbItemComponent, BreadcrumbModule, BreadcrumbOutletComponent, BreadcrumbService, BytesPipe, C8yJSONSchema, C8yStepper, C8yStepperButtons, C8yStepperIcon, C8yStepperProgress, C8yTranslateDirective, C8yTranslateModule, C8yTranslatePipe, C8yValidators, CachedLocaleDictionaryService, CellRendererComponent, CellRendererContext, CellRendererDefDirective, ChangePasswordComponent, ColorService, ColumnDirective, CommonModule, ConditionalTabsOutletComponent, ConfigureCustomColumnComponent, ConfirmModalComponent, ContextRouteComponent, ContextRouteGuard, ContextRouteService, CookieBannerComponent, CoreModule, CredentialsComponent, DashboardChildActionComponent, DashboardChildChange, DashboardChildComponent, DashboardChildTitleComponent, DashboardComponent, DashboardModule, DataGridComponent, DataGridModule, DatapointLibraryValidationErrors, DatePickerComponent, DatePickerModule, DatePipe, DateTimePickerComponent, DateTimePickerModule, DefaultValidationDirective, DeviceBootstrapRealtimeService, DeviceStatusComponent, DeviceStatusModule, DocsModule, DocsService, DropAreaComponent, DropAreaModule, DropdownDirectionDirective, DynamicComponentComponent, DynamicComponentModule, DynamicComponentService, DynamicFormsModule, ES_MAX_TIME_MILLISECONDS, EmailsValidatorDirective, EmptyComponent, EmptyStateComponent, EventRealtimeService, FilePickerComponent, FilePickerModule, FilesService, FilterInputComponent, FilteringActionType, FilteringFormRendererComponent, FilteringFormRendererContext, FilteringFormRendererDefDirective, ForOfDirective, FormGroupComponent, FormsModule, GENERIC_FILE_TYPE, GainsightService, GridDataSource, GuideDocsComponent, GuideHrefDirective, HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_COMPONENTS, HOOK_DOCS, HOOK_DYNAMIC_PROVIDER_CONFIG, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE, HOOK_OPTIONS, HOOK_PATTERN_MESSAGES, HOOK_ROUTE, HOOK_SEARCH, HOOK_STEPPER, HOOK_TABS, HOOK_WIZARD, HeaderBarComponent, HeaderCellRendererDefDirective, HeaderModule, HeaderService, HelpComponent, HelpModule, HighlightComponent, HumanizeAppNamePipe, HumanizePipe, I18nModule$1 as I18nModule, ICONS, ICON_LIST, IconDirective, IfAllowedDirective, InputGroupListComponent, InputGroupListContainerDirective, InventorySearchService, IpRangeInputListComponent, IsControlVisiblePipe, JsonValidationPrettifierDirective, LANGUAGES, LOCALE_PATH, ListGroupComponent, ListGroupModule, ListItemActionComponent, ListItemBodyComponent, ListItemCheckboxComponent, ListItemCollapseComponent, ListItemComponent, ListItemDragHandleComponent, ListItemFooterComponent, ListItemIconComponent, ListItemRadioComponent, ListItemTimelineComponent, LoadMoreComponent, LoadingComponent, LoginComponent, LoginModule, LoginService, LoginViews, MAX_PAGE_SIZE, MESSAGES, ManagedObjectRealtimeService, MapFunctionPipe, MaxValidationDirective, MeasurementRealtimeService, MessageDirective, MessagesComponent, MinValidationDirective, MissingTranslationCustomHandler, ModalComponent, ModalModule, ModalSelectionMode, ModalService, NEEDED_ROLE_FOR_SETUP, NUMBER_FORMAT_REGEXP, NavigatorIconComponent, NavigatorModule, NavigatorNode, NavigatorNodeComponent, NavigatorNodeRoot, NavigatorOutletComponent, NavigatorService, NewPasswordComponent, NumberPipe, OperationBulkRealtimeService, OperationRealtimeService, OperationResultComponent, OptionsService, OutletDirective, PasswordCheckListComponent, PasswordConfirm, PasswordConfirmModalComponent, PasswordService, PasswordStrengthCheckerService, PasswordStrengthComponent, PasswordStrengthValidatorDirective, PatternMessagesService, Permissions, PhoneValidationDirective, PluginsModule, PluginsResolveService, PluginsService, PopoverConfirmComponent, ProductExperienceDirective, ProductExperienceModule, ProgressBarComponent, PropertiesListComponent, PropertiesListModule, ProviderConfigurationComponent, ProviderConfigurationModule, ProviderConfigurationNodeFactory, ProviderConfigurationRouteFactory, ProviderConfigurationService, ProviderDefinitionsService, PushStatus, PushStatusLabels, QuickLinkComponent, QuickLinkModule, RESOLVING_COMPONENT_WAIT_TIME, RangeComponent, RangeDirective, RangeDisplayComponent, RangeDisplayModule, RealtimeButtonComponent, RealtimeMessage, RealtimeModule, RealtimeService, RealtimeSubjectService, RecoverPasswordComponent, RequiredInputPlaceholderDirective, RightDrawerComponent, RouterModule, RouterService, RouterTabsResolver, SETUP_FINISHED_STEP_ID, SearchComponent, SearchInputComponent, SearchModule, SearchOutletComponent, SearchResultEmptyComponent, SearchService, SelectComponent, SelectModalComponent, SelectModalFilterPipe, SelectModalModule, SelectModule, SendStatus, SendStatusLabels, SetupCompletedComponent, SetupComponent, SetupModule, SetupState, ShortenUserNamePipe, ShowIfFilterPipe, SmsChallengeComponent, StateService, Status, StepperModule, StepperOutletComponent, StepperService, Steppers, StrengthValidatorService, TabComponent, TabsModule, TabsOutletComponent, TabsService, TenantUiService, TextAreaRowHeightDirective, TextareaAutoresizeDirective, TitleComponent, TitleOutletComponent, TotpAuthComponent, TotpChallengeComponent, TotpSetupComponent, TranslateCustomLoader, TranslateParserCustom, TranslateService, TypeaheadComponent, UniqueInCollectionByPathValidationDirective, UserEditComponent, UserEditModalComponent, UserMenuItemComponent, UserMenuOutletComponent, UserMenuService, UserModule, UserPreferencesService, UserPreferencesStorageInventory, UserPreferencesStorageLocal, UserTotpRevokeComponent, UserTotpSetupComponent, ValidationPattern, ViewContext, ViewContextServices, VirtualScrollWindowDirective, VirtualScrollWindowStrategy, VirtualScrollerWrapperComponent, WidgetsDashboardComponent, WizardBodyComponent, WizardComponent, WizardFooterComponent, WizardHeaderComponent, WizardModule, WizardService, ZipService, _, _virtualScrollWindowStrategyFactory, deviceAvailabilityIconMap, fromFactories, fromTrigger, fromTriggerOnce, getActivatedRoute, getAngularLocalesLanguageString, getBasicInputArrayFormFieldConfig, gettext, initializeServices, isPromise, languagesFactory, loadLocale, localeId, localePathFactory, memoize, minColumnGridTrackSize, operationStatusClasses, operationStatusIcons, parse, ratiosByColumnTypes, resolveInjectedFactories, retryWithDelay, routes, sortByPriority, stateToFactory, statusAlert, statusClasses, statusIcons, throttle, toObservable, toObservableOfArrays, tooltips, translateLoaderFactory, trimTranslationKey, CookieBannerService as ɵa, HumanizeAppNamePipe as ɵb, TimePickerModule as ɵba, TimePickerComponent as ɵbb, AuditLogModule as ɵbc, AuditLogComponent as ɵbd, ConfigureCustomColumnComponent as ɵbe, HelpService as ɵbf, ListDisplaySwitchModule as ɵbg, ListDisplaySwitchComponent as ɵbh, WizardOutletComponent as ɵbi, HOOK_ROUTE as ɵbj, HOOK_NAVIGATOR_NODES as ɵbk, HOOK_TABS as ɵbl, ProviderConfigurationTabFactory as ɵbm, CookieBannerPreferencesModalComponent as ɵc, CurrentPasswordModalComponent as ɵd, ProvidePhoneNumberComponent as ɵe, CredentialsFromQueryParamsService as ɵf, PasswordService as ɵg, TenantIdSetupComponent as ɵh, I18nModule as ɵi, TranslateExtension as ɵj, registerTranslateExtension as ɵk, ValidationModule as ɵl, c8yValidationConfigFactory as ɵm, FIELD_TYPES as ɵn, fieldTypeFactory as ɵo, DynamicFormsUIThemeModule as ɵp, FieldCheckbox as ɵq, ArrayTypeComponent as ɵr, WrapperFormField as ɵs, FieldFile as ɵt, FieldInput as ɵu, FieldRadio as ɵv, ObjectTypeComponent as ɵw, FieldDate as ɵx, FieldDateTime as ɵy, TypeaheadTypeComponent as ɵz };

//# sourceMappingURL=c8y-ngx-components.js.map