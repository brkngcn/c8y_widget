{"version":3,"file":"c8y-ngx-components-operations-bulk-operation-list-item.js","sources":["../../operations/bulk-operation-list-item/modals/bulk-operations-reschedule-modal.component.ts","../../operations/bulk-operation-list-item/bulk-operation-list-item.model.ts","../../operations/bulk-operation-list-item/bulk-operation-wrapper.component.ts","../../operations/bulk-operation-list-item/bulk-operation-list-item.service.ts","../../operations/bulk-operation-list-item/bulk-operation-list-item.component.ts","../../operations/bulk-operation-list-item/bulk-operation-list-item.module.ts","../../operations/bulk-operation-list-item/c8y-ngx-components-operations-bulk-operation-list-item.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { OperationSchedule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-reschedule-modal',\n  templateUrl: 'bulk-operations-reschedule-modal.component.html'\n})\nexport class BulkOperationsRescheduleModalComponent implements OnInit {\n  closeSubject: Subject<IOperationBulk> = new Subject();\n  dateAndDelay: OperationSchedule;\n  bulkOperation: Partial<IOperationBulk>;\n  isRetryOperation: boolean;\n  modalTitle: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private bulkOperationsService: BulkOperationsService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.modalTitle = this.getTitle();\n  }\n\n  onDateAndDelaySelect($event) {\n    this.dateAndDelay = $event;\n  }\n\n  getTitle() {\n    return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');\n  }\n\n  onCancel() {\n    this.bsModalRef.hide();\n  }\n\n  async onSave() {\n    let newBulkOperation;\n    this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();\n    this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;\n\n    if (this.isRetryOperation) {\n      try {\n        newBulkOperation = await this.bulkOperationsService.createBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled for a retry.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    } else {\n      try {\n        newBulkOperation = await this.bulkOperationsService.updateBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    }\n\n    // send back to component from which modal was called\n    this.closeSubject.next(newBulkOperation.data);\n    this.bsModalRef.hide();\n  }\n}\n","import { OperationBulkGeneralStatus } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { StatusOption } from '@c8y/ngx-components/operations/shared';\n\nexport type OperationStatusOptionsMap = {\n  [key in keyof typeof BULK_OPERATION_STATUS_LABELS]?: StatusOption;\n};\n\nexport const BULK_OPERATION_STATUS_LABELS = {\n  SCHEDULED: gettext('Scheduled'),\n  EXECUTING: gettext('Executing'),\n  CANCELED: gettext('Canceled'),\n  FAILED: gettext('Completed with failures'),\n  SUCCESSFUL: gettext('Completed successfully'),\n  DELETED: gettext('Deleted')\n};\n\nexport const BULK_OPERATION_STATUS_OPTIONS: OperationStatusOptionsMap = {\n  SCHEDULED: {\n    label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,\n    generalStatuses: [OperationBulkGeneralStatus.SCHEDULED],\n    icon: 'calendar',\n    styleClass: 'text-info'\n  },\n  EXECUTING: {\n    label: BULK_OPERATION_STATUS_LABELS.EXECUTING,\n    generalStatuses: [\n      OperationBulkGeneralStatus.EXECUTING,\n      OperationBulkGeneralStatus.EXECUTING_WITH_ERROR\n    ],\n    icon: 'refresh',\n    styleClass: 'text-primary'\n  },\n  DELETED: {\n    label: BULK_OPERATION_STATUS_LABELS.DELETED,\n    generalStatuses: [OperationBulkGeneralStatus.DELETED],\n    icon: 'delete-document',\n    styleClass: 'text-muted'\n  },\n  CANCELED: {\n    label: BULK_OPERATION_STATUS_LABELS.CANCELED,\n    generalStatuses: [OperationBulkGeneralStatus.CANCELED],\n    icon: 'ban',\n    styleClass: 'text-primary'\n  },\n  FAILED: {\n    label: BULK_OPERATION_STATUS_LABELS.FAILED,\n    generalStatuses: [OperationBulkGeneralStatus.FAILED],\n    icon: 'exclamation-triangle',\n    styleClass: 'text-danger'\n  },\n  SUCCESSFUL: {\n    label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,\n    generalStatuses: [OperationBulkGeneralStatus.SUCCESSFUL],\n    icon: 'check-circle',\n    styleClass: 'text-success'\n  }\n};\n","import { Component, Input } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-wrapper',\n  templateUrl: './bulk-operation-wrapper.component.html'\n})\nexport class BulkOperationWrapperComponent {\n  @Input() bulkOperation: Partial<IOperationBulk>;\n\n  constructor(\n    public bulkOperationsService: BulkOperationsService,\n    public modalRef: BsModalRef,\n    private modalService: BsModalService\n  ) {}\n\n  // openDetails function needs to be defined in the both places (component and the service) to avoid circular dependency.\n  async openDetails(bulkOperationId: string | number) {\n    const bulkOperation: IOperationBulk = (\n      await this.bulkOperationsService.getBulkOperationById(bulkOperationId)\n    ).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalDetailsService } from '@c8y/ngx-components/operations/bulk-operation-modal-details';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\n\n@Injectable()\nexport class BulkOperationListItemService implements BulkOperationModalDetailsService {\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modalService: BsModalService\n  ) {}\n\n  async openDetails(bulkOperationId: string | number) {\n    const bulkOperation: IOperationBulk = (\n      await this.bulkOperationsService.getBulkOperationById(bulkOperationId)\n    ).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperationBulk, OperationBulkGeneralStatus } from '@c8y/client';\nimport {\n  AlertService,\n  gettext,\n  ListItemComponent,\n  ModalService,\n  Status\n} from '@c8y/ngx-components';\nimport { assign, cloneDeep, values, find } from 'lodash-es';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\nimport {\n  BULK_OPERATION_STATUS_OPTIONS,\n  OperationStatusOptionsMap\n} from './bulk-operation-list-item.model';\nimport { BulkOperationListItemService } from './bulk-operation-list-item.service';\n\n@Component({\n  selector: 'c8y-bulk-operation-list-item',\n  templateUrl: './bulk-operation-list-item.component.html'\n})\nexport class BulkOperationListItemComponent implements OnInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  detailsCollapsed: boolean = true;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation = new EventEmitter();\n  @Output() reload: EventEmitter<any> = new EventEmitter();\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  iconClass: string;\n  finishDate: number;\n  refreshLoading = false;\n  bulkOperationGeneralStatus = OperationBulkGeneralStatus;\n  BULK_OPERATION_STATUS_OPTIONS: OperationStatusOptionsMap = BULK_OPERATION_STATUS_OPTIONS;\n  bsModalRef: BsModalRef;\n  finishDatePopoverText: string = gettext(\n    'Approximate date, estimated based on the bulk operation settings.'\n  );\n  progressBarClass: string = 'progress';\n  progressBarColor: string;\n  progressBarStatus: number = 0;\n\n  constructor(\n    public bulkOperationListItemService: BulkOperationListItemService,\n    private bulkOperationsService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.finishDate = this.calculateFinishDateMs();\n    this.setProgressBar();\n  }\n\n  getOperationStatusOptions() {\n    const statusOptions = values(BULK_OPERATION_STATUS_OPTIONS);\n    return find(statusOptions, options =>\n      options.generalStatuses.includes(this.bulkOperation.generalStatus)\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.setProgressBar();\n    }\n  }\n  calculateFinishDateMs(): number {\n    const startDateMs: number = new Date(this.bulkOperation.startDate).getTime();\n    const creationRampMs: number = this.bulkOperation.creationRamp * 1000;\n\n    return startDateMs + creationRampMs * this.bulkOperation.progress.all;\n  }\n\n  progressBarProgressFn() {\n    return (\n      ((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /\n        this.bulkOperation.progress.all) *\n      100\n    );\n  }\n\n  setProgressBar() {\n    const staticContentOfClass = 'progress-bar progress-striped active progress-bar';\n\n    const progressBarState = {\n      EXECUTING: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-primary`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      EXECUTING_WITH_ERROR: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      FAILED: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: 100\n      },\n      SUCCESSFUL: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-success`,\n        progressBarStatus: 100\n      }\n    };\n\n    assign(this, progressBarState[this.bulkOperation.generalStatus]);\n  }\n\n  editSchedule() {\n    const rescheduledOperation = cloneDeep(this.bulkOperation);\n    const initialState = {\n      bulkOperation: rescheduledOperation\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n  }\n\n  async cancelBulkOperation() {\n    try {\n      await this.modal.confirm(\n        gettext('Cancel bulk operation'),\n        gettext('You are about to cancel the bulk operation. Do you want to proceed?'),\n        Status.DANGER\n      );\n      await this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);\n      this.reload.emit();\n      this.alert.success(gettext('Operation canceled.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  retryFailedOperation() {\n    const clonedBulk = cloneDeep(this.bulkOperation);\n\n    // change the id to failedparentId similar to the logic in deviceBulkControl.service.js\n    delete clonedBulk.groupId;\n    clonedBulk.failedParentId = this.bulkOperation.id;\n\n    // show reschdedule modal:\n    const initialState = {\n      bulkOperation: clonedBulk,\n      isRetryOperation: true\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n    this.bsModalRef.content.closeSubject.subscribe(() => {\n      this.reload.emit();\n    });\n  }\n\n  async setToSuccessful() {\n    try {\n      await this.modal.confirm(\n        gettext('Set manually bulk operation to SUCCESSFUL'),\n        gettext(\n          'You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'\n        ),\n        Status.DANGER\n      );\n\n      await this.bulkOperationsService.updateBulkOperation({\n        id: this.bulkOperation.id,\n        generalStatus: OperationBulkGeneralStatus.SUCCESSFUL\n      });\n      this.reload.emit();\n      this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  openFailedOperation(failedParentId) {\n    this.showFailedOperation.emit(failedParentId);\n  }\n\n  isStatusScheduled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;\n  }\n\n  isStatusExecutingOrExecutingWithError() {\n    return (\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR\n    );\n  }\n\n  allOperationsCreated() {\n    return (\n      this.bulkOperation.progress.all ===\n      this.bulkOperation.progress.executing +\n        this.bulkOperation.progress.failed +\n        this.bulkOperation.progress.pending +\n        this.bulkOperation.progress.successful\n    );\n  }\n\n  isStatusCanceled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;\n  }\n\n  isStatusFailed() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule } from '@c8y/ngx-components';\nimport { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';\nimport { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { OperationsListItemDetailsModule } from '@c8y/ngx-components/operations/operations-list-item-details';\n\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\nimport { BulkOperationListItemService } from './bulk-operation-list-item.service';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\n\n/**\n * This module allows for displaying the list item of a bulk operation with its details.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    OperationSummaryModule,\n    BulkOperationSchedulerModule,\n    OperationsListItemDetailsModule\n  ],\n  providers: [BulkOperationListItemService],\n  declarations: [\n    BulkOperationListItemComponent,\n    BulkOperationsRescheduleModalComponent,\n    BulkOperationWrapperComponent\n  ],\n  entryComponents: [\n    BulkOperationListItemComponent,\n    BulkOperationsRescheduleModalComponent,\n    BulkOperationWrapperComponent\n  ],\n  exports: [\n    BulkOperationListItemComponent,\n    BulkOperationsRescheduleModalComponent,\n    BulkOperationWrapperComponent\n  ]\n})\nexport class BulkOperationListItemModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;;;;;;;MAYa,sCAAsC;IAOjD,YACS,UAAsB,EACrB,qBAA4C,EAC5C,KAAmB;QAFpB,eAAU,GAAV,UAAU,CAAY;QACrB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,UAAK,GAAL,KAAK,CAAc;QAT7B,iBAAY,GAA4B,IAAI,OAAO,EAAE,CAAC;KAUlD;IAEJ,QAAQ;QACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;KACnC;IAED,oBAAoB,CAAC,MAAM;QACzB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;KAC5B;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;KACtF;IAED,QAAQ;QACN,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;KACxB;IAEK,MAAM;;YACV,IAAI,gBAAgB,CAAC;YACrB,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;YAC7E,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YAEnE,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACzB,IAAI;oBACF,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC5F,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC,CAAC;iBACtE;gBAAC,OAAO,EAAE,EAAE;oBACX,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;iBACjC;aACF;iBAAM;gBACL,IAAI;oBACF,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC5F,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC;iBAC1D;gBAAC,OAAO,EAAE,EAAE;oBACX,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;iBACjC;aACF;;YAGD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SACxB;KAAA;;;YAzDF,SAAS,SAAC;gBACT,QAAQ,EAAE,sCAAsC;gBAChD,ysCAA8D;aAC/D;;;YARQ,UAAU;YAGV,qBAAqB;YAJrB,YAAY;;;MCMR,4BAA4B,GAAG;IAC1C,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC;IAC/B,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC;IAC/B,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC;IAC7B,MAAM,EAAE,OAAO,CAAC,yBAAyB,CAAC;IAC1C,UAAU,EAAE,OAAO,CAAC,wBAAwB,CAAC;IAC7C,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC;EAC3B;MAEW,6BAA6B,GAA8B;IACtE,SAAS,EAAE;QACT,KAAK,EAAE,4BAA4B,CAAC,SAAS;QAC7C,eAAe,EAAE,CAAC,0BAA0B,CAAC,SAAS,CAAC;QACvD,IAAI,EAAE,UAAU;QAChB,UAAU,EAAE,WAAW;KACxB;IACD,SAAS,EAAE;QACT,KAAK,EAAE,4BAA4B,CAAC,SAAS;QAC7C,eAAe,EAAE;YACf,0BAA0B,CAAC,SAAS;YACpC,0BAA0B,CAAC,oBAAoB;SAChD;QACD,IAAI,EAAE,SAAS;QACf,UAAU,EAAE,cAAc;KAC3B;IACD,OAAO,EAAE;QACP,KAAK,EAAE,4BAA4B,CAAC,OAAO;QAC3C,eAAe,EAAE,CAAC,0BAA0B,CAAC,OAAO,CAAC;QACrD,IAAI,EAAE,iBAAiB;QACvB,UAAU,EAAE,YAAY;KACzB;IACD,QAAQ,EAAE;QACR,KAAK,EAAE,4BAA4B,CAAC,QAAQ;QAC5C,eAAe,EAAE,CAAC,0BAA0B,CAAC,QAAQ,CAAC;QACtD,IAAI,EAAE,KAAK;QACX,UAAU,EAAE,cAAc;KAC3B;IACD,MAAM,EAAE;QACN,KAAK,EAAE,4BAA4B,CAAC,MAAM;QAC1C,eAAe,EAAE,CAAC,0BAA0B,CAAC,MAAM,CAAC;QACpD,IAAI,EAAE,sBAAsB;QAC5B,UAAU,EAAE,aAAa;KAC1B;IACD,UAAU,EAAE;QACV,KAAK,EAAE,4BAA4B,CAAC,UAAU;QAC9C,eAAe,EAAE,CAAC,0BAA0B,CAAC,UAAU,CAAC;QACxD,IAAI,EAAE,cAAc;QACpB,UAAU,EAAE,cAAc;KAC3B;;;MC/CU,6BAA6B;IAGxC,YACS,qBAA4C,EAC5C,QAAoB,EACnB,YAA4B;QAF7B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,aAAQ,GAAR,QAAQ,CAAY;QACnB,iBAAY,GAAZ,YAAY,CAAgB;KAClC;;IAGE,WAAW,CAAC,eAAgC;;YAChD,MAAM,aAAa,GAAmB,CACpC,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,eAAe,CAAC,EACtE,IAAI,CAAC;YACP,MAAM,YAAY,GAAG,EAAE,aAAa,EAAE,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,6BAA6B,EAAE;gBACpD,YAAY;gBACZ,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;SACJ;KAAA;;;YAvBF,SAAS,SAAC;gBACT,QAAQ,EAAE,6BAA6B;gBACvC,mnBAAsD;aACvD;;;YALQ,qBAAqB;YADrB,UAAU;YAAE,cAAc;;;4BAQhC,KAAK;;;MCFK,4BAA4B;IACvC,YACU,qBAA4C,EAC5C,YAA4B;QAD5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,iBAAY,GAAZ,YAAY,CAAgB;KAClC;IAEE,WAAW,CAAC,eAAgC;;YAChD,MAAM,aAAa,GAAmB,CACpC,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,eAAe,CAAC,EACtE,IAAI,CAAC;YACP,MAAM,YAAY,GAAG,EAAE,aAAa,EAAE,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,6BAA6B,EAAE;gBACpD,YAAY;gBACZ,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;SACJ;KAAA;;;YAhBF,UAAU;;;YAJF,qBAAqB;YADrB,cAAc;;;MC8BV,8BAA8B;IAuBzC,YACS,4BAA0D,EACzD,qBAA4C,EAC5C,KAAmB,EACnB,KAAmB,EACnB,cAA8B;QAJ/B,iCAA4B,GAA5B,4BAA4B,CAA8B;QACzD,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,UAAK,GAAL,KAAK,CAAc;QACnB,UAAK,GAAL,KAAK,CAAc;QACnB,mBAAc,GAAd,cAAc,CAAgB;QAxBxC,qBAAgB,GAAY,IAAI,CAAC;QAEjC,aAAQ,GAAY,KAAK,CAAC;QAChB,wBAAmB,GAAG,IAAI,YAAY,EAAE,CAAC;QACzC,WAAM,GAAsB,IAAI,YAAY,EAAE,CAAC;QAIzD,mBAAc,GAAG,KAAK,CAAC;QACvB,+BAA0B,GAAG,0BAA0B,CAAC;QACxD,kCAA6B,GAA8B,6BAA6B,CAAC;QAEzF,0BAAqB,GAAW,OAAO,CACrC,mEAAmE,CACpE,CAAC;QACF,qBAAgB,GAAW,UAAU,CAAC;QAEtC,sBAAiB,GAAW,CAAC,CAAC;KAQ1B;IAEJ,QAAQ;QACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/C,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAED,yBAAyB;QACvB,MAAM,aAAa,GAAG,MAAM,CAAC,6BAA6B,CAAC,CAAC;QAC5D,OAAO,IAAI,CAAC,aAAa,EAAE,OAAO,IAChC,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CACnE,CAAC;KACH;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,EAAE;YAC/D,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;KACF;IACD,qBAAqB;QACnB,MAAM,WAAW,GAAW,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;QAC7E,MAAM,cAAc,GAAW,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC;QAEtE,OAAO,WAAW,GAAG,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC;KACvE;IAED,qBAAqB;QACnB,QACE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM;YAC3E,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG;YACjC,GAAG,EACH;KACH;IAED,cAAc;QACZ,MAAM,oBAAoB,GAAG,mDAAmD,CAAC;QAEjF,MAAM,gBAAgB,GAAG;YACvB,SAAS,EAAE;gBACT,gBAAgB,EAAE,kCAAkC;gBACpD,gBAAgB,EAAE,GAAG,oBAAoB,UAAU;gBACnD,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,EAAE;aAChD;YACD,oBAAoB,EAAE;gBACpB,gBAAgB,EAAE,kCAAkC;gBACpD,gBAAgB,EAAE,GAAG,oBAAoB,SAAS;gBAClD,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,EAAE;aAChD;YACD,MAAM,EAAE;gBACN,gBAAgB,EAAE,UAAU;gBAC5B,gBAAgB,EAAE,GAAG,oBAAoB,SAAS;gBAClD,iBAAiB,EAAE,GAAG;aACvB;YACD,UAAU,EAAE;gBACV,gBAAgB,EAAE,UAAU;gBAC5B,gBAAgB,EAAE,GAAG,oBAAoB,UAAU;gBACnD,iBAAiB,EAAE,GAAG;aACvB;SACF,CAAC;QAEF,MAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;KAClE;IAED,YAAY;QACV,MAAM,oBAAoB,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3D,MAAM,YAAY,GAAG;YACnB,aAAa,EAAE,oBAAoB;SACpC,CAAC;QACF,MAAM,YAAY,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAkB,CAAC;QAC7F,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACxC,sCAAsC,EACtC,YAAY,CACb,CAAC;KACH;IAEK,mBAAmB;;YACvB,IAAI;gBACF,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CACtB,OAAO,CAAC,uBAAuB,CAAC,EAChC,OAAO,CAAC,qEAAqE,CAAC,EAC9E,MAAM,CAAC,MAAM,CACd,CAAC;gBACF,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBACnB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;aACpD;YAAC,OAAO,EAAE,EAAE;gBACX,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;aACjC;SACF;KAAA;IAED,oBAAoB;QAClB,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;QAGjD,OAAO,UAAU,CAAC,OAAO,CAAC;QAC1B,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;;QAGlD,MAAM,YAAY,GAAG;YACnB,aAAa,EAAE,UAAU;YACzB,gBAAgB,EAAE,IAAI;SACvB,CAAC;QACF,MAAM,YAAY,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAkB,CAAC;QAC7F,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACxC,sCAAsC,EACtC,YAAY,CACb,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACpB,CAAC,CAAC;KACJ;IAEK,eAAe;;YACnB,IAAI;gBACF,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CACtB,OAAO,CAAC,2CAA2C,CAAC,EACpD,OAAO,CACL,0FAA0F,CAC3F,EACD,MAAM,CAAC,MAAM,CACd,CAAC;gBAEF,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC;oBACnD,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE;oBACzB,aAAa,EAAE,0BAA0B,CAAC,UAAU;iBACrD,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBACnB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC,CAAC;aACxE;YAAC,OAAO,EAAE,EAAE;gBACX,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;aACjC;SACF;KAAA;IAED,mBAAmB,CAAC,cAAc;QAChC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAC/C;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC;KACvF;IAED,qCAAqC;QACnC,QACE,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,SAAS;YAC9E,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,oBAAoB,EACzF;KACH;IAED,oBAAoB;QAClB,QACE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG;YAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS;gBACnC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM;gBAClC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO;gBACnC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,EACxC;KACH;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC;KACtF;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC;KACpF;;;YArMF,SAAS,SAAC;gBACT,QAAQ,EAAE,8BAA8B;gBACxC,u0LAAwD;aACzD;;;YALQ,4BAA4B;YAN5B,qBAAqB;YAL5B,YAAY;YAHZ,YAAY;YAOO,cAAc;;;4BAchC,KAAK;+BAEL,KAAK;uBAEL,KAAK;kCAEL,MAAM;qBACN,MAAM;uBACN,SAAS,SAAC,UAAU,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;AC3BzC;;;MA6Ba,2BAA2B;;;YA1BvC,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,UAAU;oBACV,aAAa;oBACb,aAAa;oBACb,sBAAsB;oBACtB,4BAA4B;oBAC5B,+BAA+B;iBAChC;gBACD,SAAS,EAAE,CAAC,4BAA4B,CAAC;gBACzC,YAAY,EAAE;oBACZ,8BAA8B;oBAC9B,sCAAsC;oBACtC,6BAA6B;iBAC9B;gBACD,eAAe,EAAE;oBACf,8BAA8B;oBAC9B,sCAAsC;oBACtC,6BAA6B;iBAC9B;gBACD,OAAO,EAAE;oBACP,8BAA8B;oBAC9B,sCAAsC;oBACtC,6BAA6B;iBAC9B;aACF;;;AC1CD;;;;;;"}