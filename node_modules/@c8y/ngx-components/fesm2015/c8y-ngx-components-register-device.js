import * as i0 from '@angular/core';
import { Injectable, Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, Input, InjectionToken, Injector, NgModule } from '@angular/core';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { __decorate, __awaiter } from 'tslib';
import * as i3 from '@c8y/ngx-components';
import { gettext, AlertService, TenantUiService, memoize, Status, DeviceBootstrapRealtimeService, ModalService, OptionsService, NavigatorNode, Permissions, AppStateService, C8yJSONSchema, C8yStepper, fromTriggerOnce, CommonModule, CoreModule, StepperModule, DynamicFormsModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { Subject, BehaviorSubject, from, forkJoin, defer } from 'rxjs';
import { takeUntil, finalize, mergeMap, takeLast, map, filter, switchMap, tap, shareReplay, startWith } from 'rxjs/operators';
import { DeviceRegistrationStatus, DeviceRegistrationService, TenantService, InventoryService, DeviceRegistrationSecurityMode, ApplicationType, ApplicationService, FetchClient, DeviceRegistrationBulkService } from '@c8y/client';
import * as i1 from '@angular/router';
import { Router, RouterModule } from '@angular/router';
import { get, pick, sortBy, flatMap } from 'lodash-es';
import * as i2 from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { STEP_STATE } from '@angular/cdk/stepper';
import { saveAs } from 'file-saver';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from 'ngx-bootstrap/modal';
import * as ɵngcc5 from '@angular/cdk/stepper';
import * as ɵngcc6 from '@ngx-formly/core';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '@ngx-translate/core';
import * as ɵngcc9 from 'ngx-bootstrap/popover';
import * as ɵngcc10 from '@angular/forms';
import * as ɵngcc11 from 'ngx-bootstrap/dropdown';

function GeneralDeviceRegistrationComponent_c8y_operation_result_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 19);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, "Device registered"));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
function GeneralDeviceRegistrationComponent_c8y_operation_result_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, "Failed to register device"));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
const _c0 = function (a0) { return { successfulDevicesCount: a0 }; };
function GeneralDeviceRegistrationComponent_ng_container_18_c8y_operation_result_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 19);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind2(1, 3, "{{ successfulDevicesCount }} devices registered", ɵngcc0.ɵɵpureFunction1(6, _c0, ctx_r7.success.length)))("size", 84)("vertical", true);
} }
const _c1 = function (a0) { return { failedDevicesCount: a0 }; };
function GeneralDeviceRegistrationComponent_ng_container_18_c8y_operation_result_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind2(1, 3, "{{ failedDevicesCount }} devices failed to register", ɵngcc0.ɵɵpureFunction1(6, _c1, ctx_r8.failed.length)))("size", 84)("vertical", true);
} }
function GeneralDeviceRegistrationComponent_ng_container_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, GeneralDeviceRegistrationComponent_ng_container_18_c8y_operation_result_1_Template, 2, 8, "c8y-operation-result", 11);
    ɵngcc0.ɵɵtemplate(2, GeneralDeviceRegistrationComponent_ng_container_18_c8y_operation_result_2_Template, 2, 8, "c8y-operation-result", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.failed.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.success.length === 0);
} }
const _c2 = function (a0, a1) { return { count: a0, total: a1 }; };
function GeneralDeviceRegistrationComponent_div_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵelement(1, "c8y-operation-result", 20);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "p", 22);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(4, " Registration failed for {{ count }} devices out of {{ total }}. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(2, 4, "Several devices failed to register"));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction2(6, _c2, ctx_r3.failed.length, ctx_r3.failed.length + ctx_r3.success.length));
} }
function GeneralDeviceRegistrationComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵtext(1, " Turn on the registered device(s) and wait for connection(s) to be established. Once a device is connected, its status will change to \"Pending acceptance\". You will need to approve it by clicking on the \"Accept\" button. ");
    ɵngcc0.ɵɵelementEnd();
} }
function GeneralDeviceRegistrationComponent_c8y_li_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 24);
    ɵngcc0.ɵɵelementStart(2, "p");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "small");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(8, "pre");
    ɵngcc0.ɵɵelementStart(9, "code");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const fail_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "ban");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(fail_r9 == null ? null : fail_r9.id);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 4, fail_r9 == null ? null : fail_r9.message));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 6, fail_r9 == null ? null : fail_r9.details));
} }
function GeneralDeviceRegistrationComponent_c8y_li_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 25);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const s_r10 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "check-circle");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", s_r10 == null ? null : s_r10.id, " ");
} }
const _c3 = function () { return { cancel: true, next: true }; };
const _c4 = function (a0) { return { back: a0, custom: true }; };
const _c5 = function () { return { back: "Fix errors", custom: "Close" }; };
function DeviceRegistrationViewComponent_ng_container_0_small_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("1 ", ɵngcc0.ɵɵpipeBind1(2, 1, "new device"), "");
} }
function DeviceRegistrationViewComponent_ng_container_0_small_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceRequestList_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", deviceRequestList_r1.data.length, " ", ɵngcc0.ɵɵpipeBind1(2, 2, "new devices"), " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(3); return ctx_r12.acceptAll(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 11);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const limitStatus_r6 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 4, "Accept all"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r7.canAcceptAll() || (limitStatus_r6 == null ? null : limitStatus_r6.isReached));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "check");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, "Accept all"), " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_c8y_action_bar_item_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 12);
    ɵngcc0.ɵɵelement(1, "c8y-register-device-dropdown");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("placement", "right");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 29);
    ɵngcc0.ɵɵelementStart(1, "p", 21);
    ɵngcc0.ɵɵtext(2, "Security token");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 30);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "i", 31);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(4, 3, "Security token is required if the connected device uses it."));
    ɵngcc0.ɵɵproperty("outsideClick", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 34);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 35);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "Created"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "By`user`"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 7, "Tenant ID"), " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 33);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "Created"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 4, "By`user`"), " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵelementStart(2, "div", 20);
    ɵngcc0.ɵɵelementStart(3, "p", 21);
    ɵngcc0.ɵɵtext(4, "Device");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 22);
    ɵngcc0.ɵɵelementStart(6, "p", 21);
    ɵngcc0.ɵɵtext(7, "Status");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_div_8_Template, 6, 5, "div", 23);
    ɵngcc0.ɵɵelementStart(9, "div", 24);
    ɵngcc0.ɵɵtemplate(10, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_div_10_Template, 10, 9, "div", 25);
    ɵngcc0.ɵɵtemplate(11, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_ng_template_11_Template, 7, 6, "ng-template", null, 26, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "div", 27);
    ɵngcc0.ɵɵelement(14, "div", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r20 = ɵngcc0.ɵɵreference(12);
    const ctx_r15 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r15.showTokenInputBasedOnSecurityMode());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r15.isManagementTenant)("ngIfElse", _r20);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 36);
    ɵngcc0.ɵɵelementStart(1, "p", 37);
    ɵngcc0.ɵɵelementStart(2, "strong");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "br");
    ɵngcc0.ɵɵelementStart(6, "span", 21);
    ɵngcc0.ɵɵtext(7, "Please contact your platform administrator.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, ctx_r16.limitReachedInfo$), " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_i_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 47);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_div_1_ng_container_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 43);
    ɵngcc0.ɵɵtext(1, " Security token ");
    ɵngcc0.ɵɵelementEnd();
} }
const _c6 = function () { return { example: "A1e3gh5ds" }; };
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_div_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_div_1_ng_container_1_span_1_Template, 2, 0, "span", 53);
    ɵngcc0.ɵɵelementStart(2, "input", 54);
    ɵngcc0.ɵɵlistener("ngModelChange", function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_div_1_ng_container_1_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const singleRequest_r22 = ɵngcc0.ɵɵnextContext(3).$implicit; return singleRequest_r22.securityToken = $event; });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r30 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r30.gridOrList !== "interact-list");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", singleRequest_r22.securityToken)("placeholder", ɵngcc0.ɵɵpipeBind2(3, 4, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(7, _c6)))("required", ctx_r30.requireSecurityToken);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 52);
    ɵngcc0.ɵɵtemplate(1, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_div_1_ng_container_1_Template, 4, 8, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r28 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r28.shouldShowSecurityTokenInput(singleRequest_r22));
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 55);
    ɵngcc0.ɵɵlistener("click", function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r39); const singleRequest_r22 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r37 = ɵngcc0.ɵɵnextContext(4); return ctx_r37.accept(singleRequest_r22); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const limitStatus_r6 = ɵngcc0.ɵɵnextContext(2).ngIf;
    const ctx_r29 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Accept"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r29.isLoading || (limitStatus_r6 == null ? null : limitStatus_r6.isReached) || !singleRequest_r22.securityToken && ctx_r29.requireSecurityToken);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "Accept"), " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    const _r44 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_div_1_Template, 2, 1, "div", 48);
    ɵngcc0.ɵɵelementStart(2, "div", 49);
    ɵngcc0.ɵɵelementStart(3, "button", 50);
    ɵngcc0.ɵɵlistener("click", function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r44); const singleRequest_r22 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r42 = ɵngcc0.ɵɵnextContext(4); return ctx_r42.delete(singleRequest_r22.id); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_button_7_Template, 4, 7, "button", 51);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r24 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r24.showTokenInputBasedOnSecurityMode());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 5, "Remove"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r24.isLoading);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 7, "Remove"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", singleRequest_r22.status === ctx_r24.status.PENDING_ACCEPTANCE);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_small_17_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelementStart(1, "span", 43);
    ɵngcc0.ɵɵtext(2, "Created on`date`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 33);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "c8yDate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "span", 57);
    ɵngcc0.ɵɵtext(7, "by`user`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "span", 34);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "span", 57);
    ɵngcc0.ɵɵtext(11, "in`tenant`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "span", 35);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 3, singleRequest_r22.creationTime), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(singleRequest_r22.owner);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(singleRequest_r22.tenantId);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_small_17_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelement(1, "div", 33);
    ɵngcc0.ɵɵelement(2, "div", 34);
    ɵngcc0.ɵɵelementStart(3, "span", 43);
    ɵngcc0.ɵɵtext(4, "Created in`tenant`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 35);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1(" ", singleRequest_r22.tenantId, " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_small_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 32);
    ɵngcc0.ɵɵtemplate(1, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_small_17_div_1_Template, 14, 5, "div", 56);
    ɵngcc0.ɵɵtemplate(2, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_small_17_div_2_Template, 8, 1, "div", 56);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", singleRequest_r22.creationTime && singleRequest_r22.owner);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !singleRequest_r22.creationTime || !singleRequest_r22.owner);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 32);
    ɵngcc0.ɵɵelementStart(1, "span", 57);
    ɵngcc0.ɵɵtext(2, "Created on`date`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 33);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "c8yDate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "span", 57);
    ɵngcc0.ɵɵtext(7, "by`user`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "span", 33);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const singleRequest_r22 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 2, singleRequest_r22.creationTime), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(singleRequest_r22.owner);
} }
const _c7 = function () { return ["ROLE_DEVICE_CONTROL_ADMIN"]; };
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 36);
    ɵngcc0.ɵɵelementStart(2, "div", 38);
    ɵngcc0.ɵɵelementStart(3, "div", 39);
    ɵngcc0.ɵɵelementStart(4, "div", 40);
    ɵngcc0.ɵɵelement(5, "i", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "p", 41);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 42);
    ɵngcc0.ɵɵelementStart(9, "span", 43);
    ɵngcc0.ɵɵtext(10, "Status");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "p");
    ɵngcc0.ɵɵtemplate(12, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_i_12_Template, 1, 0, "i", 44);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(15, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_container_15_Template, 8, 9, "ng-container", 45);
    ɵngcc0.ɵɵelementStart(16, "div", 46);
    ɵngcc0.ɵɵtemplate(17, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_small_17_Template, 3, 2, "small", 25);
    ɵngcc0.ɵɵtemplate(18, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_ng_template_18_Template, 10, 4, "ng-template", null, 26, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const singleRequest_r22 = ctx.$implicit;
    const _r26 = ɵngcc0.ɵɵreference(19);
    const ctx_r17 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵclassMap(ctx_r17.statusProps[singleRequest_r22.status].cls);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r17.statusProps[singleRequest_r22.status].icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(singleRequest_r22.id);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", singleRequest_r22.status === ctx_r17.status.WAITING_FOR_CONNECTION);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 9, ctx_r17.statusProps[singleRequest_r22.status].label), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIfAllowed", ɵngcc0.ɵɵpureFunction0(11, _c7));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r17.isManagementTenant)("ngIfElse", _r26);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r53 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 13);
    ɵngcc0.ɵɵtemplate(2, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_2_Template, 15, 3, "div", 14);
    ɵngcc0.ɵɵtemplate(3, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_div_3_Template, 8, 3, "div", 15);
    ɵngcc0.ɵɵtemplate(4, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_ng_container_4_Template, 20, 12, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "c8y-load-more", 17);
    ɵngcc0.ɵɵlistener("onLoad", function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_Template_c8y_load_more_onLoad_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r53); const ctx_r52 = ɵngcc0.ɵɵnextContext(3); return ctx_r52.updateList($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const limitStatus_r6 = ɵngcc0.ɵɵnextContext().ngIf;
    const deviceRequestList_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r9.gridOrList);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.gridOrList === "interact-list");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", limitStatus_r6 == null ? null : limitStatus_r6.isReached);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", deviceRequestList_r1.data);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("paging", deviceRequestList_r1.paging)("hidden", true);
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "h3");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 21);
    ɵngcc0.ɵɵtext(5, "Please contact your platform administrator.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r56 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r56.limitReachedInfo$), " ");
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_ng_template_3_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 21);
    ɵngcc0.ɵɵtext(1, " Use the \"Register device\" dropdown in the top right corner. ");
    ɵngcc0.ɵɵelementEnd();
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 21);
    ɵngcc0.ɵɵtext(1, "No pending registrations to display.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(2, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_ng_template_3_p_2_Template, 2, 0, "p", 61);
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIfAllowed", ɵngcc0.ɵɵpureFunction0(1, _c7));
} }
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 58);
    ɵngcc0.ɵɵelement(1, "h1", 59);
    ɵngcc0.ɵɵtemplate(2, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_ng_container_2_Template, 6, 3, "ng-container", 9);
    ɵngcc0.ɵɵtemplate(3, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_ng_template_3_Template, 3, 2, "ng-template", null, 60, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r57 = ɵngcc0.ɵɵreference(4);
    const limitStatus_r6 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", limitStatus_r6 == null ? null : limitStatus_r6.isReached)("ngIfElse", _r57);
} }
const _c8 = function (a0) { return { "icon-spin": a0 }; };
function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r62 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "c8y-action-bar-item", 3);
    ɵngcc0.ɵɵtemplate(2, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_button_2_Template, 5, 8, "button", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-action-bar-item", 3);
    ɵngcc0.ɵɵelementStart(4, "button", 5);
    ɵngcc0.ɵɵlistener("click", function DeviceRegistrationViewComponent_ng_container_0_ng_container_8_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r62); const ctx_r61 = ɵngcc0.ɵɵnextContext(2); return ctx_r61.loadAll(); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelement(6, "i", 6);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_c8y_action_bar_item_9_Template, 2, 1, "c8y-action-bar-item", 7);
    ɵngcc0.ɵɵelement(10, "c8y-help", 8);
    ɵngcc0.ɵɵtemplate(11, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_container_11_Template, 6, 6, "ng-container", 9);
    ɵngcc0.ɵɵtemplate(12, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_ng_template_12_Template, 5, 2, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r10 = ɵngcc0.ɵɵreference(13);
    const deviceRequestList_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placement", "right")("priority", 10);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIfAllowed", ɵngcc0.ɵɵpureFunction0(17, _c7));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placement", "right")("priority", 9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 13, "Reload"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.isLoading);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "refresh")("ngClass", ɵngcc0.ɵɵpureFunction1(18, _c8, ctx_r4.isLoading));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 15, "Reload"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIfAllowed", ɵngcc0.ɵɵpureFunction0(20, _c7));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", deviceRequestList_r1.data.length > 0)("ngIfElse", _r10);
} }
function DeviceRegistrationViewComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r65 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "c8y-title");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, DeviceRegistrationViewComponent_ng_container_0_small_4_Template, 3, 3, "small", 0);
    ɵngcc0.ɵɵtemplate(5, DeviceRegistrationViewComponent_ng_container_0_small_5_Template, 3, 4, "small", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "c8y-action-bar-item", 1);
    ɵngcc0.ɵɵelementStart(7, "c8y-list-display-switch", 2);
    ɵngcc0.ɵɵlistener("onListClassChange", function DeviceRegistrationViewComponent_ng_container_0_Template_c8y_list_display_switch_onListClassChange_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r65); const ctx_r64 = ɵngcc0.ɵɵnextContext(); return ctx_r64.displayMode($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, DeviceRegistrationViewComponent_ng_container_0_ng_container_8_Template, 14, 21, "ng-container", 0);
    ɵngcc0.ɵɵpipe(9, "async");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const deviceRequestList_r1 = ctx.ngIf;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "Device registration"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", deviceRequestList_r1.data.length === 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", deviceRequestList_r1.data.length > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placement", "left");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(9, 7, ctx_r0.limit$));
} }
function ExtensibleDeviceRegistrationModalComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-extensible-device-registration-stepper", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const steps_r3 = ctx.ngIf;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("steps", steps_r3)("labels", ctx_r0.labels)("contextPath", ctx_r0.contextPath);
} }
function ExtensibleDeviceRegistrationModalComponent_ng_template_7_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-operation-result", 7);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "div", 8);
    ɵngcc0.ɵɵelementStart(4, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ExtensibleDeviceRegistrationModalComponent_ng_template_7_ng_container_0_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.bsModalRef.hide(); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵtext(6, " Close ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r4.loadingErrorMessage));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 6, "Close"));
} }
function ExtensibleDeviceRegistrationModalComponent_ng_template_7_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "c8y-progress-bar", 11);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("message", ɵngcc0.ɵɵpipeBind1(2, 1, "Loading the registration form definition\u2026"));
} }
function ExtensibleDeviceRegistrationModalComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ExtensibleDeviceRegistrationModalComponent_ng_template_7_ng_container_0_Template, 7, 8, "ng-container", 3);
    ɵngcc0.ɵɵtemplate(1, ExtensibleDeviceRegistrationModalComponent_ng_template_7_ng_template_1_Template, 3, 3, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r5 = ɵngcc0.ɵɵreference(2);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.loadingErrorMessage)("ngIfElse", _r5);
} }
function ExtensibleDeviceRegistrationButtonComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function ExtensibleDeviceRegistrationButtonComponent_div_0_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const provider_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.click(provider_r1); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const provider_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, provider_r1.name));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, provider_r1.name), " ");
} }
const _c9 = function () { return { cancel: true, back: true, next: true }; };
const _c10 = function () { return { next: "Register" }; };
function ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_c8y_stepper_buttons_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-stepper-buttons", 11);
    ɵngcc0.ɵɵlistener("onCancel", function ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_c8y_stepper_buttons_3_Template_c8y_stepper_buttons_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.close(); })("onNext", function ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_c8y_stepper_buttons_3_Template_c8y_stepper_buttons_onNext_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.save(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r5 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction0(4, _c9))("labels", ɵngcc0.ɵɵpureFunction0(5, _c10))("pending", ctx_r6.pendingStatus)("disabled", ctx_r6.forms[i_r5].invalid);
} }
const _c11 = function (a1) { return { cancel: true, back: a1, next: true }; };
function ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_c8y_stepper_buttons_4_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-stepper-buttons", 12);
    ɵngcc0.ɵɵlistener("onCancel", function ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_c8y_stepper_buttons_4_Template_c8y_stepper_buttons_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.close(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r5 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction1(2, _c11, i_r5 !== 0))("disabled", ctx_r7.forms[i_r5].invalid);
} }
function ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "cdk-step", 6);
    ɵngcc0.ɵɵelementStart(1, "c8y-form-group", 7);
    ɵngcc0.ɵɵelement(2, "formly-form", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_c8y_stepper_buttons_3_Template, 1, 6, "c8y-stepper-buttons", 9);
    ɵngcc0.ɵɵtemplate(4, ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_c8y_stepper_buttons_4_Template, 1, 4, "c8y-stepper-buttons", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r4 = ctx.$implicit;
    const i_r5 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("stepControl", ctx_r0.forms[i_r5])("label", ctx_r0.labels[i_r5]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("form", ctx_r0.forms[i_r5])("fields", step_r4)("model", ctx_r0.model);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isRegistrationStep());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isRegistrationStep());
} }
function ExtensibleDeviceRegistrationStepperComponent_c8y_operation_result_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 13);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r1.message));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
function ExtensibleDeviceRegistrationStepperComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 14);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r3.errorMessage));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
const _c12 = function () { return { edit: true, done: false }; };
const _c13 = function () { return ["m-40", "m-t-16", "m-b-16"]; };
const _c14 = function (a0, a1, a2) { return { cancel: a0, back: a1, next: a2 }; };
const _c15 = function () { return { back: "Fix issue", next: "Close" }; };
function ExtensibleBulkDeviceRegistrationModalComponent_ng_container_7_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "p", 18);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 19);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "a", 20);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelement(10, "i", 21);
    ɵngcc0.ɵɵelementStart(11, "span", 22);
    ɵngcc0.ɵɵtext(12, "Download template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const example_r5 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, example_r5.title), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 7, example_r5.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(8, 9, "Download template"));
    ɵngcc0.ɵɵpropertyInterpolate("download", ɵngcc0.ɵɵpipeBind1(9, 11, "Example bulk registration - template.csv"));
    ɵngcc0.ɵɵproperty("href", example_r5.url, ɵngcc0.ɵɵsanitizeUrl);
} }
const _c16 = function () { return { next: "Upload" }; };
function ExtensibleBulkDeviceRegistrationModalComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "cdk-step", 10);
    ɵngcc0.ɵɵelementStart(2, "div", 11);
    ɵngcc0.ɵɵelementStart(3, "p", 12);
    ɵngcc0.ɵɵtext(4, " Register devices in bulk ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "c8y-form-group", 13);
    ɵngcc0.ɵɵelement(6, "formly-form", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, ExtensibleBulkDeviceRegistrationModalComponent_ng_container_7_div_7_Template, 13, 13, "div", 15);
    ɵngcc0.ɵɵelementStart(8, "c8y-stepper-buttons", 16);
    ɵngcc0.ɵɵlistener("onCancel", function ExtensibleBulkDeviceRegistrationModalComponent_ng_container_7_Template_c8y_stepper_buttons_onCancel_8_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.cancel(); })("onNext", function ExtensibleBulkDeviceRegistrationModalComponent_ng_container_7_Template_c8y_stepper_buttons_onNext_8_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.upload(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("stepControl", ctx_r0.form);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("form", ctx_r0.form)("fields", ctx_r0.template)("model", ctx_r0.model);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.examples);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction0(9, _c3))("disabled", ctx_r0.form.invalid)("pending", ctx_r0.pending)("labels", ɵngcc0.ɵɵpureFunction0(10, _c16));
} }
function ExtensibleBulkDeviceRegistrationModalComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "c8y-operation-result", 23);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "c8y-list-group", 24);
    ɵngcc0.ɵɵelementStart(4, "c8y-li");
    ɵngcc0.ɵɵelement(5, "c8y-li-icon", 25);
    ɵngcc0.ɵɵelementStart(6, "p", 22);
    ɵngcc0.ɵɵtext(7, "File successfully uploaded.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(9, "pre");
    ɵngcc0.ɵɵelementStart(10, "code");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(2, 5, ctx_r1.message));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("icon", "check-circle");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(12, 7, ctx_r1.result));
} }
function ExtensibleBulkDeviceRegistrationModalComponent_ng_template_11_c8y_list_group_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-list-group", 24);
    ɵngcc0.ɵɵelementStart(1, "c8y-li");
    ɵngcc0.ɵɵelement(2, "c8y-li-icon", 28);
    ɵngcc0.ɵɵelementStart(3, "p", 22);
    ɵngcc0.ɵɵtext(4, "Bulk operation failed.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(6, "pre");
    ɵngcc0.ɵɵelementStart(7, "code");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("icon", "ban");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 2, ctx_r9.result));
} }
function ExtensibleBulkDeviceRegistrationModalComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 26);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, ExtensibleBulkDeviceRegistrationModalComponent_ng_template_11_c8y_list_group_2_Template, 10, 4, "c8y-list-group", 27);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 4, ctx_r3.message));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.result);
} }
const _c17 = function () { return { next: true }; };
const _c18 = function (a0) { return { next: a0 }; };
function BulkDeviceRegistrationModalComponent_div_38_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "c8y-operation-result", 23);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.message));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
function BulkDeviceRegistrationModalComponent_ng_template_39_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 24);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r2.message));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
function BulkDeviceRegistrationModalComponent_ng_container_42_c8y_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 26);
    ɵngcc0.ɵɵelementStart(2, "p");
    ɵngcc0.ɵɵtext(3, "All devices processed successfully.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(5, "pre");
    ɵngcc0.ɵɵelementStart(6, "code");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 1, ctx_r6.result));
} }
function BulkDeviceRegistrationModalComponent_ng_container_42_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 27);
    ɵngcc0.ɵɵelementStart(2, "p", 28);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " Failed to process {{ count }} out of {{ total }}. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(5, "pre");
    ɵngcc0.ɵɵelementStart(6, "code");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r8.result == null ? null : ctx_r8.result.numberOfFailed, ctx_r8.result == null ? null : ctx_r8.result.numberOfAll));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 2, ctx_r8.result));
} }
function BulkDeviceRegistrationModalComponent_ng_container_42_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, BulkDeviceRegistrationModalComponent_ng_container_42_c8y_li_1_Template, 9, 3, "c8y-li", 18);
    ɵngcc0.ɵɵtemplate(2, BulkDeviceRegistrationModalComponent_ng_container_42_ng_template_2_Template, 9, 7, "ng-template", null, 25, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(3);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.success)("ngIfElse", _r7);
} }
function BulkDeviceRegistrationModalComponent_ng_template_43_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 29);
    ɵngcc0.ɵɵelementStart(2, "small");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(6, "pre");
    ɵngcc0.ɵɵelementStart(7, "code");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "ban");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 3, ctx_r5.failedResult == null ? null : ctx_r5.failedResult.message));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 5, ctx_r5.failedResult));
} }
function ExtensibleBulkDeviceRegistrationButtonComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function ExtensibleBulkDeviceRegistrationButtonComponent_div_0_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const provider_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.click(provider_r1.contextPath); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const provider_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, provider_r1.name));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, provider_r1.name), " ");
} }
function RegisterDeviceDropdownComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Register device");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "i", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Register device"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", "caret-down");
} }
function RegisterDeviceDropdownComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Register device");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "i", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Device registration disabled"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", "caret-down");
} }
function RegisterDeviceDropdownComponent_ul_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function RegisterDeviceDropdownComponent_ul_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 11);
    ɵngcc0.ɵɵtemplate(1, RegisterDeviceDropdownComponent_ul_5_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r5 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function RegisterDeviceDropdownComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 15);
    ɵngcc0.ɵɵtext(1, "Single registration");
    ɵngcc0.ɵɵelementEnd();
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_li_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵtemplate(1, RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_li_2_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r13 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r13.template);
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_li_1_Template, 2, 0, "li", 13);
    ɵngcc0.ɵɵtemplate(2, RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_li_2_Template, 2, 1, "li", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const single_r10 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", single_r10.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", single_r10);
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 15);
    ɵngcc0.ɵɵtext(1, "Bulk registration");
    ɵngcc0.ɵɵelementEnd();
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_li_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵtemplate(1, RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_li_2_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r18 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yOutlet", item_r18.template);
} }
function RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_li_1_Template, 2, 0, "li", 13);
    ɵngcc0.ɵɵtemplate(2, RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_li_2_Template, 2, 1, "li", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const bulk_r15 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", bulk_r15.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", bulk_r15);
} }
function RegisterDeviceDropdownComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, RegisterDeviceDropdownComponent_ng_template_8_ng_container_0_Template, 3, 2, "ng-container", 12);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtemplate(2, RegisterDeviceDropdownComponent_ng_template_8_ng_container_2_Template, 3, 2, "ng-container", 12);
    ɵngcc0.ɵɵpipe(3, "async");
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r6.single$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r6.bulk$));
} }
class RegisterDeviceService {
    constructor(router, deviceRegService, alertService) {
        this.router = router;
        this.deviceRegService = deviceRegService;
        this.alertService = alertService;
        this._loading = new Subject();
        this._limit = new BehaviorSubject({ isReached: false });
        this._deviceRegistrationRequests = new BehaviorSubject({ data: [] });
        this.deviceRegistrationRequests$ = this._deviceRegistrationRequests.asObservable();
        this.loading$ = this._loading.asObservable();
        this.limit$ = this._limit.asObservable();
        this.deviceRegUrl = '/deviceregistration';
        this.endSubscriptions = new Subject();
    }
    isDeviceRegistration() {
        return get(this.router, 'url') === this.deviceRegUrl;
    }
    internalListUpdate(deviceRequests, pagingObject) {
        let { paging, data } = this._deviceRegistrationRequests.getValue();
        if (pagingObject) {
            paging = pagingObject;
        }
        data = [...data, ...deviceRequests];
        this._deviceRegistrationRequests.next({ data, paging });
    }
    onDeviceBootstrap(bsData) {
        const { id, status } = bsData;
        this._deviceRegistrationRequests.next({
            data: this.updateStatusById(id, status)
        });
    }
    list(pageSize = 100) {
        this._loading.next(true);
        this._deviceRegistrationRequests.next({ data: [], paging: undefined });
        from(this.deviceRegService.list({ pageSize, withTotalPages: true }))
            .pipe(takeUntil(this.endSubscriptions), finalize(() => this.limit()))
            .subscribe(res => {
            const { data, paging } = res;
            this.internalListUpdate(data, paging);
            this._loading.next(false);
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    createMultiple(newDeviceRequests) {
        if (newDeviceRequests && newDeviceRequests.length > 0) {
            this._loading.next(true);
            const newRequests$ = newDeviceRequests.map(element => {
                return from(this.deviceRegService.create(element)
                    .catch((err) => ({ res: err.res, data: Object.assign(Object.assign({}, err.data), { id: element.id }) })));
            });
            const groupedRequests = {
                success: [],
                failed: []
            };
            return forkJoin(newRequests$)
                .pipe(mergeMap(resp => resp.map(el => {
                el.res.ok ? groupedRequests.success.push(el.data) : groupedRequests.failed.push(el.data);
                return groupedRequests;
            })), takeLast(1), finalize(() => {
                this.internalListUpdate(groupedRequests.success);
                this._loading.next(false);
            }));
        }
    }
    remove(id) {
        this._loading.next(true);
        from(this.deviceRegService.delete(id))
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(res => {
            this._deviceRegistrationRequests.next({ data: this.removeDeviceRegistrationRequestById(id) });
            this._loading.next(false);
            this.alertService.success(gettext('Device registration cancelled.'));
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    accept(request) {
        this._loading.next(true);
        const payload = pick(request, ['id', 'securityToken']);
        from(this.deviceRegService.accept(payload))
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(res => {
            this._deviceRegistrationRequests.next({ data: this.updateStatusById(payload.id, DeviceRegistrationStatus.ACCEPTED) });
            this.limit();
            this._loading.next(false);
            this.alertService.success(gettext('Device registration accepted.'));
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    acceptAll() {
        const acceptedDeviceRequests = [];
        const failedDeviceRequests = [];
        this._loading.next(true);
        from(this.deviceRegService.acceptAll())
            .pipe(takeUntil(this.endSubscriptions), map(({ data }) => {
            data.map(deviceRegistrationRequest => {
                if (deviceRegistrationRequest.successful) {
                    acceptedDeviceRequests.push(deviceRegistrationRequest);
                    this.updateStatusById(deviceRegistrationRequest.id, DeviceRegistrationStatus.ACCEPTED);
                }
                else {
                    failedDeviceRequests.push(deviceRegistrationRequest);
                }
            });
            return data;
        }), finalize(() => {
            // update rendered list with successful accepted device registrations
            // see: this.updateStatusById(...)
            this.internalListUpdate([]);
            this.limit();
            this._loading.next(false);
            if (failedDeviceRequests.length > 0) {
                this.alertService.warning(gettext('Could not accept all pending registration requests.'), JSON.stringify({
                    failedDeviceRequests,
                    acceptedDeviceRequests
                }, undefined, 2));
            }
            else {
                this.alertService.success(gettext('Accepted all pending registration requests.'));
            }
        })).subscribe(res => {
            // empty by design
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    limit() {
        from(this.deviceRegService.limit())
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(res => this._limit.next(res.data), err => this.alertService.addServerFailure(err));
    }
    getRequestByStatus(status) {
        return this._deviceRegistrationRequests.getValue().data.filter(req => req.status === status);
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    updateStatusById(id, status) {
        const items = this._deviceRegistrationRequests.getValue().data;
        const matchingElementIndex = items.findIndex(element => element.id === id);
        if (matchingElementIndex >= 0) {
            items[matchingElementIndex].status = status;
        }
        return items;
    }
    removeDeviceRegistrationRequestById(id) {
        const items = this._deviceRegistrationRequests.getValue().data;
        const matchingElementIndex = items.findIndex(element => element.id === id);
        if (matchingElementIndex >= 0) {
            items.splice(matchingElementIndex, 1);
        }
        this._loading.next(false);
        return items;
    }
}
RegisterDeviceService.ɵfac = function RegisterDeviceService_Factory(t) { return new (t || RegisterDeviceService)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.DeviceRegistrationService), ɵngcc0.ɵɵinject(ɵngcc3.AlertService)); };
RegisterDeviceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RegisterDeviceService_Factory() { return new RegisterDeviceService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DeviceRegistrationService), i0.ɵɵinject(i3.AlertService)); }, token: RegisterDeviceService, providedIn: "root" });
RegisterDeviceService.ctorParameters = () => [
    { type: Router },
    { type: DeviceRegistrationService },
    { type: AlertService }
];

class GeneralDeviceRegistrationComponent {
    constructor(tenantUIService, tenantService, registerDeviceService, inventoryService, cd, bsModalRef) {
        this.tenantUIService = tenantUIService;
        this.tenantService = tenantService;
        this.registerDeviceService = registerDeviceService;
        this.inventoryService = inventoryService;
        this.cd = cd;
        this.bsModalRef = bsModalRef;
        this.MANAGEMENT = 'management';
        this.FILTER = {
            withTotalPages: true,
            pageSize: 25
        };
        this.form = new FormGroup({});
        this.model = {
            devicesToCreate: [{}]
        };
        this.options = {
            formState: {
                canLoadTenants: true,
            }
        };
        this.success = [];
        this.failed = [];
        this.fields = [
            {
                type: 'array',
                key: 'devicesToCreate',
                templateOptions: {
                    addText: gettext('Add device'),
                    addTextDataCy: 'add-device'
                },
                fieldArray: {
                    fieldGroup: [{
                            key: 'id',
                            type: 'string',
                            focus: true,
                            templateOptions: {
                                placeholder: '0123ab32fcd',
                                label: gettext('Device ID'),
                                required: true
                            },
                            validators: {
                                unique: {
                                    expression: (control) => {
                                        const found = control.root.get('devicesToCreate').value.filter(el => el.id === control.value);
                                        return found.length === 0;
                                    },
                                    message: () => gettext('Device ID duplicates are not allowed'),
                                },
                            },
                        },
                        {
                            key: 'tenant',
                            type: 'typeahead',
                            hideExpression: (model, formState, field) => {
                                if (!(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants)) {
                                    field.formControl.setValue(null);
                                }
                                return !(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) || false;
                            },
                            defaultValue: { id: this.MANAGEMENT },
                            templateOptions: {
                                label: gettext('Add to tenant'),
                                required: true,
                                c8yForOptions: this.canLoadTenants$().pipe(filter(canLoad => canLoad), switchMap(() => this.getTenants$())),
                                container: 'body',
                                displayProperty: 'id',
                                valueProperties: ['id']
                            },
                            hooks: {
                                onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {
                                    this.options.formState.canLoadTenants = canLoad;
                                    this.cd.detectChanges();
                                }))
                            }
                        },
                        {
                            key: 'group',
                            type: 'typeahead',
                            expressionProperties: {
                                'templateOptions.disabled': (model, formState, field) => {
                                    var _a, _b, _c;
                                    if (formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) {
                                        if (((_a = model === null || model === void 0 ? void 0 : model.tenant) === null || _a === void 0 ? void 0 : _a.id) !== this.MANAGEMENT) {
                                            field.formControl.setValue(null);
                                        }
                                        return !(((_b = model === null || model === void 0 ? void 0 : model.tenant) === null || _b === void 0 ? void 0 : _b.id) === this.MANAGEMENT);
                                    }
                                    (_c = field === null || field === void 0 ? void 0 : field.templateOptions) === null || _c === void 0 ? true : delete _c.description;
                                    return false;
                                }
                            },
                            templateOptions: {
                                disabled: false,
                                label: gettext('Add to group'),
                                description: gettext('You can add device to specific group for management tenant only.'),
                                container: 'body',
                                displayProperty: 'name',
                                valueProperties: ['id'],
                                c8yForOptions: this.getGroups$()
                            },
                            hooks: {
                                onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {
                                    this.options.formState.canLoadTenants = canLoad;
                                    this.cd.detectChanges();
                                }))
                            }
                        }]
                }
            }
        ];
        this.destroy$ = new Subject();
        this.lastCreatedDevices = [];
        this.isLoading$ = this.registerDeviceService.loading$;
    }
    ngAfterViewInit() {
        this.cd.detectChanges();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    create(eventObject) {
        var _a, _b;
        if (((_b = (_a = this.model) === null || _a === void 0 ? void 0 : _a.devicesToCreate) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            this.lastCreatedDevices = [...this.model.devicesToCreate];
            const dataToSend = this.model.devicesToCreate.map((el) => {
                const { id, tenant, group } = el;
                let data = { id };
                if (tenant === null || tenant === void 0 ? void 0 : tenant.id) {
                    data = Object.assign(Object.assign({}, data), { tenantId: tenant.id });
                }
                if (group === null || group === void 0 ? void 0 : group.id) {
                    data = Object.assign(Object.assign({}, data), { groupId: group.id });
                }
                return data;
            });
            this.registerDeviceService.createMultiple(dataToSend)
                .pipe(takeUntil(this.destroy$))
                .subscribe(requests => {
                this.success = requests.success;
                this.failed = requests.failed;
                if (eventObject) {
                    eventObject.stepper.next();
                }
            });
        }
    }
    fixErrors(event, failedRequests) {
        if (failedRequests && failedRequests.length > 0) {
            this.options.resetModel({ devicesToCreate: [...this.lastCreatedDevices.filter(el => failedRequests.map(data => data.id).includes(el.id))] });
            this.cd.detectChanges();
        }
        event === null || event === void 0 ? void 0 : event.stepper.previous();
    }
    canLoadTenants$() {
        return defer(() => from(this.tenantUIService.isManagementTenant())).pipe(shareReplay(1));
    }
    getTenants$() {
        return defer(() => from(this.tenantService.list(this.FILTER))).pipe(shareReplay(1));
    }
    getGroups$() {
        return defer(() => from(this.inventoryService.listQuery({ __filter: { __has: 'c8y_IsDeviceGroup' }, __orderby: [{ name: 1 }] }, Object.assign({}, this.FILTER)))).pipe(shareReplay(1));
    }
}
GeneralDeviceRegistrationComponent.ɵfac = function GeneralDeviceRegistrationComponent_Factory(t) { return new (t || GeneralDeviceRegistrationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantUiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TenantService), ɵngcc0.ɵɵdirectiveInject(RegisterDeviceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalRef)); };
GeneralDeviceRegistrationComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GeneralDeviceRegistrationComponent, selectors: [["c8y-general-device-registration"]], decls: 25, vars: 30, consts: [[3, "headerClasses", "customFooter"], ["c8y-modal-title", ""], [3, "c8yIcon"], ["linear", "", 3, "hideStepProgress"], [3, "stepControl"], [1, "p-b-16"], ["translate", "", 1, "p-l-24", "p-r-24", "p-t-16", "p-b-16", "m-b-0", "sticky-top", "separator-bottom", "text-medium", "text-16", "text-center", "bg-component"], [1, "formly-group-array-cols", "d-block", "p-24", "min-height-fit", 3, "form", "fields", "model", "options"], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "disabled", "pending", "onNext", "onCancel"], ["state", "final"], [1, "p-24", "min-height-fit"], ["type", "success", "class", "lead", 3, "text", "size", "vertical", 4, "ngIf"], ["type", "error", "class", "lead", 3, "text", "size", "vertical", 4, "ngIf"], [4, "ngIf"], ["class", "p-l-24 p-r-24 text-center", 4, "ngIf"], ["class", "m-b-8 p-l-24 p-r-24", "translate", "", 4, "ngIf"], [1, "separator-top", "m-t-16"], [4, "ngFor", "ngForOf"], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "labels", "onCustom", "onBack"], ["type", "success", 1, "lead", 3, "text", "size", "vertical"], ["type", "error", 1, "lead", 3, "text", "size", "vertical"], [1, "p-l-24", "p-r-24", "text-center"], ["translate", "", 1, "p-b-16", "text-danger", 3, "translateParams"], ["translate", "", 1, "m-b-8", "p-l-24", "p-r-24"], [1, "text-danger", 3, "icon"], [1, "text-success", 3, "icon"]], template: function GeneralDeviceRegistrationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵelementContainerStart(1, 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "h4");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(6, "c8y-stepper", 3);
        ɵngcc0.ɵɵelementStart(7, "cdk-step", 4);
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵelementStart(9, "p", 6);
        ɵngcc0.ɵɵtext(10, " Register a general device ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "formly-form", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "c8y-stepper-buttons", 8);
        ɵngcc0.ɵɵlistener("onNext", function GeneralDeviceRegistrationComponent_Template_c8y_stepper_buttons_onNext_12_listener($event) { return ctx.create($event); })("onCancel", function GeneralDeviceRegistrationComponent_Template_c8y_stepper_buttons_onCancel_12_listener() { return ctx.bsModalRef.hide(); });
        ɵngcc0.ɵɵpipe(13, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "cdk-step", 9);
        ɵngcc0.ɵɵelementStart(15, "div", 10);
        ɵngcc0.ɵɵtemplate(16, GeneralDeviceRegistrationComponent_c8y_operation_result_16_Template, 2, 5, "c8y-operation-result", 11);
        ɵngcc0.ɵɵtemplate(17, GeneralDeviceRegistrationComponent_c8y_operation_result_17_Template, 2, 5, "c8y-operation-result", 12);
        ɵngcc0.ɵɵtemplate(18, GeneralDeviceRegistrationComponent_ng_container_18_Template, 3, 2, "ng-container", 13);
        ɵngcc0.ɵɵtemplate(19, GeneralDeviceRegistrationComponent_div_19_Template, 5, 9, "div", 14);
        ɵngcc0.ɵɵtemplate(20, GeneralDeviceRegistrationComponent_div_20_Template, 2, 0, "div", 15);
        ɵngcc0.ɵɵelementStart(21, "c8y-list-group", 16);
        ɵngcc0.ɵɵtemplate(22, GeneralDeviceRegistrationComponent_c8y_li_22_Template, 12, 8, "c8y-li", 17);
        ɵngcc0.ɵɵtemplate(23, GeneralDeviceRegistrationComponent_c8y_li_23_Template, 3, 2, "c8y-li", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "c8y-stepper-buttons", 18);
        ɵngcc0.ɵɵlistener("onCustom", function GeneralDeviceRegistrationComponent_Template_c8y_stepper_buttons_onCustom_24_listener() { return ctx.bsModalRef.hide(); })("onBack", function GeneralDeviceRegistrationComponent_Template_c8y_stepper_buttons_onBack_24_listener($event) { return ctx.fixErrors($event, ctx.failed); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("headerClasses", "dialog-header")("customFooter", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "c8y-device-connect");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 22, "Register devices"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hideStepProgress", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("stepControl", ctx.form);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("form", ctx.form)("fields", ctx.fields)("model", ctx.model)("options", ctx.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction0(26, _c3))("disabled", !(ctx.form == null ? null : ctx.form.valid))("pending", ɵngcc0.ɵɵpipeBind1(13, 24, ctx.isLoading$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.success.length === 1 && ctx.failed.length === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.success.length === 0 && ctx.failed.length === 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.success.length > 1 || ctx.failed.length > 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.success.length > 0 && ctx.failed.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.success.length > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.failed);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.success);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction1(27, _c4, ctx.failed.length > 0))("labels", ɵngcc0.ɵɵpureFunction0(29, _c5));
    } }, directives: [ɵngcc3.ModalComponent, ɵngcc3.IconDirective, ɵngcc3.C8yStepper, ɵngcc5.CdkStep, ɵngcc3.C8yTranslateDirective, ɵngcc6.FormlyForm, ɵngcc3.C8yStepperButtons, ɵngcc7.NgIf, ɵngcc3.ListGroupComponent, ɵngcc7.NgForOf, ɵngcc3.OperationResultComponent, ɵngcc3.ListItemComponent, ɵngcc3.ListItemIconComponent, ɵngcc3.ListItemCollapseComponent], pipes: [ɵngcc3.C8yTranslatePipe, ɵngcc7.AsyncPipe, ɵngcc7.JsonPipe], encapsulation: 2, changeDetection: 0 });
GeneralDeviceRegistrationComponent.ctorParameters = () => [
    { type: TenantUiService },
    { type: TenantService },
    { type: RegisterDeviceService },
    { type: InventoryService },
    { type: ChangeDetectorRef },
    { type: BsModalRef }
];
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "canLoadTenants$", null);
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "getTenants$", null);
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "getGroups$", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegisterDeviceService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.DeviceRegistrationService }, { type: ɵngcc3.AlertService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GeneralDeviceRegistrationComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-general-device-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Register devices' | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear>\n    <cdk-step [stepControl]=\"form\">\n      <div class=\"p-b-16\">\n        <p\n          class=\"\n            p-l-24 p-r-24 p-t-16 p-b-16\n            m-b-0\n            sticky-top\n            separator-bottom\n            text-medium text-16 text-center\n            bg-component\n          \"\n          translate\n        >\n          Register a general device\n        </p>\n        <formly-form\n          [form]=\"form\"\n          [fields]=\"fields\"\n          [model]=\"model\"\n          [options]=\"options\"\n          class=\"formly-group-array-cols d-block p-24 min-height-fit\"\n        ></formly-form>\n      </div>\n      <c8y-stepper-buttons\n        (onNext)=\"create($event)\"\n        (onCancel)=\"bsModalRef.hide()\"\n        [showButtons]=\"{ cancel: true, next: true }\"\n        [disabled]=\"!form?.valid\"\n        [pending]=\"isLoading$ | async\"\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step state=\"final\">\n      <div class=\"p-24 min-height-fit\">\n        <c8y-operation-result\n          *ngIf=\"success.length === 1 && failed.length === 0\"\n          text=\"{{ 'Device registered' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"success\"\n          class=\"lead\"\n        ></c8y-operation-result>\n        <c8y-operation-result\n          *ngIf=\"success.length === 0 && failed.length === 1\"\n          text=\"{{ 'Failed to register device' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"error\"\n          class=\"lead\"\n        ></c8y-operation-result>\n\n        <ng-container *ngIf=\"success.length > 1 || failed.length > 1\">\n          <c8y-operation-result\n            *ngIf=\"failed.length === 0\"\n            [text]=\"\n              '{{ successfulDevicesCount }} devices registered'\n                | translate: { successfulDevicesCount: success.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngIf=\"success.length === 0\"\n            [text]=\"\n              '{{ failedDevicesCount }} devices failed to register'\n                | translate: { failedDevicesCount: failed.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </ng-container>\n\n        <div *ngIf=\"success.length > 0 && failed.length > 0\" class=\"p-l-24 p-r-24 text-center\">\n          <c8y-operation-result\n            text=\"{{ 'Several devices failed to register' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <p\n            ngNonBindable\n            translate\n            [translateParams]=\"{ count: failed.length, total: failed.length + success.length }\"\n            class=\"p-b-16 text-danger\"\n          >\n            Registration failed for {{ count }} devices out of {{ total }}.\n          </p>\n        </div>\n\n        <div class=\"m-b-8 p-l-24 p-r-24\" *ngIf=\"success.length > 0\" translate>\n          Turn on the registered device(s) and wait for connection(s) to be established. Once a\n          device is connected, its status will change to \"Pending acceptance\". You will need to\n          approve it by clicking on the \"Accept\" button.\n        </div>\n\n        <c8y-list-group class=\"separator-top m-t-16\">\n          <c8y-li *ngFor=\"let fail of failed\">\n            <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n            <p>{{ fail?.id }}</p>\n            <small>{{ fail?.message | translate }}</small>\n            <c8y-li-collapse>\n              <pre><code>{{ fail?.details | json }}</code></pre>\n            </c8y-li-collapse>\n          </c8y-li>\n\n          <c8y-li *ngFor=\"let s of success\">\n            <c8y-li-icon class=\"text-success\" [icon]=\"'check-circle'\"></c8y-li-icon>\n            {{ s?.id }}\n          </c8y-li>\n        </c8y-list-group>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        (onCustom)=\"bsModalRef.hide()\"\n        (onBack)=\"fixErrors($event, failed)\"\n        [showButtons]=\"{ back: failed.length > 0, custom: true }\"\n        [labels]=\"{ back: 'Fix errors', custom: 'Close' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc3.TenantUiService }, { type: ɵngcc2.TenantService }, { type: RegisterDeviceService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc4.BsModalRef }]; }, null); })();

class GeneralDeviceRegistrationButtonComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    open() {
        this.modalService.show(GeneralDeviceRegistrationComponent, {
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
GeneralDeviceRegistrationButtonComponent.ɵfac = function GeneralDeviceRegistrationButtonComponent_Factory(t) { return new (t || GeneralDeviceRegistrationButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalService)); };
GeneralDeviceRegistrationButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GeneralDeviceRegistrationButtonComponent, selectors: [["c8y-general-device-registration-button"]], decls: 4, vars: 3, consts: [[3, "click"], ["c8yIcon", "c8y-device-connect"]], template: function GeneralDeviceRegistrationButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function GeneralDeviceRegistrationButtonComponent_Template_button_click_0_listener() { return ctx.open(); });
        ɵngcc0.ɵɵelement(1, "i", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "General"), " ");
    } }, directives: [ɵngcc3.IconDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
GeneralDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GeneralDeviceRegistrationButtonComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-general-device-registration-button',
                template: "<button (click)=\"open()\"><i c8yIcon=\"c8y-device-connect\"></i> {{ 'General' | translate }} </button>\n"
            }]
    }], function () { return [{ type: ɵngcc4.BsModalService }]; }, null); })();

class DeviceRegistrationViewComponent {
    constructor(registerDeviceService, bootstrapRealtimeService, tenantUiService, modalService, translateService, optionsService) {
        this.registerDeviceService = registerDeviceService;
        this.bootstrapRealtimeService = bootstrapRealtimeService;
        this.tenantUiService = tenantUiService;
        this.modalService = modalService;
        this.translateService = translateService;
        this.optionsService = optionsService;
        this.requireSecurityToken = false;
        this.isManagementTenant = false;
        this.isLoading = false;
        this.gridOrList = 'interact-grid';
        this.status = DeviceRegistrationStatus;
        this.statusProps = {
            [DeviceRegistrationStatus.WAITING_FOR_CONNECTION]: {
                label: gettext('Waiting for connection'),
                icon: 'unlink',
                cls: 'text-danger'
            },
            [DeviceRegistrationStatus.PENDING_ACCEPTANCE]: {
                label: gettext('Pending acceptance'),
                icon: 'circle',
                cls: 'text-info'
            },
            [DeviceRegistrationStatus.ACCEPTED]: {
                label: gettext('Accepted'),
                icon: 'check-circle',
                cls: 'text-success'
            },
            [DeviceRegistrationStatus.BLOCKED]: {
                label: gettext('Blocked'),
                icon: 'remove',
                cls: 'text-danger'
            }
        };
        this.unsubscribe$ = new Subject();
        this._securityTokenPolicy = new BehaviorSubject(DeviceRegistrationSecurityMode.OPTIONAL);
    }
    ngOnInit() {
        this.loadAll();
        this.setIsManagementTenant();
        this.setRequireSecurityToken();
        this.deviceRequests$ = this.registerDeviceService.deviceRegistrationRequests$.pipe(map(req => ({
            data: sortBy(req.data, [
                ({ status }) => (status === DeviceRegistrationStatus.PENDING_ACCEPTANCE ? 0 : 1),
                '-creationTime'
            ]),
            paging: req.paging
        })));
        this.limit$ = this.registerDeviceService.limit$;
        this.limitReachedInfo$ = this.limit$.pipe(filter(deviceRegistrationLimit => deviceRegistrationLimit.isReached), switchMap(({ limit }) => this.translateService.stream(gettext('You reached the limit of {{ maxDevices }} devices. No more devices can be registered.'), { maxDevices: limit })));
        this.registerDeviceService.loading$
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(value => (this.isLoading = value));
        this.bootstrapRealtimeService
            .onUpdate$()
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe((bootstrap) => {
            this.registerDeviceService.onDeviceBootstrap(bootstrap);
        });
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    updateList(data) {
        this.registerDeviceService.internalListUpdate(data);
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const confirmed = yield this.modalService.confirm(gettext('Cancel device registration'), this.translateService.instant(gettext('You are about to cancel device registration for ID "{{id}}". Do you want to proceed?'), { id }), Status.DANGER, {
                ok: gettext('Cancel registration'),
                cancel: gettext('Close')
            });
            if (confirmed) {
                this.registerDeviceService.remove(id);
            }
        });
    }
    accept(request) {
        this.registerDeviceService.accept(request);
    }
    acceptAll() {
        this.registerDeviceService.acceptAll();
    }
    canAcceptAll() {
        const pendingRequests = this.registerDeviceService.getRequestByStatus(DeviceRegistrationStatus.PENDING_ACCEPTANCE);
        return !(pendingRequests.length > 0 && !this.requireSecurityToken);
    }
    loadAll() {
        this.registerDeviceService.list();
    }
    displayMode(listClass) {
        this.gridOrList = listClass;
    }
    setRequireSecurityToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const mode = yield this.optionsService.getTenantOption('device-registration', 'security-token.policy', DeviceRegistrationSecurityMode.OPTIONAL);
            this._securityTokenPolicy.next(mode);
            this.requireSecurityToken = mode === DeviceRegistrationSecurityMode.REQUIRED;
        });
    }
    setIsManagementTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isManagementTenant = yield this.tenantUiService.isManagementTenant();
        });
    }
    shouldShowSecurityTokenInput(data) {
        return (data &&
            data.status === DeviceRegistrationStatus.PENDING_ACCEPTANCE &&
            this.showTokenInputBasedOnSecurityMode());
    }
    showTokenInputBasedOnSecurityMode() {
        return this._securityTokenPolicy.getValue() !== DeviceRegistrationSecurityMode.IGNORED;
    }
}
DeviceRegistrationViewComponent.ɵfac = function DeviceRegistrationViewComponent_Factory(t) { return new (t || DeviceRegistrationViewComponent)(ɵngcc0.ɵɵdirectiveInject(RegisterDeviceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DeviceBootstrapRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantUiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OptionsService)); };
DeviceRegistrationViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceRegistrationViewComponent, selectors: [["c8y-device-registration-view"]], decls: 2, vars: 3, consts: [[4, "ngIf"], ["itemClass", "navbar-form hidden-xs", 3, "placement"], [3, "onListClassChange"], [3, "placement", "priority"], ["class", "btn btn-link", 3, "title", "disabled", "click", 4, "c8yIfAllowed"], [1, "btn", "btn-link", 3, "title", "disabled", "click"], [3, "c8yIcon", "ngClass"], [3, "placement", 4, "c8yIfAllowed"], ["src", "/users-guide/device-management/#connecting-devices"], [4, "ngIf", "ngIfElse"], ["noData", ""], [3, "c8yIcon"], [3, "placement"], [1, "card-group", 3, "ngClass"], ["class", "page-sticky-header hidden-xs", 4, "ngIf"], ["class", "col-xs-12 col-sm-6 col-md-4 col-lg-3", 4, "ngIf"], [4, "ngFor", "ngForOf"], [3, "paging", "hidden", "onLoad"], [1, "page-sticky-header", "hidden-xs"], [1, "flex-row"], [1, "card-header", "p-l-40"], ["translate", ""], [1, "card-block", "card-column-30", "p-l-0", "m-l-8"], ["class", "card-block card-column-40 p-0", 4, "ngIf"], [1, "card-footer", "card-column-40"], ["class", "d-contents", 4, "ngIf", "ngIfElse"], ["noManagement", ""], [1, "card-actions-group", 2, "min-width", "176px"], [1, "btn", "btn-xs", "invisible"], [1, "card-block", "card-column-40", "p-0"], ["placement", "right", "container", "body", "triggers", "click focus", 1, "btn", "btn-clean", 3, "popover", "outsideClick"], [1, "text-info", 3, "c8yIcon"], [1, "d-contents"], [1, "card-column-50"], [1, "card-column-30"], [1, "card-column-20"], [1, "col-xs-12", "col-sm-6", "col-md-4", "col-lg-3"], ["role", "alert", 1, "alert", "alert-warning", "center-block"], [1, "card"], [1, "card-header", "separator"], [1, "card-icon"], [1, "card-title", "text-truncate"], [1, "card-block", "text-center", "card-column-30"], ["translate", "", 1, "text-label-small"], ["c8yIcon", "refresh", "class", "icon-spin text-primary", 4, "ngIf"], [4, "c8yIfAllowed"], [1, "card-footer", "separator", "text-center", "card-column-40"], ["c8yIcon", "refresh", 1, "icon-spin", "text-primary"], ["class", "card-block text-center card-column-40 p-t-0 p-b-0", 4, "ngIf"], [1, "card-actions-group", "flex-item-v-center", 2, "min-width", "176px"], [1, "btn", "btn-danger", "btn-xs", 3, "title", "disabled", "click"], ["class", "btn btn-primary btn-xs", 3, "title", "disabled", "click", 4, "ngIf"], [1, "card-block", "text-center", "card-column-40", "p-t-0", "p-b-0"], ["class", "text-label-small", "translate", "", 4, "ngIf"], ["type", "text", 1, "form-control", 3, "ngModel", "placeholder", "required", "ngModelChange"], [1, "btn", "btn-primary", "btn-xs", 3, "title", "disabled", "click"], ["class", "d-contents", 4, "ngIf"], ["translate", "", 1, "text-label-small", "m-l-4", "m-r-4"], [1, "c8y-empty-state", "m-t-40", "text-center"], [1, "c8y-icon", "c8y-icon-device-connect", "c8y-icon-duocolor"], ["limitNotReached", ""], ["translate", "", 4, "c8yIfAllowed"]], template: function DeviceRegistrationViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DeviceRegistrationViewComponent_ng_container_0_Template, 10, 9, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.deviceRequests$));
    } }, directives: function () { return [ɵngcc7.NgIf, ɵngcc3.TitleComponent, ɵngcc3.ActionBarItemComponent, ɵngcc3.ɵbh, ɵngcc3.IfAllowedDirective, ɵngcc3.IconDirective, ɵngcc7.NgClass, ɵngcc3.HelpComponent, RegisterDeviceDropdownComponent, ɵngcc7.NgForOf, ɵngcc3.LoadMoreComponent, ɵngcc3.C8yTranslateDirective, ɵngcc9.PopoverDirective, ɵngcc10.DefaultValueAccessor, ɵngcc3.RequiredInputPlaceholderDirective, ɵngcc10.NgControlStatus, ɵngcc10.NgModel, ɵngcc10.RequiredValidator]; }, pipes: function () { return [ɵngcc7.AsyncPipe, ɵngcc3.C8yTranslatePipe, ɵngcc3.DatePipe]; }, encapsulation: 2 });
DeviceRegistrationViewComponent.ctorParameters = () => [
    { type: RegisterDeviceService },
    { type: DeviceBootstrapRealtimeService },
    { type: TenantUiService },
    { type: ModalService },
    { type: TranslateService },
    { type: OptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceRegistrationViewComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-registration-view',
                template: "<ng-container *ngIf=\"deviceRequests$ | async as deviceRequestList\">\n  <c8y-title>\n    {{ 'Device registration' | translate }}\n    <small *ngIf=\"deviceRequestList.data.length === 1\">1 {{ 'new device' | translate }}</small>\n    <small *ngIf=\"deviceRequestList.data.length > 1\">\n      {{ deviceRequestList.data.length }} {{ 'new devices' | translate }}\n    </small>\n  </c8y-title>\n\n  <c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n    <c8y-list-display-switch (onListClassChange)=\"displayMode($event)\"></c8y-list-display-switch>\n  </c8y-action-bar-item>\n\n  <ng-container *ngIf=\"limit$ | async as limitStatus\">\n    <c8y-action-bar-item [placement]=\"'right'\" [priority]=\"10\">\n      <button\n        *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\"\n        class=\"btn btn-link\"\n        title=\"{{ 'Accept all' | translate }}\"\n        (click)=\"acceptAll()\"\n        [disabled]=\"canAcceptAll() || limitStatus?.isReached\"\n      >\n        <i [c8yIcon]=\"'check'\"></i>\n        {{ 'Accept all' | translate }}\n      </button>\n    </c8y-action-bar-item>\n\n    <c8y-action-bar-item [placement]=\"'right'\" [priority]=\"9\">\n      <button\n        class=\"btn btn-link\"\n        title=\"{{ 'Reload' | translate }}\"\n        (click)=\"loadAll()\"\n        [disabled]=\"isLoading\"\n      >\n        <i [c8yIcon]=\"'refresh'\" [ngClass]=\"{ 'icon-spin': isLoading }\"></i>\n        {{ 'Reload' | translate }}\n      </button>\n    </c8y-action-bar-item>\n\n    <c8y-action-bar-item [placement]=\"'right'\" *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\">\n      <c8y-register-device-dropdown></c8y-register-device-dropdown>\n    </c8y-action-bar-item>\n\n    <c8y-help src=\"/users-guide/device-management/#connecting-devices\"></c8y-help>\n\n    <ng-container *ngIf=\"deviceRequestList.data.length > 0; else noData\">\n      <div class=\"card-group\" [ngClass]=\"gridOrList\">\n        <!-- START interact-list sticky header START -->\n        <div *ngIf=\"gridOrList === 'interact-list'\" class=\"page-sticky-header hidden-xs\">\n          <div class=\"flex-row\">\n            <div class=\"card-header p-l-40\">\n              <p translate>Device</p>\n            </div>\n            <div class=\"card-block card-column-30 p-l-0 m-l-8\">\n              <p translate>Status</p>\n            </div>\n            <div class=\"card-block card-column-40 p-0\" *ngIf=\"showTokenInputBasedOnSecurityMode()\">\n              <p translate>Security token</p>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{\n                  'Security token is required if the connected device uses it.' | translate\n                }}\"\n                placement=\"right\"\n                container=\"body\"\n                triggers=\"click focus\"\n                [outsideClick]=\"true\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </div>\n            <div class=\"card-footer card-column-40\">\n              <div class=\"d-contents\" *ngIf=\"isManagementTenant; else noManagement\">\n                <div class=\"card-column-50\">\n                  {{ 'Created' | translate }}\n                </div>\n                <div class=\"card-column-30\">\n                  {{ 'By`user`' | translate }}\n                </div>\n                <div class=\"card-column-20\">\n                  {{ 'Tenant ID' | translate }}\n                </div>\n              </div>\n              <ng-template #noManagement>\n                <div class=\"d-contents\">\n                  <div class=\"card-column-50\">\n                    {{ 'Created' | translate }}\n                  </div>\n                  <div class=\"card-column-50\">\n                    {{ 'By`user`' | translate }}\n                  </div>\n                </div>\n              </ng-template>\n            </div>\n            <div class=\"card-actions-group\" style=\"min-width: 176px\">\n              <div class=\"btn btn-xs invisible\">\n                <!--EMPTY by design-->\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- END interact-list sticky header END -->\n\n        <div *ngIf=\"limitStatus?.isReached\" class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n          <p class=\"alert alert-warning center-block\" role=\"alert\">\n            <strong>\n              {{ limitReachedInfo$ | async }}\n            </strong>\n            <br />\n            <span translate>Please contact your platform administrator.</span>\n          </p>\n        </div>\n\n        <ng-container *ngFor=\"let singleRequest of deviceRequestList.data\">\n          <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n            <div class=\"card\">\n              <div class=\"card-header separator\">\n                <div class=\"card-icon\">\n                  <i\n                    [c8yIcon]=\"statusProps[singleRequest.status].icon\"\n                    [class]=\"statusProps[singleRequest.status].cls\"\n                  ></i>\n                </div>\n                <p class=\"card-title text-truncate\">{{ singleRequest.id }}</p>\n              </div>\n\n              <div class=\"card-block text-center card-column-30\">\n                <span class=\"text-label-small\" translate>Status</span>\n                <p>\n                  <i\n                    *ngIf=\"singleRequest.status === status.WAITING_FOR_CONNECTION\"\n                    c8yIcon=\"refresh\"\n                    class=\"icon-spin text-primary\"\n                  ></i>\n                  {{ statusProps[singleRequest.status].label | translate }}\n                </p>\n              </div>\n\n              <ng-container *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\">\n                <div\n                  class=\"card-block text-center card-column-40 p-t-0 p-b-0\"\n                  *ngIf=\"showTokenInputBasedOnSecurityMode()\"\n                >\n                  <ng-container *ngIf=\"shouldShowSecurityTokenInput(singleRequest)\">\n                    <span *ngIf=\"gridOrList !== 'interact-list'\" class=\"text-label-small\" translate>\n                      Security token\n                    </span>\n                    <input\n                      [(ngModel)]=\"singleRequest.securityToken\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'A1e3gh5ds' }\"\n                      [required]=\"requireSecurityToken\"\n                    />\n                  </ng-container>\n                </div>\n\n                <div class=\"card-actions-group flex-item-v-center\" style=\"min-width: 176px\">\n                  <button\n                    class=\"btn btn-danger btn-xs\"\n                    title=\"{{ 'Remove' | translate }}\"\n                    (click)=\"delete(singleRequest.id)\"\n                    [disabled]=\"isLoading\"\n                  >\n                    {{ 'Remove' | translate }}\n                  </button>\n                  <button\n                    class=\"btn btn-primary btn-xs\"\n                    title=\"{{ 'Accept' | translate }}\"\n                    (click)=\"accept(singleRequest)\"\n                    *ngIf=\"singleRequest.status === status.PENDING_ACCEPTANCE\"\n                    [disabled]=\"\n                      isLoading ||\n                      limitStatus?.isReached ||\n                      (!singleRequest.securityToken && requireSecurityToken)\n                    \"\n                  >\n                    {{ 'Accept' | translate }}\n                  </button>\n                </div>\n              </ng-container>\n\n              <div class=\"card-footer separator text-center card-column-40\">\n                <small *ngIf=\"isManagementTenant; else noManagement\" class=\"d-contents\">\n                  <div class=\"d-contents\" *ngIf=\"singleRequest.creationTime && singleRequest.owner\">\n                    <span class=\"text-label-small\" translate>Created on`date`</span>\n                    <span class=\"card-column-50\">\n                      {{ singleRequest.creationTime | c8yDate }}\n                    </span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>by`user`</span>\n                    <span class=\"card-column-30\">{{ singleRequest.owner }}</span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>in`tenant`</span>\n                    <span class=\"card-column-20\">{{ singleRequest.tenantId }}</span>\n                  </div>\n                  <div\n                    class=\"d-contents\"\n                    *ngIf=\"!singleRequest.creationTime || !singleRequest.owner\"\n                  >\n                    <div class=\"card-column-50\"></div>\n                    <div class=\"card-column-30\"></div>\n                    <span class=\"text-label-small\" translate>Created in`tenant`</span>\n                    <div class=\"card-column-20\">\n                      <span>\n                        {{ singleRequest.tenantId }}\n                      </span>\n                    </div>\n                  </div>\n                </small>\n                <ng-template #noManagement>\n                  <small class=\"d-contents\">\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>Created on`date`</span>\n                    <span class=\"card-column-50\">\n                      {{ singleRequest.creationTime | c8yDate }}\n                    </span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>by`user`</span>\n                    <span class=\"card-column-50\">{{ singleRequest.owner }}</span>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <c8y-load-more\n        [paging]=\"deviceRequestList.paging\"\n        [hidden]=\"true\"\n        (onLoad)=\"updateList($event)\"\n      ></c8y-load-more>\n    </ng-container>\n\n    <ng-template #noData>\n      <div class=\"c8y-empty-state m-t-40 text-center\">\n        <h1 class=\"c8y-icon c8y-icon-device-connect c8y-icon-duocolor\"></h1>\n        <ng-container *ngIf=\"limitStatus?.isReached; else limitNotReached\">\n          <h3>\n            {{ limitReachedInfo$ | async }}\n          </h3>\n          <p translate>Please contact your platform administrator.</p>\n        </ng-container>\n        <ng-template #limitNotReached>\n          <h3 translate>No pending registrations to display.</h3>\n          <p *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\" translate>\n            Use the \"Register device\" dropdown in the top right corner.\n          </p>\n        </ng-template>\n      </div>\n    </ng-template>\n  </ng-container>\n</ng-container>\n"
            }]
    }], function () { return [{ type: RegisterDeviceService }, { type: ɵngcc3.DeviceBootstrapRealtimeService }, { type: ɵngcc3.TenantUiService }, { type: ɵngcc3.ModalService }, { type: ɵngcc8.TranslateService }, { type: ɵngcc3.OptionsService }]; }, null); })();

class RegisterDeviceNavigationFactory {
    constructor(permissions) {
        this.permissions = permissions;
    }
    get() {
        const userHasPermission = this.permissions.hasAnyRole([
            'ROLE_DEVICE_CONTROL_ADMIN',
            'ROLE_DEVICE_CONTROL_READ'
        ]);
        const nav = [];
        if (userHasPermission) {
            nav.push(new NavigatorNode({
                label: gettext('Registration'),
                icon: 'c8y-device-connect',
                path: '/deviceregistration',
                parent: gettext('Devices'),
                preventDuplicates: true,
                priority: 3000
            }));
        }
        return nav;
    }
}
RegisterDeviceNavigationFactory.ɵfac = function RegisterDeviceNavigationFactory_Factory(t) { return new (t || RegisterDeviceNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc3.Permissions)); };
RegisterDeviceNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RegisterDeviceNavigationFactory, factory: RegisterDeviceNavigationFactory.ɵfac });
RegisterDeviceNavigationFactory.ctorParameters = () => [
    { type: Permissions }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegisterDeviceNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.Permissions }]; }, null); })();

class BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService) {
        this.applicationService = applicationService;
        this.stateService = stateService;
    }
    getMetadataUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/metadata`;
    }
    getServiceBaseUrl(contextPath) {
        if (!contextPath || contextPath.length === 0) {
            throw new Error(gettext('The URL of the microservice is misconfigured. A context path is missing.'));
        }
        return `/service/${contextPath}/deviceRegistration`;
    }
    getDeviceRegistrationProviders(bulk) {
        return __awaiter(this, void 0, void 0, function* () {
            let providers = [];
            const microservices = yield this.listMicroservicesByUser();
            if (microservices && microservices.length > 0) {
                providers = this.getProvidersFromManifestExtensions(microservices, bulk).concat(this.getProvidersFromExtensions(microservices, bulk));
            }
            return providers;
        });
    }
    listMicroservicesByUser() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser((_c = (_b = (_a = this.stateService) === null || _a === void 0 ? void 0 : _a.currentUser) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.userName, {
                dropOverwrittenApps: true,
                noPaging: true,
                pageSize: 100,
                withTotalPages: true
            });
            return data === null || data === void 0 ? void 0 : data.filter(({ type }) => type === ApplicationType.MICROSERVICE);
        });
    }
    getProvidersFromManifestExtensions(applications, bulk) {
        return flatMap(applications, application => {
            var _a, _b;
            return (_b = (_a = application === null || application === void 0 ? void 0 : application.manifest) === null || _a === void 0 ? void 0 : _a.extensions) === null || _b === void 0 ? void 0 : _b.map(extension => {
                return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    getProvidersFromExtensions(applications, bulk) {
        return flatMap(applications, application => {
            var _a;
            return (_a = application.extensions) === null || _a === void 0 ? void 0 : _a.map(extension => {
                return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    appSupportingExtensibleDeviceRegistrationForm(extension, bulk) {
        if (bulk) {
            return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleBulkDeviceRegistration';
        }
        else {
            return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleDeviceRegistration';
        }
    }
}

class ExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getSchema(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.fetch(this.getMetadataUrl(contextPath), { params: { lang: this.stateService.state.lang } });
            const data = yield response.json();
            if (!data || !data.c8y_DeviceRegistration) {
                throw new Error(gettext('The response of the microservice is incomplete. The device registration information is missing.'));
            }
            return data.c8y_DeviceRegistration;
        });
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(false);
    }
    registerDevice(contextPath, model) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = JSON.stringify(model);
            const headers = { 'content-type': 'application/json', accept: 'application/json' };
            const res = yield this.client.fetch(this.getServiceBaseUrl(contextPath), { method, body, headers });
            const data = yield res.json();
            return { res, data };
        });
    }
}
ExtensibleDeviceRegistrationService.ɵfac = function ExtensibleDeviceRegistrationService_Factory(t) { return new (t || ExtensibleDeviceRegistrationService)(ɵngcc0.ɵɵinject(ɵngcc2.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc3.AppStateService), ɵngcc0.ɵɵinject(ɵngcc2.FetchClient)); };
ExtensibleDeviceRegistrationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ExtensibleDeviceRegistrationService, factory: ExtensibleDeviceRegistrationService.ɵfac });
ExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExtensibleDeviceRegistrationService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.ApplicationService }, { type: ɵngcc3.AppStateService }, { type: ɵngcc2.FetchClient }]; }, null); })();

class ExtensibleDeviceRegistrationModalComponent {
    constructor(bsModalRef, jsonschema, registrationService) {
        this.bsModalRef = bsModalRef;
        this.jsonschema = jsonschema;
        this.registrationService = registrationService;
        this.labels = [];
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { title, pages } = yield this.registrationService.getSchema(this.contextPath)
                .catch(error => {
                this.loadingErrorMessage = (error === null || error === void 0 ? void 0 : error.message) || gettext('Cannot fetch a form definition from the microservice.');
                return {
                    title: gettext('Error')
                };
            });
            this.title = title;
            this.pages = pages === null || pages === void 0 ? void 0 : pages.map((step) => {
                this.labels.push(step.title);
                return [this.jsonschema.toFieldConfig(step)];
            });
        });
    }
}
ExtensibleDeviceRegistrationModalComponent.ɵfac = function ExtensibleDeviceRegistrationModalComponent_Factory(t) { return new (t || ExtensibleDeviceRegistrationModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.C8yJSONSchema), ɵngcc0.ɵɵdirectiveInject(ExtensibleDeviceRegistrationService)); };
ExtensibleDeviceRegistrationModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ExtensibleDeviceRegistrationModalComponent, selectors: [["extensible-device-registration-modal"]], decls: 9, vars: 7, consts: [[3, "headerClasses", "customFooter"], ["c8y-modal-title", ""], [1, "c8y-icon", "c8y-icon-device-connect"], [4, "ngIf", "ngIfElse"], ["loadingOrError", ""], [3, "steps", "labels", "contextPath"], ["loading", ""], ["type", "error", 1, "lead", "text-regular", 3, "text", "size", "vertical"], [1, "modal-footer"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], [1, "modal-header", "modal-header-info", "text-center"], [1, "text-center", 3, "message"]], template: function ExtensibleDeviceRegistrationModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵelementContainerStart(1, 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "h4");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(6, ExtensibleDeviceRegistrationModalComponent_ng_container_6_Template, 2, 3, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(7, ExtensibleDeviceRegistrationModalComponent_ng_template_7_Template, 3, 2, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵproperty("headerClasses", "dialog-header")("customFooter", true);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, ctx.title));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pages)("ngIfElse", _r1);
    } }, directives: function () { return [ɵngcc3.ModalComponent, ɵngcc7.NgIf, ExtensibleDeviceRegistrationStepperComponent, ɵngcc3.OperationResultComponent, ɵngcc3.C8yTranslateDirective, ɵngcc3.ProgressBarComponent]; }, pipes: function () { return [ɵngcc3.C8yTranslatePipe]; }, encapsulation: 2 });
ExtensibleDeviceRegistrationModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: C8yJSONSchema },
    { type: ExtensibleDeviceRegistrationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExtensibleDeviceRegistrationModalComponent, [{
        type: Component,
        args: [{
                selector: 'extensible-device-registration-modal',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span class=\"c8y-icon c8y-icon-device-connect\"></span>\n    <h4>{{ title | translate }}</h4>\n  </ng-container>\n  <ng-container *ngIf=\"pages as steps; else loadingOrError\">\n    <c8y-extensible-device-registration-stepper\n      [steps]=\"steps\"\n      [labels]=\"labels\"\n      [contextPath]=\"contextPath\"\n    ></c8y-extensible-device-registration-stepper>\n  </ng-container>\n  <ng-template #loadingOrError>\n    <ng-container *ngIf=\"loadingErrorMessage; else loading\">\n      <c8y-operation-result\n        text=\"{{ loadingErrorMessage | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead text-regular\"\n      ></c8y-operation-result>\n      <div class=\"modal-footer\">\n        <button\n          title=\"{{ 'Close' | translate }}\"\n          (click)=\"bsModalRef.hide()\"\n          type=\"button\"\n          class=\"btn btn-default\"\n          translate\n        >\n          Close\n        </button>\n      </div>\n    </ng-container>\n    <ng-template #loading>\n      <div class=\"modal-header modal-header-info text-center\">\n        <c8y-progress-bar\n          [message]=\"'Loading the registration form definition\u2026' | translate\"\n          class=\"text-center\"\n        ></c8y-progress-bar>\n      </div>\n    </ng-template>\n  </ng-template>\n</c8y-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc4.BsModalRef }, { type: ɵngcc3.C8yJSONSchema }, { type: ExtensibleDeviceRegistrationService }]; }, null); })();

class ExtensibleDeviceRegistrationButtonComponent {
    constructor(deviceRegistrationService, modalService) {
        this.deviceRegistrationService = deviceRegistrationService;
        this.modalService = modalService;
    }
    ngOnInit() {
        this.providersMetaData = this.deviceRegistrationService.getDeviceRegistrationProviders();
    }
    click(providerMetaData) {
        const { name, contextPath } = providerMetaData;
        this.modalService.show(ExtensibleDeviceRegistrationModalComponent, {
            initialState: { name, contextPath },
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
ExtensibleDeviceRegistrationButtonComponent.ɵfac = function ExtensibleDeviceRegistrationButtonComponent_Factory(t) { return new (t || ExtensibleDeviceRegistrationButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ExtensibleDeviceRegistrationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalService)); };
ExtensibleDeviceRegistrationButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ExtensibleDeviceRegistrationButtonComponent, selectors: [["extensible-device-registration-provider"]], decls: 2, vars: 3, consts: [[4, "ngFor", "ngForOf"], ["type", "button", 3, "title", "click"], ["c8yIcon", "c8y-device-connect"]], template: function ExtensibleDeviceRegistrationButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ExtensibleDeviceRegistrationButtonComponent_div_0_Template, 6, 6, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.providersMetaData));
    } }, directives: [ɵngcc7.NgForOf, ɵngcc3.IconDirective], pipes: [ɵngcc7.AsyncPipe, ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
ExtensibleDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: ExtensibleDeviceRegistrationService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExtensibleDeviceRegistrationButtonComponent, [{
        type: Component,
        args: [{
                selector: 'extensible-device-registration-provider',
                template: "<div *ngFor=\"let provider of providersMetaData | async\">\n  <button title=\"{{ provider.name | translate }}\" type=\"button\" (click)=\"click(provider)\">\n    <i c8yIcon=\"c8y-device-connect\"></i>\n    {{ provider.name | translate }}\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ExtensibleDeviceRegistrationService }, { type: ɵngcc4.BsModalService }]; }, null); })();

class ExtensibleDeviceRegistrationStepperComponent {
    constructor(customProviderService, registerDeviceService, bsModalRef) {
        this.customProviderService = customProviderService;
        this.registerDeviceService = registerDeviceService;
        this.bsModalRef = bsModalRef;
        this.pendingStatus = false;
        this.forms = [];
        this.model = {};
        this.SERVER_ERROR = gettext('Cannot register your device.');
        this.SUCCESSFUL_REGISTRATION = gettext('Your device was successfully registered.');
        this.NO_CONNECTION = gettext('Unable to reach the microservice.');
    }
    ngOnInit() {
        this.steps.forEach(step => this.forms.push(new FormGroup({})));
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pendingStatus = true;
            this.errorMessage = null;
            const { res, data } = yield this.customProviderService.registerDevice(this.contextPath, this.model)
                .catch(err => {
                return {
                    res: undefined,
                    data: undefined
                };
            })
                .finally(() => {
                this.pendingStatus = false;
                this.stepper.next();
            });
            if (res && data) {
                if (res.status >= 400 && res.status < 500) {
                    this.handleError(data.message || this.SERVER_ERROR);
                }
                else if (res.status >= 500) {
                    this.handleError(this.SERVER_ERROR);
                }
                else {
                    this.message = this.SUCCESSFUL_REGISTRATION;
                }
            }
            else {
                this.handleError(this.NO_CONNECTION);
            }
        });
    }
    close() {
        this.bsModalRef.hide();
    }
    complete() {
        this.registerDeviceService.list();
        this.bsModalRef.hide();
    }
    goToFirstStep() {
        this.stepper.selectedIndex = 0;
    }
    isRegistrationStep() {
        return this.stepper.selectedIndex === this.steps.length - 1;
    }
    finalStepStatus() {
        if (this.stepper.selectedIndex === this.steps.length) {
            if (this.errorMessage) {
                return STEP_STATE.ERROR;
            }
            else {
                return STEP_STATE.DONE;
            }
        }
        else {
            return STEP_STATE.NUMBER;
        }
    }
    handleError(message) {
        this.errorMessage = message;
    }
}
ExtensibleDeviceRegistrationStepperComponent.ɵfac = function ExtensibleDeviceRegistrationStepperComponent_Factory(t) { return new (t || ExtensibleDeviceRegistrationStepperComponent)(ɵngcc0.ɵɵdirectiveInject(ExtensibleDeviceRegistrationService), ɵngcc0.ɵɵdirectiveInject(RegisterDeviceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalRef)); };
ExtensibleDeviceRegistrationStepperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ExtensibleDeviceRegistrationStepperComponent, selectors: [["c8y-extensible-device-registration-stepper"]], viewQuery: function ExtensibleDeviceRegistrationStepperComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(C8yStepper, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepper = _t.first);
    } }, inputs: { contextPath: "contextPath", labels: "labels", steps: "steps" }, decls: 8, vars: 19, consts: [["linear", "", 3, "disableProgressButtons", "disableDefaultIcons", "customClasses"], [3, "stepControl", "label", 4, "ngFor", "ngForOf"], [3, "state", "label"], ["type", "success", "class", "lead", 3, "text", "size", "vertical", 4, "ngIf", "ngIfElse"], ["errorInfo", ""], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "labels", "onCancel", "onNext", "onBack"], [3, "stepControl", "label"], [1, "form-group", "p-24", "p-b-0", "p-t-16"], [3, "form", "fields", "model"], ["class", "sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white", 3, "showButtons", "labels", "pending", "disabled", "onCancel", "onNext", 4, "ngIf"], ["class", "sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white", 3, "showButtons", "disabled", "onCancel", 4, "ngIf"], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "labels", "pending", "disabled", "onCancel", "onNext"], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "disabled", "onCancel"], ["type", "success", 1, "lead", 3, "text", "size", "vertical"], ["type", "error", 1, "lead", 3, "text", "size", "vertical"]], template: function ExtensibleDeviceRegistrationStepperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-stepper", 0);
        ɵngcc0.ɵɵtemplate(1, ExtensibleDeviceRegistrationStepperComponent_cdk_step_1_Template, 5, 7, "cdk-step", 1);
        ɵngcc0.ɵɵelementStart(2, "cdk-step", 2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, ExtensibleDeviceRegistrationStepperComponent_c8y_operation_result_4_Template, 2, 5, "c8y-operation-result", 3);
        ɵngcc0.ɵɵtemplate(5, ExtensibleDeviceRegistrationStepperComponent_ng_template_5_Template, 2, 5, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(7, "c8y-stepper-buttons", 5);
        ɵngcc0.ɵɵlistener("onCancel", function ExtensibleDeviceRegistrationStepperComponent_Template_c8y_stepper_buttons_onCancel_7_listener() { return ctx.close(); })("onNext", function ExtensibleDeviceRegistrationStepperComponent_Template_c8y_stepper_buttons_onNext_7_listener() { return ctx.complete(); })("onBack", function ExtensibleDeviceRegistrationStepperComponent_Template_c8y_stepper_buttons_onBack_7_listener() { return ctx.goToFirstStep(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵproperty("disableProgressButtons", true)("disableDefaultIcons", ɵngcc0.ɵɵpureFunction0(12, _c12))("customClasses", ɵngcc0.ɵɵpureFunction0(13, _c13));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.steps);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(3, 10, "Summary"));
        ɵngcc0.ɵɵproperty("state", ctx.finalStepStatus());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.errorMessage)("ngIfElse", _r2);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction3(14, _c14, ctx.errorMessage, ctx.errorMessage, !ctx.errorMessage))("labels", ɵngcc0.ɵɵpureFunction0(18, _c15));
    } }, directives: [ɵngcc3.C8yStepper, ɵngcc7.NgForOf, ɵngcc5.CdkStep, ɵngcc7.NgIf, ɵngcc3.C8yStepperButtons, ɵngcc3.FormGroupComponent, ɵngcc6.FormlyForm, ɵngcc3.OperationResultComponent], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
ExtensibleDeviceRegistrationStepperComponent.ctorParameters = () => [
    { type: ExtensibleDeviceRegistrationService },
    { type: RegisterDeviceService },
    { type: BsModalRef }
];
ExtensibleDeviceRegistrationStepperComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }],
    contextPath: [{ type: Input }],
    labels: [{ type: Input }],
    steps: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExtensibleDeviceRegistrationStepperComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-extensible-device-registration-stepper',
                template: "<c8y-stepper\n  [disableProgressButtons]=\"true\"\n  [disableDefaultIcons]=\"{ edit: true, done: false }\"\n  [customClasses]=\"['m-40', 'm-t-16', 'm-b-16']\"\n  linear\n>\n  <cdk-step *ngFor=\"let step of steps; let i = index\" [stepControl]=\"forms[i]\" [label]=\"labels[i]\">\n    <c8y-form-group class=\"form-group p-24 p-b-0 p-t-16\">\n      <formly-form [form]=\"forms[i]\" [fields]=\"step\" [model]=\"model\"></formly-form>\n    </c8y-form-group>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: true, next: true }\"\n      [labels]=\"{ next: 'Register' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"save()\"\n      [pending]=\"pendingStatus\"\n      [disabled]=\"forms[i].invalid\"\n    ></c8y-stepper-buttons>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"!isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: i !== 0, next: true }\"\n      [disabled]=\"forms[i].invalid\"\n      (onCancel)=\"close()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n  <cdk-step [state]=\"finalStepStatus()\" label=\"{{ 'Summary' | translate }}\">\n    <c8y-operation-result\n      *ngIf=\"!errorMessage; else errorInfo\"\n      text=\"{{ message | translate }}\"\n      [size]=\"84\"\n      [vertical]=\"true\"\n      type=\"success\"\n      class=\"lead\"\n    ></c8y-operation-result>\n    <ng-template #errorInfo>\n      <c8y-operation-result\n        text=\"{{ errorMessage | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </ng-template>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      [showButtons]=\"{ cancel: errorMessage, back: errorMessage, next: !errorMessage }\"\n      [labels]=\"{ back: 'Fix issue', next: 'Close' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"complete()\"\n      (onBack)=\"goToFirstStep()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n</c8y-stepper>\n"
            }]
    }], function () { return [{ type: ExtensibleDeviceRegistrationService }, { type: RegisterDeviceService }, { type: ɵngcc4.BsModalRef }]; }, { stepper: [{
            type: ViewChild,
            args: [C8yStepper, { static: true }]
        }], contextPath: [{
            type: Input
        }], labels: [{
            type: Input
        }], steps: [{
            type: Input
        }] }); })();

class BulkExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(true);
    }
    getBulkDescription(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.fetch(this.getMetadataUrl(contextPath), {
                params: { lang: this.stateService.state.lang }
            });
            const { c8y_DeviceRegistration } = yield res.json();
            if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {
                throw new Error(gettext('The response of the microservice is incomplete. The bulk registration information is missing.'));
            }
            return c8y_DeviceRegistration.bulk;
        });
    }
    upload(csv, contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = this.createBinaryRequestBody(csv);
            const res = yield this.client.fetch(this.getBulkUrl(contextPath), { method, body });
            const data = yield res.json();
            return { res, data };
        });
    }
    getBulkUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/bulk`;
    }
    createBinaryRequestBody(file) {
        const body = new FormData();
        body.append('file', file, file.name);
        return body;
    }
}
BulkExtensibleDeviceRegistrationService.ɵfac = function BulkExtensibleDeviceRegistrationService_Factory(t) { return new (t || BulkExtensibleDeviceRegistrationService)(ɵngcc0.ɵɵinject(ɵngcc2.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc3.AppStateService), ɵngcc0.ɵɵinject(ɵngcc2.FetchClient)); };
BulkExtensibleDeviceRegistrationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkExtensibleDeviceRegistrationService, factory: BulkExtensibleDeviceRegistrationService.ɵfac });
BulkExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkExtensibleDeviceRegistrationService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.ApplicationService }, { type: ɵngcc3.AppStateService }, { type: ɵngcc2.FetchClient }]; }, null); })();

const bulkSchema$1 = {
    $schema: 'https://json-schema.org/draft/2019-09/schema',
    type: 'object',
    properties: {
        csvBulkFile: {
            type: 'string',
            title: gettext('CSV file upload'),
            description: gettext('You can use file upload component to let users send files. This input accepts only a single CSV file.'),
            contentEncoding: 'base64',
            contentMediaType: 'csv'
        }
    },
    required: ['csvBulkFile'],
    additionalProperties: false
};
class ExtensibleBulkDeviceRegistrationModalComponent {
    constructor(jsonschema, bulkExtensibleDeviceRegistrationService, registerDeviceService, bsModalRef) {
        this.jsonschema = jsonschema;
        this.bulkExtensibleDeviceRegistrationService = bulkExtensibleDeviceRegistrationService;
        this.registerDeviceService = registerDeviceService;
        this.bsModalRef = bsModalRef;
        this.loadingError = false;
        this.pending = false;
        this.form = new FormGroup({});
        this.model = {};
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { title, exampleFileUrls } = yield this.bulkExtensibleDeviceRegistrationService
                .getBulkDescription(this.contextPath)
                .catch(error => {
                this.message = error.message;
                this.loadingError = true;
                return {
                    title: gettext('Error'),
                    exampleFileUrls: []
                };
            });
            this.title = title;
            this.template = [this.jsonschema.toFieldConfig(bulkSchema$1)];
            this.examples = exampleFileUrls;
        });
    }
    upload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pending = true;
            const { res, data } = yield this.bulkExtensibleDeviceRegistrationService
                .upload(this.getFile(this.model), this.contextPath)
                .catch(err => {
                return {
                    res: undefined,
                    data: undefined
                };
            })
                .finally(() => {
                this.pending = false;
                this.stepper.next();
            });
            this.result = data;
            this.success = (res === null || res === void 0 ? void 0 : res.status) < 400;
            if (this.success) {
                this.message = gettext('Device registration created.');
                this.model = {};
            }
            if (res) {
                if (res.status >= 400 && res.status < 500) {
                    this.message = gettext('Device registration failed.');
                }
                else if (res.status >= 500) {
                    this.message = gettext('Error occurred while processing the uploaded file.');
                }
            }
            else {
                this.message = gettext('No internet connection. Unable to reach the microservice.');
            }
        });
    }
    getFile(model) {
        var _a, _b;
        const csvBulkFile = (_a = model) === null || _a === void 0 ? void 0 : _a.csvBulkFile;
        return csvBulkFile ? (_b = csvBulkFile[0]) === null || _b === void 0 ? void 0 : _b.file : undefined;
    }
    complete() {
        this.registerDeviceService.list();
        this.bsModalRef.hide();
    }
    cancel() {
        this.bsModalRef.hide();
    }
}
ExtensibleBulkDeviceRegistrationModalComponent.ɵfac = function ExtensibleBulkDeviceRegistrationModalComponent_Factory(t) { return new (t || ExtensibleBulkDeviceRegistrationModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.C8yJSONSchema), ɵngcc0.ɵɵdirectiveInject(BulkExtensibleDeviceRegistrationService), ɵngcc0.ɵɵdirectiveInject(RegisterDeviceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalRef)); };
ExtensibleBulkDeviceRegistrationModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ExtensibleBulkDeviceRegistrationModalComponent, selectors: [["extensible-device-registration-modal-component"]], viewQuery: function ExtensibleBulkDeviceRegistrationModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(C8yStepper, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepper = _t.first);
    } }, decls: 14, vars: 14, consts: [[3, "headerClasses", "customFooter"], ["c8y-modal-title", ""], [1, "c8y-icon", "c8y-icon-device-connect"], ["linear", "", 1, "p-t-16", 3, "hideStepProgress"], [4, "ngIf"], ["state", "final"], [1, "p-24"], [4, "ngIf", "ngIfElse"], ["fail", ""], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "labels", "onNext"], [3, "stepControl"], [1, "sticky-top", "bg-component", "separator-bottom"], ["translate", "", 1, "p-l-24", "p-r-24", "p-t-16", "p-b-16", "m-b-0", "separator-bottom", "text-16", "text-medium", "text-center", "bg-component"], [1, "p-24", "p-t-16", "p-b-8", "m-b-0"], [3, "form", "fields", "model"], ["class", "bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24", 4, "ngFor", "ngForOf"], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "disabled", "pending", "labels", "onCancel", "onNext"], [1, "bg-gray-white", "separator-bottom", "p-t-16", "p-b-16", "p-l-24", "p-r-24"], [1, "m-b-8", "text-medium"], [1, "small", "m-b-8"], ["target", "_self", 1, "btn", "btn-default", "btn-sm", 3, "title", "href", "download"], ["c8yIcon", "download"], ["translate", ""], ["type", "success", 1, "lead", 3, "text", "size", "vertical"], [1, "separator-top", "m-t-16"], [1, "text-success", 3, "icon"], ["type", "error", 1, "lead", 3, "text", "size", "vertical"], ["class", "separator-top m-t-16", 4, "ngIf"], [1, "text-danger", 3, "icon"]], template: function ExtensibleBulkDeviceRegistrationModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵelementContainerStart(1, 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "h4");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(6, "c8y-stepper", 3);
        ɵngcc0.ɵɵtemplate(7, ExtensibleBulkDeviceRegistrationModalComponent_ng_container_7_Template, 9, 11, "ng-container", 4);
        ɵngcc0.ɵɵelementStart(8, "cdk-step", 5);
        ɵngcc0.ɵɵelementStart(9, "div", 6);
        ɵngcc0.ɵɵtemplate(10, ExtensibleBulkDeviceRegistrationModalComponent_div_10_Template, 13, 9, "div", 7);
        ɵngcc0.ɵɵtemplate(11, ExtensibleBulkDeviceRegistrationModalComponent_ng_template_11_Template, 3, 6, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "c8y-stepper-buttons", 9);
        ɵngcc0.ɵɵlistener("onNext", function ExtensibleBulkDeviceRegistrationModalComponent_Template_c8y_stepper_buttons_onNext_13_listener() { return ctx.complete(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(12);
        ɵngcc0.ɵɵproperty("headerClasses", "dialog-header")("customFooter", true);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 9, ctx.title));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hideStepProgress", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loadingError);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.success)("ngIfElse", _r2);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction0(11, _c17))("labels", ɵngcc0.ɵɵpureFunction1(12, _c18, ctx.success ? "Complete" : "Cancel"));
    } }, directives: [ɵngcc3.ModalComponent, ɵngcc3.C8yStepper, ɵngcc7.NgIf, ɵngcc5.CdkStep, ɵngcc3.C8yStepperButtons, ɵngcc3.C8yTranslateDirective, ɵngcc3.FormGroupComponent, ɵngcc6.FormlyForm, ɵngcc7.NgForOf, ɵngcc3.IconDirective, ɵngcc3.OperationResultComponent, ɵngcc3.ListGroupComponent, ɵngcc3.ListItemComponent, ɵngcc3.ListItemIconComponent, ɵngcc3.ListItemCollapseComponent], pipes: [ɵngcc3.C8yTranslatePipe, ɵngcc7.JsonPipe], encapsulation: 2 });
ExtensibleBulkDeviceRegistrationModalComponent.ctorParameters = () => [
    { type: C8yJSONSchema },
    { type: BulkExtensibleDeviceRegistrationService },
    { type: RegisterDeviceService },
    { type: BsModalRef }
];
ExtensibleBulkDeviceRegistrationModalComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExtensibleBulkDeviceRegistrationModalComponent, [{
        type: Component,
        args: [{
                selector: 'extensible-device-registration-modal-component',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span class=\"c8y-icon c8y-icon-device-connect\"></span>\n    <h4>{{ title | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear class=\"p-t-16\">\n    <ng-container *ngIf=\"!loadingError\">\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"sticky-top bg-component separator-bottom\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              separator-bottom\n              text-16 text-medium text-center\n              bg-component\n            \"\n            translate\n          >\n            Register devices in bulk\n          </p>\n          <c8y-form-group class=\"p-24 p-t-16 p-b-8 m-b-0\">\n            <formly-form [form]=\"form\" [fields]=\"template\" [model]=\"model\"></formly-form>\n          </c8y-form-group>\n        </div>\n        <div\n          *ngFor=\"let example of examples\"\n          class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\"\n        >\n          <p class=\"m-b-8 text-medium\">\n            {{ example.title | translate }}\n          </p>\n          <p class=\"small m-b-8\">{{ example.description | translate }}</p>\n          <a\n            title=\"{{ 'Download template' | translate }}\"\n            class=\"btn btn-default btn-sm\"\n            target=\"_self\"\n            [href]=\"example.url\"\n            download=\"{{ 'Example bulk registration - template.csv' | translate }}\"\n          >\n            <i c8yIcon=\"download\"></i>\n            <span translate>Download template</span>\n          </a>\n        </div>\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [disabled]=\"form.invalid\"\n          [pending]=\"pending\"\n          (onCancel)=\"cancel()\"\n          (onNext)=\"upload()\"\n          [labels]=\"{ next: 'Upload' }\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </ng-container>\n    <cdk-step state=\"final\">\n      <div class=\"p-24\">\n        <div *ngIf=\"success; else fail\">\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-list-group class=\"separator-top m-t-16\">\n            <c8y-li>\n              <c8y-li-icon class=\"text-success\" [icon]=\"'check-circle'\"></c8y-li-icon>\n              <p translate>File successfully uploaded.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <ng-template #fail>\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-list-group *ngIf=\"result\" class=\"separator-top m-t-16\">\n            <c8y-li>\n              <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n              <p translate>Bulk operation failed.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </c8y-list-group>\n        </ng-template>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ next: true }\"\n        (onNext)=\"complete()\"\n        [labels]=\"{ next: success ? 'Complete' : 'Cancel' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc3.C8yJSONSchema }, { type: BulkExtensibleDeviceRegistrationService }, { type: RegisterDeviceService }, { type: ɵngcc4.BsModalRef }]; }, { stepper: [{
            type: ViewChild,
            args: [C8yStepper, { static: true }]
        }] }); })();

const bulkSchema = {
    $schema: 'https://json-schema.org/draft/2019-09/schema',
    type: 'object',
    properties: {
        csvBulkFile: {
            type: 'string',
            title: gettext('CSV file upload'),
            description: gettext('You can use file upload component to let users send files. This input accepts only a single CSV file.'),
            contentEncoding: 'base64',
            contentMediaType: 'csv'
        }
    },
    required: ['csvBulkFile'],
    additionalProperties: false
};
const simpleCsvHeaders = ['ID', 'PATH'];
const fullCsvHeaders = [
    'ID',
    'CREDENTIALS',
    'TYPE',
    'NAME',
    'ICCID',
    'IDTYPE',
    'PATH',
    'SHELL',
    'AUTH_TYPE'
];
class BulkDeviceRegistrationModalComponent {
    constructor(router, jsonschema, deviceRegistrationService, registerDeviceService, bsModalRef) {
        this.router = router;
        this.jsonschema = jsonschema;
        this.deviceRegistrationService = deviceRegistrationService;
        this.registerDeviceService = registerDeviceService;
        this.bsModalRef = bsModalRef;
        this.form = new FormGroup({});
        this.model = {};
    }
    ngOnInit() {
        this.template = [this.jsonschema.toFieldConfig(bulkSchema)];
    }
    upload() {
        this.pending = true;
        const file = this.getFile(this.model);
        this.deviceRegistrationService
            .create(file)
            .then(({ res, data }) => {
            if (res.status < 400) {
                this.result = data;
                this.success = data.numberOfFailed === 0 && data.numberOfSuccessful === data.numberOfAll;
                this.message = this.success
                    ? gettext('Device registration created.')
                    : (this.message = gettext('Device registration failed.'));
            }
            else {
                this.failedResult = data;
                this.message = gettext('Device registration failed.');
            }
            this.model = {};
            this.pending = false;
            this.stepper.next();
        })
            .catch(reason => {
            this.message = gettext('Error occurred while processing the uploaded file.');
            this.pending = false;
            this.stepper.next();
        });
    }
    downloadSimple() {
        return this.download(simpleCsvHeaders, gettext('Simple bulk registration - template.csv'));
    }
    downloadFull() {
        return this.download(fullCsvHeaders, gettext('Full bulk registration - template.csv'));
    }
    download(headers, fileName) {
        const headerRaw = headers.map(header => `"${header}"`).join(';');
        const binaryFile = new Blob([headerRaw], { type: 'text/csv' });
        saveAs(binaryFile, fileName);
    }
    complete() {
        this.registerDeviceService.list();
        this.bsModalRef.hide();
    }
    cancel() {
        this.bsModalRef.hide();
    }
    getFile(model) {
        var _a, _b;
        const csvBulkFile = (_a = model) === null || _a === void 0 ? void 0 : _a.csvBulkFile;
        return csvBulkFile ? (_b = csvBulkFile[0]) === null || _b === void 0 ? void 0 : _b.file : undefined;
    }
}
BulkDeviceRegistrationModalComponent.ɵfac = function BulkDeviceRegistrationModalComponent_Factory(t) { return new (t || BulkDeviceRegistrationModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.C8yJSONSchema), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DeviceRegistrationBulkService), ɵngcc0.ɵɵdirectiveInject(RegisterDeviceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalRef)); };
BulkDeviceRegistrationModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkDeviceRegistrationModalComponent, selectors: [["bulk-device-registration"]], viewQuery: function BulkDeviceRegistrationModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(C8yStepper, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepper = _t.first);
    } }, decls: 46, vars: 31, consts: [[3, "headerClasses", "customFooter"], ["c8y-modal-title", ""], ["c8yIcon", "upload"], ["linear", "", 3, "hideStepProgress"], [3, "stepControl"], [1, "sticky-top", "bg-component", "separator-bottom"], ["translate", "", 1, "p-l-24", "p-r-24", "p-t-16", "p-b-16", "m-b-0", "sticky-top", "separator-bottom", "text-16", "text-medium", "text-center", "bg-component"], [1, "p-24", "p-t-16", "p-b-8", "m-b-0"], [3, "form", "fields", "model"], [1, "bg-gray-white", "separator-bottom", "p-t-16", "p-b-16", "p-l-24", "p-r-24"], ["translate", "", 1, "m-b-8", "text-medium"], ["translate", "", 1, "small", "m-b-8"], ["target", "_self", 1, "btn", "btn-default", "btn-sm", 3, "title", "click"], ["c8yIcon", "download"], ["translate", ""], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "disabled", "pending", "labels", "onCancel", "onNext"], ["state", "final"], [1, "m-24"], [4, "ngIf", "ngIfElse"], ["warning", ""], [1, "separator-top", "m-t-16"], ["failedResponse", ""], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "labels", "onNext"], ["type", "success", 1, "lead", 3, "text", "size", "vertical"], ["type", "error", 1, "lead", 3, "text", "size", "vertical"], ["fail", ""], ["icon", "check-circle", 1, "text-success"], ["icon", "ban", 1, "text-danger"], ["translate", "", 3, "translateParams"], [1, "text-danger", 3, "icon"]], template: function BulkDeviceRegistrationModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵelementContainerStart(1, 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "h4");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(6, "c8y-stepper", 3);
        ɵngcc0.ɵɵelementStart(7, "cdk-step", 4);
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵelementStart(9, "p", 6);
        ɵngcc0.ɵɵtext(10, " Register general devices in bulk ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "c8y-form-group", 7);
        ɵngcc0.ɵɵelement(12, "formly-form", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 9);
        ɵngcc0.ɵɵelementStart(14, "div");
        ɵngcc0.ɵɵelementStart(15, "p", 10);
        ɵngcc0.ɵɵtext(16, "Simple registration");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "p", 11);
        ɵngcc0.ɵɵtext(18, " Creates all registration requests at once, then each one needs to go through regular acceptance process. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "a", 12);
        ɵngcc0.ɵɵlistener("click", function BulkDeviceRegistrationModalComponent_Template_a_click_19_listener() { return ctx.downloadSimple(); });
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelement(21, "i", 13);
        ɵngcc0.ɵɵelementStart(22, "span", 14);
        ɵngcc0.ɵɵtext(23, "Download template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "div", 9);
        ɵngcc0.ɵɵelementStart(25, "div");
        ɵngcc0.ɵɵelementStart(26, "p", 10);
        ɵngcc0.ɵɵtext(27, "Full registration");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "p", 11);
        ɵngcc0.ɵɵtext(29, " Creates all device credentials and devices using provided list of property values. Devices can start communicating with the platform immediately. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "a", 12);
        ɵngcc0.ɵɵlistener("click", function BulkDeviceRegistrationModalComponent_Template_a_click_30_listener() { return ctx.downloadFull(); });
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelement(32, "i", 13);
        ɵngcc0.ɵɵelementStart(33, "span", 14);
        ɵngcc0.ɵɵtext(34, "Download template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "c8y-stepper-buttons", 15);
        ɵngcc0.ɵɵlistener("onCancel", function BulkDeviceRegistrationModalComponent_Template_c8y_stepper_buttons_onCancel_35_listener() { return ctx.cancel(); })("onNext", function BulkDeviceRegistrationModalComponent_Template_c8y_stepper_buttons_onNext_35_listener() { return ctx.upload(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "cdk-step", 16);
        ɵngcc0.ɵɵelementStart(37, "div", 17);
        ɵngcc0.ɵɵtemplate(38, BulkDeviceRegistrationModalComponent_div_38_Template, 3, 5, "div", 18);
        ɵngcc0.ɵɵtemplate(39, BulkDeviceRegistrationModalComponent_ng_template_39_Template, 2, 5, "ng-template", null, 19, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(41, "c8y-list-group", 20);
        ɵngcc0.ɵɵtemplate(42, BulkDeviceRegistrationModalComponent_ng_container_42_Template, 4, 2, "ng-container", 18);
        ɵngcc0.ɵɵtemplate(43, BulkDeviceRegistrationModalComponent_ng_template_43_Template, 10, 7, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(45, "c8y-stepper-buttons", 22);
        ɵngcc0.ɵɵlistener("onNext", function BulkDeviceRegistrationModalComponent_Template_c8y_stepper_buttons_onNext_45_listener() { return ctx.complete(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(40);
        const _r4 = ɵngcc0.ɵɵreference(44);
        ɵngcc0.ɵɵproperty("headerClasses", "dialog-header")("customFooter", true);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 20, "Bulk device registration"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hideStepProgress", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("stepControl", ctx.form);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("form", ctx.form)("fields", ctx.template)("model", ctx.model);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 22, "Download template"));
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(31, 24, "Download template"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction0(26, _c3))("disabled", ctx.form.invalid)("pending", ctx.pending)("labels", ɵngcc0.ɵɵpureFunction0(27, _c16));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.success)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.result)("ngIfElse", _r4);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction0(28, _c17))("labels", ɵngcc0.ɵɵpureFunction1(29, _c18, ctx.success ? "Close" : "Cancel"));
    } }, directives: [ɵngcc3.ModalComponent, ɵngcc3.IconDirective, ɵngcc3.C8yStepper, ɵngcc5.CdkStep, ɵngcc3.C8yTranslateDirective, ɵngcc3.FormGroupComponent, ɵngcc6.FormlyForm, ɵngcc3.C8yStepperButtons, ɵngcc7.NgIf, ɵngcc3.ListGroupComponent, ɵngcc3.OperationResultComponent, ɵngcc3.ListItemComponent, ɵngcc3.ListItemIconComponent, ɵngcc3.ListItemCollapseComponent], pipes: [ɵngcc3.C8yTranslatePipe, ɵngcc7.JsonPipe], encapsulation: 2 });
BulkDeviceRegistrationModalComponent.ctorParameters = () => [
    { type: Router },
    { type: C8yJSONSchema },
    { type: DeviceRegistrationBulkService },
    { type: RegisterDeviceService },
    { type: BsModalRef }
];
BulkDeviceRegistrationModalComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkDeviceRegistrationModalComponent, [{
        type: Component,
        args: [{
                selector: 'bulk-device-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span c8yIcon=\"upload\"></span>\n    <h4>{{ 'Bulk device registration' | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear>\n    <cdk-step [stepControl]=\"form\">\n      <div class=\"sticky-top bg-component separator-bottom\">\n        <p\n          class=\"\n            p-l-24 p-r-24 p-t-16 p-b-16\n            m-b-0\n            sticky-top\n            separator-bottom\n            text-16 text-medium text-center\n            bg-component\n          \"\n          translate\n        >\n          Register general devices in bulk\n        </p>\n        <c8y-form-group class=\"p-24 p-t-16 p-b-8 m-b-0\">\n          <formly-form [form]=\"form\" [fields]=\"template\" [model]=\"model\"></formly-form>\n        </c8y-form-group>\n      </div>\n      <div class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\">\n        <div>\n          <p class=\"m-b-8 text-medium\" translate>Simple registration</p>\n          <p class=\"small m-b-8\" translate>\n            Creates all registration requests at once, then each one needs to go through regular\n            acceptance process.\n          </p>\n        </div>\n        <a\n          title=\"{{ 'Download template' | translate }}\"\n          class=\"btn btn-default btn-sm\"\n          target=\"_self\"\n          (click)=\"downloadSimple()\"\n        >\n          <i c8yIcon=\"download\"></i>\n          <span translate>Download template</span>\n        </a>\n      </div>\n      <div class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\">\n        <div>\n          <p class=\"m-b-8 text-medium\" translate>Full registration</p>\n          <p class=\"small m-b-8\" translate>\n            Creates all device credentials and devices using provided list of property values.\n            Devices can start communicating with the platform immediately.\n          </p>\n        </div>\n        <a\n          title=\"{{ 'Download template' | translate }}\"\n          class=\"btn btn-default btn-sm\"\n          target=\"_self\"\n          (click)=\"downloadFull()\"\n        >\n          <i c8yIcon=\"download\"></i>\n          <span translate>Download template</span>\n        </a>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ cancel: true, next: true }\"\n        [disabled]=\"form.invalid\"\n        [pending]=\"pending\"\n        (onCancel)=\"cancel()\"\n        (onNext)=\"upload()\"\n        [labels]=\"{ next: 'Upload' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step state=\"final\">\n      <div class=\"m-24\">\n        <div *ngIf=\"success; else warning\">\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </div>\n        <ng-template #warning>\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </ng-template>\n        <c8y-list-group class=\"separator-top m-t-16\">\n          <ng-container *ngIf=\"result; else failedResponse\">\n            <c8y-li *ngIf=\"success; else fail\">\n              <c8y-li-icon class=\"text-success\" icon=\"check-circle\"></c8y-li-icon>\n              <p>All devices processed successfully.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n            <ng-template #fail>\n              <c8y-li>\n                <c8y-li-icon class=\"text-danger\" icon=\"ban\"></c8y-li-icon>\n                <p\n                  ngNonBindable\n                  [translateParams]=\"{ count: result?.numberOfFailed, total: result?.numberOfAll }\"\n                  translate\n                >\n                  Failed to process {{ count }} out of {{ total }}.\n                </p>\n                <c8y-li-collapse>\n                  <pre><code>{{ result | json }}</code></pre>\n                </c8y-li-collapse>\n              </c8y-li>\n            </ng-template>\n          </ng-container>\n          <ng-template #failedResponse>\n            <c8y-li>\n              <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n              <small>{{ failedResult?.message | translate }}</small>\n              <c8y-li-collapse>\n                <pre><code>{{ failedResult | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </ng-template>\n        </c8y-list-group>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ next: true }\"\n        (onNext)=\"complete()\"\n        [labels]=\"{ next: success ? 'Close' : 'Cancel' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc3.C8yJSONSchema }, { type: ɵngcc2.DeviceRegistrationBulkService }, { type: RegisterDeviceService }, { type: ɵngcc4.BsModalRef }]; }, { stepper: [{
            type: ViewChild,
            args: [C8yStepper, { static: true }]
        }] }); })();

class ExtensibleBulkDeviceRegistrationButtonComponent {
    constructor(bulkExtensibleDeviceRegistrationService, modalService) {
        this.bulkExtensibleDeviceRegistrationService = bulkExtensibleDeviceRegistrationService;
        this.modalService = modalService;
    }
    ngOnInit() {
        this.bulkProvidersMetaData = this.bulkExtensibleDeviceRegistrationService.getDeviceRegistrationProviders();
    }
    click(contextPath) {
        this.modalService.show(ExtensibleBulkDeviceRegistrationModalComponent, {
            initialState: { contextPath },
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
ExtensibleBulkDeviceRegistrationButtonComponent.ɵfac = function ExtensibleBulkDeviceRegistrationButtonComponent_Factory(t) { return new (t || ExtensibleBulkDeviceRegistrationButtonComponent)(ɵngcc0.ɵɵdirectiveInject(BulkExtensibleDeviceRegistrationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalService)); };
ExtensibleBulkDeviceRegistrationButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ExtensibleBulkDeviceRegistrationButtonComponent, selectors: [["extensible-device-registration-component"]], decls: 2, vars: 3, consts: [[4, "ngFor", "ngForOf"], ["type", "button", 3, "title", "click"], ["c8yIcon", "upload"]], template: function ExtensibleBulkDeviceRegistrationButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ExtensibleBulkDeviceRegistrationButtonComponent_div_0_Template, 6, 6, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.bulkProvidersMetaData));
    } }, directives: [ɵngcc7.NgForOf, ɵngcc3.IconDirective], pipes: [ɵngcc7.AsyncPipe, ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
ExtensibleBulkDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BulkExtensibleDeviceRegistrationService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExtensibleBulkDeviceRegistrationButtonComponent, [{
        type: Component,
        args: [{
                selector: 'extensible-device-registration-component',
                template: "<div *ngFor=\"let provider of bulkProvidersMetaData | async\">\n  <button\n    title=\"{{ provider.name | translate }}\"\n    type=\"button\"\n    (click)=\"click(provider.contextPath)\"\n  >\n    <i c8yIcon=\"upload\"></i>\n    {{ provider.name | translate }}\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: BulkExtensibleDeviceRegistrationService }, { type: ɵngcc4.BsModalService }]; }, null); })();

class BulkDeviceRegistrationButtonComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    click() {
        this.modalService.show(BulkDeviceRegistrationModalComponent, {
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
BulkDeviceRegistrationButtonComponent.ɵfac = function BulkDeviceRegistrationButtonComponent_Factory(t) { return new (t || BulkDeviceRegistrationButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalService)); };
BulkDeviceRegistrationButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkDeviceRegistrationButtonComponent, selectors: [["extensible-device-registration-component"]], decls: 4, vars: 3, consts: [[3, "click"], ["c8yIcon", "upload"]], template: function BulkDeviceRegistrationButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function BulkDeviceRegistrationButtonComponent_Template_button_click_0_listener() { return ctx.click(); });
        ɵngcc0.ɵɵelement(1, "i", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "General"));
    } }, directives: [ɵngcc3.IconDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
BulkDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkDeviceRegistrationButtonComponent, [{
        type: Component,
        args: [{
                selector: 'extensible-device-registration-component',
                template: "<button (click)=\"click()\"><i c8yIcon=\"upload\"></i>{{ 'General' | translate }}</button>\n"
            }]
    }], function () { return [{ type: ɵngcc4.BsModalService }]; }, null); })();

const HOOK_DEVICE_REGISTRATION = new InjectionToken('RegisterDevicesFactory');
class RegisterDeviceExtensionService {
    constructor(injector, router) {
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.items$ = fromTriggerOnce(router, [this.refreshTrigger], [() => this.injector.get(HOOK_DEVICE_REGISTRATION, []), () => this.factories, this]).pipe(startWith([]), shareReplay(1));
    }
    refresh() {
        this.refreshTrigger.next();
    }
}
RegisterDeviceExtensionService.ɵfac = function RegisterDeviceExtensionService_Factory(t) { return new (t || RegisterDeviceExtensionService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
RegisterDeviceExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RegisterDeviceExtensionService_Factory() { return new RegisterDeviceExtensionService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: RegisterDeviceExtensionService, providedIn: "root" });
RegisterDeviceExtensionService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegisterDeviceExtensionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();

class RegisterDeviceDropdownComponent {
    constructor(registerDeviceExtensionService, registerDeviceService) {
        this.registerDeviceExtensionService = registerDeviceExtensionService;
        this.registerDeviceService = registerDeviceService;
        this.single$ = this.registerDeviceExtensionService.items$.pipe(map(items => items.filter(item => item.category === 'single').sort((a, b) => b.priority - a.priority)));
        this.bulk$ = this.registerDeviceExtensionService.items$.pipe(map(items => items.filter(item => item.category === 'bulk').sort((a, b) => b.priority - a.priority)));
        this.limit$ = this.registerDeviceService.limit$.pipe(map(limit => limit.isReached));
    }
}
RegisterDeviceDropdownComponent.ɵfac = function RegisterDeviceDropdownComponent_Factory(t) { return new (t || RegisterDeviceDropdownComponent)(ɵngcc0.ɵɵdirectiveInject(RegisterDeviceExtensionService), ɵngcc0.ɵɵdirectiveInject(RegisterDeviceService)); };
RegisterDeviceDropdownComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RegisterDeviceDropdownComponent, selectors: [["c8y-register-device-dropdown"]], decls: 10, vars: 5, consts: [["dropdown", "", 1, "dropdown"], ["class", "dropdown-toggle c8y-dropdown d-flex", "dropdownToggle", "", "aria-haspopup", "true", "aria-expanded", "false", 3, "title", 4, "ngIf", "ngIfElse"], ["disable", ""], ["class", "dropdown-menu dropdown-menu-right hidden-xs", 4, "dropdownMenu"], [1, "dropdown-menu", "dropdown-menu", "visible-xs"], [4, "ngTemplateOutlet"], ["dropdown", ""], ["dropdownToggle", "", "aria-haspopup", "true", "aria-expanded", "false", 1, "dropdown-toggle", "c8y-dropdown", "d-flex", 3, "title"], ["translate", "", 1, "text-truncate"], [3, "c8yIcon"], ["disabled", "", 1, "btn", "btn-clean", "d-flex", "p-l-8", 3, "title"], [1, "dropdown-menu", "dropdown-menu-right", "hidden-xs"], [4, "ngIf"], ["class", "dropdown-header", "translate", "", 4, "ngIf"], [4, "ngFor", "ngForOf"], ["translate", "", 1, "dropdown-header"], [4, "c8yOutlet"]], template: function RegisterDeviceDropdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, RegisterDeviceDropdownComponent_button_1_Template, 5, 4, "button", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtemplate(3, RegisterDeviceDropdownComponent_ng_template_3_Template, 5, 4, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(5, RegisterDeviceDropdownComponent_ul_5_Template, 2, 1, "ul", 3);
        ɵngcc0.ɵɵelementStart(6, "ul", 4);
        ɵngcc0.ɵɵtemplate(7, RegisterDeviceDropdownComponent_ng_container_7_Template, 1, 0, "ng-container", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, RegisterDeviceDropdownComponent_ng_template_8_Template, 4, 6, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(4);
        const _r5 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(2, 3, ctx.limit$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
    } }, directives: [ɵngcc11.BsDropdownDirective, ɵngcc7.NgIf, ɵngcc11.BsDropdownMenuDirective, ɵngcc7.NgTemplateOutlet, ɵngcc11.BsDropdownToggleDirective, ɵngcc3.C8yTranslateDirective, ɵngcc3.IconDirective, ɵngcc7.NgForOf, ɵngcc3.OutletDirective], pipes: [ɵngcc7.AsyncPipe, ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
RegisterDeviceDropdownComponent.ctorParameters = () => [
    { type: RegisterDeviceExtensionService },
    { type: RegisterDeviceService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegisterDeviceDropdownComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-register-device-dropdown',
                template: "<div class=\"dropdown\" dropdown>\n  <button\n    *ngIf=\"!(limit$ | async); else disable\"\n    title=\"{{ 'Register device' | translate }}\"\n    class=\"dropdown-toggle c8y-dropdown d-flex\"\n    dropdownToggle\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <span class=\"text-truncate\" translate>Register device</span>\n    <i [c8yIcon]=\"'caret-down'\"></i>\n  </button>\n  <ng-template #disable>\n    <button\n      title=\"{{ 'Device registration disabled' | translate }}\"\n      class=\"btn btn-clean d-flex p-l-8\"\n      disabled\n    >\n      <span class=\"text-truncate\" translate>Register device</span>\n      <i [c8yIcon]=\"'caret-down'\"></i>\n    </button>\n  </ng-template>\n\n  <!-- dropdown for normal screen sizes -->\n  <ul class=\"dropdown-menu dropdown-menu-right hidden-xs\" *dropdownMenu>\n    <ng-container *ngTemplateOutlet=\"dropdown\"></ng-container>\n  </ul>\n\n  <!-- fake dropdown for mobile screen sizes. *dropdownMenu is missing by design! -->\n  <ul class=\"dropdown-menu dropdown-menu visible-xs\">\n    <ng-container *ngTemplateOutlet=\"dropdown\"></ng-container>\n  </ul>\n\n  <ng-template #dropdown>\n    <ng-container *ngIf=\"single$ | async as single\">\n      <li class=\"dropdown-header\" *ngIf=\"single.length > 0\" translate>Single registration</li>\n      <li *ngFor=\"let item of single\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </li>\n    </ng-container>\n    <ng-container *ngIf=\"bulk$ | async as bulk\">\n      <li class=\"dropdown-header\" *ngIf=\"bulk.length > 0\" translate>Bulk registration</li>\n      <li *ngFor=\"let item of bulk\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </li>\n    </ng-container>\n  </ng-template>\n</div>\n"
            }]
    }], function () { return [{ type: RegisterDeviceExtensionService }, { type: RegisterDeviceService }]; }, null); })();

class DeviceRegistrationFactory {
    get() {
        return [{
                template: GeneralDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'single'
            }, {
                template: ExtensibleDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'single'
            }, {
                template: ExtensibleBulkDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'bulk'
            }, {
                template: BulkDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'bulk'
            }];
    }
}
DeviceRegistrationFactory.ɵfac = function DeviceRegistrationFactory_Factory(t) { return new (t || DeviceRegistrationFactory)(); };
DeviceRegistrationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceRegistrationFactory, factory: DeviceRegistrationFactory.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceRegistrationFactory, [{
        type: Injectable
    }], null, null); })();

const routes = [
    {
        path: 'deviceregistration',
        component: DeviceRegistrationViewComponent,
    }
];
class RegisterDeviceModule {
}
RegisterDeviceModule.ɵfac = function RegisterDeviceModule_Factory(t) { return new (t || RegisterDeviceModule)(); };
RegisterDeviceModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: RegisterDeviceModule });
RegisterDeviceModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{
            provide: HOOK_DEVICE_REGISTRATION,
            useClass: DeviceRegistrationFactory,
            multi: true
        },
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: RegisterDeviceNavigationFactory,
            multi: true
        },
        DeviceBootstrapRealtimeService,
        RegisterDeviceService,
        ExtensibleDeviceRegistrationService,
        BulkExtensibleDeviceRegistrationService,
    ], imports: [[BsDropdownModule, PopoverModule, CommonModule, CoreModule, StepperModule, DynamicFormsModule, RouterModule.forChild(routes)]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegisterDeviceModule, [{
        type: NgModule,
        args: [{
                imports: [BsDropdownModule, PopoverModule, CommonModule, CoreModule, StepperModule, DynamicFormsModule, RouterModule.forChild(routes)],
                declarations: [
                    DeviceRegistrationViewComponent,
                    GeneralDeviceRegistrationComponent,
                    GeneralDeviceRegistrationButtonComponent,
                    BulkDeviceRegistrationModalComponent,
                    BulkDeviceRegistrationButtonComponent,
                    ExtensibleDeviceRegistrationButtonComponent,
                    ExtensibleDeviceRegistrationModalComponent,
                    ExtensibleDeviceRegistrationStepperComponent,
                    ExtensibleBulkDeviceRegistrationModalComponent,
                    ExtensibleBulkDeviceRegistrationButtonComponent,
                    RegisterDeviceDropdownComponent
                ],
                providers: [{
                        provide: HOOK_DEVICE_REGISTRATION,
                        useClass: DeviceRegistrationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: RegisterDeviceNavigationFactory,
                        multi: true
                    },
                    DeviceBootstrapRealtimeService,
                    RegisterDeviceService,
                    ExtensibleDeviceRegistrationService,
                    BulkExtensibleDeviceRegistrationService,
                ],
                entryComponents: [
                    GeneralDeviceRegistrationComponent,
                    ExtensibleBulkDeviceRegistrationButtonComponent,
                    BulkDeviceRegistrationModalComponent,
                    ExtensibleDeviceRegistrationModalComponent,
                    RegisterDeviceDropdownComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RegisterDeviceModule, { declarations: function () { return [DeviceRegistrationViewComponent, GeneralDeviceRegistrationComponent, GeneralDeviceRegistrationButtonComponent, BulkDeviceRegistrationModalComponent, BulkDeviceRegistrationButtonComponent, ExtensibleDeviceRegistrationButtonComponent, ExtensibleDeviceRegistrationModalComponent, ExtensibleDeviceRegistrationStepperComponent, ExtensibleBulkDeviceRegistrationModalComponent, ExtensibleBulkDeviceRegistrationButtonComponent, RegisterDeviceDropdownComponent]; }, imports: function () { return [BsDropdownModule, PopoverModule, CommonModule, CoreModule, StepperModule, DynamicFormsModule, ɵngcc1.RouterModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceRegistrationFactory, GeneralDeviceRegistrationButtonComponent, GeneralDeviceRegistrationComponent, HOOK_DEVICE_REGISTRATION, RegisterDeviceExtensionService, RegisterDeviceModule, RegisterDeviceService, DeviceRegistrationViewComponent as ɵa, BulkDeviceRegistrationModalComponent as ɵb, BulkDeviceRegistrationButtonComponent as ɵc, ExtensibleDeviceRegistrationButtonComponent as ɵd, ExtensibleDeviceRegistrationService as ɵe, BaseExtensibleDeviceRegistrationService as ɵf, ExtensibleDeviceRegistrationModalComponent as ɵg, ExtensibleDeviceRegistrationStepperComponent as ɵh, ExtensibleBulkDeviceRegistrationModalComponent as ɵi, BulkExtensibleDeviceRegistrationService as ɵj, ExtensibleBulkDeviceRegistrationButtonComponent as ɵk, RegisterDeviceDropdownComponent as ɵl, RegisterDeviceNavigationFactory as ɵm };

//# sourceMappingURL=c8y-ngx-components-register-device.js.map