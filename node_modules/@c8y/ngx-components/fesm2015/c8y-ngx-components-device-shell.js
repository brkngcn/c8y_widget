import { EventEmitter, Component, Directive, ElementRef, Injector, Output, NgModule, Injectable } from '@angular/core';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { UpgradeComponent } from '@angular/upgrade/static';
import { gettext, OptionsService, OperationRealtimeService, ManagedObjectRealtimeService, AlertService, CoreModule, ViewContext, HOOK_ROUTE } from '@c8y/ngx-components';
import { __awaiter } from 'tslib';
import { ActivatedRoute } from '@angular/router';
import { OperationService } from '@c8y/client';
import { isEmpty, includes } from 'lodash-es';
import { of, BehaviorSubject, pipe, Subject } from 'rxjs';
import { map, startWith, takeUntil, filter } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { OperationsTimelineModule } from '@c8y/ngx-components/operations/operations-timeline';

/* https://stackoverflow.com/a/65290658 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@c8y/client';
import * as ɵngcc4 from '@angular/router';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '@angular/common';
import * as ɵngcc7 from '@c8y/ngx-components/operations/operations-timeline';

const _c0 = function (a0) { return { deliveryType: a0 }; };
function DeviceShellComponent_ng_container_20_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 20);
    ɵngcc0.ɵɵlistener("click", function DeviceShellComponent_ng_container_20_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const deliveryType_r5 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.execute(deliveryType_r5.name); });
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵelementStart(2, "span", 21);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deliveryType_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", !(ctx_r6.command == null ? null : ctx_r6.command.text) || ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r6.sendingCommand$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("title", deliveryType_r5.default ? ɵngcc0.ɵɵpipeBind1(3, 5, "Execute") : ɵngcc0.ɵɵpipeBind2(4, 7, ctx_r6.executeViaLabel, ɵngcc0.ɵɵpureFunction1(15, _c0, deliveryType_r5.name)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", deliveryType_r5.default ? ɵngcc0.ɵɵpipeBind1(6, 10, "Execute") : ɵngcc0.ɵɵpipeBind2(7, 12, ctx_r6.executeViaLabel, ɵngcc0.ɵɵpureFunction1(17, _c0, deliveryType_r5.name)), " ");
} }
function DeviceShellComponent_ng_container_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DeviceShellComponent_ng_container_20_button_1_Template, 8, 19, "button", 19);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const deliveryType_r5 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", deliveryType_r5.isSupportedByCommand);
} }
function DeviceShellComponent_ng_template_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate((operation_r11.c8y_Command == null ? null : operation_r11.c8y_Command.text) || operation_r11.description);
} }
function DeviceShellComponent_ng_template_30_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵtext(2, "Command");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "pre", 24);
    ɵngcc0.ɵɵtext(4, "              ");
    ɵngcc0.ɵɵelementStart(5, "code");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(7, "\n          ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r12 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(operation_r12.c8y_Command.text);
} }
function DeviceShellComponent_ng_template_30_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵtext(2, "Response");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "pre", 24);
    ɵngcc0.ɵɵtext(4, "              ");
    ɵngcc0.ɵɵelementStart(5, "code");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(7, "\n          ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r12 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(operation_r12.c8y_Command.result);
} }
function DeviceShellComponent_ng_template_30_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DeviceShellComponent_ng_template_30_div_0_Template, 8, 1, "div", 22);
    ɵngcc0.ɵɵtemplate(1, DeviceShellComponent_ng_template_30_div_1_Template, 8, 1, "div", 22);
} if (rf & 2) {
    const operation_r12 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", operation_r12.c8y_Command == null ? null : operation_r12.c8y_Command.text);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", operation_r12.c8y_Command == null ? null : operation_r12.c8y_Command.result);
} }
const _c1 = function (a0) { return [a0]; };
const _c2 = function () { return ["c8y_Command"]; };
function rootScopeFactory($injector) {
    return $injector.get('$rootScope').$new();
}
class CommandTemplatesComponent {
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.onTemplateSelected = new EventEmitter();
    }
}
CommandTemplatesComponent.ɵfac = function CommandTemplatesComponent_Factory(t) { return new (t || CommandTemplatesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef)); };
CommandTemplatesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CommandTemplatesComponent, selectors: [["c8y-command-templates"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                deps: ['$injector'],
                provide: '$scope',
                useFactory: rootScopeFactory
            }
        ])], decls: 1, vars: 0, consts: [[3, "close", "dismiss"]], template: function CommandTemplatesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-command-templates-directive", 0);
        ɵngcc0.ɵɵlistener("close", function CommandTemplatesComponent_Template_c8y_command_templates_directive_close_0_listener($event) { ctx.modalRef.hide(); return ctx.onTemplateSelected.next($event); })("dismiss", function CommandTemplatesComponent_Template_c8y_command_templates_directive_dismiss_0_listener() { return ctx.modalRef.hide(); });
        ɵngcc0.ɵɵelementEnd();
    } }, directives: function () { return [CommandTemplates]; }, encapsulation: 2 });
CommandTemplatesComponent.ctorParameters = () => [
    { type: BsModalRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommandTemplatesComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-command-templates',
                template: `<c8y-command-templates-directive
    (close)="modalRef.hide(); onTemplateSelected.next($event)"
    (dismiss)="modalRef.hide()"
  ></c8y-command-templates-directive>`,
                providers: [
                    {
                        deps: ['$injector'],
                        provide: '$scope',
                        useFactory: rootScopeFactory
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.BsModalRef }]; }, null); })();

class CommandTemplates extends UpgradeComponent {
    constructor(elementRef, injector) {
        super('c8yCommandTemplates', elementRef, injector);
    }
}
CommandTemplates.ɵfac = function CommandTemplates_Factory(t) { return new (t || CommandTemplates)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
CommandTemplates.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CommandTemplates, selectors: [["c8y-command-templates-directive"]], outputs: { close: "close", dismiss: "dismiss" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
CommandTemplates.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
CommandTemplates.propDecorators = {
    close: [{ type: Output }],
    dismiss: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommandTemplates, [{
        type: Directive,
        args: [{
                selector: 'c8y-command-templates-directive'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Injector }]; }, { close: [{
            type: Output
        }], dismiss: [{
            type: Output
        }] }); })();

class CommandTemplatesModule {
}
CommandTemplatesModule.ɵfac = function CommandTemplatesModule_Factory(t) { return new (t || CommandTemplatesModule)(); };
CommandTemplatesModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CommandTemplatesModule });
CommandTemplatesModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommandTemplatesModule, [{
        type: NgModule,
        args: [{
                declarations: [CommandTemplates, CommandTemplatesComponent],
                exports: [CommandTemplatesComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CommandTemplatesModule, { declarations: [CommandTemplates, CommandTemplatesComponent], exports: [CommandTemplatesComponent] }); })();

class DeviceShellGuard {
    constructor() {
        this.operation = 'c8y_Command';
    }
    canActivate(route) {
        const device = route.data.contextData || route.parent.data.contextData;
        const supportedOperations = (device && device.c8y_SupportedOperations) || [];
        return supportedOperations.indexOf(this.operation) >= 0;
    }
}
DeviceShellGuard.ɵfac = function DeviceShellGuard_Factory(t) { return new (t || DeviceShellGuard)(); };
DeviceShellGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceShellGuard, factory: DeviceShellGuard.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceShellGuard, [{
        type: Injectable
    }], function () { return []; }, null); })();

var CommandDeliveryType;
(function (CommandDeliveryType) {
    CommandDeliveryType["DEFAULT"] = "Default";
    CommandDeliveryType["SMS"] = "SMS";
})(CommandDeliveryType || (CommandDeliveryType = {}));

class DeviceShellService {
    constructor(optionsService, operationService) {
        this.optionsService = optionsService;
        this.operationService = operationService;
    }
    getDeliveryTypes() {
        return [
            {
                name: gettext(CommandDeliveryType.DEFAULT),
                default: true
            },
            {
                name: gettext(CommandDeliveryType.SMS)
            }
        ];
    }
    canSendCommandsViaSMS() {
        return this.optionsService.getSystemOption('messaging', 'provider', false);
    }
    createCommandOperation(deviceId, command, deliveryType) {
        const operation = {
            deviceId,
            description: gettext('Execute shell command') + (command.name ? `: ${command.name}` : ''),
            deliveryType: deliveryType === CommandDeliveryType.SMS ? CommandDeliveryType.SMS : undefined,
            c8y_Command: {
                text: command.text
            }
        };
        return this.operationService.create(operation);
    }
}
DeviceShellService.ɵfac = function DeviceShellService_Factory(t) { return new (t || DeviceShellService)(ɵngcc0.ɵɵinject(ɵngcc2.OptionsService), ɵngcc0.ɵɵinject(ɵngcc3.OperationService)); };
DeviceShellService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceShellService, factory: DeviceShellService.ɵfac });
DeviceShellService.ctorParameters = () => [
    { type: OptionsService },
    { type: OperationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceShellService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.OptionsService }, { type: ɵngcc3.OperationService }]; }, null); })();

class DeviceShellSharedModule {
}
DeviceShellSharedModule.ɵfac = function DeviceShellSharedModule_Factory(t) { return new (t || DeviceShellSharedModule)(); };
DeviceShellSharedModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceShellSharedModule });
DeviceShellSharedModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [DeviceShellService] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceShellSharedModule, [{
        type: NgModule,
        args: [{
                providers: [DeviceShellService]
            }]
    }], null, null); })();

class DeviceShellComponent {
    constructor(service, operationRealtime, moRealtime, operationService, route, modalService, alertService) {
        this.service = service;
        this.operationRealtime = operationRealtime;
        this.moRealtime = moRealtime;
        this.operationService = operationService;
        this.route = route;
        this.modalService = modalService;
        this.alertService = alertService;
        this.device = this.route.snapshot.parent.data.contextData;
        this.device$ = of({});
        this.deliveryTypes = (this.service.getDeliveryTypes() || []).map(deliveryType => (Object.assign(Object.assign({}, deliveryType), { isSupportedByCommand: true })));
        this.command = {};
        this.smsEnabled = false;
        this.sendingCommand$ = new BehaviorSubject(false);
        this.filterPipe = pipe(map((operations) => (operations || []).filter((operation) => !!operation.c8y_Command)));
        this.executeViaLabel = gettext('Execute via ({{deliveryType}})');
        this.destroyed$ = new Subject();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.smsEnabled = yield this.service.canSendCommandsViaSMS();
            this.device$ = this.moRealtime.onUpdate$(this.device.id).pipe(startWith(this.device));
            this.operations = yield this.operationService.list({
                deviceId: this.device.id,
                fragmentType: 'c8y_Command',
                dateFrom: new Date(0).toISOString(),
                dateTo: new Date().toISOString(),
                pageSize: 50,
                withTotalPages: true,
                revert: true
            });
            this.operationRealtime
                .onCreate$(this.device.id)
                .pipe(takeUntil(this.destroyed$))
                .subscribe(() => this.alertService.success(gettext('Command sent.')));
            this.operationRealtime
                .onUpdate$(this.device.id)
                .pipe(filter(op => op.failureReason !== 'Operation cancelled by user.'), // avoid duplicate alerts
            takeUntil(this.destroyed$))
                .subscribe(() => this.alertService.success(gettext('Command status updated.')));
        });
    }
    getPredefinedCommand() {
        const modal = this.modalService.show(CommandTemplatesComponent);
        modal.content.onTemplateSelected.pipe(takeUntil(this.destroyed$)).subscribe(result => {
            this.command = Object.assign({}, result.commandTemplate);
            this.deliveryTypes = this.deliveryTypes.map(deliveryType => (Object.assign(Object.assign({}, deliveryType), { isSupportedByCommand: isEmpty(this.command.deliveryTypes) ||
                    includes(this.command.deliveryTypes, deliveryType.name) })));
        });
    }
    resetSupportedDeliveryTypes() {
        this.deliveryTypes = (this.service.getDeliveryTypes() || []).map(deliveryType => (Object.assign(Object.assign({}, deliveryType), { isSupportedByCommand: true })));
    }
    execute(commandDeliveryType) {
        return __awaiter(this, void 0, void 0, function* () {
            const useSMS = commandDeliveryType === CommandDeliveryType.SMS;
            if (useSMS && !this.smsEnabled) {
                this.alertService.warning(gettext('SMS transport is not configured.'));
                return;
            }
            this.sendingCommand$.next(true);
            yield this.service.createCommandOperation(this.device.id, this.command, commandDeliveryType);
            this.command.text = '';
            this.resetSupportedDeliveryTypes();
            this.sendingCommand$.next(false);
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
DeviceShellComponent.ɵfac = function DeviceShellComponent_Factory(t) { return new (t || DeviceShellComponent)(ɵngcc0.ɵɵdirectiveInject(DeviceShellService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OperationRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ManagedObjectRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OperationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService)); };
DeviceShellComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceShellComponent, selectors: [["c8y-device-shell"]], features: [ɵngcc0.ɵɵProvidersFeature([OperationRealtimeService, ManagedObjectRealtimeService])], decls: 32, vars: 28, consts: [[3, "placement"], [3, "service"], [1, "card", "content-fullpage", "d-grid", "grid__col--6-6--md"], [1, "inner-scroll", "d-flex", "d-col", "bg-white"], [1, "card-header", "large-padding", "separator", "sticky-top"], [1, "card-title"], [1, "card-block", "d-flex", "d-col", "flex-grow", "large-padding"], [1, "flex-row", "p-b-16"], ["type", "button", 1, "btn", "btn-default", "btn-sm", 3, "title", "click"], [1, "flex-item-right"], [3, "mo"], [1, "form-control", "inner-scroll", "flex-grow", "bg-gray-lighter", 3, "ngModel", "ngModelChange"], [1, "card-footer", "large-padding", "separator"], [4, "ngFor", "ngForOf"], [1, "inner-scroll", "bg-gray-white"], [1, "card-block", "large-padding"], [3, "operations", "sourceId", "filterPipe", "bodyTemplate", "footerTemplates", "propertiesToHide"], ["timelineItemBody", ""], ["timelineItemFooter", ""], ["class", "btn btn-primary", "type", "button", 3, "disabled", "click", 4, "ngIf"], ["type", "button", 1, "btn", "btn-primary", 3, "disabled", "click"], [3, "title"], [4, "ngIf"], ["translate", "", 1, "legend", "form-block"], [1, "text-pre-normal"]], template: function DeviceShellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelement(1, "c8y-realtime-btn", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "h4", 5);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "button", 8);
        ɵngcc0.ɵɵlistener("click", function DeviceShellComponent_Template_button_click_10_listener() { return ctx.getPredefinedCommand(); });
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵelement(15, "device-status", 10);
        ɵngcc0.ɵɵpipe(16, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "textarea", 11);
        ɵngcc0.ɵɵlistener("ngModelChange", function DeviceShellComponent_Template_textarea_ngModelChange_17_listener($event) { return ctx.command.text = $event; })("ngModelChange", function DeviceShellComponent_Template_textarea_ngModelChange_17_listener($event) { return $event || ctx.resetSupportedDeliveryTypes(); });
        ɵngcc0.ɵɵtext(18, "      ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "div", 12);
        ɵngcc0.ɵɵtemplate(20, DeviceShellComponent_ng_container_20_Template, 2, 1, "ng-container", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 14);
        ɵngcc0.ɵɵelementStart(22, "div", 4);
        ɵngcc0.ɵɵelementStart(23, "h4", 5);
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "div", 15);
        ɵngcc0.ɵɵelement(27, "c8y-operations-timeline", 16);
        ɵngcc0.ɵɵtemplate(28, DeviceShellComponent_ng_template_28_Template, 2, 1, "ng-template", null, 17, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(30, DeviceShellComponent_ng_template_30_Template, 2, 2, "ng-template", null, 18, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(29);
        const _r3 = ɵngcc0.ɵɵreference(31);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("service", ctx.operationRealtime);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 15, "Command"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(11, 17, "Display a list of predefined commands"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 19, "Predefined commands"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("mo", ɵngcc0.ɵɵpipeBind1(16, 21, ctx.device$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.command.text);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.deliveryTypes);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(25, 23, "Operations"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("operations", ctx.operations)("sourceId", ctx.device.id)("filterPipe", ctx.filterPipe)("bodyTemplate", _r1)("footerTemplates", ɵngcc0.ɵɵpureFunction1(25, _c1, _r3))("propertiesToHide", ɵngcc0.ɵɵpureFunction0(27, _c2));
    } }, directives: [ɵngcc2.ActionBarItemComponent, ɵngcc2.RealtimeButtonComponent, ɵngcc2.DeviceStatusComponent, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc6.NgForOf, ɵngcc7.OperationsTimelineComponent, ɵngcc6.NgIf, ɵngcc2.C8yTranslateDirective], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc6.AsyncPipe], encapsulation: 2 });
DeviceShellComponent.ctorParameters = () => [
    { type: DeviceShellService },
    { type: OperationRealtimeService },
    { type: ManagedObjectRealtimeService },
    { type: OperationService },
    { type: ActivatedRoute },
    { type: BsModalService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceShellComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-shell',
                template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"operationRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card content-fullpage d-grid grid__col--6-6--md\">\n  <div class=\"inner-scroll d-flex d-col bg-white\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <h4 class=\"card-title\">\n        {{ 'Command' | translate }}\n      </h4>\n    </div>\n\n    <div class=\"card-block d-flex d-col flex-grow large-padding\">\n      <div class=\"flex-row p-b-16\">\n        <button\n          class=\"btn btn-default btn-sm\"\n          type=\"button\"\n          (click)=\"getPredefinedCommand()\"\n          [title]=\"'Display a list of predefined commands' | translate\"\n        >\n          {{ 'Predefined commands' | translate }}\n        </button>\n\n        <div class=\"flex-item-right\">\n          <device-status [mo]=\"device$ | async\"></device-status>\n        </div>\n      </div>\n      <textarea\n        class=\"form-control inner-scroll flex-grow bg-gray-lighter\"\n        [(ngModel)]=\"command.text\"\n        (ngModelChange)=\"$event || resetSupportedDeliveryTypes()\"\n      >\n      </textarea>\n    </div>\n\n    <div class=\"card-footer large-padding separator\">\n      <ng-container *ngFor=\"let deliveryType of deliveryTypes\">\n        <button\n          class=\"btn btn-primary\"\n          type=\"button\"\n          *ngIf=\"deliveryType.isSupportedByCommand\"\n          [disabled]=\"!command?.text || (sendingCommand$ | async)\"\n          (click)=\"execute(deliveryType.name)\"\n        >\n          <span\n            [title]=\"\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            \"\n          >\n            {{\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            }}\n          </span>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"inner-scroll bg-gray-white\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <h4 class=\"card-title\">\n        {{ 'Operations' | translate }}\n      </h4>\n    </div>\n    <div class=\"card-block large-padding\">\n      <c8y-operations-timeline\n        [operations]=\"operations\"\n        [sourceId]=\"device.id\"\n        [filterPipe]=\"filterPipe\"\n        [bodyTemplate]=\"timelineItemBody\"\n        [footerTemplates]=\"[timelineItemFooter]\"\n        [propertiesToHide]=\"['c8y_Command']\"\n      ></c8y-operations-timeline>\n      <ng-template #timelineItemBody let-operation>\n        <small>{{ operation.c8y_Command?.text || operation.description }}</small>\n      </ng-template>\n      <ng-template #timelineItemFooter let-operation>\n        <div *ngIf=\"operation.c8y_Command?.text\">\n          <div class=\"legend form-block\" translate>Command</div>\n          <pre class=\"text-pre-normal\">\n              <code>{{operation.c8y_Command.text}}</code>\n          </pre>\n        </div>\n        <div *ngIf=\"operation.c8y_Command?.result\">\n          <div class=\"legend form-block\" translate>Response</div>\n          <pre class=\"text-pre-normal\">\n              <code>{{operation.c8y_Command.result}}</code>\n          </pre>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n",
                providers: [OperationRealtimeService, ManagedObjectRealtimeService]
            }]
    }], function () { return [{ type: DeviceShellService }, { type: ɵngcc2.OperationRealtimeService }, { type: ɵngcc2.ManagedObjectRealtimeService }, { type: ɵngcc3.OperationService }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.BsModalService }, { type: ɵngcc2.AlertService }]; }, null); })();

class ShellModule {
}
ShellModule.ɵfac = function ShellModule_Factory(t) { return new (t || ShellModule)(); };
ShellModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ShellModule });
ShellModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            CoreModule,
            OperationsTimelineModule,
            CommandTemplatesModule,
            DeviceShellSharedModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShellModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    CoreModule,
                    OperationsTimelineModule,
                    CommandTemplatesModule,
                    DeviceShellSharedModule
                ],
                declarations: [DeviceShellComponent],
                exports: [DeviceShellComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShellModule, { declarations: function () { return [DeviceShellComponent]; }, imports: function () { return [CommonModule,
        CoreModule,
        OperationsTimelineModule, CommandTemplatesModule, DeviceShellSharedModule]; }, exports: function () { return [DeviceShellComponent]; } }); })();

const DEVICE_SHELL_ROUTE = {
    path: 'shell',
    context: ViewContext.Device,
    component: DeviceShellComponent,
    label: gettext('Shell'),
    icon: 'terminal',
    canActivate: [DeviceShellGuard]
};
const ɵ0 = DEVICE_SHELL_ROUTE;
class DeviceShellModule {
}
DeviceShellModule.ɵfac = function DeviceShellModule_Factory(t) { return new (t || DeviceShellModule)(); };
DeviceShellModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceShellModule });
DeviceShellModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        DeviceShellGuard,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[ShellModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceShellModule, [{
        type: NgModule,
        args: [{
                imports: [ShellModule],
                providers: [
                    DeviceShellGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceShellModule, { imports: [ShellModule] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { CommandDeliveryType, CommandTemplates, CommandTemplatesComponent, CommandTemplatesModule, DeviceShellComponent, DeviceShellGuard, DeviceShellModule, DeviceShellService, DeviceShellSharedModule, ShellModule, rootScopeFactory, ɵ0, ShellModule as ɵa, DeviceShellComponent as ɵb };

//# sourceMappingURL=c8y-ngx-components-device-shell.js.map