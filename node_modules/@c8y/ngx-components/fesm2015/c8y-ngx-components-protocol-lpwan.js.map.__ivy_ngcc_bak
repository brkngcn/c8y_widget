{"version":3,"file":"c8y-ngx-components-protocol-lpwan.js","sources":["../../protocol-lpwan/multiple-lns-connectors/no-connections-found.component.ts","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connector.model.ts","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connector.service.ts","../../protocol-lpwan/multiple-lns-connectors/connection-info-with-download-csv.component.ts","../../protocol-lpwan/multiple-lns-connectors/sigfox-multiple-lns-connector.component.ts","../../protocol-lpwan/multiple-lns-connectors/actility-multiple-lns-connector.component.ts","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connectors.module.ts","../../protocol-lpwan/lpwan-set-device-protocol.service.ts","../../protocol-lpwan/lpwan-set-device-protocol.component.ts","../../protocol-lpwan/lpwan-agent.guard.ts","../../protocol-lpwan/lpwan-set-connections.component.ts","../../protocol-lpwan/lpwan-protocol.module.ts","../../protocol-lpwan/c8y-ngx-components-protocol-lpwan.ts"],"sourcesContent":["import { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\n@Component({\n  selector: 'no-connections-found',\n  templateUrl: './no-connections-found.component.html'\n})\nexport class NoConnectionsFoundComponent {\n  @Output() onAction: EventEmitter<void> = new EventEmitter();\n  @Input() header: string = gettext('Connections');\n\n  addConnection() {\n    this.onAction.emit();\n  }\n}\n","export enum ConnectionType {\n  ACTILITY,\n  SIGFOX\n}\nexport interface Connection {\n  name: string;\n  baseUrl: string;\n  username: string;\n  password: string;\n  description: string;\n}\nexport interface SigfoxConnection extends Connection {\n  parentGroupId: string;\n}\nexport interface ActilityConnection extends Connection {\n  profileId: string;\n  routeApplicationServerId?: string;\n  routeApplicationServerKey?: string;\n  adminApiVersion: string;\n  coreApiVersion: string;\n}\nexport function isSigfoxConnection(\n  connection: SigfoxConnection | ActilityConnection\n): connection is SigfoxConnection {\n  return typeof (connection as SigfoxConnection).parentGroupId !== 'undefined';\n}\nexport function isActilityConnection(\n  connection: SigfoxConnection | ActilityConnection\n): connection is ActilityConnection {\n  return typeof (connection as ActilityConnection).profileId !== 'undefined';\n}\n\nexport type State =\n  | 'loadingConnection'\n  | 'loadingError'\n  | 'connectionAvailable'\n  | 'connectionNotAvailable'\n  | 'addConnections'\n  | 'savedSuccessfully'\n  | 'updateConnection';\n","import { Injectable } from '@angular/core';\nimport { FetchClient, IApplication, IFetchOptions, IFetchResponse } from '@c8y/client';\nimport { AlertService, AppStateService } from '@c8y/ngx-components';\nimport { ActilityConnection, isActilityConnection, isSigfoxConnection, SigfoxConnection, ConnectionType } from './multiple-lns-connector.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MultipleLnsConnectorService {\n  private headers: any;\n  constructor(\n    private client: FetchClient,\n    private appStateService: AppStateService,\n    private alertService: AlertService\n  ) {\n    this.headers = { 'Content-Type': 'application/json' };\n  }\n\n  async list(connectionType: ConnectionType) {\n    const url = `${this.getBaseUrlByType(connectionType)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers\n    };\n    return this.client.fetch(url, options);\n  }\n\n  /**\n   * Saves the connection.\n   * @param connection The connection to be saved.\n   * @param originalName The original name of the connection, required to perform an update.\n   */\n  async save(connection: ActilityConnection | SigfoxConnection, originalName: string = null) {\n    if (originalName) {\n      return this.update(connection, originalName);\n    }\n    return this.create(connection);\n  }\n\n  async detail(\n    connectionType: ConnectionType,\n    connectionName: string\n  ): Promise<ActilityConnection | SigfoxConnection | null> {\n    const name = connectionName.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByType(connectionType)}/lns-connection/${encodeURIComponent(String(name))}`;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers\n    };\n    const res = await this.client.fetch(url, options);\n    if (res.status === 200) {\n      return await res.json();\n    }\n    return null;\n  }\n\n  async exists(connectionType: ConnectionType, connectionName: string): Promise<boolean> {\n    const connection = await this.detail(connectionType, connectionName);\n    return connection !== null;\n  }\n\n  async create(connection: ActilityConnection | SigfoxConnection) {\n    connection.name = connection.name.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(connection)\n    };\n    return this.client.fetch(url, options);\n  }\n\n  async update(connection: ActilityConnection | SigfoxConnection, originalName: string) {\n    connection.name = connection.name.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection/${encodeURIComponent(String(originalName))}`;\n    const options: IFetchOptions = {\n      method: 'PUT',\n      headers: this.headers,\n      body: JSON.stringify(connection)\n    };\n    return this.client.fetch(url, options);\n  }\n\n  getBaseUrlByConnection(connection: ActilityConnection | SigfoxConnection) {\n    return isSigfoxConnection(connection)\n      ? 'service/sigfox-agent'\n      : isActilityConnection(connection)\n      ? 'service/actility'\n      : '';\n  }\n\n  getBaseUrlByType(connectionType: ConnectionType) {\n    return (connectionType === ConnectionType.SIGFOX)\n      ? 'service/sigfox-agent'\n      : (connectionType === ConnectionType.ACTILITY)\n      ? 'service/actility'\n      : '';\n  }\n\n  async delete(connection: ActilityConnection | SigfoxConnection) {\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'DELETE'\n    };\n    return this.client.fetch(`${url}/${encodeURIComponent(String(connection.name))}`, options);\n  }\n\n  getApplication(name: string): Partial<IApplication> {\n    const { references } = this.appStateService.currentTenant.value.applications;\n    return references.find(({ application }) => application.name === name).application;\n  }\n\n  async download(url: string): Promise<IFetchResponse> {\n    try {\n      const options: IFetchOptions = {\n        method: 'GET'\n      };\n      return this.client.fetch(url, options);\n    } catch (e) {\n      this.alertService.addServerFailure(e);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { saveAs } from 'file-saver';\nimport { IApplication } from '@c8y/client';\n\n@Component({\n  selector: 'connection-info-with-download-csv',\n  templateUrl: './connection-info-with-download-csv.component.html'\n})\nexport class ConnectionInfoWithDownloadCsvComponent {\n  @Input() messageData: any;\n  @Input() appData: IApplication;\n  @Input() modalTitle: string;\n  constructor(private modal: BsModalRef, private connectorService: MultipleLnsConnectorService) {}\n\n  dismiss() {\n    this.modal.hide();\n  }\n\n  async download() {\n    const url = `/service/${this.appData.contextPath}${this.messageData.URL}`;\n    const res = await this.connectorService.download(url);\n    const streamData = await res.blob();\n    saveAs(streamData, 'DeviceList.csv');\n  }\n}\n","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { head, orderBy, findIndex } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ConnectionType, SigfoxConnection, State } from './multiple-lns-connector.model';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'sigfox-multiple-lns-connector',\n  templateUrl: './sigfox-multiple-lns-connector.component.html'\n})\nexport class SigfoxMultipleLnsConnectorComponent implements OnInit {\n  state: State = 'loadingConnection';\n  connection = {} as SigfoxConnection;\n  connections = Array<SigfoxConnection>();\n  showPassword: boolean = false;\n  @ViewChild('connectorsForm', { static: false }) connectorsForm: NgForm;\n  connectionBeingEdited: string;\n  cardHeader = gettext('Sigfox connections');\n\n  constructor(\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modalService: BsModalService,\n    private modal: ModalService\n  ) {}\n\n  async ngOnInit() {\n    await this.loadConnections();\n  }\n\n  async loadConnections() {\n    const res = await this.connectorService.list(ConnectionType.SIGFOX);\n    if (res && res.status !== 200) {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n      this.state = 'loadingError';\n    } else {\n      const list = await res.json();\n      this.connections = orderBy(list, ['name'], ['asc']);\n      await this.setModel();\n    }\n  }\n\n  async setModel(connectionObj = null) {\n    await this.resetEditedUnsavedConnection();\n    this.connection = connectionObj\n      ? connectionObj\n      : this.state === 'savedSuccessfully'\n      ? this.connection\n      : head(this.connections);\n    this.state = 'updateConnection';\n    this.showPassword = false;\n    this.connectionBeingEdited = this.connection ? this.connection.name : undefined;\n  }\n\n  async resetEditedUnsavedConnection() {\n    const originalConnectionIndex = (!this.connection) ? 0 : findIndex(this.connections, { name: this.connectionBeingEdited });\n    if (this.connectionBeingEdited && this.state === 'updateConnection') {\n      const isConnectionExist = await this.connectorService.detail(\n        ConnectionType.SIGFOX,\n        this.connectionBeingEdited\n      );\n      this.connections[originalConnectionIndex] = isConnectionExist as SigfoxConnection;\n    }\n  }\n\n  async addConnection() {\n    await this.resetEditedUnsavedConnection();\n    this.connection = {} as SigfoxConnection;\n    this.connectionBeingEdited = '';\n    this.state = 'addConnections';\n    this.showPassword = true;\n  }\n\n  async save() {\n    const checkForConnectionName =\n      (this.connectionBeingEdited && this.connectionBeingEdited !== '') ? this.connectionBeingEdited : this.connection.name;\n    const isConnectionExist = await this.connectorService.exists(\n      ConnectionType.SIGFOX,\n      checkForConnectionName\n    );\n    if (this.state === 'addConnections' && isConnectionExist) {\n      const mesg = this.translateService.instant(\n        gettext(`Connection with name \"{{ name }}\" already exists.`),\n        { name: this.connection.name }\n      );\n      this.alertService.danger(mesg);\n    } else {\n      this.saveConnection();\n    }\n  }\n\n  async deleteConnection(connection) {\n    const mesg = this.translateService.instant(\n      gettext(`You are about to delete the connection \"{{ name }}\". Do you want to proceed?`),\n      { name: connection.name }\n    );\n\n    try {\n      await this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {\n        ok: gettext('Delete'),\n        cancel: gettext('Cancel')\n      });\n\n      await this.delete(connection);\n\n    } catch (error) {\n      // empty catch block\n    }\n  }\n\n  changePassword() {\n    this.showPassword = !this.showPassword;\n    if (this.connectorsForm.controls.password) {\n      this.connectorsForm.controls.password.setValue(null);\n    }\n  }\n\n  private async saveConnection() {\n    let res;\n    res = await this.connectorService.save(this.connection, this.connectionBeingEdited);\n    if (res && (res.status === 201 || res.status === 200)) {\n      this.state = 'savedSuccessfully';\n      this.alertService.success(gettext('Connection saved.'));\n      await this.loadConnections();\n    } else if (res && res.status === 500) {\n      const data = res.json ? await res.json() : undefined;\n      const app = this.connectorService.getApplication('sigfox-agent');\n      const initialState = {\n        messageData: data,\n        appData: app,\n        modalTitle: gettext('Failed to update the connection')\n      };\n      this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n    } else {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n    }\n  }\n\n  private async delete(connection) {\n    try {\n      const response = await this.connectorService.delete(connection);\n\n      if (response.ok && response.status === 204) {\n        this.alertService.success(gettext('Connection deleted.'));\n        await this.loadConnections();\n      } else if (response && response.status === 500) {\n        const data = response.json ? await response.json() : undefined;\n        const app = this.connectorService.getApplication('sigfox-agent');\n        const initialState = {\n          messageData: data,\n          appData: app,\n          modalTitle: gettext('Failed to delete the connection')\n        };\n        this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n      } else {\n        const data = response.json ? await response.json() : undefined;\n        this.alertService.addServerFailure({ data, response });\n      }\n    } catch (error) {\n      // empty catch block\n    }\n  }\n}\n","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { head, orderBy, findIndex } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ActilityConnection, ConnectionType, State } from './multiple-lns-connector.model';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'actility-multiple-lns-connector',\n  templateUrl: './actility-multiple-lns-connector.component.html'\n})\nexport class ActilityMultipleLnsConnectorComponent implements OnInit {\n  state: State = 'loadingConnection';\n  connection = {} as ActilityConnection;\n  connections = Array<ActilityConnection>();\n  @ViewChild('connectorsForm', { static: false }) connectorsForm: NgForm;\n  connectionBeingEdited: string;\n  showPassword: boolean = false;\n  cardHeader = gettext('Actility connections');\n\n  constructor(\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modal: ModalService,\n    private modalService: BsModalService\n  ) {\n\n  }\n\n  async ngOnInit() {\n    await this.loadConnections();\n  }\n\n  async loadConnections() {\n    const res = await this.connectorService.list(ConnectionType.ACTILITY);\n    if (res && res.status !== 200) {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n      this.state = 'loadingError';\n    } else {\n      const list = await res.json();\n      this.connections = orderBy(list, ['name'], ['asc']);\n      await this.setModel();\n    }\n  }\n\n  async setModel(connectionObj = null) {\n    await this.resetEditedUnsavedConnection();\n    this.connection = connectionObj\n      ? connectionObj\n      : this.state === 'savedSuccessfully'\n      ? this.connection\n      : head(this.connections);\n    this.state = 'updateConnection';\n    this.showPassword = false;\n    this.connectionBeingEdited = (this.connection) ? this.connection.name : undefined;\n  }\n\n  async setAdminAndCoreApiVersion() {\n      this.connection.adminApiVersion = 'latest';\n      this.connection.coreApiVersion = 'latest';\n  }\n\n  async resetEditedUnsavedConnection() {\n    const originalConnectionIndex = (!this.connection) ? 0 : findIndex(this.connections, { name: this.connectionBeingEdited });\n    if (this.connectionBeingEdited && this.state === 'updateConnection') {\n      const isConnectionExist = await this.connectorService.detail(\n        ConnectionType.ACTILITY,\n        this.connectionBeingEdited\n      );\n      this.connections[originalConnectionIndex] = isConnectionExist as ActilityConnection;\n    }\n  }\n\n  async addConnection() {\n    await this.resetEditedUnsavedConnection();\n    this.connection = {} as ActilityConnection;\n    this.connectionBeingEdited = '';\n    this.state = 'addConnections';\n    this.showPassword = true;\n    await this.setAdminAndCoreApiVersion();\n  }\n\n  async save() {\n    const checkForConnectionName =\n      this.connectionBeingEdited !== '' ? this.connectionBeingEdited : this.connection.name;\n    const isConnectionExist = await this.connectorService.exists(\n      ConnectionType.ACTILITY,\n      checkForConnectionName\n    );\n    if (\n      this.state === 'addConnections' && isConnectionExist\n    ) {\n      const mesg = this.translateService.instant(\n        gettext(`Connection with name \"{{ name }}\" already exists.`),\n        { name: this.connection.name }\n      );\n      this.alertService.danger(mesg);\n    } else {\n      this.saveConnection();\n    }\n  }\n\n  async deleteConnection(connection) {\n    const mesg = this.translateService.instant(\n      gettext(`You are about to delete the connection \"{{ name }}\". Do you want to proceed?`),\n      { name: connection.name }\n    );\n\n    try {\n      await this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {\n        ok: gettext('Delete'),\n        cancel: gettext('Cancel')\n      });\n\n      await this.delete(connection);\n    } catch (error) {\n      // empty catch block\n    }\n  }\n\n  changePassword() {\n    this.showPassword = !this.showPassword;\n    if (this.connectorsForm.controls.password) {\n    this.connectorsForm.controls.password.setValue(null);\n    }\n  }\n\n  async saveConnection() {\n    let res;\n    res = await this.connectorService.save(\n      this.connection,\n      this.connectionBeingEdited\n    );\n    if (res && (res.status === 201 || res.status === 200)) {\n      this.state = 'savedSuccessfully';\n      this.alertService.success(gettext('Connection saved.'));\n      await this.loadConnections();\n    } else if (res && res.status === 500) {\n      const data = res.json ? await res.json() : undefined;\n      const app = this.connectorService.getApplication('sigfox-agent');\n      const initialState = {\n        messageData: data,\n        appData: app,\n        modalTitle: gettext('Failed to update the connection')\n      };\n      this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n    } else {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n    }\n  }\n\n  private async delete(connection) {\n    try {\n      const response = await this.connectorService.delete(connection);\n\n      if (response.ok && response.status === 204) {\n        this.alertService.success(gettext('Connection deleted.'));\n        await this.loadConnections();\n      } else if (response && response.status === 500) {\n        const data = response.json ? await response.json() : undefined;\n        const app = this.connectorService.getApplication('sigfox-agent');\n        const initialState = {\n          messageData: data,\n          appData: app,\n          modalTitle: gettext('Failed to delete the connection')\n        };\n        this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n      } else {\n        const data = response.json ? await response.json() : undefined;\n        this.alertService.addServerFailure({ data, response });\n      }\n    } catch (error) {\n        // empty catch block\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, CoreModule, FormsModule, Route } from '@c8y/ngx-components';\nimport { NoConnectionsFoundComponent } from './no-connections-found.component';\nimport { RouterModule } from '@angular/router';\nimport { SigfoxMultipleLnsConnectorComponent } from './sigfox-multiple-lns-connector.component';\nimport { ActilityMultipleLnsConnectorComponent } from './actility-multiple-lns-connector.component';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\n\nconst settingsRoutes: Route[] = [\n  {\n    path: 'connectivitySettings/multiple_lns_connectors_sigfox',\n    component: SigfoxMultipleLnsConnectorComponent\n  },\n  {\n    path: 'connectivitySettings/multiple_lns_connectors_actility',\n    component: ActilityMultipleLnsConnectorComponent\n  }\n];\n@NgModule({\n  declarations: [\n    SigfoxMultipleLnsConnectorComponent,\n    NoConnectionsFoundComponent,\n    ActilityMultipleLnsConnectorComponent,\n    ConnectionInfoWithDownloadCsvComponent\n  ],\n  imports: [\n    CoreModule,\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(settingsRoutes)\n  ],\n  providers: [\n    MultipleLnsConnectorService\n  ]\n})\nexport class MultipleLnsConnectorsModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  IManagedObject,\n  InventoryService,\n  IResultList,\n  FetchClient,\n  IFetchOptions,\n  IdentityService\n} from '@c8y/client';\nimport { get, orderBy } from 'lodash-es';\nimport { MultipleLnsConnectorService } from './multiple-lns-connectors';\nimport { ActilityConnection, ConnectionType, SigfoxConnection } from './multiple-lns-connectors/multiple-lns-connector.model';\n\n@Injectable()\nexport class LpwanSetDeviceProtocolService {\n  supportedDevicesCfgs = [\n    {\n      name: 'lora',\n      match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora',\n      protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],\n      connectionType: ConnectionType.ACTILITY\n    },\n    {\n      name: 'sigfox',\n      match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',\n      protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['com.sigfox.deviceId'],\n      connectionType: ConnectionType.SIGFOX\n    }\n  ];\n\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(\n    private inventoryService: InventoryService,\n    private client: FetchClient,\n    private identityService: IdentityService,\n    private lnsService: MultipleLnsConnectorService\n  ) {}\n\n  async refreshCache(device) {\n    const externalId = await this.getExternalId(device);\n    if (externalId) {\n      const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;\n      const options: IFetchOptions = {\n        method: 'POST',\n        headers: this.header,\n        body: JSON.stringify({})\n      };\n      return this.client.fetch(url, options);\n    }\n  }\n\n  getMicroserviceUrl(device) {\n    const { serviceProvider } = device.c8y_LpwanDevice;\n\n    let serviceName = serviceProvider.toLowerCase();\n    if (serviceProvider === 'Sigfox') {\n      serviceName = 'sigfox-agent';\n    }\n\n    return `/service/${serviceName}`;\n  }\n\n  isSupportedDevice(device: IManagedObject): boolean {\n    return this.supportedDevicesCfgs.some(({ match }) => match(device));\n  }\n\n  async getCurrentProtocol(device: IManagedObject) {\n    const lpwanDevice = device.c8y_LpwanDevice;\n    let protocolId;\n\n    if (lpwanDevice.typeExternalId) {\n      const externalId = (await this.identityService.detail(lpwanDevice.typeExternalId)).data;\n      protocolId = externalId.managedObject.id;\n    }\n\n    if (!protocolId && lpwanDevice.type) {\n      protocolId = lpwanDevice.type.split('/')[2];\n    }\n\n    if (!protocolId) {\n      return null;\n    }\n\n    return (await this.inventoryService.detail(protocolId)).data;\n  }\n\n  async applyProtocol(device: IManagedObject, selectedProtocol: IManagedObject) {\n    const [protocolExternalId] = (await this.identityService.list(selectedProtocol.id)).data;\n    const { externalId, type } = protocolExternalId;\n    device.c8y_LpwanDevice.typeExternalId = { externalId, type };\n    device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;\n    device.type = selectedProtocol.name;\n    return this.inventoryService.update(device);\n  }\n\n  async getAvailableProtocols(device: IManagedObject): Promise<IResultList<IManagedObject>> {\n    const query = {\n      __filter: {\n        type: { __in: this.getProtocolTypesMatchingDevice(device) }\n      },\n      __orderby: [{ name: 1 }]\n    };\n    return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });\n  }\n\n  async getAvailableConnections(device: IManagedObject): Promise<IResultList<ActilityConnection | SigfoxConnection>> {\n    let list;\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    const response = await this.lnsService.list(matchingCfg.connectionType);\n    if (response && response.status === 200) {\n      list = await response.json();\n      list = orderBy(list, ['name'], ['asc']);\n      return {res: response , data: list };\n    }\n\n  }\n\n  private getProtocolTypesMatchingDevice(device: IManagedObject): string[] {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    return matchingCfg ? matchingCfg.protocolTypes : [];\n  }\n\n  private async getExternalId(device: IManagedObject): Promise<string> {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    const externalIds = (await this.identityService.list(device.id)).data;\n    const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));\n    return externalId ? externalId.externalId : null;\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { Router } from '@angular/router';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'set-device-protocol',\n  templateUrl: './lpwan-set-device-protocol.component.html'\n})\nexport class LpwanAssignDeviceProtocolComponent implements OnInit {\n  loading: boolean;\n  device: IManagedObject;\n  currentProtocol: IManagedObject;\n  availableProtocols: IResultList<IManagedObject>;\n  newProtocol: IManagedObject;\n  filterProtocols = pipe();\n  pattern = '';\n  @ViewChild('lpwanSetDeviceProtocolForm', { static: false }) lpwanSetDeviceProtocolForm: NgForm;\n\n  constructor(\n    private lpwanService: LpwanSetDeviceProtocolService,\n    private alertService: AlertService,\n    private router: Router,\n    private inventoryService: InventoryService\n  ) {}\n  async ngOnInit() {\n    await this.reload();\n    this.setPipe('');\n  }\n\n  setPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterProtocols = pipe(\n      map((protocols: IManagedObject[]) =>\n        protocols.filter(\n          protocol =>\n            (!this.currentProtocol || this.currentProtocol.id !== protocol.id) &&\n            (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1)\n        )\n      )\n    );\n  }\n\n  async reload() {\n    this.loading = true;\n    this.newProtocol = null;\n    try {\n      await this.loadDevice();\n      this.availableProtocols = await this.lpwanService.getAvailableProtocols(this.device);\n      this.currentProtocol = await this.lpwanService.getCurrentProtocol(this.device);\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  async loadDevice() {\n    const deviceId = this.router.routerState.snapshot.url.match(/\\d+/)[0];\n    const { data } = await this.inventoryService.detail(deviceId);\n    this.device = data;\n  }\n\n  async apply(selectedProtocol) {\n    try {\n      const moUpdated =\n        (await this.lpwanService.applyProtocol(this.device, selectedProtocol))\n          .res.status === 200;\n      await this.reload();\n      this.alertService.success(gettext('Device protocol set.'));\n      this.lpwanSetDeviceProtocolForm.reset('dirty');\n      if (moUpdated) {\n        this.refreshCache();\n      }\n    } catch (ex) {\n      this.alertService.danger(gettext('Could not set device protocol.'));\n    }\n  }\n\n  async refreshCache() {\n    try {\n      await this.lpwanService.refreshCache(this.device);\n    } catch (ex) {\n      // do nothing (refreshing is an optional step)\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\n@Injectable()\nexport class LpwanAgentGuard implements CanActivate {\n  constructor(private lpwanService: LpwanSetDeviceProtocolService) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const device = route.data.contextData || route.parent.data.contextData;\n    return this.lpwanService.isSupportedDevice(device);\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { AlertService, gettext, PopoverConfirmButtons, PopoverConfirmComponent } from '@c8y/ngx-components';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { find } from 'lodash-es';\nimport { ActilityConnection, SigfoxConnection } from './multiple-lns-connectors/multiple-lns-connector.model';\n\n@Component({\n  selector: 'set-lns-connections',\n  templateUrl: './lpwan-set-connections.component.html'\n})\nexport class LpwanAssignLnsConnectionsComponent implements OnInit {\n  loading: boolean;\n  @Input() device: IManagedObject;\n  buttons: PopoverConfirmButtons[] = [\n    { label: gettext('Cancel'), action: () => Promise.reject() },\n    { label: gettext('Re-register'), action: () => this.deviceReregister(), status: 'default' }\n  ];\n  reRegisterMsg = gettext('To change provider connection, you need to re-register device first.');\n  filterConnection = pipe();\n  pattern = '';\n  @ViewChild(PopoverConfirmComponent, {static: true}) popoverConfirm: PopoverConfirmComponent;\n\n  newConnection: ActilityConnection | SigfoxConnection;\n  availableConnections: IResultList<ActilityConnection | SigfoxConnection>;\n  currentConnection: ActilityConnection | SigfoxConnection;\n\n  constructor(\n    private lpwanService: LpwanSetDeviceProtocolService,\n    private alertService: AlertService\n  ) {}\n  async ngOnInit() {\n    await this.reload();\n    this.setConnectionPipe('');\n  }\n\n  setConnectionPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterConnection = pipe(\n      map((connections: IManagedObject[]) =>\n        connections.filter(\n          connection =>\n            (!this.currentConnection || this.currentConnection.name !== connection.name) &&\n            (!filterStr || connection.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1)\n        )\n      )\n    );\n  }\n\n  async reload() {\n    this.loading = true;\n    this.newConnection = null;\n    try {\n        this.availableConnections = await this.lpwanService.getAvailableConnections(this.device);\n        this.currentConnection = find(this.availableConnections.data, {\n          name: this.device.c8y_LpwanDevice.lnsConnectionName\n        });\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  togglePopover(popoverCfrm) {\n    popoverCfrm.show();\n    this.setConnectionPipe('');\n  }\n\n  deviceReregister() {\n    return new Promise((resolve, reject) => {\n      window.location.href = `#/deviceregistration`;\n      resolve(true);\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  CoreModule,\n  FormsModule,\n  gettext,\n  HOOK_ROUTE,\n  Route,\n  ViewContext\n} from '@c8y/ngx-components';\nimport { LpwanAssignDeviceProtocolComponent } from './lpwan-set-device-protocol.component';\nimport { LpwanAgentGuard } from './lpwan-agent.guard';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { LpwanAssignLnsConnectionsComponent } from './lpwan-set-connections.component';\n\nconst routes: Route[] = [\n  {\n    context: ViewContext.Device,\n    path: 'assign-protocol',\n    component: LpwanAssignDeviceProtocolComponent,\n    label: gettext('LPWAN'),\n    icon: 'c8y-device-protocols',\n    canActivate: [LpwanAgentGuard]\n  }\n];\n\n@NgModule({\n  declarations: [\n    LpwanAssignDeviceProtocolComponent,\n    LpwanAssignLnsConnectionsComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule\n  ],\n  entryComponents: [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent],\n  providers: [\n    LpwanAgentGuard,\n    LpwanSetDeviceProtocolService,\n    {\n      provide: HOOK_ROUTE,\n      useValue: routes,\n      multi: true\n    }\n  ]\n})\nexport class LpwanProtocolModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {LpwanAgentGuard as ɵd} from './lpwan-agent.guard';\nexport {LpwanAssignLnsConnectionsComponent as ɵc} from './lpwan-set-connections.component';\nexport {LpwanSetDeviceProtocolService as ɵa} from './lpwan-set-device-protocol.service';\nexport {MultipleLnsConnectorService as ɵb} from './multiple-lns-connectors';\nexport {ActilityMultipleLnsConnectorComponent as ɵh} from './multiple-lns-connectors/actility-multiple-lns-connector.component';\nexport {ConnectionInfoWithDownloadCsvComponent as ɵi} from './multiple-lns-connectors/connection-info-with-download-csv.component';\nexport {MultipleLnsConnectorService as ɵf} from './multiple-lns-connectors/multiple-lns-connector.service';\nexport {NoConnectionsFoundComponent as ɵg} from './multiple-lns-connectors/no-connections-found.component';\nexport {SigfoxMultipleLnsConnectorComponent as ɵe} from './multiple-lns-connectors/sigfox-multiple-lns-connector.component';"],"names":[],"mappings":"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"}