{"version":3,"file":"c8y-ngx-components-operations-shared.js","sources":["../../operations/shared/operations.model.ts","../../operations/shared/operations.service.ts","../../operations/shared/operations-shared.module.ts","../../operations/shared/c8y-ngx-components-operations-shared.ts"],"names":[],"mappings":"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","sourcesContent":["import { OperationStatus } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { StatusOption } from './status-option.model';\n\nexport const OPERATION_STATUS_LABELS = {\n  PENDING: gettext('Pending'),\n  EXECUTING: gettext('Executing'),\n  FAILED: gettext('Failed'),\n  SUCCESSFUL: gettext('Successful')\n};\n\nexport type OperationStatusOptionsMap = {\n  [key in keyof typeof OperationStatus]?: StatusOption;\n};\n\nexport const OPERATION_STATUS_OPTIONS_MAP: OperationStatusOptionsMap = {\n  PENDING: {\n    label: OPERATION_STATUS_LABELS.PENDING,\n    status: OperationStatus.PENDING,\n    icon: 'clock-o',\n    styleClass: ''\n  } as unknown as StatusOption,\n  EXECUTING: {\n    label: OPERATION_STATUS_LABELS.EXECUTING,\n    status: OperationStatus.EXECUTING,\n    icon: 'refresh',\n    styleClass: 'text-info'\n  } as unknown as StatusOption,\n  SUCCESSFUL: {\n    label: OPERATION_STATUS_LABELS.SUCCESSFUL,\n    status: OperationStatus.SUCCESSFUL,\n    icon: 'check-circle',\n    styleClass: 'text-success'\n  } as unknown as StatusOption,\n  FAILED: {\n    label: OPERATION_STATUS_LABELS.FAILED,\n    status: OperationStatus.FAILED,\n    icon: 'exclamation-circle',\n    styleClass: 'text-danger'\n  } as unknown as StatusOption\n};\n\nexport const CLEAN_KEYS = ['creationTime', 'deviceExternalIDs', 'id', 'self'];\n\nexport const CLEAN_KEYS_UPDATE = ['deviceId', 'deviceName', 'bulkOperationId'];\n\nexport const RESERVED_KEYS = CLEAN_KEYS.concat(['deviceId', 'deviceName', 'bulkOperationId']);\n\nexport const STANDARD_KEYS = {\n  failureReason: gettext('Failure reason'),\n  description: gettext('Description'),\n  status: gettext('Status')\n};\n","import { Injectable } from '@angular/core';\nimport { IOperation, OperationService, OperationStatus } from '@c8y/client';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { assign, difference, has, includes, keys, pickBy, without } from 'lodash-es';\nimport { RESERVED_KEYS, STANDARD_KEYS } from './operations.model';\n\n@Injectable()\nexport class OperationsService {\n  constructor(\n    private operationService: OperationService,\n    private modal: ModalService,\n    private alertService: AlertService\n  ) {}\n\n  getStandardKeys(operation: IOperation) {\n    return pickBy(STANDARD_KEYS, (_, key) => has(operation, key));\n  }\n\n  getNonStandardKeys(operation: IOperation, excluding: string[] = []) {\n    return without(\n      difference(this.getKeys(operation), keys(this.getStandardKeys(operation))),\n      ...excluding\n    );\n  }\n\n  async cancel(operation: Partial<IOperation>) {\n    try {\n      await this.modal.confirm(\n        gettext('Cancel operation'),\n        gettext('You are about to cancel the operation. Do you want to proceed?'),\n        Status.DANGER\n      );\n\n      const operationAfterUpdate = (\n        await this.operationService.update({\n          id: operation.id,\n          status: OperationStatus.FAILED,\n          failureReason: gettext('Operation cancelled by user.')\n        })\n      ).data;\n      assign(operation, operationAfterUpdate);\n      this.alertService.success(gettext('Operation cancelled.'));\n    } catch (er) {\n      if (er) {\n        this.alertService.addServerFailure(er);\n      }\n    }\n  }\n\n  private getKeys(managedObject) {\n    return Object.keys({ ...managedObject }).filter(key => !includes(RESERVED_KEYS, key));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OperationsService } from './operations.service';\n\n@NgModule({\n  providers: [OperationsService]\n})\nexport class OperationsSharedModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}