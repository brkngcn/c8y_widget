{"version":3,"file":"c8y-ngx-components-repository-shared.js","sources":["../../repository/shared/advanced-software.service.ts","../../repository/shared/repository.model.ts","../../repository/shared/repository.service.ts","../../repository/shared/file-download/link-render-type.enum.ts","../../repository/shared/file-download/file-download.component.ts","../../repository/shared/select-modal/repository-select-modal.component.ts","../../repository/shared/software-type/software-type.component.ts","../../repository/shared/shared-repository.module.ts","../../repository/shared/c8y-ngx-components-repository-shared.ts"],"names":["_map"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApplicationService, FetchClient, IManagedObject, IResultList, Service } from '@c8y/client';\n\n@Injectable()\nexport class AdvancedSoftwareService extends Service<IManagedObject> {\n  private static readonly applicationName = 'advanced-software-mgmt';\n\n  protected baseUrl: string = 'service/advanced-software-mgmt';\n  protected listUrl: string = 'software';\n  protected propertyName = 'softwareList';\n\n  private isAvailable: Promise<boolean>;\n\n  constructor(client: FetchClient, private applicationService: ApplicationService) {\n    super(client);\n  }\n\n  list(filter: object = {}): Promise<IResultList<IManagedObject>> {\n    return super.list(filter);\n  }\n\n  isASMAvailable(): Promise<boolean> {\n    if (this.isAvailable === undefined) {\n      this.isAvailable = this.applicationService\n        .isAvailable(AdvancedSoftwareService.applicationName)\n        .then(result => !!result?.data);\n    }\n\n    return this.isAvailable;\n  }\n}\n","import { IManagedObject } from '@c8y/client';\n\nexport enum RepositoryType {\n  FIRMWARE = 'c8y_Firmware',\n  SOFTWARE = 'c8y_Software',\n  CONFIGURATION = 'c8y_ConfigurationDump'\n}\n\nexport const REPOSITORY_BINARY_TYPES = {\n  [RepositoryType.SOFTWARE]: 'c8y_SoftwareBinary',\n  [RepositoryType.FIRMWARE]: 'c8y_FirmwareBinary',\n  [RepositoryType.CONFIGURATION]: 'c8y_ConfigurationDumpBinary'\n};\n\nexport interface ModalModel {\n  selected?: { id?: string; name?: string; [key: string]: any };\n  version?: string;\n  dependency?: { c8y_Firmware: { version: string } };\n  patchVersion?: string;\n  description?: string;\n  deviceType?: string;\n  softwareType?;\n  binary?: {\n    file?: File;\n    url?: string;\n  };\n}\n\nexport interface RepositoryCategory extends Partial<IManagedObject> {\n  type: string;\n  description?: string;\n  c8y_Filter?: {\n    type: string;\n  };\n  softwareType?: string;\n}\n\nexport interface FirmwareBinary extends Partial<IManagedObject> {\n  type: 'c8y_FirmwareBinary';\n  c8y_Firmware: {\n    version: string;\n    url: string;\n  };\n}\n\nexport interface FirmwarePatchBinary extends FirmwareBinary {\n  c8y_Patch: {\n    dependency: string;\n  };\n}\n\nexport interface SoftwareBinary extends Partial<IManagedObject> {\n  type: string;\n  c8y_Software: {\n    version: string;\n    url: string;\n  };\n}\n\nexport type RepositoryBinary = FirmwareBinary | SoftwareBinary | FirmwarePatchBinary;\n\nexport interface SelectedRepositoryBinary {\n  id?: string;\n  name: string;\n  version: string;\n  url: string;\n  dependency?: string;\n  c8y_Patch?: boolean;\n  isPatch?: boolean;\n  patchDependency?: string;\n}\n\nexport interface DeviceFirmware {\n  version: string;\n  url: string;\n  name: string;\n}\n\nexport interface DeviceSoftware {\n  name: string;\n  version?: string;\n  url: string;\n  softwareType?: string;\n}\n\nexport interface DeviceSoftwareChange extends DeviceSoftware {\n  action: 'install' | 'delete';\n}\n\nexport interface ConfigurationSnapshot {\n  id?: string;\n  time: string;\n  name: string;\n  binaryUrl?: string;\n  binary?: any;\n  binaryType?: any;\n  deviceType?: string;\n  configurationType?: string;\n  description?: string;\n}\n\nexport interface SupportedConfigurationItem {\n  name: string;\n  deviceType?: string;\n  configurationType?: string;\n  isLegacy?: boolean;\n}\n\nexport interface DeviceConfigurationListEmptyState {\n  icon?: string;\n  title?: string;\n  text?: string;\n}\n\nexport enum DeviceConfigurationOperation {\n  UPLOAD_CONFIG = 'c8y_UploadConfigFile',\n  DOWNLOAD_CONFIG = 'c8y_DownloadConfigFile',\n  CONFIG = 'c8y_Configuration',\n  SEND_CONFIG = 'c8y_SendConfiguration'\n}\nexport interface FilterCriteria {\n  name?: string;\n  [key: string]: any;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  EventBinaryService,\n  EventService,\n  IdReference,\n  IEvent,\n  IFetchResponse,\n  IIdentified,\n  IManagedObject,\n  IManagedObjectBinary,\n  InventoryBinaryService,\n  InventoryService,\n  IOperation,\n  IResult,\n  IResultList,\n  OperationService,\n  OperationStatus,\n  QueriesUtil\n} from '@c8y/client';\nimport { AlertService, gettext, OperationRealtimeService } from '@c8y/ngx-components';\nimport {\n  assign,\n  cloneDeep,\n  find,\n  forEach,\n  get,\n  head,\n  isNil,\n  isString,\n  isUndefined,\n  map as _map,\n  omitBy,\n  pick,\n  remove,\n  set\n} from 'lodash-es';\nimport { defer, from, merge, Observable, of, throwError } from 'rxjs';\nimport { filter, map, switchMap, take, takeWhile, withLatestFrom } from 'rxjs/operators';\nimport { AdvancedSoftwareService } from './advanced-software.service';\nimport {\n  ConfigurationSnapshot,\n  DeviceFirmware,\n  DeviceSoftware,\n  DeviceSoftwareChange,\n  FirmwareBinary,\n  FirmwarePatchBinary,\n  ModalModel,\n  RepositoryBinary,\n  RepositoryCategory,\n  RepositoryType,\n  REPOSITORY_BINARY_TYPES,\n  SelectedRepositoryBinary,\n  SoftwareBinary\n} from './repository.model';\n\n@Injectable()\nexport class RepositoryService {\n  readonly dateFrom = new Date(0);\n  readonly dateTo = new Date(Date.now() + 86400000); // 1 day in the future\n  private queriesUtil: QueriesUtil;\n\n  constructor(\n    private inventory: InventoryService,\n    private inventoryBinary: InventoryBinaryService,\n    private operation: OperationService,\n    private alert: AlertService,\n    private event: EventService,\n    private operationRealtime: OperationRealtimeService,\n    private eventBinary: EventBinaryService,\n    private advancedSoftwareService: AdvancedSoftwareService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  /**\n   * Lists repository entries of given type.\n   * @param type The type of repository entries to list.\n   * @param options Extra listing options.\n   */\n  listRepositoryEntries(\n    type: RepositoryType,\n    options?: {\n      /** Additional query. */\n      query?: any;\n      /** (deprecated - to be removed) Only include entries with matching partial names. */\n      partialName?: string;\n      /** Include entries with matching partial text in the specified properties. */\n      partialTextFilter?: { partialText: string; properties: string[] };\n      /** Exclude legacy entries. */\n      skipLegacy?: boolean;\n      /** Exclude default ordering. */\n      skipDefaultOrder?: boolean;\n      /** Other request params. */\n      params?: any;\n    }\n  ) {\n    const defaultOrder = [{ name: 1 }];\n    const defaultFilters = { type };\n    const legacyFilters = { __has: `url` };\n    let filters = {};\n\n    let fullQuery = (options && options.query) || {};\n    if (!options || (options && !options.skipDefaultOrder)) {\n      fullQuery = this.queriesUtil.addOrderbys(fullQuery, defaultOrder, 'prepend');\n    }\n\n    fullQuery = this.queriesUtil.addAndFilter(fullQuery, defaultFilters);\n\n    if (options && options.partialTextFilter) {\n      const { partialText, properties } = options.partialTextFilter;\n      const orFilter = { __or: properties.map(property => ({ [property]: `*${partialText}*` })) };\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, orFilter);\n    }\n\n    if (options && options.partialName) {\n      // backwards compatibility if\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { name: `*${options.partialName}*` });\n    }\n\n    if (options && options.skipLegacy) {\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { __not: legacyFilters });\n    }\n\n    filters = {\n      query: this.queriesUtil.buildQuery(fullQuery),\n      pageSize: 50,\n      withTotalPages: true,\n      ...((options && options.params) || {})\n    };\n    return this.inventory.list(filters);\n  }\n\n  // TODO: merge with create()\n  async save(data: ModalModel, type: RepositoryType, mo: Partial<IManagedObject> = {}) {\n    switch (type) {\n      case RepositoryType.CONFIGURATION: {\n        Object.assign(mo, {\n          type: RepositoryType.CONFIGURATION,\n          configurationType: data.selected ? data.selected.configurationType : undefined,\n          name: data.version,\n          description: data.description,\n          deviceType: data.deviceType,\n          c8y_Global: {}\n        });\n        if (!data.deviceType && mo.id) {\n          mo.deviceType = null;\n        }\n        if (!data.selected && mo.id) {\n          mo.configurationType = null;\n        }\n        break;\n      }\n    }\n\n    const existingUrl = mo.url;\n    if (data.binary.url) {\n      mo.url = data.binary.url;\n    } else if (data.binary.file) {\n      const response = await this.inventoryBinary.create(data.binary.file, {\n        c8y_Global: {}\n      } as Partial<IManagedObject>);\n      mo.url = response.data.self;\n    }\n\n    if (mo.id) {\n      return this.updateEntry(mo, existingUrl);\n    }\n    return this.createEntry(mo);\n  }\n\n  async create(modal: ModalModel, type: RepositoryType) {\n    switch (type) {\n      case RepositoryType.FIRMWARE:\n      case RepositoryType.SOFTWARE:\n        return this.createFirmwareOrSoftware(modal, type);\n    }\n  }\n\n  async createFirmwareOrSoftware(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<RepositoryCategory> {\n    let binary: IManagedObjectBinary;\n    let binaryURL: string;\n    let repositoryEntry: RepositoryCategory;\n    let repositoryBinary: FirmwareBinary | SoftwareBinary;\n    const mos = [];\n    const {\n      selected: { id: selectedId },\n      binary: { file, url }\n    } = modal;\n    try {\n      if (file) {\n        ({ data: binary } = await this.saveBinary(file));\n        ({ self: binaryURL } = binary);\n        mos.push(binary);\n      } else {\n        binaryURL = url;\n      }\n\n      ({ data: repositoryEntry } = await this.createOrUpdateRepositoryEntry(modal, type));\n      if (isNil(selectedId)) {\n        mos.push(repositoryEntry);\n      }\n\n      ({ data: repositoryBinary } = await this.createRepositoryBinary(\n        modal,\n        binaryURL,\n        type,\n        repositoryEntry\n      ));\n      mos.push(repositoryBinary);\n\n      if (file) {\n        await this.linkBinary(repositoryBinary, binary);\n      }\n\n      return repositoryEntry;\n    } catch (error) {\n      this.cleanUp(mos);\n      this.errorMsg();\n\n      // Propagate error\n      throw error;\n    }\n  }\n\n  saveBinary(file: File): Promise<IResult<IManagedObjectBinary>> {\n    return this.inventoryBinary.create(file, { c8y_Global: {} } as Partial<IManagedObject>);\n  }\n\n  createOrUpdateRepositoryEntry(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<IResult<RepositoryCategory>> {\n    const {\n      selected: { id, name },\n      description,\n      deviceType\n    } = modal;\n\n    const mo = {\n      id,\n      name: id ? undefined : name,\n      description,\n      type: id ? undefined : type,\n      c8y_Global: {}\n    };\n\n    if (deviceType) {\n      set(mo, 'c8y_Filter.type', deviceType);\n    }\n\n    if (modal.softwareType) {\n      set(mo, 'softwareType', modal.softwareType.softwareType);\n    }\n\n    return id\n      ? (this.inventory.update(mo) as Promise<IResult<RepositoryCategory>>)\n      : (this.inventory.create(mo) as Promise<IResult<RepositoryCategory>>);\n  }\n\n  createRepositoryBinary(\n    modal: ModalModel,\n    binaryURL: string,\n    type: RepositoryType,\n    parent: RepositoryCategory\n  ): Promise<IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>> {\n    const mo = this.prepareRepositoryBinaryMO(modal, binaryURL, type);\n\n    return this.inventory.childAdditionsCreate(mo, parent) as Promise<\n      IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>\n    >;\n  }\n\n  prepareRepositoryBinaryMO(modal: ModalModel, binaryURL: string, type: RepositoryType) {\n    const { version, patchVersion, dependency } = modal;\n    const result = {\n      type: REPOSITORY_BINARY_TYPES[type],\n      [type]: {\n        url: binaryURL\n      },\n      c8y_Global: {}\n    };\n\n    if (dependency) {\n      set(result, [type, 'version'], patchVersion);\n      assign(result, {\n        c8y_Patch: {\n          dependency: dependency.c8y_Firmware.version\n        }\n      });\n    } else {\n      set(result, [type, 'version'], version);\n    }\n    return result;\n  }\n\n  async linkBinary(\n    repositoryBinary: FirmwareBinary | SoftwareBinary,\n    binary: IManagedObjectBinary\n  ) {\n    const { id: repositoryBinaryId } = repositoryBinary;\n    if (binary) {\n      const { id: binaryId } = binary;\n      return this.inventory.childAdditionsAdd(binaryId, repositoryBinaryId);\n    }\n  }\n\n  cleanUp(mosToDelete: IIdentified[]) {\n    mosToDelete.forEach(mo => {\n      const { c8y_IsBinary } = mo;\n      isUndefined(c8y_IsBinary) ? this.delete(mo) : this.inventoryBinary.delete(mo);\n    });\n  }\n\n  delete(entity: IIdentified): Promise<IResult<null>> {\n    return this.inventory.delete(entity, { forceCascade: true });\n  }\n\n  errorMsg() {\n    const msg = gettext('Failed to save');\n    this.alert.danger(msg);\n  }\n\n  getBaseVersionsCount$(entry: IManagedObject): Observable<number> {\n    if (this.isLegacyEntry(entry)) {\n      return of(1);\n    }\n    return from(this.listBaseVersions(entry, { pageSize: 1, withTotalPages: true })).pipe(\n      map(({ paging }) => paging.totalPages)\n    );\n  }\n\n  getBaseVersionFromMO(mo: RepositoryBinary): string {\n    return this.isPatch(mo) ? get(mo, 'c8y_Patch.dependency') : get(mo, 'c8y_Firmware.version');\n  }\n\n  isPatch(mo: RepositoryBinary): boolean {\n    return !!get(mo, 'c8y_Patch.dependency');\n  }\n\n  getPatchVersionsCount$(entry: IManagedObject, baseVersion: FirmwareBinary): Observable<number> {\n    if (this.isLegacyEntry(baseVersion)) {\n      return of(0);\n    }\n    return from(\n      this.listPatchVersions(entry, baseVersion, { pageSize: 1, withTotalPages: true })\n    ).pipe(map(({ paging }) => paging.totalPages));\n  }\n\n  isLegacyEntry(entry: Partial<IManagedObject>): boolean {\n    return Boolean(entry.url);\n  }\n\n  /**\n   * Lists all versions (base and patch ones) of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listAllVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const VERSION_FILTER_ORDER = {\n      __filter: {},\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, VERSION_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists base versions of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listBaseVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const NO_PATCH_FILTER_ORDER = {\n      __filter: {\n        __not: { __has: 'c8y_Patch' }\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, NO_PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listPatchVersions(entry: IManagedObject, baseVersion: FirmwareBinary | string, params = {}) {\n    const version = isString(baseVersion) ? baseVersion : get(baseVersion, 'c8y_Firmware.version');\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        'c8y_Patch.dependency': version\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry including the base version.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * In terms of legacy base version the entry gets transformed to fit the needed data model.\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listBaseVersionAndPatches(entry: IManagedObject, baseVersion: IManagedObject, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return Promise.resolve({\n        data: [\n          Object.assign(\n            {\n              c8y_Firmware: {\n                version: entry.version,\n                url: entry.url\n              }\n            },\n            entry\n          )\n        ]\n      });\n    }\n\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        __or: {\n          'c8y_Patch.dependency': baseVersion.c8y_Firmware.version,\n          'c8y_Firmware.version': baseVersion.c8y_Firmware.version\n        }\n      },\n      __orderby: [{ 'c8y_Patch.dependency': 1 }, { 'c8y_Firmware.version': 1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  listChildren(entry: Partial<IManagedObject>, filters = {}, params: any = {}) {\n    const childrenFilters = { __bygroupid: entry.id };\n    const query = this.queriesUtil.addAndFilter(filters, childrenFilters);\n    // FIXME: needed because of issue in forOf directive (...)\n    params.withTotalPages = true;\n    return this.inventory.listQuery(query, params);\n  }\n\n  /**\n   * Fetches all items from the list starting with the provided page.\n   * @param firstPage The first page of the list to fetch all items for.\n   */\n  async fetchAllItemsFromList(firstPage) {\n    let allItems;\n\n    if (!firstPage.then) {\n      allItems = [...firstPage];\n    } else {\n      let { paging, data: items } = await firstPage;\n      allItems = [...items];\n\n      while (paging && paging.nextPage) {\n        ({ paging, data: items } = await paging.next());\n        allItems = [...allItems, ...items];\n      }\n    }\n\n    return allItems;\n  }\n\n  /**\n   * Gets top level repository entry managed object for base or patch version.\n   * @param mo Base or patch version managed object with parents.\n   */\n  getRepositoryEntryMO$(mo: IManagedObject): Observable<IManagedObject | undefined> {\n    if (!mo) {\n      return of(undefined);\n    }\n    const [reference] = get(mo, 'additionParents.references');\n    const id = get(reference, 'managedObject.id');\n    return id\n      ? from(this.inventory.detail(id, { withChildren: false })).pipe(map(({ data }) => data))\n      : of(undefined);\n  }\n  /**\n   * Gets base or patch version managed object.\n   * @param deviceRepositoryFragment Device repository fragment.\n   * @param type Top level repository entry type.\n   * @param configuration Configuration object with options:\n   * - **skipLegacy** - `boolean` - Exclude legacy entries.\n   * - **filters** - `object` - Filter object.\n   *\n   * @deprecated as it doesn't support 'missing url' case\n   */\n  getRepositoryBinaryMoByVersion(\n    deviceRepositoryFragment: DeviceFirmware | DeviceSoftware,\n    type: RepositoryType,\n    { skipLegacy = false, filters = {} }: { skipLegacy?: boolean; filters?: object } = {}\n  ): Promise<IManagedObject> {\n    const { version, url, name } = deviceRepositoryFragment;\n    const repositoryBinaryType = REPOSITORY_BINARY_TYPES[type];\n    let query;\n    const newModelBaseVersionQuery = {\n      [`${type}.version`]: version,\n      [`${type}.url`]: url,\n      type: repositoryBinaryType\n    };\n    const legacyVersionQuery = { url, type, name };\n    filters = { withChildren: false, withParents: true, ...filters };\n\n    if (skipLegacy) {\n      query = {\n        __and: {\n          ...newModelBaseVersionQuery\n        }\n      };\n    } else {\n      query = {\n        __or: [{ __and: { ...newModelBaseVersionQuery } }, { __and: { ...legacyVersionQuery } }]\n      };\n    }\n\n    return this.inventory.listQuery(query, filters).then(({ data }) => head(data));\n  }\n\n  getBinaryName$(binaryUrl: string): Observable<string> {\n    if (!binaryUrl) {\n      return of('---');\n    }\n\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId) {\n      return of(binaryUrl);\n    }\n    return defer(() => this.inventory.detail(binaryId).then(result => result.data)).pipe(\n      map(mo => mo.name)\n    );\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find\n   * repository entries of specified type matching the type of provided device.\n   * @param repositoryType The type of repository entries which will be queried with the generated query.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   */\n\n  getDeviceTypeQuery(repositoryType: RepositoryType, device: IManagedObject): object {\n    let result = { type: repositoryType };\n    if (repositoryType === RepositoryType.CONFIGURATION) {\n      if (device.type) {\n        result = this.queriesUtil.addAndFilter(result, {\n          __or: [{ deviceType: device.type }, { __not: { __has: `deviceType` } }]\n        });\n      }\n    } else {\n      result = this.queriesUtil.addAndFilter(result, {\n        __or: [\n          { 'c8y_Filter.type': device.type },\n          { 'c8y_Filter.type': '' },\n          { __not: { __has: `c8y_Filter.type` } }\n        ]\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find\n   * repository entries matching the predefined software types provided in the device.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   * @param query The query to which the software types filters will be attached. Default value is an object containg repository type software.\n   */\n  getSoftwareTypeQuery(device: IManagedObject, query?: object): object {\n    let result = { ...(query || {}), type: RepositoryType.SOFTWARE };\n\n    if (device.c8y_SupportedSoftwareTypes) {\n      result = this.queriesUtil.addAndFilter(result, {\n        __or: [device.c8y_SupportedSoftwareTypes.map(type => ({ softwareType: type }))]\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find configuration repository entries\n   * matching the type of provided device and specified configuration type.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   * @param configurationType Configuration type for which matching repository entries will be queried with the generated query.\n   */\n  getConfigurationTypeQuery(device: IManagedObject, configurationType: string): object {\n    const query = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION, device);\n    return this.queriesUtil.addAndFilter(query, {\n      __or: [\n        { configurationType },\n        { configurationType: '' },\n        { __not: { __has: `configurationType` } }\n      ]\n    });\n  }\n\n  /**\n   * Gets the list of software installed in the device in the uniform format.\n   * Supports c8y_SoftwareList and c8y_Software fragments.\n   * @param device The device whose software list should be returned.\n   */\n  getDeviceSoftwareList(device: IManagedObject): DeviceSoftware[] {\n    if (device.c8y_SoftwareList) {\n      return cloneDeep(device.c8y_SoftwareList);\n    }\n    if (device.c8y_Software) {\n      return _map(device.c8y_Software, (version, name) => ({ name, version }));\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a software update operation for given device and the list of changes, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param changes The list of software changes which should be applied.\n   */\n  async createSoftwareUpdateOperation(\n    device: IManagedObject,\n    changes: DeviceSoftwareChange[]\n  ): Promise<IOperation> {\n    const operation = await this.getSoftwareUpdateOperation(device, changes);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a software update operation for given device and changes.\n   * Returned operation type depends on device's supported operations.\n   * Supports c8y_SoftwareUpdate, c8y_SoftwareList, and c8y_Software operations.\n   * @param device The device for which operation should be prepared.\n   * @param changes The list of software changes which should be applied.\n   */\n  async getSoftwareUpdateOperation(\n    device: IManagedObject,\n    changes: DeviceSoftwareChange[]\n  ): Promise<IOperation> {\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Apply software changes: ${changes\n        .map(\n          change =>\n            `${change.action} \"${change.name}\"${\n              change.version ? ` (version: ${change.version})` : ''\n            }`\n        )\n        .join(', ')}`\n    };\n    if (device.c8y_SupportedOperations.includes('c8y_SoftwareUpdate')) {\n      operation.c8y_SoftwareUpdate = (cloneDeep(changes) || []).map(change =>\n        omitBy(change, isNil)\n      );\n    } else if (device.c8y_SupportedOperations.includes('c8y_SoftwareList')) {\n      operation.c8y_SoftwareList = cloneDeep(\n        await this.getCurrentSoftware(device, 'c8y_SoftwareList', [])\n      );\n      changes.forEach(change => {\n        const deviceSoftware: DeviceSoftware = pick(omitBy(change, isNil), [\n          'name',\n          'version',\n          'url',\n          'softwareType'\n        ]);\n        if (change.action === 'delete') {\n          remove(operation.c8y_SoftwareList, deviceSoftware);\n        }\n        if (change.action === 'install') {\n          const softwareItemToUpdateIdx = operation.c8y_SoftwareList.findIndex(\n            item => item.name === change.name\n          );\n          if (softwareItemToUpdateIdx > -1) {\n            // update software\n            operation.c8y_SoftwareList.splice(softwareItemToUpdateIdx, 1, deviceSoftware);\n          } else {\n            // install software\n            operation.c8y_SoftwareList.push(deviceSoftware);\n          }\n        }\n      });\n    } else if (device.c8y_SupportedOperations.includes('c8y_Software')) {\n      operation.c8y_Software = cloneDeep(await this.getCurrentSoftware(device, 'c8y_Software', {}));\n      changes.forEach(change => {\n        if (change.action === 'delete') {\n          delete operation.c8y_Software[change.name];\n        }\n        if (change.action === 'install') {\n          operation.c8y_Software[change.name] = change.version;\n        }\n      });\n    }\n    return operation;\n  }\n\n  /**\n   * Extracts the list of device software changes from given operation in the context of given device.\n   * @param operation The operation from which the list should be extracted.\n   * @param device The target device of the operation.\n   */\n  async getDeviceSoftwareChangesFromOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    if (operation.c8y_SoftwareUpdate) {\n      return cloneDeep(operation.c8y_SoftwareUpdate);\n    }\n    if (operation.c8y_SoftwareList) {\n      return await this.getDeviceSoftwareChangesFromSoftwareListOperation(operation, device);\n    }\n    if (operation.c8y_Software) {\n      return await this.getDeviceSoftwareChangesFromSoftwareOperation(operation, device);\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and the selected repository binary, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param selectedOption The selected repository binary option.\n   */\n  async createFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): Promise<IOperation> {\n    const operation = this.getFirmwareUpdateOperation(device, selectedOption);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and selected version.\n   * Supports c8y_Firmware operation.\n   * @param device The device for which operation should be prepared.\n   * @param selectedOption Selected firmware version.\n   */\n  getFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): IOperation {\n    delete selectedOption.id;\n\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Update firmware to: \"${selectedOption.name}\"${\n        selectedOption.version ? ` (version: ${selectedOption.version})` : ''\n      }`,\n      c8y_Firmware: { ...selectedOption }\n    };\n\n    return operation;\n  }\n\n  /**\n   * Prepares a configuration file upload operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param isLegacy  A legacy operation is created without a configurationType.\n   */\n  getUploadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    isLegacy: boolean = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Retrieve configuration snapshot from device ${device.name}`,\n        c8y_UploadConfigFile: {}\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Retrieve ${configurationType} configuration snapshot from device ${device.name}`,\n      c8y_UploadConfigFile: {\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Prepares a configuration file download operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param binaryUrl The url of a binary to be downloaded.\n   * @param isLegacy A legacy operation is created without a configurationType.\n   */\n  getDownloadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    configSnapshot: ConfigurationSnapshot,\n    isLegacy: boolean = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Send configuration snapshot ${configSnapshot.name} to device ${device.name}`,\n        c8y_DownloadConfigFile: {\n          url: configSnapshot.binaryUrl,\n          c8y_ConfigurationDump: {\n            id: configSnapshot.id\n          }\n        }\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Send configuration snapshot ${configSnapshot.name} of configuration type ${configurationType} to device ${device.name}`,\n      c8y_DownloadConfigFile: {\n        url: configSnapshot.binaryUrl,\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Gets the last firmware update operation for given device.\n   * Looks for c8y_Firmware operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastFirmwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getFirstMatchingOperation([{ ...filters, fragmentType: 'c8y_Firmware' }]);\n  }\n\n  /**\n   * Gets the last software update operation for given device.\n   * Looks for c8y_SoftwareUpdate, c8y_SoftwareList, or c8y_Software operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastSoftwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getLatestMatchingOperation([\n      { ...filters, fragmentType: 'c8y_SoftwareUpdate' },\n      { ...filters, fragmentType: 'c8y_SoftwareList' },\n      { ...filters, fragmentType: 'c8y_Software' }\n    ]);\n  }\n\n  /**\n   * Iterates over the list of filters and queries the operations.\n   * If a query returns at least one operation, the first one will be returned.\n   * Otherwise the next query will be performed.\n   * If none of the queries returns any operation, null will be returned.\n   * @param filtersList The list of filters for the queries.\n   */\n  async getFirstMatchingOperation(filtersList: any[]): Promise<IOperation> {\n    let matchingOperation = null;\n\n    for (const filters of filtersList) {\n      const operations = (await this.operation.list(filters)).data;\n      if (operations.length) {\n        matchingOperation = operations[0];\n        break;\n      }\n    }\n\n    return matchingOperation;\n  }\n\n  /**\n   * Iterates over the list of filters and queries the operations.\n   * It compares the operations retrieved by the queries by 'creationTime'\n   * and return the latest one.\n   * If none of the queries returns any operation, null will be returned.\n   * @param filtersList The list of filters for the queries.\n   */\n  async getLatestMatchingOperation(filtersList: any[]): Promise<IOperation> {\n    let matchingOperation: IOperation = null;\n\n    for (const filters of filtersList) {\n      const operations: IOperation[] = (await this.operation.list(filters)).data;\n      if (operations.length) {\n        if (matchingOperation) {\n          matchingOperation =\n            new Date(matchingOperation.creationTime).getTime() <\n            new Date(operations[0].creationTime).getTime()\n              ? operations[0]\n              : matchingOperation;\n        } else {\n          matchingOperation = operations[0];\n        }\n      }\n    }\n\n    return matchingOperation;\n  }\n\n  /**\n   * Creates the operation and returns an observable to track its progress.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to create and track.\n   */\n  createObservedOperation(operation: IOperation): Observable<IOperation> {\n    return from(this.operation.create(operation)).pipe(\n      map(({ data }) => data),\n      take(1),\n      switchMap(createdOperation => this.observeOperation(createdOperation))\n    );\n  }\n\n  /**\n   * Returns an observable to track progress of given operation.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to be observed.\n   */\n  observeOperation(operation: IOperation): Observable<IOperation> {\n    const observedOperation$ = of(operation);\n    const operationUpdates$ = observedOperation$.pipe(\n      switchMap(observedOperation => this.operationRealtime.onAll$(observedOperation.deviceId)),\n      map(({ data }) => data as IOperation),\n      withLatestFrom(observedOperation$),\n      filter(([operationUpdate, observedOperation]) => operationUpdate.id === observedOperation.id),\n      switchMap(([operationUpdate]) => {\n        if (operationUpdate.status === OperationStatus.FAILED) {\n          return throwError(operationUpdate);\n        }\n        return of(operationUpdate);\n      }),\n      takeWhile(operationUpdate => operationUpdate.status !== OperationStatus.SUCCESSFUL, true)\n    );\n    return merge(observedOperation$, operationUpdates$);\n  }\n\n  /**\n   * Gets a single event with latest creationTime for the given device Id and event type.\n   * @param deviceId The device Id for which the events should be queried.\n   * @param type Event type.\n   */\n  async getLatestConfigurationEvent(\n    deviceId: string | number,\n    type: string\n  ): Promise<IEvent | undefined> {\n    const eventFilter: object = {\n      source: deviceId,\n      type,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      pageSize: 1\n    };\n\n    const { data } = await this.event.list(eventFilter);\n    return data[0];\n  }\n\n  /**\n   * Gets a list of operations for the given device Id, and operation type.\n   * @param deviceId The device Id for which the operation should be queried.\n   * @param operationType Operation type fragment.\n   */\n  async getConfigFileOperationList(\n    deviceId: string | number,\n    operationType: string\n  ): Promise<IOperation[]> {\n    const operationFilter: object = {\n      deviceId,\n      fragmentType: operationType,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      revert: true,\n      pageSize: 2000\n    };\n\n    return (await this.operation.list(operationFilter)).data;\n  }\n\n  /**\n   * Gets latest uploaded configuration snapshot for the given device, and configuration type.\n   * @param device The device for which the configuration snapshot was uploaded.\n   * @param configurationType Selected configuration type.\n   */\n  async getConfigSnapshot(\n    device: IManagedObject,\n    configurationType: string\n  ): Promise<ConfigurationSnapshot | undefined> {\n    const event: IEvent = await this.getLatestConfigurationEvent(device.id, configurationType);\n    let configSnapshot: ConfigurationSnapshot;\n    if (event) {\n      configSnapshot = {\n        time: event.time,\n        name: event.text,\n        deviceType: device.type,\n        configurationType\n      };\n      try {\n        configSnapshot.binary = await (await this.eventBinary.download(event)).text();\n        if (event.c8y_IsBinary) {\n          configSnapshot.binaryType = event.c8y_IsBinary.type;\n        }\n      } catch (ex) {\n        const msg = gettext('Could not get the binary.');\n        this.alert.danger(msg);\n      }\n    }\n    return configSnapshot;\n  }\n\n  async getLegacyConfigSnapshot(deviceId) {\n    let configSnapshot: ConfigurationSnapshot;\n    let mo;\n    const device = (await this.inventory.detail(deviceId, { withChildren: false })).data;\n    const snapshotId = device.c8y_ConfigurationDump && device.c8y_ConfigurationDump.id;\n    if (!snapshotId) {\n      return;\n    }\n\n    try {\n      mo = (await this.inventory.detail(snapshotId)).data;\n    } catch (ex) {\n      // do nothing\n    }\n    if (mo) {\n      configSnapshot = {\n        time: mo.creationTime,\n        name: mo.name\n      };\n      configSnapshot.binary = await this.getBinaryText(mo.url, { allowExternal: false });\n    }\n    return configSnapshot;\n  }\n\n  /**\n   * Returns a binary object as text.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **allowExternal** - `boolean` - allows downloading external binary file\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  async getBinaryText(\n    binaryUrl: string,\n    options: { allowExternal: boolean; noAlerts?: boolean }\n  ): Promise<string> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    let res;\n    if (!binaryId) {\n      if (options.allowExternal) {\n        res = await this.getExternalBinaryResponse(binaryUrl, options);\n      }\n    } else {\n      res = await this.getInternalBinaryResponse(binaryId, options);\n    }\n    if (!res) {\n      return null;\n    }\n    return res.text();\n  }\n\n  /**\n   * Returns a binary object as File.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **allowExternal** - `boolean` - allows downloading external binary file\n   */\n  async getBinaryFile(binaryUrl: string, options: { allowExternal: boolean }): Promise<File> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId && !options.allowExternal) {\n      return null;\n    }\n    // @TODO: note that it doesn't solve issue with external binary here, such url won't have binaryId, so we won't know the name or contentType to use in File constructor, let's add a @FIXME comment for now?\n    const { name, contentType } = (await this.inventory.detail(binaryId)).data;\n    const res = !!binaryId\n      ? await this.getInternalBinaryResponse(binaryId)\n      : await this.getExternalBinaryResponse(binaryUrl);\n    const arrayBuffer = await res.arrayBuffer();\n    return new File([arrayBuffer], name, { type: contentType });\n  }\n\n  /**\n   * Gets the last configuration update operation for given device.\n   * Looks for c8y_Configuration and c8y_SendConfiguration operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastConfigUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getLatestMatchingOperation([\n      { ...filters, fragmentType: 'c8y_Configuration' },\n      { ...filters, fragmentType: 'c8y_SendConfiguration' }\n    ]);\n  }\n\n  /**\n   * Prepares a configuration download operation for given device and its current configuration.\n   * Supports c8y_SendConfiguration operation.\n   * @param device The device for which operation should be prepared.\n   */\n  createTextBasedConfigurationReloadOperation(device: IManagedObject): IOperation {\n    return {\n      deviceId: device.id,\n      description: gettext('Requested current configuration'),\n      c8y_SendConfiguration: {}\n    };\n  }\n\n  /**\n   * Prepares a configuration update operation for the given device.\n   * Supports c8y_Configuration operation.\n   * @param device The device for which operation should be prepared.\n   * @param config The configuration which will update the existing one.\n   */\n  createTextBasedConfigurationUpdateOperation(device: IManagedObject, config: string): IOperation {\n    return {\n      deviceId: device.id,\n      description: gettext('Configuration update'),\n      c8y_Configuration: {\n        config\n      }\n    };\n  }\n\n  async getBinary(binaryId: IdReference): Promise<IFetchResponse> {\n    try {\n      return await this.inventoryBinary.download(binaryId);\n    } catch (ex) {\n      const msg = gettext('Could not get the binary.');\n      this.alert.danger(msg);\n    }\n  }\n\n  /**\n   * Gets all available snapshots from the repository for the given device.\n   * @param device The device for which the snapshots should be prepared.\n   * @param configurationType Selected configuration type.\n   */\n  async getSnapshotsFromRepository(device, configurationType) {\n    const searchQuery = this.getConfigurationTypeQuery(device, configurationType);\n    const res = await this.listRepositoryEntries(RepositoryType.CONFIGURATION, {\n      query: searchQuery,\n      params: { pageSize: 100 }\n    });\n    return res.data;\n  }\n\n  /**\n   * Checks if a device already have a given software installed\n   * @param deviceId Id of the device to be checked\n   * @param software The software to be checked\n   */\n  async isSoftwareInstalledOnDevice(\n    deviceId: string | number,\n    software: DeviceSoftware\n  ): Promise<boolean> {\n    if (!(await this.advancedSoftwareService.isASMAvailable())) {\n      return false;\n    }\n\n    const queryFilter = { deviceId };\n    if (software?.name) {\n      set(queryFilter, 'name', software.name);\n    }\n    if (software?.version) {\n      set(queryFilter, 'version', software.version);\n    }\n    return this.advancedSoftwareService.list(queryFilter).then(result => !!result.data?.length);\n  }\n\n  /**\n   * Returns a binary object.\n   * @param binaryId binary ID\n   * @param options The object with additional options:\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  private async getInternalBinaryResponse(\n    binaryId: IdReference,\n    options: { noAlerts?: boolean } = {}\n  ): Promise<IFetchResponse> {\n    let res;\n    try {\n      res = await this.inventoryBinary.download(binaryId);\n    } catch (ex) {\n      if (!options.noAlerts) {\n        const msg = gettext('Could not get the binary.');\n        this.alert.danger(msg);\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Returns a binary object.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  private async getExternalBinaryResponse(\n    binaryUrl: string,\n    options: { noAlerts?: boolean } = {}\n  ): Promise<IFetchResponse> {\n    let res;\n    try {\n      const fetchRes = await fetch(binaryUrl);\n      if (fetchRes.status >= 400) {\n        throw res;\n      }\n      res = fetchRes;\n    } catch {\n      if (!options.noAlerts) {\n        const msg = gettext('Could not get the external binary');\n        this.alert.danger(msg);\n      }\n    }\n    return res;\n  }\n\n  private async createEntry(mo: Partial<IManagedObject>) {\n    const binaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    const newMo = await this.inventory.create(mo);\n    if (binaryId) {\n      await this.inventory.childAdditionsAdd(binaryId, newMo.data);\n    }\n    return newMo;\n  }\n\n  private async updateEntry(mo: Partial<IManagedObject>, url) {\n    const existingBinaryId = await this.inventoryBinary.getIdFromUrl(url);\n    const newBinaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    if (existingBinaryId && existingBinaryId !== newBinaryId) {\n      const id = this.inventoryBinary.getIdFromUrl(url);\n      await this.inventoryBinary.delete(id);\n    }\n    if (newBinaryId) {\n      await this.inventory.childAdditionsAdd(newBinaryId, mo);\n    }\n    return this.inventory.update(mo);\n  }\n\n  private getBaseVersionResultListForLegacyEntry(entry) {\n    return Promise.resolve({\n      res: {} as IFetchResponse,\n      data: [\n        {\n          ...entry,\n          [entry.type]: {\n            version: entry.version,\n            url: entry.url\n          }\n        }\n      ]\n    } as IResultList<IManagedObject>);\n  }\n\n  private async getDeviceSoftwareChangesFromSoftwareListOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    const changes: DeviceSoftwareChange[] = [];\n    const deviceSoftwareList = await this.getCurrentSoftware(device, 'c8y_SoftwareList', []);\n    forEach(operation.c8y_SoftwareList, operationSoftware => {\n      const deviceSoftware = find(deviceSoftwareList, { name: operationSoftware.name });\n      if (\n        (operationSoftware && operationSoftware.version) !==\n        (deviceSoftware && deviceSoftware.version)\n      ) {\n        changes.push({\n          ...operationSoftware,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(deviceSoftwareList, deviceSoftware => {\n      const operationSoftware = find(operation.c8y_SoftwareList, { name: deviceSoftware.name });\n      if (\n        (operationSoftware && operationSoftware.version) !==\n        (deviceSoftware && deviceSoftware.version)\n      ) {\n        const installChange = changes.find(\n          change => deviceSoftware.name === change.name && change.action === 'install'\n        );\n        // check that this software is not an installation software change, otherwise it's an update and not a removal\n        if (!installChange) {\n          changes.push({\n            ...deviceSoftware,\n            action: 'delete'\n          } as DeviceSoftwareChange);\n        }\n      }\n    });\n    return changes;\n  }\n\n  private async getDeviceSoftwareChangesFromSoftwareOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    const changes: DeviceSoftwareChange[] = [];\n    const deviceSoftware = await this.getCurrentSoftware(device, 'c8y_Software', {});\n    forEach(deviceSoftware, (deviceSoftwareVersion, deviceSoftwareName) => {\n      if (operation.c8y_Software[deviceSoftwareName] !== deviceSoftwareVersion) {\n        changes.push({\n          name: deviceSoftwareName,\n          version: deviceSoftwareVersion,\n          action: 'delete'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(operation.c8y_Software, (operationSoftwareVersion, operationSoftwareName) => {\n      const deviceSoftwareVersion = deviceSoftware && deviceSoftware[operationSoftwareName];\n      if (deviceSoftwareVersion !== operationSoftwareVersion) {\n        changes.push({\n          name: operationSoftwareName,\n          version: operationSoftwareVersion,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    return changes;\n  }\n\n  private async getCurrentSoftware(\n    device: IManagedObject,\n    swFragment: string,\n    defaultValue: object\n  ): Promise<object> {\n    const isASMAvailable = await this.advancedSoftwareService.isASMAvailable();\n    if (isASMAvailable) {\n      let softwareResultList: IResultList<IManagedObject> = await this.advancedSoftwareService.list(\n        { deviceId: device.id, pageSize: 100 }\n      );\n      let list = (softwareResultList?.data || []).map(sw =>\n        pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType'])\n      );\n\n      while (softwareResultList.paging?.nextPage) {\n        softwareResultList = await softwareResultList.paging.next();\n        list = [\n          ...list,\n          ...(softwareResultList?.data || []).map(sw =>\n            pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType'])\n          )\n        ];\n      }\n\n      if (!list?.length) {\n        return defaultValue;\n      }\n\n      return Array.isArray(defaultValue) ? list : this.softwareListToLegacy(list);\n    } else {\n      return device[swFragment] || defaultValue;\n    }\n  }\n\n  private softwareListToLegacy(list: IManagedObject[]): object {\n    return (list || []).reduce((prev, curr) => ({ ...prev, [curr.name]: curr.version }), {});\n  }\n}\n","export enum LinkRenderType {\n    DOWNLOAD,\n    LINK,\n    TEXTONLY\n}\n","import { AlertService } from '@c8y/ngx-components';\nimport { Component, Input } from '@angular/core';\nimport { RepositoryService } from '../repository.service';\nimport { memoize } from '@c8y/ngx-components';\nimport { saveAs } from 'file-saver';\nimport { InventoryBinaryService } from '@c8y/client';\nimport { LinkRenderType } from './link-render-type.enum';\n\n@Component({\n  selector: 'c8y-file-download',\n  templateUrl: './file-download.component.html'\n})\nexport class FileDownloadComponent {\n  @Input() url: string;\n  linkRenderType = LinkRenderType;\n  isDownloading = false;\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryBinaryService: InventoryBinaryService,\n    private alertService: AlertService\n  ) {}\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize()\n  determineBehavior(): LinkRenderType {\n    let result: LinkRenderType;\n    if (this.inventoryBinaryService.getIdFromUrl(this.url)) {\n      result = LinkRenderType.DOWNLOAD;\n    } else if (this.url.match(/\\/\\//g)) {\n      result = LinkRenderType.LINK;\n    } else {\n      result = LinkRenderType.TEXTONLY;\n    }\n    return result;\n  }\n\n  async downloadFile() {\n    try {\n      this.isDownloading = true;\n      const binary: File = await this.repositoryService.getBinaryFile(this.url, {\n        allowExternal: false\n      });\n      this.isDownloading = false;\n      saveAs(binary);\n    } catch (ex) {\n      this.isDownloading = false;\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n}\n","import { Component, EventEmitter, TemplateRef } from '@angular/core';\nimport { IManagedObject, QueriesUtil } from '@c8y/client';\nimport {\n  gettext,\n  ISelectModalObject,\n  ISelectModalOption,\n  IUpdateItemEvent,\n  ModalLabels,\n  ModalSelectionMode\n} from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, has, isEmpty, isEqual, omitBy } from 'lodash-es';\nimport { BehaviorSubject, merge, Observable, of, Subject } from 'rxjs';\nimport { map, mergeMap, switchMap, tap } from 'rxjs/operators';\nimport {\n  FilterCriteria,\n  RepositoryBinary,\n  RepositoryCategory,\n  RepositoryType,\n  SelectedRepositoryBinary\n} from '../repository.model';\nimport { RepositoryService } from '../repository.service';\n\n// MODAL STRUCTURE\n// - selectModalObject (repository entry (repositoryCategory) -> type c8y_Firmware/c8y_Software)\n//   -- ISelectModalOption (repository binary entry (repositoryBinary) => type c8y_FirmwareBinary/c8y_SoftwareBinary)\n//   -- ISelectModalOption...\n// - selectModalObject...\n\n/**\n * RepositorySelectModalComponent displays repository entries options and allows to select them.\n *\n * @example\n * ```\n * import { take } from 'rxjs/operators';\n * import { RepositorySelectModalComponent, ModalSelectionMode, RepositoryType } from '@c8y/ngx-components/repository/shared';\n *\n * const initialState = {\n *   repositoryType: RepositoryType.FIRMWARE,\n *   title: gettext('Install firmware'),\n *   subTitle: gettext('Available firmwares matching the device type'),\n *   icon: 'c8y-firmware',\n *   mode: ModalSelectionMode.SINGLE,\n *   labels: { ok: gettext('Install') },\n *   disableSelected: false\n * };\n *\n * const modal = this.bsModal.show(RepositorySelectModalComponent, {\n *   ignoreBackdropClick: true,\n *   initialState\n * });\n *\n * modal.content.load.next();\n * modal.content.resultEmitter.pipe(take(1)).subscribe((firmware) => {\n *   ...\n * })\n * ```\n */\n\n@Component({\n  selector: 'c8y-repository-select-modal',\n  templateUrl: './repository-select-modal.component.html'\n})\nexport class RepositorySelectModalComponent {\n  /**\n   * Optional\n   * Allows to provide custom data.\n   * @example\n   * ```\n   * import { from } from 'rxjs';\n   *\n   * const repositoryEntry = { name: 'ExampleEntry', type: 'c8y_Firmware' };\n   * const versions = [{ c8y_Firmware: { version: '1.0.0', url: 'http://example.com' } }];\n   *\n   * const initialState = {repositoryEntriesWithVersions$: from({ ...repositoryEntry, versions })};\n   * ```\n   */\n  repositoryEntriesWithVersions$: Observable<IManagedObject[]> = undefined;\n  /**\n   * Repository entry type.\n   */\n  repositoryType: RepositoryType.FIRMWARE | RepositoryType.SOFTWARE;\n  /**\n   * Optional\n   * Allows to use custom badges templates.\n   * @example\n   * ```\n   * import { gettext } from '@c8y/ngx-components';\n   *\n   * const badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n   * const initialState = { badgeTemplates };\n   * ```\n   */\n  badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n  /**\n   * Optional\n   * Allows to provide custom modal title.\n   */\n  title: string = gettext('Select repository entry');\n  /**\n   * Optional\n   * Allows to provide custom modal subtitle.\n   */\n  subTitle: string;\n  /**\n   * Loads the content of the modal.\n   * Must be invoked by the modal's caller.\n   */\n  load: Subject<void> = new Subject();\n  /**\n   * Triggers an update of the item list emitted.\n   */\n  updateInstallableList$: Subject<IUpdateItemEvent<any>> = new Subject();\n  /**\n   * Optional\n   * Emits a filter criteria object currently entered in the filter input.\n   * Use it to filter the items if you use custom repositoryEntriesWithVersions$.\n   */\n  searchTerm: BehaviorSubject<FilterCriteria> = new BehaviorSubject({});\n  /**\n   * Optional\n   * Allows to provide device type query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  deviceTypeQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  searchQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide custom labels for the buttons responsible for confirm/dismiss modal actions.\n   */\n  labels: ModalLabels = { ok: gettext('Save') };\n  /**\n   * Optional\n   * Allows to hide the name filter input field.\n   * By default, the filter input field is displayed.\n   */\n  showFilter: boolean = true;\n  /**\n   * Optional\n   * Allows to show a warning that the search criteria should be narrowed down.\n   * By default, this warning is hidden.\n   */\n  areMoreEntries: boolean = false;\n  /**\n   * Optional\n   * Allows to display a more specific than the default message in case there are no items to display.\n   */\n  noItemsMessage: string;\n  /**\n   * Optional\n   * Allows to pass the array of items. Each item from this array will be marked as selected in the modal.\n   */\n  selected: SelectedRepositoryBinary[];\n  /**\n   * Emits whenever a new repository binary have been selected in the modal.\n   */\n  onChoiceUpdated: EventEmitter<ISelectModalObject> = new EventEmitter<ISelectModalObject>();\n  /**\n   * Emits the list of selected options.\n   */\n  resultEmitter: EventEmitter<SelectedRepositoryBinary[]> = new EventEmitter<\n    SelectedRepositoryBinary[]\n  >();\n  /**\n   * Optional\n   * Allows to change selection mode.\n   * Supported options:\n   *   * single: only single option can be selected.\n   *   * multiple: multiple options can be selected.\n   */\n  mode: ModalSelectionMode = ModalSelectionMode.SINGLE;\n  /**\n   * Optional\n   * Allows to use custom icon in the modal header.\n   */\n  icon: string;\n  /**\n   * Allows to block selection of the other versions from the same repository entry.\n   */\n  disableSelected: boolean = true;\n\n  filterCriteria: FilterCriteria = {};\n\n  repositoryEntries$: Observable<ISelectModalObject[]> = this.load.pipe(\n    switchMap(() => this.repositoryEntriesWithVersions$),\n    mergeMap(mos => this.aggregate(mos)),\n    tap(items => {\n      this.areMoreEntries = items.length >= this.PAGE_SIZE ? true : false;\n    }),\n    tap(items => (this.repositoryEntries = items))\n  );\n\n  modalEntries: Observable<ISelectModalObject[]> = merge(\n    this.repositoryEntries$,\n    this.updateInstallableList$.pipe(\n      map((updateItemEvent: IUpdateItemEvent<any>) => {\n        const itemToUpdate: ISelectModalObject = (this.repositoryEntries || []).find(\n          item => item.groupId === updateItemEvent.object.groupId\n        );\n        if (itemToUpdate) {\n          const optionToUpdate: ISelectModalOption = (itemToUpdate.options || []).find(\n            option => option.obj.id === (updateItemEvent.object as any).selectedId\n          );\n          if (optionToUpdate) {\n            optionToUpdate.template = updateItemEvent.template;\n            if (updateItemEvent.mapper) {\n              optionToUpdate.obj = updateItemEvent.mapper(optionToUpdate.obj);\n            }\n          }\n        }\n        return this.repositoryEntries;\n      })\n    )\n  );\n\n  /**\n   * Optional\n   * Allows to provide additional template that will be rendered in the\n   * filters block on top of the results list in the select modal.\n   */\n  additionalFilterTemplate: TemplateRef<any>;\n\n  private PAGE_SIZE = 100;\n  private queriesUtil: QueriesUtil;\n  private repositoryEntries: ISelectModalObject[];\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private translateService: TranslateService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  ngOnInit() {\n    if (!this.repositoryType) {\n      throw new Error('Repository type must be defined');\n    }\n\n    if (!this.repositoryEntriesWithVersions$) {\n      this.repositoryEntriesWithVersions$ = of(1).pipe(\n        mergeMap(() =>\n          this.repositoryService.listRepositoryEntries(this.repositoryType, {\n            query: this.queriesUtil.addAndFilter(\n              this.deviceTypeQuery,\n              has(this.searchQuery, 'name')\n                ? { ...this.searchQuery, name: `*${this.searchQuery.name}*` }\n                : this.searchQuery\n            ),\n            params: { pageSize: this.PAGE_SIZE }\n          })\n        ),\n        map(({ data }) => data),\n        map(mos => this.getAndAssignRepositoryBinaries(mos))\n      );\n    }\n  }\n\n  getAndAssignRepositoryBinaries(mos: IManagedObject[]) {\n    mos.forEach(mo => {\n      mo.versions = this.repositoryService.listAllVersions(mo);\n    });\n    return mos;\n  }\n\n  search(filterCriteria: FilterCriteria) {\n    this.filterCriteria = omitBy(\n      {\n        ...this.filterCriteria,\n        ...filterCriteria\n      },\n      isEmpty\n    );\n\n    if (!isEqual(this.filterCriteria, this.searchQuery)) {\n      this.searchTerm.next(this.filterCriteria);\n      this.searchQuery = this.filterCriteria;\n      this.load.next();\n    }\n  }\n\n  result(selectedItems: SelectedRepositoryBinary[]) {\n    this.resultEmitter.emit(selectedItems);\n  }\n\n  async aggregate(mos: IManagedObject[]): Promise<ISelectModalObject[]> {\n    const repositoryType = this.repositoryType;\n    const selectedItems: SelectedRepositoryBinary[] = this.selected;\n\n    return Promise.all(\n      mos.map(async repositoryEntry => {\n        const options: ISelectModalOption[] = this.getSelectModalOptions(\n          await this.repositoryService.fetchAllItemsFromList(repositoryEntry.versions),\n          selectedItems,\n          repositoryEntry as RepositoryCategory,\n          repositoryType\n        );\n        const selectModalObject = this.getSelectModalObject(\n          repositoryEntry as RepositoryCategory,\n          options\n        );\n\n        return selectModalObject;\n      })\n    );\n  }\n\n  getSelectModalOptions(\n    versions: RepositoryBinary[],\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryType: RepositoryType\n  ): ISelectModalOption[] {\n    const selectModalOptions: ISelectModalOption[] = [];\n    versions.forEach(repositoryBinary => {\n      const isSelected: boolean = this.isBinaryRepositorySelected(\n        selectedItems,\n        repositoryEntry,\n        repositoryBinary,\n        repositoryType\n      );\n\n      const { version } = repositoryBinary[`${repositoryType}`];\n      const bodyValue =\n        version || `(${this.translateService.instant(gettext('not specified`version`'))})`;\n      const bodyClass = version ? '' : 'text-muted';\n      selectModalOptions.push({\n        body: [\n          {\n            value: bodyValue,\n            class: bodyClass\n          }\n        ],\n        obj: {\n          id: repositoryBinary.id,\n          name: repositoryEntry.name,\n          version,\n          ...(get(repositoryBinary, 'c8y_Patch.dependency') && {\n            dependency: get(repositoryBinary, 'c8y_Patch.dependency')\n          }),\n          ...(get(repositoryBinary, 'c8y_Patch') && { isPatch: true }),\n          url: repositoryBinary[`${repositoryType}`].url,\n          softwareType: repositoryEntry.softwareType\n        },\n        selected: isSelected\n      });\n    });\n    return selectModalOptions;\n  }\n\n  isBinaryRepositorySelected(\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryBinary: RepositoryBinary,\n    repositoryType: RepositoryType\n  ): boolean {\n    const isSelected = selectedItems\n      ? selectedItems.filter(\n          repositoryFragment =>\n            repositoryFragment.name === repositoryEntry.name &&\n            repositoryFragment.version === repositoryBinary[`${repositoryType}`].version\n        ).length > 0\n      : false;\n\n    return isSelected;\n  }\n\n  getSelectModalObject(\n    repositoryEntry: RepositoryCategory,\n    options: ISelectModalOption[]\n  ): ISelectModalObject {\n    const label =\n      options.length === 1\n        ? this.translateService.instant(this.badgeTemplates['=1'], { count: options.length })\n        : this.translateService.instant(this.badgeTemplates.other, { count: options.length });\n\n    const selectModalObject: ISelectModalObject = {\n      groupId: repositoryEntry.id,\n      body: [\n        { value: repositoryEntry.name, class: 'text-truncate' },\n        { value: repositoryEntry.description, class: 'text-truncate text-muted' }\n      ],\n      additionalInformation: { value: label, class: 'label label-info' },\n      options\n    };\n\n    return selectModalObject;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator\n} from '@angular/forms';\nimport { IManagedObject, IResultList, QueriesUtil } from '@c8y/client';\nimport { gettext, TypeaheadComponent } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { uniqBy } from 'lodash-es';\nimport { BehaviorSubject, Observable, pipe, UnaryFunction } from 'rxjs';\nimport { debounceTime, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { RepositoryType } from '../repository.model';\nimport { RepositoryService } from '../repository.service';\n\n@Component({\n  selector: 'c8y-software-type',\n  templateUrl: 'software-type.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => SoftwareTypeComponent)\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => SoftwareTypeComponent),\n      multi: true\n    }\n  ]\n})\nexport class SoftwareTypeComponent implements OnInit, ControlValueAccessor, Validator {\n  @Input() softwareTypeMO: IManagedObject;\n\n  @Input() disabled: boolean;\n\n  @Input() style;\n\n  @Input()\n  required: boolean = true;\n\n  @Input()\n  placeholder: string = this.translateService.instant(gettext('e.g. {{ example }}'), {\n    example: 'yum'\n  });\n\n  @Input()\n  emitResultsOnly: boolean = false;\n\n  @Input()\n  showBtnInNotFoundMessage: boolean = true;\n\n  @Input()\n  allowFreeEntries: boolean = true;\n\n  @Input()\n  showClearSelectionOption: boolean = false;\n\n  @Input()\n  clearSelectionOptionLabel: string = gettext('All software types');\n\n  @ViewChild('deviceSoftwareTypeModel', { static: true })\n  deviceSoftwareTypeModel: TypeaheadComponent;\n\n  @ViewChild('notFoundTypeAddNewTemplate', { static: true })\n  notFoundTypeAddNewTemplate: TemplateRef<unknown>;\n\n  @ViewChild('notFoundTypeTemplate', { static: true })\n  notFoundTypeTemplate: TemplateRef<unknown>;\n\n  @Output() onSelectSoftware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  notFoundTemplateToUse: TemplateRef<unknown>;\n\n  filterPipe: UnaryFunction<unknown, unknown> = pipe(tap());\n  softwaresResult$: Observable<IResultList<IManagedObject>>;\n  search$: BehaviorSubject<string> = new BehaviorSubject(null);\n  softwaresResult: IResultList<IManagedObject>;\n\n  private queriesUtil: QueriesUtil = new QueriesUtil();\n  private softwareTypes: Set<string> = new Set();\n\n  constructor(\n    private repositoryService: RepositoryService,\n    public changeDetectorRef: ChangeDetectorRef,\n    private translateService: TranslateService\n  ) {\n    this.softwaresResult$ = this.search$.pipe(\n      debounceTime(300),\n      tap(() => this.softwareTypes.clear()),\n      switchMap((searchString: string) => {\n        if (!this.emitResultsOnly || !searchString) {\n          this.onSelectSoftware.emit(this.softwareTypeMO);\n        }\n        return this.getSoftwareByTypeResult(searchString);\n      }),\n      shareReplay(1)\n    );\n\n    this.filterPipe = pipe(map(this.removeDuplicatesBySoftwareType.bind(this)));\n  }\n\n  ngOnInit(): void {\n    this.notFoundTemplateToUse = this.showBtnInNotFoundMessage\n      ? this.notFoundTypeAddNewTemplate\n      : this.notFoundTypeTemplate;\n  }\n\n  getSoftwareByTypeResult(searchString: string) {\n    let query = this.queriesUtil.prependOrderbys({}, [{ softwareType: 1 }]);\n    const filter = !!searchString\n      ? {\n          softwareType: {\n            __eq: `*${searchString}*`\n          }\n        }\n      : {\n          __has: 'softwareType'\n        };\n    query = this.queriesUtil.addAndFilter(query, filter);\n\n    return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {\n      query,\n      params: {\n        pageSize: 200\n      }\n    });\n  }\n\n  selectSoftware(software) {\n    this.softwareTypeMO = software;\n    this.onSelectSoftware.emit(software);\n    this.deviceSoftwareTypeModel.searchControlModel.control.markAsDirty();\n    (this.deviceSoftwareTypeModel as any).onChange(software);\n  }\n\n  clearSoftware() {\n    this.softwareTypeMO = undefined;\n    this.search$.next('');\n    this.onSelectSoftware.emit();\n  }\n\n  resetInput() {\n    this.deviceSoftwareTypeModel.reset();\n  }\n\n  writeValue(value: any): void {\n    this.deviceSoftwareTypeModel.writeValue(value);\n  }\n\n  registerOnChange(fn: any): void {\n    this.deviceSoftwareTypeModel.registerOnChange(fn);\n  }\n\n  registerOnTouched(fn: any): void {\n    this.deviceSoftwareTypeModel.registerOnTouched(fn);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.deviceSoftwareTypeModel.setDisabledState(isDisabled);\n  }\n\n  validate(control: AbstractControl): ValidationErrors {\n    return this.deviceSoftwareTypeModel.validate(control);\n  }\n\n  private removeDuplicatesBySoftwareType(list: IManagedObject[]): IManagedObject[] {\n    const uniqueBySoftwareType: IManagedObject[] = uniqBy(list, 'softwareType').filter(\n      (sw: IManagedObject) => !this.softwareTypes.has(sw.softwareType)\n    );\n    uniqueBySoftwareType.forEach((sw: IManagedObject) => this.softwareTypes.add(sw.softwareType));\n    return uniqueBySoftwareType;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule, FormsModule, OperationRealtimeService } from '@c8y/ngx-components';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { RepositoryService } from './repository.service';\nimport { RepositorySelectModalComponent } from './select-modal/repository-select-modal.component';\nimport { FileDownloadComponent } from './file-download/file-download.component';\nimport { AdvancedSoftwareService } from './advanced-software.service';\nimport { SoftwareTypeComponent } from './software-type/software-type.component';\n\n@NgModule({\n  imports: [CommonModule, CoreModule, FormsModule, PopoverModule],\n  declarations: [RepositorySelectModalComponent, FileDownloadComponent, SoftwareTypeComponent],\n  entryComponents: [RepositorySelectModalComponent],\n  providers: [AdvancedSoftwareService, RepositoryService, OperationRealtimeService],\n  exports: [RepositorySelectModalComponent, FileDownloadComponent, SoftwareTypeComponent]\n})\nexport class SharedRepositoryModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}