import * as i0 from '@angular/core';
import { EventEmitter, Component, Output, Input, Injectable, ViewChild, NgModule } from '@angular/core';
import * as i2 from '@c8y/ngx-components';
import { gettext, AppStateService, AlertService, Status, ModalService, CoreModule, CommonModule, FormsModule, PopoverConfirmComponent, ViewContext, HOOK_ROUTE } from '@c8y/ngx-components';
import { __awaiter } from 'tslib';
import { FetchClient, InventoryService, IdentityService } from '@c8y/client';
import { orderBy, head, findIndex, get, find } from 'lodash-es';
import { RouterModule, Router } from '@angular/router';
import * as i1 from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { saveAs } from 'file-saver';
import { pipe } from 'rxjs';
import { map } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from 'ngx-bootstrap/modal';
import * as ɵngcc4 from '@ngx-translate/core';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/router';

const _c0 = ["connectorsForm"];
function SigfoxMultipleLnsConnectorComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_no_connections_found_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "no-connections-found", 4);
    ɵngcc0.ɵɵlistener("onAction", function SigfoxMultipleLnsConnectorComponent_ng_template_1_no_connections_found_0_Template_no_connections_found_onAction_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.addConnection(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("header", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r3.cardHeader));
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_8_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 38);
    ɵngcc0.ɵɵlistener("click", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_8_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r16); const connection_r13 = restoredCtx.$implicit; const ctx_r15 = ɵngcc0.ɵɵnextContext(3); return ctx_r15.setModel(connection_r13); });
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 39);
    ɵngcc0.ɵɵelementStart(2, "span", 40);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const connection_r13 = ctx.$implicit;
    ɵngcc0.ɵɵclassProp("active", connection_r13.name === connection_r13.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "plug");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", connection_r13.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", connection_r13.name, " ");
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_9_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 41);
    ɵngcc0.ɵɵlistener("click", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_9_Template_c8y_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(3); return ctx_r17.addConnection(); });
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 39);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "plug");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "New connection"), " ");
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_form_group_61_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(1, "label", 42);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 43);
    ɵngcc0.ɵɵlistener("ngModelChange", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_form_group_61_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(3); return ctx_r19.connection.password = $event; });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Password"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 6, "e.g. my_password"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r10.connection.password)("required", ctx_r10.state === "addConnections");
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_62_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 40);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Change password"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Change password"));
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_62_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 40);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Cancel password change"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Cancel password change"));
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_62_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 44);
    ɵngcc0.ɵɵlistener("click", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_62_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(3); return ctx_r23.changePassword(); });
    ɵngcc0.ɵɵtemplate(1, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_62_span_1_Template, 4, 6, "span", 45);
    ɵngcc0.ɵɵtemplate(2, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_62_span_2_Template, 4, 6, "span", 45);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r11.showPassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.showPassword);
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_67_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 46);
    ɵngcc0.ɵɵlistener("click", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_67_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(3); return ctx_r25.deleteConnection(ctx_r25.connection); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, " Delete ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "Delete"));
} }
const _c1 = function () { return { example: "https://backend.sigfox.com/api" }; };
const _c2 = function () { return { example: "58c1793b9e93a15370f71caa" }; };
function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵelementStart(2, "h4");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 7);
    ɵngcc0.ɵɵelementStart(6, "div", 8);
    ɵngcc0.ɵɵelementStart(7, "c8y-list-group", 9);
    ɵngcc0.ɵɵtemplate(8, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_8_Template, 4, 5, "c8y-li", 10);
    ɵngcc0.ɵɵtemplate(9, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_9_Template, 4, 4, "c8y-li", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 12);
    ɵngcc0.ɵɵelementStart(11, "button", 13);
    ɵngcc0.ɵɵlistener("click", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_button_click_11_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.addConnection(); });
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 14);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "div", 15);
    ɵngcc0.ɵɵelementStart(17, "div", 16);
    ɵngcc0.ɵɵelementStart(18, "button", 17);
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelement(20, "i", 14);
    ɵngcc0.ɵɵelementStart(21, "span");
    ɵngcc0.ɵɵtext(22);
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "form", 18, 19);
    ɵngcc0.ɵɵelementStart(26, "div", 20);
    ɵngcc0.ɵɵelementStart(27, "div", 21);
    ɵngcc0.ɵɵelementStart(28, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(29, "label", 22);
    ɵngcc0.ɵɵtext(30);
    ɵngcc0.ɵɵpipe(31, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(32, "input", 23);
    ɵngcc0.ɵɵlistener("ngModelChange", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_32_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.connection.name = $event; });
    ɵngcc0.ɵɵpipe(33, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(34, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(35, "label", 24);
    ɵngcc0.ɵɵtext(36);
    ɵngcc0.ɵɵpipe(37, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(38, "input", 25);
    ɵngcc0.ɵɵlistener("ngModelChange", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_38_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r30 = ɵngcc0.ɵɵnextContext(2); return ctx_r30.connection.description = $event; });
    ɵngcc0.ɵɵpipe(39, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(40, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(41, "label", 26);
    ɵngcc0.ɵɵtext(42);
    ɵngcc0.ɵɵpipe(43, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(44, "input", 27);
    ɵngcc0.ɵɵlistener("ngModelChange", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_44_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.connection.baseUrl = $event; });
    ɵngcc0.ɵɵpipe(45, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(46, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(47, "label", 28);
    ɵngcc0.ɵɵtext(48);
    ɵngcc0.ɵɵpipe(49, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(50, "input", 29);
    ɵngcc0.ɵɵlistener("ngModelChange", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_50_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r32 = ɵngcc0.ɵɵnextContext(2); return ctx_r32.connection.parentGroupId = $event; });
    ɵngcc0.ɵɵpipe(51, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(52, "c8y-messages");
    ɵngcc0.ɵɵelement(53, "c8y-message", 30);
    ɵngcc0.ɵɵpipe(54, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(55, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(56, "label", 31);
    ɵngcc0.ɵɵtext(57);
    ɵngcc0.ɵɵpipe(58, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(59, "input", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_59_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33.connection.username = $event; });
    ɵngcc0.ɵɵpipe(60, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(61, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_form_group_61_Template, 6, 8, "c8y-form-group", 33);
    ɵngcc0.ɵɵtemplate(62, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_62_Template, 3, 2, "button", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(63, "div", 12);
    ɵngcc0.ɵɵelementStart(64, "button", 35);
    ɵngcc0.ɵɵlistener("click", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_button_click_64_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r34 = ɵngcc0.ɵɵnextContext(2); return ctx_r34.setModel(); });
    ɵngcc0.ɵɵpipe(65, "translate");
    ɵngcc0.ɵɵtext(66, " Cancel ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(67, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_button_67_Template, 3, 3, "button", 36);
    ɵngcc0.ɵɵelementStart(68, "button", 37);
    ɵngcc0.ɵɵlistener("click", function SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template_button_click_68_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r35 = ɵngcc0.ɵɵnextContext(2); return ctx_r35.save(); });
    ɵngcc0.ɵɵpipe(69, "translate");
    ɵngcc0.ɵɵtext(70, " Save ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r9 = ɵngcc0.ɵɵreference(25);
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 32, ctx_r4.cardHeader));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.connections);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.state === "addConnections");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 34, "Add connection"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.state === "addConnections");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "plus-circle");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 36, "Add connection"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 38, "Back"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "chevron-left");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 40, "Back"));
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(31, 42, "Name"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(33, 44, "e.g. Sigfox connection"))("ngModel", ctx_r4.connection.name);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(37, 46, "Description"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(39, 48, "e.g. This connection has a built-in functionality to detect..."))("ngModel", ctx_r4.connection.description);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(43, 50, "URL"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(45, 52, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(70, _c1)))("ngModel", ctx_r4.connection.baseUrl);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(49, 55, "Parent group ID"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(51, 57, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(71, _c2)))("ngModel", ctx_r4.connection.parentGroupId);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(54, 60, "Must be a valid Parent group ID"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(58, 62, "Username"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(60, 64, "e.g. joe`LOCALIZE`"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r4.connection.username);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showPassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.state === "updateConnection");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(65, 66, "Cancel"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.state === "updateConnection");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(69, 68, "Save"));
    ɵngcc0.ɵɵproperty("disabled", !_r9.form.valid || _r9.form.pristine);
} }
function SigfoxMultipleLnsConnectorComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, SigfoxMultipleLnsConnectorComponent_ng_template_1_no_connections_found_0_Template, 2, 3, "no-connections-found", 2);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵtemplate(2, SigfoxMultipleLnsConnectorComponent_ng_template_1_div_2_Template, 71, 72, "div", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.connections.length === 0 && ctx_r2.state !== "addConnections");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.connections.length !== 0 || ctx_r2.state === "addConnections");
} }
function ActilityMultipleLnsConnectorComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_no_connections_found_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "no-connections-found", 4);
    ɵngcc0.ɵɵlistener("onAction", function ActilityMultipleLnsConnectorComponent_ng_template_1_no_connections_found_0_Template_no_connections_found_onAction_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.addConnection(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("header", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r3.cardHeader));
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_8_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 46);
    ɵngcc0.ɵɵlistener("click", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_8_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r16); const connection_r13 = restoredCtx.$implicit; const ctx_r15 = ɵngcc0.ɵɵnextContext(3); return ctx_r15.setModel(connection_r13); });
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 47);
    ɵngcc0.ɵɵelementStart(2, "span", 48);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const connection_r13 = ctx.$implicit;
    ɵngcc0.ɵɵclassProp("active", connection_r13.name === connection_r13.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "plug");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", connection_r13.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", connection_r13.name, " ");
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_9_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 49);
    ɵngcc0.ɵɵlistener("click", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_9_Template_c8y_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(3); return ctx_r17.addConnection(); });
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 47);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "plug");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "New connection"), " ");
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_form_group_91_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(1, "label", 50);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 51);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_form_group_91_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(3); return ctx_r19.connection.password = $event; });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Password"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 6, "e.g. my_password"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r10.connection.password)("required", ctx_r10.state === "addConnections");
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_92_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 48);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Change password"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Change password"));
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_92_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 48);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Cancel password change"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "Cancel password change"));
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_92_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 52);
    ɵngcc0.ɵɵlistener("click", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_92_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(3); return ctx_r23.changePassword(); });
    ɵngcc0.ɵɵtemplate(1, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_92_span_1_Template, 4, 6, "span", 53);
    ɵngcc0.ɵɵtemplate(2, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_92_span_2_Template, 4, 6, "span", 53);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r11.showPassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.showPassword);
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_97_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 54);
    ɵngcc0.ɵɵlistener("click", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_97_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(3); return ctx_r25.deleteConnection(ctx_r25.connection); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, " Delete ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "Delete"));
} }
const _c3 = function () { return { example: "https://dx-api.thingpark.io" }; };
const _c4 = function () { return { example: "dev1-api" }; };
const _c5 = function () { return { example: "0011AEDF0011AEDF0011AEDF0011AEDF" }; };
const _c6 = function () { return { example: "v102" }; };
const _c7 = function () { return { example: "v121" }; };
function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵelementStart(2, "h4");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 7);
    ɵngcc0.ɵɵelementStart(6, "div", 8);
    ɵngcc0.ɵɵelementStart(7, "c8y-list-group", 9);
    ɵngcc0.ɵɵtemplate(8, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_8_Template, 4, 5, "c8y-li", 10);
    ɵngcc0.ɵɵtemplate(9, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_li_9_Template, 4, 4, "c8y-li", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 12);
    ɵngcc0.ɵɵelementStart(11, "button", 13);
    ɵngcc0.ɵɵlistener("click", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_button_click_11_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.addConnection(); });
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 14);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "div", 15);
    ɵngcc0.ɵɵelementStart(17, "div", 16);
    ɵngcc0.ɵɵelementStart(18, "button", 17);
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelement(20, "i", 14);
    ɵngcc0.ɵɵelementStart(21, "span");
    ɵngcc0.ɵɵtext(22);
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "form", 18, 19);
    ɵngcc0.ɵɵelementStart(26, "div", 20);
    ɵngcc0.ɵɵelementStart(27, "div", 21);
    ɵngcc0.ɵɵelementStart(28, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(29, "label", 22);
    ɵngcc0.ɵɵtext(30);
    ɵngcc0.ɵɵpipe(31, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(32, "input", 23);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_32_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.connection.name = $event; });
    ɵngcc0.ɵɵpipe(33, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(34, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(35, "label", 24);
    ɵngcc0.ɵɵtext(36);
    ɵngcc0.ɵɵpipe(37, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(38, "input", 25);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_38_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r30 = ɵngcc0.ɵɵnextContext(2); return ctx_r30.connection.description = $event; });
    ɵngcc0.ɵɵpipe(39, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(40, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(41, "label", 26);
    ɵngcc0.ɵɵtext(42);
    ɵngcc0.ɵɵpipe(43, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(44, "input", 27);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_44_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.connection.baseUrl = $event; });
    ɵngcc0.ɵɵpipe(45, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(46, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(47, "label", 28);
    ɵngcc0.ɵɵtext(48);
    ɵngcc0.ɵɵpipe(49, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(50, "input", 29);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_50_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r32 = ɵngcc0.ɵɵnextContext(2); return ctx_r32.connection.profileId = $event; });
    ɵngcc0.ɵɵpipe(51, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(52, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(53, "label", 30);
    ɵngcc0.ɵɵtext(54);
    ɵngcc0.ɵɵpipe(55, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(56, "input", 31);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_56_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33.connection.routeApplicationServerId = $event; });
    ɵngcc0.ɵɵpipe(57, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(58, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(59, "label", 32);
    ɵngcc0.ɵɵtext(60);
    ɵngcc0.ɵɵpipe(61, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(62, "input", 33);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_62_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r34 = ɵngcc0.ɵɵnextContext(2); return ctx_r34.connection.routeApplicationServerKey = $event; });
    ɵngcc0.ɵɵpipe(63, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(64, "c8y-messages");
    ɵngcc0.ɵɵelement(65, "c8y-message", 34);
    ɵngcc0.ɵɵpipe(66, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(67, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(68, "label", 35);
    ɵngcc0.ɵɵtext(69);
    ɵngcc0.ɵɵpipe(70, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(71, "input", 36);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_71_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r35 = ɵngcc0.ɵɵnextContext(2); return ctx_r35.connection.adminApiVersion = $event; });
    ɵngcc0.ɵɵpipe(72, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(73, "c8y-messages");
    ɵngcc0.ɵɵelement(74, "c8y-message", 34);
    ɵngcc0.ɵɵpipe(75, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(76, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(77, "label", 37);
    ɵngcc0.ɵɵtext(78);
    ɵngcc0.ɵɵpipe(79, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(80, "input", 38);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_80_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r36 = ɵngcc0.ɵɵnextContext(2); return ctx_r36.connection.coreApiVersion = $event; });
    ɵngcc0.ɵɵpipe(81, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(82, "c8y-messages");
    ɵngcc0.ɵɵelement(83, "c8y-message", 34);
    ɵngcc0.ɵɵpipe(84, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(85, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(86, "label", 39);
    ɵngcc0.ɵɵtext(87);
    ɵngcc0.ɵɵpipe(88, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(89, "input", 40);
    ɵngcc0.ɵɵlistener("ngModelChange", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_input_ngModelChange_89_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r37 = ɵngcc0.ɵɵnextContext(2); return ctx_r37.connection.username = $event; });
    ɵngcc0.ɵɵpipe(90, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(91, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_c8y_form_group_91_Template, 6, 8, "c8y-form-group", 41);
    ɵngcc0.ɵɵtemplate(92, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_92_Template, 3, 2, "button", 42);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(93, "div", 12);
    ɵngcc0.ɵɵelementStart(94, "button", 43);
    ɵngcc0.ɵɵlistener("click", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_button_click_94_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r38 = ɵngcc0.ɵɵnextContext(2); return ctx_r38.setModel(); });
    ɵngcc0.ɵɵpipe(95, "translate");
    ɵngcc0.ɵɵtext(96, " Cancel ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(97, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_button_97_Template, 3, 3, "button", 44);
    ɵngcc0.ɵɵelementStart(98, "button", 45);
    ɵngcc0.ɵɵlistener("click", function ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template_button_click_98_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r39 = ɵngcc0.ɵɵnextContext(2); return ctx_r39.save(); });
    ɵngcc0.ɵɵpipe(99, "translate");
    ɵngcc0.ɵɵtext(100, " Save ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r9 = ɵngcc0.ɵɵreference(25);
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 48, ctx_r4.cardHeader));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.connections);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.state === "addConnections");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 50, "Add connection"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.state === "addConnections");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "plus-circle");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 52, "Add connection"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 54, "Back"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "chevron-left");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 56, "Back"));
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(31, 58, "Name"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(33, 60, "e.g. Actility connection"))("ngModel", ctx_r4.connection.name);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(37, 62, "Description"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(39, 64, "e.g. This connection has a built-in functionality to detect..."))("ngModel", ctx_r4.connection.description);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(43, 66, "URL"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(45, 68, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(109, _c3)))("ngModel", ctx_r4.connection.baseUrl);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(49, 71, "Profile ID"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(51, 73, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(110, _c4)))("ngModel", ctx_r4.connection.profileId);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(55, 76, "Application server ID"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(57, 78, "e.g. Application Server"))("ngModel", ctx_r4.connection.routeApplicationServerId)("required", ctx_r4.connection.routeApplicationServerKey ? "required" : null);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(61, 80, "Application server key"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(63, 82, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(111, _c5)))("ngModel", ctx_r4.connection.routeApplicationServerKey)("required", ctx_r4.connection.routeApplicationServerId ? "required" : null);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(66, 85, "Must be a valid server key"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(70, 87, "Admin API version"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(72, 89, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(112, _c6)))("ngModel", ctx_r4.connection.adminApiVersion);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(75, 92, "Must be a valid API version"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(79, 94, "Core API version"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(81, 96, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(113, _c7)))("ngModel", ctx_r4.connection.coreApiVersion);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(84, 99, "Must be a valid API version"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(88, 101, "Username"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(90, 103, "e.g. joe`LOCALIZE`"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r4.connection.username);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showPassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.state === "updateConnection");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(95, 105, "Cancel"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.state === "updateConnection");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(99, 107, "Save"));
    ɵngcc0.ɵɵproperty("disabled", !_r9.form.valid || _r9.form.pristine);
} }
function ActilityMultipleLnsConnectorComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ActilityMultipleLnsConnectorComponent_ng_template_1_no_connections_found_0_Template, 2, 3, "no-connections-found", 2);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵtemplate(2, ActilityMultipleLnsConnectorComponent_ng_template_1_div_2_Template, 101, 114, "div", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.connections.length === 0 && ctx_r2.state !== "addConnections");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.connections.length !== 0 || ctx_r2.state === "addConnections");
} }
const _c8 = ["lpwanSetDeviceProtocolForm"];
function LpwanAssignDeviceProtocolComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementEnd();
} }
function LpwanAssignDeviceProtocolComponent_div_11_p_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.device.type, " ");
} }
function LpwanAssignDeviceProtocolComponent_div_11_p_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("title", ctx_r4.currentProtocol.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.currentProtocol.name, " ");
} }
function LpwanAssignDeviceProtocolComponent_div_11_c8y_li_10_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 21);
    ɵngcc0.ɵɵlistener("click", function LpwanAssignDeviceProtocolComponent_div_11_c8y_li_10_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const protocol_r7 = restoredCtx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); ctx_r8.newProtocol = protocol_r7; return ctx_r8.setPipe(""); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const protocol_r7 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", protocol_r7.name)("pattern", ctx_r5.pattern);
} }
function LpwanAssignDeviceProtocolComponent_div_11_set_lns_connections_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "set-lns-connections", 23);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("device", ctx_r6.device);
} }
function LpwanAssignDeviceProtocolComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelementStart(2, "div", 11);
    ɵngcc0.ɵɵelementStart(3, "label", 12);
    ɵngcc0.ɵɵtext(4, "Current device protocol");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, LpwanAssignDeviceProtocolComponent_div_11_p_5_Template, 2, 1, "p", 13);
    ɵngcc0.ɵɵtemplate(6, LpwanAssignDeviceProtocolComponent_div_11_p_6_Template, 2, 2, "p", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(8, "c8y-typeahead", 15);
    ɵngcc0.ɵɵlistener("ngModelChange", function LpwanAssignDeviceProtocolComponent_div_11_Template_c8y_typeahead_ngModelChange_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.newProtocol = $event; })("onSearch", function LpwanAssignDeviceProtocolComponent_div_11_Template_c8y_typeahead_onSearch_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.setPipe($event); });
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵtemplate(10, LpwanAssignDeviceProtocolComponent_div_11_c8y_li_10_Template, 2, 2, "c8y-li", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "c8y-messages");
    ɵngcc0.ɵɵelement(12, "c8y-message", 17);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, LpwanAssignDeviceProtocolComponent_div_11_set_lns_connections_14_Template, 1, 1, "set-lns-connections", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.currentProtocol);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.currentProtocol);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 10, "Select new device protocol"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.newProtocol)("allowFreeEntries", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r2.availableProtocols)("c8yForLoadMore", "hidden")("c8yForPipe", ctx_r2.filterProtocols);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(13, 12, "Select one of the protocols."));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.device.c8y_LpwanDevice.serviceProvider != "Loriot");
} }
function LpwanAssignLnsConnectionsComponent_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Connection is not set. Select connection for this device"), " ");
} }
function LpwanAssignLnsConnectionsComponent_p_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r1.currentConnection.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.currentConnection.name, " ");
} }
function LpwanAssignLnsConnectionsComponent_c8y_typeahead_8_c8y_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 12);
    ɵngcc0.ɵɵlistener("click", function LpwanAssignLnsConnectionsComponent_c8y_typeahead_8_c8y_li_2_Template_c8y_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.togglePopover(ctx_r5.popoverConfirm); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const connection_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", connection_r4.name)("pattern", ctx_r3.pattern);
} }
function LpwanAssignLnsConnectionsComponent_c8y_typeahead_8_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-typeahead", 10);
    ɵngcc0.ɵɵlistener("ngModelChange", function LpwanAssignLnsConnectionsComponent_c8y_typeahead_8_Template_c8y_typeahead_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.newConnection = $event; })("onSearch", function LpwanAssignLnsConnectionsComponent_c8y_typeahead_8_Template_c8y_typeahead_onSearch_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.setConnectionPipe($event); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, LpwanAssignLnsConnectionsComponent_c8y_typeahead_8_c8y_li_2_Template, 2, 2, "c8y-li", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(1, 6, "Select new connection"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.newConnection)("allowFreeEntries", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r2.availableConnections)("c8yForLoadMore", "hidden")("c8yForPipe", ctx_r2.filterConnection);
} }
class NoConnectionsFoundComponent {
    constructor() {
        this.onAction = new EventEmitter();
        this.header = gettext('Connections');
    }
    addConnection() {
        this.onAction.emit();
    }
}
NoConnectionsFoundComponent.ɵfac = function NoConnectionsFoundComponent_Factory(t) { return new (t || NoConnectionsFoundComponent)(); };
NoConnectionsFoundComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NoConnectionsFoundComponent, selectors: [["no-connections-found"]], inputs: { header: "header" }, outputs: { onAction: "onAction" }, decls: 23, vars: 26, consts: [[1, "card", "content-fullpage", "split-view--5-7"], [1, "card-header", "separator", "grid__col--fullspan"], [1, "inner-scroll", "split-view__list"], [1, "bg-gray-white", "flex-grow"], [1, "card-block", "large-padding"], [3, "icon", "title", "subtitle", "horizontal"], [1, "card-footer", "separator"], [1, "btn", "btn-primary", 3, "title", "click"], [3, "c8yIcon"], [1, "inner-scroll", "split-view__detail"], [1, "flex-grow"]], template: function NoConnectionsFoundComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h4");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelement(8, "c8y-ui-empty-state", 5);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 6);
        ɵngcc0.ɵɵelementStart(12, "button", 7);
        ɵngcc0.ɵɵlistener("click", function NoConnectionsFoundComponent_Template_button_click_12_listener() { return ctx.addConnection(); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelement(14, "i", 8);
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div", 9);
        ɵngcc0.ɵɵelementStart(18, "div", 10);
        ɵngcc0.ɵɵelementStart(19, "div", 4);
        ɵngcc0.ɵɵelement(20, "c8y-ui-empty-state", 5);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 12, ctx.header));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("icon", "plug")("title", ɵngcc0.ɵɵpipeBind1(9, 14, "No connections found."))("subtitle", ɵngcc0.ɵɵpipeBind1(10, 16, "Click below to add a new connection."))("horizontal", true);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(13, 18, "Add connection"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "plus-circle");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 20, "Add connection"), " ");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("icon", "more-details")("title", ɵngcc0.ɵɵpipeBind1(21, 22, "No settings to display."))("subtitle", ɵngcc0.ɵɵpipeBind1(22, 24, "Add a connection."))("horizontal", true);
    } }, directives: [ɵngcc1.EmptyStateComponent, ɵngcc1.IconDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
NoConnectionsFoundComponent.propDecorators = {
    onAction: [{ type: Output }],
    header: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoConnectionsFoundComponent, [{
        type: Component,
        args: [{
                selector: 'no-connections-found',
                template: "<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header separator grid__col--fullspan\">\n    <h4>{{ header | translate}}</h4>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-gray-white flex-grow\">\n      <div class=\"card-block large-padding\">\n        <c8y-ui-empty-state\n          [icon]=\"'plug'\"\n          [title]=\"'No connections found.' | translate\"\n          [subtitle]=\"'Click below to add a new connection.' | translate\"\n          [horizontal]=\"true\"\n        ></c8y-ui-empty-state>\n      </div>\n    </div>\n\n    <div class=\"card-footer separator\">\n      <button\n        title=\"{{ 'Add connection' | translate }}\"\n        class=\"btn btn-primary\"\n        (click)=\"addConnection()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add connection' | translate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll split-view__detail\">\n    <div class=\"flex-grow\">\n      <div class=\"card-block large-padding\">\n        <c8y-ui-empty-state\n          [icon]=\"'more-details'\"\n          [title]=\"'No settings to display.' | translate\"\n          [subtitle]=\"'Add a connection.' | translate\"\n          [horizontal]=\"true\"\n        ></c8y-ui-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { onAction: [{
            type: Output
        }], header: [{
            type: Input
        }] }); })();

var ConnectionType;
(function (ConnectionType) {
    ConnectionType[ConnectionType["ACTILITY"] = 0] = "ACTILITY";
    ConnectionType[ConnectionType["SIGFOX"] = 1] = "SIGFOX";
})(ConnectionType || (ConnectionType = {}));
function isSigfoxConnection(connection) {
    return typeof connection.parentGroupId !== 'undefined';
}
function isActilityConnection(connection) {
    return typeof connection.profileId !== 'undefined';
}

class MultipleLnsConnectorService {
    constructor(client, appStateService, alertService) {
        this.client = client;
        this.appStateService = appStateService;
        this.alertService = alertService;
        this.headers = { 'Content-Type': 'application/json' };
    }
    list(connectionType) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.getBaseUrlByType(connectionType)}/lns-connection`;
            const options = {
                method: 'GET',
                headers: this.headers
            };
            return this.client.fetch(url, options);
        });
    }
    /**
     * Saves the connection.
     * @param connection The connection to be saved.
     * @param originalName The original name of the connection, required to perform an update.
     */
    save(connection, originalName = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (originalName) {
                return this.update(connection, originalName);
            }
            return this.create(connection);
        });
    }
    detail(connectionType, connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = connectionName.toLocaleLowerCase();
            const url = `${this.getBaseUrlByType(connectionType)}/lns-connection/${encodeURIComponent(String(name))}`;
            const options = {
                method: 'GET',
                headers: this.headers
            };
            const res = yield this.client.fetch(url, options);
            if (res.status === 200) {
                return yield res.json();
            }
            return null;
        });
    }
    exists(connectionType, connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.detail(connectionType, connectionName);
            return connection !== null;
        });
    }
    create(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            connection.name = connection.name.toLocaleLowerCase();
            const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;
            const options = {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify(connection)
            };
            return this.client.fetch(url, options);
        });
    }
    update(connection, originalName) {
        return __awaiter(this, void 0, void 0, function* () {
            connection.name = connection.name.toLocaleLowerCase();
            const url = `${this.getBaseUrlByConnection(connection)}/lns-connection/${encodeURIComponent(String(originalName))}`;
            const options = {
                method: 'PUT',
                headers: this.headers,
                body: JSON.stringify(connection)
            };
            return this.client.fetch(url, options);
        });
    }
    getBaseUrlByConnection(connection) {
        return isSigfoxConnection(connection)
            ? 'service/sigfox-agent'
            : isActilityConnection(connection)
                ? 'service/actility'
                : '';
    }
    getBaseUrlByType(connectionType) {
        return (connectionType === ConnectionType.SIGFOX)
            ? 'service/sigfox-agent'
            : (connectionType === ConnectionType.ACTILITY)
                ? 'service/actility'
                : '';
    }
    delete(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;
            const options = {
                method: 'DELETE'
            };
            return this.client.fetch(`${url}/${encodeURIComponent(String(connection.name))}`, options);
        });
    }
    getApplication(name) {
        const { references } = this.appStateService.currentTenant.value.applications;
        return references.find(({ application }) => application.name === name).application;
    }
    download(url) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const options = {
                    method: 'GET'
                };
                return this.client.fetch(url, options);
            }
            catch (e) {
                this.alertService.addServerFailure(e);
            }
        });
    }
}
MultipleLnsConnectorService.ɵfac = function MultipleLnsConnectorService_Factory(t) { return new (t || MultipleLnsConnectorService)(ɵngcc0.ɵɵinject(ɵngcc2.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc1.AlertService)); };
MultipleLnsConnectorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MultipleLnsConnectorService_Factory() { return new MultipleLnsConnectorService(i0.ɵɵinject(i1.FetchClient), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i2.AlertService)); }, token: MultipleLnsConnectorService, providedIn: "root" });
MultipleLnsConnectorService.ctorParameters = () => [
    { type: FetchClient },
    { type: AppStateService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultipleLnsConnectorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.FetchClient }, { type: ɵngcc1.AppStateService }, { type: ɵngcc1.AlertService }]; }, null); })();

class ConnectionInfoWithDownloadCsvComponent {
    constructor(modal, connectorService) {
        this.modal = modal;
        this.connectorService = connectorService;
    }
    dismiss() {
        this.modal.hide();
    }
    download() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/service/${this.appData.contextPath}${this.messageData.URL}`;
            const res = yield this.connectorService.download(url);
            const streamData = yield res.blob();
            saveAs(streamData, 'DeviceList.csv');
        });
    }
}
ConnectionInfoWithDownloadCsvComponent.ɵfac = function ConnectionInfoWithDownloadCsvComponent_Factory(t) { return new (t || ConnectionInfoWithDownloadCsvComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BsModalRef), ɵngcc0.ɵɵdirectiveInject(MultipleLnsConnectorService)); };
ConnectionInfoWithDownloadCsvComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConnectionInfoWithDownloadCsvComponent, selectors: [["connection-info-with-download-csv"]], inputs: { messageData: "messageData", appData: "appData", modalTitle: "modalTitle" }, decls: 19, vars: 15, consts: [[1, "modal-dialog"], [1, "modal-content"], [1, "c8y-prompt", "alert", "alert-danger"], [1, "m-b-16"], [1, "dlt-c8y-icon-exclamation-circle"], [1, "text-break-word"], [1, "btn-default", 3, "click"], [1, "alert-footer"], [1, "btn", "btn-default", 3, "title", "click"]], template: function ConnectionInfoWithDownloadCsvComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h3", 3);
        ɵngcc0.ɵɵelement(4, "i", 4);
        ɵngcc0.ɵɵelementStart(5, "span");
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "p", 5);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "span", 6);
        ɵngcc0.ɵɵlistener("click", function ConnectionInfoWithDownloadCsvComponent_Template_span_click_11_listener() { return ctx.download(); });
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 7);
        ɵngcc0.ɵɵelementStart(15, "button", 8);
        ɵngcc0.ɵɵlistener("click", function ConnectionInfoWithDownloadCsvComponent_Template_button_click_15_listener() { return ctx.dismiss(); });
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 5, ctx.modalTitle));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 7, ctx.messageData.message), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(13, 9, "Click to download link with affected devices"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(16, 11, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 13, "Cancel"), " ");
    } }, pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
ConnectionInfoWithDownloadCsvComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: MultipleLnsConnectorService }
];
ConnectionInfoWithDownloadCsvComponent.propDecorators = {
    messageData: [{ type: Input }],
    appData: [{ type: Input }],
    modalTitle: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConnectionInfoWithDownloadCsvComponent, [{
        type: Component,
        args: [{
                selector: 'connection-info-with-download-csv',
                template: "<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"c8y-prompt alert alert-danger\">\n      <h3 class=\"m-b-16\">\n        <i class=\"dlt-c8y-icon-exclamation-circle\"></i>\n        <span>{{ modalTitle | translate }}</span>\n      </h3>\n      <p class=\"text-break-word\">\n        {{ messageData.message | translate }}\n      </p>\n      \n      <span class=\"btn-default\" (click)=\"download()\">{{\n        'Click to download link with affected devices' | translate\n      }}</span>\n      <div class=\"alert-footer\">\n        <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"dismiss()\">\n          {{ 'Cancel' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.BsModalRef }, { type: MultipleLnsConnectorService }]; }, { messageData: [{
            type: Input
        }], appData: [{
            type: Input
        }], modalTitle: [{
            type: Input
        }] }); })();

class SigfoxMultipleLnsConnectorComponent {
    constructor(connectorService, alertService, translateService, modalService, modal) {
        this.connectorService = connectorService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.modal = modal;
        this.state = 'loadingConnection';
        this.connection = {};
        this.connections = Array();
        this.showPassword = false;
        this.cardHeader = gettext('Sigfox connections');
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadConnections();
        });
    }
    loadConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.connectorService.list(ConnectionType.SIGFOX);
            if (res && res.status !== 200) {
                const data = res.json ? yield res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
                this.state = 'loadingError';
            }
            else {
                const list = yield res.json();
                this.connections = orderBy(list, ['name'], ['asc']);
                yield this.setModel();
            }
        });
    }
    setModel(connectionObj = null) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resetEditedUnsavedConnection();
            this.connection = connectionObj
                ? connectionObj
                : this.state === 'savedSuccessfully'
                    ? this.connection
                    : head(this.connections);
            this.state = 'updateConnection';
            this.showPassword = false;
            this.connectionBeingEdited = this.connection ? this.connection.name : undefined;
        });
    }
    resetEditedUnsavedConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            const originalConnectionIndex = (!this.connection) ? 0 : findIndex(this.connections, { name: this.connectionBeingEdited });
            if (this.connectionBeingEdited && this.state === 'updateConnection') {
                const isConnectionExist = yield this.connectorService.detail(ConnectionType.SIGFOX, this.connectionBeingEdited);
                this.connections[originalConnectionIndex] = isConnectionExist;
            }
        });
    }
    addConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resetEditedUnsavedConnection();
            this.connection = {};
            this.connectionBeingEdited = '';
            this.state = 'addConnections';
            this.showPassword = true;
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            const checkForConnectionName = (this.connectionBeingEdited && this.connectionBeingEdited !== '') ? this.connectionBeingEdited : this.connection.name;
            const isConnectionExist = yield this.connectorService.exists(ConnectionType.SIGFOX, checkForConnectionName);
            if (this.state === 'addConnections' && isConnectionExist) {
                const mesg = this.translateService.instant(gettext(`Connection with name "{{ name }}" already exists.`), { name: this.connection.name });
                this.alertService.danger(mesg);
            }
            else {
                this.saveConnection();
            }
        });
    }
    deleteConnection(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const mesg = this.translateService.instant(gettext(`You are about to delete the connection "{{ name }}". Do you want to proceed?`), { name: connection.name });
            try {
                yield this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                yield this.delete(connection);
            }
            catch (error) {
                // empty catch block
            }
        });
    }
    changePassword() {
        this.showPassword = !this.showPassword;
        if (this.connectorsForm.controls.password) {
            this.connectorsForm.controls.password.setValue(null);
        }
    }
    saveConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            res = yield this.connectorService.save(this.connection, this.connectionBeingEdited);
            if (res && (res.status === 201 || res.status === 200)) {
                this.state = 'savedSuccessfully';
                this.alertService.success(gettext('Connection saved.'));
                yield this.loadConnections();
            }
            else if (res && res.status === 500) {
                const data = res.json ? yield res.json() : undefined;
                const app = this.connectorService.getApplication('sigfox-agent');
                const initialState = {
                    messageData: data,
                    appData: app,
                    modalTitle: gettext('Failed to update the connection')
                };
                this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
            }
            else {
                const data = res.json ? yield res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
            }
        });
    }
    delete(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.connectorService.delete(connection);
                if (response.ok && response.status === 204) {
                    this.alertService.success(gettext('Connection deleted.'));
                    yield this.loadConnections();
                }
                else if (response && response.status === 500) {
                    const data = response.json ? yield response.json() : undefined;
                    const app = this.connectorService.getApplication('sigfox-agent');
                    const initialState = {
                        messageData: data,
                        appData: app,
                        modalTitle: gettext('Failed to delete the connection')
                    };
                    this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
                }
                else {
                    const data = response.json ? yield response.json() : undefined;
                    this.alertService.addServerFailure({ data, response });
                }
            }
            catch (error) {
                // empty catch block
            }
        });
    }
}
SigfoxMultipleLnsConnectorComponent.ɵfac = function SigfoxMultipleLnsConnectorComponent_Factory(t) { return new (t || SigfoxMultipleLnsConnectorComponent)(ɵngcc0.ɵɵdirectiveInject(MultipleLnsConnectorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService)); };
SigfoxMultipleLnsConnectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SigfoxMultipleLnsConnectorComponent, selectors: [["sigfox-multiple-lns-connector"]], viewQuery: function SigfoxMultipleLnsConnectorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.connectorsForm = _t.first);
    } }, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["renderListAndForm", ""], [3, "header", "onAction", 4, "ngIf"], ["class", "card content-fullpage split-view--5-7", 4, "ngIf"], [3, "header", "onAction"], [1, "card", "content-fullpage", "split-view--5-7"], [1, "card-header", "separator", "grid__col--fullspan"], [1, "inner-scroll", "split-view__list"], [1, "bg-gray-white", "flex-grow"], [1, "nav", "c8y-nav-stacked"], ["class", "c8y-stacked-item p-0", 3, "active", "click", 4, "ngFor", "ngForOf"], ["class", "c8y-nav-stacked active", 3, "click", 4, "ngIf"], [1, "card-footer", "separator-top"], [1, "btn", "btn-default", 3, "disabled", "title", "click"], [3, "c8yIcon"], ["ng-class", "{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }", 1, "inner-scroll", "split-view__detail"], [1, "card-header", "separator", "visible-sm", "visible-xs", "fit-w", "sticky-top"], ["ng-click", "vm.deselect()", 1, "btn", "btn-clean", "text-primary", 3, "title"], [1, "d-contents"], ["connectorsForm", "ngForm"], [1, "flex-grow"], [1, "card-block", "large-padding"], ["for", "name"], ["type", "text", "id", "name", "name", "name", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "description"], ["type", "text", "id", "description", "name", "description", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "baseUrl"], ["type", "text", "id", "baseUrl", "name", "baseUrl", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "parentGroupId"], ["type", "text", "id", "parentGroupId", "name", "parentGroupId", "required", "", "pattern", "[a-z\\d]+", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["name", "pattern", 3, "text"], ["for", "username"], ["type", "text", "id", "username", "name", "username", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], [4, "ngIf"], ["type", "button", "class", "btn btn-default", "name", "changePassword", 3, "click", 4, "ngIf"], ["translate", "", "type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["class", "btn btn-danger", "translate", "", "type", "button", 3, "title", "click", 4, "ngIf"], ["translate", "", "type", "submit", 1, "btn", "btn-primary", 3, "disabled", "title", "click"], [1, "c8y-stacked-item", "p-0", 3, "click"], [3, "icon"], [3, "title"], [1, "c8y-nav-stacked", "active", 3, "click"], ["for", "password"], ["type", "password", "id", "password", "name", "password", 1, "form-control", 3, "placeholder", "ngModel", "required", "ngModelChange"], ["type", "button", "name", "changePassword", 1, "btn", "btn-default", 3, "click"], [3, "title", 4, "ngIf"], ["translate", "", "type", "button", 1, "btn", "btn-danger", 3, "title", "click"]], template: function SigfoxMultipleLnsConnectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SigfoxMultipleLnsConnectorComponent_ng_container_0_Template, 2, 0, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, SigfoxMultipleLnsConnectorComponent_ng_template_1_Template, 3, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.state === "loadingConnection")("ngIfElse", _r1);
    } }, directives: [ɵngcc5.NgIf, ɵngcc1.LoadingComponent, NoConnectionsFoundComponent, ɵngcc1.ListGroupComponent, ɵngcc5.NgForOf, ɵngcc1.IconDirective, ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc1.FormGroupComponent, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc6.DefaultValueAccessor, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc6.PatternValidator, ɵngcc1.MessagesComponent, ɵngcc1.MessageDirective, ɵngcc1.C8yTranslateDirective, ɵngcc1.ListItemComponent, ɵngcc1.ListItemIconComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
SigfoxMultipleLnsConnectorComponent.ctorParameters = () => [
    { type: MultipleLnsConnectorService },
    { type: AlertService },
    { type: TranslateService },
    { type: BsModalService },
    { type: ModalService }
];
SigfoxMultipleLnsConnectorComponent.propDecorators = {
    connectorsForm: [{ type: ViewChild, args: ['connectorsForm', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SigfoxMultipleLnsConnectorComponent, [{
        type: Component,
        args: [{
                selector: 'sigfox-multiple-lns-connector',
                template: "<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <h4>{{ cardHeader | translate }}</h4>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connection.name\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        ng-class=\"{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            ng-click=\"vm.deselect()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Sigfox connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to detect...' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://backend.sigfox.com/api' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"parentGroupId\">\n                  {{ 'Parent group ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: '58c1793b9e93a15370f71caa' }\"\n                  id=\"parentGroupId\"\n                  name=\"parentGroupId\"\n                  [(ngModel)]=\"connection.parentGroupId\"\n                  required\n                  pattern=\"[a-z\\d]+\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid Parent group ID' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  [required]=\"state === 'addConnections'\"\n                />\n              </c8y-form-group>\n\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n          </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(connection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n          </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
            }]
    }], function () { return [{ type: MultipleLnsConnectorService }, { type: ɵngcc1.AlertService }, { type: ɵngcc4.TranslateService }, { type: ɵngcc3.BsModalService }, { type: ɵngcc1.ModalService }]; }, { connectorsForm: [{
            type: ViewChild,
            args: ['connectorsForm', { static: false }]
        }] }); })();

class ActilityMultipleLnsConnectorComponent {
    constructor(connectorService, alertService, translateService, modal, modalService) {
        this.connectorService = connectorService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.modal = modal;
        this.modalService = modalService;
        this.state = 'loadingConnection';
        this.connection = {};
        this.connections = Array();
        this.showPassword = false;
        this.cardHeader = gettext('Actility connections');
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadConnections();
        });
    }
    loadConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.connectorService.list(ConnectionType.ACTILITY);
            if (res && res.status !== 200) {
                const data = res.json ? yield res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
                this.state = 'loadingError';
            }
            else {
                const list = yield res.json();
                this.connections = orderBy(list, ['name'], ['asc']);
                yield this.setModel();
            }
        });
    }
    setModel(connectionObj = null) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resetEditedUnsavedConnection();
            this.connection = connectionObj
                ? connectionObj
                : this.state === 'savedSuccessfully'
                    ? this.connection
                    : head(this.connections);
            this.state = 'updateConnection';
            this.showPassword = false;
            this.connectionBeingEdited = (this.connection) ? this.connection.name : undefined;
        });
    }
    setAdminAndCoreApiVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            this.connection.adminApiVersion = 'latest';
            this.connection.coreApiVersion = 'latest';
        });
    }
    resetEditedUnsavedConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            const originalConnectionIndex = (!this.connection) ? 0 : findIndex(this.connections, { name: this.connectionBeingEdited });
            if (this.connectionBeingEdited && this.state === 'updateConnection') {
                const isConnectionExist = yield this.connectorService.detail(ConnectionType.ACTILITY, this.connectionBeingEdited);
                this.connections[originalConnectionIndex] = isConnectionExist;
            }
        });
    }
    addConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resetEditedUnsavedConnection();
            this.connection = {};
            this.connectionBeingEdited = '';
            this.state = 'addConnections';
            this.showPassword = true;
            yield this.setAdminAndCoreApiVersion();
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            const checkForConnectionName = this.connectionBeingEdited !== '' ? this.connectionBeingEdited : this.connection.name;
            const isConnectionExist = yield this.connectorService.exists(ConnectionType.ACTILITY, checkForConnectionName);
            if (this.state === 'addConnections' && isConnectionExist) {
                const mesg = this.translateService.instant(gettext(`Connection with name "{{ name }}" already exists.`), { name: this.connection.name });
                this.alertService.danger(mesg);
            }
            else {
                this.saveConnection();
            }
        });
    }
    deleteConnection(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const mesg = this.translateService.instant(gettext(`You are about to delete the connection "{{ name }}". Do you want to proceed?`), { name: connection.name });
            try {
                yield this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                yield this.delete(connection);
            }
            catch (error) {
                // empty catch block
            }
        });
    }
    changePassword() {
        this.showPassword = !this.showPassword;
        if (this.connectorsForm.controls.password) {
            this.connectorsForm.controls.password.setValue(null);
        }
    }
    saveConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            res = yield this.connectorService.save(this.connection, this.connectionBeingEdited);
            if (res && (res.status === 201 || res.status === 200)) {
                this.state = 'savedSuccessfully';
                this.alertService.success(gettext('Connection saved.'));
                yield this.loadConnections();
            }
            else if (res && res.status === 500) {
                const data = res.json ? yield res.json() : undefined;
                const app = this.connectorService.getApplication('sigfox-agent');
                const initialState = {
                    messageData: data,
                    appData: app,
                    modalTitle: gettext('Failed to update the connection')
                };
                this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
            }
            else {
                const data = res.json ? yield res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
            }
        });
    }
    delete(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.connectorService.delete(connection);
                if (response.ok && response.status === 204) {
                    this.alertService.success(gettext('Connection deleted.'));
                    yield this.loadConnections();
                }
                else if (response && response.status === 500) {
                    const data = response.json ? yield response.json() : undefined;
                    const app = this.connectorService.getApplication('sigfox-agent');
                    const initialState = {
                        messageData: data,
                        appData: app,
                        modalTitle: gettext('Failed to delete the connection')
                    };
                    this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
                }
                else {
                    const data = response.json ? yield response.json() : undefined;
                    this.alertService.addServerFailure({ data, response });
                }
            }
            catch (error) {
                // empty catch block
            }
        });
    }
}
ActilityMultipleLnsConnectorComponent.ɵfac = function ActilityMultipleLnsConnectorComponent_Factory(t) { return new (t || ActilityMultipleLnsConnectorComponent)(ɵngcc0.ɵɵdirectiveInject(MultipleLnsConnectorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BsModalService)); };
ActilityMultipleLnsConnectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActilityMultipleLnsConnectorComponent, selectors: [["actility-multiple-lns-connector"]], viewQuery: function ActilityMultipleLnsConnectorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.connectorsForm = _t.first);
    } }, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["renderListAndForm", ""], [3, "header", "onAction", 4, "ngIf"], ["class", "card content-fullpage split-view--5-7", 4, "ngIf"], [3, "header", "onAction"], [1, "card", "content-fullpage", "split-view--5-7"], [1, "card-header", "separator", "grid__col--fullspan"], [1, "inner-scroll", "split-view__list"], [1, "bg-gray-white", "flex-grow"], [1, "nav", "c8y-nav-stacked"], ["class", "c8y-stacked-item p-0", 3, "active", "click", 4, "ngFor", "ngForOf"], ["class", "c8y-nav-stacked active", 3, "click", 4, "ngIf"], [1, "card-footer", "separator-top"], [1, "btn", "btn-default", 3, "disabled", "title", "click"], [3, "c8yIcon"], ["ng-class", "{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }", 1, "inner-scroll", "split-view__detail"], [1, "card-header", "separator", "visible-sm", "visible-xs", "fit-w", "sticky-top"], ["ng-click", "vm.deselect()", 1, "btn", "btn-clean", "text-primary", 3, "title"], [1, "d-contents"], ["connectorsForm", "ngForm"], [1, "flex-grow"], [1, "card-block", "large-padding"], ["for", "name"], ["type", "text", "id", "name", "name", "name", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "description"], ["type", "text", "id", "description", "name", "description", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "baseUrl"], ["type", "text", "id", "baseUrl", "name", "baseUrl", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "profileId"], ["type", "text", "id", "profileId", "name", "profileId", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "applicationServerId"], ["type", "text", "id", "applicationServerId", "name", "applicationServerId", 1, "form-control", 3, "placeholder", "ngModel", "required", "ngModelChange"], ["for", "applicationServerKey"], ["type", "text", "id", "applicationServerKey", "name", "applicationServerKey", "pattern", "[A-Fa-f0-9]{32}", 1, "form-control", 3, "placeholder", "ngModel", "required", "ngModelChange"], ["name", "pattern", 3, "text"], ["for", "adminApiVersion"], ["type", "text", "id", "adminApiVersion", "name", "adminApiVersion", "required", "", "pattern", "^v\\d+$|latest", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "coreApiVersion"], ["type", "text", "id", "coreApiVersion", "name", "coreApiVersion", "required", "", "pattern", "^v\\d+$|latest", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["for", "username"], ["type", "text", "id", "username", "name", "username", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], [4, "ngIf"], ["type", "button", "class", "btn btn-default", "name", "changePassword", 3, "click", 4, "ngIf"], ["translate", "", "type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["class", "btn btn-danger", "translate", "", "type", "button", 3, "title", "click", 4, "ngIf"], ["translate", "", "type", "submit", 1, "btn", "btn-primary", 3, "disabled", "title", "click"], [1, "c8y-stacked-item", "p-0", 3, "click"], [3, "icon"], [3, "title"], [1, "c8y-nav-stacked", "active", 3, "click"], ["for", "password"], ["type", "password", "id", "password", "name", "password", 1, "form-control", 3, "placeholder", "ngModel", "required", "ngModelChange"], ["type", "button", "name", "changePassword", 1, "btn", "btn-default", 3, "click"], [3, "title", 4, "ngIf"], ["translate", "", "type", "button", 1, "btn", "btn-danger", 3, "title", "click"]], template: function ActilityMultipleLnsConnectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ActilityMultipleLnsConnectorComponent_ng_container_0_Template, 2, 0, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, ActilityMultipleLnsConnectorComponent_ng_template_1_Template, 3, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.state === "loadingConnection")("ngIfElse", _r1);
    } }, directives: [ɵngcc5.NgIf, ɵngcc1.LoadingComponent, NoConnectionsFoundComponent, ɵngcc1.ListGroupComponent, ɵngcc5.NgForOf, ɵngcc1.IconDirective, ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc1.FormGroupComponent, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc6.DefaultValueAccessor, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc6.PatternValidator, ɵngcc1.MessagesComponent, ɵngcc1.MessageDirective, ɵngcc1.C8yTranslateDirective, ɵngcc1.ListItemComponent, ɵngcc1.ListItemIconComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
ActilityMultipleLnsConnectorComponent.ctorParameters = () => [
    { type: MultipleLnsConnectorService },
    { type: AlertService },
    { type: TranslateService },
    { type: ModalService },
    { type: BsModalService }
];
ActilityMultipleLnsConnectorComponent.propDecorators = {
    connectorsForm: [{ type: ViewChild, args: ['connectorsForm', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityMultipleLnsConnectorComponent, [{
        type: Component,
        args: [{
                selector: 'actility-multiple-lns-connector',
                template: "<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <h4>{{ cardHeader | translate }}</h4>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connection.name\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        ng-class=\"{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            ng-click=\"vm.deselect()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Actility connection' | translate\"                  \n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to detect...' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://dx-api.thingpark.io' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"profileId\">\n                  {{ 'Profile ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'dev1-api' }\"\n                  id=\"profileId\"\n                  name=\"profileId\"\n                  [(ngModel)]=\"connection.profileId\"\n                  required\n                />\n              </c8y-form-group>\n              <!-- DM-1171 start-->\n              <c8y-form-group>\n                <label for=\"applicationServerId\">\n                  {{ 'Application server ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Application Server' | translate\"\n                  id=\"applicationServerId\"\n                  name=\"applicationServerId\"\n                  [(ngModel)]=\"connection.routeApplicationServerId\"\n                  [required]=\"connection.routeApplicationServerKey ? 'required' : null\"                  \n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"applicationServerKey\">\n                  {{ 'Application server key' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: '0011AEDF0011AEDF0011AEDF0011AEDF' }\"\n                  id=\"applicationServerKey\"\n                  name=\"applicationServerKey\"\n                  [(ngModel)]=\"connection.routeApplicationServerKey\"\n                  [required]=\"connection.routeApplicationServerId ? 'required' : null\"\n                  pattern=\"[A-Fa-f0-9]{32}\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid server key' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"adminApiVersion\">\n                  {{ 'Admin API version' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'v102' }\"\n                  id=\"adminApiVersion\"\n                  name=\"adminApiVersion\"\n                  [(ngModel)]=\"connection.adminApiVersion\"\n                  required\n                  pattern=\"^v\\d+$|latest\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid API version' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              \n              <c8y-form-group>\n                <label for=\"coreApiVersion\">\n                  {{ 'Core API version' | translate }}\n                </label>                \n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'v121' }\"\n                  id=\"coreApiVersion\"\n                  name=\"coreApiVersion\"\n                  [(ngModel)]=\"connection.coreApiVersion\"\n                  required\n                  pattern=\"^v\\d+$|latest\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid API version' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              <!-- DM-1171 end-->\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  [required]=\"state === 'addConnections'\"\n                />\n              </c8y-form-group>\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n            </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(connection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n            </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
            }]
    }], function () { return [{ type: MultipleLnsConnectorService }, { type: ɵngcc1.AlertService }, { type: ɵngcc4.TranslateService }, { type: ɵngcc1.ModalService }, { type: ɵngcc3.BsModalService }]; }, { connectorsForm: [{
            type: ViewChild,
            args: ['connectorsForm', { static: false }]
        }] }); })();

const settingsRoutes = [
    {
        path: 'connectivitySettings/multiple_lns_connectors_sigfox',
        component: SigfoxMultipleLnsConnectorComponent
    },
    {
        path: 'connectivitySettings/multiple_lns_connectors_actility',
        component: ActilityMultipleLnsConnectorComponent
    }
];
class MultipleLnsConnectorsModule {
}
MultipleLnsConnectorsModule.ɵfac = function MultipleLnsConnectorsModule_Factory(t) { return new (t || MultipleLnsConnectorsModule)(); };
MultipleLnsConnectorsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MultipleLnsConnectorsModule });
MultipleLnsConnectorsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        MultipleLnsConnectorService
    ], imports: [[
            CoreModule,
            CommonModule,
            FormsModule,
            RouterModule.forChild(settingsRoutes)
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultipleLnsConnectorsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    SigfoxMultipleLnsConnectorComponent,
                    NoConnectionsFoundComponent,
                    ActilityMultipleLnsConnectorComponent,
                    ConnectionInfoWithDownloadCsvComponent
                ],
                imports: [
                    CoreModule,
                    CommonModule,
                    FormsModule,
                    RouterModule.forChild(settingsRoutes)
                ],
                providers: [
                    MultipleLnsConnectorService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MultipleLnsConnectorsModule, { declarations: function () { return [SigfoxMultipleLnsConnectorComponent, NoConnectionsFoundComponent, ActilityMultipleLnsConnectorComponent, ConnectionInfoWithDownloadCsvComponent]; }, imports: function () { return [CoreModule,
        CommonModule,
        FormsModule, ɵngcc7.RouterModule]; } }); })();

class LpwanSetDeviceProtocolService {
    constructor(inventoryService, client, identityService, lnsService) {
        this.inventoryService = inventoryService;
        this.client = client;
        this.identityService = identityService;
        this.lnsService = lnsService;
        this.supportedDevicesCfgs = [
            {
                name: 'lora',
                match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora',
                protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],
                connectionType: ConnectionType.ACTILITY
            },
            {
                name: 'sigfox',
                match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',
                protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['com.sigfox.deviceId'],
                connectionType: ConnectionType.SIGFOX
            }
        ];
        this.header = { 'Content-Type': 'application/json' };
    }
    refreshCache(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const externalId = yield this.getExternalId(device);
            if (externalId) {
                const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;
                const options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify({})
                };
                return this.client.fetch(url, options);
            }
        });
    }
    getMicroserviceUrl(device) {
        const { serviceProvider } = device.c8y_LpwanDevice;
        let serviceName = serviceProvider.toLowerCase();
        if (serviceProvider === 'Sigfox') {
            serviceName = 'sigfox-agent';
        }
        return `/service/${serviceName}`;
    }
    isSupportedDevice(device) {
        return this.supportedDevicesCfgs.some(({ match }) => match(device));
    }
    getCurrentProtocol(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const lpwanDevice = device.c8y_LpwanDevice;
            let protocolId;
            if (lpwanDevice.typeExternalId) {
                const externalId = (yield this.identityService.detail(lpwanDevice.typeExternalId)).data;
                protocolId = externalId.managedObject.id;
            }
            if (!protocolId && lpwanDevice.type) {
                protocolId = lpwanDevice.type.split('/')[2];
            }
            if (!protocolId) {
                return null;
            }
            return (yield this.inventoryService.detail(protocolId)).data;
        });
    }
    applyProtocol(device, selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            const [protocolExternalId] = (yield this.identityService.list(selectedProtocol.id)).data;
            const { externalId, type } = protocolExternalId;
            device.c8y_LpwanDevice.typeExternalId = { externalId, type };
            device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
            device.type = selectedProtocol.name;
            return this.inventoryService.update(device);
        });
    }
    getAvailableProtocols(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = {
                __filter: {
                    type: { __in: this.getProtocolTypesMatchingDevice(device) }
                },
                __orderby: [{ name: 1 }]
            };
            return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });
        });
    }
    getAvailableConnections(device) {
        return __awaiter(this, void 0, void 0, function* () {
            let list;
            const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
            const response = yield this.lnsService.list(matchingCfg.connectionType);
            if (response && response.status === 200) {
                list = yield response.json();
                list = orderBy(list, ['name'], ['asc']);
                return { res: response, data: list };
            }
        });
    }
    getProtocolTypesMatchingDevice(device) {
        const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
        return matchingCfg ? matchingCfg.protocolTypes : [];
    }
    getExternalId(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
            const externalIds = (yield this.identityService.list(device.id)).data;
            const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));
            return externalId ? externalId.externalId : null;
        });
    }
}
LpwanSetDeviceProtocolService.ɵfac = function LpwanSetDeviceProtocolService_Factory(t) { return new (t || LpwanSetDeviceProtocolService)(ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.FetchClient), ɵngcc0.ɵɵinject(ɵngcc2.IdentityService), ɵngcc0.ɵɵinject(MultipleLnsConnectorService)); };
LpwanSetDeviceProtocolService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LpwanSetDeviceProtocolService, factory: LpwanSetDeviceProtocolService.ɵfac });
LpwanSetDeviceProtocolService.ctorParameters = () => [
    { type: InventoryService },
    { type: FetchClient },
    { type: IdentityService },
    { type: MultipleLnsConnectorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanSetDeviceProtocolService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.InventoryService }, { type: ɵngcc2.FetchClient }, { type: ɵngcc2.IdentityService }, { type: MultipleLnsConnectorService }]; }, null); })();

class LpwanAssignDeviceProtocolComponent {
    constructor(lpwanService, alertService, router, inventoryService) {
        this.lpwanService = lpwanService;
        this.alertService = alertService;
        this.router = router;
        this.inventoryService = inventoryService;
        this.filterProtocols = pipe();
        this.pattern = '';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reload();
            this.setPipe('');
        });
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterProtocols = pipe(map((protocols) => protocols.filter(protocol => (!this.currentProtocol || this.currentProtocol.id !== protocol.id) &&
            (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1))));
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            this.newProtocol = null;
            try {
                yield this.loadDevice();
                this.availableProtocols = yield this.lpwanService.getAvailableProtocols(this.device);
                this.currentProtocol = yield this.lpwanService.getCurrentProtocol(this.device);
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            finally {
                this.loading = false;
            }
        });
    }
    loadDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceId = this.router.routerState.snapshot.url.match(/\d+/)[0];
            const { data } = yield this.inventoryService.detail(deviceId);
            this.device = data;
        });
    }
    apply(selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const moUpdated = (yield this.lpwanService.applyProtocol(this.device, selectedProtocol))
                    .res.status === 200;
                yield this.reload();
                this.alertService.success(gettext('Device protocol set.'));
                this.lpwanSetDeviceProtocolForm.reset('dirty');
                if (moUpdated) {
                    this.refreshCache();
                }
            }
            catch (ex) {
                this.alertService.danger(gettext('Could not set device protocol.'));
            }
        });
    }
    refreshCache() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.lpwanService.refreshCache(this.device);
            }
            catch (ex) {
                // do nothing (refreshing is an optional step)
            }
        });
    }
}
LpwanAssignDeviceProtocolComponent.ɵfac = function LpwanAssignDeviceProtocolComponent_Factory(t) { return new (t || LpwanAssignDeviceProtocolComponent)(ɵngcc0.ɵɵdirectiveInject(LpwanSetDeviceProtocolService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.InventoryService)); };
LpwanAssignDeviceProtocolComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LpwanAssignDeviceProtocolComponent, selectors: [["set-device-protocol"]], viewQuery: function LpwanAssignDeviceProtocolComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c8, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lpwanSetDeviceProtocolForm = _t.first);
    } }, decls: 18, vars: 12, consts: [["lpwanSetDeviceProtocolForm", "ngForm"], [1, "row"], [1, "col-md-9"], [1, "card", "card--fullpage"], [1, "card-header", "separator"], [1, "card-title"], [1, "card-block", "p-t-24", "p-b-8", "overflow-visible"], [4, "ngIf"], [1, "card-footer", "separator"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], [1, "col-md-6"], [1, "form-group"], ["translate", ""], ["class", "form-control-static", 4, "ngIf"], ["class", "form-control-static text-truncate", 3, "title", 4, "ngIf"], ["name", "newProtocol", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "click", 4, "c8yFor", "c8yForOf", "c8yForLoadMore", "c8yForPipe"], ["name", "notExisting", 3, "text"], [3, "device", 4, "ngIf"], [1, "form-control-static"], [1, "form-control-static", "text-truncate", 3, "title"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], [3, "text", "pattern"], [3, "device"]], template: function LpwanAssignDeviceProtocolComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", null, 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "h4", 5);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 6);
        ɵngcc0.ɵɵtemplate(10, LpwanAssignDeviceProtocolComponent_div_10_Template, 2, 0, "div", 7);
        ɵngcc0.ɵɵtemplate(11, LpwanAssignDeviceProtocolComponent_div_11_Template, 15, 14, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 8);
        ɵngcc0.ɵɵelementStart(13, "button", 9);
        ɵngcc0.ɵɵlistener("click", function LpwanAssignDeviceProtocolComponent_Template_button_click_13_listener() { return ctx.apply(ctx.newProtocol); });
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(17, "\n\u200C\n");
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 6, "LPWAN configuration"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(14, 8, "Save"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.newProtocol);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "Save"), " ");
    } }, directives: function () { return [ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc5.NgIf, ɵngcc1.LoadingComponent, ɵngcc1.C8yTranslateDirective, ɵngcc1.FormGroupComponent, ɵngcc1.TypeaheadComponent, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc1.ForOfDirective, ɵngcc1.MessagesComponent, ɵngcc1.MessageDirective, ɵngcc1.ListItemComponent, ɵngcc1.HighlightComponent, LpwanAssignLnsConnectionsComponent]; }, pipes: function () { return [ɵngcc1.C8yTranslatePipe]; }, encapsulation: 2 });
LpwanAssignDeviceProtocolComponent.ctorParameters = () => [
    { type: LpwanSetDeviceProtocolService },
    { type: AlertService },
    { type: Router },
    { type: InventoryService }
];
LpwanAssignDeviceProtocolComponent.propDecorators = {
    lpwanSetDeviceProtocolForm: [{ type: ViewChild, args: ['lpwanSetDeviceProtocolForm', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanAssignDeviceProtocolComponent, [{
        type: Component,
        args: [{
                selector: 'set-device-protocol',
                template: "<form #lpwanSetDeviceProtocolForm=\"ngForm\">\n  <div class=\"row\">\n    <div class=\"col-md-9\">\n      <div class=\"card card--fullpage\">\n        <div class=\"card-header separator\">\n          <h4 class=\"card-title\">\n            {{ 'LPWAN configuration' | translate }}\n          </h4>\n        </div>\n\n        <div class=\"card-block p-t-24 p-b-8 overflow-visible\">\n          <div *ngIf=\"loading\">\n            <c8y-loading></c8y-loading>\n          </div>\n\n          <div *ngIf=\"!loading\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label translate>Current device protocol</label>\n                <p class=\"form-control-static\" *ngIf=\"!currentProtocol\">\n                  {{ device.type }}\n                </p>\n                <p\n                  class=\"form-control-static text-truncate\"\n                  *ngIf=\"currentProtocol\"\n                  [title]=\"currentProtocol.name\"\n                >\n                  {{ currentProtocol.name }}\n                </p>\n              </div>\n              <c8y-form-group>\n                <c8y-typeahead\n                  [(ngModel)]=\"newProtocol\"\n                  placeholder=\"{{ 'Select new device protocol' | translate }}\"\n                  (onSearch)=\"setPipe($event)\"\n                  name=\"newProtocol\"\n                  [allowFreeEntries]=\"false\"\n                >\n                  <c8y-li\n                    *c8yFor=\"\n                      let protocol of availableProtocols;\n                      loadMore: 'hidden';\n                      pipe: filterProtocols\n                    \"\n                    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                    (click)=\"newProtocol = protocol; setPipe('')\"\n                  >\n                    <c8y-highlight [text]=\"protocol.name\" [pattern]=\"pattern\"></c8y-highlight>\n                  </c8y-li>\n                </c8y-typeahead>\n                <c8y-messages>\n                  <c8y-message\n                    name=\"notExisting\"\n                    [text]=\"'Select one of the protocols.' | translate\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n            <set-lns-connections\n              *ngIf=\"device.c8y_LpwanDevice.serviceProvider != 'Loriot'\"\n              [device]=\"device\"\n            ></set-lns-connections>\n          </div>\n        </div>\n\n        <div class=\"card-footer separator\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            class=\"btn btn-primary\"\n            (click)=\"apply(newProtocol)\"\n            [disabled]=\"!newProtocol\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n\u200C\n"
            }]
    }], function () { return [{ type: LpwanSetDeviceProtocolService }, { type: ɵngcc1.AlertService }, { type: ɵngcc7.Router }, { type: ɵngcc2.InventoryService }]; }, { lpwanSetDeviceProtocolForm: [{
            type: ViewChild,
            args: ['lpwanSetDeviceProtocolForm', { static: false }]
        }] }); })();

class LpwanAgentGuard {
    constructor(lpwanService) {
        this.lpwanService = lpwanService;
    }
    canActivate(route) {
        const device = route.data.contextData || route.parent.data.contextData;
        return this.lpwanService.isSupportedDevice(device);
    }
}
LpwanAgentGuard.ɵfac = function LpwanAgentGuard_Factory(t) { return new (t || LpwanAgentGuard)(ɵngcc0.ɵɵinject(LpwanSetDeviceProtocolService)); };
LpwanAgentGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LpwanAgentGuard, factory: LpwanAgentGuard.ɵfac });
LpwanAgentGuard.ctorParameters = () => [
    { type: LpwanSetDeviceProtocolService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanAgentGuard, [{
        type: Injectable
    }], function () { return [{ type: LpwanSetDeviceProtocolService }]; }, null); })();

class LpwanAssignLnsConnectionsComponent {
    constructor(lpwanService, alertService) {
        this.lpwanService = lpwanService;
        this.alertService = alertService;
        this.buttons = [
            { label: gettext('Cancel'), action: () => Promise.reject() },
            { label: gettext('Re-register'), action: () => this.deviceReregister(), status: 'default' }
        ];
        this.reRegisterMsg = gettext('To change provider connection, you need to re-register device first.');
        this.filterConnection = pipe();
        this.pattern = '';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reload();
            this.setConnectionPipe('');
        });
    }
    setConnectionPipe(filterStr) {
        this.pattern = filterStr;
        this.filterConnection = pipe(map((connections) => connections.filter(connection => (!this.currentConnection || this.currentConnection.name !== connection.name) &&
            (!filterStr || connection.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1))));
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            this.newConnection = null;
            try {
                this.availableConnections = yield this.lpwanService.getAvailableConnections(this.device);
                this.currentConnection = find(this.availableConnections.data, {
                    name: this.device.c8y_LpwanDevice.lnsConnectionName
                });
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            finally {
                this.loading = false;
            }
        });
    }
    togglePopover(popoverCfrm) {
        popoverCfrm.show();
        this.setConnectionPipe('');
    }
    deviceReregister() {
        return new Promise((resolve, reject) => {
            window.location.href = `#/deviceregistration`;
            resolve(true);
        });
    }
}
LpwanAssignLnsConnectionsComponent.ɵfac = function LpwanAssignLnsConnectionsComponent_Factory(t) { return new (t || LpwanAssignLnsConnectionsComponent)(ɵngcc0.ɵɵdirectiveInject(LpwanSetDeviceProtocolService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService)); };
LpwanAssignLnsConnectionsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LpwanAssignLnsConnectionsComponent, selectors: [["set-lns-connections"]], viewQuery: function LpwanAssignLnsConnectionsComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(PopoverConfirmComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popoverConfirm = _t.first);
    } }, inputs: { device: "device" }, decls: 12, vars: 9, consts: [[1, "col-md-6"], [1, "form-group"], ["translate", ""], ["class", "form-control-static", 4, "ngIf"], ["class", "form-control-static  text-truncate", 3, "title", 4, "ngIf"], ["outsideClick", "true", "containerClass", "lns-connection-popover", 3, "message", "buttons", "placement"], ["name", "newConnection", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch", 4, "ngIf"], ["name", "notExisting", 3, "text"], [1, "form-control-static"], [1, "form-control-static", "text-truncate", 3, "title"], ["name", "newConnection", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "click", 4, "c8yFor", "c8yForOf", "c8yForLoadMore", "c8yForPipe"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], [3, "text", "pattern"]], template: function LpwanAssignLnsConnectionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "label", 2);
        ɵngcc0.ɵɵtext(3, "Current connection");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, LpwanAssignLnsConnectionsComponent_p_4_Template, 3, 3, "p", 3);
        ɵngcc0.ɵɵtemplate(5, LpwanAssignLnsConnectionsComponent_p_5_Template, 2, 2, "p", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "c8y-form-group");
        ɵngcc0.ɵɵelement(7, "c8y-popover-confirm", 5);
        ɵngcc0.ɵɵtemplate(8, LpwanAssignLnsConnectionsComponent_c8y_typeahead_8_Template, 3, 8, "c8y-typeahead", 6);
        ɵngcc0.ɵɵelementStart(9, "c8y-messages");
        ɵngcc0.ɵɵelement(10, "c8y-message", 7);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.currentConnection);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentConnection);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("message", ctx.reRegisterMsg)("buttons", ctx.buttons)("placement", "bottom");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(11, 7, "Select one of the connections."));
    } }, directives: [ɵngcc1.C8yTranslateDirective, ɵngcc5.NgIf, ɵngcc1.FormGroupComponent, ɵngcc1.PopoverConfirmComponent, ɵngcc1.MessagesComponent, ɵngcc1.MessageDirective, ɵngcc1.TypeaheadComponent, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc1.ForOfDirective, ɵngcc1.ListItemComponent, ɵngcc1.HighlightComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
LpwanAssignLnsConnectionsComponent.ctorParameters = () => [
    { type: LpwanSetDeviceProtocolService },
    { type: AlertService }
];
LpwanAssignLnsConnectionsComponent.propDecorators = {
    device: [{ type: Input }],
    popoverConfirm: [{ type: ViewChild, args: [PopoverConfirmComponent, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanAssignLnsConnectionsComponent, [{
        type: Component,
        args: [{
                selector: 'set-lns-connections',
                template: "<div class=\"col-md-6\">\n  <div class=\"form-group\">\n    <label translate>Current connection</label>\n    <p class=\"form-control-static\" *ngIf=\"!currentConnection\">\n      {{ 'Connection is not set. Select connection for this device' | translate }}\n    </p>\n    <p class=\"form-control-static  text-truncate\" *ngIf=\"currentConnection\" title=\"{{ currentConnection.name }}\">\n      {{ currentConnection.name }}\n    </p>\n  </div>\n\n  <c8y-form-group>\n    <c8y-popover-confirm\n      outsideClick=\"true\"\n      containerClass=\"lns-connection-popover\"\n      [message]=\"reRegisterMsg\"\n      [buttons]=\"buttons\"\n      [placement]=\"'bottom'\"\n    ></c8y-popover-confirm>\n    <c8y-typeahead\n      *ngIf=\"!loading\"\n      [(ngModel)]=\"newConnection\"\n      placeholder=\"{{ 'Select new connection' | translate }}\"\n      name=\"newConnection\"\n      (onSearch)=\"setConnectionPipe($event)\"\n      [allowFreeEntries]=\"false\"\n    >\n      <c8y-li\n        *c8yFor=\"let connection of availableConnections; loadMore: 'hidden'; pipe: filterConnection\"\n        class=\"p-l-8 p-r-8 c8y-list__item--link\"\n        (click)=\"togglePopover(popoverConfirm)\"\n      >\n        <c8y-highlight [text]=\"connection.name\" [pattern]=\"pattern\"></c8y-highlight>\n      </c8y-li>\n    </c8y-typeahead>\n    <c8y-messages\n      ><c8y-message\n        name=\"notExisting\"\n        [text]=\"'Select one of the connections.' | translate\"\n      ></c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n</div>\n"
            }]
    }], function () { return [{ type: LpwanSetDeviceProtocolService }, { type: ɵngcc1.AlertService }]; }, { device: [{
            type: Input
        }], popoverConfirm: [{
            type: ViewChild,
            args: [PopoverConfirmComponent, { static: true }]
        }] }); })();

const routes = [
    {
        context: ViewContext.Device,
        path: 'assign-protocol',
        component: LpwanAssignDeviceProtocolComponent,
        label: gettext('LPWAN'),
        icon: 'c8y-device-protocols',
        canActivate: [LpwanAgentGuard]
    }
];
const ɵ0 = routes;
class LpwanProtocolModule {
}
LpwanProtocolModule.ɵfac = function LpwanProtocolModule_Factory(t) { return new (t || LpwanProtocolModule)(); };
LpwanProtocolModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LpwanProtocolModule });
LpwanProtocolModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        LpwanAgentGuard,
        LpwanSetDeviceProtocolService,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            FormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanProtocolModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    LpwanAssignDeviceProtocolComponent,
                    LpwanAssignLnsConnectionsComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule
                ],
                entryComponents: [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent],
                providers: [
                    LpwanAgentGuard,
                    LpwanSetDeviceProtocolService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LpwanProtocolModule, { declarations: function () { return [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent]; }, imports: function () { return [CoreModule,
        FormsModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LpwanAssignDeviceProtocolComponent, LpwanProtocolModule, MultipleLnsConnectorsModule, ɵ0, LpwanSetDeviceProtocolService as ɵa, MultipleLnsConnectorService as ɵb, LpwanAssignLnsConnectionsComponent as ɵc, LpwanAgentGuard as ɵd, SigfoxMultipleLnsConnectorComponent as ɵe, MultipleLnsConnectorService as ɵf, NoConnectionsFoundComponent as ɵg, ActilityMultipleLnsConnectorComponent as ɵh, ConnectionInfoWithDownloadCsvComponent as ɵi };

//# sourceMappingURL=c8y-ngx-components-protocol-lpwan.js.map