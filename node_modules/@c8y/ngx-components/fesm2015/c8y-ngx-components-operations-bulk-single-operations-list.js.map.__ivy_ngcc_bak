{"version":3,"file":"c8y-ngx-components-operations-bulk-single-operations-list.js","sources":["../../operations/bulk-single-operations-list/single-operation-item.component.ts","../../operations/bulk-single-operations-list/single-operations-list.component.ts","../../operations/bulk-single-operations-list/bulk-single-operations-list.module.ts","../../operations/bulk-single-operations-list/c8y-ngx-components-operations-bulk-single-operations-list.ts"],"sourcesContent":["import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { InventoryService, IOperation, OperationService } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport {\n  OperationStatusOptionsMap,\n  OPERATION_STATUS_LABELS,\n  OPERATION_STATUS_OPTIONS_MAP\n} from '@c8y/ngx-components/operations/shared';\nimport { omit } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-single-operation-item',\n  templateUrl: './single-operation-item.component.html'\n})\nexport class SingleOperationItemComponent {\n  device = {};\n  OPERATION_STATUS_LABELS = OPERATION_STATUS_LABELS;\n  OPERATION_STATUS_OPTIONS_MAP: OperationStatusOptionsMap = OPERATION_STATUS_OPTIONS_MAP;\n  @Input()\n  operation: IOperation;\n  @Input()\n  readOnly: boolean = false;\n  @ViewChild('failureReason', { static: true }) failureReasonRef: ElementRef;\n\n  constructor(\n    private alertService: AlertService,\n    private inventoryService: InventoryService,\n    private operationService: OperationService\n  ) {}\n\n  async ngOnInit() {\n    this.device = (await this.inventoryService.detail(this.operation.deviceId))?.data;\n  }\n\n  async retrySingleOperation(singleOperation) {\n    const operationToCreate = omit(singleOperation, [\n      'id',\n      'self',\n      'status',\n      'failureReason',\n      'creationTime',\n      'delivery'\n    ]);\n\n    try {\n      await this.operationService.create(operationToCreate);\n      this.alertService.success(gettext('Operation created.'));\n    } catch (er) {\n      this.alertService.addServerFailure(er);\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { IOperation, IOperationBulk, IResultList, OperationStatus } from '@c8y/client';\nimport { StatusFilterComponent } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport {\n  StatusOption,\n  OperationStatusOptionsMap,\n  OPERATION_STATUS_LABELS,\n  OPERATION_STATUS_OPTIONS_MAP\n} from '@c8y/ngx-components/operations/shared';\n\n@Component({\n  selector: 'c8y-single-operations-list',\n  templateUrl: './single-operations-list.component.html'\n})\nexport class SingleOperationsListComponent implements AfterViewInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n\n  @ViewChild(StatusFilterComponent, { static: false })\n  statusFilter: StatusFilterComponent;\n\n  OPERATION_STATUS = { ...OperationStatus, ALL: gettext('ALL') };\n  OPERATION_STATUS_LABELS = OPERATION_STATUS_LABELS;\n  OPERATION_STATUS_OPTIONS_MAP: OperationStatusOptionsMap = OPERATION_STATUS_OPTIONS_MAP;\n  singleOperations: IResultList<IOperation>;\n\n  constructor(private bulkOperationsService: BulkOperationsService) {}\n\n  async ngAfterViewInit() {\n    if (this.statusFilter) {\n      this.filterOperationsByType();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.filterOperationsByType();\n    }\n  }\n\n  filterOperationsByType() {\n    if (this.statusFilter) {\n      const typeFilter = this.getFilterTypeOfSingleOperations();\n      this.statusFilter.preset(\n        typeFilter === this.OPERATION_STATUS.ALL\n          ? []\n          : [{ label: this.OPERATION_STATUS_LABELS[typeFilter] }]\n      );\n    } else {\n      setTimeout(this.filterOperationsByType.bind(this));\n    }\n  }\n\n  getFilterTypeOfSingleOperations() {\n    const progress = this.bulkOperation.progress;\n\n    if (progress.failed > 0) {\n      return this.OPERATION_STATUS.FAILED;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {\n      return this.OPERATION_STATUS.EXECUTING;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {\n      return this.OPERATION_STATUS.PENDING;\n    } else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {\n      return this.OPERATION_STATUS.SUCCESSFUL;\n    }\n\n    return this.OPERATION_STATUS.ALL;\n  }\n\n  async getOperationsByStatus(filter: StatusOption[]) {\n    this.singleOperations = await this.bulkOperationsService.getSingleOperationsByStatus(\n      filter[0] && filter[0].label,\n      this.bulkOperation.id\n    );\n  }\n\n  retryBulkOperation() {\n    this.onRetryFailedOperations.emit(this.bulkOperation);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule } from '@c8y/ngx-components';\nimport { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';\n\nimport { SingleOperationItemComponent } from './single-operation-item.component';\nimport { SingleOperationsListComponent } from './single-operations-list.component';\n\n/**\n * This module allows for displaying the list of single operations in a bulk operations details.\n */\n@NgModule({\n  imports: [CoreModule, PopoverModule, RouterModule, TooltipModule, StatusFilterModule],\n  declarations: [SingleOperationsListComponent, SingleOperationItemComponent],\n  entryComponents: [SingleOperationsListComponent, SingleOperationItemComponent],\n  exports: [SingleOperationsListComponent, SingleOperationItemComponent]\n})\nexport class BulkSingleOperationsListModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;;;;;MAca,4BAA4B;IAUvC,YACU,YAA0B,EAC1B,gBAAkC,EAClC,gBAAkC;QAFlC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAZ5C,WAAM,GAAG,EAAE,CAAC;QACZ,4BAAuB,GAAG,uBAAuB,CAAC;QAClD,iCAA4B,GAA8B,4BAA4B,CAAC;QAIvF,aAAQ,GAAY,KAAK,CAAC;KAOtB;IAEE,QAAQ;;;YACZ,IAAI,CAAC,MAAM,GAAG,OAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,0CAAE,IAAI,CAAC;;KACnF;IAEK,oBAAoB,CAAC,eAAe;;YACxC,MAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,EAAE;gBAC9C,IAAI;gBACJ,MAAM;gBACN,QAAQ;gBACR,eAAe;gBACf,cAAc;gBACd,UAAU;aACX,CAAC,CAAC;YAEH,IAAI;gBACF,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;gBACtD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;aAC1D;YAAC,OAAO,EAAE,EAAE;gBACX,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;aACxC;SACF;KAAA;;;YAxCF,SAAS,SAAC;gBACT,QAAQ,EAAE,2BAA2B;gBACrC,4/DAAqD;aACtD;;;YAXQ,YAAY;YADZ,gBAAgB;YAAc,gBAAgB;;;wBAiBpD,KAAK;uBAEL,KAAK;+BAEL,SAAS,SAAC,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;MCGjC,6BAA6B;IAexC,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;QAXhE,aAAQ,GAAY,KAAK,CAAC;QAChB,4BAAuB,GAA0C,IAAI,YAAY,EAAE,CAAC;QAK9F,qBAAgB,mCAAQ,eAAe,KAAE,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,IAAG;QAC/D,4BAAuB,GAAG,uBAAuB,CAAC;QAClD,iCAA4B,GAA8B,4BAA4B,CAAC;KAGnB;IAE9D,eAAe;;YACnB,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,sBAAsB,EAAE,CAAC;aAC/B;SACF;KAAA;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,EAAE;YAC/D,IAAI,CAAC,sBAAsB,EAAE,CAAC;SAC/B;KACF;IAED,sBAAsB;QACpB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,UAAU,GAAG,IAAI,CAAC,+BAA+B,EAAE,CAAC;YAC1D,IAAI,CAAC,YAAY,CAAC,MAAM,CACtB,UAAU,KAAK,IAAI,CAAC,gBAAgB,CAAC,GAAG;kBACpC,EAAE;kBACF,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,EAAE,CAAC,CAC1D,CAAC;SACH;aAAM;YACL,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACpD;KACF;IAED,+BAA+B;QAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QAE7C,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;SACrC;aAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,UAAU,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,KAAK,CAAC,EAAE;YACvF,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;SACxC;aAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,UAAU,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,KAAK,CAAC,EAAE;YACzF,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;SACtC;aAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,KAAK,CAAC,EAAE;YACtF,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC;SACzC;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;KAClC;IAEK,qBAAqB,CAAC,MAAsB;;YAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,2BAA2B,CAClF,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAC5B,IAAI,CAAC,aAAa,CAAC,EAAE,CACtB,CAAC;SACH;KAAA;IAED,kBAAkB;QAChB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KACvD;;;YAvEF,SAAS,SAAC;gBACT,QAAQ,EAAE,4BAA4B;gBACtC,u3DAAsD;aACvD;;;YAXQ,qBAAqB;;;4BAa3B,KAAK;uBAEL,KAAK;sCAEL,MAAM;2BAEN,SAAS,SAAC,qBAAqB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;;;ACrBrD;;;MASa,8BAA8B;;;YAN1C,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,kBAAkB,CAAC;gBACrF,YAAY,EAAE,CAAC,6BAA6B,EAAE,4BAA4B,CAAC;gBAC3E,eAAe,EAAE,CAAC,6BAA6B,EAAE,4BAA4B,CAAC;gBAC9E,OAAO,EAAE,CAAC,6BAA6B,EAAE,4BAA4B,CAAC;aACvE;;;ACnBD;;;;;;"}