import { Component, EventEmitter, Input, Output, NgModule } from '@angular/core';
import { gettext, memoize, CoreModule, FormsModule } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { get, property } from 'lodash-es';
import { BehaviorSubject, defer, of } from 'rxjs';
import { BaseStepperComponent, BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { BulkOperationsService, BulkOperationType, baseUrl, HOOK_LIST_BULK_TYPE } from '@c8y/ngx-components/operations/bulk-operations-service';
import { __decorate } from 'tslib';
import { InventoryService } from '@c8y/client';
import { RepositoryService, RepositoryType, SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { distinctUntilChanged, switchMap, catchError, shareReplay, distinctUntilKeyChanged, tap, map, debounceTime } from 'rxjs/operators';
import { ReactiveFormsModule } from '@angular/forms';
import { StepperFramesModule } from '@c8y/ngx-components/operations/stepper-frames';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@c8y/ngx-components/operations/bulk-operation-stepper';
import * as ɵngcc4 from '@c8y/ngx-components/operations/stepper-frames';
import * as ɵngcc5 from '@c8y/ngx-components';
import * as ɵngcc6 from '@c8y/ngx-components/repository/shared';
import * as ɵngcc7 from '@c8y/client';
import * as ɵngcc8 from '@angular/common';
import * as ɵngcc9 from '@angular/forms';

function StepperBulkTypeFirmwareComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "c8y-select-firmware-step", 2);
    ɵngcc0.ɵɵlistener("firmware", function StepperBulkTypeFirmwareComponent_ng_container_1_Template_c8y_select_firmware_step_firmware_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onFirmwareSelected($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selected", ctx_r0.stepData == null ? null : ctx_r0.stepData.firmware);
} }
function StepperBulkTypeFirmwareComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "c8y-preview-selection-frame", 3);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "c8y-version-or-patch-step", 4);
    ɵngcc0.ɵɵlistener("versionOrPatch", function StepperBulkTypeFirmwareComponent_ng_container_3_Template_c8y_version_or_patch_step_versionOrPatch_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onVersionOrPatchSelected($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("header", ɵngcc0.ɵɵpipeBind1(2, 4, "Select version or patch"))("name", ctx_r1.stepData == null ? null : ctx_r1.stepData.firmware == null ? null : ctx_r1.stepData.firmware.name)("description", ctx_r1.stepData == null ? null : ctx_r1.stepData.firmware == null ? null : ctx_r1.stepData.firmware.description);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("selected", ctx_r1.stepData == null ? null : ctx_r1.stepData.versionOrPatch);
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Legacy"), " ");
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 10);
    ɵngcc0.ɵɵelement(2, "i", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 16);
    ɵngcc0.ɵɵelementStart(1, "span", 17);
    ɵngcc0.ɵɵtext(2, "No patches");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵelementStart(1, "span", 17);
    ɵngcc0.ɵɵtext(2, "1 patch");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function (a0) { return { count: a0 }; };
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵelementStart(1, "span", 18);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtext(3, "{{ count }} patches");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const baseVersion_r2 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(3, _c0, ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r11.getPatchVersionsCount$(baseVersion_r2))));
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 12);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_ng_template_3_Template, 3, 0, "ng-template", 13);
    ɵngcc0.ɵɵtemplate(4, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_ng_template_4_Template, 3, 0, "ng-template", 14);
    ɵngcc0.ɵɵtemplate(5, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_ng_template_5_Template, 4, 5, "ng-template", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const baseVersion_r2 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngPlural", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r8.getPatchVersionsCount$(baseVersion_r2)));
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_1_Template, 3, 0, "span", 8);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_span_3_Template, 6, 3, "span", 8);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const baseVersion_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r5.getPatchVersionsCount$(baseVersion_r2)) === null);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r5.getPatchVersionsCount$(baseVersion_r2)) !== null);
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_c8y_li_14_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 26);
    ɵngcc0.ɵɵtext(1, "patch");
    ɵngcc0.ɵɵelementEnd();
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_c8y_li_14_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 27);
    ɵngcc0.ɵɵtext(1, "version");
    ɵngcc0.ɵɵelementEnd();
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_c8y_li_14_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-radio", 19);
    ɵngcc0.ɵɵlistener("onSelect", function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_c8y_li_14_Template_c8y_li_radio_onSelect_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r21); const patchVersion_r15 = restoredCtx.$implicit; const ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20.selectVersionOrPatch($event, patchVersion_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "c8y-li-icon");
    ɵngcc0.ɵɵelement(3, "i", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-li-body", 4);
    ɵngcc0.ɵɵelementStart(5, "div", 20);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 20);
    ɵngcc0.ɵɵtemplate(8, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_c8y_li_14_span_8_Template, 2, 0, "span", 21);
    ɵngcc0.ɵɵtemplate(9, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_c8y_li_14_ng_template_9_Template, 2, 0, "ng-template", null, 22, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 23);
    ɵngcc0.ɵɵelementStart(12, "span", 24);
    ɵngcc0.ɵɵtext(13, " File ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "span", 25);
    ɵngcc0.ɵɵpipe(15, "async");
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const patchVersion_r15 = ctx.$implicit;
    const _r18 = ɵngcc0.ɵɵreference(10);
    const ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selected", patchVersion_r15 === ctx_r6.selected);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", patchVersion_r15.c8y_Firmware.version, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", patchVersion_r15.c8y_Patch)("ngIfElse", _r18);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 6, ctx_r6.getBinaryName$(patchVersion_r15.c8y_Firmware.url)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(17, 8, ctx_r6.getBinaryName$(patchVersion_r15.c8y_Firmware.url)), " ");
} }
function VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 4);
    ɵngcc0.ɵɵelementStart(4, "div", 5);
    ɵngcc0.ɵɵelementStart(5, "p");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 6);
    ɵngcc0.ɵɵtemplate(8, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_8_Template, 3, 3, "span", 7);
    ɵngcc0.ɵɵpipe(9, "async");
    ɵngcc0.ɵɵtemplate(10, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_span_10_Template, 5, 6, "span", 8);
    ɵngcc0.ɵɵpipe(11, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(13, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(14, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_c8y_li_14_Template, 18, 10, "c8y-li", 2);
    ɵngcc0.ɵɵpipe(15, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const baseVersion_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(baseVersion_r2.c8y_Firmware.version);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(9, 5, ctx_r1.isLegacy$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(11, 7, ctx_r1.isLegacy$));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(15, 9, ctx_r1.getBaseVersionAndPatches$(baseVersion_r2)))("c8yForLoadMore", "auto");
} }
const _c1 = function (a0) { return { "dd-low": a0 }; };
function VersionOrPatchComponent_c8y_list_group_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-list-group", 1);
    ɵngcc0.ɵɵtemplate(1, VersionOrPatchComponent_c8y_list_group_0_c8y_li_1_Template, 16, 11, "c8y-li", 2);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx_r0.elementCount <= ctx_r0.DD_LOW_COUNT));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.baseVersions$))("c8yForLoadMore", "auto");
} }
function SelectFirmwareComponent_i_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 15);
} }
function SelectFirmwareComponent_i_11_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 16);
    ɵngcc0.ɵɵlistener("click", function SelectFirmwareComponent_i_11_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.textFilter$.next(""); });
    ɵngcc0.ɵɵelementEnd();
} }
function SelectFirmwareComponent_c8y_li_38_small_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const firmware_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", firmware_r5.description, " ");
} }
function SelectFirmwareComponent_c8y_li_38_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵelementStart(1, "em", 28);
    ɵngcc0.ɵɵtext(2, "No description available.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectFirmwareComponent_c8y_li_38_span_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const firmware_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", firmware_r5.c8y_Filter == null ? null : firmware_r5.c8y_Filter.type, " ");
} }
function SelectFirmwareComponent_c8y_li_38_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "em", 28);
    ɵngcc0.ɵɵtext(1, "Undefined`device type`");
    ɵngcc0.ɵɵelementEnd();
} }
function SelectFirmwareComponent_c8y_li_38_span_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 29);
    ɵngcc0.ɵɵelementStart(1, "span", 30);
    ɵngcc0.ɵɵtext(2, "Legacy");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectFirmwareComponent_c8y_li_38_span_26_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 31);
    ɵngcc0.ɵɵelement(2, "i", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectFirmwareComponent_c8y_li_38_span_26_span_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 37);
    ɵngcc0.ɵɵelementStart(1, "span", 30);
    ɵngcc0.ɵɵtext(2, "No versions");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectFirmwareComponent_c8y_li_38_span_26_span_3_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 22);
    ɵngcc0.ɵɵtext(1, " version ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 38);
    ɵngcc0.ɵɵtext(3, "1");
    ɵngcc0.ɵɵelementEnd();
} }
function SelectFirmwareComponent_c8y_li_38_span_26_span_3_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 22);
    ɵngcc0.ɵɵtext(1, " versions ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 38);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const firmware_r5 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, ctx_r21.getBaseVersionsCount$(firmware_r5)), " ");
} }
function SelectFirmwareComponent_c8y_li_38_span_26_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 33);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, SelectFirmwareComponent_c8y_li_38_span_26_span_3_ng_template_3_Template, 3, 0, "ng-template", 34);
    ɵngcc0.ɵɵtemplate(4, SelectFirmwareComponent_c8y_li_38_span_26_span_3_ng_template_4_Template, 4, 0, "ng-template", 35);
    ɵngcc0.ɵɵtemplate(5, SelectFirmwareComponent_c8y_li_38_span_26_span_3_ng_template_5_Template, 5, 3, "ng-template", 36);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const firmware_r5 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngPlural", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r18.getBaseVersionsCount$(firmware_r5)));
} }
function SelectFirmwareComponent_c8y_li_38_span_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, SelectFirmwareComponent_c8y_li_38_span_26_span_1_Template, 3, 0, "span", 27);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, SelectFirmwareComponent_c8y_li_38_span_26_span_3_Template, 6, 3, "span", 27);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const firmware_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r14.getBaseVersionsCount$(firmware_r5)) === null);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r14.getBaseVersionsCount$(firmware_r5)) !== null);
} }
function SelectFirmwareComponent_c8y_li_38_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-radio", 17);
    ɵngcc0.ɵɵlistener("onSelect", function SelectFirmwareComponent_c8y_li_38_Template_c8y_li_radio_onSelect_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); const firmware_r5 = restoredCtx.$implicit; const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.selectFirmware($event, firmware_r5); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "c8y-li-icon");
    ɵngcc0.ɵɵelement(3, "i", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-li-body", 8);
    ɵngcc0.ɵɵelementStart(5, "div", 19);
    ɵngcc0.ɵɵelementStart(6, "div", 10);
    ɵngcc0.ɵɵelement(7, "c8y-highlight", 20);
    ɵngcc0.ɵɵpipe(8, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 21);
    ɵngcc0.ɵɵelementStart(10, "div", 10);
    ɵngcc0.ɵɵelementStart(11, "span", 22);
    ɵngcc0.ɵɵtext(12, " Description ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(13, SelectFirmwareComponent_c8y_li_38_small_13_Template, 2, 1, "small", 23);
    ɵngcc0.ɵɵtemplate(14, SelectFirmwareComponent_c8y_li_38_ng_template_14_Template, 3, 0, "ng-template", null, 24, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "div", 19);
    ɵngcc0.ɵɵelementStart(17, "div", 10);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementStart(19, "span", 22);
    ɵngcc0.ɵɵtext(20, " Device type ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(21, SelectFirmwareComponent_c8y_li_38_span_21_Template, 2, 1, "span", 23);
    ɵngcc0.ɵɵtemplate(22, SelectFirmwareComponent_c8y_li_38_ng_template_22_Template, 2, 0, "ng-template", null, 25, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "div", 12);
    ɵngcc0.ɵɵtemplate(25, SelectFirmwareComponent_c8y_li_38_span_25_Template, 3, 0, "span", 26);
    ɵngcc0.ɵɵtemplate(26, SelectFirmwareComponent_c8y_li_38_span_26_Template, 5, 6, "span", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const firmware_r5 = ctx.$implicit;
    const _r8 = ɵngcc0.ɵɵreference(15);
    const _r11 = ɵngcc0.ɵɵreference(23);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selected", firmware_r5 === ctx_r2.selected);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", firmware_r5.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", firmware_r5.name)("pattern", ɵngcc0.ɵɵpipeBind1(8, 13, ctx_r2.textFilter$));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r2.getDescriptionTitle(firmware_r5));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", firmware_r5.description)("ngIfElse", _r8);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate2("title", "", ɵngcc0.ɵɵpipeBind1(18, 15, "Device type"), ": ", ctx_r2.getDeviceTypeTitle(firmware_r5), "");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", firmware_r5.c8y_Filter == null ? null : firmware_r5.c8y_Filter.type)("ngIfElse", _r11);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.isLegacy(firmware_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.isLegacy(firmware_r5));
} }
class StepperBulkTypeFirmwareComponent extends BaseStepperComponent {
    constructor(bulkOperationService, translate) {
        super();
        this.bulkOperationService = bulkOperationService;
        this.translate = translate;
        this.descriptionTemplate = gettext('{{ name }} (version {{ version }})');
        this.textFilter$ = new BehaviorSubject('');
        this.stepData = {
            firmware: undefined,
            versionOrPatch: undefined
        };
    }
    goToVersionOrPatchStep({ stepper }) {
        const selectedFirmware = this.stepData.firmware;
        this.bulkOperationService.setFirmwareId(selectedFirmware.id);
        this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;
        stepper.next();
    }
    onVersionOrPatchSelected(versionOrPatch) {
        this.stepData.versionOrPatch = versionOrPatch;
    }
    onFirmwareSelected(fw) {
        this.stepData.firmware = fw;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    retrieveOperationPrototype() {
        const selectedFirmware = this.stepData.firmware;
        const selectedVersionOrPatch = this.stepData.versionOrPatch;
        if (!selectedFirmware || !selectedVersionOrPatch) {
            return;
        }
        const firmware = {
            name: selectedFirmware.name,
            version: selectedVersionOrPatch.c8y_Firmware.version,
            url: selectedVersionOrPatch.c8y_Firmware.url
        };
        if (selectedVersionOrPatch.c8y_Patch) {
            firmware.isPatch = true;
            firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;
        }
        const name = selectedFirmware.name;
        const version = selectedVersionOrPatch.c8y_Firmware.version;
        const description = `Update firmware to: ${name} (version: ${version}).`;
        return {
            name: gettext('Firmware update'),
            description: this.translate.instant(this.descriptionTemplate, {
                name: get(this.stepData, 'firmware.name'),
                version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')
            }),
            prototype: {
                description,
                c8y_Firmware: firmware
            }
        };
    }
    onSelectionChange(event) {
        this.textFilter$.next('');
        super.onSelectionChange(event);
    }
}
StepperBulkTypeFirmwareComponent.ɵfac = function StepperBulkTypeFirmwareComponent_Factory(t) { return new (t || StepperBulkTypeFirmwareComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
StepperBulkTypeFirmwareComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StepperBulkTypeFirmwareComponent, selectors: [["c8y-stepper-firmware"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 11, consts: [[4, "customStep", "customStepCompleted", "customStepButtonsDisabled", "customStepOnNext"], [4, "customStep", "customStepCompleted", "customStepButtonsDisabled"], [1, "d-contents", 3, "selected", "firmware"], [3, "header", "name", "description"], ["list", "", 3, "selected", "versionOrPatch"]], template: function StepperBulkTypeFirmwareComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-bulk-operation-stepper");
        ɵngcc0.ɵɵtemplate(1, StepperBulkTypeFirmwareComponent_ng_container_1_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, StepperBulkTypeFirmwareComponent_ng_container_3_Template, 4, 6, "ng-container", 1);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(2, 7, "Select firmware"))("customStepCompleted", !!(ctx.stepData == null ? null : ctx.stepData.firmware))("customStepButtonsDisabled", !(ctx.stepData == null ? null : ctx.stepData.firmware))("customStepOnNext", ctx.goToVersionOrPatchStep.bind(ctx));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(4, 9, "Select version or patch"))("customStepCompleted", !!(ctx.stepData == null ? null : ctx.stepData.versionOrPatch))("customStepButtonsDisabled", !(ctx.stepData == null ? null : ctx.stepData.versionOrPatch));
    } }, directives: function () { return [ɵngcc3.BulkOperationStepper, ɵngcc3.CustomStep, SelectFirmwareComponent, ɵngcc4.PreviewSelectionFrameComponent, VersionOrPatchComponent]; }, pipes: function () { return [ɵngcc5.C8yTranslatePipe]; }, encapsulation: 2 });
StepperBulkTypeFirmwareComponent.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: TranslateService }
];

class VersionOrPatchComponent {
    constructor(repositoryService, inventoryService, bulkOpsService) {
        this.repositoryService = repositoryService;
        this.inventoryService = inventoryService;
        this.bulkOpsService = bulkOpsService;
        this.versionOrPatch = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.firmware$ = this.bulkOpsService.firmwareId.pipe(distinctUntilChanged(), switchMap(id => defer(() => this.inventoryService.detail(id).then(result => result.data)).pipe(catchError(error => of(error)))), shareReplay(1));
        this.baseVersions$ = this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(firmware => this.repositoryService.listBaseVersions(firmware)), tap(resp => {
            this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy$ = this.firmware$.pipe(map(firmware => this.repositoryService.isLegacyEntry(firmware)), shareReplay(1));
        this.expanded = {};
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    getBinaryName$(binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    }
    getBaseVersionAndPatches$(baseVersion) {
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(firmware => this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)), shareReplay(1));
    }
    getPatchVersionsCount$(baseVersion) {
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(() => this.firmware$), switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)), shareReplay(1));
    }
    selectVersionOrPatch(selected, versionOrPatch) {
        if (selected) {
            this.versionOrPatch.emit(versionOrPatch);
        }
    }
}
VersionOrPatchComponent.ɵfac = function VersionOrPatchComponent_Factory(t) { return new (t || VersionOrPatchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.RepositoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService)); };
VersionOrPatchComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: VersionOrPatchComponent, selectors: [["c8y-version-or-patch-step"]], inputs: { selected: "selected" }, outputs: { versionOrPatch: "versionOrPatch" }, decls: 2, vars: 3, consts: [["class", "m-b-16", 3, "ngClass", 4, "ngIf"], [1, "m-b-16", 3, "ngClass"], [4, "c8yFor", "c8yForOf", "c8yForLoadMore"], ["c8yIcon", "c8y-firmware"], [1, "content-flex-50"], [1, "col-10"], [1, "col-2"], ["class", "label label-warning", 4, "ngIf"], [4, "ngIf"], [1, "label", "label-warning"], [1, "label", "label-info"], ["c8yIcon", "circle-o-notch", 1, "icon-spin"], [3, "ngPlural"], ["ngPluralCase", "=0"], ["ngPluralCase", "=1"], ["ngPluralCase", "other"], [1, "label", "label-default"], ["translate", ""], ["translate", "", 3, "translateParams"], [3, "selected", "onSelect"], [1, "col-3"], ["translate", "", "class", "label label-info", 4, "ngIf", "ngIfElse"], ["version", ""], [1, "col-6", "text-truncate"], ["translate", "", 1, "text-label-small", "m-r-4"], [3, "title"], ["translate", "", 1, "label", "label-info"], ["translate", "", 1, "label", "label-primary"]], template: function VersionOrPatchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, VersionOrPatchComponent_c8y_list_group_0_Template, 3, 7, "c8y-list-group", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        let tmp_0_0;
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 1, ctx.baseVersions$)) == null ? null : tmp_0_0.data.length) > 0);
    } }, directives: [ɵngcc8.NgIf, ɵngcc5.ListGroupComponent, ɵngcc8.NgClass, ɵngcc5.ForOfDirective, ɵngcc5.ListItemComponent, ɵngcc5.ListItemIconComponent, ɵngcc5.IconDirective, ɵngcc5.ListItemBodyComponent, ɵngcc5.ListItemCollapseComponent, ɵngcc8.NgPlural, ɵngcc8.NgPluralCase, ɵngcc5.C8yTranslateDirective, ɵngcc5.ListItemRadioComponent], pipes: [ɵngcc8.AsyncPipe, ɵngcc5.C8yTranslatePipe], encapsulation: 2 });
VersionOrPatchComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: InventoryService },
    { type: BulkOperationsService }
];
VersionOrPatchComponent.propDecorators = {
    selected: [{ type: Input }],
    versionOrPatch: [{ type: Output }]
};
__decorate([
    memoize()
], VersionOrPatchComponent.prototype, "getBinaryName$", null);
__decorate([
    memoize(property('id'))
], VersionOrPatchComponent.prototype, "getBaseVersionAndPatches$", null);
__decorate([
    memoize(property('id'))
], VersionOrPatchComponent.prototype, "getPatchVersionsCount$", null);

class SelectFirmwareComponent {
    constructor(repositoryService, bulkOpsService, translate) {
        this.repositoryService = repositoryService;
        this.bulkOpsService = bulkOpsService;
        this.translate = translate;
        this.firmware = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.textFilter$ = new BehaviorSubject('');
        this.firmwares$ = this.textFilter$
            .pipe(debounceTime(400), distinctUntilChanged())
            .pipe(switchMap(text => this.getFirmwares(text)), tap(resp => {
            this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.DEVICE_TYPE_NOT_AVAILABLE = gettext('No device type available.');
        this.DESCRIPTION_NOT_AVAILABLE = gettext('No description available.');
    }
    ngOnInit() {
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    selectFirmware(selected, fw) {
        if (selected) {
            this.firmware.emit(fw);
        }
    }
    getBaseVersionsCount$(firmware) {
        return this.firmwares$.pipe(switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)), shareReplay(1));
    }
    getDescriptionTitle(firmware) {
        return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));
    }
    getDeviceTypeTitle(firmware) {
        return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
    }
    getFirmwares(partialName) {
        return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });
    }
}
SelectFirmwareComponent.ɵfac = function SelectFirmwareComponent_Factory(t) { return new (t || SelectFirmwareComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.RepositoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
SelectFirmwareComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectFirmwareComponent, selectors: [["c8y-select-firmware-step"]], inputs: { selected: "selected" }, outputs: { firmware: "firmware" }, decls: 40, vars: 52, consts: [[3, "header", "noResults"], ["filters", "", 1, "input-group", "input-group-search"], ["type", "search", 1, "form-control", 3, "title", "placeholder", "ngModel", "ngModelChange"], [1, "input-group-addon"], ["c8yIcon", "filter", 4, "ngIf"], ["c8yIcon", "times", "class", "text-muted", 3, "click", 4, "ngIf"], ["header", "", 1, "hidden-sm", "hidden-xs", "m-r-8", "m-l-8"], [1, "p-l-32", "p-r-40"], [1, "content-flex-40"], [1, "col-3"], [1, "text-truncate", 3, "title"], [1, "col-4"], [1, "col-2"], ["list", "", 3, "ngClass"], [4, "c8yFor", "c8yForOf", "c8yForLoadMore"], ["c8yIcon", "filter"], ["c8yIcon", "times", 1, "text-muted", 3, "click"], [3, "selected", "onSelect"], ["c8yIcon", "c8y-firmware"], [1, "col-3", "m-b-xs-8"], [3, "text", "pattern"], [1, "col-4", "m-b-xs-8"], ["translate", "", 1, "text-label-small", "m-r-8", "visible-xs", "visible-sm"], [4, "ngIf", "ngIfElse"], ["noDesc", ""], ["noType", ""], ["class", "label label-warning flex-item-right-sm", 4, "ngIf"], [4, "ngIf"], ["translate", "", 1, "text-muted"], [1, "label", "label-warning", "flex-item-right-sm"], ["translate", ""], [1, "label", "label-info"], ["c8yIcon", "circle-o-notch", 1, "icon-spin"], [3, "ngPlural"], ["ngPluralCase", "=0"], ["ngPluralCase", "=1"], ["ngPluralCase", "other"], [1, "label", "label-default"], [1, "badge", "badge-info", "flex-item-right-sm"]], template: function SelectFirmwareComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-select-step-frame", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelementStart(4, "input", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function SelectFirmwareComponent_Template_input_ngModelChange_4_listener($event) { return ctx.textFilter$.next($event); });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "span", 3);
        ɵngcc0.ɵɵtemplate(9, SelectFirmwareComponent_i_9_Template, 1, 0, "i", 4);
        ɵngcc0.ɵɵpipe(10, "async");
        ɵngcc0.ɵɵtemplate(11, SelectFirmwareComponent_i_11_Template, 1, 0, "i", 5);
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "c8y-li", 6);
        ɵngcc0.ɵɵelementStart(14, "c8y-li-icon");
        ɵngcc0.ɵɵelement(15, "i", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "c8y-li-body", 8);
        ɵngcc0.ɵɵelementStart(17, "div", 9);
        ɵngcc0.ɵɵelementStart(18, "span", 10);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 11);
        ɵngcc0.ɵɵelementStart(23, "span", 10);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "div", 9);
        ɵngcc0.ɵɵelementStart(28, "span", 10);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵtext(30);
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "div", 12);
        ɵngcc0.ɵɵelementStart(33, "span", 10);
        ɵngcc0.ɵɵpipe(34, "translate");
        ɵngcc0.ɵɵtext(35);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "c8y-list-group", 13);
        ɵngcc0.ɵɵtemplate(38, SelectFirmwareComponent_c8y_li_38_Template, 27, 17, "c8y-li", 14);
        ɵngcc0.ɵɵpipe(39, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("header", ɵngcc0.ɵɵpipeBind1(1, 18, "Select firmware"))("noResults", ɵngcc0.ɵɵpipeBind1(2, 20, ctx.textFilter$).length > 0 && ctx.elementCount === 0);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 22, "Filter firmware\u2026"));
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(6, 24, "Filter firmware\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ɵngcc0.ɵɵpipeBind1(7, 26, ctx.textFilter$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(10, 28, ctx.textFilter$).length === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(12, 30, ctx.textFilter$).length > 0);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate1("title", " ", ɵngcc0.ɵɵpipeBind1(19, 32, "Name"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 34, "Name"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(24, 36, "Description"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 38, "Description"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(29, 40, "Device type"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(31, 42, "Device type"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(34, 44, "Versions"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(36, 46, "Versions"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(50, _c1, ctx.elementCount < ctx.DD_LOW_COUNT));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(39, 48, ctx.firmwares$))("c8yForLoadMore", "auto");
    } }, directives: [ɵngcc4.SelectStepFrameComponent, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc8.NgIf, ɵngcc5.ListItemComponent, ɵngcc5.ListItemIconComponent, ɵngcc5.ListItemBodyComponent, ɵngcc5.ListGroupComponent, ɵngcc8.NgClass, ɵngcc5.ForOfDirective, ɵngcc5.IconDirective, ɵngcc5.ListItemRadioComponent, ɵngcc5.HighlightComponent, ɵngcc5.C8yTranslateDirective, ɵngcc8.NgPlural, ɵngcc8.NgPluralCase], pipes: [ɵngcc5.C8yTranslatePipe, ɵngcc8.AsyncPipe], encapsulation: 2 });
SelectFirmwareComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: BulkOperationsService },
    { type: TranslateService }
];
SelectFirmwareComponent.propDecorators = {
    selected: [{ type: Input }],
    firmware: [{ type: Output }]
};
__decorate([
    memoize(property('id'))
], SelectFirmwareComponent.prototype, "getBaseVersionsCount$", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeFirmwareComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper-firmware',
                template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <c8y-preview-selection-frame\n      [header]=\"'Select version or patch' | translate\"\n      [name]=\"stepData?.firmware?.name\"\n      [description]=\"stepData?.firmware?.description\"\n    >\n      <c8y-version-or-patch-step\n        list\n        [selected]=\"stepData?.versionOrPatch\"\n        (versionOrPatch)=\"onVersionOrPatchSelected($event)\"\n      >\n      </c8y-version-or-patch-step>\n    </c8y-preview-selection-frame>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }, { type: ɵngcc2.TranslateService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VersionOrPatchComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-version-or-patch-step',
                template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n"
            }]
    }], function () { return [{ type: ɵngcc6.RepositoryService }, { type: ɵngcc7.InventoryService }, { type: ɵngcc1.BulkOperationsService }]; }, { versionOrPatch: [{
            type: Output
        }], selected: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectFirmwareComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-select-firmware-step',
                template: "<c8y-select-step-frame\n  [header]=\"'Select firmware' | translate\"\n  [noResults]=\"(textFilter$ | async).length > 0 && elementCount === 0\"\n>\n  <div filters class=\"input-group input-group-search\">\n    <input\n      type=\"search\"\n      class=\"form-control\"\n      title=\"{{ 'Filter firmware\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        c8yIcon=\"times\"\n        class=\"text-muted\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n  <c8y-li header class=\"hidden-sm hidden-xs m-r-8 m-l-8\">\n    <c8y-li-icon><i class=\"p-l-32 p-r-40\"></i></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-40\">\n      <div class=\"col-3\">\n        <span class=\"text-truncate\" title=\" {{ 'Name' | translate }} \">\n          {{ 'Name' | translate }}\n        </span>\n      </div>\n      <div class=\"col-4\">\n        <span class=\"text-truncate\" title=\"{{ 'Description' | translate }}\">\n          {{ 'Description' | translate }}\n        </span>\n      </div>\n      <div class=\"col-3\">\n        <span class=\"text-truncate\" title=\"{{ 'Device type' | translate }}\">\n          {{ 'Device type' | translate }}\n        </span>\n      </div>\n      <div class=\"col-2\">\n        <span class=\"text-truncate\" title=\"{{ 'Versions' | translate }}\">\n          {{ 'Versions' | translate }}\n        </span>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-list-group list [ngClass]=\"{ 'dd-low': elementCount < DD_LOW_COUNT }\">\n    <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n      <c8y-li-radio\n        (onSelect)=\"selectFirmware($event, firmware)\"\n        [selected]=\"firmware === selected\"\n      ></c8y-li-radio>\n      <c8y-li-icon>\n        <i c8yIcon=\"c8y-firmware\"></i>\n      </c8y-li-icon>\n\n      <c8y-li-body class=\"content-flex-40\">\n        <div class=\"col-3 m-b-xs-8\">\n          <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n            <c8y-highlight [text]=\"firmware.name\" [pattern]=\"textFilter$ | async\"></c8y-highlight>\n          </div>\n        </div>\n        <div class=\"col-4 m-b-xs-8\">\n          <div class=\"text-truncate\" title=\"{{ getDescriptionTitle(firmware) }}\">\n            <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n              Description\n            </span>\n            <small *ngIf=\"firmware.description; else noDesc\">\n              {{ firmware.description }}\n            </small>\n            <ng-template #noDesc>\n              <small>\n                <em class=\"text-muted\" translate>No description available.</em>\n              </small>\n            </ng-template>\n          </div>\n        </div>\n        <div class=\"col-3 m-b-xs-8\">\n          <div\n            class=\"text-truncate\"\n            title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\"\n          >\n            <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n              Device type\n            </span>\n            <span *ngIf=\"firmware.c8y_Filter?.type; else noType\">\n              {{ firmware.c8y_Filter?.type }}\n            </span>\n            <ng-template #noType>\n              <em class=\"text-muted\" translate>Undefined`device type`</em>\n            </ng-template>\n          </div>\n        </div>\n        <div class=\"col-2\">\n          <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning flex-item-right-sm\">\n            <span translate>Legacy</span>\n          </span>\n\n          <span *ngIf=\"!isLegacy(firmware)\">\n            <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n              <span class=\"label label-info\">\n                <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n              </span>\n            </span>\n            <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n              <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n                <ng-template ngPluralCase=\"=0\">\n                  <span class=\"label label-default\">\n                    <span translate>No versions</span>\n                  </span>\n                </ng-template>\n                <ng-template ngPluralCase=\"=1\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    version\n                  </span>\n                  <span class=\"badge badge-info flex-item-right-sm\">1</span>\n                </ng-template>\n                <ng-template ngPluralCase=\"other\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    versions\n                  </span>\n                  <span class=\"badge badge-info flex-item-right-sm\">\n                    {{ getBaseVersionsCount$(firmware) | async }}\n                  </span>\n                </ng-template>\n              </span>\n            </span>\n          </span>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</c8y-select-step-frame>\n"
            }]
    }], function () { return [{ type: ɵngcc6.RepositoryService }, { type: ɵngcc1.BulkOperationsService }, { type: ɵngcc2.TranslateService }]; }, { firmware: [{
            type: Output
        }], selected: [{
            type: Input
        }] }); })();

const ɵ0 = {
    type: BulkOperationType.FIRMWARE,
    c8yIcon: 'c8y-firmware',
    name: gettext('Firmware update'),
    path: `${baseUrl}firmware`,
    component: StepperBulkTypeFirmwareComponent,
    fragments: ['c8y_Firmware'],
    selected: false
};
/** Module for the 'Firmware update' operation type stepper */
class StepperBulkTypeFirmwareModule {
}
StepperBulkTypeFirmwareModule.ɵfac = function StepperBulkTypeFirmwareModule_Factory(t) { return new (t || StepperBulkTypeFirmwareModule)(); };
StepperBulkTypeFirmwareModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StepperBulkTypeFirmwareModule });
StepperBulkTypeFirmwareModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_LIST_BULK_TYPE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            BulkOperationStepperModule,
            StepperFramesModule,
            SharedRepositoryModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeFirmwareModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    StepperBulkTypeFirmwareComponent,
                    VersionOrPatchComponent,
                    SelectFirmwareComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    StepperFramesModule,
                    SharedRepositoryModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeFirmwareComponent],
                exports: [StepperBulkTypeFirmwareComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StepperBulkTypeFirmwareModule, { declarations: function () { return [StepperBulkTypeFirmwareComponent, VersionOrPatchComponent, SelectFirmwareComponent]; }, imports: function () { return [CoreModule,
        FormsModule,
        ReactiveFormsModule,
        BulkOperationStepperModule,
        StepperFramesModule,
        SharedRepositoryModule]; }, exports: function () { return [StepperBulkTypeFirmwareComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { SelectFirmwareComponent, StepperBulkTypeFirmwareComponent, StepperBulkTypeFirmwareModule, VersionOrPatchComponent, ɵ0 };

//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-firmware.js.map