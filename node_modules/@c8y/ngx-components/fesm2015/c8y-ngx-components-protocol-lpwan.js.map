{"version":3,"file":"c8y-ngx-components-protocol-lpwan.js","sources":["../../protocol-lpwan/multiple-lns-connectors/no-connections-found.component.ts","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connector.model.ts","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connector.service.ts","../../protocol-lpwan/multiple-lns-connectors/connection-info-with-download-csv.component.ts","../../protocol-lpwan/multiple-lns-connectors/sigfox-multiple-lns-connector.component.ts","../../protocol-lpwan/multiple-lns-connectors/actility-multiple-lns-connector.component.ts","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connectors.module.ts","../../protocol-lpwan/lpwan-set-device-protocol.service.ts","../../protocol-lpwan/lpwan-set-device-protocol.component.ts","../../protocol-lpwan/lpwan-agent.guard.ts","../../protocol-lpwan/lpwan-set-connections.component.ts","../../protocol-lpwan/lpwan-protocol.module.ts","../../protocol-lpwan/c8y-ngx-components-protocol-lpwan.ts"],"names":[],"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","sourcesContent":["import { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\n@Component({\n  selector: 'no-connections-found',\n  templateUrl: './no-connections-found.component.html'\n})\nexport class NoConnectionsFoundComponent {\n  @Output() onAction: EventEmitter<void> = new EventEmitter();\n  @Input() header: string = gettext('Connections');\n\n  addConnection() {\n    this.onAction.emit();\n  }\n}\n","export enum ConnectionType {\n  ACTILITY,\n  SIGFOX\n}\nexport interface Connection {\n  name: string;\n  baseUrl: string;\n  username: string;\n  password: string;\n  description: string;\n}\nexport interface SigfoxConnection extends Connection {\n  parentGroupId: string;\n}\nexport interface ActilityConnection extends Connection {\n  profileId: string;\n  routeApplicationServerId?: string;\n  routeApplicationServerKey?: string;\n  adminApiVersion: string;\n  coreApiVersion: string;\n}\nexport function isSigfoxConnection(\n  connection: SigfoxConnection | ActilityConnection\n): connection is SigfoxConnection {\n  return typeof (connection as SigfoxConnection).parentGroupId !== 'undefined';\n}\nexport function isActilityConnection(\n  connection: SigfoxConnection | ActilityConnection\n): connection is ActilityConnection {\n  return typeof (connection as ActilityConnection).profileId !== 'undefined';\n}\n\nexport type State =\n  | 'loadingConnection'\n  | 'loadingError'\n  | 'connectionAvailable'\n  | 'connectionNotAvailable'\n  | 'addConnections'\n  | 'savedSuccessfully'\n  | 'updateConnection';\n","import { Injectable } from '@angular/core';\nimport { FetchClient, IApplication, IFetchOptions, IFetchResponse } from '@c8y/client';\nimport { AlertService, AppStateService } from '@c8y/ngx-components';\nimport { ActilityConnection, isActilityConnection, isSigfoxConnection, SigfoxConnection, ConnectionType } from './multiple-lns-connector.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MultipleLnsConnectorService {\n  private headers: any;\n  constructor(\n    private client: FetchClient,\n    private appStateService: AppStateService,\n    private alertService: AlertService\n  ) {\n    this.headers = { 'Content-Type': 'application/json' };\n  }\n\n  async list(connectionType: ConnectionType) {\n    const url = `${this.getBaseUrlByType(connectionType)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers\n    };\n    return this.client.fetch(url, options);\n  }\n\n  /**\n   * Saves the connection.\n   * @param connection The connection to be saved.\n   * @param originalName The original name of the connection, required to perform an update.\n   */\n  async save(connection: ActilityConnection | SigfoxConnection, originalName: string = null) {\n    if (originalName) {\n      return this.update(connection, originalName);\n    }\n    return this.create(connection);\n  }\n\n  async detail(\n    connectionType: ConnectionType,\n    connectionName: string\n  ): Promise<ActilityConnection | SigfoxConnection | null> {\n    const name = connectionName.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByType(connectionType)}/lns-connection/${encodeURIComponent(String(name))}`;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers\n    };\n    const res = await this.client.fetch(url, options);\n    if (res.status === 200) {\n      return await res.json();\n    }\n    return null;\n  }\n\n  async exists(connectionType: ConnectionType, connectionName: string): Promise<boolean> {\n    const connection = await this.detail(connectionType, connectionName);\n    return connection !== null;\n  }\n\n  async create(connection: ActilityConnection | SigfoxConnection) {\n    connection.name = connection.name.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(connection)\n    };\n    return this.client.fetch(url, options);\n  }\n\n  async update(connection: ActilityConnection | SigfoxConnection, originalName: string) {\n    connection.name = connection.name.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection/${encodeURIComponent(String(originalName))}`;\n    const options: IFetchOptions = {\n      method: 'PUT',\n      headers: this.headers,\n      body: JSON.stringify(connection)\n    };\n    return this.client.fetch(url, options);\n  }\n\n  getBaseUrlByConnection(connection: ActilityConnection | SigfoxConnection) {\n    return isSigfoxConnection(connection)\n      ? 'service/sigfox-agent'\n      : isActilityConnection(connection)\n      ? 'service/actility'\n      : '';\n  }\n\n  getBaseUrlByType(connectionType: ConnectionType) {\n    return (connectionType === ConnectionType.SIGFOX)\n      ? 'service/sigfox-agent'\n      : (connectionType === ConnectionType.ACTILITY)\n      ? 'service/actility'\n      : '';\n  }\n\n  async delete(connection: ActilityConnection | SigfoxConnection) {\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'DELETE'\n    };\n    return this.client.fetch(`${url}/${encodeURIComponent(String(connection.name))}`, options);\n  }\n\n  getApplication(name: string): Partial<IApplication> {\n    const { references } = this.appStateService.currentTenant.value.applications;\n    return references.find(({ application }) => application.name === name).application;\n  }\n\n  async download(url: string): Promise<IFetchResponse> {\n    try {\n      const options: IFetchOptions = {\n        method: 'GET'\n      };\n      return this.client.fetch(url, options);\n    } catch (e) {\n      this.alertService.addServerFailure(e);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { saveAs } from 'file-saver';\nimport { IApplication } from '@c8y/client';\n\n@Component({\n  selector: 'connection-info-with-download-csv',\n  templateUrl: './connection-info-with-download-csv.component.html'\n})\nexport class ConnectionInfoWithDownloadCsvComponent {\n  @Input() messageData: any;\n  @Input() appData: IApplication;\n  @Input() modalTitle: string;\n  constructor(private modal: BsModalRef, private connectorService: MultipleLnsConnectorService) {}\n\n  dismiss() {\n    this.modal.hide();\n  }\n\n  async download() {\n    const url = `/service/${this.appData.contextPath}${this.messageData.URL}`;\n    const res = await this.connectorService.download(url);\n    const streamData = await res.blob();\n    saveAs(streamData, 'DeviceList.csv');\n  }\n}\n","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { head, orderBy, findIndex } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ConnectionType, SigfoxConnection, State } from './multiple-lns-connector.model';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'sigfox-multiple-lns-connector',\n  templateUrl: './sigfox-multiple-lns-connector.component.html'\n})\nexport class SigfoxMultipleLnsConnectorComponent implements OnInit {\n  state: State = 'loadingConnection';\n  connection = {} as SigfoxConnection;\n  connections = Array<SigfoxConnection>();\n  showPassword: boolean = false;\n  @ViewChild('connectorsForm', { static: false }) connectorsForm: NgForm;\n  connectionBeingEdited: string;\n  cardHeader = gettext('Sigfox connections');\n\n  constructor(\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modalService: BsModalService,\n    private modal: ModalService\n  ) {}\n\n  async ngOnInit() {\n    await this.loadConnections();\n  }\n\n  async loadConnections() {\n    const res = await this.connectorService.list(ConnectionType.SIGFOX);\n    if (res && res.status !== 200) {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n      this.state = 'loadingError';\n    } else {\n      const list = await res.json();\n      this.connections = orderBy(list, ['name'], ['asc']);\n      await this.setModel();\n    }\n  }\n\n  async setModel(connectionObj = null) {\n    await this.resetEditedUnsavedConnection();\n    this.connection = connectionObj\n      ? connectionObj\n      : this.state === 'savedSuccessfully'\n      ? this.connection\n      : head(this.connections);\n    this.state = 'updateConnection';\n    this.showPassword = false;\n    this.connectionBeingEdited = this.connection ? this.connection.name : undefined;\n  }\n\n  async resetEditedUnsavedConnection() {\n    const originalConnectionIndex = (!this.connection) ? 0 : findIndex(this.connections, { name: this.connectionBeingEdited });\n    if (this.connectionBeingEdited && this.state === 'updateConnection') {\n      const isConnectionExist = await this.connectorService.detail(\n        ConnectionType.SIGFOX,\n        this.connectionBeingEdited\n      );\n      this.connections[originalConnectionIndex] = isConnectionExist as SigfoxConnection;\n    }\n  }\n\n  async addConnection() {\n    await this.resetEditedUnsavedConnection();\n    this.connection = {} as SigfoxConnection;\n    this.connectionBeingEdited = '';\n    this.state = 'addConnections';\n    this.showPassword = true;\n  }\n\n  async save() {\n    const checkForConnectionName =\n      (this.connectionBeingEdited && this.connectionBeingEdited !== '') ? this.connectionBeingEdited : this.connection.name;\n    const isConnectionExist = await this.connectorService.exists(\n      ConnectionType.SIGFOX,\n      checkForConnectionName\n    );\n    if (this.state === 'addConnections' && isConnectionExist) {\n      const mesg = this.translateService.instant(\n        gettext(`Connection with name \"{{ name }}\" already exists.`),\n        { name: this.connection.name }\n      );\n      this.alertService.danger(mesg);\n    } else {\n      this.saveConnection();\n    }\n  }\n\n  async deleteConnection(connection) {\n    const mesg = this.translateService.instant(\n      gettext(`You are about to delete the connection \"{{ name }}\". Do you want to proceed?`),\n      { name: connection.name }\n    );\n\n    try {\n      await this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {\n        ok: gettext('Delete'),\n        cancel: gettext('Cancel')\n      });\n\n      await this.delete(connection);\n\n    } catch (error) {\n      // empty catch block\n    }\n  }\n\n  changePassword() {\n    this.showPassword = !this.showPassword;\n    if (this.connectorsForm.controls.password) {\n      this.connectorsForm.controls.password.setValue(null);\n    }\n  }\n\n  private async saveConnection() {\n    let res;\n    res = await this.connectorService.save(this.connection, this.connectionBeingEdited);\n    if (res && (res.status === 201 || res.status === 200)) {\n      this.state = 'savedSuccessfully';\n      this.alertService.success(gettext('Connection saved.'));\n      await this.loadConnections();\n    } else if (res && res.status === 500) {\n      const data = res.json ? await res.json() : undefined;\n      const app = this.connectorService.getApplication('sigfox-agent');\n      const initialState = {\n        messageData: data,\n        appData: app,\n        modalTitle: gettext('Failed to update the connection')\n      };\n      this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n    } else {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n    }\n  }\n\n  private async delete(connection) {\n    try {\n      const response = await this.connectorService.delete(connection);\n\n      if (response.ok && response.status === 204) {\n        this.alertService.success(gettext('Connection deleted.'));\n        await this.loadConnections();\n      } else if (response && response.status === 500) {\n        const data = response.json ? await response.json() : undefined;\n        const app = this.connectorService.getApplication('sigfox-agent');\n        const initialState = {\n          messageData: data,\n          appData: app,\n          modalTitle: gettext('Failed to delete the connection')\n        };\n        this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n      } else {\n        const data = response.json ? await response.json() : undefined;\n        this.alertService.addServerFailure({ data, response });\n      }\n    } catch (error) {\n      // empty catch block\n    }\n  }\n}\n","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { head, orderBy, findIndex } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ActilityConnection, ConnectionType, State } from './multiple-lns-connector.model';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'actility-multiple-lns-connector',\n  templateUrl: './actility-multiple-lns-connector.component.html'\n})\nexport class ActilityMultipleLnsConnectorComponent implements OnInit {\n  state: State = 'loadingConnection';\n  connection = {} as ActilityConnection;\n  connections = Array<ActilityConnection>();\n  @ViewChild('connectorsForm', { static: false }) connectorsForm: NgForm;\n  connectionBeingEdited: string;\n  showPassword: boolean = false;\n  cardHeader = gettext('Actility connections');\n\n  constructor(\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modal: ModalService,\n    private modalService: BsModalService\n  ) {\n\n  }\n\n  async ngOnInit() {\n    await this.loadConnections();\n  }\n\n  async loadConnections() {\n    const res = await this.connectorService.list(ConnectionType.ACTILITY);\n    if (res && res.status !== 200) {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n      this.state = 'loadingError';\n    } else {\n      const list = await res.json();\n      this.connections = orderBy(list, ['name'], ['asc']);\n      await this.setModel();\n    }\n  }\n\n  async setModel(connectionObj = null) {\n    await this.resetEditedUnsavedConnection();\n    this.connection = connectionObj\n      ? connectionObj\n      : this.state === 'savedSuccessfully'\n      ? this.connection\n      : head(this.connections);\n    this.state = 'updateConnection';\n    this.showPassword = false;\n    this.connectionBeingEdited = (this.connection) ? this.connection.name : undefined;\n  }\n\n  async setAdminAndCoreApiVersion() {\n      this.connection.adminApiVersion = 'latest';\n      this.connection.coreApiVersion = 'latest';\n  }\n\n  async resetEditedUnsavedConnection() {\n    const originalConnectionIndex = (!this.connection) ? 0 : findIndex(this.connections, { name: this.connectionBeingEdited });\n    if (this.connectionBeingEdited && this.state === 'updateConnection') {\n      const isConnectionExist = await this.connectorService.detail(\n        ConnectionType.ACTILITY,\n        this.connectionBeingEdited\n      );\n      this.connections[originalConnectionIndex] = isConnectionExist as ActilityConnection;\n    }\n  }\n\n  async addConnection() {\n    await this.resetEditedUnsavedConnection();\n    this.connection = {} as ActilityConnection;\n    this.connectionBeingEdited = '';\n    this.state = 'addConnections';\n    this.showPassword = true;\n    await this.setAdminAndCoreApiVersion();\n  }\n\n  async save() {\n    const checkForConnectionName =\n      this.connectionBeingEdited !== '' ? this.connectionBeingEdited : this.connection.name;\n    const isConnectionExist = await this.connectorService.exists(\n      ConnectionType.ACTILITY,\n      checkForConnectionName\n    );\n    if (\n      this.state === 'addConnections' && isConnectionExist\n    ) {\n      const mesg = this.translateService.instant(\n        gettext(`Connection with name \"{{ name }}\" already exists.`),\n        { name: this.connection.name }\n      );\n      this.alertService.danger(mesg);\n    } else {\n      this.saveConnection();\n    }\n  }\n\n  async deleteConnection(connection) {\n    const mesg = this.translateService.instant(\n      gettext(`You are about to delete the connection \"{{ name }}\". Do you want to proceed?`),\n      { name: connection.name }\n    );\n\n    try {\n      await this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {\n        ok: gettext('Delete'),\n        cancel: gettext('Cancel')\n      });\n\n      await this.delete(connection);\n    } catch (error) {\n      // empty catch block\n    }\n  }\n\n  changePassword() {\n    this.showPassword = !this.showPassword;\n    if (this.connectorsForm.controls.password) {\n    this.connectorsForm.controls.password.setValue(null);\n    }\n  }\n\n  async saveConnection() {\n    let res;\n    res = await this.connectorService.save(\n      this.connection,\n      this.connectionBeingEdited\n    );\n    if (res && (res.status === 201 || res.status === 200)) {\n      this.state = 'savedSuccessfully';\n      this.alertService.success(gettext('Connection saved.'));\n      await this.loadConnections();\n    } else if (res && res.status === 500) {\n      const data = res.json ? await res.json() : undefined;\n      const app = this.connectorService.getApplication('sigfox-agent');\n      const initialState = {\n        messageData: data,\n        appData: app,\n        modalTitle: gettext('Failed to update the connection')\n      };\n      this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n    } else {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n    }\n  }\n\n  private async delete(connection) {\n    try {\n      const response = await this.connectorService.delete(connection);\n\n      if (response.ok && response.status === 204) {\n        this.alertService.success(gettext('Connection deleted.'));\n        await this.loadConnections();\n      } else if (response && response.status === 500) {\n        const data = response.json ? await response.json() : undefined;\n        const app = this.connectorService.getApplication('sigfox-agent');\n        const initialState = {\n          messageData: data,\n          appData: app,\n          modalTitle: gettext('Failed to delete the connection')\n        };\n        this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n      } else {\n        const data = response.json ? await response.json() : undefined;\n        this.alertService.addServerFailure({ data, response });\n      }\n    } catch (error) {\n        // empty catch block\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, CoreModule, FormsModule, Route } from '@c8y/ngx-components';\nimport { NoConnectionsFoundComponent } from './no-connections-found.component';\nimport { RouterModule } from '@angular/router';\nimport { SigfoxMultipleLnsConnectorComponent } from './sigfox-multiple-lns-connector.component';\nimport { ActilityMultipleLnsConnectorComponent } from './actility-multiple-lns-connector.component';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\n\nconst settingsRoutes: Route[] = [\n  {\n    path: 'connectivitySettings/multiple_lns_connectors_sigfox',\n    component: SigfoxMultipleLnsConnectorComponent\n  },\n  {\n    path: 'connectivitySettings/multiple_lns_connectors_actility',\n    component: ActilityMultipleLnsConnectorComponent\n  }\n];\n@NgModule({\n  declarations: [\n    SigfoxMultipleLnsConnectorComponent,\n    NoConnectionsFoundComponent,\n    ActilityMultipleLnsConnectorComponent,\n    ConnectionInfoWithDownloadCsvComponent\n  ],\n  imports: [\n    CoreModule,\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(settingsRoutes)\n  ],\n  providers: [\n    MultipleLnsConnectorService\n  ]\n})\nexport class MultipleLnsConnectorsModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  IManagedObject,\n  InventoryService,\n  IResultList,\n  FetchClient,\n  IFetchOptions,\n  IdentityService\n} from '@c8y/client';\nimport { get, orderBy } from 'lodash-es';\nimport { MultipleLnsConnectorService } from './multiple-lns-connectors';\nimport { ActilityConnection, ConnectionType, SigfoxConnection } from './multiple-lns-connectors/multiple-lns-connector.model';\n\n@Injectable()\nexport class LpwanSetDeviceProtocolService {\n  supportedDevicesCfgs = [\n    {\n      name: 'lora',\n      match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora',\n      protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],\n      connectionType: ConnectionType.ACTILITY\n    },\n    {\n      name: 'sigfox',\n      match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',\n      protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['com.sigfox.deviceId'],\n      connectionType: ConnectionType.SIGFOX\n    }\n  ];\n\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(\n    private inventoryService: InventoryService,\n    private client: FetchClient,\n    private identityService: IdentityService,\n    private lnsService: MultipleLnsConnectorService\n  ) {}\n\n  async refreshCache(device) {\n    const externalId = await this.getExternalId(device);\n    if (externalId) {\n      const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;\n      const options: IFetchOptions = {\n        method: 'POST',\n        headers: this.header,\n        body: JSON.stringify({})\n      };\n      return this.client.fetch(url, options);\n    }\n  }\n\n  getMicroserviceUrl(device) {\n    const { serviceProvider } = device.c8y_LpwanDevice;\n\n    let serviceName = serviceProvider.toLowerCase();\n    if (serviceProvider === 'Sigfox') {\n      serviceName = 'sigfox-agent';\n    }\n\n    return `/service/${serviceName}`;\n  }\n\n  isSupportedDevice(device: IManagedObject): boolean {\n    return this.supportedDevicesCfgs.some(({ match }) => match(device));\n  }\n\n  async getCurrentProtocol(device: IManagedObject) {\n    const lpwanDevice = device.c8y_LpwanDevice;\n    let protocolId;\n\n    if (lpwanDevice.typeExternalId) {\n      const externalId = (await this.identityService.detail(lpwanDevice.typeExternalId)).data;\n      protocolId = externalId.managedObject.id;\n    }\n\n    if (!protocolId && lpwanDevice.type) {\n      protocolId = lpwanDevice.type.split('/')[2];\n    }\n\n    if (!protocolId) {\n      return null;\n    }\n\n    return (await this.inventoryService.detail(protocolId)).data;\n  }\n\n  async applyProtocol(device: IManagedObject, selectedProtocol: IManagedObject) {\n    const [protocolExternalId] = (await this.identityService.list(selectedProtocol.id)).data;\n    const { externalId, type } = protocolExternalId;\n    device.c8y_LpwanDevice.typeExternalId = { externalId, type };\n    device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;\n    device.type = selectedProtocol.name;\n    return this.inventoryService.update(device);\n  }\n\n  async getAvailableProtocols(device: IManagedObject): Promise<IResultList<IManagedObject>> {\n    const query = {\n      __filter: {\n        type: { __in: this.getProtocolTypesMatchingDevice(device) }\n      },\n      __orderby: [{ name: 1 }]\n    };\n    return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });\n  }\n\n  async getAvailableConnections(device: IManagedObject): Promise<IResultList<ActilityConnection | SigfoxConnection>> {\n    let list;\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    const response = await this.lnsService.list(matchingCfg.connectionType);\n    if (response && response.status === 200) {\n      list = await response.json();\n      list = orderBy(list, ['name'], ['asc']);\n      return {res: response , data: list };\n    }\n\n  }\n\n  private getProtocolTypesMatchingDevice(device: IManagedObject): string[] {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    return matchingCfg ? matchingCfg.protocolTypes : [];\n  }\n\n  private async getExternalId(device: IManagedObject): Promise<string> {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    const externalIds = (await this.identityService.list(device.id)).data;\n    const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));\n    return externalId ? externalId.externalId : null;\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { Router } from '@angular/router';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'set-device-protocol',\n  templateUrl: './lpwan-set-device-protocol.component.html'\n})\nexport class LpwanAssignDeviceProtocolComponent implements OnInit {\n  loading: boolean;\n  device: IManagedObject;\n  currentProtocol: IManagedObject;\n  availableProtocols: IResultList<IManagedObject>;\n  newProtocol: IManagedObject;\n  filterProtocols = pipe();\n  pattern = '';\n  @ViewChild('lpwanSetDeviceProtocolForm', { static: false }) lpwanSetDeviceProtocolForm: NgForm;\n\n  constructor(\n    private lpwanService: LpwanSetDeviceProtocolService,\n    private alertService: AlertService,\n    private router: Router,\n    private inventoryService: InventoryService\n  ) {}\n  async ngOnInit() {\n    await this.reload();\n    this.setPipe('');\n  }\n\n  setPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterProtocols = pipe(\n      map((protocols: IManagedObject[]) =>\n        protocols.filter(\n          protocol =>\n            (!this.currentProtocol || this.currentProtocol.id !== protocol.id) &&\n            (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1)\n        )\n      )\n    );\n  }\n\n  async reload() {\n    this.loading = true;\n    this.newProtocol = null;\n    try {\n      await this.loadDevice();\n      this.availableProtocols = await this.lpwanService.getAvailableProtocols(this.device);\n      this.currentProtocol = await this.lpwanService.getCurrentProtocol(this.device);\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  async loadDevice() {\n    const deviceId = this.router.routerState.snapshot.url.match(/\\d+/)[0];\n    const { data } = await this.inventoryService.detail(deviceId);\n    this.device = data;\n  }\n\n  async apply(selectedProtocol) {\n    try {\n      const moUpdated =\n        (await this.lpwanService.applyProtocol(this.device, selectedProtocol))\n          .res.status === 200;\n      await this.reload();\n      this.alertService.success(gettext('Device protocol set.'));\n      this.lpwanSetDeviceProtocolForm.reset('dirty');\n      if (moUpdated) {\n        this.refreshCache();\n      }\n    } catch (ex) {\n      this.alertService.danger(gettext('Could not set device protocol.'));\n    }\n  }\n\n  async refreshCache() {\n    try {\n      await this.lpwanService.refreshCache(this.device);\n    } catch (ex) {\n      // do nothing (refreshing is an optional step)\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\n@Injectable()\nexport class LpwanAgentGuard implements CanActivate {\n  constructor(private lpwanService: LpwanSetDeviceProtocolService) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const device = route.data.contextData || route.parent.data.contextData;\n    return this.lpwanService.isSupportedDevice(device);\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { AlertService, gettext, PopoverConfirmButtons, PopoverConfirmComponent } from '@c8y/ngx-components';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { find } from 'lodash-es';\nimport { ActilityConnection, SigfoxConnection } from './multiple-lns-connectors/multiple-lns-connector.model';\n\n@Component({\n  selector: 'set-lns-connections',\n  templateUrl: './lpwan-set-connections.component.html'\n})\nexport class LpwanAssignLnsConnectionsComponent implements OnInit {\n  loading: boolean;\n  @Input() device: IManagedObject;\n  buttons: PopoverConfirmButtons[] = [\n    { label: gettext('Cancel'), action: () => Promise.reject() },\n    { label: gettext('Re-register'), action: () => this.deviceReregister(), status: 'default' }\n  ];\n  reRegisterMsg = gettext('To change provider connection, you need to re-register device first.');\n  filterConnection = pipe();\n  pattern = '';\n  @ViewChild(PopoverConfirmComponent, {static: true}) popoverConfirm: PopoverConfirmComponent;\n\n  newConnection: ActilityConnection | SigfoxConnection;\n  availableConnections: IResultList<ActilityConnection | SigfoxConnection>;\n  currentConnection: ActilityConnection | SigfoxConnection;\n\n  constructor(\n    private lpwanService: LpwanSetDeviceProtocolService,\n    private alertService: AlertService\n  ) {}\n  async ngOnInit() {\n    await this.reload();\n    this.setConnectionPipe('');\n  }\n\n  setConnectionPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterConnection = pipe(\n      map((connections: IManagedObject[]) =>\n        connections.filter(\n          connection =>\n            (!this.currentConnection || this.currentConnection.name !== connection.name) &&\n            (!filterStr || connection.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1)\n        )\n      )\n    );\n  }\n\n  async reload() {\n    this.loading = true;\n    this.newConnection = null;\n    try {\n        this.availableConnections = await this.lpwanService.getAvailableConnections(this.device);\n        this.currentConnection = find(this.availableConnections.data, {\n          name: this.device.c8y_LpwanDevice.lnsConnectionName\n        });\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  togglePopover(popoverCfrm) {\n    popoverCfrm.show();\n    this.setConnectionPipe('');\n  }\n\n  deviceReregister() {\n    return new Promise((resolve, reject) => {\n      window.location.href = `#/deviceregistration`;\n      resolve(true);\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  CoreModule,\n  FormsModule,\n  gettext,\n  HOOK_ROUTE,\n  Route,\n  ViewContext\n} from '@c8y/ngx-components';\nimport { LpwanAssignDeviceProtocolComponent } from './lpwan-set-device-protocol.component';\nimport { LpwanAgentGuard } from './lpwan-agent.guard';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { LpwanAssignLnsConnectionsComponent } from './lpwan-set-connections.component';\n\nconst routes: Route[] = [\n  {\n    context: ViewContext.Device,\n    path: 'assign-protocol',\n    component: LpwanAssignDeviceProtocolComponent,\n    label: gettext('LPWAN'),\n    icon: 'c8y-device-protocols',\n    canActivate: [LpwanAgentGuard]\n  }\n];\n\n@NgModule({\n  declarations: [\n    LpwanAssignDeviceProtocolComponent,\n    LpwanAssignLnsConnectionsComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule\n  ],\n  entryComponents: [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent],\n  providers: [\n    LpwanAgentGuard,\n    LpwanSetDeviceProtocolService,\n    {\n      provide: HOOK_ROUTE,\n      useValue: routes,\n      multi: true\n    }\n  ]\n})\nexport class LpwanProtocolModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {LpwanAgentGuard as ɵd} from './lpwan-agent.guard';\nexport {LpwanAssignLnsConnectionsComponent as ɵc} from './lpwan-set-connections.component';\nexport {LpwanSetDeviceProtocolService as ɵa} from './lpwan-set-device-protocol.service';\nexport {MultipleLnsConnectorService as ɵb} from './multiple-lns-connectors';\nexport {ActilityMultipleLnsConnectorComponent as ɵh} from './multiple-lns-connectors/actility-multiple-lns-connector.component';\nexport {ConnectionInfoWithDownloadCsvComponent as ɵi} from './multiple-lns-connectors/connection-info-with-download-csv.component';\nexport {MultipleLnsConnectorService as ɵf} from './multiple-lns-connectors/multiple-lns-connector.service';\nexport {NoConnectionsFoundComponent as ɵg} from './multiple-lns-connectors/no-connections-found.component';\nexport {SigfoxMultipleLnsConnectorComponent as ɵe} from './multiple-lns-connectors/sigfox-multiple-lns-connector.component';"]}