import { Component, Input, Optional, NgModule } from '@angular/core';
import { MeasurementRealtimeService, gettext, CoreModule, HOOK_COMPONENTS } from '@c8y/ngx-components';
import { DatapointLibraryService, DatapointSelectorModule } from '@c8y/ngx-components/datapoint-selector';
import { IconSelectorService, IconSelectorModule } from '@c8y/ngx-components/icon-selector';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { __awaiter } from 'tslib';
import { Validators, ControlContainer, NgForm, FormBuilder } from '@angular/forms';
import { WidgetConfigComponent, ContextDashboardComponent } from '@c8y/ngx-components/context-dashboard';
import { NEVER, combineLatest, from } from 'rxjs';
import { map, startWith, distinctUntilChanged, tap, filter, pairwise } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@c8y/ngx-components/icon-selector';
import * as ɵngcc3 from '@c8y/ngx-components/context-dashboard';
import * as ɵngcc4 from '@c8y/ngx-components/datapoint-selector';
import * as ɵngcc5 from '@c8y/ngx-components';
import * as ɵngcc6 from 'ngx-bootstrap/popover';
import * as ɵngcc7 from '@angular/common';

const _c0 = function () { return { example: 1 }; };
const _c1 = function () { return { example: 36 }; };
function KpiWidgetViewComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelement(1, "i", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const lastState_r3 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", lastState_r3.colorClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r4.config.icon);
} }
const _c2 = function (a0) { return { transform: a0 }; };
function KpiWidgetViewComponent_div_0_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "i", 14);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "number");
    ɵngcc0.ɵɵpipe(4, "date");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const previousValue_r8 = ctx.ngIf;
    const lastState_r3 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Previous value") + ": " + ɵngcc0.ɵɵpipeBind2(3, 4, previousValue_r8.value, "1." + (ctx_r5.config.numberOfDecimalPlaces || "0") + "-" + (ctx_r5.config.numberOfDecimalPlaces || "0")) + " (" + ɵngcc0.ɵɵpipeBind2(4, 7, previousValue_r8.date, "medium") + ")")("ngStyle", ɵngcc0.ɵɵpureFunction1(10, _c2, "rotate(" + lastState_r3.trend + ")"));
} }
function KpiWidgetViewComponent_div_0_p_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 15);
    ɵngcc0.ɵɵelement(1, "i", 16);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "date");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const lastState_r3 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 1, lastState_r3.latestMeasurement.date, "medium"), " ");
} }
const _c3 = function (a0) { return { "font-size": a0 }; };
function KpiWidgetViewComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵtemplate(2, KpiWidgetViewComponent_div_0_div_2_Template, 2, 2, "div", 4);
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵelementStart(4, "span", 6);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵpipe(7, "number");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "number");
    ɵngcc0.ɵɵelementStart(10, "small", 7);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, KpiWidgetViewComponent_div_0_div_12_Template, 5, 12, "div", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "div", 9);
    ɵngcc0.ɵɵtemplate(14, KpiWidgetViewComponent_div_0_p_14_Template, 4, 4, "p", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const lastState_r3 = ctx.ngIf;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.config.icon && ctx_r0.config.showIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate3("title", "", lastState_r3.colorClass === "text-danger" ? ɵngcc0.ɵɵpipeBind1(5, 10, "Within red range:") : lastState_r3.colorClass === "text-warning" ? ɵngcc0.ɵɵpipeBind1(6, 12, "Within yellow range:") : "", " ", ɵngcc0.ɵɵpipeBind2(7, 14, lastState_r3.latestMeasurement.value, "1." + (ctx_r0.config.numberOfDecimalPlaces || "0") + "-" + (ctx_r0.config.numberOfDecimalPlaces || "0")), " ", lastState_r3.unit || "", "");
    ɵngcc0.ɵɵproperty("ngClass", lastState_r3.colorClass)("ngStyle", ɵngcc0.ɵɵpureFunction1(20, _c3, (ctx_r0.config.fontSize || "36") + "px"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(9, 17, lastState_r3.latestMeasurement.value, "1." + (ctx_r0.config.numberOfDecimalPlaces || "0") + "-" + (ctx_r0.config.numberOfDecimalPlaces || "0")), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(lastState_r3.unit || "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.config == null ? null : ctx_r0.config.showTrend) && lastState_r3.previousValue);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.config == null ? null : ctx_r0.config.showTimestamp);
} }
function KpiWidgetViewComponent_ng_template_2_c8y_ui_empty_state_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-ui-empty-state", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("icon", "line-chart")("title", ɵngcc0.ɵɵpipeBind1(1, 4, "No measurement to display."))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 6, "Waiting for measurements to be created."))("horizontal", true);
} }
function KpiWidgetViewComponent_ng_template_2_c8y_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-loading");
} }
function KpiWidgetViewComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtemplate(1, KpiWidgetViewComponent_ng_template_2_c8y_ui_empty_state_1_Template, 3, 8, "c8y-ui-empty-state", 18);
    ɵngcc0.ɵɵtemplate(2, KpiWidgetViewComponent_ng_template_2_c8y_loading_2_Template, 1, 0, "c8y-loading", 19);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.noDataInitiallyInDB);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.noDataInitiallyInDB);
} }
function exactlyASingleDatapointActive() {
    return (control) => {
        const datapoints = control.value;
        if (!datapoints || !datapoints.length) {
            return null;
        }
        const activeDatapoints = datapoints.filter(datapoint => datapoint.__active);
        if (activeDatapoints.length === 1) {
            return null;
        }
        return { exactlyOneDatapointNeedsToBeActive: true };
    };
}
class KpiWidgetConfigComponent {
    constructor(formBuilder, form, iconSelector, widgetConfig, datapointLibrary) {
        this.formBuilder = formBuilder;
        this.form = form;
        this.iconSelector = iconSelector;
        this.widgetConfig = widgetConfig;
        this.datapointLibrary = datapointLibrary;
        this.datapointSelectionConfig = {};
        this.defaultFormOptions = {
            showRedRange: true,
            showYellowRange: true
        };
        this.availableIcons = [];
        this.limits = {
            fontSizeMax: 72,
            fontSizeMin: 18,
            numberOfDecimalPlacesMax: 10,
            numberOfDecimalPlacesMin: 0
        };
    }
    onBeforeSave(config) {
        if (this.formGroup.valid) {
            Object.assign(config, this.formGroup.value);
            return true;
        }
        return false;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.widgetConfig.context) === null || _a === void 0 ? void 0 : _a.id) {
                this.datapointSelectionConfig.contextAsset = (_b = this.widgetConfig) === null || _b === void 0 ? void 0 : _b.context;
            }
            this.initForm();
            if ((_c = this.config) === null || _c === void 0 ? void 0 : _c.datapoints) {
                this.config.datapoints = yield this.datapointLibrary.updateDatapoints((_d = this.config) === null || _d === void 0 ? void 0 : _d.datapoints);
                this.formGroup.patchValue({ datapoints: this.config.datapoints });
            }
        });
    }
    openIconSelector() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const icon = yield this.iconSelector.selectIcon({
                    currentSelection: this.formGroup.value.icon
                });
                this.formGroup.patchValue({ icon });
            }
            catch (_a) {
                // nothing to do
            }
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            numberOfDecimalPlaces: [
                1,
                [
                    Validators.required,
                    Validators.min(this.limits.numberOfDecimalPlacesMin),
                    Validators.max(this.limits.numberOfDecimalPlacesMax)
                ]
            ],
            showTimestamp: [true, []],
            showTrend: [true, []],
            showIcon: [true, []],
            icon: ['water', [Validators.required, Validators.minLength(1)]],
            fontSize: [
                36,
                [
                    Validators.required,
                    Validators.min(this.limits.fontSizeMin),
                    Validators.max(this.limits.fontSizeMax)
                ]
            ],
            datapoints: [
                [],
                [Validators.required, Validators.minLength(1), exactlyASingleDatapointActive()]
            ]
        });
        this.form.form.addControl('config', this.formGroup);
        this.formGroup.patchValue(this.config);
    }
}
KpiWidgetConfigComponent.ɵfac = function KpiWidgetConfigComponent_Factory(t) { return new (t || KpiWidgetConfigComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgForm), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IconSelectorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.WidgetConfigComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.DatapointLibraryService)); };
KpiWidgetConfigComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: KpiWidgetConfigComponent, selectors: [["c8y-kpi-widget-config"]], inputs: { config: "config" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgForm }])], decls: 56, vars: 44, consts: [[1, "row", 3, "formGroup"], [1, "col-sm-6"], ["formControlName", "datapoints", "name", "datapoints", 3, "defaultFormOptions", "config", "minActiveCount", "maxActiveCount"], ["translate", ""], [1, "d-flex", "a-i-center"], [1, "p-r-8", "icon-32", "text-muted"], [3, "c8yIcon"], [1, "btn", "btn-default", "btn-xs", 3, "click"], ["translate", "", 3, "title"], ["formControlName", "numberOfDecimalPlaces", "name", "numberOfDecimalPlaces", "type", "number", 1, "form-control", 3, "placeholder"], [3, "show"], [1, "d-flex", "gap-16", "flex-wrap"], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", "formControlName", "showTimestamp", "name", "showTimestamp"], ["type", "checkbox", "formControlName", "showIcon", "name", "showIcon"], ["type", "checkbox", "formControlName", "showTrend", "name", "showTrend"], ["container", "body", 1, "btn", "btn-clean", 3, "popover", "outsideClick"], [1, "text-info", 3, "c8yIcon"], ["formControlName", "fontSize", "name", "fontSize", "type", "number", 1, "form-control", 3, "placeholder"]], template: function KpiWidgetConfigComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "c8y-datapoint-selection-list", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelementStart(4, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(5, "label", 3);
        ɵngcc0.ɵɵtext(6, "Icon");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵelement(9, "i", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "button", 7);
        ɵngcc0.ɵɵlistener("click", function KpiWidgetConfigComponent_Template_button_click_10_listener() { return ctx.openIconSelector(); });
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(14, "label", 8);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵtext(16, " Number of decimal places ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(17, "input", 9);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelement(19, "c8y-messages", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "div");
        ɵngcc0.ɵɵelementStart(21, "label");
        ɵngcc0.ɵɵtext(22);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "div", 11);
        ɵngcc0.ɵɵelementStart(25, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(26, "label", 12);
        ɵngcc0.ɵɵpipe(27, "translate");
        ɵngcc0.ɵɵelement(28, "input", 13);
        ɵngcc0.ɵɵelement(29, "span");
        ɵngcc0.ɵɵelementStart(30, "span", 3);
        ɵngcc0.ɵɵtext(31, "Show timestamp");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(33, "label", 12);
        ɵngcc0.ɵɵpipe(34, "translate");
        ɵngcc0.ɵɵelement(35, "input", 14);
        ɵngcc0.ɵɵelement(36, "span");
        ɵngcc0.ɵɵelementStart(37, "span", 3);
        ɵngcc0.ɵɵtext(38, "Show icon");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(39, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(40, "label", 12);
        ɵngcc0.ɵɵpipe(41, "translate");
        ɵngcc0.ɵɵelement(42, "input", 15);
        ɵngcc0.ɵɵelement(43, "span");
        ɵngcc0.ɵɵelementStart(44, "span", 3);
        ɵngcc0.ɵɵtext(45, "Show trend icon");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(46, "button", 16);
        ɵngcc0.ɵɵpipe(47, "translate");
        ɵngcc0.ɵɵelement(48, "i", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(49, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(50, "label", 8);
        ɵngcc0.ɵɵpipe(51, "translate");
        ɵngcc0.ɵɵtext(52, " Font size of measurement value (px) ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(53, "input", 18);
        ɵngcc0.ɵɵpipe(54, "translate");
        ɵngcc0.ɵɵelement(55, "c8y-messages", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.formGroup);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("defaultFormOptions", ctx.defaultFormOptions)("config", ctx.datapointSelectionConfig)("minActiveCount", 1)("maxActiveCount", 1);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.formGroup.value.icon);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 20, "Change"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(15, 22, "Number of decimal places"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(18, 24, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(42, _c0)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("show", (ctx.formGroup.controls == null ? null : ctx.formGroup.controls.numberOfDecimalPlaces == null ? null : ctx.formGroup.controls.numberOfDecimalPlaces.touched) && (ctx.formGroup == null ? null : ctx.formGroup.controls == null ? null : ctx.formGroup.controls.numberOfDecimalPlaces == null ? null : ctx.formGroup.controls.numberOfDecimalPlaces.errors));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(23, 27, "Display"), "");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(27, 29, "Show timestamp"));
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(34, 31, "Show icon"));
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(41, 33, "Show trend icon"));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(47, 35, "Indicates the trend between the last two measurement values."));
        ɵngcc0.ɵɵproperty("outsideClick", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(51, 37, "Font size of measurement value (px)"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind2(54, 39, "e.g. {{ example }}", ɵngcc0.ɵɵpureFunction0(43, _c1)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("show", (ctx.formGroup.controls == null ? null : ctx.formGroup.controls.fontSize == null ? null : ctx.formGroup.controls.fontSize.touched) && (ctx.formGroup == null ? null : ctx.formGroup.controls == null ? null : ctx.formGroup.controls.fontSize == null ? null : ctx.formGroup.controls.fontSize.errors));
    } }, directives: [ɵngcc1.ɵNgNoValidate, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc4.DatapointSelectionListComponent, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc5.FormGroupComponent, ɵngcc5.C8yTranslateDirective, ɵngcc5.IconDirective, ɵngcc1.DefaultValueAccessor, ɵngcc5.RequiredInputPlaceholderDirective, ɵngcc1.NumberValueAccessor, ɵngcc5.MessagesComponent, ɵngcc1.CheckboxControlValueAccessor, ɵngcc6.PopoverDirective], pipes: [ɵngcc5.C8yTranslatePipe], encapsulation: 2 });
KpiWidgetConfigComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: NgForm },
    { type: IconSelectorService },
    { type: WidgetConfigComponent },
    { type: DatapointLibraryService }
];
KpiWidgetConfigComponent.propDecorators = {
    config: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KpiWidgetConfigComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-kpi-widget-config',
                template: "<form [formGroup]=\"formGroup\" class=\"row\">\n  <div class=\"col-sm-6\">\n    <c8y-datapoint-selection-list\n      [defaultFormOptions]=\"defaultFormOptions\"\n      [config]=\"datapointSelectionConfig\"\n      [minActiveCount]=\"1\"\n      [maxActiveCount]=\"1\"\n      formControlName=\"datapoints\"\n      name=\"datapoints\"\n    >\n    </c8y-datapoint-selection-list>\n  </div>\n  <div class=\"col-sm-6\">\n    <c8y-form-group>\n      <label translate>Icon</label>\n      <div class=\"d-flex a-i-center\">\n        <div class=\"p-r-8 icon-32 text-muted\">\n          <i [c8yIcon]=\"formGroup.value.icon\"></i>\n        </div>\n        <button class=\"btn btn-default btn-xs\" (click)=\"openIconSelector()\">\n          {{ 'Change' | translate }}\n        </button>\n      </div>\n    </c8y-form-group>\n    <c8y-form-group>\n      <label [title]=\"'Number of decimal places' | translate\" translate>\n        Number of decimal places\n      </label>\n      <input\n        class=\"form-control\"\n        formControlName=\"numberOfDecimalPlaces\"\n        name=\"numberOfDecimalPlaces\"\n        type=\"number\"\n        [placeholder]=\"'e.g. {{ example }}' | translate: { example: 1 }\"\n      />\n      <c8y-messages [show]=\"formGroup.controls?.numberOfDecimalPlaces?.touched && formGroup?.controls?.numberOfDecimalPlaces?.errors\">\n      </c8y-messages>\n    </c8y-form-group>\n    <div>\n      <label> {{ 'Display' | translate }}</label>\n      <div class=\"d-flex gap-16 flex-wrap\">\n        <c8y-form-group>\n          <label [title]=\"'Show timestamp' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showTimestamp\" name=\"showTimestamp\" />\n            <span></span>\n            <span translate>Show timestamp</span>\n          </label>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label [title]=\"'Show icon' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showIcon\" name=\"showIcon\" />\n            <span></span>\n            <span translate>Show icon</span>\n          </label>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label [title]=\"'Show trend icon' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showTrend\" name=\"showTrend\" />\n            <span></span>\n            <span translate>Show trend icon</span>\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{\n                'Indicates the trend between the last two measurement values.' | translate\n              }}\"\n              container=\"body\"\n              [outsideClick]=\"true\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n          </label>\n        </c8y-form-group>\n      </div>\n\n      <c8y-form-group>\n        <label [title]=\"'Font size of measurement value (px)' | translate\" translate>\n          Font size of measurement value (px)\n        </label>\n        <input\n          class=\"form-control\"\n          formControlName=\"fontSize\"\n          name=\"fontSize\"\n          type=\"number\"\n          [placeholder]=\"'e.g. {{ example }}' | translate: { example: 36 }\"\n        />\n        <c8y-messages [show]=\"formGroup.controls?.fontSize?.touched && formGroup?.controls?.fontSize?.errors\">\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n  </div>\n</form>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: ɵngcc1.NgForm }, { type: ɵngcc2.IconSelectorService }, { type: ɵngcc3.WidgetConfigComponent }, { type: ɵngcc4.DatapointLibraryService }]; }, { config: [{
            type: Input
        }] }); })();

var ColorClass;
(function (ColorClass) {
    ColorClass["danger"] = "text-danger";
    ColorClass["warning"] = "text-warning";
    ColorClass["unknown"] = "";
})(ColorClass || (ColorClass = {}));
class KpiWidgetViewComponent {
    constructor(measurementRealtime, datapointLib, dashboard) {
        this.measurementRealtime = measurementRealtime;
        this.datapointLib = datapointLib;
        this.dashboard = dashboard;
        this.config = { datapoints: [] };
        this.state$ = NEVER;
        // used to differentiate between loading state and empty state
        this.noDataInitiallyInDB = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const datapoints = this.config.datapoints || [];
            const datapoint = datapoints.find(tmp => tmp.__active);
            if (!datapoint) {
                return;
            }
            this.state$ = this.setupObservable(datapoint);
        });
    }
    setupObservable(datapoint) {
        this.assignContextFromContextDashboard(datapoint);
        const latestMeasurement$ = this.getLatestMeasurement$(datapoint);
        const lastTwoValues$ = this.getLastTwoValuesOfObservable$(latestMeasurement$);
        const previousValue$ = lastTwoValues$.pipe(map(res => res[0]), startWith(undefined));
        const datapointUpdate$ = this.getDatapointLibraryEntry$(datapoint);
        const combineMeasurementAndDatapointLibEntry$ = combineLatest([
            latestMeasurement$,
            datapointUpdate$
        ]);
        const unit$ = combineMeasurementAndDatapointLibEntry$.pipe(map(([latestMeasurementValue, currentDatapoint]) => currentDatapoint.unit || latestMeasurementValue.unit || ''), startWith(''), distinctUntilChanged());
        return combineLatest([
            latestMeasurement$,
            previousValue$,
            this.getTrendOfLatestMeasurements$(lastTwoValues$),
            unit$,
            this.getColorClass$(combineMeasurementAndDatapointLibEntry$)
        ]).pipe(map(([latestMeasurement, previousValue, trend, unit, colorClass]) => {
            return {
                latestMeasurement,
                previousValue,
                trend,
                unit,
                colorClass
            };
        }));
    }
    getLatestMeasurement$(datapoint) {
        return this.measurementRealtime
            .latestValueOfSpecificMeasurement$(datapoint.fragment, datapoint.series, datapoint.__target, 
        // we only need the last two values in case we want to show a trend
        this.config.showTrend ? 2 : 1, 
        // null will be emitted in case no measurement was found initially
        true)
            .pipe(tap(measurement => {
            if (!measurement) {
                this.noDataInitiallyInDB = true;
            }
        }), filter(measurement => !!measurement), map(measurement => {
            return {
                unit: measurement[datapoint.fragment][datapoint.series].unit,
                value: measurement[datapoint.fragment][datapoint.series].value,
                date: measurement.time
            };
        }));
    }
    getDatapointLibraryEntry$(datapoint) {
        return from(this.datapointLib.updateDatapoints([datapoint], true)).pipe(map(tmp => tmp[0]), filter(tmp => !!tmp), startWith(datapoint));
    }
    getColorClass$(measurementAndDatapointCombination$) {
        return measurementAndDatapointCombination$.pipe(map(([latestMeasurementValue, currentDatapoint]) => {
            if (this.inRangeOf(currentDatapoint, latestMeasurementValue.value, 'redRangeMin', 'redRangeMax')) {
                return ColorClass.danger;
            }
            if (this.inRangeOf(currentDatapoint, latestMeasurementValue.value, 'yellowRangeMin', 'yellowRangeMax')) {
                return ColorClass.warning;
            }
            return ColorClass.unknown;
        }), startWith(ColorClass.unknown), distinctUntilChanged());
    }
    getLastTwoValuesOfObservable$(input$) {
        return input$.pipe(pairwise());
    }
    getTrendOfLatestMeasurements$(latestMeasurement$) {
        return latestMeasurement$.pipe(map(res => {
            if (res.length === 2) {
                const oldValue = res[0].value;
                const newValue = res[1].value;
                if (oldValue < newValue) {
                    return '45deg';
                }
                if (oldValue > newValue) {
                    return '135deg';
                }
            }
            return '90deg';
        }), startWith('90deg'), distinctUntilChanged());
    }
    inRangeOf(datapoint, measurementValue, minAttribute, maxAttribute) {
        if (typeof datapoint[minAttribute] === 'number' &&
            typeof datapoint[maxAttribute] === 'number') {
            if (measurementValue >= datapoint[minAttribute] &&
                measurementValue < datapoint[maxAttribute]) {
                return true;
            }
        }
        return false;
    }
    assignContextFromContextDashboard(datapoint) {
        var _a, _b;
        if (!((_a = this.dashboard) === null || _a === void 0 ? void 0 : _a.isDeviceTypeDashboard)) {
            return;
        }
        const context = (_b = this.dashboard) === null || _b === void 0 ? void 0 : _b.context;
        if (context === null || context === void 0 ? void 0 : context.id) {
            const { name, id } = context;
            datapoint.__target = { name, id };
        }
    }
}
KpiWidgetViewComponent.ɵfac = function KpiWidgetViewComponent_Factory(t) { return new (t || KpiWidgetViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MeasurementRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.DatapointLibraryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ContextDashboardComponent, 8)); };
KpiWidgetViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: KpiWidgetViewComponent, selectors: [["c8y-kpi-widget-view"]], inputs: { config: "config" }, features: [ɵngcc0.ɵɵProvidersFeature([MeasurementRealtimeService])], decls: 4, vars: 4, consts: [["class", "kpi-widget__container d-flex d-col fit-h fit-w a-i-center j-c-center", 4, "ngIf", "ngIfElse"], ["noMeasurementFound", ""], [1, "kpi-widget__container", "d-flex", "d-col", "fit-h", "fit-w", "a-i-center", "j-c-center"], [1, "d-flex", "a-i-center", "j-c-center", "fit-w"], ["class", "m-r-16 flex-no-shrink text-muted", 3, "ngClass", 4, "ngIf"], [1, "text-truncate"], [1, "text-truncate", "text-medium", 3, "ngClass", "ngStyle", "title"], [1, "text-regular"], ["class", "dot dot-info dot-30 m-l-16 flex-no-shrink", 4, "ngIf"], [1, "d-flex", "j-c-center"], ["class", "icon-flex text-center text-muted small", 4, "ngIf"], [1, "m-r-16", "flex-no-shrink", "text-muted", 3, "ngClass"], [1, "icon-32", 3, "c8yIcon"], [1, "dot", "dot-info", "dot-30", "m-l-16", "flex-no-shrink"], ["c8yIcon", "arrow-dotted-up", 1, "icon-20", 3, "title", "ngStyle"], [1, "icon-flex", "text-center", "text-muted", "small"], ["c8yIcon", "calendar"], [1, "d-flex", "fit-h", "fit-w", "j-c-center", "a-i-center"], ["class", "fit-w", 3, "icon", "title", "subtitle", "horizontal", 4, "ngIf"], [4, "ngIf"], [1, "fit-w", 3, "icon", "title", "subtitle", "horizontal"]], template: function KpiWidgetViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, KpiWidgetViewComponent_div_0_Template, 15, 22, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, KpiWidgetViewComponent_ng_template_2_Template, 3, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.state$))("ngIfElse", _r1);
    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgClass, ɵngcc7.NgStyle, ɵngcc5.IconDirective, ɵngcc5.EmptyStateComponent, ɵngcc5.LoadingComponent], pipes: [ɵngcc7.AsyncPipe, ɵngcc5.C8yTranslatePipe, ɵngcc7.DecimalPipe, ɵngcc7.DatePipe], encapsulation: 2 });
KpiWidgetViewComponent.ctorParameters = () => [
    { type: MeasurementRealtimeService },
    { type: DatapointLibraryService },
    { type: ContextDashboardComponent, decorators: [{ type: Optional }] }
];
KpiWidgetViewComponent.propDecorators = {
    config: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KpiWidgetViewComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-kpi-widget-view',
                template: "<div\n  class=\"kpi-widget__container d-flex d-col fit-h fit-w a-i-center j-c-center\"\n  *ngIf=\"state$ | async as lastState; else noMeasurementFound\"\n>\n  <div class=\"d-flex a-i-center j-c-center fit-w\">\n    <div\n      class=\"m-r-16 flex-no-shrink text-muted\"\n      [ngClass]=\"lastState.colorClass\"\n      *ngIf=\"config.icon && config.showIcon\"\n    >\n      <i class=\"icon-32\" [c8yIcon]=\"config.icon\"></i>\n    </div>\n    <div class=\"text-truncate\">\n      <span\n        class=\"text-truncate text-medium\"\n        [ngClass]=\"lastState.colorClass\"\n        [ngStyle]=\"{ 'font-size': (config.fontSize || '36') + 'px' }\"\n        title=\"{{\n          lastState.colorClass === 'text-danger'\n            ? ('Within red range:' | translate)\n            : lastState.colorClass === 'text-warning'\n            ? ('Within yellow range:' | translate)\n            : ''\n        }} {{\n          lastState.latestMeasurement.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')\n        }} {{ lastState.unit || '' }}\"\n      >\n        {{\n          lastState.latestMeasurement.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')\n        }}\n        <small class=\"text-regular\">{{ lastState.unit || '' }}</small>\n      </span>\n    </div>\n    <div\n      class=\"dot dot-info dot-30 m-l-16 flex-no-shrink\"\n      *ngIf=\"config?.showTrend && lastState.previousValue as previousValue\"\n    >\n      <i\n        class=\"icon-20\"\n        [title]=\"\n          ('Previous value' | translate) +\n          ': ' +\n          (previousValue.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')) +\n          ' (' +\n          (previousValue.date | date: 'medium') +\n          ')'\n        \"\n        c8yIcon=\"arrow-dotted-up\"\n        [ngStyle]=\"{ transform: 'rotate(' + lastState.trend + ')' }\"\n      ></i>\n    </div>\n  </div>\n  <div class=\"d-flex j-c-center\">\n    <p *ngIf=\"config?.showTimestamp\" class=\"icon-flex text-center text-muted small\">\n      <i c8yIcon=\"calendar\"></i>\n      {{ lastState.latestMeasurement.date | date: 'medium' }}\n    </p>\n  </div>\n</div>\n\n<ng-template #noMeasurementFound>\n  <div class=\"d-flex fit-h fit-w j-c-center a-i-center\">\n    <c8y-ui-empty-state\n      *ngIf=\"noDataInitiallyInDB\"\n      class=\"fit-w\"\n      [icon]=\"'line-chart'\"\n      [title]=\"'No measurement to display.' | translate\"\n      [subtitle]=\"'Waiting for measurements to be created.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n    <c8y-loading *ngIf=\"!noDataInitiallyInDB\"></c8y-loading>\n  </div>\n</ng-template>\n",
                providers: [MeasurementRealtimeService]
            }]
    }], function () { return [{ type: ɵngcc5.MeasurementRealtimeService }, { type: ɵngcc4.DatapointLibraryService }, { type: ɵngcc3.ContextDashboardComponent, decorators: [{
                type: Optional
            }] }]; }, { config: [{
            type: Input
        }] }); })();

// import for the preview img to get into the build.
let previewImage = '';
try {
    // tslint:disable-next-line: no-var-requires
    previewImage = require('@c8y/style/img/kpi-widget.png');
}
catch (ex) {
    // intended empty
}
const ɵ0 = [
    {
        id: 'kpi.widget',
        label: gettext('KPI Widget'),
        description: gettext('Displays the last measurement value of a device.'),
        component: KpiWidgetViewComponent,
        configComponent: KpiWidgetConfigComponent,
        previewImage,
        data: {
            settings: {
                noNewWidgets: false,
                widgetDefaults: {
                    _width: 2,
                    _height: 2
                },
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
];
class KpiWidgetModule {
}
KpiWidgetModule.ɵfac = function KpiWidgetModule_Factory(t) { return new (t || KpiWidgetModule)(); };
KpiWidgetModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: KpiWidgetModule });
KpiWidgetModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_COMPONENTS,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KpiWidgetModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule],
                declarations: [KpiWidgetViewComponent, KpiWidgetConfigComponent],
                providers: [
                    {
                        provide: HOOK_COMPONENTS,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(KpiWidgetModule, { declarations: function () { return [KpiWidgetViewComponent, KpiWidgetConfigComponent]; }, imports: function () { return [CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { KpiWidgetModule, ɵ0, KpiWidgetViewComponent as ɵa, KpiWidgetConfigComponent as ɵb };

//# sourceMappingURL=c8y-ngx-components-widgets-kpi-widget.js.map