{"version":3,"file":"c8y-ngx-components-actility-device-registration.js","sources":["../../actility-device-registration/actility-device-registration.service.ts","../../actility-device-registration/actility-device-registration.component.ts","../../actility-device-registration/actility-device-registration-button.component.ts","../../actility-device-registration/actility-device-registration.factory.ts","../../actility-device-registration/actility-device-registration.module.ts","../../actility-device-registration/c8y-ngx-components-actility-device-registration.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  FetchClient,\n  IFetchOptions,\n  ApplicationService,\n  IManagedObject,\n  InventoryService,\n  IResultList\n} from '@c8y/client';\nimport { gettext, OptionsService } from '@c8y/ngx-components';\nimport {\n  ActilityDeviceRegistration,\n  ConnectivityPlan,\n  DeviceProfile\n} from './actility-device-registration.model';\nimport { some } from 'lodash-es';\n\nexport enum ErrorName {\n  NoConnectivityPlansError = 'NoConnectivityPlansError',\n  NoFreeSlotsInConnectivityPlansError = 'NoFreeSlotsInConnectivityPlansError',\n  NoConnectivitySettingsError = 'NoConnectivitySettingsError',\n  NoDeviceProfilesError = 'NoDeviceProfilesError',\n  DeviceProfilesFetchError = 'DeviceProfilesFetchError',\n  NoDeviceProtocolsError = 'NoDeviceProtocolsError',\n  DeviceProtocolsFetchError = 'DeviceProtocolsFetchError',\n  RegistrationError = 'RegistrationError'\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ActilityDeviceRegistrationService {\n  private baseUrl = '/service/actility';\n  private registrationUrl: string = `${this.baseUrl}/newDeviceRequest`;\n  private connectivityPlansUrl: string = `${this.baseUrl}/connectivityPlans`;\n  private deviceProfilesUrl: string = `${this.baseUrl}/deviceProfiles`;\n  private headers: object = {\n    'Content-Type': 'application/json'\n  };\n\n  constructor(\n    private inventoryService: InventoryService,\n    private client: FetchClient,\n    private translateService: TranslateService,\n    private applicationService: ApplicationService,\n    private optionsService: OptionsService\n  ) {}\n\n  async getConnections() {\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers\n    };\n    const res = await this.client.fetch(`${this.baseUrl}/lns-connection`, options);\n    const data = await res.json();\n\n    if (res.status === 200) {\n      if (data.length === 0) {\n      await this.throwNoConnectivitySettingsError();\n      }\n    } else {\n      await this.throwNoConnectivitySettingsError();\n    }\n    return { res, data };\n  }\n  /**\n   * Gets connectivity plans from LoRa platform.\n   * @param connectionName The name of connection for which connectivity plans will be retrieved\n   * @returns The result list with connectivity plans, or throws an error with exception.\n   */\n  async getConnectivityPlans(connectionName: string): Promise<IResultList<ConnectivityPlan>> {\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers,\n      params: {\n        actilityConnectionName: connectionName\n      }\n    };\n\n    const res = await this.client.fetch(this.connectivityPlansUrl, options);\n    const data = await res.json();\n\n    if (res.status === 200) {\n      if (data.length === 0) {\n        this.throwNoConnectivityPlansError();\n      } else {\n        if (!this.hasAvailableConnections(data)) {\n          this.throwNoFreeSlotsInConnectivityPlansError();\n        }\n      }\n    } else {\n      await this.throwNoConnectivitySettingsError();\n    }\n\n    return { res, data };\n  }\n\n  /**\n   * Gets the device profiles from LoRa platform.\n   * @param connectionName The name of connection for which device profiles will be retrieved\n   * @returns The result list with device profiles, or throws an error with exception.\n   */\n  async getDeviceProfiles(connectionName: string): Promise<IResultList<DeviceProfile>> {\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers,\n      params: {\n        actilityConnectionName: connectionName\n      }\n    };\n\n    const res = await this.client.fetch(this.deviceProfilesUrl, options);\n    const data = await res.json();\n\n    if (res.status === 200) {\n      if (data.length === 0) {\n        this.throwNoDeviceProfilesError();\n      }\n    } else {\n      this.throwDeviceProfilesFetchError();\n    }\n\n    return { res, data };\n  }\n\n  /**\n   * Gets the device protocols\n   */\n  async getDeviceProtocols(): Promise<IResultList<IManagedObject>> {\n    const filters = {\n      pageSize: 20,\n      withTotalPages: true\n    };\n    const query = {\n      __filter: {\n        __and: [\n          { __has: 'c8y_IsDeviceType' },\n          {\n            type: { __in: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'] }\n          }\n        ]\n      },\n      __orderby: [{ name: 1 }]\n    };\n    const { res, data } = await this.inventoryService.listQuery(query, filters);\n\n    if (res.status === 200) {\n      if (data.length === 0) {\n        this.throwNoDeviceProtocolsError();\n      }\n    } else {\n      this.throwDeviceProtocolsFetchError();\n    }\n\n    return { res, data };\n  }\n\n  /**\n   * Creates device registration\n   */\n  async register(registration: ActilityDeviceRegistration) {\n    const options: IFetchOptions = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(registration)\n    };\n\n    const res = await this.client.fetch(this.registrationUrl, options);\n    const data = await res.json();\n\n    if (res.status !== 201) {\n      this.throwRegistrationError(data);\n    }\n\n    return { res, data };\n  }\n\n  /**\n   * checks if used connections is less then granted connections\n   */\n  private hasAvailableConnections(connectivityPlans) {\n    return some(\n      connectivityPlans,\n      plan => parseInt(plan.grantedConnections, 10) > parseInt(plan.usedConnections, 10)\n    );\n  }\n\n  private async throwNoConnectivitySettingsError() {\n    const error = new Error();\n    error.name = ErrorName.NoConnectivitySettingsError;\n\n    if ((await this.applicationService.isAvailable('administration')).data) {\n      error.message = this.translateService.instant(\n        gettext(\n          `Could not get connectivity plans from the LoRa platform. Verify the ThingPark credentials in the Administration app under <a href=\"{{ link }}\">Settings</a>.`\n        ),\n        {\n          link: '/apps/administration/index.html#/connectivitySettings/actility_lora_provider_settings'\n        }\n      );\n    } else {\n      error.message = gettext(\n        'Could not get connectivity plans from the LoRa platform. Please contact the administrator.'\n      );\n    }\n\n    throw error;\n  }\n\n  private throwNoConnectivityPlansError() {\n    const error = new Error();\n    error.name = ErrorName.NoConnectivityPlansError;\n    error.message = gettext(\n      'No connectivity plans found. New connectivity plans must be created via the LoRa platform.'\n    );\n    throw error;\n  }\n\n  private throwNoFreeSlotsInConnectivityPlansError() {\n    const companyName = this.optionsService.get('companyName', 'Cumulocity IoT');\n    const error = new Error();\n    error.name = ErrorName.NoFreeSlotsInConnectivityPlansError;\n    error.message = this.translateService.instant(\n      gettext(\n        `No connectivity plans with free slots available. Please contact ThingPark on the device quota limits for your connectivity plans or remove unused devices from ThingPark and retry registering the device in the {{companyName}} platform.`\n      ),\n      {\n        companyName\n      }\n    );\n    throw error;\n  }\n\n  private throwDeviceProfilesFetchError() {\n    const error = new Error();\n    error.name = ErrorName.DeviceProfilesFetchError;\n    error.message = gettext('Could not load device profiles from the LoRa platform.');\n    throw error;\n  }\n\n  private throwNoDeviceProfilesError() {\n    const error = new Error();\n    error.name = ErrorName.NoDeviceProfilesError;\n    error.message = gettext(\n      'No device profiles found. Create a new device profile via the LoRa platform.'\n    );\n    throw error;\n  }\n\n  private throwDeviceProtocolsFetchError() {\n    const error = new Error();\n    error.name = ErrorName.DeviceProtocolsFetchError;\n    error.message = gettext('Could not load device protocols.');\n    throw error;\n  }\n\n  private throwNoDeviceProtocolsError() {\n    const error = new Error();\n    error.name = ErrorName.NoDeviceProtocolsError;\n    error.message = this.translateService.instant(\n      gettext(\n        `No device protocols configured. Create a LoRa device protocol in <a href=\"{{ link }}\">Device protocols</a>.`\n      ),\n      {\n        link: '/apps/devicemanagement/#/deviceprotocols'\n      }\n    );\n    throw error;\n  }\n\n  private throwRegistrationError(data: { message: string }) {\n    const error = new Error();\n    error.name = ErrorName.RegistrationError;\n    error.message = data.message;\n    throw error;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { gettext, C8yStepper } from '@c8y/ngx-components';\nimport { AbstractControl, FormGroup } from '@angular/forms';\nimport { from, forkJoin, of, BehaviorSubject, throwError, defer, Subject } from 'rxjs';\nimport { cloneDeep, uniq } from 'lodash-es';\nimport { CdkStep } from '@angular/cdk/stepper';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport {\n  ActilityDeviceRegistrationService,\n  ErrorName\n} from './actility-device-registration.service';\nimport { ActilityDeviceRegistration } from './actility-device-registration.model';\nimport { map, catchError, switchMap, shareReplay, takeUntil, mergeMap } from 'rxjs/operators';\ntype State =\n  | 'loadPending'\n  | 'loadSuccess'\n  | 'loadError'\n  | 'registrationPending'\n  | 'registrationSuccess'\n  | 'registrationError';\n@Component({\n  selector: 'c8y-actility-registration',\n  templateUrl: 'actility-device-registration.component.html'\n})\nexport class ActilityDeviceRegistrationComponent {\n  stepper: C8yStepper;\n  registrationStepLabels = {\n    next: gettext('Register')\n  };\n  finalStepLabels = {\n    custom: gettext('Close')\n  };\n\n  state: State = 'loadPending';\n  errors$ = new BehaviorSubject<Error[]>([]);\n  errorMessages$ = this.errors$.pipe(\n    map(errors => errors.map(error => error.message)),\n    map(messages => uniq(messages))\n  );\n\n  connections$ = this.getConnections$();\n  deviceProtocols$ = this.getDeviceProtocols$();\n  unsubscribe$: Subject<void> = new Subject();\n  load$ = this.connections$.pipe(\n    catchError((error: Error) => of(error)),\n    switchMap(connections => {\n      if (\n        connections instanceof Error &&\n        connections.name === ErrorName.NoConnectivitySettingsError\n      ) {\n        return of([connections]);\n      }\n\n      return forkJoin([\n        of(connections),\n        this.deviceProtocols$.pipe(catchError((error: Error) => of(error)))\n      ]);\n    }),\n    map(results => results.filter(result => result instanceof Error)),\n    switchMap(errors => (errors.length === 0 ? of([]) : throwError(errors)))\n  );\n\n  form = new FormGroup({});\n  model = {} as ActilityDeviceRegistration;\n\n  // Formly schema definition to render actility device registration form\n  fields: FormlyFieldConfig[] = [\n    {\n      key: 'connection',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Connection'),\n        required: true,\n        c8yForOptions: this.connections$,\n        displayProperty: 'name',\n        valueProperties: ['name']\n      }\n    },\n    {\n      key: 'deviceProfile',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Device profile'),\n        required: true,\n        displayProperty: 'name',\n        placeholder: 'IWM-LR3',\n        valueProperties: ['id', 'name', 'typeMAC']\n      },\n      hooks: {\n        onInit: field => {\n          const connectionControl = field.form.get('connection');\n          connectionControl.valueChanges\n            .pipe(\n              takeUntil(this.unsubscribe$),\n              mergeMap(() => this.getDeviceProfiles$(this.form.get('connection').value.name))\n            )\n            .subscribe(\n              profiles => {\n                field.templateOptions.c8yForOptions = of(profiles);\n                field.formControl.setValue(null);\n              },\n              error => {\n                field.form.controls.deviceProfile.setErrors({ deviceProfile: true });\n                field.validators.deviceProfile.message = error.message;\n              }\n            );\n        }\n      },\n      validators: {\n        deviceProfile: {\n          expression: (control: AbstractControl) => {\n            return control.status === 'VALID';\n          },\n          message: () => ''\n        }\n      }\n    },\n    {\n      key: 'deviceType',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Device protocol'),\n        required: true,\n        c8yForOptions: this.deviceProtocols$,\n        displayProperty: 'name',\n        valueProperties: ['id', 'name']\n      }\n    },\n    {\n      key: 'devEUI',\n      type: 'input',\n      templateOptions: {\n        placeholder: '0018A20000000004',\n        label: gettext('Device EUI'),\n        required: true,\n        pattern: '^([a-fA-F0-9]{16})$'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid 16 digit hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'applicationEUI',\n      type: 'input',\n      templateOptions: {\n        placeholder: '70B3D53260000003',\n        label: gettext('Application EUI'),\n        required: true,\n        pattern: '^([a-fA-F0-9]{16})$'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid 16 digit hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'applicationKey',\n      type: 'input',\n      templateOptions: {\n        label: gettext('Application key'),\n        placeholder: '258DB54023EA74F0D55085F7351737D0',\n        required: true,\n        pattern: '^([a-fA-F0-9]{32})$'\n      },\n      validation: {\n        messages: {\n          pattern: gettext('Must be a valid 32 digit hexadecimal number.')\n        }\n      }\n    },\n    {\n      key: 'connectivityPlan',\n      type: 'typeahead',\n      templateOptions: {\n        label: gettext('Connectivity plan'),\n        description: gettext('Only connectivity plans with free slots are displayed'),\n        required: true,\n        placeholder: 'Dev-ope testing CP',\n        displayProperty: 'name',\n        valueProperties: ['id', 'ref', 'name', 'grantedConnections', 'usedConnections']\n      },\n      hooks: {\n        onInit: field => {\n          const connectionControl = field.form.get('connection');\n          connectionControl.valueChanges\n            .pipe(\n              takeUntil(this.unsubscribe$),\n              mergeMap(() => this.getConnectivityPlans$(this.form.get('connection').value.name))\n            )\n            .subscribe(\n              profiles => {\n                field.templateOptions.c8yForOptions = of(profiles);\n                field.formControl.setValue(null);\n              },\n              error => {\n                field.form.controls.connectivityPlan.setErrors({ connectivityPlan: true });\n                field.validators.connectivityPlan.message = error.message;\n              }\n            );\n        }\n      },\n      validators: {\n        connectivityPlan: {\n          expression: (control: AbstractControl) => {\n            return control.status === 'VALID';\n          },\n          message: () => ''\n        }\n      }\n    }\n  ];\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private registrationService: ActilityDeviceRegistrationService\n  ) {\n    this.load$.subscribe(\n      () => {\n        this.state = 'loadSuccess';\n      },\n      errors => {\n        this.state = 'loadError';\n        this.errors$.next(errors);\n      }\n    );\n  }\n\n  getConnectivityPlans$(name) {\n    return defer(() => from(this.registrationService.getConnectivityPlans(name))).pipe(\n      shareReplay(1)\n    );\n  }\n\n  getDeviceProfiles$(name) {\n    return defer(() => from(this.registrationService.getDeviceProfiles(name))).pipe(shareReplay(1));\n  }\n\n  getDeviceProtocols$() {\n    return defer(() => from(this.registrationService.getDeviceProtocols())).pipe(shareReplay(1));\n  }\n\n  getConnections$() {\n    return defer(() => from(this.registrationService.getConnections())).pipe(shareReplay(1));\n  }\n\n  async register(event: { stepper: C8yStepper; step: CdkStep }) {\n    event.stepper.next();\n    this.state = 'registrationPending';\n    try {\n      const actilityDevice = this.getActilityDeviceToSend();\n      await this.registrationService.register(actilityDevice);\n      this.state = 'registrationSuccess';\n    } catch (error) {\n      this.state = 'registrationError';\n      this.errors$.next([error]);\n    }\n  }\n\n  getActilityDeviceToSend() {\n    const actilityDevice: ActilityDeviceRegistration = cloneDeep(this.model);\n    actilityDevice.lnsConnectionName = this.model.connection.name;\n    delete (actilityDevice as any).connection;\n    return actilityDevice;\n  }\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n","import { Component } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ActilityDeviceRegistrationComponent } from './actility-device-registration.component';\n\n@Component({\n  selector: 'c8y-actility-registration-button',\n  templateUrl: 'actility-device-registration-button.component.html'\n})\nexport class ActilityDeviceRegistrationButtonComponent {\n  constructor(private modalService: BsModalService) {}\n\n  open() {\n    this.modalService.show(ActilityDeviceRegistrationComponent, {\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TenantUiService } from '@c8y/ngx-components';\nimport { ActilityDeviceRegistrationButtonComponent } from './actility-device-registration-button.component';\nimport { RegisterDeviceFactory, RegisterDeviceItem } from '@c8y/ngx-components/register-device';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActilityDeviceRegistrationFactory implements RegisterDeviceFactory {\n  constructor(private tenantService: TenantUiService) {}\n\n  get() {\n    const actions: RegisterDeviceItem[] = [];\n    if (this.tenantService.isMicroserviceSubscribedInCurrentTenant('actility')) {\n      actions.push({\n        template: ActilityDeviceRegistrationButtonComponent,\n        priority: 99,\n        category: 'single'\n      } as RegisterDeviceItem);\n    }\n    return actions;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, CoreModule } from '@c8y/ngx-components';\nimport { HOOK_DEVICE_REGISTRATION} from '@c8y/ngx-components/register-device';\nimport { ActilityDeviceRegistrationButtonComponent } from './actility-device-registration-button.component';\nimport { ActilityDeviceRegistrationFactory } from './actility-device-registration.factory';\nimport { ActilityDeviceRegistrationComponent } from './actility-device-registration.component';\nimport { ActilityDeviceRegistrationService } from './actility-device-registration.service';\n\n@NgModule({\n  imports: [CoreModule, CommonModule],\n  declarations: [ActilityDeviceRegistrationButtonComponent, ActilityDeviceRegistrationComponent],\n  providers: [\n    ActilityDeviceRegistrationService,\n    {\n      provide: HOOK_DEVICE_REGISTRATION,\n      useClass: ActilityDeviceRegistrationFactory,\n      multi: true\n    }\n  ]\n})\nexport class ActilityDeviceRegistrationModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ActilityDeviceRegistrationService as ɵa} from './actility-device-registration.service';"],"names":[],"mappings":"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"}