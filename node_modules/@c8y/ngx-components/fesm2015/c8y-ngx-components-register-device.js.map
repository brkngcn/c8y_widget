{"version":3,"file":"c8y-ngx-components-register-device.js","sources":["../../register-device/register-device.service.ts","../../register-device/general/general-device-registration.component.ts","../../register-device/general/general-device-registration-button.component.ts","../../register-device/device-registration-view.component.ts","../../register-device/register-device-navigation.factory.ts","../../register-device/extensible/base-extensible-device-registration.service.ts","../../register-device/extensible/single/extensible-device-registration.service.ts","../../register-device/extensible/single/extensible-device-registration-modal.component.ts","../../register-device/extensible/single/extensible-device-registration-button.component.ts","../../register-device/extensible/single/extensible-device-registration-stepper.component.ts","../../register-device/extensible/bulk/extensible-bulk-device-registration.service.ts","../../register-device/extensible/bulk/extensible-bulk-device-registration-modal.component.ts","../../register-device/bulk/bulk-device-registration-modal.component.ts","../../register-device/extensible/bulk/extensible-bulk-device-registration-button.component.ts","../../register-device/bulk/bulk-device-registration-button.component.ts","../../register-device/dropdown/register-device-extension.service.ts","../../register-device/dropdown/register-device-dropdown.component.ts","../../register-device/register-device.factory.ts","../../register-device/register-device.module.ts","../../register-device/c8y-ngx-components-register-device.ts"],"names":["bulkSchema"],"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  DeviceRegistrationService,\n  DeviceRegistrationStatus,\n  IDeviceRegistration,\n  IDeviceRegistrationAccept,\n  IDeviceRegistrationCreate,\n  IDeviceRegistrationLimit,\n  IResult,\n  Paging\n} from '@c8y/client';\nimport { get, pick } from 'lodash-es';\nimport { BehaviorSubject, forkJoin, from, Observable, Subject } from 'rxjs';\nimport { AlertService, gettext, IRealtimeDeviceBootstrap } from '@c8y/ngx-components';\nimport { finalize, map, mergeMap, takeLast, takeUntil } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterDeviceService {\n  readonly _loading: Subject<boolean> = new Subject();\n  readonly _limit: BehaviorSubject<IDeviceRegistrationLimit> = new BehaviorSubject({ isReached: false });\n  readonly _deviceRegistrationRequests: BehaviorSubject<{ data: IDeviceRegistration[], paging?: Paging<IDeviceRegistration> }> = new BehaviorSubject({ data: [] });\n  readonly deviceRegistrationRequests$: Observable<{ data: IDeviceRegistration[], paging?: Paging<IDeviceRegistration> }> = this._deviceRegistrationRequests.asObservable();\n  readonly loading$: Observable<boolean> = this._loading.asObservable();\n  readonly limit$: Observable<IDeviceRegistrationLimit> = this._limit.asObservable();\n  paging: Paging<IDeviceRegistration>;\n\n  private readonly deviceRegUrl = '/deviceregistration';\n  private endSubscriptions: Subject<void> = new Subject();\n\n  constructor(private router: Router,\n              private deviceRegService: DeviceRegistrationService,\n              private alertService: AlertService) {\n  }\n\n  isDeviceRegistration(): boolean {\n    return get(this.router, 'url') === this.deviceRegUrl;\n  }\n\n  internalListUpdate(deviceRequests: IDeviceRegistration[], pagingObject?: Paging<IDeviceRegistration>) {\n    let { paging, data } = this._deviceRegistrationRequests.getValue();\n    if (pagingObject) {\n      paging = pagingObject;\n    }\n    data = [...data, ...deviceRequests];\n    this._deviceRegistrationRequests.next({ data, paging });\n  }\n\n  onDeviceBootstrap(bsData: IRealtimeDeviceBootstrap) {\n    const { id, status } = bsData;\n    this._deviceRegistrationRequests.next({\n      data: this.updateStatusById(id, status)\n    });\n  }\n\n  list(pageSize: number = 100) {\n    this._loading.next(true);\n    this._deviceRegistrationRequests.next({ data: [], paging: undefined });\n\n    from(this.deviceRegService.list({ pageSize, withTotalPages: true }))\n      .pipe(\n        takeUntil(this.endSubscriptions),\n        finalize(() => this.limit())\n      )\n      .subscribe(\n        res => {\n          const { data, paging } = res;\n          this.internalListUpdate(data, paging);\n          this._loading.next(false);\n        },\n        err => {\n          this._loading.next(false);\n          this.alertService.addServerFailure(err);\n        }\n      );\n  }\n\n  createMultiple(newDeviceRequests: IDeviceRegistrationCreate[]) {\n    if (newDeviceRequests && newDeviceRequests.length > 0) {\n      this._loading.next(true);\n      const newRequests$ = newDeviceRequests.map(element => {\n        return from(\n          this.deviceRegService.create(element)\n            .catch((err: IResult<IDeviceRegistration>) => (\n              { res: err.res, data: { ...err.data, id: element.id } }\n            )));\n      });\n\n      const groupedRequests: {\n        success: IDeviceRegistration[],\n        failed: IDeviceRegistration[]\n      } = {\n        success: [],\n        failed: []\n      };\n\n      return forkJoin(newRequests$)\n        .pipe(\n          mergeMap(resp => resp.map(el => {\n            el.res.ok ? groupedRequests.success.push(el.data) : groupedRequests.failed.push(el.data);\n            return groupedRequests;\n          })),\n          takeLast(1),\n          finalize(() => {\n            this.internalListUpdate(groupedRequests.success);\n            this._loading.next(false);\n          })\n        );\n    }\n  }\n\n  remove(id: string) {\n    this._loading.next(true);\n    from(this.deviceRegService.delete(id))\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(\n        res => {\n          this._deviceRegistrationRequests.next(\n            { data: this.removeDeviceRegistrationRequestById(id) }\n          );\n          this._loading.next(false);\n          this.alertService.success(gettext('Device registration cancelled.'));\n        },\n        err => {\n          this._loading.next(false);\n          this.alertService.addServerFailure(err);\n        }\n      );\n  }\n\n  accept(request: IDeviceRegistration) {\n    this._loading.next(true);\n    const payload = pick(request, ['id', 'securityToken']);\n    from(this.deviceRegService.accept(payload))\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(\n        res => {\n          this._deviceRegistrationRequests.next(\n            { data: this.updateStatusById(payload.id, DeviceRegistrationStatus.ACCEPTED) }\n          );\n          this.limit();\n          this._loading.next(false);\n          this.alertService.success(gettext('Device registration accepted.'));\n        },\n        err => {\n          this._loading.next(false);\n          this.alertService.addServerFailure(err);\n        }\n      );\n  }\n\n  acceptAll() {\n    const acceptedDeviceRequests: IDeviceRegistrationAccept[] = [];\n    const failedDeviceRequests: IDeviceRegistrationAccept[] = [];\n    this._loading.next(true);\n\n    from(this.deviceRegService.acceptAll())\n      .pipe(\n        takeUntil(this.endSubscriptions),\n        map(({ data }) => {\n          data.map(deviceRegistrationRequest => {\n            if (deviceRegistrationRequest.successful) {\n              acceptedDeviceRequests.push(deviceRegistrationRequest);\n              this.updateStatusById(deviceRegistrationRequest.id, DeviceRegistrationStatus.ACCEPTED);\n            } else {\n              failedDeviceRequests.push(deviceRegistrationRequest);\n            }\n          });\n          return data;\n        }),\n        finalize(() => {\n          // update rendered list with successful accepted device registrations\n          // see: this.updateStatusById(...)\n          this.internalListUpdate([]);\n          this.limit();\n          this._loading.next(false);\n          if (failedDeviceRequests.length > 0) {\n            this.alertService.warning(gettext('Could not accept all pending registration requests.'), JSON.stringify({\n              failedDeviceRequests,\n              acceptedDeviceRequests\n            }, undefined, 2));\n          } else {\n            this.alertService.success(gettext('Accepted all pending registration requests.'));\n          }\n        })\n      ).subscribe(\n      res => {\n        // empty by design\n      },\n      err => {\n        this._loading.next(false);\n        this.alertService.addServerFailure(err);\n      }\n    );\n  }\n\n  limit() {\n    from(this.deviceRegService.limit())\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(\n        res => this._limit.next(res.data),\n        err => this.alertService.addServerFailure(err)\n      );\n  }\n\n  getRequestByStatus(status: DeviceRegistrationStatus): IDeviceRegistration[] {\n    return this._deviceRegistrationRequests.getValue().data.filter(req => req.status === status);\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  private updateStatusById(id: string, status: DeviceRegistrationStatus) {\n    const items = this._deviceRegistrationRequests.getValue().data;\n    const matchingElementIndex = items.findIndex(element => element.id === id);\n    if (matchingElementIndex >= 0) {\n      items[matchingElementIndex].status = status;\n    }\n    return items;\n  }\n\n  private removeDeviceRegistrationRequestById(id: string) {\n    const items = this._deviceRegistrationRequests.getValue().data;\n    const matchingElementIndex = items.findIndex(element => element.id === id);\n    if (matchingElementIndex >= 0) {\n      items.splice(matchingElementIndex, 1);\n    }\n    this._loading.next(false);\n    return items;\n  }\n}\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\nimport { TenantUiService, gettext, C8yStepper, memoize } from '@c8y/ngx-components';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { from, Observable, Subject, defer} from 'rxjs';\nimport { filter, shareReplay, switchMap, takeUntil, tap} from 'rxjs/operators';\nimport { IDeviceRegistration, IManagedObject, InventoryService, IResultList, ITenant, TenantService } from '@c8y/client';\nimport { RegisterDeviceService } from '../register-device.service';\nimport { CdkStep } from '@angular/cdk/stepper';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\ninterface GeneralDeviceRegistrationModelType {\n  id: string;\n  tenant?: {id: string};\n  group?: {id: string, name?: string};\n}\n\n@Component({\n  selector: 'c8y-general-device-registration',\n  templateUrl: 'general-device-registration.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralDeviceRegistrationComponent implements AfterViewInit, OnDestroy {\n  readonly MANAGEMENT = 'management';\n  readonly FILTER: object = {\n    withTotalPages: true,\n    pageSize: 25\n  };\n\n  form = new FormGroup({});\n  model = {\n    devicesToCreate: [{} as GeneralDeviceRegistrationModelType]\n  };\n  options: FormlyFormOptions = {\n    formState: {\n      canLoadTenants: true,\n    }\n  };\n\n  isLoading$: Observable<boolean>;\n  success: IDeviceRegistration[] = [];\n  failed: IDeviceRegistration[] = [];\n\n  fields: FormlyFieldConfig[] = [\n    {\n      type: 'array',\n      key: 'devicesToCreate',\n      templateOptions: {\n        addText: gettext('Add device'),\n        addTextDataCy: 'add-device'\n      },\n      fieldArray: {\n        fieldGroup: [{\n          key: 'id',\n          type: 'string',\n          focus: true,\n          templateOptions: {\n            placeholder: '0123ab32fcd',\n            label: gettext('Device ID'),\n            required: true\n          },\n          validators: {\n            unique: {\n              expression: (control: FormControl) => {\n                const found = (control.root.get('devicesToCreate').value as Array<{id: string}>).filter(el => el.id === control.value);\n                return found.length === 0;\n              },\n              message: () => gettext('Device ID duplicates are not allowed'),\n            },\n          },\n        },\n        {\n          key: 'tenant',\n          type: 'typeahead',\n          hideExpression: (model: any, formState: any, field: FormlyFieldConfig) => {\n            if (!formState?.canLoadTenants) {\n              field.formControl.setValue(null);\n            }\n            return !formState?.canLoadTenants || false;\n          },\n          defaultValue: {id: this.MANAGEMENT},\n          templateOptions: {\n            label: gettext('Add to tenant'),\n            required: true,\n            c8yForOptions: this.canLoadTenants$().pipe(filter(canLoad => canLoad), switchMap(() => this.getTenants$())) as Observable<IResultList<ITenant>>,\n            container: 'body',\n            displayProperty: 'id',\n            valueProperties: ['id']\n          },\n          hooks: {\n            onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {\n              this.options.formState.canLoadTenants = canLoad;\n              this.cd.detectChanges();\n            }))\n          }\n        },\n        {\n          key: 'group',\n          type: 'typeahead',\n          expressionProperties: {\n            'templateOptions.disabled': (model: any, formState: any, field: FormlyFieldConfig) => {\n              if (formState?.canLoadTenants) {\n                if (model?.tenant?.id !== this.MANAGEMENT) {\n                  field.formControl.setValue(null);\n                }\n                return !(model?.tenant?.id === this.MANAGEMENT);\n              }\n              delete field?.templateOptions?.description;\n              return false;\n            }\n          },\n          templateOptions: {\n            disabled: false,\n            label: gettext('Add to group'),\n            description: gettext('You can add device to specific group for management tenant only.'),\n            container: 'body',\n            displayProperty: 'name',\n            valueProperties: ['id'],\n            c8yForOptions: this.getGroups$()\n          },\n          hooks: {\n            onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {\n              this.options.formState.canLoadTenants = canLoad;\n              this.cd.detectChanges();\n            }))\n          }\n        }]\n      }\n    }\n  ];\n\n  private destroy$: Subject<any> = new Subject();\n  private lastCreatedDevices: GeneralDeviceRegistrationModelType[] = [];\n\n  constructor(\n    private tenantUIService: TenantUiService,\n    private tenantService: TenantService,\n    private registerDeviceService: RegisterDeviceService,\n    private inventoryService: InventoryService,\n    private cd: ChangeDetectorRef,\n    public bsModalRef: BsModalRef\n  ) {\n    this.isLoading$ = this.registerDeviceService.loading$;\n  }\n\n  ngAfterViewInit() {\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  create(eventObject: {stepper: C8yStepper, step: CdkStep}) {\n    if (this.model?.devicesToCreate?.length > 0) {\n      this.lastCreatedDevices = [...this.model.devicesToCreate];\n\n      const dataToSend = this.model.devicesToCreate.map((el: GeneralDeviceRegistrationModelType) => {\n        const {id, tenant, group} = el;\n        let data: {id: string, tenantId?: string, groupId?: string} = { id };\n\n        if (tenant?.id) {\n          data = { ...data, tenantId: tenant.id };\n        }\n\n        if (group?.id) {\n          data = { ...data, groupId: group.id };\n        }\n\n        return data;\n      });\n\n      this.registerDeviceService.createMultiple(dataToSend)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(requests => {\n        this.success = requests.success;\n        this.failed = requests.failed;\n\n        if (eventObject) {\n          eventObject.stepper.next();\n        }\n      });\n    }\n  }\n\n  fixErrors(event: {stepper: C8yStepper, step: CdkStep}, failedRequests: IDeviceRegistration[]) {\n    if (failedRequests && failedRequests.length > 0) {\n      this.options.resetModel({devicesToCreate: [...this.lastCreatedDevices.filter(el => failedRequests.map(data => data.id).includes(el.id))]});\n      this.cd.detectChanges();\n    }\n    event?.stepper.previous();\n  }\n\n  @memoize()\n  private canLoadTenants$(): Observable<boolean> {\n    return defer(() =>\n      from(this.tenantUIService.isManagementTenant())).pipe(shareReplay(1));\n  }\n\n  @memoize()\n  private getTenants$(): Observable<IResultList<ITenant>> {\n    return defer(\n      () => from(this.tenantService.list(this.FILTER))\n    ).pipe(shareReplay(1));\n  }\n\n  @memoize()\n  private getGroups$(): Observable<IResultList<IManagedObject>> {\n    return defer(() =>\n      from(\n        this.inventoryService.listQuery(\n          { __filter: { __has: 'c8y_IsDeviceGroup' }, __orderby: [{ name: 1 }] },\n          { ...this.FILTER }\n        )\n      )\n    ).pipe(shareReplay(1));\n  }\n}\n","import { Component } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { GeneralDeviceRegistrationComponent } from './general-device-registration.component';\n\n@Component({\n  selector: 'c8y-general-device-registration-button',\n  templateUrl: 'general-device-registration-button.component.html'\n})\n\nexport class GeneralDeviceRegistrationButtonComponent {\n  constructor(private modalService: BsModalService) {}\n\n  open() {\n    this.modalService.show(GeneralDeviceRegistrationComponent, {\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  DeviceRegistrationSecurityMode,\n  DeviceRegistrationStatus,\n  IDeviceRegistration,\n  IDeviceRegistrationLimit,\n  Paging\n} from '@c8y/client';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, map, switchMap, takeUntil } from 'rxjs/operators';\nimport {\n  DeviceBootstrapRealtimeService,\n  IRealtimeDeviceBootstrap,\n  TenantUiService,\n  ModalService,\n  Status,\n  gettext,\n  OptionsService\n} from '@c8y/ngx-components';\nimport { RegisterDeviceService } from './register-device.service';\nimport { sortBy } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'c8y-device-registration-view',\n  templateUrl: 'device-registration-view.component.html'\n})\nexport class DeviceRegistrationViewComponent implements OnInit, OnDestroy {\n  deviceRequests$: Observable<{\n    data: IDeviceRegistration[];\n    paging?: Paging<IDeviceRegistration>;\n  }>;\n  limit$: Observable<IDeviceRegistrationLimit>;\n  limitReachedInfo$: Observable<string>;\n  requireSecurityToken: boolean = false;\n  isManagementTenant: boolean = false;\n  isLoading: boolean = false;\n  gridOrList: 'interact-list' | 'interact-grid' = 'interact-grid';\n  status = DeviceRegistrationStatus;\n\n  readonly statusProps = {\n    [DeviceRegistrationStatus.WAITING_FOR_CONNECTION]: {\n      label: gettext('Waiting for connection'),\n      icon: 'unlink',\n      cls: 'text-danger'\n    },\n    [DeviceRegistrationStatus.PENDING_ACCEPTANCE]: {\n      label: gettext('Pending acceptance'),\n      icon: 'circle',\n      cls: 'text-info'\n    },\n    [DeviceRegistrationStatus.ACCEPTED]: {\n      label: gettext('Accepted'),\n      icon: 'check-circle',\n      cls: 'text-success'\n    },\n    [DeviceRegistrationStatus.BLOCKED]: {\n      label: gettext('Blocked'),\n      icon: 'remove',\n      cls: 'text-danger'\n    }\n  };\n\n  private unsubscribe$: Subject<any> = new Subject();\n  private readonly _securityTokenPolicy: BehaviorSubject<DeviceRegistrationSecurityMode> =\n    new BehaviorSubject(DeviceRegistrationSecurityMode.OPTIONAL);\n\n  constructor(\n    private registerDeviceService: RegisterDeviceService,\n    private bootstrapRealtimeService: DeviceBootstrapRealtimeService,\n    private tenantUiService: TenantUiService,\n    private modalService: ModalService,\n    private translateService: TranslateService,\n    private optionsService: OptionsService\n  ) {}\n\n  ngOnInit() {\n    this.loadAll();\n    this.setIsManagementTenant();\n    this.setRequireSecurityToken();\n\n    this.deviceRequests$ = this.registerDeviceService.deviceRegistrationRequests$.pipe(\n      map(req => ({\n        data: sortBy(req.data, [\n          ({ status }) => (status === DeviceRegistrationStatus.PENDING_ACCEPTANCE ? 0 : 1),\n          '-creationTime'\n        ]),\n        paging: req.paging\n      }))\n    );\n    this.limit$ = this.registerDeviceService.limit$;\n    this.limitReachedInfo$ = this.limit$.pipe(\n      filter(deviceRegistrationLimit => deviceRegistrationLimit.isReached),\n      switchMap(({ limit }) =>\n        this.translateService.stream(\n          gettext(\n            'You reached the limit of {{ maxDevices }} devices. No more devices can be registered.'\n          ),\n          { maxDevices: limit }\n        )\n      )\n    );\n    this.registerDeviceService.loading$\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(value => (this.isLoading = value));\n\n    this.bootstrapRealtimeService\n      .onUpdate$()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((bootstrap: IRealtimeDeviceBootstrap) => {\n        this.registerDeviceService.onDeviceBootstrap(bootstrap);\n      });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  updateList(data) {\n    this.registerDeviceService.internalListUpdate(data);\n  }\n\n  async delete(id: string) {\n    const confirmed = await this.modalService.confirm(\n      gettext('Cancel device registration'),\n      this.translateService.instant(\n        gettext(\n          'You are about to cancel device registration for ID \"{{id}}\". Do you want to proceed?'\n        ),\n        { id }\n      ),\n      Status.DANGER,\n      {\n        ok: gettext('Cancel registration'),\n        cancel: gettext('Close')\n      }\n    );\n\n    if (confirmed) {\n      this.registerDeviceService.remove(id);\n    }\n  }\n\n  accept(request: IDeviceRegistration) {\n    this.registerDeviceService.accept(request);\n  }\n\n  acceptAll() {\n    this.registerDeviceService.acceptAll();\n  }\n\n  canAcceptAll() {\n    const pendingRequests = this.registerDeviceService.getRequestByStatus(\n      DeviceRegistrationStatus.PENDING_ACCEPTANCE\n    );\n    return !(pendingRequests.length > 0 && !this.requireSecurityToken);\n  }\n\n  loadAll() {\n    this.registerDeviceService.list();\n  }\n\n  displayMode(listClass: 'interact-list' | 'interact-grid') {\n    this.gridOrList = listClass;\n  }\n\n  async setRequireSecurityToken() {\n    const mode: DeviceRegistrationSecurityMode = await this.optionsService.getTenantOption(\n      'device-registration',\n      'security-token.policy',\n      DeviceRegistrationSecurityMode.OPTIONAL\n    );\n    this._securityTokenPolicy.next(mode);\n    this.requireSecurityToken = mode === DeviceRegistrationSecurityMode.REQUIRED;\n  }\n\n  async setIsManagementTenant() {\n    this.isManagementTenant = await this.tenantUiService.isManagementTenant();\n  }\n\n  shouldShowSecurityTokenInput(data: IDeviceRegistration) {\n    return (\n      data &&\n      data.status === DeviceRegistrationStatus.PENDING_ACCEPTANCE &&\n      this.showTokenInputBasedOnSecurityMode()\n    );\n  }\n\n  showTokenInputBasedOnSecurityMode() {\n    return this._securityTokenPolicy.getValue() !== DeviceRegistrationSecurityMode.IGNORED;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory, Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class RegisterDeviceNavigationFactory implements NavigatorNodeFactory {\n  constructor(private permissions: Permissions) {}\n  get() {\n    const userHasPermission = this.permissions.hasAnyRole([\n      'ROLE_DEVICE_CONTROL_ADMIN',\n      'ROLE_DEVICE_CONTROL_READ'\n    ]);\n    const nav: NavigatorNode[] = [];\n    if (userHasPermission) {\n      nav.push(new NavigatorNode({\n        label: gettext('Registration'),\n        icon: 'c8y-device-connect',\n        path: '/deviceregistration',\n        parent: gettext('Devices'),\n        preventDuplicates: true,\n        priority: 3000\n      }));\n    }\n    return nav;\n  }\n}\n","import { ApplicationService, ApplicationType, IApplication } from '@c8y/client';\nimport { AppStateService, gettext } from '@c8y/ngx-components';\nimport { flatMap } from 'lodash-es';\nimport { ApplicationExtension, ExtensibleDeviceRegistrationProvider } from './base-device-registration.model';\n\nexport class BaseExtensibleDeviceRegistrationService {\n  constructor(\n    protected applicationService: ApplicationService,\n    protected stateService: AppStateService\n  ) {}\n\n  protected getMetadataUrl(contextPath: string): string {\n    return `${this.getServiceBaseUrl(contextPath)}/metadata`;\n  }\n\n  protected getServiceBaseUrl(contextPath: string): string {\n    if (!contextPath || contextPath.length === 0) {\n      throw new Error(gettext('The URL of the microservice is misconfigured. A context path is missing.'));\n    }\n    return `/service/${contextPath}/deviceRegistration`;\n  }\n\n  protected async getDeviceRegistrationProviders(\n    bulk: boolean\n  ): Promise<ExtensibleDeviceRegistrationProvider[]> {\n    let providers: ExtensibleDeviceRegistrationProvider[] = [];\n    const microservices = await this.listMicroservicesByUser();\n    if (microservices && microservices.length > 0) {\n      providers = this.getProvidersFromManifestExtensions(microservices, bulk).concat(\n        this.getProvidersFromExtensions(microservices, bulk)\n      );\n    }\n    return providers;\n  }\n\n  private async listMicroservicesByUser() {\n    const { data } = await this.applicationService.listByUser(\n      this.stateService?.currentUser?.value?.userName,\n      {\n        dropOverwrittenApps: true,\n        noPaging: true,\n        pageSize: 100,\n        withTotalPages: true\n      }\n    );\n    return data?.filter(({ type }) => type === ApplicationType.MICROSERVICE);\n  }\n\n  private getProvidersFromManifestExtensions(\n    applications: IApplication[],\n    bulk: boolean\n  ): ExtensibleDeviceRegistrationProvider[] {\n    return flatMap(applications, application => {\n      return application?.manifest?.extensions?.map(extension => {\n        return { ...extension, contextPath: application.contextPath } as ApplicationExtension;\n      });\n    }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));\n  }\n\n  private getProvidersFromExtensions(applications: IApplication[], bulk: boolean): ExtensibleDeviceRegistrationProvider[] {\n    return flatMap(applications, application => {\n      return application.extensions?.map(extension => {\n        return { ...extension, contextPath: application.contextPath } as ExtensibleDeviceRegistrationProvider;\n      });\n    }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));\n  }\n\n  private appSupportingExtensibleDeviceRegistrationForm(extension: ExtensibleDeviceRegistrationProvider, bulk: boolean): boolean {\n    if (bulk) {\n      return extension?.type === 'extensibleBulkDeviceRegistration';\n    } else {\n      return extension?.type === 'extensibleDeviceRegistration';\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApplicationService, FetchClient, IResult } from '@c8y/client';\nimport { AppStateService, gettext } from '@c8y/ngx-components';\nimport { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationSchema } from './extensible-device-registration.model';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Injectable()\nexport class ExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {\n  constructor(\n    protected applicationService: ApplicationService,\n    protected stateService: AppStateService,\n    private client: FetchClient\n  ) {\n    super(applicationService, stateService);\n  }\n\n  async getSchema(contextPath: string): Promise<ExtensibleDeviceRegistrationSchema> {\n    const response = await this.client.fetch(this.getMetadataUrl(contextPath), { params: { lang: this.stateService.state.lang } });\n    const data = await response.json();\n\n    if (!data || !data.c8y_DeviceRegistration) {\n      throw new Error(gettext('The response of the microservice is incomplete. The device registration information is missing.'));\n    }\n\n    return data.c8y_DeviceRegistration;\n  }\n\n  getDeviceRegistrationProviders(): Promise<ExtensibleDeviceRegistrationProvider[]> {\n    return super.getDeviceRegistrationProviders(false);\n  }\n\n  async registerDevice(contextPath: string, model: any): Promise<IResult<any>> {\n    const method = 'POST';\n    const body = JSON.stringify(model);\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.client.fetch(this.getServiceBaseUrl(contextPath), { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { C8yJSONSchema, gettext } from '@c8y/ngx-components';\nimport { ExtensibleDeviceRegistrationService } from './extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationSchema } from './extensible-device-registration.model';\nimport { JSONSchema7 } from 'json-schema';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'extensible-device-registration-modal',\n  templateUrl: 'extensible-device-registration-modal.component.html'\n})\n\nexport class ExtensibleDeviceRegistrationModalComponent implements OnInit {\n\n  title: string;\n  loadingErrorMessage: string;\n  pages: FormlyFieldConfig[][];\n  labels: string[] = [];\n  contextPath: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private jsonschema: C8yJSONSchema,\n    private registrationService: ExtensibleDeviceRegistrationService\n  ) {}\n\n  async ngOnInit() {\n    const { title, pages }: ExtensibleDeviceRegistrationSchema = await this.registrationService.getSchema(this.contextPath)\n    .catch(error => {\n      this.loadingErrorMessage = error?.message || gettext('Cannot fetch a form definition from the microservice.');\n      return {\n        title: gettext('Error')\n      };\n    });\n    this.title = title;\n    this.pages = pages?.map((step: JSONSchema7) => {\n      this.labels.push(step.title);\n      return [this.jsonschema.toFieldConfig(step) as FormlyFieldConfig];\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ExtensibleDeviceRegistrationService } from './extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationModalComponent } from './extensible-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Component({\n  selector: 'extensible-device-registration-provider',\n  templateUrl: 'extensible-device-registration-button.component.html'\n})\nexport class ExtensibleDeviceRegistrationButtonComponent implements OnInit {\n  providersMetaData: Promise<ExtensibleDeviceRegistrationProvider[]>;\n\n  constructor(private deviceRegistrationService: ExtensibleDeviceRegistrationService,\n              private modalService: BsModalService) {\n  }\n\n  ngOnInit() {\n    this.providersMetaData = this.deviceRegistrationService.getDeviceRegistrationProviders();\n  }\n\n  click(providerMetaData: ExtensibleDeviceRegistrationProvider) {\n    const { name, contextPath } = providerMetaData;\n    this.modalService.show(ExtensibleDeviceRegistrationModalComponent, {\n      initialState: { name, contextPath } as Partial<ExtensibleDeviceRegistrationModalComponent>,\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ExtensibleDeviceRegistrationService } from './extensible-device-registration.service';\nimport { RegisterDeviceService } from '../../register-device.service';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { STEP_STATE } from '@angular/cdk/stepper';\n\n@Component({\n  selector: 'c8y-extensible-device-registration-stepper',\n  templateUrl: 'extensible-device-registration-stepper.component.html'\n})\n\nexport class ExtensibleDeviceRegistrationStepperComponent implements OnInit {\n\n  message: string;\n  errorMessage: string;\n  pendingStatus: boolean = false;\n  forms: FormGroup[] = [];\n  model: any = {};\n  @ViewChild(C8yStepper, { static: true })\n  stepper: C8yStepper;\n\n  @Input() contextPath: string;\n  @Input() labels: string[];\n  @Input() steps: FormlyFieldConfig[][];\n\n  private readonly SERVER_ERROR = gettext('Cannot register your device.');\n  private readonly SUCCESSFUL_REGISTRATION = gettext('Your device was successfully registered.');\n  private readonly NO_CONNECTION = gettext('Unable to reach the microservice.');\n\n  constructor(\n    private customProviderService: ExtensibleDeviceRegistrationService,\n    private registerDeviceService: RegisterDeviceService,\n    private bsModalRef: BsModalRef\n  ) {\n  }\n\n  ngOnInit() {\n    this.steps.forEach(step => this.forms.push(new FormGroup({})));\n  }\n\n  async save() {\n    this.pendingStatus = true;\n    this.errorMessage = null;\n    const { res, data } = await this.customProviderService.registerDevice(this.contextPath, this.model)\n    .catch(err => {\n      return {\n        res: undefined,\n        data: undefined\n      };\n    })\n    .finally(() => {\n      this.pendingStatus = false;\n      this.stepper.next();\n    });\n\n    if (res && data) {\n      if (res.status >= 400 && res.status < 500) {\n        this.handleError(data.message || this.SERVER_ERROR);\n      } else if (res.status >= 500) {\n        this.handleError(this.SERVER_ERROR);\n      } else {\n        this.message = this.SUCCESSFUL_REGISTRATION;\n      }\n    } else {\n      this.handleError(this.NO_CONNECTION);\n    }\n  }\n\n  close() {\n    this.bsModalRef.hide();\n  }\n\n  complete() {\n    this.registerDeviceService.list();\n    this.bsModalRef.hide();\n  }\n\n  goToFirstStep() {\n    this.stepper.selectedIndex = 0;\n  }\n\n  isRegistrationStep() {\n    return this.stepper.selectedIndex === this.steps.length - 1;\n  }\n\n  finalStepStatus() {\n    if (this.stepper.selectedIndex === this.steps.length) {\n      if (this.errorMessage) {\n        return STEP_STATE.ERROR;\n      } else {\n        return STEP_STATE.DONE;\n      }\n    } else {\n      return STEP_STATE.NUMBER;\n    }\n  }\n\n  private handleError(message: string) {\n    this.errorMessage = message;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApplicationService, FetchClient, IResult } from '@c8y/client';\nimport { AppStateService, gettext } from '@c8y/ngx-components';\nimport { BulkDescription, BulkResult } from './extensible-bulk-device-registration.model';\nimport { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Injectable()\nexport class BulkExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {\n  constructor(\n    protected applicationService: ApplicationService,\n    protected stateService: AppStateService,\n    private client: FetchClient\n  ) {\n    super(applicationService, stateService);\n  }\n\n  getDeviceRegistrationProviders(): Promise<ExtensibleDeviceRegistrationProvider[]> {\n    return super.getDeviceRegistrationProviders(true);\n  }\n\n  async getBulkDescription(contextPath: string): Promise<BulkDescription> {\n    const res = await this.client.fetch(this.getMetadataUrl(contextPath), {\n      params: { lang: this.stateService.state.lang }\n    });\n    const { c8y_DeviceRegistration } = await res.json();\n\n    if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {\n      throw new Error(\n        gettext(\n          'The response of the microservice is incomplete. The bulk registration information is missing.'\n        )\n      );\n    }\n\n    return c8y_DeviceRegistration.bulk;\n  }\n\n  async upload(csv: File, contextPath): Promise<IResult<BulkResult>> {\n    const method = 'POST';\n    const body = this.createBinaryRequestBody(csv);\n    const res = await this.client.fetch(this.getBulkUrl(contextPath), { method, body });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  getBulkUrl(contextPath: string): string {\n    return `${this.getServiceBaseUrl(contextPath)}/bulk`;\n  }\n\n  private createBinaryRequestBody(file: any): FormData {\n    const body = new FormData();\n    body.append('file', file, file.name);\n    return body;\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { C8yJSONSchema, C8yStepper, gettext } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\nimport {\n  BulkDescription,\n  BulkFailedResult,\n  BulkFileExample,\n  BulkResult\n} from './extensible-bulk-device-registration.model';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { BulkExtensibleDeviceRegistrationService } from './extensible-bulk-device-registration.service';\nimport { RegisterDeviceService } from '../../register-device.service';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { IResult } from '@c8y/client';\n\nconst bulkSchema: object = {\n  $schema: 'https://json-schema.org/draft/2019-09/schema',\n  type: 'object',\n  properties: {\n    csvBulkFile: {\n      type: 'string',\n      title: gettext('CSV file upload'),\n      description: gettext(\n        'You can use file upload component to let users send files. This input accepts only a single CSV file.'\n      ),\n      contentEncoding: 'base64',\n      contentMediaType: 'csv'\n    }\n  },\n  required: ['csvBulkFile'],\n  additionalProperties: false\n};\n\n@Component({\n  selector: 'extensible-device-registration-modal-component',\n  templateUrl: 'extensible-bulk-device-registration-modal.component.html'\n})\nexport class ExtensibleBulkDeviceRegistrationModalComponent implements OnInit {\n  @ViewChild(C8yStepper, { static: true }) stepper: C8yStepper;\n  title: string;\n  examples: BulkFileExample[];\n  message: string;\n  success: boolean;\n  loadingError: boolean = false;\n  pending: boolean = false;\n  contextPath: string;\n  result: BulkResult | BulkFailedResult;\n  form = new FormGroup({});\n  model = {};\n  template: FormlyFieldConfig[];\n\n  constructor(\n    private jsonschema: C8yJSONSchema,\n    private bulkExtensibleDeviceRegistrationService: BulkExtensibleDeviceRegistrationService,\n    private registerDeviceService: RegisterDeviceService,\n    private bsModalRef: BsModalRef\n  ) {}\n\n  async ngOnInit() {\n    const { title, exampleFileUrls }: BulkDescription =\n      await this.bulkExtensibleDeviceRegistrationService\n        .getBulkDescription(this.contextPath)\n        .catch(error => {\n          this.message = error.message;\n          this.loadingError = true;\n\n          return {\n            title: gettext('Error'),\n            exampleFileUrls: []\n          };\n        });\n\n    this.title = title;\n    this.template = [this.jsonschema.toFieldConfig(bulkSchema)];\n    this.examples = exampleFileUrls;\n  }\n\n  async upload() {\n    this.pending = true;\n    const { res, data }: IResult<BulkResult> = await this.bulkExtensibleDeviceRegistrationService\n      .upload(this.getFile(this.model), this.contextPath)\n      .catch(err => {\n        return {\n          res: undefined,\n          data: undefined\n        };\n      })\n      .finally(() => {\n        this.pending = false;\n        this.stepper.next();\n      });\n\n    this.result = data;\n    this.success = res?.status < 400;\n\n    if (this.success) {\n      this.message = gettext('Device registration created.');\n      this.model = {};\n    }\n\n    if (res) {\n      if (res.status >= 400 && res.status < 500) {\n        this.message = gettext('Device registration failed.');\n      } else if (res.status >= 500) {\n        this.message = gettext('Error occurred while processing the uploaded file.');\n      }\n    } else {\n      this.message = gettext('No internet connection. Unable to reach the microservice.');\n    }\n  }\n\n  getFile(model) {\n    const csvBulkFile = (model as any)?.csvBulkFile;\n    return csvBulkFile ? csvBulkFile[0]?.file : undefined;\n  }\n\n  complete() {\n    this.registerDeviceService.list();\n    this.bsModalRef.hide();\n  }\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { C8yJSONSchema, C8yStepper, gettext } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { saveAs } from 'file-saver';\nimport { DeviceRegistrationBulkService, IDeviceRegistrationBulkResult } from '@c8y/client';\nimport { Router } from '@angular/router';\nimport { RegisterDeviceService } from '../register-device.service';\nimport { BulkFailedResult } from '../extensible/bulk/extensible-bulk-device-registration.model';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nconst bulkSchema: object = {\n  $schema: 'https://json-schema.org/draft/2019-09/schema',\n  type: 'object',\n  properties: {\n    csvBulkFile: {\n      type: 'string',\n      title: gettext('CSV file upload'),\n      description: gettext(\n        'You can use file upload component to let users send files. This input accepts only a single CSV file.'\n      ),\n      contentEncoding: 'base64',\n      contentMediaType: 'csv'\n    }\n  },\n  required: ['csvBulkFile'],\n  additionalProperties: false\n};\n\nconst simpleCsvHeaders: string[] = ['ID', 'PATH'];\nconst fullCsvHeaders: string[] = [\n  'ID',\n  'CREDENTIALS',\n  'TYPE',\n  'NAME',\n  'ICCID',\n  'IDTYPE',\n  'PATH',\n  'SHELL',\n  'AUTH_TYPE'\n];\n\n@Component({\n  selector: 'bulk-device-registration',\n  templateUrl: 'bulk-device-registration-modal.component.html'\n})\nexport class BulkDeviceRegistrationModalComponent {\n  @ViewChild(C8yStepper, { static: true }) stepper: C8yStepper;\n  message: string;\n  success: boolean;\n  pending: boolean;\n  result: IDeviceRegistrationBulkResult;\n  failedResult: BulkFailedResult;\n  form = new FormGroup({});\n  model = {};\n  template: FormlyFieldConfig[];\n\n  constructor(\n    private router: Router,\n    private jsonschema: C8yJSONSchema,\n    private deviceRegistrationService: DeviceRegistrationBulkService,\n    private registerDeviceService: RegisterDeviceService,\n    private bsModalRef: BsModalRef\n  ) {}\n\n  ngOnInit() {\n    this.template = [this.jsonschema.toFieldConfig(bulkSchema)];\n  }\n\n  upload() {\n    this.pending = true;\n    const file = this.getFile(this.model);\n    this.deviceRegistrationService\n      .create(file)\n      .then(({ res, data }) => {\n        if (res.status < 400) {\n          this.result = data;\n          this.success = data.numberOfFailed === 0 && data.numberOfSuccessful === data.numberOfAll;\n          this.message = this.success\n            ? gettext('Device registration created.')\n            : (this.message = gettext('Device registration failed.'));\n        } else {\n          this.failedResult = data as unknown as BulkFailedResult;\n          this.message = gettext('Device registration failed.');\n        }\n        this.model = {};\n        this.pending = false;\n        this.stepper.next();\n      })\n      .catch(reason => {\n        this.message = gettext('Error occurred while processing the uploaded file.');\n        this.pending = false;\n        this.stepper.next();\n      });\n  }\n\n  downloadSimple() {\n    return this.download(simpleCsvHeaders, gettext('Simple bulk registration - template.csv'));\n  }\n\n  downloadFull() {\n    return this.download(fullCsvHeaders, gettext('Full bulk registration - template.csv'));\n  }\n\n  download(headers: string[], fileName: string) {\n    const headerRaw = headers.map(header => `\"${header}\"`).join(';');\n    const binaryFile = new Blob([headerRaw], { type: 'text/csv' });\n    saveAs(binaryFile, fileName);\n  }\n\n  complete() {\n    this.registerDeviceService.list();\n    this.bsModalRef.hide();\n  }\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n\n  private getFile(model): File {\n    const csvBulkFile = (model as any)?.csvBulkFile;\n    return csvBulkFile ? csvBulkFile[0]?.file : undefined;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BulkExtensibleDeviceRegistrationService } from './extensible-bulk-device-registration.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ExtensibleBulkDeviceRegistrationModalComponent } from './extensible-bulk-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Component({\n  selector: 'extensible-device-registration-component',\n  templateUrl: 'extensible-bulk-device-registration-button.component.html'\n})\n\nexport class ExtensibleBulkDeviceRegistrationButtonComponent implements OnInit {\n  bulkProvidersMetaData: Promise<ExtensibleDeviceRegistrationProvider[]>;\n\n  constructor(\n    private bulkExtensibleDeviceRegistrationService: BulkExtensibleDeviceRegistrationService,\n    private modalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.bulkProvidersMetaData = this.bulkExtensibleDeviceRegistrationService.getDeviceRegistrationProviders();\n  }\n\n  click(contextPath) {\n    this.modalService.show(ExtensibleBulkDeviceRegistrationModalComponent, {\n      initialState: { contextPath } as Partial<ExtensibleBulkDeviceRegistrationModalComponent>,\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkDeviceRegistrationModalComponent } from './bulk-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationProvider } from '../extensible/base-device-registration.model';\n\n@Component({\n  selector: 'extensible-device-registration-component',\n  templateUrl: 'bulk-device-registration-button.component.html'\n})\n\nexport class BulkDeviceRegistrationButtonComponent {\n  bulkProvidersMetaData: Promise<ExtensibleDeviceRegistrationProvider[]>;\n\n  constructor(\n    private modalService: BsModalService\n  ) {\n  }\n\n  click() {\n    this.modalService.show(BulkDeviceRegistrationModalComponent, {\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n\n}\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ExtensionFactory, ExtensionPoint, fromTriggerOnce } from '@c8y/ngx-components';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, startWith } from 'rxjs/operators';\nimport { RegisterDeviceItem } from './RegisterDeviceItem';\n\nexport type RegisterDeviceExtension = RegisterDeviceItem | RegisterDeviceItem[] | ExtensionFactory<RegisterDeviceItem>;\nexport const HOOK_DEVICE_REGISTRATION = new InjectionToken<RegisterDeviceExtension>('RegisterDevicesFactory');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterDeviceExtensionService implements ExtensionPoint<RegisterDeviceExtension> {\n  items$: Observable<RegisterDeviceItem[]>;\n  factories: RegisterDeviceExtension[] = [];\n  refreshTrigger: Subject<any> = new Subject();\n\n  constructor(private injector: Injector, router: Router) {\n    this.items$ = fromTriggerOnce(\n      router,\n      [this.refreshTrigger],\n      [() => this.injector.get(HOOK_DEVICE_REGISTRATION, []), () => this.factories, this]\n    ).pipe(startWith([]), shareReplay(1));\n  }\n\n  refresh() {\n    this.refreshTrigger.next();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RegisterDeviceService } from '../register-device.service';\nimport { RegisterDeviceExtensionService } from './register-device-extension.service';\n\n@Component({\n  selector: 'c8y-register-device-dropdown',\n  templateUrl: './register-device-dropdown.component.html'\n})\nexport class RegisterDeviceDropdownComponent {\n  single$ = this.registerDeviceExtensionService.items$.pipe(\n    map(items => items.filter(item => item.category === 'single').sort((a, b) =>  b.priority - a.priority))\n  );\n\n  bulk$ = this.registerDeviceExtensionService.items$.pipe(\n    map(items => items.filter(item => item.category === 'bulk').sort((a, b) =>  b.priority - a.priority))\n  );\n\n  limit$: Observable<boolean> = this.registerDeviceService.limit$.pipe(map(limit => limit.isReached));\n\n  constructor(\n    private registerDeviceExtensionService: RegisterDeviceExtensionService,\n    private registerDeviceService: RegisterDeviceService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { GeneralDeviceRegistrationButtonComponent } from './general/general-device-registration-button.component';\nimport { ExtensibleDeviceRegistrationButtonComponent } from './extensible/single/extensible-device-registration-button.component';\nimport { ExtensibleBulkDeviceRegistrationButtonComponent } from './extensible/bulk/extensible-bulk-device-registration-button.component';\nimport { BulkDeviceRegistrationButtonComponent } from './bulk/bulk-device-registration-button.component';\nimport { RegisterDeviceItem, RegisterDeviceFactory } from './dropdown/RegisterDeviceItem';\n\n@Injectable()\nexport class DeviceRegistrationFactory implements RegisterDeviceFactory {\n  get() {\n    return [{\n      template: GeneralDeviceRegistrationButtonComponent,\n      priority: 100,\n      category: 'single'\n    } as RegisterDeviceItem, {\n      template: ExtensibleDeviceRegistrationButtonComponent,\n      priority: 50,\n      category: 'single'\n    } as RegisterDeviceItem, {\n      template: ExtensibleBulkDeviceRegistrationButtonComponent,\n      priority: 50,\n      category: 'bulk'\n    } as RegisterDeviceItem, {\n      template: BulkDeviceRegistrationButtonComponent,\n      priority: 100,\n      category: 'bulk'\n    } as RegisterDeviceItem];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {\n  CommonModule,\n  CoreModule,\n  DeviceBootstrapRealtimeService,\n  DynamicFormsModule,\n  HOOK_NAVIGATOR_NODES,\n  StepperModule\n} from '@c8y/ngx-components';\nimport { DeviceRegistrationViewComponent } from './device-registration-view.component';\nimport { GeneralDeviceRegistrationComponent } from './general/general-device-registration.component';\nimport { GeneralDeviceRegistrationButtonComponent } from './general/general-device-registration-button.component';\nimport { RegisterDeviceNavigationFactory } from './register-device-navigation.factory';\nimport { RegisterDeviceService } from './register-device.service';\nimport { ExtensibleDeviceRegistrationButtonComponent } from './extensible/single/extensible-device-registration-button.component';\nimport { ExtensibleDeviceRegistrationModalComponent } from './extensible/single/extensible-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationService } from './extensible/single/extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationStepperComponent } from './extensible/single/extensible-device-registration-stepper.component';\nimport { ExtensibleBulkDeviceRegistrationModalComponent } from './extensible/bulk/extensible-bulk-device-registration-modal.component';\nimport { BulkExtensibleDeviceRegistrationService } from './extensible/bulk/extensible-bulk-device-registration.service';\nimport { BulkDeviceRegistrationModalComponent } from './bulk/bulk-device-registration-modal.component';\nimport { ExtensibleBulkDeviceRegistrationButtonComponent } from './extensible/bulk/extensible-bulk-device-registration-button.component';\nimport { BulkDeviceRegistrationButtonComponent } from './bulk/bulk-device-registration-button.component';\nimport { RegisterDeviceDropdownComponent } from './dropdown/register-device-dropdown.component';\nimport { HOOK_DEVICE_REGISTRATION } from './dropdown/register-device-extension.service';\nimport { DeviceRegistrationFactory } from './register-device.factory';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\n\nconst routes: Routes = [\n  {\n    path: 'deviceregistration',\n    component: DeviceRegistrationViewComponent,\n  }\n];\n\n@NgModule({\n  imports: [BsDropdownModule, PopoverModule, CommonModule, CoreModule, StepperModule, DynamicFormsModule, RouterModule.forChild(routes)],\n  declarations: [\n    DeviceRegistrationViewComponent,\n    GeneralDeviceRegistrationComponent,\n    GeneralDeviceRegistrationButtonComponent,\n    BulkDeviceRegistrationModalComponent,\n    BulkDeviceRegistrationButtonComponent,\n    ExtensibleDeviceRegistrationButtonComponent,\n    ExtensibleDeviceRegistrationModalComponent,\n    ExtensibleDeviceRegistrationStepperComponent,\n    ExtensibleBulkDeviceRegistrationModalComponent,\n    ExtensibleBulkDeviceRegistrationButtonComponent,\n    RegisterDeviceDropdownComponent\n  ],\n  providers: [{\n    provide: HOOK_DEVICE_REGISTRATION,\n    useClass: DeviceRegistrationFactory,\n    multi: true\n  },\n  {\n    provide: HOOK_NAVIGATOR_NODES,\n    useClass: RegisterDeviceNavigationFactory,\n    multi: true\n  },\n    DeviceBootstrapRealtimeService,\n    RegisterDeviceService,\n    ExtensibleDeviceRegistrationService,\n    BulkExtensibleDeviceRegistrationService,\n  ],\n  entryComponents: [\n    GeneralDeviceRegistrationComponent,\n    ExtensibleBulkDeviceRegistrationButtonComponent,\n    BulkDeviceRegistrationModalComponent,\n    ExtensibleDeviceRegistrationModalComponent,\n    RegisterDeviceDropdownComponent\n  ]\n})\nexport class RegisterDeviceModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BulkDeviceRegistrationButtonComponent as ɵc} from './bulk/bulk-device-registration-button.component';\nexport {BulkDeviceRegistrationModalComponent as ɵb} from './bulk/bulk-device-registration-modal.component';\nexport {DeviceRegistrationViewComponent as ɵa} from './device-registration-view.component';\nexport {RegisterDeviceDropdownComponent as ɵl} from './dropdown/register-device-dropdown.component';\nexport {BaseExtensibleDeviceRegistrationService as ɵf} from './extensible/base-extensible-device-registration.service';\nexport {ExtensibleBulkDeviceRegistrationButtonComponent as ɵk} from './extensible/bulk/extensible-bulk-device-registration-button.component';\nexport {ExtensibleBulkDeviceRegistrationModalComponent as ɵi} from './extensible/bulk/extensible-bulk-device-registration-modal.component';\nexport {BulkExtensibleDeviceRegistrationService as ɵj} from './extensible/bulk/extensible-bulk-device-registration.service';\nexport {ExtensibleDeviceRegistrationButtonComponent as ɵd} from './extensible/single/extensible-device-registration-button.component';\nexport {ExtensibleDeviceRegistrationModalComponent as ɵg} from './extensible/single/extensible-device-registration-modal.component';\nexport {ExtensibleDeviceRegistrationStepperComponent as ɵh} from './extensible/single/extensible-device-registration-stepper.component';\nexport {ExtensibleDeviceRegistrationService as ɵe} from './extensible/single/extensible-device-registration.service';\nexport {RegisterDeviceNavigationFactory as ɵm} from './register-device-navigation.factory';"]}