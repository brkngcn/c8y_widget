import { Component, ComponentFactoryResolver, ViewChild, ViewContainerRef, Injectable, ViewChildren, EventEmitter, Output, NgModule } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { OperationBulkRealtimeService, DatePickerComponent, CoreModule } from '@c8y/ngx-components';
import { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';
import { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';
import { BULK_OPERATION_STATUS_OPTIONS, BulkOperationListItemComponent, BulkOperationListItemModule } from '@c8y/ngx-components/operations/bulk-operation-list-item';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { flatten } from 'lodash-es';
import { BehaviorSubject, combineLatest, pipe } from 'rxjs';
import { tap, switchMap, withLatestFrom, map, shareReplay } from 'rxjs/operators';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@c8y/ngx-components/operations/status-filter';
import * as ɵngcc6 from '@c8y/ngx-components/operations/bulk-operation-list-item';
import * as ɵngcc7 from '@angular/router';

const _c0 = ["container"];
const _c1 = ["statusFilter"];
function BulkOperationsListComponent_c8y_action_bar_item_3_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 1);
    ɵngcc0.ɵɵelementStart(1, "label", 16);
    ɵngcc0.ɵɵtext(2, "Type");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-select", 17);
    ɵngcc0.ɵɵlistener("onChange", function BulkOperationsListComponent_c8y_action_bar_item_3_Template_c8y_select_onChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); ctx_r7.selectedTypeFilters = $event; return ctx_r7.typeFilter$.next(ctx_r7.selectedTypeFilters); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "left");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("items", ctx_r0.bulkTypes)("selected", ctx_r0.selectedTypeFilters)("disableApplyOnNoSelection", true);
} }
function BulkOperationsListComponent_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_button_12_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.addBulkOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 18);
    ɵngcc0.ɵɵelementStart(3, "span", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Add bulk operation"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, "Add bulk operation"), " ");
} }
function BulkOperationsListComponent_c8y_ui_empty_state_20_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 21);
    ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_c8y_ui_empty_state_20_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.addBulkOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, " Add bulk operation ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "Add bulk operation"));
} }
function BulkOperationsListComponent_c8y_ui_empty_state_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-ui-empty-state", 19);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, BulkOperationsListComponent_c8y_ui_empty_state_20_button_3_Template, 3, 3, "button", 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 3, "No items to display"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 5, "Bulk operations will be displayed here"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.bulkTypes == null ? null : ctx_r3.bulkTypes.length);
} }
function BulkOperationsListComponent_c8y_ui_empty_state_22_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-ui-empty-state", 22);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "button", 21);
    ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_c8y_ui_empty_state_22_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.resetFilter(); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵtext(5, " Reset filter ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 3, "No results to display."))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 5, "Adjust or reset the filter."));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 7, "Reset filter"));
} }
function BulkOperationsListComponent_div_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelementStart(1, "div", 24);
    ɵngcc0.ɵɵelementStart(2, "div", 25);
    ɵngcc0.ɵɵelement(3, "i", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 27);
    ɵngcc0.ɵɵelementStart(5, "div", 28);
    ɵngcc0.ɵɵelementStart(6, "div", 29);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 30);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 31);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "div", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 3, "Operation"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 5, "Progress"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 7, "Status"), " ");
} }
function BulkOperationsListComponent_div_28_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 33);
    ɵngcc0.ɵɵelementStart(1, "c8y-bulk-operation-list-item", 34);
    ɵngcc0.ɵɵlistener("reload", function BulkOperationsListComponent_div_28_Template_c8y_bulk_operation_list_item_reload_1_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.reload$.next(); })("showFailedOperation", function BulkOperationsListComponent_div_28_Template_c8y_bulk_operation_list_item_showFailedOperation_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.openFailedOperation($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const bulkOperation_r16 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("bulkOperation", bulkOperation_r16);
} }
const _c2 = function (a0) { return { "icon-spin": a0 }; };
const _c3 = function (a0) { return { "dd-low": a0 }; };
function BulkOperationTypeListComponent_button_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "i", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", item_r1.c8yIcon);
} }
function BulkOperationTypeListComponent_button_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "i", 8);
    ɵngcc0.ɵɵelementEnd();
} }
function BulkOperationTypeListComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function BulkOperationTypeListComponent_button_1_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const item_r1 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.handleClick(item_r1); });
    ɵngcc0.ɵɵtemplate(1, BulkOperationTypeListComponent_button_1_div_1_Template, 2, 1, "div", 3);
    ɵngcc0.ɵɵtemplate(2, BulkOperationTypeListComponent_button_1_ng_template_2_Template, 2, 0, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(4, "div", 5);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const _r3 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r1.c8yIcon)("ngIfElse", _r3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 4, item_r1.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 6, item_r1.name), " ");
} }
class BulkOperationsModalComponent {
    constructor(bsModalRef, resolver) {
        this.bsModalRef = bsModalRef;
        this.resolver = resolver;
        this.showComponent = false;
    }
    cancel() {
        this.bsModalRef.hide();
    }
    createComponent(item) {
        if (item && item.component) {
            this.showComponent = true;
            const factory = this.resolver.resolveComponentFactory(item.component);
            this.container.createComponent(factory);
        }
    }
}
BulkOperationsModalComponent.ɵfac = function BulkOperationsModalComponent_Factory(t) { return new (t || BulkOperationsModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
BulkOperationsModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationsModalComponent, selectors: [["c8y-bulk-operations-modal"]], viewQuery: function BulkOperationsModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, decls: 23, vars: 5, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [1, "c8y-icon", "c8y-icon-energy"], ["translate", ""], [1, "modal-inner-scroll"], [1, "modal-body", "text-center", 3, "hidden"], ["c8y-guide-docs", ""], ["c8y-guide-href", "users-guide/device-management/#bulk-operation-wizard"], [3, "onCustomType"], ["container", ""], [1, "modal-footer", 3, "hidden"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"]], template: function BulkOperationsModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "h1", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4, "Add bulk operation");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "h4", 3);
        ɵngcc0.ɵɵtext(8, "Select one of the available options");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "p", 6);
        ɵngcc0.ɵɵelementStart(10, "small", 3);
        ɵngcc0.ɵɵdisableBindings();
        ɵngcc0.ɵɵtext(11, " Check the ");
        ɵngcc0.ɵɵelementStart(12, "a", 7);
        ɵngcc0.ɵɵtext(13, "User guide`KEEP_ORIGINAL`");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(14, " for more details.");
        ɵngcc0.ɵɵenableBindings();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "c8y-bulk-operation-type-list", 8);
        ɵngcc0.ɵɵlistener("onCustomType", function BulkOperationsModalComponent_Template_c8y_bulk_operation_type_list_onCustomType_15_listener($event) { return ctx.createComponent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(16, "template", null, 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 10);
        ɵngcc0.ɵɵelementStart(19, "button", 11);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsModalComponent_Template_button_click_19_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementStart(21, "span", 3);
        ɵngcc0.ɵɵtext(22, "Cancel");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("hidden", ctx.showComponent);
        ɵngcc0.ɵɵadvance(12);
        ɵngcc0.ɵɵproperty("hidden", ctx.showComponent);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 3, "Cancel"));
    } }, directives: function () { return [ɵngcc2.C8yTranslateDirective, ɵngcc2.GuideDocsComponent, ɵngcc2.GuideHrefDirective, BulkOperationTypeListComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
BulkOperationsModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: ComponentFactoryResolver }
];
BulkOperationsModalComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { static: false, read: ViewContainerRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4 translate>Add bulk operation</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body text-center\" [hidden]=\"showComponent\">\n      <h4 translate>Select one of the available options</h4>\n      <p c8y-guide-docs>\n        <small translate ngNonBindable>\n          Check the\n          <a c8y-guide-href=\"users-guide/device-management/#bulk-operation-wizard\"\n            >User guide`KEEP_ORIGINAL`</a\n          >\n          for more details.</small\n        >\n      </p>\n    </div>\n\n    <c8y-bulk-operation-type-list\n      (onCustomType)=\"createComponent($event)\"\n    ></c8y-bulk-operation-type-list>\n    <template #container></template>\n  </div>\n  <div class=\"modal-footer\" [hidden]=\"showComponent\">\n    <button\n      (click)=\"cancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BsModalRef }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { container: [{
            type: ViewChild,
            args: ['container', { static: false, read: ViewContainerRef }]
        }] }); })();

class BulkOperationModalsService {
    constructor(bsModalService) {
        this.bsModalService = bsModalService;
    }
    showNewBulkOperationModal() {
        this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {
            backdrop: 'static',
            class: 'modal-sm'
        });
    }
    hideNewBulkOperationModal() {
        if (this.bsModalRef) {
            this.bsModalRef.hide();
        }
    }
}
BulkOperationModalsService.ɵfac = function BulkOperationModalsService_Factory(t) { return new (t || BulkOperationModalsService)(ɵngcc0.ɵɵinject(ɵngcc1.BsModalService)); };
BulkOperationModalsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkOperationModalsService, factory: BulkOperationModalsService.ɵfac });
BulkOperationModalsService.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationModalsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BsModalService }]; }, null); })();

class BulkOperationsListComponent {
    constructor(realtime, bulkOperationsService, bulkOperationModalsService) {
        this.realtime = realtime;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.bulkTypes = [];
        this.selectedTypeFilters = this.getTypeFilters();
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.refreshLoading = false;
        this.statusFilter$ = new BehaviorSubject(null);
        this.typeFilter$ = new BehaviorSubject(null);
        this.timeFilter$ = new BehaviorSubject(null);
        this.reload$ = new BehaviorSubject(null);
        this.bulkOperations$ = combineLatest(this.statusFilter$, this.timeFilter$, this.typeFilter$, this.reload$).pipe(tap(() => {
            this.refreshLoading = true;
        }), switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)), withLatestFrom(this.typeFilter$), map(([result, typeFilter]) => {
            this.filterPipe = pipe(map((data) => this.filterByType(data, typeFilter)));
            return Object.assign(Object.assign({}, result), { data: this.filterByType(result.data, typeFilter) });
        }), tap(() => {
            this.refreshLoading = false;
        }), shareReplay(1));
        this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());
    }
    ngOnInit() {
        this.bulkTypes = this.bulkOperationsService.getBulkTypes();
    }
    filterByType(bulkOperations, typeFilter) {
        const flattenedFragments = this.flattenFilterFragments(typeFilter);
        if (
        // return data unfiltered if no filters selected...
        !flattenedFragments.length ||
            // ...or when all filters are selected
            this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))) {
            return bulkOperations;
        }
        const filteredData = bulkOperations.filter(item => {
            return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));
        });
        return filteredData;
    }
    resetFilter() {
        this.statusFilter$.next(null);
        this.timeFilter$.next(null);
        this.typeFilter$.next(null);
        this.datePicker.clearFilter();
        this.selectedTypeFilters = this.getTypeFilters();
        this.statusFilter.reset();
    }
    isFilterApplied() {
        var _a, _b;
        return (!!((_a = this.statusFilter$.getValue()) === null || _a === void 0 ? void 0 : _a.length) ||
            !!((_b = this.typeFilter$.getValue()) === null || _b === void 0 ? void 0 : _b.length) ||
            !!this.timeFilter$.getValue());
    }
    filter(statusFilters, timeFilter) {
        const status = statusFilters && statusFilters.length > 0
            ? {
                generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatuses))
            }
            : {};
        const time = timeFilter
            ? Object.assign(Object.assign({}, (timeFilter.dateFrom && {
                dateFrom: timeFilter.dateFrom.toISOString()
            })), (timeFilter.dateTo && {
                dateTo: timeFilter.dateTo.toISOString()
            })) : {};
        return this.getBulkOperations(Object.assign(Object.assign({}, status), time));
    }
    getBulkOperations(filter) {
        return this.bulkOperationsService.getBulkOperations(filter);
    }
    getTypeFilters() {
        return this.bulkOperationsService.getBulkTypes();
    }
    addBulkOperation() {
        this.bulkOperationModalsService.showNewBulkOperationModal();
    }
    openFailedOperation(failedParentId) {
        this.listItems.forEach(item => {
            if (item.bulkOperation.id === failedParentId) {
                item.listItem.collapsed = false;
                item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        });
    }
    compareOperations(operationA, operationB) {
        return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();
    }
    flattenFilterFragments(filters) {
        return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);
    }
}
BulkOperationsListComponent.ɵfac = function BulkOperationsListComponent_Factory(t) { return new (t || BulkOperationsListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OperationBulkRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(BulkOperationModalsService)); };
BulkOperationsListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationsListComponent, selectors: [["c8y-bulk-operations"]], viewQuery: function BulkOperationsListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, 7);
        ɵngcc0.ɵɵviewQuery(DatePickerComponent, 7);
        ɵngcc0.ɵɵviewQuery(BulkOperationListItemComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.statusFilter = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datePicker = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listItems = _t);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([OperationBulkRealtimeService])], decls: 30, vars: 42, consts: [["itemClass", "navbar-form", 3, "placement", 4, "ngIf"], ["itemClass", "navbar-form", 3, "placement"], [3, "options", "onFilterChanged"], ["statusFilter", ""], [3, "onDateSelected"], [3, "placement"], [3, "service"], ["class", "btn btn-link d-flex a-i-center", 3, "title", "click", 4, "ngIf"], [1, "btn", "btn-link", "d-flex", "a-i-center", 3, "title", "click"], ["c8yIcon", "refresh", 1, "m-r-4", 3, "ngClass"], [1, "text-truncate"], ["icon", "c8y-energy", 3, "title", "subtitle", 4, "ngIf"], ["icon", "search", 3, "title", "subtitle", 4, "ngIf"], [1, "m-b-24", 3, "ngClass"], ["class", "page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item", 4, "ngIf"], ["class", "d-contents", 4, "c8yFor", "c8yForOf", "c8yForRealtime", "c8yForPipe", "c8yForComparator", "c8yForLoadMore"], ["translate", "", 1, "hidden-sm"], [2, "width", "180px", 3, "items", "selected", "disableApplyOnNoSelection", "onChange"], ["c8yIcon", "plus-circle", 1, "m-r-4"], ["icon", "c8y-energy", 3, "title", "subtitle"], ["type", "button", "class", "btn btn-primary", "translate", "", 3, "title", "click", 4, "ngIf"], ["type", "button", "translate", "", 1, "btn", "btn-primary", 3, "title", "click"], ["icon", "search", 3, "title", "subtitle"], [1, "page-sticky-header", "hidden-xs", "c8y-list__item--double-actions", "c8y-list__item"], [1, "c8y-list__item__block"], [1, "c8y-list__item__icon"], [1, "p-l-32", "p-r-40"], [1, "c8y-list__item__body"], [1, "content-flex-57"], [1, "col-5"], [1, "flex-grow"], [1, "col-4"], [1, "c8y-list__item__actions"], [1, "d-contents"], [1, "d-contents", 3, "bulkOperation", "reload", "showFailedOperation"]], template: function BulkOperationsListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, BulkOperationsListComponent_c8y_action_bar_item_3_Template, 4, 4, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(4, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵelementStart(5, "c8y-status-filter", 2, 3);
        ɵngcc0.ɵɵlistener("onFilterChanged", function BulkOperationsListComponent_Template_c8y_status_filter_onFilterChanged_5_listener($event) { return ctx.statusFilter$.next($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵelementStart(8, "c8y-date-picker", 4);
        ɵngcc0.ɵɵlistener("onDateSelected", function BulkOperationsListComponent_Template_c8y_date_picker_onDateSelected_8_listener($event) { return ctx.timeFilter$.next($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "c8y-action-bar-item", 5);
        ɵngcc0.ɵɵelement(10, "c8y-realtime-btn", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "c8y-action-bar-item", 5);
        ɵngcc0.ɵɵtemplate(12, BulkOperationsListComponent_button_12_Template, 6, 6, "button", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "c8y-action-bar-item", 5);
        ɵngcc0.ɵɵelementStart(14, "button", 8);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_Template_button_click_14_listener() { return ctx.reload$.next(); });
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelement(16, "i", 9);
        ɵngcc0.ɵɵelementStart(17, "span", 10);
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(20, BulkOperationsListComponent_c8y_ui_empty_state_20_Template, 4, 7, "c8y-ui-empty-state", 11);
        ɵngcc0.ɵɵpipe(21, "async");
        ɵngcc0.ɵɵtemplate(22, BulkOperationsListComponent_c8y_ui_empty_state_22_Template, 6, 9, "c8y-ui-empty-state", 12);
        ɵngcc0.ɵɵpipe(23, "async");
        ɵngcc0.ɵɵelementStart(24, "c8y-list-group", 13);
        ɵngcc0.ɵɵpipe(25, "async");
        ɵngcc0.ɵɵtemplate(26, BulkOperationsListComponent_div_26_Template, 16, 9, "div", 14);
        ɵngcc0.ɵɵpipe(27, "async");
        ɵngcc0.ɵɵtemplate(28, BulkOperationsListComponent_div_28_Template, 2, 1, "div", 15);
        ɵngcc0.ɵɵpipe(29, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_13_0;
        let tmp_14_0;
        let tmp_15_0;
        let tmp_16_0;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 22, "Device control"), "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkTypes == null ? null : ctx.bulkTypes.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("placement", "left");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("options", ctx.bulkOperationStatusOptions);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "left");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("service", ctx.realtime);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkTypes == null ? null : ctx.bulkTypes.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 24, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(38, _c2, ctx.refreshLoading));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(19, 26, "Reload"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_13_0 = ɵngcc0.ɵɵpipeBind1(21, 28, ctx.bulkOperations$)) == null ? null : tmp_13_0.data.length) === 0 && !ctx.isFilterApplied());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_14_0 = ɵngcc0.ɵɵpipeBind1(23, 30, ctx.bulkOperations$)) == null ? null : tmp_14_0.data.length) === 0 && ctx.isFilterApplied());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(40, _c3, ((tmp_15_0 = ɵngcc0.ɵɵpipeBind1(25, 32, ctx.bulkOperations$)) == null ? null : tmp_15_0.data.length) < 10));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_16_0 = ɵngcc0.ɵɵpipeBind1(27, 34, ctx.bulkOperations$)) == null ? null : tmp_16_0.data.length);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(29, 36, ctx.bulkOperations$))("c8yForRealtime", ctx.realtime)("c8yForPipe", ctx.filterPipe)("c8yForComparator", ctx.compareOperations.bind(ctx))("c8yForLoadMore", "auto");
    } }, directives: [ɵngcc2.TitleComponent, ɵngcc4.NgIf, ɵngcc2.ActionBarItemComponent, ɵngcc5.StatusFilterComponent, ɵngcc2.DatePickerComponent, ɵngcc2.RealtimeButtonComponent, ɵngcc2.IconDirective, ɵngcc4.NgClass, ɵngcc2.ListGroupComponent, ɵngcc2.ForOfDirective, ɵngcc2.C8yTranslateDirective, ɵngcc2.SelectComponent, ɵngcc2.EmptyStateComponent, ɵngcc6.BulkOperationListItemComponent], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2 });
BulkOperationsListComponent.ctorParameters = () => [
    { type: OperationBulkRealtimeService },
    { type: BulkOperationsService },
    { type: BulkOperationModalsService }
];
BulkOperationsListComponent.propDecorators = {
    listItems: [{ type: ViewChildren, args: [BulkOperationListItemComponent,] }],
    statusFilter: [{ type: ViewChild, args: ['statusFilter', { static: true },] }],
    datePicker: [{ type: ViewChild, args: [DatePickerComponent, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations',
                template: "<c8y-title> {{ 'Device control' | translate }}</c8y-title>\n<c8y-action-bar-item *ngIf=\"bulkTypes?.length\" itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <label translate class=\"hidden-sm\">Type</label>\n  <c8y-select\n    style=\"width: 180px\"\n    [items]=\"bulkTypes\"\n    [selected]=\"selectedTypeFilters\"\n    [disableApplyOnNoSelection]=\"true\"\n    (onChange)=\"selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)\"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"bulkOperationStatusOptions\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-date-picker (onDateSelected)=\"timeFilter$.next($event)\"></c8y-date-picker>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"bulkTypes?.length\"\n    class=\"btn btn-link d-flex a-i-center\"\n    (click)=\"addBulkOperation()\"\n    title=\"{{ 'Add bulk operation' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i>\n    <span class=\"text-truncate\">\n      {{ 'Add bulk operation' | translate }}\n    </span>\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link d-flex a-i-center\"\n    title=\"{{ 'Reload' | translate }}\"\n    (click)=\"reload$.next()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': refreshLoading }\" class=\"m-r-4\"></i>\n    <span class=\"text-truncate\">\n      {{ 'Reload' | translate }}\n    </span>\n  </button>\n</c8y-action-bar-item>\n\n<!-- Empty state -->\n<c8y-ui-empty-state\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()\"\n  icon=\"c8y-energy\"\n  [title]=\"'No items to display' | translate\"\n  [subtitle]=\"'Bulk operations will be displayed here' | translate\"\n>\n  <button\n    type=\"button\"\n    *ngIf=\"bulkTypes?.length\"\n    title=\"{{ 'Add bulk operation' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"addBulkOperation()\"\n    translate\n  >\n    Add bulk operation\n  </button>\n</c8y-ui-empty-state>\n\n<!-- No results empty state -->\n<c8y-ui-empty-state\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()\"\n  icon=\"search\"\n  [title]=\"'No results to display.' | translate\"\n  [subtitle]=\"'Adjust or reset the filter.' | translate\"\n>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"resetFilter()\"\n    translate\n  >\n    Reset filter\n  </button>\n</c8y-ui-empty-state>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (bulkOperations$ | async)?.data.length < 10 }\"\n>\n  <div\n    class=\"page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item\"\n    *ngIf=\"(bulkOperations$ | async)?.data.length\"\n  >\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"p-l-32 p-r-40\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-57\">\n          <div class=\"col-5\">\n            {{ 'Operation' | translate }}\n          </div>\n          <div class=\"flex-grow\">\n            {{ 'Progress' | translate }}\n          </div>\n          <div class=\"col-4\">\n            {{ 'Status' | translate }}\n          </div>\n        </div>\n      </div>\n      <div class=\"c8y-list__item__actions\"></div>\n    </div>\n  </div>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let bulkOperation of bulkOperations$ | async;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto'\n    \"\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      (reload)=\"reload$.next()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      class=\"d-contents\"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n",
                providers: [OperationBulkRealtimeService]
            }]
    }], function () { return [{ type: ɵngcc2.OperationBulkRealtimeService }, { type: ɵngcc3.BulkOperationsService }, { type: BulkOperationModalsService }]; }, { listItems: [{
            type: ViewChildren,
            args: [BulkOperationListItemComponent]
        }], statusFilter: [{
            type: ViewChild,
            args: ['statusFilter', { static: true }]
        }], datePicker: [{
            type: ViewChild,
            args: [DatePickerComponent, { static: true }]
        }] }); })();

class BulkOperationTypeListComponent {
    constructor(router, bulkOperationsService, bulkOperationModalsService) {
        this.router = router;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.onCustomType = new EventEmitter();
        this.bulkList = [];
    }
    ngOnInit() {
        this.bulkList = this.bulkOperationsService.getBulkTypes();
    }
    handleClick(item) {
        if (item.path) {
            this.bulkOperationModalsService.hideNewBulkOperationModal();
            this.router.navigateByUrl(item.path);
        }
        else if (item.component) {
            this.onCustomType.emit(item);
        }
    }
}
BulkOperationTypeListComponent.ɵfac = function BulkOperationTypeListComponent_Factory(t) { return new (t || BulkOperationTypeListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(BulkOperationModalsService)); };
BulkOperationTypeListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationTypeListComponent, selectors: [["c8y-bulk-operation-type-list"]], outputs: { onCustomType: "onCustomType" }, decls: 2, vars: 1, consts: [[1, "list-group", "list-group-links"], ["type", "button", "class", "list-group-item flex-row", 3, "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "list-group-item", "flex-row", 3, "click"], ["class", "list-item-icon", 4, "ngIf", "ngIfElse"], ["icon", ""], [1, "list-item-body", "text-truncate", 3, "title"], [1, "list-item-icon"], [3, "c8yIcon"], ["c8yIcon", "cogs"]], template: function BulkOperationTypeListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, BulkOperationTypeListComponent_button_1_Template, 8, 8, "button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.bulkList);
    } }, directives: [ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc2.IconDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
BulkOperationTypeListComponent.ctorParameters = () => [
    { type: Router },
    { type: BulkOperationsService },
    { type: BulkOperationModalsService }
];
BulkOperationTypeListComponent.propDecorators = {
    onCustomType: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationTypeListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operation-type-list',
                template: "<div class=\"list-group list-group-links\">\n  <button\n    *ngFor=\"let item of bulkList\"\n    type=\"button\"\n    class=\"list-group-item flex-row\"\n    (click)=\"handleClick(item)\"\n  >\n    <div *ngIf=\"item.c8yIcon; else icon\" class=\"list-item-icon\">\n      <i [c8yIcon]=\"item.c8yIcon\"></i>\n    </div>\n    <ng-template #icon>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"cogs\"></i>\n      </div>\n    </ng-template>\n    <div title=\"{{ item.name | translate }}\" class=\"list-item-body text-truncate\">\n      {{ item.name | translate }}\n    </div>\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc7.Router }, { type: ɵngcc3.BulkOperationsService }, { type: BulkOperationModalsService }]; }, { onCustomType: [{
            type: Output
        }] }); })();

const bulkOperationListRoutes = [
    {
        path: 'devicecontrol/bulk',
        component: BulkOperationsListComponent
    }
];
/**
 * This module allows for displaying the list of bulk operations and their details.
 */
class BulkOperationsListModule {
}
BulkOperationsListModule.ɵfac = function BulkOperationsListModule_Factory(t) { return new (t || BulkOperationsListModule)(); };
BulkOperationsListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BulkOperationsListModule });
BulkOperationsListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [BulkOperationModalsService], imports: [[
            CoreModule,
            PopoverModule,
            TooltipModule,
            StatusFilterModule,
            BulkOperationSchedulerModule,
            BulkOperationListItemModule,
            RouterModule.forChild(bulkOperationListRoutes)
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsListModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    PopoverModule,
                    TooltipModule,
                    StatusFilterModule,
                    BulkOperationSchedulerModule,
                    BulkOperationListItemModule,
                    RouterModule.forChild(bulkOperationListRoutes)
                ],
                providers: [BulkOperationModalsService],
                declarations: [
                    BulkOperationsListComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent
                ],
                entryComponents: [
                    BulkOperationsListComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent
                ],
                exports: [
                    BulkOperationsListComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BulkOperationsListModule, { declarations: function () { return [BulkOperationsListComponent, BulkOperationTypeListComponent, BulkOperationsModalComponent]; }, imports: function () { return [CoreModule,
        PopoverModule,
        TooltipModule,
        StatusFilterModule,
        BulkOperationSchedulerModule,
        BulkOperationListItemModule, ɵngcc7.RouterModule]; }, exports: function () { return [BulkOperationsListComponent, BulkOperationTypeListComponent, BulkOperationsModalComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { BulkOperationModalsService, BulkOperationTypeListComponent, BulkOperationsListComponent, BulkOperationsListModule, BulkOperationsModalComponent, bulkOperationListRoutes };

//# sourceMappingURL=c8y-ngx-components-operations-bulk-operations-list.js.map