{"version":3,"file":"c8y-ngx-components-datapoint-library-services.js","sources":["../../datapoint-library/services/datapoint-parser.service.ts","../../datapoint-library/services/c8y-ngx-components-datapoint-library-services.ts"],"names":[],"mappings":";;;;MAIa,sBAAsB;AACnC,IAFA;AAAgB,QAEK,qBAAgB,GAAG;AACxC,YAAI,QAAQ;AACZ,YAAI,gBAAgB;AACpB,YAAI,gBAAgB;AACpB,YAAI,aAAa;AACjB,YAAI,aAAa;AACjB,YAAI,KAAK;AACT,YAAI,KAAK;AACT,SAAY,CAAC;AACb,KAwBC;AACD,IAxBE,eAAe,CAAC,UAA4B;AAC9C,QAAI,OAAO,UAAU,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;AACzD,KAAG;AACH,IACE,cAAc,CAAC,SAAyB;AAAI,QAC1C,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;AAC5B,YAAM,OAAO,SAAS,CAAC;AACvB,SAAK;AACL,QACI,MAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC;AAClC,QAAI,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAC7C,YAAM,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;AACxC,gBAAQ,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAChD,gBAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;AAChC,oBAAU,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AACzB,iBAAS;AAAC,qBAAK;AACf,oBAAU,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,iBAAS;AACT,aAAO;AACP,SAAK;AACL,QACI,OAAO,SAAS,CAAC;AACrB,KAAG;AACH;yHAAC;AACD;kDApCC,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;gDAC7B;AAAC;ACJN;AACA;AACA;AACA;AACA;AACU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\n\n@Injectable({ providedIn: 'root' })\nexport class DatapointParserService {\n  protected readonly attributeToParse = [\n    'target',\n    'yellowRangeMin',\n    'yellowRangeMax',\n    'redRangeMin',\n    'redRangeMax',\n    'min',\n    'max'\n  ] as const;\n\n  parseDatapoints(datapoints: IManagedObject[]) {\n    return datapoints.map(dp => this.parseDatapoint(dp));\n  }\n\n  parseDatapoint(datapoint: IManagedObject): IManagedObject {\n    if (!datapoint.c8y_Kpi) {\n      return datapoint;\n    }\n\n    const kpi = datapoint.c8y_Kpi;\n    for (const key of this.attributeToParse) {\n      if (typeof kpi[key] === 'string') {\n        const num = Number.parseFloat(kpi[key]);\n        if (!Number.isNaN(num)) {\n          kpi[key] = num;\n        } else {\n          delete kpi[key];\n        }\n      }\n    }\n\n    return datapoint;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}