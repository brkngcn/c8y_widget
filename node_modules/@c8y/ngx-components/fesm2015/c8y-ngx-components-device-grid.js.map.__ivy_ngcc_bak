{"version":3,"file":"c8y-ngx-components-device-grid.js","sources":["../../device-grid/columns/base.filtering-form-renderer.component.ts","../../device-grid/columns/base.device-grid-column.ts","../../device-grid/columns/custom.device-grid-column.ts","../../device-grid/columns/registration-date.cell-renderer.component.ts","../../device-grid/columns/registration-date.device-grid-column.ts","../../device-grid/columns/status.cell-renderer.component.ts","../../device-grid/columns/status.device-grid-column.ts","../../device-grid/columns/column-util.service.ts","../../device-grid/columns/group.cell-renderer.component.ts","../../device-grid/columns/group.filtering-form-renderer.component.ts","../../device-grid/columns/group.device-grid-column.ts","../../device-grid/columns/name.cell-renderer.component.ts","../../device-grid/columns/system-id.device-grid-column.ts","../../device-grid/columns/model.cell-renderer.component.ts","../../device-grid/columns/type.device-grid-column.ts","../../device-grid/columns/imei.device-grid-column.ts","../../device-grid/columns/name.device-grid-column.ts","../../device-grid/columns/model.device-grid-column.ts","../../device-grid/columns/alarms.cell-renderer.component.ts","../../device-grid/columns/alarms.device-grid-column.ts","../../device-grid/columns/serial-number.cell-renderer.component.ts","../../device-grid/columns/serial-number.device-grid-column.ts","../../device-grid/decorator.service.ts","../../device-grid/map-legacy-grid-configuration.decorator.ts","../../device-grid/device-grid.service.ts","../../device-grid/device-grid-config-mapper.service.ts","../../device-grid/device-grid.component.ts","../../device-grid/device-grid.module.ts","../../device-grid/c8y-ngx-components-device-grid.ts"],"sourcesContent":["import { Component, OnInit, HostListener } from '@angular/core';\nimport { cloneDeep } from 'lodash-es';\nimport { C8yJSONSchema, FilteringFormRendererContext} from '@c8y/ngx-components';\nimport { DeviceGridColumn } from '../device-grid.model';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\n\n@Component({\n  templateUrl: './base.filtering-form-renderer.component.html'\n})\nexport class BaseFilteringFormRendererComponent implements OnInit {\n  schema;\n  form: FormGroup;\n  model;\n  options;\n\n  fields: FormlyFieldConfig[];\n\n  constructor(\n    public context: FilteringFormRendererContext,\n    public jsonschema: C8yJSONSchema,\n  ) {}\n\n  @HostListener('keydown.enter', ['$event']) onEnterKeyDown(event: KeyboardEvent) {\n    event.stopPropagation();\n    this.applyFilter();\n  }\n  @HostListener('keydown.escape', ['$event']) onEscapeKeyDown(event: KeyboardEvent) {\n    event.stopPropagation();\n    this.resetFilter();\n  }\n\n  ngOnInit() {\n    const column: DeviceGridColumn = this.context.property;\n\n    if (column.filteringConfig.fields) {\n      this.fields = cloneDeep(column.filteringConfig.fields);\n    } else if (!column.filteringConfig.fields && column.filteringConfig.schema) {\n      this.schema = cloneDeep(column.filteringConfig.schema);\n      this.fields = [this.jsonschema.toFieldConfig(this.schema)];\n    } else {\n      throw new Error(`Neither fields nor schema configuration provided for Formly.`);\n    }\n\n    this.form = column.filteringConfig.formGroup || new FormGroup({});\n    this.model = column.externalFilterQuery || column.filteringConfig.model ||  {};\n    this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };\n  }\n\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: this.form.value\n    });\n  }\n\n  resetFilter() {\n    this.context.resetFilter();\n  }\n}\n","import { Type } from '@angular/core';\nimport {\n  ColumnDataType,\n  SortOrder,\n  FilterPredicateFunction,\n  ColumnConfig\n} from '@c8y/ngx-components';\nimport {\n  DeviceGridColumn,\n  DeviceGridColumnSortingConfig, DeviceGridFormlyColumnFilteringConfig\n} from '../device-grid.model';\nimport { BaseFilteringFormRendererComponent } from './base.filtering-form-renderer.component';\n\nexport class BaseDeviceGridColumn implements DeviceGridColumn {\n  name: string;\n  path?: string;\n  header?: string;\n  dataType?: ColumnDataType;\n\n  visible?: boolean;\n  positionFixed?: boolean;\n  resizable?: boolean;\n  gridTrackSize?: string;\n\n  headerCSSClassName?: string | string[];\n  headerCellRendererComponent?: Type<any>;\n\n  cellCSSClassName?: string | string[];\n  cellRendererComponent?: Type<any>;\n\n  sortable?: boolean;\n  sortingConfig?: DeviceGridColumnSortingConfig;\n  sortOrder?: SortOrder;\n\n  filterable?: boolean;\n  filteringConfig?: DeviceGridFormlyColumnFilteringConfig;\n  filteringFormRendererComponent?: Type<any>;\n  filterPredicate?: string | FilterPredicateFunction;\n  externalFilterQuery?: string | object;\n\n  constructor(config: ColumnConfig = {}) {\n    this.filteringFormRendererComponent = BaseFilteringFormRendererComponent;\n    Object.assign(this, config);\n  }\n\n  /**\n   * Gets a label template to be used in the schema-form's `type: 'template'` form item.\n   * @param label The label to be displayed.\n   * @param options Additional options:\n   *   - `showWildcardTooltip`: `boolean` - appends a tooltip explaining wildcard usage\n   * @returns The string with the template.\n   */\n  getLabelTemplate(label: string, options: { showWildcardTooltip?: boolean } = {}): string {\n    const wildcardTooltip = `\n      <i\n        class=\"text-info\"\n        c8y-icon=\"info-circle\"\n        title=\"{{ 'Use * as a wildcard character' | translate }}\"\n      ></i>\n    `;\n    return `\n      <label>\n        <span>\n          {{ '${label}' | translate }}\n        </span>\n        ${options.showWildcardTooltip ? wildcardTooltip : ''}\n      </label>\n    `;\n  }\n\n}\n","import { ColumnConfig, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from './base.device-grid-column';\n\nexport class CustomDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n\n    this.name = this.name || 'custom';\n    this.header = this.header || gettext('Custom');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: [\n        {\n          key: 'exists',\n          type: 'switch',\n          defaultValue: false,\n          templateOptions: {\n            label: gettext('Only rows where value is defined')\n          }\n        },\n        ...getBasicInputArrayFormFieldConfig({\n          key: 'equals',\n          label: gettext('Only rows where value equals to'),\n          addText: gettext('Add next`value`'),\n          tooltip: gettext('Use * as a wildcard character'),\n          placeholder: '10300',\n          optional: true\n        })\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.exists) {\n          filter.__has = self.path;\n        }\n        if (model.equals) {\n          filter[self.path] = { __in: model.equals };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    {{ context.value | c8yDate }}\n  `\n})\nexport class RegistrationDateCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { RegistrationDateCellRendererComponent } from './registration-date.cell-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\n\nexport class RegistrationDateDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n\n    this.path = 'creationTime';\n    this.name = 'registrationDate';\n    this.header = gettext('Registration date');\n    this.cellRendererComponent = RegistrationDateCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: [\n        {\n          type: 'object',\n          key: 'registrationDate',\n          fieldGroup: [\n            {\n              type: 'date-time',\n              key: 'after',\n              templateOptions: {\n                label: gettext('Show items registered after')\n              },\n              expressionProperties: {\n                'templateOptions.maxDate': (model: any) => model?.before\n              }\n            },\n            {\n              type: 'date-time',\n              key: 'before',\n              templateOptions: {\n                label: gettext('And before`date`')\n              },\n              expressionProperties: {\n                'templateOptions.minDate': (model: any) => model?.after\n              }\n            }\n          ]\n        }\n      ],\n      formGroup: new FormGroup({}),\n      getFilter(model) {\n        const filter: any = {};\n        const dates = model && model.registrationDate;\n        if (dates && (dates.after || dates.before)) {\n          filter.__and = [];\n          if (dates.after) {\n            const after = self.formatDate(dates.after);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __gt: after },\n                [`${self.path}.date`]: { __gt: after }\n              }\n            });\n          }\n          if (dates.before) {\n            const before = self.formatDate(dates.before);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __lt: before },\n                [`${self.path}.date`]: { __lt: before }\n              }\n            });\n          }\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: `${this.path}.date` }, { path: this.path }]\n    };\n  }\n\n  protected formatDate(dateToFormat: string): string {\n    return new Date(dateToFormat).toISOString();\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    <device-status [mo]=\"context.item\"></device-status>\n  `\n})\nexport class StatusCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { StatusCellRendererComponent } from './status.cell-renderer.component';\nimport { ColumnDataType, PushStatus, SendStatus, gettext } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\n\nexport class StatusDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';\n    const responseIntervalLessThanOrEqualTo0 = { [responseIntervalPath]: { __le: 0 } };\n    const responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };\n\n    const availabilityStatusPath = 'c8y_Availability.status';\n    const availabilityStatusAvailable = { [availabilityStatusPath]: SendStatus.AVAILABLE };\n    const availabilityStatusUnavailable = { [availabilityStatusPath]: SendStatus.UNAVAILABLE };\n    const availabilityStatusMaintenance = { [availabilityStatusPath]: SendStatus.MAINTENANCE };\n    const availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };\n\n    const connectionStatusPath = 'c8y_Connection.status';\n    const connectionStatusConnected = { [connectionStatusPath]: PushStatus.CONNECTED };\n    const connectionStatusDisconnected = { [connectionStatusPath]: PushStatus.DISCONNECTED };\n    const connectionStatusMaintenance = { [connectionStatusPath]: PushStatus.MAINTENANCE };\n\n    const deviceUnderMaintenance = {\n      __or: [\n        responseIntervalLessThanOrEqualTo0,\n        availabilityStatusMaintenance,\n        connectionStatusMaintenance\n      ]\n    };\n    const deviceNotUnderMaintenance = {\n      // using __and of __nots because backend does not support __not with __ors\n      __and: [\n        { __not: responseIntervalLessThanOrEqualTo0 },\n        { __not: availabilityStatusMaintenance },\n        { __not: connectionStatusMaintenance }\n      ]\n    };\n\n    this.name = 'status';\n    this.header = gettext('Status');\n    this.dataType = ColumnDataType.Icon;\n    this.cellRendererComponent = StatusCellRendererComponent;\n    this.resizable = false;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          sendStatus: {\n            title: gettext('Show devices with send status'),\n            type: 'object',\n            properties: {\n              sendOnline: {\n                type: 'switch',\n                title: gettext('Online')\n              },\n              sendOffline: {\n                type: 'switch',\n                title: gettext('Offline')\n              },\n              sendUnknown: {\n                type: 'switch',\n                title: gettext('Unknown')\n              },\n              sendNotMonitored: {\n                type: 'switch',\n                title: gettext('Not monitored')\n              },\n            }\n          },\n          pushStatus: {\n            title: gettext('Show devices with push status'),\n            type: 'object',\n            properties: {\n              pushOnline: {\n                type: 'switch',\n                title: gettext('Online')\n              },\n              pushOffline: {\n                type: 'switch',\n                title: gettext('Offline')\n              },\n              pushNotMonitored: {\n                type: 'switch',\n                title: gettext('Not monitored')\n              },\n            }\n          },\n          maintenanceStatus: {\n            title: gettext('Show devices with maintenance status'),\n            type: 'object',\n            properties: {\n              maintenance: {\n                type: 'switch',\n                title: gettext('Device is under maintenance')\n              }\n            }\n          }\n        }\n      },\n      formGroup: new FormGroup({}),\n      getFilter(model) {\n        const filter: any = {};\n        const ors = [];\n\n        if (model?.sendStatus?.sendOnline) {\n          ors.push({\n            __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]\n          });\n        }\n\n        if (model?.sendStatus?.sendOffline) {\n          ors.push({\n            __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]\n          });\n        }\n\n        if (model?.sendStatus?.sendUnknown) {\n          ors.push({\n            __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]\n          });\n        }\n\n        if (model?.sendStatus?.sendNotMonitored || model?.pushStatus?.pushNotMonitored) {\n          ors.push(responseIntervalNotDefined);\n        }\n\n        if (model?.pushStatus?.pushOnline) {\n          ors.push({\n            __and: [deviceNotUnderMaintenance, connectionStatusConnected]\n          });\n        }\n\n        if (model?.pushStatus?.pushOffline) {\n          ors.push({\n            __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]\n          });\n        }\n\n        if (model?.maintenanceStatus?.maintenance) {\n          ors.push(deviceUnderMaintenance);\n        }\n\n        if (ors.length) {\n          filter.__or = ors;\n        }\n\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: availabilityStatusPath }]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { map, remove, sortBy } from 'lodash-es';\n\n/**\n * Service contains logic extracted from the device-grid service to avoid circular dependency MTM-40239.\n */\n\n@Injectable({ providedIn: 'root' })\nexport class ColumnUtilService {\n  constructor(protected translateService: TranslateService) {}\n\n  getAlarmsHref(device: IManagedObject): string {\n    return `${this.getHref(device)}/alarms`;\n  }\n\n  getHref(groupOrDevice: IManagedObject, prefix = '#/'): string {\n    if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {\n      return `${prefix}group/${groupOrDevice.id}`;\n    }\n    return `${prefix}device/${groupOrDevice.id}`;\n  }\n\n  getParentsNames(device: IManagedObject, featuredParentId?: string | number): string {\n    const assetParentsReferences = device.assetParents.references;\n    const assetParents = map(assetParentsReferences, 'managedObject');\n    const sortedByName = sortBy(assetParents, ['name']);\n    const featuredItems = remove(sortedByName, { id: featuredParentId });\n    const items = featuredItems.concat(sortedByName);\n    const names = map(items, 'name');\n    return names.join(', ');\n  }\n\n  getModel(device: IManagedObject): string {\n    const hardware = this.getHardware(device);\n    return hardware && hardware.model;\n  }\n\n  getProperName(device: IManagedObject): string {\n    const { id, name } = device;\n    return name ? name : this.translateService.instant('Device {{id}}', { id });\n  }\n\n  getSerialNumber(device: IManagedObject): string {\n    const hardware = this.getHardware(device);\n    const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';\n    return hardware && hardware[serialPropertyName];\n  }\n\n  private getHardware(device: IManagedObject): any {\n    const hardwarePropertyName = this.isVendme(device)\n      ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'\n      : 'c8y_Hardware';\n    return device && device[hardwarePropertyName];\n  }\n\n  private isVendme(device: IManagedObject) {\n    return device.type === 'com_nsn_startups_vendme_VendingMachine';\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { ColumnUtilService } from './column-util.service';\n\n@Component({\n  templateUrl: './group.cell-renderer.component.html'\n})\nexport class GroupCellRendererComponent {\n  constructor(public context: CellRendererContext, public columnUtilService: ColumnUtilService) {}\n}\n","import { Component, ElementRef, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { cloneDeep } from 'lodash-es';\nimport { FilteringFormRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridColumn } from '../device-grid.model';\n\n@Component({\n  templateUrl: './group.filtering-form-renderer.component.html'\n})\nexport class GroupFilteringFormRendererComponent implements OnInit {\n  @ViewChild('assetSelector', { static: false, read: ElementRef }) assetSelector: ElementRef;\n  model: any;\n  preselected: string[] = [];\n\n  constructor(public context: FilteringFormRendererContext) {}\n\n  @HostListener('keydown.enter', ['$event']) onEnterKeyDown(event: KeyboardEvent) {\n    event.stopPropagation();\n    this.applyFilter();\n  }\n  @HostListener('keydown.escape', ['$event']) onEscapeKeyDown(event: KeyboardEvent) {\n    event.stopPropagation();\n    this.resetFilter();\n  }\n\n  ngOnInit() {\n    const column: DeviceGridColumn = this.context.property;\n    this.model = cloneDeep(column.externalFilterQuery || {});\n    this.preselected = this.model.selectedNodes || [];\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      try {\n        this.assetSelector.nativeElement.querySelector('input').focus();\n      } catch (ex) {\n        // intended empty\n      }\n    }, 250);\n  }\n\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: this.model\n    });\n  }\n\n  resetFilter() {\n    this.context.resetFilter();\n  }\n\n  selectionChanged(nodes) {\n    this.model.selectedNodes = nodes.items;\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { GroupCellRendererComponent } from './group.cell-renderer.component';\nimport { GroupFilteringFormRendererComponent } from './group.filtering-form-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\nimport { IManagedObject } from '@c8y/client';\n\nexport class GroupDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'group';\n    this.header = gettext('Group');\n    this.cellRendererComponent = GroupCellRendererComponent;\n    this.filteringFormRendererComponent = GroupFilteringFormRendererComponent;\n    this.filterable = true;\n    this.filteringConfig = {\n      getFilter(model) {\n        const filter: any = {};\n        if (model.selectedNodes) {\n          filter.__or = model.selectedNodes.map((mo: IManagedObject) => {\n            if (mo.c8y_DeviceQueryString) {\n              return { __useFilterQueryString: mo.c8y_DeviceQueryString };\n            }\n            return { __bygroupid: mo.id };\n          });\n        }\n        return filter;\n      }\n    };\n    this.sortable = false;\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { ColumnUtilService } from './column-util.service';\n\n@Component({\n  template: `\n    <a\n      [href]=\"columnUtilService.getHref(context.item)\"\n      title=\"{{ columnUtilService.getProperName(context.item) }}\"\n      class=\"interact\"\n    >\n      {{ columnUtilService.getProperName(context.item) }}\n    </a>\n  `\n})\nexport class NameCellRendererComponent {\n  constructor(public context: CellRendererContext, public columnUtilService: ColumnUtilService) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext, ColumnConfig, getBasicInputArrayFormFieldConfig } from '@c8y/ngx-components';\n\nexport class SystemIdDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n    this.path = 'id';\n    this.name = 'systemId';\n    this.header = gettext('System ID');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'ids',\n        label: gettext('Show items with system ID'),\n        addText: gettext('Add next`id`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: '10300'\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.ids.length) {\n          filter[self.path] = { __in: model.ids };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { ColumnUtilService } from './column-util.service';\n\n@Component({\n  template: `\n    {{ columnUtilService.getModel(context.item) }}\n  `\n})\nexport class ModelCellRendererComponent {\n  constructor(public context: CellRendererContext, public columnUtilService: ColumnUtilService) {}\n}\n","import { gettext, ColumnConfig, getBasicInputArrayFormFieldConfig } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from './base.device-grid-column';\n\nexport class TypeDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    this.name = 'type';\n    this.path = 'type';\n    this.header = gettext('Type');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'types',\n        label: gettext('Show devices with type'),\n        addText: gettext('Add next`type`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: gettext('MyType`DEVICE_TYPE`')\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.types.length) {\n          filter.type = { __in: model.types };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = { pathSortingConfigs: [{ path: 'type' }] };\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext, ColumnConfig, getBasicInputArrayFormFieldConfig } from '@c8y/ngx-components';\n\nexport class ImeiDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n\n    this.path = 'c8y_Mobile.imei';\n    this.name = 'imei';\n    this.header = gettext('IMEI');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'imeis',\n        label: gettext('Show items with IMEI'),\n        addText: gettext('Add next`IMEI`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: '46543432321'\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.imeis.length) {\n          filter[self.path] = { __in: model.imeis };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { NameCellRendererComponent } from './name.cell-renderer.component';\nimport {\n  ColumnDataRecordClassName,\n  gettext,\n  ColumnConfig,\n  getBasicInputArrayFormFieldConfig\n} from '@c8y/ngx-components';\n\nexport class NameDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'name';\n    this.path = 'name';\n    this.header = gettext('Name');\n    this.cellCSSClassName = ColumnDataRecordClassName.Header;\n    this.cellRendererComponent = NameCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'names',\n        label: gettext('Show items with name'),\n        addText: gettext('Add next`name`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: gettext('My device`DEVICE_NAME`')\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.names.length) {\n          filter.name = { __in: model.names };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { ModelCellRendererComponent } from './model.cell-renderer.component';\nimport { gettext, ColumnConfig, getBasicInputArrayFormFieldConfig } from '@c8y/ngx-components';\n\nexport class ModelDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const hardwareModelPath = 'c8y_Hardware.model';\n    const vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';\n\n    this.name = 'model';\n    this.header = gettext('Model');\n    this.cellRendererComponent = ModelCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'models',\n        label: gettext('Show items with model'),\n        addText: gettext('Add next`model`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: 'NTC-220'\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.models.length) {\n          filter.__or = {\n            [hardwareModelPath]: { __in: model.models },\n            [vendingModelPath]: { __in: model.models }\n          };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { ColumnUtilService } from './column-util.service';\n\n@Component({\n  templateUrl: './alarms.cell-renderer.component.html'\n})\nexport class AlarmsCellRendererComponent {\n  constructor(public context: CellRendererContext, public columnUtilService: ColumnUtilService) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\nimport { map } from 'lodash-es';\n\nexport class AlarmsDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'alarms';\n    this.header = gettext('Alarms');\n    this.cellRendererComponent = AlarmsCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          alarm: {\n            type: 'object',\n            title: gettext('Show items'),\n            properties: {\n              critical: {\n                type: 'switch',\n                title: gettext('With active critical alarms')\n              },\n              major: {\n                type: 'switch',\n                title: gettext('With active major alarms')\n              },\n              minor: {\n                type: 'switch',\n                title: gettext('With active minor alarms')\n              },\n              warning: {\n                type: 'switch',\n                title: gettext('With active warnings')\n              },\n              none: {\n                type: 'switch',\n                title: gettext('With no active alarms or warnings')\n              }\n            }\n          },\n\n        }\n      },\n      getFilter(model) {\n        const filter: any = {};\n        const ors = [];\n        if (model.alarm.critical) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });\n        }\n        if (model.alarm.major) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });\n        }\n        if (model.alarm.minor) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });\n        }\n        if (model.alarm.warning) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });\n        }\n        if (model.alarm.none) {\n          ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });\n          ors.push({\n            __and: map(['critical', 'major', 'minor', 'warning'], sev => {\n              const zero = {};\n              const has = { __not: { __has: undefined } };\n              const key = `c8y_ActiveAlarmsStatus.${sev}`;\n              zero[key] = 0;\n              has.__not.__has = key;\n              return { __or: [zero, has] };\n            })\n          });\n        }\n        if (ors.length) {\n          filter.__or = ors;\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [\n        { path: 'c8y_ActiveAlarmsStatus.critical' },\n        { path: 'c8y_ActiveAlarmsStatus.major' },\n        { path: 'c8y_ActiveAlarmsStatus.minor' },\n        { path: 'c8y_ActiveAlarmsStatus.warning' }\n      ]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { ColumnUtilService } from './column-util.service';\n\n@Component({\n  template: `\n    {{ columnUtilService.getSerialNumber(context.item) }}\n  `\n})\nexport class SerialNumberCellRendererComponent {\n  constructor(public context: CellRendererContext, public columnUtilService: ColumnUtilService) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';\nimport { gettext, ColumnConfig, getBasicInputArrayFormFieldConfig } from '@c8y/ngx-components';\n\nexport class SerialNumberDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';\n    const vendingSerialNumberPath =\n      'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';\n\n    this.name = 'serialNumber';\n    this.header = gettext('Serial number');\n    this.cellRendererComponent = SerialNumberCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'serialNumbers',\n        label: gettext('Show items with serial number'),\n        addText: gettext('Add next`serial number`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: '54321-123'\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.serialNumbers.length) {\n          filter.__or = {\n            [hardwareSerialNumberPath]: { __in: model.serialNumbers },\n            [vendingSerialNumberPath]: { __in: model.serialNumbers }\n          };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DeviceGridConfigMapperService } from './device-grid-config-mapper.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DecoratorService {\n  static getMapperService(): DeviceGridConfigMapperService {\n    if (!DecoratorService.mapperService) {\n      throw new Error('DecoratorService not initialized');\n    }\n    return DecoratorService.mapperService;\n  }\n\n  private static mapperService: DeviceGridConfigMapperService | undefined = undefined;\n\n  constructor(service: DeviceGridConfigMapperService) {\n    DecoratorService.mapperService = service;\n  }\n}\n","import { DecoratorService } from './decorator.service';\n\nexport function mapLegacyGridConfiguration() {\n  return (target: object, key: string | symbol, descriptor: PropertyDescriptor) => {\n    descriptor.value = (...args): any => {\n      const mapperService = DecoratorService.getMapperService();\n      return mapperService.getMappedGridConfig(args[0]);\n    };\n    return descriptor;\n  };\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { IManagedObject, InventoryService, IUser, QueriesUtil, UserService } from '@c8y/client';\nimport {\n  ActionControl,\n  AlertService,\n  BulkActionControl,\n  Column,\n  CustomColumnConfig,\n  GainsightService,\n  gettext,\n  GridConfig,\n  HeaderActionControl,\n  ModalService,\n  Pagination,\n  Row,\n  Status,\n  UserPreferencesService\n} from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { assign, forEach, get, identity, transform } from 'lodash-es';\nimport { from, isObservable, Observable, of } from 'rxjs';\nimport { map, share, take, withLatestFrom } from 'rxjs/operators';\nimport { CustomDeviceGridColumn } from './columns';\nimport { AlarmsDeviceGridColumn } from './columns/alarms.device-grid-column';\nimport { ColumnUtilService } from './columns/column-util.service';\nimport { GroupDeviceGridColumn } from './columns/group.device-grid-column';\nimport { ImeiDeviceGridColumn } from './columns/imei.device-grid-column';\nimport { ModelDeviceGridColumn } from './columns/model.device-grid-column';\nimport { NameDeviceGridColumn } from './columns/name.device-grid-column';\nimport { RegistrationDateDeviceGridColumn } from './columns/registration-date.device-grid-column';\nimport { SerialNumberDeviceGridColumn } from './columns/serial-number.device-grid-column';\nimport { StatusDeviceGridColumn } from './columns/status.device-grid-column';\nimport { SystemIdDeviceGridColumn } from './columns/system-id.device-grid-column';\nimport { DeviceGridActionType, DeviceGridColumn } from './device-grid.model';\nimport { mapLegacyGridConfiguration } from './map-legacy-grid-configuration.decorator';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceGridService {\n  protected queriesUtil: QueriesUtil;\n  protected GRID_CONFIG_DEFAULT_STORAGE_KEY = 'device-grid-config';\n  protected DEFAULT_PAGE_SIZE = 20;\n\n  constructor(\n    protected inventoryService: InventoryService,\n    protected userService: UserService,\n    protected translateService: TranslateService,\n    protected alertService: AlertService,\n    protected modal: ModalService,\n    protected columnUtilService: ColumnUtilService,\n    protected userPreferencesService: UserPreferencesService,\n    @Optional() protected gainsightService?: GainsightService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  getDefaultColumns(): DeviceGridColumn[] {\n    const defaultColumns = [\n      new StatusDeviceGridColumn(),\n      new NameDeviceGridColumn(),\n      new ModelDeviceGridColumn(),\n      new SerialNumberDeviceGridColumn(),\n      new GroupDeviceGridColumn(),\n      new RegistrationDateDeviceGridColumn(),\n      new SystemIdDeviceGridColumn(),\n      new ImeiDeviceGridColumn(),\n      new AlarmsDeviceGridColumn()\n    ];\n\n    return defaultColumns;\n  }\n\n  getChildDeviceGridColumns(): DeviceGridColumn[] {\n    const childDeviceGridColumn = [\n      new StatusDeviceGridColumn(),\n      new NameDeviceGridColumn(),\n      new ModelDeviceGridColumn(),\n      new SerialNumberDeviceGridColumn(),\n      new RegistrationDateDeviceGridColumn(),\n      new SystemIdDeviceGridColumn(),\n      new ImeiDeviceGridColumn(),\n      new AlarmsDeviceGridColumn()\n    ];\n\n    return childDeviceGridColumn;\n  }\n\n  getDefaultPagination(): Pagination {\n    return {\n      pageSize: 10,\n      currentPage: 1\n    };\n  }\n\n  getInfiniteScrollPagination(): Pagination {\n    return {\n      pageSize: 50,\n      currentPage: 1\n    };\n  }\n\n  getDefaultActionControls(): ActionControl[] {\n    return [\n      {\n        type: DeviceGridActionType.Delete,\n        callback: (item: Row) => this.delete(item as IManagedObject)\n      }\n    ];\n  }\n\n  getDefaultBulkActionControls(): BulkActionControl[] {\n    return [];\n  }\n\n  getDefaultHeaderActionControls(): HeaderActionControl[] {\n    return [];\n  }\n\n  getProperName(device: IManagedObject): string {\n    return this.columnUtilService.getProperName(device);\n  }\n\n  getModel(device: IManagedObject): string {\n    return this.columnUtilService.getModel(device);\n  }\n\n  getSerialNumber(device: IManagedObject): string {\n    return this.columnUtilService.getSerialNumber(device);\n  }\n\n  getParentsNames(device: IManagedObject, featuredParentId?: string | number): string {\n    return this.columnUtilService.getParentsNames(device, featuredParentId);\n  }\n\n  getHref(groupOrDevice: IManagedObject, prefix = '#/'): string {\n    return this.columnUtilService.getHref(groupOrDevice, prefix);\n  }\n\n  getAlarmsHref(device: IManagedObject): string {\n    return this.columnUtilService.getAlarmsHref(device);\n  }\n\n  /**\n   * @deprecated Use getUserConfiguredColumns$(Column[] | Observable<Column[]>, string) instead.\n   */\n  getUserConfiguredColumns(columns: Column[], storageKey?: string) {\n    return this.applyConfigToColumns(this.getConfig2(storageKey), columns, storageKey);\n  }\n\n  getUserConfiguredColumns$(columns: Column[] | Observable<Column[]>, storageKey?: string) {\n    return this.getConfig$(storageKey).pipe(\n      withLatestFrom(\n        isObservable(columns) ? columns : (of(columns) as unknown as Observable<Column[]>)\n      ),\n      map(([config, cols]) => this.applyConfigToColumns(config, cols, storageKey)),\n      take(1),\n      share()\n    );\n  }\n\n  async delete(device: IManagedObject): Promise<void> {\n    try {\n      const deviceWithChildren = await (\n        await this.inventoryService.detail(device, { withChildren: true })\n      ).data;\n      const hasChildDevices = deviceWithChildren.childDevices?.references?.length > 0;\n      const hasChildAdditions = deviceWithChildren.childAdditions?.references?.length > 0;\n      const hasChildAssets = deviceWithChildren.childAssets?.references?.length > 0;\n      const showDeleteChildren = () => hasChildAdditions || hasChildDevices || hasChildAssets;\n      const modalResult = await this.modal.confirm(\n        gettext('Delete device'),\n        this.translateService.instant(\n          gettext(`You are about to delete device \"{{ name }}\". Do you want to proceed?`),\n          device\n        ),\n        Status.DANGER,\n        { ok: gettext('Delete'), cancel: gettext('Cancel') },\n        {\n          cascade: {\n            text: gettext('Also delete child hierarchy of this device.'),\n            checked: showDeleteChildren(),\n            showIf: showDeleteChildren,\n            disabledByKey: 'withDeviceUser'\n          },\n          withDeviceUser: {\n            text: this.translateService.instant(\n              gettext('Also delete associated device owner \"{{ owner }}\".'),\n              device\n            ),\n            checked: false,\n            showIf: () => {\n              const isRootDevice = device.c8y_IsDevice;\n              const hasDeviceUserAsOwner =\n                device.owner &&\n                this.userService.isDeviceUser({ id: device.owner } as unknown as IUser);\n\n              return Boolean(isRootDevice && hasDeviceUserAsOwner);\n            },\n            disabledByKey: 'cascade'\n          }\n        }\n      );\n      await this.inventoryService.delete(\n        device,\n        (modalResult as { confirmOptions: { [key: string]: any } }).confirmOptions\n      );\n      this.alertService.success(gettext('Device deleted.'));\n      if (this.gainsightService) {\n        this.gainsightService.triggerEvent('deviceGrid:EntryDeleted');\n      }\n      return Promise.resolve();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (this.gainsightService && !ex) {\n        this.gainsightService.triggerEvent('deviceGrid:EntryDeletionCancelled');\n      }\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n      return Promise.reject();\n    }\n  }\n\n  async getData(\n    columns: DeviceGridColumn[],\n    pagination: Pagination,\n    query: any = {},\n    withChildren: boolean = false\n  ) {\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination, query),\n      withGroups: true,\n      withChildren\n    };\n    return this.inventoryService.list(filters);\n  }\n\n  async getChildDeviceData(\n    columns: DeviceGridColumn[],\n    pagination: Pagination,\n    query: any = {},\n    withChildren: boolean = false,\n    id: string\n  ) {\n    const childDeviceFilters = true;\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination, query, childDeviceFilters),\n      withGroups: true,\n      withChildren\n    };\n    return this.inventoryService.childDevicesList(id, filters);\n  }\n\n  async getCount(columns: DeviceGridColumn[], pagination: Pagination, query: any = {}) {\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination, query),\n      pageSize: 1,\n      currentPage: 1\n    };\n    return (await this.inventoryService.list(filters)).paging.totalPages;\n  }\n\n  async getCountChildDevices(\n    columns: DeviceGridColumn[],\n    pagination: Pagination,\n    query: any = {},\n    id: string\n  ) {\n    const childDeviceFilters = true;\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination, query, childDeviceFilters),\n      pageSize: 1,\n      currentPage: 1\n    };\n    return (await this.inventoryService.childDevicesList(id, filters)).paging.totalPages;\n  }\n\n  async getTotalChildDevices(query: any = {}, id: string): Promise<number> {\n    const filters = {\n      q: this.queriesUtil.buildQuery(query),\n      pageSize: 1,\n      withTotalPages: true\n    };\n    return (await this.inventoryService.childDevicesList(id, filters)).paging.totalPages;\n  }\n\n  async getTotal(query: any = {}): Promise<number> {\n    const filters = {\n      q: this.queriesUtil.buildQuery(query),\n      pageSize: 1,\n      withTotalPages: true\n    };\n    return (await this.inventoryService.list(filters)).paging.totalPages;\n  }\n\n  getDeviceQueryString(columns: DeviceGridColumn[], query: any): string {\n    let fullQuery = this.getQueryObj(columns);\n    fullQuery = this.queriesUtil.addAndFilter(fullQuery, query);\n    return this.queriesUtil.buildQuery(fullQuery);\n  }\n\n  getQueryObj(columns: DeviceGridColumn[], defaultFilter = {}): any {\n    return transform(columns, (query, column) => this.extendQueryByColumn(query, column), {\n      __filter: {},\n      __orderby: [],\n      ...defaultFilter\n    });\n  }\n\n  /**\n   * @deprecated Use getConfig$(key: string): Observable<GridConfig> instead.\n   */\n  getConfig(key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY): GridConfig {\n    return this.getConfig2(key);\n  }\n\n  /**\n   * @deprecated Use saveConfig$(config: GridConfig, key: string): Promise<GridConfig> instead.\n   */\n  saveConfig(config: GridConfig, key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {\n    localStorage.setItem(key, JSON.stringify(config));\n  }\n\n  clearConfig(key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {\n    localStorage.removeItem(key);\n  }\n\n  @mapLegacyGridConfiguration()\n  getConfig$(key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY): Observable<GridConfig> {\n    return this.userPreferencesService.get(key).pipe(\n      map(\n        config =>\n          config || {\n            columns: [],\n            pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 }\n          }\n      )\n    );\n  }\n\n  saveConfig$(\n    config: GridConfig,\n    key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY\n  ): Observable<GridConfig> {\n    return from(this.userPreferencesService.set(key, config));\n  }\n\n  protected applyConfigToColumns(\n    config: GridConfig,\n    columns: Column[],\n    storageKey?: string\n  ): Column[] {\n    if (config.columns.length > 0) {\n      const reOrderedColumns = [];\n      let noConfigColumns = [];\n      try {\n        const customColumns = config.columns\n          .filter(col => (col as CustomColumnConfig).custom)\n          .map((col: CustomColumnConfig) => new CustomDeviceGridColumn(col));\n\n        const allColumns = [...columns, ...customColumns];\n\n        noConfigColumns = allColumns.filter(\n          col => !config.columns.some(configCol => col.name === configCol.name)\n        );\n        config.columns.forEach(({ visible, name, sortOrder, filter }) => {\n          const columnToReorder = allColumns.find(col => col.name === name);\n          if (columnToReorder) {\n            columnToReorder.visible = visible;\n            columnToReorder.sortOrder = sortOrder;\n            columnToReorder.externalFilterQuery = filter?.externalFilterQuery;\n            reOrderedColumns.push(columnToReorder);\n          }\n        });\n      } catch (ex) {\n        this.clearConfig(storageKey);\n      }\n      return [...reOrderedColumns, ...noConfigColumns];\n    }\n    return columns;\n  }\n\n  // TODO: REMOVE ME\n  // Added because usage of getConfig breaks JSdoc deprecations, otherwise compodoc build fails\n  private getConfig2(key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY): GridConfig {\n    const config = JSON.parse(localStorage.getItem(key));\n    if (config === null) {\n      return { columns: [], pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 } };\n    }\n    return config as GridConfig;\n  }\n\n  private getHardware(device: IManagedObject): any {\n    const hardwarePropertyName = this.isVendme(device)\n      ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'\n      : 'c8y_Hardware';\n    return device && device[hardwarePropertyName];\n  }\n\n  private isVendme(device: IManagedObject) {\n    return device.type === 'com_nsn_startups_vendme_VendingMachine';\n  }\n\n  private getDevicesFilters(\n    columns: DeviceGridColumn[],\n    pagination: Pagination,\n    query: any,\n    childDeviceFilters?: boolean\n  ) {\n    return {\n      ...(childDeviceFilters\n        ? { query: this.getDeviceQueryString(columns, query) }\n        : { q: this.getDeviceQueryString(columns, query) }),\n      pageSize: pagination.pageSize,\n      currentPage: pagination.currentPage,\n      withChildren: false,\n      withTotalPages: true\n    };\n  }\n\n  private extendQueryByColumn(query: any, column: DeviceGridColumn): void {\n    if (column.filterable && column.externalFilterQuery) {\n      const getFilter = column.filteringConfig.getFilter || identity;\n      const queryObj = getFilter(column.externalFilterQuery);\n\n      if (queryObj.__or) {\n        query.__filter.__and = query.__filter.__and || [];\n        query.__filter.__and.push(queryObj);\n      } else if (queryObj.__and && get(query, '__filter.__and')) {\n        queryObj.__and.map(obj => query.__filter.__and.push(obj));\n      } else {\n        assign(query.__filter, queryObj);\n      }\n    }\n\n    if (column.sortable && column.sortOrder) {\n      const cs = {};\n      forEach(column.sortingConfig.pathSortingConfigs, pathSortingConfig => {\n        cs[pathSortingConfig.path] =\n          (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);\n      });\n      query.__orderby.push(cs);\n    }\n    return query;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CustomColumnConfig, GridConfig, UserPreferencesService } from '@c8y/ngx-components';\nimport { isNil, omitBy, isEmpty } from 'lodash-es';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { concatMap, map } from 'rxjs/operators';\nimport { DeviceGridService } from './device-grid.service';\n\ninterface LegacyColumnConfig {\n  key: string;\n  headerName: string;\n  active: boolean;\n  custom: boolean;\n  fragmentPath: string;\n}\n\ninterface LegacyColumnFilterConfig {\n  [key: string]: {\n    filtering: object;\n    sorting: {\n      order: number;\n    };\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceGridConfigMapperService {\n  static deviceGridLegacyKeyToName = {\n    status: 'status',\n    name: 'name',\n    model: 'model',\n    serialNumber: 'serialNumber',\n    group: 'group',\n    registrationDate: 'registrationDate',\n    systemId: 'systemId',\n    imei: 'imei',\n    alarms: 'alarms'\n  };\n\n  constructor(\n    private userPreferencesService: UserPreferencesService,\n    private deviceGridService: DeviceGridService\n  ) {}\n\n  getMappedGridConfig(key?: string): Observable<GridConfig> {\n    key = key || (this.deviceGridService as any).GRID_CONFIG_DEFAULT_STORAGE_KEY;\n    const legacyAllDevicesGridKey = 'all-devices-columns-meta_';\n    const legacyAllDevicesGridFilterKey = 'all-devices-columns-config';\n    return combineLatest([\n      this.userPreferencesService.get(legacyAllDevicesGridKey),\n      this.userPreferencesService.get(legacyAllDevicesGridFilterKey)\n    ]).pipe(\n      map(([legacyConfig, legacyFilterConfig]) =>\n        this.mapLegacyToDeviceGridConfig(legacyConfig, legacyFilterConfig)\n      ),\n      concatMap(mappedLegacyConfig => {\n        if (mappedLegacyConfig) {\n          return Promise.all([\n            this.userPreferencesService.set(legacyAllDevicesGridKey, null),\n            this.userPreferencesService.set(legacyAllDevicesGridFilterKey, null)\n          ]).then(() => mappedLegacyConfig);\n        } else {\n          return of(null);\n        }\n      }),\n      concatMap(mappedLegacyConfig =>\n        mappedLegacyConfig\n          ? this.userPreferencesService.set(key, mappedLegacyConfig).then(() => mappedLegacyConfig)\n          : this.userPreferencesService.get(key)\n      ),\n      map(\n        config =>\n          config || {\n            columns: [],\n            pagination: {\n              pageSize: (this.deviceGridService as any).DEFAULT_PAGE_SIZE,\n              currentPage: 1\n            }\n          }\n      )\n    );\n  }\n\n  mapLegacyToDeviceGridConfig(\n    legacyConfig: LegacyColumnConfig[],\n    legacyFilterConfig: LegacyColumnFilterConfig\n  ): GridConfig {\n    if (Array.isArray(legacyConfig) || !isEmpty(legacyFilterConfig)) {\n      return {\n        columns: this.getConfigColumns(legacyConfig, legacyFilterConfig),\n        pagination: {\n          pageSize: (this.deviceGridService as any).DEFAULT_PAGE_SIZE,\n          currentPage: 1\n        }\n      };\n    }\n  }\n\n  getConfigColumns(\n    legacyConfig: LegacyColumnConfig[],\n    legacyFilterConfig: LegacyColumnFilterConfig\n  ) {\n    const legacyFilterConfigArray = legacyFilterConfig\n      ? Object.keys(legacyFilterConfig).map(key => ({\n          key,\n          filter: {\n            externalFilterQuery: legacyFilterConfig[key].filtering\n          },\n          sorting: legacyFilterConfig[key].sorting\n        }))\n      : [];\n\n    const config = this.mergeLegacyConfigs(\n      legacyConfig ||\n        this.deviceGridService.getDefaultColumns().map(column => ({ key: column.name })),\n      legacyFilterConfigArray\n    );\n\n    return config\n      .filter(column => column.key !== 'removalColumn')\n      .map(this.mapLegacyColumnConfig.bind(this));\n  }\n\n  mergeLegacyConfigs(columnConfig, filterConfig) {\n    return columnConfig.map(column => ({\n      ...filterConfig.find(item => item.key === column.key),\n      ...column\n    }));\n  }\n\n  mapLegacyColumnConfig(legacy): CustomColumnConfig {\n    const { active, key, custom, headerName, fragmentPath, filter, sorting } = legacy;\n    const sortOrder = sorting ? this.migrateSortOrder(sorting) : '';\n\n    return omitBy(\n      {\n        visible: active ?? true,\n        name: DeviceGridConfigMapperService.deviceGridLegacyKeyToName[key] || key,\n        sortOrder,\n        custom,\n        header: custom ? headerName : null,\n        path: fragmentPath,\n        filter\n      },\n      isNil\n    );\n  }\n\n  migrateSortOrder(sorting) {\n    switch (sorting.order) {\n      case 0:\n        return '';\n      case -1:\n        return 'desc';\n      case 1:\n        return 'asc';\n    }\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\nimport {\n  ActionControl,\n  BuiltInActionType,\n  BulkActionControl,\n  Column,\n  CustomColumnConfig,\n  DataGridComponent,\n  DataSourceModifier,\n  FilteringActionType,\n  FilteringModifier,\n  gettext,\n  GridConfig,\n  HeaderActionControl,\n  LoadMoreMode,\n  Pagination,\n  Row,\n  ServerSideDataResult\n} from '@c8y/ngx-components';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n  concatMap,\n  filter as filterRxJS,\n  first,\n  map,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport { DataCallback, DeviceGridColumn, FilterConfig } from './device-grid.model';\nimport { DeviceGridService } from './device-grid.service';\n\n@Component({\n  selector: 'c8y-device-grid',\n  templateUrl: './device-grid.component.html'\n})\nexport class DeviceGridComponent implements OnInit, OnDestroy {\n  /** Optional callback function that allows to modify server side data result before it's rendered. */\n  @Input() dataCallback: DataCallback;\n  /** Takes an event emitter. When an event is emitted, the grid will be reloaded. */\n  @Input() refresh: EventEmitter<any> = new EventEmitter();\n  /** The title for the data grid, it's displayed in the grid's header. */\n  @Input() title: string = gettext('Devices');\n  /** The label for load more button. */\n  @Input() loadMoreItemsLabel = gettext('Load more devices');\n  /** The label for loading indicator. */\n  @Input() loadingItemsLabel: string = gettext('Loading devices…');\n  /** The name of the key where columns configuration will be stored. */\n  @Input() columnsConfigKey: string;\n  /** The list of columns to be displayed in the grid. If not given, it defaults to standard columns. */\n  @Input('columns') columnsConfig: DeviceGridColumn[];\n  /** Pagination settings, e.g. allows for setting current page or page size. If not given, defaults to standard settings. */\n  @Input('pagination') set _pagination(value: Pagination) {\n    if (value) {\n      this.pagination = value;\n    } else {\n      this.pagination = this.deviceGridService.getDefaultPagination();\n    }\n  }\n  infiniteScroll: LoadMoreMode;\n  /** Sets load more mode. */\n  @Input('infiniteScroll') set _infiniteScroll(infiniteScroll: LoadMoreMode) {\n    this.infiniteScroll = infiniteScroll;\n    if (infiniteScroll) {\n      this.pagination = this.deviceGridService.getInfiniteScrollPagination();\n    }\n  }\n  /** Sets action controls (actions available for individual items). If not given, it defaults to standard actions. */\n  @Input('actionControls') set _actionControls(value: ActionControl[]) {\n    if (value) {\n      this.actionControls = value;\n    } else {\n      this.actionControls = this.deviceGridService.getDefaultActionControls();\n    }\n  }\n  /** Determines whether items can be selected by clicking a checkbox in the first column. */\n  @Input() selectable: boolean = false;\n  /** Sets the base query which is appended to the request for data. */\n  @Input() baseQuery: any = {};\n  /** Sets bulk action controls (actions available for items selected by user). If not given, it defaults to standard bulk actions. */\n  @Input('bulkActionControls') set _bulkActionControls(value: BulkActionControl[]) {\n    if (value) {\n      this.bulkActionControls = value;\n    } else {\n      this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();\n    }\n  }\n  /** Sets header action controls (actions available from the grid header). If not given, it defaults to empty list of actions. */\n  @Input('headerActionControls') set _headerActionControls(value: HeaderActionControl[]) {\n    if (value) {\n      this.headerActionControls = value;\n    } else {\n      this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();\n    }\n  }\n  @Input() childDeviceGrid: boolean = false;\n  @Input() parentDeviceId: string;\n  /** Sets the withChildren query which is appended to the request. */\n  @Input() withChildren: boolean = false;\n  /** Emits an event when columns configuration changes. */\n  @Output() onColumnsChange: EventEmitter<DeviceGridColumn[]> = new EventEmitter<\n    DeviceGridColumn[]\n  >();\n  @Output() onFilterChange: EventEmitter<FilterConfig[]> = new EventEmitter<FilterConfig[]>();\n  @Output() onDeviceQueryStringChange: EventEmitter<string> = new EventEmitter<string>();\n  /** Emits an event when items selection changes. The array contains ids of selected items. */\n  @Output() itemsSelect = new EventEmitter<string[]>();\n\n  configureColumnsEnabled: boolean = true;\n  actionControls: ActionControl[] = [];\n  columns$: Observable<DeviceGridColumn[]> = of(this.deviceGridService.getDefaultColumns());\n  appliedFilters: FilterConfig[] = [];\n  pagination: Pagination = this.deviceGridService.getDefaultPagination();\n  bulkActionControls: BulkActionControl[] = this.deviceGridService.getDefaultBulkActionControls();\n  headerActionControls: HeaderActionControl[] =\n    this.deviceGridService.getDefaultHeaderActionControls();\n  serverSideDataCallback: any;\n\n  @ViewChild(DataGridComponent, { static: true })\n  dataGrid: DataGridComponent;\n\n  /**\n   * Manages the requests to the DeviceGridService.saveConfig$() method:\n   * 0 - Semaphore is in initial state, request can be executed;\n   * 1 - Semaphore is blocked, further requests need to wait for lock to get released;\n   * 2 - Semaphore is \"green\", requests can be done;\n   */\n  private saveGridConfigSemaphore$: BehaviorSubject<number> = new BehaviorSubject(0);\n  private destroyed$: Subject<void> = new Subject();\n\n  constructor(public deviceGridService: DeviceGridService) {\n    this.serverSideDataCallback = this.onDataSourceModifier.bind(this);\n  }\n\n  ngOnInit() {\n    this.setActionControls();\n\n    if (this.columnsConfig && !this.columnsConfigKey) {\n      this.columns$ = of(this.columnsConfig);\n      this.configureColumnsEnabled = false;\n      console.warn(\n        'Device grid expects columnsConfigKey to be set if setting customized columns list. Without it the changes to the grid wll not be saved anywhere.'\n      );\n    } else {\n      this.columns$ = this.deviceGridService.getUserConfiguredColumns$(\n        this.columnsConfig ? this.columnsConfig : this.deviceGridService.getDefaultColumns(),\n        this.columnsConfigKey\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  trackByName(_index, column: DeviceGridColumn): string {\n    return column.name;\n  }\n\n  async onDataSourceModifier(\n    dataSourceModifier: DataSourceModifier\n  ): Promise<ServerSideDataResult> {\n    let serverSideDataResult: ServerSideDataResult;\n    let filteredSize: number;\n    let size: number;\n    if (this.childDeviceGrid) {\n      const { res, data, paging } = await this.deviceGridService.getChildDeviceData(\n        dataSourceModifier.columns,\n        dataSourceModifier.pagination,\n        this.baseQuery,\n        this.withChildren,\n        this.parentDeviceId\n      );\n\n      filteredSize = await this.deviceGridService.getCountChildDevices(\n        dataSourceModifier.columns,\n        dataSourceModifier.pagination,\n        this.baseQuery,\n        this.parentDeviceId\n      );\n      size = await this.deviceGridService.getTotalChildDevices(this.baseQuery, this.parentDeviceId);\n\n      serverSideDataResult = {\n        res,\n        data,\n        paging,\n        filteredSize,\n        size\n      };\n    } else {\n      const { res, data, paging } = await this.deviceGridService.getData(\n        dataSourceModifier.columns,\n        dataSourceModifier.pagination,\n        this.baseQuery,\n        this.withChildren\n      );\n\n      filteredSize = await this.deviceGridService.getCount(\n        dataSourceModifier.columns,\n        dataSourceModifier.pagination,\n        this.baseQuery\n      );\n      size = await this.deviceGridService.getTotal(this.baseQuery);\n\n      serverSideDataResult = {\n        res,\n        data,\n        paging,\n        filteredSize,\n        size\n      };\n    }\n\n    this.onColumnsChange.emit(dataSourceModifier.columns);\n    this.onDeviceQueryStringChange.emit(\n      this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns, this.baseQuery)\n    );\n\n    if (this.dataCallback) {\n      serverSideDataResult = this.dataCallback(serverSideDataResult);\n    }\n\n    return serverSideDataResult;\n  }\n\n  filterChange({ columnName, filteringModifier }) {\n    const index = this.appliedFilters.findIndex(el => el.columnName === columnName);\n\n    if (index > -1) {\n      this.appliedFilters[index].filteringModifier = filteringModifier;\n    } else {\n      this.appliedFilters.push({ columnName, filteringModifier });\n    }\n\n    this.onFilterChange.emit(this.appliedFilters);\n    this.updateFilterConfig(columnName, filteringModifier);\n  }\n\n  updateFilterConfig(columnName, filteringModifier) {\n    // Here I needed to take the current columns because if there isn't any stored config\n    // and custom columns are provided through parent element we need to use them.\n    combineLatest([this.deviceGridService.getConfig$(this.columnsConfigKey), this.columns$])\n      .pipe(\n        tap(([config, columns]) => {\n          const columnsConfig = (config?.columns?.length > 0 ? config.columns : columns).map(\n            ({ name, visible, sortOrder, filter, custom, header, path }) => ({\n              name,\n              visible: visible ?? true,\n              sortOrder,\n              custom,\n              header,\n              path,\n              filter: columnName && columnName !== name ? filter : filteringModifier\n            })\n          );\n\n          if (!columnsConfig.filter) {\n            delete columnsConfig.filter;\n          }\n\n          this.configChange({ columns: columnsConfig, pagination: config.pagination });\n        }),\n        take(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  async setActionControls() {\n    const deleteAction: ActionControl = {\n      type: BuiltInActionType.Delete,\n      callback: (device: Row) => this.onDeleteDevice(device as IManagedObject)\n    };\n    this.actionControls.push(deleteAction);\n  }\n\n  onDeleteDevice(device) {\n    this.deviceGridService\n      .delete(device)\n      .then(() => this.refresh.emit())\n      .catch(() => ({}));\n  }\n\n  updateFiltering(\n    columnNames: string[],\n    action: {\n      type: FilteringActionType;\n      payload?: { filteringModifier: FilteringModifier };\n    }\n  ) {\n    const { type } = action;\n    if (type === FilteringActionType.ResetFilter) {\n      this.dataGrid.clearFilters();\n    } else {\n      this.dataGrid.updateFiltering(columnNames, action);\n    }\n  }\n\n  configChange(config: GridConfig) {\n    /* Semaphore ensures that the first request to DeviceGridService.saveConfig$() is completed\n     * before the next requests are sent out. This prevents multiple configuration objects to be\n     * created in Inventory in case a config does not yet exist.\n     */\n    this.saveGridConfigSemaphore$\n      .pipe(\n        filterRxJS(semaphore => semaphore !== 1),\n        tap(() => {\n          if (this.saveGridConfigSemaphore$.value < 1) {\n            this.saveGridConfigSemaphore$.next(this.saveGridConfigSemaphore$.value + 1);\n          }\n        }),\n        concatMap(() => this.deviceGridService.saveConfig$(config, this.columnsConfigKey)),\n        tap(() => {\n          if (this.saveGridConfigSemaphore$.value < 2) {\n            this.saveGridConfigSemaphore$.next(this.saveGridConfigSemaphore$.value + 1);\n          }\n        }),\n        take(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  addCustomColumn(columnConfig: CustomColumnConfig) {\n    this.deviceGridService\n      .getConfig$(this.columnsConfigKey)\n      .pipe(\n        tap(\n          config =>\n            (config.columns = [\n              ...(config.columns.length === 0 ? this.getDefalultConfigColumns() : config.columns),\n              columnConfig\n            ])\n        ),\n        concatMap(config => this.deviceGridService.saveConfig$(config, this.columnsConfigKey)),\n        switchMap(() =>\n          this.deviceGridService.getUserConfiguredColumns$(this.columns$, this.columnsConfigKey)\n        ),\n        // Let data-grid re-render with new columns;\n        // Columns are set in a separate step in the pipe to avoid flickering\n        // in the grid in the time where get config request is executing\n        tap(columns => (this.columns$ = of(columns))),\n        take(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  removeCustomColumn(columnToRemove: Column) {\n    this.deviceGridService\n      .getConfig$(this.columnsConfigKey)\n      .pipe(\n        first(),\n        tap(\n          config =>\n            (config.columns = config.columns.filter(column => column.name !== columnToRemove.name))\n        ),\n        concatMap(config => this.deviceGridService.saveConfig$(config, this.columnsConfigKey)),\n        switchMap(() =>\n          this.deviceGridService.getUserConfiguredColumns$(\n            this.columns$.pipe(\n              map(columns => columns.filter(column => column.name !== columnToRemove.name))\n            ),\n            this.columnsConfigKey\n          )\n        ),\n        // Let data-grid re-render with new columns;\n        // Columns are set in a separate step in the pipe to avoid flickering\n        // in the grid in the time where get config request is executing\n        tap(columns => (this.columns$ = of(columns))),\n        take(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  private getDefalultConfigColumns() {\n    return this.deviceGridService\n      .getDefaultColumns()\n      .map(column => ({ name: column.name, visible: true }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CommonModule,\n  DataGridModule,\n  DeviceStatusModule,\n  DynamicFormsModule,\n  FormsModule\n} from '@c8y/ngx-components';\nimport { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';\nimport { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';\nimport { BaseFilteringFormRendererComponent } from './columns/base.filtering-form-renderer.component';\nimport { GroupCellRendererComponent } from './columns/group.cell-renderer.component';\nimport { GroupFilteringFormRendererComponent } from './columns/group.filtering-form-renderer.component';\nimport { ModelCellRendererComponent } from './columns/model.cell-renderer.component';\nimport { NameCellRendererComponent } from './columns/name.cell-renderer.component';\nimport { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';\nimport { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';\nimport { StatusCellRendererComponent } from './columns/status.cell-renderer.component';\nimport { DecoratorService } from './decorator.service';\nimport { DeviceGridComponent } from './device-grid.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    DeviceStatusModule,\n    DataGridModule,\n    AssetSelectorModule,\n    DynamicFormsModule,\n    RouterModule\n  ],\n  declarations: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent\n  ],\n  exports: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent\n  ],\n  entryComponents: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent\n  ]\n})\nexport class DeviceGridModule {\n  constructor(public service: DecoratorService) {}\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {AlarmsCellRendererComponent as ɵj} from './columns/alarms.cell-renderer.component';\nexport {BaseFilteringFormRendererComponent as ɵb} from './columns/base.filtering-form-renderer.component';\nexport {ColumnUtilService as ɵa} from './columns/column-util.service';\nexport {GroupCellRendererComponent as ɵh} from './columns/group.cell-renderer.component';\nexport {GroupFilteringFormRendererComponent as ɵc} from './columns/group.filtering-form-renderer.component';\nexport {ModelCellRendererComponent as ɵf} from './columns/model.cell-renderer.component';\nexport {NameCellRendererComponent as ɵe} from './columns/name.cell-renderer.component';\nexport {RegistrationDateCellRendererComponent as ɵi} from './columns/registration-date.cell-renderer.component';\nexport {SerialNumberCellRendererComponent as ɵg} from './columns/serial-number.cell-renderer.component';\nexport {StatusCellRendererComponent as ɵd} from './columns/status.cell-renderer.component';\nexport {DecoratorService as ɵk} from './decorator.service';"],"names":["map","filterRxJS"],"mappings":"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"}