{"version":3,"file":"c8y-ngx-components-register-device.js","sources":["../../register-device/register-device.service.ts","../../register-device/general/general-device-registration.component.ts","../../register-device/general/general-device-registration-button.component.ts","../../register-device/device-registration-view.component.ts","../../register-device/register-device-navigation.factory.ts","../../register-device/extensible/base-extensible-device-registration.service.ts","../../register-device/extensible/single/extensible-device-registration.service.ts","../../register-device/extensible/single/extensible-device-registration-modal.component.ts","../../register-device/extensible/single/extensible-device-registration-button.component.ts","../../register-device/extensible/single/extensible-device-registration-stepper.component.ts","../../register-device/extensible/bulk/extensible-bulk-device-registration.service.ts","../../register-device/extensible/bulk/extensible-bulk-device-registration-modal.component.ts","../../register-device/bulk/bulk-device-registration-modal.component.ts","../../register-device/extensible/bulk/extensible-bulk-device-registration-button.component.ts","../../register-device/bulk/bulk-device-registration-button.component.ts","../../register-device/dropdown/register-device-extension.service.ts","../../register-device/dropdown/register-device-dropdown.component.ts","../../register-device/register-device.factory.ts","../../register-device/register-device.module.ts","../../register-device/c8y-ngx-components-register-device.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  DeviceRegistrationService,\n  DeviceRegistrationStatus,\n  IDeviceRegistration,\n  IDeviceRegistrationAccept,\n  IDeviceRegistrationCreate,\n  IDeviceRegistrationLimit,\n  IResult,\n  Paging\n} from '@c8y/client';\nimport { get, pick } from 'lodash-es';\nimport { BehaviorSubject, forkJoin, from, Observable, Subject } from 'rxjs';\nimport { AlertService, gettext, IRealtimeDeviceBootstrap } from '@c8y/ngx-components';\nimport { finalize, map, mergeMap, takeLast, takeUntil } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterDeviceService {\n  readonly _loading: Subject<boolean> = new Subject();\n  readonly _limit: BehaviorSubject<IDeviceRegistrationLimit> = new BehaviorSubject({ isReached: false });\n  readonly _deviceRegistrationRequests: BehaviorSubject<{ data: IDeviceRegistration[], paging?: Paging<IDeviceRegistration> }> = new BehaviorSubject({ data: [] });\n  readonly deviceRegistrationRequests$: Observable<{ data: IDeviceRegistration[], paging?: Paging<IDeviceRegistration> }> = this._deviceRegistrationRequests.asObservable();\n  readonly loading$: Observable<boolean> = this._loading.asObservable();\n  readonly limit$: Observable<IDeviceRegistrationLimit> = this._limit.asObservable();\n  paging: Paging<IDeviceRegistration>;\n\n  private readonly deviceRegUrl = '/deviceregistration';\n  private endSubscriptions: Subject<void> = new Subject();\n\n  constructor(private router: Router,\n              private deviceRegService: DeviceRegistrationService,\n              private alertService: AlertService) {\n  }\n\n  isDeviceRegistration(): boolean {\n    return get(this.router, 'url') === this.deviceRegUrl;\n  }\n\n  internalListUpdate(deviceRequests: IDeviceRegistration[], pagingObject?: Paging<IDeviceRegistration>) {\n    let { paging, data } = this._deviceRegistrationRequests.getValue();\n    if (pagingObject) {\n      paging = pagingObject;\n    }\n    data = [...data, ...deviceRequests];\n    this._deviceRegistrationRequests.next({ data, paging });\n  }\n\n  onDeviceBootstrap(bsData: IRealtimeDeviceBootstrap) {\n    const { id, status } = bsData;\n    this._deviceRegistrationRequests.next({\n      data: this.updateStatusById(id, status)\n    });\n  }\n\n  list(pageSize: number = 100) {\n    this._loading.next(true);\n    this._deviceRegistrationRequests.next({ data: [], paging: undefined });\n\n    from(this.deviceRegService.list({ pageSize, withTotalPages: true }))\n      .pipe(\n        takeUntil(this.endSubscriptions),\n        finalize(() => this.limit())\n      )\n      .subscribe(\n        res => {\n          const { data, paging } = res;\n          this.internalListUpdate(data, paging);\n          this._loading.next(false);\n        },\n        err => {\n          this._loading.next(false);\n          this.alertService.addServerFailure(err);\n        }\n      );\n  }\n\n  createMultiple(newDeviceRequests: IDeviceRegistrationCreate[]) {\n    if (newDeviceRequests && newDeviceRequests.length > 0) {\n      this._loading.next(true);\n      const newRequests$ = newDeviceRequests.map(element => {\n        return from(\n          this.deviceRegService.create(element)\n            .catch((err: IResult<IDeviceRegistration>) => (\n              { res: err.res, data: { ...err.data, id: element.id } }\n            )));\n      });\n\n      const groupedRequests: {\n        success: IDeviceRegistration[],\n        failed: IDeviceRegistration[]\n      } = {\n        success: [],\n        failed: []\n      };\n\n      return forkJoin(newRequests$)\n        .pipe(\n          mergeMap(resp => resp.map(el => {\n            el.res.ok ? groupedRequests.success.push(el.data) : groupedRequests.failed.push(el.data);\n            return groupedRequests;\n          })),\n          takeLast(1),\n          finalize(() => {\n            this.internalListUpdate(groupedRequests.success);\n            this._loading.next(false);\n          })\n        );\n    }\n  }\n\n  remove(id: string) {\n    this._loading.next(true);\n    from(this.deviceRegService.delete(id))\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(\n        res => {\n          this._deviceRegistrationRequests.next(\n            { data: this.removeDeviceRegistrationRequestById(id) }\n          );\n          this._loading.next(false);\n          this.alertService.success(gettext('Device registration cancelled.'));\n        },\n        err => {\n          this._loading.next(false);\n          this.alertService.addServerFailure(err);\n        }\n      );\n  }\n\n  accept(request: IDeviceRegistration) {\n    this._loading.next(true);\n    const payload = pick(request, ['id', 'securityToken']);\n    from(this.deviceRegService.accept(payload))\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(\n        res => {\n          this._deviceRegistrationRequests.next(\n            { data: this.updateStatusById(payload.id, DeviceRegistrationStatus.ACCEPTED) }\n          );\n          this.limit();\n          this._loading.next(false);\n          this.alertService.success(gettext('Device registration accepted.'));\n        },\n        err => {\n          this._loading.next(false);\n          this.alertService.addServerFailure(err);\n        }\n      );\n  }\n\n  acceptAll() {\n    const acceptedDeviceRequests: IDeviceRegistrationAccept[] = [];\n    const failedDeviceRequests: IDeviceRegistrationAccept[] = [];\n    this._loading.next(true);\n\n    from(this.deviceRegService.acceptAll())\n      .pipe(\n        takeUntil(this.endSubscriptions),\n        map(({ data }) => {\n          data.map(deviceRegistrationRequest => {\n            if (deviceRegistrationRequest.successful) {\n              acceptedDeviceRequests.push(deviceRegistrationRequest);\n              this.updateStatusById(deviceRegistrationRequest.id, DeviceRegistrationStatus.ACCEPTED);\n            } else {\n              failedDeviceRequests.push(deviceRegistrationRequest);\n            }\n          });\n          return data;\n        }),\n        finalize(() => {\n          // update rendered list with successful accepted device registrations\n          // see: this.updateStatusById(...)\n          this.internalListUpdate([]);\n          this.limit();\n          this._loading.next(false);\n          if (failedDeviceRequests.length > 0) {\n            this.alertService.warning(gettext('Could not accept all pending registration requests.'), JSON.stringify({\n              failedDeviceRequests,\n              acceptedDeviceRequests\n            }, undefined, 2));\n          } else {\n            this.alertService.success(gettext('Accepted all pending registration requests.'));\n          }\n        })\n      ).subscribe(\n      res => {\n        // empty by design\n      },\n      err => {\n        this._loading.next(false);\n        this.alertService.addServerFailure(err);\n      }\n    );\n  }\n\n  limit() {\n    from(this.deviceRegService.limit())\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(\n        res => this._limit.next(res.data),\n        err => this.alertService.addServerFailure(err)\n      );\n  }\n\n  getRequestByStatus(status: DeviceRegistrationStatus): IDeviceRegistration[] {\n    return this._deviceRegistrationRequests.getValue().data.filter(req => req.status === status);\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  private updateStatusById(id: string, status: DeviceRegistrationStatus) {\n    const items = this._deviceRegistrationRequests.getValue().data;\n    const matchingElementIndex = items.findIndex(element => element.id === id);\n    if (matchingElementIndex >= 0) {\n      items[matchingElementIndex].status = status;\n    }\n    return items;\n  }\n\n  private removeDeviceRegistrationRequestById(id: string) {\n    const items = this._deviceRegistrationRequests.getValue().data;\n    const matchingElementIndex = items.findIndex(element => element.id === id);\n    if (matchingElementIndex >= 0) {\n      items.splice(matchingElementIndex, 1);\n    }\n    this._loading.next(false);\n    return items;\n  }\n}\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\nimport { TenantUiService, gettext, C8yStepper, memoize } from '@c8y/ngx-components';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { from, Observable, Subject, defer} from 'rxjs';\nimport { filter, shareReplay, switchMap, takeUntil, tap} from 'rxjs/operators';\nimport { IDeviceRegistration, IManagedObject, InventoryService, IResultList, ITenant, TenantService } from '@c8y/client';\nimport { RegisterDeviceService } from '../register-device.service';\nimport { CdkStep } from '@angular/cdk/stepper';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\ninterface GeneralDeviceRegistrationModelType {\n  id: string;\n  tenant?: {id: string};\n  group?: {id: string, name?: string};\n}\n\n@Component({\n  selector: 'c8y-general-device-registration',\n  templateUrl: 'general-device-registration.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralDeviceRegistrationComponent implements AfterViewInit, OnDestroy {\n  readonly MANAGEMENT = 'management';\n  readonly FILTER: object = {\n    withTotalPages: true,\n    pageSize: 25\n  };\n\n  form = new FormGroup({});\n  model = {\n    devicesToCreate: [{} as GeneralDeviceRegistrationModelType]\n  };\n  options: FormlyFormOptions = {\n    formState: {\n      canLoadTenants: true,\n    }\n  };\n\n  isLoading$: Observable<boolean>;\n  success: IDeviceRegistration[] = [];\n  failed: IDeviceRegistration[] = [];\n\n  fields: FormlyFieldConfig[] = [\n    {\n      type: 'array',\n      key: 'devicesToCreate',\n      templateOptions: {\n        addText: gettext('Add device'),\n        addTextDataCy: 'add-device'\n      },\n      fieldArray: {\n        fieldGroup: [{\n          key: 'id',\n          type: 'string',\n          focus: true,\n          templateOptions: {\n            placeholder: '0123ab32fcd',\n            label: gettext('Device ID'),\n            required: true\n          },\n          validators: {\n            unique: {\n              expression: (control: FormControl) => {\n                const found = (control.root.get('devicesToCreate').value as Array<{id: string}>).filter(el => el.id === control.value);\n                return found.length === 0;\n              },\n              message: () => gettext('Device ID duplicates are not allowed'),\n            },\n          },\n        },\n        {\n          key: 'tenant',\n          type: 'typeahead',\n          hideExpression: (model: any, formState: any, field: FormlyFieldConfig) => {\n            if (!formState?.canLoadTenants) {\n              field.formControl.setValue(null);\n            }\n            return !formState?.canLoadTenants || false;\n          },\n          defaultValue: {id: this.MANAGEMENT},\n          templateOptions: {\n            label: gettext('Add to tenant'),\n            required: true,\n            c8yForOptions: this.canLoadTenants$().pipe(filter(canLoad => canLoad), switchMap(() => this.getTenants$())) as Observable<IResultList<ITenant>>,\n            container: 'body',\n            displayProperty: 'id',\n            valueProperties: ['id']\n          },\n          hooks: {\n            onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {\n              this.options.formState.canLoadTenants = canLoad;\n              this.cd.detectChanges();\n            }))\n          }\n        },\n        {\n          key: 'group',\n          type: 'typeahead',\n          expressionProperties: {\n            'templateOptions.disabled': (model: any, formState: any, field: FormlyFieldConfig) => {\n              if (formState?.canLoadTenants) {\n                if (model?.tenant?.id !== this.MANAGEMENT) {\n                  field.formControl.setValue(null);\n                }\n                return !(model?.tenant?.id === this.MANAGEMENT);\n              }\n              delete field?.templateOptions?.description;\n              return false;\n            }\n          },\n          templateOptions: {\n            disabled: false,\n            label: gettext('Add to group'),\n            description: gettext('You can add device to specific group for management tenant only.'),\n            container: 'body',\n            displayProperty: 'name',\n            valueProperties: ['id'],\n            c8yForOptions: this.getGroups$()\n          },\n          hooks: {\n            onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {\n              this.options.formState.canLoadTenants = canLoad;\n              this.cd.detectChanges();\n            }))\n          }\n        }]\n      }\n    }\n  ];\n\n  private destroy$: Subject<any> = new Subject();\n  private lastCreatedDevices: GeneralDeviceRegistrationModelType[] = [];\n\n  constructor(\n    private tenantUIService: TenantUiService,\n    private tenantService: TenantService,\n    private registerDeviceService: RegisterDeviceService,\n    private inventoryService: InventoryService,\n    private cd: ChangeDetectorRef,\n    public bsModalRef: BsModalRef\n  ) {\n    this.isLoading$ = this.registerDeviceService.loading$;\n  }\n\n  ngAfterViewInit() {\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  create(eventObject: {stepper: C8yStepper, step: CdkStep}) {\n    if (this.model?.devicesToCreate?.length > 0) {\n      this.lastCreatedDevices = [...this.model.devicesToCreate];\n\n      const dataToSend = this.model.devicesToCreate.map((el: GeneralDeviceRegistrationModelType) => {\n        const {id, tenant, group} = el;\n        let data: {id: string, tenantId?: string, groupId?: string} = { id };\n\n        if (tenant?.id) {\n          data = { ...data, tenantId: tenant.id };\n        }\n\n        if (group?.id) {\n          data = { ...data, groupId: group.id };\n        }\n\n        return data;\n      });\n\n      this.registerDeviceService.createMultiple(dataToSend)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(requests => {\n        this.success = requests.success;\n        this.failed = requests.failed;\n\n        if (eventObject) {\n          eventObject.stepper.next();\n        }\n      });\n    }\n  }\n\n  fixErrors(event: {stepper: C8yStepper, step: CdkStep}, failedRequests: IDeviceRegistration[]) {\n    if (failedRequests && failedRequests.length > 0) {\n      this.options.resetModel({devicesToCreate: [...this.lastCreatedDevices.filter(el => failedRequests.map(data => data.id).includes(el.id))]});\n      this.cd.detectChanges();\n    }\n    event?.stepper.previous();\n  }\n\n  @memoize()\n  private canLoadTenants$(): Observable<boolean> {\n    return defer(() =>\n      from(this.tenantUIService.isManagementTenant())).pipe(shareReplay(1));\n  }\n\n  @memoize()\n  private getTenants$(): Observable<IResultList<ITenant>> {\n    return defer(\n      () => from(this.tenantService.list(this.FILTER))\n    ).pipe(shareReplay(1));\n  }\n\n  @memoize()\n  private getGroups$(): Observable<IResultList<IManagedObject>> {\n    return defer(() =>\n      from(\n        this.inventoryService.listQuery(\n          { __filter: { __has: 'c8y_IsDeviceGroup' }, __orderby: [{ name: 1 }] },\n          { ...this.FILTER }\n        )\n      )\n    ).pipe(shareReplay(1));\n  }\n}\n","import { Component } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { GeneralDeviceRegistrationComponent } from './general-device-registration.component';\n\n@Component({\n  selector: 'c8y-general-device-registration-button',\n  templateUrl: 'general-device-registration-button.component.html'\n})\n\nexport class GeneralDeviceRegistrationButtonComponent {\n  constructor(private modalService: BsModalService) {}\n\n  open() {\n    this.modalService.show(GeneralDeviceRegistrationComponent, {\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  DeviceRegistrationSecurityMode,\n  DeviceRegistrationStatus,\n  IDeviceRegistration,\n  IDeviceRegistrationLimit,\n  Paging\n} from '@c8y/client';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, map, switchMap, takeUntil } from 'rxjs/operators';\nimport {\n  DeviceBootstrapRealtimeService,\n  IRealtimeDeviceBootstrap,\n  TenantUiService,\n  ModalService,\n  Status,\n  gettext,\n  OptionsService\n} from '@c8y/ngx-components';\nimport { RegisterDeviceService } from './register-device.service';\nimport { sortBy } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'c8y-device-registration-view',\n  templateUrl: 'device-registration-view.component.html'\n})\nexport class DeviceRegistrationViewComponent implements OnInit, OnDestroy {\n  deviceRequests$: Observable<{\n    data: IDeviceRegistration[];\n    paging?: Paging<IDeviceRegistration>;\n  }>;\n  limit$: Observable<IDeviceRegistrationLimit>;\n  limitReachedInfo$: Observable<string>;\n  requireSecurityToken: boolean = false;\n  isManagementTenant: boolean = false;\n  isLoading: boolean = false;\n  gridOrList: 'interact-list' | 'interact-grid' = 'interact-grid';\n  status = DeviceRegistrationStatus;\n\n  readonly statusProps = {\n    [DeviceRegistrationStatus.WAITING_FOR_CONNECTION]: {\n      label: gettext('Waiting for connection'),\n      icon: 'unlink',\n      cls: 'text-danger'\n    },\n    [DeviceRegistrationStatus.PENDING_ACCEPTANCE]: {\n      label: gettext('Pending acceptance'),\n      icon: 'circle',\n      cls: 'text-info'\n    },\n    [DeviceRegistrationStatus.ACCEPTED]: {\n      label: gettext('Accepted'),\n      icon: 'check-circle',\n      cls: 'text-success'\n    },\n    [DeviceRegistrationStatus.BLOCKED]: {\n      label: gettext('Blocked'),\n      icon: 'remove',\n      cls: 'text-danger'\n    }\n  };\n\n  private unsubscribe$: Subject<any> = new Subject();\n  private readonly _securityTokenPolicy: BehaviorSubject<DeviceRegistrationSecurityMode> =\n    new BehaviorSubject(DeviceRegistrationSecurityMode.OPTIONAL);\n\n  constructor(\n    private registerDeviceService: RegisterDeviceService,\n    private bootstrapRealtimeService: DeviceBootstrapRealtimeService,\n    private tenantUiService: TenantUiService,\n    private modalService: ModalService,\n    private translateService: TranslateService,\n    private optionsService: OptionsService\n  ) {}\n\n  ngOnInit() {\n    this.loadAll();\n    this.setIsManagementTenant();\n    this.setRequireSecurityToken();\n\n    this.deviceRequests$ = this.registerDeviceService.deviceRegistrationRequests$.pipe(\n      map(req => ({\n        data: sortBy(req.data, [\n          ({ status }) => (status === DeviceRegistrationStatus.PENDING_ACCEPTANCE ? 0 : 1),\n          '-creationTime'\n        ]),\n        paging: req.paging\n      }))\n    );\n    this.limit$ = this.registerDeviceService.limit$;\n    this.limitReachedInfo$ = this.limit$.pipe(\n      filter(deviceRegistrationLimit => deviceRegistrationLimit.isReached),\n      switchMap(({ limit }) =>\n        this.translateService.stream(\n          gettext(\n            'You reached the limit of {{ maxDevices }} devices. No more devices can be registered.'\n          ),\n          { maxDevices: limit }\n        )\n      )\n    );\n    this.registerDeviceService.loading$\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(value => (this.isLoading = value));\n\n    this.bootstrapRealtimeService\n      .onUpdate$()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((bootstrap: IRealtimeDeviceBootstrap) => {\n        this.registerDeviceService.onDeviceBootstrap(bootstrap);\n      });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  updateList(data) {\n    this.registerDeviceService.internalListUpdate(data);\n  }\n\n  async delete(id: string) {\n    const confirmed = await this.modalService.confirm(\n      gettext('Cancel device registration'),\n      this.translateService.instant(\n        gettext(\n          'You are about to cancel device registration for ID \"{{id}}\". Do you want to proceed?'\n        ),\n        { id }\n      ),\n      Status.DANGER,\n      {\n        ok: gettext('Cancel registration'),\n        cancel: gettext('Close')\n      }\n    );\n\n    if (confirmed) {\n      this.registerDeviceService.remove(id);\n    }\n  }\n\n  accept(request: IDeviceRegistration) {\n    this.registerDeviceService.accept(request);\n  }\n\n  acceptAll() {\n    this.registerDeviceService.acceptAll();\n  }\n\n  canAcceptAll() {\n    const pendingRequests = this.registerDeviceService.getRequestByStatus(\n      DeviceRegistrationStatus.PENDING_ACCEPTANCE\n    );\n    return !(pendingRequests.length > 0 && !this.requireSecurityToken);\n  }\n\n  loadAll() {\n    this.registerDeviceService.list();\n  }\n\n  displayMode(listClass: 'interact-list' | 'interact-grid') {\n    this.gridOrList = listClass;\n  }\n\n  async setRequireSecurityToken() {\n    const mode: DeviceRegistrationSecurityMode = await this.optionsService.getTenantOption(\n      'device-registration',\n      'security-token.policy',\n      DeviceRegistrationSecurityMode.OPTIONAL\n    );\n    this._securityTokenPolicy.next(mode);\n    this.requireSecurityToken = mode === DeviceRegistrationSecurityMode.REQUIRED;\n  }\n\n  async setIsManagementTenant() {\n    this.isManagementTenant = await this.tenantUiService.isManagementTenant();\n  }\n\n  shouldShowSecurityTokenInput(data: IDeviceRegistration) {\n    return (\n      data &&\n      data.status === DeviceRegistrationStatus.PENDING_ACCEPTANCE &&\n      this.showTokenInputBasedOnSecurityMode()\n    );\n  }\n\n  showTokenInputBasedOnSecurityMode() {\n    return this._securityTokenPolicy.getValue() !== DeviceRegistrationSecurityMode.IGNORED;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory, Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class RegisterDeviceNavigationFactory implements NavigatorNodeFactory {\n  constructor(private permissions: Permissions) {}\n  get() {\n    const userHasPermission = this.permissions.hasAnyRole([\n      'ROLE_DEVICE_CONTROL_ADMIN',\n      'ROLE_DEVICE_CONTROL_READ'\n    ]);\n    const nav: NavigatorNode[] = [];\n    if (userHasPermission) {\n      nav.push(new NavigatorNode({\n        label: gettext('Registration'),\n        icon: 'c8y-device-connect',\n        path: '/deviceregistration',\n        parent: gettext('Devices'),\n        preventDuplicates: true,\n        priority: 3000\n      }));\n    }\n    return nav;\n  }\n}\n","import { ApplicationService, ApplicationType, IApplication } from '@c8y/client';\nimport { AppStateService, gettext } from '@c8y/ngx-components';\nimport { flatMap } from 'lodash-es';\nimport { ApplicationExtension, ExtensibleDeviceRegistrationProvider } from './base-device-registration.model';\n\nexport class BaseExtensibleDeviceRegistrationService {\n  constructor(\n    protected applicationService: ApplicationService,\n    protected stateService: AppStateService\n  ) {}\n\n  protected getMetadataUrl(contextPath: string): string {\n    return `${this.getServiceBaseUrl(contextPath)}/metadata`;\n  }\n\n  protected getServiceBaseUrl(contextPath: string): string {\n    if (!contextPath || contextPath.length === 0) {\n      throw new Error(gettext('The URL of the microservice is misconfigured. A context path is missing.'));\n    }\n    return `/service/${contextPath}/deviceRegistration`;\n  }\n\n  protected async getDeviceRegistrationProviders(\n    bulk: boolean\n  ): Promise<ExtensibleDeviceRegistrationProvider[]> {\n    let providers: ExtensibleDeviceRegistrationProvider[] = [];\n    const microservices = await this.listMicroservicesByUser();\n    if (microservices && microservices.length > 0) {\n      providers = this.getProvidersFromManifestExtensions(microservices, bulk).concat(\n        this.getProvidersFromExtensions(microservices, bulk)\n      );\n    }\n    return providers;\n  }\n\n  private async listMicroservicesByUser() {\n    const { data } = await this.applicationService.listByUser(\n      this.stateService?.currentUser?.value?.userName,\n      {\n        dropOverwrittenApps: true,\n        noPaging: true,\n        pageSize: 100,\n        withTotalPages: true\n      }\n    );\n    return data?.filter(({ type }) => type === ApplicationType.MICROSERVICE);\n  }\n\n  private getProvidersFromManifestExtensions(\n    applications: IApplication[],\n    bulk: boolean\n  ): ExtensibleDeviceRegistrationProvider[] {\n    return flatMap(applications, application => {\n      return application?.manifest?.extensions?.map(extension => {\n        return { ...extension, contextPath: application.contextPath } as ApplicationExtension;\n      });\n    }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));\n  }\n\n  private getProvidersFromExtensions(applications: IApplication[], bulk: boolean): ExtensibleDeviceRegistrationProvider[] {\n    return flatMap(applications, application => {\n      return application.extensions?.map(extension => {\n        return { ...extension, contextPath: application.contextPath } as ExtensibleDeviceRegistrationProvider;\n      });\n    }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));\n  }\n\n  private appSupportingExtensibleDeviceRegistrationForm(extension: ExtensibleDeviceRegistrationProvider, bulk: boolean): boolean {\n    if (bulk) {\n      return extension?.type === 'extensibleBulkDeviceRegistration';\n    } else {\n      return extension?.type === 'extensibleDeviceRegistration';\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApplicationService, FetchClient, IResult } from '@c8y/client';\nimport { AppStateService, gettext } from '@c8y/ngx-components';\nimport { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationSchema } from './extensible-device-registration.model';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Injectable()\nexport class ExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {\n  constructor(\n    protected applicationService: ApplicationService,\n    protected stateService: AppStateService,\n    private client: FetchClient\n  ) {\n    super(applicationService, stateService);\n  }\n\n  async getSchema(contextPath: string): Promise<ExtensibleDeviceRegistrationSchema> {\n    const response = await this.client.fetch(this.getMetadataUrl(contextPath), { params: { lang: this.stateService.state.lang } });\n    const data = await response.json();\n\n    if (!data || !data.c8y_DeviceRegistration) {\n      throw new Error(gettext('The response of the microservice is incomplete. The device registration information is missing.'));\n    }\n\n    return data.c8y_DeviceRegistration;\n  }\n\n  getDeviceRegistrationProviders(): Promise<ExtensibleDeviceRegistrationProvider[]> {\n    return super.getDeviceRegistrationProviders(false);\n  }\n\n  async registerDevice(contextPath: string, model: any): Promise<IResult<any>> {\n    const method = 'POST';\n    const body = JSON.stringify(model);\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.client.fetch(this.getServiceBaseUrl(contextPath), { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { C8yJSONSchema, gettext } from '@c8y/ngx-components';\nimport { ExtensibleDeviceRegistrationService } from './extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationSchema } from './extensible-device-registration.model';\nimport { JSONSchema7 } from 'json-schema';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'extensible-device-registration-modal',\n  templateUrl: 'extensible-device-registration-modal.component.html'\n})\n\nexport class ExtensibleDeviceRegistrationModalComponent implements OnInit {\n\n  title: string;\n  loadingErrorMessage: string;\n  pages: FormlyFieldConfig[][];\n  labels: string[] = [];\n  contextPath: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private jsonschema: C8yJSONSchema,\n    private registrationService: ExtensibleDeviceRegistrationService\n  ) {}\n\n  async ngOnInit() {\n    const { title, pages }: ExtensibleDeviceRegistrationSchema = await this.registrationService.getSchema(this.contextPath)\n    .catch(error => {\n      this.loadingErrorMessage = error?.message || gettext('Cannot fetch a form definition from the microservice.');\n      return {\n        title: gettext('Error')\n      };\n    });\n    this.title = title;\n    this.pages = pages?.map((step: JSONSchema7) => {\n      this.labels.push(step.title);\n      return [this.jsonschema.toFieldConfig(step) as FormlyFieldConfig];\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ExtensibleDeviceRegistrationService } from './extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationModalComponent } from './extensible-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Component({\n  selector: 'extensible-device-registration-provider',\n  templateUrl: 'extensible-device-registration-button.component.html'\n})\nexport class ExtensibleDeviceRegistrationButtonComponent implements OnInit {\n  providersMetaData: Promise<ExtensibleDeviceRegistrationProvider[]>;\n\n  constructor(private deviceRegistrationService: ExtensibleDeviceRegistrationService,\n              private modalService: BsModalService) {\n  }\n\n  ngOnInit() {\n    this.providersMetaData = this.deviceRegistrationService.getDeviceRegistrationProviders();\n  }\n\n  click(providerMetaData: ExtensibleDeviceRegistrationProvider) {\n    const { name, contextPath } = providerMetaData;\n    this.modalService.show(ExtensibleDeviceRegistrationModalComponent, {\n      initialState: { name, contextPath } as Partial<ExtensibleDeviceRegistrationModalComponent>,\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ExtensibleDeviceRegistrationService } from './extensible-device-registration.service';\nimport { RegisterDeviceService } from '../../register-device.service';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { STEP_STATE } from '@angular/cdk/stepper';\n\n@Component({\n  selector: 'c8y-extensible-device-registration-stepper',\n  templateUrl: 'extensible-device-registration-stepper.component.html'\n})\n\nexport class ExtensibleDeviceRegistrationStepperComponent implements OnInit {\n\n  message: string;\n  errorMessage: string;\n  pendingStatus: boolean = false;\n  forms: FormGroup[] = [];\n  model: any = {};\n  @ViewChild(C8yStepper, { static: true })\n  stepper: C8yStepper;\n\n  @Input() contextPath: string;\n  @Input() labels: string[];\n  @Input() steps: FormlyFieldConfig[][];\n\n  private readonly SERVER_ERROR = gettext('Cannot register your device.');\n  private readonly SUCCESSFUL_REGISTRATION = gettext('Your device was successfully registered.');\n  private readonly NO_CONNECTION = gettext('Unable to reach the microservice.');\n\n  constructor(\n    private customProviderService: ExtensibleDeviceRegistrationService,\n    private registerDeviceService: RegisterDeviceService,\n    private bsModalRef: BsModalRef\n  ) {\n  }\n\n  ngOnInit() {\n    this.steps.forEach(step => this.forms.push(new FormGroup({})));\n  }\n\n  async save() {\n    this.pendingStatus = true;\n    this.errorMessage = null;\n    const { res, data } = await this.customProviderService.registerDevice(this.contextPath, this.model)\n    .catch(err => {\n      return {\n        res: undefined,\n        data: undefined\n      };\n    })\n    .finally(() => {\n      this.pendingStatus = false;\n      this.stepper.next();\n    });\n\n    if (res && data) {\n      if (res.status >= 400 && res.status < 500) {\n        this.handleError(data.message || this.SERVER_ERROR);\n      } else if (res.status >= 500) {\n        this.handleError(this.SERVER_ERROR);\n      } else {\n        this.message = this.SUCCESSFUL_REGISTRATION;\n      }\n    } else {\n      this.handleError(this.NO_CONNECTION);\n    }\n  }\n\n  close() {\n    this.bsModalRef.hide();\n  }\n\n  complete() {\n    this.registerDeviceService.list();\n    this.bsModalRef.hide();\n  }\n\n  goToFirstStep() {\n    this.stepper.selectedIndex = 0;\n  }\n\n  isRegistrationStep() {\n    return this.stepper.selectedIndex === this.steps.length - 1;\n  }\n\n  finalStepStatus() {\n    if (this.stepper.selectedIndex === this.steps.length) {\n      if (this.errorMessage) {\n        return STEP_STATE.ERROR;\n      } else {\n        return STEP_STATE.DONE;\n      }\n    } else {\n      return STEP_STATE.NUMBER;\n    }\n  }\n\n  private handleError(message: string) {\n    this.errorMessage = message;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApplicationService, FetchClient, IResult } from '@c8y/client';\nimport { AppStateService, gettext } from '@c8y/ngx-components';\nimport { BulkDescription, BulkResult } from './extensible-bulk-device-registration.model';\nimport { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Injectable()\nexport class BulkExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {\n  constructor(\n    protected applicationService: ApplicationService,\n    protected stateService: AppStateService,\n    private client: FetchClient\n  ) {\n    super(applicationService, stateService);\n  }\n\n  getDeviceRegistrationProviders(): Promise<ExtensibleDeviceRegistrationProvider[]> {\n    return super.getDeviceRegistrationProviders(true);\n  }\n\n  async getBulkDescription(contextPath: string): Promise<BulkDescription> {\n    const res = await this.client.fetch(this.getMetadataUrl(contextPath), {\n      params: { lang: this.stateService.state.lang }\n    });\n    const { c8y_DeviceRegistration } = await res.json();\n\n    if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {\n      throw new Error(\n        gettext(\n          'The response of the microservice is incomplete. The bulk registration information is missing.'\n        )\n      );\n    }\n\n    return c8y_DeviceRegistration.bulk;\n  }\n\n  async upload(csv: File, contextPath): Promise<IResult<BulkResult>> {\n    const method = 'POST';\n    const body = this.createBinaryRequestBody(csv);\n    const res = await this.client.fetch(this.getBulkUrl(contextPath), { method, body });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  getBulkUrl(contextPath: string): string {\n    return `${this.getServiceBaseUrl(contextPath)}/bulk`;\n  }\n\n  private createBinaryRequestBody(file: any): FormData {\n    const body = new FormData();\n    body.append('file', file, file.name);\n    return body;\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { C8yJSONSchema, C8yStepper, gettext } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\nimport {\n  BulkDescription,\n  BulkFailedResult,\n  BulkFileExample,\n  BulkResult\n} from './extensible-bulk-device-registration.model';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { BulkExtensibleDeviceRegistrationService } from './extensible-bulk-device-registration.service';\nimport { RegisterDeviceService } from '../../register-device.service';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { IResult } from '@c8y/client';\n\nconst bulkSchema: object = {\n  $schema: 'https://json-schema.org/draft/2019-09/schema',\n  type: 'object',\n  properties: {\n    csvBulkFile: {\n      type: 'string',\n      title: gettext('CSV file upload'),\n      description: gettext(\n        'You can use file upload component to let users send files. This input accepts only a single CSV file.'\n      ),\n      contentEncoding: 'base64',\n      contentMediaType: 'csv'\n    }\n  },\n  required: ['csvBulkFile'],\n  additionalProperties: false\n};\n\n@Component({\n  selector: 'extensible-device-registration-modal-component',\n  templateUrl: 'extensible-bulk-device-registration-modal.component.html'\n})\nexport class ExtensibleBulkDeviceRegistrationModalComponent implements OnInit {\n  @ViewChild(C8yStepper, { static: true }) stepper: C8yStepper;\n  title: string;\n  examples: BulkFileExample[];\n  message: string;\n  success: boolean;\n  loadingError: boolean = false;\n  pending: boolean = false;\n  contextPath: string;\n  result: BulkResult | BulkFailedResult;\n  form = new FormGroup({});\n  model = {};\n  template: FormlyFieldConfig[];\n\n  constructor(\n    private jsonschema: C8yJSONSchema,\n    private bulkExtensibleDeviceRegistrationService: BulkExtensibleDeviceRegistrationService,\n    private registerDeviceService: RegisterDeviceService,\n    private bsModalRef: BsModalRef\n  ) {}\n\n  async ngOnInit() {\n    const { title, exampleFileUrls }: BulkDescription =\n      await this.bulkExtensibleDeviceRegistrationService\n        .getBulkDescription(this.contextPath)\n        .catch(error => {\n          this.message = error.message;\n          this.loadingError = true;\n\n          return {\n            title: gettext('Error'),\n            exampleFileUrls: []\n          };\n        });\n\n    this.title = title;\n    this.template = [this.jsonschema.toFieldConfig(bulkSchema)];\n    this.examples = exampleFileUrls;\n  }\n\n  async upload() {\n    this.pending = true;\n    const { res, data }: IResult<BulkResult> = await this.bulkExtensibleDeviceRegistrationService\n      .upload(this.getFile(this.model), this.contextPath)\n      .catch(err => {\n        return {\n          res: undefined,\n          data: undefined\n        };\n      })\n      .finally(() => {\n        this.pending = false;\n        this.stepper.next();\n      });\n\n    this.result = data;\n    this.success = res?.status < 400;\n\n    if (this.success) {\n      this.message = gettext('Device registration created.');\n      this.model = {};\n    }\n\n    if (res) {\n      if (res.status >= 400 && res.status < 500) {\n        this.message = gettext('Device registration failed.');\n      } else if (res.status >= 500) {\n        this.message = gettext('Error occurred while processing the uploaded file.');\n      }\n    } else {\n      this.message = gettext('No internet connection. Unable to reach the microservice.');\n    }\n  }\n\n  getFile(model) {\n    const csvBulkFile = (model as any)?.csvBulkFile;\n    return csvBulkFile ? csvBulkFile[0]?.file : undefined;\n  }\n\n  complete() {\n    this.registerDeviceService.list();\n    this.bsModalRef.hide();\n  }\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { C8yJSONSchema, C8yStepper, gettext } from '@c8y/ngx-components';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { saveAs } from 'file-saver';\nimport { DeviceRegistrationBulkService, IDeviceRegistrationBulkResult } from '@c8y/client';\nimport { Router } from '@angular/router';\nimport { RegisterDeviceService } from '../register-device.service';\nimport { BulkFailedResult } from '../extensible/bulk/extensible-bulk-device-registration.model';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nconst bulkSchema: object = {\n  $schema: 'https://json-schema.org/draft/2019-09/schema',\n  type: 'object',\n  properties: {\n    csvBulkFile: {\n      type: 'string',\n      title: gettext('CSV file upload'),\n      description: gettext(\n        'You can use file upload component to let users send files. This input accepts only a single CSV file.'\n      ),\n      contentEncoding: 'base64',\n      contentMediaType: 'csv'\n    }\n  },\n  required: ['csvBulkFile'],\n  additionalProperties: false\n};\n\nconst simpleCsvHeaders: string[] = ['ID', 'PATH'];\nconst fullCsvHeaders: string[] = [\n  'ID',\n  'CREDENTIALS',\n  'TYPE',\n  'NAME',\n  'ICCID',\n  'IDTYPE',\n  'PATH',\n  'SHELL',\n  'AUTH_TYPE'\n];\n\n@Component({\n  selector: 'bulk-device-registration',\n  templateUrl: 'bulk-device-registration-modal.component.html'\n})\nexport class BulkDeviceRegistrationModalComponent {\n  @ViewChild(C8yStepper, { static: true }) stepper: C8yStepper;\n  message: string;\n  success: boolean;\n  pending: boolean;\n  result: IDeviceRegistrationBulkResult;\n  failedResult: BulkFailedResult;\n  form = new FormGroup({});\n  model = {};\n  template: FormlyFieldConfig[];\n\n  constructor(\n    private router: Router,\n    private jsonschema: C8yJSONSchema,\n    private deviceRegistrationService: DeviceRegistrationBulkService,\n    private registerDeviceService: RegisterDeviceService,\n    private bsModalRef: BsModalRef\n  ) {}\n\n  ngOnInit() {\n    this.template = [this.jsonschema.toFieldConfig(bulkSchema)];\n  }\n\n  upload() {\n    this.pending = true;\n    const file = this.getFile(this.model);\n    this.deviceRegistrationService\n      .create(file)\n      .then(({ res, data }) => {\n        if (res.status < 400) {\n          this.result = data;\n          this.success = data.numberOfFailed === 0 && data.numberOfSuccessful === data.numberOfAll;\n          this.message = this.success\n            ? gettext('Device registration created.')\n            : (this.message = gettext('Device registration failed.'));\n        } else {\n          this.failedResult = data as unknown as BulkFailedResult;\n          this.message = gettext('Device registration failed.');\n        }\n        this.model = {};\n        this.pending = false;\n        this.stepper.next();\n      })\n      .catch(reason => {\n        this.message = gettext('Error occurred while processing the uploaded file.');\n        this.pending = false;\n        this.stepper.next();\n      });\n  }\n\n  downloadSimple() {\n    return this.download(simpleCsvHeaders, gettext('Simple bulk registration - template.csv'));\n  }\n\n  downloadFull() {\n    return this.download(fullCsvHeaders, gettext('Full bulk registration - template.csv'));\n  }\n\n  download(headers: string[], fileName: string) {\n    const headerRaw = headers.map(header => `\"${header}\"`).join(';');\n    const binaryFile = new Blob([headerRaw], { type: 'text/csv' });\n    saveAs(binaryFile, fileName);\n  }\n\n  complete() {\n    this.registerDeviceService.list();\n    this.bsModalRef.hide();\n  }\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n\n  private getFile(model): File {\n    const csvBulkFile = (model as any)?.csvBulkFile;\n    return csvBulkFile ? csvBulkFile[0]?.file : undefined;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BulkExtensibleDeviceRegistrationService } from './extensible-bulk-device-registration.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ExtensibleBulkDeviceRegistrationModalComponent } from './extensible-bulk-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationProvider } from '../base-device-registration.model';\n\n@Component({\n  selector: 'extensible-device-registration-component',\n  templateUrl: 'extensible-bulk-device-registration-button.component.html'\n})\n\nexport class ExtensibleBulkDeviceRegistrationButtonComponent implements OnInit {\n  bulkProvidersMetaData: Promise<ExtensibleDeviceRegistrationProvider[]>;\n\n  constructor(\n    private bulkExtensibleDeviceRegistrationService: BulkExtensibleDeviceRegistrationService,\n    private modalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.bulkProvidersMetaData = this.bulkExtensibleDeviceRegistrationService.getDeviceRegistrationProviders();\n  }\n\n  click(contextPath) {\n    this.modalService.show(ExtensibleBulkDeviceRegistrationModalComponent, {\n      initialState: { contextPath } as Partial<ExtensibleBulkDeviceRegistrationModalComponent>,\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkDeviceRegistrationModalComponent } from './bulk-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationProvider } from '../extensible/base-device-registration.model';\n\n@Component({\n  selector: 'extensible-device-registration-component',\n  templateUrl: 'bulk-device-registration-button.component.html'\n})\n\nexport class BulkDeviceRegistrationButtonComponent {\n  bulkProvidersMetaData: Promise<ExtensibleDeviceRegistrationProvider[]>;\n\n  constructor(\n    private modalService: BsModalService\n  ) {\n  }\n\n  click() {\n    this.modalService.show(BulkDeviceRegistrationModalComponent, {\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    });\n  }\n\n}\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ExtensionFactory, ExtensionPoint, fromTriggerOnce } from '@c8y/ngx-components';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, startWith } from 'rxjs/operators';\nimport { RegisterDeviceItem } from './RegisterDeviceItem';\n\nexport type RegisterDeviceExtension = RegisterDeviceItem | RegisterDeviceItem[] | ExtensionFactory<RegisterDeviceItem>;\nexport const HOOK_DEVICE_REGISTRATION = new InjectionToken<RegisterDeviceExtension>('RegisterDevicesFactory');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterDeviceExtensionService implements ExtensionPoint<RegisterDeviceExtension> {\n  items$: Observable<RegisterDeviceItem[]>;\n  factories: RegisterDeviceExtension[] = [];\n  refreshTrigger: Subject<any> = new Subject();\n\n  constructor(private injector: Injector, router: Router) {\n    this.items$ = fromTriggerOnce(\n      router,\n      [this.refreshTrigger],\n      [() => this.injector.get(HOOK_DEVICE_REGISTRATION, []), () => this.factories, this]\n    ).pipe(startWith([]), shareReplay(1));\n  }\n\n  refresh() {\n    this.refreshTrigger.next();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RegisterDeviceService } from '../register-device.service';\nimport { RegisterDeviceExtensionService } from './register-device-extension.service';\n\n@Component({\n  selector: 'c8y-register-device-dropdown',\n  templateUrl: './register-device-dropdown.component.html'\n})\nexport class RegisterDeviceDropdownComponent {\n  single$ = this.registerDeviceExtensionService.items$.pipe(\n    map(items => items.filter(item => item.category === 'single').sort((a, b) =>  b.priority - a.priority))\n  );\n\n  bulk$ = this.registerDeviceExtensionService.items$.pipe(\n    map(items => items.filter(item => item.category === 'bulk').sort((a, b) =>  b.priority - a.priority))\n  );\n\n  limit$: Observable<boolean> = this.registerDeviceService.limit$.pipe(map(limit => limit.isReached));\n\n  constructor(\n    private registerDeviceExtensionService: RegisterDeviceExtensionService,\n    private registerDeviceService: RegisterDeviceService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { GeneralDeviceRegistrationButtonComponent } from './general/general-device-registration-button.component';\nimport { ExtensibleDeviceRegistrationButtonComponent } from './extensible/single/extensible-device-registration-button.component';\nimport { ExtensibleBulkDeviceRegistrationButtonComponent } from './extensible/bulk/extensible-bulk-device-registration-button.component';\nimport { BulkDeviceRegistrationButtonComponent } from './bulk/bulk-device-registration-button.component';\nimport { RegisterDeviceItem, RegisterDeviceFactory } from './dropdown/RegisterDeviceItem';\n\n@Injectable()\nexport class DeviceRegistrationFactory implements RegisterDeviceFactory {\n  get() {\n    return [{\n      template: GeneralDeviceRegistrationButtonComponent,\n      priority: 100,\n      category: 'single'\n    } as RegisterDeviceItem, {\n      template: ExtensibleDeviceRegistrationButtonComponent,\n      priority: 50,\n      category: 'single'\n    } as RegisterDeviceItem, {\n      template: ExtensibleBulkDeviceRegistrationButtonComponent,\n      priority: 50,\n      category: 'bulk'\n    } as RegisterDeviceItem, {\n      template: BulkDeviceRegistrationButtonComponent,\n      priority: 100,\n      category: 'bulk'\n    } as RegisterDeviceItem];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {\n  CommonModule,\n  CoreModule,\n  DeviceBootstrapRealtimeService,\n  DynamicFormsModule,\n  HOOK_NAVIGATOR_NODES,\n  StepperModule\n} from '@c8y/ngx-components';\nimport { DeviceRegistrationViewComponent } from './device-registration-view.component';\nimport { GeneralDeviceRegistrationComponent } from './general/general-device-registration.component';\nimport { GeneralDeviceRegistrationButtonComponent } from './general/general-device-registration-button.component';\nimport { RegisterDeviceNavigationFactory } from './register-device-navigation.factory';\nimport { RegisterDeviceService } from './register-device.service';\nimport { ExtensibleDeviceRegistrationButtonComponent } from './extensible/single/extensible-device-registration-button.component';\nimport { ExtensibleDeviceRegistrationModalComponent } from './extensible/single/extensible-device-registration-modal.component';\nimport { ExtensibleDeviceRegistrationService } from './extensible/single/extensible-device-registration.service';\nimport { ExtensibleDeviceRegistrationStepperComponent } from './extensible/single/extensible-device-registration-stepper.component';\nimport { ExtensibleBulkDeviceRegistrationModalComponent } from './extensible/bulk/extensible-bulk-device-registration-modal.component';\nimport { BulkExtensibleDeviceRegistrationService } from './extensible/bulk/extensible-bulk-device-registration.service';\nimport { BulkDeviceRegistrationModalComponent } from './bulk/bulk-device-registration-modal.component';\nimport { ExtensibleBulkDeviceRegistrationButtonComponent } from './extensible/bulk/extensible-bulk-device-registration-button.component';\nimport { BulkDeviceRegistrationButtonComponent } from './bulk/bulk-device-registration-button.component';\nimport { RegisterDeviceDropdownComponent } from './dropdown/register-device-dropdown.component';\nimport { HOOK_DEVICE_REGISTRATION } from './dropdown/register-device-extension.service';\nimport { DeviceRegistrationFactory } from './register-device.factory';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\n\nconst routes: Routes = [\n  {\n    path: 'deviceregistration',\n    component: DeviceRegistrationViewComponent,\n  }\n];\n\n@NgModule({\n  imports: [BsDropdownModule, PopoverModule, CommonModule, CoreModule, StepperModule, DynamicFormsModule, RouterModule.forChild(routes)],\n  declarations: [\n    DeviceRegistrationViewComponent,\n    GeneralDeviceRegistrationComponent,\n    GeneralDeviceRegistrationButtonComponent,\n    BulkDeviceRegistrationModalComponent,\n    BulkDeviceRegistrationButtonComponent,\n    ExtensibleDeviceRegistrationButtonComponent,\n    ExtensibleDeviceRegistrationModalComponent,\n    ExtensibleDeviceRegistrationStepperComponent,\n    ExtensibleBulkDeviceRegistrationModalComponent,\n    ExtensibleBulkDeviceRegistrationButtonComponent,\n    RegisterDeviceDropdownComponent\n  ],\n  providers: [{\n    provide: HOOK_DEVICE_REGISTRATION,\n    useClass: DeviceRegistrationFactory,\n    multi: true\n  },\n  {\n    provide: HOOK_NAVIGATOR_NODES,\n    useClass: RegisterDeviceNavigationFactory,\n    multi: true\n  },\n    DeviceBootstrapRealtimeService,\n    RegisterDeviceService,\n    ExtensibleDeviceRegistrationService,\n    BulkExtensibleDeviceRegistrationService,\n  ],\n  entryComponents: [\n    GeneralDeviceRegistrationComponent,\n    ExtensibleBulkDeviceRegistrationButtonComponent,\n    BulkDeviceRegistrationModalComponent,\n    ExtensibleDeviceRegistrationModalComponent,\n    RegisterDeviceDropdownComponent\n  ]\n})\nexport class RegisterDeviceModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BulkDeviceRegistrationButtonComponent as ɵc} from './bulk/bulk-device-registration-button.component';\nexport {BulkDeviceRegistrationModalComponent as ɵb} from './bulk/bulk-device-registration-modal.component';\nexport {DeviceRegistrationViewComponent as ɵa} from './device-registration-view.component';\nexport {RegisterDeviceDropdownComponent as ɵl} from './dropdown/register-device-dropdown.component';\nexport {BaseExtensibleDeviceRegistrationService as ɵf} from './extensible/base-extensible-device-registration.service';\nexport {ExtensibleBulkDeviceRegistrationButtonComponent as ɵk} from './extensible/bulk/extensible-bulk-device-registration-button.component';\nexport {ExtensibleBulkDeviceRegistrationModalComponent as ɵi} from './extensible/bulk/extensible-bulk-device-registration-modal.component';\nexport {BulkExtensibleDeviceRegistrationService as ɵj} from './extensible/bulk/extensible-bulk-device-registration.service';\nexport {ExtensibleDeviceRegistrationButtonComponent as ɵd} from './extensible/single/extensible-device-registration-button.component';\nexport {ExtensibleDeviceRegistrationModalComponent as ɵg} from './extensible/single/extensible-device-registration-modal.component';\nexport {ExtensibleDeviceRegistrationStepperComponent as ɵh} from './extensible/single/extensible-device-registration-stepper.component';\nexport {ExtensibleDeviceRegistrationService as ɵe} from './extensible/single/extensible-device-registration.service';\nexport {RegisterDeviceNavigationFactory as ɵm} from './register-device-navigation.factory';"],"names":["bulkSchema"],"mappings":"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"}