{"version":3,"file":"c8y-ngx-components-repository-software.js","sources":["../../repository/software/list/add-software-modal.component.ts","../../repository/software/list/columns/description.grid-column.ts","../../repository/software/list/columns/device-type.cell-renderer.component.ts","../../repository/software/list/columns/device-type.grid-column.ts","../../repository/software/list/columns/name.cell-renderer.component.ts","../../repository/software/list/columns/name.grid-column.ts","../../repository/software/list/columns/software-type.cell-renderer.component.ts","../../repository/software/list/columns/software-type.filtering-form-renderer.component.ts","../../repository/software/list/columns/software-type.grid-column.ts","../../repository/software/list/columns/versions.cell-renderer.component.ts","../../repository/software/list/columns/versions.grid-column.ts","../../repository/software/list/software-list.component.ts","../../repository/software/list/software-details.component.ts","../../repository/software/list/software-repository-navigation-factory.ts","../../repository/software/list/software-repository-list.module.ts","../../repository/software/device-tab/device-software-changes.component.ts","../../repository/software/device-tab/device-software.service.ts","../../repository/software/device-tab/device-software-list.component.ts","../../repository/software/device-tab/installed-software.component.ts","../../repository/software/device-tab/software-device-tab.component.ts","../../repository/software/device-tab/software-device-tab.guard.ts","../../repository/software/device-tab/software-repository-device-tab.module.ts","../../repository/software/software-repository.module.ts","../../repository/software/c8y-ngx-components-repository-software.ts"],"sourcesContent":["import { Component, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport {\n  RepositoryType,\n  ModalModel,\n  RepositoryCategory,\n  RepositoryService\n} from '@c8y/ngx-components/repository/shared';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { isUndefined, get, assign } from 'lodash-es';\nimport { BehaviorSubject, Subscription, from } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap } from 'rxjs/operators';\nimport { PickedFiles } from '@c8y/ngx-components';\nimport { IManagedObject } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-add-software-software-modal',\n  templateUrl: 'add-software-modal.component.html'\n})\nexport class AddSoftwareModalComponent {\n  @ViewChild('softwareForm', { static: false }) form: NgForm;\n  @Output() saved: EventEmitter<RepositoryCategory> = new EventEmitter<RepositoryCategory>();\n  onInput: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  model: ModalModel = {\n    selected: undefined,\n    version: undefined,\n    description: undefined,\n    deviceType: undefined,\n    softwareType: undefined,\n    binary: {\n      file: undefined,\n      url: undefined\n    }\n  };\n\n  softwaresResult;\n  saving = false;\n  softwarePreselected: boolean = false;\n  textForSoftwareUrlPopover: string =\n    gettext(`Path for binaries can vary depending on device agent implementation, for example:\n    /software/binaries/software1.bin\n    https://software/binary/123\n    ftp://software/binary/123.tar.gz\n  `);\n  private inputSubscription$: Subscription;\n\n  constructor(\n    private modal: BsModalRef,\n    private repositoryService: RepositoryService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.setInitialState();\n    this.loadSoftwares();\n  }\n\n  setInitialState() {\n    if (this.model.selected) {\n      this.softwarePreselected = true;\n    }\n  }\n\n  loadSoftwares() {\n    this.inputSubscription$ = this.onInput\n      .pipe(\n        tap(() => {\n          if (!this.softwarePreselected) {\n            this.model.description = null;\n            if (this.form) {\n              this.form.form.get('description').reset();\n            }\n          }\n        }),\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => this.getSoftwareResult(searchStr))\n      )\n      .subscribe(result => {\n        this.softwaresResult = result;\n      });\n  }\n\n  getSoftwareResult(searchStr: string) {\n    return from(\n      this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {\n        partialName: searchStr,\n        skipLegacy: true\n      })\n    );\n  }\n\n  async save() {\n    this.saving = true;\n    this.repositoryService\n      .create(this.model, RepositoryType.SOFTWARE)\n      .then(savedSoftware => {\n        this.successMsg();\n        this.saving = false;\n        this.saved.next(savedSoftware);\n        this.cancel();\n      })\n      .catch(e => {\n        this.saving = false;\n        this.saved.error(e);\n        this.cancel();\n      });\n  }\n\n  successMsg() {\n    const msg = gettext('Software added.');\n    this.alert.success(msg);\n  }\n\n  cancel() {\n    this.modal.hide();\n    this.saved.complete();\n  }\n\n  ngOnDestroy() {\n    this.inputSubscription$.unsubscribe();\n  }\n\n  onFile(dropped: PickedFiles) {\n    if (!isUndefined(dropped.url)) {\n      this.model.binary = {\n        url: dropped.url\n      };\n      return;\n    } else if (dropped.droppedFiles) {\n      this.model.binary = {\n        file: dropped.droppedFiles[0].file\n      };\n      return;\n    } else {\n      this.model.binary = {\n        file: undefined,\n        url: undefined\n      };\n    }\n  }\n\n  onSoftwareSelect(software: IManagedObject) {\n    assign(this.model, {\n      selected: software,\n      description: software.description,\n      deviceType: get(software, 'c8y_Filter.type'),\n      softwareType: software\n    });\n  }\n}\n","import { ColumnConfig, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\n\nexport class DescriptionGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'description';\n    this.path = 'description';\n    this.header = gettext('Description');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'descriptions',\n        label: gettext('Filter software by description'),\n        addText: gettext('Add next`description`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: gettext('Cloud connectivity software')\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.descriptions.length) {\n          filter.description = { __in: model.descriptions };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  templateUrl: './device-type.cell-renderer.component.html'\n})\nexport class DeviceTypeCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { ColumnConfig, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { DeviceTypeCellRendererComponent } from './device-type.cell-renderer.component';\n\nexport class DeviceTypeGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'deviceType';\n    this.path = 'c8y_Filter.type';\n    this.header = gettext('Device type');\n    this.cellRendererComponent = DeviceTypeCellRendererComponent;\n\n    this.filterable = true;\n\n    this.filteringConfig = {\n      fields: [\n        ...getBasicInputArrayFormFieldConfig({\n          key: 'types',\n          label: gettext('Filter software by device type'),\n          addText: gettext('Add next`type`'),\n          tooltip: gettext('Use * as a wildcard character'),\n          placeholder: 'c8y_Linux',\n          optional: true\n        }),\n        {\n          key: 'noDeviceType',\n          type: 'switch',\n          templateOptions: {\n            label: gettext('No device type')\n          }\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = { __or: {} };\n        if (model.types?.length) {\n          filter.__or = {\n            'c8y_Filter.type': { __in: model.types }\n          };\n        }\n        if (model.noDeviceType) {\n          filter.__or = {\n            ...filter.__or,\n            __or: {\n              __not: { __has: 'c8y_Filter.type' },\n              'c8y_Filter.type': ''\n            }\n          };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    <a [routerLink]=\"[context.item.id]\" [title]=\"context.item.name\" class=\"interact\">\n      {{ context.item.name }}\n    </a>\n  `\n})\nexport class NameCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { ColumnConfig, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { NameCellRendererComponent } from './name.cell-renderer.component';\n\nexport class SoftwareNameGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'name';\n    this.path = 'name';\n    this.header = gettext('Name');\n    this.cellRendererComponent = NameCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'names',\n        label: gettext('Filter software by name'),\n        addText: gettext('Add next`name`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: gettext('Cloud connectivity')\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.names.length) {\n          filter.name = { __in: model.names };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  templateUrl: './software-type.cell-renderer.component.html'\n})\nexport class SoftwareTypeCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport { IManagedObject, IResultList, QueriesUtil } from '@c8y/client';\nimport { FilteringFormRendererContext, gettext, TypeaheadComponent } from '@c8y/ngx-components';\nimport { DeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { cloneDeep, uniqBy } from 'lodash-es';\nimport { BehaviorSubject, NEVER, Observable, pipe, UnaryFunction } from 'rxjs';\nimport { debounceTime, map, switchMap, tap } from 'rxjs/operators';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';\n\n@Component({\n  templateUrl: './software-type.filtering-form-renderer.component.html',\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class SoftwareTypeFilteringFormRendererComponent implements OnInit, AfterViewInit {\n  selectedType: IManagedObject;\n  softwareWithType$: Observable<IResultList<IManagedObject>> = NEVER;\n  search$: BehaviorSubject<string> = new BehaviorSubject(null);\n  filterPipe: UnaryFunction<unknown, unknown> = pipe(tap());\n  typeaheadPlaceholder = gettext('Start typing to search, for example, {{ example }}');\n  @ViewChild(TypeaheadComponent, { static: false }) typeahead: TypeaheadComponent;\n  private queriesUtil: QueriesUtil = new QueriesUtil();\n  private softwareTypes: Set<string> = new Set();\n\n  constructor(\n    public context: FilteringFormRendererContext,\n    public changeDetectorRef: ChangeDetectorRef,\n    private repositoryService: RepositoryService,\n    private elementRef: ElementRef\n  ) {\n    this.softwareWithType$ = this.search$.pipe(\n      debounceTime(300),\n      tap(() => this.softwareTypes.clear()),\n      switchMap((searchString: string) => {\n        let query = this.queriesUtil.prependOrderbys({}, [{ softwareType: 1 }]);\n        const filter = !!searchString\n          ? {\n              softwareType: {\n                __eq: `*${searchString}*`\n              }\n            }\n          : {\n              __has: 'softwareType'\n            };\n        query = this.queriesUtil.addAndFilter(query, filter);\n\n        return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {\n          skipDefaultOrder: true,\n          query,\n          params: {\n            pageSize: 200\n          }\n        });\n      })\n    );\n\n    this.filterPipe = pipe(\n      map(this.removeDuplicatesBySoftwareType.bind(this)),\n      tap(() => this.changeDetectorRef.detectChanges())\n    );\n  }\n\n  @HostListener('keydown.enter', ['$event']) onEnterKeyDown(event: KeyboardEvent) {\n    event.stopPropagation();\n    this.applyFilter();\n  }\n  @HostListener('keydown.escape', ['$event']) onEscapeKeyDown(event: KeyboardEvent) {\n    event.stopPropagation();\n    this.context.resetFilter();\n  }\n\n  ngOnInit(): void {\n    const column: DeviceGridColumn = this.context.property;\n    this.selectedType = cloneDeep(column.externalFilterQuery || {});\n  }\n\n  ngAfterViewInit(): void {\n    this.typeahead?.searchControl?.nativeElement?.focus();\n    try {\n      this.elementRef.nativeElement.parentElement.parentElement.style.overflow = 'visible';\n    } catch (ex) {\n      // intentionally empty\n    }\n  }\n\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: this.selectedType\n    });\n  }\n\n  private removeDuplicatesBySoftwareType(list: IManagedObject[]): IManagedObject[] {\n    const uniqueBySoftwareType: IManagedObject[] = uniqBy(list, 'softwareType').filter(\n      (sw: IManagedObject) => !this.softwareTypes.has(sw.softwareType)\n    );\n    uniqueBySoftwareType.forEach((sw: IManagedObject) => this.softwareTypes.add(sw.softwareType));\n    return uniqueBySoftwareType;\n  }\n}\n","import { ColumnConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { SoftwareTypeCellRendererComponent } from './software-type.cell-renderer.component';\nimport { SoftwareTypeFilteringFormRendererComponent } from './software-type.filtering-form-renderer.component';\n\nexport class SoftwareTypeGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'type';\n    this.path = 'softwareType';\n    this.header = gettext('Software type');\n    this.cellRendererComponent = SoftwareTypeCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringFormRendererComponent = SoftwareTypeFilteringFormRendererComponent;\n    this.filteringConfig = {\n      getFilter(model) {\n        const filter: any = {};\n        if (model.softwareType) {\n          filter.softwareType = { __eq: model.softwareType };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\nimport { CellRendererContext, memoize } from '@c8y/ngx-components';\nimport { property } from 'lodash-es';\nimport { Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { RepositoryService } from '@c8y/ngx-components/repository/shared';\n\n@Component({\n  templateUrl: './versions.cell-renderer.component.html'\n})\nexport class VersionsCellRendererComponent {\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  software;\n  constructor(public context: CellRendererContext, private repositoryService: RepositoryService) {\n    this.software = context.item;\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(software: IManagedObject): Observable<number | string> {\n    return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));\n  }\n}\n","import { ColumnConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { VersionsCellRendererComponent } from './versions.cell-renderer.component';\n\nexport class VersionsGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'versions';\n    this.header = gettext('Versions');\n    this.cellRendererComponent = VersionsCellRendererComponent;\n    this.sortable = false;\n  }\n}\n","import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport {\n  ActionControl,\n  AlertService,\n  BuiltInActionType,\n  DataSourceModifier,\n  gettext,\n  ModalService,\n  ServerSideDataResult,\n  Status\n} from '@c8y/ngx-components';\nimport { DeviceGridColumn, DeviceGridService } from '@c8y/ngx-components/device-grid';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';\nimport { AddSoftwareModalComponent } from './add-software-modal.component';\nimport { DescriptionGridColumn } from './columns/description.grid-column';\nimport { DeviceTypeGridColumn } from './columns/device-type.grid-column';\nimport { SoftwareNameGridColumn } from './columns/name.grid-column';\nimport { SoftwareTypeGridColumn } from './columns/software-type.grid-column';\nimport { VersionsGridColumn } from './columns/versions.grid-column';\n\n@Component({\n  selector: 'c8y-software-list',\n  templateUrl: 'software-list.component.html'\n})\nexport class SoftwareListComponent implements OnInit {\n  sizeRequest: Promise<number>;\n  sizeRequestDone = false;\n  refresh$: EventEmitter<void> = new EventEmitter();\n\n  columns: DeviceGridColumn[] = [\n    new SoftwareNameGridColumn(),\n    new DescriptionGridColumn(),\n    new DeviceTypeGridColumn(),\n    new SoftwareTypeGridColumn(),\n    new VersionsGridColumn()\n  ];\n  actionControls: ActionControl[] = [];\n  serverSideDataCallback: any;\n  pagination = {\n    pageSize: 50,\n    currentPage: 1\n  };\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private gridService: DeviceGridService,\n    private modalService: ModalService,\n    private bsModalService: BsModalService,\n    private translateService: TranslateService,\n    private alertService: AlertService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {\n    this.serverSideDataCallback = this.onDataSourceModifier.bind(this);\n    this.sizeRequest = this.repositoryService\n      .listRepositoryEntries(RepositoryType.SOFTWARE, {\n        skipDefaultOrder: true,\n        params: { pageSize: 1 }\n      })\n      .then(response => {\n        this.sizeRequestDone = true;\n        return response?.paging?.totalPages;\n      });\n  }\n\n  ngOnInit(): void {\n    this.actionControls.push({\n      type: BuiltInActionType.Edit,\n      callback: this.editSoftware.bind(this)\n    });\n    this.actionControls.push({\n      type: BuiltInActionType.Delete,\n      callback: this.deleteSoftware.bind(this)\n    });\n  }\n\n  async onDataSourceModifier(\n    dataSourceModifier: DataSourceModifier\n  ): Promise<ServerSideDataResult> {\n    let serverSideDataResult: ServerSideDataResult;\n\n    const dataRequest: Promise<IResultList<IManagedObject>> =\n      this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {\n        query: this.gridService.getQueryObj(dataSourceModifier.columns),\n        skipDefaultOrder: true,\n        params: {\n          pageSize: dataSourceModifier.pagination.pageSize,\n          currentPage: dataSourceModifier.pagination.currentPage\n        }\n      });\n\n    const filtererdSizeRequest: Promise<number> = this.repositoryService\n      .listRepositoryEntries(RepositoryType.SOFTWARE, {\n        skipDefaultOrder: true,\n        query: this.gridService.getQueryObj(dataSourceModifier.columns),\n        params: { pageSize: 1 }\n      })\n      .then(response => response?.paging?.totalPages);\n\n    const [dataResponse, size, filteredSize] = await Promise.all([\n      dataRequest,\n      this.sizeRequest,\n      filtererdSizeRequest\n    ]);\n\n    const { res, data, paging } = dataResponse;\n\n    serverSideDataResult = {\n      res,\n      data,\n      paging,\n      filteredSize,\n      size\n    };\n\n    return serverSideDataResult;\n  }\n\n  addSoftware() {\n    const config: ModalOptions<AddSoftwareModalComponent> = {\n      class: 'modal-sm',\n      ignoreBackdropClick: true\n    };\n    const modalRef = this.bsModalService.show(AddSoftwareModalComponent, config);\n    modalRef.content.saved.subscribe(savedSoftware => this.editSoftware(savedSoftware));\n  }\n\n  editSoftware(software: Partial<IManagedObject>) {\n    this.router.navigate([software.id], { relativeTo: this.activatedRoute });\n  }\n\n  async deleteSoftware(software: IManagedObject) {\n    try {\n      const title = gettext('Delete software');\n      const body = `\n        ${this.translateService.instant(\n          gettext('You are about to delete software \"{{ name }}\" with all its versions.'),\n          { name: software.name }\n        )}\n        ${this.translateService.instant(gettext('This operation is irreversible.'))}\n        ${this.translateService.instant(gettext('Do you want to proceed?'))}\n      `;\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(software);\n      this.alertService.success(gettext('Software deleted.'));\n      this.refresh$.next();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  trackByName(_index, column: DeviceGridColumn): string {\n    return column.name;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { AlertService, gettext, memoize, ModalService, Status } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { BehaviorSubject, from, merge, Observable, Subject } from 'rxjs';\nimport {\n  distinctUntilKeyChanged,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { RepositoryService } from '@c8y/ngx-components/repository/shared';\nimport { AddSoftwareModalComponent } from './add-software-modal.component';\nimport { SoftwareTypeComponent } from '@c8y/ngx-components/repository/shared';\n\n@Component({\n  selector: 'c8y-software-details',\n  templateUrl: './software-details.component.html'\n})\nexport class SoftwareDetailsComponent implements OnInit, OnDestroy {\n  @ViewChild(SoftwareTypeComponent, { static: true })\n  softwareType: SoftwareTypeComponent;\n\n  reload$: Subject<void> = new Subject();\n  reloading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  softwareTypeObject: IManagedObject;\n  isSoftwareTypeChanged: boolean = false;\n\n  updateSoftware$: Subject<Partial<IManagedObject>> = new Subject();\n  softwareUpdated$: Subject<IManagedObject> = new Subject();\n  baseVersionsUpdated$: Subject<void> = new Subject();\n\n  software$: Observable<IManagedObject> = merge(\n    this.activatedRoute.params.pipe(\n      map(params => params.id),\n      switchMap(id => from(this.inventoryService.detail(id).then(result => result.data)))\n    ),\n    this.reload$.pipe(\n      tap(() => this.reloading$.next(true)),\n      switchMap(() => this.activatedRoute.params),\n      map(params => params.id),\n      switchMap(id => from(this.inventoryService.detail(id).then(result => result.data))),\n      tap(() => this.reloading$.next(false))\n    ),\n    this.softwareUpdated$\n  ).pipe(shareReplay(1));\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = merge(\n    this.software$.pipe(distinctUntilKeyChanged('id')),\n    this.baseVersionsUpdated$,\n    this.reload$\n  ).pipe(\n    switchMap(() => this.software$),\n    switchMap(software => this.repositoryService.listBaseVersions(software)),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.software$.pipe(\n    map(software => this.repositoryService.isLegacyEntry(software)),\n    shareReplay(1)\n  );\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private inventoryService: InventoryService,\n    private repositoryService: RepositoryService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modalService: ModalService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.updateSoftware$\n      .pipe(\n        withLatestFrom(this.software$),\n        switchMap(([softwarePartial, software]) =>\n          this.inventoryService.update({\n            id: software.id,\n            ...softwarePartial\n          })\n        ),\n        map(({ data }) => data),\n        tap(software => this.softwareUpdated$.next(software)),\n        tap(() => this.alertService.success(gettext('Saved.'))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n\n    this.software$.subscribe(software => {\n      this.softwareTypeObject = software;\n    });\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  addBaseVersion() {\n    this.software$\n      .pipe(\n        take(1),\n        switchMap(software => {\n          const initialState = {\n            model: {\n              selected: software,\n              description: software.description\n            }\n          };\n          const config: ModalOptions<AddSoftwareModalComponent> = {\n            class: 'modal-sm',\n            ignoreBackdropClick: true,\n            initialState\n          };\n          const modalRef = this.bsModalService.show(AddSoftwareModalComponent, config);\n          return modalRef.content.saved;\n        })\n      )\n      .subscribe(() => this.baseVersionsUpdated$.next());\n  }\n\n  async deleteBaseVersion(baseVersion: IManagedObject) {\n    try {\n      const title = gettext('Delete software');\n      const body = `\n        ${this.translateService.instant(\n          gettext('You are about to delete software {{ version }}.'),\n          { version: baseVersion.c8y_Software.version }\n        )}\n        ${this.translateService.instant(gettext('This operation is irreversible.'))}\n        ${this.translateService.instant(gettext('Do you want to proceed?'))}\n      `;\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(baseVersion);\n      this.alertService.success(gettext('Software deleted.'));\n      this.baseVersionsUpdated$.next();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  onSelectSoftwareType(software) {\n    this.isSoftwareTypeChanged = !(\n      this.softwareTypeObject?.softwareType === software?.softwareType\n    );\n    this.softwareTypeObject = software;\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\n\n@Injectable()\nexport class SoftwareRepositoryNavigationFactory implements NavigatorNodeFactory {\n  node: NavigatorNode;\n\n  constructor() {\n    this.node = new NavigatorNode({\n      label: gettext('Software repository'),\n      path: 'software',\n      icon: 'c8y-tools',\n      parent: gettext('Management'),\n      priority: 900\n    });\n  }\n\n  get(): NavigatorNode {\n    return this.node;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NameCellRendererComponent } from './columns/name.cell-renderer.component';\nimport { SoftwareTypeCellRendererComponent } from './columns/software-type.cell-renderer.component';\nimport { SoftwareTypeFilteringFormRendererComponent } from './columns/software-type.filtering-form-renderer.component';\nimport { DeviceTypeCellRendererComponent } from './columns/device-type.cell-renderer.component';\nimport { VersionsCellRendererComponent } from './columns/versions.cell-renderer.component';\nimport { SoftwareListComponent } from './software-list.component';\nimport { SoftwareDetailsComponent } from './software-details.component';\nimport { AddSoftwareModalComponent } from './add-software-modal.component';\nimport {\n  CoreModule,\n  FormsModule,\n  HOOK_NAVIGATOR_NODES,\n  HOOK_ROUTE,\n  Route\n} from '@c8y/ngx-components';\nimport { SoftwareRepositoryNavigationFactory } from './software-repository-navigation-factory';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { RouterModule } from '@angular/router';\nimport { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';\nimport { DeviceGridModule } from '@c8y/ngx-components/device-grid';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule,\n    FormsModule,\n    DeviceGridModule,\n    PopoverModule,\n    RouterModule,\n    SharedRepositoryModule\n  ],\n  declarations: [\n    SoftwareListComponent,\n    SoftwareDetailsComponent,\n    AddSoftwareModalComponent,\n    NameCellRendererComponent,\n    SoftwareTypeCellRendererComponent,\n    SoftwareTypeFilteringFormRendererComponent,\n    DeviceTypeCellRendererComponent,\n    VersionsCellRendererComponent\n  ],\n  entryComponents: [SoftwareListComponent, SoftwareDetailsComponent, AddSoftwareModalComponent]\n})\nexport class SoftwareRepositoryListModule {\n  static forRoot(): ModuleWithProviders<SoftwareRepositoryListModule> {\n    return {\n      ngModule: SoftwareRepositoryListModule,\n      providers: [\n        {\n          provide: HOOK_NAVIGATOR_NODES,\n          useClass: SoftwareRepositoryNavigationFactory,\n          multi: true\n        },\n        {\n          provide: HOOK_ROUTE,\n          useValue: [\n            {\n              path: 'software',\n              component: SoftwareListComponent\n            },\n            {\n              path: 'software/:id',\n              component: SoftwareDetailsComponent\n            }\n          ] as Route[],\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { gettext } from '@c8y/ngx-components';\nimport { DeviceSoftwareChange } from '@c8y/ngx-components/repository/shared';\n\n@Component({\n  selector: 'c8y-device-software-changes',\n  templateUrl: 'device-software-changes.component.html'\n})\nexport class DeviceSoftwareChangesComponent implements OnChanges {\n  @Input() changes: DeviceSoftwareChange[];\n  @Input() changesInProgress: boolean;\n  @Output() clear: EventEmitter<void> = new EventEmitter();\n  @Output() drop: EventEmitter<DeviceSoftwareChange> = new EventEmitter();\n  @Output() apply: EventEmitter<void> = new EventEmitter();\n  @Output() hideSoftwareChanges = new EventEmitter<void>();\n\n  get applyButtonLabel() {\n    return this.changesInProgress ? gettext('Applying changes…') : gettext('Apply changes');\n  }\n\n  changes$ = new BehaviorSubject<DeviceSoftwareChange[]>([]);\n  installations$ = this.changes$.pipe(\n    map(changes => {\n      return changes.filter(change => change.action === 'install');\n    })\n  );\n\n  removals$ = this.changes$.pipe(\n    map(changes => {\n      return changes.filter(change => change.action === 'delete');\n    })\n  );\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.changes) {\n      this.changes$.next(changes.changes.currentValue);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IResultList, Paging } from '@c8y/client';\nimport {\n  AdvancedSoftwareService,\n  DeviceSoftware,\n  FilterCriteria\n} from '@c8y/ngx-components/repository/shared';\nimport { set } from 'lodash-es';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { share, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceSoftwareService {\n  /**\n   * Indicates whether device software data is currently being loaded.\n   */\n  get loading$(): Observable<boolean> {\n    return this.loadingSubject$.asObservable().pipe(share());\n  }\n\n  private reloadSubject$ = new BehaviorSubject<void>(null);\n  private loadingSubject$ = new Subject<boolean>();\n\n  constructor(private advancedSoftwareService: AdvancedSoftwareService) {}\n\n  /**\n   * Trigger device software data reload.\n   */\n  reload() {\n    this.reloadSubject$.next();\n  }\n\n  /**\n   * Retrieves the software list that is installed on a given device.\n   *\n   * @param deviceId ID of the device to retrieve software data for\n   * @param filterCriteria Criteria that software items are filtered by.\n   * @param legacySoftwareList If provided no data will be fetched from backend. The provided software list\n   * will be filtered by the specified filter criteria.\n   *\n   * @returns The software items installed on the specified device filtered by the specified criteria.\n   */\n  getSoftwareList(\n    deviceId,\n    filterCriteria: FilterCriteria,\n    legacySoftwareList?: DeviceSoftware[]\n  ): Observable<IResultList<DeviceSoftware>> {\n    this.loadingSubject$.next(true);\n\n    return this.reloadSubject$.pipe(\n      switchMap(() => {\n        const softwareList$ = !!legacySoftwareList\n          ? this.getLegacySoftwareList(legacySoftwareList, filterCriteria)\n          : this.getAdvancedSoftwareList(deviceId, filterCriteria);\n        return softwareList$.then(resultList => {\n          this.loadingSubject$.next(false);\n          return resultList;\n        });\n      }),\n      share()\n    );\n  }\n\n  private getAdvancedSoftwareList(\n    deviceId,\n    filterCriteria: FilterCriteria\n  ): Promise<IResultList<DeviceSoftware>> {\n    const queryFilter = {\n      deviceId,\n      currentPage: 1,\n      pageSize: 50,\n      withTotalPages: true\n    };\n    if (filterCriteria?.name) {\n      set(queryFilter, 'name', `*${filterCriteria.name}*`);\n    }\n    if (filterCriteria?.softwareType) {\n      set(queryFilter, 'type', `${filterCriteria.softwareType}`);\n    }\n    return this.advancedSoftwareService.list(queryFilter) as unknown as Promise<\n      IResultList<DeviceSoftware>\n    >;\n  }\n\n  private getLegacySoftwareList(\n    legacySoftwareList: DeviceSoftware[],\n    filterCriteria: FilterCriteria\n  ): Promise<IResultList<DeviceSoftware>> {\n    const data = filterCriteria\n      ? legacySoftwareList.filter(item => {\n          let match = true;\n          if (filterCriteria?.name) {\n            match = match && item.name?.includes(filterCriteria.name);\n          }\n          if (filterCriteria?.softwareType) {\n            match = match && item.softwareType === filterCriteria.softwareType;\n          }\n\n          return match;\n        })\n      : legacySoftwareList;\n    return Promise.resolve({\n      data,\n      res: null,\n      paging: {\n        totalPages: data.length\n      } as Paging<DeviceSoftware>\n    });\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport {\n  DeviceSoftware,\n  DeviceSoftwareChange,\n  FilterCriteria\n} from '@c8y/ngx-components/repository/shared';\nimport { filter, get } from 'lodash-es';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  share,\n  switchMap,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport { DeviceSoftwareService } from './device-software.service';\n\n@Component({\n  selector: 'c8y-device-software-list',\n  templateUrl: 'device-software-list.component.html'\n})\nexport class DeviceSoftwareListComponent implements OnInit, AfterContentInit, OnDestroy {\n  @Input() set softwareList(softwareList: DeviceSoftware[]) {\n    if (softwareList !== null) {\n      this.legacySoftwareList$.next(softwareList);\n    }\n  }\n  @Input() device: IManagedObject;\n  @Input() deviceSoftwareChanges: DeviceSoftwareChange[];\n  @Input() filterCriteria$: Observable<FilterCriteria> = of(null);\n  @Output() update = new EventEmitter<DeviceSoftware>();\n  @Output() remove = new EventEmitter<DeviceSoftware>();\n  @Output() onListEmpty: EventEmitter<boolean> = new EventEmitter();\n  softwareItems$: Observable<IResultList<DeviceSoftware>>;\n  showUpdate: boolean;\n  showRemove: boolean;\n  emptyList: boolean;\n  noSearchResults: boolean;\n  alreadyInstalledMessage = gettext('This software is already installed on the device');\n  supportsSoftwareOperations: boolean = false;\n\n  private readonly operationTypes = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];\n\n  private legacySoftwareList$: BehaviorSubject<DeviceSoftware[]> = new BehaviorSubject([]);\n  private destroyed$ = new Subject<void>();\n\n  constructor(private deviceSoftwareService: DeviceSoftwareService) {}\n\n  ngOnInit(): void {\n    this.softwareItems$ = combineLatest([\n      this.filterCriteria$.pipe(debounceTime(300), distinctUntilChanged()),\n      this.legacySoftwareList$\n    ]).pipe(\n      switchMap(([filterCriteria, legacySoftwareList]) =>\n        this.deviceSoftwareService\n          .getSoftwareList(this.device?.id, filterCriteria, legacySoftwareList)\n          .pipe(map(resultList => ({ resultList, filterCriteria })))\n      ),\n      tap(({ resultList, filterCriteria }) => {\n        this.notifyListEmpty(!resultList?.paging?.totalPages && !filterCriteria);\n        this.noSearchResults = !resultList?.paging?.totalPages && !!filterCriteria;\n      }),\n      map(({ resultList }) => resultList),\n      share(),\n      takeUntil(this.destroyed$)\n    );\n    const supportedOperations = get(this.device, 'c8y_SupportedOperations', []);\n    this.supportsSoftwareOperations = this.operationTypes.some(\n      operationType => supportedOperations.indexOf(operationType) > -1\n    );\n  }\n\n  ngAfterContentInit() {\n    this.showUpdate = this.update.observers.length > 0;\n    this.showRemove = this.remove.observers.length > 0;\n  }\n\n  isSoftwareGoingToBeChanged(software: DeviceSoftware): boolean {\n    const relevantChanges = filter(this.deviceSoftwareChanges, software);\n    return relevantChanges.length > 0;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  private notifyListEmpty(isEmpty: boolean): void {\n    this.emptyList = isEmpty;\n    this.onListEmpty.emit(isEmpty);\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { IManagedObject, IOperation, QueriesUtil } from '@c8y/client';\nimport {\n  gettext,\n  ISelectModalObject,\n  IUpdateItemEvent,\n  ModalSelectionMode\n} from '@c8y/ngx-components';\nimport {\n  DeviceSoftware,\n  DeviceSoftwareChange,\n  FilterCriteria,\n  RepositorySelectModalComponent,\n  RepositoryService,\n  RepositoryType\n} from '@c8y/ngx-components/repository/shared';\nimport { get } from 'lodash-es';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BehaviorSubject, combineLatest, from, Observable, of, pipe, Subject } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'c8y-installed-software',\n  templateUrl: 'installed-software.component.html'\n})\nexport class InstalledSoftwareComponent implements OnDestroy, OnInit {\n  @Input() device: IManagedObject;\n  @Input() softwareList: DeviceSoftware[];\n  @Input() deviceSoftwareChanges: DeviceSoftwareChange[];\n  @Input() deviceSoftwareChangesOperation: IOperation;\n  @Input() deviceSoftwareChangesInProgress: boolean;\n  @Input() typesQuery: object;\n  @Output() changes = new EventEmitter<DeviceSoftwareChange[]>();\n  @Output() showSoftwareChanges = new EventEmitter<void>();\n\n  @ViewChild('alreadyInstalledWarning', { static: true })\n  alreadyInstalledWarningTemplate: TemplateRef<any>;\n  alreadyInstalledMessage = gettext(\n    '{{ name }} (v. {{ version }}) is already installed on this device'\n  );\n  @ViewChild('loading', { static: true })\n  loadingTemplate: TemplateRef<any>;\n\n  @ViewChild('softwareType', { static: true })\n  softwareTypeTemplate: TemplateRef<any>;\n\n  showFilter: boolean = false;\n  supportsSoftwareOperations: boolean = false;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  softwareTypeFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  filterCriteria$: Observable<FilterCriteria>;\n\n  private readonly operationTypes = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];\n\n  private queriesUtil: QueriesUtil;\n  private modalSearch: (filterCriteria: FilterCriteria) => void;\n  private destroyed$: Subject<void> = new Subject();\n\n  constructor(private repository: RepositoryService, private bsModal: BsModalService) {\n    this.filterCriteria$ = combineLatest([this.textFilter$, this.softwareTypeFilter$]).pipe(\n      map(([textFilter, softwareTypeFilter]) => ({\n        name: textFilter,\n        softwareType: softwareTypeFilter\n      })),\n      map(filterCriteria =>\n        !filterCriteria.name && !filterCriteria.softwareType ? null : filterCriteria\n      )\n    );\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  ngOnInit(): void {\n    const supportedOperations = get(this.device, 'c8y_SupportedOperations', []);\n    this.supportsSoftwareOperations = this.operationTypes.some(\n      operationType => supportedOperations.indexOf(operationType) > -1\n    );\n  }\n\n  installSoftware() {\n    const { resultEmitter, choiceEmitter, updateInstallableList$ } =\n      this.displaySoftwareSelectModal({\n        title: gettext('Install software'),\n        subTitle: gettext('Available softwares matching the device type'),\n        labels: { ok: gettext('Install') },\n        showAdditionalFilter: true,\n        additionalFilterTemplate: this.softwareTypeTemplate,\n        repositoryEntriesWithVersions$: of([]),\n        repositoryEntriesWithVersionsFn$: modal =>\n          this.getInstallableSoftwareListWithVersions$(modal.content.searchTerm)\n      });\n\n    resultEmitter.pipe(takeUntil(this.destroyed$)).subscribe(softwareToInstall => {\n      this.emitSoftwareInstall(softwareToInstall);\n      this.showSoftwareChanges.emit();\n    });\n\n    choiceEmitter\n      .pipe(\n        this.isSoftwareInstalledOnDevicePipe(updateInstallableList$),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(({ item }) =>\n        updateInstallableList$.next({\n          object: item,\n          template: this.alreadyInstalledWarningTemplate,\n          mapper: object => {\n            object.installed = true;\n            return object;\n          }\n        })\n      );\n  }\n\n  updateSoftware(softwareToUpdate) {\n    const { resultEmitter, choiceEmitter, updateInstallableList$ } =\n      this.displaySoftwareSelectModal({\n        title: gettext('Update software'),\n        subTitle: gettext('Select one of the available software versions'),\n        labels: { ok: gettext('Update') },\n        noItemsMessage: gettext('No other software versions available.'),\n        showFilter: false,\n        repositoryEntriesWithVersions$: this.getSingleSoftwareWithVersions$(softwareToUpdate)\n      });\n\n    resultEmitter.pipe(takeUntil(this.destroyed$)).subscribe(softwareToInstall => {\n      this.emitSoftwareInstall(softwareToInstall);\n      this.showSoftwareChanges.emit();\n    });\n\n    choiceEmitter\n      .pipe(\n        this.isSoftwareInstalledOnDevicePipe(updateInstallableList$),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(({ item }) =>\n        updateInstallableList$.next({\n          object: item,\n          template: this.alreadyInstalledWarningTemplate,\n          mapper: object => {\n            object.installed = true;\n            return object;\n          }\n        })\n      );\n  }\n\n  removeSoftware(softwareToRemove) {\n    this.emitSoftwareRemoval([softwareToRemove]);\n  }\n\n  getInstallableSoftwareListWithVersions$(searchTerm$: BehaviorSubject<FilterCriteria>) {\n    const installedSoftwareNames = (this.softwareList || []).map(s => s.name);\n    return searchTerm$.pipe(\n      distinctUntilChanged(),\n      switchMap(searchTerm =>\n        this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {\n          query: searchTerm.softwareType\n            ? this.queriesUtil.addAndFilter(this.typesQuery, {\n                softwareType: searchTerm.softwareType\n              })\n            : this.typesQuery,\n          partialName: searchTerm?.name,\n          params: { pageSize: 100 }\n        })\n      ),\n      map(({ data }) => data),\n      map(softwareList => {\n        return softwareList.filter(software => {\n          return !installedSoftwareNames.includes(software.name);\n        });\n      }),\n      map(softwareList => this.attachVersions(softwareList)),\n      shareReplay(1)\n    );\n  }\n\n  getSingleSoftwareWithVersions$(software: DeviceSoftware) {\n    return from(\n      this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {\n        query: { name: software.name }\n      })\n    ).pipe(\n      map(({ data }) => data),\n      map(softwareList => this.attachVersions(softwareList)),\n      shareReplay(1)\n    );\n  }\n\n  attachVersions(softwareList: IManagedObject[]) {\n    softwareList.forEach(software => {\n      software.versions = this.repository.listBaseVersions(software);\n    });\n    return softwareList;\n  }\n\n  displaySoftwareSelectModal(initialStateOverrides) {\n    const initialState = {\n      repositoryType: RepositoryType.SOFTWARE,\n      mode: ModalSelectionMode.MULTI,\n      icon: 'c8y-tools',\n      disableSelected: false,\n      selected: this.softwareList,\n      ...initialStateOverrides\n    };\n    const modal = this.bsModal.show(RepositorySelectModalComponent, {\n      ignoreBackdropClick: true,\n      class: 'modal-sm',\n      initialState\n    });\n\n    if (initialStateOverrides.repositoryEntriesWithVersionsFn$) {\n      modal.content.repositoryEntriesWithVersions$ =\n        initialStateOverrides.repositoryEntriesWithVersionsFn$(modal);\n    }\n\n    this.modalSearch = modal.content.search.bind(modal.content);\n\n    modal.content.load.next();\n    return {\n      resultEmitter: modal.content.resultEmitter,\n      choiceEmitter: modal.content.onChoiceUpdated,\n      updateInstallableList$: modal.content.updateInstallableList$\n    };\n  }\n\n  search(filterCriteria: FilterCriteria) {\n    if (this.modalSearch) {\n      this.modalSearch(filterCriteria);\n    }\n  }\n\n  emitSoftwareInstall(items: DeviceSoftware[]) {\n    this.changes.emit(\n      items.map(item => {\n        return { ...item, action: 'install' };\n      })\n    );\n  }\n\n  emitSoftwareRemoval(items: DeviceSoftware[]) {\n    this.changes.emit(\n      items.map(item => {\n        return { ...item, action: 'delete' };\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  private isSoftwareInstalledOnDevicePipe(updateInstallableList$: Subject<IUpdateItemEvent<any>>) {\n    return pipe(\n      tap((item: ISelectModalObject) =>\n        updateInstallableList$.next({ object: item, template: this.loadingTemplate })\n      ),\n      map(item => ({\n        item,\n        software: (\n          (item.options || []).find(option => option.obj.id === (item as any).selectedId) || {}\n        ).obj\n      })),\n      mergeMap(({ item, software }) =>\n        from(\n          this.repository.isSoftwareInstalledOnDevice(this.device.id, software as DeviceSoftware)\n        ).pipe(map(installed => ({ item, installed })))\n      ),\n      tap(({ item }) => updateInstallableList$.next({ object: item })),\n      filter(({ installed }) => !!installed)\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IManagedObject, InventoryService, IOperation, OperationStatus } from '@c8y/client';\nimport {\n  AdvancedSoftwareService,\n  DeviceSoftware,\n  DeviceSoftwareChange,\n  RepositoryService,\n  RepositoryType\n} from '@c8y/ngx-components/repository/shared';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { DeviceSoftwareService } from './device-software.service';\n\n@Component({\n  selector: 'c8y-software-device-tab',\n  templateUrl: 'software-device-tab.component.html'\n})\nexport class SoftwareDeviceTabComponent implements OnInit {\n  deviceId: string | number = this.route.snapshot.parent.data.contextData.id;\n  device$ = new BehaviorSubject<IManagedObject>(this.route.snapshot.parent.data.contextData);\n  typesQuery$: Observable<object> = this.device$.pipe(\n    map(device => {\n      const deviceTypeQuery = this.repository.getDeviceTypeQuery(RepositoryType.SOFTWARE, device);\n      return this.repository.getSoftwareTypeQuery(device, deviceTypeQuery);\n    })\n  );\n  list$: Observable<DeviceSoftware[]> = this.device$.pipe(\n    switchMap(device =>\n      this.advancedSoftwareService\n        .isASMAvailable()\n        .then(isASMAvailable => ({ isASMAvailable, device }))\n    ),\n    map(({ isASMAvailable, device }) =>\n      // with ASM available software items will be retrieved directly in the\n      // device-software-list component\n      isASMAvailable ? undefined : this.repository.getDeviceSoftwareList(device)\n    )\n  );\n  changes$ = new BehaviorSubject<DeviceSoftwareChange[]>([]);\n  changesOperation$ = new BehaviorSubject<IOperation>(null);\n  changesInProgress$: Observable<boolean> = this.changesOperation$.pipe(\n    map(operation => this.isInProgress(operation))\n  );\n  reloading: boolean = false;\n  showSoftwareChanges: boolean = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private repository: RepositoryService,\n    private inventory: InventoryService,\n    private deviceSoftwareService: DeviceSoftwareService,\n    private advancedSoftwareService: AdvancedSoftwareService\n  ) {}\n\n  async ngOnInit() {\n    await this.loadDevice();\n    await this.loadOperation();\n  }\n\n  addChanges(requestedChanges: DeviceSoftwareChange[]) {\n    let stagedChanges = [...this.changes$.value];\n    requestedChanges.forEach(requestedChange => {\n      const alreadyStaged = stagedChanges.some(stagedChange =>\n        this.areSameChanges(stagedChange, requestedChange)\n      );\n      if (!alreadyStaged) {\n        stagedChanges = [...stagedChanges, requestedChange];\n      }\n    });\n    this.changes$.next(stagedChanges);\n  }\n\n  dropChange(changeToBeDropped: DeviceSoftwareChange) {\n    let stagedChanges = [...this.changes$.value];\n    stagedChanges = stagedChanges.filter(\n      stagedChange => !this.areSameChanges(stagedChange, changeToBeDropped)\n    );\n    this.changes$.next(stagedChanges);\n  }\n\n  areSameChanges(change1: DeviceSoftwareChange, change2: DeviceSoftwareChange) {\n    return (\n      change1.name === change2.name &&\n      change1.version === change2.version &&\n      change1.action === change2.action\n    );\n  }\n\n  clearChanges() {\n    this.changes$.next([]);\n  }\n\n  async loadDevice() {\n    this.reloading = true;\n    this.deviceSoftwareService.reload();\n    const device = await Promise.all([\n      this.deviceSoftwareService.loading$\n        .pipe(\n          filter(loading => !loading),\n          take(1)\n        )\n        .toPromise(),\n      this.inventory.detail(this.deviceId, { withChildren: false }).then(result => result.data)\n    ]).then(([_, dvc]) => dvc);\n    this.device$.next(device);\n    this.reloading = false;\n  }\n\n  async applyChanges() {\n    const operation = await this.repository.createSoftwareUpdateOperation(\n      this.device$.value,\n      this.changes$.value\n    );\n    await this.trackOperation(operation);\n  }\n\n  private async loadOperation() {\n    const operation = await this.repository.getLastSoftwareUpdateOperation(this.deviceId);\n    await this.trackOperation(operation);\n  }\n\n  private async trackOperation(operation: IOperation) {\n    this.changesOperation$.next(operation);\n\n    if (this.isInProgress(operation)) {\n      await this.displayChangesFromOperation(operation);\n      this.repository.observeOperation(operation).subscribe(\n        operationUpdate => {\n          this.changesOperation$.next(operationUpdate);\n          if (operationUpdate.status === OperationStatus.SUCCESSFUL) {\n            this.clearChanges();\n            this.loadDevice();\n          }\n        },\n        operationUpdate => {\n          this.changesOperation$.next(operationUpdate);\n        }\n      );\n    }\n  }\n\n  private async displayChangesFromOperation(operation: IOperation) {\n    const changes = await this.repository.getDeviceSoftwareChangesFromOperation(\n      operation,\n      this.device$.value\n    );\n    this.changes$.next(changes);\n  }\n\n  private isInProgress(operation: IOperation) {\n    return (\n      operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { IManagedObject } from '@c8y/client';\nimport { get, has } from 'lodash-es';\n\n@Injectable()\nexport class SoftwareDeviceTabGuard implements CanActivate {\n  private readonly operations = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];\n\n  canActivate(route: ActivatedRouteSnapshot) {\n    const device = get(route, 'data.contextData') || get(route, 'parent.data.contextData');\n    return (\n      this.isAnyOperationSupported(device) ||\n      has(device, 'c8y_Software') ||\n      has(device, 'c8y_SoftwareList') ||\n      has(device, 'c8y_SupportedSoftwareTypes')\n    );\n  }\n\n  private isAnyOperationSupported(device: IManagedObject) {\n    const supportedOperations = device?.c8y_SupportedOperations || [];\n    return this.operations.some(operation => supportedOperations.indexOf(operation) >= 0);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CoreModule, gettext, HOOK_ROUTE, Route, ViewContext } from '@c8y/ngx-components';\nimport { OperationDetailsModule } from '@c8y/ngx-components/operations/operation-details';\nimport { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { DeviceSoftwareChangesComponent } from './device-software-changes.component';\nimport { DeviceSoftwareListComponent } from './device-software-list.component';\nimport { InstalledSoftwareComponent } from './installed-software.component';\nimport { SoftwareDeviceTabComponent } from './software-device-tab.component';\nimport { SoftwareDeviceTabGuard } from './software-device-tab.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule,\n    RouterModule,\n    SharedRepositoryModule,\n    OperationDetailsModule,\n    TooltipModule\n  ],\n  declarations: [\n    SoftwareDeviceTabComponent,\n    InstalledSoftwareComponent,\n    DeviceSoftwareListComponent,\n    DeviceSoftwareChangesComponent\n  ],\n  entryComponents: [\n    SoftwareDeviceTabComponent,\n    DeviceSoftwareListComponent,\n    DeviceSoftwareChangesComponent\n  ]\n})\nexport class SoftwareRepositoryDeviceTabModule {\n  static forRoot(): ModuleWithProviders<SoftwareRepositoryDeviceTabModule> {\n    return {\n      ngModule: SoftwareRepositoryDeviceTabModule,\n      providers: [\n        SoftwareDeviceTabGuard,\n        {\n          provide: HOOK_ROUTE,\n          useValue: [\n            {\n              context: ViewContext.Device,\n              path: 'software',\n              component: SoftwareDeviceTabComponent,\n              label: gettext('Software'),\n              icon: 'c8y-tools',\n              priority: 499,\n              canActivate: [SoftwareDeviceTabGuard]\n            }\n          ] as Route[],\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SoftwareRepositoryDeviceTabModule } from './device-tab/software-repository-device-tab.module';\nimport { SoftwareRepositoryListModule } from './list/software-repository-list.module';\n\n@NgModule({\n  imports: [\n    SoftwareRepositoryDeviceTabModule.forRoot(),\n    SoftwareRepositoryListModule.forRoot()\n  ]\n})\nexport class SoftwareRepositoryModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {DeviceSoftwareChangesComponent as ɵf} from './device-tab/device-software-changes.component';\nexport {DeviceSoftwareListComponent as ɵe} from './device-tab/device-software-list.component';\nexport {DeviceSoftwareService as ɵc} from './device-tab/device-software.service';\nexport {InstalledSoftwareComponent as ɵd} from './device-tab/installed-software.component';\nexport {SoftwareDeviceTabComponent as ɵb} from './device-tab/software-device-tab.component';\nexport {SoftwareDeviceTabGuard as ɵg} from './device-tab/software-device-tab.guard';\nexport {SoftwareRepositoryDeviceTabModule as ɵa} from './device-tab/software-repository-device-tab.module';\nexport {AddSoftwareModalComponent as ɵk} from './list/add-software-modal.component';\nexport {DeviceTypeCellRendererComponent as ɵo} from './list/columns/device-type.cell-renderer.component';\nexport {NameCellRendererComponent as ɵl} from './list/columns/name.cell-renderer.component';\nexport {SoftwareTypeCellRendererComponent as ɵm} from './list/columns/software-type.cell-renderer.component';\nexport {SoftwareTypeFilteringFormRendererComponent as ɵn} from './list/columns/software-type.filtering-form-renderer.component';\nexport {VersionsCellRendererComponent as ɵp} from './list/columns/versions.cell-renderer.component';\nexport {SoftwareDetailsComponent as ɵj} from './list/software-details.component';\nexport {SoftwareListComponent as ɵi} from './list/software-list.component';\nexport {SoftwareRepositoryListModule as ɵh} from './list/software-repository-list.module';\nexport {SoftwareRepositoryNavigationFactory as ɵq} from './list/software-repository-navigation-factory';"],"names":["filter"],"mappings":";;;;;;;;;;;;;;;;;;;MAoBa,yBAAyB;IA2BpC,YACU,KAAiB,EACjB,iBAAoC,EACpC,KAAmB;QAFnB,UAAK,GAAL,KAAK,CAAY;QACjB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,UAAK,GAAL,KAAK,CAAc;QA5BnB,UAAK,GAAqC,IAAI,YAAY,EAAsB,CAAC;QAC3F,YAAO,GAA4B,IAAI,eAAe,CAAS,EAAE,CAAC,CAAC;QACnE,UAAK,GAAe;YAClB,QAAQ,EAAE,SAAS;YACnB,OAAO,EAAE,SAAS;YAClB,WAAW,EAAE,SAAS;YACtB,UAAU,EAAE,SAAS;YACrB,YAAY,EAAE,SAAS;YACvB,MAAM,EAAE;gBACN,IAAI,EAAE,SAAS;gBACf,GAAG,EAAE,SAAS;aACf;SACF,CAAC;QAGF,WAAM,GAAG,KAAK,CAAC;QACf,wBAAmB,GAAY,KAAK,CAAC;QACrC,8BAAyB,GACvB,OAAO,CAAC;;;;GAIT,CAAC,CAAC;KAOC;IAEJ,QAAQ;QACN,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;IAED,eAAe;QACb,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACvB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;KACF;IAED,aAAa;QACX,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO;aACnC,IAAI,CACH,GAAG,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7B,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC9B,IAAI,IAAI,CAAC,IAAI,EAAE;oBACb,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,KAAK,EAAE,CAAC;iBAC3C;aACF;SACF,CAAC,EACF,YAAY,CAAC,GAAG,CAAC,EACjB,oBAAoB,EAAE,EACtB,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAC1D;aACA,SAAS,CAAC,MAAM;YACf,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;SAC/B,CAAC,CAAC;KACN;IAED,iBAAiB,CAAC,SAAiB;QACjC,OAAO,IAAI,CACT,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE;YACpE,WAAW,EAAE,SAAS;YACtB,UAAU,EAAE,IAAI;SACjB,CAAC,CACH,CAAC;KACH;IAEK,IAAI;;YACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,iBAAiB;iBACnB,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC,QAAQ,CAAC;iBAC3C,IAAI,CAAC,aAAa;gBACjB,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;aACf,CAAC;iBACD,KAAK,CAAC,CAAC;gBACN,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,MAAM,EAAE,CAAC;aACf,CAAC,CAAC;SACN;KAAA;IAED,UAAU;QACR,MAAM,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACvC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KACzB;IAED,MAAM;QACJ,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;KACvB;IAED,WAAW;QACT,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;KACvC;IAED,MAAM,CAAC,OAAoB;QACzB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;gBAClB,GAAG,EAAE,OAAO,CAAC,GAAG;aACjB,CAAC;YACF,OAAO;SACR;aAAM,IAAI,OAAO,CAAC,YAAY,EAAE;YAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;gBAClB,IAAI,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;aACnC,CAAC;YACF,OAAO;SACR;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;gBAClB,IAAI,EAAE,SAAS;gBACf,GAAG,EAAE,SAAS;aACf,CAAC;SACH;KACF;IAED,gBAAgB,CAAC,QAAwB;QACvC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE;YACjB,QAAQ,EAAE,QAAQ;YAClB,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,UAAU,EAAE,GAAG,CAAC,QAAQ,EAAE,iBAAiB,CAAC;YAC5C,YAAY,EAAE,QAAQ;SACvB,CAAC,CAAC;KACJ;;;YAtIF,SAAS,SAAC;gBACT,QAAQ,EAAE,iCAAiC;gBAC3C,smLAAgD;aACjD;;;YAjBQ,UAAU;YAKjB,iBAAiB;YAEV,YAAY;;;mBAYlB,SAAS,SAAC,cAAc,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;oBAC3C,MAAM;;;MCnBI,qBAAsB,SAAQ,oBAAoB;IAC7D,YAAY,mBAAkC;QAC5C,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;QAErC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG;YACrB,MAAM,EAAE,iCAAiC,CAAC;gBACxC,GAAG,EAAE,cAAc;gBACnB,KAAK,EAAE,OAAO,CAAC,gCAAgC,CAAC;gBAChD,OAAO,EAAE,OAAO,CAAC,uBAAuB,CAAC;gBACzC,OAAO,EAAE,OAAO,CAAC,+BAA+B,CAAC;gBACjD,WAAW,EAAE,OAAO,CAAC,6BAA6B,CAAC;aACpD,CAAC;YACF,SAAS,CAAC,KAAU;gBAClB,MAAM,MAAM,GAAQ,EAAE,CAAC;gBACvB,IAAI,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE;oBAC7B,MAAM,CAAC,WAAW,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC;iBACnD;gBACD,OAAO,MAAM,CAAC;aACf;SACF,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG;YACnB,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;SAC1C,CAAC;KACH;;;MC1BU,+BAA+B;IAC1C,YAAmB,OAA4B;QAA5B,YAAO,GAAP,OAAO,CAAqB;KAAI;;;YAJpD,SAAS,SAAC;gBACT,iQAAyD;aAC1D;;;YAJQ,mBAAmB;;;MCGf,oBAAqB,SAAQ,oBAAoB;IAC5D,YAAY,mBAAkC;QAC5C,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;QACrC,IAAI,CAAC,qBAAqB,GAAG,+BAA+B,CAAC;QAE7D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,CAAC,eAAe,GAAG;YACrB,MAAM,EAAE;gBACN,GAAG,iCAAiC,CAAC;oBACnC,GAAG,EAAE,OAAO;oBACZ,KAAK,EAAE,OAAO,CAAC,gCAAgC,CAAC;oBAChD,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC;oBAClC,OAAO,EAAE,OAAO,CAAC,+BAA+B,CAAC;oBACjD,WAAW,EAAE,WAAW;oBACxB,QAAQ,EAAE,IAAI;iBACf,CAAC;gBACF;oBACE,GAAG,EAAE,cAAc;oBACnB,IAAI,EAAE,QAAQ;oBACd,eAAe,EAAE;wBACf,KAAK,EAAE,OAAO,CAAC,gBAAgB,CAAC;qBACjC;iBACF;aACF;YACD,SAAS,CAAC,KAAU;;gBAClB,MAAM,MAAM,GAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBACjC,IAAI,MAAA,KAAK,CAAC,KAAK,0CAAE,MAAM,EAAE;oBACvB,MAAM,CAAC,IAAI,GAAG;wBACZ,iBAAiB,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE;qBACzC,CAAC;iBACH;gBACD,IAAI,KAAK,CAAC,YAAY,EAAE;oBACtB,MAAM,CAAC,IAAI,mCACN,MAAM,CAAC,IAAI,KACd,IAAI,EAAE;4BACJ,KAAK,EAAE,EAAE,KAAK,EAAE,iBAAiB,EAAE;4BACnC,iBAAiB,EAAE,EAAE;yBACtB,GACF,CAAC;iBACH;gBACD,OAAO,MAAM,CAAC;aACf;SACF,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG;YACnB,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;SAC1C,CAAC;KACH;;;MC9CU,yBAAyB;IACpC,YAAmB,OAA4B;QAA5B,YAAO,GAAP,OAAO,CAAqB;KAAI;;;YARpD,SAAS,SAAC;gBACT,QAAQ,EAAE;;;;GAIT;aACF;;;YARQ,mBAAmB;;;MCGf,sBAAuB,SAAQ,oBAAoB;IAC9D,YAAY,mBAAkC;QAC5C,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9B,IAAI,CAAC,qBAAqB,GAAG,yBAAyB,CAAC;QAEvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG;YACrB,MAAM,EAAE,iCAAiC,CAAC;gBACxC,GAAG,EAAE,OAAO;gBACZ,KAAK,EAAE,OAAO,CAAC,yBAAyB,CAAC;gBACzC,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC;gBAClC,OAAO,EAAE,OAAO,CAAC,+BAA+B,CAAC;gBACjD,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC;aAC3C,CAAC;YACF,SAAS,CAAC,KAAU;gBAClB,MAAM,MAAM,GAAQ,EAAE,CAAC;gBACvB,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE;oBACtB,MAAM,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC;iBACrC;gBACD,OAAO,MAAM,CAAC;aACf;SACF,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG;YACnB,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;SAC1C,CAAC;KACH;;;MC5BU,iCAAiC;IAC5C,YAAmB,OAA4B;QAA5B,YAAO,GAAP,OAAO,CAAqB;KAAI;;;YAJpD,SAAS,SAAC;gBACT,wRAA2D;aAC5D;;;YAJQ,mBAAmB;;;MCqBf,0CAA0C;IAUrD,YACS,OAAqC,EACrC,iBAAoC,EACnC,iBAAoC,EACpC,UAAsB;QAHvB,YAAO,GAAP,OAAO,CAA8B;QACrC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACnC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,eAAU,GAAV,UAAU,CAAY;QAZhC,sBAAiB,GAA4C,KAAK,CAAC;QACnE,YAAO,GAA4B,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAC7D,eAAU,GAAoC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC1D,yBAAoB,GAAG,OAAO,CAAC,oDAAoD,CAAC,CAAC;QAE7E,gBAAW,GAAgB,IAAI,WAAW,EAAE,CAAC;QAC7C,kBAAa,GAAgB,IAAI,GAAG,EAAE,CAAC;QAQ7C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CACxC,YAAY,CAAC,GAAG,CAAC,EACjB,GAAG,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,EACrC,SAAS,CAAC,CAAC,YAAoB;YAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxE,MAAM,MAAM,GAAG,CAAC,CAAC,YAAY;kBACzB;oBACE,YAAY,EAAE;wBACZ,IAAI,EAAE,IAAI,YAAY,GAAG;qBAC1B;iBACF;kBACD;oBACE,KAAK,EAAE,cAAc;iBACtB,CAAC;YACN,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAErD,OAAO,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE;gBAC3E,gBAAgB,EAAE,IAAI;gBACtB,KAAK;gBACL,MAAM,EAAE;oBACN,QAAQ,EAAE,GAAG;iBACd;aACF,CAAC,CAAC;SACJ,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,UAAU,GAAG,IAAI,CACpB,GAAG,CAAC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EACnD,GAAG,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC,CAClD,CAAC;KACH;IAE0C,cAAc,CAAC,KAAoB;QAC5E,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAC2C,eAAe,CAAC,KAAoB;QAC9E,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;KAC5B;IAED,QAAQ;QACN,MAAM,MAAM,GAAqB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACvD,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;KACjE;IAED,eAAe;;QACb,MAAA,MAAA,MAAA,IAAI,CAAC,SAAS,0CAAE,aAAa,0CAAE,aAAa,0CAAE,KAAK,EAAE,CAAC;QACtD,IAAI;YACF,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC;SACtF;QAAC,OAAO,EAAE,EAAE;;SAEZ;KACF;IAED,WAAW;QACT,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YACvB,mBAAmB,EAAE,IAAI,CAAC,YAAY;SACvC,CAAC,CAAC;KACJ;IAEO,8BAA8B,CAAC,IAAsB;QAC3D,MAAM,oBAAoB,GAAqB,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,MAAM,CAChF,CAAC,EAAkB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,CACjE,CAAC;QACF,oBAAoB,CAAC,OAAO,CAAC,CAAC,EAAkB,KAAK,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9F,OAAO,oBAAoB,CAAC;KAC7B;;;YAvFF,SAAS,SAAC;gBACT,gyCAAqE;gBACrE,eAAe,EAAE,uBAAuB,CAAC,OAAO;aACjD;;;YAVQ,4BAA4B;YARnC,iBAAiB;YAaV,iBAAiB;YAXxB,UAAU;;;wBAuBT,SAAS,SAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;6BA0C/C,YAAY,SAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;8BAIxC,YAAY,SAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC;;;MCrE/B,sBAAuB,SAAQ,oBAAoB;IAC9D,YAAY,mBAAkC;QAC5C,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;QACvC,IAAI,CAAC,qBAAqB,GAAG,iCAAiC,CAAC;QAE/D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,8BAA8B,GAAG,0CAA0C,CAAC;QACjF,IAAI,CAAC,eAAe,GAAG;YACrB,SAAS,CAAC,KAAK;gBACb,MAAM,MAAM,GAAQ,EAAE,CAAC;gBACvB,IAAI,KAAK,CAAC,YAAY,EAAE;oBACtB,MAAM,CAAC,YAAY,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC;iBACpD;gBACD,OAAO,MAAM,CAAC;aACf;SACF,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG;YACnB,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;SAC1C,CAAC;KACH;;;MClBU,6BAA6B;IAGxC,YAAmB,OAA4B,EAAU,iBAAoC;QAA1E,YAAO,GAAP,OAAO,CAAqB;QAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;QAF7F,aAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAG3E,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC;KAC9B;IAGD,qBAAqB,CAAC,QAAwB;QAC5C,OAAO,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;KACpF;;;YAbF,SAAS,SAAC;gBACT,kmBAAsD;aACvD;;;YARQ,mBAAmB;YAInB,iBAAiB;;AAaxB;IADC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;0EAGvB;;MCjBU,kBAAmB,SAAQ,oBAAoB;IAC1D,YAAY,mBAAkC;QAC5C,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QAClC,IAAI,CAAC,qBAAqB,GAAG,6BAA6B,CAAC;QAC3D,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;KACvB;;;MCiBU,qBAAqB;IAmBhC,YACU,iBAAoC,EACpC,WAA8B,EAC9B,YAA0B,EAC1B,cAA8B,EAC9B,gBAAkC,EAClC,YAA0B,EAC1B,MAAc,EACd,cAA8B;QAP9B,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,gBAAW,GAAX,WAAW,CAAmB;QAC9B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QAzBxC,oBAAe,GAAG,KAAK,CAAC;QACxB,aAAQ,GAAuB,IAAI,YAAY,EAAE,CAAC;QAElD,YAAO,GAAuB;YAC5B,IAAI,sBAAsB,EAAE;YAC5B,IAAI,qBAAqB,EAAE;YAC3B,IAAI,oBAAoB,EAAE;YAC1B,IAAI,sBAAsB,EAAE;YAC5B,IAAI,kBAAkB,EAAE;SACzB,CAAC;QACF,mBAAc,GAAoB,EAAE,CAAC;QAErC,eAAU,GAAG;YACX,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,CAAC;SACf,CAAC;QAYA,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB;aACtC,qBAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE;YAC9C,gBAAgB,EAAE,IAAI;YACtB,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE;SACxB,CAAC;aACD,IAAI,CAAC,QAAQ;;YACZ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,OAAO,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,0CAAE,UAAU,CAAC;SACrC,CAAC,CAAC;KACN;IAED,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;SACvC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;SACzC,CAAC,CAAC;KACJ;IAEK,oBAAoB,CACxB,kBAAsC;;YAEtC,IAAI,oBAA0C,CAAC;YAE/C,MAAM,WAAW,GACf,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE;gBACpE,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC;gBAC/D,gBAAgB,EAAE,IAAI;gBACtB,MAAM,EAAE;oBACN,QAAQ,EAAE,kBAAkB,CAAC,UAAU,CAAC,QAAQ;oBAChD,WAAW,EAAE,kBAAkB,CAAC,UAAU,CAAC,WAAW;iBACvD;aACF,CAAC,CAAC;YAEL,MAAM,oBAAoB,GAAoB,IAAI,CAAC,iBAAiB;iBACjE,qBAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE;gBAC9C,gBAAgB,EAAE,IAAI;gBACtB,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC;gBAC/D,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE;aACxB,CAAC;iBACD,IAAI,CAAC,QAAQ,cAAI,OAAA,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,0CAAE,UAAU,CAAA,EAAA,CAAC,CAAC;YAElD,MAAM,CAAC,YAAY,EAAE,IAAI,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC3D,WAAW;gBACX,IAAI,CAAC,WAAW;gBAChB,oBAAoB;aACrB,CAAC,CAAC;YAEH,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,YAAY,CAAC;YAE3C,oBAAoB,GAAG;gBACrB,GAAG;gBACH,IAAI;gBACJ,MAAM;gBACN,YAAY;gBACZ,IAAI;aACL,CAAC;YAEF,OAAO,oBAAoB,CAAC;SAC7B;KAAA;IAED,WAAW;QACT,MAAM,MAAM,GAA4C;YACtD,KAAK,EAAE,UAAU;YACjB,mBAAmB,EAAE,IAAI;SAC1B,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC;QAC7E,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;KACrF;IAED,YAAY,CAAC,QAAiC;QAC5C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;KAC1E;IAEK,cAAc,CAAC,QAAwB;;YAC3C,IAAI;gBACF,MAAM,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACzC,MAAM,IAAI,GAAG;UACT,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC7B,OAAO,CAAC,sEAAsE,CAAC,EAC/E,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,CACxB;UACC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;UACzE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;OACpE,CAAC;gBACF,MAAM,MAAM,GAAG;oBACb,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC;iBACtB,CAAC;gBACF,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBACpE,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC9C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACtB;YAAC,OAAO,EAAE,EAAE;;gBAEX,IAAI,EAAE,EAAE;oBACN,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;iBACxC;aACF;SACF;KAAA;IAED,WAAW,CAAC,MAAM,EAAE,MAAwB;QAC1C,OAAO,MAAM,CAAC,IAAI,CAAC;KACpB;;;YA3IF,SAAS,SAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,ymEAA2C;aAC5C;;;YAXQ,iBAAiB;YAHC,iBAAiB;YAJ1C,YAAY;YAML,cAAc;YADd,gBAAgB;YATvB,YAAY;YAJW,MAAM;YAAtB,cAAc;;;MCwBV,wBAAwB;IA6CnC,YACU,cAA8B,EAC9B,gBAAkC,EAClC,iBAAoC,EACpC,YAA0B,EAC1B,gBAAkC,EAClC,YAA0B,EAC1B,cAA8B;QAN9B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAgB;QAhDxC,YAAO,GAAkB,IAAI,OAAO,EAAE,CAAC;QACvC,eAAU,GAA6B,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;QAElE,0BAAqB,GAAY,KAAK,CAAC;QAEvC,oBAAe,GAAqC,IAAI,OAAO,EAAE,CAAC;QAClE,qBAAgB,GAA4B,IAAI,OAAO,EAAE,CAAC;QAC1D,yBAAoB,GAAkB,IAAI,OAAO,EAAE,CAAC;QAEpD,cAAS,GAA+B,KAAK,CAC3C,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAC7B,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,EAAE,CAAC,EACxB,SAAS,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CACpF,EACD,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EACrC,SAAS,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAC3C,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,EAAE,CAAC,EACxB,SAAS,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EACnF,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CACvC,EACD,IAAI,CAAC,gBAAgB,CACtB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvB,kBAAa,GAA4C,KAAK,CAC5D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,EAClD,IAAI,CAAC,oBAAoB,EACzB,IAAI,CAAC,OAAO,CACb,CAAC,IAAI,CACJ,SAAS,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,EAC/B,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,EACxE,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,cAAS,GAAwB,IAAI,CAAC,SAAS,CAAC,IAAI,CAClD,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAC/D,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,aAAQ,GAAqB,IAAI,OAAO,EAAW,CAAC;KAUhD;IAEJ,QAAQ;QACN,IAAI,CAAC,eAAe;aACjB,IAAI,CACH,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAC9B,SAAS,CAAC,CAAC,CAAC,eAAe,EAAE,QAAQ,CAAC,KACpC,IAAI,CAAC,gBAAgB,CAAC,MAAM,iBAC1B,EAAE,EAAE,QAAQ,CAAC,EAAE,IACZ,eAAe,EAClB,CACH,EACD,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,EACvB,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EACrD,GAAG,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EACvD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CACzB;aACA,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ;YAC/B,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;SACpC,CAAC,CAAC;KACJ;IAGD,cAAc,CAAC,SAAS;QACtB,OAAO,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;KACzD;IAED,cAAc;QACZ,IAAI,CAAC,SAAS;aACX,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,QAAQ;YAChB,MAAM,YAAY,GAAG;gBACnB,KAAK,EAAE;oBACL,QAAQ,EAAE,QAAQ;oBAClB,WAAW,EAAE,QAAQ,CAAC,WAAW;iBAClC;aACF,CAAC;YACF,MAAM,MAAM,GAA4C;gBACtD,KAAK,EAAE,UAAU;gBACjB,mBAAmB,EAAE,IAAI;gBACzB,YAAY;aACb,CAAC;YACF,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC;YAC7E,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;SAC/B,CAAC,CACH;aACA,SAAS,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC;KACtD;IAEK,iBAAiB,CAAC,WAA2B;;YACjD,IAAI;gBACF,MAAM,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACzC,MAAM,IAAI,GAAG;UACT,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC7B,OAAO,CAAC,iDAAiD,CAAC,EAC1D,EAAE,OAAO,EAAE,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,CAC9C;UACC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;UACzE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;OACpE,CAAC;gBACF,MAAM,MAAM,GAAG;oBACb,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC;iBACtB,CAAC;gBACF,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBACpE,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBACjD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;aAClC;YAAC,OAAO,EAAE,EAAE;;gBAEX,IAAI,EAAE,EAAE;oBACN,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;iBACxC;aACF;SACF;KAAA;IAED,oBAAoB,CAAC,QAAQ;;QAC3B,IAAI,CAAC,qBAAqB,GAAG,EAC3B,CAAA,MAAA,IAAI,CAAC,kBAAkB,0CAAE,YAAY,OAAK,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,YAAY,CAAA,CACjE,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;KACpC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;KAC7B;;;YAjJF,SAAS,SAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,2nUAAgD;aACjD;;;YAvBQ,cAAc;YACE,gBAAgB;YAehC,iBAAiB;YAdjB,YAAY;YACZ,gBAAgB;YADgB,YAAY;YAE5C,cAAc;;;2BAqBpB,SAAS,SAAC,qBAAqB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;AA6ElD;IADC,OAAO,EAAE;8DAGT;;MCrGU,mCAAmC;IAG9C;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,aAAa,CAAC;YAC5B,KAAK,EAAE,OAAO,CAAC,qBAAqB,CAAC;YACrC,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,OAAO,CAAC,YAAY,CAAC;YAC7B,QAAQ,EAAE,GAAG;SACd,CAAC,CAAC;KACJ;IAED,GAAG;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;;;YAhBF,UAAU;;;;MC0CE,4BAA4B;IACvC,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,4BAA4B;YACtC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,mCAAmC;oBAC7C,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,OAAO,EAAE,UAAU;oBACnB,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,UAAU;4BAChB,SAAS,EAAE,qBAAqB;yBACjC;wBACD;4BACE,IAAI,EAAE,cAAc;4BACpB,SAAS,EAAE,wBAAwB;yBACpC;qBACS;oBACZ,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;KACH;;;YAhDF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,UAAU;oBACV,WAAW;oBACX,gBAAgB;oBAChB,aAAa;oBACb,YAAY;oBACZ,sBAAsB;iBACvB;gBACD,YAAY,EAAE;oBACZ,qBAAqB;oBACrB,wBAAwB;oBACxB,yBAAyB;oBACzB,yBAAyB;oBACzB,iCAAiC;oBACjC,0CAA0C;oBAC1C,+BAA+B;oBAC/B,6BAA6B;iBAC9B;gBACD,eAAe,EAAE,CAAC,qBAAqB,EAAE,wBAAwB,EAAE,yBAAyB,CAAC;aAC9F;;;MClCY,8BAA8B;IAJ3C;QAOY,UAAK,GAAuB,IAAI,YAAY,EAAE,CAAC;QAC/C,SAAI,GAAuC,IAAI,YAAY,EAAE,CAAC;QAC9D,UAAK,GAAuB,IAAI,YAAY,EAAE,CAAC;QAC/C,wBAAmB,GAAG,IAAI,YAAY,EAAQ,CAAC;QAMzD,aAAQ,GAAG,IAAI,eAAe,CAAyB,EAAE,CAAC,CAAC;QAC3D,mBAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACjC,GAAG,CAAC,OAAO;YACT,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC;SAC9D,CAAC,CACH,CAAC;QAEF,cAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC5B,GAAG,CAAC,OAAO;YACT,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;SAC7D,CAAC,CACH,CAAC;KAOH;IAtBC,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,mBAAmB,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;KACzF;IAeD,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;SAClD;KACF;;;YAjCF,SAAS,SAAC;gBACT,QAAQ,EAAE,6BAA6B;gBACvC,6jFAAqD;aACtD;;;sBAEE,KAAK;gCACL,KAAK;oBACL,MAAM;mBACN,MAAM;oBACN,MAAM;kCACN,MAAM;;;MCFI,qBAAqB;IAWhC,YAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAH5D,mBAAc,GAAG,IAAI,eAAe,CAAO,IAAI,CAAC,CAAC;QACjD,oBAAe,GAAG,IAAI,OAAO,EAAW,CAAC;KAEuB;;;;IAPxE,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAC1D;;;;IAUD,MAAM;QACJ,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;KAC5B;;;;;;;;;;;IAYD,eAAe,CACb,QAAQ,EACR,cAA8B,EAC9B,kBAAqC;QAErC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAC7B,SAAS,CAAC;YACR,MAAM,aAAa,GAAG,CAAC,CAAC,kBAAkB;kBACtC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,cAAc,CAAC;kBAC9D,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;YAC3D,OAAO,aAAa,CAAC,IAAI,CAAC,UAAU;gBAClC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACjC,OAAO,UAAU,CAAC;aACnB,CAAC,CAAC;SACJ,CAAC,EACF,KAAK,EAAE,CACR,CAAC;KACH;IAEO,uBAAuB,CAC7B,QAAQ,EACR,cAA8B;QAE9B,MAAM,WAAW,GAAG;YAClB,QAAQ;YACR,WAAW,EAAE,CAAC;YACd,QAAQ,EAAE,EAAE;YACZ,cAAc,EAAE,IAAI;SACrB,CAAC;QACF,IAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,IAAI,EAAE;YACxB,GAAG,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,cAAc,CAAC,IAAI,GAAG,CAAC,CAAC;SACtD;QACD,IAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,YAAY,EAAE;YAChC,GAAG,CAAC,WAAW,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;SAC5D;QACD,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAEnD,CAAC;KACH;IAEO,qBAAqB,CAC3B,kBAAoC,EACpC,cAA8B;QAE9B,MAAM,IAAI,GAAG,cAAc;cACvB,kBAAkB,CAAC,MAAM,CAAC,IAAI;;gBAC5B,IAAI,KAAK,GAAG,IAAI,CAAC;gBACjB,IAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,IAAI,EAAE;oBACxB,KAAK,GAAG,KAAK,KAAI,MAAA,IAAI,CAAC,IAAI,0CAAE,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA,CAAC;iBAC3D;gBACD,IAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,YAAY,EAAE;oBAChC,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,YAAY,KAAK,cAAc,CAAC,YAAY,CAAC;iBACpE;gBAED,OAAO,KAAK,CAAC;aACd,CAAC;cACF,kBAAkB,CAAC;QACvB,OAAO,OAAO,CAAC,OAAO,CAAC;YACrB,IAAI;YACJ,GAAG,EAAE,IAAI;YACT,MAAM,EAAE;gBACN,UAAU,EAAE,IAAI,CAAC,MAAM;aACE;SAC5B,CAAC,CAAC;KACJ;;;;YAnGF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YAVC,uBAAuB;;;MC8BZ,2BAA2B;IAyBtC,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;QAjBvD,oBAAe,GAA+B,EAAE,CAAC,IAAI,CAAC,CAAC;QACtD,WAAM,GAAG,IAAI,YAAY,EAAkB,CAAC;QAC5C,WAAM,GAAG,IAAI,YAAY,EAAkB,CAAC;QAC5C,gBAAW,GAA0B,IAAI,YAAY,EAAE,CAAC;QAMlE,4BAAuB,GAAG,OAAO,CAAC,kDAAkD,CAAC,CAAC;QACtF,+BAA0B,GAAY,KAAK,CAAC;QAE3B,mBAAc,GAAG,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;QAErF,wBAAmB,GAAsC,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QACjF,eAAU,GAAG,IAAI,OAAO,EAAQ,CAAC;KAE2B;IAxBpE,IAAa,YAAY,CAAC,YAA8B;QACtD,IAAI,YAAY,KAAK,IAAI,EAAE;YACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAC7C;KACF;IAsBD,QAAQ;QACN,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YAClC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,oBAAoB,EAAE,CAAC;YACpE,IAAI,CAAC,mBAAmB;SACzB,CAAC,CAAC,IAAI,CACL,SAAS,CAAC,CAAC,CAAC,cAAc,EAAE,kBAAkB,CAAC;;YAC7C,OAAA,IAAI,CAAC,qBAAqB;iBACvB,eAAe,CAAC,MAAA,IAAI,CAAC,MAAM,0CAAE,EAAE,EAAE,cAAc,EAAE,kBAAkB,CAAC;iBACpE,IAAI,CAAC,GAAG,CAAC,UAAU,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAA;SAAA,CAC7D,EACD,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE;;YACjC,IAAI,CAAC,eAAe,CAAC,EAAC,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,0CAAE,UAAU,CAAA,IAAI,CAAC,cAAc,CAAC,CAAC;YACzE,IAAI,CAAC,eAAe,GAAG,EAAC,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,0CAAE,UAAU,CAAA,IAAI,CAAC,CAAC,cAAc,CAAC;SAC5E,CAAC,EACF,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,UAAU,CAAC,EACnC,KAAK,EAAE,EACP,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B,CAAC;QACF,MAAM,mBAAmB,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,yBAAyB,EAAE,EAAE,CAAC,CAAC;QAC5E,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACxD,aAAa,IAAI,mBAAmB,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CACjE,CAAC;KACH;IAED,kBAAkB;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;KACpD;IAED,0BAA0B,CAAC,QAAwB;QACjD,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;QACrE,OAAO,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;KACnC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;KAC5B;IAEO,eAAe,CAAC,OAAgB;QACtC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAChC;;;YAzEF,SAAS,SAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,wvFAAkD;aACnD;;;YALQ,qBAAqB;;;2BAO3B,KAAK;qBAKL,KAAK;oCACL,KAAK;8BACL,KAAK;qBACL,MAAM;qBACN,MAAM;0BACN,MAAM;;;MCDI,0BAA0B;IAiCrC,YAAoB,UAA6B,EAAU,OAAuB;QAA9D,eAAU,GAAV,UAAU,CAAmB;QAAU,YAAO,GAAP,OAAO,CAAgB;QA1BxE,YAAO,GAAG,IAAI,YAAY,EAA0B,CAAC;QACrD,wBAAmB,GAAG,IAAI,YAAY,EAAQ,CAAC;QAIzD,4BAAuB,GAAG,OAAO,CAC/B,mEAAmE,CACpE,CAAC;QAOF,eAAU,GAAY,KAAK,CAAC;QAC5B,+BAA0B,GAAY,KAAK,CAAC;QAC5C,gBAAW,GAA4B,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QAC/D,wBAAmB,GAA4B,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QAGtD,mBAAc,GAAG,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;QAIrF,eAAU,GAAkB,IAAI,OAAO,EAAE,CAAC;QAGhD,IAAI,CAAC,eAAe,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CACrF,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,kBAAkB,CAAC,MAAM;YACzC,IAAI,EAAE,UAAU;YAChB,YAAY,EAAE,kBAAkB;SACjC,CAAC,CAAC,EACH,GAAG,CAAC,cAAc,IAChB,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,GAAG,IAAI,GAAG,cAAc,CAC7E,CACF,CAAC;QACF,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;KACtC;IAED,QAAQ;QACN,MAAM,mBAAmB,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,yBAAyB,EAAE,EAAE,CAAC,CAAC;QAC5E,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACxD,aAAa,IAAI,mBAAmB,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CACjE,CAAC;KACH;IAED,eAAe;QACb,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,sBAAsB,EAAE,GAC5D,IAAI,CAAC,0BAA0B,CAAC;YAC9B,KAAK,EAAE,OAAO,CAAC,kBAAkB,CAAC;YAClC,QAAQ,EAAE,OAAO,CAAC,8CAA8C,CAAC;YACjE,MAAM,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,SAAS,CAAC,EAAE;YAClC,oBAAoB,EAAE,IAAI;YAC1B,wBAAwB,EAAE,IAAI,CAAC,oBAAoB;YACnD,8BAA8B,EAAE,EAAE,CAAC,EAAE,CAAC;YACtC,gCAAgC,EAAE,KAAK,IACrC,IAAI,CAAC,uCAAuC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC;SACzE,CAAC,CAAC;QAEL,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,iBAAiB;YACxE,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;YAC5C,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;SACjC,CAAC,CAAC;QAEH,aAAa;aACV,IAAI,CACH,IAAI,CAAC,+BAA+B,CAAC,sBAAsB,CAAC,EAC5D,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B;aACA,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,KAClB,sBAAsB,CAAC,IAAI,CAAC;YAC1B,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI,CAAC,+BAA+B;YAC9C,MAAM,EAAE,MAAM;gBACZ,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;gBACxB,OAAO,MAAM,CAAC;aACf;SACF,CAAC,CACH,CAAC;KACL;IAED,cAAc,CAAC,gBAAgB;QAC7B,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,sBAAsB,EAAE,GAC5D,IAAI,CAAC,0BAA0B,CAAC;YAC9B,KAAK,EAAE,OAAO,CAAC,iBAAiB,CAAC;YACjC,QAAQ,EAAE,OAAO,CAAC,+CAA+C,CAAC;YAClE,MAAM,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE;YACjC,cAAc,EAAE,OAAO,CAAC,uCAAuC,CAAC;YAChE,UAAU,EAAE,KAAK;YACjB,8BAA8B,EAAE,IAAI,CAAC,8BAA8B,CAAC,gBAAgB,CAAC;SACtF,CAAC,CAAC;QAEL,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,iBAAiB;YACxE,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;YAC5C,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;SACjC,CAAC,CAAC;QAEH,aAAa;aACV,IAAI,CACH,IAAI,CAAC,+BAA+B,CAAC,sBAAsB,CAAC,EAC5D,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B;aACA,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,KAClB,sBAAsB,CAAC,IAAI,CAAC;YAC1B,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI,CAAC,+BAA+B;YAC9C,MAAM,EAAE,MAAM;gBACZ,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;gBACxB,OAAO,MAAM,CAAC;aACf;SACF,CAAC,CACH,CAAC;KACL;IAED,cAAc,CAAC,gBAAgB;QAC7B,IAAI,CAAC,mBAAmB,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;KAC9C;IAED,uCAAuC,CAAC,WAA4C;QAClF,MAAM,sBAAsB,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QAC1E,OAAO,WAAW,CAAC,IAAI,CACrB,oBAAoB,EAAE,EACtB,SAAS,CAAC,UAAU,IAClB,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE;YAC7D,KAAK,EAAE,UAAU,CAAC,YAAY;kBAC1B,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE;oBAC7C,YAAY,EAAE,UAAU,CAAC,YAAY;iBACtC,CAAC;kBACF,IAAI,CAAC,UAAU;YACnB,WAAW,EAAE,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI;YAC7B,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE;SAC1B,CAAC,CACH,EACD,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,EACvB,GAAG,CAAC,YAAY;YACd,OAAO,YAAY,CAAC,MAAM,CAAC,QAAQ;gBACjC,OAAO,CAAC,sBAAsB,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACxD,CAAC,CAAC;SACJ,CAAC,EACF,GAAG,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,EACtD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;KACH;IAED,8BAA8B,CAAC,QAAwB;QACrD,OAAO,IAAI,CACT,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,cAAc,CAAC,QAAQ,EAAE;YAC7D,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE;SAC/B,CAAC,CACH,CAAC,IAAI,CACJ,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,EACvB,GAAG,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,EACtD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;KACH;IAED,cAAc,CAAC,YAA8B;QAC3C,YAAY,CAAC,OAAO,CAAC,QAAQ;YAC3B,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;SAChE,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;KACrB;IAED,0BAA0B,CAAC,qBAAqB;QAC9C,MAAM,YAAY,mBAChB,cAAc,EAAE,cAAc,CAAC,QAAQ,EACvC,IAAI,EAAE,kBAAkB,CAAC,KAAK,EAC9B,IAAI,EAAE,WAAW,EACjB,eAAe,EAAE,KAAK,EACtB,QAAQ,EAAE,IAAI,CAAC,YAAY,IACxB,qBAAqB,CACzB,CAAC;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE;YAC9D,mBAAmB,EAAE,IAAI;YACzB,KAAK,EAAE,UAAU;YACjB,YAAY;SACb,CAAC,CAAC;QAEH,IAAI,qBAAqB,CAAC,gCAAgC,EAAE;YAC1D,KAAK,CAAC,OAAO,CAAC,8BAA8B;gBAC1C,qBAAqB,CAAC,gCAAgC,CAAC,KAAK,CAAC,CAAC;SACjE;QAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE5D,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAC1B,OAAO;YACL,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,aAAa;YAC1C,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,eAAe;YAC5C,sBAAsB,EAAE,KAAK,CAAC,OAAO,CAAC,sBAAsB;SAC7D,CAAC;KACH;IAED,MAAM,CAAC,cAA8B;QACnC,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;SAClC;KACF;IAED,mBAAmB,CAAC,KAAuB;QACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,KAAK,CAAC,GAAG,CAAC,IAAI;YACZ,uCAAY,IAAI,KAAE,MAAM,EAAE,SAAS,IAAG;SACvC,CAAC,CACH,CAAC;KACH;IAED,mBAAmB,CAAC,KAAuB;QACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,KAAK,CAAC,GAAG,CAAC,IAAI;YACZ,uCAAY,IAAI,KAAE,MAAM,EAAE,QAAQ,IAAG;SACtC,CAAC,CACH,CAAC;KACH;IAED,WAAW;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;KAC5B;IAEO,+BAA+B,CAAC,sBAAsD;QAC5F,OAAO,IAAI,CACT,GAAG,CAAC,CAAC,IAAwB,KAC3B,sBAAsB,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAC9E,EACD,GAAG,CAAC,IAAI,KAAK;YACX,IAAI;YACJ,QAAQ,EAAE,CACR,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE,KAAM,IAAY,CAAC,UAAU,CAAC,IAAI,EAAE,EACrF,GAAG;SACN,CAAC,CAAC,EACH,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAC1B,IAAI,CACF,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,QAA0B,CAAC,CACxF,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAChD,EACD,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,sBAAsB,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAChEA,QAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,SAAS,CAAC,CACvC,CAAC;KACH;;;YA1PF,SAAS,SAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,knKAAgD;aACjD;;;YApBC,iBAAiB;YAIV,cAAc;;;qBAkBpB,KAAK;2BACL,KAAK;oCACL,KAAK;6CACL,KAAK;8CACL,KAAK;yBACL,KAAK;sBACL,MAAM;kCACN,MAAM;8CAEN,SAAS,SAAC,yBAAyB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;8BAKrD,SAAS,SAAC,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;mCAGrC,SAAS,SAAC,cAAc,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;MC3ChC,0BAA0B;IA6BrC,YACU,KAAqB,EACrB,UAA6B,EAC7B,SAA2B,EAC3B,qBAA4C,EAC5C,uBAAgD;QAJhD,UAAK,GAAL,KAAK,CAAgB;QACrB,eAAU,GAAV,UAAU,CAAmB;QAC7B,cAAS,GAAT,SAAS,CAAkB;QAC3B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,4BAAuB,GAAvB,uBAAuB,CAAyB;QAjC1D,aAAQ,GAAoB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QAC3E,YAAO,GAAG,IAAI,eAAe,CAAiB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3F,gBAAW,GAAuB,IAAI,CAAC,OAAO,CAAC,IAAI,CACjD,GAAG,CAAC,MAAM;YACR,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC5F,OAAO,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;SACtE,CAAC,CACH,CAAC;QACF,UAAK,GAAiC,IAAI,CAAC,OAAO,CAAC,IAAI,CACrD,SAAS,CAAC,MAAM,IACd,IAAI,CAAC,uBAAuB;aACzB,cAAc,EAAE;aAChB,IAAI,CAAC,cAAc,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,CAAC,CAAC,CACxD,EACD,GAAG,CAAC,CAAC,EAAE,cAAc,EAAE,MAAM,EAAE;;;QAG7B,cAAc,GAAG,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAC3E,CACF,CAAC;QACF,aAAQ,GAAG,IAAI,eAAe,CAAyB,EAAE,CAAC,CAAC;QAC3D,sBAAiB,GAAG,IAAI,eAAe,CAAa,IAAI,CAAC,CAAC;QAC1D,uBAAkB,GAAwB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACnE,GAAG,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAC/C,CAAC;QACF,cAAS,GAAY,KAAK,CAAC;QAC3B,wBAAmB,GAAY,KAAK,CAAC;KAQjC;IAEE,QAAQ;;YACZ,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;SAC5B;KAAA;IAED,UAAU,CAAC,gBAAwC;QACjD,IAAI,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,gBAAgB,CAAC,OAAO,CAAC,eAAe;YACtC,MAAM,aAAa,GAAG,aAAa,CAAC,IAAI,CAAC,YAAY,IACnD,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,eAAe,CAAC,CACnD,CAAC;YACF,IAAI,CAAC,aAAa,EAAE;gBAClB,aAAa,GAAG,CAAC,GAAG,aAAa,EAAE,eAAe,CAAC,CAAC;aACrD;SACF,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KACnC;IAED,UAAU,CAAC,iBAAuC;QAChD,IAAI,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,aAAa,GAAG,aAAa,CAAC,MAAM,CAClC,YAAY,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,iBAAiB,CAAC,CACtE,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KACnC;IAED,cAAc,CAAC,OAA6B,EAAE,OAA6B;QACzE,QACE,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI;YAC7B,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO;YACnC,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EACjC;KACH;IAED,YAAY;QACV,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACxB;IAEK,UAAU;;YACd,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC/B,IAAI,CAAC,qBAAqB,CAAC,QAAQ;qBAChC,IAAI,CACHA,QAAM,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,EAC3B,IAAI,CAAC,CAAC,CAAC,CACR;qBACA,SAAS,EAAE;gBACd,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC;aAC1F,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB;KAAA;IAEK,YAAY;;YAChB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,6BAA6B,CACnE,IAAI,CAAC,OAAO,CAAC,KAAK,EAClB,IAAI,CAAC,QAAQ,CAAC,KAAK,CACpB,CAAC;YACF,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;SACtC;KAAA;IAEa,aAAa;;YACzB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtF,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;SACtC;KAAA;IAEa,cAAc,CAAC,SAAqB;;YAChD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEvC,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;gBAChC,MAAM,IAAI,CAAC,2BAA2B,CAAC,SAAS,CAAC,CAAC;gBAClD,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,SAAS,CACnD,eAAe;oBACb,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBAC7C,IAAI,eAAe,CAAC,MAAM,KAAK,eAAe,CAAC,UAAU,EAAE;wBACzD,IAAI,CAAC,YAAY,EAAE,CAAC;wBACpB,IAAI,CAAC,UAAU,EAAE,CAAC;qBACnB;iBACF,EACD,eAAe;oBACb,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBAC9C,CACF,CAAC;aACH;SACF;KAAA;IAEa,2BAA2B,CAAC,SAAqB;;YAC7D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,qCAAqC,CACzE,SAAS,EACT,IAAI,CAAC,OAAO,CAAC,KAAK,CACnB,CAAC;YACF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7B;KAAA;IAEO,YAAY,CAAC,SAAqB;QACxC,QACE,SAAS,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAC5F;KACH;;;YA5IF,SAAS,SAAC;gBACT,QAAQ,EAAE,yBAAyB;gBACnC,gwCAAiD;aAClD;;;YAhBQ,cAAc;YAMrB,iBAAiB;YALM,gBAAgB;YAUhC,qBAAqB;YAR5B,uBAAuB;;;MCEZ,sBAAsB;IADnC;QAEmB,eAAU,GAAG,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;KAgB1F;IAdC,WAAW,CAAC,KAA6B;QACvC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,EAAE,kBAAkB,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;QACvF,QACE,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC;YACpC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC;YAC3B,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC;YAC/B,GAAG,CAAC,MAAM,EAAE,4BAA4B,CAAC,EACzC;KACH;IAEO,uBAAuB,CAAC,MAAsB;QACpD,MAAM,mBAAmB,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,uBAAuB,KAAI,EAAE,CAAC;QAClE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,IAAI,mBAAmB,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACvF;;;YAjBF,UAAU;;;MC6BE,iCAAiC;IAC5C,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,iCAAiC;YAC3C,SAAS,EAAE;gBACT,sBAAsB;gBACtB;oBACE,OAAO,EAAE,UAAU;oBACnB,QAAQ,EAAE;wBACR;4BACE,OAAO,EAAE,WAAW,CAAC,MAAM;4BAC3B,IAAI,EAAE,UAAU;4BAChB,SAAS,EAAE,0BAA0B;4BACrC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC;4BAC1B,IAAI,EAAE,WAAW;4BACjB,QAAQ,EAAE,GAAG;4BACb,WAAW,EAAE,CAAC,sBAAsB,CAAC;yBACtC;qBACS;oBACZ,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;KACH;;;YA5CF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,UAAU;oBACV,YAAY;oBACZ,sBAAsB;oBACtB,sBAAsB;oBACtB,aAAa;iBACd;gBACD,YAAY,EAAE;oBACZ,0BAA0B;oBAC1B,0BAA0B;oBAC1B,2BAA2B;oBAC3B,8BAA8B;iBAC/B;gBACD,eAAe,EAAE;oBACf,0BAA0B;oBAC1B,2BAA2B;oBAC3B,8BAA8B;iBAC/B;aACF;;;MCvBY,wBAAwB;;;YANpC,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,iCAAiC,CAAC,OAAO,EAAE;oBAC3C,4BAA4B,CAAC,OAAO,EAAE;iBACvC;aACF;;;ACTD;;;;;;"}