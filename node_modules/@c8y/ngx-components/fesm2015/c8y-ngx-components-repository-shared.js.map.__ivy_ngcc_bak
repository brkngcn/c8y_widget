{"version":3,"file":"c8y-ngx-components-repository-shared.js","sources":["../../repository/shared/advanced-software.service.ts","../../repository/shared/repository.model.ts","../../repository/shared/repository.service.ts","../../repository/shared/file-download/link-render-type.enum.ts","../../repository/shared/file-download/file-download.component.ts","../../repository/shared/select-modal/repository-select-modal.component.ts","../../repository/shared/software-type/software-type.component.ts","../../repository/shared/shared-repository.module.ts","../../repository/shared/c8y-ngx-components-repository-shared.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApplicationService, FetchClient, IManagedObject, IResultList, Service } from '@c8y/client';\n\n@Injectable()\nexport class AdvancedSoftwareService extends Service<IManagedObject> {\n  private static readonly applicationName = 'advanced-software-mgmt';\n\n  protected baseUrl: string = 'service/advanced-software-mgmt';\n  protected listUrl: string = 'software';\n  protected propertyName = 'softwareList';\n\n  private isAvailable: Promise<boolean>;\n\n  constructor(client: FetchClient, private applicationService: ApplicationService) {\n    super(client);\n  }\n\n  list(filter: object = {}): Promise<IResultList<IManagedObject>> {\n    return super.list(filter);\n  }\n\n  isASMAvailable(): Promise<boolean> {\n    if (this.isAvailable === undefined) {\n      this.isAvailable = this.applicationService\n        .isAvailable(AdvancedSoftwareService.applicationName)\n        .then(result => !!result?.data);\n    }\n\n    return this.isAvailable;\n  }\n}\n","import { IManagedObject } from '@c8y/client';\n\nexport enum RepositoryType {\n  FIRMWARE = 'c8y_Firmware',\n  SOFTWARE = 'c8y_Software',\n  CONFIGURATION = 'c8y_ConfigurationDump'\n}\n\nexport const REPOSITORY_BINARY_TYPES = {\n  [RepositoryType.SOFTWARE]: 'c8y_SoftwareBinary',\n  [RepositoryType.FIRMWARE]: 'c8y_FirmwareBinary',\n  [RepositoryType.CONFIGURATION]: 'c8y_ConfigurationDumpBinary'\n};\n\nexport interface ModalModel {\n  selected?: { id?: string; name?: string; [key: string]: any };\n  version?: string;\n  dependency?: { c8y_Firmware: { version: string } };\n  patchVersion?: string;\n  description?: string;\n  deviceType?: string;\n  softwareType?;\n  binary?: {\n    file?: File;\n    url?: string;\n  };\n}\n\nexport interface RepositoryCategory extends Partial<IManagedObject> {\n  type: string;\n  description?: string;\n  c8y_Filter?: {\n    type: string;\n  };\n  softwareType?: string;\n}\n\nexport interface FirmwareBinary extends Partial<IManagedObject> {\n  type: 'c8y_FirmwareBinary';\n  c8y_Firmware: {\n    version: string;\n    url: string;\n  };\n}\n\nexport interface FirmwarePatchBinary extends FirmwareBinary {\n  c8y_Patch: {\n    dependency: string;\n  };\n}\n\nexport interface SoftwareBinary extends Partial<IManagedObject> {\n  type: string;\n  c8y_Software: {\n    version: string;\n    url: string;\n  };\n}\n\nexport type RepositoryBinary = FirmwareBinary | SoftwareBinary | FirmwarePatchBinary;\n\nexport interface SelectedRepositoryBinary {\n  id?: string;\n  name: string;\n  version: string;\n  url: string;\n  dependency?: string;\n  c8y_Patch?: boolean;\n  isPatch?: boolean;\n  patchDependency?: string;\n}\n\nexport interface DeviceFirmware {\n  version: string;\n  url: string;\n  name: string;\n}\n\nexport interface DeviceSoftware {\n  name: string;\n  version?: string;\n  url: string;\n  softwareType?: string;\n}\n\nexport interface DeviceSoftwareChange extends DeviceSoftware {\n  action: 'install' | 'delete';\n}\n\nexport interface ConfigurationSnapshot {\n  id?: string;\n  time: string;\n  name: string;\n  binaryUrl?: string;\n  binary?: any;\n  binaryType?: any;\n  deviceType?: string;\n  configurationType?: string;\n  description?: string;\n}\n\nexport interface SupportedConfigurationItem {\n  name: string;\n  deviceType?: string;\n  configurationType?: string;\n  isLegacy?: boolean;\n}\n\nexport interface DeviceConfigurationListEmptyState {\n  icon?: string;\n  title?: string;\n  text?: string;\n}\n\nexport enum DeviceConfigurationOperation {\n  UPLOAD_CONFIG = 'c8y_UploadConfigFile',\n  DOWNLOAD_CONFIG = 'c8y_DownloadConfigFile',\n  CONFIG = 'c8y_Configuration',\n  SEND_CONFIG = 'c8y_SendConfiguration'\n}\nexport interface FilterCriteria {\n  name?: string;\n  [key: string]: any;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  EventBinaryService,\n  EventService,\n  IdReference,\n  IEvent,\n  IFetchResponse,\n  IIdentified,\n  IManagedObject,\n  IManagedObjectBinary,\n  InventoryBinaryService,\n  InventoryService,\n  IOperation,\n  IResult,\n  IResultList,\n  OperationService,\n  OperationStatus,\n  QueriesUtil\n} from '@c8y/client';\nimport { AlertService, gettext, OperationRealtimeService } from '@c8y/ngx-components';\nimport {\n  assign,\n  cloneDeep,\n  find,\n  forEach,\n  get,\n  head,\n  isNil,\n  isString,\n  isUndefined,\n  map as _map,\n  omitBy,\n  pick,\n  remove,\n  set\n} from 'lodash-es';\nimport { defer, from, merge, Observable, of, throwError } from 'rxjs';\nimport { filter, map, switchMap, take, takeWhile, withLatestFrom } from 'rxjs/operators';\nimport { AdvancedSoftwareService } from './advanced-software.service';\nimport {\n  ConfigurationSnapshot,\n  DeviceFirmware,\n  DeviceSoftware,\n  DeviceSoftwareChange,\n  FirmwareBinary,\n  FirmwarePatchBinary,\n  ModalModel,\n  RepositoryBinary,\n  RepositoryCategory,\n  RepositoryType,\n  REPOSITORY_BINARY_TYPES,\n  SelectedRepositoryBinary,\n  SoftwareBinary\n} from './repository.model';\n\n@Injectable()\nexport class RepositoryService {\n  readonly dateFrom = new Date(0);\n  readonly dateTo = new Date(Date.now() + 86400000); // 1 day in the future\n  private queriesUtil: QueriesUtil;\n\n  constructor(\n    private inventory: InventoryService,\n    private inventoryBinary: InventoryBinaryService,\n    private operation: OperationService,\n    private alert: AlertService,\n    private event: EventService,\n    private operationRealtime: OperationRealtimeService,\n    private eventBinary: EventBinaryService,\n    private advancedSoftwareService: AdvancedSoftwareService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  /**\n   * Lists repository entries of given type.\n   * @param type The type of repository entries to list.\n   * @param options Extra listing options.\n   */\n  listRepositoryEntries(\n    type: RepositoryType,\n    options?: {\n      /** Additional query. */\n      query?: any;\n      /** (deprecated - to be removed) Only include entries with matching partial names. */\n      partialName?: string;\n      /** Include entries with matching partial text in the specified properties. */\n      partialTextFilter?: { partialText: string; properties: string[] };\n      /** Exclude legacy entries. */\n      skipLegacy?: boolean;\n      /** Exclude default ordering. */\n      skipDefaultOrder?: boolean;\n      /** Other request params. */\n      params?: any;\n    }\n  ) {\n    const defaultOrder = [{ name: 1 }];\n    const defaultFilters = { type };\n    const legacyFilters = { __has: `url` };\n    let filters = {};\n\n    let fullQuery = (options && options.query) || {};\n    if (!options || (options && !options.skipDefaultOrder)) {\n      fullQuery = this.queriesUtil.addOrderbys(fullQuery, defaultOrder, 'prepend');\n    }\n\n    fullQuery = this.queriesUtil.addAndFilter(fullQuery, defaultFilters);\n\n    if (options && options.partialTextFilter) {\n      const { partialText, properties } = options.partialTextFilter;\n      const orFilter = { __or: properties.map(property => ({ [property]: `*${partialText}*` })) };\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, orFilter);\n    }\n\n    if (options && options.partialName) {\n      // backwards compatibility if\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { name: `*${options.partialName}*` });\n    }\n\n    if (options && options.skipLegacy) {\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { __not: legacyFilters });\n    }\n\n    filters = {\n      query: this.queriesUtil.buildQuery(fullQuery),\n      pageSize: 50,\n      withTotalPages: true,\n      ...((options && options.params) || {})\n    };\n    return this.inventory.list(filters);\n  }\n\n  // TODO: merge with create()\n  async save(data: ModalModel, type: RepositoryType, mo: Partial<IManagedObject> = {}) {\n    switch (type) {\n      case RepositoryType.CONFIGURATION: {\n        Object.assign(mo, {\n          type: RepositoryType.CONFIGURATION,\n          configurationType: data.selected ? data.selected.configurationType : undefined,\n          name: data.version,\n          description: data.description,\n          deviceType: data.deviceType,\n          c8y_Global: {}\n        });\n        if (!data.deviceType && mo.id) {\n          mo.deviceType = null;\n        }\n        if (!data.selected && mo.id) {\n          mo.configurationType = null;\n        }\n        break;\n      }\n    }\n\n    const existingUrl = mo.url;\n    if (data.binary.url) {\n      mo.url = data.binary.url;\n    } else if (data.binary.file) {\n      const response = await this.inventoryBinary.create(data.binary.file, {\n        c8y_Global: {}\n      } as Partial<IManagedObject>);\n      mo.url = response.data.self;\n    }\n\n    if (mo.id) {\n      return this.updateEntry(mo, existingUrl);\n    }\n    return this.createEntry(mo);\n  }\n\n  async create(modal: ModalModel, type: RepositoryType) {\n    switch (type) {\n      case RepositoryType.FIRMWARE:\n      case RepositoryType.SOFTWARE:\n        return this.createFirmwareOrSoftware(modal, type);\n    }\n  }\n\n  async createFirmwareOrSoftware(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<RepositoryCategory> {\n    let binary: IManagedObjectBinary;\n    let binaryURL: string;\n    let repositoryEntry: RepositoryCategory;\n    let repositoryBinary: FirmwareBinary | SoftwareBinary;\n    const mos = [];\n    const {\n      selected: { id: selectedId },\n      binary: { file, url }\n    } = modal;\n    try {\n      if (file) {\n        ({ data: binary } = await this.saveBinary(file));\n        ({ self: binaryURL } = binary);\n        mos.push(binary);\n      } else {\n        binaryURL = url;\n      }\n\n      ({ data: repositoryEntry } = await this.createOrUpdateRepositoryEntry(modal, type));\n      if (isNil(selectedId)) {\n        mos.push(repositoryEntry);\n      }\n\n      ({ data: repositoryBinary } = await this.createRepositoryBinary(\n        modal,\n        binaryURL,\n        type,\n        repositoryEntry\n      ));\n      mos.push(repositoryBinary);\n\n      if (file) {\n        await this.linkBinary(repositoryBinary, binary);\n      }\n\n      return repositoryEntry;\n    } catch (error) {\n      this.cleanUp(mos);\n      this.errorMsg();\n\n      // Propagate error\n      throw error;\n    }\n  }\n\n  saveBinary(file: File): Promise<IResult<IManagedObjectBinary>> {\n    return this.inventoryBinary.create(file, { c8y_Global: {} } as Partial<IManagedObject>);\n  }\n\n  createOrUpdateRepositoryEntry(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<IResult<RepositoryCategory>> {\n    const {\n      selected: { id, name },\n      description,\n      deviceType\n    } = modal;\n\n    const mo = {\n      id,\n      name: id ? undefined : name,\n      description,\n      type: id ? undefined : type,\n      c8y_Global: {}\n    };\n\n    if (deviceType) {\n      set(mo, 'c8y_Filter.type', deviceType);\n    }\n\n    if (modal.softwareType) {\n      set(mo, 'softwareType', modal.softwareType.softwareType);\n    }\n\n    return id\n      ? (this.inventory.update(mo) as Promise<IResult<RepositoryCategory>>)\n      : (this.inventory.create(mo) as Promise<IResult<RepositoryCategory>>);\n  }\n\n  createRepositoryBinary(\n    modal: ModalModel,\n    binaryURL: string,\n    type: RepositoryType,\n    parent: RepositoryCategory\n  ): Promise<IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>> {\n    const mo = this.prepareRepositoryBinaryMO(modal, binaryURL, type);\n\n    return this.inventory.childAdditionsCreate(mo, parent) as Promise<\n      IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>\n    >;\n  }\n\n  prepareRepositoryBinaryMO(modal: ModalModel, binaryURL: string, type: RepositoryType) {\n    const { version, patchVersion, dependency } = modal;\n    const result = {\n      type: REPOSITORY_BINARY_TYPES[type],\n      [type]: {\n        url: binaryURL\n      },\n      c8y_Global: {}\n    };\n\n    if (dependency) {\n      set(result, [type, 'version'], patchVersion);\n      assign(result, {\n        c8y_Patch: {\n          dependency: dependency.c8y_Firmware.version\n        }\n      });\n    } else {\n      set(result, [type, 'version'], version);\n    }\n    return result;\n  }\n\n  async linkBinary(\n    repositoryBinary: FirmwareBinary | SoftwareBinary,\n    binary: IManagedObjectBinary\n  ) {\n    const { id: repositoryBinaryId } = repositoryBinary;\n    if (binary) {\n      const { id: binaryId } = binary;\n      return this.inventory.childAdditionsAdd(binaryId, repositoryBinaryId);\n    }\n  }\n\n  cleanUp(mosToDelete: IIdentified[]) {\n    mosToDelete.forEach(mo => {\n      const { c8y_IsBinary } = mo;\n      isUndefined(c8y_IsBinary) ? this.delete(mo) : this.inventoryBinary.delete(mo);\n    });\n  }\n\n  delete(entity: IIdentified): Promise<IResult<null>> {\n    return this.inventory.delete(entity, { forceCascade: true });\n  }\n\n  errorMsg() {\n    const msg = gettext('Failed to save');\n    this.alert.danger(msg);\n  }\n\n  getBaseVersionsCount$(entry: IManagedObject): Observable<number> {\n    if (this.isLegacyEntry(entry)) {\n      return of(1);\n    }\n    return from(this.listBaseVersions(entry, { pageSize: 1, withTotalPages: true })).pipe(\n      map(({ paging }) => paging.totalPages)\n    );\n  }\n\n  getBaseVersionFromMO(mo: RepositoryBinary): string {\n    return this.isPatch(mo) ? get(mo, 'c8y_Patch.dependency') : get(mo, 'c8y_Firmware.version');\n  }\n\n  isPatch(mo: RepositoryBinary): boolean {\n    return !!get(mo, 'c8y_Patch.dependency');\n  }\n\n  getPatchVersionsCount$(entry: IManagedObject, baseVersion: FirmwareBinary): Observable<number> {\n    if (this.isLegacyEntry(baseVersion)) {\n      return of(0);\n    }\n    return from(\n      this.listPatchVersions(entry, baseVersion, { pageSize: 1, withTotalPages: true })\n    ).pipe(map(({ paging }) => paging.totalPages));\n  }\n\n  isLegacyEntry(entry: Partial<IManagedObject>): boolean {\n    return Boolean(entry.url);\n  }\n\n  /**\n   * Lists all versions (base and patch ones) of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listAllVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const VERSION_FILTER_ORDER = {\n      __filter: {},\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, VERSION_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists base versions of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listBaseVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const NO_PATCH_FILTER_ORDER = {\n      __filter: {\n        __not: { __has: 'c8y_Patch' }\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, NO_PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listPatchVersions(entry: IManagedObject, baseVersion: FirmwareBinary | string, params = {}) {\n    const version = isString(baseVersion) ? baseVersion : get(baseVersion, 'c8y_Firmware.version');\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        'c8y_Patch.dependency': version\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry including the base version.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * In terms of legacy base version the entry gets transformed to fit the needed data model.\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listBaseVersionAndPatches(entry: IManagedObject, baseVersion: IManagedObject, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return Promise.resolve({\n        data: [\n          Object.assign(\n            {\n              c8y_Firmware: {\n                version: entry.version,\n                url: entry.url\n              }\n            },\n            entry\n          )\n        ]\n      });\n    }\n\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        __or: {\n          'c8y_Patch.dependency': baseVersion.c8y_Firmware.version,\n          'c8y_Firmware.version': baseVersion.c8y_Firmware.version\n        }\n      },\n      __orderby: [{ 'c8y_Patch.dependency': 1 }, { 'c8y_Firmware.version': 1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  listChildren(entry: Partial<IManagedObject>, filters = {}, params: any = {}) {\n    const childrenFilters = { __bygroupid: entry.id };\n    const query = this.queriesUtil.addAndFilter(filters, childrenFilters);\n    // FIXME: needed because of issue in forOf directive (...)\n    params.withTotalPages = true;\n    return this.inventory.listQuery(query, params);\n  }\n\n  /**\n   * Fetches all items from the list starting with the provided page.\n   * @param firstPage The first page of the list to fetch all items for.\n   */\n  async fetchAllItemsFromList(firstPage) {\n    let allItems;\n\n    if (!firstPage.then) {\n      allItems = [...firstPage];\n    } else {\n      let { paging, data: items } = await firstPage;\n      allItems = [...items];\n\n      while (paging && paging.nextPage) {\n        ({ paging, data: items } = await paging.next());\n        allItems = [...allItems, ...items];\n      }\n    }\n\n    return allItems;\n  }\n\n  /**\n   * Gets top level repository entry managed object for base or patch version.\n   * @param mo Base or patch version managed object with parents.\n   */\n  getRepositoryEntryMO$(mo: IManagedObject): Observable<IManagedObject | undefined> {\n    if (!mo) {\n      return of(undefined);\n    }\n    const [reference] = get(mo, 'additionParents.references');\n    const id = get(reference, 'managedObject.id');\n    return id\n      ? from(this.inventory.detail(id, { withChildren: false })).pipe(map(({ data }) => data))\n      : of(undefined);\n  }\n  /**\n   * Gets base or patch version managed object.\n   * @param deviceRepositoryFragment Device repository fragment.\n   * @param type Top level repository entry type.\n   * @param configuration Configuration object with options:\n   * - **skipLegacy** - `boolean` - Exclude legacy entries.\n   * - **filters** - `object` - Filter object.\n   *\n   * @deprecated as it doesn't support 'missing url' case\n   */\n  getRepositoryBinaryMoByVersion(\n    deviceRepositoryFragment: DeviceFirmware | DeviceSoftware,\n    type: RepositoryType,\n    { skipLegacy = false, filters = {} }: { skipLegacy?: boolean; filters?: object } = {}\n  ): Promise<IManagedObject> {\n    const { version, url, name } = deviceRepositoryFragment;\n    const repositoryBinaryType = REPOSITORY_BINARY_TYPES[type];\n    let query;\n    const newModelBaseVersionQuery = {\n      [`${type}.version`]: version,\n      [`${type}.url`]: url,\n      type: repositoryBinaryType\n    };\n    const legacyVersionQuery = { url, type, name };\n    filters = { withChildren: false, withParents: true, ...filters };\n\n    if (skipLegacy) {\n      query = {\n        __and: {\n          ...newModelBaseVersionQuery\n        }\n      };\n    } else {\n      query = {\n        __or: [{ __and: { ...newModelBaseVersionQuery } }, { __and: { ...legacyVersionQuery } }]\n      };\n    }\n\n    return this.inventory.listQuery(query, filters).then(({ data }) => head(data));\n  }\n\n  getBinaryName$(binaryUrl: string): Observable<string> {\n    if (!binaryUrl) {\n      return of('---');\n    }\n\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId) {\n      return of(binaryUrl);\n    }\n    return defer(() => this.inventory.detail(binaryId).then(result => result.data)).pipe(\n      map(mo => mo.name)\n    );\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find\n   * repository entries of specified type matching the type of provided device.\n   * @param repositoryType The type of repository entries which will be queried with the generated query.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   */\n\n  getDeviceTypeQuery(repositoryType: RepositoryType, device: IManagedObject): object {\n    let result = { type: repositoryType };\n    if (repositoryType === RepositoryType.CONFIGURATION) {\n      if (device.type) {\n        result = this.queriesUtil.addAndFilter(result, {\n          __or: [{ deviceType: device.type }, { __not: { __has: `deviceType` } }]\n        });\n      }\n    } else {\n      result = this.queriesUtil.addAndFilter(result, {\n        __or: [\n          { 'c8y_Filter.type': device.type },\n          { 'c8y_Filter.type': '' },\n          { __not: { __has: `c8y_Filter.type` } }\n        ]\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find\n   * repository entries matching the predefined software types provided in the device.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   * @param query The query to which the software types filters will be attached. Default value is an object containg repository type software.\n   */\n  getSoftwareTypeQuery(device: IManagedObject, query?: object): object {\n    let result = { ...(query || {}), type: RepositoryType.SOFTWARE };\n\n    if (device.c8y_SupportedSoftwareTypes) {\n      result = this.queriesUtil.addAndFilter(result, {\n        __or: [device.c8y_SupportedSoftwareTypes.map(type => ({ softwareType: type }))]\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find configuration repository entries\n   * matching the type of provided device and specified configuration type.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   * @param configurationType Configuration type for which matching repository entries will be queried with the generated query.\n   */\n  getConfigurationTypeQuery(device: IManagedObject, configurationType: string): object {\n    const query = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION, device);\n    return this.queriesUtil.addAndFilter(query, {\n      __or: [\n        { configurationType },\n        { configurationType: '' },\n        { __not: { __has: `configurationType` } }\n      ]\n    });\n  }\n\n  /**\n   * Gets the list of software installed in the device in the uniform format.\n   * Supports c8y_SoftwareList and c8y_Software fragments.\n   * @param device The device whose software list should be returned.\n   */\n  getDeviceSoftwareList(device: IManagedObject): DeviceSoftware[] {\n    if (device.c8y_SoftwareList) {\n      return cloneDeep(device.c8y_SoftwareList);\n    }\n    if (device.c8y_Software) {\n      return _map(device.c8y_Software, (version, name) => ({ name, version }));\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a software update operation for given device and the list of changes, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param changes The list of software changes which should be applied.\n   */\n  async createSoftwareUpdateOperation(\n    device: IManagedObject,\n    changes: DeviceSoftwareChange[]\n  ): Promise<IOperation> {\n    const operation = await this.getSoftwareUpdateOperation(device, changes);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a software update operation for given device and changes.\n   * Returned operation type depends on device's supported operations.\n   * Supports c8y_SoftwareUpdate, c8y_SoftwareList, and c8y_Software operations.\n   * @param device The device for which operation should be prepared.\n   * @param changes The list of software changes which should be applied.\n   */\n  async getSoftwareUpdateOperation(\n    device: IManagedObject,\n    changes: DeviceSoftwareChange[]\n  ): Promise<IOperation> {\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Apply software changes: ${changes\n        .map(\n          change =>\n            `${change.action} \"${change.name}\"${\n              change.version ? ` (version: ${change.version})` : ''\n            }`\n        )\n        .join(', ')}`\n    };\n    if (device.c8y_SupportedOperations.includes('c8y_SoftwareUpdate')) {\n      operation.c8y_SoftwareUpdate = (cloneDeep(changes) || []).map(change =>\n        omitBy(change, isNil)\n      );\n    } else if (device.c8y_SupportedOperations.includes('c8y_SoftwareList')) {\n      operation.c8y_SoftwareList = cloneDeep(\n        await this.getCurrentSoftware(device, 'c8y_SoftwareList', [])\n      );\n      changes.forEach(change => {\n        const deviceSoftware: DeviceSoftware = pick(omitBy(change, isNil), [\n          'name',\n          'version',\n          'url',\n          'softwareType'\n        ]);\n        if (change.action === 'delete') {\n          remove(operation.c8y_SoftwareList, deviceSoftware);\n        }\n        if (change.action === 'install') {\n          const softwareItemToUpdateIdx = operation.c8y_SoftwareList.findIndex(\n            item => item.name === change.name\n          );\n          if (softwareItemToUpdateIdx > -1) {\n            // update software\n            operation.c8y_SoftwareList.splice(softwareItemToUpdateIdx, 1, deviceSoftware);\n          } else {\n            // install software\n            operation.c8y_SoftwareList.push(deviceSoftware);\n          }\n        }\n      });\n    } else if (device.c8y_SupportedOperations.includes('c8y_Software')) {\n      operation.c8y_Software = cloneDeep(await this.getCurrentSoftware(device, 'c8y_Software', {}));\n      changes.forEach(change => {\n        if (change.action === 'delete') {\n          delete operation.c8y_Software[change.name];\n        }\n        if (change.action === 'install') {\n          operation.c8y_Software[change.name] = change.version;\n        }\n      });\n    }\n    return operation;\n  }\n\n  /**\n   * Extracts the list of device software changes from given operation in the context of given device.\n   * @param operation The operation from which the list should be extracted.\n   * @param device The target device of the operation.\n   */\n  async getDeviceSoftwareChangesFromOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    if (operation.c8y_SoftwareUpdate) {\n      return cloneDeep(operation.c8y_SoftwareUpdate);\n    }\n    if (operation.c8y_SoftwareList) {\n      return await this.getDeviceSoftwareChangesFromSoftwareListOperation(operation, device);\n    }\n    if (operation.c8y_Software) {\n      return await this.getDeviceSoftwareChangesFromSoftwareOperation(operation, device);\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and the selected repository binary, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param selectedOption The selected repository binary option.\n   */\n  async createFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): Promise<IOperation> {\n    const operation = this.getFirmwareUpdateOperation(device, selectedOption);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and selected version.\n   * Supports c8y_Firmware operation.\n   * @param device The device for which operation should be prepared.\n   * @param selectedOption Selected firmware version.\n   */\n  getFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): IOperation {\n    delete selectedOption.id;\n\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Update firmware to: \"${selectedOption.name}\"${\n        selectedOption.version ? ` (version: ${selectedOption.version})` : ''\n      }`,\n      c8y_Firmware: { ...selectedOption }\n    };\n\n    return operation;\n  }\n\n  /**\n   * Prepares a configuration file upload operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param isLegacy  A legacy operation is created without a configurationType.\n   */\n  getUploadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    isLegacy: boolean = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Retrieve configuration snapshot from device ${device.name}`,\n        c8y_UploadConfigFile: {}\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Retrieve ${configurationType} configuration snapshot from device ${device.name}`,\n      c8y_UploadConfigFile: {\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Prepares a configuration file download operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param binaryUrl The url of a binary to be downloaded.\n   * @param isLegacy A legacy operation is created without a configurationType.\n   */\n  getDownloadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    configSnapshot: ConfigurationSnapshot,\n    isLegacy: boolean = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Send configuration snapshot ${configSnapshot.name} to device ${device.name}`,\n        c8y_DownloadConfigFile: {\n          url: configSnapshot.binaryUrl,\n          c8y_ConfigurationDump: {\n            id: configSnapshot.id\n          }\n        }\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Send configuration snapshot ${configSnapshot.name} of configuration type ${configurationType} to device ${device.name}`,\n      c8y_DownloadConfigFile: {\n        url: configSnapshot.binaryUrl,\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Gets the last firmware update operation for given device.\n   * Looks for c8y_Firmware operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastFirmwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getFirstMatchingOperation([{ ...filters, fragmentType: 'c8y_Firmware' }]);\n  }\n\n  /**\n   * Gets the last software update operation for given device.\n   * Looks for c8y_SoftwareUpdate, c8y_SoftwareList, or c8y_Software operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastSoftwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getLatestMatchingOperation([\n      { ...filters, fragmentType: 'c8y_SoftwareUpdate' },\n      { ...filters, fragmentType: 'c8y_SoftwareList' },\n      { ...filters, fragmentType: 'c8y_Software' }\n    ]);\n  }\n\n  /**\n   * Iterates over the list of filters and queries the operations.\n   * If a query returns at least one operation, the first one will be returned.\n   * Otherwise the next query will be performed.\n   * If none of the queries returns any operation, null will be returned.\n   * @param filtersList The list of filters for the queries.\n   */\n  async getFirstMatchingOperation(filtersList: any[]): Promise<IOperation> {\n    let matchingOperation = null;\n\n    for (const filters of filtersList) {\n      const operations = (await this.operation.list(filters)).data;\n      if (operations.length) {\n        matchingOperation = operations[0];\n        break;\n      }\n    }\n\n    return matchingOperation;\n  }\n\n  /**\n   * Iterates over the list of filters and queries the operations.\n   * It compares the operations retrieved by the queries by 'creationTime'\n   * and return the latest one.\n   * If none of the queries returns any operation, null will be returned.\n   * @param filtersList The list of filters for the queries.\n   */\n  async getLatestMatchingOperation(filtersList: any[]): Promise<IOperation> {\n    let matchingOperation: IOperation = null;\n\n    for (const filters of filtersList) {\n      const operations: IOperation[] = (await this.operation.list(filters)).data;\n      if (operations.length) {\n        if (matchingOperation) {\n          matchingOperation =\n            new Date(matchingOperation.creationTime).getTime() <\n            new Date(operations[0].creationTime).getTime()\n              ? operations[0]\n              : matchingOperation;\n        } else {\n          matchingOperation = operations[0];\n        }\n      }\n    }\n\n    return matchingOperation;\n  }\n\n  /**\n   * Creates the operation and returns an observable to track its progress.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to create and track.\n   */\n  createObservedOperation(operation: IOperation): Observable<IOperation> {\n    return from(this.operation.create(operation)).pipe(\n      map(({ data }) => data),\n      take(1),\n      switchMap(createdOperation => this.observeOperation(createdOperation))\n    );\n  }\n\n  /**\n   * Returns an observable to track progress of given operation.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to be observed.\n   */\n  observeOperation(operation: IOperation): Observable<IOperation> {\n    const observedOperation$ = of(operation);\n    const operationUpdates$ = observedOperation$.pipe(\n      switchMap(observedOperation => this.operationRealtime.onAll$(observedOperation.deviceId)),\n      map(({ data }) => data as IOperation),\n      withLatestFrom(observedOperation$),\n      filter(([operationUpdate, observedOperation]) => operationUpdate.id === observedOperation.id),\n      switchMap(([operationUpdate]) => {\n        if (operationUpdate.status === OperationStatus.FAILED) {\n          return throwError(operationUpdate);\n        }\n        return of(operationUpdate);\n      }),\n      takeWhile(operationUpdate => operationUpdate.status !== OperationStatus.SUCCESSFUL, true)\n    );\n    return merge(observedOperation$, operationUpdates$);\n  }\n\n  /**\n   * Gets a single event with latest creationTime for the given device Id and event type.\n   * @param deviceId The device Id for which the events should be queried.\n   * @param type Event type.\n   */\n  async getLatestConfigurationEvent(\n    deviceId: string | number,\n    type: string\n  ): Promise<IEvent | undefined> {\n    const eventFilter: object = {\n      source: deviceId,\n      type,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      pageSize: 1\n    };\n\n    const { data } = await this.event.list(eventFilter);\n    return data[0];\n  }\n\n  /**\n   * Gets a list of operations for the given device Id, and operation type.\n   * @param deviceId The device Id for which the operation should be queried.\n   * @param operationType Operation type fragment.\n   */\n  async getConfigFileOperationList(\n    deviceId: string | number,\n    operationType: string\n  ): Promise<IOperation[]> {\n    const operationFilter: object = {\n      deviceId,\n      fragmentType: operationType,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      revert: true,\n      pageSize: 2000\n    };\n\n    return (await this.operation.list(operationFilter)).data;\n  }\n\n  /**\n   * Gets latest uploaded configuration snapshot for the given device, and configuration type.\n   * @param device The device for which the configuration snapshot was uploaded.\n   * @param configurationType Selected configuration type.\n   */\n  async getConfigSnapshot(\n    device: IManagedObject,\n    configurationType: string\n  ): Promise<ConfigurationSnapshot | undefined> {\n    const event: IEvent = await this.getLatestConfigurationEvent(device.id, configurationType);\n    let configSnapshot: ConfigurationSnapshot;\n    if (event) {\n      configSnapshot = {\n        time: event.time,\n        name: event.text,\n        deviceType: device.type,\n        configurationType\n      };\n      try {\n        configSnapshot.binary = await (await this.eventBinary.download(event)).text();\n        if (event.c8y_IsBinary) {\n          configSnapshot.binaryType = event.c8y_IsBinary.type;\n        }\n      } catch (ex) {\n        const msg = gettext('Could not get the binary.');\n        this.alert.danger(msg);\n      }\n    }\n    return configSnapshot;\n  }\n\n  async getLegacyConfigSnapshot(deviceId) {\n    let configSnapshot: ConfigurationSnapshot;\n    let mo;\n    const device = (await this.inventory.detail(deviceId, { withChildren: false })).data;\n    const snapshotId = device.c8y_ConfigurationDump && device.c8y_ConfigurationDump.id;\n    if (!snapshotId) {\n      return;\n    }\n\n    try {\n      mo = (await this.inventory.detail(snapshotId)).data;\n    } catch (ex) {\n      // do nothing\n    }\n    if (mo) {\n      configSnapshot = {\n        time: mo.creationTime,\n        name: mo.name\n      };\n      configSnapshot.binary = await this.getBinaryText(mo.url, { allowExternal: false });\n    }\n    return configSnapshot;\n  }\n\n  /**\n   * Returns a binary object as text.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **allowExternal** - `boolean` - allows downloading external binary file\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  async getBinaryText(\n    binaryUrl: string,\n    options: { allowExternal: boolean; noAlerts?: boolean }\n  ): Promise<string> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    let res;\n    if (!binaryId) {\n      if (options.allowExternal) {\n        res = await this.getExternalBinaryResponse(binaryUrl, options);\n      }\n    } else {\n      res = await this.getInternalBinaryResponse(binaryId, options);\n    }\n    if (!res) {\n      return null;\n    }\n    return res.text();\n  }\n\n  /**\n   * Returns a binary object as File.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **allowExternal** - `boolean` - allows downloading external binary file\n   */\n  async getBinaryFile(binaryUrl: string, options: { allowExternal: boolean }): Promise<File> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId && !options.allowExternal) {\n      return null;\n    }\n    // @TODO: note that it doesn't solve issue with external binary here, such url won't have binaryId, so we won't know the name or contentType to use in File constructor, let's add a @FIXME comment for now?\n    const { name, contentType } = (await this.inventory.detail(binaryId)).data;\n    const res = !!binaryId\n      ? await this.getInternalBinaryResponse(binaryId)\n      : await this.getExternalBinaryResponse(binaryUrl);\n    const arrayBuffer = await res.arrayBuffer();\n    return new File([arrayBuffer], name, { type: contentType });\n  }\n\n  /**\n   * Gets the last configuration update operation for given device.\n   * Looks for c8y_Configuration and c8y_SendConfiguration operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastConfigUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getLatestMatchingOperation([\n      { ...filters, fragmentType: 'c8y_Configuration' },\n      { ...filters, fragmentType: 'c8y_SendConfiguration' }\n    ]);\n  }\n\n  /**\n   * Prepares a configuration download operation for given device and its current configuration.\n   * Supports c8y_SendConfiguration operation.\n   * @param device The device for which operation should be prepared.\n   */\n  createTextBasedConfigurationReloadOperation(device: IManagedObject): IOperation {\n    return {\n      deviceId: device.id,\n      description: gettext('Requested current configuration'),\n      c8y_SendConfiguration: {}\n    };\n  }\n\n  /**\n   * Prepares a configuration update operation for the given device.\n   * Supports c8y_Configuration operation.\n   * @param device The device for which operation should be prepared.\n   * @param config The configuration which will update the existing one.\n   */\n  createTextBasedConfigurationUpdateOperation(device: IManagedObject, config: string): IOperation {\n    return {\n      deviceId: device.id,\n      description: gettext('Configuration update'),\n      c8y_Configuration: {\n        config\n      }\n    };\n  }\n\n  async getBinary(binaryId: IdReference): Promise<IFetchResponse> {\n    try {\n      return await this.inventoryBinary.download(binaryId);\n    } catch (ex) {\n      const msg = gettext('Could not get the binary.');\n      this.alert.danger(msg);\n    }\n  }\n\n  /**\n   * Gets all available snapshots from the repository for the given device.\n   * @param device The device for which the snapshots should be prepared.\n   * @param configurationType Selected configuration type.\n   */\n  async getSnapshotsFromRepository(device, configurationType) {\n    const searchQuery = this.getConfigurationTypeQuery(device, configurationType);\n    const res = await this.listRepositoryEntries(RepositoryType.CONFIGURATION, {\n      query: searchQuery,\n      params: { pageSize: 100 }\n    });\n    return res.data;\n  }\n\n  /**\n   * Checks if a device already have a given software installed\n   * @param deviceId Id of the device to be checked\n   * @param software The software to be checked\n   */\n  async isSoftwareInstalledOnDevice(\n    deviceId: string | number,\n    software: DeviceSoftware\n  ): Promise<boolean> {\n    if (!(await this.advancedSoftwareService.isASMAvailable())) {\n      return false;\n    }\n\n    const queryFilter = { deviceId };\n    if (software?.name) {\n      set(queryFilter, 'name', software.name);\n    }\n    if (software?.version) {\n      set(queryFilter, 'version', software.version);\n    }\n    return this.advancedSoftwareService.list(queryFilter).then(result => !!result.data?.length);\n  }\n\n  /**\n   * Returns a binary object.\n   * @param binaryId binary ID\n   * @param options The object with additional options:\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  private async getInternalBinaryResponse(\n    binaryId: IdReference,\n    options: { noAlerts?: boolean } = {}\n  ): Promise<IFetchResponse> {\n    let res;\n    try {\n      res = await this.inventoryBinary.download(binaryId);\n    } catch (ex) {\n      if (!options.noAlerts) {\n        const msg = gettext('Could not get the binary.');\n        this.alert.danger(msg);\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Returns a binary object.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  private async getExternalBinaryResponse(\n    binaryUrl: string,\n    options: { noAlerts?: boolean } = {}\n  ): Promise<IFetchResponse> {\n    let res;\n    try {\n      const fetchRes = await fetch(binaryUrl);\n      if (fetchRes.status >= 400) {\n        throw res;\n      }\n      res = fetchRes;\n    } catch {\n      if (!options.noAlerts) {\n        const msg = gettext('Could not get the external binary');\n        this.alert.danger(msg);\n      }\n    }\n    return res;\n  }\n\n  private async createEntry(mo: Partial<IManagedObject>) {\n    const binaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    const newMo = await this.inventory.create(mo);\n    if (binaryId) {\n      await this.inventory.childAdditionsAdd(binaryId, newMo.data);\n    }\n    return newMo;\n  }\n\n  private async updateEntry(mo: Partial<IManagedObject>, url) {\n    const existingBinaryId = await this.inventoryBinary.getIdFromUrl(url);\n    const newBinaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    if (existingBinaryId && existingBinaryId !== newBinaryId) {\n      const id = this.inventoryBinary.getIdFromUrl(url);\n      await this.inventoryBinary.delete(id);\n    }\n    if (newBinaryId) {\n      await this.inventory.childAdditionsAdd(newBinaryId, mo);\n    }\n    return this.inventory.update(mo);\n  }\n\n  private getBaseVersionResultListForLegacyEntry(entry) {\n    return Promise.resolve({\n      res: {} as IFetchResponse,\n      data: [\n        {\n          ...entry,\n          [entry.type]: {\n            version: entry.version,\n            url: entry.url\n          }\n        }\n      ]\n    } as IResultList<IManagedObject>);\n  }\n\n  private async getDeviceSoftwareChangesFromSoftwareListOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    const changes: DeviceSoftwareChange[] = [];\n    const deviceSoftwareList = await this.getCurrentSoftware(device, 'c8y_SoftwareList', []);\n    forEach(operation.c8y_SoftwareList, operationSoftware => {\n      const deviceSoftware = find(deviceSoftwareList, { name: operationSoftware.name });\n      if (\n        (operationSoftware && operationSoftware.version) !==\n        (deviceSoftware && deviceSoftware.version)\n      ) {\n        changes.push({\n          ...operationSoftware,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(deviceSoftwareList, deviceSoftware => {\n      const operationSoftware = find(operation.c8y_SoftwareList, { name: deviceSoftware.name });\n      if (\n        (operationSoftware && operationSoftware.version) !==\n        (deviceSoftware && deviceSoftware.version)\n      ) {\n        const installChange = changes.find(\n          change => deviceSoftware.name === change.name && change.action === 'install'\n        );\n        // check that this software is not an installation software change, otherwise it's an update and not a removal\n        if (!installChange) {\n          changes.push({\n            ...deviceSoftware,\n            action: 'delete'\n          } as DeviceSoftwareChange);\n        }\n      }\n    });\n    return changes;\n  }\n\n  private async getDeviceSoftwareChangesFromSoftwareOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    const changes: DeviceSoftwareChange[] = [];\n    const deviceSoftware = await this.getCurrentSoftware(device, 'c8y_Software', {});\n    forEach(deviceSoftware, (deviceSoftwareVersion, deviceSoftwareName) => {\n      if (operation.c8y_Software[deviceSoftwareName] !== deviceSoftwareVersion) {\n        changes.push({\n          name: deviceSoftwareName,\n          version: deviceSoftwareVersion,\n          action: 'delete'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(operation.c8y_Software, (operationSoftwareVersion, operationSoftwareName) => {\n      const deviceSoftwareVersion = deviceSoftware && deviceSoftware[operationSoftwareName];\n      if (deviceSoftwareVersion !== operationSoftwareVersion) {\n        changes.push({\n          name: operationSoftwareName,\n          version: operationSoftwareVersion,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    return changes;\n  }\n\n  private async getCurrentSoftware(\n    device: IManagedObject,\n    swFragment: string,\n    defaultValue: object\n  ): Promise<object> {\n    const isASMAvailable = await this.advancedSoftwareService.isASMAvailable();\n    if (isASMAvailable) {\n      let softwareResultList: IResultList<IManagedObject> = await this.advancedSoftwareService.list(\n        { deviceId: device.id, pageSize: 100 }\n      );\n      let list = (softwareResultList?.data || []).map(sw =>\n        pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType'])\n      );\n\n      while (softwareResultList.paging?.nextPage) {\n        softwareResultList = await softwareResultList.paging.next();\n        list = [\n          ...list,\n          ...(softwareResultList?.data || []).map(sw =>\n            pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType'])\n          )\n        ];\n      }\n\n      if (!list?.length) {\n        return defaultValue;\n      }\n\n      return Array.isArray(defaultValue) ? list : this.softwareListToLegacy(list);\n    } else {\n      return device[swFragment] || defaultValue;\n    }\n  }\n\n  private softwareListToLegacy(list: IManagedObject[]): object {\n    return (list || []).reduce((prev, curr) => ({ ...prev, [curr.name]: curr.version }), {});\n  }\n}\n","export enum LinkRenderType {\n    DOWNLOAD,\n    LINK,\n    TEXTONLY\n}\n","import { AlertService } from '@c8y/ngx-components';\nimport { Component, Input } from '@angular/core';\nimport { RepositoryService } from '../repository.service';\nimport { memoize } from '@c8y/ngx-components';\nimport { saveAs } from 'file-saver';\nimport { InventoryBinaryService } from '@c8y/client';\nimport { LinkRenderType } from './link-render-type.enum';\n\n@Component({\n  selector: 'c8y-file-download',\n  templateUrl: './file-download.component.html'\n})\nexport class FileDownloadComponent {\n  @Input() url: string;\n  linkRenderType = LinkRenderType;\n  isDownloading = false;\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryBinaryService: InventoryBinaryService,\n    private alertService: AlertService\n  ) {}\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize()\n  determineBehavior(): LinkRenderType {\n    let result: LinkRenderType;\n    if (this.inventoryBinaryService.getIdFromUrl(this.url)) {\n      result = LinkRenderType.DOWNLOAD;\n    } else if (this.url.match(/\\/\\//g)) {\n      result = LinkRenderType.LINK;\n    } else {\n      result = LinkRenderType.TEXTONLY;\n    }\n    return result;\n  }\n\n  async downloadFile() {\n    try {\n      this.isDownloading = true;\n      const binary: File = await this.repositoryService.getBinaryFile(this.url, {\n        allowExternal: false\n      });\n      this.isDownloading = false;\n      saveAs(binary);\n    } catch (ex) {\n      this.isDownloading = false;\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n}\n","import { Component, EventEmitter, TemplateRef } from '@angular/core';\nimport { IManagedObject, QueriesUtil } from '@c8y/client';\nimport {\n  gettext,\n  ISelectModalObject,\n  ISelectModalOption,\n  IUpdateItemEvent,\n  ModalLabels,\n  ModalSelectionMode\n} from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, has, isEmpty, isEqual, omitBy } from 'lodash-es';\nimport { BehaviorSubject, merge, Observable, of, Subject } from 'rxjs';\nimport { map, mergeMap, switchMap, tap } from 'rxjs/operators';\nimport {\n  FilterCriteria,\n  RepositoryBinary,\n  RepositoryCategory,\n  RepositoryType,\n  SelectedRepositoryBinary\n} from '../repository.model';\nimport { RepositoryService } from '../repository.service';\n\n// MODAL STRUCTURE\n// - selectModalObject (repository entry (repositoryCategory) -> type c8y_Firmware/c8y_Software)\n//   -- ISelectModalOption (repository binary entry (repositoryBinary) => type c8y_FirmwareBinary/c8y_SoftwareBinary)\n//   -- ISelectModalOption...\n// - selectModalObject...\n\n/**\n * RepositorySelectModalComponent displays repository entries options and allows to select them.\n *\n * @example\n * ```\n * import { take } from 'rxjs/operators';\n * import { RepositorySelectModalComponent, ModalSelectionMode, RepositoryType } from '@c8y/ngx-components/repository/shared';\n *\n * const initialState = {\n *   repositoryType: RepositoryType.FIRMWARE,\n *   title: gettext('Install firmware'),\n *   subTitle: gettext('Available firmwares matching the device type'),\n *   icon: 'c8y-firmware',\n *   mode: ModalSelectionMode.SINGLE,\n *   labels: { ok: gettext('Install') },\n *   disableSelected: false\n * };\n *\n * const modal = this.bsModal.show(RepositorySelectModalComponent, {\n *   ignoreBackdropClick: true,\n *   initialState\n * });\n *\n * modal.content.load.next();\n * modal.content.resultEmitter.pipe(take(1)).subscribe((firmware) => {\n *   ...\n * })\n * ```\n */\n\n@Component({\n  selector: 'c8y-repository-select-modal',\n  templateUrl: './repository-select-modal.component.html'\n})\nexport class RepositorySelectModalComponent {\n  /**\n   * Optional\n   * Allows to provide custom data.\n   * @example\n   * ```\n   * import { from } from 'rxjs';\n   *\n   * const repositoryEntry = { name: 'ExampleEntry', type: 'c8y_Firmware' };\n   * const versions = [{ c8y_Firmware: { version: '1.0.0', url: 'http://example.com' } }];\n   *\n   * const initialState = {repositoryEntriesWithVersions$: from({ ...repositoryEntry, versions })};\n   * ```\n   */\n  repositoryEntriesWithVersions$: Observable<IManagedObject[]> = undefined;\n  /**\n   * Repository entry type.\n   */\n  repositoryType: RepositoryType.FIRMWARE | RepositoryType.SOFTWARE;\n  /**\n   * Optional\n   * Allows to use custom badges templates.\n   * @example\n   * ```\n   * import { gettext } from '@c8y/ngx-components';\n   *\n   * const badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n   * const initialState = { badgeTemplates };\n   * ```\n   */\n  badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n  /**\n   * Optional\n   * Allows to provide custom modal title.\n   */\n  title: string = gettext('Select repository entry');\n  /**\n   * Optional\n   * Allows to provide custom modal subtitle.\n   */\n  subTitle: string;\n  /**\n   * Loads the content of the modal.\n   * Must be invoked by the modal's caller.\n   */\n  load: Subject<void> = new Subject();\n  /**\n   * Triggers an update of the item list emitted.\n   */\n  updateInstallableList$: Subject<IUpdateItemEvent<any>> = new Subject();\n  /**\n   * Optional\n   * Emits a filter criteria object currently entered in the filter input.\n   * Use it to filter the items if you use custom repositoryEntriesWithVersions$.\n   */\n  searchTerm: BehaviorSubject<FilterCriteria> = new BehaviorSubject({});\n  /**\n   * Optional\n   * Allows to provide device type query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  deviceTypeQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  searchQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide custom labels for the buttons responsible for confirm/dismiss modal actions.\n   */\n  labels: ModalLabels = { ok: gettext('Save') };\n  /**\n   * Optional\n   * Allows to hide the name filter input field.\n   * By default, the filter input field is displayed.\n   */\n  showFilter: boolean = true;\n  /**\n   * Optional\n   * Allows to show a warning that the search criteria should be narrowed down.\n   * By default, this warning is hidden.\n   */\n  areMoreEntries: boolean = false;\n  /**\n   * Optional\n   * Allows to display a more specific than the default message in case there are no items to display.\n   */\n  noItemsMessage: string;\n  /**\n   * Optional\n   * Allows to pass the array of items. Each item from this array will be marked as selected in the modal.\n   */\n  selected: SelectedRepositoryBinary[];\n  /**\n   * Emits whenever a new repository binary have been selected in the modal.\n   */\n  onChoiceUpdated: EventEmitter<ISelectModalObject> = new EventEmitter<ISelectModalObject>();\n  /**\n   * Emits the list of selected options.\n   */\n  resultEmitter: EventEmitter<SelectedRepositoryBinary[]> = new EventEmitter<\n    SelectedRepositoryBinary[]\n  >();\n  /**\n   * Optional\n   * Allows to change selection mode.\n   * Supported options:\n   *   * single: only single option can be selected.\n   *   * multiple: multiple options can be selected.\n   */\n  mode: ModalSelectionMode = ModalSelectionMode.SINGLE;\n  /**\n   * Optional\n   * Allows to use custom icon in the modal header.\n   */\n  icon: string;\n  /**\n   * Allows to block selection of the other versions from the same repository entry.\n   */\n  disableSelected: boolean = true;\n\n  filterCriteria: FilterCriteria = {};\n\n  repositoryEntries$: Observable<ISelectModalObject[]> = this.load.pipe(\n    switchMap(() => this.repositoryEntriesWithVersions$),\n    mergeMap(mos => this.aggregate(mos)),\n    tap(items => {\n      this.areMoreEntries = items.length >= this.PAGE_SIZE ? true : false;\n    }),\n    tap(items => (this.repositoryEntries = items))\n  );\n\n  modalEntries: Observable<ISelectModalObject[]> = merge(\n    this.repositoryEntries$,\n    this.updateInstallableList$.pipe(\n      map((updateItemEvent: IUpdateItemEvent<any>) => {\n        const itemToUpdate: ISelectModalObject = (this.repositoryEntries || []).find(\n          item => item.groupId === updateItemEvent.object.groupId\n        );\n        if (itemToUpdate) {\n          const optionToUpdate: ISelectModalOption = (itemToUpdate.options || []).find(\n            option => option.obj.id === (updateItemEvent.object as any).selectedId\n          );\n          if (optionToUpdate) {\n            optionToUpdate.template = updateItemEvent.template;\n            if (updateItemEvent.mapper) {\n              optionToUpdate.obj = updateItemEvent.mapper(optionToUpdate.obj);\n            }\n          }\n        }\n        return this.repositoryEntries;\n      })\n    )\n  );\n\n  /**\n   * Optional\n   * Allows to provide additional template that will be rendered in the\n   * filters block on top of the results list in the select modal.\n   */\n  additionalFilterTemplate: TemplateRef<any>;\n\n  private PAGE_SIZE = 100;\n  private queriesUtil: QueriesUtil;\n  private repositoryEntries: ISelectModalObject[];\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private translateService: TranslateService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  ngOnInit() {\n    if (!this.repositoryType) {\n      throw new Error('Repository type must be defined');\n    }\n\n    if (!this.repositoryEntriesWithVersions$) {\n      this.repositoryEntriesWithVersions$ = of(1).pipe(\n        mergeMap(() =>\n          this.repositoryService.listRepositoryEntries(this.repositoryType, {\n            query: this.queriesUtil.addAndFilter(\n              this.deviceTypeQuery,\n              has(this.searchQuery, 'name')\n                ? { ...this.searchQuery, name: `*${this.searchQuery.name}*` }\n                : this.searchQuery\n            ),\n            params: { pageSize: this.PAGE_SIZE }\n          })\n        ),\n        map(({ data }) => data),\n        map(mos => this.getAndAssignRepositoryBinaries(mos))\n      );\n    }\n  }\n\n  getAndAssignRepositoryBinaries(mos: IManagedObject[]) {\n    mos.forEach(mo => {\n      mo.versions = this.repositoryService.listAllVersions(mo);\n    });\n    return mos;\n  }\n\n  search(filterCriteria: FilterCriteria) {\n    this.filterCriteria = omitBy(\n      {\n        ...this.filterCriteria,\n        ...filterCriteria\n      },\n      isEmpty\n    );\n\n    if (!isEqual(this.filterCriteria, this.searchQuery)) {\n      this.searchTerm.next(this.filterCriteria);\n      this.searchQuery = this.filterCriteria;\n      this.load.next();\n    }\n  }\n\n  result(selectedItems: SelectedRepositoryBinary[]) {\n    this.resultEmitter.emit(selectedItems);\n  }\n\n  async aggregate(mos: IManagedObject[]): Promise<ISelectModalObject[]> {\n    const repositoryType = this.repositoryType;\n    const selectedItems: SelectedRepositoryBinary[] = this.selected;\n\n    return Promise.all(\n      mos.map(async repositoryEntry => {\n        const options: ISelectModalOption[] = this.getSelectModalOptions(\n          await this.repositoryService.fetchAllItemsFromList(repositoryEntry.versions),\n          selectedItems,\n          repositoryEntry as RepositoryCategory,\n          repositoryType\n        );\n        const selectModalObject = this.getSelectModalObject(\n          repositoryEntry as RepositoryCategory,\n          options\n        );\n\n        return selectModalObject;\n      })\n    );\n  }\n\n  getSelectModalOptions(\n    versions: RepositoryBinary[],\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryType: RepositoryType\n  ): ISelectModalOption[] {\n    const selectModalOptions: ISelectModalOption[] = [];\n    versions.forEach(repositoryBinary => {\n      const isSelected: boolean = this.isBinaryRepositorySelected(\n        selectedItems,\n        repositoryEntry,\n        repositoryBinary,\n        repositoryType\n      );\n\n      const { version } = repositoryBinary[`${repositoryType}`];\n      const bodyValue =\n        version || `(${this.translateService.instant(gettext('not specified`version`'))})`;\n      const bodyClass = version ? '' : 'text-muted';\n      selectModalOptions.push({\n        body: [\n          {\n            value: bodyValue,\n            class: bodyClass\n          }\n        ],\n        obj: {\n          id: repositoryBinary.id,\n          name: repositoryEntry.name,\n          version,\n          ...(get(repositoryBinary, 'c8y_Patch.dependency') && {\n            dependency: get(repositoryBinary, 'c8y_Patch.dependency')\n          }),\n          ...(get(repositoryBinary, 'c8y_Patch') && { isPatch: true }),\n          url: repositoryBinary[`${repositoryType}`].url,\n          softwareType: repositoryEntry.softwareType\n        },\n        selected: isSelected\n      });\n    });\n    return selectModalOptions;\n  }\n\n  isBinaryRepositorySelected(\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryBinary: RepositoryBinary,\n    repositoryType: RepositoryType\n  ): boolean {\n    const isSelected = selectedItems\n      ? selectedItems.filter(\n          repositoryFragment =>\n            repositoryFragment.name === repositoryEntry.name &&\n            repositoryFragment.version === repositoryBinary[`${repositoryType}`].version\n        ).length > 0\n      : false;\n\n    return isSelected;\n  }\n\n  getSelectModalObject(\n    repositoryEntry: RepositoryCategory,\n    options: ISelectModalOption[]\n  ): ISelectModalObject {\n    const label =\n      options.length === 1\n        ? this.translateService.instant(this.badgeTemplates['=1'], { count: options.length })\n        : this.translateService.instant(this.badgeTemplates.other, { count: options.length });\n\n    const selectModalObject: ISelectModalObject = {\n      groupId: repositoryEntry.id,\n      body: [\n        { value: repositoryEntry.name, class: 'text-truncate' },\n        { value: repositoryEntry.description, class: 'text-truncate text-muted' }\n      ],\n      additionalInformation: { value: label, class: 'label label-info' },\n      options\n    };\n\n    return selectModalObject;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator\n} from '@angular/forms';\nimport { IManagedObject, IResultList, QueriesUtil } from '@c8y/client';\nimport { gettext, TypeaheadComponent } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { uniqBy } from 'lodash-es';\nimport { BehaviorSubject, Observable, pipe, UnaryFunction } from 'rxjs';\nimport { debounceTime, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { RepositoryType } from '../repository.model';\nimport { RepositoryService } from '../repository.service';\n\n@Component({\n  selector: 'c8y-software-type',\n  templateUrl: 'software-type.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => SoftwareTypeComponent)\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => SoftwareTypeComponent),\n      multi: true\n    }\n  ]\n})\nexport class SoftwareTypeComponent implements OnInit, ControlValueAccessor, Validator {\n  @Input() softwareTypeMO: IManagedObject;\n\n  @Input() disabled: boolean;\n\n  @Input() style;\n\n  @Input()\n  required: boolean = true;\n\n  @Input()\n  placeholder: string = this.translateService.instant(gettext('e.g. {{ example }}'), {\n    example: 'yum'\n  });\n\n  @Input()\n  emitResultsOnly: boolean = false;\n\n  @Input()\n  showBtnInNotFoundMessage: boolean = true;\n\n  @Input()\n  allowFreeEntries: boolean = true;\n\n  @Input()\n  showClearSelectionOption: boolean = false;\n\n  @Input()\n  clearSelectionOptionLabel: string = gettext('All software types');\n\n  @ViewChild('deviceSoftwareTypeModel', { static: true })\n  deviceSoftwareTypeModel: TypeaheadComponent;\n\n  @ViewChild('notFoundTypeAddNewTemplate', { static: true })\n  notFoundTypeAddNewTemplate: TemplateRef<unknown>;\n\n  @ViewChild('notFoundTypeTemplate', { static: true })\n  notFoundTypeTemplate: TemplateRef<unknown>;\n\n  @Output() onSelectSoftware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  notFoundTemplateToUse: TemplateRef<unknown>;\n\n  filterPipe: UnaryFunction<unknown, unknown> = pipe(tap());\n  softwaresResult$: Observable<IResultList<IManagedObject>>;\n  search$: BehaviorSubject<string> = new BehaviorSubject(null);\n  softwaresResult: IResultList<IManagedObject>;\n\n  private queriesUtil: QueriesUtil = new QueriesUtil();\n  private softwareTypes: Set<string> = new Set();\n\n  constructor(\n    private repositoryService: RepositoryService,\n    public changeDetectorRef: ChangeDetectorRef,\n    private translateService: TranslateService\n  ) {\n    this.softwaresResult$ = this.search$.pipe(\n      debounceTime(300),\n      tap(() => this.softwareTypes.clear()),\n      switchMap((searchString: string) => {\n        if (!this.emitResultsOnly || !searchString) {\n          this.onSelectSoftware.emit(this.softwareTypeMO);\n        }\n        return this.getSoftwareByTypeResult(searchString);\n      }),\n      shareReplay(1)\n    );\n\n    this.filterPipe = pipe(map(this.removeDuplicatesBySoftwareType.bind(this)));\n  }\n\n  ngOnInit(): void {\n    this.notFoundTemplateToUse = this.showBtnInNotFoundMessage\n      ? this.notFoundTypeAddNewTemplate\n      : this.notFoundTypeTemplate;\n  }\n\n  getSoftwareByTypeResult(searchString: string) {\n    let query = this.queriesUtil.prependOrderbys({}, [{ softwareType: 1 }]);\n    const filter = !!searchString\n      ? {\n          softwareType: {\n            __eq: `*${searchString}*`\n          }\n        }\n      : {\n          __has: 'softwareType'\n        };\n    query = this.queriesUtil.addAndFilter(query, filter);\n\n    return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {\n      query,\n      params: {\n        pageSize: 200\n      }\n    });\n  }\n\n  selectSoftware(software) {\n    this.softwareTypeMO = software;\n    this.onSelectSoftware.emit(software);\n    this.deviceSoftwareTypeModel.searchControlModel.control.markAsDirty();\n    (this.deviceSoftwareTypeModel as any).onChange(software);\n  }\n\n  clearSoftware() {\n    this.softwareTypeMO = undefined;\n    this.search$.next('');\n    this.onSelectSoftware.emit();\n  }\n\n  resetInput() {\n    this.deviceSoftwareTypeModel.reset();\n  }\n\n  writeValue(value: any): void {\n    this.deviceSoftwareTypeModel.writeValue(value);\n  }\n\n  registerOnChange(fn: any): void {\n    this.deviceSoftwareTypeModel.registerOnChange(fn);\n  }\n\n  registerOnTouched(fn: any): void {\n    this.deviceSoftwareTypeModel.registerOnTouched(fn);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.deviceSoftwareTypeModel.setDisabledState(isDisabled);\n  }\n\n  validate(control: AbstractControl): ValidationErrors {\n    return this.deviceSoftwareTypeModel.validate(control);\n  }\n\n  private removeDuplicatesBySoftwareType(list: IManagedObject[]): IManagedObject[] {\n    const uniqueBySoftwareType: IManagedObject[] = uniqBy(list, 'softwareType').filter(\n      (sw: IManagedObject) => !this.softwareTypes.has(sw.softwareType)\n    );\n    uniqueBySoftwareType.forEach((sw: IManagedObject) => this.softwareTypes.add(sw.softwareType));\n    return uniqueBySoftwareType;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule, FormsModule, OperationRealtimeService } from '@c8y/ngx-components';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { RepositoryService } from './repository.service';\nimport { RepositorySelectModalComponent } from './select-modal/repository-select-modal.component';\nimport { FileDownloadComponent } from './file-download/file-download.component';\nimport { AdvancedSoftwareService } from './advanced-software.service';\nimport { SoftwareTypeComponent } from './software-type/software-type.component';\n\n@NgModule({\n  imports: [CommonModule, CoreModule, FormsModule, PopoverModule],\n  declarations: [RepositorySelectModalComponent, FileDownloadComponent, SoftwareTypeComponent],\n  entryComponents: [RepositorySelectModalComponent],\n  providers: [AdvancedSoftwareService, RepositoryService, OperationRealtimeService],\n  exports: [RepositorySelectModalComponent, FileDownloadComponent, SoftwareTypeComponent]\n})\nexport class SharedRepositoryModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["_map"],"mappings":"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"}