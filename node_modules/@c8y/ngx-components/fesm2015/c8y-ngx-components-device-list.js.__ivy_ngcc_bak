import { __awaiter } from 'tslib';
import { Component, Injectable, NgModule } from '@angular/core';
import { DeviceGridService, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { SmartGroupsService } from '@c8y/client';
import { gettext, AlertService, NavigatorNode, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { of } from 'rxjs';
import { switchMap, tap, catchError, take } from 'rxjs/operators';
import { RouterModule } from '@angular/router';

class AddSmartGroupComponent {
    constructor(modal, smartGroupsService, deviceGridService, alert, translateService) {
        this.modal = modal;
        this.smartGroupsService = smartGroupsService;
        this.deviceGridService = deviceGridService;
        this.alert = alert;
        this.translateService = translateService;
        this.smartGroup = {
            name: '',
            type: 'c8y_DynamicGroup',
            c8y_IsDynamicGroup: {}
        };
    }
    create() {
        return this.deviceGridService
            .getConfig$(this.configKey)
            .pipe(switchMap(config => {
            return this.smartGroupsService.create({
                smartGroup: this.smartGroup,
                deviceQueryString: this.deviceQuery,
                configurableColumns: config
            });
        }), tap(() => {
            this.alert.success(this.translateService.instant(gettext('Smart group {{ name }} created.'), {
                name: this.smartGroup.name
            }));
            this.modal.hide();
        }), catchError(ex => {
            this.alert.addServerFailure(ex);
            return of([]);
        }), take(1))
            .subscribe();
    }
    close() {
        this.modal.hide();
    }
}
AddSmartGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-smart-group',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-group-smart'\"></i>\n    <h4 translate>Create smart group</h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #createSmartGroup=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Group name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"smartGroup.name\"\n            placeholder=\"{{ 'e.g. My smart group' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Create' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createSmartGroup.form.invalid\"\n      translate\n    >\n      Create\n    </button>\n  </div>\n</div>\n"
            },] }
];
AddSmartGroupComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: SmartGroupsService },
    { type: DeviceGridService },
    { type: AlertService },
    { type: TranslateService }
];

class DeviceListComponent {
    constructor(deviceGridService, bsModalService) {
        this.deviceGridService = deviceGridService;
        this.bsModalService = bsModalService;
        this.GRID_CONFIG_KEY = 'device-grid-all';
        this.count$ = this.deviceGridService.getTotal({});
    }
    createSmartGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                configKey: this.GRID_CONFIG_KEY,
                deviceQuery: this.deviceQueryStringOutput
            };
            this.bsModalService.show(AddSmartGroupComponent, {
                class: 'modal-sm',
                initialState
            });
        });
    }
}
DeviceListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-list',
                template: "<c8y-title>\n  {{ 'All devices' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Create smart group' | translate }}\"\n    (click)=\"createSmartGroup()\"\n  >\n    <i c8yIcon=\"c8y-group-smart\"></i>\n    {{ 'Create smart group' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#viewing-devices\"></c8y-help>\n\n<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [infiniteScroll]=\"(count$ | async) === undefined ? 'auto' : undefined\"\n    [columnsConfigKey]=\"GRID_CONFIG_KEY\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n"
            },] }
];
DeviceListComponent.ctorParameters = () => [
    { type: DeviceGridService },
    { type: BsModalService }
];

class DeviceListNavigationFactory {
    constructor() {
        this.navs = [];
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            this.navs.push(new NavigatorNode({
                label: gettext('All devices'),
                path: 'device',
                icon: 'c8y-device-management',
                parent: {
                    label: gettext('Devices'),
                    icon: 'exchange'
                },
                priority: 2000
            }));
            return this.navs;
        });
    }
}
DeviceListNavigationFactory.decorators = [
    { type: Injectable }
];

const routes = [
    {
        path: 'device',
        component: DeviceListComponent
    }
];
class DeviceListModule {
}
DeviceListModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, CommonModule, DeviceGridModule, RouterModule.forChild(routes)],
                declarations: [DeviceListComponent, AddSmartGroupComponent],
                entryComponents: [DeviceListComponent],
                exports: [],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: DeviceListNavigationFactory,
                        multi: true
                    }
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AddSmartGroupComponent, DeviceListComponent, DeviceListModule, DeviceListNavigationFactory };
//# sourceMappingURL=c8y-ngx-components-device-list.js.map
