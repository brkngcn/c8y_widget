{"version":3,"file":"c8y-ngx-components-services.js","sources":["../../services/services-device-tab/columns/last-updated-date.cell-renderer.component.ts","../../services/services-device-tab/columns/last-updated-date.device-grid-column.ts","../../services/services-device-tab/columns/name.cell-renderer.component.ts","../../services/services-device-tab/columns/name.grid-column.ts","../../services/services-device-tab/columns/service-type.grid-column.ts","../../services/status-options/status-options.model.ts","../../services/status-options/status-options.service.ts","../../services/services-device-tab/columns/status.cell-renderer.component.ts","../../services/services-device-tab/columns/status.grid-column.ts","../../services/services-device-tab/services-device-tab.component.ts","../../services/services-device-tab/services-device-tab.guard.ts","../../services/services-device-tab/services.breadcrumb-factory.ts","../../services/services-device-tab/services-device-tab.module.ts","../../services/services.module.ts","../../services/c8y-ngx-components-services.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `{{ context.value | c8yDate }}`\n})\nexport class LastUpdatedDateCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { ColumnConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { LastUpdatedDateCellRendererComponent } from './last-updated-date.cell-renderer.component';\nimport { FormGroup } from '@angular/forms';\n\nexport class LastUpdatedDateGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n\n    this.path = 'lastUpdated';\n    this.name = 'lastUpdatedDate';\n    this.header = gettext('Last updated');\n    this.cellRendererComponent = LastUpdatedDateCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: [{\n        type: 'object',\n        key: 'lastUpdated',\n        fieldGroup: [\n          {\n            type: 'date-time',\n            key: 'after',\n            templateOptions: {\n              label: gettext('Show services updated after')\n            },\n            expressionProperties: {\n              'templateOptions.maxDate': (model: any) => model?.before,\n            },\n          },\n          {\n            type: 'date-time',\n            key: 'before',\n            templateOptions: {\n              label: gettext('And before`date`')\n            },\n            expressionProperties: {\n              'templateOptions.minDate': (model: any) => model?.after,\n            },\n          }]\n      }],\n      formGroup: new FormGroup({}),\n      getFilter(model) {\n        const filter: any = {};\n        const dates = model && model.lastUpdated;\n        if (dates && (dates.after || dates.before)) {\n          filter.__and = [];\n          if (dates.after) {\n            const after = self.formatDate(dates.after);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __gt: after },\n                [`${self.path}.date`]: { __gt: after }\n              }\n            });\n          }\n          if (dates.before) {\n            const before = self.formatDate(dates.before);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __lt: before },\n                [`${self.path}.date`]: { __lt: before }\n              }\n            });\n          }\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: `${this.path}.date` }, { path: this.path }]\n    };\n  }\n\n  protected formatDate(dateToFormat: string): string {\n    return new Date(dateToFormat).toISOString();\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    <a [routerLink]=\"['/service', context.item.id]\" [title]=\"context.item.name\" class=\"interact\">\n      {{ context.item.name }}\n    </a>\n  `\n})\nexport class NameCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { ColumnConfig, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { NameCellRendererComponent } from './name.cell-renderer.component';\n\nexport class ServiceNameGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'name';\n    this.path = 'name';\n    this.header = gettext('Name');\n    this.cellRendererComponent = NameCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'names',\n        label: gettext('Filter services by name'),\n        addText: gettext('Add next`name`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: gettext('daemon`SERVICE_NAME`')\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.names.length) {\n          filter.name = { __in: model.names };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { ColumnConfig, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\n\nexport class ServiceTypeGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'serviceType';\n    this.path = 'serviceType';\n    this.header = gettext('Type');\n\n    this.filterable = true;\n\n    this.filteringConfig = {\n      fields: getBasicInputArrayFormFieldConfig({\n        key: 'serviceTypes',\n        label: gettext('Filter services by type'),\n        addText: gettext('Add next`type`'),\n        tooltip: gettext('Use * as a wildcard character'),\n        placeholder: 'systemd'\n      }),\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.serviceTypes.length) {\n          filter.serviceType = { __in: model.serviceTypes };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\n\n/**\n * Extension hook allowing to register custom service statuses and configure their visual presentation.\n */\nexport const HOOK_SERVICE_STATUS = new InjectionToken<StatusOption | StatusOption[]>(\n  'SERVICE_STATUS'\n);\n\n/**\n * Defines the visual presentation of a service status option.\n */\nexport interface StatusOption {\n  /**\n   * Key used for this status in the c8y_Service object.\n   */\n  key: string;\n  /**\n   * Human readable name of the status used to be translated.\n   */\n  label: string;\n  /**\n   * An icon to use to display the status.\n   */\n  icon: string;\n  /**\n   * CSS class(es) used to e.g. accent the status (contextual color, etc.)\n   */\n  class?: string;\n}\n\n/**\n * Standard status options supported by the platform.\n */\nexport const SERVICE_STATUS_OPTIONS: StatusOption[] = [\n  {\n    key: 'up',\n    label: gettext('Up'),\n    icon: 'check-circle',\n    class: 'text-success'\n  },\n  {\n    key: 'down',\n    label: gettext('Down'),\n    icon: 'exclamation-circle',\n    class: 'text-danger'\n  },\n  {\n    key: 'unknown',\n    label: gettext('Unknown'),\n    icon: 'inactive-state'\n  }\n];\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { flatten } from 'lodash-es';\nimport { HOOK_SERVICE_STATUS, SERVICE_STATUS_OPTIONS, StatusOption } from './status-options.model';\n\n/**\n * The service for system wide registered service status options.\n * It provides the standard service statuses plus all custom status options\n * registered with the <code>HOOK_SERVICE_STATUS</code> extension hook.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusOptionsService {\n  get options(): StatusOption[] {\n    return this._options;\n  }\n\n  private _options: StatusOption[];\n\n  constructor(\n    @Optional() @Inject(HOOK_SERVICE_STATUS) options: Array<StatusOption | StatusOption[]>\n  ) {\n    this._options = [...SERVICE_STATUS_OPTIONS, ...flatten(options)];\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { StatusOptionsService } from '../../status-options';\n\n@Component({\n  templateUrl: 'status.cell-renderer.component.html'\n})\nexport class StatusCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    public statusOptionsService: StatusOptionsService\n  ) {}\n}\n","import {\n  ColumnConfig,\n  ColumnDataType,\n  getBasicInputArrayFormFieldConfig,\n  gettext\n} from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from '@c8y/ngx-components/device-grid';\nimport { entries } from 'lodash-es';\nimport { StatusOptionsService } from '../../status-options';\nimport { StatusCellRendererComponent } from './status.cell-renderer.component';\n\nexport class StatusGridColumn extends BaseDeviceGridColumn {\n  constructor(statusOptionsService: StatusOptionsService, initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'status';\n    this.path = 'status';\n    this.header = gettext('Status');\n    this.dataType = ColumnDataType.Icon;\n    this.cellRendererComponent = StatusCellRendererComponent;\n    this.filterable = true;\n    this.resizable = false;\n\n    this.filteringConfig = {\n      fields: [\n        {\n          key: 'statusOptions',\n          type: 'object',\n          templateOptions: {\n            label: gettext('Show devices with status')\n          },\n          fieldGroup: [\n            ...statusOptionsService.options.map(option => ({\n              key: option.key,\n              type: 'switch',\n              templateOptions: {\n                label: option.label\n              }\n            }))\n          ]\n        },\n        ...getBasicInputArrayFormFieldConfig({\n          key: 'custom',\n          label: gettext('or filter by custom status'),\n          addText: gettext('Add next`custom status`'),\n          tooltip: gettext('Use * as a wildcard character'),\n          placeholder: gettext('restarting`SERVICE_STATUS`'),\n          optional: true\n        })\n      ],\n      getFilter(model) {\n        const filter: any = {};\n        filter.status = {\n          __in: [\n            ...entries(model?.statusOptions || {})\n              .filter(([_, value]) => !!value)\n              .map(([key, _]) => key),\n            ...model.custom.filter(c => !!c)\n          ]\n        };\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component, EventEmitter } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IManagedObject, InventoryService, IResultList, QueriesUtil } from '@c8y/client';\nimport { DataSourceModifier, ServerSideDataResult } from '@c8y/ngx-components';\nimport { DeviceGridColumn, DeviceGridService } from '@c8y/ngx-components/device-grid';\nimport { StatusOptionsService } from '../status-options';\nimport {\n  LastUpdatedDateGridColumn,\n  ServiceNameGridColumn,\n  ServiceTypeGridColumn,\n  StatusGridColumn\n} from './columns';\n\nconst SERVICE_FRAGMENT = 'c8y_Service';\n\n@Component({\n  selector: 'c8y-services-device-tab',\n  templateUrl: 'services-device-tab.component.html'\n})\nexport class ServicesDeviceTabComponent {\n  deviceId: string | number = this.route.snapshot.parent.data.contextData.id;\n\n  sizeRequest: Promise<number>;\n  sizeRequestDone = false;\n\n  refresh$: EventEmitter<void> = new EventEmitter();\n  pagination = {\n    pageSize: 50,\n    currentPage: 1\n  };\n\n  columns: DeviceGridColumn[] = [\n    new StatusGridColumn(this.statusOptionsService),\n    new ServiceNameGridColumn(),\n    new ServiceTypeGridColumn(),\n    new LastUpdatedDateGridColumn()\n  ];\n\n  serverSideDataCallback: any;\n\n  private queriesUtil: QueriesUtil = new QueriesUtil();\n\n  constructor(\n    private route: ActivatedRoute,\n    private inventoryService: InventoryService,\n    private gridService: DeviceGridService,\n    private statusOptionsService: StatusOptionsService\n  ) {\n    this.serverSideDataCallback = this.onDataSourceModifier.bind(this);\n    this.sizeRequest = this.inventoryService\n      .childAdditionsList(this.deviceId, {\n        query: `type eq ${SERVICE_FRAGMENT}`,\n        withTotalPages: true,\n        pageSize: 1\n      })\n      .then(response => {\n        this.sizeRequestDone = true;\n        return response?.paging?.totalPages;\n      });\n  }\n\n  async onDataSourceModifier(\n    dataSourceModifier: DataSourceModifier\n  ): Promise<ServerSideDataResult> {\n    let serverSideDataResult: ServerSideDataResult;\n\n    const query = this.queriesUtil.buildQuery(\n      this.queriesUtil.addAndFilter(this.gridService.getQueryObj(dataSourceModifier.columns), {\n        type: SERVICE_FRAGMENT\n      })\n    );\n\n    const dataRequest: Promise<IResultList<IManagedObject>> =\n      this.inventoryService.childAdditionsList(this.deviceId, {\n        query,\n        withTotalPages: true,\n        pageSize: dataSourceModifier.pagination.pageSize,\n        currentPage: dataSourceModifier.pagination.currentPage\n      });\n\n    const filtererdSizeRequest: Promise<number> = this.inventoryService\n      .childAdditionsList(this.deviceId, {\n        query,\n        withTotalPages: true,\n        pageSize: 1\n      })\n      .then(response => response?.paging?.totalPages);\n\n    const [dataResponse, size, filteredSize] = await Promise.all([\n      dataRequest,\n      this.sizeRequest,\n      filtererdSizeRequest\n    ]);\n\n    const { res, data, paging } = dataResponse;\n\n    serverSideDataResult = {\n      res,\n      data,\n      paging,\n      filteredSize,\n      size\n    };\n\n    return serverSideDataResult;\n  }\n\n  trackByName(_index, column: DeviceGridColumn): string {\n    return column.name;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { InventoryService } from '@c8y/client';\nimport { get } from 'lodash-es';\n\nconst SERVICE_FRAGMENT = 'c8y_Service';\n\n@Injectable()\nexport class ServicesDeviceTabGuard implements CanActivate {\n  constructor(private inventoryService: InventoryService) {}\n\n  canActivate(route) {\n    const contextData = get(route, 'data.contextData') || get(route, 'parent.data.contextData');\n    return this.inventoryService\n      .childAdditionsList(contextData, { query: `type eq ${SERVICE_FRAGMENT}`, pageSize: 1 })\n      .then(result => !!result?.data?.length);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { InventoryService, ISource } from '@c8y/client';\nimport {\n  Breadcrumb,\n  BreadcrumbFactory,\n  BreadcrumbItem,\n  gettext,\n  ViewContext\n} from '@c8y/ngx-components';\n\n@Injectable()\nexport class ServicesBreadcrumbFactory implements BreadcrumbFactory {\n  private contextData;\n\n  constructor(private inventoryService: InventoryService) {}\n\n  async get(route: ActivatedRoute) {\n    const { context, contextData } = route.snapshot.data;\n    const { routeConfig } = route.snapshot;\n\n    this.contextData = contextData || this.contextData;\n\n    if (\n      (context === ViewContext.Service || (routeConfig as any)?.context === ViewContext.Service) &&\n      !!this.contextData\n    ) {\n      const serviceMO = (await this.inventoryService.detail(this.contextData, { withParents: true }))?.data;\n      const breadcrumb: Breadcrumb = { items: [] };\n      const breadcrumbItems: BreadcrumbItem[] = [];\n      const device: ISource = serviceMO?.additionParents?.references[0]?.managedObject;\n\n      if (device) {\n        breadcrumbItems.push({\n          label: device.name,\n          path: `/device/${device.id}`\n        });\n        breadcrumbItems.push({\n          label: gettext('Services'),\n          path: `/device/${device.id}/services`\n        });\n        breadcrumbItems.push({\n          label: serviceMO.name\n        } as BreadcrumbItem);\n      }\n\n      breadcrumb.items = breadcrumbItems;\n      return breadcrumb;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CoreModule,\n  gettext,\n  HOOK_BREADCRUMB,\n  HOOK_ROUTE,\n  Route,\n  ViewContext\n} from '@c8y/ngx-components';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport {\n  LastUpdatedDateCellRendererComponent,\n  NameCellRendererComponent,\n  StatusCellRendererComponent\n} from './columns';\nimport { ServicesDeviceTabComponent } from './services-device-tab.component';\nimport { ServicesDeviceTabGuard } from './services-device-tab.guard';\nimport { ServicesBreadcrumbFactory } from './services.breadcrumb-factory';\n\n@NgModule({\n  imports: [CoreModule, RouterModule, TooltipModule],\n  declarations: [\n    ServicesDeviceTabComponent,\n    LastUpdatedDateCellRendererComponent,\n    NameCellRendererComponent,\n    StatusCellRendererComponent\n  ],\n  providers: [\n    ServicesDeviceTabGuard,\n    ServicesBreadcrumbFactory,\n    {\n      provide: HOOK_ROUTE,\n      useValue: [\n        {\n          context: ViewContext.Device,\n          path: 'services',\n          component: ServicesDeviceTabComponent,\n          label: gettext('Services'),\n          icon: 'statistics',\n          priority: 500,\n          canActivate: [ServicesDeviceTabGuard]\n        }\n      ] as Route[],\n      multi: true\n    },\n    { provide: HOOK_BREADCRUMB, useClass: ServicesBreadcrumbFactory, multi: true }\n  ]\n})\nexport class ServicesDeviceTabModule {}\n","import { NgModule } from '@angular/core';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { ServicesDeviceTabModule } from './services-device-tab';\n\n@NgModule({\n  imports: [CoreModule, ServicesDeviceTabModule]\n})\nexport class ServicesModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ServicesDeviceTabModule as ɵa} from './services-device-tab';"],"names":["SERVICE_FRAGMENT"],"mappings":"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"}