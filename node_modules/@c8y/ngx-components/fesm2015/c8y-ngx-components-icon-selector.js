import * as i0 from '@angular/core';
import { Component, EventEmitter, Input, Output, NgModule, Injectable } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { gettext, CommonModule, DropAreaModule } from '@c8y/ngx-components';
import * as i1 from 'ngx-bootstrap/modal';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/common';

function IconSelectorComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 16);
    ɵngcc0.ɵɵelement(1, "i", 17);
    ɵngcc0.ɵɵelementEnd();
} }
function IconSelectorComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 18);
    ɵngcc0.ɵɵlistener("click", function IconSelectorComponent_span_7_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.quickSearch = ""; });
    ɵngcc0.ɵɵelement(1, "i", 19);
    ɵngcc0.ɵɵelementEnd();
} }
function IconSelectorComponent_option_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const category_r6 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", category_r6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, category_r6.displayName), " ");
} }
function IconSelectorComponent_div_19_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const iconDefinition_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, iconDefinition_r7.value.label), " ");
} }
function IconSelectorComponent_div_19_div_2_div_1_small_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 29);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const icon_r11 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(icon_r11);
} }
const _c0 = function (a0) { return { "dtm-icon-grid__item--selected": a0 }; };
function IconSelectorComponent_div_19_div_2_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelementStart(1, "button", 26);
    ɵngcc0.ɵɵlistener("click", function IconSelectorComponent_div_19_div_2_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r17); const icon_r11 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onIconClicked(icon_r11); });
    ɵngcc0.ɵɵelement(2, "i", 27);
    ɵngcc0.ɵɵtemplate(3, IconSelectorComponent_div_19_div_2_div_1_small_3_Template, 2, 1, "small", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const icon_r11 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r12.selectedIcon && icon_r11 === ctx_r12.selectedIcon));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", icon_r11);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", icon_r11);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.showIconClass);
} }
function IconSelectorComponent_div_19_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵtemplate(1, IconSelectorComponent_div_19_div_2_div_1_Template, 4, 6, "div", 24);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const icon_r11 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r9.quickSearch || ctx_r9.quickSearch.length === 0 || icon_r11.indexOf(ctx_r9.quickSearch) > -1);
} }
function IconSelectorComponent_div_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵtemplate(1, IconSelectorComponent_div_19_div_1_Template, 3, 3, "div", 22);
    ɵngcc0.ɵɵtemplate(2, IconSelectorComponent_div_19_div_2_Template, 2, 1, "div", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const iconDefinition_r7 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.quickSearch);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", iconDefinition_r7.value.icons);
} }
class IconSelectorModalComponent {
    constructor(bsModal) {
        this.bsModal = bsModal;
        this.title = gettext('Select icon');
        this.saveButtonLabel = gettext('Select');
        this.iconCategoriesToExclude = [];
        this.showIconClass = true;
        this.result = new Promise((resolve, reject) => {
            this.save = resolve;
            this.cancel = reject;
        });
    }
    close() {
        this.bsModal.hide();
        this.cancel();
    }
    saveChanges() {
        this.bsModal.hide();
        this.save(this.currentSelection);
    }
    selectionChange(newSelection) {
        this.currentSelection = newSelection;
    }
}
IconSelectorModalComponent.ɵfac = function IconSelectorModalComponent_Factory(t) { return new (t || IconSelectorModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef)); };
IconSelectorModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: IconSelectorModalComponent, selectors: [["c8y-icon-selector-modal"]], decls: 13, vars: 13, consts: [[1, "modal-header"], [1, "modal-title", "pull-left"], [1, "modal-body"], [3, "selectedIcon", "iconCategoriesToExclude", "showIconClass", "onSelect"], [1, "modal-footer", "separator", "text-center"], [1, "btn", "btn-default", 3, "click"], [1, "btn", "btn-primary", 3, "disabled", "click"]], template: function IconSelectorModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h4", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "c8y-icon-selector", 3);
        ɵngcc0.ɵɵlistener("onSelect", function IconSelectorModalComponent_Template_c8y_icon_selector_onSelect_5_listener($event) { return ctx.selectionChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "button", 5);
        ɵngcc0.ɵɵlistener("click", function IconSelectorModalComponent_Template_button_click_7_listener() { return ctx.close(); });
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "button", 6);
        ɵngcc0.ɵɵlistener("click", function IconSelectorModalComponent_Template_button_click_10_listener() { return ctx.saveChanges(); });
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 7, ctx.title));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("selectedIcon", ctx.currentSelection)("iconCategoriesToExclude", ctx.iconCategoriesToExclude)("showIconClass", ctx.showIconClass);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 9, "Cancel"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.currentSelection);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 11, ctx.saveButtonLabel), " ");
    } }, directives: function () { return [IconSelectorComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
IconSelectorModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconSelectorModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-icon-selector-modal',
                template: "<div class=\"modal-header\">\n  <h4 class=\"modal-title pull-left\">{{ title | translate }}</h4>\n</div>\n<div class=\"modal-body\">\n  <c8y-icon-selector\n    (onSelect)=\"selectionChange($event)\"\n    [selectedIcon]=\"currentSelection\"\n    [iconCategoriesToExclude]=\"iconCategoriesToExclude\"\n    [showIconClass]=\"showIconClass\"\n  ></c8y-icon-selector>\n</div>\n<div class=\"modal-footer separator text-center\">\n  <button class=\"btn btn-default\" (click)=\"close()\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button class=\"btn btn-primary\" [disabled]=\"!currentSelection\" (click)=\"saveChanges()\">\n    {{ saveButtonLabel | translate }}\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BsModalRef }]; }, null); })();

const cityIcons = [
    'hospital-o',
    'h-square',
    'institution',
    'ios-themes',
    'building',
    'apartment',
    'department1',
    'organization',
    'office',
    'company',
    'warehouse',
    'shop',
    'work-from-home',
    'house',
    'dog-house',
    'home-automation',
    'garage-door',
    'depot',
    'garage',
    'open-garage-door',
    'close-garage-door',
    'barn',
    'bungalow',
    'exterior',
    'heating-room',
    'mortgage',
    'home-safety',
    'travel-agency',
    'department-shop',
    'book-shelf',
    'emergency-exit',
    'stairs',
    'stairs-down',
    'stairs-up',
    'temperature-inside',
    'treehouse',
    'water-heater',
    'magic',
    'parking'
];
const devicesAndSensorsIcons = [
    'thermometer',
    'sensor',
    'package',
    'packages',
    'blockly',
    'objects',
    'monitoring',
    'qr-code',
    'online',
    'temperature',
    'air-conditioner',
    'air-shaft',
    'fan',
    'light',
    'light-automation',
    'light-off',
    'reflector-bulb',
    'spiral-bulb',
    'mirrored-reflector-bulb',
    'light-bulb',
    'light-on',
    'plumbing',
    'wi-fi-router',
    'gas-bottle',
    'grater',
    'air-quality',
    'central-heating',
    'light-dimmer',
    'radio-station',
    'relay-home-automation',
    'remote-control',
    'tv-off',
    'wall-socket',
    'washing-machine',
    'light-dimming-10-percent',
    'work-light',
    'plug',
    'electrical',
    'water-pipe',
    'thermometer-automation',
    'fire-extinguisher',
    'temperature-sensitive',
    'calculator',
    'humidity',
    'system-information',
    'system-report',
    'system-task',
    'imac-clock',
    'imac-exit',
    'imac-settings',
    'macbook-settings',
    'connected',
    'disconnected',
    'mobile',
    'multiple-devices',
    'client-management',
    'nfc',
    'mobile-email',
    'empty-battery',
    'low-battery',
    'battery-level',
    'charged-battery',
    'full-battery',
    'no-battery',
    'charging-battery',
    'no-connection',
    'low-connection',
    'signal',
    'factory',
    'robot',
    'bot',
    'fork-lift',
    'gear-complex',
    'cogs',
    'automatic',
    'electronics',
    'gas',
    'water',
    'greentech',
    'radio-tower',
    'industrial-scales',
    'iphone',
    'smartphone-approve',
    'smartphone-decline',
    'phonelink-lock',
    'tablet',
    'devices',
    'desktop',
    'desktop1',
    'monitor',
    'laptop',
    'checked-laptop',
    'laptop-alert',
    'laptop-error',
    'computer-support',
    'programming',
    'keyboard',
    'video-conference',
    'remote-desktop',
    'workspace',
    'workstation',
    'microchip',
    'processor',
    'smartphone-ram',
    'bios',
    'micro-sd',
    'hdd',
    'presentation',
    'room-finder',
    'statistics',
    'server',
    'stack',
    'critical-thinking',
    'environment1',
    'network-card',
    'network-cable',
    'usb-on',
    'ssd',
    'asterisk',
    'end-button',
    'hub',
    'individual-server',
    'data-center',
    'root-server',
    'switch',
    'nas',
    'shutdown',
    'hibernate',
    'phone',
    'no-idea',
    'network',
    'mind-map',
    'centralized-network'
];
const locationIcons = [
    'globe',
    'location',
    'globe1',
    'compass',
    'marker',
    'map-marker',
    'marker-off',
    'find-clinic',
    'tesla-supercharger-pin',
    'address',
    'cab-stand',
    'map',
    'map-editing',
    'quest',
    'waypoint-map',
    'anchor-nodes',
    'map-pin',
    'map-signs',
    'gps',
    'location-arrow',
    'navigation',
    'target1',
    'hunt',
    'location-off',
    'location-update',
    'layers',
    'journey',
    'street-view'
];
const officeIcons = [
    'medkit',
    'fax',
    'beer',
    'department',
    'tty',
    'target',
    'accuracy',
    'goal',
    'address-book',
    'attract-customers',
    'bullhorn',
    'announcement',
    'podium',
    'time-card',
    'change',
    'applicant',
    'download-resume',
    'submit-resume',
    'briefcase',
    'new-job',
    'job-seeker',
    'business-building',
    'dossier',
    'alarms',
    'project',
    'important-book',
    'important-note',
    'id-badge',
    'assignment-return',
    'note-taking',
    'audit',
    'badge',
    'new-contact',
    'contact-details',
    'phone-contact',
    'inspection',
    'clipboard-with-a-tick',
    'survey',
    'no-data-available',
    'task-planning',
    'invoice',
    'summary-list',
    'study',
    'card',
    'job',
    'print',
    'communication-internet',
    'language-skill',
    'language',
    'window-close',
    'new-slide',
    'web-analytics',
    'planner',
    'rescheduling-a-task',
    'resume-website',
    'product-documents',
    'resume-template',
    'rubber-stamp',
    'stamp',
    'video-projector',
    'management1',
    'legal'
];
const securityIcons = [
    'shield',
    'protect',
    'warning-shield',
    'free-forever',
    'identification-documents',
    'id-verified',
    'fingerprint',
    'pin-code',
    'password',
    'lock',
    'unlock',
    'privacy',
    'lock-outline',
    'lock-open',
    'key',
    'access',
    'lock11',
    'realtime',
    'smart-home-connection',
    'smart-home-checked',
    'smart-home-error',
    'smart-home-remove',
    'smart-home-shield',
    'voice-id',
    'copyright',
    'spy',
    'bug1',
    'stethoscope'
];
const transportIcons = [
    'space-shuttle',
    'ambulance',
    'car',
    'taxi',
    'truck',
    'file-delivery',
    'in-transit',
    'bus',
    'train',
    'tram',
    'scooter',
    'bicycle',
    'motorcycle',
    'plane',
    'ship',
    'rocket',
    'wrench1',
    'road',
    'flag-outline',
    'software'
];
const userInterfaceIcons = [
    'newspaper-o',
    'creative-commons',
    'spinner',
    'trademark',
    'toggle-on',
    'toggle-off',
    'ticket',
    'spoon',
    'sort-numeric-desc',
    'sort-numeric-asc',
    'snowflake-o',
    'shower',
    'percent',
    'paw',
    'mouse-pointer',
    'lemon-o',
    'leaf',
    'diamond',
    'braille',
    'bomb',
    'binoculars',
    'eject',
    'touch-app',
    'soccer',
    'mood',
    'deaf',
    'cc',
    'anchor',
    'accessibility-settings',
    'info',
    'warning',
    'exclamation-circle',
    'high-priority',
    'spam',
    'help',
    'help-outline',
    'approval',
    'unverified-account',
    'user-manual',
    'stages1',
    'menu',
    'menu-vertical',
    'app-switcher',
    'menu-horizontal',
    'plus-math',
    'subtract',
    'clear',
    'equals',
    'exclamation',
    'check',
    'upvote-downvote',
    'math',
    'less-than1',
    'more-than',
    'circled-notch',
    'inactive-state',
    'storage1',
    'lifebuoy',
    'wait',
    'block',
    'clone',
    'clipboard',
    'search-more',
    'search',
    'search-plus',
    'mobile-zoom-out',
    'product1',
    'trash-can',
    'editing-trash',
    'delete-bin',
    'eye',
    'visibility-off',
    'double-tap',
    'heart',
    'unheart',
    'science',
    'school',
    'badge1',
    'data-quality',
    'brightness-low',
    'bedtime',
    'add-identity-provider',
    'bookmark-outline',
    'bookmark',
    'check-box',
    'add-box',
    'indeterminate-check-box',
    'duplicate',
    'check-box-outline-blank',
    'checkbox-unselected',
    'add-new',
    'negative',
    'multiplication',
    'ratio',
    'circle',
    'contrast1',
    'connection-status-on',
    'ok',
    'cross-circle',
    'add',
    'minus-circle',
    'radio-button-unchecked',
    'add-circle-outline',
    'local-fire-department',
    'outlined-flag',
    'flag',
    'flash-on',
    'quick-mode-on',
    'quick-mode-off',
    'videogame-asset',
    'portraits',
    'extension',
    'star-outline',
    'star-half',
    'star',
    'home-page',
    'attach',
    'link1',
    'unlink1',
    'online1',
    'offline',
    'notification',
    'alarm',
    'no-reminders',
    'medium-priority',
    'sliders1',
    'tune',
    'button',
    'breadcrumb',
    'window-minimize',
    'versions',
    'pages',
    'change-theme',
    'landing-page',
    'continuous-mode',
    'ruler-pencil',
    'header1',
    'body',
    'footer',
    'logs',
    'overview',
    'tab',
    'cursor-in-window',
    'advertisement-page',
    'external-link',
    'level-up',
    'trigger',
    'rules1',
    'email',
    'form',
    'language1',
    'loading-bar',
    'output',
    'save1',
    'single-choice',
    'single-page-mode',
    'skip',
    'support',
    'maintenance',
    'themes',
    'book1',
    'top-menu',
    'user-menu-male',
    'hint',
    'xlarge-icons1',
    'circled-menu',
    'keypad',
    'cake',
    'intelligence1',
    'beginner',
    'restaurant',
    'local-cafe',
    'wine-bar',
    'espresso-cup',
    'broom',
    'buy-upgrade',
    'speedometer',
    'dashboard',
    'palette',
    'car-battery',
    'magnetic',
    'right-navigation-toolbar',
    'tilt',
    'clear-symbol',
    'settings',
    'advanced-search',
    'installing-updates',
    'heating-automation',
    'impressum'
];
const weatherIcons = [
    'sun',
    'sunlight',
    'cloud1',
    'rain',
    'winter',
    'storm',
    'keep-dry',
    'umbrella'
];
const iconsByCategory = {
    city: {
        label: gettext('City`icons-category`'),
        icons: cityIcons
    },
    devicesAndSensors: {
        label: gettext('Devices and sensors`icons-category`'),
        icons: devicesAndSensorsIcons
    },
    location: {
        label: gettext('Location`icons-category`'),
        icons: locationIcons
    },
    office: {
        label: gettext('Office`icons-category`'),
        icons: officeIcons
    },
    security: {
        label: gettext('Security`icons-category`'),
        icons: securityIcons
    },
    transport: {
        label: gettext('Transport`icons-category`'),
        icons: transportIcons
    },
    userInterface: {
        label: gettext('User interface`icons-category`'),
        icons: userInterfaceIcons
    },
    weather: {
        label: gettext('Weather`icons-category`'),
        icons: weatherIcons
    }
};

const allIconCategory = { name: 'all', displayName: 'All' };
class IconSelectorComponent {
    constructor() {
        this.iconCategoriesToExclude = [];
        this.showIconClass = true;
        this.onSelect = new EventEmitter();
    }
    ngOnInit() {
        this.iconCategories = this.composeIconCategories();
        this.selectedIconCategory = allIconCategory;
        this.resetIcons();
    }
    onCategoryFilterChanged() {
        const selectedCategory = this.selectedIconCategory;
        if (selectedCategory.name === allIconCategory.name) {
            this.resetIcons();
            return;
        }
        else {
            this.icons = {
                [selectedCategory.name]: iconsByCategory[selectedCategory.name]
            };
        }
    }
    onIconClicked(icon) {
        this.selectedIcon = icon;
        this.onSelect.emit(icon);
    }
    composeIconCategories() {
        const iconCategories = [allIconCategory];
        for (const iconType of Object.keys(iconsByCategory)) {
            if (this.iconCategoriesToExclude.includes(iconType)) {
                continue;
            }
            iconCategories.push({
                name: iconType,
                displayName: iconsByCategory[iconType].label
            });
        }
        return iconCategories;
    }
    resetIcons() {
        this.icons = Object.assign({}, iconsByCategory);
        this.iconCategoriesToExclude.forEach(category => {
            if (this.icons[category]) {
                delete this.icons[category];
            }
        });
    }
}
IconSelectorComponent.ɵfac = function IconSelectorComponent_Factory(t) { return new (t || IconSelectorComponent)(); };
IconSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: IconSelectorComponent, selectors: [["c8y-icon-selector"]], inputs: { iconCategoriesToExclude: "iconCategoriesToExclude", showIconClass: "showIconClass", selectedIcon: "selectedIcon" }, outputs: { onSelect: "onSelect" }, decls: 21, vars: 11, consts: [[1, "p-l-24", "p-r-24", "p-t-8", "p-b-8", "separator-bottom"], [1, "row", "d-flex-sm"], [1, "col-sm-6", "m-b-8"], [1, "input-group-search", "input-group", 2, "width", "auto"], ["type", "search", "id", "filter-icons", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["class", "input-group-addon", 4, "ngIf"], ["class", "input-group-addon pointer", 3, "click", 4, "ngIf"], [1, "d-flex", "a-i-center"], ["translate", "", 1, "m-b-0", "m-r-8", "flex-no-shrink"], [1, "c8y-select-wrapper"], ["id", "exampleSelect", 1, "form-control", 3, "ngModel", "ngModelChange", "change"], [3, "ngValue", 4, "ngFor", "ngForOf"], [1, "modal-inner-scroll"], [1, "modal-body", 2, "height", "calc(100vh - 293px)"], [1, "dtm-icon-grid"], ["class", "d-contents", 4, "ngFor", "ngForOf"], [1, "input-group-addon"], ["c8yIcon", "search"], [1, "input-group-addon", "pointer", 3, "click"], ["c8yIcon", "times"], [3, "ngValue"], [1, "d-contents"], ["class", "legend form-block center grid__col--fullspan", 4, "ngIf"], [1, "legend", "form-block", "center", "grid__col--fullspan"], ["class", "dtm-icon-grid__item", 3, "ngClass", 4, "ngIf"], [1, "dtm-icon-grid__item", 3, "ngClass"], [1, "dtm-icon-grid__btn", 3, "title", "click"], [1, "d-block", "icon-40", 3, "c8yIcon"], ["class", "text-break-word", 4, "ngIf"], [1, "text-break-word"]], template: function IconSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "input", 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function IconSelectorComponent_Template_input_ngModelChange_4_listener($event) { return ctx.quickSearch = $event; });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, IconSelectorComponent_span_6_Template, 2, 0, "span", 5);
        ɵngcc0.ɵɵtemplate(7, IconSelectorComponent_span_7_Template, 2, 0, "span", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 2);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "label", 8);
        ɵngcc0.ɵɵtext(11, "Filter by type");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "select", 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function IconSelectorComponent_Template_select_ngModelChange_13_listener($event) { return ctx.selectedIconCategory = $event; })("change", function IconSelectorComponent_Template_select_change_13_listener() { return ctx.onCategoryFilterChanged(); });
        ɵngcc0.ɵɵtemplate(14, IconSelectorComponent_option_14_Template, 3, 4, "option", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(15, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 12);
        ɵngcc0.ɵɵelementStart(17, "div", 13);
        ɵngcc0.ɵɵelementStart(18, "div", 14);
        ɵngcc0.ɵɵtemplate(19, IconSelectorComponent_div_19_Template, 3, 2, "div", 15);
        ɵngcc0.ɵɵpipe(20, "keyvalue");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 7, "Type to filter icons\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.quickSearch);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.quickSearch || ctx.quickSearch.length === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.quickSearch && ctx.quickSearch.length > 0);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedIconCategory);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.iconCategories);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(20, 9, ctx.icons));
    } }, directives: [ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.NgIf, ɵngcc2.C8yTranslateDirective, ɵngcc3.SelectControlValueAccessor, ɵngcc4.NgForOf, ɵngcc2.IconDirective, ɵngcc3.NgSelectOption, ɵngcc3.ɵNgSelectMultipleOption, ɵngcc4.NgClass], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc4.KeyValuePipe], encapsulation: 2 });
IconSelectorComponent.propDecorators = {
    iconCategoriesToExclude: [{ type: Input }],
    showIconClass: [{ type: Input }],
    onSelect: [{ type: Output }],
    selectedIcon: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-icon-selector',
                template: "<div class=\"p-l-24 p-r-24 p-t-8 p-b-8 separator-bottom\">\n  <div class=\"row d-flex-sm\">\n    <div class=\"col-sm-6 m-b-8\">\n      <div class=\"input-group-search input-group\" style=\"width: auto\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          id=\"filter-icons\"\n          [(ngModel)]=\"quickSearch\"\n          placeholder=\"{{ 'Type to filter icons\u2026' | translate }}\"\n        />\n        <span class=\"input-group-addon\" *ngIf=\"!quickSearch || quickSearch.length === 0\">\n          <i c8yIcon=\"search\"></i>\n        </span>\n        <span\n          class=\"input-group-addon pointer\"\n          *ngIf=\"quickSearch && quickSearch.length > 0\"\n          (click)=\"quickSearch = ''\"\n        >\n          <i c8yIcon=\"times\"></i>\n        </span>\n      </div>\n    </div>\n    <div class=\"col-sm-6 m-b-8\">\n      <div class=\"d-flex a-i-center\">\n        <label class=\"m-b-0 m-r-8 flex-no-shrink\" translate>Filter by type</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"exampleSelect\"\n            class=\"form-control\"\n            [(ngModel)]=\"selectedIconCategory\"\n            (change)=\"onCategoryFilterChanged()\"\n          >\n            <option *ngFor=\"let category of iconCategories\" [ngValue]=\"category\">\n              {{ category.displayName | translate }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"modal-inner-scroll\">\n  <div class=\"modal-body\" style=\"height: calc(100vh - 293px)\">\n    <div class=\"dtm-icon-grid\">\n      <div *ngFor=\"let iconDefinition of icons | keyvalue\" class=\"d-contents\">\n        <div *ngIf=\"!quickSearch\" class=\"legend form-block center grid__col--fullspan\">\n          {{ iconDefinition.value.label | translate }}\n        </div>\n\n        <div class=\"d-contents\" *ngFor=\"let icon of iconDefinition.value.icons\">\n          <div\n            class=\"dtm-icon-grid__item\"\n            [ngClass]=\"{\n              'dtm-icon-grid__item--selected': selectedIcon && icon === selectedIcon\n            }\"\n            *ngIf=\"!quickSearch || quickSearch.length === 0 || icon.indexOf(quickSearch) > -1\"\n          >\n            <button (click)=\"onIconClicked(icon)\" class=\"dtm-icon-grid__btn\" [title]=\"icon\">\n              <i [c8yIcon]=\"icon\" class=\"d-block icon-40\"></i>\n              <small *ngIf=\"showIconClass\" class=\"text-break-word\">{{ icon }}</small>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { iconCategoriesToExclude: [{
            type: Input
        }], showIconClass: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], selectedIcon: [{
            type: Input
        }] }); })();

class IconSelectorModule {
}
IconSelectorModule.ɵfac = function IconSelectorModule_Factory(t) { return new (t || IconSelectorModule)(); };
IconSelectorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: IconSelectorModule });
IconSelectorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, FormsModule, DropAreaModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconSelectorModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, DropAreaModule],
                declarations: [IconSelectorComponent, IconSelectorModalComponent],
                exports: [IconSelectorComponent, IconSelectorModalComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IconSelectorModule, { declarations: function () { return [IconSelectorComponent, IconSelectorModalComponent]; }, imports: function () { return [CommonModule, FormsModule, DropAreaModule]; }, exports: function () { return [IconSelectorComponent, IconSelectorModalComponent]; } }); })();

class IconSelectorService {
    constructor(modal) {
        this.modal = modal;
    }
    selectIcon(initialState = {}) {
        const modal = this.modal.show(IconSelectorModalComponent, {
            ignoreBackdropClick: true,
            keyboard: false,
            initialState,
            class: 'modal-lg'
        });
        const content = modal.content;
        return content.result;
    }
}
IconSelectorService.ɵfac = function IconSelectorService_Factory(t) { return new (t || IconSelectorService)(ɵngcc0.ɵɵinject(ɵngcc1.BsModalService)); };
IconSelectorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IconSelectorService_Factory() { return new IconSelectorService(i0.ɵɵinject(i1.BsModalService)); }, token: IconSelectorService, providedIn: "root" });
IconSelectorService.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconSelectorService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.BsModalService }]; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { IconSelectorComponent, IconSelectorModule, IconSelectorService, cityIcons, devicesAndSensorsIcons, iconsByCategory, locationIcons, officeIcons, securityIcons, transportIcons, userInterfaceIcons, weatherIcons, IconSelectorModalComponent as ɵa };

//# sourceMappingURL=c8y-ngx-components-icon-selector.js.map