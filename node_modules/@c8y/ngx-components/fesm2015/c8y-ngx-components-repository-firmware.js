import { __awaiter, __decorate } from 'tslib';
import { Component, Injectable, NgModule, EventEmitter, Output, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { OperationStatus, InventoryService } from '@c8y/client';
import { gettext, ModalSelectionMode, HOOK_ROUTE, ViewContext, CoreModule, AlertService, Status, ModalService, memoize, NavigatorNode, HOOK_NAVIGATOR_NODES, FormsModule } from '@c8y/ngx-components';
import { RepositoryType, RepositorySelectModalComponent, RepositoryService, SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { isEmpty, get, assign, indexOf, has, isUndefined, property } from 'lodash-es';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import { BehaviorSubject, from, combineLatest, of, merge, pipe, Subject, defer } from 'rxjs';
import { map, filter, switchMap, shareReplay, take, distinctUntilChanged, debounceTime, tap, distinctUntilKeyChanged, withLatestFrom, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { OperationDetailsModule } from '@c8y/ngx-components/operations/operation-details';
import { TranslateService } from '@ngx-translate/core';
import { PopoverModule } from 'ngx-bootstrap/popover';

class FirmwareDeviceTabComponent {
    constructor(route, repository, inventory, bsModal) {
        this.route = route;
        this.repository = repository;
        this.inventory = inventory;
        this.bsModal = bsModal;
        this.isEmpty = isEmpty;
        this.reloading = false;
        this.device$ = new BehaviorSubject(this.route.parent.snapshot.data.contextData);
        this.deviceFirmwareFragment$ = this.device$.pipe(map(device => device.c8y_Firmware));
        this.firmwareBinary$ = this.deviceFirmwareFragment$.pipe(filter(deviceFirmwareFragment => !isEmpty(deviceFirmwareFragment)), switchMap(deviceFirmwareFragment => from(this.repository.getRepositoryBinaryMoByVersion(deviceFirmwareFragment, RepositoryType.FIRMWARE))), shareReplay(1));
        this.repositoryEntry$ = this.firmwareBinary$.pipe(switchMap(mo => this.repository.getRepositoryEntryMO$(mo)), shareReplay(1));
        this.patches$ = combineLatest(this.firmwareBinary$, this.repositoryEntry$).pipe(switchMap(([firmwareBinary, repositoryEntry]) => {
            if (repositoryEntry && firmwareBinary) {
                const version = this.repository.getBaseVersionFromMO(firmwareBinary);
                return from(this.repository.listPatchVersions(repositoryEntry, version)).pipe(map(({ data }) => data));
            }
            else {
                return of([]);
            }
        }), shareReplay(1));
        this.supportsFirmwareOperations$ = this.device$.pipe(map((device) => get(device, 'c8y_SupportedOperations', []).indexOf('c8y_Firmware') > -1));
        this.changesOperation$ = new BehaviorSubject(null);
        this.changesInProgress$ = this.changesOperation$.pipe(map(operation => this.isInProgress(operation)));
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO check route snapshot, why is not refreshing device.
            // Scenario: missing deviceFirmwareFragment => install new version => switch tabs.
            // Expected: device should be set.
            yield this.loadDevice();
            yield this.loadOperation();
        });
    }
    installFirmware() {
        const initialState = {
            repositoryEntriesWithVersions$: of([]),
            repositoryEntriesWithVersionsFn$: modal => this.getRepositoryEntriesWithVersions$(modal.content.searchTerm),
            repositoryType: RepositoryType.FIRMWARE,
            title: gettext('Install firmware'),
            subTitle: gettext('Available firmwares matching the device type'),
            icon: 'c8y-firmware',
            mode: ModalSelectionMode.SINGLE,
            labels: { ok: gettext('Install') },
            disableSelected: false
        };
        this.deviceFirmwareFragment$
            .pipe(take(1), switchMap(deviceFirmwareFragment => {
            if (deviceFirmwareFragment) {
                const { name, version } = deviceFirmwareFragment;
                const selected = [{ name, version }];
                assign(initialState, { selected });
            }
            const modal = this.bsModal.show(RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState
            });
            if (initialState.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ =
                    initialState.repositoryEntriesWithVersionsFn$(modal);
            }
            modal.content.load.next();
            return modal.content.resultEmitter;
        }))
            .subscribe(([selectedFirmware]) => {
            this.handleOperation(selectedFirmware);
        });
    }
    getRepositoryEntriesWithVersions$(searchTerm$) {
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(searchTerm => this.repository.listRepositoryEntries(RepositoryType.FIRMWARE, {
            query: this.repository.getDeviceTypeQuery(RepositoryType.FIRMWARE, this.device$.value),
            partialName: searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.name,
            params: { pageSize: 100 }
        })), map(({ data }) => data), map(mos => this.getAndAssignRepositoryBinaries(mos)), shareReplay(1));
    }
    getAndAssignRepositoryBinaries(mos) {
        mos.forEach(mo => {
            mo.versions = this.repository.listBaseVersions(mo);
        });
        return mos;
    }
    addPatch() {
        const initialState = {
            repositoryType: RepositoryType.FIRMWARE,
            repositoryEntriesWithVersions$: this.getRepositoryEntryWithPatches$(),
            title: gettext('Install firmware'),
            subTitle: gettext('Available firmwares matching the device type'),
            icon: 'c8y-firmware',
            mode: ModalSelectionMode.SINGLE,
            labels: { ok: gettext('Install') },
            disableSelected: false
        };
        this.deviceFirmwareFragment$
            .pipe(take(1), switchMap(deviceFirmwareFragment => {
            if (deviceFirmwareFragment) {
                const { name, version } = deviceFirmwareFragment;
                const selected = [{ name, version }];
                assign(initialState, { selected });
            }
            const modal = this.bsModal.show(RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState
            });
            modal.content.load.next();
            return modal.content.resultEmitter;
        }))
            .subscribe(([selectedOption]) => {
            this.handleOperation(selectedOption);
        });
    }
    getRepositoryEntryWithPatches$() {
        return combineLatest(this.repositoryEntry$, this.patches$).pipe(map(([repositoryEntry, patches]) => {
            return [Object.assign(Object.assign({}, repositoryEntry), { versions: patches })];
        }));
    }
    loadDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reloading = true;
            const deviceId = this.device$.value.id;
            const device = (yield this.inventory.detail(deviceId, { withChildren: false })).data;
            this.device$.next(device);
            this.reloading = false;
        });
    }
    handleOperation(selectedFirmware) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = yield this.repository.createFirmwareUpdateOperation(this.device$.value, selectedFirmware);
            this.trackOperation(operation);
        });
    }
    loadOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceId = this.device$.value.id;
            const operation = yield this.repository.getLastFirmwareUpdateOperation(deviceId);
            this.trackOperation(operation);
        });
    }
    trackOperation(operation) {
        this.changesOperation$.next(operation);
        if (this.isInProgress(operation)) {
            this.repository.observeOperation(operation).subscribe(operationUpdate => {
                this.changesOperation$.next(operationUpdate);
                if (operationUpdate.status === OperationStatus.SUCCESSFUL) {
                    this.loadDevice();
                }
            }, operationUpdate => {
                this.changesOperation$.next(operationUpdate);
            });
        }
    }
    isInProgress(operation) {
        return (operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status));
    }
}
FirmwareDeviceTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-firmware-device-tab',
                template: "<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Current firmware</h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <fieldset *ngIf=\"changesOperation$ | async\" class=\"card-block bg-gray-white\">\n          <c8y-operation-details [operation]=\"changesOperation$ | async\"></c8y-operation-details>\n        </fieldset>\n        <div class=\"card-block p-t-0 p-b-0\">\n          <!-- EMPTY STATE -->\n          <ng-container *ngIf=\"isEmpty(deviceFirmwareFragment$ | async); else firmwareBlock\">\n            <div class=\"c8y-empty-state text-center\">\n              <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n              <p>\n                <strong translate>No firmware installed.</strong> <br />\n                <small translate>Click below to install firmware into this device.</small>\n              </p>\n            </div>\n          </ng-container>\n\n          <!-- FIRMWARE -->\n          <ng-template #firmwareBlock>\n            <c8y-list-group class=\"no-border-last\">\n              <c8y-li>\n                <c8y-li-icon>\n                  <i c8yIcon=\"c8y-firmware\"></i>\n                </c8y-li-icon>\n\n                <c8y-li-body *ngIf=\"deviceFirmwareFragment$ | async as deviceFirmwareFragment\">\n                  <!-- Firmware title -->\n                  <p class=\"m-b-16 text-medium\">\n                    {{ deviceFirmwareFragment.name }}\n                  </p>\n                  <!-- Firmware description -->\n                  <div *ngIf=\"repositoryEntry$ | async as repositoryEntry\">\n                    <p class=\"text-label-small\" translate>Description</p>\n                    <p>\n                      {{ repositoryEntry.description }}\n                    </p>\n                  </div>\n\n                  <!-- BASE/PATCH VERSION -->\n                  <div class=\"m-b-16\">\n                    <p class=\"text-label-small\" translate>Version</p>\n                    <p *ngIf=\"deviceFirmwareFragment.version; else versionNotSpecified\">\n                      {{ deviceFirmwareFragment.version }}\n                    </p>\n                    <ng-template #versionNotSpecified>\n                      <p>\n                        <em class=\"text-muted\"> ({{ 'not specified`version`' | translate }}) </em>\n                      </p>\n                    </ng-template>\n                  </div>\n\n                  <!-- ADD PATCH -->\n                  <button\n                    *ngIf=\"\n                      (supportsFirmwareOperations$ | async) && (this.patches$ | async)?.length > 0\n                    \"\n                    (click)=\"addPatch()\"\n                    class=\"btn btn-xs btn-primary\"\n                    [disabled]=\"changesInProgress$ | async\"\n                    title=\"{{ 'Patches available' | translate }}\"\n                  >\n                    {{ 'Patches available' | translate }}\n                  </button>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </ng-template>\n        </div>\n      </div>\n      <div *ngIf=\"supportsFirmwareOperations$ | async\" class=\"card-footer separator-top\">\n        <!-- INSTALL FIRMWARE -->\n        <button\n          *ngIf=\"isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          title=\"{{ 'Install firmware' | translate }}\"\n        >\n          {{ 'Install firmware' | translate }}\n        </button>\n\n        <!-- REPLACE FIRMWARE -->\n        <button\n          *ngIf=\"!isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          [disabled]=\"changesInProgress$ | async\"\n          title=\"{{ 'Replace firmware' | translate }}\"\n        >\n          {{ 'Replace firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
FirmwareDeviceTabComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: RepositoryService },
    { type: InventoryService },
    { type: BsModalService }
];

const FIRMWARE_FRAGMENT = 'c8y_Firmware';
const SUPPORTED_OPERATIONS_FRAGMENT = 'c8y_SupportedOperations';
class FirmwareDeviceTabGuard {
    canActivate(route) {
        const contextData = get(route, 'data.contextData') || get(route, 'parent.data.contextData');
        const supportedOperations = get(contextData, SUPPORTED_OPERATIONS_FRAGMENT);
        return ((!!supportedOperations ? indexOf(supportedOperations, FIRMWARE_FRAGMENT) >= 0 : false) ||
            has(contextData, 'c8y_Firmware'));
    }
}
FirmwareDeviceTabGuard.decorators = [
    { type: Injectable }
];

class FirmwareRepositoryDeviceTabModule {
    static forRoot() {
        return {
            ngModule: FirmwareRepositoryDeviceTabModule,
            providers: [
                FirmwareDeviceTabGuard,
                {
                    provide: HOOK_ROUTE,
                    useValue: [
                        {
                            context: ViewContext.Device,
                            path: 'firmware',
                            component: FirmwareDeviceTabComponent,
                            label: gettext('Firmware'),
                            icon: 'c8y-firmware',
                            priority: 500,
                            canActivate: [FirmwareDeviceTabGuard]
                        }
                    ],
                    multi: true
                }
            ]
        };
    }
}
FirmwareRepositoryDeviceTabModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, CoreModule, SharedRepositoryModule, OperationDetailsModule],
                declarations: [FirmwareDeviceTabComponent],
                entryComponents: [FirmwareDeviceTabComponent]
            },] }
];

class AddFirmwarePatchModalComponent {
    constructor(modal, repository, alert) {
        this.modal = modal;
        this.repository = repository;
        this.alert = alert;
        this.saved = new EventEmitter();
        this.textForFirmwareUrlPopover = gettext(`Path for binaries can vary depending on device agent implementation, for example:
    /firmware/binaries/firmware1.bin
    https://firmware/binary/123
    ftp://firmware/binary/123.tar.gz
  `);
        this.model = {
            selected: undefined,
            dependency: null,
            patchVersion: undefined,
            binary: {
                file: undefined,
                url: undefined
            }
        };
        this.firmwareInput$ = new BehaviorSubject('');
        this.firmwares$ = this.firmwareInput$.pipe(debounceTime(300), distinctUntilChanged(), switchMap(searchStr => from(this.repository.listRepositoryEntries(RepositoryType.FIRMWARE, {
            partialName: searchStr,
            skipLegacy: true
        }))), shareReplay(1));
        this.firmwareSelected$ = new BehaviorSubject(null);
        this.patchDependencyInput$ = new BehaviorSubject('');
        this.saving = false;
        this.firmwarePreselected = false;
        this.baseVersions$ = merge(this.firmwareInput$.pipe(tap(() => {
            this.model.dependency = null;
            if (this.form) {
                this.form.form.get('patchDependency').reset();
            }
        }), switchMap(() => of(null))), this.firmwareSelected$).pipe(switchMap(selectedFirmware => selectedFirmware ? this.repository.listBaseVersions(selectedFirmware) : of(null)), shareReplay(1));
        this.baseVersionsFilterPipe = pipe(switchMap((data) => this.patchDependencyInput$.pipe(map(partialVersion => data.filter((mo) => {
            const version = mo.c8y_Firmware.version.toLowerCase();
            return (partialVersion.length === 0 || version.indexOf(partialVersion.toLowerCase()) > -1);
        })))));
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.setInitialState();
        });
    }
    setInitialState() {
        if (this.model.selected) {
            this.firmwarePreselected = true;
            this.firmwareSelected$.next(this.model.selected);
        }
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            this.saving = true;
            this.repository
                .create(this.model, RepositoryType.FIRMWARE)
                .then(savedFirmware => {
                this.successMsg();
                this.saving = false;
                this.saved.next(savedFirmware);
                this.cancel();
            })
                .catch(e => {
                this.saving = false;
                this.saved.error(e);
                this.cancel();
            });
        });
    }
    successMsg() {
        const msg = gettext('Firmware patch added.');
        this.alert.success(msg);
    }
    cancel() {
        this.modal.hide();
        this.saved.complete();
    }
    onFile(dropped) {
        if (!isUndefined(dropped.url)) {
            this.model.binary = {
                url: dropped.url
            };
            return;
        }
        else if (dropped.droppedFiles) {
            this.model.binary = {
                file: dropped.droppedFiles[0].file
            };
            return;
        }
        else {
            this.model.binary = {
                file: undefined,
                url: undefined
            };
        }
    }
}
AddFirmwarePatchModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-firmware-patch-modal.component',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-firmware'\"></i>\n    <h4 translate>\n      Add firmware patch\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\">\n    <p class=\"lead m-0\" translate>\n      Select a firmware version\n    </p>\n  </div>\n\n  <form\n    class=\"d-contents\"\n    autocomplete=\"off\"\n    #firmwarePatchForm=\"ngForm\"\n    (ngSubmit)=\"firmwarePatchForm.form.valid && save()\">\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"firmwarePreselected\">\n          <c8y-form-group>\n            <label for=\"firmwareName\" translate>Firmware</label>\n            <c8y-typeahead\n              [ngModel]=\"model.selected\"\n              name=\"firmwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"firmwareInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"let firmware of firmwares$ | async; loadMore: 'auto'\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"model.selected = firmware; firmwareSelected$.next(firmware)\"\n                [active]=\"model.selected === firmware\"\n              >\n                <c8y-highlight\n                  [text]=\"firmware.name || '--'\"\n                  [pattern]=\"firmwareInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"'Select one of the existing firmwares.' | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"patchDependency\" class=\"m-r-8\" translate>Version</label>\n          <c8y-typeahead\n            [ngModel]=\"model.dependency\"\n            name=\"patchDependency\"\n            placeholder=\"{{ 'Select or enter' | translate }}\"\n            (onSearch)=\"patchDependencyInput$.next($event)\"\n            [displayProperty]=\"'c8y_Firmware.version'\"\n            [allowFreeEntries]=\"false\"\n            [disabled]=\"\n              (baseVersions$ | async) === null || (baseVersions$ | async)?.data.length === 0\n            \"\n            [required]=\"true\"\n          >\n            <c8y-li\n              *c8yFor=\"\n                let baseVersion of baseVersions$;\n                loadMore: 'auto';\n                pipe: baseVersionsFilterPipe\n              \"\n              class=\"p-l-8 p-r-8 c8y-list__item--link\"\n              (click)=\"model.dependency = baseVersion\"\n              [active]=\"model.dependency === baseVersion\"\n            >\n              <c8y-highlight\n                [text]=\"baseVersion.c8y_Firmware.version || '--'\"\n                [pattern]=\"patchDependencyInput$ | async\"\n              ></c8y-highlight>\n            </c8y-li>\n          </c8y-typeahead>\n          <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing versions.' | translate\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label for=\"patchVersion\" translate>Patch</label>\n          <input\n            id=\"patchVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"patchVersion\"\n            [(ngModel)]=\"model.patchVersion\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            required\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block m-t-40\" translate>Patch file</div>\n          <c8y-file-picker [maxAllowedFiles]=\"1\" (onFilesPicked)=\"onFile($event)\" [fileUrlPopover]=\"textForFirmwareUrlPopover\">\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n      <button\n        title=\"{{ 'Add firmware patch' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !firmwarePatchForm.form.valid ||\n          firmwarePatchForm.form.pristine ||\n          (!model.binary?.url && !model.binary?.file) ||\n          saving\n        \"\n        translate\n      >\n        Add firmware patch\n      </button>\n    </div>\n  </form>\n</div>\n"
            },] }
];
AddFirmwarePatchModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: RepositoryService },
    { type: AlertService }
];
AddFirmwarePatchModalComponent.propDecorators = {
    saved: [{ type: Output }],
    dropdown: [{ type: ViewChild, args: ['dropdown', { static: false },] }],
    form: [{ type: ViewChild, args: ['firmwarePatchForm', { static: false },] }]
};

class AddFirmwareModalComponent {
    constructor(modal, repositoryService, alert) {
        this.modal = modal;
        this.repositoryService = repositoryService;
        this.alert = alert;
        this.saved = new EventEmitter();
        this.onInput = new BehaviorSubject('');
        this.model = {
            selected: undefined,
            version: undefined,
            description: undefined,
            deviceType: undefined,
            binary: {
                file: undefined,
                url: undefined
            }
        };
        this.saving = false;
        this.firmwarePreselected = false;
        this.textForFirmwareUrlPopover = gettext(`Path for binaries can vary depending on device agent implementation, for example:
    /firmware/binaries/firmware1.bin
    https://firmware/binary/123
    ftp://firmware/binary/123.tar.gz
  `);
    }
    ngOnInit() {
        this.setInitialState();
        this.loadFirmwares();
    }
    setInitialState() {
        if (this.model.selected) {
            this.firmwarePreselected = true;
        }
    }
    loadFirmwares() {
        this.inputSubscription$ = this.onInput
            .pipe(tap(() => {
            if (!this.firmwarePreselected) {
                this.model.description = null;
                if (this.form) {
                    this.form.form.get('description').reset();
                }
            }
        }), debounceTime(300), distinctUntilChanged(), switchMap(searchStr => this.getFirmwareResult(searchStr)))
            .subscribe(result => {
            this.firmwaresResult = result;
        });
    }
    getFirmwareResult(searchStr) {
        return from(this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, {
            partialName: searchStr,
            skipLegacy: true
        }));
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            this.saving = true;
            this.repositoryService
                .create(this.model, RepositoryType.FIRMWARE)
                .then(savedFirmware => {
                this.successMsg();
                this.saving = false;
                this.saved.next(savedFirmware);
                this.cancel();
            })
                .catch(e => {
                this.saving = false;
                this.saved.error(e);
                this.cancel();
            });
        });
    }
    successMsg() {
        const msg = gettext('Firmware added.');
        this.alert.success(msg);
    }
    cancel() {
        this.modal.hide();
        this.saved.complete();
    }
    ngOnDestroy() {
        this.inputSubscription$.unsubscribe();
    }
    onFile(dropped) {
        if (!isUndefined(dropped.url)) {
            this.model.binary = {
                url: dropped.url
            };
            return;
        }
        else if (dropped.droppedFiles) {
            this.model.binary = {
                file: dropped.droppedFiles[0].file
            };
            return;
        }
        else {
            this.model.binary = {
                file: undefined,
                url: undefined
            };
        }
    }
    onFirmwareSelect(firmware) {
        assign(this.model, {
            selected: firmware,
            description: firmware.description,
            deviceType: get(firmware, 'c8y_Filter.type')
        });
    }
}
AddFirmwareModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-firmware-software-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-firmware'\"></i>\n    <h4 translate>\n      Add firmware\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\" *ngIf=\"!firmwarePreselected\">\n    <p class=\"lead m-0\" translate>\n      Select or create new firmware\n    </p>\n  </div>\n  <form\n    class=\"d-contents\"\n    autocomplete=\"off\"\n    #firmwareForm=\"ngForm\"\n    (ngSubmit)=\"firmwareForm.form.valid && save()\"\n  >\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"firmwarePreselected\">\n          <c8y-form-group>\n            <label for=\"firmwareName\" translate>Firmware</label>\n            <c8y-typeahead\n              [(ngModel)]=\"model.selected\"\n              name=\"firmwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"onInput.next($event)\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"\n                  let firmware of firmwaresResult;\n                  loadMore: 'auto';\n                  notFound: notFoundTemplate\n                \"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"onFirmwareSelect(firmware)\"\n                [active]=\"model.selected === firmware\"\n              >\n                <c8y-highlight\n                  [text]=\"firmware.name || '--'\"\n                  [pattern]=\"onInput | async\"\n                ></c8y-highlight>\n              </c8y-li>\n              <ng-template #notFoundTemplate>\n                <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"(onInput | async)?.length > 0\">\n                  <span translate>No match found.</span>\n                  <button\n                    title=\"{{ 'Add new`firmware`' | translate }}\"\n                    type=\"button\"\n                    class=\"btn btn-primary btn-xs m-l-8\"\n                    translate\n                  >\n                    Add new`firmware`\n                  </button>\n                </c8y-li>\n              </ng-template>\n            </c8y-typeahead>\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label for=\"firmwareDescription\" translate>Description</label>\n            <input\n              id=\"firmwareDescription\"\n              class=\"form-control\"\n              autocomplete=\"off\"\n              name=\"description\"\n              [(ngModel)]=\"model.description\"\n              placeholder=\"{{ 'e.g. Firmware for hardware revision b' | translate }}\"\n              [disabled]=\"model.selected?.id\"\n              [required]=\"true\"\n            />\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label class=\"control-label\" for=\"firmwareDeviceTypeFilter\">\n              {{ 'Device type filter' | translate }}\n              <button\n                class=\"btn btn-clean text-primary\"\n                popover=\"{{\n                  'If the filter is set, the firmware will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.'\n                    | translate\n                }}\"\n                triggers=\"focus\"\n                container=\"body\"\n                placement=\"right\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\"></i>\n              </button>\n            </label>\n            <input\n              id=\"firmwareDeviceTypeFilter\"\n              class=\"form-control\"\n              name=\"firmwareDeviceTypeFilter\"\n              [(ngModel)]=\"model.deviceType\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n              [disabled]=\"model.selected?.id\"\n            />\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"firmwareVersion\" translate>Version</label>\n          <input\n            id=\"firmwareVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"version\"\n            [(ngModel)]=\"model.version\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            [required]=\"true\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block m-t-40\" translate>Firmware file</div>\n          <c8y-file-picker [maxAllowedFiles]=\"1\" (onFilesPicked)=\"onFile($event)\" [fileUrlPopover]=\"textForFirmwareUrlPopover\">\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n\n      <button\n        title=\"{{ 'Add firmware' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !firmwareForm.form.valid ||\n          firmwareForm.form.pristine ||\n          saving ||\n          (!model.binary?.url && !model.binary?.file)\n        \"\n        translate\n      >\n        Add firmware\n      </button>\n    </div>\n  </form>\n</div>\n"
            },] }
];
AddFirmwareModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: RepositoryService },
    { type: AlertService }
];
AddFirmwareModalComponent.propDecorators = {
    form: [{ type: ViewChild, args: ['firmwareForm', { static: false },] }],
    saved: [{ type: Output }]
};

class FirmwareDetailsComponent {
    constructor(activatedRoute, inventoryService, repositoryService, alertService, translateService, modalService, bsModalService) {
        this.activatedRoute = activatedRoute;
        this.inventoryService = inventoryService;
        this.repositoryService = repositoryService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.bsModalService = bsModalService;
        this.reload$ = new Subject();
        this.reloading$ = new BehaviorSubject(false);
        this.updateFirmware$ = new Subject();
        this.firmwareUpdated$ = new Subject();
        this.baseVersionsUpdated$ = new Subject();
        this.patchVersionsUpdated$ = new Subject();
        this.firmware$ = merge(this.activatedRoute.params.pipe(map(params => params.id), switchMap(id => defer(() => this.inventoryService.detail(id).then(result => result.data)))), this.reload$.pipe(tap(() => this.reloading$.next(true)), switchMap(() => this.activatedRoute.params), map(params => params.id), switchMap(id => defer(() => this.inventoryService.detail(id).then(result => result.data))), tap(() => this.reloading$.next(false))), this.firmwareUpdated$).pipe(shareReplay(1));
        this.baseVersions$ = merge(this.firmware$.pipe(distinctUntilKeyChanged('id')), this.baseVersionsUpdated$, this.patchVersionsUpdated$, this.reload$).pipe(switchMap(() => this.firmware$), switchMap(firmware => this.repositoryService.listBaseVersions(firmware)), shareReplay(1));
        this.isLegacy$ = this.firmware$.pipe(map(firmware => this.repositoryService.isLegacyEntry(firmware)), shareReplay(1));
        this.canAddPatchVersions$ = combineLatest(this.isLegacy$, this.baseVersions$.pipe(map(({ data }) => data.length > 0))).pipe(map(([isLegacy, hasBaseVersions]) => !isLegacy && hasBaseVersions));
        this.expanded = {};
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.updateFirmware$
            .pipe(withLatestFrom(this.firmware$), switchMap(([firmwarePartial, firmware]) => this.inventoryService.update(Object.assign({ id: firmware.id }, firmwarePartial))), map(({ data }) => data), tap(firmware => this.firmwareUpdated$.next(firmware)), tap(() => this.alertService.success(gettext('Saved.'))), takeUntil(this.destroy$))
            .subscribe();
    }
    getPatchVersionsCount$(baseVersion) {
        return merge(this.firmware$.pipe(distinctUntilKeyChanged('id')), this.baseVersionsUpdated$, this.patchVersionsUpdated$, this.reload$).pipe(switchMap(() => this.firmware$), switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)), shareReplay(1));
    }
    getBinaryName$(binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    }
    getPatchVersions$(baseVersion) {
        return merge(this.firmware$.pipe(distinctUntilKeyChanged('id')), this.patchVersionsUpdated$, this.reload$).pipe(switchMap(() => this.firmware$), switchMap(firmware => this.repositoryService.listPatchVersions(firmware, baseVersion)), shareReplay(1));
    }
    addBaseVersion() {
        this.firmware$
            .pipe(take(1), switchMap(firmware => {
            const initialState = {
                model: {
                    selected: firmware,
                    description: firmware.description
                }
            };
            const config = {
                class: 'modal-sm',
                ignoreBackdropClick: true,
                initialState
            };
            const modalRef = this.bsModalService.show(AddFirmwareModalComponent, config);
            return modalRef.content.saved;
        }))
            .subscribe(() => this.baseVersionsUpdated$.next());
    }
    addPatchVersion() {
        this.firmware$
            .pipe(take(1), switchMap(firmware => {
            const initialState = {
                model: {
                    selected: firmware
                }
            };
            const config = {
                class: 'modal-sm',
                ignoreBackdropClick: true,
                initialState
            };
            const modalRef = this.bsModalService.show(AddFirmwarePatchModalComponent, config);
            return modalRef.content.saved;
        }))
            .subscribe(() => this.patchVersionsUpdated$.next());
    }
    deleteBaseVersion(baseVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const title = gettext('Delete firmware');
                const body = `
        ${this.translateService.instant(gettext('You are about to delete firmware {{ version }} with all its patches.'), { version: baseVersion.c8y_Firmware.version })}
        ${this.translateService.instant(gettext('This operation is irreversible.'))}
        ${this.translateService.instant(gettext('Do you want to proceed?'))}
      `;
                const labels = {
                    ok: gettext('Delete')
                };
                yield this.modalService.confirm(title, body, Status.DANGER, labels);
                yield this.repositoryService.delete(baseVersion);
                this.alertService.success(gettext('Firmware deleted.'));
                this.baseVersionsUpdated$.next();
            }
            catch (ex) {
                // only if not cancel from modal
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
    deletePatchVersion(patchVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const title = gettext('Delete firmware patch');
                const body = `
        ${this.translateService.instant(gettext('You are about to delete firmware patch {{ version }}.'), { version: patchVersion.c8y_Firmware.version })}
        ${this.translateService.instant(gettext('This operation is irreversible.'))}
        ${this.translateService.instant(gettext('Do you want to proceed?'))}
      `;
                const labels = {
                    ok: gettext('Delete')
                };
                yield this.modalService.confirm(title, body, Status.DANGER, labels);
                yield this.repositoryService.delete(patchVersion);
                this.alertService.success(gettext('Firmware patch deleted.'));
                this.patchVersionsUpdated$.next();
            }
            catch (ex) {
                // only if not cancel from modal
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.unsubscribe();
    }
}
FirmwareDetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-firmware-details',
                template: "<c8y-title>\n  {{ (firmware$ | async)?.name }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    path=\"#/firmware\"\n    label=\"{{ 'Firmware repository' | translate }}\"\n    icon=\"c8y-firmware\"\n  >\n  </c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"!(isLegacy$ | async)\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add firmware' | translate }}\"\n    (click)=\"addBaseVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"canAddPatchVersions$ | async\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add firmware patch' | translate }}\"\n    (click)=\"addPatchVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware patch' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>\n          Name, description and device type filter\n        </h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Name' | translate }}\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #nameInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(firmware$ | async)?.name\"\n                  #nameModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g. My firmware' | translate }}\"\n                  data-cy=\"firmware-details--name-input\"\n                  [ngStyle]=\"{ 'width.ch': (firmware$ | async)?.name?.length || 31 }\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    data-cy=\"firmware-details--name-save-btn\"\n                    (click)=\"updateFirmware$.next({ name: nameInput.value }); nameModel.reset()\"\n                    [disabled]=\"nameInput.value.length == 0\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Description' | translate }}\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #descriptionInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(firmware$ | async)?.description\"\n                  #descriptionModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g. Firmware for hardware revision b' | translate }}\"\n                  data-cy=\"firmware-details--description-input\"\n                  [ngStyle]=\"{ 'width.ch': (firmware$ | async)?.description?.length || 31 }\"\n\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    data-cy=\"firmware-details--description-save-btn\"\n                    (click)=\" updateFirmware$.next({ description: descriptionInput.value }); descriptionModel.reset() \"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type filter' | translate }}\n\n                <button\n                 class=\"btn-clean\"\n                  popover=\"{{ 'If the filter is set, the firmware will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.' | translate }}\"\n                  [outsideClick]=\"true\"\n                  container=\"body\"\n                >\n                  <i c8yIcon=\"question-circle-o\" class=\"text-info\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  #deviceTypeInput\n                  type=\"text\"\n                  class=\"form-control\"\n                  [ngModel]=\"(firmware$ | async)?.c8y_Filter?.type\"\n                  #deviceTypeModel=\"ngModel\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  data-cy=\"firmware-details--device-type-filter-input\"\n                  [ngStyle]=\"{ 'width.ch': (firmware$ | async)?.type?.length || 31 }\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    data-cy=\"firmware-details--device-type-filter-save-btn\"\n                    (click)=\" updateFirmware$.next({ c8y_Filter: { type: deviceTypeInput.value } }); deviceTypeModel.reset()\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>\n          Versions and patches\n        </h4>\n      </div>\n\n      <div class=\"card-block p-t-0 p-b-24\">\n        <div *ngIf=\"(baseVersions$ | async)?.data.length === 0\">\n          <div class=\"c8y-empty-state text-center\">\n            <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n            <h3 translate>No versions to display.</h3>\n            <p translate>Add a new version by clicking below.</p>\n            <p>\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Add firmware' | translate }}\"\n                (click)=\"addBaseVersion()\"\n              >\n                {{ 'Add firmware' | translate }}\n              </button>\n            </p>\n          </div>\n        </div>\n\n        <c8y-list-group\n          [ngClass]=\"{ 'dd-low': (baseVersions$ | async)?.data.length < 10 }\"\n          *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n        >\n          <c8y-li\n            *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\"\n            [emptyActions]=\"!(getPatchVersions$(baseVersion) | async)?.data.length\"\n            [collapsed]=\"!expanded[baseVersion.id]\"\n            (collapsedChange)=\"expanded[baseVersion.id] = !$event\"\n          >\n            <c8y-li-icon>\n              <i c8yIcon=\"c8y-firmware\"></i>\n            </c8y-li-icon>\n\n            <c8y-li-body class=\"content-flex-50\">\n              <div class=\"col-4\">\n                <p class=\"text-truncate-wrap\" title=\"{{ baseVersion.c8y_Firmware.version }}\">\n                  {{ baseVersion.c8y_Firmware.version }}\n                </p>\n              </div>\n              <div class=\"col-5\">\n                <p class=\"text-truncate-wrap\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    File\n                  </span>\n                  <span title=\"{{ getBinaryName$(baseVersion.c8y_Firmware.url) | async }}\">\n                    <c8y-file-download url=\"{{ baseVersion.c8y_Firmware.url }}\"></c8y-file-download>\n                  </span>\n                </p>\n              </div>\n              <div class=\"col-2 flex-row a-i-start\">\n                <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning flex-item-right-sm\">\n                  {{ 'Legacy' | translate }}\n                </span>\n\n                <span *ngIf=\"!(isLegacy$ | async)\">\n                  <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n                    <span class=\"label label-info\">\n                      <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n                    </span>\n                  </span>\n                  <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n                    <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n                      <ng-template ngPluralCase=\"=0\">\n                        <span class=\"label label-default flex-item-right-sm\">\n                          <span translate>No patches</span>\n                        </span>\n                      </ng-template>\n                      <ng-template ngPluralCase=\"=1\">\n                        <span class=\"label label-info\">\n                          <span translate>1 patch</span>\n                        </span>\n                      </ng-template>\n                      <ng-template ngPluralCase=\"other\">\n                        <span class=\"label label-info\">\n                          <span\n                            ngNonBindable\n                            translate\n                            [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                          >\n                            {{ count }} patches\n                          </span>\n                        </span>\n                      </ng-template>\n                    </span>\n                  </span>\n                </span>\n              </div>\n              <div class=\"fit-h-20 visible-xs\" *ngIf=\"!(isLegacy$ | async)\">\n                <button\n                  class=\"btn btn-danger btn-xs m-t-8 \"\n                  (click)=\"deleteBaseVersion(baseVersion)\"\n                  title=\"{{ 'Delete' | translate }}\"\n                >\n                  <i c8yIcon=\"minus-circle\"></i>\n                  {{ 'Delete' | translate }}\n                </button>\n              </div>\n              <div *ngIf=\"!(isLegacy$ | async)\" class=\"flex-item-right fit-h-20 p-r-8 hidden-xs\">\n                <button\n                  class=\"btn btn-dot text-danger showOnHover\"\n                  (click)=\"deleteBaseVersion(baseVersion)\"\n                  title=\"{{ 'Delete' | translate }}\"\n                >\n                  <i c8yIcon=\"minus-circle\"></i>\n                </button>\n              </div>\n            </c8y-li-body>\n            <c8y-li-collapse *ngIf=\"(getPatchVersions$(baseVersion) | async)?.data.length\">\n              <c8y-list-group class=\"separator-top\">\n                <c8y-li\n                  *c8yFor=\" let patchVersion of getPatchVersions$(baseVersion) | async; let i = index; loadMore: 'auto' \"\n                >\n                  <c8y-li-icon>\n                    <i c8yIcon=\"c8y-firmware\"></i>\n                  </c8y-li-icon>\n                  <c8y-li-body class=\"content-flex-50\">\n                    <div class=\"col-4\">\n                      {{ patchVersion.c8y_Firmware.version }}\n                    </div>\n                    <div class=\"col-5\">\n                      <div class=\"text-truncate\">\n                        <span class=\"text-label-small m-r-8\" translate>\n                          File\n                        </span>\n                        <c8y-file-download\n                          url=\"{{ patchVersion.c8y_Firmware.url }}\"\n                        ></c8y-file-download>\n                      </div>\n                    </div>\n                    <div class=\"visible-xs m-t-8\">\n                      <button\n                        class=\"btn btn-danger btn-xs\"\n                        (click)=\"deletePatchVersion(patchVersion)\"\n                        title=\"{{ 'Delete' | translate }}\"\n                      >\n                        <i c8yIcon=\"minus-circle\"></i>\n                        {{ 'Delete' | translate }}\n                      </button>\n                    </div>\n                    <div class=\"flex-item-right p-r-8 hidden-xs fit-h-20\">\n                      <button\n                        class=\"btn btn-dot text-danger showOnHover\"\n                        (click)=\"deletePatchVersion(patchVersion)\"\n                        title=\"{{ 'Delete' | translate }}\"\n                      >\n                        <i c8yIcon=\"minus-circle\"></i>\n                      </button>\n                    </div>\n                  </c8y-li-body>\n                </c8y-li>\n              </c8y-list-group>\n            </c8y-li-collapse>\n          </c8y-li>\n        </c8y-list-group>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
FirmwareDetailsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: InventoryService },
    { type: RepositoryService },
    { type: AlertService },
    { type: TranslateService },
    { type: ModalService },
    { type: BsModalService }
];
__decorate([
    memoize(property('id'))
], FirmwareDetailsComponent.prototype, "getPatchVersionsCount$", null);
__decorate([
    memoize()
], FirmwareDetailsComponent.prototype, "getBinaryName$", null);
__decorate([
    memoize(property('id'))
], FirmwareDetailsComponent.prototype, "getPatchVersions$", null);

class FirmwareListComponent {
    constructor(repositoryService, modalService, bsModalService, translateService, alertService, router, activatedRoute) {
        this.repositoryService = repositoryService;
        this.modalService = modalService;
        this.bsModalService = bsModalService;
        this.translateService = translateService;
        this.alertService = alertService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.textFilter$ = new BehaviorSubject('');
        this.reload$ = new BehaviorSubject(null);
        this.reloading = false;
        this.firmwares$ = combineLatest(this.textFilter$.pipe(debounceTime(400), distinctUntilChanged()), this.reload$).pipe(tap(() => {
            this.reloading = true;
        }), switchMap(([text]) => this.getFirmwares(text)), tap(() => {
            this.reloading = false;
        }), shareReplay(1));
        this.canAddFirmwarePatch$ = from(this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { skipLegacy: true })).pipe(map(({ data }) => data.length > 0));
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.DEVICE_TYPE_NOT_AVAILABLE = gettext('No device type available');
    }
    getFirmwares(partialText) {
        const properties = ['name', 'description', 'c8y_Filter.type'];
        const partialTextFilter = { partialText, properties };
        return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, {
            partialTextFilter
        });
    }
    addFirmware() {
        const config = { class: 'modal-sm', ignoreBackdropClick: true };
        const modalRef = this.bsModalService.show(AddFirmwareModalComponent, config);
        modalRef.content.saved.subscribe(savedFirmware => this.editFirmware(savedFirmware));
    }
    addFirmwarePatch() {
        const config = { class: 'modal-sm', ignoreBackdropClick: true };
        const modalRef = this.bsModalService.show(AddFirmwarePatchModalComponent, config);
        modalRef.content.saved.subscribe(savedFirmware => this.editFirmware(savedFirmware));
    }
    editFirmware(firmware) {
        this.router.navigate([firmware.id], { relativeTo: this.activatedRoute });
    }
    deleteFirmware(firmware) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const title = gettext('Delete firmware');
                const body = `
        ${this.translateService.instant(gettext('You are about to delete firmware "{{ name }}" with all its versions and patches.'), { name: firmware.name })}
        ${this.translateService.instant(gettext('This operation is irreversible.'))}
        ${this.translateService.instant(gettext('Do you want to proceed?'))}
      `;
                const labels = {
                    ok: gettext('Delete')
                };
                yield this.modalService.confirm(title, body, Status.DANGER, labels);
                yield this.repositoryService.delete(firmware);
                this.alertService.success(gettext('Firmware deleted.'));
                this.reload$.next();
            }
            catch (ex) {
                // only if not cancel from modal
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
    getBaseVersionsCount$(firmware) {
        return this.firmwares$.pipe(switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)), shareReplay(1));
    }
    getDeviceTypeTitle(firmware) {
        return get(firmware, 'c8y_Filter.type', this.translateService.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
    }
}
FirmwareListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-firmware-list',
                template: "<c8y-title>\n  {{ 'Firmware repository' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      class=\"form-control\"\n      type=\"search\"\n      title=\"{{ 'Filter firmware\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n        px-event=\"Clear filtering firmware\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Add firmware' | translate }}\" (click)=\"addFirmware()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    *ngIf=\"canAddFirmwarePatch$ | async\"\n    title=\"{{ 'Add firmware patch' | translate }}\"\n    (click)=\"addFirmwarePatch()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware patch' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#firmware-repo\"></c8y-help>\n\n<!-- empty state-->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(firmwares$ | async)?.data.length === 0 && (textFilter$ | async)?.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-firmware\"></h1>\n  <h3 translate>No firmwares to display.</h3>\n  <p translate>Add a new firmware by clicking below.</p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add firmware' | translate }}\"\n      (click)=\"addFirmware()\"\n    >\n      {{ 'Add firmware' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- no results empty state -->\n<div\n  class=\"c8y-empty-state\"\n  *ngIf=\"(firmwares$ | async)?.data.length === 0 && (textFilter$ | async)?.length > 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"search\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Refine your search terms or check your spelling.</p>\n</div>\n\n<c8y-list-group\n  class=\"m-b-24\"\n  *ngIf=\"(firmwares$ | async)?.data.length > 0\"\n  [ngClass]=\"{ 'dd-low': (firmwares$ | async)?.data.length < 10 }\"\n>\n  <c8y-li [emptyActions]=\"true\" class=\"page-sticky-header hidden-xs\">\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <div class=\"col-3\">\n        {{ 'Firmware' | translate }}\n      </div>\n      <div class=\"col-4\">\n        {{ 'Description' | translate }}\n      </div>\n      <div class=\"col-3\">\n        {{ 'Device type' | translate }}\n      </div>\n      <div class=\"col-2\">\n        {{ 'Versions' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n\n  <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon icon=\"c8y-firmware\"></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <button class=\"btn-clean col-3\" (click)=\"editFirmware(firmware)\">\n        <span class=\"text-truncate\" title=\"{{ firmware.name }}\">\n          <c8y-highlight\n            [text]=\"firmware.name || '-'\"\n            elementClass=\"text-info\"\n            [pattern]=\"textFilter$ | async\"\n          ></c8y-highlight>\n        </span>\n      </button>\n      <div class=\"col-4\">\n        <p class=\"text-truncate\" title=\"{{ firmware.description }}\">\n          <span class=\"text-label-small m-r-4 visible-xs-inline\">\n            {{ 'Description' | translate }}\n          </span>\n          <span *ngIf=\"firmware.description; else emptyDescription\">\n            <c8y-highlight\n              [text]=\"firmware.description || '-'\"\n              elementClass=\"text-info\"\n              [pattern]=\"textFilter$ | async\"\n            ></c8y-highlight>\n          </span>\n        </p>\n        <ng-template #emptyDescription>\n          <small class=\"text-muted\">\n            <em>{{ 'No description' | translate }}</em>\n          </small>\n        </ng-template>\n      </div>\n      <div class=\"col-3\">\n        <div class=\"text-truncate\">\n          <span class=\"text-label-small m-r-4 visible-xs-inline\" translate> Device type </span>\n          <span\n            *ngIf=\"firmware.c8y_Filter?.type; else emptyText\"\n            title=\"{{ firmware.c8y_Filter?.type }}\"\n          >\n            <c8y-highlight\n              [text]=\"firmware.c8y_Filter?.type || '-'\"\n              elementClass=\"text-info\"\n              [pattern]=\"textFilter$ | async\"\n            ></c8y-highlight>\n          </span>\n          <ng-template #emptyText>\n            <small class=\"text-muted\">\n              <em>{{ 'Undefined' | translate }}</em>\n            </small>\n          </ng-template>\n        </div>\n      </div>\n      <div class=\"col-2\">\n        <span class=\"label label-warning flex-item-right-sm\" *ngIf=\"isLegacy(firmware)\">\n          <span translate> Legacy </span>\n        </span>\n\n        <span *ngIf=\"!isLegacy(firmware)\">\n          <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n            <span class=\"label label-info flex-item-right-sm\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n          <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n            <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default flex-item-right-sm\">\n                  <span translate> No versions </span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info flex-item-right-sm\">\n                  <span translate> 1 version </span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info flex-item-right-sm\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getBaseVersionsCount$(firmware) | async }\"\n                  >\n                    {{ count }} versions\n                  </span>\n                </span>\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-action (click)=\"editFirmware(firmware)\" icon=\"pencil\">\n      {{ 'Edit' | translate }}\n    </c8y-li-action>\n\n    <c8y-li-action (click)=\"deleteFirmware(firmware)\" icon=\"trash\">\n      {{ 'Delete' | translate }}\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"
            },] }
];
FirmwareListComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: ModalService },
    { type: BsModalService },
    { type: TranslateService },
    { type: AlertService },
    { type: Router },
    { type: ActivatedRoute }
];
__decorate([
    memoize(property('id'))
], FirmwareListComponent.prototype, "getBaseVersionsCount$", null);

class FirmwareRepositoryNavigationFactory {
    constructor() {
        this.node = new NavigatorNode({
            label: gettext('Firmware repository'),
            path: 'firmware',
            icon: 'c8y-firmware',
            parent: gettext('Management'),
            priority: 1000
        });
    }
    get() {
        return this.node;
    }
}
FirmwareRepositoryNavigationFactory.decorators = [
    { type: Injectable }
];
FirmwareRepositoryNavigationFactory.ctorParameters = () => [];

class FirmwareRepositoryListModule {
    static forRoot() {
        return {
            ngModule: FirmwareRepositoryListModule,
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: FirmwareRepositoryNavigationFactory,
                    multi: true
                },
                {
                    provide: HOOK_ROUTE,
                    useValue: [
                        {
                            path: 'firmware',
                            component: FirmwareListComponent
                        },
                        {
                            path: 'firmware/:id',
                            component: FirmwareDetailsComponent
                        }
                    ],
                    multi: true
                }
            ]
        };
    }
}
FirmwareRepositoryListModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CoreModule,
                    FormsModule,
                    PopoverModule,
                    SharedRepositoryModule
                ],
                declarations: [
                    FirmwareListComponent,
                    FirmwareDetailsComponent,
                    AddFirmwareModalComponent,
                    AddFirmwarePatchModalComponent,
                ],
                entryComponents: [
                    FirmwareListComponent,
                    FirmwareDetailsComponent,
                    AddFirmwareModalComponent,
                    AddFirmwarePatchModalComponent,
                ]
            },] }
];

class FirmwareRepositoryModule {
}
FirmwareRepositoryModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FirmwareRepositoryListModule.forRoot(),
                    FirmwareRepositoryDeviceTabModule.forRoot()
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AddFirmwareModalComponent, AddFirmwarePatchModalComponent, FirmwareDetailsComponent, FirmwareDeviceTabComponent, FirmwareDeviceTabGuard, FirmwareListComponent, FirmwareRepositoryDeviceTabModule, FirmwareRepositoryListModule, FirmwareRepositoryModule, FirmwareRepositoryListModule as ɵa, FirmwareListComponent as ɵb, FirmwareDetailsComponent as ɵc, AddFirmwareModalComponent as ɵd, AddFirmwarePatchModalComponent as ɵe, FirmwareRepositoryNavigationFactory as ɵf, FirmwareRepositoryDeviceTabModule as ɵg, FirmwareDeviceTabComponent as ɵh, FirmwareDeviceTabGuard as ɵi };
//# sourceMappingURL=c8y-ngx-components-repository-firmware.js.map
