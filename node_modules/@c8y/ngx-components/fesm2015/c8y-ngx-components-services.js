import * as i0 from '@angular/core';
import { Component, InjectionToken, Injectable, Optional, Inject, EventEmitter, NgModule } from '@angular/core';
import { CellRendererContext, gettext, getBasicInputArrayFormFieldConfig, ViewContext, CoreModule, HOOK_ROUTE, HOOK_BREADCRUMB } from '@c8y/ngx-components';
import { BaseDeviceGridColumn, DeviceGridService } from '@c8y/ngx-components/device-grid';
import { FormGroup } from '@angular/forms';
import { flatten, entries, get } from 'lodash-es';
import { __awaiter } from 'tslib';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { QueriesUtil, InventoryService } from '@c8y/client';
import { TooltipModule } from 'ngx-bootstrap/tooltip';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-bootstrap/tooltip';
import * as ɵngcc5 from '@c8y/client';
import * as ɵngcc6 from '@c8y/ngx-components/device-grid';

const _c0 = function (a1) { return ["/service", a1]; };
function StatusCellRendererComponent_ng_container_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const option_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵclassMap(option_r2.class);
    ɵngcc0.ɵɵproperty("c8yIcon", option_r2.icon)("tooltip", ɵngcc0.ɵɵpipeBind1(1, 5, option_r2.label));
} }
function StatusCellRendererComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, StatusCellRendererComponent_ng_container_1_i_1_Template, 2, 7, "i", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", option_r2.key);
} }
function StatusCellRendererComponent_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 5);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("tooltip", ctx_r1.context.item.status);
} }
function ServicesDeviceTabComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ServicesDeviceTabComponent_ng_container_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵelement(2, "h1", 8);
    ɵngcc0.ɵɵelementStart(3, "h3", 9);
    ɵngcc0.ɵɵtext(4, "No services to display.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ServicesDeviceTabComponent_ng_container_5_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "h1", 10);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵelementStart(2, "p");
    ɵngcc0.ɵɵelementStart(3, "strong");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "small");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 2, "No results to display."));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 4, "Refine your search terms or check your spelling."));
} }
function ServicesDeviceTabComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ServicesDeviceTabComponent_ng_container_5_ng_container_1_Template, 5, 0, "ng-container", 5);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, ServicesDeviceTabComponent_ng_container_5_ng_template_3_Template, 9, 6, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(4);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r1.sizeRequest) === 0)("ngIfElse", _r4);
} }
function ServicesDeviceTabComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-column", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r6 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", column_r6.name);
} }
const _c1 = function () { return []; };
class LastUpdatedDateCellRendererComponent {
    constructor(context) {
        this.context = context;
    }
}
LastUpdatedDateCellRendererComponent.ɵfac = function LastUpdatedDateCellRendererComponent_Factory(t) { return new (t || LastUpdatedDateCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext)); };
LastUpdatedDateCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LastUpdatedDateCellRendererComponent, selectors: [["ng-component"]], decls: 2, vars: 3, template: function LastUpdatedDateCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtext(0);
        ɵngcc0.ɵɵpipe(1, "c8yDate");
    } if (rf & 2) {
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(1, 1, ctx.context.value));
    } }, pipes: [ɵngcc1.DatePipe], encapsulation: 2 });
LastUpdatedDateCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LastUpdatedDateCellRendererComponent, [{
        type: Component,
        args: [{
                template: `{{ context.value | c8yDate }}`
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }]; }, null); })();

class LastUpdatedDateGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const self = this;
        this.path = 'lastUpdated';
        this.name = 'lastUpdatedDate';
        this.header = gettext('Last updated');
        this.cellRendererComponent = LastUpdatedDateCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            fields: [{
                    type: 'object',
                    key: 'lastUpdated',
                    fieldGroup: [
                        {
                            type: 'date-time',
                            key: 'after',
                            templateOptions: {
                                label: gettext('Show services updated after')
                            },
                            expressionProperties: {
                                'templateOptions.maxDate': (model) => model === null || model === void 0 ? void 0 : model.before,
                            },
                        },
                        {
                            type: 'date-time',
                            key: 'before',
                            templateOptions: {
                                label: gettext('And before`date`')
                            },
                            expressionProperties: {
                                'templateOptions.minDate': (model) => model === null || model === void 0 ? void 0 : model.after,
                            },
                        }
                    ]
                }],
            formGroup: new FormGroup({}),
            getFilter(model) {
                const filter = {};
                const dates = model && model.lastUpdated;
                if (dates && (dates.after || dates.before)) {
                    filter.__and = [];
                    if (dates.after) {
                        const after = self.formatDate(dates.after);
                        filter.__and.push({
                            __or: {
                                [self.path]: { __gt: after },
                                [`${self.path}.date`]: { __gt: after }
                            }
                        });
                    }
                    if (dates.before) {
                        const before = self.formatDate(dates.before);
                        filter.__and.push({
                            __or: {
                                [self.path]: { __lt: before },
                                [`${self.path}.date`]: { __lt: before }
                            }
                        });
                    }
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: `${this.path}.date` }, { path: this.path }]
        };
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
}

class NameCellRendererComponent {
    constructor(context) {
        this.context = context;
    }
}
NameCellRendererComponent.ɵfac = function NameCellRendererComponent_Factory(t) { return new (t || NameCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext)); };
NameCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NameCellRendererComponent, selectors: [["ng-component"]], decls: 2, vars: 5, consts: [[1, "interact", 3, "routerLink", "title"]], template: function NameCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "a", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx.context.item.id))("title", ctx.context.item.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.context.item.name, " ");
    } }, directives: [ɵngcc2.RouterLinkWithHref], encapsulation: 2 });
NameCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NameCellRendererComponent, [{
        type: Component,
        args: [{
                template: `
    <a [routerLink]="['/service', context.item.id]" [title]="context.item.name" class="interact">
      {{ context.item.name }}
    </a>
  `
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }]; }, null); })();

class ServiceNameGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'name';
        this.path = 'name';
        this.header = gettext('Name');
        this.cellRendererComponent = NameCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            fields: getBasicInputArrayFormFieldConfig({
                key: 'names',
                label: gettext('Filter services by name'),
                addText: gettext('Add next`name`'),
                tooltip: gettext('Use * as a wildcard character'),
                placeholder: gettext('daemon`SERVICE_NAME`')
            }),
            getFilter(model) {
                const filter = {};
                if (model.names.length) {
                    filter.name = { __in: model.names };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}

class ServiceTypeGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'serviceType';
        this.path = 'serviceType';
        this.header = gettext('Type');
        this.filterable = true;
        this.filteringConfig = {
            fields: getBasicInputArrayFormFieldConfig({
                key: 'serviceTypes',
                label: gettext('Filter services by type'),
                addText: gettext('Add next`type`'),
                tooltip: gettext('Use * as a wildcard character'),
                placeholder: 'systemd'
            }),
            getFilter(model) {
                const filter = {};
                if (model.serviceTypes.length) {
                    filter.serviceType = { __in: model.serviceTypes };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}

/**
 * Extension hook allowing to register custom service statuses and configure their visual presentation.
 */
const HOOK_SERVICE_STATUS = new InjectionToken('SERVICE_STATUS');
/**
 * Standard status options supported by the platform.
 */
const SERVICE_STATUS_OPTIONS = [
    {
        key: 'up',
        label: gettext('Up'),
        icon: 'check-circle',
        class: 'text-success'
    },
    {
        key: 'down',
        label: gettext('Down'),
        icon: 'exclamation-circle',
        class: 'text-danger'
    },
    {
        key: 'unknown',
        label: gettext('Unknown'),
        icon: 'inactive-state'
    }
];

/**
 * The service for system wide registered service status options.
 * It provides the standard service statuses plus all custom status options
 * registered with the <code>HOOK_SERVICE_STATUS</code> extension hook.
 */
class StatusOptionsService {
    constructor(options) {
        this._options = [...SERVICE_STATUS_OPTIONS, ...flatten(options)];
    }
    get options() {
        return this._options;
    }
}
StatusOptionsService.ɵfac = function StatusOptionsService_Factory(t) { return new (t || StatusOptionsService)(ɵngcc0.ɵɵinject(HOOK_SERVICE_STATUS, 8)); };
StatusOptionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StatusOptionsService_Factory() { return new StatusOptionsService(i0.ɵɵinject(HOOK_SERVICE_STATUS, 8)); }, token: StatusOptionsService, providedIn: "root" });
StatusOptionsService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_SERVICE_STATUS,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StatusOptionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_SERVICE_STATUS]
            }] }]; }, null); })();

class StatusCellRendererComponent {
    constructor(context, statusOptionsService) {
        this.context = context;
        this.statusOptionsService = statusOptionsService;
    }
}
StatusCellRendererComponent.ɵfac = function StatusCellRendererComponent_Factory(t) { return new (t || StatusCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(StatusOptionsService)); };
StatusCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StatusCellRendererComponent, selectors: [["ng-component"]], decls: 3, vars: 2, consts: [[3, "ngSwitch"], [4, "ngFor", "ngForOf"], ["c8yIcon", "job", "class", "text-primary", "container", "body", "placement", "top", 3, "tooltip", 4, "ngSwitchDefault"], ["container", "body", "placement", "top", 3, "c8yIcon", "class", "tooltip", 4, "ngSwitchCase"], ["container", "body", "placement", "top", 3, "c8yIcon", "tooltip"], ["c8yIcon", "job", "container", "body", "placement", "top", 1, "text-primary", 3, "tooltip"]], template: function StatusCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtemplate(1, StatusCellRendererComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, StatusCellRendererComponent_i_2_Template, 1, 1, "i", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.context.item.status);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.statusOptionsService.options);
    } }, directives: [ɵngcc3.NgSwitch, ɵngcc3.NgForOf, ɵngcc3.NgSwitchDefault, ɵngcc3.NgSwitchCase, ɵngcc1.IconDirective, ɵngcc4.TooltipDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
StatusCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: StatusOptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StatusCellRendererComponent, [{
        type: Component,
        args: [{
                template: "<span [ngSwitch]=\"context.item.status\">\n  <ng-container *ngFor=\"let option of statusOptionsService.options\">\n    <i\n      *ngSwitchCase=\"option.key\"\n      [c8yIcon]=\"option.icon\"\n      class=\"{{ option.class }}\"\n      [tooltip]=\"option.label | translate\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n  </ng-container>\n  <i\n    *ngSwitchDefault\n    c8yIcon=\"job\"\n    class=\"text-primary\"\n    [tooltip]=\"context.item.status\"\n    container=\"body\"\n    placement=\"top\"\n  ></i>\n</span>\n"
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: StatusOptionsService }]; }, null); })();

class StatusGridColumn extends BaseDeviceGridColumn {
    constructor(statusOptionsService, initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'status';
        this.path = 'status';
        this.header = gettext('Status');
        this.dataType = "icon" /* Icon */;
        this.cellRendererComponent = StatusCellRendererComponent;
        this.filterable = true;
        this.resizable = false;
        this.filteringConfig = {
            fields: [
                {
                    key: 'statusOptions',
                    type: 'object',
                    templateOptions: {
                        label: gettext('Show devices with status')
                    },
                    fieldGroup: [
                        ...statusOptionsService.options.map(option => ({
                            key: option.key,
                            type: 'switch',
                            templateOptions: {
                                label: option.label
                            }
                        }))
                    ]
                },
                ...getBasicInputArrayFormFieldConfig({
                    key: 'custom',
                    label: gettext('or filter by custom status'),
                    addText: gettext('Add next`custom status`'),
                    tooltip: gettext('Use * as a wildcard character'),
                    placeholder: gettext('restarting`SERVICE_STATUS`'),
                    optional: true
                })
            ],
            getFilter(model) {
                const filter = {};
                filter.status = {
                    __in: [
                        ...entries((model === null || model === void 0 ? void 0 : model.statusOptions) || {})
                            .filter(([_, value]) => !!value)
                            .map(([key, _]) => key),
                        ...model.custom.filter(c => !!c)
                    ]
                };
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}

const SERVICE_FRAGMENT$1 = 'c8y_Service';
class ServicesDeviceTabComponent {
    constructor(route, inventoryService, gridService, statusOptionsService) {
        this.route = route;
        this.inventoryService = inventoryService;
        this.gridService = gridService;
        this.statusOptionsService = statusOptionsService;
        this.deviceId = this.route.snapshot.parent.data.contextData.id;
        this.sizeRequestDone = false;
        this.refresh$ = new EventEmitter();
        this.pagination = {
            pageSize: 50,
            currentPage: 1
        };
        this.columns = [
            new StatusGridColumn(this.statusOptionsService),
            new ServiceNameGridColumn(),
            new ServiceTypeGridColumn(),
            new LastUpdatedDateGridColumn()
        ];
        this.queriesUtil = new QueriesUtil();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.sizeRequest = this.inventoryService
            .childAdditionsList(this.deviceId, {
            query: `type eq ${SERVICE_FRAGMENT$1}`,
            withTotalPages: true,
            pageSize: 1
        })
            .then(response => {
            var _a;
            this.sizeRequestDone = true;
            return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages;
        });
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverSideDataResult;
            const query = this.queriesUtil.buildQuery(this.queriesUtil.addAndFilter(this.gridService.getQueryObj(dataSourceModifier.columns), {
                type: SERVICE_FRAGMENT$1
            }));
            const dataRequest = this.inventoryService.childAdditionsList(this.deviceId, {
                query,
                withTotalPages: true,
                pageSize: dataSourceModifier.pagination.pageSize,
                currentPage: dataSourceModifier.pagination.currentPage
            });
            const filtererdSizeRequest = this.inventoryService
                .childAdditionsList(this.deviceId, {
                query,
                withTotalPages: true,
                pageSize: 1
            })
                .then(response => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.paging) === null || _a === void 0 ? void 0 : _a.totalPages; });
            const [dataResponse, size, filteredSize] = yield Promise.all([
                dataRequest,
                this.sizeRequest,
                filtererdSizeRequest
            ]);
            const { res, data, paging } = dataResponse;
            serverSideDataResult = {
                res,
                data,
                paging,
                filteredSize,
                size
            };
            return serverSideDataResult;
        });
    }
    trackByName(_index, column) {
        return column.name;
    }
}
ServicesDeviceTabComponent.ɵfac = function ServicesDeviceTabComponent_Factory(t) { return new (t || ServicesDeviceTabComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.DeviceGridService), ɵngcc0.ɵɵdirectiveInject(StatusOptionsService)); };
ServicesDeviceTabComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ServicesDeviceTabComponent, selectors: [["c8y-services-device-tab"]], decls: 7, vars: 14, consts: [[1, "content-fullpage"], [3, "title", "refresh", "actionControls", "pagination", "columns", "infiniteScroll", "serverSideDataCallback"], [1, "c8y-empty-state"], [4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [4, "ngIf", "ngIfElse"], ["noResults", ""], [1, "text-center"], ["c8yIcon", "c8y-tools", 1, "c8y-icon-duocolor"], ["translate", ""], ["c8yIcon", "search"], [3, "name"]], template: function ServicesDeviceTabComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-data-grid", 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵtemplate(4, ServicesDeviceTabComponent_ng_container_4_Template, 2, 0, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(5, ServicesDeviceTabComponent_ng_container_5_Template, 5, 4, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ServicesDeviceTabComponent_ng_container_6_Template, 2, 1, "ng-container", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 11, "Services"))("refresh", ctx.refresh$)("actionControls", ɵngcc0.ɵɵpureFunction0(13, _c1))("pagination", ctx.pagination)("columns", ctx.columns)("infiniteScroll", "auto")("serverSideDataCallback", ctx.serverSideDataCallback);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.sizeRequestDone);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.sizeRequestDone);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns)("ngForTrackBy", ctx.trackByName);
    } }, directives: [ɵngcc1.DataGridComponent, ɵngcc3.NgIf, ɵngcc3.NgForOf, ɵngcc1.LoadingComponent, ɵngcc1.IconDirective, ɵngcc1.C8yTranslateDirective, ɵngcc1.ColumnDirective], pipes: [ɵngcc1.C8yTranslatePipe, ɵngcc3.AsyncPipe], encapsulation: 2 });
ServicesDeviceTabComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: InventoryService },
    { type: DeviceGridService },
    { type: StatusOptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServicesDeviceTabComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-services-device-tab',
                template: "<div class=\"content-fullpage\">\n  <c8y-data-grid\n    [title]=\"'Services' | translate\"\n    [refresh]=\"refresh$\"\n    [actionControls]=\"[]\"\n    [pagination]=\"pagination\"\n    [columns]=\"columns\"\n    [infiniteScroll]=\"'auto'\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n  >\n    <div class=\"c8y-empty-state\">\n      <ng-container *ngIf=\"!sizeRequestDone\">\n        <c8y-loading></c8y-loading>\n      </ng-container>\n      <ng-container *ngIf=\"sizeRequestDone\">\n        <ng-container *ngIf=\"(sizeRequest | async) === 0; else noResults\">\n          <div class=\"text-center\">\n            <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-tools\"></h1>\n            <h3 translate>No services to display.</h3>\n          </div>\n        </ng-container>\n        <ng-template #noResults>\n          <h1 c8yIcon=\"search\"></h1>\n          <div>\n            <p>\n              <strong>{{ 'No results to display.' | translate }}</strong>\n            </p>\n            <small>{{ 'Refine your search terms or check your spelling.' | translate }}</small>\n          </div>\n        </ng-template>\n      </ng-container>\n    </div>\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n  </c8y-data-grid>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc2.ActivatedRoute }, { type: ɵngcc5.InventoryService }, { type: ɵngcc6.DeviceGridService }, { type: StatusOptionsService }]; }, null); })();

const SERVICE_FRAGMENT = 'c8y_Service';
class ServicesDeviceTabGuard {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
    }
    canActivate(route) {
        const contextData = get(route, 'data.contextData') || get(route, 'parent.data.contextData');
        return this.inventoryService
            .childAdditionsList(contextData, { query: `type eq ${SERVICE_FRAGMENT}`, pageSize: 1 })
            .then(result => { var _a; return !!((_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.length); });
    }
}
ServicesDeviceTabGuard.ɵfac = function ServicesDeviceTabGuard_Factory(t) { return new (t || ServicesDeviceTabGuard)(ɵngcc0.ɵɵinject(ɵngcc5.InventoryService)); };
ServicesDeviceTabGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ServicesDeviceTabGuard, factory: ServicesDeviceTabGuard.ɵfac });
ServicesDeviceTabGuard.ctorParameters = () => [
    { type: InventoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServicesDeviceTabGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc5.InventoryService }]; }, null); })();

class ServicesBreadcrumbFactory {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
    }
    get(route) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const { context, contextData } = route.snapshot.data;
            const { routeConfig } = route.snapshot;
            this.contextData = contextData || this.contextData;
            if ((context === ViewContext.Service || ((_a = routeConfig) === null || _a === void 0 ? void 0 : _a.context) === ViewContext.Service) &&
                !!this.contextData) {
                const serviceMO = (_b = (yield this.inventoryService.detail(this.contextData, { withParents: true }))) === null || _b === void 0 ? void 0 : _b.data;
                const breadcrumb = { items: [] };
                const breadcrumbItems = [];
                const device = (_d = (_c = serviceMO === null || serviceMO === void 0 ? void 0 : serviceMO.additionParents) === null || _c === void 0 ? void 0 : _c.references[0]) === null || _d === void 0 ? void 0 : _d.managedObject;
                if (device) {
                    breadcrumbItems.push({
                        label: device.name,
                        path: `/device/${device.id}`
                    });
                    breadcrumbItems.push({
                        label: gettext('Services'),
                        path: `/device/${device.id}/services`
                    });
                    breadcrumbItems.push({
                        label: serviceMO.name
                    });
                }
                breadcrumb.items = breadcrumbItems;
                return breadcrumb;
            }
        });
    }
}
ServicesBreadcrumbFactory.ɵfac = function ServicesBreadcrumbFactory_Factory(t) { return new (t || ServicesBreadcrumbFactory)(ɵngcc0.ɵɵinject(ɵngcc5.InventoryService)); };
ServicesBreadcrumbFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ServicesBreadcrumbFactory, factory: ServicesBreadcrumbFactory.ɵfac });
ServicesBreadcrumbFactory.ctorParameters = () => [
    { type: InventoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServicesBreadcrumbFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc5.InventoryService }]; }, null); })();

const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'services',
        component: ServicesDeviceTabComponent,
        label: gettext('Services'),
        icon: 'statistics',
        priority: 500,
        canActivate: [ServicesDeviceTabGuard]
    }
];
class ServicesDeviceTabModule {
}
ServicesDeviceTabModule.ɵfac = function ServicesDeviceTabModule_Factory(t) { return new (t || ServicesDeviceTabModule)(); };
ServicesDeviceTabModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ServicesDeviceTabModule });
ServicesDeviceTabModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ServicesDeviceTabGuard,
        ServicesBreadcrumbFactory,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        { provide: HOOK_BREADCRUMB, useClass: ServicesBreadcrumbFactory, multi: true }
    ], imports: [[CoreModule, RouterModule, TooltipModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServicesDeviceTabModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, RouterModule, TooltipModule],
                declarations: [
                    ServicesDeviceTabComponent,
                    LastUpdatedDateCellRendererComponent,
                    NameCellRendererComponent,
                    StatusCellRendererComponent
                ],
                providers: [
                    ServicesDeviceTabGuard,
                    ServicesBreadcrumbFactory,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    { provide: HOOK_BREADCRUMB, useClass: ServicesBreadcrumbFactory, multi: true }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ServicesDeviceTabModule, { declarations: function () { return [ServicesDeviceTabComponent, LastUpdatedDateCellRendererComponent, NameCellRendererComponent, StatusCellRendererComponent]; }, imports: function () { return [CoreModule, RouterModule, TooltipModule]; } }); })();

class ServicesModule {
}
ServicesModule.ɵfac = function ServicesModule_Factory(t) { return new (t || ServicesModule)(); };
ServicesModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ServicesModule });
ServicesModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CoreModule, ServicesDeviceTabModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServicesModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, ServicesDeviceTabModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ServicesModule, { imports: function () { return [CoreModule, ServicesDeviceTabModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { HOOK_SERVICE_STATUS, LastUpdatedDateCellRendererComponent, LastUpdatedDateGridColumn, NameCellRendererComponent, SERVICE_STATUS_OPTIONS, ServiceNameGridColumn, ServiceTypeGridColumn, ServicesDeviceTabComponent, ServicesDeviceTabGuard, ServicesDeviceTabModule, ServicesModule, StatusCellRendererComponent, StatusGridColumn, StatusOptionsService, ɵ0, ServicesDeviceTabModule as ɵa };

//# sourceMappingURL=c8y-ngx-components-services.js.map