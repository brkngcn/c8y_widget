import * as i0 from '@angular/core';
import { Injectable, Component, NgModule } from '@angular/core';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { __awaiter } from 'tslib';
import * as i5 from '@c8y/ngx-components';
import { gettext, OptionsService, TenantUiService, CoreModule, CommonModule } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { BehaviorSubject, Subject, of, forkJoin, throwError, defer, from } from 'rxjs';
import { some, uniq, cloneDeep } from 'lodash-es';
import * as i3 from '@ngx-translate/core';
import { TranslateService } from '@ngx-translate/core';
import { InventoryService, FetchClient, ApplicationService } from '@c8y/client';
import * as i1 from '@c8y/client';
import * as i2 from '@c8y/client';
import * as i4 from '@c8y/client';
import { map, catchError, switchMap, takeUntil, mergeMap, shareReplay } from 'rxjs/operators';
import { HOOK_DEVICE_REGISTRATION } from '@c8y/ngx-components/register-device';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from 'ngx-bootstrap/modal';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@angular/cdk/stepper';
import * as ɵngcc7 from '@ngx-formly/core';

function ActilityDeviceRegistrationComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵelement(2, "c8y-loading");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementEnd();
} }
function ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_c8y_operation_result_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 19);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, "Device registered"));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
const _c0 = function () { return { cancel: true, next: true }; };
const _c1 = function () { return { custom: true }; };
function ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-stepper", 8);
    ɵngcc0.ɵɵelementStart(1, "cdk-step", 9);
    ɵngcc0.ɵɵelementStart(2, "div", 10);
    ɵngcc0.ɵɵelementStart(3, "p", 11);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "formly-form", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-stepper-buttons", 13);
    ɵngcc0.ɵɵlistener("onNext", function ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_Template_c8y_stepper_buttons_onNext_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.register($event); })("onCancel", function ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_Template_c8y_stepper_buttons_onCancel_7_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.bsModalRef.hide(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "cdk-step", 14);
    ɵngcc0.ɵɵtemplate(9, ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_div_9_Template, 2, 0, "div", 15);
    ɵngcc0.ɵɵelementStart(10, "div", 16);
    ɵngcc0.ɵɵtemplate(11, ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_c8y_operation_result_11_Template, 2, 5, "c8y-operation-result", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "c8y-stepper-buttons", 18);
    ɵngcc0.ɵɵlistener("onCustom", function ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_Template_c8y_stepper_buttons_onCustom_12_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.bsModalRef.hide(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("hideStepProgress", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("stepControl", ctx_r5.form);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 14, "Register a single Actility device"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("form", ctx_r5.form)("fields", ctx_r5.fields)("model", ctx_r5.model);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("labels", ctx_r5.registrationStepLabels)("showButtons", ɵngcc0.ɵɵpureFunction0(16, _c0))("pending", ctx_r5.state === "registrationPending")("disabled", !(ctx_r5.form == null ? null : ctx_r5.form.valid));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.state === "registrationPending");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.state === "registrationSuccess");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("showButtons", ɵngcc0.ɵɵpureFunction0(17, _c1))("labels", ctx_r5.finalStepLabels);
} }
function ActilityDeviceRegistrationComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ActilityDeviceRegistrationComponent_ng_template_7_c8y_stepper_0_Template, 13, 18, "c8y-stepper", 7);
    ɵngcc0.ɵɵpipe(1, "async");
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(10);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r2.errorMessages$).length === 0)("ngIfElse", _r3);
} }
function ActilityDeviceRegistrationComponent_ng_template_9_c8y_operation_result_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-operation-result", 24);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(1, 3, "Failed to register"));
    ɵngcc0.ɵɵproperty("size", 84)("vertical", true);
} }
const _c2 = function (a0, a1) { return { "text-center": a0, "alert alert-danger": a1 }; };
function ActilityDeviceRegistrationComponent_ng_template_9_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelement(1, "span", 26);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const msg_r14 = ctx.$implicit;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r13.state === "registrationError", ctx_r13.state === "loadError"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ɵngcc0.ɵɵpipeBind1(2, 2, msg_r14), ɵngcc0.ɵɵsanitizeHtml);
} }
function ActilityDeviceRegistrationComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtemplate(1, ActilityDeviceRegistrationComponent_ng_template_9_c8y_operation_result_1_Template, 2, 5, "c8y-operation-result", 20);
    ɵngcc0.ɵɵtemplate(2, ActilityDeviceRegistrationComponent_ng_template_9_div_2_Template, 3, 7, "div", 21);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 22);
    ɵngcc0.ɵɵelementStart(5, "button", 23);
    ɵngcc0.ɵɵlistener("click", function ActilityDeviceRegistrationComponent_ng_template_9_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.bsModalRef.hide(); });
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7, " Close ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.state === "registrationError");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(3, 3, ctx_r4.errorMessages$));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 5, "Close"));
} }
var ErrorName;
(function (ErrorName) {
    ErrorName["NoConnectivityPlansError"] = "NoConnectivityPlansError";
    ErrorName["NoFreeSlotsInConnectivityPlansError"] = "NoFreeSlotsInConnectivityPlansError";
    ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
    ErrorName["NoDeviceProfilesError"] = "NoDeviceProfilesError";
    ErrorName["DeviceProfilesFetchError"] = "DeviceProfilesFetchError";
    ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
    ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
    ErrorName["RegistrationError"] = "RegistrationError";
})(ErrorName || (ErrorName = {}));
class ActilityDeviceRegistrationService {
    constructor(inventoryService, client, translateService, applicationService, optionsService) {
        this.inventoryService = inventoryService;
        this.client = client;
        this.translateService = translateService;
        this.applicationService = applicationService;
        this.optionsService = optionsService;
        this.baseUrl = '/service/actility';
        this.registrationUrl = `${this.baseUrl}/newDeviceRequest`;
        this.connectivityPlansUrl = `${this.baseUrl}/connectivityPlans`;
        this.deviceProfilesUrl = `${this.baseUrl}/deviceProfiles`;
        this.headers = {
            'Content-Type': 'application/json'
        };
    }
    getConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.headers
            };
            const res = yield this.client.fetch(`${this.baseUrl}/lns-connection`, options);
            const data = yield res.json();
            if (res.status === 200) {
                if (data.length === 0) {
                    yield this.throwNoConnectivitySettingsError();
                }
            }
            else {
                yield this.throwNoConnectivitySettingsError();
            }
            return { res, data };
        });
    }
    /**
     * Gets connectivity plans from LoRa platform.
     * @param connectionName The name of connection for which connectivity plans will be retrieved
     * @returns The result list with connectivity plans, or throws an error with exception.
     */
    getConnectivityPlans(connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.headers,
                params: {
                    actilityConnectionName: connectionName
                }
            };
            const res = yield this.client.fetch(this.connectivityPlansUrl, options);
            const data = yield res.json();
            if (res.status === 200) {
                if (data.length === 0) {
                    this.throwNoConnectivityPlansError();
                }
                else {
                    if (!this.hasAvailableConnections(data)) {
                        this.throwNoFreeSlotsInConnectivityPlansError();
                    }
                }
            }
            else {
                yield this.throwNoConnectivitySettingsError();
            }
            return { res, data };
        });
    }
    /**
     * Gets the device profiles from LoRa platform.
     * @param connectionName The name of connection for which device profiles will be retrieved
     * @returns The result list with device profiles, or throws an error with exception.
     */
    getDeviceProfiles(connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.headers,
                params: {
                    actilityConnectionName: connectionName
                }
            };
            const res = yield this.client.fetch(this.deviceProfilesUrl, options);
            const data = yield res.json();
            if (res.status === 200) {
                if (data.length === 0) {
                    this.throwNoDeviceProfilesError();
                }
            }
            else {
                this.throwDeviceProfilesFetchError();
            }
            return { res, data };
        });
    }
    /**
     * Gets the device protocols
     */
    getDeviceProtocols() {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                pageSize: 20,
                withTotalPages: true
            };
            const query = {
                __filter: {
                    __and: [
                        { __has: 'c8y_IsDeviceType' },
                        {
                            type: { __in: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'] }
                        }
                    ]
                },
                __orderby: [{ name: 1 }]
            };
            const { res, data } = yield this.inventoryService.listQuery(query, filters);
            if (res.status === 200) {
                if (data.length === 0) {
                    this.throwNoDeviceProtocolsError();
                }
            }
            else {
                this.throwDeviceProtocolsFetchError();
            }
            return { res, data };
        });
    }
    /**
     * Creates device registration
     */
    register(registration) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify(registration)
            };
            const res = yield this.client.fetch(this.registrationUrl, options);
            const data = yield res.json();
            if (res.status !== 201) {
                this.throwRegistrationError(data);
            }
            return { res, data };
        });
    }
    /**
     * checks if used connections is less then granted connections
     */
    hasAvailableConnections(connectivityPlans) {
        return some(connectivityPlans, plan => parseInt(plan.grantedConnections, 10) > parseInt(plan.usedConnections, 10));
    }
    throwNoConnectivitySettingsError() {
        return __awaiter(this, void 0, void 0, function* () {
            const error = new Error();
            error.name = ErrorName.NoConnectivitySettingsError;
            if ((yield this.applicationService.isAvailable('administration')).data) {
                error.message = this.translateService.instant(gettext(`Could not get connectivity plans from the LoRa platform. Verify the ThingPark credentials in the Administration app under <a href="{{ link }}">Settings</a>.`), {
                    link: '/apps/administration/index.html#/connectivitySettings/actility_lora_provider_settings'
                });
            }
            else {
                error.message = gettext('Could not get connectivity plans from the LoRa platform. Please contact the administrator.');
            }
            throw error;
        });
    }
    throwNoConnectivityPlansError() {
        const error = new Error();
        error.name = ErrorName.NoConnectivityPlansError;
        error.message = gettext('No connectivity plans found. New connectivity plans must be created via the LoRa platform.');
        throw error;
    }
    throwNoFreeSlotsInConnectivityPlansError() {
        const companyName = this.optionsService.get('companyName', 'Cumulocity IoT');
        const error = new Error();
        error.name = ErrorName.NoFreeSlotsInConnectivityPlansError;
        error.message = this.translateService.instant(gettext(`No connectivity plans with free slots available. Please contact ThingPark on the device quota limits for your connectivity plans or remove unused devices from ThingPark and retry registering the device in the {{companyName}} platform.`), {
            companyName
        });
        throw error;
    }
    throwDeviceProfilesFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProfilesFetchError;
        error.message = gettext('Could not load device profiles from the LoRa platform.');
        throw error;
    }
    throwNoDeviceProfilesError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProfilesError;
        error.message = gettext('No device profiles found. Create a new device profile via the LoRa platform.');
        throw error;
    }
    throwDeviceProtocolsFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProtocolsFetchError;
        error.message = gettext('Could not load device protocols.');
        throw error;
    }
    throwNoDeviceProtocolsError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProtocolsError;
        error.message = this.translateService.instant(gettext(`No device protocols configured. Create a LoRa device protocol in <a href="{{ link }}">Device protocols</a>.`), {
            link: '/apps/devicemanagement/#/deviceprotocols'
        });
        throw error;
    }
    throwRegistrationError(data) {
        const error = new Error();
        error.name = ErrorName.RegistrationError;
        error.message = data.message;
        throw error;
    }
}
ActilityDeviceRegistrationService.ɵfac = function ActilityDeviceRegistrationService_Factory(t) { return new (t || ActilityDeviceRegistrationService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.FetchClient), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc3.OptionsService)); };
ActilityDeviceRegistrationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActilityDeviceRegistrationService_Factory() { return new ActilityDeviceRegistrationService(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.FetchClient), i0.ɵɵinject(i3.TranslateService), i0.ɵɵinject(i4.ApplicationService), i0.ɵɵinject(i5.OptionsService)); }, token: ActilityDeviceRegistrationService, providedIn: "root" });
ActilityDeviceRegistrationService.ctorParameters = () => [
    { type: InventoryService },
    { type: FetchClient },
    { type: TranslateService },
    { type: ApplicationService },
    { type: OptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityDeviceRegistrationService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.FetchClient }, { type: ɵngcc2.TranslateService }, { type: ɵngcc1.ApplicationService }, { type: ɵngcc3.OptionsService }]; }, null); })();

class ActilityDeviceRegistrationComponent {
    constructor(bsModalRef, registrationService) {
        this.bsModalRef = bsModalRef;
        this.registrationService = registrationService;
        this.registrationStepLabels = {
            next: gettext('Register')
        };
        this.finalStepLabels = {
            custom: gettext('Close')
        };
        this.state = 'loadPending';
        this.errors$ = new BehaviorSubject([]);
        this.errorMessages$ = this.errors$.pipe(map(errors => errors.map(error => error.message)), map(messages => uniq(messages)));
        this.connections$ = this.getConnections$();
        this.deviceProtocols$ = this.getDeviceProtocols$();
        this.unsubscribe$ = new Subject();
        this.load$ = this.connections$.pipe(catchError((error) => of(error)), switchMap(connections => {
            if (connections instanceof Error &&
                connections.name === ErrorName.NoConnectivitySettingsError) {
                return of([connections]);
            }
            return forkJoin([
                of(connections),
                this.deviceProtocols$.pipe(catchError((error) => of(error)))
            ]);
        }), map(results => results.filter(result => result instanceof Error)), switchMap(errors => (errors.length === 0 ? of([]) : throwError(errors))));
        this.form = new FormGroup({});
        this.model = {};
        // Formly schema definition to render actility device registration form
        this.fields = [
            {
                key: 'connection',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Connection'),
                    required: true,
                    c8yForOptions: this.connections$,
                    displayProperty: 'name',
                    valueProperties: ['name']
                }
            },
            {
                key: 'deviceProfile',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Device profile'),
                    required: true,
                    displayProperty: 'name',
                    placeholder: 'IWM-LR3',
                    valueProperties: ['id', 'name', 'typeMAC']
                },
                hooks: {
                    onInit: field => {
                        const connectionControl = field.form.get('connection');
                        connectionControl.valueChanges
                            .pipe(takeUntil(this.unsubscribe$), mergeMap(() => this.getDeviceProfiles$(this.form.get('connection').value.name)))
                            .subscribe(profiles => {
                            field.templateOptions.c8yForOptions = of(profiles);
                            field.formControl.setValue(null);
                        }, error => {
                            field.form.controls.deviceProfile.setErrors({ deviceProfile: true });
                            field.validators.deviceProfile.message = error.message;
                        });
                    }
                },
                validators: {
                    deviceProfile: {
                        expression: (control) => {
                            return control.status === 'VALID';
                        },
                        message: () => ''
                    }
                }
            },
            {
                key: 'deviceType',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Device protocol'),
                    required: true,
                    c8yForOptions: this.deviceProtocols$,
                    displayProperty: 'name',
                    valueProperties: ['id', 'name']
                }
            },
            {
                key: 'devEUI',
                type: 'input',
                templateOptions: {
                    placeholder: '0018A20000000004',
                    label: gettext('Device EUI'),
                    required: true,
                    pattern: '^([a-fA-F0-9]{16})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 16 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'applicationEUI',
                type: 'input',
                templateOptions: {
                    placeholder: '70B3D53260000003',
                    label: gettext('Application EUI'),
                    required: true,
                    pattern: '^([a-fA-F0-9]{16})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 16 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'applicationKey',
                type: 'input',
                templateOptions: {
                    label: gettext('Application key'),
                    placeholder: '258DB54023EA74F0D55085F7351737D0',
                    required: true,
                    pattern: '^([a-fA-F0-9]{32})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 32 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'connectivityPlan',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Connectivity plan'),
                    description: gettext('Only connectivity plans with free slots are displayed'),
                    required: true,
                    placeholder: 'Dev-ope testing CP',
                    displayProperty: 'name',
                    valueProperties: ['id', 'ref', 'name', 'grantedConnections', 'usedConnections']
                },
                hooks: {
                    onInit: field => {
                        const connectionControl = field.form.get('connection');
                        connectionControl.valueChanges
                            .pipe(takeUntil(this.unsubscribe$), mergeMap(() => this.getConnectivityPlans$(this.form.get('connection').value.name)))
                            .subscribe(profiles => {
                            field.templateOptions.c8yForOptions = of(profiles);
                            field.formControl.setValue(null);
                        }, error => {
                            field.form.controls.connectivityPlan.setErrors({ connectivityPlan: true });
                            field.validators.connectivityPlan.message = error.message;
                        });
                    }
                },
                validators: {
                    connectivityPlan: {
                        expression: (control) => {
                            return control.status === 'VALID';
                        },
                        message: () => ''
                    }
                }
            }
        ];
        this.load$.subscribe(() => {
            this.state = 'loadSuccess';
        }, errors => {
            this.state = 'loadError';
            this.errors$.next(errors);
        });
    }
    getConnectivityPlans$(name) {
        return defer(() => from(this.registrationService.getConnectivityPlans(name))).pipe(shareReplay(1));
    }
    getDeviceProfiles$(name) {
        return defer(() => from(this.registrationService.getDeviceProfiles(name))).pipe(shareReplay(1));
    }
    getDeviceProtocols$() {
        return defer(() => from(this.registrationService.getDeviceProtocols())).pipe(shareReplay(1));
    }
    getConnections$() {
        return defer(() => from(this.registrationService.getConnections())).pipe(shareReplay(1));
    }
    register(event) {
        return __awaiter(this, void 0, void 0, function* () {
            event.stepper.next();
            this.state = 'registrationPending';
            try {
                const actilityDevice = this.getActilityDeviceToSend();
                yield this.registrationService.register(actilityDevice);
                this.state = 'registrationSuccess';
            }
            catch (error) {
                this.state = 'registrationError';
                this.errors$.next([error]);
            }
        });
    }
    getActilityDeviceToSend() {
        const actilityDevice = cloneDeep(this.model);
        actilityDevice.lnsConnectionName = this.model.connection.name;
        delete actilityDevice.connection;
        return actilityDevice;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
ActilityDeviceRegistrationComponent.ɵfac = function ActilityDeviceRegistrationComponent_Factory(t) { return new (t || ActilityDeviceRegistrationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ActilityDeviceRegistrationService)); };
ActilityDeviceRegistrationComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActilityDeviceRegistrationComponent, selectors: [["c8y-actility-registration"]], decls: 11, vars: 8, consts: [[3, "headerClasses", "customFooter"], ["c8y-modal-title", ""], [3, "c8yIcon"], [4, "ngIf", "ngIfElse"], ["registrationForm", ""], ["errorMessagesPresent", ""], [1, "p-16", "text-center"], ["linear", "", 3, "hideStepProgress", 4, "ngIf", "ngIfElse"], ["linear", "", 3, "hideStepProgress"], [3, "stepControl"], [1, "p-b-16"], [1, "p-l-24", "p-r-24", "p-t-16", "p-b-16", "m-b-0", "sticky-top", "separator-bottom", "lead", "text-center", "bg-component"], [1, "formly-group-array-cols", "d-block", "p-l-24", "p-r-24", 3, "form", "fields", "model"], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "labels", "showButtons", "pending", "disabled", "onNext", "onCancel"], ["state", "final"], ["class", "p-16 text-center", 4, "ngIf"], [1, "m-24"], ["type", "success", "class", "lead m-b-0", 3, "text", "size", "vertical", 4, "ngIf"], [1, "sticky-bottom", "d-block", "p-t-16", "p-b-16", "separator-top", "bg-white", 3, "showButtons", "labels", "onCustom"], ["type", "success", 1, "lead", "m-b-0", 3, "text", "size", "vertical"], ["type", "error", "class", "lead", 3, "text", "size", "vertical", 4, "ngIf"], ["class", "m-b-8", 3, "ngClass", 4, "ngFor", "ngForOf"], [1, "modal-footer"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["type", "error", 1, "lead", 3, "text", "size", "vertical"], [1, "m-b-8", 3, "ngClass"], [3, "innerHTML"]], template: function ActilityDeviceRegistrationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵelementContainerStart(1, 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "h4");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(6, ActilityDeviceRegistrationComponent_ng_container_6_Template, 3, 0, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(7, ActilityDeviceRegistrationComponent_ng_template_7_Template, 2, 4, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, ActilityDeviceRegistrationComponent_ng_template_9_Template, 8, 7, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵproperty("headerClasses", "dialog-header")("customFooter", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "c8y-device-connect");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, "Actility LoRa registration"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.state === "loadPending")("ngIfElse", _r1);
    } }, directives: [ɵngcc3.ModalComponent, ɵngcc3.IconDirective, ɵngcc5.NgIf, ɵngcc3.LoadingComponent, ɵngcc3.C8yStepper, ɵngcc6.CdkStep, ɵngcc7.FormlyForm, ɵngcc3.C8yStepperButtons, ɵngcc3.OperationResultComponent, ɵngcc5.NgForOf, ɵngcc3.C8yTranslateDirective, ɵngcc5.NgClass], pipes: [ɵngcc3.C8yTranslatePipe, ɵngcc5.AsyncPipe], encapsulation: 2 });
ActilityDeviceRegistrationComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: ActilityDeviceRegistrationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityDeviceRegistrationComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-actility-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Actility LoRa registration' | translate }}</h4>\n  </ng-container>\n\n  <ng-container *ngIf=\"state === 'loadPending'; else registrationForm\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </ng-container>\n\n  <!--Formly schema is rendered-->\n  <ng-template #registrationForm>\n    <c8y-stepper\n      [hideStepProgress]=\"true\"\n      linear\n      *ngIf=\"(errorMessages$ | async).length === 0; else errorMessagesPresent\"\n    >\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"p-b-16\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              sticky-top\n              separator-bottom\n              lead\n              text-center\n              bg-component\n            \"\n          >\n          {{ 'Register a single Actility device' | translate }}\n          </p>\n          <formly-form\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            class=\"formly-group-array-cols d-block p-l-24 p-r-24\"\n          ></formly-form>\n        </div>\n\n        <c8y-stepper-buttons\n          [labels]=\"registrationStepLabels\"\n          (onNext)=\"register($event)\"\n          (onCancel)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [pending]=\"state === 'registrationPending'\"\n          [disabled]=\"!form?.valid\"\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n      <cdk-step state=\"final\">\n        <!--success scenario-->\n        <div class=\"p-16 text-center\" *ngIf=\"state === 'registrationPending'\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <div class=\"m-24\">\n          <c8y-operation-result\n            *ngIf=\"state === 'registrationSuccess'\"\n            text=\"{{ 'Device registered' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead m-b-0\"\n          ></c8y-operation-result>\n        </div>\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          (onCustom)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ custom: true }\"\n          [labels]=\"finalStepLabels\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </c8y-stepper>\n  </ng-template>\n\n  <!--Failure scenario-->\n  <ng-template #errorMessagesPresent>\n    <div class=\"m-24\">\n      <c8y-operation-result\n        *ngIf=\"state === 'registrationError'\"\n        text=\"{{ 'Failed to register' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n      <div\n        *ngFor=\"let msg of errorMessages$ | async\"\n        class=\"m-b-8\"\n        [ngClass]=\"{\n          'text-center': state === 'registrationError',\n          'alert alert-danger': state === 'loadError'\n        }\"\n      >\n        <span [innerHTML]=\"msg | translate\"></span>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Close' | translate }}\"\n        (click)=\"bsModalRef.hide()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        translate\n      >\n        Close\n      </button>\n    </div>\n  </ng-template>\n</c8y-modal>"
            }]
    }], function () { return [{ type: ɵngcc4.BsModalRef }, { type: ActilityDeviceRegistrationService }]; }, null); })();

class ActilityDeviceRegistrationButtonComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    open() {
        this.modalService.show(ActilityDeviceRegistrationComponent, {
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
ActilityDeviceRegistrationButtonComponent.ɵfac = function ActilityDeviceRegistrationButtonComponent_Factory(t) { return new (t || ActilityDeviceRegistrationButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalService)); };
ActilityDeviceRegistrationButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActilityDeviceRegistrationButtonComponent, selectors: [["c8y-actility-registration-button"]], decls: 4, vars: 3, consts: [[3, "click"], ["c8yIcon", "c8y-device-connect"]], template: function ActilityDeviceRegistrationButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function ActilityDeviceRegistrationButtonComponent_Template_button_click_0_listener() { return ctx.open(); });
        ɵngcc0.ɵɵelement(1, "i", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "Actility LoRa"), "\n");
    } }, directives: [ɵngcc3.IconDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
ActilityDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityDeviceRegistrationButtonComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-actility-registration-button',
                template: "<button (click)=\"open()\">\n  <i c8yIcon=\"c8y-device-connect\"></i>\n  {{ 'Actility LoRa' | translate }}\n</button>\n"
            }]
    }], function () { return [{ type: ɵngcc4.BsModalService }]; }, null); })();

class ActilityDeviceRegistrationFactory {
    constructor(tenantService) {
        this.tenantService = tenantService;
    }
    get() {
        const actions = [];
        if (this.tenantService.isMicroserviceSubscribedInCurrentTenant('actility')) {
            actions.push({
                template: ActilityDeviceRegistrationButtonComponent,
                priority: 99,
                category: 'single'
            });
        }
        return actions;
    }
}
ActilityDeviceRegistrationFactory.ɵfac = function ActilityDeviceRegistrationFactory_Factory(t) { return new (t || ActilityDeviceRegistrationFactory)(ɵngcc0.ɵɵinject(ɵngcc3.TenantUiService)); };
ActilityDeviceRegistrationFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActilityDeviceRegistrationFactory_Factory() { return new ActilityDeviceRegistrationFactory(i0.ɵɵinject(i5.TenantUiService)); }, token: ActilityDeviceRegistrationFactory, providedIn: "root" });
ActilityDeviceRegistrationFactory.ctorParameters = () => [
    { type: TenantUiService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityDeviceRegistrationFactory, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc3.TenantUiService }]; }, null); })();

class ActilityDeviceRegistrationModule {
}
ActilityDeviceRegistrationModule.ɵfac = function ActilityDeviceRegistrationModule_Factory(t) { return new (t || ActilityDeviceRegistrationModule)(); };
ActilityDeviceRegistrationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ActilityDeviceRegistrationModule });
ActilityDeviceRegistrationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ActilityDeviceRegistrationService,
        {
            provide: HOOK_DEVICE_REGISTRATION,
            useClass: ActilityDeviceRegistrationFactory,
            multi: true
        }
    ], imports: [[CoreModule, CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityDeviceRegistrationModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, CommonModule],
                declarations: [ActilityDeviceRegistrationButtonComponent, ActilityDeviceRegistrationComponent],
                providers: [
                    ActilityDeviceRegistrationService,
                    {
                        provide: HOOK_DEVICE_REGISTRATION,
                        useClass: ActilityDeviceRegistrationFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ActilityDeviceRegistrationModule, { declarations: function () { return [ActilityDeviceRegistrationButtonComponent, ActilityDeviceRegistrationComponent]; }, imports: function () { return [CoreModule, CommonModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ActilityDeviceRegistrationButtonComponent, ActilityDeviceRegistrationComponent, ActilityDeviceRegistrationFactory, ActilityDeviceRegistrationModule, ActilityDeviceRegistrationService as ɵa };

//# sourceMappingURL=c8y-ngx-components-actility-device-registration.js.map