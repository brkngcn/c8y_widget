import * as i0 from '@angular/core';
import { Injectable, Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, Input, InjectionToken, Injector, NgModule } from '@angular/core';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { __decorate, __awaiter } from 'tslib';
import * as i3 from '@c8y/ngx-components';
import { gettext, AlertService, TenantUiService, memoize, Status, DeviceBootstrapRealtimeService, ModalService, OptionsService, NavigatorNode, Permissions, AppStateService, C8yJSONSchema, C8yStepper, fromTriggerOnce, CommonModule, CoreModule, StepperModule, DynamicFormsModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { Subject, BehaviorSubject, from, forkJoin, defer } from 'rxjs';
import { takeUntil, finalize, mergeMap, takeLast, map, filter, switchMap, tap, shareReplay, startWith } from 'rxjs/operators';
import { DeviceRegistrationStatus, DeviceRegistrationService, TenantService, InventoryService, DeviceRegistrationSecurityMode, ApplicationType, ApplicationService, FetchClient, DeviceRegistrationBulkService } from '@c8y/client';
import * as i1 from '@angular/router';
import { Router, RouterModule } from '@angular/router';
import { get, pick, sortBy, flatMap } from 'lodash-es';
import * as i2 from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { STEP_STATE } from '@angular/cdk/stepper';
import { saveAs } from 'file-saver';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';

class RegisterDeviceService {
    constructor(router, deviceRegService, alertService) {
        this.router = router;
        this.deviceRegService = deviceRegService;
        this.alertService = alertService;
        this._loading = new Subject();
        this._limit = new BehaviorSubject({ isReached: false });
        this._deviceRegistrationRequests = new BehaviorSubject({ data: [] });
        this.deviceRegistrationRequests$ = this._deviceRegistrationRequests.asObservable();
        this.loading$ = this._loading.asObservable();
        this.limit$ = this._limit.asObservable();
        this.deviceRegUrl = '/deviceregistration';
        this.endSubscriptions = new Subject();
    }
    isDeviceRegistration() {
        return get(this.router, 'url') === this.deviceRegUrl;
    }
    internalListUpdate(deviceRequests, pagingObject) {
        let { paging, data } = this._deviceRegistrationRequests.getValue();
        if (pagingObject) {
            paging = pagingObject;
        }
        data = [...data, ...deviceRequests];
        this._deviceRegistrationRequests.next({ data, paging });
    }
    onDeviceBootstrap(bsData) {
        const { id, status } = bsData;
        this._deviceRegistrationRequests.next({
            data: this.updateStatusById(id, status)
        });
    }
    list(pageSize = 100) {
        this._loading.next(true);
        this._deviceRegistrationRequests.next({ data: [], paging: undefined });
        from(this.deviceRegService.list({ pageSize, withTotalPages: true }))
            .pipe(takeUntil(this.endSubscriptions), finalize(() => this.limit()))
            .subscribe(res => {
            const { data, paging } = res;
            this.internalListUpdate(data, paging);
            this._loading.next(false);
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    createMultiple(newDeviceRequests) {
        if (newDeviceRequests && newDeviceRequests.length > 0) {
            this._loading.next(true);
            const newRequests$ = newDeviceRequests.map(element => {
                return from(this.deviceRegService.create(element)
                    .catch((err) => ({ res: err.res, data: Object.assign(Object.assign({}, err.data), { id: element.id }) })));
            });
            const groupedRequests = {
                success: [],
                failed: []
            };
            return forkJoin(newRequests$)
                .pipe(mergeMap(resp => resp.map(el => {
                el.res.ok ? groupedRequests.success.push(el.data) : groupedRequests.failed.push(el.data);
                return groupedRequests;
            })), takeLast(1), finalize(() => {
                this.internalListUpdate(groupedRequests.success);
                this._loading.next(false);
            }));
        }
    }
    remove(id) {
        this._loading.next(true);
        from(this.deviceRegService.delete(id))
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(res => {
            this._deviceRegistrationRequests.next({ data: this.removeDeviceRegistrationRequestById(id) });
            this._loading.next(false);
            this.alertService.success(gettext('Device registration cancelled.'));
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    accept(request) {
        this._loading.next(true);
        const payload = pick(request, ['id', 'securityToken']);
        from(this.deviceRegService.accept(payload))
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(res => {
            this._deviceRegistrationRequests.next({ data: this.updateStatusById(payload.id, DeviceRegistrationStatus.ACCEPTED) });
            this.limit();
            this._loading.next(false);
            this.alertService.success(gettext('Device registration accepted.'));
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    acceptAll() {
        const acceptedDeviceRequests = [];
        const failedDeviceRequests = [];
        this._loading.next(true);
        from(this.deviceRegService.acceptAll())
            .pipe(takeUntil(this.endSubscriptions), map(({ data }) => {
            data.map(deviceRegistrationRequest => {
                if (deviceRegistrationRequest.successful) {
                    acceptedDeviceRequests.push(deviceRegistrationRequest);
                    this.updateStatusById(deviceRegistrationRequest.id, DeviceRegistrationStatus.ACCEPTED);
                }
                else {
                    failedDeviceRequests.push(deviceRegistrationRequest);
                }
            });
            return data;
        }), finalize(() => {
            // update rendered list with successful accepted device registrations
            // see: this.updateStatusById(...)
            this.internalListUpdate([]);
            this.limit();
            this._loading.next(false);
            if (failedDeviceRequests.length > 0) {
                this.alertService.warning(gettext('Could not accept all pending registration requests.'), JSON.stringify({
                    failedDeviceRequests,
                    acceptedDeviceRequests
                }, undefined, 2));
            }
            else {
                this.alertService.success(gettext('Accepted all pending registration requests.'));
            }
        })).subscribe(res => {
            // empty by design
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    limit() {
        from(this.deviceRegService.limit())
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(res => this._limit.next(res.data), err => this.alertService.addServerFailure(err));
    }
    getRequestByStatus(status) {
        return this._deviceRegistrationRequests.getValue().data.filter(req => req.status === status);
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    updateStatusById(id, status) {
        const items = this._deviceRegistrationRequests.getValue().data;
        const matchingElementIndex = items.findIndex(element => element.id === id);
        if (matchingElementIndex >= 0) {
            items[matchingElementIndex].status = status;
        }
        return items;
    }
    removeDeviceRegistrationRequestById(id) {
        const items = this._deviceRegistrationRequests.getValue().data;
        const matchingElementIndex = items.findIndex(element => element.id === id);
        if (matchingElementIndex >= 0) {
            items.splice(matchingElementIndex, 1);
        }
        this._loading.next(false);
        return items;
    }
}
RegisterDeviceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RegisterDeviceService_Factory() { return new RegisterDeviceService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DeviceRegistrationService), i0.ɵɵinject(i3.AlertService)); }, token: RegisterDeviceService, providedIn: "root" });
RegisterDeviceService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RegisterDeviceService.ctorParameters = () => [
    { type: Router },
    { type: DeviceRegistrationService },
    { type: AlertService }
];

class GeneralDeviceRegistrationComponent {
    constructor(tenantUIService, tenantService, registerDeviceService, inventoryService, cd, bsModalRef) {
        this.tenantUIService = tenantUIService;
        this.tenantService = tenantService;
        this.registerDeviceService = registerDeviceService;
        this.inventoryService = inventoryService;
        this.cd = cd;
        this.bsModalRef = bsModalRef;
        this.MANAGEMENT = 'management';
        this.FILTER = {
            withTotalPages: true,
            pageSize: 25
        };
        this.form = new FormGroup({});
        this.model = {
            devicesToCreate: [{}]
        };
        this.options = {
            formState: {
                canLoadTenants: true,
            }
        };
        this.success = [];
        this.failed = [];
        this.fields = [
            {
                type: 'array',
                key: 'devicesToCreate',
                templateOptions: {
                    addText: gettext('Add device'),
                    addTextDataCy: 'add-device'
                },
                fieldArray: {
                    fieldGroup: [{
                            key: 'id',
                            type: 'string',
                            focus: true,
                            templateOptions: {
                                placeholder: '0123ab32fcd',
                                label: gettext('Device ID'),
                                required: true
                            },
                            validators: {
                                unique: {
                                    expression: (control) => {
                                        const found = control.root.get('devicesToCreate').value.filter(el => el.id === control.value);
                                        return found.length === 0;
                                    },
                                    message: () => gettext('Device ID duplicates are not allowed'),
                                },
                            },
                        },
                        {
                            key: 'tenant',
                            type: 'typeahead',
                            hideExpression: (model, formState, field) => {
                                if (!(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants)) {
                                    field.formControl.setValue(null);
                                }
                                return !(formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) || false;
                            },
                            defaultValue: { id: this.MANAGEMENT },
                            templateOptions: {
                                label: gettext('Add to tenant'),
                                required: true,
                                c8yForOptions: this.canLoadTenants$().pipe(filter(canLoad => canLoad), switchMap(() => this.getTenants$())),
                                container: 'body',
                                displayProperty: 'id',
                                valueProperties: ['id']
                            },
                            hooks: {
                                onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {
                                    this.options.formState.canLoadTenants = canLoad;
                                    this.cd.detectChanges();
                                }))
                            }
                        },
                        {
                            key: 'group',
                            type: 'typeahead',
                            expressionProperties: {
                                'templateOptions.disabled': (model, formState, field) => {
                                    var _a, _b, _c;
                                    if (formState === null || formState === void 0 ? void 0 : formState.canLoadTenants) {
                                        if (((_a = model === null || model === void 0 ? void 0 : model.tenant) === null || _a === void 0 ? void 0 : _a.id) !== this.MANAGEMENT) {
                                            field.formControl.setValue(null);
                                        }
                                        return !(((_b = model === null || model === void 0 ? void 0 : model.tenant) === null || _b === void 0 ? void 0 : _b.id) === this.MANAGEMENT);
                                    }
                                    (_c = field === null || field === void 0 ? void 0 : field.templateOptions) === null || _c === void 0 ? true : delete _c.description;
                                    return false;
                                }
                            },
                            templateOptions: {
                                disabled: false,
                                label: gettext('Add to group'),
                                description: gettext('You can add device to specific group for management tenant only.'),
                                container: 'body',
                                displayProperty: 'name',
                                valueProperties: ['id'],
                                c8yForOptions: this.getGroups$()
                            },
                            hooks: {
                                onInit: field => this.canLoadTenants$().pipe(tap(canLoad => {
                                    this.options.formState.canLoadTenants = canLoad;
                                    this.cd.detectChanges();
                                }))
                            }
                        }]
                }
            }
        ];
        this.destroy$ = new Subject();
        this.lastCreatedDevices = [];
        this.isLoading$ = this.registerDeviceService.loading$;
    }
    ngAfterViewInit() {
        this.cd.detectChanges();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    create(eventObject) {
        var _a, _b;
        if (((_b = (_a = this.model) === null || _a === void 0 ? void 0 : _a.devicesToCreate) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            this.lastCreatedDevices = [...this.model.devicesToCreate];
            const dataToSend = this.model.devicesToCreate.map((el) => {
                const { id, tenant, group } = el;
                let data = { id };
                if (tenant === null || tenant === void 0 ? void 0 : tenant.id) {
                    data = Object.assign(Object.assign({}, data), { tenantId: tenant.id });
                }
                if (group === null || group === void 0 ? void 0 : group.id) {
                    data = Object.assign(Object.assign({}, data), { groupId: group.id });
                }
                return data;
            });
            this.registerDeviceService.createMultiple(dataToSend)
                .pipe(takeUntil(this.destroy$))
                .subscribe(requests => {
                this.success = requests.success;
                this.failed = requests.failed;
                if (eventObject) {
                    eventObject.stepper.next();
                }
            });
        }
    }
    fixErrors(event, failedRequests) {
        if (failedRequests && failedRequests.length > 0) {
            this.options.resetModel({ devicesToCreate: [...this.lastCreatedDevices.filter(el => failedRequests.map(data => data.id).includes(el.id))] });
            this.cd.detectChanges();
        }
        event === null || event === void 0 ? void 0 : event.stepper.previous();
    }
    canLoadTenants$() {
        return defer(() => from(this.tenantUIService.isManagementTenant())).pipe(shareReplay(1));
    }
    getTenants$() {
        return defer(() => from(this.tenantService.list(this.FILTER))).pipe(shareReplay(1));
    }
    getGroups$() {
        return defer(() => from(this.inventoryService.listQuery({ __filter: { __has: 'c8y_IsDeviceGroup' }, __orderby: [{ name: 1 }] }, Object.assign({}, this.FILTER)))).pipe(shareReplay(1));
    }
}
GeneralDeviceRegistrationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-general-device-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Register devices' | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear>\n    <cdk-step [stepControl]=\"form\">\n      <div class=\"p-b-16\">\n        <p\n          class=\"\n            p-l-24 p-r-24 p-t-16 p-b-16\n            m-b-0\n            sticky-top\n            separator-bottom\n            text-medium text-16 text-center\n            bg-component\n          \"\n          translate\n        >\n          Register a general device\n        </p>\n        <formly-form\n          [form]=\"form\"\n          [fields]=\"fields\"\n          [model]=\"model\"\n          [options]=\"options\"\n          class=\"formly-group-array-cols d-block p-24 min-height-fit\"\n        ></formly-form>\n      </div>\n      <c8y-stepper-buttons\n        (onNext)=\"create($event)\"\n        (onCancel)=\"bsModalRef.hide()\"\n        [showButtons]=\"{ cancel: true, next: true }\"\n        [disabled]=\"!form?.valid\"\n        [pending]=\"isLoading$ | async\"\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step state=\"final\">\n      <div class=\"p-24 min-height-fit\">\n        <c8y-operation-result\n          *ngIf=\"success.length === 1 && failed.length === 0\"\n          text=\"{{ 'Device registered' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"success\"\n          class=\"lead\"\n        ></c8y-operation-result>\n        <c8y-operation-result\n          *ngIf=\"success.length === 0 && failed.length === 1\"\n          text=\"{{ 'Failed to register device' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"error\"\n          class=\"lead\"\n        ></c8y-operation-result>\n\n        <ng-container *ngIf=\"success.length > 1 || failed.length > 1\">\n          <c8y-operation-result\n            *ngIf=\"failed.length === 0\"\n            [text]=\"\n              '{{ successfulDevicesCount }} devices registered'\n                | translate: { successfulDevicesCount: success.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-operation-result\n            *ngIf=\"success.length === 0\"\n            [text]=\"\n              '{{ failedDevicesCount }} devices failed to register'\n                | translate: { failedDevicesCount: failed.length }\n            \"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </ng-container>\n\n        <div *ngIf=\"success.length > 0 && failed.length > 0\" class=\"p-l-24 p-r-24 text-center\">\n          <c8y-operation-result\n            text=\"{{ 'Several devices failed to register' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <p\n            ngNonBindable\n            translate\n            [translateParams]=\"{ count: failed.length, total: failed.length + success.length }\"\n            class=\"p-b-16 text-danger\"\n          >\n            Registration failed for {{ count }} devices out of {{ total }}.\n          </p>\n        </div>\n\n        <div class=\"m-b-8 p-l-24 p-r-24\" *ngIf=\"success.length > 0\" translate>\n          Turn on the registered device(s) and wait for connection(s) to be established. Once a\n          device is connected, its status will change to \"Pending acceptance\". You will need to\n          approve it by clicking on the \"Accept\" button.\n        </div>\n\n        <c8y-list-group class=\"separator-top m-t-16\">\n          <c8y-li *ngFor=\"let fail of failed\">\n            <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n            <p>{{ fail?.id }}</p>\n            <small>{{ fail?.message | translate }}</small>\n            <c8y-li-collapse>\n              <pre><code>{{ fail?.details | json }}</code></pre>\n            </c8y-li-collapse>\n          </c8y-li>\n\n          <c8y-li *ngFor=\"let s of success\">\n            <c8y-li-icon class=\"text-success\" [icon]=\"'check-circle'\"></c8y-li-icon>\n            {{ s?.id }}\n          </c8y-li>\n        </c8y-list-group>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        (onCustom)=\"bsModalRef.hide()\"\n        (onBack)=\"fixErrors($event, failed)\"\n        [showButtons]=\"{ back: failed.length > 0, custom: true }\"\n        [labels]=\"{ back: 'Fix errors', custom: 'Close' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
GeneralDeviceRegistrationComponent.ctorParameters = () => [
    { type: TenantUiService },
    { type: TenantService },
    { type: RegisterDeviceService },
    { type: InventoryService },
    { type: ChangeDetectorRef },
    { type: BsModalRef }
];
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "canLoadTenants$", null);
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "getTenants$", null);
__decorate([
    memoize()
], GeneralDeviceRegistrationComponent.prototype, "getGroups$", null);

class GeneralDeviceRegistrationButtonComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    open() {
        this.modalService.show(GeneralDeviceRegistrationComponent, {
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
GeneralDeviceRegistrationButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-general-device-registration-button',
                template: "<button (click)=\"open()\"><i c8yIcon=\"c8y-device-connect\"></i> {{ 'General' | translate }} </button>\n"
            },] }
];
GeneralDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BsModalService }
];

class DeviceRegistrationViewComponent {
    constructor(registerDeviceService, bootstrapRealtimeService, tenantUiService, modalService, translateService, optionsService) {
        this.registerDeviceService = registerDeviceService;
        this.bootstrapRealtimeService = bootstrapRealtimeService;
        this.tenantUiService = tenantUiService;
        this.modalService = modalService;
        this.translateService = translateService;
        this.optionsService = optionsService;
        this.requireSecurityToken = false;
        this.isManagementTenant = false;
        this.isLoading = false;
        this.gridOrList = 'interact-grid';
        this.status = DeviceRegistrationStatus;
        this.statusProps = {
            [DeviceRegistrationStatus.WAITING_FOR_CONNECTION]: {
                label: gettext('Waiting for connection'),
                icon: 'unlink',
                cls: 'text-danger'
            },
            [DeviceRegistrationStatus.PENDING_ACCEPTANCE]: {
                label: gettext('Pending acceptance'),
                icon: 'circle',
                cls: 'text-info'
            },
            [DeviceRegistrationStatus.ACCEPTED]: {
                label: gettext('Accepted'),
                icon: 'check-circle',
                cls: 'text-success'
            },
            [DeviceRegistrationStatus.BLOCKED]: {
                label: gettext('Blocked'),
                icon: 'remove',
                cls: 'text-danger'
            }
        };
        this.unsubscribe$ = new Subject();
        this._securityTokenPolicy = new BehaviorSubject(DeviceRegistrationSecurityMode.OPTIONAL);
    }
    ngOnInit() {
        this.loadAll();
        this.setIsManagementTenant();
        this.setRequireSecurityToken();
        this.deviceRequests$ = this.registerDeviceService.deviceRegistrationRequests$.pipe(map(req => ({
            data: sortBy(req.data, [
                ({ status }) => (status === DeviceRegistrationStatus.PENDING_ACCEPTANCE ? 0 : 1),
                '-creationTime'
            ]),
            paging: req.paging
        })));
        this.limit$ = this.registerDeviceService.limit$;
        this.limitReachedInfo$ = this.limit$.pipe(filter(deviceRegistrationLimit => deviceRegistrationLimit.isReached), switchMap(({ limit }) => this.translateService.stream(gettext('You reached the limit of {{ maxDevices }} devices. No more devices can be registered.'), { maxDevices: limit })));
        this.registerDeviceService.loading$
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(value => (this.isLoading = value));
        this.bootstrapRealtimeService
            .onUpdate$()
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe((bootstrap) => {
            this.registerDeviceService.onDeviceBootstrap(bootstrap);
        });
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    updateList(data) {
        this.registerDeviceService.internalListUpdate(data);
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const confirmed = yield this.modalService.confirm(gettext('Cancel device registration'), this.translateService.instant(gettext('You are about to cancel device registration for ID "{{id}}". Do you want to proceed?'), { id }), Status.DANGER, {
                ok: gettext('Cancel registration'),
                cancel: gettext('Close')
            });
            if (confirmed) {
                this.registerDeviceService.remove(id);
            }
        });
    }
    accept(request) {
        this.registerDeviceService.accept(request);
    }
    acceptAll() {
        this.registerDeviceService.acceptAll();
    }
    canAcceptAll() {
        const pendingRequests = this.registerDeviceService.getRequestByStatus(DeviceRegistrationStatus.PENDING_ACCEPTANCE);
        return !(pendingRequests.length > 0 && !this.requireSecurityToken);
    }
    loadAll() {
        this.registerDeviceService.list();
    }
    displayMode(listClass) {
        this.gridOrList = listClass;
    }
    setRequireSecurityToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const mode = yield this.optionsService.getTenantOption('device-registration', 'security-token.policy', DeviceRegistrationSecurityMode.OPTIONAL);
            this._securityTokenPolicy.next(mode);
            this.requireSecurityToken = mode === DeviceRegistrationSecurityMode.REQUIRED;
        });
    }
    setIsManagementTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isManagementTenant = yield this.tenantUiService.isManagementTenant();
        });
    }
    shouldShowSecurityTokenInput(data) {
        return (data &&
            data.status === DeviceRegistrationStatus.PENDING_ACCEPTANCE &&
            this.showTokenInputBasedOnSecurityMode());
    }
    showTokenInputBasedOnSecurityMode() {
        return this._securityTokenPolicy.getValue() !== DeviceRegistrationSecurityMode.IGNORED;
    }
}
DeviceRegistrationViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-registration-view',
                template: "<ng-container *ngIf=\"deviceRequests$ | async as deviceRequestList\">\n  <c8y-title>\n    {{ 'Device registration' | translate }}\n    <small *ngIf=\"deviceRequestList.data.length === 1\">1 {{ 'new device' | translate }}</small>\n    <small *ngIf=\"deviceRequestList.data.length > 1\">\n      {{ deviceRequestList.data.length }} {{ 'new devices' | translate }}\n    </small>\n  </c8y-title>\n\n  <c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n    <c8y-list-display-switch (onListClassChange)=\"displayMode($event)\"></c8y-list-display-switch>\n  </c8y-action-bar-item>\n\n  <ng-container *ngIf=\"limit$ | async as limitStatus\">\n    <c8y-action-bar-item [placement]=\"'right'\" [priority]=\"10\">\n      <button\n        *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\"\n        class=\"btn btn-link\"\n        title=\"{{ 'Accept all' | translate }}\"\n        (click)=\"acceptAll()\"\n        [disabled]=\"canAcceptAll() || limitStatus?.isReached\"\n      >\n        <i [c8yIcon]=\"'check'\"></i>\n        {{ 'Accept all' | translate }}\n      </button>\n    </c8y-action-bar-item>\n\n    <c8y-action-bar-item [placement]=\"'right'\" [priority]=\"9\">\n      <button\n        class=\"btn btn-link\"\n        title=\"{{ 'Reload' | translate }}\"\n        (click)=\"loadAll()\"\n        [disabled]=\"isLoading\"\n      >\n        <i [c8yIcon]=\"'refresh'\" [ngClass]=\"{ 'icon-spin': isLoading }\"></i>\n        {{ 'Reload' | translate }}\n      </button>\n    </c8y-action-bar-item>\n\n    <c8y-action-bar-item [placement]=\"'right'\" *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\">\n      <c8y-register-device-dropdown></c8y-register-device-dropdown>\n    </c8y-action-bar-item>\n\n    <c8y-help src=\"/users-guide/device-management/#connecting-devices\"></c8y-help>\n\n    <ng-container *ngIf=\"deviceRequestList.data.length > 0; else noData\">\n      <div class=\"card-group\" [ngClass]=\"gridOrList\">\n        <!-- START interact-list sticky header START -->\n        <div *ngIf=\"gridOrList === 'interact-list'\" class=\"page-sticky-header hidden-xs\">\n          <div class=\"flex-row\">\n            <div class=\"card-header p-l-40\">\n              <p translate>Device</p>\n            </div>\n            <div class=\"card-block card-column-30 p-l-0 m-l-8\">\n              <p translate>Status</p>\n            </div>\n            <div class=\"card-block card-column-40 p-0\" *ngIf=\"showTokenInputBasedOnSecurityMode()\">\n              <p translate>Security token</p>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{\n                  'Security token is required if the connected device uses it.' | translate\n                }}\"\n                placement=\"right\"\n                container=\"body\"\n                triggers=\"click focus\"\n                [outsideClick]=\"true\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </div>\n            <div class=\"card-footer card-column-40\">\n              <div class=\"d-contents\" *ngIf=\"isManagementTenant; else noManagement\">\n                <div class=\"card-column-50\">\n                  {{ 'Created' | translate }}\n                </div>\n                <div class=\"card-column-30\">\n                  {{ 'By`user`' | translate }}\n                </div>\n                <div class=\"card-column-20\">\n                  {{ 'Tenant ID' | translate }}\n                </div>\n              </div>\n              <ng-template #noManagement>\n                <div class=\"d-contents\">\n                  <div class=\"card-column-50\">\n                    {{ 'Created' | translate }}\n                  </div>\n                  <div class=\"card-column-50\">\n                    {{ 'By`user`' | translate }}\n                  </div>\n                </div>\n              </ng-template>\n            </div>\n            <div class=\"card-actions-group\" style=\"min-width: 176px\">\n              <div class=\"btn btn-xs invisible\">\n                <!--EMPTY by design-->\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- END interact-list sticky header END -->\n\n        <div *ngIf=\"limitStatus?.isReached\" class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n          <p class=\"alert alert-warning center-block\" role=\"alert\">\n            <strong>\n              {{ limitReachedInfo$ | async }}\n            </strong>\n            <br />\n            <span translate>Please contact your platform administrator.</span>\n          </p>\n        </div>\n\n        <ng-container *ngFor=\"let singleRequest of deviceRequestList.data\">\n          <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n            <div class=\"card\">\n              <div class=\"card-header separator\">\n                <div class=\"card-icon\">\n                  <i\n                    [c8yIcon]=\"statusProps[singleRequest.status].icon\"\n                    [class]=\"statusProps[singleRequest.status].cls\"\n                  ></i>\n                </div>\n                <p class=\"card-title text-truncate\">{{ singleRequest.id }}</p>\n              </div>\n\n              <div class=\"card-block text-center card-column-30\">\n                <span class=\"text-label-small\" translate>Status</span>\n                <p>\n                  <i\n                    *ngIf=\"singleRequest.status === status.WAITING_FOR_CONNECTION\"\n                    c8yIcon=\"refresh\"\n                    class=\"icon-spin text-primary\"\n                  ></i>\n                  {{ statusProps[singleRequest.status].label | translate }}\n                </p>\n              </div>\n\n              <ng-container *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\">\n                <div\n                  class=\"card-block text-center card-column-40 p-t-0 p-b-0\"\n                  *ngIf=\"showTokenInputBasedOnSecurityMode()\"\n                >\n                  <ng-container *ngIf=\"shouldShowSecurityTokenInput(singleRequest)\">\n                    <span *ngIf=\"gridOrList !== 'interact-list'\" class=\"text-label-small\" translate>\n                      Security token\n                    </span>\n                    <input\n                      [(ngModel)]=\"singleRequest.securityToken\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'A1e3gh5ds' }\"\n                      [required]=\"requireSecurityToken\"\n                    />\n                  </ng-container>\n                </div>\n\n                <div class=\"card-actions-group flex-item-v-center\" style=\"min-width: 176px\">\n                  <button\n                    class=\"btn btn-danger btn-xs\"\n                    title=\"{{ 'Remove' | translate }}\"\n                    (click)=\"delete(singleRequest.id)\"\n                    [disabled]=\"isLoading\"\n                  >\n                    {{ 'Remove' | translate }}\n                  </button>\n                  <button\n                    class=\"btn btn-primary btn-xs\"\n                    title=\"{{ 'Accept' | translate }}\"\n                    (click)=\"accept(singleRequest)\"\n                    *ngIf=\"singleRequest.status === status.PENDING_ACCEPTANCE\"\n                    [disabled]=\"\n                      isLoading ||\n                      limitStatus?.isReached ||\n                      (!singleRequest.securityToken && requireSecurityToken)\n                    \"\n                  >\n                    {{ 'Accept' | translate }}\n                  </button>\n                </div>\n              </ng-container>\n\n              <div class=\"card-footer separator text-center card-column-40\">\n                <small *ngIf=\"isManagementTenant; else noManagement\" class=\"d-contents\">\n                  <div class=\"d-contents\" *ngIf=\"singleRequest.creationTime && singleRequest.owner\">\n                    <span class=\"text-label-small\" translate>Created on`date`</span>\n                    <span class=\"card-column-50\">\n                      {{ singleRequest.creationTime | c8yDate }}\n                    </span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>by`user`</span>\n                    <span class=\"card-column-30\">{{ singleRequest.owner }}</span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>in`tenant`</span>\n                    <span class=\"card-column-20\">{{ singleRequest.tenantId }}</span>\n                  </div>\n                  <div\n                    class=\"d-contents\"\n                    *ngIf=\"!singleRequest.creationTime || !singleRequest.owner\"\n                  >\n                    <div class=\"card-column-50\"></div>\n                    <div class=\"card-column-30\"></div>\n                    <span class=\"text-label-small\" translate>Created in`tenant`</span>\n                    <div class=\"card-column-20\">\n                      <span>\n                        {{ singleRequest.tenantId }}\n                      </span>\n                    </div>\n                  </div>\n                </small>\n                <ng-template #noManagement>\n                  <small class=\"d-contents\">\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>Created on`date`</span>\n                    <span class=\"card-column-50\">\n                      {{ singleRequest.creationTime | c8yDate }}\n                    </span>\n                    <span class=\"text-label-small m-l-4 m-r-4\" translate>by`user`</span>\n                    <span class=\"card-column-50\">{{ singleRequest.owner }}</span>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <c8y-load-more\n        [paging]=\"deviceRequestList.paging\"\n        [hidden]=\"true\"\n        (onLoad)=\"updateList($event)\"\n      ></c8y-load-more>\n    </ng-container>\n\n    <ng-template #noData>\n      <div class=\"c8y-empty-state m-t-40 text-center\">\n        <h1 class=\"c8y-icon c8y-icon-device-connect c8y-icon-duocolor\"></h1>\n        <ng-container *ngIf=\"limitStatus?.isReached; else limitNotReached\">\n          <h3>\n            {{ limitReachedInfo$ | async }}\n          </h3>\n          <p translate>Please contact your platform administrator.</p>\n        </ng-container>\n        <ng-template #limitNotReached>\n          <h3 translate>No pending registrations to display.</h3>\n          <p *c8yIfAllowed=\"['ROLE_DEVICE_CONTROL_ADMIN']\" translate>\n            Use the \"Register device\" dropdown in the top right corner.\n          </p>\n        </ng-template>\n      </div>\n    </ng-template>\n  </ng-container>\n</ng-container>\n"
            },] }
];
DeviceRegistrationViewComponent.ctorParameters = () => [
    { type: RegisterDeviceService },
    { type: DeviceBootstrapRealtimeService },
    { type: TenantUiService },
    { type: ModalService },
    { type: TranslateService },
    { type: OptionsService }
];

class RegisterDeviceNavigationFactory {
    constructor(permissions) {
        this.permissions = permissions;
    }
    get() {
        const userHasPermission = this.permissions.hasAnyRole([
            'ROLE_DEVICE_CONTROL_ADMIN',
            'ROLE_DEVICE_CONTROL_READ'
        ]);
        const nav = [];
        if (userHasPermission) {
            nav.push(new NavigatorNode({
                label: gettext('Registration'),
                icon: 'c8y-device-connect',
                path: '/deviceregistration',
                parent: gettext('Devices'),
                preventDuplicates: true,
                priority: 3000
            }));
        }
        return nav;
    }
}
RegisterDeviceNavigationFactory.decorators = [
    { type: Injectable }
];
RegisterDeviceNavigationFactory.ctorParameters = () => [
    { type: Permissions }
];

class BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService) {
        this.applicationService = applicationService;
        this.stateService = stateService;
    }
    getMetadataUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/metadata`;
    }
    getServiceBaseUrl(contextPath) {
        if (!contextPath || contextPath.length === 0) {
            throw new Error(gettext('The URL of the microservice is misconfigured. A context path is missing.'));
        }
        return `/service/${contextPath}/deviceRegistration`;
    }
    getDeviceRegistrationProviders(bulk) {
        return __awaiter(this, void 0, void 0, function* () {
            let providers = [];
            const microservices = yield this.listMicroservicesByUser();
            if (microservices && microservices.length > 0) {
                providers = this.getProvidersFromManifestExtensions(microservices, bulk).concat(this.getProvidersFromExtensions(microservices, bulk));
            }
            return providers;
        });
    }
    listMicroservicesByUser() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser((_c = (_b = (_a = this.stateService) === null || _a === void 0 ? void 0 : _a.currentUser) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.userName, {
                dropOverwrittenApps: true,
                noPaging: true,
                pageSize: 100,
                withTotalPages: true
            });
            return data === null || data === void 0 ? void 0 : data.filter(({ type }) => type === ApplicationType.MICROSERVICE);
        });
    }
    getProvidersFromManifestExtensions(applications, bulk) {
        return flatMap(applications, application => {
            var _a, _b;
            return (_b = (_a = application === null || application === void 0 ? void 0 : application.manifest) === null || _a === void 0 ? void 0 : _a.extensions) === null || _b === void 0 ? void 0 : _b.map(extension => {
                return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    getProvidersFromExtensions(applications, bulk) {
        return flatMap(applications, application => {
            var _a;
            return (_a = application.extensions) === null || _a === void 0 ? void 0 : _a.map(extension => {
                return Object.assign(Object.assign({}, extension), { contextPath: application.contextPath });
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    appSupportingExtensibleDeviceRegistrationForm(extension, bulk) {
        if (bulk) {
            return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleBulkDeviceRegistration';
        }
        else {
            return (extension === null || extension === void 0 ? void 0 : extension.type) === 'extensibleDeviceRegistration';
        }
    }
}

class ExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getSchema(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.fetch(this.getMetadataUrl(contextPath), { params: { lang: this.stateService.state.lang } });
            const data = yield response.json();
            if (!data || !data.c8y_DeviceRegistration) {
                throw new Error(gettext('The response of the microservice is incomplete. The device registration information is missing.'));
            }
            return data.c8y_DeviceRegistration;
        });
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(false);
    }
    registerDevice(contextPath, model) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = JSON.stringify(model);
            const headers = { 'content-type': 'application/json', accept: 'application/json' };
            const res = yield this.client.fetch(this.getServiceBaseUrl(contextPath), { method, body, headers });
            const data = yield res.json();
            return { res, data };
        });
    }
}
ExtensibleDeviceRegistrationService.decorators = [
    { type: Injectable }
];
ExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];

class ExtensibleDeviceRegistrationModalComponent {
    constructor(bsModalRef, jsonschema, registrationService) {
        this.bsModalRef = bsModalRef;
        this.jsonschema = jsonschema;
        this.registrationService = registrationService;
        this.labels = [];
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { title, pages } = yield this.registrationService.getSchema(this.contextPath)
                .catch(error => {
                this.loadingErrorMessage = (error === null || error === void 0 ? void 0 : error.message) || gettext('Cannot fetch a form definition from the microservice.');
                return {
                    title: gettext('Error')
                };
            });
            this.title = title;
            this.pages = pages === null || pages === void 0 ? void 0 : pages.map((step) => {
                this.labels.push(step.title);
                return [this.jsonschema.toFieldConfig(step)];
            });
        });
    }
}
ExtensibleDeviceRegistrationModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'extensible-device-registration-modal',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span class=\"c8y-icon c8y-icon-device-connect\"></span>\n    <h4>{{ title | translate }}</h4>\n  </ng-container>\n  <ng-container *ngIf=\"pages as steps; else loadingOrError\">\n    <c8y-extensible-device-registration-stepper\n      [steps]=\"steps\"\n      [labels]=\"labels\"\n      [contextPath]=\"contextPath\"\n    ></c8y-extensible-device-registration-stepper>\n  </ng-container>\n  <ng-template #loadingOrError>\n    <ng-container *ngIf=\"loadingErrorMessage; else loading\">\n      <c8y-operation-result\n        text=\"{{ loadingErrorMessage | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead text-regular\"\n      ></c8y-operation-result>\n      <div class=\"modal-footer\">\n        <button\n          title=\"{{ 'Close' | translate }}\"\n          (click)=\"bsModalRef.hide()\"\n          type=\"button\"\n          class=\"btn btn-default\"\n          translate\n        >\n          Close\n        </button>\n      </div>\n    </ng-container>\n    <ng-template #loading>\n      <div class=\"modal-header modal-header-info text-center\">\n        <c8y-progress-bar\n          [message]=\"'Loading the registration form definition\u2026' | translate\"\n          class=\"text-center\"\n        ></c8y-progress-bar>\n      </div>\n    </ng-template>\n  </ng-template>\n</c8y-modal>\n"
            },] }
];
ExtensibleDeviceRegistrationModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: C8yJSONSchema },
    { type: ExtensibleDeviceRegistrationService }
];

class ExtensibleDeviceRegistrationButtonComponent {
    constructor(deviceRegistrationService, modalService) {
        this.deviceRegistrationService = deviceRegistrationService;
        this.modalService = modalService;
    }
    ngOnInit() {
        this.providersMetaData = this.deviceRegistrationService.getDeviceRegistrationProviders();
    }
    click(providerMetaData) {
        const { name, contextPath } = providerMetaData;
        this.modalService.show(ExtensibleDeviceRegistrationModalComponent, {
            initialState: { name, contextPath },
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
ExtensibleDeviceRegistrationButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'extensible-device-registration-provider',
                template: "<div *ngFor=\"let provider of providersMetaData | async\">\n  <button title=\"{{ provider.name | translate }}\" type=\"button\" (click)=\"click(provider)\">\n    <i c8yIcon=\"c8y-device-connect\"></i>\n    {{ provider.name | translate }}\n  </button>\n</div>\n"
            },] }
];
ExtensibleDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: ExtensibleDeviceRegistrationService },
    { type: BsModalService }
];

class ExtensibleDeviceRegistrationStepperComponent {
    constructor(customProviderService, registerDeviceService, bsModalRef) {
        this.customProviderService = customProviderService;
        this.registerDeviceService = registerDeviceService;
        this.bsModalRef = bsModalRef;
        this.pendingStatus = false;
        this.forms = [];
        this.model = {};
        this.SERVER_ERROR = gettext('Cannot register your device.');
        this.SUCCESSFUL_REGISTRATION = gettext('Your device was successfully registered.');
        this.NO_CONNECTION = gettext('Unable to reach the microservice.');
    }
    ngOnInit() {
        this.steps.forEach(step => this.forms.push(new FormGroup({})));
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pendingStatus = true;
            this.errorMessage = null;
            const { res, data } = yield this.customProviderService.registerDevice(this.contextPath, this.model)
                .catch(err => {
                return {
                    res: undefined,
                    data: undefined
                };
            })
                .finally(() => {
                this.pendingStatus = false;
                this.stepper.next();
            });
            if (res && data) {
                if (res.status >= 400 && res.status < 500) {
                    this.handleError(data.message || this.SERVER_ERROR);
                }
                else if (res.status >= 500) {
                    this.handleError(this.SERVER_ERROR);
                }
                else {
                    this.message = this.SUCCESSFUL_REGISTRATION;
                }
            }
            else {
                this.handleError(this.NO_CONNECTION);
            }
        });
    }
    close() {
        this.bsModalRef.hide();
    }
    complete() {
        this.registerDeviceService.list();
        this.bsModalRef.hide();
    }
    goToFirstStep() {
        this.stepper.selectedIndex = 0;
    }
    isRegistrationStep() {
        return this.stepper.selectedIndex === this.steps.length - 1;
    }
    finalStepStatus() {
        if (this.stepper.selectedIndex === this.steps.length) {
            if (this.errorMessage) {
                return STEP_STATE.ERROR;
            }
            else {
                return STEP_STATE.DONE;
            }
        }
        else {
            return STEP_STATE.NUMBER;
        }
    }
    handleError(message) {
        this.errorMessage = message;
    }
}
ExtensibleDeviceRegistrationStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-extensible-device-registration-stepper',
                template: "<c8y-stepper\n  [disableProgressButtons]=\"true\"\n  [disableDefaultIcons]=\"{ edit: true, done: false }\"\n  [customClasses]=\"['m-40', 'm-t-16', 'm-b-16']\"\n  linear\n>\n  <cdk-step *ngFor=\"let step of steps; let i = index\" [stepControl]=\"forms[i]\" [label]=\"labels[i]\">\n    <c8y-form-group class=\"form-group p-24 p-b-0 p-t-16\">\n      <formly-form [form]=\"forms[i]\" [fields]=\"step\" [model]=\"model\"></formly-form>\n    </c8y-form-group>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: true, next: true }\"\n      [labels]=\"{ next: 'Register' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"save()\"\n      [pending]=\"pendingStatus\"\n      [disabled]=\"forms[i].invalid\"\n    ></c8y-stepper-buttons>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      *ngIf=\"!isRegistrationStep()\"\n      [showButtons]=\"{ cancel: true, back: i !== 0, next: true }\"\n      [disabled]=\"forms[i].invalid\"\n      (onCancel)=\"close()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n  <cdk-step [state]=\"finalStepStatus()\" label=\"{{ 'Summary' | translate }}\">\n    <c8y-operation-result\n      *ngIf=\"!errorMessage; else errorInfo\"\n      text=\"{{ message | translate }}\"\n      [size]=\"84\"\n      [vertical]=\"true\"\n      type=\"success\"\n      class=\"lead\"\n    ></c8y-operation-result>\n    <ng-template #errorInfo>\n      <c8y-operation-result\n        text=\"{{ errorMessage | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </ng-template>\n    <c8y-stepper-buttons\n      class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n      [showButtons]=\"{ cancel: errorMessage, back: errorMessage, next: !errorMessage }\"\n      [labels]=\"{ back: 'Fix issue', next: 'Close' }\"\n      (onCancel)=\"close()\"\n      (onNext)=\"complete()\"\n      (onBack)=\"goToFirstStep()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n</c8y-stepper>\n"
            },] }
];
ExtensibleDeviceRegistrationStepperComponent.ctorParameters = () => [
    { type: ExtensibleDeviceRegistrationService },
    { type: RegisterDeviceService },
    { type: BsModalRef }
];
ExtensibleDeviceRegistrationStepperComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }],
    contextPath: [{ type: Input }],
    labels: [{ type: Input }],
    steps: [{ type: Input }]
};

class BulkExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(true);
    }
    getBulkDescription(contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.fetch(this.getMetadataUrl(contextPath), {
                params: { lang: this.stateService.state.lang }
            });
            const { c8y_DeviceRegistration } = yield res.json();
            if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {
                throw new Error(gettext('The response of the microservice is incomplete. The bulk registration information is missing.'));
            }
            return c8y_DeviceRegistration.bulk;
        });
    }
    upload(csv, contextPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const body = this.createBinaryRequestBody(csv);
            const res = yield this.client.fetch(this.getBulkUrl(contextPath), { method, body });
            const data = yield res.json();
            return { res, data };
        });
    }
    getBulkUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/bulk`;
    }
    createBinaryRequestBody(file) {
        const body = new FormData();
        body.append('file', file, file.name);
        return body;
    }
}
BulkExtensibleDeviceRegistrationService.decorators = [
    { type: Injectable }
];
BulkExtensibleDeviceRegistrationService.ctorParameters = () => [
    { type: ApplicationService },
    { type: AppStateService },
    { type: FetchClient }
];

const bulkSchema$1 = {
    $schema: 'https://json-schema.org/draft/2019-09/schema',
    type: 'object',
    properties: {
        csvBulkFile: {
            type: 'string',
            title: gettext('CSV file upload'),
            description: gettext('You can use file upload component to let users send files. This input accepts only a single CSV file.'),
            contentEncoding: 'base64',
            contentMediaType: 'csv'
        }
    },
    required: ['csvBulkFile'],
    additionalProperties: false
};
class ExtensibleBulkDeviceRegistrationModalComponent {
    constructor(jsonschema, bulkExtensibleDeviceRegistrationService, registerDeviceService, bsModalRef) {
        this.jsonschema = jsonschema;
        this.bulkExtensibleDeviceRegistrationService = bulkExtensibleDeviceRegistrationService;
        this.registerDeviceService = registerDeviceService;
        this.bsModalRef = bsModalRef;
        this.loadingError = false;
        this.pending = false;
        this.form = new FormGroup({});
        this.model = {};
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { title, exampleFileUrls } = yield this.bulkExtensibleDeviceRegistrationService
                .getBulkDescription(this.contextPath)
                .catch(error => {
                this.message = error.message;
                this.loadingError = true;
                return {
                    title: gettext('Error'),
                    exampleFileUrls: []
                };
            });
            this.title = title;
            this.template = [this.jsonschema.toFieldConfig(bulkSchema$1)];
            this.examples = exampleFileUrls;
        });
    }
    upload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pending = true;
            const { res, data } = yield this.bulkExtensibleDeviceRegistrationService
                .upload(this.getFile(this.model), this.contextPath)
                .catch(err => {
                return {
                    res: undefined,
                    data: undefined
                };
            })
                .finally(() => {
                this.pending = false;
                this.stepper.next();
            });
            this.result = data;
            this.success = (res === null || res === void 0 ? void 0 : res.status) < 400;
            if (this.success) {
                this.message = gettext('Device registration created.');
                this.model = {};
            }
            if (res) {
                if (res.status >= 400 && res.status < 500) {
                    this.message = gettext('Device registration failed.');
                }
                else if (res.status >= 500) {
                    this.message = gettext('Error occurred while processing the uploaded file.');
                }
            }
            else {
                this.message = gettext('No internet connection. Unable to reach the microservice.');
            }
        });
    }
    getFile(model) {
        var _a, _b;
        const csvBulkFile = (_a = model) === null || _a === void 0 ? void 0 : _a.csvBulkFile;
        return csvBulkFile ? (_b = csvBulkFile[0]) === null || _b === void 0 ? void 0 : _b.file : undefined;
    }
    complete() {
        this.registerDeviceService.list();
        this.bsModalRef.hide();
    }
    cancel() {
        this.bsModalRef.hide();
    }
}
ExtensibleBulkDeviceRegistrationModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'extensible-device-registration-modal-component',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span class=\"c8y-icon c8y-icon-device-connect\"></span>\n    <h4>{{ title | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear class=\"p-t-16\">\n    <ng-container *ngIf=\"!loadingError\">\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"sticky-top bg-component separator-bottom\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              separator-bottom\n              text-16 text-medium text-center\n              bg-component\n            \"\n            translate\n          >\n            Register devices in bulk\n          </p>\n          <c8y-form-group class=\"p-24 p-t-16 p-b-8 m-b-0\">\n            <formly-form [form]=\"form\" [fields]=\"template\" [model]=\"model\"></formly-form>\n          </c8y-form-group>\n        </div>\n        <div\n          *ngFor=\"let example of examples\"\n          class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\"\n        >\n          <p class=\"m-b-8 text-medium\">\n            {{ example.title | translate }}\n          </p>\n          <p class=\"small m-b-8\">{{ example.description | translate }}</p>\n          <a\n            title=\"{{ 'Download template' | translate }}\"\n            class=\"btn btn-default btn-sm\"\n            target=\"_self\"\n            [href]=\"example.url\"\n            download=\"{{ 'Example bulk registration - template.csv' | translate }}\"\n          >\n            <i c8yIcon=\"download\"></i>\n            <span translate>Download template</span>\n          </a>\n        </div>\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [disabled]=\"form.invalid\"\n          [pending]=\"pending\"\n          (onCancel)=\"cancel()\"\n          (onNext)=\"upload()\"\n          [labels]=\"{ next: 'Upload' }\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </ng-container>\n    <cdk-step state=\"final\">\n      <div class=\"p-24\">\n        <div *ngIf=\"success; else fail\">\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-list-group class=\"separator-top m-t-16\">\n            <c8y-li>\n              <c8y-li-icon class=\"text-success\" [icon]=\"'check-circle'\"></c8y-li-icon>\n              <p translate>File successfully uploaded.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <ng-template #fail>\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n          <c8y-list-group *ngIf=\"result\" class=\"separator-top m-t-16\">\n            <c8y-li>\n              <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n              <p translate>Bulk operation failed.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </c8y-list-group>\n        </ng-template>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ next: true }\"\n        (onNext)=\"complete()\"\n        [labels]=\"{ next: success ? 'Complete' : 'Cancel' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n"
            },] }
];
ExtensibleBulkDeviceRegistrationModalComponent.ctorParameters = () => [
    { type: C8yJSONSchema },
    { type: BulkExtensibleDeviceRegistrationService },
    { type: RegisterDeviceService },
    { type: BsModalRef }
];
ExtensibleBulkDeviceRegistrationModalComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }]
};

const bulkSchema = {
    $schema: 'https://json-schema.org/draft/2019-09/schema',
    type: 'object',
    properties: {
        csvBulkFile: {
            type: 'string',
            title: gettext('CSV file upload'),
            description: gettext('You can use file upload component to let users send files. This input accepts only a single CSV file.'),
            contentEncoding: 'base64',
            contentMediaType: 'csv'
        }
    },
    required: ['csvBulkFile'],
    additionalProperties: false
};
const simpleCsvHeaders = ['ID', 'PATH'];
const fullCsvHeaders = [
    'ID',
    'CREDENTIALS',
    'TYPE',
    'NAME',
    'ICCID',
    'IDTYPE',
    'PATH',
    'SHELL',
    'AUTH_TYPE'
];
class BulkDeviceRegistrationModalComponent {
    constructor(router, jsonschema, deviceRegistrationService, registerDeviceService, bsModalRef) {
        this.router = router;
        this.jsonschema = jsonschema;
        this.deviceRegistrationService = deviceRegistrationService;
        this.registerDeviceService = registerDeviceService;
        this.bsModalRef = bsModalRef;
        this.form = new FormGroup({});
        this.model = {};
    }
    ngOnInit() {
        this.template = [this.jsonschema.toFieldConfig(bulkSchema)];
    }
    upload() {
        this.pending = true;
        const file = this.getFile(this.model);
        this.deviceRegistrationService
            .create(file)
            .then(({ res, data }) => {
            if (res.status < 400) {
                this.result = data;
                this.success = data.numberOfFailed === 0 && data.numberOfSuccessful === data.numberOfAll;
                this.message = this.success
                    ? gettext('Device registration created.')
                    : (this.message = gettext('Device registration failed.'));
            }
            else {
                this.failedResult = data;
                this.message = gettext('Device registration failed.');
            }
            this.model = {};
            this.pending = false;
            this.stepper.next();
        })
            .catch(reason => {
            this.message = gettext('Error occurred while processing the uploaded file.');
            this.pending = false;
            this.stepper.next();
        });
    }
    downloadSimple() {
        return this.download(simpleCsvHeaders, gettext('Simple bulk registration - template.csv'));
    }
    downloadFull() {
        return this.download(fullCsvHeaders, gettext('Full bulk registration - template.csv'));
    }
    download(headers, fileName) {
        const headerRaw = headers.map(header => `"${header}"`).join(';');
        const binaryFile = new Blob([headerRaw], { type: 'text/csv' });
        saveAs(binaryFile, fileName);
    }
    complete() {
        this.registerDeviceService.list();
        this.bsModalRef.hide();
    }
    cancel() {
        this.bsModalRef.hide();
    }
    getFile(model) {
        var _a, _b;
        const csvBulkFile = (_a = model) === null || _a === void 0 ? void 0 : _a.csvBulkFile;
        return csvBulkFile ? (_b = csvBulkFile[0]) === null || _b === void 0 ? void 0 : _b.file : undefined;
    }
}
BulkDeviceRegistrationModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'bulk-device-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span c8yIcon=\"upload\"></span>\n    <h4>{{ 'Bulk device registration' | translate }}</h4>\n  </ng-container>\n  <c8y-stepper [hideStepProgress]=\"true\" linear>\n    <cdk-step [stepControl]=\"form\">\n      <div class=\"sticky-top bg-component separator-bottom\">\n        <p\n          class=\"\n            p-l-24 p-r-24 p-t-16 p-b-16\n            m-b-0\n            sticky-top\n            separator-bottom\n            text-16 text-medium text-center\n            bg-component\n          \"\n          translate\n        >\n          Register general devices in bulk\n        </p>\n        <c8y-form-group class=\"p-24 p-t-16 p-b-8 m-b-0\">\n          <formly-form [form]=\"form\" [fields]=\"template\" [model]=\"model\"></formly-form>\n        </c8y-form-group>\n      </div>\n      <div class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\">\n        <div>\n          <p class=\"m-b-8 text-medium\" translate>Simple registration</p>\n          <p class=\"small m-b-8\" translate>\n            Creates all registration requests at once, then each one needs to go through regular\n            acceptance process.\n          </p>\n        </div>\n        <a\n          title=\"{{ 'Download template' | translate }}\"\n          class=\"btn btn-default btn-sm\"\n          target=\"_self\"\n          (click)=\"downloadSimple()\"\n        >\n          <i c8yIcon=\"download\"></i>\n          <span translate>Download template</span>\n        </a>\n      </div>\n      <div class=\"bg-gray-white separator-bottom p-t-16 p-b-16 p-l-24 p-r-24\">\n        <div>\n          <p class=\"m-b-8 text-medium\" translate>Full registration</p>\n          <p class=\"small m-b-8\" translate>\n            Creates all device credentials and devices using provided list of property values.\n            Devices can start communicating with the platform immediately.\n          </p>\n        </div>\n        <a\n          title=\"{{ 'Download template' | translate }}\"\n          class=\"btn btn-default btn-sm\"\n          target=\"_self\"\n          (click)=\"downloadFull()\"\n        >\n          <i c8yIcon=\"download\"></i>\n          <span translate>Download template</span>\n        </a>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ cancel: true, next: true }\"\n        [disabled]=\"form.invalid\"\n        [pending]=\"pending\"\n        (onCancel)=\"cancel()\"\n        (onNext)=\"upload()\"\n        [labels]=\"{ next: 'Upload' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step state=\"final\">\n      <div class=\"m-24\">\n        <div *ngIf=\"success; else warning\">\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </div>\n        <ng-template #warning>\n          <c8y-operation-result\n            text=\"{{ message | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"error\"\n            class=\"lead\"\n          ></c8y-operation-result>\n        </ng-template>\n        <c8y-list-group class=\"separator-top m-t-16\">\n          <ng-container *ngIf=\"result; else failedResponse\">\n            <c8y-li *ngIf=\"success; else fail\">\n              <c8y-li-icon class=\"text-success\" icon=\"check-circle\"></c8y-li-icon>\n              <p>All devices processed successfully.</p>\n              <c8y-li-collapse>\n                <pre><code>{{ result | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n            <ng-template #fail>\n              <c8y-li>\n                <c8y-li-icon class=\"text-danger\" icon=\"ban\"></c8y-li-icon>\n                <p\n                  ngNonBindable\n                  [translateParams]=\"{ count: result?.numberOfFailed, total: result?.numberOfAll }\"\n                  translate\n                >\n                  Failed to process {{ count }} out of {{ total }}.\n                </p>\n                <c8y-li-collapse>\n                  <pre><code>{{ result | json }}</code></pre>\n                </c8y-li-collapse>\n              </c8y-li>\n            </ng-template>\n          </ng-container>\n          <ng-template #failedResponse>\n            <c8y-li>\n              <c8y-li-icon class=\"text-danger\" [icon]=\"'ban'\"></c8y-li-icon>\n              <small>{{ failedResult?.message | translate }}</small>\n              <c8y-li-collapse>\n                <pre><code>{{ failedResult | json }}</code></pre>\n              </c8y-li-collapse>\n            </c8y-li>\n          </ng-template>\n        </c8y-list-group>\n      </div>\n      <c8y-stepper-buttons\n        class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n        [showButtons]=\"{ next: true }\"\n        (onNext)=\"complete()\"\n        [labels]=\"{ next: success ? 'Close' : 'Cancel' }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-modal>\n"
            },] }
];
BulkDeviceRegistrationModalComponent.ctorParameters = () => [
    { type: Router },
    { type: C8yJSONSchema },
    { type: DeviceRegistrationBulkService },
    { type: RegisterDeviceService },
    { type: BsModalRef }
];
BulkDeviceRegistrationModalComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }]
};

class ExtensibleBulkDeviceRegistrationButtonComponent {
    constructor(bulkExtensibleDeviceRegistrationService, modalService) {
        this.bulkExtensibleDeviceRegistrationService = bulkExtensibleDeviceRegistrationService;
        this.modalService = modalService;
    }
    ngOnInit() {
        this.bulkProvidersMetaData = this.bulkExtensibleDeviceRegistrationService.getDeviceRegistrationProviders();
    }
    click(contextPath) {
        this.modalService.show(ExtensibleBulkDeviceRegistrationModalComponent, {
            initialState: { contextPath },
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
ExtensibleBulkDeviceRegistrationButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'extensible-device-registration-component',
                template: "<div *ngFor=\"let provider of bulkProvidersMetaData | async\">\n  <button\n    title=\"{{ provider.name | translate }}\"\n    type=\"button\"\n    (click)=\"click(provider.contextPath)\"\n  >\n    <i c8yIcon=\"upload\"></i>\n    {{ provider.name | translate }}\n  </button>\n</div>\n"
            },] }
];
ExtensibleBulkDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BulkExtensibleDeviceRegistrationService },
    { type: BsModalService }
];

class BulkDeviceRegistrationButtonComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    click() {
        this.modalService.show(BulkDeviceRegistrationModalComponent, {
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
BulkDeviceRegistrationButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'extensible-device-registration-component',
                template: "<button (click)=\"click()\"><i c8yIcon=\"upload\"></i>{{ 'General' | translate }}</button>\n"
            },] }
];
BulkDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BsModalService }
];

const HOOK_DEVICE_REGISTRATION = new InjectionToken('RegisterDevicesFactory');
class RegisterDeviceExtensionService {
    constructor(injector, router) {
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.items$ = fromTriggerOnce(router, [this.refreshTrigger], [() => this.injector.get(HOOK_DEVICE_REGISTRATION, []), () => this.factories, this]).pipe(startWith([]), shareReplay(1));
    }
    refresh() {
        this.refreshTrigger.next();
    }
}
RegisterDeviceExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RegisterDeviceExtensionService_Factory() { return new RegisterDeviceExtensionService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: RegisterDeviceExtensionService, providedIn: "root" });
RegisterDeviceExtensionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RegisterDeviceExtensionService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

class RegisterDeviceDropdownComponent {
    constructor(registerDeviceExtensionService, registerDeviceService) {
        this.registerDeviceExtensionService = registerDeviceExtensionService;
        this.registerDeviceService = registerDeviceService;
        this.single$ = this.registerDeviceExtensionService.items$.pipe(map(items => items.filter(item => item.category === 'single').sort((a, b) => b.priority - a.priority)));
        this.bulk$ = this.registerDeviceExtensionService.items$.pipe(map(items => items.filter(item => item.category === 'bulk').sort((a, b) => b.priority - a.priority)));
        this.limit$ = this.registerDeviceService.limit$.pipe(map(limit => limit.isReached));
    }
}
RegisterDeviceDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-register-device-dropdown',
                template: "<div class=\"dropdown\" dropdown>\n  <button\n    *ngIf=\"!(limit$ | async); else disable\"\n    title=\"{{ 'Register device' | translate }}\"\n    class=\"dropdown-toggle c8y-dropdown d-flex\"\n    dropdownToggle\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <span class=\"text-truncate\" translate>Register device</span>\n    <i [c8yIcon]=\"'caret-down'\"></i>\n  </button>\n  <ng-template #disable>\n    <button\n      title=\"{{ 'Device registration disabled' | translate }}\"\n      class=\"btn btn-clean d-flex p-l-8\"\n      disabled\n    >\n      <span class=\"text-truncate\" translate>Register device</span>\n      <i [c8yIcon]=\"'caret-down'\"></i>\n    </button>\n  </ng-template>\n\n  <!-- dropdown for normal screen sizes -->\n  <ul class=\"dropdown-menu dropdown-menu-right hidden-xs\" *dropdownMenu>\n    <ng-container *ngTemplateOutlet=\"dropdown\"></ng-container>\n  </ul>\n\n  <!-- fake dropdown for mobile screen sizes. *dropdownMenu is missing by design! -->\n  <ul class=\"dropdown-menu dropdown-menu visible-xs\">\n    <ng-container *ngTemplateOutlet=\"dropdown\"></ng-container>\n  </ul>\n\n  <ng-template #dropdown>\n    <ng-container *ngIf=\"single$ | async as single\">\n      <li class=\"dropdown-header\" *ngIf=\"single.length > 0\" translate>Single registration</li>\n      <li *ngFor=\"let item of single\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </li>\n    </ng-container>\n    <ng-container *ngIf=\"bulk$ | async as bulk\">\n      <li class=\"dropdown-header\" *ngIf=\"bulk.length > 0\" translate>Bulk registration</li>\n      <li *ngFor=\"let item of bulk\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </li>\n    </ng-container>\n  </ng-template>\n</div>\n"
            },] }
];
RegisterDeviceDropdownComponent.ctorParameters = () => [
    { type: RegisterDeviceExtensionService },
    { type: RegisterDeviceService }
];

class DeviceRegistrationFactory {
    get() {
        return [{
                template: GeneralDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'single'
            }, {
                template: ExtensibleDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'single'
            }, {
                template: ExtensibleBulkDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'bulk'
            }, {
                template: BulkDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'bulk'
            }];
    }
}
DeviceRegistrationFactory.decorators = [
    { type: Injectable }
];

const routes = [
    {
        path: 'deviceregistration',
        component: DeviceRegistrationViewComponent,
    }
];
class RegisterDeviceModule {
}
RegisterDeviceModule.decorators = [
    { type: NgModule, args: [{
                imports: [BsDropdownModule, PopoverModule, CommonModule, CoreModule, StepperModule, DynamicFormsModule, RouterModule.forChild(routes)],
                declarations: [
                    DeviceRegistrationViewComponent,
                    GeneralDeviceRegistrationComponent,
                    GeneralDeviceRegistrationButtonComponent,
                    BulkDeviceRegistrationModalComponent,
                    BulkDeviceRegistrationButtonComponent,
                    ExtensibleDeviceRegistrationButtonComponent,
                    ExtensibleDeviceRegistrationModalComponent,
                    ExtensibleDeviceRegistrationStepperComponent,
                    ExtensibleBulkDeviceRegistrationModalComponent,
                    ExtensibleBulkDeviceRegistrationButtonComponent,
                    RegisterDeviceDropdownComponent
                ],
                providers: [{
                        provide: HOOK_DEVICE_REGISTRATION,
                        useClass: DeviceRegistrationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: RegisterDeviceNavigationFactory,
                        multi: true
                    },
                    DeviceBootstrapRealtimeService,
                    RegisterDeviceService,
                    ExtensibleDeviceRegistrationService,
                    BulkExtensibleDeviceRegistrationService,
                ],
                entryComponents: [
                    GeneralDeviceRegistrationComponent,
                    ExtensibleBulkDeviceRegistrationButtonComponent,
                    BulkDeviceRegistrationModalComponent,
                    ExtensibleDeviceRegistrationModalComponent,
                    RegisterDeviceDropdownComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceRegistrationFactory, GeneralDeviceRegistrationButtonComponent, GeneralDeviceRegistrationComponent, HOOK_DEVICE_REGISTRATION, RegisterDeviceExtensionService, RegisterDeviceModule, RegisterDeviceService, DeviceRegistrationViewComponent as ɵa, BulkDeviceRegistrationModalComponent as ɵb, BulkDeviceRegistrationButtonComponent as ɵc, ExtensibleDeviceRegistrationButtonComponent as ɵd, ExtensibleDeviceRegistrationService as ɵe, BaseExtensibleDeviceRegistrationService as ɵf, ExtensibleDeviceRegistrationModalComponent as ɵg, ExtensibleDeviceRegistrationStepperComponent as ɵh, ExtensibleBulkDeviceRegistrationModalComponent as ɵi, BulkExtensibleDeviceRegistrationService as ɵj, ExtensibleBulkDeviceRegistrationButtonComponent as ɵk, RegisterDeviceDropdownComponent as ɵl, RegisterDeviceNavigationFactory as ɵm };
//# sourceMappingURL=c8y-ngx-components-register-device.js.map
