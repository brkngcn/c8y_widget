import * as i0 from '@angular/core';
import { Injectable } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
class DatapointParserService {
    constructor() {
        this.attributeToParse = [
            'target',
            'yellowRangeMin',
            'yellowRangeMax',
            'redRangeMin',
            'redRangeMax',
            'min',
            'max'
        ];
    }
    parseDatapoints(datapoints) {
        return datapoints.map(dp => this.parseDatapoint(dp));
    }
    parseDatapoint(datapoint) {
        if (!datapoint.c8y_Kpi) {
            return datapoint;
        }
        const kpi = datapoint.c8y_Kpi;
        for (const key of this.attributeToParse) {
            if (typeof kpi[key] === 'string') {
                const num = Number.parseFloat(kpi[key]);
                if (!Number.isNaN(num)) {
                    kpi[key] = num;
                }
                else {
                    delete kpi[key];
                }
            }
        }
        return datapoint;
    }
}
DatapointParserService.ɵfac = function DatapointParserService_Factory(t) { return new (t || DatapointParserService)(); };
DatapointParserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DatapointParserService_Factory() { return new DatapointParserService(); }, token: DatapointParserService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatapointParserService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DatapointParserService };

//# sourceMappingURL=c8y-ngx-components-datapoint-library-services.js.map