import { Injectable, Optional, Component, ViewChild, Input, NgModule } from '@angular/core';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { gettext, OperationRealtimeService, ViewContext, CoreModule, HOOK_ROUTE } from '@c8y/ngx-components';
import { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';
import { OperationsListItemDetailsModule } from '@c8y/ngx-components/operations/operations-list-item-details';
import { BulkOperationListItemService } from '@c8y/ngx-components/operations/bulk-operation-list-item';
import { OPERATION_STATUS_OPTIONS_MAP, OperationsService, OperationsSharedModule } from '@c8y/ngx-components/operations/shared';
import { flatten } from 'lodash-es';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { tap, switchMap, shareReplay } from 'rxjs/operators';
import { __awaiter } from 'tslib';
import { OperationService, SmartRulesService, OperationStatus } from '@c8y/client';
import { Ng1SmartRulesService } from '@c8y/ngx-components/upgrade';

class OperationsListService {
    constructor(operationService, smartRulesService, ng1SmartRulesService) {
        this.operationService = operationService;
        this.smartRulesService = smartRulesService;
        this.ng1SmartRulesService = ng1SmartRulesService;
    }
    getOperations(customFilter = {}) {
        const filter = Object.assign({ withTotalPages: true, withDeleted: true, pageSize: 50, dateFrom: new Date(0).toISOString(), revert: true }, customFilter);
        return this.operationService.list(filter);
    }
    isSmartRulesMicroserviceAvailable() {
        return this.smartRulesService.isMicroserviceAvailable();
    }
    getSmartRulesCreatePermissions() {
        if (this.ng1SmartRulesService && this.ng1SmartRulesService.permissionsCfgs) {
            return this.ng1SmartRulesService.permissionsCfgs.create;
        }
    }
    createSmartRule(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.ng1SmartRulesService) {
                return yield this.ng1SmartRulesService.addNewForOutputOperationWithUI(operation);
            }
        });
    }
}
OperationsListService.decorators = [
    { type: Injectable }
];
OperationsListService.ctorParameters = () => [
    { type: OperationService },
    { type: SmartRulesService },
    { type: Ng1SmartRulesService, decorators: [{ type: Optional }] }
];

class OperationsListComponent {
    constructor(realtime, operationsListService, route) {
        var _a;
        this.realtime = realtime;
        this.operationsListService = operationsListService;
        this.route = route;
        this.deviceId = (_a = this.route.snapshot.parent.data.contextData) === null || _a === void 0 ? void 0 : _a.id;
        this.OPERATION_STATUS_OPTIONS_MAP = OPERATION_STATUS_OPTIONS_MAP;
        this.refreshLoading = false;
        this.statusFilter$ = new BehaviorSubject(null);
        this.reload$ = new BehaviorSubject(null);
        this.operations$ = combineLatest(this.statusFilter$, this.reload$).pipe(tap(() => {
            this.refreshLoading = true;
        }), switchMap(([statusFilters]) => this.filter(statusFilters)), tap(() => {
            this.refreshLoading = false;
        }), shareReplay(1));
        this.title = this.route.snapshot.parent.data.contextData
            ? this.route.snapshot.parent.data.contextData.name
            : gettext('Device control');
    }
    filter(statusFilters) {
        const status = statusFilters && statusFilters.length > 0
            ? {
                status: flatten(statusFilters.map(statusFilter => statusFilter.status))
            }
            : {};
        return this.getOperations(status);
    }
    getOperations(filter) {
        const queryFilter = this.deviceId ? Object.assign(Object.assign({}, filter), { deviceId: this.deviceId }) : filter;
        return this.operationsListService.getOperations(queryFilter);
    }
    compareOperations(operationA, operationB) {
        return (new Date(operationA.creationTime).getTime() - new Date(operationB.creationTime).getTime());
    }
}
OperationsListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-operations-list',
                template: "<c8y-title> {{ title | translate }}</c8y-title>\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"OPERATION_STATUS_OPTIONS_MAP\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link d-flex a-i-center\"\n    title=\"{{ 'Reload' | translate }}\"\n    (click)=\"reload$.next()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': refreshLoading }\" class=\"m-r-4\"></i>\n    <span class=\"text-truncate\">\n      {{ 'Reload' | translate }}\n    </span>\n  </button>\n</c8y-action-bar-item>\n\n<!-- Empty state  -->\n<c8y-ui-empty-state\n  [icon]=\"'c8y-energy'\"\n  [title]=\"'No items to display.' | translate\"\n  [subtitle]=\"'Operations will be displayed here.' | translate\"\n  *ngIf=\"(operations$ | async)?.data.length === 0 && !(statusFilter$ | async)\"\n></c8y-ui-empty-state>\n<!-- No results empty state -->\n<c8y-ui-empty-state\n  [icon]=\"'search'\"\n  [title]=\"'No results to display.' | translate\"\n  [subtitle]=\"'Adjust or reset the filter.' | translate\"\n  *ngIf=\"(operations$ | async)?.data.length === 0 && (statusFilter$ | async)\"\n>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"statusFilter.reset()\"\n    translate\n  >\n    Reset filter\n  </button>\n</c8y-ui-empty-state>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group class=\"m-b-24\" [ngClass]=\"{ 'dd-low': (operations$ | async)?.data.length < 10 }\">\n  <c8y-li\n    class=\"page-sticky-header c8y-list__item--empty-actions hidden-xs\"\n    *ngIf=\"(operations$ | async)?.data.length\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-57\">\n      <div class=\"col-5\">\n        {{ 'Operation' | translate }}\n      </div>\n      <div class=\"flex-grow\" *ngIf=\"!deviceId\">\n        {{ 'Device' | translate }}\n      </div>\n      <div class=\"col-4\">\n        {{ 'Date' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let op of operations$ | async;\n      let i = index;\n      realtime: realtime;\n      realtimeOptions: { entityOrId: deviceId };\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto'\n    \"\n  >\n    <c8y-operations-list-item [operation]=\"op\" (reload)=\"reload$.next()\" class=\"d-contents\">\n    </c8y-operations-list-item>\n  </div>\n</c8y-list-group>\n",
                providers: [OperationRealtimeService]
            },] }
];
OperationsListComponent.ctorParameters = () => [
    { type: OperationRealtimeService },
    { type: OperationsListService },
    { type: ActivatedRoute }
];
OperationsListComponent.propDecorators = {
    statusFilter: [{ type: ViewChild, args: ['statusFilter', { static: true },] }]
};

class OperationsListItemComponent {
    constructor(bulkOperationListItemService, sharedService, operationsListService, route, router) {
        var _a, _b, _c, _d;
        this.bulkOperationListItemService = bulkOperationListItemService;
        this.sharedService = sharedService;
        this.operationsListService = operationsListService;
        this.route = route;
        this.router = router;
        this.collapsed = true;
        this.readOnly = false;
        this.noExpandToggle = false;
        this.refreshLoading = false;
        this.OPERATION_STATUS = OperationStatus;
        this.OPERATION_STATUS_OPTIONS_MAP = OPERATION_STATUS_OPTIONS_MAP;
        this.deviceId = ((_b = (_a = this.route.snapshot.parent) === null || _a === void 0 ? void 0 : _a.data.contextData) === null || _b === void 0 ? void 0 : _b.id) ||
            ((_d = (_c = this.route.snapshot.firstChild) === null || _c === void 0 ? void 0 : _c.data.contextData) === null || _d === void 0 ? void 0 : _d.id);
        this.isSmartRulesMicroserviceAvailable = false;
    }
    ngOnInit() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.isSmartRulesMicroserviceAvailable =
                yield this.operationsListService.isSmartRulesMicroserviceAvailable();
            this.operationTitle =
                ((_a = this.operation.c8y_Command) === null || _a === void 0 ? void 0 : _a.text) ||
                    this.operation.description ||
                    gettext('No command text or description available');
            const smartRulesCreatePermissions = this.operationsListService.getSmartRulesCreatePermissions();
            if (smartRulesCreatePermissions) {
                this.inventoryPermissions = smartRulesCreatePermissions[0].anyRole;
                this.smartRuleAdminPermissions = smartRulesCreatePermissions[1].anyRole;
            }
        });
    }
    createCustomizedBulkOperation($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.router.navigateByUrl(`/devicecontrol/single/create-bulk/${this.operation.id}`);
    }
}
OperationsListItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-operations-list-item',
                template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': noExpandToggle }\"\n  [collapsed]=\"collapsed\"\n  #listItem\n  id=\"{{ operation.id }}\"\n>\n  <c8y-li-icon>\n    <i\n      [c8yIcon]=\"OPERATION_STATUS_OPTIONS_MAP[operation.status].icon\"\n      [ngClass]=\"OPERATION_STATUS_OPTIONS_MAP[operation.status].styleClass\"\n      [tooltip]=\"OPERATION_STATUS_OPTIONS_MAP[operation.status].label | translate\"\n    ></i>\n  </c8y-li-icon>\n  <div\n    [ngClass]=\"{ 'content-flex-58': !readOnly, 'content-flex-50': readOnly }\"\n    [style.cursor]=\"!noExpandToggle ? 'pointer' : ''\"\n    (click)=\"!noExpandToggle && listItem.toggleCollapsed()\"\n  >\n    <div class=\"col-5\">\n      <span class=\"text-truncate\" title=\"{{ operationTitle | translate }}\">\n        {{ operationTitle | translate }}\n      </span>\n    </div>\n    <div class=\"col-3\" *ngIf=\"!deviceId\">\n      <a [routerLink]=\"['/device', operation.deviceId, 'device-info']\" routerLinkActive=\"active\">\n        {{ operation.deviceName }}\n      </a>\n    </div>\n    <div class=\"col-3\">\n      <small class=\"icon-flex text-muted\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        {{ operation.creationTime | c8yDate }}\n      </small>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!readOnly\">\n    <c8y-li-action\n      label=\"{{ 'Schedule as bulk operation' | translate }}\"\n      (click)=\"createCustomizedBulkOperation($event)\"\n      icon=\"c8y-icon c8y-icon-energy\"\n    >\n    </c8y-li-action>\n    <ng-container *c8yIfAllowed=\"inventoryPermissions; allowAny: true\">\n      <ng-container *c8yIfAllowed=\"smartRuleAdminPermissions; allowAny: true\">\n        <c8y-li-action\n          *ngIf=\"isSmartRulesMicroserviceAvailable\"\n          label=\"{{ 'Create smart rule' | translate }}\"\n          (click)=\"operationsListService.createSmartRule(operation)\"\n          icon=\"sliders\"\n        >\n        </c8y-li-action>\n      </ng-container>\n    </ng-container>\n    <c8y-li-action\n      *ngIf=\"operation.status === OPERATION_STATUS.PENDING\"\n      label=\"{{ 'Cancel operation' | translate }}\"\n      (click)=\"$event.stopPropagation(); sharedService.cancel(operation)\"\n      icon=\"times\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <c8y-operation-details-tabs\n      *ngIf=\"!listItem.collapsed\"\n      [operation]=\"operation\"\n      [bulkOperationModalDetailsService]=\"bulkOperationListItemService\"\n    ></c8y-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n"
            },] }
];
OperationsListItemComponent.ctorParameters = () => [
    { type: BulkOperationListItemService },
    { type: OperationsService },
    { type: OperationsListService },
    { type: ActivatedRoute },
    { type: Router }
];
OperationsListItemComponent.propDecorators = {
    operation: [{ type: Input }],
    collapsed: [{ type: Input }],
    readOnly: [{ type: Input }],
    noExpandToggle: [{ type: Input }],
    listItem: [{ type: ViewChild, args: ['listItem', { static: true },] }]
};

const singleOperationListRoutes = [
    {
        path: 'devicecontrol/single',
        component: OperationsListComponent
    }
];
const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'control',
        component: OperationsListComponent,
        label: gettext('Control'),
        icon: 'c8y-icon c8y-icon-device-control',
        priority: 600
    }
];
/**
 * This module allows for displaying the list item details of single and bulk operations.
 */
class OperationsListModule {
}
OperationsListModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule,
                    StatusFilterModule,
                    OperationsListItemDetailsModule,
                    OperationsSharedModule,
                    TooltipModule,
                    RouterModule.forChild(singleOperationListRoutes)
                ],
                declarations: [OperationsListComponent, OperationsListItemComponent],
                exports: [OperationsListComponent, OperationsListItemComponent],
                providers: [
                    OperationsListService,
                    BulkOperationListItemService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { OperationsListComponent, OperationsListItemComponent, OperationsListModule, OperationsListService, singleOperationListRoutes, ɵ0 };
//# sourceMappingURL=c8y-ngx-components-operations-operations-list.js.map
