import { Component, Input, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { gettext, AlertService, CoreModule } from '@c8y/ngx-components';
import { StatusFilterComponent, StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';
import { __awaiter } from 'tslib';
import { InventoryService, OperationService, OperationStatus } from '@c8y/client';
import { OPERATION_STATUS_LABELS, OPERATION_STATUS_OPTIONS_MAP } from '@c8y/ngx-components/operations/shared';
import { omit } from 'lodash-es';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-bootstrap/tooltip';
import * as ɵngcc5 from '@angular/router';
import * as ɵngcc6 from 'ngx-bootstrap/popover';
import * as ɵngcc7 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc8 from '@c8y/ngx-components/operations/status-filter';

const _c0 = ["failureReason"];
function SingleOperationItemComponent_a_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 16);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.operation.failureReason));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "info-circle text-primary");
} }
function SingleOperationItemComponent_div_22_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "a", 19);
    ɵngcc0.ɵɵlistener("click", function SingleOperationItemComponent_div_22_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.retrySingleOperation(ctx_r3.operation); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 17);
    ɵngcc0.ɵɵelementStart(4, "span", 20);
    ɵngcc0.ɵɵtext(5, "Retry operation");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Retry operation"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "repeat m-r-4");
} }
const _c1 = function (a0, a1) { return { "content-flex-80": a0, "content-flex-50": a1 }; };
const _c2 = function (a1) { return ["/device", a1, "device-info"]; };
function SingleOperationsListComponent_ng_container_0_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "button", 10);
    ɵngcc0.ɵɵlistener("click", function SingleOperationsListComponent_ng_container_0_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.retryBulkOperation(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵelementStart(4, "span", 12);
    ɵngcc0.ɵɵtext(5, "Retry failed operations");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Retry failed operations"));
} }
function SingleOperationsListComponent_ng_container_0_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "c8y-single-operation-item", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r6 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("operation", operation_r6)("readOnly", ctx_r2.readOnly);
} }
function SingleOperationsListComponent_ng_container_0_c8y_li_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-body");
    ɵngcc0.ɵɵelementStart(2, "div", 15);
    ɵngcc0.ɵɵelement(3, "h2", 16);
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵelementStart(5, "h3", 12);
    ɵngcc0.ɵɵtext(6, "No single operations of the selected status to display.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "p", 17);
    ɵngcc0.ɵɵtext(8, "Single operations will be displayed here");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SingleOperationsListComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtext(2, "Operations");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 2);
    ɵngcc0.ɵɵelementStart(4, "div", 3);
    ɵngcc0.ɵɵelementStart(5, "span", 4);
    ɵngcc0.ɵɵtext(6, "Filter by status");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-status-filter", 5);
    ɵngcc0.ɵɵlistener("onFilterChanged", function SingleOperationsListComponent_ng_container_0_Template_c8y_status_filter_onFilterChanged_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.getOperationsByStatus($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, SingleOperationsListComponent_ng_container_0_div_8_Template, 6, 3, "div", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 7);
    ɵngcc0.ɵɵelementStart(10, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(11, SingleOperationsListComponent_ng_container_0_div_11_Template, 2, 2, "div", 8);
    ɵngcc0.ɵɵtemplate(12, SingleOperationsListComponent_ng_container_0_c8y_li_12_Template, 9, 0, "c8y-li", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("options", ctx_r0.OPERATION_STATUS_OPTIONS_MAP);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.readOnly && ctx_r0.bulkOperation.progress.failed > 0);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r0.singleOperations)("c8yForLoadMore", "auto");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.singleOperations && ctx_r0.singleOperations.data.length === 0);
} }
class SingleOperationItemComponent {
    constructor(alertService, inventoryService, operationService) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.device = {};
        this.OPERATION_STATUS_LABELS = OPERATION_STATUS_LABELS;
        this.OPERATION_STATUS_OPTIONS_MAP = OPERATION_STATUS_OPTIONS_MAP;
        this.readOnly = false;
    }
    ngOnInit() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.device = (_a = (yield this.inventoryService.detail(this.operation.deviceId))) === null || _a === void 0 ? void 0 : _a.data;
        });
    }
    retrySingleOperation(singleOperation) {
        return __awaiter(this, void 0, void 0, function* () {
            const operationToCreate = omit(singleOperation, [
                'id',
                'self',
                'status',
                'failureReason',
                'creationTime',
                'delivery'
            ]);
            try {
                yield this.operationService.create(operationToCreate);
                this.alertService.success(gettext('Operation created.'));
            }
            catch (er) {
                this.alertService.addServerFailure(er);
            }
        });
    }
}
SingleOperationItemComponent.ɵfac = function SingleOperationItemComponent_Factory(t) { return new (t || SingleOperationItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OperationService)); };
SingleOperationItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SingleOperationItemComponent, selectors: [["c8y-single-operation-item"]], viewQuery: function SingleOperationItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.failureReasonRef = _t.first);
    } }, inputs: { readOnly: "readOnly", operation: "operation" }, decls: 23, vars: 22, consts: [[1, "c8y-list__item--double-actions"], [3, "c8yIcon", "ngClass", "tooltip"], [3, "ngClass"], [1, "col-4"], [1, "m-r-4"], [3, "mo"], ["routerLinkActive", "active", 3, "routerLink"], [1, "col-3"], [1, "icon-flex", "text-muted"], ["c8yIcon", "calendar", 1, "m-r-4"], [1, "col-5"], [1, "flex-row"], [1, "text-truncate"], ["failureReason", ""], ["class", "m-l-8", "placement", "left", "outsideClick", "true", 3, "popover", 4, "ngIf"], ["class", "showOnHover p-l-8 p-r-8 fit-h-20 flex-item-right", 4, "ngIf"], ["placement", "left", "outsideClick", "true", 1, "m-l-8", 3, "popover"], [3, "c8yIcon"], [1, "showOnHover", "p-l-8", "p-r-8", "fit-h-20", "flex-item-right"], [1, "btn", "btn-default", "btn-xs", 3, "title", "click"], ["translate", ""]], template: function SingleOperationItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-li", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
        ɵngcc0.ɵɵelement(2, "i", 1);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "span", 4);
        ɵngcc0.ɵɵelement(7, "device-status", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "a", 6);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵelementStart(11, "small", 8);
        ɵngcc0.ɵɵelement(12, "i", 9);
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "div", 10);
        ɵngcc0.ɵɵelementStart(16, "div", 11);
        ɵngcc0.ɵɵelementStart(17, "span", 12, 13);
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(21, SingleOperationItemComponent_a_21_Template, 3, 4, "a", 14);
        ɵngcc0.ɵɵtemplate(22, SingleOperationItemComponent_div_22_Template, 6, 4, "div", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(18);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.OPERATION_STATUS_OPTIONS_MAP[ctx.operation.status].icon)("ngClass", ctx.OPERATION_STATUS_OPTIONS_MAP[ctx.operation.status].styleClass)("tooltip", ɵngcc0.ɵɵpipeBind1(3, 11, ctx.operation.status.toString()));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(17, _c1, !ctx.readOnly, ctx.readOnly));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("mo", ctx.device);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(20, _c2, ctx.operation.deviceId));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.operation.deviceName, " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 13, ctx.operation.creationTime), " ");
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 15, ctx.operation.failureReason), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", _r0.offsetWidth < _r0.scrollWidth);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.readOnly && ctx.operation.status.toString() == ctx.OPERATION_STATUS_OPTIONS_MAP.FAILED.status.toString());
    } }, directives: [ɵngcc1.ListItemComponent, ɵngcc1.ListItemIconComponent, ɵngcc1.IconDirective, ɵngcc3.NgClass, ɵngcc4.TooltipDirective, ɵngcc1.DeviceStatusComponent, ɵngcc5.RouterLinkWithHref, ɵngcc5.RouterLinkActive, ɵngcc3.NgIf, ɵngcc6.PopoverDirective, ɵngcc1.C8yTranslateDirective], pipes: [ɵngcc1.C8yTranslatePipe, ɵngcc1.DatePipe], encapsulation: 2 });
SingleOperationItemComponent.ctorParameters = () => [
    { type: AlertService },
    { type: InventoryService },
    { type: OperationService }
];
SingleOperationItemComponent.propDecorators = {
    operation: [{ type: Input }],
    readOnly: [{ type: Input }],
    failureReasonRef: [{ type: ViewChild, args: ['failureReason', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SingleOperationItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-single-operation-item',
                template: "<c8y-li class=\"c8y-list__item--double-actions\">\n  <c8y-li-icon>\n    <i\n      [c8yIcon]=\"OPERATION_STATUS_OPTIONS_MAP[operation.status].icon\"\n      [ngClass]=\"OPERATION_STATUS_OPTIONS_MAP[operation.status].styleClass\"\n      [tooltip]=\"operation.status.toString() | translate\"\n    ></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-80': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-4\">\n      <span class=\"m-r-4\">\n        <device-status [mo]=\"device\"></device-status>\n      </span>\n      <a [routerLink]=\"['/device', operation.deviceId, 'device-info']\" routerLinkActive=\"active\">\n        {{ operation.deviceName }}\n      </a>\n    </div>\n    <div class=\"col-3\">\n      <small class=\"icon-flex text-muted\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        {{ operation.creationTime | c8yDate }}\n      </small>\n    </div>\n    <div class=\"col-5\">\n      <div class=\"flex-row\">\n        <span class=\"text-truncate\" #failureReason>\n          {{ operation.failureReason | translate }}\n        </span>\n        <a\n          *ngIf=\"failureReason.offsetWidth < failureReason.scrollWidth\"\n          class=\"m-l-8\"\n          popover=\"{{ operation.failureReason | translate }}\"\n          placement=\"left\"\n          outsideClick=\"true\"\n        >\n          <i [c8yIcon]=\"'info-circle text-primary'\"></i>\n        </a>\n        <div\n          class=\"showOnHover p-l-8 p-r-8 fit-h-20 flex-item-right\"\n          *ngIf=\"\n            !readOnly &&\n            operation.status.toString() == OPERATION_STATUS_OPTIONS_MAP.FAILED.status.toString()\n          \"\n        >\n          <a\n            class=\"btn btn-default btn-xs\"\n            (click)=\"retrySingleOperation(operation)\"\n            title=\"{{ 'Retry operation' | translate }}\"\n          >\n            <i [c8yIcon]=\"'repeat m-r-4'\"></i>\n            <span translate>Retry operation</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</c8y-li>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AlertService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc2.OperationService }]; }, { readOnly: [{
            type: Input
        }], operation: [{
            type: Input
        }], failureReasonRef: [{
            type: ViewChild,
            args: ['failureReason', { static: true }]
        }] }); })();

class SingleOperationsListComponent {
    constructor(bulkOperationsService) {
        this.bulkOperationsService = bulkOperationsService;
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.OPERATION_STATUS = Object.assign(Object.assign({}, OperationStatus), { ALL: gettext('ALL') });
        this.OPERATION_STATUS_LABELS = OPERATION_STATUS_LABELS;
        this.OPERATION_STATUS_OPTIONS_MAP = OPERATION_STATUS_OPTIONS_MAP;
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.statusFilter) {
                this.filterOperationsByType();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.filterOperationsByType();
        }
    }
    filterOperationsByType() {
        if (this.statusFilter) {
            const typeFilter = this.getFilterTypeOfSingleOperations();
            this.statusFilter.preset(typeFilter === this.OPERATION_STATUS.ALL
                ? []
                : [{ label: this.OPERATION_STATUS_LABELS[typeFilter] }]);
        }
        else {
            setTimeout(this.filterOperationsByType.bind(this));
        }
    }
    getFilterTypeOfSingleOperations() {
        const progress = this.bulkOperation.progress;
        if (progress.failed > 0) {
            return this.OPERATION_STATUS.FAILED;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
            return this.OPERATION_STATUS.EXECUTING;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
            return this.OPERATION_STATUS.PENDING;
        }
        else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
            return this.OPERATION_STATUS.SUCCESSFUL;
        }
        return this.OPERATION_STATUS.ALL;
    }
    getOperationsByStatus(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            this.singleOperations = yield this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id);
        });
    }
    retryBulkOperation() {
        this.onRetryFailedOperations.emit(this.bulkOperation);
    }
}
SingleOperationsListComponent.ɵfac = function SingleOperationsListComponent_Factory(t) { return new (t || SingleOperationsListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.BulkOperationsService)); };
SingleOperationsListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SingleOperationsListComponent, selectors: [["c8y-single-operations-list"]], viewQuery: function SingleOperationsListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(StatusFilterComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.statusFilter = _t.first);
    } }, inputs: { readOnly: "readOnly", bulkOperation: "bulkOperation" }, outputs: { onRetryFailedOperations: "onRetryFailedOperations" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], ["translate", "", 1, "legend", "form-block", "p-t-16", "m-b-0"], [1, "d-flex", "a-i-center"], [1, "d-flex", "a-i-center", "p-b-8"], ["translate", "", 1, "m-r-4", "text-medium"], ["small", "", 3, "options", "onFilterChanged"], ["class", "m-l-auto p-b-8", 4, "ngIf"], [1, "inner-scroll"], ["class", "d-contents", 4, "c8yFor", "c8yForOf", "c8yForLoadMore"], [1, "m-l-auto", "p-b-8"], [1, "btn", "btn-navbar", 3, "title", "click"], ["c8yIcon", "repeat", 1, "m-r-4"], ["translate", ""], [1, "d-contents"], [1, "d-contents", 3, "operation", "readOnly"], [1, "c8y-empty-state", "text-center"], [1, "c8y-icon", "c8y-icon-energy", "c8y-icon-duocolor", "m-b-16"], ["translate", "", 1, "m-b-16"]], template: function SingleOperationsListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SingleOperationsListComponent_ng_container_0_Template, 13, 5, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.failed || ctx.bulkOperation.progress.executing || ctx.bulkOperation.progress.pending || ctx.bulkOperation.progress.successful);
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.C8yTranslateDirective, ɵngcc8.StatusFilterComponent, ɵngcc1.ListGroupComponent, ɵngcc1.ForOfDirective, ɵngcc1.IconDirective, SingleOperationItemComponent, ɵngcc1.ListItemComponent, ɵngcc1.ListItemBodyComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
SingleOperationsListComponent.ctorParameters = () => [
    { type: BulkOperationsService }
];
SingleOperationsListComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    readOnly: [{ type: Input }],
    onRetryFailedOperations: [{ type: Output }],
    statusFilter: [{ type: ViewChild, args: [StatusFilterComponent, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SingleOperationsListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-single-operations-list',
                template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block p-t-16 m-b-0\" translate>Operations</div>\n  <div class=\"d-flex a-i-center\">\n    <div class=\"d-flex a-i-center p-b-8\">\n      <span class=\"m-r-4 text-medium\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"OPERATION_STATUS_OPTIONS_MAP\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"m-l-auto p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i c8yIcon=\"repeat\" class=\"m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item [operation]=\"operation\" [readOnly]=\"readOnly\" class=\"d-contents\">\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc7.BulkOperationsService }]; }, { readOnly: [{
            type: Input
        }], onRetryFailedOperations: [{
            type: Output
        }], bulkOperation: [{
            type: Input
        }], statusFilter: [{
            type: ViewChild,
            args: [StatusFilterComponent, { static: false }]
        }] }); })();

/**
 * This module allows for displaying the list of single operations in a bulk operations details.
 */
class BulkSingleOperationsListModule {
}
BulkSingleOperationsListModule.ɵfac = function BulkSingleOperationsListModule_Factory(t) { return new (t || BulkSingleOperationsListModule)(); };
BulkSingleOperationsListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BulkSingleOperationsListModule });
BulkSingleOperationsListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CoreModule, PopoverModule, RouterModule, TooltipModule, StatusFilterModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkSingleOperationsListModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, PopoverModule, RouterModule, TooltipModule, StatusFilterModule],
                declarations: [SingleOperationsListComponent, SingleOperationItemComponent],
                entryComponents: [SingleOperationsListComponent, SingleOperationItemComponent],
                exports: [SingleOperationsListComponent, SingleOperationItemComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BulkSingleOperationsListModule, { declarations: function () { return [SingleOperationsListComponent, SingleOperationItemComponent]; }, imports: function () { return [CoreModule, PopoverModule, RouterModule, TooltipModule, StatusFilterModule]; }, exports: function () { return [SingleOperationsListComponent, SingleOperationItemComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { BulkSingleOperationsListModule, SingleOperationItemComponent, SingleOperationsListComponent };

//# sourceMappingURL=c8y-ngx-components-operations-bulk-single-operations-list.js.map