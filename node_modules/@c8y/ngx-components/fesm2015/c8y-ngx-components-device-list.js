import { __awaiter } from 'tslib';
import { Component, Injectable, NgModule } from '@angular/core';
import { DeviceGridService, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { SmartGroupsService } from '@c8y/client';
import { gettext, AlertService, NavigatorNode, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { of } from 'rxjs';
import { switchMap, tap, catchError, take } from 'rxjs/operators';
import { RouterModule } from '@angular/router';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '@c8y/ngx-components/device-grid';
import * as ɵngcc4 from '@c8y/ngx-components';
import * as ɵngcc5 from '@ngx-translate/core';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '@angular/router';
class AddSmartGroupComponent {
    constructor(modal, smartGroupsService, deviceGridService, alert, translateService) {
        this.modal = modal;
        this.smartGroupsService = smartGroupsService;
        this.deviceGridService = deviceGridService;
        this.alert = alert;
        this.translateService = translateService;
        this.smartGroup = {
            name: '',
            type: 'c8y_DynamicGroup',
            c8y_IsDynamicGroup: {}
        };
    }
    create() {
        return this.deviceGridService
            .getConfig$(this.configKey)
            .pipe(switchMap(config => {
            return this.smartGroupsService.create({
                smartGroup: this.smartGroup,
                deviceQueryString: this.deviceQuery,
                configurableColumns: config
            });
        }), tap(() => {
            this.alert.success(this.translateService.instant(gettext('Smart group {{ name }} created.'), {
                name: this.smartGroup.name
            }));
            this.modal.hide();
        }), catchError(ex => {
            this.alert.addServerFailure(ex);
            return of([]);
        }), take(1))
            .subscribe();
    }
    close() {
        this.modal.hide();
    }
}
AddSmartGroupComponent.ɵfac = function AddSmartGroupComponent_Factory(t) { return new (t || AddSmartGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SmartGroupsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DeviceGridService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.TranslateService)); };
AddSmartGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddSmartGroupComponent, selectors: [["c8y-add-smart-group"]], decls: 21, vars: 12, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [3, "c8yIcon"], ["translate", ""], [1, "modal-inner-scroll"], [1, "modal-body"], ["createSmartGroup", "ngForm"], ["translate", "", "for", "name"], ["id", "name", "type", "text", "autocomplete", "off", "name", "name", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], [1, "modal-footer"], ["translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function AddSmartGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "i", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4, "Create smart group");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "form", null, 6);
        ɵngcc0.ɵɵelementStart(9, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(10, "label", 7);
        ɵngcc0.ɵɵtext(11, "Group name");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "input", 8);
        ɵngcc0.ɵɵlistener("ngModelChange", function AddSmartGroupComponent_Template_input_ngModelChange_12_listener($event) { return ctx.smartGroup.name = $event; });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵelementStart(15, "button", 10);
        ɵngcc0.ɵɵlistener("click", function AddSmartGroupComponent_Template_button_click_15_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵtext(17, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "button", 11);
        ɵngcc0.ɵɵlistener("click", function AddSmartGroupComponent_Template_button_click_18_listener() { return ctx.create(); });
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtext(20, " Create ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "c8y-group-smart");
        ɵngcc0.ɵɵadvance(10);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(13, 6, "e.g. My smart group"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.smartGroup.name);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(16, 8, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 10, "Create"));
        ɵngcc0.ɵɵproperty("disabled", _r0.form.invalid);
    } }, directives: [ɵngcc4.IconDirective, ɵngcc4.C8yTranslateDirective, ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc4.FormGroupComponent, ɵngcc4.RequiredInputPlaceholderDirective, ɵngcc6.DefaultValueAccessor, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel], pipes: [ɵngcc4.C8yTranslatePipe], encapsulation: 2 });
AddSmartGroupComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: SmartGroupsService },
    { type: DeviceGridService },
    { type: AlertService },
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddSmartGroupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-add-smart-group',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-group-smart'\"></i>\n    <h4 translate>Create smart group</h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #createSmartGroup=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Group name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"smartGroup.name\"\n            placeholder=\"{{ 'e.g. My smart group' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Create' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createSmartGroup.form.invalid\"\n      translate\n    >\n      Create\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BsModalRef }, { type: ɵngcc2.SmartGroupsService }, { type: ɵngcc3.DeviceGridService }, { type: ɵngcc4.AlertService }, { type: ɵngcc5.TranslateService }]; }, null); })();

class DeviceListComponent {
    constructor(deviceGridService, bsModalService) {
        this.deviceGridService = deviceGridService;
        this.bsModalService = bsModalService;
        this.GRID_CONFIG_KEY = 'device-grid-all';
        this.count$ = this.deviceGridService.getTotal({});
    }
    createSmartGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                configKey: this.GRID_CONFIG_KEY,
                deviceQuery: this.deviceQueryStringOutput
            };
            this.bsModalService.show(AddSmartGroupComponent, {
                class: 'modal-sm',
                initialState
            });
        });
    }
}
DeviceListComponent.ɵfac = function DeviceListComponent_Factory(t) { return new (t || DeviceListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DeviceGridService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalService)); };
DeviceListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceListComponent, selectors: [["c8y-device-list"]], decls: 13, vars: 14, consts: [[3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "c8y-group-smart"], ["src", "/users-guide/device-management/#viewing-devices"], [1, "content-fullpage"], [3, "infiniteScroll", "columnsConfigKey", "onDeviceQueryStringChange"]], template: function DeviceListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(4, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DeviceListComponent_Template_button_click_4_listener() { return ctx.createSmartGroup(); });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelement(6, "i", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "c8y-help", 3);
        ɵngcc0.ɵɵelementStart(10, "div", 4);
        ɵngcc0.ɵɵelementStart(11, "c8y-device-grid", 5);
        ɵngcc0.ɵɵlistener("onDeviceQueryStringChange", function DeviceListComponent_Template_c8y_device_grid_onDeviceQueryStringChange_11_listener($event) { return ctx.deviceQueryStringOutput = $event; });
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 6, "All devices"), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 8, "Create smart group"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 10, "Create smart group"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("infiniteScroll", ɵngcc0.ɵɵpipeBind1(12, 12, ctx.count$) === undefined ? "auto" : undefined)("columnsConfigKey", ctx.GRID_CONFIG_KEY);
    } }, directives: [ɵngcc4.TitleComponent, ɵngcc4.ActionBarItemComponent, ɵngcc4.IconDirective, ɵngcc4.HelpComponent, ɵngcc3.DeviceGridComponent], pipes: [ɵngcc4.C8yTranslatePipe, ɵngcc7.AsyncPipe], encapsulation: 2 });
DeviceListComponent.ctorParameters = () => [
    { type: DeviceGridService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-list',
                template: "<c8y-title>\n  {{ 'All devices' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Create smart group' | translate }}\"\n    (click)=\"createSmartGroup()\"\n  >\n    <i c8yIcon=\"c8y-group-smart\"></i>\n    {{ 'Create smart group' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#viewing-devices\"></c8y-help>\n\n<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [infiniteScroll]=\"(count$ | async) === undefined ? 'auto' : undefined\"\n    [columnsConfigKey]=\"GRID_CONFIG_KEY\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.DeviceGridService }, { type: ɵngcc1.BsModalService }]; }, null); })();

class DeviceListNavigationFactory {
    constructor() {
        this.navs = [];
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            this.navs.push(new NavigatorNode({
                label: gettext('All devices'),
                path: 'device',
                icon: 'c8y-device-management',
                parent: {
                    label: gettext('Devices'),
                    icon: 'exchange'
                },
                priority: 2000
            }));
            return this.navs;
        });
    }
}
DeviceListNavigationFactory.ɵfac = function DeviceListNavigationFactory_Factory(t) { return new (t || DeviceListNavigationFactory)(); };
DeviceListNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceListNavigationFactory, factory: DeviceListNavigationFactory.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceListNavigationFactory, [{
        type: Injectable
    }], function () { return []; }, null); })();

const routes = [
    {
        path: 'device',
        component: DeviceListComponent
    }
];
class DeviceListModule {
}
DeviceListModule.ɵfac = function DeviceListModule_Factory(t) { return new (t || DeviceListModule)(); };
DeviceListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceListModule });
DeviceListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: DeviceListNavigationFactory,
            multi: true
        }
    ], imports: [[CoreModule, CommonModule, DeviceGridModule, RouterModule.forChild(routes)]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceListModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, CommonModule, DeviceGridModule, RouterModule.forChild(routes)],
                declarations: [DeviceListComponent, AddSmartGroupComponent],
                entryComponents: [DeviceListComponent],
                exports: [],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: DeviceListNavigationFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceListModule, { declarations: function () { return [DeviceListComponent, AddSmartGroupComponent]; }, imports: function () { return [CoreModule, CommonModule, DeviceGridModule, ɵngcc8.RouterModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AddSmartGroupComponent, DeviceListComponent, DeviceListModule, DeviceListNavigationFactory };

//# sourceMappingURL=c8y-ngx-components-device-list.js.map