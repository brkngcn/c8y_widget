import { Component, Input, Optional, NgModule } from '@angular/core';
import { MeasurementRealtimeService, gettext, CoreModule, HOOK_COMPONENTS } from '@c8y/ngx-components';
import { DatapointLibraryService, DatapointSelectorModule } from '@c8y/ngx-components/datapoint-selector';
import { IconSelectorService, IconSelectorModule } from '@c8y/ngx-components/icon-selector';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { __awaiter } from 'tslib';
import { Validators, ControlContainer, NgForm, FormBuilder } from '@angular/forms';
import { WidgetConfigComponent, ContextDashboardComponent } from '@c8y/ngx-components/context-dashboard';
import { NEVER, combineLatest, from } from 'rxjs';
import { map, startWith, distinctUntilChanged, tap, filter, pairwise } from 'rxjs/operators';

function exactlyASingleDatapointActive() {
    return (control) => {
        const datapoints = control.value;
        if (!datapoints || !datapoints.length) {
            return null;
        }
        const activeDatapoints = datapoints.filter(datapoint => datapoint.__active);
        if (activeDatapoints.length === 1) {
            return null;
        }
        return { exactlyOneDatapointNeedsToBeActive: true };
    };
}
class KpiWidgetConfigComponent {
    constructor(formBuilder, form, iconSelector, widgetConfig, datapointLibrary) {
        this.formBuilder = formBuilder;
        this.form = form;
        this.iconSelector = iconSelector;
        this.widgetConfig = widgetConfig;
        this.datapointLibrary = datapointLibrary;
        this.datapointSelectionConfig = {};
        this.defaultFormOptions = {
            showRedRange: true,
            showYellowRange: true
        };
        this.availableIcons = [];
        this.limits = {
            fontSizeMax: 72,
            fontSizeMin: 18,
            numberOfDecimalPlacesMax: 10,
            numberOfDecimalPlacesMin: 0
        };
    }
    onBeforeSave(config) {
        if (this.formGroup.valid) {
            Object.assign(config, this.formGroup.value);
            return true;
        }
        return false;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.widgetConfig.context) === null || _a === void 0 ? void 0 : _a.id) {
                this.datapointSelectionConfig.contextAsset = (_b = this.widgetConfig) === null || _b === void 0 ? void 0 : _b.context;
            }
            this.initForm();
            if ((_c = this.config) === null || _c === void 0 ? void 0 : _c.datapoints) {
                this.config.datapoints = yield this.datapointLibrary.updateDatapoints((_d = this.config) === null || _d === void 0 ? void 0 : _d.datapoints);
                this.formGroup.patchValue({ datapoints: this.config.datapoints });
            }
        });
    }
    openIconSelector() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const icon = yield this.iconSelector.selectIcon({
                    currentSelection: this.formGroup.value.icon
                });
                this.formGroup.patchValue({ icon });
            }
            catch (_a) {
                // nothing to do
            }
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            numberOfDecimalPlaces: [
                1,
                [
                    Validators.required,
                    Validators.min(this.limits.numberOfDecimalPlacesMin),
                    Validators.max(this.limits.numberOfDecimalPlacesMax)
                ]
            ],
            showTimestamp: [true, []],
            showTrend: [true, []],
            showIcon: [true, []],
            icon: ['water', [Validators.required, Validators.minLength(1)]],
            fontSize: [
                36,
                [
                    Validators.required,
                    Validators.min(this.limits.fontSizeMin),
                    Validators.max(this.limits.fontSizeMax)
                ]
            ],
            datapoints: [
                [],
                [Validators.required, Validators.minLength(1), exactlyASingleDatapointActive()]
            ]
        });
        this.form.form.addControl('config', this.formGroup);
        this.formGroup.patchValue(this.config);
    }
}
KpiWidgetConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-kpi-widget-config',
                template: "<form [formGroup]=\"formGroup\" class=\"row\">\n  <div class=\"col-sm-6\">\n    <c8y-datapoint-selection-list\n      [defaultFormOptions]=\"defaultFormOptions\"\n      [config]=\"datapointSelectionConfig\"\n      [minActiveCount]=\"1\"\n      [maxActiveCount]=\"1\"\n      formControlName=\"datapoints\"\n      name=\"datapoints\"\n    >\n    </c8y-datapoint-selection-list>\n  </div>\n  <div class=\"col-sm-6\">\n    <c8y-form-group>\n      <label translate>Icon</label>\n      <div class=\"d-flex a-i-center\">\n        <div class=\"p-r-8 icon-32 text-muted\">\n          <i [c8yIcon]=\"formGroup.value.icon\"></i>\n        </div>\n        <button class=\"btn btn-default btn-xs\" (click)=\"openIconSelector()\">\n          {{ 'Change' | translate }}\n        </button>\n      </div>\n    </c8y-form-group>\n    <c8y-form-group>\n      <label [title]=\"'Number of decimal places' | translate\" translate>\n        Number of decimal places\n      </label>\n      <input\n        class=\"form-control\"\n        formControlName=\"numberOfDecimalPlaces\"\n        name=\"numberOfDecimalPlaces\"\n        type=\"number\"\n        [placeholder]=\"'e.g. {{ example }}' | translate: { example: 1 }\"\n      />\n      <c8y-messages [show]=\"formGroup.controls?.numberOfDecimalPlaces?.touched && formGroup?.controls?.numberOfDecimalPlaces?.errors\">\n      </c8y-messages>\n    </c8y-form-group>\n    <div>\n      <label> {{ 'Display' | translate }}</label>\n      <div class=\"d-flex gap-16 flex-wrap\">\n        <c8y-form-group>\n          <label [title]=\"'Show timestamp' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showTimestamp\" name=\"showTimestamp\" />\n            <span></span>\n            <span translate>Show timestamp</span>\n          </label>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label [title]=\"'Show icon' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showIcon\" name=\"showIcon\" />\n            <span></span>\n            <span translate>Show icon</span>\n          </label>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label [title]=\"'Show trend icon' | translate\" class=\"c8y-checkbox\">\n            <input type=\"checkbox\" formControlName=\"showTrend\" name=\"showTrend\" />\n            <span></span>\n            <span translate>Show trend icon</span>\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{\n                'Indicates the trend between the last two measurement values.' | translate\n              }}\"\n              container=\"body\"\n              [outsideClick]=\"true\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n          </label>\n        </c8y-form-group>\n      </div>\n\n      <c8y-form-group>\n        <label [title]=\"'Font size of measurement value (px)' | translate\" translate>\n          Font size of measurement value (px)\n        </label>\n        <input\n          class=\"form-control\"\n          formControlName=\"fontSize\"\n          name=\"fontSize\"\n          type=\"number\"\n          [placeholder]=\"'e.g. {{ example }}' | translate: { example: 36 }\"\n        />\n        <c8y-messages [show]=\"formGroup.controls?.fontSize?.touched && formGroup?.controls?.fontSize?.errors\">\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n  </div>\n</form>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
KpiWidgetConfigComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: NgForm },
    { type: IconSelectorService },
    { type: WidgetConfigComponent },
    { type: DatapointLibraryService }
];
KpiWidgetConfigComponent.propDecorators = {
    config: [{ type: Input }]
};

var ColorClass;
(function (ColorClass) {
    ColorClass["danger"] = "text-danger";
    ColorClass["warning"] = "text-warning";
    ColorClass["unknown"] = "";
})(ColorClass || (ColorClass = {}));
class KpiWidgetViewComponent {
    constructor(measurementRealtime, datapointLib, dashboard) {
        this.measurementRealtime = measurementRealtime;
        this.datapointLib = datapointLib;
        this.dashboard = dashboard;
        this.config = { datapoints: [] };
        this.state$ = NEVER;
        // used to differentiate between loading state and empty state
        this.noDataInitiallyInDB = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const datapoints = this.config.datapoints || [];
            const datapoint = datapoints.find(tmp => tmp.__active);
            if (!datapoint) {
                return;
            }
            this.state$ = this.setupObservable(datapoint);
        });
    }
    setupObservable(datapoint) {
        this.assignContextFromContextDashboard(datapoint);
        const latestMeasurement$ = this.getLatestMeasurement$(datapoint);
        const lastTwoValues$ = this.getLastTwoValuesOfObservable$(latestMeasurement$);
        const previousValue$ = lastTwoValues$.pipe(map(res => res[0]), startWith(undefined));
        const datapointUpdate$ = this.getDatapointLibraryEntry$(datapoint);
        const combineMeasurementAndDatapointLibEntry$ = combineLatest([
            latestMeasurement$,
            datapointUpdate$
        ]);
        const unit$ = combineMeasurementAndDatapointLibEntry$.pipe(map(([latestMeasurementValue, currentDatapoint]) => currentDatapoint.unit || latestMeasurementValue.unit || ''), startWith(''), distinctUntilChanged());
        return combineLatest([
            latestMeasurement$,
            previousValue$,
            this.getTrendOfLatestMeasurements$(lastTwoValues$),
            unit$,
            this.getColorClass$(combineMeasurementAndDatapointLibEntry$)
        ]).pipe(map(([latestMeasurement, previousValue, trend, unit, colorClass]) => {
            return {
                latestMeasurement,
                previousValue,
                trend,
                unit,
                colorClass
            };
        }));
    }
    getLatestMeasurement$(datapoint) {
        return this.measurementRealtime
            .latestValueOfSpecificMeasurement$(datapoint.fragment, datapoint.series, datapoint.__target, 
        // we only need the last two values in case we want to show a trend
        this.config.showTrend ? 2 : 1, 
        // null will be emitted in case no measurement was found initially
        true)
            .pipe(tap(measurement => {
            if (!measurement) {
                this.noDataInitiallyInDB = true;
            }
        }), filter(measurement => !!measurement), map(measurement => {
            return {
                unit: measurement[datapoint.fragment][datapoint.series].unit,
                value: measurement[datapoint.fragment][datapoint.series].value,
                date: measurement.time
            };
        }));
    }
    getDatapointLibraryEntry$(datapoint) {
        return from(this.datapointLib.updateDatapoints([datapoint], true)).pipe(map(tmp => tmp[0]), filter(tmp => !!tmp), startWith(datapoint));
    }
    getColorClass$(measurementAndDatapointCombination$) {
        return measurementAndDatapointCombination$.pipe(map(([latestMeasurementValue, currentDatapoint]) => {
            if (this.inRangeOf(currentDatapoint, latestMeasurementValue.value, 'redRangeMin', 'redRangeMax')) {
                return ColorClass.danger;
            }
            if (this.inRangeOf(currentDatapoint, latestMeasurementValue.value, 'yellowRangeMin', 'yellowRangeMax')) {
                return ColorClass.warning;
            }
            return ColorClass.unknown;
        }), startWith(ColorClass.unknown), distinctUntilChanged());
    }
    getLastTwoValuesOfObservable$(input$) {
        return input$.pipe(pairwise());
    }
    getTrendOfLatestMeasurements$(latestMeasurement$) {
        return latestMeasurement$.pipe(map(res => {
            if (res.length === 2) {
                const oldValue = res[0].value;
                const newValue = res[1].value;
                if (oldValue < newValue) {
                    return '45deg';
                }
                if (oldValue > newValue) {
                    return '135deg';
                }
            }
            return '90deg';
        }), startWith('90deg'), distinctUntilChanged());
    }
    inRangeOf(datapoint, measurementValue, minAttribute, maxAttribute) {
        if (typeof datapoint[minAttribute] === 'number' &&
            typeof datapoint[maxAttribute] === 'number') {
            if (measurementValue >= datapoint[minAttribute] &&
                measurementValue < datapoint[maxAttribute]) {
                return true;
            }
        }
        return false;
    }
    assignContextFromContextDashboard(datapoint) {
        var _a, _b;
        if (!((_a = this.dashboard) === null || _a === void 0 ? void 0 : _a.isDeviceTypeDashboard)) {
            return;
        }
        const context = (_b = this.dashboard) === null || _b === void 0 ? void 0 : _b.context;
        if (context === null || context === void 0 ? void 0 : context.id) {
            const { name, id } = context;
            datapoint.__target = { name, id };
        }
    }
}
KpiWidgetViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-kpi-widget-view',
                template: "<div\n  class=\"kpi-widget__container d-flex d-col fit-h fit-w a-i-center j-c-center\"\n  *ngIf=\"state$ | async as lastState; else noMeasurementFound\"\n>\n  <div class=\"d-flex a-i-center j-c-center fit-w\">\n    <div\n      class=\"m-r-16 flex-no-shrink text-muted\"\n      [ngClass]=\"lastState.colorClass\"\n      *ngIf=\"config.icon && config.showIcon\"\n    >\n      <i class=\"icon-32\" [c8yIcon]=\"config.icon\"></i>\n    </div>\n    <div class=\"text-truncate\">\n      <span\n        class=\"text-truncate text-medium\"\n        [ngClass]=\"lastState.colorClass\"\n        [ngStyle]=\"{ 'font-size': (config.fontSize || '36') + 'px' }\"\n        title=\"{{\n          lastState.colorClass === 'text-danger'\n            ? ('Within red range:' | translate)\n            : lastState.colorClass === 'text-warning'\n            ? ('Within yellow range:' | translate)\n            : ''\n        }} {{\n          lastState.latestMeasurement.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')\n        }} {{ lastState.unit || '' }}\"\n      >\n        {{\n          lastState.latestMeasurement.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')\n        }}\n        <small class=\"text-regular\">{{ lastState.unit || '' }}</small>\n      </span>\n    </div>\n    <div\n      class=\"dot dot-info dot-30 m-l-16 flex-no-shrink\"\n      *ngIf=\"config?.showTrend && lastState.previousValue as previousValue\"\n    >\n      <i\n        class=\"icon-20\"\n        [title]=\"\n          ('Previous value' | translate) +\n          ': ' +\n          (previousValue.value\n            | number\n              : '1.' +\n                  (config.numberOfDecimalPlaces || '0') +\n                  '-' +\n                  (config.numberOfDecimalPlaces || '0')) +\n          ' (' +\n          (previousValue.date | date: 'medium') +\n          ')'\n        \"\n        c8yIcon=\"arrow-dotted-up\"\n        [ngStyle]=\"{ transform: 'rotate(' + lastState.trend + ')' }\"\n      ></i>\n    </div>\n  </div>\n  <div class=\"d-flex j-c-center\">\n    <p *ngIf=\"config?.showTimestamp\" class=\"icon-flex text-center text-muted small\">\n      <i c8yIcon=\"calendar\"></i>\n      {{ lastState.latestMeasurement.date | date: 'medium' }}\n    </p>\n  </div>\n</div>\n\n<ng-template #noMeasurementFound>\n  <div class=\"d-flex fit-h fit-w j-c-center a-i-center\">\n    <c8y-ui-empty-state\n      *ngIf=\"noDataInitiallyInDB\"\n      class=\"fit-w\"\n      [icon]=\"'line-chart'\"\n      [title]=\"'No measurement to display.' | translate\"\n      [subtitle]=\"'Waiting for measurements to be created.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n    <c8y-loading *ngIf=\"!noDataInitiallyInDB\"></c8y-loading>\n  </div>\n</ng-template>\n",
                providers: [MeasurementRealtimeService]
            },] }
];
KpiWidgetViewComponent.ctorParameters = () => [
    { type: MeasurementRealtimeService },
    { type: DatapointLibraryService },
    { type: ContextDashboardComponent, decorators: [{ type: Optional }] }
];
KpiWidgetViewComponent.propDecorators = {
    config: [{ type: Input }]
};

// import for the preview img to get into the build.
let previewImage = '';
try {
    // tslint:disable-next-line: no-var-requires
    previewImage = require('@c8y/style/img/kpi-widget.png');
}
catch (ex) {
    // intended empty
}
const ɵ0 = [
    {
        id: 'kpi.widget',
        label: gettext('KPI Widget'),
        description: gettext('Displays the last measurement value of a device.'),
        component: KpiWidgetViewComponent,
        configComponent: KpiWidgetConfigComponent,
        previewImage,
        data: {
            settings: {
                noNewWidgets: false,
                widgetDefaults: {
                    _width: 2,
                    _height: 2
                },
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
];
class KpiWidgetModule {
}
KpiWidgetModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, DatapointSelectorModule, IconSelectorModule, PopoverModule],
                declarations: [KpiWidgetViewComponent, KpiWidgetConfigComponent],
                providers: [
                    {
                        provide: HOOK_COMPONENTS,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { KpiWidgetModule, ɵ0, KpiWidgetViewComponent as ɵa, KpiWidgetConfigComponent as ɵb };
//# sourceMappingURL=c8y-ngx-components-widgets-kpi-widget.js.map
