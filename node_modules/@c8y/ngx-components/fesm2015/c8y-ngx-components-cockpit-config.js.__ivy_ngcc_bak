import * as i0 from '@angular/core';
import { Injectable, Optional, Inject, Component, EventEmitter, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@c8y/ngx-components';
import { NavigatorNode, gettext, Permissions, AppStateService, NavigatorService, TabsService, SearchService, OptionsService, AlertService, C8yStepper, SetupComponent, Steppers, CoreModule, HOOK_ROUTE, HOOK_NAVIGATOR_NODES, HOOK_STEPPER } from '@c8y/ngx-components';
import * as i2 from '@c8y/ngx-components/ecosystem';
import { EcosystemService, EcosystemModule } from '@c8y/ngx-components/ecosystem';
import * as i2$1 from '@c8y/ngx-components/assets-navigator';
import { AssetNodeService, ASSET_NAVIGATOR_CONFIG, AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { __awaiter } from 'tslib';
import { InventoryService } from '@c8y/client';
import { isUndefined, startCase } from 'lodash-es';
import { map } from 'rxjs/operators';
import * as i3 from '@c8y/client';
import { CdkStep } from '@angular/cdk/stepper';

const DEFAULT_HOME_DASHBOARD_NAME = 'home-cockpit1';
const USER_HOME_DASHBOARD_NAME = 'home-cockpit-user';
const DEFAULT_CONFIG = {
    rootNodes: [],
    features: {
        alarms: true,
        dataExplorer: true,
        groups: true,
        reports: true,
        exports: true,
        dataPointLibrary: true,
        globalSmartRules: true,
        smartRules: true,
        subassets: true,
        search: true
    },
    hideNavigator: false,
    homeDashboardName: DEFAULT_HOME_DASHBOARD_NAME,
    userSpecificHomeDashboard: false
};
var HomeDashboardType;
(function (HomeDashboardType) {
    /**
     * Shared by all Cockpit apps
     */
    HomeDashboardType[HomeDashboardType["DEFAULT"] = 0] = "DEFAULT";
    /**
     * Only for the current Cockpit.
     */
    HomeDashboardType[HomeDashboardType["APP"] = 1] = "APP";
    /**
     * Only for the current user.
     */
    HomeDashboardType[HomeDashboardType["USER"] = 2] = "USER";
})(HomeDashboardType || (HomeDashboardType = {}));
const COCKPIT_CONFIG_PATH = 'cockpit-application-configuration';

class CockpitConfigGuard {
    constructor(permissions, appState, ecosystemService) {
        this.permissions = permissions;
        this.appState = appState;
        this.ecosystemService = ecosystemService;
        this.configNode = new NavigatorNode({
            path: `/${COCKPIT_CONFIG_PATH}`,
            parent: gettext('Configuration'),
            label: gettext('App configuration'),
            icon: 'imac-settings',
            preventDuplicates: true
        });
    }
    get() {
        if (this.canActivate()) {
            return this.configNode;
        }
        return;
    }
    canActivate() {
        return (this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
            this.ecosystemService.isOwner(this.appState.currentApplication.value));
    }
}
CockpitConfigGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function CockpitConfigGuard_Factory() { return new CockpitConfigGuard(i0.ɵɵinject(i1.Permissions), i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.EcosystemService)); }, token: CockpitConfigGuard, providedIn: "root" });
CockpitConfigGuard.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CockpitConfigGuard.ctorParameters = () => [
    { type: Permissions },
    { type: AppStateService },
    { type: EcosystemService }
];

class CockpitConfigService {
    constructor(navigatorService, tabsService, searchService, assetNodeService, inventoryService, appState, optionsService, permissions, moduleConfig) {
        this.navigatorService = navigatorService;
        this.tabsService = tabsService;
        this.searchService = searchService;
        this.assetNodeService = assetNodeService;
        this.inventoryService = inventoryService;
        this.appState = appState;
        this.optionsService = optionsService;
        this.permissions = permissions;
        this.moduleConfig = moduleConfig;
        this.currentConfig = DEFAULT_CONFIG;
        this.nodes = [];
        this.DEFAULT_NODE_PRIORITY = 2000;
        this.registerFilterForFeatures();
        this.init();
    }
    get excludedFeatureKeys() {
        return Object.keys(this.currentConfig.features).filter(key => !this.currentConfig.features[key]);
    }
    init() {
        this.appState.currentApplicationConfig.subscribe(config => {
            if (config) {
                this.currentConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);
                this.setRootNodes();
            }
        });
    }
    saveConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentConfig = config;
            yield this.storeApplicationConfig(this.currentConfig);
        });
    }
    refresh() {
        this.optionsService.hideNavigator = this.currentConfig.hideNavigator;
        this.navigatorService.refresh();
        this.searchService.refresh();
    }
    setRootNodes() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.addNodesToFactories();
            for (const node of this.currentConfig.rootNodes) {
                const { data } = yield this.inventoryService.detail(node.id);
                if (data) {
                    this.nodes.push(this.assetNodeService.createAssetNode({
                        mo: data,
                        hideDevices: node.hideDevices,
                        priority: isUndefined((_a = this.moduleConfig) === null || _a === void 0 ? void 0 : _a.rootNodePriority)
                            ? this.DEFAULT_NODE_PRIORITY
                            : this.moduleConfig.rootNodePriority
                    }));
                }
            }
            this.refresh();
        });
    }
    getAppDashboardName() {
        return `${DEFAULT_HOME_DASHBOARD_NAME.substring(0, DEFAULT_HOME_DASHBOARD_NAME.length - 1)}_${this.appState.state.app.id}`;
    }
    storeApplicationConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appState.updateApplicationConfig(config);
        });
    }
    addNodesToFactories() {
        const nodeInFactories = this.navigatorService.factories.find(nodes => nodes === this.nodes);
        const isNodeAlreadyInFactories = !!nodeInFactories;
        if (isNodeAlreadyInFactories) {
            this.nodes = nodeInFactories;
            this.nodes.length = 0;
        }
        else {
            this.navigatorService.factories.push(this.nodes);
        }
    }
    registerFilterForFeatures() {
        this.navigatorService.items$ = this.navigatorService.items$.pipe(map(nodes => this.setHiddenAttrLock(nodes)), map(nodes => this.filterNavigatorNode(nodes)));
        this.tabsService.items$ = this.tabsService.items$.pipe(map(tabs => this.filterTabs(tabs)));
        this.searchService.items$ = this.searchService.items$.pipe(map(search => (this.currentConfig.features.search ? search : [])));
    }
    setHiddenAttrLock(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (!this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
                        childNode.lockHiddenAttr === undefined &&
                        childNode.hidden === true) {
                        childNode.lockHiddenAttr = childNode.hidden;
                    }
                }
            });
        });
        return nodes;
    }
    filterTabs(tabs) {
        return tabs.filter(tab => !this.excludedFeatureKeys.some(key => tab.featureId === key));
    }
    filterNavigatorNode(nodes) {
        if (!this.currentConfig) {
            return nodes;
        }
        const disabledFeatures = this.excludedFeatureKeys;
        const filteredNodes = nodes.filter(node => !disabledFeatures.some(key => node.featureId === key));
        this.showAllChildrenNodes(nodes);
        this.hideChildrenNodesThatAreDisabled(nodes, disabledFeatures);
        return filteredNodes;
    }
    hideChildrenNodesThatAreDisabled(nodes, disabledFeatures) {
        nodes.forEach(node => disabledFeatures.forEach(key => {
            const childNode = node.find(key, 'featureId');
            if (childNode) {
                childNode.hidden = true;
            }
        }));
    }
    showAllChildrenNodes(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (childNode.lockHiddenAttr === true) {
                        return;
                    }
                    childNode.hidden = false;
                }
            });
        });
    }
}
CockpitConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CockpitConfigService_Factory() { return new CockpitConfigService(i0.ɵɵinject(i1.NavigatorService), i0.ɵɵinject(i1.TabsService), i0.ɵɵinject(i1.SearchService), i0.ɵɵinject(i2$1.AssetNodeService), i0.ɵɵinject(i3.InventoryService), i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i1.OptionsService), i0.ɵɵinject(i1.Permissions), i0.ɵɵinject(i2$1.ASSET_NAVIGATOR_CONFIG, 8)); }, token: CockpitConfigService, providedIn: "root" });
CockpitConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CockpitConfigService.ctorParameters = () => [
    { type: NavigatorService },
    { type: TabsService },
    { type: SearchService },
    { type: AssetNodeService },
    { type: InventoryService },
    { type: AppStateService },
    { type: OptionsService },
    { type: Permissions },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
];

class CockpitConfigurationComponent {
    constructor(cockpitConfigService, alertService) {
        this.cockpitConfigService = cockpitConfigService;
        this.alertService = alertService;
        /**
         * The currently used configuration.
         */
        this.config = DEFAULT_CONFIG;
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.config = this.cockpitConfigService.currentConfig;
    }
    /**
     * Stores the configuration and shows a success message.
     */
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.cockpitConfigService.saveConfig(this.config);
                this.alertService.success(gettext('Cockpit configuration saved.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    /**
     * Updates the features to directly reflect the results of the change.
     */
    updateFeatures() {
        this.cockpitConfigService.currentConfig = this.config;
        this.cockpitConfigService.refresh();
    }
    /**
     * Updates the root nodes to directly reflect the results of the change.
     */
    updateRootNodes() {
        this.cockpitConfigService.currentConfig = this.config;
        this.cockpitConfigService.setRootNodes();
    }
}
CockpitConfigurationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cockpit-configuration',
                template: "<c8y-title>{{ 'App configuration' | translate }}</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <form #configForm=\"ngForm\">\n      <div class=\"card card--fullpage\">\n        <div class=\"card-header separator\">\n          <div class=\"card-title\" translate>Cockpit configuration</div>\n        </div>\n\n        <div class=\"inner-scroll\">\n          <div class=\"card-block p-t-0 p-b-0\">\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <div class=\"d-inline-flex m-b-16\">\n                  <h4 class=\"text-medium m-r-4\" translate>Features</h4>\n                  <button\n                    class=\"btn btn-clean\"\n                    popover=\"{{\n                      'Define which are the enabled features in the current application.'\n                        | translate\n                    }}\"\n                    container=\"body\"\n                    placement=\"right\"\n                    [outsideClick]=\"true\"\n                  >\n                    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n                  </button>\n                </div>\n              </div>\n              <div class=\"col-xs-12 col-sm-9 col-md-8\">\n                <c8y-feature-config\n                  [config]=\"config\"\n                  (onUpdate)=\"updateFeatures()\"\n                ></c8y-feature-config>\n              </div>\n            </fieldset>\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <div class=\"d-inline-flex m-b-16\">\n                  <h4 class=\"text-medium m-r-8\" translate>Top level nodes</h4>\n                  <button\n                    class=\"btn btn-clean\"\n                    popover=\"{{\n                      'Select which nodes to display in the top level of the navigator menu. By default, only Groups is shown.'\n                        | translate\n                    }}\"\n                    container=\"body\"\n                    placement=\"right\"\n                    [outsideClick]=\"true\"\n                  >\n                    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n                  </button>\n                </div>\n              </div>\n              <div class=\"col-xs-12 col-sm-10 col-md-10\">\n                <div class=\"row\">\n                  <c8y-root-node-config\n                    [config]=\"config\"\n                    (onUpdate)=\"updateRootNodes()\"\n                  ></c8y-root-node-config>\n                </div>\n              </div>\n            </fieldset>\n\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <div class=\"d-inline-flex m-b-16\">\n                  <h4 class=\"text-medium m-r-8\" translate>Home dashboard</h4>\n                  <button\n                    class=\"btn btn-clean\"\n                    popover=\"{{\n                      'The landing page for this application. By default it is a customizable dashboard displaying data for the overall tenant.'\n                        | translate\n                    }}\"\n                    placement=\"right\"\n                    container=\"body\"\n                    [outsideClick]=\"true\"\n                  >\n                    <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n                  </button>\n                </div>\n              </div>\n              <div class=\"col-xs-12 col-sm-9 col-md-8\">\n                <c8y-home-dashboard-config [config]=\"config\"></c8y-home-dashboard-config>\n              </div>\n            </fieldset>\n\n            <fieldset class=\"row separator-bottom p-t-24 p-b-24\">\n              <div class=\"col-xs-12 col-sm-3 col-md-2 text-left-xs text-right-sm\">\n                <h4 class=\"text-medium d-inline-block m-r-4\" translate>Misc</h4>\n              </div>\n              <div class=\"col-xs-12 col-sm-9 col-md-8\">\n                <c8y-misc-config [config]=\"config\"></c8y-misc-config>\n              </div>\n            </fieldset>\n          </div>\n        </div>\n        <div class=\"card-footer separator\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-primary\"\n            translate\n            [disabled]=\"!configForm.form.valid\"\n            (click)=\"save()\"\n            c8yProductExperience\n            [actionName]=\"'cockpitConfigurationSaved'\"\n            [actionData]=\"{ config: config }\"\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n"
            },] }
];
CockpitConfigurationComponent.ctorParameters = () => [
    { type: CockpitConfigService },
    { type: AlertService }
];

class FeatureConfigComponent {
    constructor() {
        this.onUpdate = new EventEmitter();
    }
    updateFeatures() {
        this.onUpdate.emit();
    }
}
FeatureConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-feature-config',
                template: "<c8y-list-group>\n  <c8y-li>\n    <c8y-li-icon icon=\"search\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Global search' | translate }}</p>\n        <p>\n          <small translate>Display the global search in the main header.</small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Global search' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.search\"\n          name=\"search\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-group\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Groups' | translate }}</p>\n        <p>\n          <small translate>Display top level groups under the Groups navigator menu.</small>\n        </p>\n      </div>\n      <label class=\"c8y-switch c8y-switch--inline m-l-auto\" title=\"{{ 'Groups' | translate }}\">\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.groups\"\n          name=\"groups\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"bell\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Alarms' | translate }}</p>\n        <p>\n          <small translate>Display a link to the global alarms list in the navigator menu.</small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Global Alarms view' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.alarms\"\n          name=\"alarms\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-data-explorer\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Data explorer' | translate }}</p>\n        <p>\n          <small translate>\n            Display the data explorer in the navigator menu and on the group tabs.\n          </small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Data explorer' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.dataExplorer\"\n          name=\"dataExplorer\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-reports\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Reports' | translate }}</p>\n        <p>\n          <small translate>Display a link to the Reports list in the navigator menu.</small>\n        </p>\n      </div>\n      <label class=\"c8y-switch c8y-switch--inline m-l-auto\" title=\"{{ 'Reports' | translate }}\">\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.reports\"\n          name=\"reports\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"graph-report\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Exports' | translate }}</p>\n        <p>\n          <small translate>\n            Display a link to the Exports list under the Configuration navigator menu.\n          </small>\n        </p>\n      </div>\n      <label class=\"c8y-switch c8y-switch--inline m-l-auto\" title=\"{{ 'Exports' | translate }}\">\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.exports\"\n          name=\"exports\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-data-points\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Data point library' | translate }}</p>\n        <p>\n          <small translate>\n            Display a link to the Data point library under the Configuration navigator menu.\n          </small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Data point library' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.dataPointLibrary\"\n          name=\"dataPointLibrary\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-smart-rules\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Global smart rules' | translate }}</p>\n        <p>\n          <small translate>\n            Display a link to the Global smart rules under the Configuration navigator menu.\n          </small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Global smart rules' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.globalSmartRules\"\n          name=\"globalSmartRules\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-group-open\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Sub assets view' | translate }}</p>\n        <p><small translate>Display the sub assets tab on groups.</small></p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Sub assets view' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.subassets\"\n          name=\"subassets\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-icon icon=\"c8y-smart-rules\"></c8y-li-icon>\n    <div class=\"d-flex a-i-center\">\n      <div>\n        <p>{{ 'Smart rules for devices and groups' | translate }}</p>\n        <p>\n          <small translate>Display the smart rules tab on groups and devices.</small>\n        </p>\n      </div>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Smart rules for devices and groups' | translate }}\"\n      >\n        <input\n          type=\"checkbox\"\n          [(ngModel)]=\"config.features.smartRules\"\n          name=\"smartRules\"\n          (change)=\"updateFeatures()\"\n        />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n</c8y-list-group>\n"
            },] }
];
FeatureConfigComponent.propDecorators = {
    config: [{ type: Input }],
    onUpdate: [{ type: Output }]
};

class HomeDashboardConfigComponent {
    /**
     * @ignore
     */
    constructor(cockpitConfigService) {
        this.cockpitConfigService = cockpitConfigService;
        /**
         * The types of dashboard that can be configured.
         */
        this.homeDashboardTypes = HomeDashboardType;
    }
    /**
     * @ignore
     */
    dashboardChange(selected, type) {
        if (!selected) {
            return;
        }
        switch (type) {
            case this.homeDashboardTypes.DEFAULT: {
                this.config.homeDashboardName = DEFAULT_HOME_DASHBOARD_NAME;
                this.config.userSpecificHomeDashboard = false;
                break;
            }
            case this.homeDashboardTypes.APP: {
                this.config.homeDashboardName = this.cockpitConfigService.getAppDashboardName();
                this.config.userSpecificHomeDashboard = false;
                break;
            }
            case this.homeDashboardTypes.USER: {
                this.config.homeDashboardName = USER_HOME_DASHBOARD_NAME;
                this.config.userSpecificHomeDashboard = true;
                break;
            }
        }
    }
    /**
     * @ignore
     */
    verifySelected(type) {
        if (type === this.homeDashboardTypes.USER) {
            return this.config.userSpecificHomeDashboard;
        }
        if (type === this.homeDashboardTypes.DEFAULT) {
            return this.config.homeDashboardName === DEFAULT_HOME_DASHBOARD_NAME;
        }
        return this.config.homeDashboardName === this.cockpitConfigService.getAppDashboardName();
    }
}
HomeDashboardConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-home-dashboard-config',
                template: "<c8y-list-group class=\"separator-top\">\n  <c8y-li>\n    <c8y-li-radio\n      (onSelect)=\"dashboardChange($event, homeDashboardTypes.DEFAULT)\"\n      [selected]=\"verifySelected(homeDashboardTypes.DEFAULT)\"\n    >\n    </c8y-li-radio>\n    <p translate>Default home dashboard</p>\n    <small translate>Changes done in the home dashboard are reflected across the platform.</small>\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-radio\n      (onSelect)=\"dashboardChange($event, homeDashboardTypes.APP)\"\n      [selected]=\"verifySelected(homeDashboardTypes.APP)\"\n    >\n    </c8y-li-radio>\n    <p translate>Custom home dashboard</p>\n    <small translate\n      >Changes done to the home dashboard are reflected only in the current application.</small\n    >\n  </c8y-li>\n  <c8y-li>\n    <c8y-li-radio\n      (onSelect)=\"dashboardChange($event, homeDashboardTypes.USER)\"\n      [selected]=\"verifySelected(homeDashboardTypes.USER)\"\n    >\n    </c8y-li-radio>\n    <p translate>User home dashboard</p>\n    <small translate\n      >Changes done to the home dashboard are reflected only for the current user. NOTE: This user\n      needs to have inventory write permission.</small\n    >\n  </c8y-li>\n</c8y-list-group>\n"
            },] }
];
HomeDashboardConfigComponent.ctorParameters = () => [
    { type: CockpitConfigService }
];
HomeDashboardConfigComponent.propDecorators = {
    config: [{ type: Input }]
};

class MiscConfigComponent {
}
MiscConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-misc-config',
                template: "<c8y-list-group>\n  <c8y-li>\n    <div class=\"d-flex a-i-center\">\n      <p>{{ 'Always collapse navigator on start up' | translate }}</p>\n      <label\n        class=\"c8y-switch c8y-switch--inline m-l-auto\"\n        title=\"{{ 'Collapse navigator on start up' | translate }}\"\n      >\n        <input type=\"checkbox\" [(ngModel)]=\"config.hideNavigator\" name=\"hideNavigator\" />\n        <span></span>\n      </label>\n    </div>\n  </c8y-li>\n</c8y-list-group>\n"
            },] }
];
MiscConfigComponent.propDecorators = {
    config: [{ type: Input }]
};

class RootNodeConfigComponent {
    constructor() {
        this.onUpdate = new EventEmitter();
    }
    /**
     * Removes one of the root nodes.
     * @param node The node to remove.
     */
    removeNavigatorNode(node) {
        const index = this.config.rootNodes.indexOf(node);
        if (index > -1) {
            this.config.rootNodes.splice(index, 1);
            this.onUpdate.emit();
        }
    }
}
RootNodeConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-root-node-config',
                template: "<div class=\"col-sm-6\">\n  <label title=\"{{ 'Current top level nodes' | translate }}\" translate>\n    Current top level nodes\n  </label>\n  <c8y-list-group class=\"separator-top\">\n    <c8y-li *ngIf=\"config.rootNodes.length === 0\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 c8yIcon=\"folder-open\"></h1>\n        <p>\n          <strong>{{ 'No top level nodes set' | translate }}</strong>\n        </p>\n      </div>\n    </c8y-li>\n    <c8y-li *ngFor=\"let node of config.rootNodes; let index = index\">\n      <c8y-li-icon icon=\"c8y-group\"></c8y-li-icon>\n      <div class=\"content-flex-30\">\n        <div class=\"col-6\">\n          <div class=\"text-truncate\" title=\"{{ node.name }}\">\n            {{ node.name }}\n          </div>\n        </div>\n        <div class=\"col-4\">\n          <label class=\"c8y-switch c8y-switch--inline\" title=\"{{ 'Hide devices' | translate }}\">\n            <input\n              type=\"checkbox\"\n              [(ngModel)]=\"node.hideDevices\"\n              name=\"node.{{ index }}.hideDevices\"\n              (change)=\"onUpdate.emit()\"\n            />\n            <span></span>\n            <small>{{ 'Hide devices' | translate }}</small>\n          </label>\n        </div>\n        <div class=\"col-2 text-right\">\n          <button\n            class=\"btn-clean\"\n            title=\"{{ 'Remove' | translate }}\"\n            (click)=\"removeNavigatorNode(node)\"\n          >\n            <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n          </button>\n        </div>\n      </div>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n\n<div class=\"col-sm-6 col-md-5 col-md-offset-1\">\n  <label title=\"{{ 'Select top level nodes' | translate }}\" translate>Select top level nodes</label>\n  <c8y-asset-selector\n    [config]=\"{ groupsOnly: true, multi: true, groupsSelectable: true }\"\n    [(ngModel)]=\"config.rootNodes\"\n    (onSelected)=\"onUpdate.emit()\"\n    name=\"rootNodes\"\n  ></c8y-asset-selector>\n</div>\n"
            },] }
];
RootNodeConfigComponent.propDecorators = {
    config: [{ type: Input }],
    onUpdate: [{ type: Output }]
};

class CockpitSetupStep {
    constructor(stepper, step, setup, appState, alert) {
        this.stepper = stepper;
        this.step = step;
        this.setup = setup;
        this.appState = appState;
        this.alert = alert;
        this.config = DEFAULT_CONFIG;
        this.pending = false;
    }
    next() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pending = true;
            try {
                const newConfig = Object.assign(Object.assign({}, this.setup.data$.value), this.config);
                yield this.appState.updateApplicationConfig(newConfig);
                this.setup.stepCompleted(this.stepper.selectedIndex);
                this.setup.data$.next(newConfig);
                this.stepper.next();
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
            finally {
                this.pending = false;
            }
        });
    }
    back() {
        this.stepper.previous();
    }
}

class CockpitSetupStep1Component extends CockpitSetupStep {
    constructor(stepper, step, setup, appState, alert) {
        super(stepper, step, setup, appState, alert);
        this.stepper = stepper;
        this.step = step;
        this.setup = setup;
        this.appState = appState;
        this.alert = alert;
    }
}
CockpitSetupStep1Component.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cockpit-setup-step1',
                template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3  p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Features</h3>\n        <p class=\"lead text-normal\" translate>\n          Define which are the enabled features in the current application.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-feature-config [config]=\"config\"></c8y-feature-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                host: { class: 'd-contents' }
            },] }
];
CockpitSetupStep1Component.ctorParameters = () => [
    { type: C8yStepper },
    { type: CdkStep },
    { type: SetupComponent },
    { type: AppStateService },
    { type: AlertService }
];

class CockpitSetupStep2Component extends CockpitSetupStep {
    constructor(stepper, step, setup, appState, alert) {
        super(stepper, step, setup, appState, alert);
        this.stepper = stepper;
        this.step = step;
        this.setup = setup;
        this.appState = appState;
        this.alert = alert;
    }
}
CockpitSetupStep2Component.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cockpit-setup-step2',
                template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3 p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Top level nodes</h3>\n        <p class=\"lead text-normal\" translate>\n          Select which nodes to display in the top level of the navigator menu. By default, only\n          Groups is shown.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w p-t-16\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-root-node-config [config]=\"config\"></c8y-root-node-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                host: { class: 'd-contents' }
            },] }
];
CockpitSetupStep2Component.ctorParameters = () => [
    { type: C8yStepper },
    { type: CdkStep },
    { type: SetupComponent },
    { type: AppStateService },
    { type: AlertService }
];

class CockpitSetupStep3Component extends CockpitSetupStep {
    constructor(stepper, step, setup, appState, alert) {
        super(stepper, step, setup, appState, alert);
        this.stepper = stepper;
        this.step = step;
        this.setup = setup;
        this.appState = appState;
        this.alert = alert;
    }
}
CockpitSetupStep3Component.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cockpit-setup-step3',
                template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3  p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Home dashboard</h3>\n        <p class=\"lead text-normal\" translate>\n          The landing page for this application. By default it is a customizable dashboard\n          displaying data for the overall tenant.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-home-dashboard-config [config]=\"config\"></c8y-home-dashboard-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                host: { class: 'd-contents' }
            },] }
];
CockpitSetupStep3Component.ctorParameters = () => [
    { type: C8yStepper },
    { type: CdkStep },
    { type: SetupComponent },
    { type: AppStateService },
    { type: AlertService }
];

class CockpitSetupStep4Component extends CockpitSetupStep {
    constructor(stepper, step, setup, appState, alert) {
        super(stepper, step, setup, appState, alert);
        this.stepper = stepper;
        this.step = step;
        this.setup = setup;
        this.appState = appState;
        this.alert = alert;
    }
}
CockpitSetupStep4Component.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cockpit-setup-step4',
                template: "<form #stepForm=\"ngForm\" name=\"form\" class=\"d-contents\">\n  <div class=\"container-fluid flex-no-shrink fit-w\">\n    <div class=\"row separator-bottom\">\n      <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3 p-t-24 p-l-16 p-r-16\">\n        <h3 translate class=\"text-medium l-h-base\">Misc</h3>\n        <p class=\"lead text-normal\" translate>\n          Miscellaneous settings for the current application.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll flex-grow\">\n    <div class=\"container-fluid fit-w\">\n      <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <c8y-misc-config [config]=\"config\"></c8y-misc-config>\n        </div>\n      </div>\n    </div>\n  </div>\n  <c8y-cockpit-setup-stepper-buttons\n    [index]=\"stepper.selectedIndex\"\n    (onNext)=\"next()\"\n    (onBack)=\"back()\"\n  >\n  </c8y-cockpit-setup-stepper-buttons>\n</form>\n",
                host: { class: 'd-contents' }
            },] }
];
CockpitSetupStep4Component.ctorParameters = () => [
    { type: C8yStepper },
    { type: CdkStep },
    { type: SetupComponent },
    { type: AppStateService },
    { type: AlertService }
];

class CockpitSetupStepperButtonsComponent {
    constructor() {
        this.onNext = new EventEmitter();
        this.onBack = new EventEmitter();
    }
}
CockpitSetupStepperButtonsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cockpit-setup-stepper-buttons',
                template: "<div class=\"card-footer separator d-flex j-c-center\">\n  <button\n    class=\"btn btn-default\"\n    type=\"button\"\n    (click)=\"onBack.emit()\"\n    *ngIf=\"index !== 0\"\n    translate\n  >\n    Previous\n  </button>\n  <button class=\"btn btn-primary\" type=\"submit\" (click)=\"onNext.emit()\" translate>\n    Save and continue\n  </button>\n</div>\n"
            },] }
];
CockpitSetupStepperButtonsComponent.propDecorators = {
    index: [{ type: Input }],
    onNext: [{ type: Output }],
    onBack: [{ type: Output }]
};

const ɵ0 = [
    {
        path: COCKPIT_CONFIG_PATH,
        component: CockpitConfigurationComponent,
        canActivate: [CockpitConfigGuard]
    }
], ɵ1 = [
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep1Component,
        label: gettext('Features'),
        setupId: 'cockpitFeatures',
        priority: 0
    },
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep2Component,
        label: gettext('Top level nodes'),
        setupId: 'cockpitTopLevelNodes',
        priority: 10
    },
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep3Component,
        label: gettext('Home Dashboard'),
        setupId: 'cockpitHomeDashboard',
        priority: 20
    },
    {
        stepperId: Steppers.SETUP,
        component: CockpitSetupStep4Component,
        label: gettext('Misc'),
        setupId: 'cockpitMisc',
        priority: 30
    }
];
class CockpitConfigModule {
    constructor(service) {
        // only for DI, not used but needed.
    }
}
CockpitConfigModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CockpitConfigurationComponent,
                    CockpitSetupStep1Component,
                    CockpitSetupStep2Component,
                    CockpitSetupStep3Component,
                    CockpitSetupStep4Component,
                    FeatureConfigComponent,
                    RootNodeConfigComponent,
                    HomeDashboardConfigComponent,
                    MiscConfigComponent,
                    CockpitSetupStepperButtonsComponent
                ],
                imports: [CoreModule, AssetSelectorModule, PopoverModule, EcosystemModule],
                providers: [
                    CockpitConfigGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: CockpitConfigGuard,
                        multi: true
                    },
                    {
                        provide: HOOK_STEPPER,
                        useValue: ɵ1,
                        multi: true
                    }
                ]
            },] }
];
CockpitConfigModule.ctorParameters = () => [
    { type: CockpitConfigService }
];

/**
 * Generated bundle index. Do not edit.
 */

export { COCKPIT_CONFIG_PATH, CockpitConfigGuard, CockpitConfigModule, CockpitConfigService, CockpitConfigurationComponent, CockpitSetupStep1Component, CockpitSetupStep2Component, CockpitSetupStep3Component, CockpitSetupStep4Component, DEFAULT_CONFIG, DEFAULT_HOME_DASHBOARD_NAME, FeatureConfigComponent, HomeDashboardConfigComponent, HomeDashboardType, MiscConfigComponent, RootNodeConfigComponent, USER_HOME_DASHBOARD_NAME, ɵ0, ɵ1, CockpitSetupStep as ɵa, CockpitSetupStepperButtonsComponent as ɵb };
//# sourceMappingURL=c8y-ngx-components-cockpit-config.js.map
