import * as i0 from '@angular/core';
import { Injectable, Component, NgModule } from '@angular/core';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { __awaiter } from 'tslib';
import { gettext, TenantUiService, CoreModule, CommonModule } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { Subject, of, forkJoin, throwError, BehaviorSubject, defer, from } from 'rxjs';
import { FetchClient, InventoryService, TenantOptionsService, ApplicationService } from '@c8y/client';
import * as i4 from '@ngx-translate/core';
import { TranslateService } from '@ngx-translate/core';
import * as i1 from '@c8y/client';
import * as i2 from '@c8y/client';
import * as i3 from '@c8y/client';
import * as i5 from '@c8y/client';
import { catchError, switchMap, map, takeUntil, mergeMap, shareReplay } from 'rxjs/operators';
import { uniq, cloneDeep } from 'lodash-es';
import { HOOK_DEVICE_REGISTRATION } from '@c8y/ngx-components/register-device';

var ErrorName;
(function (ErrorName) {
    ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
    ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
    ErrorName["ContractError"] = "ContractError";
    ErrorName["NoContractsError"] = "NoContractsError";
    ErrorName["RegistrationError"] = "RegistrationError";
    ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
})(ErrorName || (ErrorName = {}));
class SigfoxProviderService {
    constructor(client, inventoryService, tenantOptions, translateService, applicationService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.tenantOptions = tenantOptions;
        this.translateService = translateService;
        this.applicationService = applicationService;
        this.baseUrl = '/service/sigfox-agent/';
        this.registrationUrl = `${this.baseUrl}newDeviceRequest`;
        this.contractsUrl = `${this.baseUrl}contract`;
        this.header = { 'Content-Type': 'application/json' };
    }
    getConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.header
            };
            const res = yield this.client.fetch(`${this.baseUrl}lns-connection`, options);
            const data = yield res.json();
            if (res.status === 200) {
                if (data.length === 0) {
                    yield this.throwNoConnectivitySettingsError();
                }
            }
            else {
                yield this.throwNoConnectivitySettingsError();
            }
            return { res, data };
        });
    }
    /**
     * Gets contracts from Sigfox platform.
     * @param connectionName The name of connection for which contracts will be retrieved
     * @returns The result list with contract, or throws an error with exception.
     */
    getContracts(connectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.header,
                params: {
                    sigfoxConnectionName: connectionName
                }
            };
            const res = yield this.client.fetch(this.contractsUrl, options);
            const data = yield res.json();
            if (res.status === 200) {
                if (data.length === 0) {
                    this.throwNoContractsError();
                }
            }
            else {
                this.throwContractError(data);
            }
            return { res, data };
        });
    }
    createDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(device)
            };
            const res = yield this.client.fetch(this.registrationUrl, options);
            const data = yield res.json();
            if (res.status !== 201) {
                this.throwRegistrationError(data);
            }
            return { res, data };
        });
    }
    getAvailableProtocols(filter = { withTotalPages: true }) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = {
                __filter: {
                    __and: [
                        { __has: 'c8y_IsDeviceType' },
                        {
                            type: { __in: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'] }
                        }
                    ]
                },
                __orderby: [{ name: 1 }]
            };
            const { res, data } = yield this.inventoryService.listQuery(query, filter);
            if (res.status === 200) {
                if (data.length === 0) {
                    this.throwNoDeviceProtocolsError();
                }
            }
            else {
                this.throwDeviceProtocolsFetchError();
            }
            return { res, data };
        });
    }
    hasConnectivitySettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const option = {
                category: 'sigfox-agent',
                key: 'provider.token'
            };
            try {
                yield this.tenantOptions.detail(option);
                return true;
            }
            catch (e) {
                yield this.throwNoConnectivitySettingsError();
            }
        });
    }
    throwNoConnectivitySettingsError() {
        return __awaiter(this, void 0, void 0, function* () {
            const error = new Error();
            error.name = ErrorName.NoConnectivitySettingsError;
            const hasAdminRight = (yield this.applicationService.isAvailable('administration')).data;
            if (hasAdminRight) {
                error.message = this.translateService.instant(gettext(`Connectivity settings are not configured. Configure them in the Administration app under <a href="{{ link }}">Settings</a>.`), {
                    link: '/apps/administration/index.html#/connectivitySettings/sigfox_provider_settings'
                });
            }
            else {
                error.message = gettext('Connectivity settings are not configured. Contact the administrator.');
            }
            throw error;
        });
    }
    throwRegistrationError(data) {
        const error = new Error();
        error.name = ErrorName.RegistrationError;
        error.message = data.message;
        throw error;
    }
    throwDeviceProtocolsFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProtocolsFetchError;
        error.message = gettext('Could not load device protocols.');
        throw error;
    }
    throwNoDeviceProtocolsError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProtocolsError;
        error.message = this.translateService.instant(gettext(`No device protocols configured. Create a Sigfox device protocol in <a href="{{ link }}">Device protocols</a>.`), {
            link: '/apps/devicemanagement/#/deviceprotocols'
        });
        throw error;
    }
    throwContractError(data) {
        const error = new Error();
        error.name = ErrorName.ContractError;
        error.message = data.message;
        throw error;
    }
    throwNoContractsError() {
        const error = new Error();
        error.name = ErrorName.NoContractsError;
        error.message = gettext('No contracts found. New contracts must be created via the Sigfox platform.');
        throw error;
    }
}
SigfoxProviderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SigfoxProviderService_Factory() { return new SigfoxProviderService(i0.ɵɵinject(i1.FetchClient), i0.ɵɵinject(i2.InventoryService), i0.ɵɵinject(i3.TenantOptionsService), i0.ɵɵinject(i4.TranslateService), i0.ɵɵinject(i5.ApplicationService)); }, token: SigfoxProviderService, providedIn: "root" });
SigfoxProviderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SigfoxProviderService.ctorParameters = () => [
    { type: FetchClient },
    { type: InventoryService },
    { type: TenantOptionsService },
    { type: TranslateService },
    { type: ApplicationService }
];

class SigfoxDeviceRegistrationComponent {
    constructor(bsModalRef, sigfoxService, translateService) {
        this.bsModalRef = bsModalRef;
        this.sigfoxService = sigfoxService;
        this.translateService = translateService;
        this.PAGING = {
            withTotalPages: true,
            pageSize: 10
        };
        this.form = new FormGroup({});
        this.model = {};
        this.protocols$ = this.getProtocols$();
        this.connections$ = this.getConnections$();
        this.unsubscribe$ = new Subject();
        this.load$ = this.connections$.pipe(catchError((error) => of(error)), switchMap(connections => {
            if (connections instanceof Error && connections.name === ErrorName.NoConnectivitySettingsError) {
                return of([connections]);
            }
            return forkJoin([
                of(connections),
                this.protocols$.pipe(catchError((error) => of(error)))
            ]);
        }), map(results => {
            return results.filter(result => {
                return result instanceof Error;
            });
        }), switchMap(errors => {
            return errors.length === 0 ? of([]) : throwError(errors);
        }));
        this.fields = [
            {
                key: 'id',
                type: 'string',
                templateOptions: {
                    placeholder: 'FED987',
                    label: gettext('ID'),
                    required: true,
                    pattern: '(0x){0,1}[0-9A-F]+(h){0,1}'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid hexadecimal number.')
                    }
                }
            },
            {
                key: 'pac',
                type: 'string',
                templateOptions: {
                    placeholder: 'FEDCBA9876543210',
                    label: gettext('PAC'),
                    required: true,
                    pattern: '^([a-fA-F0-9]{16})$'
                },
                validation: {
                    messages: {
                        pattern: gettext('Must be a valid 16 digit hexadecimal number.')
                    }
                }
            },
            {
                key: 'connection',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Connection'),
                    required: true,
                    c8yForOptions: this.connections$,
                    displayProperty: 'name',
                    valueProperties: ['name']
                }
            },
            {
                key: 'contract',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Contract'),
                    required: true,
                    placeholder: 'Free contract_25',
                    displayProperty: 'name',
                    valueProperties: ['id'],
                    description: gettext('Only active contracts with free slots are displayed.')
                },
                hooks: {
                    onInit: field => {
                        const connectionControl = field.form.get('connection');
                        connectionControl.valueChanges
                            .pipe(takeUntil(this.unsubscribe$), mergeMap(() => this.getContracts$(this.form.get('connection').value.name)))
                            .subscribe(profiles => {
                            field.templateOptions.c8yForOptions = of(profiles);
                            field.formControl.setValue(null);
                        }, error => {
                            field.form.controls.contract.setErrors({ contract: true });
                            field.validators.contract.message = error.message;
                        });
                    }
                },
                validators: {
                    contract: {
                        expression: (control) => {
                            return control.status === 'VALID';
                        },
                        message: () => '',
                    },
                }
            },
            {
                key: 'deviceType',
                type: 'typeahead',
                templateOptions: {
                    label: gettext('Device protocol'),
                    required: true,
                    c8yForOptions: this.protocols$,
                    displayProperty: 'name',
                    valueProperties: ['id', 'name']
                }
            },
            {
                key: 'productCertificate',
                type: 'string',
                templateOptions: {
                    placeholder: 'P_001F_EDCB_01',
                    label: gettext('Product certificate key'),
                    pattern: 'P_[0-9A-F]{4}_[0-9A-F]{4}_[0-9A-F]{2}',
                    description: gettext('If no product certificate key is specified, the device is considered a prototype.')
                },
                validation: {
                    messages: {
                        pattern: (error, field) => this.translateService.instant(gettext('Must be a valid product certificate key, for example, {{ example }}'), { example: 'P_001F_EDCB_01' })
                    }
                }
            }
        ];
        this.registrationStepLabels = {
            next: gettext('Register')
        };
        this.finalStepLabels = {
            back: gettext('Close')
        };
        this.state = 'loadPending';
        this.errors$ = new BehaviorSubject([]);
        this.errorMessages$ = this.errors$.pipe(map(errors => errors.map(error => error.message)), map(messages => uniq(messages)));
        this.load$.subscribe(() => {
            this.state = 'loadSuccess';
        }, errors => {
            this.state = 'loadError';
            this.errors$.next(errors);
        });
    }
    create(event) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'registrationPending';
            const sigfoxDevice = this.getSigfoxDeviceToSend();
            try {
                yield this.sigfoxService.createDevice(sigfoxDevice);
                this.state = 'registrationSuccess';
            }
            catch (error) {
                this.state = 'registrationError';
                this.errors$.next([error]);
            }
            event.stepper.next();
        });
    }
    getSigfoxDeviceToSend() {
        const sigfoxDevice = cloneDeep(this.model);
        sigfoxDevice.lnsConnectionName = this.model.connection.name;
        sigfoxDevice.contractId = this.model.contract.id;
        sigfoxDevice.prototype = !sigfoxDevice.productCertificate;
        delete sigfoxDevice.contract;
        delete sigfoxDevice.connection;
        return sigfoxDevice;
    }
    getContracts$(name) {
        return defer(() => from(this.sigfoxService.getContracts(name))).pipe(shareReplay(1));
    }
    getProtocols$() {
        return defer(() => from(this.sigfoxService.getAvailableProtocols())).pipe(shareReplay(1));
    }
    getConnections$() {
        return defer(() => from(this.sigfoxService.getConnections())).pipe(shareReplay(1));
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
SigfoxDeviceRegistrationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-sigfox-device-registration',
                template: "<c8y-modal [headerClasses]=\"'dialog-header'\" [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <span [c8yIcon]=\"'c8y-device-connect'\"></span>\n    <h4>{{ 'Sigfox registration' | translate }}</h4>\n  </ng-container>\n  <ng-container *ngIf=\"state === 'loadPending'; else registrationForm\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </ng-container>\n\n  <!--Formly schema is rendered-->\n  <ng-template #registrationForm>\n    <c8y-stepper\n      [hideStepProgress]=\"true\"\n      linear\n      *ngIf=\"(errorMessages$ | async).length === 0; else errorMessagesPresent\"\n    >\n      <cdk-step [stepControl]=\"form\">\n        <div class=\"p-b-16\">\n          <p\n            class=\"\n              p-l-24 p-r-24 p-t-16 p-b-16\n              m-b-0\n              sticky-top\n              separator-bottom\n              text-16 text-medium\n              text-center\n              bg-component\n            \"\n          >\n          {{ 'Register a single Sigfox device' | translate }}\n          </p>\n          <formly-form\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            class=\"d-block p-l-24 p-r-24 p-t-16\"\n          ></formly-form>\n        </div>\n        <c8y-stepper-buttons\n          [labels]=\"registrationStepLabels\"\n          (onNext)=\"create($event)\"\n          (onCancel)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ cancel: true, next: true }\"\n          [pending]=\"state === 'registrationPending'\"\n          [disabled]=\"!form.valid\"\n          class=\"modal-footer d-block sticky-bottom separator-top bg-white\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n      <cdk-step state=\"final\">\n        <!--success scenario-->\n        <div class=\"p-16 text-center\" *ngIf=\"state === 'registrationPending'\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <div class=\"m-24\">\n          <c8y-operation-result\n            *ngIf=\"state === 'registrationSuccess'\"\n            text=\"{{ 'Device registered' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n            class=\"lead m-b-0\"\n          ></c8y-operation-result>\n        </div>\n\n        <c8y-stepper-buttons\n          class=\"sticky-bottom d-block p-t-16 p-b-16 separator-top bg-white\"\n          (onCustom)=\"bsModalRef.hide()\"\n          [showButtons]=\"{ custom: true }\"\n          [labels]=\"finalStepLabels\"\n        ></c8y-stepper-buttons>\n      </cdk-step>\n    </c8y-stepper>\n  </ng-template>\n\n  <!--Failure scenario-->\n  <ng-template #errorMessagesPresent>\n    <div class=\"m-24\">\n      <c8y-operation-result\n        *ngIf=\"state === 'registrationError'\"\n        text=\"{{ 'Failed to register' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"error\"\n        class=\"lead\"\n      ></c8y-operation-result>\n      <div\n        *ngFor=\"let msg of errorMessages$ | async\"\n        class=\"m-b-8\"\n        [ngClass]=\"{\n          'text-center': state === 'registrationError',\n          'alert alert-danger': state === 'loadError'\n        }\"\n      >\n        <span [innerHTML]=\"msg | translate\"></span>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Close' | translate }}\"\n        (click)=\"bsModalRef.hide()\"\n        type=\"button\"\n        class=\"btn btn-default\"\n        translate\n      >\n        Close\n      </button>\n    </div>\n  </ng-template>\n</c8y-modal>"
            },] }
];
SigfoxDeviceRegistrationComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: SigfoxProviderService },
    { type: TranslateService }
];

class SigfoxDeviceRegistrationButtonComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    open() {
        this.modalService.show(SigfoxDeviceRegistrationComponent, {
            class: 'modal-sm',
            ignoreBackdropClick: true
        });
    }
}
SigfoxDeviceRegistrationButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-sigfox-registration',
                template: "<button (click)=\"open()\"><i c8yIcon=\"c8y-device-connect\"></i> {{ 'Sigfox' | translate }} </button>"
            },] }
];
SigfoxDeviceRegistrationButtonComponent.ctorParameters = () => [
    { type: BsModalService }
];

class SigfoxDeviceRegistrationFactory {
    constructor(tenantService) {
        this.tenantService = tenantService;
    }
    get() {
        const items = [];
        if (this.tenantService.isMicroserviceSubscribedInCurrentTenant('sigfox-agent')) {
            items.push({
                template: SigfoxDeviceRegistrationButtonComponent,
                priority: 98,
                category: 'single'
            });
        }
        return items;
    }
}
SigfoxDeviceRegistrationFactory.decorators = [
    { type: Injectable }
];
SigfoxDeviceRegistrationFactory.ctorParameters = () => [
    { type: TenantUiService }
];

class SigfoxDeviceRegistrationModule {
}
SigfoxDeviceRegistrationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, CommonModule],
                declarations: [SigfoxDeviceRegistrationButtonComponent, SigfoxDeviceRegistrationComponent],
                providers: [
                    {
                        provide: HOOK_DEVICE_REGISTRATION,
                        useClass: SigfoxDeviceRegistrationFactory,
                        multi: true
                    },
                    SigfoxProviderService
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { SigfoxDeviceRegistrationButtonComponent, SigfoxDeviceRegistrationComponent, SigfoxDeviceRegistrationFactory, SigfoxDeviceRegistrationModule, SigfoxProviderService as ɵa };
//# sourceMappingURL=c8y-ngx-components-sigfox-device-registration.js.map
