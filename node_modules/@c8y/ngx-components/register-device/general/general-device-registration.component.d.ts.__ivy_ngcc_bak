import { AfterViewInit, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';
import { TenantUiService, C8yStepper } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { IDeviceRegistration, InventoryService, TenantService } from '@c8y/client';
import { RegisterDeviceService } from '../register-device.service';
import { CdkStep } from '@angular/cdk/stepper';
import { BsModalRef } from 'ngx-bootstrap/modal';
interface GeneralDeviceRegistrationModelType {
    id: string;
    tenant?: {
        id: string;
    };
    group?: {
        id: string;
        name?: string;
    };
}
export declare class GeneralDeviceRegistrationComponent implements AfterViewInit, OnDestroy {
    private tenantUIService;
    private tenantService;
    private registerDeviceService;
    private inventoryService;
    private cd;
    bsModalRef: BsModalRef;
    readonly MANAGEMENT = "management";
    readonly FILTER: object;
    form: FormGroup;
    model: {
        devicesToCreate: GeneralDeviceRegistrationModelType[];
    };
    options: FormlyFormOptions;
    isLoading$: Observable<boolean>;
    success: IDeviceRegistration[];
    failed: IDeviceRegistration[];
    fields: FormlyFieldConfig[];
    private destroy$;
    private lastCreatedDevices;
    constructor(tenantUIService: TenantUiService, tenantService: TenantService, registerDeviceService: RegisterDeviceService, inventoryService: InventoryService, cd: ChangeDetectorRef, bsModalRef: BsModalRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    create(eventObject: {
        stepper: C8yStepper;
        step: CdkStep;
    }): void;
    fixErrors(event: {
        stepper: C8yStepper;
        step: CdkStep;
    }, failedRequests: IDeviceRegistration[]): void;
    private canLoadTenants$;
    private getTenants$;
    private getGroups$;
}
export {};
