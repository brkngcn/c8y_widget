import { IManagedObject, InventoryService, QueriesUtil, UserService } from '@c8y/client';
import { ActionControl, AlertService, BulkActionControl, Column, GainsightService, GridConfig, HeaderActionControl, ModalService, Pagination, UserPreferencesService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { ColumnUtilService } from './columns/column-util.service';
import { DeviceGridColumn } from './device-grid.model';
import * as ɵngcc0 from '@angular/core';
export declare class DeviceGridService {
    protected inventoryService: InventoryService;
    protected userService: UserService;
    protected translateService: TranslateService;
    protected alertService: AlertService;
    protected modal: ModalService;
    protected columnUtilService: ColumnUtilService;
    protected userPreferencesService: UserPreferencesService;
    protected gainsightService?: GainsightService;
    protected queriesUtil: QueriesUtil;
    protected GRID_CONFIG_DEFAULT_STORAGE_KEY: string;
    protected DEFAULT_PAGE_SIZE: number;
    constructor(inventoryService: InventoryService, userService: UserService, translateService: TranslateService, alertService: AlertService, modal: ModalService, columnUtilService: ColumnUtilService, userPreferencesService: UserPreferencesService, gainsightService?: GainsightService);
    getDefaultColumns(): DeviceGridColumn[];
    getChildDeviceGridColumns(): DeviceGridColumn[];
    getDefaultPagination(): Pagination;
    getInfiniteScrollPagination(): Pagination;
    getDefaultActionControls(): ActionControl[];
    getDefaultBulkActionControls(): BulkActionControl[];
    getDefaultHeaderActionControls(): HeaderActionControl[];
    getProperName(device: IManagedObject): string;
    getModel(device: IManagedObject): string;
    getSerialNumber(device: IManagedObject): string;
    getParentsNames(device: IManagedObject, featuredParentId?: string | number): string;
    getHref(groupOrDevice: IManagedObject, prefix?: string): string;
    getAlarmsHref(device: IManagedObject): string;
    /**
     * @deprecated Use getUserConfiguredColumns$(Column[] | Observable<Column[]>, string) instead.
     */
    getUserConfiguredColumns(columns: Column[], storageKey?: string): Column[];
    getUserConfiguredColumns$(columns: Column[] | Observable<Column[]>, storageKey?: string): Observable<Column[]>;
    delete(device: IManagedObject): Promise<void>;
    getData(columns: DeviceGridColumn[], pagination: Pagination, query?: any, withChildren?: boolean): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getChildDeviceData(columns: DeviceGridColumn[], pagination: Pagination, query: any, withChildren: boolean, id: string): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getCount(columns: DeviceGridColumn[], pagination: Pagination, query?: any): Promise<number>;
    getCountChildDevices(columns: DeviceGridColumn[], pagination: Pagination, query: any, id: string): Promise<number>;
    getTotalChildDevices(query: any, id: string): Promise<number>;
    getTotal(query?: any): Promise<number>;
    getDeviceQueryString(columns: DeviceGridColumn[], query: any): string;
    getQueryObj(columns: DeviceGridColumn[], defaultFilter?: {}): any;
    /**
     * @deprecated Use getConfig$(key: string): Observable<GridConfig> instead.
     */
    getConfig(key?: string): GridConfig;
    /**
     * @deprecated Use saveConfig$(config: GridConfig, key: string): Promise<GridConfig> instead.
     */
    saveConfig(config: GridConfig, key?: string): void;
    clearConfig(key?: string): void;
    getConfig$(key?: string): Observable<GridConfig>;
    saveConfig$(config: GridConfig, key?: string): Observable<GridConfig>;
    protected applyConfigToColumns(config: GridConfig, columns: Column[], storageKey?: string): Column[];
    private getConfig2;
    private getHardware;
    private isVendme;
    private getDevicesFilters;
    private extendQueryByColumn;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DeviceGridService, [null, null, null, null, null, null, null, { optional: true; }]>;
}

//# sourceMappingURL=device-grid.service.d.ts.map