import { CustomColumnConfig, GridConfig, UserPreferencesService } from '@c8y/ngx-components';
import { Observable } from 'rxjs';
import { DeviceGridService } from './device-grid.service';
import * as ɵngcc0 from '@angular/core';
interface LegacyColumnConfig {
    key: string;
    headerName: string;
    active: boolean;
    custom: boolean;
    fragmentPath: string;
}
interface LegacyColumnFilterConfig {
    [key: string]: {
        filtering: object;
        sorting: {
            order: number;
        };
    };
}
export declare class DeviceGridConfigMapperService {
    private userPreferencesService;
    private deviceGridService;
    static deviceGridLegacyKeyToName: {
        status: string;
        name: string;
        model: string;
        serialNumber: string;
        group: string;
        registrationDate: string;
        systemId: string;
        imei: string;
        alarms: string;
    };
    constructor(userPreferencesService: UserPreferencesService, deviceGridService: DeviceGridService);
    getMappedGridConfig(key?: string): Observable<GridConfig>;
    mapLegacyToDeviceGridConfig(legacyConfig: LegacyColumnConfig[], legacyFilterConfig: LegacyColumnFilterConfig): GridConfig;
    getConfigColumns(legacyConfig: LegacyColumnConfig[], legacyFilterConfig: LegacyColumnFilterConfig): any;
    mergeLegacyConfigs(columnConfig: any, filterConfig: any): any;
    mapLegacyColumnConfig(legacy: any): CustomColumnConfig;
    migrateSortOrder(sorting: any): "asc" | "desc" | "";
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DeviceGridConfigMapperService, never>;
}
export {};

//# sourceMappingURL=device-grid-config-mapper.service.d.ts.map