import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { IManagedObject, InventoryService } from '@c8y/client';
import { AlertService, ContextData, ModalService, NavigatorService, Permissions, Tab, TabsService, Widget } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { ContextDashboard, ContextDashboardManagedObject, ContextDashboardType, DashboardContext, DashboardCopyClipboard } from './context-dashboard.model';
import * as ɵngcc0 from '@angular/core';
export declare class ContextDashboardService {
    private inventory;
    private tabs;
    private modal;
    private translateService;
    private router;
    private navigator;
    private permissions;
    private alert;
    readonly REPORT_PARTIAL_NAME = "report_";
    copyClipboard: DashboardCopyClipboard;
    private cache;
    private readonly DEFAULT_PAGESIZE;
    private readonly FRAGMENT_NAME;
    private readonly DASHBOARD_ROUTE_PATH;
    private readonly INDEX_SPLIT;
    private _formDisabled;
    get formDisabled(): boolean;
    set formDisabled(value: boolean);
    constructor(inventory: InventoryService, tabs: TabsService, modal: ModalService, translateService: TranslateService, router: Router, navigator: NavigatorService, permissions: Permissions, alert: AlertService);
    create(dashboardCfg: ContextDashboard, context?: ContextData, name?: string): Promise<ContextDashboardManagedObject>;
    detail(dashboardMO: ContextDashboardManagedObject): Promise<IManagedObject>;
    update(dashboard: ContextDashboardManagedObject): Promise<IManagedObject>;
    delete(dashboard: ContextDashboardManagedObject, withConfirmation?: boolean): Promise<void>;
    activateDashboards(route: ActivatedRouteSnapshot, types: ContextDashboardType[]): Observable<boolean | Tab[]>;
    getNamedDashboardOrCreate(name: string, defaultWidgets: Widget[], context?: ContextData): Observable<ContextDashboardManagedObject>;
    refreshTabs(dashboardMO: ContextDashboardManagedObject): Promise<void>;
    updateNavigatorItem(mo: IManagedObject): void;
    navigateToDashboard(dashboardMO: ContextDashboardManagedObject): Promise<void>;
    canEditDashboard(mo: any): Promise<boolean>;
    isNamed(dashboard: Partial<ContextDashboardManagedObject>): any;
    isReport(dashboard: Partial<ContextDashboardManagedObject>): any;
    isDeviceType(dashboard: Partial<ContextDashboardManagedObject>): any;
    isDeviceDashboard(dashboard: Partial<ContextDashboardManagedObject>): boolean;
    isGroupDashboard(dashboard: Partial<ContextDashboardManagedObject>): boolean;
    getFilteredDashboardStyles(styleList: string[]): string[];
    getStyling(styleList: any, styleName: any, defaultValue: any): any;
    mapWidgets(widgets: Widget[]): any;
    getDashboard$(dashboardIdOrName: any, dashboardType: ContextDashboardType[], mo?: IManagedObject): Observable<ContextDashboardManagedObject>;
    pasteDashboard(newContext: DashboardContext): Promise<void>;
    private canPasteDashboard;
    private createContextDashboardCopy;
    private copyProperties;
    private replaceContextInDataPoints;
    private replaceContextInObj;
    private getTabs$;
    private getContextDashboards$;
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    private removeDashboardMoProperty;
    private cacheDashboard;
    private createDashboardTab;
    private clean;
    private getNamedDashboard;
    private getContextDashboards;
    private createDashboardFragment;
    private getDashboardTypeFromViewContext;
    private createFragmentKey;
    private shouldSetGlobal;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ContextDashboardService, never>;
}

//# sourceMappingURL=context-dashboard.service.d.ts.map