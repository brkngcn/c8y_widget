import { FormlyFieldConfig } from '@ngx-formly/core';
import { C8yStepper } from '@c8y/ngx-components';
import { FormGroup } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { CdkStep } from '@angular/cdk/stepper';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { SigfoxProviderService } from './sigfox-provider.service';
import { SigfoxDevice, SigfoxDeviceFormly } from './sigfox-device-registration.model';
import { TranslateService } from '@ngx-translate/core';
declare type State = 'loadPending' | 'loadSuccess' | 'loadError' | 'registrationPending' | 'registrationSuccess' | 'registrationError';
export declare class SigfoxDeviceRegistrationComponent {
    bsModalRef: BsModalRef;
    private sigfoxService;
    private translateService;
    stepper: C8yStepper;
    readonly PAGING: object;
    form: FormGroup;
    model: SigfoxDeviceFormly;
    protocols$: import("rxjs").Observable<import("@c8y/client").IResultList<import("@c8y/client").IManagedObject>>;
    connections$: import("rxjs").Observable<{
        res: import("@c8y/client").IFetchResponse;
        data: any;
    }>;
    unsubscribe$: Subject<void>;
    load$: import("rxjs").Observable<any[]>;
    fields: FormlyFieldConfig[];
    registrationStepLabels: {
        next: any;
    };
    finalStepLabels: {
        back: any;
    };
    state: State;
    errors$: BehaviorSubject<Error[]>;
    errorMessages$: import("rxjs").Observable<any>;
    constructor(bsModalRef: BsModalRef, sigfoxService: SigfoxProviderService, translateService: TranslateService);
    create(event: {
        stepper: C8yStepper;
        step: CdkStep;
    }): Promise<void>;
    getSigfoxDeviceToSend(): SigfoxDevice;
    getContracts$(name: any): import("rxjs").Observable<import("@c8y/client").IResultList<any>>;
    getProtocols$(): import("rxjs").Observable<import("@c8y/client").IResultList<import("@c8y/client").IManagedObject>>;
    getConnections$(): import("rxjs").Observable<{
        res: import("@c8y/client").IFetchResponse;
        data: any;
    }>;
    ngOnDestroy(): void;
}
export {};
