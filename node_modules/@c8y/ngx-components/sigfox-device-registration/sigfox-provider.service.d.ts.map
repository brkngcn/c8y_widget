{"version":3,"file":"sigfox-provider.service.d.ts","sources":["sigfox-provider.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ApplicationService, FetchClient, IManagedObject, InventoryService, IResult, IResultList, TenantOptionsService } from '@c8y/client';\nimport { SigfoxDevice } from './sigfox-device-registration.model';\nimport { TranslateService } from '@ngx-translate/core';\nexport declare enum ErrorName {\n    NoDeviceProtocolsError = \"NoDeviceProtocolsError\",\n    NoConnectivitySettingsError = \"NoConnectivitySettingsError\",\n    ContractError = \"ContractError\",\n    NoContractsError = \"NoContractsError\",\n    RegistrationError = \"RegistrationError\",\n    DeviceProtocolsFetchError = \"DeviceProtocolsFetchError\"\n}\nexport declare class SigfoxProviderService {\n    private client;\n    private inventoryService;\n    private tenantOptions;\n    private translateService;\n    private applicationService;\n    private readonly baseUrl;\n    private readonly registrationUrl;\n    private readonly contractsUrl;\n    private readonly header;\n    constructor(client: FetchClient, inventoryService: InventoryService, tenantOptions: TenantOptionsService, translateService: TranslateService, applicationService: ApplicationService);\n    getConnections(): Promise<{\n        res: import(\"@c8y/client\").IFetchResponse;\n        data: any;\n    }>;\n    /**\n     * Gets contracts from Sigfox platform.\n     * @param connectionName The name of connection for which contracts will be retrieved\n     * @returns The result list with contract, or throws an error with exception.\n     */\n    getContracts(connectionName: string): Promise<IResultList<any>>;\n    createDevice(device: SigfoxDevice): Promise<IResult<SigfoxDevice>>;\n    getAvailableProtocols(filter?: object): Promise<IResultList<IManagedObject>>;\n    hasConnectivitySettings(): Promise<boolean>;\n    private throwNoConnectivitySettingsError;\n    private throwRegistrationError;\n    private throwDeviceProtocolsFetchError;\n    private throwNoDeviceProtocolsError;\n    private throwContractError;\n    private throwNoContractsError;\n}\n"]}