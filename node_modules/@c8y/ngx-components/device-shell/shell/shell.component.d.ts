import { OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { IManagedObject, IOperation, IResultList, OperationService } from '@c8y/client';
import { AlertService, ManagedObjectRealtimeService, OperationRealtimeService } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Observable } from 'rxjs';
import { Command, DeliveryType, DeviceShellService } from '../shared';
import * as ɵngcc0 from '@angular/core';
export declare class DeviceShellComponent implements OnInit, OnDestroy {
    service: DeviceShellService;
    operationRealtime: OperationRealtimeService;
    private moRealtime;
    private operationService;
    private route;
    private modalService;
    private alertService;
    device: IManagedObject;
    device$: Observable<IManagedObject>;
    deliveryTypes: Array<DeliveryType & {
        isSupportedByCommand?: boolean;
    }>;
    command: Command;
    smsEnabled: boolean;
    sendingCommand$: BehaviorSubject<boolean>;
    operations: IResultList<IOperation>;
    filterPipe: import("rxjs").UnaryFunction<Observable<IOperation[]>, Observable<IOperation[]>>;
    executeViaLabel: any;
    private destroyed$;
    constructor(service: DeviceShellService, operationRealtime: OperationRealtimeService, moRealtime: ManagedObjectRealtimeService, operationService: OperationService, route: ActivatedRoute, modalService: BsModalService, alertService: AlertService);
    ngOnInit(): Promise<void>;
    getPredefinedCommand(): void;
    resetSupportedDeliveryTypes(): void;
    execute(commandDeliveryType: any): Promise<void>;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DeviceShellComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DeviceShellComponent, "c8y-device-shell", never, {}, {}, never, never>;
}

//# sourceMappingURL=shell.component.d.ts.map