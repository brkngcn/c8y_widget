{"version":3,"file":"asset-selector.component.d.ts","sources":["asset-selector.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { IIdentified, IManagedObject, InventoryService } from '@c8y/client';\nimport { GroupNodeService } from './group-node.service';\nimport { AssetSelectorService } from './asset-selector.service';\nimport { GroupNode } from './group-node';\nimport { AssetSelectionChangeEvent, AssetSelectorOptions } from './asset-selector.model';\nimport { AssetSelectorBase } from './asset-selector-base';\nimport { Subject } from 'rxjs';\n/**\n * Displays a hierarchical tree selector for assets.\n */\nexport declare class AssetSelectorComponent extends AssetSelectorBase implements OnInit {\n    protected groupNodeService: GroupNodeService;\n    protected inventory: InventoryService;\n    protected assetSelectorService: AssetSelectorService;\n    protected cd: ChangeDetectorRef;\n    /**\n     * Config object containing all options for the asset selector.\n     */\n    config: AssetSelectorOptions;\n    /**\n     * Defines the node, which should be displayed as active.\n     */\n    active: GroupNode;\n    /**\n     * Used only for miller-view, displays the column level for the current node.\n     * E.g if the index is one, this will be second column.\n     */\n    index: number;\n    /**\n     * The asset to use as root.\n     */\n    asset: IIdentified;\n    /**\n     * The selected device.\n     */\n    selectedDevice: IManagedObject;\n    /**\n     * An array of predefined nodes.\n     */\n    selected: Array<Partial<IManagedObject>> | IIdentified[] | IIdentified;\n    /**\n     * The node to use as root. You can either set this, or the asset to start from.\n     */\n    rootNode: GroupNode;\n    /**\n     * All currently selected assets.\n     */\n    selectedItems: IIdentified[] | IIdentified;\n    container: '' | 'body';\n    /**\n     * Emits if one item was selected (all currently selected nodes).\n     */\n    onSelected: EventEmitter<AssetSelectionChangeEvent>;\n    /**\n     * Used only for miller view. Emit the selected node and use it as a 'rootNode' for the new column.\n     */\n    onRowSelected: EventEmitter<any>;\n    /**\n     * Emits the current loading state of the node.\n     */\n    onLoad: EventEmitter<any>;\n    /**\n     * The current filter applied.\n     */\n    filterText: string;\n    /**\n     * Displays the global search at all times if the miller view is used\n     * on root group level.\n     */\n    root: boolean;\n    /**\n     * @ignore\n     */\n    unsubscribe$: Subject<any>;\n    /**\n     * @ignore only DI\n     */\n    constructor(groupNodeService: GroupNodeService, inventory: InventoryService, assetSelectorService: AssetSelectorService, cd: ChangeDetectorRef);\n    /**\n     * Checks when a node was selected, if a new column needs to be added.\n     * @param node The node that was clicked.\n     * @param index The current index of this node.\n     * @returns True if the click was handled and a new column was added.\n     */\n    handleNextMillerViewColumn(node: GroupNode, index: number): boolean;\n    /**\n     * @ignore\n     */\n    ngOnInit(): Promise<void>;\n    ngOnChanges(changes: SimpleChanges): Promise<void>;\n    /**\n     * Changes the current root to one level back.\n     */\n    back(): void;\n    /**\n     * Clears the current filter.\n     */\n    clearFilters(): void;\n    clearSelectedDevices(): void;\n    isGroupSelected(): boolean;\n    groupNameFilter(nameFilter: string, moId: any, showUnassignedDevices?: boolean): string;\n    /**\n     * Applies a filter.\n     * @param filter The filter to apply.\n     */\n    applyFilter(filter: string): Promise<void>;\n    /**\n     * Check if the UnassignedDevice node is the rootNode.\n     */\n    isUnassignedDevicesNode(): boolean;\n    /**\n     * Called when the user resets the search result.\n     */\n    onSearchResultReset(term: string): void;\n    /**\n     * Called if the user clicks on a search result.\n     */\n    onSearchResultClick(mo: IManagedObject): Promise<void>;\n}\n"]}