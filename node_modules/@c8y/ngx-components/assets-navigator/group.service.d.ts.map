{"version":3,"file":"group.service.d.ts","sources":["group.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { IManagedObject } from '@c8y/client';\nimport { AssetTypesService } from '@c8y/ngx-components';\nexport declare const MO_TYPES: readonly [\"asset\", \"dynamicGroup\", \"brokerSource\", \"brokerSourceInactive\", \"group\", \"other\"];\nexport declare type MoTypes = typeof MO_TYPES[number];\nexport declare class DeviceGroupService {\n    protected assetTypesService: AssetTypesService;\n    readonly icons: {\n        brokerSourceInactive: {\n            icon: string;\n            iconOpen: string;\n        };\n        brokerSource: {\n            icon: string;\n            iconOpen: string;\n        };\n        group: {\n            icon: string;\n            iconOpen: string;\n        };\n        dynamicGroup: {\n            icon: string;\n            iconOpen: string;\n        };\n        other: {\n            icon: string;\n            iconClass: string;\n        };\n    };\n    dataBrokerSourceFragmentInactive: string;\n    constructor(assetTypesService: AssetTypesService);\n    /**\n     * Finds an icon based on the contents of a managed object.\n     * It takes into account factors such as type, and specific fragemnts.\n     * @param mo Managed object to be checked.\n     * @param open Determines whether the method should return an alternative icon showing the open state.\n     * @returns Returns an icon.\n     */\n    icon(mo: IManagedObject, open?: boolean): string;\n    /**\n     * Checks whether a given managed object is a group.\n     * @param mo Managed object to be checked.\n     * @returns Returns true if the managed object is a group.\n     */\n    isGroup(mo: IManagedObject): boolean;\n    /**\n     * Checks whether a given managed object is a dynamic group.\n     * @param mo Managed object to be checked.\n     * @returns Returns true if the managed object is a dynamic group.\n     */\n    isDynamicGroup(mo: IManagedObject): boolean;\n    /**\n     * Checks whether a given managed object is a data broker.\n     * @param mo Managed object to be checked.\n     * @returns Returns true if the managed object is a data broker.\n     */\n    isDataBroker(mo: IManagedObject): boolean;\n    /**\n     * Checks whether a given managed object is a data broker active.\n     * @param mo Managed object to be checked.\n     * @returns Returns true if the managed object is a data broker active.\n     */\n    isDataBrokerActive(mo: IManagedObject): boolean;\n    /**\n     * Checks whether a given managed object is an asset.\n     * @param mo Managed object to be checked.\n     * @returns Returns true if the managed object is an asset.\n     */\n    isAsset(mo: IManagedObject): boolean;\n    /**\n     * Checks whether the object belongs to any type of group.\n     * Types of groups: group, dynamic group, data broker, data broker active.\n     * @param mo Managed object to be checked.\n     * @returns Returns true if the managed object belongs to the group category.\n     */\n    isAnyGroup(mo: IManagedObject): boolean;\n    /**\n     * Checks whether a given managed object is a device.\n     * @param mo Managed object to be checked.\n     * @returns Returns true if the managed object is a device.\n     */\n    isDevice(mo: IManagedObject): boolean;\n    private getAssetCustomIcon;\n    private getDefaultIcon;\n    private determineMoType;\n}\n"]}