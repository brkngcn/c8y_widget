import { InventoryService, QueriesUtil, UserService, IManagedObject, IResult } from '@c8y/client';
import { AlertService, BreadcrumbService, ModalService, NavigatorNode, AppStateService, NavigatorNodeData, OptionsService } from '@c8y/ngx-components';
import { ApiService } from '@c8y/ngx-components/api';
import { AssetNode } from './asset-node';
import { AssetNavigatorConfig } from './asset-node-config.model';
import { DynamicGroupNode } from './dynamic-group-node';
import { GroupFragment } from './group-fragment.model';
import { DeviceGroupService } from './group.service';
export interface AssetNodeMo {
    id: string;
    type: string;
}
export declare class AssetNodeService {
    inventory: InventoryService;
    apiService: ApiService;
    modal: ModalService;
    alert: AlertService;
    protected breadcrumbService: BreadcrumbService;
    protected user: UserService;
    protected appState: AppStateService;
    protected optionsService: OptionsService;
    moduleConfig: AssetNavigatorConfig;
    protected deviceGroupService: DeviceGroupService;
    rootNode: AssetNode;
    firstUrl: boolean;
    draggedData: AssetNode;
    queriesUtil: QueriesUtil;
    protected PAGE_SIZE: number;
    constructor(inventory: InventoryService, apiService: ApiService, modal: ModalService, alert: AlertService, breadcrumbService: BreadcrumbService, user: UserService, appState: AppStateService, optionsService: OptionsService, moduleConfig: AssetNavigatorConfig, deviceGroupService: DeviceGroupService);
    icon(mo: IManagedObject, open?: boolean): string;
    isGroup(mo: IManagedObject): boolean;
    isDynamicGroup(mo: IManagedObject): boolean;
    isDataBroker(mo: IManagedObject): boolean;
    isDataBrokerActive(mo: IManagedObject): boolean;
    isAsset(mo: IManagedObject): boolean;
    isAnyGroup(mo: IManagedObject): boolean;
    isDevice(mo: IManagedObject): boolean;
    createRootNode(config?: NavigatorNodeData): AssetNode;
    createDynamicGroupNode(config: any): DynamicGroupNode;
    createAssetNode(config: Partial<AssetNode>): AssetNode;
    createChildNode(managedObject: any, config: Partial<AssetNode>): AssetNode | DynamicGroupNode;
    getRootNodes(customFilter?: any): Promise<any>;
    getAllInventories(customFilter?: any): Promise<any>;
    getGroupItems(moId: string, extraFilter?: object, withChildren?: boolean, filterQuery?: string): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getUnassignedDevices(withChildren?: boolean, filterQuery?: string): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getDynamicGroupItems(groupQuery: string, filterObj?: any): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getDeviceChildren(moId: string, extraFilter?: object, filterQuery?: string, withChildren?: boolean): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getUnassignedDevicesQueryStr(filterQuery: any): string;
    groupQueryFilter(moId: string, filterQuery?: string): string;
    navRootQueryFilter(): {
        __filter: {
            type: GroupFragment;
            __has?: undefined;
        };
        __orderby: any[];
    } | {
        __filter: {
            __has: GroupFragment;
            type?: undefined;
        };
        __orderby: any[];
    };
    rootQueryFilter(): {
        __filter: {
            type: GroupFragment;
            __has?: undefined;
        };
        __orderby: any[];
    } | {
        __filter: {
            __has: GroupFragment;
            type?: undefined;
        };
        __orderby: any[];
    };
    onUpdate({ mo, root }: {
        mo: any;
        root: any;
    }): import("rxjs").Observable<any>;
    isNewManagedObjectRoot(response?: Partial<IResult<IManagedObject>>): boolean;
    /**
     * Check if it is possible to drop a node after dragging.
     * @param dropOnRoot Is the drop performed on the root node
     */
    canDropNode(dropOnRoot: boolean): boolean;
    /**
     * There could be multiple breadcrumbs for devices,
     * so we set a preferred one on click on a device.
     * @param parents The parent nodes of the device to select the prefered one.
     */
    preferBreadcrumb(parents: NavigatorNode[]): void;
    protected createFilter(extraParams?: any): any;
    private buildCombinedQuery;
}
